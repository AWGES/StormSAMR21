
EXAMPLES_MQTT-EXAMPLE1_6_2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00013914  00000000  00000000  00008000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000238  20000000  00013914  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000330c  20000238  00013b4c  00020238  2**2
                  ALLOC
  3 .stack        00002004  20003544  00016e58  00020238  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  00020238  2**0
                  CONTENTS, READONLY
  5 .comment      0000005b  00000000  00000000  00020260  2**0
                  CONTENTS, READONLY
  6 .debug_info   0006d4db  00000000  00000000  000202bb  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000e03f  00000000  00000000  0008d796  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    0001c879  00000000  00000000  0009b7d5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00001cc0  00000000  00000000  000b804e  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00002108  00000000  00000000  000b9d0e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  00033d7b  00000000  00000000  000bbe16  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   000469c3  00000000  00000000  000efb91  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00094b0d  00000000  00000000  00136554  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  0000529c  00000000  00000000  001cb064  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <_sfixed>:
    config_adc.positive_input = SAMD20_SENSOR_ADC_TEMP;
    adc_init(&adc_instance, ADC, &config_adc);
    first_init = 1;
  }
#endif
}
       0:	20005548 	.word	0x20005548
       4:	00002761 	.word	0x00002761
       8:	0000275d 	.word	0x0000275d
       c:	0000275d 	.word	0x0000275d
	...
      2c:	0000275d 	.word	0x0000275d
	...
      38:	0000275d 	.word	0x0000275d
      3c:	0000275d 	.word	0x0000275d
      40:	0000275d 	.word	0x0000275d
      44:	0000275d 	.word	0x0000275d
      48:	00002741 	.word	0x00002741
      4c:	00000709 	.word	0x00000709
      50:	0000042d 	.word	0x0000042d
      54:	0000275d 	.word	0x0000275d
      58:	0000275d 	.word	0x0000275d
      5c:	0000275d 	.word	0x0000275d
      60:	0000275d 	.word	0x0000275d
      64:	000010c5 	.word	0x000010c5
      68:	000010d5 	.word	0x000010d5
      6c:	000010e5 	.word	0x000010e5
      70:	000010f5 	.word	0x000010f5
      74:	00001105 	.word	0x00001105
      78:	00001115 	.word	0x00001115
      7c:	0000275d 	.word	0x0000275d
      80:	0000275d 	.word	0x0000275d
      84:	0000275d 	.word	0x0000275d
      88:	000026f9 	.word	0x000026f9
      8c:	00002709 	.word	0x00002709
      90:	00002719 	.word	0x00002719
      94:	0000275d 	.word	0x0000275d
      98:	0000275d 	.word	0x0000275d
      9c:	0000275d 	.word	0x0000275d
      a0:	0000275d 	.word	0x0000275d
      a4:	0000275d 	.word	0x0000275d
      a8:	0000275d 	.word	0x0000275d
      ac:	0000275d 	.word	0x0000275d

000000b0 <__do_global_dtors_aux>:
      b0:	b510      	push	{r4, lr}
      b2:	4c06      	ldr	r4, [pc, #24]	; (cc <__do_global_dtors_aux+0x1c>)
      b4:	7823      	ldrb	r3, [r4, #0]
      b6:	2b00      	cmp	r3, #0
      b8:	d107      	bne.n	ca <__do_global_dtors_aux+0x1a>
      ba:	4b05      	ldr	r3, [pc, #20]	; (d0 <__do_global_dtors_aux+0x20>)
      bc:	2b00      	cmp	r3, #0
      be:	d002      	beq.n	c6 <__do_global_dtors_aux+0x16>
      c0:	4804      	ldr	r0, [pc, #16]	; (d4 <__do_global_dtors_aux+0x24>)
      c2:	e000      	b.n	c6 <__do_global_dtors_aux+0x16>
      c4:	bf00      	nop
      c6:	2301      	movs	r3, #1
      c8:	7023      	strb	r3, [r4, #0]
      ca:	bd10      	pop	{r4, pc}
      cc:	20000238 	.word	0x20000238
      d0:	00000000 	.word	0x00000000
      d4:	00013914 	.word	0x00013914

000000d8 <frame_dummy>:
      d8:	b508      	push	{r3, lr}
      da:	4b08      	ldr	r3, [pc, #32]	; (fc <frame_dummy+0x24>)
      dc:	2b00      	cmp	r3, #0
      de:	d003      	beq.n	e8 <frame_dummy+0x10>
      e0:	4807      	ldr	r0, [pc, #28]	; (100 <frame_dummy+0x28>)
      e2:	4908      	ldr	r1, [pc, #32]	; (104 <frame_dummy+0x2c>)
      e4:	e000      	b.n	e8 <frame_dummy+0x10>
      e6:	bf00      	nop
      e8:	4807      	ldr	r0, [pc, #28]	; (108 <frame_dummy+0x30>)
      ea:	6803      	ldr	r3, [r0, #0]
      ec:	2b00      	cmp	r3, #0
      ee:	d100      	bne.n	f2 <frame_dummy+0x1a>
      f0:	bd08      	pop	{r3, pc}
      f2:	4b06      	ldr	r3, [pc, #24]	; (10c <frame_dummy+0x34>)
      f4:	2b00      	cmp	r3, #0
      f6:	d0fb      	beq.n	f0 <frame_dummy+0x18>
      f8:	4798      	blx	r3
      fa:	e7f9      	b.n	f0 <frame_dummy+0x18>
      fc:	00000000 	.word	0x00000000
     100:	00013914 	.word	0x00013914
     104:	2000023c 	.word	0x2000023c
     108:	00013914 	.word	0x00013914
     10c:	00000000 	.word	0x00000000

00000110 <delay_init>:
 *
 * This must be called during start up to initialize the delay routine with
 * the current used main clock. It must run any time the main CPU clock is changed.
 */
void delay_init(void)
{
     110:	b510      	push	{r4, lr}
	cycles_per_ms = system_gclk_gen_get_hz(0);
     112:	2000      	movs	r0, #0
     114:	4b08      	ldr	r3, [pc, #32]	; (138 <delay_init+0x28>)
     116:	4798      	blx	r3
	cycles_per_ms /= 1000;
     118:	4c08      	ldr	r4, [pc, #32]	; (13c <delay_init+0x2c>)
     11a:	21fa      	movs	r1, #250	; 0xfa
     11c:	0089      	lsls	r1, r1, #2
     11e:	47a0      	blx	r4
     120:	4b07      	ldr	r3, [pc, #28]	; (140 <delay_init+0x30>)
     122:	6018      	str	r0, [r3, #0]
	cycles_per_us = cycles_per_ms / 1000;
     124:	21fa      	movs	r1, #250	; 0xfa
     126:	0089      	lsls	r1, r1, #2
     128:	47a0      	blx	r4
     12a:	4b06      	ldr	r3, [pc, #24]	; (144 <delay_init+0x34>)
     12c:	6018      	str	r0, [r3, #0]

	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
     12e:	2205      	movs	r2, #5
     130:	4b05      	ldr	r3, [pc, #20]	; (148 <delay_init+0x38>)
     132:	601a      	str	r2, [r3, #0]
}
     134:	bd10      	pop	{r4, pc}
     136:	46c0      	nop			; (mov r8, r8)
     138:	00002075 	.word	0x00002075
     13c:	0001076d 	.word	0x0001076d
     140:	20000004 	.word	0x20000004
     144:	20000000 	.word	0x20000000
     148:	e000e010 	.word	0xe000e010

0000014c <delay_cycles_us>:
 *
 * \param n  Number of microseconds to wait
 */
void delay_cycles_us(
		uint32_t n)
{
     14c:	b530      	push	{r4, r5, lr}
	while (n--) {
		/* Devide up to blocks of 10u */
		delay_cycles(cycles_per_us);
     14e:	4b08      	ldr	r3, [pc, #32]	; (170 <delay_cycles_us+0x24>)
     150:	681c      	ldr	r4, [r3, #0]
 */
static inline void delay_cycles(
		const uint32_t n)
{
	if (n > 0) {
		SysTick->LOAD = n;
     152:	4a08      	ldr	r2, [pc, #32]	; (174 <delay_cycles_us+0x28>)
		SysTick->VAL = 0;
     154:	2500      	movs	r5, #0

		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     156:	2180      	movs	r1, #128	; 0x80
     158:	0249      	lsls	r1, r1, #9
 * \param n  Number of microseconds to wait
 */
void delay_cycles_us(
		uint32_t n)
{
	while (n--) {
     15a:	e006      	b.n	16a <delay_cycles_us+0x1e>
 * \param n  Number of cycles to delay
 */
static inline void delay_cycles(
		const uint32_t n)
{
	if (n > 0) {
     15c:	2c00      	cmp	r4, #0
     15e:	d004      	beq.n	16a <delay_cycles_us+0x1e>
		SysTick->LOAD = n;
     160:	6054      	str	r4, [r2, #4]
		SysTick->VAL = 0;
     162:	6095      	str	r5, [r2, #8]

		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     164:	6813      	ldr	r3, [r2, #0]
     166:	420b      	tst	r3, r1
     168:	d0fc      	beq.n	164 <delay_cycles_us+0x18>
     16a:	3801      	subs	r0, #1
     16c:	d2f6      	bcs.n	15c <delay_cycles_us+0x10>
		/* Devide up to blocks of 10u */
		delay_cycles(cycles_per_us);
	}
}
     16e:	bd30      	pop	{r4, r5, pc}
     170:	20000000 	.word	0x20000000
     174:	e000e010 	.word	0xe000e010

00000178 <delay_cycles_ms>:
 *
 * \param n  Number of milliseconds to wait
 */
void delay_cycles_ms(
		uint32_t n)
{
     178:	b530      	push	{r4, r5, lr}
	while (n--) {
		/* Devide up to blocks of 1ms */
		delay_cycles(cycles_per_ms);
     17a:	4b08      	ldr	r3, [pc, #32]	; (19c <delay_cycles_ms+0x24>)
     17c:	681c      	ldr	r4, [r3, #0]
 */
static inline void delay_cycles(
		const uint32_t n)
{
	if (n > 0) {
		SysTick->LOAD = n;
     17e:	4a08      	ldr	r2, [pc, #32]	; (1a0 <delay_cycles_ms+0x28>)
		SysTick->VAL = 0;
     180:	2500      	movs	r5, #0

		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     182:	2180      	movs	r1, #128	; 0x80
     184:	0249      	lsls	r1, r1, #9
 * \param n  Number of milliseconds to wait
 */
void delay_cycles_ms(
		uint32_t n)
{
	while (n--) {
     186:	e006      	b.n	196 <delay_cycles_ms+0x1e>
 * \param n  Number of cycles to delay
 */
static inline void delay_cycles(
		const uint32_t n)
{
	if (n > 0) {
     188:	2c00      	cmp	r4, #0
     18a:	d004      	beq.n	196 <delay_cycles_ms+0x1e>
		SysTick->LOAD = n;
     18c:	6054      	str	r4, [r2, #4]
		SysTick->VAL = 0;
     18e:	6095      	str	r5, [r2, #8]

		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     190:	6813      	ldr	r3, [r2, #0]
     192:	420b      	tst	r3, r1
     194:	d0fc      	beq.n	190 <delay_cycles_ms+0x18>
     196:	3801      	subs	r0, #1
     198:	d2f6      	bcs.n	188 <delay_cycles_ms+0x10>
		/* Devide up to blocks of 1ms */
		delay_cycles(cycles_per_ms);
	}
}
     19a:	bd30      	pop	{r4, r5, pc}
     19c:	20000004 	.word	0x20000004
     1a0:	e000e010 	.word	0xe000e010

000001a4 <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
     1a4:	4b0c      	ldr	r3, [pc, #48]	; (1d8 <cpu_irq_enter_critical+0x34>)
     1a6:	681b      	ldr	r3, [r3, #0]
     1a8:	2b00      	cmp	r3, #0
     1aa:	d110      	bne.n	1ce <cpu_irq_enter_critical+0x2a>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
     1ac:	f3ef 8310 	mrs	r3, PRIMASK
		if (cpu_irq_is_enabled()) {
     1b0:	2b00      	cmp	r3, #0
     1b2:	d109      	bne.n	1c8 <cpu_irq_enter_critical+0x24>
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
     1b4:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
     1b6:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
     1ba:	2200      	movs	r2, #0
     1bc:	4b07      	ldr	r3, [pc, #28]	; (1dc <cpu_irq_enter_critical+0x38>)
     1be:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
     1c0:	3201      	adds	r2, #1
     1c2:	4b07      	ldr	r3, [pc, #28]	; (1e0 <cpu_irq_enter_critical+0x3c>)
     1c4:	701a      	strb	r2, [r3, #0]
     1c6:	e002      	b.n	1ce <cpu_irq_enter_critical+0x2a>
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
     1c8:	2200      	movs	r2, #0
     1ca:	4b05      	ldr	r3, [pc, #20]	; (1e0 <cpu_irq_enter_critical+0x3c>)
     1cc:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
     1ce:	4a02      	ldr	r2, [pc, #8]	; (1d8 <cpu_irq_enter_critical+0x34>)
     1d0:	6813      	ldr	r3, [r2, #0]
     1d2:	3301      	adds	r3, #1
     1d4:	6013      	str	r3, [r2, #0]
}
     1d6:	4770      	bx	lr
     1d8:	20000254 	.word	0x20000254
     1dc:	20000008 	.word	0x20000008
     1e0:	20000258 	.word	0x20000258

000001e4 <cpu_irq_leave_critical>:
void cpu_irq_leave_critical(void)
{
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
     1e4:	4b08      	ldr	r3, [pc, #32]	; (208 <cpu_irq_leave_critical+0x24>)
     1e6:	681a      	ldr	r2, [r3, #0]
     1e8:	3a01      	subs	r2, #1
     1ea:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
     1ec:	681b      	ldr	r3, [r3, #0]
     1ee:	2b00      	cmp	r3, #0
     1f0:	d109      	bne.n	206 <cpu_irq_leave_critical+0x22>
     1f2:	4b06      	ldr	r3, [pc, #24]	; (20c <cpu_irq_leave_critical+0x28>)
     1f4:	781b      	ldrb	r3, [r3, #0]
     1f6:	2b00      	cmp	r3, #0
     1f8:	d005      	beq.n	206 <cpu_irq_leave_critical+0x22>
		cpu_irq_enable();
     1fa:	2201      	movs	r2, #1
     1fc:	4b04      	ldr	r3, [pc, #16]	; (210 <cpu_irq_leave_critical+0x2c>)
     1fe:	701a      	strb	r2, [r3, #0]
     200:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
     204:	b662      	cpsie	i
	}
}
     206:	4770      	bx	lr
     208:	20000254 	.word	0x20000254
     20c:	20000258 	.word	0x20000258
     210:	20000008 	.word	0x20000008

00000214 <system_board_init>:




void system_board_init(void)
{
     214:	b5f0      	push	{r4, r5, r6, r7, lr}
     216:	4647      	mov	r7, r8
     218:	b480      	push	{r7}
     21a:	b082      	sub	sp, #8
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
	config->input_pull = PORT_PIN_PULL_UP;
     21c:	ac01      	add	r4, sp, #4
     21e:	2601      	movs	r6, #1
     220:	7066      	strb	r6, [r4, #1]
	config->powersave  = false;
     222:	2700      	movs	r7, #0
     224:	70a7      	strb	r7, [r4, #2]
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);

	/* Configure LEDs as outputs, turn them off */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
     226:	7026      	strb	r6, [r4, #0]
	port_pin_set_config(LED_0_PIN, &pin_conf);
     228:	2013      	movs	r0, #19
     22a:	1c21      	adds	r1, r4, #0
     22c:	4d27      	ldr	r5, [pc, #156]	; (2cc <system_board_init+0xb8>)
     22e:	47a8      	blx	r5
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
     230:	4b27      	ldr	r3, [pc, #156]	; (2d0 <system_board_init+0xbc>)
     232:	4698      	mov	r8, r3
     234:	2380      	movs	r3, #128	; 0x80
     236:	031b      	lsls	r3, r3, #12
     238:	4642      	mov	r2, r8
     23a:	6193      	str	r3, [r2, #24]
	port_pin_set_output_level(LED_0_PIN, LED_0_INACTIVE);

	/* Set buttons as inputs */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
     23c:	7027      	strb	r7, [r4, #0]
	pin_conf.input_pull = PORT_PIN_PULL_UP;
     23e:	7066      	strb	r6, [r4, #1]
	port_pin_set_config(BUTTON_0_PIN, &pin_conf);
     240:	201c      	movs	r0, #28
     242:	1c21      	adds	r1, r4, #0
     244:	47a8      	blx	r5
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
	config->input_pull = PORT_PIN_PULL_UP;
     246:	7066      	strb	r6, [r4, #1]
	config->powersave  = false;
     248:	70a7      	strb	r7, [r4, #2]
	
#ifdef CONF_BOARD_AT86RFX	

	port_get_config_defaults(&pin_conf);
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
     24a:	7026      	strb	r6, [r4, #0]
	port_pin_set_config(AT86RFX_SPI_SCK, &pin_conf);
     24c:	2052      	movs	r0, #82	; 0x52
     24e:	1c21      	adds	r1, r4, #0
     250:	47a8      	blx	r5
	port_pin_set_config(AT86RFX_SPI_MOSI, &pin_conf);
     252:	203e      	movs	r0, #62	; 0x3e
     254:	1c21      	adds	r1, r4, #0
     256:	47a8      	blx	r5
	port_pin_set_config(AT86RFX_SPI_CS, &pin_conf);
     258:	203f      	movs	r0, #63	; 0x3f
     25a:	1c21      	adds	r1, r4, #0
     25c:	47a8      	blx	r5
	port_pin_set_config(AT86RFX_RST_PIN, &pin_conf);
     25e:	202f      	movs	r0, #47	; 0x2f
     260:	1c21      	adds	r1, r4, #0
     262:	47a8      	blx	r5
	port_pin_set_config(AT86RFX_SLP_PIN, &pin_conf);
     264:	2014      	movs	r0, #20
     266:	1c21      	adds	r1, r4, #0
     268:	47a8      	blx	r5
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
     26a:	2280      	movs	r2, #128	; 0x80
     26c:	02d2      	lsls	r2, r2, #11
     26e:	4b19      	ldr	r3, [pc, #100]	; (2d4 <system_board_init+0xc0>)
     270:	619a      	str	r2, [r3, #24]
     272:	3b80      	subs	r3, #128	; 0x80
     274:	2280      	movs	r2, #128	; 0x80
     276:	05d2      	lsls	r2, r2, #23
     278:	619a      	str	r2, [r3, #24]
     27a:	2280      	movs	r2, #128	; 0x80
     27c:	0612      	lsls	r2, r2, #24
     27e:	619a      	str	r2, [r3, #24]
     280:	2280      	movs	r2, #128	; 0x80
     282:	0212      	lsls	r2, r2, #8
     284:	619a      	str	r2, [r3, #24]
     286:	2380      	movs	r3, #128	; 0x80
     288:	035b      	lsls	r3, r3, #13
     28a:	4642      	mov	r2, r8
     28c:	6193      	str	r3, [r2, #24]
	port_pin_set_output_level(AT86RFX_SPI_MOSI, true);
	port_pin_set_output_level(AT86RFX_SPI_CS, true);
	port_pin_set_output_level(AT86RFX_RST_PIN, true);
	port_pin_set_output_level(AT86RFX_SLP_PIN, true);

	pin_conf.direction  = PORT_PIN_DIR_INPUT;
     28e:	7027      	strb	r7, [r4, #0]
	port_pin_set_config(AT86RFX_SPI_MISO, &pin_conf);
     290:	2053      	movs	r0, #83	; 0x53
     292:	1c21      	adds	r1, r4, #0
     294:	47a8      	blx	r5
	PM->APBCMASK.reg |= (1<<PM_APBCMASK_RFCTRL_Pos);
     296:	4a10      	ldr	r2, [pc, #64]	; (2d8 <system_board_init+0xc4>)
     298:	6a13      	ldr	r3, [r2, #32]
     29a:	2180      	movs	r1, #128	; 0x80
     29c:	0389      	lsls	r1, r1, #14
     29e:	430b      	orrs	r3, r1
     2a0:	6213      	str	r3, [r2, #32]
	REG_RFCTRL_FECFG = RFCTRL_CFG_ANT_DIV;
     2a2:	2204      	movs	r2, #4
     2a4:	4b0d      	ldr	r3, [pc, #52]	; (2dc <system_board_init+0xc8>)
     2a6:	801a      	strh	r2, [r3, #0]
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
     2a8:	466b      	mov	r3, sp
     2aa:	709e      	strb	r6, [r3, #2]
	config->powersave    = false;
     2ac:	70df      	strb	r7, [r3, #3]
	struct system_pinmux_config config_pinmux;
	system_pinmux_get_config_defaults(&config_pinmux);
	config_pinmux.mux_position = MUX_PA09F_RFCTRL_FECTRL1 ;
     2ae:	2305      	movs	r3, #5
     2b0:	466a      	mov	r2, sp
     2b2:	7013      	strb	r3, [r2, #0]
	config_pinmux.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
     2b4:	7056      	strb	r6, [r2, #1]
	system_pinmux_pin_set_config(PIN_RFCTRL1, &config_pinmux);
     2b6:	2009      	movs	r0, #9
     2b8:	4669      	mov	r1, sp
     2ba:	4c09      	ldr	r4, [pc, #36]	; (2e0 <system_board_init+0xcc>)
     2bc:	47a0      	blx	r4
	system_pinmux_pin_set_config(PIN_RFCTRL2, &config_pinmux);
     2be:	200c      	movs	r0, #12
     2c0:	4669      	mov	r1, sp
     2c2:	47a0      	blx	r4
#endif

}
     2c4:	b002      	add	sp, #8
     2c6:	bc04      	pop	{r2}
     2c8:	4690      	mov	r8, r2
     2ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
     2cc:	0000051d 	.word	0x0000051d
     2d0:	41004400 	.word	0x41004400
     2d4:	41004500 	.word	0x41004500
     2d8:	40000400 	.word	0x40000400
     2dc:	42005400 	.word	0x42005400
     2e0:	000022dd 	.word	0x000022dd

000002e4 <_extint_enable>:
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	/* Enable all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		eics[i]->CTRL.reg |= EIC_CTRL_ENABLE;
     2e4:	4a04      	ldr	r2, [pc, #16]	; (2f8 <_extint_enable+0x14>)
     2e6:	7811      	ldrb	r1, [r2, #0]
     2e8:	2302      	movs	r3, #2
     2ea:	430b      	orrs	r3, r1
     2ec:	7013      	strb	r3, [r2, #0]
static inline bool extint_is_syncing(void)
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
     2ee:	7853      	ldrb	r3, [r2, #1]
     2f0:	b25b      	sxtb	r3, r3
     2f2:	2b00      	cmp	r3, #0
     2f4:	dbfb      	blt.n	2ee <_extint_enable+0xa>
	}

	while (extint_is_syncing()) {
		/* Wait for all hardware modules to complete synchronization */
	}
}
     2f6:	4770      	bx	lr
     2f8:	40001800 	.word	0x40001800

000002fc <_system_extint_init>:
 * \note When SYSTEM module is used, this function will be invoked by
 * \ref system_init() automatically if the module is included.
 */
void _system_extint_init(void);
void _system_extint_init(void)
{
     2fc:	b500      	push	{lr}
     2fe:	b083      	sub	sp, #12
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
	switch (bus) {
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
     300:	4a12      	ldr	r2, [pc, #72]	; (34c <_system_extint_init+0x50>)
     302:	6991      	ldr	r1, [r2, #24]
     304:	2340      	movs	r3, #64	; 0x40
     306:	430b      	orrs	r3, r1
     308:	6193      	str	r3, [r2, #24]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
     30a:	a901      	add	r1, sp, #4
     30c:	2300      	movs	r3, #0
     30e:	700b      	strb	r3, [r1, #0]

	/* Configure the generic clock for the module and enable it */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
	gclk_chan_conf.source_generator = EXTINT_CLOCK_SOURCE;
	system_gclk_chan_set_config(EIC_GCLK_ID, &gclk_chan_conf);
     310:	2005      	movs	r0, #5
     312:	4b0f      	ldr	r3, [pc, #60]	; (350 <_system_extint_init+0x54>)
     314:	4798      	blx	r3

	/* Enable the clock anyway, since when needed it will be requested
	 * by External Interrupt driver */
	system_gclk_chan_enable(EIC_GCLK_ID);
     316:	2005      	movs	r0, #5
     318:	4b0e      	ldr	r3, [pc, #56]	; (354 <_system_extint_init+0x58>)
     31a:	4798      	blx	r3

	/* Reset all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		eics[i]->CTRL.reg |= EIC_CTRL_SWRST;
     31c:	4a0e      	ldr	r2, [pc, #56]	; (358 <_system_extint_init+0x5c>)
     31e:	7811      	ldrb	r1, [r2, #0]
     320:	2301      	movs	r3, #1
     322:	430b      	orrs	r3, r1
     324:	7013      	strb	r3, [r2, #0]
     326:	7853      	ldrb	r3, [r2, #1]
     328:	b25b      	sxtb	r3, r3
     32a:	2b00      	cmp	r3, #0
     32c:	dbfb      	blt.n	326 <_system_extint_init+0x2a>
     32e:	4b0b      	ldr	r3, [pc, #44]	; (35c <_system_extint_init+0x60>)
     330:	1c19      	adds	r1, r3, #0
     332:	3140      	adds	r1, #64	; 0x40

	/* Reset the software module */
#if EXTINT_CALLBACK_MODE == true
	/* Clear callback registration table */
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
		_extint_dev.callbacks[j] = NULL;
     334:	2200      	movs	r2, #0
     336:	c304      	stmia	r3!, {r2}
	}

	/* Reset the software module */
#if EXTINT_CALLBACK_MODE == true
	/* Clear callback registration table */
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
     338:	428b      	cmp	r3, r1
     33a:	d1fc      	bne.n	336 <_system_extint_init+0x3a>
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
     33c:	2210      	movs	r2, #16
     33e:	4b08      	ldr	r3, [pc, #32]	; (360 <_system_extint_init+0x64>)
     340:	601a      	str	r2, [r3, #0]
	}
	system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_EIC);
#endif

	/* Enables the driver for further use */
	_extint_enable();
     342:	4b08      	ldr	r3, [pc, #32]	; (364 <_system_extint_init+0x68>)
     344:	4798      	blx	r3
}
     346:	b003      	add	sp, #12
     348:	bd00      	pop	{pc}
     34a:	46c0      	nop			; (mov r8, r8)
     34c:	40000400 	.word	0x40000400
     350:	0000218d 	.word	0x0000218d
     354:	00002101 	.word	0x00002101
     358:	40001800 	.word	0x40001800
     35c:	20002a88 	.word	0x20002a88
     360:	e000e100 	.word	0xe000e100
     364:	000002e5 	.word	0x000002e5

00000368 <extint_chan_set_config>:

 */
void extint_chan_set_config(
		const uint8_t channel,
		const struct extint_chan_conf *const config)
{
     368:	b5f0      	push	{r4, r5, r6, r7, lr}
     36a:	b083      	sub	sp, #12
     36c:	1c05      	adds	r5, r0, #0
     36e:	1c0c      	adds	r4, r1, #0
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     370:	a901      	add	r1, sp, #4
     372:	2300      	movs	r3, #0
     374:	704b      	strb	r3, [r1, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
	config->powersave    = false;
     376:	70cb      	strb	r3, [r1, #3]
			config->detection_criteria)));

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = config->gpio_pin_mux;
     378:	7923      	ldrb	r3, [r4, #4]
     37a:	700b      	strb	r3, [r1, #0]
	pinmux_config.direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->gpio_pin_pull;
     37c:	7a23      	ldrb	r3, [r4, #8]
     37e:	708b      	strb	r3, [r1, #2]
	system_pinmux_pin_set_config(config->gpio_pin, &pinmux_config);
     380:	7820      	ldrb	r0, [r4, #0]
     382:	4b15      	ldr	r3, [pc, #84]	; (3d8 <extint_chan_set_config+0x70>)
     384:	4798      	blx	r3
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

		return eics[eic_index];
	} else {
		Assert(false);
		return NULL;
     386:	2600      	movs	r6, #0
static inline Eic * _extint_get_eic_from_channel(
		const uint8_t channel)
{
	uint8_t eic_index = (channel / 32);

	if (eic_index < EIC_INST_NUM) {
     388:	2d1f      	cmp	r5, #31
     38a:	d800      	bhi.n	38e <extint_chan_set_config+0x26>
		/* Array of available EICs. */
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

		return eics[eic_index];
     38c:	4e13      	ldr	r6, [pc, #76]	; (3dc <extint_chan_set_config+0x74>)

	/* Get a pointer to the module hardware instance */
	Eic *const EIC_module = _extint_get_eic_from_channel(channel);

	uint32_t config_pos = (4 * (channel % 8));
     38e:	2207      	movs	r2, #7
     390:	402a      	ands	r2, r5
     392:	0092      	lsls	r2, r2, #2
	uint32_t new_config;

	/* Determine the channel's new edge detection configuration */
	new_config = (config->detection_criteria << EIC_CONFIG_SENSE0_Pos);
     394:	7ae0      	ldrb	r0, [r4, #11]

	/* Enable the hardware signal filter if requested in the config */
	if (config->filter_input_signal) {
     396:	7aa3      	ldrb	r3, [r4, #10]
     398:	2b00      	cmp	r3, #0
     39a:	d001      	beq.n	3a0 <extint_chan_set_config+0x38>
		new_config |= EIC_CONFIG_FILTEN0;
     39c:	2308      	movs	r3, #8
     39e:	4318      	orrs	r0, r3
     3a0:	08eb      	lsrs	r3, r5, #3
     3a2:	009b      	lsls	r3, r3, #2
     3a4:	18f3      	adds	r3, r6, r3
	}

	/* Clear the existing and set the new channel configuration */
	EIC_module->CONFIG[channel / 8].reg
		= (EIC_module->CONFIG[channel / 8].reg &
     3a6:	6999      	ldr	r1, [r3, #24]
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
			(new_config << config_pos);
     3a8:	4090      	lsls	r0, r2
	}

	/* Clear the existing and set the new channel configuration */
	EIC_module->CONFIG[channel / 8].reg
		= (EIC_module->CONFIG[channel / 8].reg &
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
     3aa:	270f      	movs	r7, #15
     3ac:	4097      	lsls	r7, r2
		new_config |= EIC_CONFIG_FILTEN0;
	}

	/* Clear the existing and set the new channel configuration */
	EIC_module->CONFIG[channel / 8].reg
		= (EIC_module->CONFIG[channel / 8].reg &
     3ae:	43b9      	bics	r1, r7
     3b0:	1c0a      	adds	r2, r1, #0
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
     3b2:	4302      	orrs	r2, r0
		new_config |= EIC_CONFIG_FILTEN0;
	}

	/* Clear the existing and set the new channel configuration */
	EIC_module->CONFIG[channel / 8].reg
		= (EIC_module->CONFIG[channel / 8].reg &
     3b4:	619a      	str	r2, [r3, #24]
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
			(new_config << config_pos);

	/* Set the channel's new wake up mode setting */
	if (config->wake_if_sleeping) {
     3b6:	7a63      	ldrb	r3, [r4, #9]
     3b8:	2b00      	cmp	r3, #0
     3ba:	d006      	beq.n	3ca <extint_chan_set_config+0x62>
		EIC_module->WAKEUP.reg |=  (1UL << channel);
     3bc:	6973      	ldr	r3, [r6, #20]
     3be:	2201      	movs	r2, #1
     3c0:	40aa      	lsls	r2, r5
     3c2:	1c15      	adds	r5, r2, #0
     3c4:	431d      	orrs	r5, r3
     3c6:	6175      	str	r5, [r6, #20]
     3c8:	e004      	b.n	3d4 <extint_chan_set_config+0x6c>
	} else {
		EIC_module->WAKEUP.reg &= ~(1UL << channel);
     3ca:	6973      	ldr	r3, [r6, #20]
     3cc:	2201      	movs	r2, #1
     3ce:	40aa      	lsls	r2, r5
     3d0:	4393      	bics	r3, r2
     3d2:	6173      	str	r3, [r6, #20]
	}
}
     3d4:	b003      	add	sp, #12
     3d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
     3d8:	000022dd 	.word	0x000022dd
     3dc:	40001800 	.word	0x40001800

000003e0 <extint_register_callback>:
	/* Sanity check arguments */
	Assert(callback);

	if (type != EXTINT_CALLBACK_TYPE_DETECT) {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
     3e0:	2317      	movs	r3, #23
	const enum extint_callback_type type)
{
	/* Sanity check arguments */
	Assert(callback);

	if (type != EXTINT_CALLBACK_TYPE_DETECT) {
     3e2:	2a00      	cmp	r2, #0
     3e4:	d10d      	bne.n	402 <extint_register_callback+0x22>
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	if (_extint_dev.callbacks[channel] == NULL) {
     3e6:	008b      	lsls	r3, r1, #2
     3e8:	4a07      	ldr	r2, [pc, #28]	; (408 <extint_register_callback+0x28>)
     3ea:	589b      	ldr	r3, [r3, r2]
     3ec:	2b00      	cmp	r3, #0
     3ee:	d103      	bne.n	3f8 <extint_register_callback+0x18>
		_extint_dev.callbacks[channel] = callback;
     3f0:	0089      	lsls	r1, r1, #2
     3f2:	5088      	str	r0, [r1, r2]
		return STATUS_OK;
     3f4:	2300      	movs	r3, #0
     3f6:	e004      	b.n	402 <extint_register_callback+0x22>
	} else if (_extint_dev.callbacks[channel] == callback) {
     3f8:	4283      	cmp	r3, r0
     3fa:	d001      	beq.n	400 <extint_register_callback+0x20>
		return STATUS_OK;
	}

	return STATUS_ERR_ALREADY_INITIALIZED;
     3fc:	231d      	movs	r3, #29
     3fe:	e000      	b.n	402 <extint_register_callback+0x22>

	if (_extint_dev.callbacks[channel] == NULL) {
		_extint_dev.callbacks[channel] = callback;
		return STATUS_OK;
	} else if (_extint_dev.callbacks[channel] == callback) {
		return STATUS_OK;
     400:	2300      	movs	r3, #0
	}

	return STATUS_ERR_ALREADY_INITIALIZED;
}
     402:	1c18      	adds	r0, r3, #0
     404:	4770      	bx	lr
     406:	46c0      	nop			; (mov r8, r8)
     408:	20002a88 	.word	0x20002a88

0000040c <extint_chan_enable_callback>:

		eic->INTENSET.reg = (1UL << channel);
	}
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
     40c:	2317      	movs	r3, #23
 */
enum status_code extint_chan_enable_callback(
	const uint8_t channel,
	const enum extint_callback_type type)
{
	if (type == EXTINT_CALLBACK_TYPE_DETECT) {
     40e:	2900      	cmp	r1, #0
     410:	d107      	bne.n	422 <extint_chan_enable_callback+0x16>
	} else {
		Assert(false);
		return NULL;
     412:	2200      	movs	r2, #0
static inline Eic * _extint_get_eic_from_channel(
		const uint8_t channel)
{
	uint8_t eic_index = (channel / 32);

	if (eic_index < EIC_INST_NUM) {
     414:	281f      	cmp	r0, #31
     416:	d800      	bhi.n	41a <extint_chan_enable_callback+0xe>
		/* Array of available EICs. */
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

		return eics[eic_index];
     418:	4a03      	ldr	r2, [pc, #12]	; (428 <extint_chan_enable_callback+0x1c>)
		Eic *const eic = _extint_get_eic_from_channel(channel);

		eic->INTENSET.reg = (1UL << channel);
     41a:	2301      	movs	r3, #1
     41c:	4083      	lsls	r3, r0
     41e:	60d3      	str	r3, [r2, #12]
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
     420:	2300      	movs	r3, #0
}
     422:	1c18      	adds	r0, r3, #0
     424:	4770      	bx	lr
     426:	46c0      	nop			; (mov r8, r8)
     428:	40001800 	.word	0x40001800

0000042c <EIC_Handler>:
	return _current_channel;
}

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
     42c:	b570      	push	{r4, r5, r6, lr}
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
     42e:	2200      	movs	r2, #0
     430:	4b15      	ldr	r3, [pc, #84]	; (488 <EIC_Handler+0x5c>)
     432:	701a      	strb	r2, [r3, #0]
     434:	2300      	movs	r3, #0
 */
static inline bool extint_chan_is_detected(
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));
     436:	251f      	movs	r5, #31
		if (extint_chan_is_detected(_current_channel)) {
			/* Clear flag */
			extint_chan_clear_detected(_current_channel);
			/* Find any associated callback entries in the callback table */
			if (_extint_dev.callbacks[_current_channel] != NULL) {
     438:	4e14      	ldr	r6, [pc, #80]	; (48c <EIC_Handler+0x60>)

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
     43a:	4c13      	ldr	r4, [pc, #76]	; (488 <EIC_Handler+0x5c>)
static inline Eic * _extint_get_eic_from_channel(
		const uint8_t channel)
{
	uint8_t eic_index = (channel / 32);

	if (eic_index < EIC_INST_NUM) {
     43c:	2b1f      	cmp	r3, #31
     43e:	d919      	bls.n	474 <EIC_Handler+0x48>
     440:	e00f      	b.n	462 <EIC_Handler+0x36>
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

		return eics[eic_index];
	} else {
		Assert(false);
		return NULL;
     442:	2100      	movs	r1, #0
     444:	e000      	b.n	448 <EIC_Handler+0x1c>

	if (eic_index < EIC_INST_NUM) {
		/* Array of available EICs. */
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

		return eics[eic_index];
     446:	4912      	ldr	r1, [pc, #72]	; (490 <EIC_Handler+0x64>)
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));

	eic_module->INTFLAG.reg = eic_mask;
     448:	610a      	str	r2, [r1, #16]
		if (extint_chan_is_detected(_current_channel)) {
			/* Clear flag */
			extint_chan_clear_detected(_current_channel);
			/* Find any associated callback entries in the callback table */
			if (_extint_dev.callbacks[_current_channel] != NULL) {
     44a:	009b      	lsls	r3, r3, #2
     44c:	599b      	ldr	r3, [r3, r6]
     44e:	2b00      	cmp	r3, #0
     450:	d000      	beq.n	454 <EIC_Handler+0x28>
				/* Run the registered callback */
				_extint_dev.callbacks[_current_channel]();
     452:	4798      	blx	r3

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
     454:	7823      	ldrb	r3, [r4, #0]
     456:	3301      	adds	r3, #1
     458:	b2db      	uxtb	r3, r3
     45a:	7023      	strb	r3, [r4, #0]
     45c:	2b0f      	cmp	r3, #15
     45e:	d9ed      	bls.n	43c <EIC_Handler+0x10>
     460:	e011      	b.n	486 <EIC_Handler+0x5a>
 */
static inline bool extint_chan_is_detected(
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));
     462:	1c29      	adds	r1, r5, #0
     464:	4019      	ands	r1, r3
     466:	2201      	movs	r2, #1
     468:	408a      	lsls	r2, r1

	return (eic_module->INTFLAG.reg & eic_mask);
     46a:	2100      	movs	r1, #0
     46c:	6909      	ldr	r1, [r1, #16]
		if (extint_chan_is_detected(_current_channel)) {
     46e:	4211      	tst	r1, r2
     470:	d1e7      	bne.n	442 <EIC_Handler+0x16>
     472:	e7ef      	b.n	454 <EIC_Handler+0x28>
 */
static inline bool extint_chan_is_detected(
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));
     474:	1c29      	adds	r1, r5, #0
     476:	4019      	ands	r1, r3
     478:	2201      	movs	r2, #1
     47a:	408a      	lsls	r2, r1

	return (eic_module->INTFLAG.reg & eic_mask);
     47c:	4904      	ldr	r1, [pc, #16]	; (490 <EIC_Handler+0x64>)
     47e:	6909      	ldr	r1, [r1, #16]
     480:	4211      	tst	r1, r2
     482:	d1e0      	bne.n	446 <EIC_Handler+0x1a>
     484:	e7e6      	b.n	454 <EIC_Handler+0x28>
				/* Run the registered callback */
				_extint_dev.callbacks[_current_channel]();
			}
		}
	}
}
     486:	bd70      	pop	{r4, r5, r6, pc}
     488:	20002ac8 	.word	0x20002ac8
     48c:	20002a88 	.word	0x20002a88
     490:	40001800 	.word	0x40001800

00000494 <nvm_set_config>:
 *                        EEPROM and/or auxiliary space configuration from being
 *                        altered
 */
enum status_code nvm_set_config(
		const struct nvm_config *const config)
{
     494:	b510      	push	{r4, lr}
			break;

		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
     496:	4a1e      	ldr	r2, [pc, #120]	; (510 <nvm_set_config+0x7c>)
     498:	69d1      	ldr	r1, [r2, #28]
     49a:	2304      	movs	r3, #4
     49c:	430b      	orrs	r3, r1
     49e:	61d3      	str	r3, [r2, #28]

	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBB, PM_APBBMASK_NVMCTRL);

	/* Clear error flags */
	nvm_module->STATUS.reg |= NVMCTRL_STATUS_MASK;
     4a0:	4b1c      	ldr	r3, [pc, #112]	; (514 <nvm_set_config+0x80>)
     4a2:	8b19      	ldrh	r1, [r3, #24]
     4a4:	2220      	movs	r2, #32
     4a6:	32ff      	adds	r2, #255	; 0xff
     4a8:	430a      	orrs	r2, r1
     4aa:	831a      	strh	r2, [r3, #24]
static inline bool nvm_is_ready(void)
{
	/* Get a pointer to the module hardware instance */
	Nvmctrl *const nvm_module = NVMCTRL;

	return nvm_module->INTFLAG.reg & NVMCTRL_INTFLAG_READY;
     4ac:	7d1a      	ldrb	r2, [r3, #20]

	/* Check if the module is busy */
	if (!nvm_is_ready()) {
		return STATUS_BUSY;
     4ae:	2305      	movs	r3, #5

	/* Clear error flags */
	nvm_module->STATUS.reg |= NVMCTRL_STATUS_MASK;

	/* Check if the module is busy */
	if (!nvm_is_ready()) {
     4b0:	07d2      	lsls	r2, r2, #31
     4b2:	d52b      	bpl.n	50c <nvm_set_config+0x78>
		return STATUS_BUSY;
	}

	/* Writing configuration to the CTRLB register */
	nvm_module->CTRLB.reg =
			NVMCTRL_CTRLB_SLEEPPRM(config->sleep_power_mode) |
     4b4:	7802      	ldrb	r2, [r0, #0]
     4b6:	0212      	lsls	r2, r2, #8
     4b8:	21c0      	movs	r1, #192	; 0xc0
     4ba:	0089      	lsls	r1, r1, #2
     4bc:	400a      	ands	r2, r1
     4be:	1c14      	adds	r4, r2, #0
			((config->manual_page_write & 0x01) << NVMCTRL_CTRLB_MANW_Pos) |
     4c0:	7841      	ldrb	r1, [r0, #1]
     4c2:	01c9      	lsls	r1, r1, #7
		return STATUS_BUSY;
	}

	/* Writing configuration to the CTRLB register */
	nvm_module->CTRLB.reg =
			NVMCTRL_CTRLB_SLEEPPRM(config->sleep_power_mode) |
     4c4:	22ff      	movs	r2, #255	; 0xff
     4c6:	1c13      	adds	r3, r2, #0
     4c8:	400b      	ands	r3, r1
     4ca:	1c22      	adds	r2, r4, #0
     4cc:	431a      	orrs	r2, r3
			((config->manual_page_write & 0x01) << NVMCTRL_CTRLB_MANW_Pos) |
			NVMCTRL_CTRLB_RWS(config->wait_states) |
			((config->disable_cache & 0x01) << NVMCTRL_CTRLB_CACHEDIS_Pos) |
     4ce:	78c3      	ldrb	r3, [r0, #3]
     4d0:	049b      	lsls	r3, r3, #18
     4d2:	4313      	orrs	r3, r2

	/* Writing configuration to the CTRLB register */
	nvm_module->CTRLB.reg =
			NVMCTRL_CTRLB_SLEEPPRM(config->sleep_power_mode) |
			((config->manual_page_write & 0x01) << NVMCTRL_CTRLB_MANW_Pos) |
			NVMCTRL_CTRLB_RWS(config->wait_states) |
     4d4:	7882      	ldrb	r2, [r0, #2]
     4d6:	0052      	lsls	r2, r2, #1
     4d8:	211e      	movs	r1, #30
     4da:	400a      	ands	r2, r1
     4dc:	4313      	orrs	r3, r2
			((config->disable_cache & 0x01) << NVMCTRL_CTRLB_CACHEDIS_Pos) |
			NVMCTRL_CTRLB_READMODE(config->cache_readmode);
     4de:	7902      	ldrb	r2, [r0, #4]
     4e0:	0412      	lsls	r2, r2, #16
     4e2:	21c0      	movs	r1, #192	; 0xc0
     4e4:	0289      	lsls	r1, r1, #10
     4e6:	400a      	ands	r2, r1
	/* Writing configuration to the CTRLB register */
	nvm_module->CTRLB.reg =
			NVMCTRL_CTRLB_SLEEPPRM(config->sleep_power_mode) |
			((config->manual_page_write & 0x01) << NVMCTRL_CTRLB_MANW_Pos) |
			NVMCTRL_CTRLB_RWS(config->wait_states) |
			((config->disable_cache & 0x01) << NVMCTRL_CTRLB_CACHEDIS_Pos) |
     4e8:	4313      	orrs	r3, r2
	if (!nvm_is_ready()) {
		return STATUS_BUSY;
	}

	/* Writing configuration to the CTRLB register */
	nvm_module->CTRLB.reg =
     4ea:	4a0a      	ldr	r2, [pc, #40]	; (514 <nvm_set_config+0x80>)
     4ec:	6053      	str	r3, [r2, #4]
			((config->disable_cache & 0x01) << NVMCTRL_CTRLB_CACHEDIS_Pos) |
			NVMCTRL_CTRLB_READMODE(config->cache_readmode);


	/* Initialize the internal device struct */
	_nvm_dev.page_size         = (8 << nvm_module->PARAM.bit.PSZ);
     4ee:	6893      	ldr	r3, [r2, #8]
     4f0:	035b      	lsls	r3, r3, #13
     4f2:	0f5b      	lsrs	r3, r3, #29
     4f4:	4908      	ldr	r1, [pc, #32]	; (518 <nvm_set_config+0x84>)
     4f6:	2408      	movs	r4, #8
     4f8:	409c      	lsls	r4, r3
     4fa:	800c      	strh	r4, [r1, #0]
	_nvm_dev.number_of_pages   = nvm_module->PARAM.bit.NVMP;
     4fc:	6893      	ldr	r3, [r2, #8]
     4fe:	804b      	strh	r3, [r1, #2]
	_nvm_dev.manual_page_write = config->manual_page_write;
     500:	7843      	ldrb	r3, [r0, #1]
     502:	710b      	strb	r3, [r1, #4]

	/* If the security bit is set, the auxiliary space cannot be written */
	if (nvm_module->STATUS.reg & NVMCTRL_STATUS_SB) {
     504:	8b13      	ldrh	r3, [r2, #24]
     506:	05db      	lsls	r3, r3, #23
		return STATUS_ERR_IO;
	}

	return STATUS_OK;
     508:	0fdb      	lsrs	r3, r3, #31
     50a:	011b      	lsls	r3, r3, #4
}
     50c:	1c18      	adds	r0, r3, #0
     50e:	bd10      	pop	{r4, pc}
     510:	40000400 	.word	0x40000400
     514:	41004000 	.word	0x41004000
     518:	2000025c 	.word	0x2000025c

0000051c <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin.
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
     51c:	b500      	push	{lr}
     51e:	b083      	sub	sp, #12
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
     520:	ab01      	add	r3, sp, #4
     522:	2280      	movs	r2, #128	; 0x80
     524:	701a      	strb	r2, [r3, #0]

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
     526:	780a      	ldrb	r2, [r1, #0]
     528:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
     52a:	784a      	ldrb	r2, [r1, #1]
     52c:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
     52e:	788a      	ldrb	r2, [r1, #2]
     530:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
     532:	1c19      	adds	r1, r3, #0
     534:	4b01      	ldr	r3, [pc, #4]	; (53c <port_pin_set_config+0x20>)
     536:	4798      	blx	r3
}
     538:	b003      	add	sp, #12
     53a:	bd00      	pop	{pc}
     53c:	000022dd 	.word	0x000022dd

00000540 <rtc_count_reset>:
 * Resets the RTC to hardware defaults.
 *
 * \param[in,out]  module  Pointer to the software instance struct
 */
void rtc_count_reset(struct rtc_module *const module)
{
     540:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
     542:	6802      	ldr	r2, [r0, #0]
 * \param[in] vector  Interrupt vector to disable
 */
static inline void system_interrupt_disable(
		const enum system_interrupt_vector vector)
{
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
     544:	2408      	movs	r4, #8
     546:	2380      	movs	r3, #128	; 0x80
     548:	490b      	ldr	r1, [pc, #44]	; (578 <rtc_count_reset+0x38>)
     54a:	50cc      	str	r4, [r1, r3]
{
 	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
     54c:	6801      	ldr	r1, [r0, #0]

        if (rtc_module->MODE0.STATUS.reg & RTC_STATUS_SYNCBUSY) {
     54e:	7a8b      	ldrb	r3, [r1, #10]

#if RTC_COUNT_ASYNC == true
	system_interrupt_disable(SYSTEM_INTERRUPT_MODULE_RTC);
#endif

	while (rtc_count_is_syncing(module)) {
     550:	b25b      	sxtb	r3, r3
     552:	2b00      	cmp	r3, #0
     554:	dbfb      	blt.n	54e <rtc_count_reset+0xe>
		/* Wait for synchronization */
	}

	/* Disable RTC module. */
	rtc_module->MODE0.CTRL.reg &= ~RTC_MODE0_CTRL_ENABLE;
     556:	8813      	ldrh	r3, [r2, #0]
     558:	2102      	movs	r1, #2
     55a:	438b      	bics	r3, r1
     55c:	8013      	strh	r3, [r2, #0]

	/* Disable module before reset. */
	rtc_count_disable(module);

#if RTC_COUNT_ASYNC == true
	module->registered_callback = 0;
     55e:	2300      	movs	r3, #0
     560:	7503      	strb	r3, [r0, #20]
	module->enabled_callback    = 0;
     562:	7543      	strb	r3, [r0, #21]
{
 	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
     564:	6801      	ldr	r1, [r0, #0]

        if (rtc_module->MODE0.STATUS.reg & RTC_STATUS_SYNCBUSY) {
     566:	7a8b      	ldrb	r3, [r1, #10]
#endif

	while (rtc_count_is_syncing(module)) {
     568:	b25b      	sxtb	r3, r3
     56a:	2b00      	cmp	r3, #0
     56c:	dbfb      	blt.n	566 <rtc_count_reset+0x26>
		/* Wait for synchronization */
	}

	/* Initiate software reset. */
	rtc_module->MODE0.CTRL.reg |= RTC_MODE0_CTRL_SWRST;
     56e:	8811      	ldrh	r1, [r2, #0]
     570:	2301      	movs	r3, #1
     572:	430b      	orrs	r3, r1
     574:	8013      	strh	r3, [r2, #0]
}
     576:	bd10      	pop	{r4, pc}
     578:	e000e100 	.word	0xe000e100

0000057c <rtc_count_set_compare>:
 */
enum status_code rtc_count_set_compare(
		struct rtc_module *const module,
		const uint32_t comp_value,
		const enum rtc_count_compare comp_index)
{
     57c:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
     57e:	6804      	ldr	r4, [r0, #0]
     580:	7aa3      	ldrb	r3, [r4, #10]

	while (rtc_count_is_syncing(module)) {
     582:	b25b      	sxtb	r3, r3
     584:	2b00      	cmp	r3, #0
     586:	dbfb      	blt.n	580 <rtc_count_set_compare+0x4>
		/* Wait for synchronization */
	}

	/* Set compare values based on operation mode. */
	switch (module->mode) {
     588:	7903      	ldrb	r3, [r0, #4]
     58a:	2b00      	cmp	r3, #0
     58c:	d00a      	beq.n	5a4 <rtc_count_set_compare+0x28>

			break;

		default:
			Assert(false);
			return STATUS_ERR_BAD_FORMAT;
     58e:	201a      	movs	r0, #26
	while (rtc_count_is_syncing(module)) {
		/* Wait for synchronization */
	}

	/* Set compare values based on operation mode. */
	switch (module->mode) {
     590:	2b01      	cmp	r3, #1
     592:	d113      	bne.n	5bc <rtc_count_set_compare+0x40>
		case RTC_COUNT_MODE_32BIT:
			/* Check sanity of comp_index. */
			if ((uint32_t)comp_index > RTC_NUM_OF_COMP32) {
				return STATUS_ERR_INVALID_ARG;
     594:	2017      	movs	r0, #23

	/* Set compare values based on operation mode. */
	switch (module->mode) {
		case RTC_COUNT_MODE_32BIT:
			/* Check sanity of comp_index. */
			if ((uint32_t)comp_index > RTC_NUM_OF_COMP32) {
     596:	2a01      	cmp	r2, #1
     598:	d810      	bhi.n	5bc <rtc_count_set_compare+0x40>
				return STATUS_ERR_INVALID_ARG;
			}

			/* Set compare value for COMP. */
			rtc_module->MODE0.COMP[comp_index].reg = comp_value;
     59a:	3206      	adds	r2, #6
     59c:	0092      	lsls	r2, r2, #2
     59e:	5111      	str	r1, [r2, r4]
			Assert(false);
			return STATUS_ERR_BAD_FORMAT;
	}

	/* Return status if everything is OK. */
	return STATUS_OK;
     5a0:	2000      	movs	r0, #0
			}

			/* Set compare value for COMP. */
			rtc_module->MODE0.COMP[comp_index].reg = comp_value;

			break;
     5a2:	e00b      	b.n	5bc <rtc_count_set_compare+0x40>

		case RTC_COUNT_MODE_16BIT:
			/* Check sanity of comp_index. */
			if ((uint32_t)comp_index > RTC_NUM_OF_COMP16) {
				return STATUS_ERR_INVALID_ARG;
     5a4:	2017      	movs	r0, #23

			break;

		case RTC_COUNT_MODE_16BIT:
			/* Check sanity of comp_index. */
			if ((uint32_t)comp_index > RTC_NUM_OF_COMP16) {
     5a6:	2a02      	cmp	r2, #2
     5a8:	d808      	bhi.n	5bc <rtc_count_set_compare+0x40>
				return STATUS_ERR_INVALID_ARG;
			}

			/* Check that 16-bit value is provided. */
			if (comp_value > 0xffff) {
     5aa:	4b05      	ldr	r3, [pc, #20]	; (5c0 <rtc_count_set_compare+0x44>)
     5ac:	4299      	cmp	r1, r3
     5ae:	d805      	bhi.n	5bc <rtc_count_set_compare+0x40>
				Assert(false);
				return STATUS_ERR_INVALID_ARG;
			}

			/* Set compare value for COMP. */
			rtc_module->MODE1.COMP[comp_index].reg = comp_value & 0xffff;
     5b0:	b289      	uxth	r1, r1
     5b2:	320c      	adds	r2, #12
     5b4:	0052      	lsls	r2, r2, #1
     5b6:	5311      	strh	r1, [r2, r4]
			Assert(false);
			return STATUS_ERR_BAD_FORMAT;
	}

	/* Return status if everything is OK. */
	return STATUS_OK;
     5b8:	2000      	movs	r0, #0
			}

			/* Set compare value for COMP. */
			rtc_module->MODE1.COMP[comp_index].reg = comp_value & 0xffff;

			break;
     5ba:	e7ff      	b.n	5bc <rtc_count_set_compare+0x40>
			return STATUS_ERR_BAD_FORMAT;
	}

	/* Return status if everything is OK. */
	return STATUS_OK;
}
     5bc:	bd10      	pop	{r4, pc}
     5be:	46c0      	nop			; (mov r8, r8)
     5c0:	0000ffff 	.word	0x0000ffff

000005c4 <rtc_count_init>:
 */
enum status_code rtc_count_init(
		struct rtc_module *const module,
		Rtc *const hw,
		const struct rtc_count_config *const config)
{
     5c4:	b570      	push	{r4, r5, r6, lr}
     5c6:	b082      	sub	sp, #8
     5c8:	1c04      	adds	r4, r0, #0
     5ca:	1c15      	adds	r5, r2, #0
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize device instance */
	module->hw = hw;
     5cc:	6001      	str	r1, [r0, #0]
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
	switch (bus) {
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
     5ce:	4a2f      	ldr	r2, [pc, #188]	; (68c <rtc_count_init+0xc8>)
     5d0:	6991      	ldr	r1, [r2, #24]
     5d2:	2320      	movs	r3, #32
     5d4:	430b      	orrs	r3, r1
     5d6:	6193      	str	r3, [r2, #24]
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_RTC);

	/* Set up GCLK */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
	gclk_chan_conf.source_generator = GCLK_GENERATOR_2;
     5d8:	a901      	add	r1, sp, #4
     5da:	2302      	movs	r3, #2
     5dc:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(RTC_GCLK_ID, &gclk_chan_conf);
     5de:	2004      	movs	r0, #4
     5e0:	4b2b      	ldr	r3, [pc, #172]	; (690 <rtc_count_init+0xcc>)
     5e2:	4798      	blx	r3
	system_gclk_chan_enable(RTC_GCLK_ID);
     5e4:	2004      	movs	r0, #4
     5e6:	4b2b      	ldr	r3, [pc, #172]	; (694 <rtc_count_init+0xd0>)
     5e8:	4798      	blx	r3

	/* Reset module to hardware defaults. */
	rtc_count_reset(module);
     5ea:	1c20      	adds	r0, r4, #0
     5ec:	4b2a      	ldr	r3, [pc, #168]	; (698 <rtc_count_init+0xd4>)
     5ee:	4798      	blx	r3

	/* Save conf_struct internally for continued use. */
	module->mode                = config->mode;
     5f0:	78ab      	ldrb	r3, [r5, #2]
     5f2:	7123      	strb	r3, [r4, #4]
	module->continuously_update = config->continuously_update;
     5f4:	792b      	ldrb	r3, [r5, #4]
     5f6:	7163      	strb	r3, [r4, #5]

#  if (RTC_INST_NUM == 1)
	_rtc_instance[0] = module;
     5f8:	4b28      	ldr	r3, [pc, #160]	; (69c <rtc_count_init+0xd8>)
     5fa:	601c      	str	r4, [r3, #0]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
     5fc:	6826      	ldr	r6, [r4, #0]

	rtc_module->MODE0.CTRL.reg = RTC_MODE0_CTRL_MODE(0) | config->prescaler;
     5fe:	882b      	ldrh	r3, [r5, #0]
     600:	8033      	strh	r3, [r6, #0]

	/* Set mode and clear on match if applicable. */
	switch (config->mode) {
     602:	78ab      	ldrb	r3, [r5, #2]
     604:	2b00      	cmp	r3, #0
     606:	d017      	beq.n	638 <rtc_count_init+0x74>
						(enum rtc_count_compare)i);
			}
			break;
		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
     608:	2017      	movs	r0, #23
	Rtc *const rtc_module = module->hw;

	rtc_module->MODE0.CTRL.reg = RTC_MODE0_CTRL_MODE(0) | config->prescaler;

	/* Set mode and clear on match if applicable. */
	switch (config->mode) {
     60a:	2b01      	cmp	r3, #1
     60c:	d13c      	bne.n	688 <rtc_count_init+0xc4>
		case RTC_COUNT_MODE_32BIT:
			/* Set 32bit mode and clear on match if applicable. */
			rtc_module->MODE0.CTRL.reg |= RTC_MODE0_CTRL_MODE(0);
     60e:	8833      	ldrh	r3, [r6, #0]
     610:	b29b      	uxth	r3, r3
     612:	8033      	strh	r3, [r6, #0]

			/* Check if clear on compare match should be set. */
			if (config->clear_on_match) {
     614:	78eb      	ldrb	r3, [r5, #3]
     616:	2b00      	cmp	r3, #0
     618:	d034      	beq.n	684 <rtc_count_init+0xc0>
				/* Set clear on match. */
				rtc_module->MODE0.CTRL.reg |= RTC_MODE0_CTRL_MATCHCLR;
     61a:	8832      	ldrh	r2, [r6, #0]
     61c:	2380      	movs	r3, #128	; 0x80
     61e:	4313      	orrs	r3, r2
     620:	8033      	strh	r3, [r6, #0]
     622:	e02f      	b.n	684 <rtc_count_init+0xc0>
     624:	7a93      	ldrb	r3, [r2, #10]
			}
			/* Set compare values. */
			for (uint8_t i = 0; i < RTC_NUM_OF_COMP32; i++) {
				while (rtc_count_is_syncing(module)) {
     626:	b25b      	sxtb	r3, r3
     628:	2b00      	cmp	r3, #0
     62a:	dbfb      	blt.n	624 <rtc_count_init+0x60>
					/* Wait for synchronization */
				}

				rtc_count_set_compare(module, config->compare_values[i],
     62c:	1c20      	adds	r0, r4, #0
     62e:	68a9      	ldr	r1, [r5, #8]
     630:	2200      	movs	r2, #0
     632:	4b1b      	ldr	r3, [pc, #108]	; (6a0 <rtc_count_init+0xdc>)
     634:	4798      	blx	r3
     636:	e01b      	b.n	670 <rtc_count_init+0xac>
			}
			break;

		case RTC_COUNT_MODE_16BIT:
			/* Set 16bit mode. */
			rtc_module->MODE1.CTRL.reg |= RTC_MODE1_CTRL_MODE(1);
     638:	8832      	ldrh	r2, [r6, #0]
     63a:	2304      	movs	r3, #4
     63c:	4313      	orrs	r3, r2
     63e:	8033      	strh	r3, [r6, #0]

			/* Check if match on clear is set, and return invalid
			 * argument if set. */
			if (config->clear_on_match) {
     640:	78eb      	ldrb	r3, [r5, #3]
				Assert(false);
				return STATUS_ERR_INVALID_ARG;
     642:	2017      	movs	r0, #23
			/* Set 16bit mode. */
			rtc_module->MODE1.CTRL.reg |= RTC_MODE1_CTRL_MODE(1);

			/* Check if match on clear is set, and return invalid
			 * argument if set. */
			if (config->clear_on_match) {
     644:	2b00      	cmp	r3, #0
     646:	d11f      	bne.n	688 <rtc_count_init+0xc4>
{
 	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
     648:	6822      	ldr	r2, [r4, #0]

        if (rtc_module->MODE0.STATUS.reg & RTC_STATUS_SYNCBUSY) {
     64a:	7a93      	ldrb	r3, [r2, #10]
				Assert(false);
				return STATUS_ERR_INVALID_ARG;
			}
			/* Set compare values. */
			for (uint8_t i = 0; i < RTC_NUM_OF_COMP16; i++) {
				while (rtc_count_is_syncing(module)) {
     64c:	b25b      	sxtb	r3, r3
     64e:	2b00      	cmp	r3, #0
     650:	dbfb      	blt.n	64a <rtc_count_init+0x86>
					/* Wait for synchronization */
				}

				rtc_count_set_compare(module, config->compare_values[i],
     652:	1c20      	adds	r0, r4, #0
     654:	68a9      	ldr	r1, [r5, #8]
     656:	2200      	movs	r2, #0
     658:	4b11      	ldr	r3, [pc, #68]	; (6a0 <rtc_count_init+0xdc>)
     65a:	4798      	blx	r3
{
 	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
     65c:	6822      	ldr	r2, [r4, #0]

        if (rtc_module->MODE0.STATUS.reg & RTC_STATUS_SYNCBUSY) {
     65e:	7a93      	ldrb	r3, [r2, #10]
				Assert(false);
				return STATUS_ERR_INVALID_ARG;
			}
			/* Set compare values. */
			for (uint8_t i = 0; i < RTC_NUM_OF_COMP16; i++) {
				while (rtc_count_is_syncing(module)) {
     660:	b25b      	sxtb	r3, r3
     662:	2b00      	cmp	r3, #0
     664:	dbfb      	blt.n	65e <rtc_count_init+0x9a>
					/* Wait for synchronization */
				}

				rtc_count_set_compare(module, config->compare_values[i],
     666:	1c20      	adds	r0, r4, #0
     668:	68e9      	ldr	r1, [r5, #12]
     66a:	2201      	movs	r2, #1
     66c:	4b0c      	ldr	r3, [pc, #48]	; (6a0 <rtc_count_init+0xdc>)
     66e:	4798      	blx	r3
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
	}

	/* Check to set continuously clock read update mode. */
	if (config->continuously_update) {
     670:	792b      	ldrb	r3, [r5, #4]
		/* Set continuously mode. */
		rtc_module->MODE0.READREQ.reg |= RTC_READREQ_RCONT;
	}

	/* Return status OK if everything was configured. */
	return STATUS_OK;
     672:	2000      	movs	r0, #0
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
	}

	/* Check to set continuously clock read update mode. */
	if (config->continuously_update) {
     674:	2b00      	cmp	r3, #0
     676:	d007      	beq.n	688 <rtc_count_init+0xc4>
		/* Set continuously mode. */
		rtc_module->MODE0.READREQ.reg |= RTC_READREQ_RCONT;
     678:	8872      	ldrh	r2, [r6, #2]
     67a:	2380      	movs	r3, #128	; 0x80
     67c:	01db      	lsls	r3, r3, #7
     67e:	4313      	orrs	r3, r2
     680:	8073      	strh	r3, [r6, #2]
     682:	e001      	b.n	688 <rtc_count_init+0xc4>
{
 	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
     684:	6822      	ldr	r2, [r4, #0]
     686:	e7cd      	b.n	624 <rtc_count_init+0x60>
	_rtc_instance[_rtc_get_inst_index(hw)] = module;
#  endif

	/* Set config and return status. */
	return _rtc_count_set_config(module, config);
}
     688:	b002      	add	sp, #8
     68a:	bd70      	pop	{r4, r5, r6, pc}
     68c:	40000400 	.word	0x40000400
     690:	0000218d 	.word	0x0000218d
     694:	00002101 	.word	0x00002101
     698:	00000541 	.word	0x00000541
     69c:	20002acc 	.word	0x20002acc
     6a0:	0000057d 	.word	0x0000057d

000006a4 <rtc_count_register_callback>:
{

	enum status_code status = STATUS_OK;

	/* Overflow callback */
	if (callback_type == RTC_COUNT_CALLBACK_OVERFLOW) {
     6a4:	2a02      	cmp	r2, #2
     6a6:	d00b      	beq.n	6c0 <rtc_count_register_callback+0x1c>
		status = STATUS_OK;
	} else {
		/* Make sure callback type can be registered */
		switch (module->mode) {
     6a8:	7903      	ldrb	r3, [r0, #4]
     6aa:	2b00      	cmp	r3, #0
     6ac:	d005      	beq.n	6ba <rtc_count_register_callback+0x16>
     6ae:	2b01      	cmp	r3, #1
     6b0:	d112      	bne.n	6d8 <rtc_count_register_callback+0x34>
     6b2:	3316      	adds	r3, #22
		case RTC_COUNT_MODE_32BIT:
			/* Check sanity for 32-bit mode. */
			if (callback_type > RTC_NUM_OF_COMP32) {
     6b4:	2a01      	cmp	r2, #1
     6b6:	d810      	bhi.n	6da <rtc_count_register_callback+0x36>
     6b8:	e002      	b.n	6c0 <rtc_count_register_callback+0x1c>
     6ba:	2317      	movs	r3, #23
			}

			break;
		case RTC_COUNT_MODE_16BIT:
			/* Check sanity for 16-bit mode. */
			if (callback_type > RTC_NUM_OF_COMP16) {
     6bc:	2a02      	cmp	r2, #2
     6be:	d80c      	bhi.n	6da <rtc_count_register_callback+0x36>
		}
	}

	if (status == STATUS_OK) {
		/* Register callback */
		module->callbacks[callback_type] = callback;
     6c0:	1c93      	adds	r3, r2, #2
     6c2:	009b      	lsls	r3, r3, #2
     6c4:	5019      	str	r1, [r3, r0]
		/* Set corresponding bit to set callback as registered */
		module->registered_callback |= (1 << callback_type);
     6c6:	7d01      	ldrb	r1, [r0, #20]
     6c8:	2301      	movs	r3, #1
     6ca:	4093      	lsls	r3, r2
     6cc:	1c1a      	adds	r2, r3, #0
     6ce:	430a      	orrs	r2, r1
     6d0:	b2d2      	uxtb	r2, r2
     6d2:	7502      	strb	r2, [r0, #20]
     6d4:	2300      	movs	r3, #0
     6d6:	e000      	b.n	6da <rtc_count_register_callback+0x36>
			if (callback_type > RTC_NUM_OF_COMP16) {
				status = STATUS_ERR_INVALID_ARG;
			}
			break;
		default:
			status = STATUS_ERR_INVALID_ARG;
     6d8:	2317      	movs	r3, #23
		/* Set corresponding bit to set callback as registered */
		module->registered_callback |= (1 << callback_type);
	}

	return status;
}
     6da:	1c18      	adds	r0, r3, #0
     6dc:	4770      	bx	lr
     6de:	46c0      	nop			; (mov r8, r8)

000006e0 <rtc_count_enable_callback>:
 * \param[in]     callback_type Callback type to enable
 */
void rtc_count_enable_callback(
		struct rtc_module *const module,
		enum rtc_count_callback callback_type)
{
     6e0:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
     6e2:	6802      	ldr	r2, [r0, #0]

	if (callback_type == RTC_COUNT_CALLBACK_OVERFLOW) {
     6e4:	2902      	cmp	r1, #2
     6e6:	d102      	bne.n	6ee <rtc_count_enable_callback+0xe>
		rtc_module->MODE0.INTENSET.reg = RTC_MODE0_INTFLAG_OVF;
     6e8:	2380      	movs	r3, #128	; 0x80
     6ea:	71d3      	strb	r3, [r2, #7]
     6ec:	e004      	b.n	6f8 <rtc_count_enable_callback+0x18>
	} else {
		rtc_module->MODE0.INTENSET.reg = RTC_MODE1_INTFLAG_CMP(1 << callback_type);
     6ee:	2301      	movs	r3, #1
     6f0:	408b      	lsls	r3, r1
     6f2:	2403      	movs	r4, #3
     6f4:	4023      	ands	r3, r4
     6f6:	71d3      	strb	r3, [r2, #7]
	}
	/* Mark callback as enabled. */
	module->enabled_callback |= (1 << callback_type);
     6f8:	7d42      	ldrb	r2, [r0, #21]
     6fa:	2301      	movs	r3, #1
     6fc:	408b      	lsls	r3, r1
     6fe:	1c19      	adds	r1, r3, #0
     700:	4311      	orrs	r1, r2
     702:	b2c9      	uxtb	r1, r1
     704:	7541      	strb	r1, [r0, #21]
}
     706:	bd10      	pop	{r4, pc}

00000708 <RTC_Handler>:
/**
 * \internal ISR handler for RTC
 */
#if (RTC_INST_NUM == 1)
void RTC_Handler(void)
{
     708:	b510      	push	{r4, lr}
 *
 * \param [in] instance_index  Default value 0
 */
static void _rtc_interrupt_handler(const uint32_t instance_index)
{
	struct rtc_module *module = _rtc_instance[instance_index];
     70a:	4b12      	ldr	r3, [pc, #72]	; (754 <RTC_Handler+0x4c>)
     70c:	681a      	ldr	r2, [r3, #0]

	Rtc *const rtc_module = module->hw;
     70e:	6814      	ldr	r4, [r2, #0]

	/* Combine callback registered and enabled masks */
	uint8_t callback_mask = module->enabled_callback;
     710:	7d53      	ldrb	r3, [r2, #21]
	callback_mask &= module->registered_callback;
     712:	7d11      	ldrb	r1, [r2, #20]
     714:	4019      	ands	r1, r3

	/* Read and mask interrupt flag register */
	uint16_t interrupt_status = rtc_module->MODE0.INTFLAG.reg;
     716:	7a23      	ldrb	r3, [r4, #8]
	interrupt_status &= rtc_module->MODE0.INTENSET.reg;
     718:	79e0      	ldrb	r0, [r4, #7]
     71a:	4003      	ands	r3, r0

	if (interrupt_status & RTC_MODE0_INTFLAG_OVF) {
     71c:	09d8      	lsrs	r0, r3, #7
     71e:	d006      	beq.n	72e <RTC_Handler+0x26>
		/* Overflow interrupt */
		if (callback_mask & (1 << RTC_COUNT_CALLBACK_OVERFLOW)) {
     720:	074b      	lsls	r3, r1, #29
     722:	d501      	bpl.n	728 <RTC_Handler+0x20>
			module->callbacks[RTC_COUNT_CALLBACK_OVERFLOW]();
     724:	6913      	ldr	r3, [r2, #16]
     726:	4798      	blx	r3
		}

		/* Clear interrupt flag */
		rtc_module->MODE0.INTFLAG.reg = RTC_MODE0_INTFLAG_OVF;
     728:	2380      	movs	r3, #128	; 0x80
     72a:	7223      	strb	r3, [r4, #8]
     72c:	e010      	b.n	750 <RTC_Handler+0x48>

	} else if (interrupt_status & RTC_MODE1_INTFLAG_CMP(1 << 0)) {
     72e:	07d8      	lsls	r0, r3, #31
     730:	d506      	bpl.n	740 <RTC_Handler+0x38>
		/* Compare 0 interrupt */
		if (callback_mask & (1 << RTC_COUNT_CALLBACK_COMPARE_0)) {
     732:	07cb      	lsls	r3, r1, #31
     734:	d501      	bpl.n	73a <RTC_Handler+0x32>
			module->callbacks[RTC_COUNT_CALLBACK_COMPARE_0]();
     736:	6893      	ldr	r3, [r2, #8]
     738:	4798      	blx	r3
		}
		/* Clear interrupt flag */
		rtc_module->MODE0.INTFLAG.reg = RTC_MODE1_INTFLAG_CMP(1 << 0);
     73a:	2301      	movs	r3, #1
     73c:	7223      	strb	r3, [r4, #8]
     73e:	e007      	b.n	750 <RTC_Handler+0x48>

	} else if (interrupt_status & RTC_MODE1_INTFLAG_CMP(1 << 1)) {
     740:	079b      	lsls	r3, r3, #30
     742:	d505      	bpl.n	750 <RTC_Handler+0x48>
		#if (RTC_NUM_OF_COMP16 > 1) || defined(__DOXYGEN__)
		/* Compare 1 interrupt */
		if (callback_mask & (1 << RTC_COUNT_CALLBACK_COMPARE_1)) {
     744:	078b      	lsls	r3, r1, #30
     746:	d501      	bpl.n	74c <RTC_Handler+0x44>
			module->callbacks[RTC_COUNT_CALLBACK_COMPARE_1]();
     748:	68d3      	ldr	r3, [r2, #12]
     74a:	4798      	blx	r3
		}
		/* Clear interrupt flag */
		rtc_module->MODE0.INTFLAG.reg = RTC_MODE1_INTFLAG_CMP(1 << 1);
     74c:	2302      	movs	r3, #2
     74e:	7223      	strb	r3, [r4, #8]
 */
#if (RTC_INST_NUM == 1)
void RTC_Handler(void)
{
	_rtc_interrupt_handler(0);
}
     750:	bd10      	pop	{r4, pc}
     752:	46c0      	nop			; (mov r8, r8)
     754:	20002acc 	.word	0x20002acc

00000758 <_i2c_master_wait_for_sync>:
{
	/* Sanity check. */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_hw = &(module->hw->I2CM);
     758:	6801      	ldr	r1, [r0, #0]

#if defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_1)
	return (i2c_hw->STATUS.reg & SERCOM_I2CM_STATUS_SYNCBUSY);
#elif defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_2)
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
     75a:	2207      	movs	r2, #7
     75c:	69cb      	ldr	r3, [r1, #28]
		const struct i2c_master_module *const module)
{
	/* Sanity check. */
	Assert(module);

	while (i2c_master_is_syncing(module)) {
     75e:	421a      	tst	r2, r3
     760:	d1fc      	bne.n	75c <_i2c_master_wait_for_sync+0x4>
		/* Wait for I2C module to sync. */
	}
}
     762:	4770      	bx	lr

00000764 <i2c_master_init>:
 */
enum status_code i2c_master_init(
		struct i2c_master_module *const module,
		Sercom *const hw,
		const struct i2c_master_config *const config)
{
     764:	b5f0      	push	{r4, r5, r6, r7, lr}
     766:	4647      	mov	r7, r8
     768:	b480      	push	{r7}
     76a:	b082      	sub	sp, #8
     76c:	1c07      	adds	r7, r0, #0
     76e:	1c0d      	adds	r5, r1, #0
     770:	1c16      	adds	r6, r2, #0
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize software module */
	module->hw = hw;
     772:	6039      	str	r1, [r7, #0]

	SercomI2cm *const i2c_module = &(module->hw->I2CM);

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
     774:	1c08      	adds	r0, r1, #0
     776:	4b5f      	ldr	r3, [pc, #380]	; (8f4 <i2c_master_init+0x190>)
     778:	4798      	blx	r3
		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
			break;

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
     77a:	495f      	ldr	r1, [pc, #380]	; (8f8 <i2c_master_init+0x194>)
     77c:	6a0a      	ldr	r2, [r1, #32]
	uint32_t pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
     77e:	1c84      	adds	r4, r0, #2
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;

	/* Turn on module in PM */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
     780:	2301      	movs	r3, #1
     782:	40a3      	lsls	r3, r4
     784:	4313      	orrs	r3, r2
     786:	620b      	str	r3, [r1, #32]

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
	gclk_chan_conf.source_generator = config->generator_source;
     788:	a901      	add	r1, sp, #4
     78a:	7b33      	ldrb	r3, [r6, #12]
     78c:	700b      	strb	r3, [r1, #0]

	SercomI2cm *const i2c_module = &(module->hw->I2CM);

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
	uint32_t pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
     78e:	3014      	adds	r0, #20

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
	gclk_chan_conf.source_generator = config->generator_source;
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
     790:	b2c4      	uxtb	r4, r0
     792:	1c20      	adds	r0, r4, #0
     794:	4b59      	ldr	r3, [pc, #356]	; (8fc <i2c_master_init+0x198>)
     796:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
     798:	1c20      	adds	r0, r4, #0
     79a:	4b59      	ldr	r3, [pc, #356]	; (900 <i2c_master_init+0x19c>)
     79c:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
     79e:	7b30      	ldrb	r0, [r6, #12]
     7a0:	2100      	movs	r1, #0
     7a2:	4b58      	ldr	r3, [pc, #352]	; (904 <i2c_master_init+0x1a0>)
     7a4:	4798      	blx	r3

	/* Check if module is enabled. */
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_ENABLE) {
     7a6:	682b      	ldr	r3, [r5, #0]
		return STATUS_ERR_DENIED;
     7a8:	201c      	movs	r0, #28
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
	system_gclk_chan_enable(gclk_index);
	sercom_set_gclk_generator(config->generator_source, false);

	/* Check if module is enabled. */
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_ENABLE) {
     7aa:	079b      	lsls	r3, r3, #30
     7ac:	d500      	bpl.n	7b0 <i2c_master_init+0x4c>
     7ae:	e09d      	b.n	8ec <i2c_master_init+0x188>
		return STATUS_ERR_DENIED;
	}

	/* Check if reset is in progress. */
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_SWRST) {
     7b0:	682b      	ldr	r3, [r5, #0]
		return STATUS_BUSY;
     7b2:	3817      	subs	r0, #23
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_ENABLE) {
		return STATUS_ERR_DENIED;
	}

	/* Check if reset is in progress. */
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_SWRST) {
     7b4:	07db      	lsls	r3, r3, #31
     7b6:	d500      	bpl.n	7ba <i2c_master_init+0x56>
     7b8:	e098      	b.n	8ec <i2c_master_init+0x188>
	module->status = STATUS_OK;
	module->buffer = NULL;
#endif

	/* Set sercom module to operate in I2C master mode. */
	i2c_module->CTRLA.reg = SERCOM_I2CM_CTRLA_MODE_I2C_MASTER;
     7ba:	2314      	movs	r3, #20
     7bc:	602b      	str	r3, [r5, #0]
	uint32_t tmp_ctrla;
	int32_t tmp_baud;
	int32_t tmp_baud_hs;
	enum status_code tmp_status_code = STATUS_OK;

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     7be:	683b      	ldr	r3, [r7, #0]
     7c0:	4698      	mov	r8, r3
	Sercom *const sercom_hw = module->hw;

	uint8_t sercom_index = _sercom_get_sercom_inst_index(sercom_hw);
     7c2:	1c18      	adds	r0, r3, #0
     7c4:	4b4b      	ldr	r3, [pc, #300]	; (8f4 <i2c_master_init+0x190>)
     7c6:	4798      	blx	r3
     7c8:	1c05      	adds	r5, r0, #0
     7ca:	2380      	movs	r3, #128	; 0x80
     7cc:	466a      	mov	r2, sp
     7ce:	7013      	strb	r3, [r2, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     7d0:	2300      	movs	r3, #0
     7d2:	7053      	strb	r3, [r2, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
     7d4:	2201      	movs	r2, #1
     7d6:	4669      	mov	r1, sp
     7d8:	708a      	strb	r2, [r1, #2]
	config->powersave    = false;
     7da:	70cb      	strb	r3, [r1, #3]

	/* Pin configuration */
	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);

	uint32_t pad0 = config->pinmux_pad0;
     7dc:	69f0      	ldr	r0, [r6, #28]
	uint32_t pad1 = config->pinmux_pad1;
     7de:	6a34      	ldr	r4, [r6, #32]

	/* SERCOM PAD0 - SDA */
	if (pad0 == PINMUX_DEFAULT) {
     7e0:	2800      	cmp	r0, #0
     7e2:	d103      	bne.n	7ec <i2c_master_init+0x88>
		pad0 = _sercom_get_default_pad(sercom_hw, 0);
     7e4:	4640      	mov	r0, r8
     7e6:	2100      	movs	r1, #0
     7e8:	4b47      	ldr	r3, [pc, #284]	; (908 <i2c_master_init+0x1a4>)
     7ea:	4798      	blx	r3
	}
	pin_conf.mux_position = pad0 & 0xFFFF;
     7ec:	466b      	mov	r3, sp
     7ee:	7018      	strb	r0, [r3, #0]
	pin_conf.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK;
     7f0:	2302      	movs	r3, #2
     7f2:	466a      	mov	r2, sp
     7f4:	7053      	strb	r3, [r2, #1]
	system_pinmux_pin_set_config(pad0 >> 16, &pin_conf);
     7f6:	0c00      	lsrs	r0, r0, #16
     7f8:	b2c0      	uxtb	r0, r0
     7fa:	4669      	mov	r1, sp
     7fc:	4b43      	ldr	r3, [pc, #268]	; (90c <i2c_master_init+0x1a8>)
     7fe:	4798      	blx	r3

	/* SERCOM PAD1 - SCL */
	if (pad1 == PINMUX_DEFAULT) {
     800:	2c00      	cmp	r4, #0
     802:	d104      	bne.n	80e <i2c_master_init+0xaa>
		pad1 = _sercom_get_default_pad(sercom_hw, 1);
     804:	4640      	mov	r0, r8
     806:	2101      	movs	r1, #1
     808:	4b3f      	ldr	r3, [pc, #252]	; (908 <i2c_master_init+0x1a4>)
     80a:	4798      	blx	r3
     80c:	1c04      	adds	r4, r0, #0
	}
	pin_conf.mux_position = pad1 & 0xFFFF;
     80e:	466b      	mov	r3, sp
     810:	701c      	strb	r4, [r3, #0]
	pin_conf.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK;
     812:	2302      	movs	r3, #2
     814:	466a      	mov	r2, sp
     816:	7053      	strb	r3, [r2, #1]
	system_pinmux_pin_set_config(pad1 >> 16, &pin_conf);
     818:	0c24      	lsrs	r4, r4, #16
     81a:	b2e0      	uxtb	r0, r4
     81c:	4669      	mov	r1, sp
     81e:	4b3b      	ldr	r3, [pc, #236]	; (90c <i2c_master_init+0x1a8>)
     820:	4798      	blx	r3

	/* Save timeout on unknown bus state in software module. */
	module->unknown_bus_state_timeout = config->unknown_bus_state_timeout;
     822:	8ab3      	ldrh	r3, [r6, #20]
     824:	80fb      	strh	r3, [r7, #6]

	/* Save timeout on buffer write. */
	module->buffer_timeout = config->buffer_timeout;
     826:	8af3      	ldrh	r3, [r6, #22]
     828:	813b      	strh	r3, [r7, #8]

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
     82a:	7e32      	ldrb	r2, [r6, #24]
		tmp_ctrla = SERCOM_I2CM_CTRLA_RUNSTDBY;
     82c:	2380      	movs	r3, #128	; 0x80

	/* Save timeout on buffer write. */
	module->buffer_timeout = config->buffer_timeout;

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
     82e:	2a00      	cmp	r2, #0
     830:	d104      	bne.n	83c <i2c_master_init+0xd8>
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
     832:	4b37      	ldr	r3, [pc, #220]	; (910 <i2c_master_init+0x1ac>)
     834:	789b      	ldrb	r3, [r3, #2]
     836:	079b      	lsls	r3, r3, #30
		tmp_ctrla = SERCOM_I2CM_CTRLA_RUNSTDBY;
     838:	0fdb      	lsrs	r3, r3, #31
     83a:	01db      	lsls	r3, r3, #7
	} else {
		tmp_ctrla = 0;
	}

	/* Check and set start data hold timeout. */
	if (config->start_hold_time != I2C_MASTER_START_HOLD_TIME_DISABLED) {
     83c:	6932      	ldr	r2, [r6, #16]
     83e:	2a00      	cmp	r2, #0
     840:	d000      	beq.n	844 <i2c_master_init+0xe0>
		tmp_ctrla |= config->start_hold_time;
     842:	4313      	orrs	r3, r2
	}

	/* Check and set transfer speed */
	tmp_ctrla |= config->transfer_speed;
     844:	68b2      	ldr	r2, [r6, #8]
     846:	4313      	orrs	r3, r2

	/* Check and set SCL low timeout. */
	if (config->scl_low_timeout) {
     848:	2224      	movs	r2, #36	; 0x24
     84a:	5cb2      	ldrb	r2, [r6, r2]
     84c:	2a00      	cmp	r2, #0
     84e:	d002      	beq.n	856 <i2c_master_init+0xf2>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_LOWTOUTEN;
     850:	2280      	movs	r2, #128	; 0x80
     852:	05d2      	lsls	r2, r2, #23
     854:	4313      	orrs	r3, r2
	}

	/* Check and set inactive bus timeout. */
	if (config->inactive_timeout != I2C_MASTER_INACTIVE_TIMEOUT_DISABLED) {
     856:	6ab2      	ldr	r2, [r6, #40]	; 0x28
     858:	2a00      	cmp	r2, #0
     85a:	d000      	beq.n	85e <i2c_master_init+0xfa>
		tmp_ctrla |= config->inactive_timeout;
     85c:	4313      	orrs	r3, r2
	}

	/* Check and set SCL clock stretch mode. */
	if (config->scl_stretch_only_after_ack_bit) {
     85e:	222c      	movs	r2, #44	; 0x2c
     860:	5cb2      	ldrb	r2, [r6, r2]
     862:	2a00      	cmp	r2, #0
     864:	d002      	beq.n	86c <i2c_master_init+0x108>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_SCLSM;
     866:	2280      	movs	r2, #128	; 0x80
     868:	0512      	lsls	r2, r2, #20
     86a:	4313      	orrs	r3, r2
	}

	/* Check and set slave SCL low extend timeout. */
	if (config->slave_scl_low_extend_timeout) {
     86c:	222d      	movs	r2, #45	; 0x2d
     86e:	5cb2      	ldrb	r2, [r6, r2]
     870:	2a00      	cmp	r2, #0
     872:	d002      	beq.n	87a <i2c_master_init+0x116>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_SEXTTOEN;
     874:	2280      	movs	r2, #128	; 0x80
     876:	0412      	lsls	r2, r2, #16
     878:	4313      	orrs	r3, r2
	}

	/* Check and set master SCL low extend timeout. */
	if (config->master_scl_low_extend_timeout) {
     87a:	222e      	movs	r2, #46	; 0x2e
     87c:	5cb2      	ldrb	r2, [r6, r2]
     87e:	2a00      	cmp	r2, #0
     880:	d002      	beq.n	888 <i2c_master_init+0x124>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_MEXTTOEN;
     882:	2280      	movs	r2, #128	; 0x80
     884:	03d2      	lsls	r2, r2, #15
     886:	4313      	orrs	r3, r2
	}

	/* Write config to register CTRLA. */
	i2c_module->CTRLA.reg |= tmp_ctrla;
     888:	4642      	mov	r2, r8
     88a:	6812      	ldr	r2, [r2, #0]
     88c:	4313      	orrs	r3, r2
     88e:	4642      	mov	r2, r8
     890:	6013      	str	r3, [r2, #0]

	/* Set configurations in CTRLB. */
	i2c_module->CTRLB.reg = SERCOM_I2CM_CTRLB_SMEN;
     892:	2380      	movs	r3, #128	; 0x80
     894:	005b      	lsls	r3, r3, #1
     896:	6053      	str	r3, [r2, #4]

	/* Find and set baudrate. */
	tmp_baud = (int32_t)(div_ceil(
     898:	3514      	adds	r5, #20
     89a:	b2ed      	uxtb	r5, r5
     89c:	1c28      	adds	r0, r5, #0
     89e:	4b1d      	ldr	r3, [pc, #116]	; (914 <i2c_master_init+0x1b0>)
     8a0:	4798      	blx	r3
     8a2:	21fa      	movs	r1, #250	; 0xfa
     8a4:	00c9      	lsls	r1, r1, #3
     8a6:	6833      	ldr	r3, [r6, #0]
     8a8:	4359      	muls	r1, r3
     8aa:	1e4b      	subs	r3, r1, #1
     8ac:	1818      	adds	r0, r3, r0
     8ae:	4b1a      	ldr	r3, [pc, #104]	; (918 <i2c_master_init+0x1b4>)
     8b0:	4798      	blx	r3
				system_gclk_chan_get_hz(SERCOM0_GCLK_ID_CORE + sercom_index),
				(2000*(config->baud_rate))) - 5);
     8b2:	1f44      	subs	r4, r0, #5

	/* Check that baudrate is supported at current speed. */
	if (tmp_baud > 255 || tmp_baud < 0) {
     8b4:	2cff      	cmp	r4, #255	; 0xff
     8b6:	d80d      	bhi.n	8d4 <i2c_master_init+0x170>
		/* Baud rate not supported. */
		tmp_status_code = STATUS_ERR_BAUDRATE_UNAVAILABLE;
	} else {
		/* Find baudrate for high speed */
		tmp_baud_hs = (int32_t)(div_ceil(
     8b8:	1c28      	adds	r0, r5, #0
     8ba:	4b16      	ldr	r3, [pc, #88]	; (914 <i2c_master_init+0x1b0>)
     8bc:	4798      	blx	r3
     8be:	6871      	ldr	r1, [r6, #4]
     8c0:	23fa      	movs	r3, #250	; 0xfa
     8c2:	00db      	lsls	r3, r3, #3
     8c4:	4359      	muls	r1, r3
     8c6:	1e4b      	subs	r3, r1, #1
     8c8:	1818      	adds	r0, r3, r0
     8ca:	4b13      	ldr	r3, [pc, #76]	; (918 <i2c_master_init+0x1b4>)
     8cc:	4798      	blx	r3
				system_gclk_chan_get_hz(SERCOM0_GCLK_ID_CORE + sercom_index),
				(2000*(config->baud_rate_high_speed))) - 1);
     8ce:	3801      	subs	r0, #1

		/* Check that baudrate is supported at current speed. */
		if (tmp_baud_hs > 255 || tmp_baud_hs < 0) {
     8d0:	28ff      	cmp	r0, #255	; 0xff
     8d2:	d901      	bls.n	8d8 <i2c_master_init+0x174>
	/* Save timeout on buffer write. */
	module->buffer_timeout = config->buffer_timeout;

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
		tmp_ctrla = SERCOM_I2CM_CTRLA_RUNSTDBY;
     8d4:	2040      	movs	r0, #64	; 0x40
     8d6:	e009      	b.n	8ec <i2c_master_init+0x188>
		}
	}
	if (tmp_status_code != STATUS_ERR_BAUDRATE_UNAVAILABLE) {
		/* Baud rate acceptable. */
		i2c_module->BAUD.reg = SERCOM_I2CM_BAUD_BAUD(tmp_baud) |
			SERCOM_I2CM_BAUD_HSBAUD(tmp_baud_hs);
     8d8:	0400      	lsls	r0, r0, #16
     8da:	23ff      	movs	r3, #255	; 0xff
     8dc:	041b      	lsls	r3, r3, #16
     8de:	4018      	ands	r0, r3
			tmp_status_code = STATUS_ERR_BAUDRATE_UNAVAILABLE;
		}
	}
	if (tmp_status_code != STATUS_ERR_BAUDRATE_UNAVAILABLE) {
		/* Baud rate acceptable. */
		i2c_module->BAUD.reg = SERCOM_I2CM_BAUD_BAUD(tmp_baud) |
     8e0:	23ff      	movs	r3, #255	; 0xff
     8e2:	401c      	ands	r4, r3
     8e4:	4304      	orrs	r4, r0
     8e6:	4643      	mov	r3, r8
     8e8:	60dc      	str	r4, [r3, #12]

	/* Temporary variables. */
	uint32_t tmp_ctrla;
	int32_t tmp_baud;
	int32_t tmp_baud_hs;
	enum status_code tmp_status_code = STATUS_OK;
     8ea:	2000      	movs	r0, #0
	/* Set sercom module to operate in I2C master mode. */
	i2c_module->CTRLA.reg = SERCOM_I2CM_CTRLA_MODE_I2C_MASTER;

	/* Set config and return status. */
	return _i2c_master_set_config(module, config);
}
     8ec:	b002      	add	sp, #8
     8ee:	bc04      	pop	{r2}
     8f0:	4690      	mov	r8, r2
     8f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
     8f4:	0000101d 	.word	0x0000101d
     8f8:	40000400 	.word	0x40000400
     8fc:	0000218d 	.word	0x0000218d
     900:	00002101 	.word	0x00002101
     904:	00000e49 	.word	0x00000e49
     908:	00000e95 	.word	0x00000e95
     90c:	000022dd 	.word	0x000022dd
     910:	41002000 	.word	0x41002000
     914:	000021a9 	.word	0x000021a9
     918:	0001076d 	.word	0x0001076d

0000091c <i2c_master_reset>:
 * Reset the module to hardware defaults.
 *
 * \param[in,out] module Pointer to software module structure
 */
void i2c_master_reset(struct i2c_master_module *const module)
{
     91c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     91e:	1c04      	adds	r4, r0, #0
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     920:	6807      	ldr	r7, [r0, #0]

	/* Wait for sync */
	_i2c_master_wait_for_sync(module);
     922:	4d07      	ldr	r5, [pc, #28]	; (940 <i2c_master_reset+0x24>)
     924:	47a8      	blx	r5
{
	/* Sanity check of arguments. */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     926:	6826      	ldr	r6, [r4, #0]

	/* Wait for module to sync. */
	_i2c_master_wait_for_sync(module);
     928:	1c20      	adds	r0, r4, #0
     92a:	47a8      	blx	r5

	/* Disable module. */
	i2c_module->CTRLA.reg &= ~SERCOM_I2CM_CTRLA_ENABLE;
     92c:	6833      	ldr	r3, [r6, #0]
     92e:	2202      	movs	r2, #2
     930:	4393      	bics	r3, r2
     932:	6033      	str	r3, [r6, #0]
	system_interrupt_clear_pending(_sercom_get_interrupt_vector(module->hw));
	system_interrupt_leave_critical_section();
#endif

	/* Wait for sync */
	_i2c_master_wait_for_sync(module);
     934:	1c20      	adds	r0, r4, #0
     936:	47a8      	blx	r5

	/* Reset module */
	i2c_module->CTRLA.reg = SERCOM_I2CM_CTRLA_SWRST;
     938:	2301      	movs	r3, #1
     93a:	603b      	str	r3, [r7, #0]
}
     93c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     93e:	46c0      	nop			; (mov r8, r8)
     940:	00000759 	.word	0x00000759

00000944 <_i2c_master_address_response>:
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     944:	6803      	ldr	r3, [r0, #0]

	/* Check for error and ignore bus-error; workaround for BUSSTATE stuck in
	 * BUSY */
	if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB) {
     946:	7e1a      	ldrb	r2, [r3, #24]
     948:	0792      	lsls	r2, r2, #30
     94a:	d507      	bpl.n	95c <_i2c_master_address_response+0x18>

		/* Clear write interrupt flag */
		i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
     94c:	2202      	movs	r2, #2
     94e:	761a      	strb	r2, [r3, #24]

		/* Check arbitration. */
		if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_ARBLOST) {
     950:	8b5b      	ldrh	r3, [r3, #26]
     952:	079b      	lsls	r3, r3, #30
			/* Return packet collision. */
			return STATUS_ERR_PACKET_COLLISION;
     954:	2041      	movs	r0, #65	; 0x41

		/* Return bad address value. */
		return STATUS_ERR_BAD_ADDRESS;
	}

	return STATUS_OK;
     956:	17db      	asrs	r3, r3, #31
     958:	4018      	ands	r0, r3
     95a:	e00a      	b.n	972 <_i2c_master_address_response+0x2e>
		if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_ARBLOST) {
			/* Return packet collision. */
			return STATUS_ERR_PACKET_COLLISION;
		}
	/* Check that slave responded with ack. */
	} else if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
     95c:	8b5a      	ldrh	r2, [r3, #26]
     95e:	0752      	lsls	r2, r2, #29
     960:	d506      	bpl.n	970 <_i2c_master_address_response+0x2c>
		/* Slave busy. Issue ack and stop command. */
		i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
     962:	685a      	ldr	r2, [r3, #4]
     964:	21c0      	movs	r1, #192	; 0xc0
     966:	0289      	lsls	r1, r1, #10
     968:	430a      	orrs	r2, r1
     96a:	605a      	str	r2, [r3, #4]

		/* Return bad address value. */
		return STATUS_ERR_BAD_ADDRESS;
     96c:	2018      	movs	r0, #24
     96e:	e000      	b.n	972 <_i2c_master_address_response+0x2e>
	}

	return STATUS_OK;
     970:	2000      	movs	r0, #0
}
     972:	4770      	bx	lr

00000974 <_i2c_master_wait_for_bus>:
 * \retval STATUS_ERR_TIMEOUT  If no response was given within specified timeout
 *                             period
 */
enum status_code _i2c_master_wait_for_bus(
		struct i2c_master_module *const module)
{
     974:	b530      	push	{r4, r5, lr}
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     976:	6802      	ldr	r2, [r0, #0]

	/* Wait for reply. */
	uint16_t timeout_counter = 0;
     978:	2300      	movs	r3, #0
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
     97a:	2401      	movs	r4, #1
			!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB)) {
     97c:	2502      	movs	r5, #2

	SercomI2cm *const i2c_module = &(module->hw->I2CM);

	/* Wait for reply. */
	uint16_t timeout_counter = 0;
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
     97e:	e004      	b.n	98a <_i2c_master_wait_for_bus+0x16>
			!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB)) {

		/* Check timeout condition. */
		if (++timeout_counter >= module->buffer_timeout) {
     980:	3301      	adds	r3, #1
     982:	b29b      	uxth	r3, r3
     984:	8901      	ldrh	r1, [r0, #8]
     986:	4299      	cmp	r1, r3
     988:	d907      	bls.n	99a <_i2c_master_wait_for_bus+0x26>

	SercomI2cm *const i2c_module = &(module->hw->I2CM);

	/* Wait for reply. */
	uint16_t timeout_counter = 0;
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
     98a:	7e11      	ldrb	r1, [r2, #24]
     98c:	4221      	tst	r1, r4
     98e:	d106      	bne.n	99e <_i2c_master_wait_for_bus+0x2a>
			!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB)) {
     990:	7e11      	ldrb	r1, [r2, #24]

	SercomI2cm *const i2c_module = &(module->hw->I2CM);

	/* Wait for reply. */
	uint16_t timeout_counter = 0;
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
     992:	4229      	tst	r1, r5
     994:	d0f4      	beq.n	980 <_i2c_master_wait_for_bus+0xc>
		/* Check timeout condition. */
		if (++timeout_counter >= module->buffer_timeout) {
			return STATUS_ERR_TIMEOUT;
		}
	}
	return STATUS_OK;
     996:	2000      	movs	r0, #0
     998:	e002      	b.n	9a0 <_i2c_master_wait_for_bus+0x2c>
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
			!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB)) {

		/* Check timeout condition. */
		if (++timeout_counter >= module->buffer_timeout) {
			return STATUS_ERR_TIMEOUT;
     99a:	2012      	movs	r0, #18
     99c:	e000      	b.n	9a0 <_i2c_master_wait_for_bus+0x2c>
		}
	}
	return STATUS_OK;
     99e:	2000      	movs	r0, #0
}
     9a0:	bd30      	pop	{r4, r5, pc}
     9a2:	46c0      	nop			; (mov r8, r8)

000009a4 <_i2c_master_send_hs_master_code>:
 * \retval STATUS_OK           No error happen.
 */
enum status_code _i2c_master_send_hs_master_code(
		struct i2c_master_module *const module,
		uint8_t hs_master_code)
{
     9a4:	b510      	push	{r4, lr}
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     9a6:	6804      	ldr	r4, [r0, #0]
	/* Return value. */
	enum status_code tmp_status;

	/* Set NACK for high speed code */
	i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
     9a8:	6863      	ldr	r3, [r4, #4]
     9aa:	2280      	movs	r2, #128	; 0x80
     9ac:	02d2      	lsls	r2, r2, #11
     9ae:	4313      	orrs	r3, r2
     9b0:	6063      	str	r3, [r4, #4]
	/* Send high speed code */
	i2c_module->ADDR.reg = hs_master_code;
     9b2:	6261      	str	r1, [r4, #36]	; 0x24
	/* Wait for response on bus. */
	tmp_status = _i2c_master_wait_for_bus(module);
     9b4:	4b02      	ldr	r3, [pc, #8]	; (9c0 <_i2c_master_send_hs_master_code+0x1c>)
     9b6:	4798      	blx	r3
	/* Clear write interrupt flag */
	i2c_module->INTFLAG.reg = SERCOM_I2CM_INTENCLR_MB;
     9b8:	2301      	movs	r3, #1
     9ba:	7623      	strb	r3, [r4, #24]

	return tmp_status;
}
     9bc:	bd10      	pop	{r4, pc}
     9be:	46c0      	nop			; (mov r8, r8)
     9c0:	00000975 	.word	0x00000975

000009c4 <_i2c_master_read_packet>:
 *
 */
static enum status_code _i2c_master_read_packet(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
     9c4:	b5f0      	push	{r4, r5, r6, r7, lr}
     9c6:	465f      	mov	r7, fp
     9c8:	4656      	mov	r6, sl
     9ca:	464d      	mov	r5, r9
     9cc:	4644      	mov	r4, r8
     9ce:	b4f0      	push	{r4, r5, r6, r7}
     9d0:	b083      	sub	sp, #12
     9d2:	9000      	str	r0, [sp, #0]
     9d4:	4688      	mov	r8, r1
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     9d6:	6805      	ldr	r5, [r0, #0]

	/* Return value. */
	enum status_code tmp_status;
	uint16_t tmp_data_length = packet->data_length;
     9d8:	884c      	ldrh	r4, [r1, #2]

	/* Written buffer counter. */
	uint16_t counter = 0;

	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
     9da:	682b      	ldr	r3, [r5, #0]
     9dc:	011b      	lsls	r3, r3, #4
     9de:	0fdb      	lsrs	r3, r3, #31
     9e0:	4699      	mov	r9, r3

	/* Switch to high speed mode */
	if (packet->high_speed) {
     9e2:	7a4b      	ldrb	r3, [r1, #9]
     9e4:	2b00      	cmp	r3, #0
     9e6:	d002      	beq.n	9ee <_i2c_master_read_packet+0x2a>
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
     9e8:	7a89      	ldrb	r1, [r1, #10]
     9ea:	4b4d      	ldr	r3, [pc, #308]	; (b20 <_i2c_master_read_packet+0x15c>)
     9ec:	4798      	blx	r3
	}

	/* Set action to ACK. */
	i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
     9ee:	686a      	ldr	r2, [r5, #4]
     9f0:	4b4c      	ldr	r3, [pc, #304]	; (b24 <_i2c_master_read_packet+0x160>)
     9f2:	4013      	ands	r3, r2
     9f4:	606b      	str	r3, [r5, #4]

	/* Set address and direction bit. Will send start command on bus. */
	if (packet->ten_bit_address) {
     9f6:	4643      	mov	r3, r8
     9f8:	7a1b      	ldrb	r3, [r3, #8]
     9fa:	2b00      	cmp	r3, #0
     9fc:	d026      	beq.n	a4c <_i2c_master_read_packet+0x88>
		/*
		 * Write ADDR.ADDR[10:1] with the 10-bit address. ADDR.TENBITEN must
		 * be set and read/write bit (ADDR.ADDR[0]) equal to 0.
		 */
		i2c_module->ADDR.reg = (packet->address << 1) |
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
     9fe:	4643      	mov	r3, r8
     a00:	7a5b      	ldrb	r3, [r3, #9]
     a02:	039a      	lsls	r2, r3, #14
	if (packet->ten_bit_address) {
		/*
		 * Write ADDR.ADDR[10:1] with the 10-bit address. ADDR.TENBITEN must
		 * be set and read/write bit (ADDR.ADDR[0]) equal to 0.
		 */
		i2c_module->ADDR.reg = (packet->address << 1) |
     a04:	4643      	mov	r3, r8
     a06:	881b      	ldrh	r3, [r3, #0]
     a08:	005b      	lsls	r3, r3, #1
     a0a:	4313      	orrs	r3, r2
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
     a0c:	2280      	movs	r2, #128	; 0x80
     a0e:	0212      	lsls	r2, r2, #8
     a10:	4313      	orrs	r3, r2
	if (packet->ten_bit_address) {
		/*
		 * Write ADDR.ADDR[10:1] with the 10-bit address. ADDR.TENBITEN must
		 * be set and read/write bit (ADDR.ADDR[0]) equal to 0.
		 */
		i2c_module->ADDR.reg = (packet->address << 1) |
     a12:	626b      	str	r3, [r5, #36]	; 0x24
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
			SERCOM_I2CM_ADDR_TENBITEN;

		/* Wait for response on bus. */
		tmp_status = _i2c_master_wait_for_bus(module);
     a14:	9800      	ldr	r0, [sp, #0]
     a16:	4b44      	ldr	r3, [pc, #272]	; (b28 <_i2c_master_read_packet+0x164>)
     a18:	4798      	blx	r3

		/* Set action to ack. */
		i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
     a1a:	686a      	ldr	r2, [r5, #4]
     a1c:	4b41      	ldr	r3, [pc, #260]	; (b24 <_i2c_master_read_packet+0x160>)
     a1e:	4013      	ands	r3, r2
     a20:	606b      	str	r3, [r5, #4]
		i2c_module->ADDR.reg = (packet->address << 1) |
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
			SERCOM_I2CM_ADDR_TENBITEN;

		/* Wait for response on bus. */
		tmp_status = _i2c_master_wait_for_bus(module);
     a22:	1e03      	subs	r3, r0, #0
		/* Set action to ack. */
		i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;

		/* Check for address response error unless previous error is
		 * detected. */
		if (tmp_status == STATUS_OK) {
     a24:	d173      	bne.n	b0e <_i2c_master_read_packet+0x14a>
			tmp_status = _i2c_master_address_response(module);
     a26:	9800      	ldr	r0, [sp, #0]
     a28:	4b40      	ldr	r3, [pc, #256]	; (b2c <_i2c_master_read_packet+0x168>)
     a2a:	4798      	blx	r3
     a2c:	1e03      	subs	r3, r0, #0
		}

		if (tmp_status == STATUS_OK) {
     a2e:	d16e      	bne.n	b0e <_i2c_master_read_packet+0x14a>
			/*
			 * Write ADDR[7:0] register to “11110 address[9:8] 1”.
			 * ADDR.TENBITEN must be cleared
			 */
			i2c_module->ADDR.reg = (((packet->address >> 8) | 0x78) << 1) |
				(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
     a30:	4643      	mov	r3, r8
     a32:	7a5b      	ldrb	r3, [r3, #9]
     a34:	039b      	lsls	r3, r3, #14
     a36:	2201      	movs	r2, #1
     a38:	4313      	orrs	r3, r2
		if (tmp_status == STATUS_OK) {
			/*
			 * Write ADDR[7:0] register to “11110 address[9:8] 1”.
			 * ADDR.TENBITEN must be cleared
			 */
			i2c_module->ADDR.reg = (((packet->address >> 8) | 0x78) << 1) |
     a3a:	4642      	mov	r2, r8
     a3c:	8812      	ldrh	r2, [r2, #0]
     a3e:	0a12      	lsrs	r2, r2, #8
     a40:	2178      	movs	r1, #120	; 0x78
     a42:	430a      	orrs	r2, r1
     a44:	0052      	lsls	r2, r2, #1
				(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
     a46:	4313      	orrs	r3, r2
		if (tmp_status == STATUS_OK) {
			/*
			 * Write ADDR[7:0] register to “11110 address[9:8] 1”.
			 * ADDR.TENBITEN must be cleared
			 */
			i2c_module->ADDR.reg = (((packet->address >> 8) | 0x78) << 1) |
     a48:	626b      	str	r3, [r5, #36]	; 0x24
     a4a:	e009      	b.n	a60 <_i2c_master_read_packet+0x9c>
				I2C_TRANSFER_READ;
		} else {
			return tmp_status;
		}
	} else {
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_READ |
     a4c:	4643      	mov	r3, r8
     a4e:	881b      	ldrh	r3, [r3, #0]
     a50:	005a      	lsls	r2, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
     a52:	4643      	mov	r3, r8
     a54:	7a5b      	ldrb	r3, [r3, #9]
     a56:	039b      	lsls	r3, r3, #14
     a58:	4313      	orrs	r3, r2
				I2C_TRANSFER_READ;
		} else {
			return tmp_status;
		}
	} else {
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_READ |
     a5a:	2201      	movs	r2, #1
     a5c:	4313      	orrs	r3, r2
     a5e:	626b      	str	r3, [r5, #36]	; 0x24
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
	}

	/* Wait for response on bus. */
	tmp_status = _i2c_master_wait_for_bus(module);
     a60:	9800      	ldr	r0, [sp, #0]
     a62:	4b31      	ldr	r3, [pc, #196]	; (b28 <_i2c_master_read_packet+0x164>)
     a64:	4798      	blx	r3

	/* Set action to ack. */
	i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
     a66:	686a      	ldr	r2, [r5, #4]
     a68:	4b2e      	ldr	r3, [pc, #184]	; (b24 <_i2c_master_read_packet+0x160>)
     a6a:	4013      	ands	r3, r2
     a6c:	606b      	str	r3, [r5, #4]
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_READ |
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
	}

	/* Wait for response on bus. */
	tmp_status = _i2c_master_wait_for_bus(module);
     a6e:	1e03      	subs	r3, r0, #0
	/* Set action to ack. */
	i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;

	/* Check for address response error unless previous error is
	 * detected. */
	if (tmp_status == STATUS_OK) {
     a70:	d14d      	bne.n	b0e <_i2c_master_read_packet+0x14a>
		tmp_status = _i2c_master_address_response(module);
     a72:	9800      	ldr	r0, [sp, #0]
     a74:	4b2d      	ldr	r3, [pc, #180]	; (b2c <_i2c_master_read_packet+0x168>)
     a76:	4798      	blx	r3
     a78:	9001      	str	r0, [sp, #4]
     a7a:	1e03      	subs	r3, r0, #0
	}

	/* Check that no error has occurred. */
	if (tmp_status == STATUS_OK) {
     a7c:	d147      	bne.n	b0e <_i2c_master_read_packet+0x14a>
     a7e:	3c01      	subs	r4, #1
     a80:	b2a4      	uxth	r4, r4
     a82:	2700      	movs	r7, #0
		/* Read data buffer. */
		while (tmp_data_length--) {
     a84:	4b2a      	ldr	r3, [pc, #168]	; (b30 <_i2c_master_read_packet+0x16c>)
     a86:	469b      	mov	fp, r3
			} else {
				/* Save data to buffer. */
				_i2c_master_wait_for_sync(module);
				packet->data[counter++] = i2c_module->DATA.reg;
				/* Wait for response. */
				tmp_status = _i2c_master_wait_for_bus(module);
     a88:	4b27      	ldr	r3, [pc, #156]	; (b28 <_i2c_master_read_packet+0x164>)
     a8a:	469a      	mov	sl, r3
     a8c:	e023      	b.n	ad6 <_i2c_master_read_packet+0x112>
	/* Check that no error has occurred. */
	if (tmp_status == STATUS_OK) {
		/* Read data buffer. */
		while (tmp_data_length--) {
			/* Check that bus ownership is not lost. */
			if (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) {
     a8e:	8b6b      	ldrh	r3, [r5, #26]
     a90:	069b      	lsls	r3, r3, #26
     a92:	d53b      	bpl.n	b0c <_i2c_master_read_packet+0x148>
				return STATUS_ERR_PACKET_COLLISION;
			}

			if (((!sclsm_flag) && (tmp_data_length == 0)) ||
     a94:	464b      	mov	r3, r9
     a96:	2b00      	cmp	r3, #0
     a98:	d102      	bne.n	aa0 <_i2c_master_read_packet+0xdc>
     a9a:	2c00      	cmp	r4, #0
     a9c:	d002      	beq.n	aa4 <_i2c_master_read_packet+0xe0>
     a9e:	e009      	b.n	ab4 <_i2c_master_read_packet+0xf0>
					((sclsm_flag) && (tmp_data_length == 1))) {
     aa0:	2c01      	cmp	r4, #1
     aa2:	d107      	bne.n	ab4 <_i2c_master_read_packet+0xf0>
				/* Set action to NACK */
				i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
     aa4:	686b      	ldr	r3, [r5, #4]
     aa6:	2280      	movs	r2, #128	; 0x80
     aa8:	02d2      	lsls	r2, r2, #11
     aaa:	4313      	orrs	r3, r2
     aac:	606b      	str	r3, [r5, #4]
     aae:	3c01      	subs	r4, #1
     ab0:	b2a4      	uxth	r4, r4
     ab2:	e010      	b.n	ad6 <_i2c_master_read_packet+0x112>
			} else {
				/* Save data to buffer. */
				_i2c_master_wait_for_sync(module);
     ab4:	9800      	ldr	r0, [sp, #0]
     ab6:	4b1f      	ldr	r3, [pc, #124]	; (b34 <_i2c_master_read_packet+0x170>)
     ab8:	4798      	blx	r3
				packet->data[counter++] = i2c_module->DATA.reg;
     aba:	1c7e      	adds	r6, r7, #1
     abc:	b2b6      	uxth	r6, r6
     abe:	2328      	movs	r3, #40	; 0x28
     ac0:	5ceb      	ldrb	r3, [r5, r3]
     ac2:	4642      	mov	r2, r8
     ac4:	6852      	ldr	r2, [r2, #4]
     ac6:	55d3      	strb	r3, [r2, r7]
				/* Wait for response. */
				tmp_status = _i2c_master_wait_for_bus(module);
     ac8:	9800      	ldr	r0, [sp, #0]
     aca:	47d0      	blx	sl
     acc:	3c01      	subs	r4, #1
     ace:	b2a4      	uxth	r4, r4
			}

			/* Check for error. */
			if (tmp_status != STATUS_OK) {
     ad0:	2800      	cmp	r0, #0
     ad2:	d103      	bne.n	adc <_i2c_master_read_packet+0x118>
				/* Set action to NACK */
				i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
			} else {
				/* Save data to buffer. */
				_i2c_master_wait_for_sync(module);
				packet->data[counter++] = i2c_module->DATA.reg;
     ad4:	1c37      	adds	r7, r6, #0
	}

	/* Check that no error has occurred. */
	if (tmp_status == STATUS_OK) {
		/* Read data buffer. */
		while (tmp_data_length--) {
     ad6:	455c      	cmp	r4, fp
     ad8:	d1d9      	bne.n	a8e <_i2c_master_read_packet+0xca>
     ada:	e001      	b.n	ae0 <_i2c_master_read_packet+0x11c>
				/* Set action to NACK */
				i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
			} else {
				/* Save data to buffer. */
				_i2c_master_wait_for_sync(module);
				packet->data[counter++] = i2c_module->DATA.reg;
     adc:	1c37      	adds	r7, r6, #0
				/* Wait for response. */
				tmp_status = _i2c_master_wait_for_bus(module);
     ade:	9001      	str	r0, [sp, #4]
			if (tmp_status != STATUS_OK) {
				break;
			}
		}

		if (module->send_stop) {
     ae0:	9b00      	ldr	r3, [sp, #0]
     ae2:	7a9b      	ldrb	r3, [r3, #10]
     ae4:	2b00      	cmp	r3, #0
     ae6:	d007      	beq.n	af8 <_i2c_master_read_packet+0x134>
			/* Send stop command unless arbitration is lost. */
			_i2c_master_wait_for_sync(module);
     ae8:	9800      	ldr	r0, [sp, #0]
     aea:	4b12      	ldr	r3, [pc, #72]	; (b34 <_i2c_master_read_packet+0x170>)
     aec:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
     aee:	686b      	ldr	r3, [r5, #4]
     af0:	22c0      	movs	r2, #192	; 0xc0
     af2:	0292      	lsls	r2, r2, #10
     af4:	4313      	orrs	r3, r2
     af6:	606b      	str	r3, [r5, #4]
		}

		/* Save last data to buffer. */
		_i2c_master_wait_for_sync(module);
     af8:	9800      	ldr	r0, [sp, #0]
     afa:	4b0e      	ldr	r3, [pc, #56]	; (b34 <_i2c_master_read_packet+0x170>)
     afc:	4798      	blx	r3
		packet->data[counter] = i2c_module->DATA.reg;
     afe:	2328      	movs	r3, #40	; 0x28
     b00:	5cea      	ldrb	r2, [r5, r3]
     b02:	4643      	mov	r3, r8
     b04:	685b      	ldr	r3, [r3, #4]
     b06:	55da      	strb	r2, [r3, r7]
     b08:	9b01      	ldr	r3, [sp, #4]
     b0a:	e000      	b.n	b0e <_i2c_master_read_packet+0x14a>
	if (tmp_status == STATUS_OK) {
		/* Read data buffer. */
		while (tmp_data_length--) {
			/* Check that bus ownership is not lost. */
			if (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) {
				return STATUS_ERR_PACKET_COLLISION;
     b0c:	2341      	movs	r3, #65	; 0x41
		_i2c_master_wait_for_sync(module);
		packet->data[counter] = i2c_module->DATA.reg;
	}

	return tmp_status;
}
     b0e:	1c18      	adds	r0, r3, #0
     b10:	b003      	add	sp, #12
     b12:	bc3c      	pop	{r2, r3, r4, r5}
     b14:	4690      	mov	r8, r2
     b16:	4699      	mov	r9, r3
     b18:	46a2      	mov	sl, r4
     b1a:	46ab      	mov	fp, r5
     b1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
     b1e:	46c0      	nop			; (mov r8, r8)
     b20:	000009a5 	.word	0x000009a5
     b24:	fffbffff 	.word	0xfffbffff
     b28:	00000975 	.word	0x00000975
     b2c:	00000945 	.word	0x00000945
     b30:	0000ffff 	.word	0x0000ffff
     b34:	00000759 	.word	0x00000759

00000b38 <_i2c_master_write_packet>:
 *                                      acknowledged the address
 */
static enum status_code _i2c_master_write_packet(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
     b38:	b5f0      	push	{r4, r5, r6, r7, lr}
     b3a:	465f      	mov	r7, fp
     b3c:	4656      	mov	r6, sl
     b3e:	464d      	mov	r5, r9
     b40:	4644      	mov	r4, r8
     b42:	b4f0      	push	{r4, r5, r6, r7}
     b44:	b083      	sub	sp, #12
     b46:	1c06      	adds	r6, r0, #0
     b48:	1c0f      	adds	r7, r1, #0
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     b4a:	6805      	ldr	r5, [r0, #0]

	/* Return value. */
	enum status_code tmp_status;
	uint16_t tmp_data_length = packet->data_length;
     b4c:	884c      	ldrh	r4, [r1, #2]

	_i2c_master_wait_for_sync(module);
     b4e:	4b31      	ldr	r3, [pc, #196]	; (c14 <_i2c_master_write_packet+0xdc>)
     b50:	4798      	blx	r3

	/* Switch to high speed mode */
	if (packet->high_speed) {
     b52:	7a7b      	ldrb	r3, [r7, #9]
     b54:	2b00      	cmp	r3, #0
     b56:	d003      	beq.n	b60 <_i2c_master_write_packet+0x28>
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
     b58:	7ab9      	ldrb	r1, [r7, #10]
     b5a:	1c30      	adds	r0, r6, #0
     b5c:	4b2e      	ldr	r3, [pc, #184]	; (c18 <_i2c_master_write_packet+0xe0>)
     b5e:	4798      	blx	r3
	}

	/* Set action to ACK. */
	i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
     b60:	686a      	ldr	r2, [r5, #4]
     b62:	4b2e      	ldr	r3, [pc, #184]	; (c1c <_i2c_master_write_packet+0xe4>)
     b64:	4013      	ands	r3, r2
     b66:	606b      	str	r3, [r5, #4]

	/* Set address and direction bit. Will send start command on bus. */
	if (packet->ten_bit_address) {
     b68:	7a3b      	ldrb	r3, [r7, #8]
     b6a:	2b00      	cmp	r3, #0
     b6c:	d009      	beq.n	b82 <_i2c_master_write_packet+0x4a>
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
     b6e:	7a7b      	ldrb	r3, [r7, #9]
     b70:	039a      	lsls	r2, r3, #14
	/* Set action to ACK. */
	i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;

	/* Set address and direction bit. Will send start command on bus. */
	if (packet->ten_bit_address) {
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
     b72:	883b      	ldrh	r3, [r7, #0]
     b74:	005b      	lsls	r3, r3, #1
     b76:	4313      	orrs	r3, r2
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
     b78:	2280      	movs	r2, #128	; 0x80
     b7a:	0212      	lsls	r2, r2, #8
     b7c:	4313      	orrs	r3, r2
	/* Set action to ACK. */
	i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;

	/* Set address and direction bit. Will send start command on bus. */
	if (packet->ten_bit_address) {
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
     b7e:	626b      	str	r3, [r5, #36]	; 0x24
     b80:	e005      	b.n	b8e <_i2c_master_write_packet+0x56>
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
			SERCOM_I2CM_ADDR_TENBITEN;
	} else {
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
     b82:	7a7b      	ldrb	r3, [r7, #9]
     b84:	039a      	lsls	r2, r3, #14
	if (packet->ten_bit_address) {
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
			SERCOM_I2CM_ADDR_TENBITEN;
	} else {
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
     b86:	883b      	ldrh	r3, [r7, #0]
     b88:	005b      	lsls	r3, r3, #1
     b8a:	4313      	orrs	r3, r2
     b8c:	626b      	str	r3, [r5, #36]	; 0x24
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
	}
	/* Wait for response on bus. */
	tmp_status = _i2c_master_wait_for_bus(module);
     b8e:	1c30      	adds	r0, r6, #0
     b90:	4b23      	ldr	r3, [pc, #140]	; (c20 <_i2c_master_write_packet+0xe8>)
     b92:	4798      	blx	r3
     b94:	1e03      	subs	r3, r0, #0

	/* Check for address response error unless previous error is
	 * detected. */
	if (tmp_status == STATUS_OK) {
     b96:	d136      	bne.n	c06 <_i2c_master_write_packet+0xce>
		tmp_status = _i2c_master_address_response(module);
     b98:	1c30      	adds	r0, r6, #0
     b9a:	4b22      	ldr	r3, [pc, #136]	; (c24 <_i2c_master_write_packet+0xec>)
     b9c:	4798      	blx	r3
     b9e:	1e03      	subs	r3, r0, #0
     ba0:	9001      	str	r0, [sp, #4]
	}

	/* Check that no error has occurred. */
	if (tmp_status == STATUS_OK) {
     ba2:	d130      	bne.n	c06 <_i2c_master_write_packet+0xce>
     ba4:	46a0      	mov	r8, r4
     ba6:	2400      	movs	r4, #0
		uint16_t buffer_counter = 0;

		/* Write data buffer. */
		while (tmp_data_length--) {
			/* Check that bus ownership is not lost. */
			if (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) {
     ba8:	3320      	adds	r3, #32
     baa:	4699      	mov	r9, r3
				return STATUS_ERR_PACKET_COLLISION;
			}

			/* Write byte to slave. */
			_i2c_master_wait_for_sync(module);
     bac:	4b19      	ldr	r3, [pc, #100]	; (c14 <_i2c_master_write_packet+0xdc>)
     bae:	469b      	mov	fp, r3
			i2c_module->DATA.reg = packet->data[buffer_counter++];

			/* Wait for response. */
			tmp_status = _i2c_master_wait_for_bus(module);
     bb0:	4b1b      	ldr	r3, [pc, #108]	; (c20 <_i2c_master_write_packet+0xe8>)
     bb2:	469a      	mov	sl, r3
     bb4:	e011      	b.n	bda <_i2c_master_write_packet+0xa2>
		uint16_t buffer_counter = 0;

		/* Write data buffer. */
		while (tmp_data_length--) {
			/* Check that bus ownership is not lost. */
			if (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) {
     bb6:	8b6b      	ldrh	r3, [r5, #26]
     bb8:	464a      	mov	r2, r9
     bba:	4213      	tst	r3, r2
     bbc:	d022      	beq.n	c04 <_i2c_master_write_packet+0xcc>
				return STATUS_ERR_PACKET_COLLISION;
			}

			/* Write byte to slave. */
			_i2c_master_wait_for_sync(module);
     bbe:	1c30      	adds	r0, r6, #0
     bc0:	47d8      	blx	fp
			i2c_module->DATA.reg = packet->data[buffer_counter++];
     bc2:	687b      	ldr	r3, [r7, #4]
     bc4:	5d1a      	ldrb	r2, [r3, r4]
     bc6:	2328      	movs	r3, #40	; 0x28
     bc8:	54ea      	strb	r2, [r5, r3]

			/* Wait for response. */
			tmp_status = _i2c_master_wait_for_bus(module);
     bca:	1c30      	adds	r0, r6, #0
     bcc:	47d0      	blx	sl

			/* Check for error. */
			if (tmp_status != STATUS_OK) {
     bce:	2800      	cmp	r0, #0
     bd0:	d106      	bne.n	be0 <_i2c_master_write_packet+0xa8>
				break;
			}

			/* Check for NACK from slave. */
			if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
     bd2:	8b6b      	ldrh	r3, [r5, #26]
     bd4:	3401      	adds	r4, #1
     bd6:	075b      	lsls	r3, r3, #29
     bd8:	d404      	bmi.n	be4 <_i2c_master_write_packet+0xac>
	if (tmp_status == STATUS_OK) {
		/* Buffer counter. */
		uint16_t buffer_counter = 0;

		/* Write data buffer. */
		while (tmp_data_length--) {
     bda:	4544      	cmp	r4, r8
     bdc:	d1eb      	bne.n	bb6 <_i2c_master_write_packet+0x7e>
     bde:	e003      	b.n	be8 <_i2c_master_write_packet+0xb0>
			/* Write byte to slave. */
			_i2c_master_wait_for_sync(module);
			i2c_module->DATA.reg = packet->data[buffer_counter++];

			/* Wait for response. */
			tmp_status = _i2c_master_wait_for_bus(module);
     be0:	9001      	str	r0, [sp, #4]
     be2:	e001      	b.n	be8 <_i2c_master_write_packet+0xb0>
			}

			/* Check for NACK from slave. */
			if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
				/* Return bad data value. */
				tmp_status = STATUS_ERR_OVERFLOW;
     be4:	231e      	movs	r3, #30
     be6:	9301      	str	r3, [sp, #4]
				break;
			}
		}

		if (module->send_stop) {
     be8:	7ab3      	ldrb	r3, [r6, #10]
     bea:	9801      	ldr	r0, [sp, #4]
     bec:	2b00      	cmp	r3, #0
     bee:	d00a      	beq.n	c06 <_i2c_master_write_packet+0xce>
			/* Stop command */
			_i2c_master_wait_for_sync(module);
     bf0:	1c30      	adds	r0, r6, #0
     bf2:	4b08      	ldr	r3, [pc, #32]	; (c14 <_i2c_master_write_packet+0xdc>)
     bf4:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
     bf6:	686b      	ldr	r3, [r5, #4]
     bf8:	22c0      	movs	r2, #192	; 0xc0
     bfa:	0292      	lsls	r2, r2, #10
     bfc:	4313      	orrs	r3, r2
     bfe:	606b      	str	r3, [r5, #4]
     c00:	9801      	ldr	r0, [sp, #4]
     c02:	e000      	b.n	c06 <_i2c_master_write_packet+0xce>

		/* Write data buffer. */
		while (tmp_data_length--) {
			/* Check that bus ownership is not lost. */
			if (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) {
				return STATUS_ERR_PACKET_COLLISION;
     c04:	2041      	movs	r0, #65	; 0x41
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
		}
	}

	return tmp_status;
}
     c06:	b003      	add	sp, #12
     c08:	bc3c      	pop	{r2, r3, r4, r5}
     c0a:	4690      	mov	r8, r2
     c0c:	4699      	mov	r9, r3
     c0e:	46a2      	mov	sl, r4
     c10:	46ab      	mov	fp, r5
     c12:	bdf0      	pop	{r4, r5, r6, r7, pc}
     c14:	00000759 	.word	0x00000759
     c18:	000009a5 	.word	0x000009a5
     c1c:	fffbffff 	.word	0xfffbffff
     c20:	00000975 	.word	0x00000975
     c24:	00000945 	.word	0x00000945

00000c28 <i2c_master_read_packet_wait>:
 *                                      acknowledged the address
 */
enum status_code i2c_master_read_packet_wait(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
     c28:	b508      	push	{r3, lr}
	if (module->buffer_remaining > 0) {
		return STATUS_BUSY;
	}
#endif

	module->send_stop = true;
     c2a:	2301      	movs	r3, #1
     c2c:	7283      	strb	r3, [r0, #10]

	return _i2c_master_read_packet(module, packet);
     c2e:	4b01      	ldr	r3, [pc, #4]	; (c34 <i2c_master_read_packet_wait+0xc>)
     c30:	4798      	blx	r3
}
     c32:	bd08      	pop	{r3, pc}
     c34:	000009c5 	.word	0x000009c5

00000c38 <i2c_master_write_packet_wait>:
 *                                      last data sent
 */
enum status_code i2c_master_write_packet_wait(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
     c38:	b508      	push	{r3, lr}
	if (module->buffer_remaining > 0) {
		return STATUS_BUSY;
	}
#endif

	module->send_stop = true;
     c3a:	2301      	movs	r3, #1
     c3c:	7283      	strb	r3, [r0, #10]

	return _i2c_master_write_packet(module, packet);
     c3e:	4b01      	ldr	r3, [pc, #4]	; (c44 <i2c_master_write_packet_wait+0xc>)
     c40:	4798      	blx	r3
}
     c42:	bd08      	pop	{r3, pc}
     c44:	00000b39 	.word	0x00000b39

00000c48 <i2c_master_write_packet_wait_no_stop>:
 *                                      more data
 */
enum status_code i2c_master_write_packet_wait_no_stop(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
     c48:	b508      	push	{r3, lr}
	if (module->buffer_remaining > 0) {
		return STATUS_BUSY;
	}
#endif

	module->send_stop = false;
     c4a:	2300      	movs	r3, #0
     c4c:	7283      	strb	r3, [r0, #10]

	return _i2c_master_write_packet(module, packet);
     c4e:	4b01      	ldr	r3, [pc, #4]	; (c54 <i2c_master_write_packet_wait_no_stop+0xc>)
     c50:	4798      	blx	r3
}
     c52:	bd08      	pop	{r3, pc}
     c54:	00000b39 	.word	0x00000b39

00000c58 <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
     c58:	b510      	push	{r4, lr}
	uint16_t baud_calculated = 0;
	uint32_t clock_value = external_clock;


	/* Check if baudrate is outside of valid range. */
	if (baudrate > (external_clock / 2)) {
     c5a:	0849      	lsrs	r1, r1, #1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     c5c:	2440      	movs	r4, #64	; 0x40
	uint16_t baud_calculated = 0;
	uint32_t clock_value = external_clock;


	/* Check if baudrate is outside of valid range. */
	if (baudrate > (external_clock / 2)) {
     c5e:	4281      	cmp	r1, r0
     c60:	d30c      	bcc.n	c7c <_sercom_get_sync_baud_val+0x24>
     c62:	2300      	movs	r3, #0
	}

	/* Calculate BAUD value from clock frequency and baudrate */
	clock_value = external_clock / 2;
	while (clock_value >= baudrate) {
		clock_value = clock_value - baudrate;
     c64:	1a09      	subs	r1, r1, r0
		baud_calculated++;
     c66:	3301      	adds	r3, #1
     c68:	b29b      	uxth	r3, r3
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	}

	/* Calculate BAUD value from clock frequency and baudrate */
	clock_value = external_clock / 2;
	while (clock_value >= baudrate) {
     c6a:	4288      	cmp	r0, r1
     c6c:	d9fa      	bls.n	c64 <_sercom_get_sync_baud_val+0xc>
		clock_value = clock_value - baudrate;
		baud_calculated++;
	}
	baud_calculated = baud_calculated - 1;
     c6e:	3b01      	subs	r3, #1
     c70:	b29b      	uxth	r3, r3

	/* Check if BAUD value is more than 255, which is maximum
	 * for synchronous mode */
	if (baud_calculated > 0xFF) {
		/* Return with an error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     c72:	2440      	movs	r4, #64	; 0x40
	}
	baud_calculated = baud_calculated - 1;

	/* Check if BAUD value is more than 255, which is maximum
	 * for synchronous mode */
	if (baud_calculated > 0xFF) {
     c74:	2bff      	cmp	r3, #255	; 0xff
     c76:	d801      	bhi.n	c7c <_sercom_get_sync_baud_val+0x24>
		/* Return with an error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	} else {
		*baudvalue = baud_calculated;
     c78:	8013      	strh	r3, [r2, #0]
		return STATUS_OK;
     c7a:	2400      	movs	r4, #0
	}
}
     c7c:	1c20      	adds	r0, r4, #0
     c7e:	bd10      	pop	{r4, pc}

00000c80 <_sercom_get_async_baud_val>:
		const uint32_t baudrate,
		const uint32_t peripheral_clock,
		uint16_t *const baudval,
		enum sercom_asynchronous_operation_mode mode,
		enum sercom_asynchronous_sample_num sample_num)
{
     c80:	b5f0      	push	{r4, r5, r6, r7, lr}
     c82:	465f      	mov	r7, fp
     c84:	4656      	mov	r6, sl
     c86:	464d      	mov	r5, r9
     c88:	4644      	mov	r4, r8
     c8a:	b4f0      	push	{r4, r5, r6, r7}
     c8c:	b089      	sub	sp, #36	; 0x24
     c8e:	1c1c      	adds	r4, r3, #0
     c90:	ab12      	add	r3, sp, #72	; 0x48
     c92:	781b      	ldrb	r3, [r3, #0]
	uint8_t baud_fp;
	uint32_t baud_int = 0;
	uint64_t temp1, temp2;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
     c94:	1c06      	adds	r6, r0, #0
     c96:	435e      	muls	r6, r3
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     c98:	2540      	movs	r5, #64	; 0x40
	uint8_t baud_fp;
	uint32_t baud_int = 0;
	uint64_t temp1, temp2;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
     c9a:	428e      	cmp	r6, r1
     c9c:	d900      	bls.n	ca0 <_sercom_get_async_baud_val+0x20>
     c9e:	e0c7      	b.n	e30 <_sercom_get_async_baud_val+0x1b0>
     ca0:	1c25      	adds	r5, r4, #0
     ca2:	9207      	str	r2, [sp, #28]
     ca4:	1c0c      	adds	r4, r1, #0
     ca6:	1c02      	adds	r2, r0, #0
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	}

	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
     ca8:	2d00      	cmp	r5, #0
     caa:	d151      	bne.n	d50 <_sercom_get_async_baud_val+0xd0>
		/* Calculate the BAUD value */
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
     cac:	1c18      	adds	r0, r3, #0
     cae:	2100      	movs	r1, #0
     cb0:	2300      	movs	r3, #0
     cb2:	4d63      	ldr	r5, [pc, #396]	; (e40 <_sercom_get_async_baud_val+0x1c0>)
     cb4:	47a8      	blx	r5
     cb6:	4683      	mov	fp, r0
		ratio = long_division(temp1, peripheral_clock);
     cb8:	1c26      	adds	r6, r4, #0
     cba:	2700      	movs	r7, #0
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
     cbc:	2300      	movs	r3, #0
     cbe:	2400      	movs	r4, #0
     cc0:	9302      	str	r3, [sp, #8]
     cc2:	9403      	str	r4, [sp, #12]
     cc4:	2200      	movs	r2, #0
     cc6:	2300      	movs	r3, #0
	for (i = 63; i >= 0; i--) {
     cc8:	203f      	movs	r0, #63	; 0x3f
		bit_shift = (uint64_t)1 << i;
     cca:	2120      	movs	r1, #32
     ccc:	468c      	mov	ip, r1
     cce:	391f      	subs	r1, #31
     cd0:	9600      	str	r6, [sp, #0]
     cd2:	9701      	str	r7, [sp, #4]
     cd4:	2420      	movs	r4, #32
     cd6:	4264      	negs	r4, r4
     cd8:	1904      	adds	r4, r0, r4
     cda:	d403      	bmi.n	ce4 <_sercom_get_async_baud_val+0x64>
     cdc:	1c0d      	adds	r5, r1, #0
     cde:	40a5      	lsls	r5, r4
     ce0:	46a8      	mov	r8, r5
     ce2:	e004      	b.n	cee <_sercom_get_async_baud_val+0x6e>
     ce4:	4664      	mov	r4, ip
     ce6:	1a24      	subs	r4, r4, r0
     ce8:	1c0d      	adds	r5, r1, #0
     cea:	40e5      	lsrs	r5, r4
     cec:	46a8      	mov	r8, r5
     cee:	1c0c      	adds	r4, r1, #0
     cf0:	4084      	lsls	r4, r0
     cf2:	46a1      	mov	r9, r4

		r = r << 1;
     cf4:	1c14      	adds	r4, r2, #0
     cf6:	1c1d      	adds	r5, r3, #0
     cf8:	18a4      	adds	r4, r4, r2
     cfa:	415d      	adcs	r5, r3
     cfc:	1c22      	adds	r2, r4, #0
     cfe:	1c2b      	adds	r3, r5, #0

		if (n & bit_shift) {
     d00:	465e      	mov	r6, fp
     d02:	4647      	mov	r7, r8
     d04:	423e      	tst	r6, r7
     d06:	d003      	beq.n	d10 <_sercom_get_async_baud_val+0x90>
			r |= 0x01;
     d08:	1c0e      	adds	r6, r1, #0
     d0a:	4326      	orrs	r6, r4
     d0c:	1c32      	adds	r2, r6, #0
     d0e:	1c2b      	adds	r3, r5, #0
		}

		if (r >= d) {
     d10:	9c01      	ldr	r4, [sp, #4]
     d12:	429c      	cmp	r4, r3
     d14:	d810      	bhi.n	d38 <_sercom_get_async_baud_val+0xb8>
     d16:	d102      	bne.n	d1e <_sercom_get_async_baud_val+0x9e>
     d18:	9c00      	ldr	r4, [sp, #0]
     d1a:	4294      	cmp	r4, r2
     d1c:	d80c      	bhi.n	d38 <_sercom_get_async_baud_val+0xb8>
			r = r - d;
     d1e:	9c00      	ldr	r4, [sp, #0]
     d20:	9d01      	ldr	r5, [sp, #4]
     d22:	1b12      	subs	r2, r2, r4
     d24:	41ab      	sbcs	r3, r5
			q |= bit_shift;
     d26:	464d      	mov	r5, r9
     d28:	9e02      	ldr	r6, [sp, #8]
     d2a:	9f03      	ldr	r7, [sp, #12]
     d2c:	4335      	orrs	r5, r6
     d2e:	1c3c      	adds	r4, r7, #0
     d30:	4646      	mov	r6, r8
     d32:	4334      	orrs	r4, r6
     d34:	9502      	str	r5, [sp, #8]
     d36:	9403      	str	r4, [sp, #12]
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
	for (i = 63; i >= 0; i--) {
     d38:	3801      	subs	r0, #1
     d3a:	d2cb      	bcs.n	cd4 <_sercom_get_async_baud_val+0x54>

	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
		/* Calculate the BAUD value */
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
		ratio = long_division(temp1, peripheral_clock);
		scale = ((uint64_t)1 << SHIFT) - ratio;
     d3c:	2200      	movs	r2, #0
     d3e:	2301      	movs	r3, #1
     d40:	9802      	ldr	r0, [sp, #8]
     d42:	9903      	ldr	r1, [sp, #12]
     d44:	1a12      	subs	r2, r2, r0
     d46:	418b      	sbcs	r3, r1
		baud_calculated = (65536 * scale) >> SHIFT;
     d48:	0c11      	lsrs	r1, r2, #16
     d4a:	041b      	lsls	r3, r3, #16
     d4c:	4319      	orrs	r1, r3
     d4e:	e06c      	b.n	e2a <_sercom_get_async_baud_val+0x1aa>
		enum sercom_asynchronous_sample_num sample_num)
{
	/* Temporary variables  */
	uint64_t ratio = 0;
	uint64_t scale = 0;
	uint64_t baud_calculated = 0;
     d50:	2100      	movs	r1, #0
		/* Calculate the BAUD value */
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
		ratio = long_division(temp1, peripheral_clock);
		scale = ((uint64_t)1 << SHIFT) - ratio;
		baud_calculated = (65536 * scale) >> SHIFT;
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
     d52:	2d01      	cmp	r5, #1
     d54:	d169      	bne.n	e2a <_sercom_get_async_baud_val+0x1aa>
		for(baud_fp = 0; baud_fp < BAUD_FP_MAX; baud_fp++) {
			temp1 = BAUD_FP_MAX * (uint64_t)peripheral_clock;
     d56:	0f61      	lsrs	r1, r4, #29
     d58:	1c0f      	adds	r7, r1, #0
     d5a:	00e1      	lsls	r1, r4, #3
     d5c:	4688      	mov	r8, r1
			temp2 = ((uint64_t)baudrate * sample_num);
     d5e:	1c18      	adds	r0, r3, #0
     d60:	2100      	movs	r1, #0
     d62:	2300      	movs	r3, #0
     d64:	4c36      	ldr	r4, [pc, #216]	; (e40 <_sercom_get_async_baud_val+0x1c0>)
     d66:	47a0      	blx	r4
     d68:	1c04      	adds	r4, r0, #0
     d6a:	1c0d      	adds	r5, r1, #0
     d6c:	2300      	movs	r3, #0
     d6e:	469c      	mov	ip, r3
static uint64_t long_division(uint64_t n, uint64_t d)
{
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
	for (i = 63; i >= 0; i--) {
		bit_shift = (uint64_t)1 << i;
     d70:	3320      	adds	r3, #32
     d72:	469b      	mov	fp, r3
     d74:	2601      	movs	r6, #1
			temp1 = BAUD_FP_MAX * (uint64_t)peripheral_clock;
			temp2 = ((uint64_t)baudrate * sample_num);
			baud_int = long_division(temp1, temp2);
			baud_int -= baud_fp;
			baud_int = baud_int / BAUD_FP_MAX;
			if(baud_int < BAUD_INT_MAX) {
     d76:	4663      	mov	r3, ip
     d78:	9305      	str	r3, [sp, #20]
     d7a:	46b9      	mov	r9, r7
     d7c:	466b      	mov	r3, sp
     d7e:	7d1b      	ldrb	r3, [r3, #20]
     d80:	9306      	str	r3, [sp, #24]
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
     d82:	2300      	movs	r3, #0
     d84:	469c      	mov	ip, r3
     d86:	2000      	movs	r0, #0
     d88:	2100      	movs	r1, #0
	for (i = 63; i >= 0; i--) {
     d8a:	223f      	movs	r2, #63	; 0x3f
     d8c:	9400      	str	r4, [sp, #0]
     d8e:	9501      	str	r5, [sp, #4]
		bit_shift = (uint64_t)1 << i;
     d90:	2320      	movs	r3, #32
     d92:	425b      	negs	r3, r3
     d94:	18d3      	adds	r3, r2, r3
     d96:	d403      	bmi.n	da0 <_sercom_get_async_baud_val+0x120>
     d98:	1c34      	adds	r4, r6, #0
     d9a:	409c      	lsls	r4, r3
     d9c:	1c23      	adds	r3, r4, #0
     d9e:	e004      	b.n	daa <_sercom_get_async_baud_val+0x12a>
     da0:	465b      	mov	r3, fp
     da2:	1a9b      	subs	r3, r3, r2
     da4:	1c34      	adds	r4, r6, #0
     da6:	40dc      	lsrs	r4, r3
     da8:	1c23      	adds	r3, r4, #0
     daa:	1c37      	adds	r7, r6, #0
     dac:	4097      	lsls	r7, r2

		r = r << 1;
     dae:	1c04      	adds	r4, r0, #0
     db0:	1c0d      	adds	r5, r1, #0
     db2:	1824      	adds	r4, r4, r0
     db4:	414d      	adcs	r5, r1
     db6:	1c20      	adds	r0, r4, #0
     db8:	1c29      	adds	r1, r5, #0
     dba:	9002      	str	r0, [sp, #8]
     dbc:	9103      	str	r1, [sp, #12]

		if (n & bit_shift) {
     dbe:	4644      	mov	r4, r8
     dc0:	403c      	ands	r4, r7
     dc2:	46a2      	mov	sl, r4
     dc4:	464c      	mov	r4, r9
     dc6:	4023      	ands	r3, r4
     dc8:	4654      	mov	r4, sl
     dca:	4323      	orrs	r3, r4
     dcc:	d005      	beq.n	dda <_sercom_get_async_baud_val+0x15a>
			r |= 0x01;
     dce:	9b02      	ldr	r3, [sp, #8]
     dd0:	9c03      	ldr	r4, [sp, #12]
     dd2:	1c1d      	adds	r5, r3, #0
     dd4:	4335      	orrs	r5, r6
     dd6:	1c28      	adds	r0, r5, #0
     dd8:	1c21      	adds	r1, r4, #0
		}

		if (r >= d) {
     dda:	9b01      	ldr	r3, [sp, #4]
     ddc:	428b      	cmp	r3, r1
     dde:	d80a      	bhi.n	df6 <_sercom_get_async_baud_val+0x176>
     de0:	d102      	bne.n	de8 <_sercom_get_async_baud_val+0x168>
     de2:	9b00      	ldr	r3, [sp, #0]
     de4:	4283      	cmp	r3, r0
     de6:	d806      	bhi.n	df6 <_sercom_get_async_baud_val+0x176>
			r = r - d;
     de8:	9b00      	ldr	r3, [sp, #0]
     dea:	9c01      	ldr	r4, [sp, #4]
     dec:	1ac0      	subs	r0, r0, r3
     dee:	41a1      	sbcs	r1, r4
			q |= bit_shift;
     df0:	4663      	mov	r3, ip
     df2:	433b      	orrs	r3, r7
     df4:	469c      	mov	ip, r3
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
	for (i = 63; i >= 0; i--) {
     df6:	3a01      	subs	r2, #1
     df8:	d2ca      	bcs.n	d90 <_sercom_get_async_baud_val+0x110>
     dfa:	9c00      	ldr	r4, [sp, #0]
     dfc:	9d01      	ldr	r5, [sp, #4]
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
		for(baud_fp = 0; baud_fp < BAUD_FP_MAX; baud_fp++) {
			temp1 = BAUD_FP_MAX * (uint64_t)peripheral_clock;
			temp2 = ((uint64_t)baudrate * sample_num);
			baud_int = long_division(temp1, temp2);
			baud_int -= baud_fp;
     dfe:	4662      	mov	r2, ip
     e00:	9905      	ldr	r1, [sp, #20]
     e02:	1a53      	subs	r3, r2, r1
			baud_int = baud_int / BAUD_FP_MAX;
     e04:	08db      	lsrs	r3, r3, #3
			if(baud_int < BAUD_INT_MAX) {
     e06:	4a0f      	ldr	r2, [pc, #60]	; (e44 <_sercom_get_async_baud_val+0x1c4>)
     e08:	4293      	cmp	r3, r2
     e0a:	d908      	bls.n	e1e <_sercom_get_async_baud_val+0x19e>
     e0c:	9a06      	ldr	r2, [sp, #24]
     e0e:	3201      	adds	r2, #1
     e10:	b2d2      	uxtb	r2, r2
     e12:	9206      	str	r2, [sp, #24]
     e14:	1c0a      	adds	r2, r1, #0
     e16:	3201      	adds	r2, #1
     e18:	9205      	str	r2, [sp, #20]
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
		ratio = long_division(temp1, peripheral_clock);
		scale = ((uint64_t)1 << SHIFT) - ratio;
		baud_calculated = (65536 * scale) >> SHIFT;
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
		for(baud_fp = 0; baud_fp < BAUD_FP_MAX; baud_fp++) {
     e1a:	2a08      	cmp	r2, #8
     e1c:	d1ae      	bne.n	d7c <_sercom_get_async_baud_val+0xfc>
			if(baud_int < BAUD_INT_MAX) {
				break;
			}
		}
		if(baud_fp == BAUD_FP_MAX) {
			return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     e1e:	2540      	movs	r5, #64	; 0x40
			baud_int = baud_int / BAUD_FP_MAX;
			if(baud_int < BAUD_INT_MAX) {
				break;
			}
		}
		if(baud_fp == BAUD_FP_MAX) {
     e20:	9a06      	ldr	r2, [sp, #24]
     e22:	2a08      	cmp	r2, #8
     e24:	d004      	beq.n	e30 <_sercom_get_async_baud_val+0x1b0>
			return STATUS_ERR_BAUDRATE_UNAVAILABLE;
		}
		baud_calculated = baud_int | (baud_fp << 13);
     e26:	0351      	lsls	r1, r2, #13
     e28:	4319      	orrs	r1, r3
	}

	*baudval = baud_calculated;
     e2a:	9b07      	ldr	r3, [sp, #28]
     e2c:	8019      	strh	r1, [r3, #0]
	return STATUS_OK;
     e2e:	2500      	movs	r5, #0
}
     e30:	1c28      	adds	r0, r5, #0
     e32:	b009      	add	sp, #36	; 0x24
     e34:	bc3c      	pop	{r2, r3, r4, r5}
     e36:	4690      	mov	r8, r2
     e38:	4699      	mov	r9, r3
     e3a:	46a2      	mov	sl, r4
     e3c:	46ab      	mov	fp, r5
     e3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
     e40:	00010a71 	.word	0x00010a71
     e44:	00001fff 	.word	0x00001fff

00000e48 <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
     e48:	b510      	push	{r4, lr}
     e4a:	b082      	sub	sp, #8
     e4c:	1c04      	adds	r4, r0, #0
	/* Check if valid option. */
	if (!_sercom_config.generator_is_set || force_change) {
     e4e:	4b0e      	ldr	r3, [pc, #56]	; (e88 <sercom_set_gclk_generator+0x40>)
     e50:	781b      	ldrb	r3, [r3, #0]
     e52:	2b00      	cmp	r3, #0
     e54:	d001      	beq.n	e5a <sercom_set_gclk_generator+0x12>
     e56:	2900      	cmp	r1, #0
     e58:	d00d      	beq.n	e76 <sercom_set_gclk_generator+0x2e>
		/* Create and fill a GCLK configuration structure for the new config. */
		struct system_gclk_chan_config gclk_chan_conf;
		system_gclk_chan_get_config_defaults(&gclk_chan_conf);
		gclk_chan_conf.source_generator = generator_source;
     e5a:	a901      	add	r1, sp, #4
     e5c:	700c      	strb	r4, [r1, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
     e5e:	2013      	movs	r0, #19
     e60:	4b0a      	ldr	r3, [pc, #40]	; (e8c <sercom_set_gclk_generator+0x44>)
     e62:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
     e64:	2013      	movs	r0, #19
     e66:	4b0a      	ldr	r3, [pc, #40]	; (e90 <sercom_set_gclk_generator+0x48>)
     e68:	4798      	blx	r3

		/* Save config. */
		_sercom_config.generator_source = generator_source;
     e6a:	4b07      	ldr	r3, [pc, #28]	; (e88 <sercom_set_gclk_generator+0x40>)
     e6c:	705c      	strb	r4, [r3, #1]
		_sercom_config.generator_is_set = true;
     e6e:	2201      	movs	r2, #1
     e70:	701a      	strb	r2, [r3, #0]

		return STATUS_OK;
     e72:	2000      	movs	r0, #0
     e74:	e006      	b.n	e84 <sercom_set_gclk_generator+0x3c>
	} else if (generator_source == _sercom_config.generator_source) {
     e76:	4b04      	ldr	r3, [pc, #16]	; (e88 <sercom_set_gclk_generator+0x40>)
     e78:	785b      	ldrb	r3, [r3, #1]
     e7a:	4283      	cmp	r3, r0
     e7c:	d001      	beq.n	e82 <sercom_set_gclk_generator+0x3a>
		/* Return status OK if same config. */
		return STATUS_OK;
	}

	/* Return invalid config to already initialized GCLK. */
	return STATUS_ERR_ALREADY_INITIALIZED;
     e7e:	201d      	movs	r0, #29
     e80:	e000      	b.n	e84 <sercom_set_gclk_generator+0x3c>
		_sercom_config.generator_is_set = true;

		return STATUS_OK;
	} else if (generator_source == _sercom_config.generator_source) {
		/* Return status OK if same config. */
		return STATUS_OK;
     e82:	2000      	movs	r0, #0
	}

	/* Return invalid config to already initialized GCLK. */
	return STATUS_ERR_ALREADY_INITIALIZED;
}
     e84:	b002      	add	sp, #8
     e86:	bd10      	pop	{r4, pc}
     e88:	20000264 	.word	0x20000264
     e8c:	0000218d 	.word	0x0000218d
     e90:	00002101 	.word	0x00002101

00000e94 <_sercom_get_default_pad>:
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
     e94:	4b44      	ldr	r3, [pc, #272]	; (fa8 <_sercom_get_default_pad+0x114>)
     e96:	4298      	cmp	r0, r3
     e98:	d033      	beq.n	f02 <_sercom_get_default_pad+0x6e>
     e9a:	d806      	bhi.n	eaa <_sercom_get_default_pad+0x16>
     e9c:	4b43      	ldr	r3, [pc, #268]	; (fac <_sercom_get_default_pad+0x118>)
     e9e:	4298      	cmp	r0, r3
     ea0:	d00d      	beq.n	ebe <_sercom_get_default_pad+0x2a>
     ea2:	4b43      	ldr	r3, [pc, #268]	; (fb0 <_sercom_get_default_pad+0x11c>)
     ea4:	4298      	cmp	r0, r3
     ea6:	d01b      	beq.n	ee0 <_sercom_get_default_pad+0x4c>
     ea8:	e06f      	b.n	f8a <_sercom_get_default_pad+0xf6>
     eaa:	4b42      	ldr	r3, [pc, #264]	; (fb4 <_sercom_get_default_pad+0x120>)
     eac:	4298      	cmp	r0, r3
     eae:	d04a      	beq.n	f46 <_sercom_get_default_pad+0xb2>
     eb0:	4b41      	ldr	r3, [pc, #260]	; (fb8 <_sercom_get_default_pad+0x124>)
     eb2:	4298      	cmp	r0, r3
     eb4:	d058      	beq.n	f68 <_sercom_get_default_pad+0xd4>
     eb6:	4b41      	ldr	r3, [pc, #260]	; (fbc <_sercom_get_default_pad+0x128>)
     eb8:	4298      	cmp	r0, r3
     eba:	d166      	bne.n	f8a <_sercom_get_default_pad+0xf6>
     ebc:	e032      	b.n	f24 <_sercom_get_default_pad+0x90>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     ebe:	2901      	cmp	r1, #1
     ec0:	d006      	beq.n	ed0 <_sercom_get_default_pad+0x3c>
     ec2:	2900      	cmp	r1, #0
     ec4:	d063      	beq.n	f8e <_sercom_get_default_pad+0xfa>
     ec6:	2902      	cmp	r1, #2
     ec8:	d006      	beq.n	ed8 <_sercom_get_default_pad+0x44>
     eca:	2903      	cmp	r1, #3
     ecc:	d006      	beq.n	edc <_sercom_get_default_pad+0x48>
     ece:	e001      	b.n	ed4 <_sercom_get_default_pad+0x40>
     ed0:	483b      	ldr	r0, [pc, #236]	; (fc0 <_sercom_get_default_pad+0x12c>)
     ed2:	e067      	b.n	fa4 <_sercom_get_default_pad+0x110>
	}

	Assert(false);
	return 0;
     ed4:	2000      	movs	r0, #0
     ed6:	e065      	b.n	fa4 <_sercom_get_default_pad+0x110>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     ed8:	483a      	ldr	r0, [pc, #232]	; (fc4 <_sercom_get_default_pad+0x130>)
     eda:	e063      	b.n	fa4 <_sercom_get_default_pad+0x110>
     edc:	483a      	ldr	r0, [pc, #232]	; (fc8 <_sercom_get_default_pad+0x134>)
     ede:	e061      	b.n	fa4 <_sercom_get_default_pad+0x110>
     ee0:	2901      	cmp	r1, #1
     ee2:	d006      	beq.n	ef2 <_sercom_get_default_pad+0x5e>
     ee4:	2900      	cmp	r1, #0
     ee6:	d054      	beq.n	f92 <_sercom_get_default_pad+0xfe>
     ee8:	2902      	cmp	r1, #2
     eea:	d006      	beq.n	efa <_sercom_get_default_pad+0x66>
     eec:	2903      	cmp	r1, #3
     eee:	d006      	beq.n	efe <_sercom_get_default_pad+0x6a>
     ef0:	e001      	b.n	ef6 <_sercom_get_default_pad+0x62>
     ef2:	4836      	ldr	r0, [pc, #216]	; (fcc <_sercom_get_default_pad+0x138>)
     ef4:	e056      	b.n	fa4 <_sercom_get_default_pad+0x110>
	}

	Assert(false);
	return 0;
     ef6:	2000      	movs	r0, #0
     ef8:	e054      	b.n	fa4 <_sercom_get_default_pad+0x110>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     efa:	4835      	ldr	r0, [pc, #212]	; (fd0 <_sercom_get_default_pad+0x13c>)
     efc:	e052      	b.n	fa4 <_sercom_get_default_pad+0x110>
     efe:	4835      	ldr	r0, [pc, #212]	; (fd4 <_sercom_get_default_pad+0x140>)
     f00:	e050      	b.n	fa4 <_sercom_get_default_pad+0x110>
     f02:	2901      	cmp	r1, #1
     f04:	d006      	beq.n	f14 <_sercom_get_default_pad+0x80>
     f06:	2900      	cmp	r1, #0
     f08:	d045      	beq.n	f96 <_sercom_get_default_pad+0x102>
     f0a:	2902      	cmp	r1, #2
     f0c:	d006      	beq.n	f1c <_sercom_get_default_pad+0x88>
     f0e:	2903      	cmp	r1, #3
     f10:	d006      	beq.n	f20 <_sercom_get_default_pad+0x8c>
     f12:	e001      	b.n	f18 <_sercom_get_default_pad+0x84>
     f14:	4830      	ldr	r0, [pc, #192]	; (fd8 <_sercom_get_default_pad+0x144>)
     f16:	e045      	b.n	fa4 <_sercom_get_default_pad+0x110>
	}

	Assert(false);
	return 0;
     f18:	2000      	movs	r0, #0
     f1a:	e043      	b.n	fa4 <_sercom_get_default_pad+0x110>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     f1c:	482f      	ldr	r0, [pc, #188]	; (fdc <_sercom_get_default_pad+0x148>)
     f1e:	e041      	b.n	fa4 <_sercom_get_default_pad+0x110>
     f20:	482f      	ldr	r0, [pc, #188]	; (fe0 <_sercom_get_default_pad+0x14c>)
     f22:	e03f      	b.n	fa4 <_sercom_get_default_pad+0x110>
     f24:	2901      	cmp	r1, #1
     f26:	d006      	beq.n	f36 <_sercom_get_default_pad+0xa2>
     f28:	2900      	cmp	r1, #0
     f2a:	d036      	beq.n	f9a <_sercom_get_default_pad+0x106>
     f2c:	2902      	cmp	r1, #2
     f2e:	d006      	beq.n	f3e <_sercom_get_default_pad+0xaa>
     f30:	2903      	cmp	r1, #3
     f32:	d006      	beq.n	f42 <_sercom_get_default_pad+0xae>
     f34:	e001      	b.n	f3a <_sercom_get_default_pad+0xa6>
     f36:	482b      	ldr	r0, [pc, #172]	; (fe4 <_sercom_get_default_pad+0x150>)
     f38:	e034      	b.n	fa4 <_sercom_get_default_pad+0x110>
	}

	Assert(false);
	return 0;
     f3a:	2000      	movs	r0, #0
     f3c:	e032      	b.n	fa4 <_sercom_get_default_pad+0x110>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     f3e:	482a      	ldr	r0, [pc, #168]	; (fe8 <_sercom_get_default_pad+0x154>)
     f40:	e030      	b.n	fa4 <_sercom_get_default_pad+0x110>
     f42:	482a      	ldr	r0, [pc, #168]	; (fec <_sercom_get_default_pad+0x158>)
     f44:	e02e      	b.n	fa4 <_sercom_get_default_pad+0x110>
     f46:	2901      	cmp	r1, #1
     f48:	d006      	beq.n	f58 <_sercom_get_default_pad+0xc4>
     f4a:	2900      	cmp	r1, #0
     f4c:	d027      	beq.n	f9e <_sercom_get_default_pad+0x10a>
     f4e:	2902      	cmp	r1, #2
     f50:	d006      	beq.n	f60 <_sercom_get_default_pad+0xcc>
     f52:	2903      	cmp	r1, #3
     f54:	d006      	beq.n	f64 <_sercom_get_default_pad+0xd0>
     f56:	e001      	b.n	f5c <_sercom_get_default_pad+0xc8>
     f58:	4825      	ldr	r0, [pc, #148]	; (ff0 <_sercom_get_default_pad+0x15c>)
     f5a:	e023      	b.n	fa4 <_sercom_get_default_pad+0x110>
	}

	Assert(false);
	return 0;
     f5c:	2000      	movs	r0, #0
     f5e:	e021      	b.n	fa4 <_sercom_get_default_pad+0x110>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     f60:	4824      	ldr	r0, [pc, #144]	; (ff4 <_sercom_get_default_pad+0x160>)
     f62:	e01f      	b.n	fa4 <_sercom_get_default_pad+0x110>
     f64:	4824      	ldr	r0, [pc, #144]	; (ff8 <_sercom_get_default_pad+0x164>)
     f66:	e01d      	b.n	fa4 <_sercom_get_default_pad+0x110>
     f68:	2901      	cmp	r1, #1
     f6a:	d006      	beq.n	f7a <_sercom_get_default_pad+0xe6>
     f6c:	2900      	cmp	r1, #0
     f6e:	d018      	beq.n	fa2 <_sercom_get_default_pad+0x10e>
     f70:	2902      	cmp	r1, #2
     f72:	d006      	beq.n	f82 <_sercom_get_default_pad+0xee>
     f74:	2903      	cmp	r1, #3
     f76:	d006      	beq.n	f86 <_sercom_get_default_pad+0xf2>
     f78:	e001      	b.n	f7e <_sercom_get_default_pad+0xea>
     f7a:	4820      	ldr	r0, [pc, #128]	; (ffc <_sercom_get_default_pad+0x168>)
     f7c:	e012      	b.n	fa4 <_sercom_get_default_pad+0x110>
	}

	Assert(false);
	return 0;
     f7e:	2000      	movs	r0, #0
     f80:	e010      	b.n	fa4 <_sercom_get_default_pad+0x110>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     f82:	481f      	ldr	r0, [pc, #124]	; (1000 <_sercom_get_default_pad+0x16c>)
     f84:	e00e      	b.n	fa4 <_sercom_get_default_pad+0x110>
     f86:	481f      	ldr	r0, [pc, #124]	; (1004 <_sercom_get_default_pad+0x170>)
     f88:	e00c      	b.n	fa4 <_sercom_get_default_pad+0x110>
	}

	Assert(false);
	return 0;
     f8a:	2000      	movs	r0, #0
     f8c:	e00a      	b.n	fa4 <_sercom_get_default_pad+0x110>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     f8e:	481e      	ldr	r0, [pc, #120]	; (1008 <_sercom_get_default_pad+0x174>)
     f90:	e008      	b.n	fa4 <_sercom_get_default_pad+0x110>
     f92:	2003      	movs	r0, #3
     f94:	e006      	b.n	fa4 <_sercom_get_default_pad+0x110>
     f96:	481d      	ldr	r0, [pc, #116]	; (100c <_sercom_get_default_pad+0x178>)
     f98:	e004      	b.n	fa4 <_sercom_get_default_pad+0x110>
     f9a:	481d      	ldr	r0, [pc, #116]	; (1010 <_sercom_get_default_pad+0x17c>)
     f9c:	e002      	b.n	fa4 <_sercom_get_default_pad+0x110>
     f9e:	481d      	ldr	r0, [pc, #116]	; (1014 <_sercom_get_default_pad+0x180>)
     fa0:	e000      	b.n	fa4 <_sercom_get_default_pad+0x110>
     fa2:	481d      	ldr	r0, [pc, #116]	; (1018 <_sercom_get_default_pad+0x184>)
	}

	Assert(false);
	return 0;
}
     fa4:	4770      	bx	lr
     fa6:	46c0      	nop			; (mov r8, r8)
     fa8:	42001000 	.word	0x42001000
     fac:	42000800 	.word	0x42000800
     fb0:	42000c00 	.word	0x42000c00
     fb4:	42001800 	.word	0x42001800
     fb8:	42001c00 	.word	0x42001c00
     fbc:	42001400 	.word	0x42001400
     fc0:	00050003 	.word	0x00050003
     fc4:	00060003 	.word	0x00060003
     fc8:	00070003 	.word	0x00070003
     fcc:	00010003 	.word	0x00010003
     fd0:	001e0003 	.word	0x001e0003
     fd4:	001f0003 	.word	0x001f0003
     fd8:	000d0002 	.word	0x000d0002
     fdc:	000e0002 	.word	0x000e0002
     fe0:	000f0002 	.word	0x000f0002
     fe4:	00110003 	.word	0x00110003
     fe8:	00120003 	.word	0x00120003
     fec:	00130003 	.word	0x00130003
     ff0:	003f0005 	.word	0x003f0005
     ff4:	003e0005 	.word	0x003e0005
     ff8:	00520005 	.word	0x00520005
     ffc:	00170003 	.word	0x00170003
    1000:	00180003 	.word	0x00180003
    1004:	00190003 	.word	0x00190003
    1008:	00040003 	.word	0x00040003
    100c:	000c0002 	.word	0x000c0002
    1010:	00100003 	.word	0x00100003
    1014:	00530005 	.word	0x00530005
    1018:	00160003 	.word	0x00160003

0000101c <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
    101c:	b530      	push	{r4, r5, lr}
    101e:	b087      	sub	sp, #28
	/* Save all available SERCOM instances for compare. */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
    1020:	4b0c      	ldr	r3, [pc, #48]	; (1054 <_sercom_get_sercom_inst_index+0x38>)
    1022:	466a      	mov	r2, sp
    1024:	cb32      	ldmia	r3!, {r1, r4, r5}
    1026:	c232      	stmia	r2!, {r1, r4, r5}
    1028:	cb32      	ldmia	r3!, {r1, r4, r5}
    102a:	c232      	stmia	r2!, {r1, r4, r5}

	/* Find index for sercom instance. */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
    102c:	9b00      	ldr	r3, [sp, #0]
    102e:	4283      	cmp	r3, r0
    1030:	d006      	beq.n	1040 <_sercom_get_sercom_inst_index+0x24>
    1032:	2301      	movs	r3, #1
    1034:	009a      	lsls	r2, r3, #2
    1036:	4669      	mov	r1, sp
    1038:	5852      	ldr	r2, [r2, r1]
    103a:	4282      	cmp	r2, r0
    103c:	d103      	bne.n	1046 <_sercom_get_sercom_inst_index+0x2a>
    103e:	e000      	b.n	1042 <_sercom_get_sercom_inst_index+0x26>
{
	/* Save all available SERCOM instances for compare. */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;

	/* Find index for sercom instance. */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    1040:	2300      	movs	r3, #0
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
			return i;
    1042:	b2d8      	uxtb	r0, r3
    1044:	e003      	b.n	104e <_sercom_get_sercom_inst_index+0x32>
{
	/* Save all available SERCOM instances for compare. */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;

	/* Find index for sercom instance. */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    1046:	3301      	adds	r3, #1
    1048:	2b06      	cmp	r3, #6
    104a:	d1f3      	bne.n	1034 <_sercom_get_sercom_inst_index+0x18>
		}
	}

	/* Invalid data given. */
	Assert(false);
	return 0;
    104c:	2000      	movs	r0, #0
}
    104e:	b007      	add	sp, #28
    1050:	bd30      	pop	{r4, r5, pc}
    1052:	46c0      	nop			; (mov r8, r8)
    1054:	0001201c 	.word	0x0001201c

00001058 <_sercom_default_handler>:
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
	Assert(false);
}
    1058:	4770      	bx	lr
    105a:	46c0      	nop			; (mov r8, r8)

0000105c <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
    105c:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* Initialize handlers with default handler and device instances with 0. */
	if (_handler_table_initialized == false) {
    105e:	4b0a      	ldr	r3, [pc, #40]	; (1088 <_sercom_set_handler+0x2c>)
    1060:	781b      	ldrb	r3, [r3, #0]
    1062:	2b00      	cmp	r3, #0
    1064:	d10c      	bne.n	1080 <_sercom_set_handler+0x24>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    1066:	4f09      	ldr	r7, [pc, #36]	; (108c <_sercom_set_handler+0x30>)
    1068:	4e09      	ldr	r6, [pc, #36]	; (1090 <_sercom_set_handler+0x34>)
			_sercom_instances[i] = NULL;
    106a:	4d0a      	ldr	r5, [pc, #40]	; (1094 <_sercom_set_handler+0x38>)
    106c:	2400      	movs	r4, #0
		const sercom_handler_t interrupt_handler)
{
	/* Initialize handlers with default handler and device instances with 0. */
	if (_handler_table_initialized == false) {
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    106e:	51de      	str	r6, [r3, r7]
			_sercom_instances[i] = NULL;
    1070:	195a      	adds	r2, r3, r5
    1072:	6014      	str	r4, [r2, #0]
    1074:	3304      	adds	r3, #4
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
	/* Initialize handlers with default handler and device instances with 0. */
	if (_handler_table_initialized == false) {
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    1076:	2b18      	cmp	r3, #24
    1078:	d1f9      	bne.n	106e <_sercom_set_handler+0x12>
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
			_sercom_instances[i] = NULL;
		}

		_handler_table_initialized = true;
    107a:	2201      	movs	r2, #1
    107c:	4b02      	ldr	r3, [pc, #8]	; (1088 <_sercom_set_handler+0x2c>)
    107e:	701a      	strb	r2, [r3, #0]
	}

	/* Save interrupt handler. */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
    1080:	0080      	lsls	r0, r0, #2
    1082:	4b02      	ldr	r3, [pc, #8]	; (108c <_sercom_set_handler+0x30>)
    1084:	50c1      	str	r1, [r0, r3]
}
    1086:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1088:	20000266 	.word	0x20000266
    108c:	20000268 	.word	0x20000268
    1090:	00001059 	.word	0x00001059
    1094:	20002ad0 	.word	0x20002ad0

00001098 <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
    1098:	b510      	push	{r4, lr}
    109a:	b082      	sub	sp, #8
    109c:	1c04      	adds	r4, r0, #0
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
    109e:	4668      	mov	r0, sp
    10a0:	4905      	ldr	r1, [pc, #20]	; (10b8 <_sercom_get_interrupt_vector+0x20>)
    10a2:	2206      	movs	r2, #6
    10a4:	4b05      	ldr	r3, [pc, #20]	; (10bc <_sercom_get_interrupt_vector+0x24>)
    10a6:	4798      	blx	r3
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
    10a8:	1c20      	adds	r0, r4, #0
    10aa:	4b05      	ldr	r3, [pc, #20]	; (10c0 <_sercom_get_interrupt_vector+0x28>)
    10ac:	4798      	blx	r3

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
    10ae:	466b      	mov	r3, sp
    10b0:	5618      	ldrsb	r0, [r3, r0]
}
    10b2:	b002      	add	sp, #8
    10b4:	bd10      	pop	{r4, pc}
    10b6:	46c0      	nop			; (mov r8, r8)
    10b8:	00012034 	.word	0x00012034
    10bc:	00010b2f 	.word	0x00010b2f
    10c0:	0000101d 	.word	0x0000101d

000010c4 <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
    10c4:	b508      	push	{r3, lr}
    10c6:	4b02      	ldr	r3, [pc, #8]	; (10d0 <SERCOM0_Handler+0xc>)
    10c8:	681b      	ldr	r3, [r3, #0]
    10ca:	2000      	movs	r0, #0
    10cc:	4798      	blx	r3
    10ce:	bd08      	pop	{r3, pc}
    10d0:	20000268 	.word	0x20000268

000010d4 <SERCOM1_Handler>:
    10d4:	b508      	push	{r3, lr}
    10d6:	4b02      	ldr	r3, [pc, #8]	; (10e0 <SERCOM1_Handler+0xc>)
    10d8:	685b      	ldr	r3, [r3, #4]
    10da:	2001      	movs	r0, #1
    10dc:	4798      	blx	r3
    10de:	bd08      	pop	{r3, pc}
    10e0:	20000268 	.word	0x20000268

000010e4 <SERCOM2_Handler>:
    10e4:	b508      	push	{r3, lr}
    10e6:	4b02      	ldr	r3, [pc, #8]	; (10f0 <SERCOM2_Handler+0xc>)
    10e8:	689b      	ldr	r3, [r3, #8]
    10ea:	2002      	movs	r0, #2
    10ec:	4798      	blx	r3
    10ee:	bd08      	pop	{r3, pc}
    10f0:	20000268 	.word	0x20000268

000010f4 <SERCOM3_Handler>:
    10f4:	b508      	push	{r3, lr}
    10f6:	4b02      	ldr	r3, [pc, #8]	; (1100 <SERCOM3_Handler+0xc>)
    10f8:	68db      	ldr	r3, [r3, #12]
    10fa:	2003      	movs	r0, #3
    10fc:	4798      	blx	r3
    10fe:	bd08      	pop	{r3, pc}
    1100:	20000268 	.word	0x20000268

00001104 <SERCOM4_Handler>:
    1104:	b508      	push	{r3, lr}
    1106:	4b02      	ldr	r3, [pc, #8]	; (1110 <SERCOM4_Handler+0xc>)
    1108:	691b      	ldr	r3, [r3, #16]
    110a:	2004      	movs	r0, #4
    110c:	4798      	blx	r3
    110e:	bd08      	pop	{r3, pc}
    1110:	20000268 	.word	0x20000268

00001114 <SERCOM5_Handler>:
    1114:	b508      	push	{r3, lr}
    1116:	4b02      	ldr	r3, [pc, #8]	; (1120 <SERCOM5_Handler+0xc>)
    1118:	695b      	ldr	r3, [r3, #20]
    111a:	2005      	movs	r0, #5
    111c:	4798      	blx	r3
    111e:	bd08      	pop	{r3, pc}
    1120:	20000268 	.word	0x20000268

00001124 <spi_init>:
 */
enum status_code spi_init(
		struct spi_module *const module,
		Sercom *const hw,
		const struct spi_config *const config)
{
    1124:	b5f0      	push	{r4, r5, r6, r7, lr}
    1126:	4657      	mov	r7, sl
    1128:	464e      	mov	r6, r9
    112a:	4645      	mov	r5, r8
    112c:	b4e0      	push	{r5, r6, r7}
    112e:	b08a      	sub	sp, #40	; 0x28
    1130:	1c05      	adds	r5, r0, #0
    1132:	1c0e      	adds	r6, r1, #0
    1134:	1c14      	adds	r4, r2, #0
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize device instance */
	module->hw = hw;
    1136:	6029      	str	r1, [r5, #0]

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if module is enabled. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_ENABLE) {
    1138:	680b      	ldr	r3, [r1, #0]
    113a:	079b      	lsls	r3, r3, #30
    113c:	d400      	bmi.n	1140 <spi_init+0x1c>
    113e:	e08e      	b.n	125e <spi_init+0x13a>
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
	Sercom *const hw = module->hw;

	uint32_t pad_pinmuxes[] = {
    1140:	6a93      	ldr	r3, [r2, #40]	; 0x28
    1142:	9305      	str	r3, [sp, #20]
    1144:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
    1146:	9306      	str	r3, [sp, #24]
    1148:	6b13      	ldr	r3, [r2, #48]	; 0x30
    114a:	9307      	str	r3, [sp, #28]
    114c:	6b53      	ldr	r3, [r2, #52]	; 0x34
    114e:	9308      	str	r3, [sp, #32]
    1150:	2700      	movs	r7, #0
 */
static inline uint8_t system_pinmux_pin_get_mux_position(
		const uint8_t gpio_pin)
{
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_index = (gpio_pin % 32);
    1152:	231f      	movs	r3, #31
    1154:	4699      	mov	r9, r3
    1156:	b2f9      	uxtb	r1, r7
    1158:	00bb      	lsls	r3, r7, #2
		config->pinmux_pad2, config->pinmux_pad3
	};

	/* Compare the current SERCOM pins against the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
		uint32_t current_pinmux = pad_pinmuxes[pad];
    115a:	aa05      	add	r2, sp, #20
    115c:	5898      	ldr	r0, [r3, r2]

		if (current_pinmux == PINMUX_DEFAULT) {
    115e:	2800      	cmp	r0, #0
    1160:	d102      	bne.n	1168 <spi_init+0x44>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    1162:	1c30      	adds	r0, r6, #0
    1164:	4b90      	ldr	r3, [pc, #576]	; (13a8 <spi_init+0x284>)
    1166:	4798      	blx	r3
		}

		if (current_pinmux == PINMUX_UNUSED) {
    1168:	1c43      	adds	r3, r0, #1
    116a:	d02b      	beq.n	11c4 <spi_init+0xa0>
			continue;
		}

		if ((current_pinmux & 0xFFFF) !=
    116c:	0401      	lsls	r1, r0, #16
    116e:	0c0b      	lsrs	r3, r1, #16
    1170:	4698      	mov	r8, r3
				system_pinmux_pin_get_mux_position(current_pinmux >> 16)) {
    1172:	0c00      	lsrs	r0, r0, #16
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports. */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    1174:	b2c3      	uxtb	r3, r0
    1176:	469c      	mov	ip, r3
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
    1178:	2300      	movs	r3, #0
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports. */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    117a:	0602      	lsls	r2, r0, #24
    117c:	d405      	bmi.n	118a <spi_init+0x66>
		return &(ports[port_index]->Group[group_index]);
    117e:	4663      	mov	r3, ip
    1180:	095b      	lsrs	r3, r3, #5
    1182:	01db      	lsls	r3, r3, #7
    1184:	4a89      	ldr	r2, [pc, #548]	; (13ac <spi_init+0x288>)
    1186:	4692      	mov	sl, r2
    1188:	4453      	add	r3, sl
 */
static inline uint8_t system_pinmux_pin_get_mux_position(
		const uint8_t gpio_pin)
{
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_index = (gpio_pin % 32);
    118a:	464a      	mov	r2, r9
    118c:	4660      	mov	r0, ip
    118e:	4002      	ands	r2, r0

	if (!(port->PINCFG[pin_index].reg & PORT_PINCFG_PMUXEN)) {
    1190:	1898      	adds	r0, r3, r2
    1192:	3040      	adds	r0, #64	; 0x40
    1194:	7800      	ldrb	r0, [r0, #0]
    1196:	4682      	mov	sl, r0
		return SYSTEM_PINMUX_GPIO;
    1198:	2080      	movs	r0, #128	; 0x80
		const uint8_t gpio_pin)
{
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_index = (gpio_pin % 32);

	if (!(port->PINCFG[pin_index].reg & PORT_PINCFG_PMUXEN)) {
    119a:	4651      	mov	r1, sl
    119c:	07c9      	lsls	r1, r1, #31
    119e:	d50b      	bpl.n	11b8 <spi_init+0x94>
		return SYSTEM_PINMUX_GPIO;
	}

	uint32_t pmux_reg = port->PMUX[pin_index / 2].reg;
    11a0:	0852      	lsrs	r2, r2, #1
    11a2:	189b      	adds	r3, r3, r2
    11a4:	3330      	adds	r3, #48	; 0x30
    11a6:	7818      	ldrb	r0, [r3, #0]
    11a8:	b2c0      	uxtb	r0, r0

	if (pin_index & 1) {
    11aa:	4663      	mov	r3, ip
    11ac:	07db      	lsls	r3, r3, #31
    11ae:	d501      	bpl.n	11b4 <spi_init+0x90>
		return (pmux_reg & PORT_PMUX_PMUXO_Msk) >> PORT_PMUX_PMUXO_Pos;
    11b0:	0900      	lsrs	r0, r0, #4
    11b2:	e001      	b.n	11b8 <spi_init+0x94>
	}
	else {
		return (pmux_reg & PORT_PMUX_PMUXE_Msk) >> PORT_PMUX_PMUXE_Pos;
    11b4:	230f      	movs	r3, #15
    11b6:	4018      	ands	r0, r3

		if (current_pinmux == PINMUX_UNUSED) {
			continue;
		}

		if ((current_pinmux & 0xFFFF) !=
    11b8:	4580      	cmp	r8, r0
    11ba:	d003      	beq.n	11c4 <spi_init+0xa0>
				system_pinmux_pin_get_mux_position(current_pinmux >> 16)) {
			module->hw = NULL;
    11bc:	2300      	movs	r3, #0
    11be:	602b      	str	r3, [r5, #0]
			return STATUS_ERR_DENIED;
    11c0:	201c      	movs	r0, #28
    11c2:	e0ea      	b.n	139a <spi_init+0x276>
    11c4:	3701      	adds	r7, #1
		config->pinmux_pad0, config->pinmux_pad1,
		config->pinmux_pad2, config->pinmux_pad3
	};

	/* Compare the current SERCOM pins against the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
    11c6:	2f04      	cmp	r7, #4
    11c8:	d1c5      	bne.n	1156 <spi_init+0x32>
	}

#  if CONF_SPI_MASTER_ENABLE == true
	/* Value to read BAUD register */
	uint16_t baud;
	uint32_t external_clock = system_gclk_chan_get_hz(SERCOM_GCLK_ID);
    11ca:	2013      	movs	r0, #19
    11cc:	4b78      	ldr	r3, [pc, #480]	; (13b0 <spi_init+0x28c>)
    11ce:	4798      	blx	r3
    11d0:	1c01      	adds	r1, r0, #0
	uint32_t addr = 0;
#  endif

#  if CONF_SPI_MASTER_ENABLE == true
	/* Find baud value and compare it */
	if (config->mode == SPI_MODE_MASTER) {
    11d2:	7822      	ldrb	r2, [r4, #0]
	/* Value to read BAUD register */
	uint16_t baud;
	uint32_t external_clock = system_gclk_chan_get_hz(SERCOM_GCLK_ID);
#  endif
	/* Value to read CTRLA, CTRLB and ADDR register */
	uint32_t ctrla = 0;
    11d4:	2000      	movs	r0, #0
	uint32_t addr = 0;
#  endif

#  if CONF_SPI_MASTER_ENABLE == true
	/* Find baud value and compare it */
	if (config->mode == SPI_MODE_MASTER) {
    11d6:	2a01      	cmp	r2, #1
    11d8:	d111      	bne.n	11fe <spi_init+0xda>
		enum status_code error_code = _sercom_get_sync_baud_val(
    11da:	69a0      	ldr	r0, [r4, #24]
    11dc:	aa04      	add	r2, sp, #16
    11de:	4b75      	ldr	r3, [pc, #468]	; (13b4 <spi_init+0x290>)
    11e0:	4798      	blx	r3
    11e2:	1c03      	adds	r3, r0, #0
				config->mode_specific.master.baudrate,
				external_clock, &baud);

		if (error_code != STATUS_OK) {
			/* Baud rate calculation error, return status code */
			return STATUS_ERR_INVALID_ARG;
    11e4:	2017      	movs	r0, #23
	if (config->mode == SPI_MODE_MASTER) {
		enum status_code error_code = _sercom_get_sync_baud_val(
				config->mode_specific.master.baudrate,
				external_clock, &baud);

		if (error_code != STATUS_OK) {
    11e6:	2b00      	cmp	r3, #0
    11e8:	d000      	beq.n	11ec <spi_init+0xc8>
    11ea:	e0d6      	b.n	139a <spi_init+0x276>
			/* Baud rate calculation error, return status code */
			return STATUS_ERR_INVALID_ARG;
		}

		if (spi_module->BAUD.reg !=  (uint8_t)baud) {
    11ec:	7b33      	ldrb	r3, [r6, #12]
    11ee:	b2db      	uxtb	r3, r3
    11f0:	aa04      	add	r2, sp, #16
    11f2:	7812      	ldrb	r2, [r2, #0]
			return STATUS_ERR_DENIED;
    11f4:	3005      	adds	r0, #5
		if (error_code != STATUS_OK) {
			/* Baud rate calculation error, return status code */
			return STATUS_ERR_INVALID_ARG;
		}

		if (spi_module->BAUD.reg !=  (uint8_t)baud) {
    11f6:	429a      	cmp	r2, r3
    11f8:	d000      	beq.n	11fc <spi_init+0xd8>
    11fa:	e0ce      	b.n	139a <spi_init+0x276>
			return STATUS_ERR_DENIED;
		}

		ctrla |= SERCOM_SPI_CTRLA_MODE_SPI_MASTER;
    11fc:	3810      	subs	r0, #16
    11fe:	68a3      	ldr	r3, [r4, #8]
    1200:	6862      	ldr	r2, [r4, #4]
    1202:	4313      	orrs	r3, r2
    1204:	68e2      	ldr	r2, [r4, #12]
    1206:	4313      	orrs	r3, r2

	/* Set clock polarity and clock phase */
	ctrla |= config->transfer_mode;

	/* Set MUX setting */
	ctrla |= config->mux_setting;
    1208:	4303      	orrs	r3, r0

	/* Set SPI character size */
	ctrlb |= config->character_size;
    120a:	7c21      	ldrb	r1, [r4, #16]

	if (config->run_in_standby) {
    120c:	7c62      	ldrb	r2, [r4, #17]
    120e:	2a00      	cmp	r2, #0
    1210:	d001      	beq.n	1216 <spi_init+0xf2>
		/* Enable in sleep mode */
		ctrla |= SERCOM_SPI_CTRLA_RUNSTDBY;
    1212:	2280      	movs	r2, #128	; 0x80
    1214:	4313      	orrs	r3, r2
	}

	if (config->receiver_enable) {
    1216:	7ca2      	ldrb	r2, [r4, #18]
    1218:	2a00      	cmp	r2, #0
    121a:	d002      	beq.n	1222 <spi_init+0xfe>
		/* Enable receiver */
		ctrlb |= SERCOM_SPI_CTRLB_RXEN;
    121c:	2280      	movs	r2, #128	; 0x80
    121e:	0292      	lsls	r2, r2, #10
    1220:	4311      	orrs	r1, r2
	}

#  ifdef FEATURE_SPI_SLAVE_SELECT_LOW_DETECT
	if (config->select_slave_low_detect_enable) {
    1222:	7ce2      	ldrb	r2, [r4, #19]
    1224:	2a00      	cmp	r2, #0
    1226:	d002      	beq.n	122e <spi_init+0x10a>
		/* Enable Slave Select Low Detect */
		ctrlb |= SERCOM_SPI_CTRLB_SSDE;
    1228:	2280      	movs	r2, #128	; 0x80
    122a:	0092      	lsls	r2, r2, #2
    122c:	4311      	orrs	r1, r2
	}
#  endif
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	if (config->master_slave_select_enable) {
    122e:	7d22      	ldrb	r2, [r4, #20]
    1230:	2a00      	cmp	r2, #0
    1232:	d002      	beq.n	123a <spi_init+0x116>
		/* Enable Master Slave Select */
		ctrlb |= SERCOM_SPI_CTRLB_MSSEN;
    1234:	2280      	movs	r2, #128	; 0x80
    1236:	0192      	lsls	r2, r2, #6
    1238:	4311      	orrs	r1, r2
#  endif

	ctrla |= SERCOM_SPI_CTRLA_ENABLE;

	/* Check that same config is set */
	if (spi_module->CTRLA.reg == ctrla &&
    123a:	6830      	ldr	r0, [r6, #0]
		/* Enable Master Slave Select */
		ctrlb |= SERCOM_SPI_CTRLB_MSSEN;
	}
#  endif

	ctrla |= SERCOM_SPI_CTRLA_ENABLE;
    123c:	2202      	movs	r2, #2
    123e:	4313      	orrs	r3, r2

	/* Check that same config is set */
	if (spi_module->CTRLA.reg == ctrla &&
    1240:	4283      	cmp	r3, r0
    1242:	d108      	bne.n	1256 <spi_init+0x132>
			spi_module->CTRLB.reg == ctrlb) {
    1244:	6873      	ldr	r3, [r6, #4]
#  endif

	ctrla |= SERCOM_SPI_CTRLA_ENABLE;

	/* Check that same config is set */
	if (spi_module->CTRLA.reg == ctrla &&
    1246:	428b      	cmp	r3, r1
    1248:	d105      	bne.n	1256 <spi_init+0x132>
			spi_module->CTRLB.reg == ctrlb) {
		module->mode           = config->mode;
    124a:	7823      	ldrb	r3, [r4, #0]
    124c:	716b      	strb	r3, [r5, #5]
		module->character_size = config->character_size;
    124e:	7c23      	ldrb	r3, [r4, #16]
    1250:	71ab      	strb	r3, [r5, #6]
		return STATUS_OK;
    1252:	2000      	movs	r0, #0
    1254:	e0a1      	b.n	139a <spi_init+0x276>
	}

	/* Not same config, wipe module pointer and return */
	module->hw = NULL;
    1256:	2300      	movs	r3, #0
    1258:	602b      	str	r3, [r5, #0]

	return STATUS_ERR_DENIED;
    125a:	201c      	movs	r0, #28
    125c:	e09d      	b.n	139a <spi_init+0x276>
		return STATUS_ERR_DENIED;
#  endif
	}

	/* Check if reset is in progress. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
    125e:	680b      	ldr	r3, [r1, #0]
		return STATUS_BUSY;
    1260:	2005      	movs	r0, #5
		return STATUS_ERR_DENIED;
#  endif
	}

	/* Check if reset is in progress. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
    1262:	07db      	lsls	r3, r3, #31
    1264:	d500      	bpl.n	1268 <spi_init+0x144>
    1266:	e098      	b.n	139a <spi_init+0x276>
		return STATUS_BUSY;
	}

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    1268:	1c08      	adds	r0, r1, #0
    126a:	4b53      	ldr	r3, [pc, #332]	; (13b8 <spi_init+0x294>)
    126c:	4798      	blx	r3
    126e:	4953      	ldr	r1, [pc, #332]	; (13bc <spi_init+0x298>)
    1270:	6a0a      	ldr	r2, [r1, #32]
	uint32_t pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
    1272:	1c87      	adds	r7, r0, #2
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;

	/* Turn on module in PM */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    1274:	2301      	movs	r3, #1
    1276:	40bb      	lsls	r3, r7
    1278:	4313      	orrs	r3, r2
    127a:	620b      	str	r3, [r1, #32]

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
	gclk_chan_conf.source_generator = config->generator_source;
    127c:	a909      	add	r1, sp, #36	; 0x24
    127e:	2724      	movs	r7, #36	; 0x24
    1280:	5de3      	ldrb	r3, [r4, r7]
    1282:	700b      	strb	r3, [r1, #0]
		return STATUS_BUSY;
	}

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
	uint32_t pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    1284:	3014      	adds	r0, #20

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
	gclk_chan_conf.source_generator = config->generator_source;
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    1286:	b2c3      	uxtb	r3, r0
    1288:	9301      	str	r3, [sp, #4]
    128a:	1c18      	adds	r0, r3, #0
    128c:	4b4c      	ldr	r3, [pc, #304]	; (13c0 <spi_init+0x29c>)
    128e:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    1290:	9801      	ldr	r0, [sp, #4]
    1292:	4b4c      	ldr	r3, [pc, #304]	; (13c4 <spi_init+0x2a0>)
    1294:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    1296:	5de0      	ldrb	r0, [r4, r7]
    1298:	2100      	movs	r1, #0
    129a:	4b4b      	ldr	r3, [pc, #300]	; (13c8 <spi_init+0x2a4>)
    129c:	4798      	blx	r3

#  if CONF_SPI_MASTER_ENABLE == true
	if (config->mode == SPI_MODE_MASTER) {
    129e:	7823      	ldrb	r3, [r4, #0]
    12a0:	2b01      	cmp	r3, #1
    12a2:	d103      	bne.n	12ac <spi_init+0x188>
		/* Set the SERCOM in SPI master mode */
		spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_MODE_SPI_MASTER;
    12a4:	6832      	ldr	r2, [r6, #0]
    12a6:	330b      	adds	r3, #11
    12a8:	4313      	orrs	r3, r2
    12aa:	6033      	str	r3, [r6, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(config);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    12ac:	682e      	ldr	r6, [r5, #0]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
    12ae:	ab04      	add	r3, sp, #16
    12b0:	2280      	movs	r2, #128	; 0x80
    12b2:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    12b4:	2200      	movs	r2, #0
    12b6:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    12b8:	2101      	movs	r1, #1
    12ba:	7099      	strb	r1, [r3, #2]
	config->powersave    = false;
    12bc:	70da      	strb	r2, [r3, #3]
	Sercom *const hw = module->hw;

	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
	if(config->mode == SPI_MODE_SLAVE) {
    12be:	7823      	ldrb	r3, [r4, #0]
    12c0:	2b00      	cmp	r3, #0
    12c2:	d101      	bne.n	12c8 <spi_init+0x1a4>
		pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    12c4:	ab04      	add	r3, sp, #16
    12c6:	709a      	strb	r2, [r3, #2]
	}

	uint32_t pad_pinmuxes[] = {
    12c8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    12ca:	9305      	str	r3, [sp, #20]
    12cc:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    12ce:	9306      	str	r3, [sp, #24]
    12d0:	6b23      	ldr	r3, [r4, #48]	; 0x30
    12d2:	9307      	str	r3, [sp, #28]
    12d4:	6b63      	ldr	r3, [r4, #52]	; 0x34
    12d6:	9308      	str	r3, [sp, #32]
    12d8:	2700      	movs	r7, #0
    12da:	b2f9      	uxtb	r1, r7
    12dc:	00bb      	lsls	r3, r7, #2
			config->pinmux_pad2, config->pinmux_pad3
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
		uint32_t current_pinmux = pad_pinmuxes[pad];
    12de:	aa05      	add	r2, sp, #20
    12e0:	5898      	ldr	r0, [r3, r2]

		if (current_pinmux == PINMUX_DEFAULT) {
    12e2:	2800      	cmp	r0, #0
    12e4:	d102      	bne.n	12ec <spi_init+0x1c8>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    12e6:	1c30      	adds	r0, r6, #0
    12e8:	4b2f      	ldr	r3, [pc, #188]	; (13a8 <spi_init+0x284>)
    12ea:	4798      	blx	r3
		}

		if (current_pinmux != PINMUX_UNUSED) {
    12ec:	1c43      	adds	r3, r0, #1
    12ee:	d006      	beq.n	12fe <spi_init+0x1da>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    12f0:	ab02      	add	r3, sp, #8
    12f2:	7218      	strb	r0, [r3, #8]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    12f4:	0c00      	lsrs	r0, r0, #16
    12f6:	b2c0      	uxtb	r0, r0
    12f8:	a904      	add	r1, sp, #16
    12fa:	4b34      	ldr	r3, [pc, #208]	; (13cc <spi_init+0x2a8>)
    12fc:	4798      	blx	r3
    12fe:	3701      	adds	r7, #1
			config->pinmux_pad0, config->pinmux_pad1,
			config->pinmux_pad2, config->pinmux_pad3
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
    1300:	2f04      	cmp	r7, #4
    1302:	d1ea      	bne.n	12da <spi_init+0x1b6>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
		}
	}

	module->mode             = config->mode;
    1304:	7823      	ldrb	r3, [r4, #0]
    1306:	716b      	strb	r3, [r5, #5]
	module->character_size   = config->character_size;
    1308:	7c23      	ldrb	r3, [r4, #16]
    130a:	71ab      	strb	r3, [r5, #6]
	module->receiver_enabled = config->receiver_enable;
    130c:	7ca3      	ldrb	r3, [r4, #18]
    130e:	71eb      	strb	r3, [r5, #7]
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	module->master_slave_select_enable = config->master_slave_select_enable;
    1310:	7d23      	ldrb	r3, [r4, #20]
    1312:	722b      	strb	r3, [r5, #8]
#  endif

#  if CONF_SPI_MASTER_ENABLE == true
	/* Value to write to BAUD register */
	uint16_t baud = 0;
    1314:	2200      	movs	r2, #0
    1316:	ab02      	add	r3, sp, #8
    1318:	80da      	strh	r2, [r3, #6]
	/* Value to write to CTRLB register */
	uint32_t ctrlb = 0;

# if CONF_SPI_MASTER_ENABLE == true
	/* Find baud value and write it */
	if (config->mode == SPI_MODE_MASTER) {
    131a:	7823      	ldrb	r3, [r4, #0]
    131c:	2b01      	cmp	r3, #1
    131e:	d114      	bne.n	134a <spi_init+0x226>
		/* Find frequency of the internal SERCOMi_GCLK_ID_CORE */
		uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    1320:	6828      	ldr	r0, [r5, #0]
    1322:	4b25      	ldr	r3, [pc, #148]	; (13b8 <spi_init+0x294>)
    1324:	4798      	blx	r3
		uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    1326:	3014      	adds	r0, #20
		uint32_t internal_clock = system_gclk_chan_get_hz(gclk_index);
    1328:	b2c0      	uxtb	r0, r0
    132a:	4b21      	ldr	r3, [pc, #132]	; (13b0 <spi_init+0x28c>)
    132c:	4798      	blx	r3
    132e:	1c01      	adds	r1, r0, #0

		/* Get baud value, based on baudrate and the internal clock frequency */
		enum status_code error_code = _sercom_get_sync_baud_val(
    1330:	69a0      	ldr	r0, [r4, #24]
    1332:	ab02      	add	r3, sp, #8
    1334:	1d9a      	adds	r2, r3, #6
    1336:	4b1f      	ldr	r3, [pc, #124]	; (13b4 <spi_init+0x290>)
    1338:	4798      	blx	r3
    133a:	1c03      	adds	r3, r0, #0
				config->mode_specific.master.baudrate,
				internal_clock, &baud);

		if (error_code != STATUS_OK) {
			/* Baud rate calculation error, return status code */
			return STATUS_ERR_INVALID_ARG;
    133c:	2017      	movs	r0, #23
		/* Get baud value, based on baudrate and the internal clock frequency */
		enum status_code error_code = _sercom_get_sync_baud_val(
				config->mode_specific.master.baudrate,
				internal_clock, &baud);

		if (error_code != STATUS_OK) {
    133e:	2b00      	cmp	r3, #0
    1340:	d12b      	bne.n	139a <spi_init+0x276>
			/* Baud rate calculation error, return status code */
			return STATUS_ERR_INVALID_ARG;
		}

		spi_module->BAUD.reg = (uint8_t)baud;
    1342:	ab02      	add	r3, sp, #8
    1344:	3306      	adds	r3, #6
    1346:	781b      	ldrb	r3, [r3, #0]
    1348:	7333      	strb	r3, [r6, #12]
# endif
	/* Set data order */
	ctrla |= config->data_order;

	/* Set clock polarity and clock phase */
	ctrla |= config->transfer_mode;
    134a:	68a3      	ldr	r3, [r4, #8]
    134c:	6862      	ldr	r2, [r4, #4]
    134e:	4313      	orrs	r3, r2

	/* Set MUX setting */
	ctrla |= config->mux_setting;
    1350:	68e2      	ldr	r2, [r4, #12]
    1352:	4313      	orrs	r3, r2

	/* Set SPI character size */
	ctrlb |= config->character_size;
    1354:	7c22      	ldrb	r2, [r4, #16]

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
    1356:	7c61      	ldrb	r1, [r4, #17]
    1358:	2900      	cmp	r1, #0
    135a:	d103      	bne.n	1364 <spi_init+0x240>
    135c:	491c      	ldr	r1, [pc, #112]	; (13d0 <spi_init+0x2ac>)
    135e:	7889      	ldrb	r1, [r1, #2]
    1360:	0789      	lsls	r1, r1, #30
    1362:	d501      	bpl.n	1368 <spi_init+0x244>
		ctrla |= SERCOM_SPI_CTRLA_RUNSTDBY;
    1364:	2180      	movs	r1, #128	; 0x80
    1366:	430b      	orrs	r3, r1
	}

	if (config->receiver_enable) {
    1368:	7ca1      	ldrb	r1, [r4, #18]
    136a:	2900      	cmp	r1, #0
    136c:	d002      	beq.n	1374 <spi_init+0x250>
		/* Enable receiver */
		ctrlb |= SERCOM_SPI_CTRLB_RXEN;
    136e:	2180      	movs	r1, #128	; 0x80
    1370:	0289      	lsls	r1, r1, #10
    1372:	430a      	orrs	r2, r1
	}
#  ifdef FEATURE_SPI_SLAVE_SELECT_LOW_DETECT
	if (config->select_slave_low_detect_enable) {
    1374:	7ce1      	ldrb	r1, [r4, #19]
    1376:	2900      	cmp	r1, #0
    1378:	d002      	beq.n	1380 <spi_init+0x25c>
		/* Enable Slave Select Low Detect */
		ctrlb |= SERCOM_SPI_CTRLB_SSDE;
    137a:	2180      	movs	r1, #128	; 0x80
    137c:	0089      	lsls	r1, r1, #2
    137e:	430a      	orrs	r2, r1
	}
#  endif
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	if (config->master_slave_select_enable) {
    1380:	7d21      	ldrb	r1, [r4, #20]
    1382:	2900      	cmp	r1, #0
    1384:	d002      	beq.n	138c <spi_init+0x268>
		/* Enable Master Slave Select */
		ctrlb |= SERCOM_SPI_CTRLB_MSSEN;
    1386:	2180      	movs	r1, #128	; 0x80
    1388:	0189      	lsls	r1, r1, #6
    138a:	430a      	orrs	r2, r1
	}
#  endif
	/* Write CTRLA register */
	spi_module->CTRLA.reg |= ctrla;
    138c:	6831      	ldr	r1, [r6, #0]
    138e:	430b      	orrs	r3, r1
    1390:	6033      	str	r3, [r6, #0]

	/* Write CTRLB register */
	spi_module->CTRLB.reg |= ctrlb;
    1392:	6873      	ldr	r3, [r6, #4]
    1394:	431a      	orrs	r2, r3
    1396:	6072      	str	r2, [r6, #4]

	return STATUS_OK;
    1398:	2000      	movs	r0, #0
	_sercom_instances[instance_index] = module;
#endif

	/* Write configuration to module and return status code */
	return _spi_set_config(module, config);
}
    139a:	b00a      	add	sp, #40	; 0x28
    139c:	bc1c      	pop	{r2, r3, r4}
    139e:	4690      	mov	r8, r2
    13a0:	4699      	mov	r9, r3
    13a2:	46a2      	mov	sl, r4
    13a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    13a6:	46c0      	nop			; (mov r8, r8)
    13a8:	00000e95 	.word	0x00000e95
    13ac:	41004400 	.word	0x41004400
    13b0:	000021a9 	.word	0x000021a9
    13b4:	00000c59 	.word	0x00000c59
    13b8:	0000101d 	.word	0x0000101d
    13bc:	40000400 	.word	0x40000400
    13c0:	0000218d 	.word	0x0000218d
    13c4:	00002101 	.word	0x00002101
    13c8:	00000e49 	.word	0x00000e49
    13cc:	000022dd 	.word	0x000022dd
    13d0:	41002000 	.word	0x41002000

000013d4 <spi_select_slave>:
 */
enum status_code spi_select_slave(
		struct spi_module *const module,
		struct spi_slave_inst *const slave,
		const bool select)
{
    13d4:	b510      	push	{r4, lr}
	Assert(module);
	Assert(module->hw);
	Assert(slave);

	/* Check that the SPI module is operating in master mode */
	if (module->mode != SPI_MODE_MASTER) {
    13d6:	7944      	ldrb	r4, [r0, #5]
		return STATUS_ERR_UNSUPPORTED_DEV;
    13d8:	2315      	movs	r3, #21
	Assert(module);
	Assert(module->hw);
	Assert(slave);

	/* Check that the SPI module is operating in master mode */
	if (module->mode != SPI_MODE_MASTER) {
    13da:	2c01      	cmp	r4, #1
    13dc:	d170      	bne.n	14c0 <spi_select_slave+0xec>
		return STATUS_ERR_UNSUPPORTED_DEV;
	}
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	if(!(module->master_slave_select_enable))
    13de:	7a04      	ldrb	r4, [r0, #8]
		} else {
			/* Drive Slave Select high */
			port_pin_set_output_level(slave->ss_pin, true);
		}
	}
	return STATUS_OK;
    13e0:	2300      	movs	r3, #0
	/* Check that the SPI module is operating in master mode */
	if (module->mode != SPI_MODE_MASTER) {
		return STATUS_ERR_UNSUPPORTED_DEV;
	}
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	if(!(module->master_slave_select_enable))
    13e2:	2c00      	cmp	r4, #0
    13e4:	d16c      	bne.n	14c0 <spi_select_slave+0xec>
#  endif
	{
		if (select) {
    13e6:	2a00      	cmp	r2, #0
    13e8:	d05a      	beq.n	14a0 <spi_select_slave+0xcc>
			/* Check if address recognition is enabled */
			if (slave->address_enabled) {
    13ea:	784b      	ldrb	r3, [r1, #1]
    13ec:	2b00      	cmp	r3, #0
    13ee:	d046      	beq.n	147e <spi_select_slave+0xaa>
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    13f0:	6803      	ldr	r3, [r0, #0]
    13f2:	7e1b      	ldrb	r3, [r3, #24]
				/* Check if the module is ready to write the address */
				if (!spi_is_ready_to_write(module)) {
    13f4:	07db      	lsls	r3, r3, #31
    13f6:	d410      	bmi.n	141a <spi_select_slave+0x46>
					/* Not ready, do not select slave and return */
					port_pin_set_output_level(slave->ss_pin, true);
    13f8:	780b      	ldrb	r3, [r1, #0]
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports. */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    13fa:	09d9      	lsrs	r1, r3, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
    13fc:	2200      	movs	r2, #0
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports. */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    13fe:	2900      	cmp	r1, #0
    1400:	d104      	bne.n	140c <spi_select_slave+0x38>
		return &(ports[port_index]->Group[group_index]);
    1402:	095a      	lsrs	r2, r3, #5
    1404:	01d2      	lsls	r2, r2, #7
    1406:	492f      	ldr	r1, [pc, #188]	; (14c4 <spi_select_slave+0xf0>)
    1408:	468c      	mov	ip, r1
    140a:	4462      	add	r2, ip
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    140c:	211f      	movs	r1, #31
    140e:	400b      	ands	r3, r1
    1410:	391e      	subs	r1, #30
    1412:	4099      	lsls	r1, r3

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
    1414:	6191      	str	r1, [r2, #24]
					return STATUS_BUSY;
    1416:	2305      	movs	r3, #5
    1418:	e052      	b.n	14c0 <spi_select_slave+0xec>
				}

				/* Drive Slave Select low */
				port_pin_set_output_level(slave->ss_pin, false);
    141a:	780b      	ldrb	r3, [r1, #0]
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports. */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    141c:	09dc      	lsrs	r4, r3, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
    141e:	2200      	movs	r2, #0
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports. */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    1420:	2c00      	cmp	r4, #0
    1422:	d104      	bne.n	142e <spi_select_slave+0x5a>
		return &(ports[port_index]->Group[group_index]);
    1424:	095a      	lsrs	r2, r3, #5
    1426:	01d2      	lsls	r2, r2, #7
    1428:	4c26      	ldr	r4, [pc, #152]	; (14c4 <spi_select_slave+0xf0>)
    142a:	46a4      	mov	ip, r4
    142c:	4462      	add	r2, ip
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    142e:	241f      	movs	r4, #31
    1430:	4023      	ands	r3, r4
    1432:	3c1e      	subs	r4, #30
    1434:	409c      	lsls	r4, r3

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
	} else {
		port_base->OUTCLR.reg = pin_mask;
    1436:	6154      	str	r4, [r2, #20]

				/* Write address to slave */
				spi_write(module, slave->address);
    1438:	788a      	ldrb	r2, [r1, #2]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    143a:	6803      	ldr	r3, [r0, #0]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    143c:	7e19      	ldrb	r1, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
    143e:	07c9      	lsls	r1, r1, #31
    1440:	d500      	bpl.n	1444 <spi_select_slave+0x70>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    1442:	629a      	str	r2, [r3, #40]	; 0x28

				if (!(module->receiver_enabled)) {
    1444:	79c2      	ldrb	r2, [r0, #7]
		} else {
			/* Drive Slave Select high */
			port_pin_set_output_level(slave->ss_pin, true);
		}
	}
	return STATUS_OK;
    1446:	2300      	movs	r3, #0
				port_pin_set_output_level(slave->ss_pin, false);

				/* Write address to slave */
				spi_write(module, slave->address);

				if (!(module->receiver_enabled)) {
    1448:	2a00      	cmp	r2, #0
    144a:	d139      	bne.n	14c0 <spi_select_slave+0xec>
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    144c:	6802      	ldr	r2, [r0, #0]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    144e:	2104      	movs	r1, #4
    1450:	7e13      	ldrb	r3, [r2, #24]
					/* Flush contents of shift register shifted back from slave */
					while (!spi_is_ready_to_read(module)) {
    1452:	420b      	tst	r3, r1
    1454:	d0fc      	beq.n	1450 <spi_select_slave+0x7c>
    1456:	7e11      	ldrb	r1, [r2, #24]
		} else {
			/* Drive Slave Select high */
			port_pin_set_output_level(slave->ss_pin, true);
		}
	}
	return STATUS_OK;
    1458:	2300      	movs	r3, #0
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
    145a:	0749      	lsls	r1, r1, #29
    145c:	d530      	bpl.n	14c0 <spi_select_slave+0xec>

	/* Return value */
	enum status_code retval = STATUS_OK;

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    145e:	8b53      	ldrh	r3, [r2, #26]
    1460:	075b      	lsls	r3, r3, #29
    1462:	d503      	bpl.n	146c <spi_select_slave+0x98>
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg |= SERCOM_SPI_STATUS_BUFOVF;
    1464:	8b51      	ldrh	r1, [r2, #26]
    1466:	2304      	movs	r3, #4
    1468:	430b      	orrs	r3, r1
    146a:	8353      	strh	r3, [r2, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    146c:	7983      	ldrb	r3, [r0, #6]
    146e:	2b01      	cmp	r3, #1
    1470:	d102      	bne.n	1478 <spi_select_slave+0xa4>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    1472:	6a93      	ldr	r3, [r2, #40]	; 0x28
    1474:	2300      	movs	r3, #0
    1476:	e023      	b.n	14c0 <spi_select_slave+0xec>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    1478:	6a93      	ldr	r3, [r2, #40]	; 0x28
    147a:	2300      	movs	r3, #0
    147c:	e020      	b.n	14c0 <spi_select_slave+0xec>
					uint16_t flush = 0;
					spi_read(module, &flush);
				}
			} else {
				/* Drive Slave Select low */
				port_pin_set_output_level(slave->ss_pin, false);
    147e:	780b      	ldrb	r3, [r1, #0]
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports. */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    1480:	09d9      	lsrs	r1, r3, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
    1482:	2200      	movs	r2, #0
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports. */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    1484:	2900      	cmp	r1, #0
    1486:	d104      	bne.n	1492 <spi_select_slave+0xbe>
		return &(ports[port_index]->Group[group_index]);
    1488:	095a      	lsrs	r2, r3, #5
    148a:	01d2      	lsls	r2, r2, #7
    148c:	490d      	ldr	r1, [pc, #52]	; (14c4 <spi_select_slave+0xf0>)
    148e:	468c      	mov	ip, r1
    1490:	4462      	add	r2, ip
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    1492:	211f      	movs	r1, #31
    1494:	400b      	ands	r3, r1
    1496:	391e      	subs	r1, #30
    1498:	4099      	lsls	r1, r3

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
	} else {
		port_base->OUTCLR.reg = pin_mask;
    149a:	6151      	str	r1, [r2, #20]
		} else {
			/* Drive Slave Select high */
			port_pin_set_output_level(slave->ss_pin, true);
		}
	}
	return STATUS_OK;
    149c:	2300      	movs	r3, #0
    149e:	e00f      	b.n	14c0 <spi_select_slave+0xec>
				/* Drive Slave Select low */
				port_pin_set_output_level(slave->ss_pin, false);
			}
		} else {
			/* Drive Slave Select high */
			port_pin_set_output_level(slave->ss_pin, true);
    14a0:	780b      	ldrb	r3, [r1, #0]
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports. */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    14a2:	09d9      	lsrs	r1, r3, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
    14a4:	2200      	movs	r2, #0
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports. */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    14a6:	2900      	cmp	r1, #0
    14a8:	d104      	bne.n	14b4 <spi_select_slave+0xe0>
		return &(ports[port_index]->Group[group_index]);
    14aa:	095a      	lsrs	r2, r3, #5
    14ac:	01d2      	lsls	r2, r2, #7
    14ae:	4905      	ldr	r1, [pc, #20]	; (14c4 <spi_select_slave+0xf0>)
    14b0:	468c      	mov	ip, r1
    14b2:	4462      	add	r2, ip
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    14b4:	211f      	movs	r1, #31
    14b6:	400b      	ands	r3, r1
    14b8:	391e      	subs	r1, #30
    14ba:	4099      	lsls	r1, r3

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
    14bc:	6191      	str	r1, [r2, #24]
		}
	}
	return STATUS_OK;
    14be:	2300      	movs	r3, #0
}
    14c0:	1c18      	adds	r0, r3, #0
    14c2:	bd10      	pop	{r4, pc}
    14c4:	41004400 	.word	0x41004400

000014c8 <usart_init>:
 */
enum status_code usart_init(
		struct usart_module *const module,
		Sercom *const hw,
		const struct usart_config *const config)
{
    14c8:	b5f0      	push	{r4, r5, r6, r7, lr}
    14ca:	465f      	mov	r7, fp
    14cc:	4656      	mov	r6, sl
    14ce:	464d      	mov	r5, r9
    14d0:	4644      	mov	r4, r8
    14d2:	b4f0      	push	{r4, r5, r6, r7}
    14d4:	b091      	sub	sp, #68	; 0x44
    14d6:	1c05      	adds	r5, r0, #0
    14d8:	1c0c      	adds	r4, r1, #0
    14da:	1c16      	adds	r6, r2, #0
	Assert(config);

	enum status_code status_code = STATUS_OK;

	/* Assign module pointer to software instance struct */
	module->hw = hw;
    14dc:	6029      	str	r1, [r5, #0]

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    14de:	1c08      	adds	r0, r1, #0
    14e0:	4bbd      	ldr	r3, [pc, #756]	; (17d8 <usart_init+0x310>)
    14e2:	4798      	blx	r3
	uint32_t pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
    14e4:	6822      	ldr	r2, [r4, #0]
		/* The module is busy resetting itself */
		return STATUS_BUSY;
    14e6:	2305      	movs	r3, #5

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
	uint32_t pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
    14e8:	07d2      	lsls	r2, r2, #31
    14ea:	d500      	bpl.n	14ee <usart_init+0x26>
    14ec:	e16b      	b.n	17c6 <usart_init+0x2fe>
		/* The module is busy resetting itself */
		return STATUS_BUSY;
	}

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
    14ee:	6822      	ldr	r2, [r4, #0]
		/* Check the module is enabled */
		return STATUS_ERR_DENIED;
    14f0:	3317      	adds	r3, #23
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
		/* The module is busy resetting itself */
		return STATUS_BUSY;
	}

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
    14f2:	0792      	lsls	r2, r2, #30
    14f4:	d500      	bpl.n	14f8 <usart_init+0x30>
    14f6:	e166      	b.n	17c6 <usart_init+0x2fe>
    14f8:	49b8      	ldr	r1, [pc, #736]	; (17dc <usart_init+0x314>)
    14fa:	6a0a      	ldr	r2, [r1, #32]

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
	uint32_t pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
    14fc:	1c87      	adds	r7, r0, #2
		/* Check the module is enabled */
		return STATUS_ERR_DENIED;
	}

	/* Turn on module in PM */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    14fe:	3b1b      	subs	r3, #27
    1500:	40bb      	lsls	r3, r7
    1502:	4313      	orrs	r3, r2
    1504:	620b      	str	r3, [r1, #32]

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
	gclk_chan_conf.source_generator = config->generator_source;
    1506:	a90f      	add	r1, sp, #60	; 0x3c
    1508:	272d      	movs	r7, #45	; 0x2d
    150a:	5df3      	ldrb	r3, [r6, r7]
    150c:	700b      	strb	r3, [r1, #0]
	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
	uint32_t pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    150e:	3014      	adds	r0, #20

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
	gclk_chan_conf.source_generator = config->generator_source;
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    1510:	b2c3      	uxtb	r3, r0
    1512:	9303      	str	r3, [sp, #12]
    1514:	1c18      	adds	r0, r3, #0
    1516:	4bb2      	ldr	r3, [pc, #712]	; (17e0 <usart_init+0x318>)
    1518:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    151a:	9803      	ldr	r0, [sp, #12]
    151c:	4bb1      	ldr	r3, [pc, #708]	; (17e4 <usart_init+0x31c>)
    151e:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    1520:	5df0      	ldrb	r0, [r6, r7]
    1522:	2100      	movs	r1, #0
    1524:	4bb0      	ldr	r3, [pc, #704]	; (17e8 <usart_init+0x320>)
    1526:	4798      	blx	r3

	/* Set character size */
	module->character_size = config->character_size;
    1528:	7af3      	ldrb	r3, [r6, #11]
    152a:	716b      	strb	r3, [r5, #5]

	/* Set transmitter and receiver status */
	module->receiver_enabled = config->receiver_enable;
    152c:	2324      	movs	r3, #36	; 0x24
    152e:	5cf3      	ldrb	r3, [r6, r3]
    1530:	71ab      	strb	r3, [r5, #6]
	module->transmitter_enabled = config->transmitter_enable;
    1532:	2325      	movs	r3, #37	; 0x25
    1534:	5cf3      	ldrb	r3, [r6, r3]
    1536:	71eb      	strb	r3, [r5, #7]

#ifdef FEATURE_USART_LIN_SLAVE
	module->lin_slave_enabled = config->lin_slave_enable;
    1538:	7ef3      	ldrb	r3, [r6, #27]
    153a:	722b      	strb	r3, [r5, #8]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	module->start_frame_detection_enabled = config->start_frame_detection_enable;
    153c:	7f33      	ldrb	r3, [r6, #28]
    153e:	726b      	strb	r3, [r5, #9]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    1540:	682b      	ldr	r3, [r5, #0]
    1542:	469a      	mov	sl, r3

	/* Index for generic clock */
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    1544:	1c18      	adds	r0, r3, #0
    1546:	4ba4      	ldr	r3, [pc, #656]	; (17d8 <usart_init+0x310>)
    1548:	4798      	blx	r3
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    154a:	3014      	adds	r0, #20

	/* Cache new register values to minimize the number of register writes */
	uint32_t ctrla = 0;
	uint32_t ctrlb = 0;
	uint16_t baud  = 0;
    154c:	2200      	movs	r2, #0
    154e:	230e      	movs	r3, #14
    1550:	a906      	add	r1, sp, #24
    1552:	468c      	mov	ip, r1
    1554:	4463      	add	r3, ip
    1556:	801a      	strh	r2, [r3, #0]

	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;

#ifdef FEATURE_USART_OVER_SAMPLE
	switch (config->sample_rate) {
    1558:	8a33      	ldrh	r3, [r6, #16]
    155a:	4699      	mov	r9, r3
    155c:	2380      	movs	r3, #128	; 0x80
    155e:	01db      	lsls	r3, r3, #7
    1560:	4599      	cmp	r9, r3
    1562:	d019      	beq.n	1598 <usart_init+0xd0>
    1564:	d804      	bhi.n	1570 <usart_init+0xa8>
    1566:	2380      	movs	r3, #128	; 0x80
    1568:	019b      	lsls	r3, r3, #6
    156a:	4599      	cmp	r9, r3
    156c:	d00a      	beq.n	1584 <usart_init+0xbc>
    156e:	e10c      	b.n	178a <usart_init+0x2c2>
    1570:	23c0      	movs	r3, #192	; 0xc0
    1572:	01db      	lsls	r3, r3, #7
    1574:	4599      	cmp	r9, r3
    1576:	d00a      	beq.n	158e <usart_init+0xc6>
    1578:	2380      	movs	r3, #128	; 0x80
    157a:	021b      	lsls	r3, r3, #8
    157c:	4599      	cmp	r9, r3
    157e:	d100      	bne.n	1582 <usart_init+0xba>
    1580:	e108      	b.n	1794 <usart_init+0x2cc>
    1582:	e102      	b.n	178a <usart_init+0x2c2>
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
			break;
		case USART_SAMPLE_RATE_16X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    1584:	2310      	movs	r3, #16
    1586:	9306      	str	r3, [sp, #24]
		case USART_SAMPLE_RATE_3X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
			break;
		case USART_SAMPLE_RATE_16X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    1588:	3b0f      	subs	r3, #15
    158a:	9307      	str	r3, [sp, #28]
    158c:	e106      	b.n	179c <usart_init+0x2d4>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
			break;
		case USART_SAMPLE_RATE_8X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    158e:	2308      	movs	r3, #8
    1590:	9306      	str	r3, [sp, #24]
		case USART_SAMPLE_RATE_16X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
			break;
		case USART_SAMPLE_RATE_8X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    1592:	3b07      	subs	r3, #7
    1594:	9307      	str	r3, [sp, #28]
    1596:	e101      	b.n	179c <usart_init+0x2d4>
			break;
	}
#endif

	/* Set data order, internal muxing, and clock polarity */
	ctrla = (uint32_t)config->data_order |
    1598:	6833      	ldr	r3, [r6, #0]
    159a:	469b      	mov	fp, r3
		(uint32_t)config->mux_setting |
    159c:	68f3      	ldr	r3, [r6, #12]
    159e:	9303      	str	r3, [sp, #12]
	#ifdef FEATURE_USART_OVER_SAMPLE
		config->sample_adjustment |
    15a0:	6973      	ldr	r3, [r6, #20]
    15a2:	9304      	str	r3, [sp, #16]
		config->sample_rate |
	#endif
	#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    15a4:	7e33      	ldrb	r3, [r6, #24]
    15a6:	4698      	mov	r8, r3
	#endif
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    15a8:	2326      	movs	r3, #38	; 0x26
    15aa:	5cf3      	ldrb	r3, [r6, r3]
    15ac:	9305      	str	r3, [sp, #20]

	enum status_code status_code = STATUS_OK;

	/* Get baud value from mode and clock */
	switch (config->transfer_mode)
    15ae:	6873      	ldr	r3, [r6, #4]
    15b0:	2b00      	cmp	r3, #0
    15b2:	d015      	beq.n	15e0 <usart_init+0x118>
    15b4:	2280      	movs	r2, #128	; 0x80
    15b6:	0552      	lsls	r2, r2, #21
    15b8:	4293      	cmp	r3, r2
    15ba:	d136      	bne.n	162a <usart_init+0x162>
	{
		case USART_TRANSFER_SYNCHRONOUSLY:
			if (!config->use_external_clock) {
    15bc:	2327      	movs	r3, #39	; 0x27
    15be:	5cf3      	ldrb	r3, [r6, r3]
    15c0:	2b00      	cmp	r3, #0
    15c2:	d136      	bne.n	1632 <usart_init+0x16a>
				status_code = _sercom_get_sync_baud_val(config->baudrate,
    15c4:	6a33      	ldr	r3, [r6, #32]
    15c6:	1c1f      	adds	r7, r3, #0
    15c8:	b2c0      	uxtb	r0, r0
    15ca:	4b88      	ldr	r3, [pc, #544]	; (17ec <usart_init+0x324>)
    15cc:	4798      	blx	r3
    15ce:	1c01      	adds	r1, r0, #0
    15d0:	1c38      	adds	r0, r7, #0
    15d2:	220e      	movs	r2, #14
    15d4:	ab06      	add	r3, sp, #24
    15d6:	469c      	mov	ip, r3
    15d8:	4462      	add	r2, ip
    15da:	4b85      	ldr	r3, [pc, #532]	; (17f0 <usart_init+0x328>)
    15dc:	4798      	blx	r3
    15de:	e025      	b.n	162c <usart_init+0x164>
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
			break;
		case USART_SAMPLE_RATE_8X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    15e0:	2308      	movs	r3, #8
    15e2:	9306      	str	r3, [sp, #24]
		case USART_SAMPLE_RATE_16X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
			break;
		case USART_SAMPLE_RATE_8X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    15e4:	2300      	movs	r3, #0
    15e6:	9307      	str	r3, [sp, #28]
			}

			break;

		case USART_TRANSFER_ASYNCHRONOUSLY:
			if (config->use_external_clock) {
    15e8:	2327      	movs	r3, #39	; 0x27
    15ea:	5cf3      	ldrb	r3, [r6, r3]
    15ec:	2b00      	cmp	r3, #0
    15ee:	d00b      	beq.n	1608 <usart_init+0x140>
				status_code =
    15f0:	9b06      	ldr	r3, [sp, #24]
    15f2:	9300      	str	r3, [sp, #0]
    15f4:	6a30      	ldr	r0, [r6, #32]
    15f6:	6ab1      	ldr	r1, [r6, #40]	; 0x28
    15f8:	220e      	movs	r2, #14
    15fa:	ab06      	add	r3, sp, #24
    15fc:	469c      	mov	ip, r3
    15fe:	4462      	add	r2, ip
    1600:	9b07      	ldr	r3, [sp, #28]
    1602:	4f7c      	ldr	r7, [pc, #496]	; (17f4 <usart_init+0x32c>)
    1604:	47b8      	blx	r7
    1606:	e011      	b.n	162c <usart_init+0x164>
						_sercom_get_async_baud_val(config->baudrate,
							config->ext_clock_freq, &baud, mode, sample_num);
			} else {
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
    1608:	6a33      	ldr	r3, [r6, #32]
    160a:	1c1f      	adds	r7, r3, #0
    160c:	b2c0      	uxtb	r0, r0
    160e:	4b77      	ldr	r3, [pc, #476]	; (17ec <usart_init+0x324>)
    1610:	4798      	blx	r3
    1612:	1c01      	adds	r1, r0, #0
			if (config->use_external_clock) {
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
							config->ext_clock_freq, &baud, mode, sample_num);
			} else {
				status_code =
    1614:	9b06      	ldr	r3, [sp, #24]
    1616:	9300      	str	r3, [sp, #0]
    1618:	1c38      	adds	r0, r7, #0
    161a:	220e      	movs	r2, #14
    161c:	ab06      	add	r3, sp, #24
    161e:	469c      	mov	ip, r3
    1620:	4462      	add	r2, ip
    1622:	9b07      	ldr	r3, [sp, #28]
    1624:	4f73      	ldr	r7, [pc, #460]	; (17f4 <usart_init+0x32c>)
    1626:	47b8      	blx	r7
    1628:	e000      	b.n	162c <usart_init+0x164>
	#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
	#endif
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);

	enum status_code status_code = STATUS_OK;
    162a:	2000      	movs	r0, #0
    162c:	1e03      	subs	r3, r0, #0

			break;
	}

	/* Check if calculating the baudrate failed */
	if (status_code != STATUS_OK) {
    162e:	d000      	beq.n	1632 <usart_init+0x16a>
    1630:	e0c9      	b.n	17c6 <usart_init+0x2fe>
		/* Abort */
		return status_code;
	}

#ifdef FEATURE_USART_IRDA
	if(config->encoding_format_enable) {
    1632:	7e73      	ldrb	r3, [r6, #25]
    1634:	2b00      	cmp	r3, #0
    1636:	d002      	beq.n	163e <usart_init+0x176>
		usart_hw->RXPL.reg = config->receive_pulse_length;
    1638:	7eb3      	ldrb	r3, [r6, #26]
    163a:	4652      	mov	r2, sl
    163c:	7393      	strb	r3, [r2, #14]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
    163e:	682a      	ldr	r2, [r5, #0]
    1640:	9f05      	ldr	r7, [sp, #20]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    1642:	69d3      	ldr	r3, [r2, #28]
		const struct usart_module *const module)
{
	/* Sanity check. */
	Assert(module);

	while (usart_is_syncing(module)) {
    1644:	2b00      	cmp	r3, #0
    1646:	d1fc      	bne.n	1642 <usart_init+0x17a>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/*Set baud val */
	usart_hw->BAUD.reg = baud;
    1648:	330e      	adds	r3, #14
    164a:	aa06      	add	r2, sp, #24
    164c:	4694      	mov	ip, r2
    164e:	4463      	add	r3, ip
    1650:	881b      	ldrh	r3, [r3, #0]
    1652:	4652      	mov	r2, sl
    1654:	8193      	strh	r3, [r2, #12]
    1656:	9b03      	ldr	r3, [sp, #12]
    1658:	465a      	mov	r2, fp
    165a:	4313      	orrs	r3, r2
    165c:	9a04      	ldr	r2, [sp, #16]
    165e:	4313      	orrs	r3, r2
    1660:	6872      	ldr	r2, [r6, #4]
    1662:	4313      	orrs	r3, r2
    1664:	464a      	mov	r2, r9
    1666:	4313      	orrs	r3, r2
	#ifdef FEATURE_USART_OVER_SAMPLE
		config->sample_adjustment |
		config->sample_rate |
	#endif
	#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    1668:	4642      	mov	r2, r8
    166a:	0212      	lsls	r2, r2, #8
    166c:	4313      	orrs	r3, r2
	#endif
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    166e:	077f      	lsls	r7, r7, #29

	/*Set baud val */
	usart_hw->BAUD.reg = baud;

	/* Set sample mode */
	ctrla |= config->transfer_mode;
    1670:	431f      	orrs	r7, r3

	if (config->use_external_clock == false) {
    1672:	2327      	movs	r3, #39	; 0x27
    1674:	5cf3      	ldrb	r3, [r6, r3]
    1676:	2b00      	cmp	r3, #0
    1678:	d101      	bne.n	167e <usart_init+0x1b6>
		ctrla |= SERCOM_USART_CTRLA_MODE_USART_INT_CLK;
    167a:	3304      	adds	r3, #4
    167c:	431f      	orrs	r7, r3
	}

	/* Set stopbits, character size and enable transceivers */
	ctrlb = (uint32_t)config->stopbits | (uint32_t)config->character_size |
		#ifdef FEATURE_USART_IRDA
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    167e:	7e71      	ldrb	r1, [r6, #25]
    1680:	0289      	lsls	r1, r1, #10
		#endif
		#ifdef FEATURE_USART_START_FRAME_DECTION
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    1682:	7f33      	ldrb	r3, [r6, #28]
    1684:	025b      	lsls	r3, r3, #9
    1686:	4319      	orrs	r1, r3
	else {
		ctrla |= SERCOM_USART_CTRLA_MODE_USART_EXT_CLK;
	}

	/* Set stopbits, character size and enable transceivers */
	ctrlb = (uint32_t)config->stopbits | (uint32_t)config->character_size |
    1688:	7af3      	ldrb	r3, [r6, #11]
    168a:	7ab2      	ldrb	r2, [r6, #10]
    168c:	4313      	orrs	r3, r2
		#ifdef FEATURE_USART_IRDA
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    168e:	4319      	orrs	r1, r3
		#endif
		#ifdef FEATURE_USART_START_FRAME_DECTION
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
		#endif
		#ifdef FEATURE_USART_COLLISION_DECTION
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    1690:	7f72      	ldrb	r2, [r6, #29]
    1692:	0212      	lsls	r2, r2, #8
	ctrlb = (uint32_t)config->stopbits | (uint32_t)config->character_size |
		#ifdef FEATURE_USART_IRDA
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
		#endif
		#ifdef FEATURE_USART_START_FRAME_DECTION
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    1694:	4311      	orrs	r1, r2
		#endif
		#ifdef FEATURE_USART_COLLISION_DECTION
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
		#endif
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    1696:	2324      	movs	r3, #36	; 0x24
    1698:	5cf2      	ldrb	r2, [r6, r3]
    169a:	0452      	lsls	r2, r2, #17
		#endif
		#ifdef FEATURE_USART_START_FRAME_DECTION
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
		#endif
		#ifdef FEATURE_USART_COLLISION_DECTION
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    169c:	1c0b      	adds	r3, r1, #0
    169e:	4313      	orrs	r3, r2
		#endif
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);
    16a0:	2225      	movs	r2, #37	; 0x25
    16a2:	5cb1      	ldrb	r1, [r6, r2]
    16a4:	0409      	lsls	r1, r1, #16
	else {
		ctrla |= SERCOM_USART_CTRLA_MODE_USART_EXT_CLK;
	}

	/* Set stopbits, character size and enable transceivers */
	ctrlb = (uint32_t)config->stopbits | (uint32_t)config->character_size |
    16a6:	4319      	orrs	r1, r3
		#endif
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);

	/* Check parity mode bits */
	if (config->parity != USART_PARITY_NONE) {
    16a8:	8933      	ldrh	r3, [r6, #8]
    16aa:	2bff      	cmp	r3, #255	; 0xff
    16ac:	d00b      	beq.n	16c6 <usart_init+0x1fe>
#ifdef FEATURE_USART_LIN_SLAVE
		if(config->lin_slave_enable) {
    16ae:	7ef2      	ldrb	r2, [r6, #27]
    16b0:	2a00      	cmp	r2, #0
    16b2:	d003      	beq.n	16bc <usart_init+0x1f4>
			ctrla |= SERCOM_USART_CTRLA_FORM(0x5);
    16b4:	22a0      	movs	r2, #160	; 0xa0
    16b6:	04d2      	lsls	r2, r2, #19
    16b8:	4317      	orrs	r7, r2
    16ba:	e002      	b.n	16c2 <usart_init+0x1fa>
		} else {
			ctrla |= SERCOM_USART_CTRLA_FORM(1);
    16bc:	2280      	movs	r2, #128	; 0x80
    16be:	0452      	lsls	r2, r2, #17
    16c0:	4317      	orrs	r7, r2
		}
#else
		ctrla |= SERCOM_USART_CTRLA_FORM(1);
#endif
		ctrlb |= config->parity;
    16c2:	4319      	orrs	r1, r3
    16c4:	e005      	b.n	16d2 <usart_init+0x20a>
	} else {
#ifdef FEATURE_USART_LIN_SLAVE
		if(config->lin_slave_enable) {
    16c6:	7ef3      	ldrb	r3, [r6, #27]
    16c8:	2b00      	cmp	r3, #0
    16ca:	d002      	beq.n	16d2 <usart_init+0x20a>
			ctrla |= SERCOM_USART_CTRLA_FORM(0x4);
    16cc:	2380      	movs	r3, #128	; 0x80
    16ce:	04db      	lsls	r3, r3, #19
    16d0:	431f      	orrs	r7, r3
		ctrla |= SERCOM_USART_CTRLA_FORM(0);
#endif
	}

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
    16d2:	232c      	movs	r3, #44	; 0x2c
    16d4:	5cf3      	ldrb	r3, [r6, r3]
    16d6:	2b00      	cmp	r3, #0
    16d8:	d103      	bne.n	16e2 <usart_init+0x21a>
    16da:	4b47      	ldr	r3, [pc, #284]	; (17f8 <usart_init+0x330>)
    16dc:	789b      	ldrb	r3, [r3, #2]
    16de:	079b      	lsls	r3, r3, #30
    16e0:	d501      	bpl.n	16e6 <usart_init+0x21e>
		ctrla |= SERCOM_USART_CTRLA_RUNSTDBY;
    16e2:	2380      	movs	r3, #128	; 0x80
    16e4:	431f      	orrs	r7, r3
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
    16e6:	682a      	ldr	r2, [r5, #0]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    16e8:	69d3      	ldr	r3, [r2, #28]
		const struct usart_module *const module)
{
	/* Sanity check. */
	Assert(module);

	while (usart_is_syncing(module)) {
    16ea:	2b00      	cmp	r3, #0
    16ec:	d1fc      	bne.n	16e8 <usart_init+0x220>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Write configuration to CTRLB */
	usart_hw->CTRLB.reg = ctrlb;
    16ee:	4653      	mov	r3, sl
    16f0:	6059      	str	r1, [r3, #4]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
    16f2:	682a      	ldr	r2, [r5, #0]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    16f4:	69d3      	ldr	r3, [r2, #28]
		const struct usart_module *const module)
{
	/* Sanity check. */
	Assert(module);

	while (usart_is_syncing(module)) {
    16f6:	2b00      	cmp	r3, #0
    16f8:	d1fc      	bne.n	16f4 <usart_init+0x22c>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Write configuration to CTRLA */
	usart_hw->CTRLA.reg = ctrla;
    16fa:	4653      	mov	r3, sl
    16fc:	601f      	str	r7, [r3, #0]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
    16fe:	ab0e      	add	r3, sp, #56	; 0x38
    1700:	2280      	movs	r2, #128	; 0x80
    1702:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    1704:	2200      	movs	r2, #0
    1706:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
	config->powersave    = false;
    1708:	70da      	strb	r2, [r3, #3]
	}

	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    170a:	709a      	strb	r2, [r3, #2]

	uint32_t pad_pinmuxes[] = {
    170c:	6b33      	ldr	r3, [r6, #48]	; 0x30
    170e:	930a      	str	r3, [sp, #40]	; 0x28
    1710:	6b73      	ldr	r3, [r6, #52]	; 0x34
    1712:	930b      	str	r3, [sp, #44]	; 0x2c
    1714:	6bb3      	ldr	r3, [r6, #56]	; 0x38
    1716:	930c      	str	r3, [sp, #48]	; 0x30
    1718:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
    171a:	9303      	str	r3, [sp, #12]
    171c:	930d      	str	r3, [sp, #52]	; 0x34
    171e:	2700      	movs	r7, #0
		if (current_pinmux == PINMUX_DEFAULT) {
			current_pinmux = _sercom_get_default_pad(hw, pad);
		}

		if (current_pinmux != PINMUX_UNUSED) {
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    1720:	ae0e      	add	r6, sp, #56	; 0x38
    1722:	b2f9      	uxtb	r1, r7
    1724:	00bb      	lsls	r3, r7, #2
			config->pinmux_pad2, config->pinmux_pad3
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
		uint32_t current_pinmux = pad_pinmuxes[pad];
    1726:	aa0a      	add	r2, sp, #40	; 0x28
    1728:	5898      	ldr	r0, [r3, r2]

		if (current_pinmux == PINMUX_DEFAULT) {
    172a:	2800      	cmp	r0, #0
    172c:	d102      	bne.n	1734 <usart_init+0x26c>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    172e:	1c20      	adds	r0, r4, #0
    1730:	4b32      	ldr	r3, [pc, #200]	; (17fc <usart_init+0x334>)
    1732:	4798      	blx	r3
		}

		if (current_pinmux != PINMUX_UNUSED) {
    1734:	1c43      	adds	r3, r0, #1
    1736:	d005      	beq.n	1744 <usart_init+0x27c>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    1738:	7030      	strb	r0, [r6, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    173a:	0c00      	lsrs	r0, r0, #16
    173c:	b2c0      	uxtb	r0, r0
    173e:	1c31      	adds	r1, r6, #0
    1740:	4b2f      	ldr	r3, [pc, #188]	; (1800 <usart_init+0x338>)
    1742:	4798      	blx	r3
    1744:	3701      	adds	r7, #1
			config->pinmux_pad0, config->pinmux_pad1,
			config->pinmux_pad2, config->pinmux_pad3
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
    1746:	2f04      	cmp	r7, #4
    1748:	d1eb      	bne.n	1722 <usart_init+0x25a>
	}

#if USART_CALLBACK_MODE == true
	/* Initialize parameters */
	for (uint32_t i = 0; i < USART_CALLBACK_N; i++) {
		module->callback[i]            = NULL;
    174a:	2300      	movs	r3, #0
    174c:	60eb      	str	r3, [r5, #12]
    174e:	612b      	str	r3, [r5, #16]
    1750:	616b      	str	r3, [r5, #20]
    1752:	61ab      	str	r3, [r5, #24]
    1754:	61eb      	str	r3, [r5, #28]
    1756:	622b      	str	r3, [r5, #32]
	}

	module->tx_buffer_ptr              = NULL;
    1758:	62ab      	str	r3, [r5, #40]	; 0x28
	module->rx_buffer_ptr              = NULL;
    175a:	626b      	str	r3, [r5, #36]	; 0x24
	module->remaining_tx_buffer_length = 0x0000;
    175c:	2200      	movs	r2, #0
    175e:	85eb      	strh	r3, [r5, #46]	; 0x2e
	module->remaining_rx_buffer_length = 0x0000;
    1760:	85ab      	strh	r3, [r5, #44]	; 0x2c
	module->callback_reg_mask          = 0x00;
    1762:	3330      	adds	r3, #48	; 0x30
    1764:	54ea      	strb	r2, [r5, r3]
	module->callback_enable_mask       = 0x00;
    1766:	3301      	adds	r3, #1
    1768:	54ea      	strb	r2, [r5, r3]
	module->rx_status                  = STATUS_OK;
    176a:	3301      	adds	r3, #1
    176c:	54ea      	strb	r2, [r5, r3]
	module->tx_status                  = STATUS_OK;
    176e:	3301      	adds	r3, #1
    1770:	54ea      	strb	r2, [r5, r3]

	/* Set interrupt handler and register USART software module struct in
	 * look-up table */
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
    1772:	6828      	ldr	r0, [r5, #0]
    1774:	4b18      	ldr	r3, [pc, #96]	; (17d8 <usart_init+0x310>)
    1776:	4798      	blx	r3
    1778:	1c04      	adds	r4, r0, #0
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
    177a:	4922      	ldr	r1, [pc, #136]	; (1804 <usart_init+0x33c>)
    177c:	4b22      	ldr	r3, [pc, #136]	; (1808 <usart_init+0x340>)
    177e:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
    1780:	00a4      	lsls	r4, r4, #2
    1782:	4b22      	ldr	r3, [pc, #136]	; (180c <usart_init+0x344>)
    1784:	50e5      	str	r5, [r4, r3]
#endif

	return status_code;
    1786:	2300      	movs	r3, #0
    1788:	e01d      	b.n	17c6 <usart_init+0x2fe>
	uint32_t ctrla = 0;
	uint32_t ctrlb = 0;
	uint16_t baud  = 0;

	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    178a:	2310      	movs	r3, #16
    178c:	9306      	str	r3, [sp, #24]
	/* Cache new register values to minimize the number of register writes */
	uint32_t ctrla = 0;
	uint32_t ctrlb = 0;
	uint16_t baud  = 0;

	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    178e:	2300      	movs	r3, #0
    1790:	9307      	str	r3, [sp, #28]
    1792:	e003      	b.n	179c <usart_init+0x2d4>
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
			break;
		case USART_SAMPLE_RATE_3X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
    1794:	2303      	movs	r3, #3
    1796:	9306      	str	r3, [sp, #24]
		case USART_SAMPLE_RATE_8X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
			break;
		case USART_SAMPLE_RATE_3X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    1798:	2300      	movs	r3, #0
    179a:	9307      	str	r3, [sp, #28]
			break;
	}
#endif

	/* Set data order, internal muxing, and clock polarity */
	ctrla = (uint32_t)config->data_order |
    179c:	6833      	ldr	r3, [r6, #0]
    179e:	469b      	mov	fp, r3
		(uint32_t)config->mux_setting |
    17a0:	68f3      	ldr	r3, [r6, #12]
    17a2:	9303      	str	r3, [sp, #12]
	#ifdef FEATURE_USART_OVER_SAMPLE
		config->sample_adjustment |
    17a4:	6973      	ldr	r3, [r6, #20]
    17a6:	9304      	str	r3, [sp, #16]
		config->sample_rate |
	#endif
	#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    17a8:	7e33      	ldrb	r3, [r6, #24]
    17aa:	4698      	mov	r8, r3
	#endif
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    17ac:	2326      	movs	r3, #38	; 0x26
    17ae:	5cf3      	ldrb	r3, [r6, r3]
    17b0:	9305      	str	r3, [sp, #20]

	enum status_code status_code = STATUS_OK;

	/* Get baud value from mode and clock */
	switch (config->transfer_mode)
    17b2:	6873      	ldr	r3, [r6, #4]
    17b4:	2b00      	cmp	r3, #0
    17b6:	d100      	bne.n	17ba <usart_init+0x2f2>
    17b8:	e716      	b.n	15e8 <usart_init+0x120>
    17ba:	2280      	movs	r2, #128	; 0x80
    17bc:	0552      	lsls	r2, r2, #21
    17be:	4293      	cmp	r3, r2
    17c0:	d100      	bne.n	17c4 <usart_init+0x2fc>
    17c2:	e6fb      	b.n	15bc <usart_init+0xf4>
    17c4:	e735      	b.n	1632 <usart_init+0x16a>
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
	_sercom_instances[instance_index] = module;
#endif

	return status_code;
}
    17c6:	1c18      	adds	r0, r3, #0
    17c8:	b011      	add	sp, #68	; 0x44
    17ca:	bc3c      	pop	{r2, r3, r4, r5}
    17cc:	4690      	mov	r8, r2
    17ce:	4699      	mov	r9, r3
    17d0:	46a2      	mov	sl, r4
    17d2:	46ab      	mov	fp, r5
    17d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    17d6:	46c0      	nop			; (mov r8, r8)
    17d8:	0000101d 	.word	0x0000101d
    17dc:	40000400 	.word	0x40000400
    17e0:	0000218d 	.word	0x0000218d
    17e4:	00002101 	.word	0x00002101
    17e8:	00000e49 	.word	0x00000e49
    17ec:	000021a9 	.word	0x000021a9
    17f0:	00000c59 	.word	0x00000c59
    17f4:	00000c81 	.word	0x00000c81
    17f8:	41002000 	.word	0x41002000
    17fc:	00000e95 	.word	0x00000e95
    1800:	000022dd 	.word	0x000022dd
    1804:	00001955 	.word	0x00001955
    1808:	0000105d 	.word	0x0000105d
    180c:	20002ad0 	.word	0x20002ad0

00001810 <usart_write_wait>:
 * \retval STATUS_ERR_DENIED If the transmitter is not enabled
 */
enum status_code usart_write_wait(
		struct usart_module *const module,
		const uint16_t tx_data)
{
    1810:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    1812:	6803      	ldr	r3, [r0, #0]

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
    1814:	79c4      	ldrb	r4, [r0, #7]
		return STATUS_ERR_DENIED;
    1816:	221c      	movs	r2, #28

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
    1818:	2c00      	cmp	r4, #0
    181a:	d00d      	beq.n	1838 <usart_write_wait+0x28>
		return STATUS_ERR_DENIED;
	}

#if USART_CALLBACK_MODE == true
	/* Check if the USART is busy doing asynchronous operation. */
	if (module->remaining_tx_buffer_length > 0) {
    181c:	8dc0      	ldrh	r0, [r0, #46]	; 0x2e
    181e:	b280      	uxth	r0, r0
		return STATUS_BUSY;
    1820:	3a17      	subs	r2, #23
		return STATUS_ERR_DENIED;
	}

#if USART_CALLBACK_MODE == true
	/* Check if the USART is busy doing asynchronous operation. */
	if (module->remaining_tx_buffer_length > 0) {
    1822:	2800      	cmp	r0, #0
    1824:	d108      	bne.n	1838 <usart_write_wait+0x28>
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    1826:	69da      	ldr	r2, [r3, #28]
		const struct usart_module *const module)
{
	/* Sanity check. */
	Assert(module);

	while (usart_is_syncing(module)) {
    1828:	2a00      	cmp	r2, #0
    182a:	d1fc      	bne.n	1826 <usart_write_wait+0x16>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Write data to USART module */
	usart_hw->DATA.reg = tx_data;
    182c:	8519      	strh	r1, [r3, #40]	; 0x28

	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
    182e:	2102      	movs	r1, #2
    1830:	7e1a      	ldrb	r2, [r3, #24]
    1832:	420a      	tst	r2, r1
    1834:	d0fc      	beq.n	1830 <usart_write_wait+0x20>
		/* Wait until data is sent */
	}

	return STATUS_OK;
    1836:	2200      	movs	r2, #0
}
    1838:	1c10      	adds	r0, r2, #0
    183a:	bd10      	pop	{r4, pc}

0000183c <usart_read_wait>:
 * \retval STATUS_ERR_DENIED        If the receiver is not enabled
 */
enum status_code usart_read_wait(
		struct usart_module *const module,
		uint16_t *const rx_data)
{
    183c:	b510      	push	{r4, lr}

	/* Error variable */
	uint8_t error_code;

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    183e:	6804      	ldr	r4, [r0, #0]

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
    1840:	7982      	ldrb	r2, [r0, #6]
		return STATUS_ERR_DENIED;
    1842:	231c      	movs	r3, #28

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
    1844:	2a00      	cmp	r2, #0
    1846:	d033      	beq.n	18b0 <usart_read_wait+0x74>
		return STATUS_ERR_DENIED;
	}

#if USART_CALLBACK_MODE == true
	/* Check if the USART is busy doing asynchronous operation. */
	if (module->remaining_rx_buffer_length > 0) {
    1848:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
    184a:	b292      	uxth	r2, r2
		return STATUS_BUSY;
    184c:	3b17      	subs	r3, #23
		return STATUS_ERR_DENIED;
	}

#if USART_CALLBACK_MODE == true
	/* Check if the USART is busy doing asynchronous operation. */
	if (module->remaining_rx_buffer_length > 0) {
    184e:	2a00      	cmp	r2, #0
    1850:	d12e      	bne.n	18b0 <usart_read_wait+0x74>
		return STATUS_BUSY;
	}
#endif

	/* Check if USART has new data */
	if (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_RXC)) {
    1852:	7e22      	ldrb	r2, [r4, #24]
    1854:	0752      	lsls	r2, r2, #29
    1856:	d52b      	bpl.n	18b0 <usart_read_wait+0x74>
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    1858:	69e3      	ldr	r3, [r4, #28]
		const struct usart_module *const module)
{
	/* Sanity check. */
	Assert(module);

	while (usart_is_syncing(module)) {
    185a:	2b00      	cmp	r3, #0
    185c:	d1fc      	bne.n	1858 <usart_read_wait+0x1c>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Read out the status code and mask away all but the 3 LSBs*/
	error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    185e:	8b63      	ldrh	r3, [r4, #26]
    1860:	b2db      	uxtb	r3, r3

	/* Check if an error has occurred during the receiving */
	if (error_code) {
    1862:	069a      	lsls	r2, r3, #26
    1864:	d021      	beq.n	18aa <usart_read_wait+0x6e>
		/* Check which error occurred */
		if (error_code & SERCOM_USART_STATUS_FERR) {
    1866:	079a      	lsls	r2, r3, #30
    1868:	d503      	bpl.n	1872 <usart_read_wait+0x36>
			/* Clear flag by writing a 1 to it and
			 * return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    186a:	2302      	movs	r3, #2
    186c:	8363      	strh	r3, [r4, #26]

			return STATUS_ERR_BAD_FORMAT;
    186e:	3318      	adds	r3, #24
    1870:	e01e      	b.n	18b0 <usart_read_wait+0x74>
		} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    1872:	075a      	lsls	r2, r3, #29
    1874:	d503      	bpl.n	187e <usart_read_wait+0x42>
			/* Clear flag by writing a 1 to it and
			 * return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    1876:	2304      	movs	r3, #4
    1878:	8363      	strh	r3, [r4, #26]

			return STATUS_ERR_OVERFLOW;
    187a:	331a      	adds	r3, #26
    187c:	e018      	b.n	18b0 <usart_read_wait+0x74>
		} else if (error_code & SERCOM_USART_STATUS_PERR) {
    187e:	07da      	lsls	r2, r3, #31
    1880:	d503      	bpl.n	188a <usart_read_wait+0x4e>
			/* Clear flag by writing a 1 to it and
			 * return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    1882:	2301      	movs	r3, #1
    1884:	8363      	strh	r3, [r4, #26]

			return STATUS_ERR_BAD_DATA;
    1886:	3312      	adds	r3, #18
    1888:	e012      	b.n	18b0 <usart_read_wait+0x74>
		}
#ifdef FEATURE_USART_LIN_SLAVE
		else if (error_code & SERCOM_USART_STATUS_ISF) {
    188a:	06da      	lsls	r2, r3, #27
    188c:	d505      	bpl.n	189a <usart_read_wait+0x5e>
			/* Clear flag by writing 1 to it  and
			 *  return with an error code */
			usart_hw->STATUS.reg |= SERCOM_USART_STATUS_ISF;
    188e:	8b62      	ldrh	r2, [r4, #26]
    1890:	2310      	movs	r3, #16
    1892:	4313      	orrs	r3, r2
    1894:	8363      	strh	r3, [r4, #26]

			return STATUS_ERR_PROTOCOL;
    1896:	2342      	movs	r3, #66	; 0x42
    1898:	e00a      	b.n	18b0 <usart_read_wait+0x74>
		}
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
		else if (error_code & SERCOM_USART_STATUS_COLL) {
    189a:	069b      	lsls	r3, r3, #26
    189c:	d505      	bpl.n	18aa <usart_read_wait+0x6e>
			/* Clear flag by writing 1 to it
			 *  return with an error code */
			usart_hw->STATUS.reg |= SERCOM_USART_STATUS_COLL;
    189e:	8b62      	ldrh	r2, [r4, #26]
    18a0:	2320      	movs	r3, #32
    18a2:	4313      	orrs	r3, r2
    18a4:	8363      	strh	r3, [r4, #26]

			return STATUS_ERR_PACKET_COLLISION;
    18a6:	2341      	movs	r3, #65	; 0x41
    18a8:	e002      	b.n	18b0 <usart_read_wait+0x74>
		}
#endif
	}

	/* Read data from USART module */
	*rx_data = usart_hw->DATA.reg;
    18aa:	8d23      	ldrh	r3, [r4, #40]	; 0x28
    18ac:	800b      	strh	r3, [r1, #0]

	return STATUS_OK;
    18ae:	2300      	movs	r3, #0
}
    18b0:	1c18      	adds	r0, r3, #0
    18b2:	bd10      	pop	{r4, pc}

000018b4 <usart_read_buffer_wait>:
 */
enum status_code usart_read_buffer_wait(
		struct usart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
    18b4:	b5f0      	push	{r4, r5, r6, r7, lr}
    18b6:	4657      	mov	r7, sl
    18b8:	464e      	mov	r6, r9
    18ba:	b4c0      	push	{r6, r7}
    18bc:	b083      	sub	sp, #12
	Assert(module);
	Assert(module->hw);

	/* Check if the buffer length is valid */
	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
    18be:	2317      	movs	r3, #23
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Check if the buffer length is valid */
	if (length == 0) {
    18c0:	2a00      	cmp	r2, #0
    18c2:	d03c      	beq.n	193e <usart_read_buffer_wait+0x8a>
		return STATUS_ERR_INVALID_ARG;
	}

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
    18c4:	7984      	ldrb	r4, [r0, #6]
		return STATUS_ERR_DENIED;
    18c6:	3305      	adds	r3, #5
	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
	}

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
    18c8:	2c00      	cmp	r4, #0
    18ca:	d038      	beq.n	193e <usart_read_buffer_wait+0x8a>
    18cc:	468a      	mov	sl, r1
    18ce:	4681      	mov	r9, r0
		return STATUS_ERR_DENIED;
	}

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    18d0:	6805      	ldr	r5, [r0, #0]
    18d2:	1c17      	adds	r7, r2, #0
    18d4:	2600      	movs	r6, #0
	/* Blocks while buffer is being received */
	while (length--) {
		/* Wait for the USART to have new data and abort operation if it
		 * doesn't get ready within the timeout*/
		for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
			if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_RXC) {
    18d6:	2404      	movs	r4, #4
    18d8:	e02c      	b.n	1934 <usart_read_buffer_wait+0x80>
    18da:	7e2a      	ldrb	r2, [r5, #24]
    18dc:	4222      	tst	r2, r4
    18de:	d104      	bne.n	18ea <usart_read_buffer_wait+0x36>
				break;
			} else if (i == USART_TIMEOUT) {
    18e0:	2b01      	cmp	r3, #1
    18e2:	d023      	beq.n	192c <usart_read_buffer_wait+0x78>
    18e4:	3b01      	subs	r3, #1

	/* Blocks while buffer is being received */
	while (length--) {
		/* Wait for the USART to have new data and abort operation if it
		 * doesn't get ready within the timeout*/
		for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
    18e6:	2b00      	cmp	r3, #0
    18e8:	d1f7      	bne.n	18da <usart_read_buffer_wait+0x26>
				return STATUS_ERR_TIMEOUT;
			}
		}

		enum status_code retval;
		uint16_t received_data = 0;
    18ea:	466b      	mov	r3, sp
    18ec:	1d99      	adds	r1, r3, #6
    18ee:	2300      	movs	r3, #0
    18f0:	800b      	strh	r3, [r1, #0]

		retval = usart_read_wait(module, &received_data);
    18f2:	4648      	mov	r0, r9
    18f4:	4b15      	ldr	r3, [pc, #84]	; (194c <usart_read_buffer_wait+0x98>)
    18f6:	4798      	blx	r3

		if (retval != STATUS_OK) {
    18f8:	2800      	cmp	r0, #0
    18fa:	d119      	bne.n	1930 <usart_read_buffer_wait+0x7c>
			/* Overflow, abort */
			return retval;
		}

		/* Read value will be at least 8-bits long */
		rx_data[rx_pos++] = received_data;
    18fc:	1c73      	adds	r3, r6, #1
    18fe:	b299      	uxth	r1, r3
    1900:	466b      	mov	r3, sp
    1902:	3306      	adds	r3, #6
    1904:	881b      	ldrh	r3, [r3, #0]
    1906:	4652      	mov	r2, sl
    1908:	5593      	strb	r3, [r2, r6]

		/* If 9-bit data, write next received byte to the buffer */
		if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    190a:	464a      	mov	r2, r9
    190c:	7952      	ldrb	r2, [r2, #5]
    190e:	2a01      	cmp	r2, #1
    1910:	d105      	bne.n	191e <usart_read_buffer_wait+0x6a>
			rx_data[rx_pos++] = (received_data >> 8);
    1912:	1cb2      	adds	r2, r6, #2
    1914:	b296      	uxth	r6, r2
    1916:	0a1b      	lsrs	r3, r3, #8
    1918:	4652      	mov	r2, sl
    191a:	5453      	strb	r3, [r2, r1]
    191c:	e000      	b.n	1920 <usart_read_buffer_wait+0x6c>
			/* Overflow, abort */
			return retval;
		}

		/* Read value will be at least 8-bits long */
		rx_data[rx_pos++] = received_data;
    191e:	1c0e      	adds	r6, r1, #0
    1920:	1e7a      	subs	r2, r7, #1
    1922:	b297      	uxth	r7, r2
	SercomUsart *const usart_hw = &(module->hw->USART);

	uint16_t rx_pos = 0;

	/* Blocks while buffer is being received */
	while (length--) {
    1924:	2f00      	cmp	r7, #0
    1926:	d105      	bne.n	1934 <usart_read_buffer_wait+0x80>
		if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
			rx_data[rx_pos++] = (received_data >> 8);
		}
	}

	return STATUS_OK;
    1928:	2300      	movs	r3, #0
    192a:	e008      	b.n	193e <usart_read_buffer_wait+0x8a>
		 * doesn't get ready within the timeout*/
		for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
			if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_RXC) {
				break;
			} else if (i == USART_TIMEOUT) {
				return STATUS_ERR_TIMEOUT;
    192c:	2312      	movs	r3, #18
    192e:	e006      	b.n	193e <usart_read_buffer_wait+0x8a>
		}

		enum status_code retval;
		uint16_t received_data = 0;

		retval = usart_read_wait(module, &received_data);
    1930:	1c03      	adds	r3, r0, #0
    1932:	e004      	b.n	193e <usart_read_buffer_wait+0x8a>
	/* Blocks while buffer is being received */
	while (length--) {
		/* Wait for the USART to have new data and abort operation if it
		 * doesn't get ready within the timeout*/
		for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
			if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_RXC) {
    1934:	7e2b      	ldrb	r3, [r5, #24]
    1936:	4223      	tst	r3, r4
    1938:	d1d7      	bne.n	18ea <usart_read_buffer_wait+0x36>
    193a:	4b05      	ldr	r3, [pc, #20]	; (1950 <usart_read_buffer_wait+0x9c>)
    193c:	e7cd      	b.n	18da <usart_read_buffer_wait+0x26>
			rx_data[rx_pos++] = (received_data >> 8);
		}
	}

	return STATUS_OK;
}
    193e:	1c18      	adds	r0, r3, #0
    1940:	b003      	add	sp, #12
    1942:	bc0c      	pop	{r2, r3}
    1944:	4691      	mov	r9, r2
    1946:	469a      	mov	sl, r3
    1948:	bdf0      	pop	{r4, r5, r6, r7, pc}
    194a:	46c0      	nop			; (mov r8, r8)
    194c:	0000183d 	.word	0x0000183d
    1950:	0000ffff 	.word	0x0000ffff

00001954 <_usart_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _usart_interrupt_handler(
		uint8_t instance)
{
    1954:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint16_t callback_status;
	uint8_t error_code;


	/* Get device instance from the look-up table */
	struct usart_module *module
    1956:	0080      	lsls	r0, r0, #2
    1958:	4b65      	ldr	r3, [pc, #404]	; (1af0 <_usart_interrupt_handler+0x19c>)
    195a:	58c5      	ldr	r5, [r0, r3]
		= (struct usart_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomUsart *const usart_hw
		= &(module->hw->USART);
    195c:	682c      	ldr	r4, [r5, #0]
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    195e:	69e3      	ldr	r3, [r4, #28]
		const struct usart_module *const module)
{
	/* Sanity check. */
	Assert(module);

	while (usart_is_syncing(module)) {
    1960:	2b00      	cmp	r3, #0
    1962:	d1fc      	bne.n	195e <_usart_interrupt_handler+0xa>

	/* Wait for the synchronization to complete */
	_usart_wait_for_sync(module);

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
    1964:	7e23      	ldrb	r3, [r4, #24]
	interrupt_status &= usart_hw->INTENSET.reg;
    1966:	7da6      	ldrb	r6, [r4, #22]
    1968:	401e      	ands	r6, r3
	callback_status = module->callback_reg_mask &
			module->callback_enable_mask;
    196a:	2331      	movs	r3, #49	; 0x31
	_usart_wait_for_sync(module);

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
	interrupt_status &= usart_hw->INTENSET.reg;
	callback_status = module->callback_reg_mask &
    196c:	5ceb      	ldrb	r3, [r5, r3]
    196e:	2230      	movs	r2, #48	; 0x30
    1970:	5caf      	ldrb	r7, [r5, r2]
    1972:	401f      	ands	r7, r3
			module->callback_enable_mask;

	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
    1974:	07f3      	lsls	r3, r6, #31
    1976:	d522      	bpl.n	19be <_usart_interrupt_handler+0x6a>
		if (module->remaining_tx_buffer_length) {
    1978:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
    197a:	b29b      	uxth	r3, r3
    197c:	2b00      	cmp	r3, #0
    197e:	d01c      	beq.n	19ba <_usart_interrupt_handler+0x66>
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    1980:	6aaa      	ldr	r2, [r5, #40]	; 0x28
    1982:	7813      	ldrb	r3, [r2, #0]
    1984:	b2db      	uxtb	r3, r3
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;
    1986:	1c51      	adds	r1, r2, #1
    1988:	62a9      	str	r1, [r5, #40]	; 0x28

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    198a:	7969      	ldrb	r1, [r5, #5]
    198c:	2901      	cmp	r1, #1
    198e:	d001      	beq.n	1994 <_usart_interrupt_handler+0x40>
	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
		if (module->remaining_tx_buffer_length) {
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    1990:	b29b      	uxth	r3, r3
    1992:	e004      	b.n	199e <_usart_interrupt_handler+0x4a>
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
    1994:	7851      	ldrb	r1, [r2, #1]
    1996:	0209      	lsls	r1, r1, #8
    1998:	430b      	orrs	r3, r1
				/* Increment 8-bit pointer */
				(module->tx_buffer_ptr)++;
    199a:	3202      	adds	r2, #2
    199c:	62aa      	str	r2, [r5, #40]	; 0x28
			}
			/* Write the data to send */
			usart_hw->DATA.reg = (data_to_send & SERCOM_USART_DATA_MASK);
    199e:	05db      	lsls	r3, r3, #23
    19a0:	0ddb      	lsrs	r3, r3, #23
    19a2:	8523      	strh	r3, [r4, #40]	; 0x28

			if (--(module->remaining_tx_buffer_length) == 0) {
    19a4:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
    19a6:	3b01      	subs	r3, #1
    19a8:	b29b      	uxth	r3, r3
    19aa:	85eb      	strh	r3, [r5, #46]	; 0x2e
    19ac:	2b00      	cmp	r3, #0
    19ae:	d106      	bne.n	19be <_usart_interrupt_handler+0x6a>
				/* Disable the Data Register Empty Interrupt */
				usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    19b0:	3301      	adds	r3, #1
    19b2:	7523      	strb	r3, [r4, #20]
				/* Enable Transmission Complete interrupt */
				usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_TXC;
    19b4:	3301      	adds	r3, #1
    19b6:	75a3      	strb	r3, [r4, #22]
    19b8:	e001      	b.n	19be <_usart_interrupt_handler+0x6a>

			}
		} else {
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    19ba:	2301      	movs	r3, #1
    19bc:	7523      	strb	r3, [r4, #20]

	/* Check if the Transmission Complete interrupt has occurred and
	 * that the transmit buffer is empty */
	}

	if (interrupt_status & SERCOM_USART_INTFLAG_TXC) {
    19be:	07b3      	lsls	r3, r6, #30
    19c0:	d509      	bpl.n	19d6 <_usart_interrupt_handler+0x82>

		/* Disable TX Complete Interrupt, and set STATUS_OK */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_TXC;
    19c2:	2302      	movs	r3, #2
    19c4:	7523      	strb	r3, [r4, #20]
		module->tx_status = STATUS_OK;
    19c6:	2200      	movs	r2, #0
    19c8:	3331      	adds	r3, #49	; 0x31
    19ca:	54ea      	strb	r2, [r5, r3]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BUFFER_TRANSMITTED)) {
    19cc:	07fb      	lsls	r3, r7, #31
    19ce:	d502      	bpl.n	19d6 <_usart_interrupt_handler+0x82>
			(*(module->callback[USART_CALLBACK_BUFFER_TRANSMITTED]))(module);
    19d0:	1c28      	adds	r0, r5, #0
    19d2:	68eb      	ldr	r3, [r5, #12]
    19d4:	4798      	blx	r3

	/* Check if the Receive Complete interrupt has occurred, and that
	 * there's more data to receive */
	}

	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {
    19d6:	0773      	lsls	r3, r6, #29
    19d8:	d56a      	bpl.n	1ab0 <_usart_interrupt_handler+0x15c>

		if (module->remaining_rx_buffer_length) {
    19da:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
    19dc:	b29b      	uxth	r3, r3
    19de:	2b00      	cmp	r3, #0
    19e0:	d064      	beq.n	1aac <_usart_interrupt_handler+0x158>
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    19e2:	8b63      	ldrh	r3, [r4, #26]
    19e4:	b2db      	uxtb	r3, r3
#if !SAMD20
			/* CTS status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_CTS) {
    19e6:	071a      	lsls	r2, r3, #28
    19e8:	d402      	bmi.n	19f0 <_usart_interrupt_handler+0x9c>

	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {

		if (module->remaining_rx_buffer_length) {
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    19ea:	223f      	movs	r2, #63	; 0x3f
    19ec:	4013      	ands	r3, r2
    19ee:	e001      	b.n	19f4 <_usart_interrupt_handler+0xa0>
#if !SAMD20
			/* CTS status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_CTS) {
				error_code &= ~SERCOM_USART_STATUS_CTS;
    19f0:	2237      	movs	r2, #55	; 0x37
    19f2:	4013      	ands	r3, r2
			}
#endif
			/* Check if an error has occurred during the receiving */
			if (error_code) {
    19f4:	2b00      	cmp	r3, #0
    19f6:	d037      	beq.n	1a68 <_usart_interrupt_handler+0x114>
				/* Check which error occurred */
				if (error_code & SERCOM_USART_STATUS_FERR) {
    19f8:	079a      	lsls	r2, r3, #30
    19fa:	d507      	bpl.n	1a0c <_usart_interrupt_handler+0xb8>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_FORMAT;
    19fc:	221a      	movs	r2, #26
    19fe:	2332      	movs	r3, #50	; 0x32
    1a00:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg |= SERCOM_USART_STATUS_FERR;
    1a02:	8b62      	ldrh	r2, [r4, #26]
    1a04:	3b30      	subs	r3, #48	; 0x30
    1a06:	4313      	orrs	r3, r2
    1a08:	8363      	strh	r3, [r4, #26]
    1a0a:	e027      	b.n	1a5c <_usart_interrupt_handler+0x108>
				} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    1a0c:	075a      	lsls	r2, r3, #29
    1a0e:	d507      	bpl.n	1a20 <_usart_interrupt_handler+0xcc>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_OVERFLOW;
    1a10:	221e      	movs	r2, #30
    1a12:	2332      	movs	r3, #50	; 0x32
    1a14:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg |= SERCOM_USART_STATUS_BUFOVF;
    1a16:	8b62      	ldrh	r2, [r4, #26]
    1a18:	3b2e      	subs	r3, #46	; 0x2e
    1a1a:	4313      	orrs	r3, r2
    1a1c:	8363      	strh	r3, [r4, #26]
    1a1e:	e01d      	b.n	1a5c <_usart_interrupt_handler+0x108>
				} else if (error_code & SERCOM_USART_STATUS_PERR) {
    1a20:	07da      	lsls	r2, r3, #31
    1a22:	d507      	bpl.n	1a34 <_usart_interrupt_handler+0xe0>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_DATA;
    1a24:	2213      	movs	r2, #19
    1a26:	2332      	movs	r3, #50	; 0x32
    1a28:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg |= SERCOM_USART_STATUS_PERR;
    1a2a:	8b62      	ldrh	r2, [r4, #26]
    1a2c:	3b31      	subs	r3, #49	; 0x31
    1a2e:	4313      	orrs	r3, r2
    1a30:	8363      	strh	r3, [r4, #26]
    1a32:	e013      	b.n	1a5c <_usart_interrupt_handler+0x108>
				}
#ifdef FEATURE_USART_LIN_SLAVE
				else if (error_code & SERCOM_USART_STATUS_ISF) {
    1a34:	06da      	lsls	r2, r3, #27
    1a36:	d507      	bpl.n	1a48 <_usart_interrupt_handler+0xf4>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_PROTOCOL;
    1a38:	2242      	movs	r2, #66	; 0x42
    1a3a:	2332      	movs	r3, #50	; 0x32
    1a3c:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg |= SERCOM_USART_STATUS_ISF;
    1a3e:	8b62      	ldrh	r2, [r4, #26]
    1a40:	3b22      	subs	r3, #34	; 0x22
    1a42:	4313      	orrs	r3, r2
    1a44:	8363      	strh	r3, [r4, #26]
    1a46:	e009      	b.n	1a5c <_usart_interrupt_handler+0x108>
				}
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
				else if (error_code & SERCOM_USART_STATUS_COLL) {
    1a48:	2220      	movs	r2, #32
    1a4a:	421a      	tst	r2, r3
    1a4c:	d006      	beq.n	1a5c <_usart_interrupt_handler+0x108>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_PACKET_COLLISION;
    1a4e:	3221      	adds	r2, #33	; 0x21
    1a50:	2332      	movs	r3, #50	; 0x32
    1a52:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg |= SERCOM_USART_STATUS_COLL;
    1a54:	8b62      	ldrh	r2, [r4, #26]
    1a56:	3b12      	subs	r3, #18
    1a58:	4313      	orrs	r3, r2
    1a5a:	8363      	strh	r3, [r4, #26]
				}
#endif

				/* Run callback if registered and enabled */
				if (callback_status
    1a5c:	077b      	lsls	r3, r7, #29
    1a5e:	d527      	bpl.n	1ab0 <_usart_interrupt_handler+0x15c>
						& (1 << USART_CALLBACK_ERROR)) {
					(*(module->callback[USART_CALLBACK_ERROR]))(module);
    1a60:	1c28      	adds	r0, r5, #0
    1a62:	696b      	ldr	r3, [r5, #20]
    1a64:	4798      	blx	r3
    1a66:	e023      	b.n	1ab0 <_usart_interrupt_handler+0x15c>

			} else {

				/* Read current packet from DATA register,
				 * increment buffer pointer and decrement buffer length */
				uint16_t received_data = (usart_hw->DATA.reg & SERCOM_USART_DATA_MASK);
    1a68:	8d23      	ldrh	r3, [r4, #40]	; 0x28
    1a6a:	05db      	lsls	r3, r3, #23
    1a6c:	0ddb      	lsrs	r3, r3, #23

				/* Read value will be at least 8-bits long */
				*(module->rx_buffer_ptr) = received_data;
    1a6e:	b2da      	uxtb	r2, r3
    1a70:	6a69      	ldr	r1, [r5, #36]	; 0x24
    1a72:	700a      	strb	r2, [r1, #0]
				/* Increment 8-bit pointer */
				module->rx_buffer_ptr += 1;
    1a74:	6a6a      	ldr	r2, [r5, #36]	; 0x24
    1a76:	1c51      	adds	r1, r2, #1
    1a78:	6269      	str	r1, [r5, #36]	; 0x24

				if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    1a7a:	7969      	ldrb	r1, [r5, #5]
    1a7c:	2901      	cmp	r1, #1
    1a7e:	d104      	bne.n	1a8a <_usart_interrupt_handler+0x136>
					/* 9-bit data, write next received byte to the buffer */
					*(module->rx_buffer_ptr) = (received_data >> 8);
    1a80:	0a1b      	lsrs	r3, r3, #8
    1a82:	7053      	strb	r3, [r2, #1]
					/* Increment 8-bit pointer */
					module->rx_buffer_ptr += 1;
    1a84:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    1a86:	3301      	adds	r3, #1
    1a88:	626b      	str	r3, [r5, #36]	; 0x24
				}

				/* Check if the last character have been received */
				if(--(module->remaining_rx_buffer_length) == 0) {
    1a8a:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
    1a8c:	3b01      	subs	r3, #1
    1a8e:	b29b      	uxth	r3, r3
    1a90:	85ab      	strh	r3, [r5, #44]	; 0x2c
    1a92:	2b00      	cmp	r3, #0
    1a94:	d10c      	bne.n	1ab0 <_usart_interrupt_handler+0x15c>
					/* Disable RX Complete Interrupt,
					 * and set STATUS_OK */
					usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    1a96:	3304      	adds	r3, #4
    1a98:	7523      	strb	r3, [r4, #20]
					module->rx_status = STATUS_OK;
    1a9a:	2200      	movs	r2, #0
    1a9c:	332e      	adds	r3, #46	; 0x2e
    1a9e:	54ea      	strb	r2, [r5, r3]

					/* Run callback if registered and enabled */
					if (callback_status
    1aa0:	07bb      	lsls	r3, r7, #30
    1aa2:	d505      	bpl.n	1ab0 <_usart_interrupt_handler+0x15c>
							& (1 << USART_CALLBACK_BUFFER_RECEIVED)) {
						(*(module->callback[USART_CALLBACK_BUFFER_RECEIVED]))(module);
    1aa4:	1c28      	adds	r0, r5, #0
    1aa6:	692b      	ldr	r3, [r5, #16]
    1aa8:	4798      	blx	r3
    1aaa:	e001      	b.n	1ab0 <_usart_interrupt_handler+0x15c>
					}
				}
			}
		} else {
			/* This should not happen. Disable Receive Complete interrupt. */
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    1aac:	2304      	movs	r3, #4
    1aae:	7523      	strb	r3, [r4, #20]
		}
	}

#ifdef FEATURE_USART_HARDWARE_FLOW_CONTROL
	if (interrupt_status & SERCOM_USART_INTFLAG_CTSIC) {
    1ab0:	06f3      	lsls	r3, r6, #27
    1ab2:	d507      	bpl.n	1ac4 <_usart_interrupt_handler+0x170>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_CTSIC;
    1ab4:	2310      	movs	r3, #16
    1ab6:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_CTSIC;
    1ab8:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_CTS_INPUT_CHANGE)) {
    1aba:	06fb      	lsls	r3, r7, #27
    1abc:	d502      	bpl.n	1ac4 <_usart_interrupt_handler+0x170>
			(*(module->callback[USART_CALLBACK_CTS_INPUT_CHANGE]))(module);
    1abe:	1c28      	adds	r0, r5, #0
    1ac0:	69eb      	ldr	r3, [r5, #28]
    1ac2:	4798      	blx	r3
		}
	}
#endif

#ifdef FEATURE_USART_LIN_SLAVE
	if (interrupt_status & SERCOM_USART_INTFLAG_RXBRK) {
    1ac4:	06b3      	lsls	r3, r6, #26
    1ac6:	d507      	bpl.n	1ad8 <_usart_interrupt_handler+0x184>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXBRK;
    1ac8:	2320      	movs	r3, #32
    1aca:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXBRK;
    1acc:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BREAK_RECEIVED)) {
    1ace:	073b      	lsls	r3, r7, #28
    1ad0:	d502      	bpl.n	1ad8 <_usart_interrupt_handler+0x184>
			(*(module->callback[USART_CALLBACK_BREAK_RECEIVED]))(module);
    1ad2:	1c28      	adds	r0, r5, #0
    1ad4:	69ab      	ldr	r3, [r5, #24]
    1ad6:	4798      	blx	r3
		}
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	if (interrupt_status & SERCOM_USART_INTFLAG_RXS) {
    1ad8:	0733      	lsls	r3, r6, #28
    1ada:	d507      	bpl.n	1aec <_usart_interrupt_handler+0x198>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXS;
    1adc:	2308      	movs	r3, #8
    1ade:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXS;
    1ae0:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_START_RECEIVED)) {
    1ae2:	06bb      	lsls	r3, r7, #26
    1ae4:	d502      	bpl.n	1aec <_usart_interrupt_handler+0x198>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
    1ae6:	6a2b      	ldr	r3, [r5, #32]
    1ae8:	1c28      	adds	r0, r5, #0
    1aea:	4798      	blx	r3
		}
	}
#endif
}
    1aec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1aee:	46c0      	nop			; (mov r8, r8)
    1af0:	20002ad0 	.word	0x20002ad0

00001af4 <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
    1af4:	b508      	push	{r3, lr}
	switch (clock_source) {
    1af6:	2808      	cmp	r0, #8
    1af8:	d803      	bhi.n	1b02 <system_clock_source_get_hz+0xe>
    1afa:	0080      	lsls	r0, r0, #2
    1afc:	4b1b      	ldr	r3, [pc, #108]	; (1b6c <system_clock_source_get_hz+0x78>)
    1afe:	581b      	ldr	r3, [r3, r0]
    1b00:	469f      	mov	pc, r3

		return _system_clock_inst.dpll.frequency;
#endif

	default:
		return 0;
    1b02:	2000      	movs	r0, #0
    1b04:	e031      	b.n	1b6a <system_clock_source_get_hz+0x76>
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
	case SYSTEM_CLOCK_SOURCE_XOSC:
		return _system_clock_inst.xosc.frequency;
    1b06:	4b1a      	ldr	r3, [pc, #104]	; (1b70 <system_clock_source_get_hz+0x7c>)
    1b08:	6918      	ldr	r0, [r3, #16]
    1b0a:	e02e      	b.n	1b6a <system_clock_source_get_hz+0x76>

	case SYSTEM_CLOCK_SOURCE_OSC8M:
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
    1b0c:	4b19      	ldr	r3, [pc, #100]	; (1b74 <system_clock_source_get_hz+0x80>)
    1b0e:	6a18      	ldr	r0, [r3, #32]
    1b10:	0580      	lsls	r0, r0, #22
    1b12:	0f80      	lsrs	r0, r0, #30
    1b14:	4b18      	ldr	r3, [pc, #96]	; (1b78 <system_clock_source_get_hz+0x84>)
    1b16:	40c3      	lsrs	r3, r0
    1b18:	1c18      	adds	r0, r3, #0
    1b1a:	e026      	b.n	1b6a <system_clock_source_get_hz+0x76>

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		return 32768UL;

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		return _system_clock_inst.xosc32k.frequency;
    1b1c:	4b14      	ldr	r3, [pc, #80]	; (1b70 <system_clock_source_get_hz+0x7c>)
    1b1e:	6958      	ldr	r0, [r3, #20]
    1b20:	e023      	b.n	1b6a <system_clock_source_get_hz+0x76>

	case SYSTEM_CLOCK_SOURCE_DFLL:

		/* Check if the DFLL has been configured */
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    1b22:	4b13      	ldr	r3, [pc, #76]	; (1b70 <system_clock_source_get_hz+0x7c>)
    1b24:	681b      	ldr	r3, [r3, #0]
    1b26:	2002      	movs	r0, #2
    1b28:	4018      	ands	r0, r3
    1b2a:	d01e      	beq.n	1b6a <system_clock_source_get_hz+0x76>
 * \internal
 * \brief Wait for sync to the DFLL control registers
 */
static inline void _system_dfll_wait_for_sync(void)
{
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    1b2c:	4911      	ldr	r1, [pc, #68]	; (1b74 <system_clock_source_get_hz+0x80>)
    1b2e:	2210      	movs	r2, #16
    1b30:	68cb      	ldr	r3, [r1, #12]
    1b32:	421a      	tst	r2, r3
    1b34:	d0fc      	beq.n	1b30 <system_clock_source_get_hz+0x3c>

		/* Make sure that the DFLL module is ready */
		_system_dfll_wait_for_sync();

		/* Check if operating in closed loop mode */
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
    1b36:	4b0e      	ldr	r3, [pc, #56]	; (1b70 <system_clock_source_get_hz+0x7c>)
    1b38:	681b      	ldr	r3, [r3, #0]
    1b3a:	075b      	lsls	r3, r3, #29
    1b3c:	d514      	bpl.n	1b68 <system_clock_source_get_hz+0x74>
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    1b3e:	2000      	movs	r0, #0
    1b40:	4b0e      	ldr	r3, [pc, #56]	; (1b7c <system_clock_source_get_hz+0x88>)
    1b42:	4798      	blx	r3
					(_system_clock_inst.dfll.mul & 0xffff);
    1b44:	4b0a      	ldr	r3, [pc, #40]	; (1b70 <system_clock_source_get_hz+0x7c>)
    1b46:	689b      	ldr	r3, [r3, #8]
    1b48:	041b      	lsls	r3, r3, #16
    1b4a:	0c1b      	lsrs	r3, r3, #16
		/* Make sure that the DFLL module is ready */
		_system_dfll_wait_for_sync();

		/* Check if operating in closed loop mode */
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    1b4c:	4358      	muls	r0, r3
    1b4e:	e00c      	b.n	1b6a <system_clock_source_get_hz+0x76>

		return 48000000UL;

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    1b50:	2350      	movs	r3, #80	; 0x50
    1b52:	4a08      	ldr	r2, [pc, #32]	; (1b74 <system_clock_source_get_hz+0x80>)
    1b54:	5cd3      	ldrb	r3, [r2, r3]
			return 0;
    1b56:	2000      	movs	r0, #0

		return 48000000UL;

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    1b58:	075b      	lsls	r3, r3, #29
    1b5a:	d506      	bpl.n	1b6a <system_clock_source_get_hz+0x76>
			return 0;
		}

		return _system_clock_inst.dpll.frequency;
    1b5c:	4b04      	ldr	r3, [pc, #16]	; (1b70 <system_clock_source_get_hz+0x7c>)
    1b5e:	68d8      	ldr	r0, [r3, #12]
    1b60:	e003      	b.n	1b6a <system_clock_source_get_hz+0x76>

	case SYSTEM_CLOCK_SOURCE_OSC8M:
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		return 32768UL;
    1b62:	2080      	movs	r0, #128	; 0x80
    1b64:	0200      	lsls	r0, r0, #8
    1b66:	e000      	b.n	1b6a <system_clock_source_get_hz+0x76>
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
					(_system_clock_inst.dfll.mul & 0xffff);
		}

		return 48000000UL;
    1b68:	4805      	ldr	r0, [pc, #20]	; (1b80 <system_clock_source_get_hz+0x8c>)
#endif

	default:
		return 0;
	}
}
    1b6a:	bd08      	pop	{r3, pc}
    1b6c:	0001203c 	.word	0x0001203c
    1b70:	20000280 	.word	0x20000280
    1b74:	40000800 	.word	0x40000800
    1b78:	007a1200 	.word	0x007a1200
    1b7c:	000021a9 	.word	0x000021a9
    1b80:	02dc6c00 	.word	0x02dc6c00

00001b84 <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
    1b84:	b570      	push	{r4, r5, r6, lr}
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
    1b86:	4c0c      	ldr	r4, [pc, #48]	; (1bb8 <system_clock_source_osc8m_set_config+0x34>)
    1b88:	6a23      	ldr	r3, [r4, #32]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
    1b8a:	7801      	ldrb	r1, [r0, #0]
	temp.bit.ONDEMAND = config->on_demand;
    1b8c:	7885      	ldrb	r5, [r0, #2]
	temp.bit.RUNSTDBY = config->run_in_standby;

	SYSCTRL->OSC8M = temp;
    1b8e:	7842      	ldrb	r2, [r0, #1]
    1b90:	2001      	movs	r0, #1
    1b92:	4002      	ands	r2, r0
    1b94:	0192      	lsls	r2, r2, #6
    1b96:	2640      	movs	r6, #64	; 0x40
    1b98:	43b3      	bics	r3, r6
    1b9a:	4313      	orrs	r3, r2
    1b9c:	1c02      	adds	r2, r0, #0
    1b9e:	402a      	ands	r2, r5
    1ba0:	01d2      	lsls	r2, r2, #7
    1ba2:	307f      	adds	r0, #127	; 0x7f
    1ba4:	4383      	bics	r3, r0
    1ba6:	4313      	orrs	r3, r2
    1ba8:	2203      	movs	r2, #3
    1baa:	400a      	ands	r2, r1
    1bac:	0212      	lsls	r2, r2, #8
    1bae:	4903      	ldr	r1, [pc, #12]	; (1bbc <system_clock_source_osc8m_set_config+0x38>)
    1bb0:	400b      	ands	r3, r1
    1bb2:	4313      	orrs	r3, r2
    1bb4:	6223      	str	r3, [r4, #32]
}
    1bb6:	bd70      	pop	{r4, r5, r6, pc}
    1bb8:	40000800 	.word	0x40000800
    1bbc:	fffffcff 	.word	0xfffffcff

00001bc0 <system_clock_source_xosc32k_set_config>:
 *
 * \param[in] config  XOSC32K configuration structure containing the new config
 */
void system_clock_source_xosc32k_set_config(
		struct system_clock_source_xosc32k_config *const config)
{
    1bc0:	b5f0      	push	{r4, r5, r6, r7, lr}
    1bc2:	465f      	mov	r7, fp
    1bc4:	4656      	mov	r6, sl
    1bc6:	464d      	mov	r5, r9
    1bc8:	4644      	mov	r4, r8
    1bca:	b4f0      	push	{r4, r5, r6, r7}
    1bcc:	b083      	sub	sp, #12
	SYSCTRL_XOSC32K_Type temp = SYSCTRL->XOSC32K;
    1bce:	4e2e      	ldr	r6, [pc, #184]	; (1c88 <system_clock_source_xosc32k_set_config+0xc8>)
    1bd0:	8ab3      	ldrh	r3, [r6, #20]
    1bd2:	469c      	mov	ip, r3

	temp.bit.STARTUP = config->startup_time;
    1bd4:	7845      	ldrb	r5, [r0, #1]

	if (config->external_clock == SYSTEM_CLOCK_EXTERNAL_CRYSTAL) {
    1bd6:	7803      	ldrb	r3, [r0, #0]
    1bd8:	425a      	negs	r2, r3
    1bda:	415a      	adcs	r2, r3
    1bdc:	4691      	mov	r9, r2
		temp.bit.XTALEN = 1;
	} else {
		temp.bit.XTALEN = 0;
	}

	temp.bit.AAMPEN = config->auto_gain_control;
    1bde:	7883      	ldrb	r3, [r0, #2]
    1be0:	469b      	mov	fp, r3
	temp.bit.EN1K = config->enable_1khz_output;
    1be2:	78c3      	ldrb	r3, [r0, #3]
	temp.bit.EN32K = config->enable_32khz_output;
    1be4:	7902      	ldrb	r2, [r0, #4]
    1be6:	4690      	mov	r8, r2

	temp.bit.ONDEMAND = config->on_demand;
    1be8:	7b47      	ldrb	r7, [r0, #13]
	temp.bit.RUNSTDBY = config->run_in_standby;
    1bea:	7b02      	ldrb	r2, [r0, #12]
    1bec:	9201      	str	r2, [sp, #4]
	temp.bit.WRTLOCK  = config->write_once;
    1bee:	7b84      	ldrb	r4, [r0, #14]

	/* Cache the new frequency in case the user needs to check the current
	 * operating frequency later */
	_system_clock_inst.xosc32k.frequency = config->frequency;
    1bf0:	6882      	ldr	r2, [r0, #8]
    1bf2:	4826      	ldr	r0, [pc, #152]	; (1c8c <system_clock_source_xosc32k_set_config+0xcc>)
    1bf4:	6142      	str	r2, [r0, #20]

	SYSCTRL->XOSC32K = temp;
    1bf6:	2001      	movs	r0, #1
    1bf8:	464a      	mov	r2, r9
    1bfa:	0092      	lsls	r2, r2, #2
    1bfc:	4691      	mov	r9, r2
    1bfe:	2204      	movs	r2, #4
    1c00:	4692      	mov	sl, r2
    1c02:	4662      	mov	r2, ip
    1c04:	4651      	mov	r1, sl
    1c06:	438a      	bics	r2, r1
    1c08:	4694      	mov	ip, r2
    1c0a:	464a      	mov	r2, r9
    1c0c:	4661      	mov	r1, ip
    1c0e:	430a      	orrs	r2, r1
    1c10:	4694      	mov	ip, r2
    1c12:	4642      	mov	r2, r8
    1c14:	4002      	ands	r2, r0
    1c16:	00d2      	lsls	r2, r2, #3
    1c18:	4690      	mov	r8, r2
    1c1a:	2208      	movs	r2, #8
    1c1c:	4691      	mov	r9, r2
    1c1e:	4662      	mov	r2, ip
    1c20:	4649      	mov	r1, r9
    1c22:	438a      	bics	r2, r1
    1c24:	4694      	mov	ip, r2
    1c26:	4642      	mov	r2, r8
    1c28:	4661      	mov	r1, ip
    1c2a:	430a      	orrs	r2, r1
    1c2c:	4694      	mov	ip, r2
    1c2e:	4003      	ands	r3, r0
    1c30:	011b      	lsls	r3, r3, #4
    1c32:	2210      	movs	r2, #16
    1c34:	4690      	mov	r8, r2
    1c36:	4662      	mov	r2, ip
    1c38:	4641      	mov	r1, r8
    1c3a:	438a      	bics	r2, r1
    1c3c:	4313      	orrs	r3, r2
    1c3e:	4659      	mov	r1, fp
    1c40:	4001      	ands	r1, r0
    1c42:	0149      	lsls	r1, r1, #5
    1c44:	2220      	movs	r2, #32
    1c46:	4393      	bics	r3, r2
    1c48:	430b      	orrs	r3, r1
    1c4a:	9a01      	ldr	r2, [sp, #4]
    1c4c:	4002      	ands	r2, r0
    1c4e:	0192      	lsls	r2, r2, #6
    1c50:	2140      	movs	r1, #64	; 0x40
    1c52:	438b      	bics	r3, r1
    1c54:	4313      	orrs	r3, r2
    1c56:	4007      	ands	r7, r0
    1c58:	01ff      	lsls	r7, r7, #7
    1c5a:	2280      	movs	r2, #128	; 0x80
    1c5c:	4393      	bics	r3, r2
    1c5e:	433b      	orrs	r3, r7
    1c60:	3a79      	subs	r2, #121	; 0x79
    1c62:	4015      	ands	r5, r2
    1c64:	022d      	lsls	r5, r5, #8
    1c66:	4f0a      	ldr	r7, [pc, #40]	; (1c90 <system_clock_source_xosc32k_set_config+0xd0>)
    1c68:	403b      	ands	r3, r7
    1c6a:	432b      	orrs	r3, r5
    1c6c:	4004      	ands	r4, r0
    1c6e:	0320      	lsls	r0, r4, #12
    1c70:	4c08      	ldr	r4, [pc, #32]	; (1c94 <system_clock_source_xosc32k_set_config+0xd4>)
    1c72:	401c      	ands	r4, r3
    1c74:	4304      	orrs	r4, r0
    1c76:	82b4      	strh	r4, [r6, #20]
}
    1c78:	b003      	add	sp, #12
    1c7a:	bc3c      	pop	{r2, r3, r4, r5}
    1c7c:	4690      	mov	r8, r2
    1c7e:	4699      	mov	r9, r3
    1c80:	46a2      	mov	sl, r4
    1c82:	46ab      	mov	fp, r5
    1c84:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1c86:	46c0      	nop			; (mov r8, r8)
    1c88:	40000800 	.word	0x40000800
    1c8c:	20000280 	.word	0x20000280
    1c90:	fffff8ff 	.word	0xfffff8ff
    1c94:	ffffefff 	.word	0xffffefff

00001c98 <system_clock_source_dfll_set_config>:
 *
 * \param[in] config  DFLL configuration structure containing the new config
 */
void system_clock_source_dfll_set_config(
		struct system_clock_source_dfll_config *const config)
{
    1c98:	b510      	push	{r4, lr}
	_system_clock_inst.dfll.val =
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
    1c9a:	7a03      	ldrb	r3, [r0, #8]
    1c9c:	069b      	lsls	r3, r3, #26
    1c9e:	0c1a      	lsrs	r2, r3, #16
			SYSCTRL_DFLLVAL_FINE(config->fine_value);
    1ca0:	8943      	ldrh	r3, [r0, #10]
    1ca2:	059b      	lsls	r3, r3, #22
    1ca4:	0d9b      	lsrs	r3, r3, #22
 */
void system_clock_source_dfll_set_config(
		struct system_clock_source_dfll_config *const config)
{
	_system_clock_inst.dfll.val =
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
    1ca6:	4313      	orrs	r3, r2
 * \param[in] config  DFLL configuration structure containing the new config
 */
void system_clock_source_dfll_set_config(
		struct system_clock_source_dfll_config *const config)
{
	_system_clock_inst.dfll.val =
    1ca8:	4c15      	ldr	r4, [pc, #84]	; (1d00 <system_clock_source_dfll_set_config+0x68>)
    1caa:	6063      	str	r3, [r4, #4]
    1cac:	8881      	ldrh	r1, [r0, #4]
    1cae:	8843      	ldrh	r3, [r0, #2]
    1cb0:	4319      	orrs	r1, r3
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
			SYSCTRL_DFLLVAL_FINE(config->fine_value);

	_system_clock_inst.dfll.control =
			(uint32_t)config->wakeup_lock     |
    1cb2:	79c3      	ldrb	r3, [r0, #7]
    1cb4:	7982      	ldrb	r2, [r0, #6]
    1cb6:	4313      	orrs	r3, r2
			(uint32_t)config->stable_tracking |
			(uint32_t)config->quick_lock      |
    1cb8:	430b      	orrs	r3, r1
			(uint32_t)config->chill_cycle     |
			((uint32_t)config->on_demand << SYSCTRL_DFLLCTRL_ONDEMAND_Pos);
    1cba:	7842      	ldrb	r2, [r0, #1]
    1cbc:	01d2      	lsls	r2, r2, #7

	_system_clock_inst.dfll.control =
			(uint32_t)config->wakeup_lock     |
			(uint32_t)config->stable_tracking |
			(uint32_t)config->quick_lock      |
			(uint32_t)config->chill_cycle     |
    1cbe:	4313      	orrs	r3, r2
{
	_system_clock_inst.dfll.val =
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
			SYSCTRL_DFLLVAL_FINE(config->fine_value);

	_system_clock_inst.dfll.control =
    1cc0:	6023      	str	r3, [r4, #0]
			(uint32_t)config->stable_tracking |
			(uint32_t)config->quick_lock      |
			(uint32_t)config->chill_cycle     |
			((uint32_t)config->on_demand << SYSCTRL_DFLLCTRL_ONDEMAND_Pos);

	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
    1cc2:	7803      	ldrb	r3, [r0, #0]
    1cc4:	2b04      	cmp	r3, #4
    1cc6:	d10f      	bne.n	1ce8 <system_clock_source_dfll_set_config+0x50>

		_system_clock_inst.dfll.mul =
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    1cc8:	7b03      	ldrb	r3, [r0, #12]
    1cca:	069b      	lsls	r3, r3, #26
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
    1ccc:	8a02      	ldrh	r2, [r0, #16]
    1cce:	4313      	orrs	r3, r2
    1cd0:	1c19      	adds	r1, r3, #0

	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {

		_system_clock_inst.dfll.mul =
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    1cd2:	89c3      	ldrh	r3, [r0, #14]
    1cd4:	041b      	lsls	r3, r3, #16
    1cd6:	4a0b      	ldr	r2, [pc, #44]	; (1d04 <system_clock_source_dfll_set_config+0x6c>)
    1cd8:	4013      	ands	r3, r2
    1cda:	430b      	orrs	r3, r1
			(uint32_t)config->chill_cycle     |
			((uint32_t)config->on_demand << SYSCTRL_DFLLCTRL_ONDEMAND_Pos);

	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {

		_system_clock_inst.dfll.mul =
    1cdc:	60a3      	str	r3, [r4, #8]
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);

		/* Enable the closed loop mode */
		_system_clock_inst.dfll.control |= config->loop_mode;
    1cde:	6821      	ldr	r1, [r4, #0]
    1ce0:	2304      	movs	r3, #4
    1ce2:	430b      	orrs	r3, r1
    1ce4:	6023      	str	r3, [r4, #0]
    1ce6:	e009      	b.n	1cfc <system_clock_source_dfll_set_config+0x64>
	}
	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_USB_RECOVERY) {
    1ce8:	2b20      	cmp	r3, #32
    1cea:	d107      	bne.n	1cfc <system_clock_source_dfll_set_config+0x64>

		_system_clock_inst.dfll.mul =
    1cec:	8a02      	ldrh	r2, [r0, #16]
    1cee:	4b04      	ldr	r3, [pc, #16]	; (1d00 <system_clock_source_dfll_set_config+0x68>)
    1cf0:	609a      	str	r2, [r3, #8]
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);

		/* Enable the USB recovery mode */
		_system_clock_inst.dfll.control |= config->loop_mode |
    1cf2:	681a      	ldr	r2, [r3, #0]
    1cf4:	2184      	movs	r1, #132	; 0x84
    1cf6:	00c9      	lsls	r1, r1, #3
    1cf8:	430a      	orrs	r2, r1
    1cfa:	601a      	str	r2, [r3, #0]
				SYSCTRL_DFLLCTRL_BPLCKC;
	}
}
    1cfc:	bd10      	pop	{r4, pc}
    1cfe:	46c0      	nop			; (mov r8, r8)
    1d00:	20000280 	.word	0x20000280
    1d04:	03ff0000 	.word	0x03ff0000

00001d08 <system_clock_source_enable>:
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
    1d08:	2808      	cmp	r0, #8
    1d0a:	d803      	bhi.n	1d14 <system_clock_source_enable+0xc>
    1d0c:	0080      	lsls	r0, r0, #2
    1d0e:	4b22      	ldr	r3, [pc, #136]	; (1d98 <system_clock_source_enable+0x90>)
    1d10:	581b      	ldr	r3, [r3, r0]
    1d12:	469f      	mov	pc, r3
		/* Always enabled */
		return STATUS_OK;

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    1d14:	2017      	movs	r0, #23
    1d16:	e03e      	b.n	1d96 <system_clock_source_enable+0x8e>
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
	case SYSTEM_CLOCK_SOURCE_OSC8M:
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
    1d18:	4a20      	ldr	r2, [pc, #128]	; (1d9c <system_clock_source_enable+0x94>)
    1d1a:	6a11      	ldr	r1, [r2, #32]
    1d1c:	2302      	movs	r3, #2
    1d1e:	430b      	orrs	r3, r1
    1d20:	6213      	str	r3, [r2, #32]
		return STATUS_OK;
    1d22:	2000      	movs	r0, #0
    1d24:	e037      	b.n	1d96 <system_clock_source_enable+0x8e>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
    1d26:	4a1d      	ldr	r2, [pc, #116]	; (1d9c <system_clock_source_enable+0x94>)
    1d28:	6991      	ldr	r1, [r2, #24]
    1d2a:	2302      	movs	r3, #2
    1d2c:	430b      	orrs	r3, r1
    1d2e:	6193      	str	r3, [r2, #24]
	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
    1d30:	2000      	movs	r0, #0
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
		return STATUS_OK;

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
		break;
    1d32:	e030      	b.n	1d96 <system_clock_source_enable+0x8e>

	case SYSTEM_CLOCK_SOURCE_XOSC:
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
    1d34:	4a19      	ldr	r2, [pc, #100]	; (1d9c <system_clock_source_enable+0x94>)
    1d36:	8a11      	ldrh	r1, [r2, #16]
    1d38:	2302      	movs	r3, #2
    1d3a:	430b      	orrs	r3, r1
    1d3c:	8213      	strh	r3, [r2, #16]
	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
    1d3e:	2000      	movs	r0, #0
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
		break;

	case SYSTEM_CLOCK_SOURCE_XOSC:
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
		break;
    1d40:	e029      	b.n	1d96 <system_clock_source_enable+0x8e>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
    1d42:	4a16      	ldr	r2, [pc, #88]	; (1d9c <system_clock_source_enable+0x94>)
    1d44:	8a91      	ldrh	r1, [r2, #20]
    1d46:	2302      	movs	r3, #2
    1d48:	430b      	orrs	r3, r1
    1d4a:	8293      	strh	r3, [r2, #20]
	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
    1d4c:	2000      	movs	r0, #0
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
		break;

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
		break;
    1d4e:	e022      	b.n	1d96 <system_clock_source_enable+0x8e>

	case SYSTEM_CLOCK_SOURCE_DFLL:
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
    1d50:	4b13      	ldr	r3, [pc, #76]	; (1da0 <system_clock_source_enable+0x98>)
    1d52:	6819      	ldr	r1, [r3, #0]
    1d54:	2202      	movs	r2, #2
    1d56:	430a      	orrs	r2, r1
    1d58:	601a      	str	r2, [r3, #0]

static inline void _system_clock_source_dfll_set_config_errata_9905(void)
{

	/* Disable ONDEMAND mode while writing configurations */
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control & ~SYSCTRL_DFLLCTRL_ONDEMAND;
    1d5a:	681a      	ldr	r2, [r3, #0]
    1d5c:	4b11      	ldr	r3, [pc, #68]	; (1da4 <system_clock_source_enable+0x9c>)
    1d5e:	4013      	ands	r3, r2
    1d60:	4a0e      	ldr	r2, [pc, #56]	; (1d9c <system_clock_source_enable+0x94>)
    1d62:	8493      	strh	r3, [r2, #36]	; 0x24
 * \internal
 * \brief Wait for sync to the DFLL control registers
 */
static inline void _system_dfll_wait_for_sync(void)
{
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    1d64:	1c11      	adds	r1, r2, #0
    1d66:	2210      	movs	r2, #16
    1d68:	68cb      	ldr	r3, [r1, #12]
    1d6a:	421a      	tst	r2, r3
    1d6c:	d0fc      	beq.n	1d68 <system_clock_source_enable+0x60>

	/* Disable ONDEMAND mode while writing configurations */
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control & ~SYSCTRL_DFLLCTRL_ONDEMAND;
	_system_dfll_wait_for_sync();

	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
    1d6e:	4a0c      	ldr	r2, [pc, #48]	; (1da0 <system_clock_source_enable+0x98>)
    1d70:	6891      	ldr	r1, [r2, #8]
    1d72:	4b0a      	ldr	r3, [pc, #40]	; (1d9c <system_clock_source_enable+0x94>)
    1d74:	62d9      	str	r1, [r3, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
    1d76:	6851      	ldr	r1, [r2, #4]
    1d78:	6299      	str	r1, [r3, #40]	; 0x28

	/* Write full configuration to DFLL control register */
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
    1d7a:	6812      	ldr	r2, [r2, #0]
    1d7c:	b292      	uxth	r2, r2
    1d7e:	849a      	strh	r2, [r3, #36]	; 0x24
	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
    1d80:	2000      	movs	r0, #0
    1d82:	e008      	b.n	1d96 <system_clock_source_enable+0x8e>
		_system_clock_source_dfll_set_config_errata_9905();
		break;

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
    1d84:	4905      	ldr	r1, [pc, #20]	; (1d9c <system_clock_source_enable+0x94>)
    1d86:	2244      	movs	r2, #68	; 0x44
    1d88:	5c88      	ldrb	r0, [r1, r2]
    1d8a:	2302      	movs	r3, #2
    1d8c:	4303      	orrs	r3, r0
    1d8e:	548b      	strb	r3, [r1, r2]
	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
    1d90:	2000      	movs	r0, #0
		break;

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
		break;
    1d92:	e000      	b.n	1d96 <system_clock_source_enable+0x8e>
#endif

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		/* Always enabled */
		return STATUS_OK;
    1d94:	2000      	movs	r0, #0
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
}
    1d96:	4770      	bx	lr
    1d98:	00012060 	.word	0x00012060
    1d9c:	40000800 	.word	0x40000800
    1da0:	20000280 	.word	0x20000280
    1da4:	0000ff7f 	.word	0x0000ff7f

00001da8 <system_clock_init>:
 * This function will apply the settings in conf_clocks.h when run from the user
 * application. All clock sources and GCLK generators are running when this function
 * returns.
 */
void system_clock_init(void)
{
    1da8:	b5f0      	push	{r4, r5, r6, r7, lr}
    1daa:	4657      	mov	r7, sl
    1dac:	464e      	mov	r6, r9
    1dae:	4645      	mov	r5, r8
    1db0:	b4e0      	push	{r5, r6, r7}
    1db2:	b08e      	sub	sp, #56	; 0x38
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
    1db4:	22c2      	movs	r2, #194	; 0xc2
    1db6:	00d2      	lsls	r2, r2, #3
    1db8:	4b59      	ldr	r3, [pc, #356]	; (1f20 <system_clock_init+0x178>)
    1dba:	609a      	str	r2, [r3, #8]
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
    1dbc:	4a59      	ldr	r2, [pc, #356]	; (1f24 <system_clock_init+0x17c>)
    1dbe:	6853      	ldr	r3, [r2, #4]
    1dc0:	211e      	movs	r1, #30
    1dc2:	438b      	bics	r3, r1
    1dc4:	6053      	str	r3, [r2, #4]
#elif CONF_CLOCK_GCLK_4_ENABLE == false
	gclk_conf.source_generator = GCLK_GENERATOR_4;
#elif CONF_CLOCK_GCLK_5_ENABLE == false
	gclk_conf.source_generator = GCLK_GENERATOR_5;
#elif CONF_CLOCK_GCLK_6_ENABLE == false
	gclk_conf.source_generator = GCLK_GENERATOR_6;
    1dc6:	2206      	movs	r2, #6
    1dc8:	ab01      	add	r3, sp, #4
    1dca:	701a      	strb	r2, [r3, #0]
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#else
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#endif

	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    1dcc:	2400      	movs	r4, #0
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
    1dce:	4d56      	ldr	r5, [pc, #344]	; (1f28 <system_clock_init+0x180>)
    1dd0:	b2e0      	uxtb	r0, r4
    1dd2:	a901      	add	r1, sp, #4
    1dd4:	47a8      	blx	r5
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#else
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#endif

	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    1dd6:	3401      	adds	r4, #1
    1dd8:	2c25      	cmp	r4, #37	; 0x25
    1dda:	d1f9      	bne.n	1dd0 <system_clock_init+0x28>
static inline void system_clock_source_xosc32k_get_config_defaults(
		struct system_clock_source_xosc32k_config *const config)
{
	Assert(config);

	config->external_clock      = SYSTEM_CLOCK_EXTERNAL_CRYSTAL;
    1ddc:	a80a      	add	r0, sp, #40	; 0x28
    1dde:	2300      	movs	r3, #0
    1de0:	7003      	strb	r3, [r0, #0]
	config->startup_time        = SYSTEM_XOSC32K_STARTUP_16384;
	config->auto_gain_control   = false;
    1de2:	7083      	strb	r3, [r0, #2]
	config->frequency           = 32768UL;
    1de4:	2280      	movs	r2, #128	; 0x80
    1de6:	0212      	lsls	r2, r2, #8
    1de8:	6082      	str	r2, [r0, #8]
	config->enable_1khz_output  = false;
    1dea:	70c3      	strb	r3, [r0, #3]
	config->enable_32khz_output = true;
    1dec:	2201      	movs	r2, #1
    1dee:	7102      	strb	r2, [r0, #4]
	config->run_in_standby      = false;
	config->on_demand           = true;
	config->write_once          = false;
    1df0:	7383      	strb	r3, [r0, #14]
	struct system_clock_source_xosc32k_config xosc32k_conf;
	system_clock_source_xosc32k_get_config_defaults(&xosc32k_conf);

	xosc32k_conf.frequency           = 32768UL;
	xosc32k_conf.external_clock      = CONF_CLOCK_XOSC32K_EXTERNAL_CRYSTAL;
	xosc32k_conf.startup_time        = CONF_CLOCK_XOSC32K_STARTUP_TIME;
    1df2:	2106      	movs	r1, #6
    1df4:	7041      	strb	r1, [r0, #1]
	xosc32k_conf.auto_gain_control   = CONF_CLOCK_XOSC32K_AUTO_AMPLITUDE_CONTROL;
	xosc32k_conf.enable_1khz_output  = CONF_CLOCK_XOSC32K_ENABLE_1KHZ_OUPUT;
	xosc32k_conf.enable_32khz_output = CONF_CLOCK_XOSC32K_ENABLE_32KHZ_OUTPUT;
	xosc32k_conf.on_demand           = false;
    1df6:	7343      	strb	r3, [r0, #13]
	xosc32k_conf.run_in_standby      = CONF_CLOCK_XOSC32K_RUN_IN_STANDBY;
    1df8:	7302      	strb	r2, [r0, #12]

	system_clock_source_xosc32k_set_config(&xosc32k_conf);
    1dfa:	4b4c      	ldr	r3, [pc, #304]	; (1f2c <system_clock_init+0x184>)
    1dfc:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_XOSC32K);
    1dfe:	2005      	movs	r0, #5
    1e00:	4b4b      	ldr	r3, [pc, #300]	; (1f30 <system_clock_init+0x188>)
    1e02:	4798      	blx	r3

	default:
		return false;
	}

	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
    1e04:	4946      	ldr	r1, [pc, #280]	; (1f20 <system_clock_init+0x178>)
    1e06:	2202      	movs	r2, #2
    1e08:	68cb      	ldr	r3, [r1, #12]
	xosc32k_conf.on_demand           = false;
	xosc32k_conf.run_in_standby      = CONF_CLOCK_XOSC32K_RUN_IN_STANDBY;

	system_clock_source_xosc32k_set_config(&xosc32k_conf);
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_XOSC32K);
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_XOSC32K));
    1e0a:	421a      	tst	r2, r3
    1e0c:	d0fc      	beq.n	1e08 <system_clock_init+0x60>
		struct system_clock_source_dfll_config *const config)
{
	Assert(config);

	config->loop_mode       = SYSTEM_CLOCK_DFLL_LOOP_MODE_OPEN;
	config->quick_lock      = SYSTEM_CLOCK_DFLL_QUICK_LOCK_ENABLE;
    1e0e:	a805      	add	r0, sp, #20
    1e10:	2300      	movs	r3, #0
    1e12:	2500      	movs	r5, #0
    1e14:	8043      	strh	r3, [r0, #2]
	config->chill_cycle     = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_ENABLE;
    1e16:	8083      	strh	r3, [r0, #4]
	config->wakeup_lock     = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_KEEP;
    1e18:	7185      	strb	r5, [r0, #6]
	config->stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_TRACK_AFTER_LOCK;
    1e1a:	71c5      	strb	r5, [r0, #7]
	config->on_demand       = true;

	/* Open loop mode calibration value */
	config->coarse_value    = 0x1f / 4; /* Midpoint */
    1e1c:	2207      	movs	r2, #7
    1e1e:	7202      	strb	r2, [r0, #8]
	config->fine_value      = 0xff / 4; /* Midpoint */
    1e20:	333f      	adds	r3, #63	; 0x3f
    1e22:	8143      	strh	r3, [r0, #10]
	/* DFLL Config (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	struct system_clock_source_dfll_config dfll_conf;
	system_clock_source_dfll_get_config_defaults(&dfll_conf);

	dfll_conf.loop_mode      = CONF_CLOCK_DFLL_LOOP_MODE;
    1e24:	2104      	movs	r1, #4
    1e26:	7001      	strb	r1, [r0, #0]
	dfll_conf.on_demand      = false;
    1e28:	7045      	strb	r5, [r0, #1]
#  else
	dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;
#  endif

	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		dfll_conf.multiply_factor = CONF_CLOCK_DFLL_MULTIPLY_FACTOR;
    1e2a:	4942      	ldr	r1, [pc, #264]	; (1f34 <system_clock_init+0x18c>)
    1e2c:	8201      	strh	r1, [r0, #16]
	}

	dfll_conf.coarse_max_step = CONF_CLOCK_DFLL_MAX_COARSE_STEP_SIZE;
    1e2e:	7302      	strb	r2, [r0, #12]
	dfll_conf.fine_max_step   = CONF_CLOCK_DFLL_MAX_FINE_STEP_SIZE;
    1e30:	81c3      	strh	r3, [r0, #14]
		dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;

		dfll_conf.multiply_factor = 48000;
	}

	system_clock_source_dfll_set_config(&dfll_conf);
    1e32:	4b41      	ldr	r3, [pc, #260]	; (1f38 <system_clock_init+0x190>)
    1e34:	4798      	blx	r3
		struct system_clock_source_osc8m_config *const config)
{
	Assert(config);

	config->prescaler       = SYSTEM_OSC8M_DIV_8;
	config->run_in_standby  = false;
    1e36:	a804      	add	r0, sp, #16
    1e38:	7045      	strb	r5, [r0, #1]

	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
    1e3a:	7005      	strb	r5, [r0, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
    1e3c:	7085      	strb	r5, [r0, #2]
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;

	system_clock_source_osc8m_set_config(&osc8m_conf);
    1e3e:	4b3f      	ldr	r3, [pc, #252]	; (1f3c <system_clock_init+0x194>)
    1e40:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
    1e42:	2006      	movs	r0, #6
    1e44:	4b3a      	ldr	r3, [pc, #232]	; (1f30 <system_clock_init+0x188>)
    1e46:	4699      	mov	r9, r3
    1e48:	4798      	blx	r3


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
    1e4a:	4b3d      	ldr	r3, [pc, #244]	; (1f40 <system_clock_init+0x198>)
    1e4c:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
    1e4e:	ac01      	add	r4, sp, #4
    1e50:	2601      	movs	r6, #1
    1e52:	6066      	str	r6, [r4, #4]
	config->high_when_disabled = false;
    1e54:	7065      	strb	r5, [r4, #1]
	config->source_clock       = GCLK_SOURCE_OSC8M;
	config->run_in_standby     = false;
    1e56:	7225      	strb	r5, [r4, #8]
	config->output_enable      = false;
    1e58:	7265      	strb	r5, [r4, #9]

	/* Configure all GCLK generators except for the main generator, which
	 * is configured later after all other clock systems are set up */
	MREPEAT(8, _CONF_CLOCK_GCLK_CONFIG_NONMAIN, ~);
    1e5a:	2305      	movs	r3, #5
    1e5c:	469a      	mov	sl, r3
    1e5e:	7023      	strb	r3, [r4, #0]
    1e60:	2001      	movs	r0, #1
    1e62:	1c21      	adds	r1, r4, #0
    1e64:	4b37      	ldr	r3, [pc, #220]	; (1f44 <system_clock_init+0x19c>)
    1e66:	4698      	mov	r8, r3
    1e68:	4798      	blx	r3
    1e6a:	2001      	movs	r0, #1
    1e6c:	4f36      	ldr	r7, [pc, #216]	; (1f48 <system_clock_init+0x1a0>)
    1e6e:	47b8      	blx	r7
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
    1e70:	6066      	str	r6, [r4, #4]
	config->high_when_disabled = false;
    1e72:	7065      	strb	r5, [r4, #1]
	config->source_clock       = GCLK_SOURCE_OSC8M;
	config->run_in_standby     = false;
	config->output_enable      = false;
    1e74:	7265      	strb	r5, [r4, #9]
    1e76:	4653      	mov	r3, sl
    1e78:	7023      	strb	r3, [r4, #0]
    1e7a:	7226      	strb	r6, [r4, #8]
    1e7c:	2002      	movs	r0, #2
    1e7e:	1c21      	adds	r1, r4, #0
    1e80:	47c0      	blx	r8
    1e82:	2002      	movs	r0, #2
    1e84:	47b8      	blx	r7
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
    1e86:	6066      	str	r6, [r4, #4]
	config->high_when_disabled = false;
    1e88:	7065      	strb	r5, [r4, #1]
	config->source_clock       = GCLK_SOURCE_OSC8M;
    1e8a:	2306      	movs	r3, #6
    1e8c:	469a      	mov	sl, r3
    1e8e:	7023      	strb	r3, [r4, #0]
	config->run_in_standby     = false;
    1e90:	7225      	strb	r5, [r4, #8]
	config->output_enable      = false;
    1e92:	7265      	strb	r5, [r4, #9]
    1e94:	2003      	movs	r0, #3
    1e96:	1c21      	adds	r1, r4, #0
    1e98:	47c0      	blx	r8
    1e9a:	2003      	movs	r0, #3
    1e9c:	47b8      	blx	r7
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
	config->high_when_disabled = false;
    1e9e:	7065      	strb	r5, [r4, #1]
	config->source_clock       = GCLK_SOURCE_OSC8M;
	config->run_in_standby     = false;
	config->output_enable      = false;
    1ea0:	7265      	strb	r5, [r4, #9]
    1ea2:	2303      	movs	r3, #3
    1ea4:	7023      	strb	r3, [r4, #0]
    1ea6:	331d      	adds	r3, #29
    1ea8:	6063      	str	r3, [r4, #4]
    1eaa:	7226      	strb	r6, [r4, #8]
    1eac:	2004      	movs	r0, #4
    1eae:	1c21      	adds	r1, r4, #0
    1eb0:	47c0      	blx	r8
    1eb2:	2004      	movs	r0, #4
    1eb4:	47b8      	blx	r7
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
    1eb6:	6066      	str	r6, [r4, #4]
	config->high_when_disabled = false;
    1eb8:	7065      	strb	r5, [r4, #1]
	config->source_clock       = GCLK_SOURCE_OSC8M;
    1eba:	4653      	mov	r3, sl
    1ebc:	7023      	strb	r3, [r4, #0]
	config->run_in_standby     = false;
    1ebe:	7225      	strb	r5, [r4, #8]
	config->output_enable      = false;
    1ec0:	7265      	strb	r5, [r4, #9]
    1ec2:	2005      	movs	r0, #5
    1ec4:	1c21      	adds	r1, r4, #0
    1ec6:	47c0      	blx	r8
    1ec8:	2005      	movs	r0, #5
    1eca:	47b8      	blx	r7
	/* Enable DFLL reference clock if in closed loop mode */
	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		struct system_gclk_chan_config dfll_gclk_chan_conf;

		system_gclk_chan_get_config_defaults(&dfll_gclk_chan_conf);
		dfll_gclk_chan_conf.source_generator = CONF_CLOCK_DFLL_SOURCE_GCLK_GENERATOR;
    1ecc:	7026      	strb	r6, [r4, #0]
		system_gclk_chan_set_config(SYSCTRL_GCLK_ID_DFLL48, &dfll_gclk_chan_conf);
    1ece:	2000      	movs	r0, #0
    1ed0:	1c21      	adds	r1, r4, #0
    1ed2:	4b15      	ldr	r3, [pc, #84]	; (1f28 <system_clock_init+0x180>)
    1ed4:	4798      	blx	r3
		system_gclk_chan_enable(SYSCTRL_GCLK_ID_DFLL48);
    1ed6:	2000      	movs	r0, #0
    1ed8:	4b1c      	ldr	r3, [pc, #112]	; (1f4c <system_clock_init+0x1a4>)
    1eda:	4798      	blx	r3
#endif


	/* DFLL Enable (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_DFLL);
    1edc:	2007      	movs	r0, #7
    1ede:	47c8      	blx	r9

	default:
		return false;
	}

	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
    1ee0:	490f      	ldr	r1, [pc, #60]	; (1f20 <system_clock_init+0x178>)
    1ee2:	22d0      	movs	r2, #208	; 0xd0
    1ee4:	68cb      	ldr	r3, [r1, #12]
    1ee6:	4013      	ands	r3, r2


	/* DFLL Enable (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_DFLL);
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_DFLL));
    1ee8:	2bd0      	cmp	r3, #208	; 0xd0
    1eea:	d1fb      	bne.n	1ee4 <system_clock_init+0x13c>
 */
static inline void system_cpu_clock_set_divider(
		const enum system_main_clock_div divider)
{
	Assert(((uint32_t)divider & PM_CPUSEL_CPUDIV_Msk) == divider);
	PM->CPUSEL.reg = (uint32_t)divider;
    1eec:	4a18      	ldr	r2, [pc, #96]	; (1f50 <system_clock_init+0x1a8>)
    1eee:	2300      	movs	r3, #0
    1ef0:	7213      	strb	r3, [r2, #8]
		const enum system_clock_apb_bus bus,
		const enum system_main_clock_div divider)
{
	switch (bus) {
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBASEL.reg = (uint32_t)divider;
    1ef2:	7253      	strb	r3, [r2, #9]
			break;
		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBSEL.reg = (uint32_t)divider;
    1ef4:	7293      	strb	r3, [r2, #10]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
	config->high_when_disabled = false;
    1ef6:	a901      	add	r1, sp, #4
    1ef8:	704b      	strb	r3, [r1, #1]
	config->source_clock       = GCLK_SOURCE_OSC8M;
	config->run_in_standby     = false;
    1efa:	720b      	strb	r3, [r1, #8]
	config->output_enable      = false;
    1efc:	724b      	strb	r3, [r1, #9]
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBB, CONF_CLOCK_APBB_DIVIDER);

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
    1efe:	3307      	adds	r3, #7
    1f00:	700b      	strb	r3, [r1, #0]
    1f02:	3b01      	subs	r3, #1
    1f04:	604b      	str	r3, [r1, #4]
    1f06:	2000      	movs	r0, #0
    1f08:	4b0e      	ldr	r3, [pc, #56]	; (1f44 <system_clock_init+0x19c>)
    1f0a:	4798      	blx	r3
    1f0c:	2000      	movs	r0, #0
    1f0e:	4b0e      	ldr	r3, [pc, #56]	; (1f48 <system_clock_init+0x1a0>)
    1f10:	4798      	blx	r3
#endif
}
    1f12:	b00e      	add	sp, #56	; 0x38
    1f14:	bc1c      	pop	{r2, r3, r4}
    1f16:	4690      	mov	r8, r2
    1f18:	4699      	mov	r9, r3
    1f1a:	46a2      	mov	sl, r4
    1f1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1f1e:	46c0      	nop			; (mov r8, r8)
    1f20:	40000800 	.word	0x40000800
    1f24:	41004000 	.word	0x41004000
    1f28:	0000218d 	.word	0x0000218d
    1f2c:	00001bc1 	.word	0x00001bc1
    1f30:	00001d09 	.word	0x00001d09
    1f34:	000005b9 	.word	0x000005b9
    1f38:	00001c99 	.word	0x00001c99
    1f3c:	00001b85 	.word	0x00001b85
    1f40:	00001f55 	.word	0x00001f55
    1f44:	00001f79 	.word	0x00001f79
    1f48:	00002031 	.word	0x00002031
    1f4c:	00002101 	.word	0x00002101
    1f50:	40000400 	.word	0x40000400

00001f54 <system_gclk_init>:
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
	switch (bus) {
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
    1f54:	4a06      	ldr	r2, [pc, #24]	; (1f70 <system_gclk_init+0x1c>)
    1f56:	6991      	ldr	r1, [r2, #24]
    1f58:	2308      	movs	r3, #8
    1f5a:	430b      	orrs	r3, r1
    1f5c:	6193      	str	r3, [r2, #24]
{
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
    1f5e:	2201      	movs	r2, #1
    1f60:	4b04      	ldr	r3, [pc, #16]	; (1f74 <system_gclk_init+0x20>)
    1f62:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
    1f64:	1c19      	adds	r1, r3, #0
    1f66:	780b      	ldrb	r3, [r1, #0]
    1f68:	4213      	tst	r3, r2
    1f6a:	d1fc      	bne.n	1f66 <system_gclk_init+0x12>
		/* Wait for reset to complete */
	}
}
    1f6c:	4770      	bx	lr
    1f6e:	46c0      	nop			; (mov r8, r8)
    1f70:	40000400 	.word	0x40000400
    1f74:	40000c00 	.word	0x40000c00

00001f78 <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    1f78:	b570      	push	{r4, r5, r6, lr}
    1f7a:	1c06      	adds	r6, r0, #0
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
    1f7c:	1c04      	adds	r4, r0, #0
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
    1f7e:	780d      	ldrb	r5, [r1, #0]
    1f80:	022d      	lsls	r5, r5, #8
    1f82:	4305      	orrs	r5, r0

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    1f84:	784b      	ldrb	r3, [r1, #1]
    1f86:	2b00      	cmp	r3, #0
    1f88:	d002      	beq.n	1f90 <system_gclk_gen_set_config+0x18>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
    1f8a:	2380      	movs	r3, #128	; 0x80
    1f8c:	02db      	lsls	r3, r3, #11
    1f8e:	431d      	orrs	r5, r3
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
    1f90:	7a4b      	ldrb	r3, [r1, #9]
    1f92:	2b00      	cmp	r3, #0
    1f94:	d002      	beq.n	1f9c <system_gclk_gen_set_config+0x24>
		new_genctrl_config |= GCLK_GENCTRL_OE;
    1f96:	2380      	movs	r3, #128	; 0x80
    1f98:	031b      	lsls	r3, r3, #12
    1f9a:	431d      	orrs	r5, r3
	}

	/* Set division factor */
	if (config->division_factor > 1) {
    1f9c:	6848      	ldr	r0, [r1, #4]
    1f9e:	2801      	cmp	r0, #1
    1fa0:	d918      	bls.n	1fd4 <system_gclk_gen_set_config+0x5c>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
    1fa2:	1e43      	subs	r3, r0, #1
    1fa4:	4218      	tst	r0, r3
    1fa6:	d110      	bne.n	1fca <system_gclk_gen_set_config+0x52>
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    1fa8:	2802      	cmp	r0, #2
    1faa:	d906      	bls.n	1fba <system_gclk_gen_set_config+0x42>
    1fac:	2302      	movs	r3, #2
    1fae:	2200      	movs	r2, #0
						mask <<= 1) {
				div2_count++;
    1fb0:	3201      	adds	r2, #1

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
						mask <<= 1) {
    1fb2:	005b      	lsls	r3, r3, #1
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    1fb4:	4298      	cmp	r0, r3
    1fb6:	d8fb      	bhi.n	1fb0 <system_gclk_gen_set_config+0x38>
    1fb8:	e000      	b.n	1fbc <system_gclk_gen_set_config+0x44>
    1fba:	2200      	movs	r2, #0
						mask <<= 1) {
				div2_count++;
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
    1fbc:	0212      	lsls	r2, r2, #8
    1fbe:	4332      	orrs	r2, r6
    1fc0:	1c14      	adds	r4, r2, #0
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    1fc2:	2380      	movs	r3, #128	; 0x80
    1fc4:	035b      	lsls	r3, r3, #13
    1fc6:	431d      	orrs	r5, r3
    1fc8:	e004      	b.n	1fd4 <system_gclk_gen_set_config+0x5c>
		} else {
			/* Set integer division factor */

			new_gendiv_config  |=
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
    1fca:	0204      	lsls	r4, r0, #8
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
		} else {
			/* Set integer division factor */

			new_gendiv_config  |=
    1fcc:	4334      	orrs	r4, r6
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;

			/* Enable non-binary division with increased duty cycle accuracy */
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    1fce:	2380      	movs	r3, #128	; 0x80
    1fd0:	029b      	lsls	r3, r3, #10
    1fd2:	431d      	orrs	r5, r3
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    1fd4:	7a0b      	ldrb	r3, [r1, #8]
    1fd6:	2b00      	cmp	r3, #0
    1fd8:	d002      	beq.n	1fe0 <system_gclk_gen_set_config+0x68>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    1fda:	2380      	movs	r3, #128	; 0x80
    1fdc:	039b      	lsls	r3, r3, #14
    1fde:	431d      	orrs	r5, r3
 * \retval true if the module has completed synchronization
 * \retval false if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY) {
    1fe0:	4a0f      	ldr	r2, [pc, #60]	; (2020 <STACK_SIZE+0x20>)
    1fe2:	7853      	ldrb	r3, [r2, #1]
	}

	while (system_gclk_is_syncing()) {
    1fe4:	b25b      	sxtb	r3, r3
    1fe6:	2b00      	cmp	r3, #0
    1fe8:	dbfb      	blt.n	1fe2 <system_gclk_gen_set_config+0x6a>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    1fea:	4b0e      	ldr	r3, [pc, #56]	; (2024 <STACK_SIZE+0x24>)
    1fec:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    1fee:	4b0e      	ldr	r3, [pc, #56]	; (2028 <STACK_SIZE+0x28>)
    1ff0:	701e      	strb	r6, [r3, #0]
    1ff2:	4a0b      	ldr	r2, [pc, #44]	; (2020 <STACK_SIZE+0x20>)
    1ff4:	7853      	ldrb	r3, [r2, #1]

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
    1ff6:	b25b      	sxtb	r3, r3
    1ff8:	2b00      	cmp	r3, #0
    1ffa:	dbfb      	blt.n	1ff4 <system_gclk_gen_set_config+0x7c>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
    1ffc:	4b08      	ldr	r3, [pc, #32]	; (2020 <STACK_SIZE+0x20>)
    1ffe:	609c      	str	r4, [r3, #8]
    2000:	1c1a      	adds	r2, r3, #0
    2002:	7853      	ldrb	r3, [r2, #1]

	while (system_gclk_is_syncing()) {
    2004:	b25b      	sxtb	r3, r3
    2006:	2b00      	cmp	r3, #0
    2008:	dbfb      	blt.n	2002 <STACK_SIZE+0x2>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
    200a:	4a05      	ldr	r2, [pc, #20]	; (2020 <STACK_SIZE+0x20>)
    200c:	6851      	ldr	r1, [r2, #4]
    200e:	2380      	movs	r3, #128	; 0x80
    2010:	025b      	lsls	r3, r3, #9
    2012:	400b      	ands	r3, r1
    2014:	431d      	orrs	r5, r3
    2016:	6055      	str	r5, [r2, #4]
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    2018:	4b04      	ldr	r3, [pc, #16]	; (202c <STACK_SIZE+0x2c>)
    201a:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    201c:	bd70      	pop	{r4, r5, r6, pc}
    201e:	46c0      	nop			; (mov r8, r8)
    2020:	40000c00 	.word	0x40000c00
    2024:	000001a5 	.word	0x000001a5
    2028:	40000c08 	.word	0x40000c08
    202c:	000001e5 	.word	0x000001e5

00002030 <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    2030:	b510      	push	{r4, lr}
    2032:	1c04      	adds	r4, r0, #0
    2034:	4a0b      	ldr	r2, [pc, #44]	; (2064 <system_gclk_gen_enable+0x34>)
    2036:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    2038:	b25b      	sxtb	r3, r3
    203a:	2b00      	cmp	r3, #0
    203c:	dbfb      	blt.n	2036 <system_gclk_gen_enable+0x6>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    203e:	4b0a      	ldr	r3, [pc, #40]	; (2068 <system_gclk_gen_enable+0x38>)
    2040:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    2042:	4b0a      	ldr	r3, [pc, #40]	; (206c <system_gclk_gen_enable+0x3c>)
    2044:	701c      	strb	r4, [r3, #0]
    2046:	4a07      	ldr	r2, [pc, #28]	; (2064 <system_gclk_gen_enable+0x34>)
    2048:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    204a:	b25b      	sxtb	r3, r3
    204c:	2b00      	cmp	r3, #0
    204e:	dbfb      	blt.n	2048 <system_gclk_gen_enable+0x18>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
    2050:	4a04      	ldr	r2, [pc, #16]	; (2064 <system_gclk_gen_enable+0x34>)
    2052:	6853      	ldr	r3, [r2, #4]
    2054:	2180      	movs	r1, #128	; 0x80
    2056:	0249      	lsls	r1, r1, #9
    2058:	430b      	orrs	r3, r1
    205a:	6053      	str	r3, [r2, #4]
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    205c:	4b04      	ldr	r3, [pc, #16]	; (2070 <system_gclk_gen_enable+0x40>)
    205e:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    2060:	bd10      	pop	{r4, pc}
    2062:	46c0      	nop			; (mov r8, r8)
    2064:	40000c00 	.word	0x40000c00
    2068:	000001a5 	.word	0x000001a5
    206c:	40000c04 	.word	0x40000c04
    2070:	000001e5 	.word	0x000001e5

00002074 <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
    2074:	b570      	push	{r4, r5, r6, lr}
    2076:	1c04      	adds	r4, r0, #0
    2078:	4a1a      	ldr	r2, [pc, #104]	; (20e4 <system_gclk_gen_get_hz+0x70>)
    207a:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    207c:	b25b      	sxtb	r3, r3
    207e:	2b00      	cmp	r3, #0
    2080:	dbfb      	blt.n	207a <system_gclk_gen_get_hz+0x6>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    2082:	4b19      	ldr	r3, [pc, #100]	; (20e8 <system_gclk_gen_get_hz+0x74>)
    2084:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    2086:	4b19      	ldr	r3, [pc, #100]	; (20ec <system_gclk_gen_get_hz+0x78>)
    2088:	701c      	strb	r4, [r3, #0]
    208a:	4a16      	ldr	r2, [pc, #88]	; (20e4 <system_gclk_gen_get_hz+0x70>)
    208c:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    208e:	b25b      	sxtb	r3, r3
    2090:	2b00      	cmp	r3, #0
    2092:	dbfb      	blt.n	208c <system_gclk_gen_get_hz+0x18>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
    2094:	4e13      	ldr	r6, [pc, #76]	; (20e4 <system_gclk_gen_get_hz+0x70>)
    2096:	6870      	ldr	r0, [r6, #4]
    2098:	04c0      	lsls	r0, r0, #19
    209a:	0ec0      	lsrs	r0, r0, #27
	while (system_gclk_is_syncing()) {
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
    209c:	4b14      	ldr	r3, [pc, #80]	; (20f0 <system_gclk_gen_get_hz+0x7c>)
    209e:	4798      	blx	r3
    20a0:	1c05      	adds	r5, r0, #0
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    20a2:	4b12      	ldr	r3, [pc, #72]	; (20ec <system_gclk_gen_get_hz+0x78>)
    20a4:	701c      	strb	r4, [r3, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
    20a6:	6876      	ldr	r6, [r6, #4]
    20a8:	02f6      	lsls	r6, r6, #11
    20aa:	0ff6      	lsrs	r6, r6, #31

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    20ac:	4b11      	ldr	r3, [pc, #68]	; (20f4 <system_gclk_gen_get_hz+0x80>)
    20ae:	701c      	strb	r4, [r3, #0]
    20b0:	4a0c      	ldr	r2, [pc, #48]	; (20e4 <system_gclk_gen_get_hz+0x70>)
    20b2:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    20b4:	b25b      	sxtb	r3, r3
    20b6:	2b00      	cmp	r3, #0
    20b8:	dbfb      	blt.n	20b2 <system_gclk_gen_get_hz+0x3e>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
    20ba:	4b0a      	ldr	r3, [pc, #40]	; (20e4 <system_gclk_gen_get_hz+0x70>)
    20bc:	689c      	ldr	r4, [r3, #8]
    20be:	0a24      	lsrs	r4, r4, #8
    20c0:	b2a4      	uxth	r4, r4
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    20c2:	4b0d      	ldr	r3, [pc, #52]	; (20f8 <system_gclk_gen_get_hz+0x84>)
    20c4:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    20c6:	2e00      	cmp	r6, #0
    20c8:	d107      	bne.n	20da <system_gclk_gen_get_hz+0x66>
    20ca:	2c01      	cmp	r4, #1
    20cc:	d907      	bls.n	20de <system_gclk_gen_get_hz+0x6a>
		gen_input_hz /= divider;
    20ce:	1c28      	adds	r0, r5, #0
    20d0:	1c21      	adds	r1, r4, #0
    20d2:	4b0a      	ldr	r3, [pc, #40]	; (20fc <system_gclk_gen_get_hz+0x88>)
    20d4:	4798      	blx	r3
    20d6:	1c05      	adds	r5, r0, #0
    20d8:	e001      	b.n	20de <system_gclk_gen_get_hz+0x6a>
	} else if (divsel) {
		gen_input_hz >>= (divider+1);
    20da:	3401      	adds	r4, #1
    20dc:	40e5      	lsrs	r5, r4
	}

	return gen_input_hz;
}
    20de:	1c28      	adds	r0, r5, #0
    20e0:	bd70      	pop	{r4, r5, r6, pc}
    20e2:	46c0      	nop			; (mov r8, r8)
    20e4:	40000c00 	.word	0x40000c00
    20e8:	000001a5 	.word	0x000001a5
    20ec:	40000c04 	.word	0x40000c04
    20f0:	00001af5 	.word	0x00001af5
    20f4:	40000c08 	.word	0x40000c08
    20f8:	000001e5 	.word	0x000001e5
    20fc:	0001076d 	.word	0x0001076d

00002100 <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    2100:	b510      	push	{r4, lr}
    2102:	1c04      	adds	r4, r0, #0
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    2104:	4b06      	ldr	r3, [pc, #24]	; (2120 <system_gclk_chan_enable+0x20>)
    2106:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    2108:	4b06      	ldr	r3, [pc, #24]	; (2124 <system_gclk_chan_enable+0x24>)
    210a:	701c      	strb	r4, [r3, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
    210c:	4a06      	ldr	r2, [pc, #24]	; (2128 <system_gclk_chan_enable+0x28>)
    210e:	8851      	ldrh	r1, [r2, #2]
    2110:	2380      	movs	r3, #128	; 0x80
    2112:	01db      	lsls	r3, r3, #7
    2114:	430b      	orrs	r3, r1
    2116:	8053      	strh	r3, [r2, #2]
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    2118:	4b04      	ldr	r3, [pc, #16]	; (212c <system_gclk_chan_enable+0x2c>)
    211a:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    211c:	bd10      	pop	{r4, pc}
    211e:	46c0      	nop			; (mov r8, r8)
    2120:	000001a5 	.word	0x000001a5
    2124:	40000c02 	.word	0x40000c02
    2128:	40000c00 	.word	0x40000c00
    212c:	000001e5 	.word	0x000001e5

00002130 <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    2130:	b510      	push	{r4, lr}
    2132:	1c04      	adds	r4, r0, #0
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    2134:	4b0f      	ldr	r3, [pc, #60]	; (2174 <system_gclk_chan_disable+0x44>)
    2136:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    2138:	4b0f      	ldr	r3, [pc, #60]	; (2178 <system_gclk_chan_disable+0x48>)
    213a:	701c      	strb	r4, [r3, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
    213c:	4b0f      	ldr	r3, [pc, #60]	; (217c <system_gclk_chan_disable+0x4c>)
    213e:	885a      	ldrh	r2, [r3, #2]
    2140:	0512      	lsls	r2, r2, #20
    2142:	0f10      	lsrs	r0, r2, #28
	GCLK->CLKCTRL.bit.GEN = 0;
    2144:	8859      	ldrh	r1, [r3, #2]
    2146:	4a0e      	ldr	r2, [pc, #56]	; (2180 <system_gclk_chan_disable+0x50>)
    2148:	400a      	ands	r2, r1
    214a:	805a      	strh	r2, [r3, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
    214c:	8859      	ldrh	r1, [r3, #2]
    214e:	4a0d      	ldr	r2, [pc, #52]	; (2184 <system_gclk_chan_disable+0x54>)
    2150:	400a      	ands	r2, r1
    2152:	805a      	strh	r2, [r3, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
    2154:	1c19      	adds	r1, r3, #0
    2156:	2280      	movs	r2, #128	; 0x80
    2158:	01d2      	lsls	r2, r2, #7
    215a:	884b      	ldrh	r3, [r1, #2]
    215c:	4213      	tst	r3, r2
    215e:	d1fc      	bne.n	215a <system_gclk_chan_disable+0x2a>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
    2160:	4906      	ldr	r1, [pc, #24]	; (217c <system_gclk_chan_disable+0x4c>)
    2162:	0202      	lsls	r2, r0, #8
    2164:	8848      	ldrh	r0, [r1, #2]
    2166:	4b06      	ldr	r3, [pc, #24]	; (2180 <system_gclk_chan_disable+0x50>)
    2168:	4003      	ands	r3, r0
    216a:	4313      	orrs	r3, r2
    216c:	804b      	strh	r3, [r1, #2]
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    216e:	4b06      	ldr	r3, [pc, #24]	; (2188 <system_gclk_chan_disable+0x58>)
    2170:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    2172:	bd10      	pop	{r4, pc}
    2174:	000001a5 	.word	0x000001a5
    2178:	40000c02 	.word	0x40000c02
    217c:	40000c00 	.word	0x40000c00
    2180:	fffff0ff 	.word	0xfffff0ff
    2184:	ffffbfff 	.word	0xffffbfff
    2188:	000001e5 	.word	0x000001e5

0000218c <system_gclk_chan_set_config>:
 *
 */
void system_gclk_chan_set_config(
		const uint8_t channel,
		struct system_gclk_chan_config *const config)
{
    218c:	b510      	push	{r4, lr}

	/* Cache the new config to reduce sync requirements */
	uint32_t new_clkctrl_config = (channel << GCLK_CLKCTRL_ID_Pos);

	/* Select the desired generic clock generator */
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
    218e:	780c      	ldrb	r4, [r1, #0]
    2190:	0224      	lsls	r4, r4, #8
    2192:	4304      	orrs	r4, r0

	/* Disable generic clock channel */
	system_gclk_chan_disable(channel);
    2194:	4b02      	ldr	r3, [pc, #8]	; (21a0 <system_gclk_chan_set_config+0x14>)
    2196:	4798      	blx	r3

	/* Write the new configuration */
	GCLK->CLKCTRL.reg = new_clkctrl_config;
    2198:	b2a4      	uxth	r4, r4
    219a:	4b02      	ldr	r3, [pc, #8]	; (21a4 <system_gclk_chan_set_config+0x18>)
    219c:	805c      	strh	r4, [r3, #2]
}
    219e:	bd10      	pop	{r4, pc}
    21a0:	00002131 	.word	0x00002131
    21a4:	40000c00 	.word	0x40000c00

000021a8 <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    21a8:	b510      	push	{r4, lr}
    21aa:	1c04      	adds	r4, r0, #0
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    21ac:	4b06      	ldr	r3, [pc, #24]	; (21c8 <system_gclk_chan_get_hz+0x20>)
    21ae:	4798      	blx	r3
	uint8_t gen_id;

	system_interrupt_enter_critical_section();

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    21b0:	4b06      	ldr	r3, [pc, #24]	; (21cc <system_gclk_chan_get_hz+0x24>)
    21b2:	701c      	strb	r4, [r3, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
    21b4:	4b06      	ldr	r3, [pc, #24]	; (21d0 <system_gclk_chan_get_hz+0x28>)
    21b6:	885c      	ldrh	r4, [r3, #2]
    21b8:	0524      	lsls	r4, r4, #20
    21ba:	0f24      	lsrs	r4, r4, #28
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    21bc:	4b05      	ldr	r3, [pc, #20]	; (21d4 <system_gclk_chan_get_hz+0x2c>)
    21be:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    21c0:	1c20      	adds	r0, r4, #0
    21c2:	4b05      	ldr	r3, [pc, #20]	; (21d8 <system_gclk_chan_get_hz+0x30>)
    21c4:	4798      	blx	r3
}
    21c6:	bd10      	pop	{r4, pc}
    21c8:	000001a5 	.word	0x000001a5
    21cc:	40000c02 	.word	0x40000c02
    21d0:	40000c00 	.word	0x40000c00
    21d4:	000001e5 	.word	0x000001e5
    21d8:	00002075 	.word	0x00002075

000021dc <system_interrupt_set_priority>:
 * \retval STATUS_INVALID_ARG  If an unsupported interrupt vector number was given
 */
enum status_code system_interrupt_set_priority(
		const enum system_interrupt_vector vector,
		const enum system_interrupt_priority_level priority_level)
{
    21dc:	b5f0      	push	{r4, r5, r6, r7, lr}
	enum status_code status = STATUS_OK;

	if (vector >= _SYSTEM_INTERRUPT_EXTERNAL_VECTOR_START) {
    21de:	2800      	cmp	r0, #0
    21e0:	db1a      	blt.n	2218 <system_interrupt_set_priority+0x3c>
		uint8_t register_num = vector / 4;
    21e2:	17c6      	asrs	r6, r0, #31
    21e4:	0fb6      	lsrs	r6, r6, #30
    21e6:	1830      	adds	r0, r6, r0
    21e8:	22ff      	movs	r2, #255	; 0xff
    21ea:	0092      	lsls	r2, r2, #2
    21ec:	4002      	ands	r2, r0
    21ee:	4b0f      	ldr	r3, [pc, #60]	; (222c <system_interrupt_set_priority+0x50>)
    21f0:	469c      	mov	ip, r3
    21f2:	4462      	add	r2, ip
		uint8_t priority_pos = ((vector % 4) * 8) + (8 - __NVIC_PRIO_BITS);

		NVIC->IP[register_num] =
				(NVIC->IP[register_num] & ~(0x3 << priority_pos)) |
    21f4:	25c0      	movs	r5, #192	; 0xc0
    21f6:	00ad      	lsls	r5, r5, #2
    21f8:	5957      	ldr	r7, [r2, r5]
{
	enum status_code status = STATUS_OK;

	if (vector >= _SYSTEM_INTERRUPT_EXTERNAL_VECTOR_START) {
		uint8_t register_num = vector / 4;
		uint8_t priority_pos = ((vector % 4) * 8) + (8 - __NVIC_PRIO_BITS);
    21fa:	2403      	movs	r4, #3
    21fc:	4020      	ands	r0, r4
    21fe:	1b80      	subs	r0, r0, r6
    2200:	00c0      	lsls	r0, r0, #3
    2202:	3006      	adds	r0, #6

		NVIC->IP[register_num] =
				(NVIC->IP[register_num] & ~(0x3 << priority_pos)) |
    2204:	b2c3      	uxtb	r3, r0
    2206:	409c      	lsls	r4, r3
    2208:	1c38      	adds	r0, r7, #0
    220a:	43a0      	bics	r0, r4
				(priority_level << priority_pos);
    220c:	4099      	lsls	r1, r3
	if (vector >= _SYSTEM_INTERRUPT_EXTERNAL_VECTOR_START) {
		uint8_t register_num = vector / 4;
		uint8_t priority_pos = ((vector % 4) * 8) + (8 - __NVIC_PRIO_BITS);

		NVIC->IP[register_num] =
				(NVIC->IP[register_num] & ~(0x3 << priority_pos)) |
    220e:	1c03      	adds	r3, r0, #0
    2210:	430b      	orrs	r3, r1

	if (vector >= _SYSTEM_INTERRUPT_EXTERNAL_VECTOR_START) {
		uint8_t register_num = vector / 4;
		uint8_t priority_pos = ((vector % 4) * 8) + (8 - __NVIC_PRIO_BITS);

		NVIC->IP[register_num] =
    2212:	5153      	str	r3, [r2, r5]
 */
enum status_code system_interrupt_set_priority(
		const enum system_interrupt_vector vector,
		const enum system_interrupt_priority_level priority_level)
{
	enum status_code status = STATUS_OK;
    2214:	2300      	movs	r3, #0
    2216:	e006      	b.n	2226 <system_interrupt_set_priority+0x4a>

	} else if (vector == SYSTEM_INTERRUPT_SYSTICK) {
		SCB->SHP[1] = (priority_level << _SYSTEM_INTERRUPT_SYSTICK_PRI_POS);
	} else {
		Assert(false);
		status = STATUS_ERR_INVALID_ARG;
    2218:	2317      	movs	r3, #23

		NVIC->IP[register_num] =
				(NVIC->IP[register_num] & ~(0x3 << priority_pos)) |
				(priority_level << priority_pos);

	} else if (vector == SYSTEM_INTERRUPT_SYSTICK) {
    221a:	1c42      	adds	r2, r0, #1
    221c:	d103      	bne.n	2226 <system_interrupt_set_priority+0x4a>
		SCB->SHP[1] = (priority_level << _SYSTEM_INTERRUPT_SYSTICK_PRI_POS);
    221e:	0749      	lsls	r1, r1, #29
    2220:	4b03      	ldr	r3, [pc, #12]	; (2230 <system_interrupt_set_priority+0x54>)
    2222:	6219      	str	r1, [r3, #32]
 */
enum status_code system_interrupt_set_priority(
		const enum system_interrupt_vector vector,
		const enum system_interrupt_priority_level priority_level)
{
	enum status_code status = STATUS_OK;
    2224:	2300      	movs	r3, #0
		Assert(false);
		status = STATUS_ERR_INVALID_ARG;
	}

	return status;
}
    2226:	1c18      	adds	r0, r3, #0
    2228:	bdf0      	pop	{r4, r5, r6, r7, pc}
    222a:	46c0      	nop			; (mov r8, r8)
    222c:	e000e100 	.word	0xe000e100
    2230:	e000ed00 	.word	0xe000ed00

00002234 <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
    2234:	b530      	push	{r4, r5, lr}

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    2236:	78d3      	ldrb	r3, [r2, #3]
    2238:	2b00      	cmp	r3, #0
    223a:	d11e      	bne.n	227a <_system_pinmux_config+0x46>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    223c:	7814      	ldrb	r4, [r2, #0]
    223e:	2c80      	cmp	r4, #128	; 0x80
    2240:	d004      	beq.n	224c <_system_pinmux_config+0x18>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    2242:	0624      	lsls	r4, r4, #24
    2244:	2380      	movs	r3, #128	; 0x80
    2246:	025b      	lsls	r3, r3, #9
    2248:	431c      	orrs	r4, r3
    224a:	e000      	b.n	224e <_system_pinmux_config+0x1a>
{
	Assert(port);
	Assert(config);

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;
    224c:	2400      	movs	r4, #0
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    224e:	7853      	ldrb	r3, [r2, #1]
    2250:	2502      	movs	r5, #2
    2252:	43ab      	bics	r3, r5
    2254:	d10a      	bne.n	226c <_system_pinmux_config+0x38>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    2256:	7893      	ldrb	r3, [r2, #2]
    2258:	2b00      	cmp	r3, #0
    225a:	d103      	bne.n	2264 <_system_pinmux_config+0x30>

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;
    225c:	2380      	movs	r3, #128	; 0x80
    225e:	029b      	lsls	r3, r3, #10
    2260:	431c      	orrs	r4, r3
    2262:	e002      	b.n	226a <_system_pinmux_config+0x36>

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    2264:	23c0      	movs	r3, #192	; 0xc0
    2266:	02db      	lsls	r3, r3, #11
    2268:	431c      	orrs	r4, r3
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    226a:	6041      	str	r1, [r0, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    226c:	7853      	ldrb	r3, [r2, #1]
    226e:	3b01      	subs	r3, #1
    2270:	2b01      	cmp	r3, #1
    2272:	d812      	bhi.n	229a <_system_pinmux_config+0x66>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Cannot use a pullup if the output driver is enabled,
			 * if requested the input buffer can only sample the current
			 * output state */
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    2274:	4b18      	ldr	r3, [pc, #96]	; (22d8 <_system_pinmux_config+0xa4>)
    2276:	401c      	ands	r4, r3
    2278:	e00f      	b.n	229a <_system_pinmux_config+0x66>
		}
	} else {
		port->DIRCLR.reg = pin_mask;
    227a:	6041      	str	r1, [r0, #4]
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    227c:	040b      	lsls	r3, r1, #16
    227e:	0c1b      	lsrs	r3, r3, #16

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    2280:	24a0      	movs	r4, #160	; 0xa0
    2282:	05e4      	lsls	r4, r4, #23
    2284:	4323      	orrs	r3, r4
	uint32_t upper_pin_mask = (pin_mask >> 16);

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    2286:	6283      	str	r3, [r0, #40]	; 0x28
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
	uint32_t upper_pin_mask = (pin_mask >> 16);
    2288:	0c0b      	lsrs	r3, r1, #16

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    228a:	24d0      	movs	r4, #208	; 0xd0
    228c:	0624      	lsls	r4, r4, #24
    228e:	4323      	orrs	r3, r4
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    2290:	6283      	str	r3, [r0, #40]	; 0x28
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    2292:	78d3      	ldrb	r3, [r2, #3]
    2294:	2b00      	cmp	r3, #0
    2296:	d018      	beq.n	22ca <_system_pinmux_config+0x96>
    2298:	e01c      	b.n	22d4 <_system_pinmux_config+0xa0>
		port->DIRCLR.reg = pin_mask;
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    229a:	040b      	lsls	r3, r1, #16
    229c:	0c1b      	lsrs	r3, r3, #16
    229e:	25a0      	movs	r5, #160	; 0xa0
    22a0:	05ed      	lsls	r5, r5, #23
    22a2:	432b      	orrs	r3, r5

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    22a4:	4323      	orrs	r3, r4
	uint32_t upper_pin_mask = (pin_mask >> 16);

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    22a6:	6283      	str	r3, [r0, #40]	; 0x28
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
	uint32_t upper_pin_mask = (pin_mask >> 16);
    22a8:	0c0b      	lsrs	r3, r1, #16
    22aa:	25d0      	movs	r5, #208	; 0xd0
    22ac:	062d      	lsls	r5, r5, #24
    22ae:	432b      	orrs	r3, r5

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    22b0:	4323      	orrs	r3, r4
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    22b2:	6283      	str	r3, [r0, #40]	; 0x28
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    22b4:	78d3      	ldrb	r3, [r2, #3]
    22b6:	2b00      	cmp	r3, #0
    22b8:	d10c      	bne.n	22d4 <_system_pinmux_config+0xa0>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    22ba:	0363      	lsls	r3, r4, #13
    22bc:	d505      	bpl.n	22ca <_system_pinmux_config+0x96>
			/* Set the OUT register bits to enable the pullup if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    22be:	7893      	ldrb	r3, [r2, #2]
    22c0:	2b01      	cmp	r3, #1
    22c2:	d101      	bne.n	22c8 <_system_pinmux_config+0x94>
				port->OUTSET.reg = pin_mask;
    22c4:	6181      	str	r1, [r0, #24]
    22c6:	e000      	b.n	22ca <_system_pinmux_config+0x96>
			} else {
				port->OUTCLR.reg = pin_mask;
    22c8:	6141      	str	r1, [r0, #20]
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    22ca:	7853      	ldrb	r3, [r2, #1]
    22cc:	3b01      	subs	r3, #1
    22ce:	2b01      	cmp	r3, #1
    22d0:	d800      	bhi.n	22d4 <_system_pinmux_config+0xa0>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
    22d2:	6081      	str	r1, [r0, #8]
		}
	}
}
    22d4:	bd30      	pop	{r4, r5, pc}
    22d6:	46c0      	nop			; (mov r8, r8)
    22d8:	fffbffff 	.word	0xfffbffff

000022dc <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin.
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    22dc:	b508      	push	{r3, lr}
    22de:	1c03      	adds	r3, r0, #0
    22e0:	1c0a      	adds	r2, r1, #0
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports. */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    22e2:	09c1      	lsrs	r1, r0, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
    22e4:	2000      	movs	r0, #0
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports. */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    22e6:	2900      	cmp	r1, #0
    22e8:	d104      	bne.n	22f4 <system_pinmux_pin_set_config+0x18>
		return &(ports[port_index]->Group[group_index]);
    22ea:	0958      	lsrs	r0, r3, #5
    22ec:	01c0      	lsls	r0, r0, #7
    22ee:	4905      	ldr	r1, [pc, #20]	; (2304 <system_pinmux_pin_set_config+0x28>)
    22f0:	468c      	mov	ip, r1
    22f2:	4460      	add	r0, ip
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
    22f4:	211f      	movs	r1, #31
    22f6:	400b      	ands	r3, r1
    22f8:	391e      	subs	r1, #30
    22fa:	4099      	lsls	r1, r3

	_system_pinmux_config(port, pin_mask, config);
    22fc:	4b02      	ldr	r3, [pc, #8]	; (2308 <system_pinmux_pin_set_config+0x2c>)
    22fe:	4798      	blx	r3
}
    2300:	bd08      	pop	{r3, pc}
    2302:	46c0      	nop			; (mov r8, r8)
    2304:	41004400 	.word	0x41004400
    2308:	00002235 	.word	0x00002235

0000230c <_system_dummy_init>:
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
	return;
}
    230c:	4770      	bx	lr
    230e:	46c0      	nop			; (mov r8, r8)

00002310 <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    2310:	b508      	push	{r3, lr}
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    2312:	4b04      	ldr	r3, [pc, #16]	; (2324 <system_init+0x14>)
    2314:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    2316:	4b04      	ldr	r3, [pc, #16]	; (2328 <system_init+0x18>)
    2318:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    231a:	4b04      	ldr	r3, [pc, #16]	; (232c <system_init+0x1c>)
    231c:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    231e:	4b04      	ldr	r3, [pc, #16]	; (2330 <system_init+0x20>)
    2320:	4798      	blx	r3
}
    2322:	bd08      	pop	{r3, pc}
    2324:	00001da9 	.word	0x00001da9
    2328:	00000215 	.word	0x00000215
    232c:	0000230d 	.word	0x0000230d
    2330:	000002fd 	.word	0x000002fd

00002334 <_tc_get_inst_index>:
 *
 * \return Index of the given TC module instance.
 */
uint8_t _tc_get_inst_index(
		Tc *const hw)
{
    2334:	b530      	push	{r4, r5, lr}
    2336:	b085      	sub	sp, #20
	/* List of available TC modules. */
	Tc *const tc_modules[TC_INST_NUM] = TC_INSTS;
    2338:	aa01      	add	r2, sp, #4
    233a:	4b0b      	ldr	r3, [pc, #44]	; (2368 <_tc_get_inst_index+0x34>)
    233c:	cb32      	ldmia	r3!, {r1, r4, r5}
    233e:	c232      	stmia	r2!, {r1, r4, r5}

	/* Find index for TC instance. */
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
		if (hw == tc_modules[i]) {
    2340:	9b01      	ldr	r3, [sp, #4]
    2342:	4283      	cmp	r3, r0
    2344:	d00a      	beq.n	235c <_tc_get_inst_index+0x28>
    2346:	9b02      	ldr	r3, [sp, #8]
    2348:	4283      	cmp	r3, r0
    234a:	d005      	beq.n	2358 <_tc_get_inst_index+0x24>
		}
	}

	/* Invalid data given. */
	Assert(false);
	return 0;
    234c:	2300      	movs	r3, #0
	/* List of available TC modules. */
	Tc *const tc_modules[TC_INST_NUM] = TC_INSTS;

	/* Find index for TC instance. */
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
		if (hw == tc_modules[i]) {
    234e:	9a03      	ldr	r2, [sp, #12]
    2350:	4282      	cmp	r2, r0
    2352:	d105      	bne.n	2360 <_tc_get_inst_index+0x2c>
{
	/* List of available TC modules. */
	Tc *const tc_modules[TC_INST_NUM] = TC_INSTS;

	/* Find index for TC instance. */
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    2354:	3302      	adds	r3, #2
    2356:	e002      	b.n	235e <_tc_get_inst_index+0x2a>
    2358:	2301      	movs	r3, #1
    235a:	e000      	b.n	235e <_tc_get_inst_index+0x2a>
    235c:	2300      	movs	r3, #0
		if (hw == tc_modules[i]) {
			return i;
    235e:	b2db      	uxtb	r3, r3
	}

	/* Invalid data given. */
	Assert(false);
	return 0;
}
    2360:	1c18      	adds	r0, r3, #0
    2362:	b005      	add	sp, #20
    2364:	bd30      	pop	{r4, r5, pc}
    2366:	46c0      	nop			; (mov r8, r8)
    2368:	00012084 	.word	0x00012084

0000236c <tc_init>:
 */
enum status_code tc_init(
		struct tc_module *const module_inst,
		Tc *const hw,
		const struct tc_config *const config)
{
    236c:	b5f0      	push	{r4, r5, r6, r7, lr}
    236e:	464f      	mov	r7, r9
    2370:	4646      	mov	r6, r8
    2372:	b4c0      	push	{r6, r7}
    2374:	b087      	sub	sp, #28
    2376:	1c04      	adds	r4, r0, #0
    2378:	1c0e      	adds	r6, r1, #0
    237a:	4690      	mov	r8, r2
	uint8_t ctrlbset_tmp = 0;
	/* Temporary variable to hold all updates to the CTRLC
	 * register before they are written to it */
	uint8_t ctrlc_tmp = 0;
	/* Temporary variable to hold TC instance number */
	uint8_t instance = _tc_get_inst_index(hw);
    237c:	1c08      	adds	r0, r1, #0
    237e:	4b91      	ldr	r3, [pc, #580]	; (25c4 <tc_init+0x258>)
    2380:	4798      	blx	r3
    2382:	4681      	mov	r9, r0

	/* Array of GLCK ID for different TC instances */
	uint8_t inst_gclk_id[] = TC_INST_GCLK_ID;
    2384:	4d90      	ldr	r5, [pc, #576]	; (25c8 <tc_init+0x25c>)
    2386:	1c29      	adds	r1, r5, #0
    2388:	310c      	adds	r1, #12
    238a:	a805      	add	r0, sp, #20
    238c:	2203      	movs	r2, #3
    238e:	4f8f      	ldr	r7, [pc, #572]	; (25cc <tc_init+0x260>)
    2390:	47b8      	blx	r7
	/* Array of PM APBC mask bit position for different TC instances */
	uint16_t inst_pm_apbmask[] = TC_INST_PM_APBCMASK;
    2392:	1c29      	adds	r1, r5, #0
    2394:	3110      	adds	r1, #16
    2396:	a803      	add	r0, sp, #12
    2398:	2206      	movs	r2, #6
    239a:	47b8      	blx	r7
	struct system_gclk_chan_config gclk_chan_config;

#if TC_ASYNC == true
	/* Initialize parameters */
	for (uint8_t i = 0; i < TC_CALLBACK_N; i++) {
		module_inst->callback[i]        = NULL;
    239c:	2300      	movs	r3, #0
    239e:	60a3      	str	r3, [r4, #8]
    23a0:	60e3      	str	r3, [r4, #12]
    23a2:	6123      	str	r3, [r4, #16]
    23a4:	6163      	str	r3, [r4, #20]
	}
	module_inst->register_callback_mask     = 0x00;
    23a6:	7623      	strb	r3, [r4, #24]
	module_inst->enable_callback_mask       = 0x00;
    23a8:	7663      	strb	r3, [r4, #25]

	/* Register this instance for callbacks*/
	_tc_instances[instance] = module_inst;
    23aa:	464b      	mov	r3, r9
    23ac:	009a      	lsls	r2, r3, #2
    23ae:	4b88      	ldr	r3, [pc, #544]	; (25d0 <tc_init+0x264>)
    23b0:	50d4      	str	r4, [r2, r3]
#endif

	/* Associate the given device instance with the hardware module */
	module_inst->hw = hw;
    23b2:	6026      	str	r6, [r4, #0]
#else
	/* Check if odd numbered TC modules are being configured in 32-bit
	 * counter size. Only even numbered counters are allowed to be
	 * configured in 32-bit counter size.
	 */
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT) &&
    23b4:	4643      	mov	r3, r8
    23b6:	789b      	ldrb	r3, [r3, #2]
    23b8:	2b08      	cmp	r3, #8
    23ba:	d104      	bne.n	23c6 <tc_init+0x5a>
			((instance + TC_INSTANCE_OFFSET) & 0x01)) {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    23bc:	2017      	movs	r0, #23
#else
	/* Check if odd numbered TC modules are being configured in 32-bit
	 * counter size. Only even numbered counters are allowed to be
	 * configured in 32-bit counter size.
	 */
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT) &&
    23be:	464a      	mov	r2, r9
    23c0:	07d2      	lsls	r2, r2, #31
    23c2:	d400      	bmi.n	23c6 <tc_init+0x5a>
    23c4:	e0f9      	b.n	25ba <tc_init+0x24e>
#endif

	/* Make the counter size variable in the module_inst struct reflect
	 * the counter size in the module
	 */
	module_inst->counter_size = config->counter_size;
    23c6:	7123      	strb	r3, [r4, #4]

	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_SWRST) {
    23c8:	8833      	ldrh	r3, [r6, #0]
		/* We are in the middle of a reset. Abort. */
		return STATUS_BUSY;
    23ca:	2005      	movs	r0, #5
	/* Make the counter size variable in the module_inst struct reflect
	 * the counter size in the module
	 */
	module_inst->counter_size = config->counter_size;

	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_SWRST) {
    23cc:	07db      	lsls	r3, r3, #31
    23ce:	d500      	bpl.n	23d2 <tc_init+0x66>
    23d0:	e0f3      	b.n	25ba <tc_init+0x24e>
		/* We are in the middle of a reset. Abort. */
		return STATUS_BUSY;
	}

	if (hw->COUNT8.STATUS.reg & TC_STATUS_SLAVE) {
    23d2:	7bf3      	ldrb	r3, [r6, #15]
		/* Module is used as a slave */
		return STATUS_ERR_DENIED;
    23d4:	3017      	adds	r0, #23
	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_SWRST) {
		/* We are in the middle of a reset. Abort. */
		return STATUS_BUSY;
	}

	if (hw->COUNT8.STATUS.reg & TC_STATUS_SLAVE) {
    23d6:	06db      	lsls	r3, r3, #27
    23d8:	d500      	bpl.n	23dc <tc_init+0x70>
    23da:	e0ee      	b.n	25ba <tc_init+0x24e>
		/* Module is used as a slave */
		return STATUS_ERR_DENIED;
	}

	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_ENABLE) {
    23dc:	8833      	ldrh	r3, [r6, #0]
    23de:	079b      	lsls	r3, r3, #30
    23e0:	d500      	bpl.n	23e4 <tc_init+0x78>
    23e2:	e0ea      	b.n	25ba <tc_init+0x24e>
		/* Module must be disabled before initialization. Abort. */
		return STATUS_ERR_DENIED;
	}

	/* Set up the TC PWM out pin for channel 0 */
	if (config->pwm_channel[0].enabled) {
    23e4:	4643      	mov	r3, r8
    23e6:	7c1b      	ldrb	r3, [r3, #16]
    23e8:	2b00      	cmp	r3, #0
    23ea:	d00c      	beq.n	2406 <tc_init+0x9a>
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    23ec:	a902      	add	r1, sp, #8
    23ee:	2301      	movs	r3, #1
    23f0:	708b      	strb	r3, [r1, #2]
	config->powersave    = false;
    23f2:	2200      	movs	r2, #0
    23f4:	70ca      	strb	r2, [r1, #3]
		system_pinmux_get_config_defaults(&pin_config);
		pin_config.mux_position = config->pwm_channel[0].pin_mux;
    23f6:	4642      	mov	r2, r8
    23f8:	7e12      	ldrb	r2, [r2, #24]
    23fa:	700a      	strb	r2, [r1, #0]
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
    23fc:	704b      	strb	r3, [r1, #1]
		system_pinmux_pin_set_config(
    23fe:	4643      	mov	r3, r8
    2400:	7d18      	ldrb	r0, [r3, #20]
    2402:	4b74      	ldr	r3, [pc, #464]	; (25d4 <tc_init+0x268>)
    2404:	4798      	blx	r3
				config->pwm_channel[0].pin_out, &pin_config);
	}

	/* Set up the TC PWM out pin for channel 1 */
	if (config->pwm_channel[1].enabled) {
    2406:	4643      	mov	r3, r8
    2408:	7f1b      	ldrb	r3, [r3, #28]
    240a:	2b00      	cmp	r3, #0
    240c:	d00d      	beq.n	242a <tc_init+0xbe>
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    240e:	a902      	add	r1, sp, #8
    2410:	2301      	movs	r3, #1
    2412:	708b      	strb	r3, [r1, #2]
	config->powersave    = false;
    2414:	2200      	movs	r2, #0
    2416:	70ca      	strb	r2, [r1, #3]
		system_pinmux_get_config_defaults(&pin_config);
		pin_config.mux_position = config->pwm_channel[1].pin_mux;
    2418:	4642      	mov	r2, r8
    241a:	6a52      	ldr	r2, [r2, #36]	; 0x24
    241c:	700a      	strb	r2, [r1, #0]
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
    241e:	704b      	strb	r3, [r1, #1]
		system_pinmux_pin_set_config(
    2420:	4643      	mov	r3, r8
    2422:	6a1b      	ldr	r3, [r3, #32]
    2424:	b2d8      	uxtb	r0, r3
    2426:	4b6b      	ldr	r3, [pc, #428]	; (25d4 <tc_init+0x268>)
    2428:	4798      	blx	r3
		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
			break;

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
    242a:	496b      	ldr	r1, [pc, #428]	; (25d8 <tc_init+0x26c>)
    242c:	6a0b      	ldr	r3, [r1, #32]
				config->pwm_channel[1].pin_out, &pin_config);
	}

	/* Enable the user interface clock in the PM */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC,
			inst_pm_apbmask[instance]);
    242e:	464a      	mov	r2, r9
    2430:	0052      	lsls	r2, r2, #1
		system_pinmux_pin_set_config(
				config->pwm_channel[1].pin_out, &pin_config);
	}

	/* Enable the user interface clock in the PM */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC,
    2432:	a803      	add	r0, sp, #12
    2434:	5a12      	ldrh	r2, [r2, r0]
    2436:	4313      	orrs	r3, r2
    2438:	620b      	str	r3, [r1, #32]
			inst_pm_apbmask[instance]);

	/* Enable the slave counter if counter_size is 32-bit */
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT))
    243a:	4643      	mov	r3, r8
    243c:	789b      	ldrb	r3, [r3, #2]
    243e:	2b08      	cmp	r3, #8
    2440:	d106      	bne.n	2450 <tc_init+0xe4>
    2442:	6a0b      	ldr	r3, [r1, #32]
	{
		/* Enable the user interface clock in the PM */
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC,
				inst_pm_apbmask[instance + 1]);
    2444:	464a      	mov	r2, r9
    2446:	3201      	adds	r2, #1
    2448:	0052      	lsls	r2, r2, #1

	/* Enable the slave counter if counter_size is 32-bit */
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT))
	{
		/* Enable the user interface clock in the PM */
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC,
    244a:	5a12      	ldrh	r2, [r2, r0]
    244c:	4313      	orrs	r3, r2
    244e:	620b      	str	r3, [r1, #32]
				inst_pm_apbmask[instance + 1]);
	}

	/* Setup clock for module */
	system_gclk_chan_get_config_defaults(&gclk_chan_config);
	gclk_chan_config.source_generator = config->clock_source;
    2450:	a901      	add	r1, sp, #4
    2452:	4643      	mov	r3, r8
    2454:	781b      	ldrb	r3, [r3, #0]
    2456:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(inst_gclk_id[instance], &gclk_chan_config);
    2458:	ab05      	add	r3, sp, #20
    245a:	464a      	mov	r2, r9
    245c:	5c9d      	ldrb	r5, [r3, r2]
    245e:	1c28      	adds	r0, r5, #0
    2460:	4b5e      	ldr	r3, [pc, #376]	; (25dc <tc_init+0x270>)
    2462:	4798      	blx	r3
	system_gclk_chan_enable(inst_gclk_id[instance]);
    2464:	1c28      	adds	r0, r5, #0
    2466:	4b5e      	ldr	r3, [pc, #376]	; (25e0 <tc_init+0x274>)
    2468:	4798      	blx	r3
    246a:	4643      	mov	r3, r8
    246c:	8898      	ldrh	r0, [r3, #4]
    246e:	891b      	ldrh	r3, [r3, #8]
    2470:	4303      	orrs	r3, r0

	/* Set ctrla register */
	ctrla_tmp =
    2472:	4642      	mov	r2, r8
    2474:	7990      	ldrb	r0, [r2, #6]
    2476:	7892      	ldrb	r2, [r2, #2]
    2478:	4310      	orrs	r0, r2
    247a:	4318      	orrs	r0, r3
			(uint32_t)config->counter_size |
			(uint32_t)config->wave_generation |
			(uint32_t)config->reload_action |
			(uint32_t)config->clock_prescaler;

	if (config->run_in_standby) {
    247c:	4643      	mov	r3, r8
    247e:	785b      	ldrb	r3, [r3, #1]
    2480:	2b00      	cmp	r3, #0
    2482:	d002      	beq.n	248a <tc_init+0x11e>
		ctrla_tmp |= TC_CTRLA_RUNSTDBY;
    2484:	2380      	movs	r3, #128	; 0x80
    2486:	011b      	lsls	r3, r3, #4
    2488:	4318      	orrs	r0, r3
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    248a:	6821      	ldr	r1, [r4, #0]

	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    248c:	227f      	movs	r2, #127	; 0x7f
    248e:	7bcb      	ldrb	r3, [r1, #15]
	}

	/* Write configuration to register */
	while (tc_is_syncing(module_inst)) {
    2490:	4393      	bics	r3, r2
    2492:	d1fc      	bne.n	248e <tc_init+0x122>
		/* Wait for sync */
	}
	hw->COUNT8.CTRLA.reg = ctrla_tmp;
    2494:	8030      	strh	r0, [r6, #0]

	/* Set ctrlb register */
	if (config->oneshot) {
    2496:	4643      	mov	r3, r8
    2498:	7b58      	ldrb	r0, [r3, #13]
		ctrlbset_tmp = TC_CTRLBSET_ONESHOT;
    249a:	1e43      	subs	r3, r0, #1
    249c:	4198      	sbcs	r0, r3
    249e:	0080      	lsls	r0, r0, #2
	}

	if (config->count_direction) {
    24a0:	4643      	mov	r3, r8
    24a2:	7b9b      	ldrb	r3, [r3, #14]
    24a4:	2b00      	cmp	r3, #0
    24a6:	d001      	beq.n	24ac <tc_init+0x140>
		ctrlbset_tmp |= TC_CTRLBSET_DIR;
    24a8:	2301      	movs	r3, #1
    24aa:	4318      	orrs	r0, r3
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    24ac:	6821      	ldr	r1, [r4, #0]

	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    24ae:	227f      	movs	r2, #127	; 0x7f
    24b0:	7bcb      	ldrb	r3, [r1, #15]
	}

	/* Clear old ctrlb configuration */
	while (tc_is_syncing(module_inst)) {
    24b2:	4393      	bics	r3, r2
    24b4:	d1fc      	bne.n	24b0 <tc_init+0x144>
		/* Wait for sync */
	}
	hw->COUNT8.CTRLBCLR.reg = 0xFF;
    24b6:	33ff      	adds	r3, #255	; 0xff
    24b8:	7133      	strb	r3, [r6, #4]

	/* Check if we actually need to go into a wait state. */
	if (ctrlbset_tmp) {
    24ba:	2800      	cmp	r0, #0
    24bc:	d005      	beq.n	24ca <tc_init+0x15e>
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    24be:	6821      	ldr	r1, [r4, #0]

	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    24c0:	227f      	movs	r2, #127	; 0x7f
    24c2:	7bcb      	ldrb	r3, [r1, #15]
		while (tc_is_syncing(module_inst)) {
    24c4:	4393      	bics	r3, r2
    24c6:	d1fc      	bne.n	24c2 <tc_init+0x156>
			/* Wait for sync */
		}
		/* Write configuration to register */
		hw->COUNT8.CTRLBSET.reg = ctrlbset_tmp;
    24c8:	7170      	strb	r0, [r6, #5]
	}

	/* Set ctrlc register*/
	ctrlc_tmp = config->waveform_invert_output;
    24ca:	4643      	mov	r3, r8
    24cc:	7a98      	ldrb	r0, [r3, #10]
	for (uint8_t i = 0; i < NUMBER_OF_COMPARE_CAPTURE_CHANNELS; i++) {
		if (config->enable_capture_on_channel[i] == true) {
    24ce:	7adb      	ldrb	r3, [r3, #11]
    24d0:	2b00      	cmp	r3, #0
    24d2:	d001      	beq.n	24d8 <tc_init+0x16c>
			ctrlc_tmp |= (TC_CTRLC_CPTEN(1) << i);
    24d4:	2310      	movs	r3, #16
    24d6:	4318      	orrs	r0, r3
	}

	/* Set ctrlc register*/
	ctrlc_tmp = config->waveform_invert_output;
	for (uint8_t i = 0; i < NUMBER_OF_COMPARE_CAPTURE_CHANNELS; i++) {
		if (config->enable_capture_on_channel[i] == true) {
    24d8:	4643      	mov	r3, r8
    24da:	7b1b      	ldrb	r3, [r3, #12]
    24dc:	2b00      	cmp	r3, #0
    24de:	d001      	beq.n	24e4 <tc_init+0x178>
			ctrlc_tmp |= (TC_CTRLC_CPTEN(1) << i);
    24e0:	2320      	movs	r3, #32
    24e2:	4318      	orrs	r0, r3
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    24e4:	6821      	ldr	r1, [r4, #0]

	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    24e6:	227f      	movs	r2, #127	; 0x7f
    24e8:	7bcb      	ldrb	r3, [r1, #15]
		}
	}

	/* Write configuration to register */
	while (tc_is_syncing(module_inst)) {
    24ea:	4393      	bics	r3, r2
    24ec:	d1fc      	bne.n	24e8 <tc_init+0x17c>
		/* Wait for sync */
	}
	hw->COUNT8.CTRLC.reg = ctrlc_tmp;
    24ee:	71b0      	strb	r0, [r6, #6]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    24f0:	6822      	ldr	r2, [r4, #0]

	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    24f2:	217f      	movs	r1, #127	; 0x7f
    24f4:	7bd3      	ldrb	r3, [r2, #15]

	/* Write configuration to register */
	while (tc_is_syncing(module_inst)) {
    24f6:	438b      	bics	r3, r1
    24f8:	d1fc      	bne.n	24f4 <tc_init+0x188>
		/* Wait for sync */
	}

	/* Switch for TC counter size  */
	switch (module_inst->counter_size) {
    24fa:	7923      	ldrb	r3, [r4, #4]
    24fc:	2b04      	cmp	r3, #4
    24fe:	d005      	beq.n	250c <tc_init+0x1a0>
    2500:	2b08      	cmp	r3, #8
    2502:	d041      	beq.n	2588 <tc_init+0x21c>

			return STATUS_OK;
	}

	Assert(false);
	return STATUS_ERR_INVALID_ARG;
    2504:	2017      	movs	r0, #23
	while (tc_is_syncing(module_inst)) {
		/* Wait for sync */
	}

	/* Switch for TC counter size  */
	switch (module_inst->counter_size) {
    2506:	2b00      	cmp	r3, #0
    2508:	d157      	bne.n	25ba <tc_init+0x24e>
    250a:	e024      	b.n	2556 <tc_init+0x1ea>
    250c:	217f      	movs	r1, #127	; 0x7f
    250e:	7bd3      	ldrb	r3, [r2, #15]
		case TC_COUNTER_SIZE_8BIT:
			while (tc_is_syncing(module_inst)) {
    2510:	438b      	bics	r3, r1
    2512:	d1fc      	bne.n	250e <tc_init+0x1a2>
				/* Wait for sync */
			}

			hw->COUNT8.COUNT.reg =
					config->counter_8_bit.value;
    2514:	3328      	adds	r3, #40	; 0x28
    2516:	4642      	mov	r2, r8
    2518:	5cd3      	ldrb	r3, [r2, r3]
		case TC_COUNTER_SIZE_8BIT:
			while (tc_is_syncing(module_inst)) {
				/* Wait for sync */
			}

			hw->COUNT8.COUNT.reg =
    251a:	7433      	strb	r3, [r6, #16]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    251c:	6821      	ldr	r1, [r4, #0]

	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    251e:	227f      	movs	r2, #127	; 0x7f
    2520:	7bcb      	ldrb	r3, [r1, #15]
					config->counter_8_bit.value;


			while (tc_is_syncing(module_inst)) {
    2522:	4393      	bics	r3, r2
    2524:	d1fc      	bne.n	2520 <tc_init+0x1b4>
				/* Wait for sync */
			}

			hw->COUNT8.PER.reg =
					config->counter_8_bit.period;
    2526:	3329      	adds	r3, #41	; 0x29
    2528:	4642      	mov	r2, r8
    252a:	5cd3      	ldrb	r3, [r2, r3]

			while (tc_is_syncing(module_inst)) {
				/* Wait for sync */
			}

			hw->COUNT8.PER.reg =
    252c:	7533      	strb	r3, [r6, #20]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    252e:	6821      	ldr	r1, [r4, #0]

	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    2530:	227f      	movs	r2, #127	; 0x7f
    2532:	7bcb      	ldrb	r3, [r1, #15]
					config->counter_8_bit.period;

			while (tc_is_syncing(module_inst)) {
    2534:	4393      	bics	r3, r2
    2536:	d1fc      	bne.n	2532 <tc_init+0x1c6>
				/* Wait for sync */
			}

			hw->COUNT8.CC[0].reg =
					config->counter_8_bit.compare_capture_channel[0];
    2538:	332a      	adds	r3, #42	; 0x2a
    253a:	4642      	mov	r2, r8
    253c:	5cd3      	ldrb	r3, [r2, r3]

			while (tc_is_syncing(module_inst)) {
				/* Wait for sync */
			}

			hw->COUNT8.CC[0].reg =
    253e:	7633      	strb	r3, [r6, #24]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    2540:	6821      	ldr	r1, [r4, #0]

	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    2542:	227f      	movs	r2, #127	; 0x7f
    2544:	7bcb      	ldrb	r3, [r1, #15]
					config->counter_8_bit.compare_capture_channel[0];

			while (tc_is_syncing(module_inst)) {
    2546:	4393      	bics	r3, r2
    2548:	d1fc      	bne.n	2544 <tc_init+0x1d8>
				/* Wait for sync */
			}

			hw->COUNT8.CC[1].reg =
					config->counter_8_bit.compare_capture_channel[1];
    254a:	332b      	adds	r3, #43	; 0x2b
    254c:	4642      	mov	r2, r8
    254e:	5cd3      	ldrb	r3, [r2, r3]

			while (tc_is_syncing(module_inst)) {
				/* Wait for sync */
			}

			hw->COUNT8.CC[1].reg =
    2550:	7673      	strb	r3, [r6, #25]
					config->counter_8_bit.compare_capture_channel[1];

			return STATUS_OK;
    2552:	2000      	movs	r0, #0
    2554:	e031      	b.n	25ba <tc_init+0x24e>
    2556:	217f      	movs	r1, #127	; 0x7f
    2558:	7bd3      	ldrb	r3, [r2, #15]

		case TC_COUNTER_SIZE_16BIT:
			while (tc_is_syncing(module_inst)) {
    255a:	438b      	bics	r3, r1
    255c:	d1fc      	bne.n	2558 <tc_init+0x1ec>
				/* Wait for sync */
			}

			hw->COUNT16.COUNT.reg
				= config->counter_16_bit.value;
    255e:	4643      	mov	r3, r8
    2560:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    2562:	8233      	strh	r3, [r6, #16]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    2564:	6821      	ldr	r1, [r4, #0]

	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    2566:	227f      	movs	r2, #127	; 0x7f
    2568:	7bcb      	ldrb	r3, [r1, #15]

			while (tc_is_syncing(module_inst)) {
    256a:	4393      	bics	r3, r2
    256c:	d1fc      	bne.n	2568 <tc_init+0x1fc>
				/* Wait for sync */
			}

			hw->COUNT16.CC[0].reg =
					config->counter_16_bit.compare_capture_channel[0];
    256e:	4643      	mov	r3, r8
    2570:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a

			while (tc_is_syncing(module_inst)) {
				/* Wait for sync */
			}

			hw->COUNT16.CC[0].reg =
    2572:	8333      	strh	r3, [r6, #24]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    2574:	6821      	ldr	r1, [r4, #0]

	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    2576:	227f      	movs	r2, #127	; 0x7f
    2578:	7bcb      	ldrb	r3, [r1, #15]
					config->counter_16_bit.compare_capture_channel[0];

			while (tc_is_syncing(module_inst)) {
    257a:	4393      	bics	r3, r2
    257c:	d1fc      	bne.n	2578 <tc_init+0x20c>
				/* Wait for sync */
			}

			hw->COUNT16.CC[1].reg =
					config->counter_16_bit.compare_capture_channel[1];
    257e:	4643      	mov	r3, r8
    2580:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c

			while (tc_is_syncing(module_inst)) {
				/* Wait for sync */
			}

			hw->COUNT16.CC[1].reg =
    2582:	8373      	strh	r3, [r6, #26]
					config->counter_16_bit.compare_capture_channel[1];

			return STATUS_OK;
    2584:	2000      	movs	r0, #0
    2586:	e018      	b.n	25ba <tc_init+0x24e>
    2588:	217f      	movs	r1, #127	; 0x7f
    258a:	7bd3      	ldrb	r3, [r2, #15]

		case TC_COUNTER_SIZE_32BIT:
			while (tc_is_syncing(module_inst)) {
    258c:	438b      	bics	r3, r1
    258e:	d1fc      	bne.n	258a <tc_init+0x21e>
				/* Wait for sync */
			}

			hw->COUNT32.COUNT.reg
				= config->counter_32_bit.value;
    2590:	4643      	mov	r3, r8
    2592:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    2594:	6133      	str	r3, [r6, #16]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    2596:	6821      	ldr	r1, [r4, #0]

	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    2598:	227f      	movs	r2, #127	; 0x7f
    259a:	7bcb      	ldrb	r3, [r1, #15]

			while (tc_is_syncing(module_inst)) {
    259c:	4393      	bics	r3, r2
    259e:	d1fc      	bne.n	259a <tc_init+0x22e>
				/* Wait for sync */
			}

			hw->COUNT32.CC[0].reg =
    25a0:	4643      	mov	r3, r8
    25a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    25a4:	61b3      	str	r3, [r6, #24]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    25a6:	6821      	ldr	r1, [r4, #0]

	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    25a8:	227f      	movs	r2, #127	; 0x7f
    25aa:	7bcb      	ldrb	r3, [r1, #15]
					config->counter_32_bit.compare_capture_channel[0];

			while (tc_is_syncing(module_inst)) {
    25ac:	4393      	bics	r3, r2
    25ae:	d1fc      	bne.n	25aa <tc_init+0x23e>
				/* Wait for sync */
			}

			hw->COUNT32.CC[1].reg =
					config->counter_32_bit.compare_capture_channel[1];
    25b0:	4643      	mov	r3, r8
    25b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30

			while (tc_is_syncing(module_inst)) {
				/* Wait for sync */
			}

			hw->COUNT32.CC[1].reg =
    25b4:	61f3      	str	r3, [r6, #28]
					config->counter_32_bit.compare_capture_channel[1];

			return STATUS_OK;
    25b6:	2000      	movs	r0, #0
    25b8:	e7ff      	b.n	25ba <tc_init+0x24e>
	}

	Assert(false);
	return STATUS_ERR_INVALID_ARG;
}
    25ba:	b007      	add	sp, #28
    25bc:	bc0c      	pop	{r2, r3}
    25be:	4690      	mov	r8, r2
    25c0:	4699      	mov	r9, r3
    25c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    25c4:	00002335 	.word	0x00002335
    25c8:	00012084 	.word	0x00012084
    25cc:	00010b2f 	.word	0x00010b2f
    25d0:	20002ae8 	.word	0x20002ae8
    25d4:	000022dd 	.word	0x000022dd
    25d8:	40000400 	.word	0x40000400
    25dc:	0000218d 	.word	0x0000218d
    25e0:	00002101 	.word	0x00002101

000025e4 <tc_get_count_value>:
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	Tc *const tc_module = module_inst->hw;
    25e4:	6802      	ldr	r2, [r0, #0]
    25e6:	217f      	movs	r1, #127	; 0x7f
    25e8:	7bd3      	ldrb	r3, [r2, #15]

	while (tc_is_syncing(module_inst)) {
    25ea:	438b      	bics	r3, r1
    25ec:	d1fc      	bne.n	25e8 <tc_get_count_value+0x4>
		/* Wait for sync */
	}

	/* Read from based on the TC counter size */
	switch (module_inst->counter_size) {
    25ee:	7903      	ldrb	r3, [r0, #4]
    25f0:	2b04      	cmp	r3, #4
    25f2:	d005      	beq.n	2600 <tc_get_count_value+0x1c>
    25f4:	2b08      	cmp	r3, #8
    25f6:	d009      	beq.n	260c <tc_get_count_value+0x28>
		case TC_COUNTER_SIZE_32BIT:
			return tc_module->COUNT32.COUNT.reg;
	}

	Assert(false);
	return 0;
    25f8:	2000      	movs	r0, #0
	while (tc_is_syncing(module_inst)) {
		/* Wait for sync */
	}

	/* Read from based on the TC counter size */
	switch (module_inst->counter_size) {
    25fa:	2b00      	cmp	r3, #0
    25fc:	d108      	bne.n	2610 <tc_get_count_value+0x2c>
    25fe:	e002      	b.n	2606 <tc_get_count_value+0x22>
		case TC_COUNTER_SIZE_8BIT:
			return (uint32_t)tc_module->COUNT8.COUNT.reg;
    2600:	7c10      	ldrb	r0, [r2, #16]
    2602:	b2c0      	uxtb	r0, r0
    2604:	e004      	b.n	2610 <tc_get_count_value+0x2c>

		case TC_COUNTER_SIZE_16BIT:
			return (uint32_t)tc_module->COUNT16.COUNT.reg;
    2606:	8a10      	ldrh	r0, [r2, #16]
    2608:	b280      	uxth	r0, r0
    260a:	e001      	b.n	2610 <tc_get_count_value+0x2c>

		case TC_COUNTER_SIZE_32BIT:
			return tc_module->COUNT32.COUNT.reg;
    260c:	6910      	ldr	r0, [r2, #16]
    260e:	e7ff      	b.n	2610 <tc_get_count_value+0x2c>
	}

	Assert(false);
	return 0;
}
    2610:	4770      	bx	lr
    2612:	46c0      	nop			; (mov r8, r8)

00002614 <tc_set_compare_value>:
 */
enum status_code tc_set_compare_value(
		const struct tc_module *const module_inst,
		const enum tc_compare_capture_channel channel_index,
		const uint32_t compare)
{
    2614:	b530      	push	{r4, r5, lr}
	Assert(module_inst);
	Assert(module_inst->hw);
	Assert(compare);

	/* Get a pointer to the module's hardware instance */
	Tc *const tc_module = module_inst->hw;
    2616:	6804      	ldr	r4, [r0, #0]
    2618:	257f      	movs	r5, #127	; 0x7f
    261a:	7be3      	ldrb	r3, [r4, #15]

	while (tc_is_syncing(module_inst)) {
    261c:	43ab      	bics	r3, r5
    261e:	d1fc      	bne.n	261a <tc_set_compare_value+0x6>
		/* Wait for sync */
	}

	/* Read out based on the TC counter size */
	switch (module_inst->counter_size) {
    2620:	7903      	ldrb	r3, [r0, #4]
    2622:	2b04      	cmp	r3, #4
    2624:	d005      	beq.n	2632 <tc_set_compare_value+0x1e>
    2626:	2b08      	cmp	r3, #8
    2628:	d014      	beq.n	2654 <tc_set_compare_value+0x40>
						(uint32_t)compare;
				return STATUS_OK;
			}
	}

	return STATUS_ERR_INVALID_ARG;
    262a:	2017      	movs	r0, #23
	while (tc_is_syncing(module_inst)) {
		/* Wait for sync */
	}

	/* Read out based on the TC counter size */
	switch (module_inst->counter_size) {
    262c:	2b00      	cmp	r3, #0
    262e:	d119      	bne.n	2664 <tc_set_compare_value+0x50>
    2630:	e007      	b.n	2642 <tc_set_compare_value+0x2e>
						(uint32_t)compare;
				return STATUS_OK;
			}
	}

	return STATUS_ERR_INVALID_ARG;
    2632:	2017      	movs	r0, #23
	}

	/* Read out based on the TC counter size */
	switch (module_inst->counter_size) {
		case TC_COUNTER_SIZE_8BIT:
			if (channel_index <
    2634:	2901      	cmp	r1, #1
    2636:	d815      	bhi.n	2664 <tc_set_compare_value+0x50>
					NUMBER_OF_COMPARE_CAPTURE_CHANNELS) {
				tc_module->COUNT8.CC[channel_index].reg  =
						(uint8_t)compare;
    2638:	b2d2      	uxtb	r2, r2
	/* Read out based on the TC counter size */
	switch (module_inst->counter_size) {
		case TC_COUNTER_SIZE_8BIT:
			if (channel_index <
					NUMBER_OF_COMPARE_CAPTURE_CHANNELS) {
				tc_module->COUNT8.CC[channel_index].reg  =
    263a:	1861      	adds	r1, r4, r1
    263c:	760a      	strb	r2, [r1, #24]
						(uint8_t)compare;
				return STATUS_OK;
    263e:	2000      	movs	r0, #0
    2640:	e010      	b.n	2664 <tc_set_compare_value+0x50>
						(uint32_t)compare;
				return STATUS_OK;
			}
	}

	return STATUS_ERR_INVALID_ARG;
    2642:	2017      	movs	r0, #23
						(uint8_t)compare;
				return STATUS_OK;
			}

		case TC_COUNTER_SIZE_16BIT:
			if (channel_index <
    2644:	2901      	cmp	r1, #1
    2646:	d80d      	bhi.n	2664 <tc_set_compare_value+0x50>
					NUMBER_OF_COMPARE_CAPTURE_CHANNELS) {
				tc_module->COUNT16.CC[channel_index].reg =
						(uint16_t)compare;
    2648:	b292      	uxth	r2, r2
			}

		case TC_COUNTER_SIZE_16BIT:
			if (channel_index <
					NUMBER_OF_COMPARE_CAPTURE_CHANNELS) {
				tc_module->COUNT16.CC[channel_index].reg =
    264a:	310c      	adds	r1, #12
    264c:	0049      	lsls	r1, r1, #1
    264e:	530a      	strh	r2, [r1, r4]
						(uint16_t)compare;
				return STATUS_OK;
    2650:	2000      	movs	r0, #0
    2652:	e007      	b.n	2664 <tc_set_compare_value+0x50>
						(uint32_t)compare;
				return STATUS_OK;
			}
	}

	return STATUS_ERR_INVALID_ARG;
    2654:	2017      	movs	r0, #23
						(uint16_t)compare;
				return STATUS_OK;
			}

		case TC_COUNTER_SIZE_32BIT:
			if (channel_index <
    2656:	2901      	cmp	r1, #1
    2658:	d804      	bhi.n	2664 <tc_set_compare_value+0x50>
					NUMBER_OF_COMPARE_CAPTURE_CHANNELS) {
				tc_module->COUNT32.CC[channel_index].reg =
    265a:	3106      	adds	r1, #6
    265c:	0089      	lsls	r1, r1, #2
    265e:	510a      	str	r2, [r1, r4]
						(uint32_t)compare;
				return STATUS_OK;
    2660:	2000      	movs	r0, #0
    2662:	e7ff      	b.n	2664 <tc_set_compare_value+0x50>
			}
	}

	return STATUS_ERR_INVALID_ARG;
}
    2664:	bd30      	pop	{r4, r5, pc}
    2666:	46c0      	nop			; (mov r8, r8)

00002668 <tc_register_callback>:
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
    2668:	1c93      	adds	r3, r2, #2
    266a:	009b      	lsls	r3, r3, #2
    266c:	5019      	str	r1, [r3, r0]

	/* Set the bit corresponding to the callback_type */
	if (callback_type == TC_CALLBACK_CC_CHANNEL0) {
    266e:	2a02      	cmp	r2, #2
    2670:	d104      	bne.n	267c <tc_register_callback+0x14>
		module->register_callback_mask |= TC_INTFLAG_MC(1);
    2672:	7e02      	ldrb	r2, [r0, #24]
    2674:	2310      	movs	r3, #16
    2676:	4313      	orrs	r3, r2
    2678:	7603      	strb	r3, [r0, #24]
    267a:	e00c      	b.n	2696 <tc_register_callback+0x2e>
	}
	else if (callback_type == TC_CALLBACK_CC_CHANNEL1) {
    267c:	2a03      	cmp	r2, #3
    267e:	d104      	bne.n	268a <tc_register_callback+0x22>
		module->register_callback_mask |= TC_INTFLAG_MC(2);
    2680:	7e02      	ldrb	r2, [r0, #24]
    2682:	2320      	movs	r3, #32
    2684:	4313      	orrs	r3, r2
    2686:	7603      	strb	r3, [r0, #24]
    2688:	e005      	b.n	2696 <tc_register_callback+0x2e>
	}
	else {
		module->register_callback_mask |= (1 << callback_type);
    268a:	2301      	movs	r3, #1
    268c:	4093      	lsls	r3, r2
    268e:	1c1a      	adds	r2, r3, #0
    2690:	7e03      	ldrb	r3, [r0, #24]
    2692:	431a      	orrs	r2, r3
    2694:	7602      	strb	r2, [r0, #24]
	}
	return STATUS_OK;
}
    2696:	2000      	movs	r0, #0
    2698:	4770      	bx	lr
    269a:	46c0      	nop			; (mov r8, r8)

0000269c <_tc_interrupt_handler>:
 * \param[in]  instance  ID of the TC instance calling the interrupt
 *                       handler.
 */
void _tc_interrupt_handler(
		uint8_t instance)
{
    269c:	b538      	push	{r3, r4, r5, lr}
	/* Temporary variable */
	uint8_t interrupt_and_callback_status_mask;

	/* Get device instance from the look-up table */
	struct tc_module *module
    269e:	0080      	lsls	r0, r0, #2
    26a0:	4b14      	ldr	r3, [pc, #80]	; (26f4 <_tc_interrupt_handler+0x58>)
    26a2:	58c5      	ldr	r5, [r0, r3]
			= (struct tc_module *)_tc_instances[instance];

	/* Read and mask interrupt flag register */
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
    26a4:	682b      	ldr	r3, [r5, #0]
    26a6:	7b9c      	ldrb	r4, [r3, #14]
    26a8:	7e2b      	ldrb	r3, [r5, #24]
    26aa:	401c      	ands	r4, r3
    26ac:	7e6b      	ldrb	r3, [r5, #25]
    26ae:	401c      	ands	r4, r3
			module->register_callback_mask &
			module->enable_callback_mask;

	/* Check if an Overflow interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_OVF) {
    26b0:	07e3      	lsls	r3, r4, #31
    26b2:	d505      	bpl.n	26c0 <_tc_interrupt_handler+0x24>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_OVERFLOW])(module);
    26b4:	1c28      	adds	r0, r5, #0
    26b6:	68ab      	ldr	r3, [r5, #8]
    26b8:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_OVF;
    26ba:	2301      	movs	r3, #1
    26bc:	682a      	ldr	r2, [r5, #0]
    26be:	7393      	strb	r3, [r2, #14]
	}

	/* Check if an Error interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_ERR) {
    26c0:	07a3      	lsls	r3, r4, #30
    26c2:	d505      	bpl.n	26d0 <_tc_interrupt_handler+0x34>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_ERROR])(module);
    26c4:	1c28      	adds	r0, r5, #0
    26c6:	68eb      	ldr	r3, [r5, #12]
    26c8:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_ERR;
    26ca:	2302      	movs	r3, #2
    26cc:	682a      	ldr	r2, [r5, #0]
    26ce:	7393      	strb	r3, [r2, #14]
	}

	/* Check if an Match/Capture Channel 0 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(1)) {
    26d0:	06e3      	lsls	r3, r4, #27
    26d2:	d505      	bpl.n	26e0 <_tc_interrupt_handler+0x44>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_CC_CHANNEL0])(module);
    26d4:	1c28      	adds	r0, r5, #0
    26d6:	692b      	ldr	r3, [r5, #16]
    26d8:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(1);
    26da:	2310      	movs	r3, #16
    26dc:	682a      	ldr	r2, [r5, #0]
    26de:	7393      	strb	r3, [r2, #14]
	}

	/* Check if an Match/Capture Channel 1 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(2)) {
    26e0:	06a3      	lsls	r3, r4, #26
    26e2:	d505      	bpl.n	26f0 <_tc_interrupt_handler+0x54>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_CC_CHANNEL1])(module);
    26e4:	1c28      	adds	r0, r5, #0
    26e6:	696b      	ldr	r3, [r5, #20]
    26e8:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(2);
    26ea:	682b      	ldr	r3, [r5, #0]
    26ec:	2220      	movs	r2, #32
    26ee:	739a      	strb	r2, [r3, #14]
	}
}
    26f0:	bd38      	pop	{r3, r4, r5, pc}
    26f2:	46c0      	nop			; (mov r8, r8)
    26f4:	20002ae8 	.word	0x20002ae8

000026f8 <TC3_Handler>:
		void TC##n##_Handler(void) \
		{ \
			_tc_interrupt_handler(m); \
		}

MRECURSION(TC_INST_NUM, _TC_INTERRUPT_HANDLER, TC_INST_MAX_ID)
    26f8:	b508      	push	{r3, lr}
    26fa:	2000      	movs	r0, #0
    26fc:	4b01      	ldr	r3, [pc, #4]	; (2704 <TC3_Handler+0xc>)
    26fe:	4798      	blx	r3
    2700:	bd08      	pop	{r3, pc}
    2702:	46c0      	nop			; (mov r8, r8)
    2704:	0000269d 	.word	0x0000269d

00002708 <TC4_Handler>:
    2708:	b508      	push	{r3, lr}
    270a:	2001      	movs	r0, #1
    270c:	4b01      	ldr	r3, [pc, #4]	; (2714 <TC4_Handler+0xc>)
    270e:	4798      	blx	r3
    2710:	bd08      	pop	{r3, pc}
    2712:	46c0      	nop			; (mov r8, r8)
    2714:	0000269d 	.word	0x0000269d

00002718 <TC5_Handler>:
    2718:	b508      	push	{r3, lr}
    271a:	2002      	movs	r0, #2
    271c:	4b01      	ldr	r3, [pc, #4]	; (2724 <TC5_Handler+0xc>)
    271e:	4798      	blx	r3
    2720:	bd08      	pop	{r3, pc}
    2722:	46c0      	nop			; (mov r8, r8)
    2724:	0000269d 	.word	0x0000269d

00002728 <wdt_reset_count>:
 */
static inline bool wdt_is_syncing(void)
{
	Wdt *const WDT_module = WDT;

	if (WDT_module->STATUS.reg & WDT_STATUS_SYNCBUSY) {
    2728:	4a04      	ldr	r2, [pc, #16]	; (273c <wdt_reset_count+0x14>)
    272a:	79d3      	ldrb	r3, [r2, #7]
 */
void wdt_reset_count(void)
{
	Wdt *const WDT_module = WDT;

	while (wdt_is_syncing()) {
    272c:	b25b      	sxtb	r3, r3
    272e:	2b00      	cmp	r3, #0
    2730:	dbfb      	blt.n	272a <wdt_reset_count+0x2>
		/* Wait for all hardware modules to complete synchronization */
	}

	/* Disable the Watchdog module */
	WDT_module->CLEAR.reg = WDT_CLEAR_CLEAR_KEY;
    2732:	22a5      	movs	r2, #165	; 0xa5
    2734:	4b01      	ldr	r3, [pc, #4]	; (273c <wdt_reset_count+0x14>)
    2736:	721a      	strb	r2, [r3, #8]
}
    2738:	4770      	bx	lr
    273a:	46c0      	nop			; (mov r8, r8)
    273c:	40001000 	.word	0x40001000

00002740 <WDT_Handler>:
	}
}

/** Handler for the WDT hardware module interrupt. */
void WDT_Handler(void)
{
    2740:	b508      	push	{r3, lr}
 */
static inline void wdt_clear_early_warning(void)
{
	Wdt *const WDT_module = WDT;

	WDT_module->INTFLAG.reg = WDT_INTFLAG_EW;
    2742:	2201      	movs	r2, #1
    2744:	4b03      	ldr	r3, [pc, #12]	; (2754 <WDT_Handler+0x14>)
    2746:	719a      	strb	r2, [r3, #6]
	wdt_clear_early_warning();

	if (wdt_early_warning_callback) {
    2748:	4b03      	ldr	r3, [pc, #12]	; (2758 <WDT_Handler+0x18>)
    274a:	681b      	ldr	r3, [r3, #0]
    274c:	2b00      	cmp	r3, #0
    274e:	d000      	beq.n	2752 <WDT_Handler+0x12>
		wdt_early_warning_callback();
    2750:	4798      	blx	r3
	}
}
    2752:	bd08      	pop	{r3, pc}
    2754:	40001000 	.word	0x40001000
    2758:	20002af4 	.word	0x20002af4

0000275c <Dummy_Handler>:
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
        while (1) {
        }
    275c:	e7fe      	b.n	275c <Dummy_Handler>
    275e:	46c0      	nop			; (mov r8, r8)

00002760 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
    2760:	b510      	push	{r4, lr}

        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
    2762:	4b1b      	ldr	r3, [pc, #108]	; (27d0 <Reset_Handler+0x70>)
    2764:	4a1b      	ldr	r2, [pc, #108]	; (27d4 <Reset_Handler+0x74>)
    2766:	429a      	cmp	r2, r3
    2768:	d003      	beq.n	2772 <Reset_Handler+0x12>
                for (; pDest < &_erelocate;) {
    276a:	4b1b      	ldr	r3, [pc, #108]	; (27d8 <Reset_Handler+0x78>)
    276c:	4a18      	ldr	r2, [pc, #96]	; (27d0 <Reset_Handler+0x70>)
    276e:	429a      	cmp	r2, r3
    2770:	d304      	bcc.n	277c <Reset_Handler+0x1c>
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
    2772:	4b1a      	ldr	r3, [pc, #104]	; (27dc <Reset_Handler+0x7c>)
    2774:	4a1a      	ldr	r2, [pc, #104]	; (27e0 <Reset_Handler+0x80>)
    2776:	429a      	cmp	r2, r3
    2778:	d310      	bcc.n	279c <Reset_Handler+0x3c>
    277a:	e01e      	b.n	27ba <Reset_Handler+0x5a>
    277c:	4a19      	ldr	r2, [pc, #100]	; (27e4 <Reset_Handler+0x84>)
    277e:	4b16      	ldr	r3, [pc, #88]	; (27d8 <Reset_Handler+0x78>)
    2780:	3303      	adds	r3, #3
    2782:	1a9b      	subs	r3, r3, r2
    2784:	089b      	lsrs	r3, r3, #2
    2786:	3301      	adds	r3, #1
    2788:	009b      	lsls	r3, r3, #2
        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
                for (; pDest < &_erelocate;) {
    278a:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
    278c:	4810      	ldr	r0, [pc, #64]	; (27d0 <Reset_Handler+0x70>)
    278e:	4911      	ldr	r1, [pc, #68]	; (27d4 <Reset_Handler+0x74>)
    2790:	588c      	ldr	r4, [r1, r2]
    2792:	5084      	str	r4, [r0, r2]
    2794:	3204      	adds	r2, #4
        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
                for (; pDest < &_erelocate;) {
    2796:	429a      	cmp	r2, r3
    2798:	d1fa      	bne.n	2790 <Reset_Handler+0x30>
    279a:	e7ea      	b.n	2772 <Reset_Handler+0x12>
    279c:	4a12      	ldr	r2, [pc, #72]	; (27e8 <Reset_Handler+0x88>)
    279e:	4b0f      	ldr	r3, [pc, #60]	; (27dc <Reset_Handler+0x7c>)
    27a0:	3303      	adds	r3, #3
    27a2:	1a9b      	subs	r3, r3, r2
    27a4:	089b      	lsrs	r3, r3, #2
    27a6:	3301      	adds	r3, #1
    27a8:	009b      	lsls	r3, r3, #2
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
    27aa:	2200      	movs	r2, #0
                *pDest++ = 0;
    27ac:	480c      	ldr	r0, [pc, #48]	; (27e0 <Reset_Handler+0x80>)
    27ae:	2100      	movs	r1, #0
    27b0:	1814      	adds	r4, r2, r0
    27b2:	6021      	str	r1, [r4, #0]
    27b4:	3204      	adds	r2, #4
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
    27b6:	429a      	cmp	r2, r3
    27b8:	d1fa      	bne.n	27b0 <Reset_Handler+0x50>
                *pDest++ = 0;
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    27ba:	4a0c      	ldr	r2, [pc, #48]	; (27ec <Reset_Handler+0x8c>)
    27bc:	217f      	movs	r1, #127	; 0x7f
    27be:	4b0c      	ldr	r3, [pc, #48]	; (27f0 <Reset_Handler+0x90>)
    27c0:	438b      	bics	r3, r1
    27c2:	6093      	str	r3, [r2, #8]

        /* Initialize the C library */
        __libc_init_array();
    27c4:	4b0b      	ldr	r3, [pc, #44]	; (27f4 <Reset_Handler+0x94>)
    27c6:	4798      	blx	r3

        /* Branch to main function */
        main();
    27c8:	4b0b      	ldr	r3, [pc, #44]	; (27f8 <Reset_Handler+0x98>)
    27ca:	4798      	blx	r3

        /* Infinite loop */
        while (1);
    27cc:	e7fe      	b.n	27cc <Reset_Handler+0x6c>
    27ce:	46c0      	nop			; (mov r8, r8)
    27d0:	20000000 	.word	0x20000000
    27d4:	00013914 	.word	0x00013914
    27d8:	20000238 	.word	0x20000238
    27dc:	20003544 	.word	0x20003544
    27e0:	20000238 	.word	0x20000238
    27e4:	20000004 	.word	0x20000004
    27e8:	2000023c 	.word	0x2000023c
    27ec:	e000ed00 	.word	0xe000ed00
    27f0:	00000000 	.word	0x00000000
    27f4:	00010ac5 	.word	0x00010ac5
    27f8:	0000fa85 	.word	0x0000fa85

000027fc <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
    27fc:	b5f0      	push	{r4, r5, r6, r7, lr}
    27fe:	4647      	mov	r7, r8
    2800:	b480      	push	{r7}
    2802:	1c0c      	adds	r4, r1, #0
    2804:	4690      	mov	r8, r2
	int nChars = 0;

	if (file != 0) {
    2806:	2800      	cmp	r0, #0
    2808:	d110      	bne.n	282c <_read+0x30>
		return -1;
	}

	for (; len > 0; --len) {
    280a:	2a00      	cmp	r2, #0
    280c:	dd0a      	ble.n	2824 <_read+0x28>
    280e:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
    2810:	4e09      	ldr	r6, [pc, #36]	; (2838 <_read+0x3c>)
    2812:	4d0a      	ldr	r5, [pc, #40]	; (283c <_read+0x40>)
    2814:	6830      	ldr	r0, [r6, #0]
    2816:	1c21      	adds	r1, r4, #0
    2818:	682b      	ldr	r3, [r5, #0]
    281a:	4798      	blx	r3
		ptr++;
    281c:	3401      	adds	r4, #1

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
    281e:	42bc      	cmp	r4, r7
    2820:	d1f8      	bne.n	2814 <_read+0x18>
    2822:	e001      	b.n	2828 <_read+0x2c>
    2824:	2300      	movs	r3, #0
    2826:	4698      	mov	r8, r3
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
	}
	return nChars;
    2828:	4640      	mov	r0, r8
    282a:	e001      	b.n	2830 <_read+0x34>
_read (int file, char * ptr, int len)
{
	int nChars = 0;

	if (file != 0) {
		return -1;
    282c:	2001      	movs	r0, #1
    282e:	4240      	negs	r0, r0
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
	}
	return nChars;
}
    2830:	bc04      	pop	{r2}
    2832:	4690      	mov	r8, r2
    2834:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2836:	46c0      	nop			; (mov r8, r8)
    2838:	20002b00 	.word	0x20002b00
    283c:	20002af8 	.word	0x20002af8

00002840 <_write>:
int __attribute__((weak))
_write (int file, char * ptr, int len);

int __attribute__((weak))
_write (int file, char * ptr, int len)
{
    2840:	b5f0      	push	{r4, r5, r6, r7, lr}
    2842:	4647      	mov	r7, r8
    2844:	b480      	push	{r7}
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
    2846:	3801      	subs	r0, #1
    2848:	2802      	cmp	r0, #2
    284a:	d815      	bhi.n	2878 <_write+0x38>
		return -1;
	}

	for (; len != 0; --len) {
    284c:	2a00      	cmp	r2, #0
    284e:	d010      	beq.n	2872 <_write+0x32>
    2850:	1c15      	adds	r5, r2, #0
    2852:	1c0e      	adds	r6, r1, #0
    2854:	2400      	movs	r4, #0
		if (ptr_put(stdio_base, *ptr++) < 0) {
    2856:	4b0c      	ldr	r3, [pc, #48]	; (2888 <_write+0x48>)
    2858:	4698      	mov	r8, r3
    285a:	4f0c      	ldr	r7, [pc, #48]	; (288c <_write+0x4c>)
    285c:	4643      	mov	r3, r8
    285e:	6818      	ldr	r0, [r3, #0]
    2860:	5d31      	ldrb	r1, [r6, r4]
    2862:	683b      	ldr	r3, [r7, #0]
    2864:	4798      	blx	r3
    2866:	2800      	cmp	r0, #0
    2868:	db09      	blt.n	287e <_write+0x3e>
			return -1;
		}
		++nChars;
    286a:	3401      	adds	r4, #1

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
    286c:	42a5      	cmp	r5, r4
    286e:	d1f5      	bne.n	285c <_write+0x1c>
    2870:	e000      	b.n	2874 <_write+0x34>
    2872:	2400      	movs	r4, #0
		if (ptr_put(stdio_base, *ptr++) < 0) {
			return -1;
		}
		++nChars;
	}
	return nChars;
    2874:	1c20      	adds	r0, r4, #0
    2876:	e004      	b.n	2882 <_write+0x42>
_write (int file, char * ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
    2878:	2001      	movs	r0, #1
    287a:	4240      	negs	r0, r0
    287c:	e001      	b.n	2882 <_write+0x42>
	}

	for (; len != 0; --len) {
		if (ptr_put(stdio_base, *ptr++) < 0) {
			return -1;
    287e:	2001      	movs	r0, #1
    2880:	4240      	negs	r0, r0
		}
		++nChars;
	}
	return nChars;
}
    2882:	bc04      	pop	{r2}
    2884:	4690      	mov	r8, r2
    2886:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2888:	20002b00 	.word	0x20002b00
    288c:	20002afc 	.word	0x20002afc

00002890 <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
    2890:	1c03      	adds	r3, r0, #0
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
    2892:	4a06      	ldr	r2, [pc, #24]	; (28ac <_sbrk+0x1c>)
    2894:	6812      	ldr	r2, [r2, #0]
    2896:	2a00      	cmp	r2, #0
    2898:	d102      	bne.n	28a0 <_sbrk+0x10>
		heap = (unsigned char *)&_end;
    289a:	4905      	ldr	r1, [pc, #20]	; (28b0 <_sbrk+0x20>)
    289c:	4a03      	ldr	r2, [pc, #12]	; (28ac <_sbrk+0x1c>)
    289e:	6011      	str	r1, [r2, #0]
	}
	prev_heap = heap;
    28a0:	4a02      	ldr	r2, [pc, #8]	; (28ac <_sbrk+0x1c>)
    28a2:	6810      	ldr	r0, [r2, #0]

	heap += incr;
    28a4:	18c3      	adds	r3, r0, r3
    28a6:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap;
}
    28a8:	4770      	bx	lr
    28aa:	46c0      	nop			; (mov r8, r8)
    28ac:	20000298 	.word	0x20000298
    28b0:	20005548 	.word	0x20005548

000028b4 <_close>:
}

extern int _close(int file)
{
	return -1;
}
    28b4:	2001      	movs	r0, #1
    28b6:	4240      	negs	r0, r0
    28b8:	4770      	bx	lr
    28ba:	46c0      	nop			; (mov r8, r8)

000028bc <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
    28bc:	2380      	movs	r3, #128	; 0x80
    28be:	019b      	lsls	r3, r3, #6
    28c0:	604b      	str	r3, [r1, #4]

	return 0;
}
    28c2:	2000      	movs	r0, #0
    28c4:	4770      	bx	lr
    28c6:	46c0      	nop			; (mov r8, r8)

000028c8 <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
    28c8:	2001      	movs	r0, #1
    28ca:	4770      	bx	lr

000028cc <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
    28cc:	2000      	movs	r0, #0
    28ce:	4770      	bx	lr

000028d0 <usart_serial_getchar>:
 * \param[out]    c       Destination for the read character.
 */
static inline void usart_serial_getchar(
		struct usart_module *const module,
		uint8_t *c)
{
    28d0:	b570      	push	{r4, r5, r6, lr}
    28d2:	b082      	sub	sp, #8
    28d4:	1c05      	adds	r5, r0, #0
    28d6:	1c0e      	adds	r6, r1, #0
	uint16_t temp = 0;
    28d8:	2200      	movs	r2, #0
    28da:	466b      	mov	r3, sp
    28dc:	80da      	strh	r2, [r3, #6]

	while(STATUS_OK != usart_read_wait(module, &temp));
    28de:	4c06      	ldr	r4, [pc, #24]	; (28f8 <usart_serial_getchar+0x28>)
    28e0:	1c28      	adds	r0, r5, #0
    28e2:	466b      	mov	r3, sp
    28e4:	1d99      	adds	r1, r3, #6
    28e6:	47a0      	blx	r4
    28e8:	2800      	cmp	r0, #0
    28ea:	d1f9      	bne.n	28e0 <usart_serial_getchar+0x10>

	*c = temp;
    28ec:	466b      	mov	r3, sp
    28ee:	3306      	adds	r3, #6
    28f0:	881b      	ldrh	r3, [r3, #0]
    28f2:	7033      	strb	r3, [r6, #0]
}
    28f4:	b002      	add	sp, #8
    28f6:	bd70      	pop	{r4, r5, r6, pc}
    28f8:	0000183d 	.word	0x0000183d

000028fc <usart_serial_putchar>:
 * \return Status code
 */
static inline enum status_code usart_serial_putchar(
		struct usart_module *const module,
		uint8_t c)
{
    28fc:	b570      	push	{r4, r5, r6, lr}
    28fe:	1c05      	adds	r5, r0, #0
	while(STATUS_OK !=usart_write_wait(module, c));
    2900:	b28c      	uxth	r4, r1
    2902:	4e03      	ldr	r6, [pc, #12]	; (2910 <usart_serial_putchar+0x14>)
    2904:	1c28      	adds	r0, r5, #0
    2906:	1c21      	adds	r1, r4, #0
    2908:	47b0      	blx	r6
    290a:	2800      	cmp	r0, #0
    290c:	d1fa      	bne.n	2904 <usart_serial_putchar+0x8>

	return STATUS_OK;
}
    290e:	bd70      	pop	{r4, r5, r6, pc}
    2910:	00001811 	.word	0x00001811

00002914 <USART_HOST_ISR_VECT>:
#if SAMD || SAMR21
void USART_HOST_ISR_VECT(uint8_t instance)
#else
USART_HOST_ISR_VECT()
#endif
{
    2914:	b510      	push	{r4, lr}
    2916:	b082      	sub	sp, #8
static inline enum status_code usart_serial_read_packet(
		struct usart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
	return usart_read_buffer_wait(module, rx_data, length);
    2918:	466b      	mov	r3, sp
    291a:	1ddc      	adds	r4, r3, #7
    291c:	4812      	ldr	r0, [pc, #72]	; (2968 <USART_HOST_ISR_VECT+0x54>)
    291e:	1c21      	adds	r1, r4, #0
    2920:	2201      	movs	r2, #1
    2922:	4b12      	ldr	r3, [pc, #72]	; (296c <USART_HOST_ISR_VECT+0x58>)
    2924:	4798      	blx	r3
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
    2926:	b672      	cpsid	i
    2928:	f3bf 8f5f 	dmb	sy
#else
	usart_serial_read_packet(USART_HOST, &temp, 1);
#endif

	/* Introducing critical section to avoid buffer corruption. */
	cpu_irq_disable();
    292c:	2200      	movs	r2, #0
    292e:	4b10      	ldr	r3, [pc, #64]	; (2970 <USART_HOST_ISR_VECT+0x5c>)
    2930:	701a      	strb	r2, [r3, #0]

	/* The number of data in the receive buffer is incremented and the
	 * buffer is updated. */
	serial_rx_count++;
    2932:	4a10      	ldr	r2, [pc, #64]	; (2974 <USART_HOST_ISR_VECT+0x60>)
    2934:	7813      	ldrb	r3, [r2, #0]
    2936:	3301      	adds	r3, #1
    2938:	7013      	strb	r3, [r2, #0]

	serial_rx_buf[serial_rx_buf_tail] = temp;
    293a:	4b0f      	ldr	r3, [pc, #60]	; (2978 <USART_HOST_ISR_VECT+0x64>)
    293c:	781b      	ldrb	r3, [r3, #0]
    293e:	7821      	ldrb	r1, [r4, #0]
    2940:	4a0e      	ldr	r2, [pc, #56]	; (297c <USART_HOST_ISR_VECT+0x68>)
    2942:	54d1      	strb	r1, [r2, r3]

	if ((SERIAL_RX_BUF_SIZE_HOST - 1) == serial_rx_buf_tail) {
    2944:	2b9b      	cmp	r3, #155	; 0x9b
    2946:	d103      	bne.n	2950 <USART_HOST_ISR_VECT+0x3c>
		/* Reached the end of buffer, revert back to beginning of
		 * buffer. */
		serial_rx_buf_tail = 0x00;
    2948:	2200      	movs	r2, #0
    294a:	4b0b      	ldr	r3, [pc, #44]	; (2978 <USART_HOST_ISR_VECT+0x64>)
    294c:	701a      	strb	r2, [r3, #0]
    294e:	e002      	b.n	2956 <USART_HOST_ISR_VECT+0x42>
	} else {
		serial_rx_buf_tail++;
    2950:	3301      	adds	r3, #1
    2952:	4a09      	ldr	r2, [pc, #36]	; (2978 <USART_HOST_ISR_VECT+0x64>)
    2954:	7013      	strb	r3, [r2, #0]
	}

	cpu_irq_enable();
    2956:	2201      	movs	r2, #1
    2958:	4b05      	ldr	r3, [pc, #20]	; (2970 <USART_HOST_ISR_VECT+0x5c>)
    295a:	701a      	strb	r2, [r3, #0]
    295c:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
    2960:	b662      	cpsie	i
}
    2962:	b002      	add	sp, #8
    2964:	bd10      	pop	{r4, pc}
    2966:	46c0      	nop			; (mov r8, r8)
    2968:	20000338 	.word	0x20000338
    296c:	000018b5 	.word	0x000018b5
    2970:	20000008 	.word	0x20000008
    2974:	2000036d 	.word	0x2000036d
    2978:	2000036c 	.word	0x2000036c
    297c:	2000029c 	.word	0x2000029c

00002980 <sio2host_init>:
static uint8_t serial_rx_count;

/* === IMPLEMENTATION ====================================================== */

void sio2host_init(void)
{
    2980:	b5f0      	push	{r4, r5, r6, r7, lr}
    2982:	b091      	sub	sp, #68	; 0x44
{
	/* Sanity check arguments */
	Assert(config);

	/* Set default config in the config struct */
	config->data_order       = USART_DATAORDER_LSB;
    2984:	2380      	movs	r3, #128	; 0x80
    2986:	05db      	lsls	r3, r3, #23
    2988:	9300      	str	r3, [sp, #0]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
    298a:	2300      	movs	r3, #0
    298c:	9301      	str	r3, [sp, #4]
	config->parity           = USART_PARITY_NONE;
    298e:	22ff      	movs	r2, #255	; 0xff
    2990:	4669      	mov	r1, sp
    2992:	810a      	strh	r2, [r1, #8]
	config->stopbits         = USART_STOPBITS_1;
    2994:	2200      	movs	r2, #0
    2996:	728b      	strb	r3, [r1, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
    2998:	72cb      	strb	r3, [r1, #11]
	config->baudrate         = 9600;
	config->receiver_enable  = true;
    299a:	2401      	movs	r4, #1
    299c:	2124      	movs	r1, #36	; 0x24
    299e:	4668      	mov	r0, sp
    29a0:	5444      	strb	r4, [r0, r1]
	config->transmitter_enable = true;
    29a2:	3101      	adds	r1, #1
    29a4:	5444      	strb	r4, [r0, r1]
	config->clock_polarity_inverted = false;
    29a6:	3101      	adds	r1, #1
    29a8:	5443      	strb	r3, [r0, r1]
	config->use_external_clock = false;
    29aa:	3101      	adds	r1, #1
    29ac:	5443      	strb	r3, [r0, r1]
	config->ext_clock_freq   = 0;
    29ae:	930a      	str	r3, [sp, #40]	; 0x28
	config->mux_setting      = USART_RX_1_TX_2_XCK_3;
	config->run_in_standby   = false;
    29b0:	3105      	adds	r1, #5
    29b2:	5443      	strb	r3, [r0, r1]
	config->generator_source = GCLK_GENERATOR_0;
    29b4:	3101      	adds	r1, #1
    29b6:	5443      	strb	r3, [r0, r1]
	config->pinmux_pad0      = PINMUX_DEFAULT;
	config->pinmux_pad1      = PINMUX_DEFAULT;
	config->pinmux_pad2      = PINMUX_DEFAULT;
	config->pinmux_pad3      = PINMUX_DEFAULT;
#ifdef FEATURE_USART_OVER_SAMPLE
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
    29b8:	9305      	str	r3, [sp, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
    29ba:	8203      	strh	r3, [r0, #16]
#endif
#ifdef FEATURE_USART_LIN_SLAVE
	config->lin_slave_enable      = false;
    29bc:	76c3      	strb	r3, [r0, #27]
#endif
#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
	config->immediate_buffer_overflow_notification      = false;
    29be:	7602      	strb	r2, [r0, #24]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	config->start_frame_detection_enable                = false;
    29c0:	7702      	strb	r2, [r0, #28]
#endif
#ifdef FEATURE_USART_IRDA
	config->encoding_format_enable                      = false;
    29c2:	7642      	strb	r2, [r0, #25]
	config->receive_pulse_length                        = 19;
    29c4:	2313      	movs	r3, #19
    29c6:	7683      	strb	r3, [r0, #26]
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
	config->collision_detection_enable                  = false;
    29c8:	7742      	strb	r2, [r0, #29]
#if SAMD || SAMR21
	struct usart_config host_uart_config;
	/* Configure USART for unit test output */
	usart_get_config_defaults(&host_uart_config);
	host_uart_config.mux_setting = EDBG_CDC_SERCOM_MUX_SETTING;
    29ca:	2380      	movs	r3, #128	; 0x80
    29cc:	035b      	lsls	r3, r3, #13
    29ce:	9303      	str	r3, [sp, #12]

	host_uart_config.pinmux_pad0 = EDBG_CDC_SERCOM_PINMUX_PAD0;
    29d0:	4b2c      	ldr	r3, [pc, #176]	; (2a84 <sio2host_init+0x104>)
    29d2:	930c      	str	r3, [sp, #48]	; 0x30
	host_uart_config.pinmux_pad1 = EDBG_CDC_SERCOM_PINMUX_PAD1;
    29d4:	4b2c      	ldr	r3, [pc, #176]	; (2a88 <sio2host_init+0x108>)
    29d6:	930d      	str	r3, [sp, #52]	; 0x34
	host_uart_config.pinmux_pad2 = EDBG_CDC_SERCOM_PINMUX_PAD2;
    29d8:	2301      	movs	r3, #1
    29da:	425b      	negs	r3, r3
    29dc:	930e      	str	r3, [sp, #56]	; 0x38
	host_uart_config.pinmux_pad3 = EDBG_CDC_SERCOM_PINMUX_PAD3;
    29de:	930f      	str	r3, [sp, #60]	; 0x3c
	host_uart_config.baudrate    = USART_HOST_BAUDRATE;
    29e0:	23e1      	movs	r3, #225	; 0xe1
    29e2:	025b      	lsls	r3, r3, #9
    29e4:	9308      	str	r3, [sp, #32]
static inline void stdio_serial_init(
		struct usart_module *const module,
		usart_inst_t const hw,
		const struct usart_config *const config)
{
	stdio_base = (void *)module;
    29e6:	4d29      	ldr	r5, [pc, #164]	; (2a8c <sio2host_init+0x10c>)
    29e8:	4b29      	ldr	r3, [pc, #164]	; (2a90 <sio2host_init+0x110>)
    29ea:	601d      	str	r5, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
    29ec:	4a29      	ldr	r2, [pc, #164]	; (2a94 <sio2host_init+0x114>)
    29ee:	4b2a      	ldr	r3, [pc, #168]	; (2a98 <sio2host_init+0x118>)
    29f0:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
    29f2:	4a2a      	ldr	r2, [pc, #168]	; (2a9c <sio2host_init+0x11c>)
    29f4:	4b2a      	ldr	r3, [pc, #168]	; (2aa0 <sio2host_init+0x120>)
    29f6:	601a      	str	r2, [r3, #0]
static inline bool usart_serial_init(
		struct usart_module *const module,
		usart_inst_t const hw,
		const struct usart_config *const config)
{
	if (usart_init(module, hw, config) == STATUS_OK) {
    29f8:	1c28      	adds	r0, r5, #0
    29fa:	492a      	ldr	r1, [pc, #168]	; (2aa4 <sio2host_init+0x124>)
    29fc:	466a      	mov	r2, sp
    29fe:	4b2a      	ldr	r3, [pc, #168]	; (2aa8 <sio2host_init+0x128>)
    2a00:	4798      	blx	r3

	usart_serial_init(module, hw, config);
# if defined(__GNUC__)
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
    2a02:	4f2a      	ldr	r7, [pc, #168]	; (2aac <sio2host_init+0x12c>)
    2a04:	683b      	ldr	r3, [r7, #0]
    2a06:	6898      	ldr	r0, [r3, #8]
    2a08:	2100      	movs	r1, #0
    2a0a:	4e29      	ldr	r6, [pc, #164]	; (2ab0 <sio2host_init+0x130>)
    2a0c:	47b0      	blx	r6
	setbuf(stdin, NULL);
    2a0e:	683b      	ldr	r3, [r7, #0]
    2a10:	6858      	ldr	r0, [r3, #4]
    2a12:	2100      	movs	r1, #0
    2a14:	47b0      	blx	r6
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    2a16:	682e      	ldr	r6, [r5, #0]

#if USART_CALLBACK_MODE == true
	/* Enable Global interrupt for module */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    2a18:	1c30      	adds	r0, r6, #0
    2a1a:	4b26      	ldr	r3, [pc, #152]	; (2ab4 <sio2host_init+0x134>)
    2a1c:	4798      	blx	r3
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    2a1e:	231f      	movs	r3, #31
    2a20:	4018      	ands	r0, r3
    2a22:	4084      	lsls	r4, r0
    2a24:	4b24      	ldr	r3, [pc, #144]	; (2ab8 <sio2host_init+0x138>)
    2a26:	601c      	str	r4, [r3, #0]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
    2a28:	682a      	ldr	r2, [r5, #0]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    2a2a:	69d3      	ldr	r3, [r2, #28]
		const struct usart_module *const module)
{
	/* Sanity check. */
	Assert(module);

	while (usart_is_syncing(module)) {
    2a2c:	2b00      	cmp	r3, #0
    2a2e:	d1fc      	bne.n	2a2a <sio2host_init+0xaa>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Enable USART module */
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    2a30:	6832      	ldr	r2, [r6, #0]
    2a32:	3302      	adds	r3, #2
    2a34:	4313      	orrs	r3, r2
    2a36:	6033      	str	r3, [r6, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    2a38:	4b14      	ldr	r3, [pc, #80]	; (2a8c <sio2host_init+0x10c>)
    2a3a:	681b      	ldr	r3, [r3, #0]
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    2a3c:	69da      	ldr	r2, [r3, #28]
		const struct usart_module *const module)
{
	/* Sanity check. */
	Assert(module);

	while (usart_is_syncing(module)) {
    2a3e:	2a00      	cmp	r2, #0
    2a40:	d1fc      	bne.n	2a3c <sio2host_init+0xbc>
			module->receiver_enabled = true;
			break;

		case USART_TRANSCEIVER_TX:
			/* Enable TX */
			usart_hw->CTRLB.reg |= SERCOM_USART_CTRLB_TXEN;
    2a42:	685a      	ldr	r2, [r3, #4]
    2a44:	2180      	movs	r1, #128	; 0x80
    2a46:	0249      	lsls	r1, r1, #9
    2a48:	430a      	orrs	r2, r1
    2a4a:	605a      	str	r2, [r3, #4]
			module->transmitter_enabled = true;
    2a4c:	2101      	movs	r1, #1
    2a4e:	4a0f      	ldr	r2, [pc, #60]	; (2a8c <sio2host_init+0x10c>)
    2a50:	71d1      	strb	r1, [r2, #7]
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    2a52:	69da      	ldr	r2, [r3, #28]
		const struct usart_module *const module)
{
	/* Sanity check. */
	Assert(module);

	while (usart_is_syncing(module)) {
    2a54:	2a00      	cmp	r2, #0
    2a56:	d1fc      	bne.n	2a52 <sio2host_init+0xd2>
	_usart_wait_for_sync(module);

	switch (transceiver_type) {
		case USART_TRANSCEIVER_RX:
			/* Enable RX */
			usart_hw->CTRLB.reg |= SERCOM_USART_CTRLB_RXEN;
    2a58:	685a      	ldr	r2, [r3, #4]
    2a5a:	2180      	movs	r1, #128	; 0x80
    2a5c:	0289      	lsls	r1, r1, #10
    2a5e:	430a      	orrs	r2, r1
    2a60:	605a      	str	r2, [r3, #4]
			module->receiver_enabled = true;
    2a62:	2201      	movs	r2, #1
    2a64:	4b09      	ldr	r3, [pc, #36]	; (2a8c <sio2host_init+0x10c>)
    2a66:	719a      	strb	r2, [r3, #6]
	usart_enable_transceiver(&host_uart_module, USART_TRANSCEIVER_TX);
	usart_enable_transceiver(&host_uart_module, USART_TRANSCEIVER_RX);
#else
	stdio_serial_init(USART_HOST, &usart_serial_options);
#endif
	USART_HOST_RX_ISR_ENABLE();
    2a68:	2000      	movs	r0, #0
    2a6a:	4914      	ldr	r1, [pc, #80]	; (2abc <sio2host_init+0x13c>)
    2a6c:	4b14      	ldr	r3, [pc, #80]	; (2ac0 <sio2host_init+0x140>)
    2a6e:	4798      	blx	r3
    2a70:	2204      	movs	r2, #4
    2a72:	4b0c      	ldr	r3, [pc, #48]	; (2aa4 <sio2host_init+0x124>)
    2a74:	759a      	strb	r2, [r3, #22]
    2a76:	32fd      	adds	r2, #253	; 0xfd
    2a78:	32ff      	adds	r2, #255	; 0xff
    2a7a:	4b0f      	ldr	r3, [pc, #60]	; (2ab8 <sio2host_init+0x138>)
    2a7c:	601a      	str	r2, [r3, #0]
}
    2a7e:	b011      	add	sp, #68	; 0x44
    2a80:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2a82:	46c0      	nop			; (mov r8, r8)
    2a84:	00040003 	.word	0x00040003
    2a88:	00050003 	.word	0x00050003
    2a8c:	20000338 	.word	0x20000338
    2a90:	20002b00 	.word	0x20002b00
    2a94:	000028fd 	.word	0x000028fd
    2a98:	20002afc 	.word	0x20002afc
    2a9c:	000028d1 	.word	0x000028d1
    2aa0:	20002af8 	.word	0x20002af8
    2aa4:	42000800 	.word	0x42000800
    2aa8:	000014c9 	.word	0x000014c9
    2aac:	20000234 	.word	0x20000234
    2ab0:	00010ca9 	.word	0x00010ca9
    2ab4:	00001099 	.word	0x00001099
    2ab8:	e000e100 	.word	0xe000e100
    2abc:	00002915 	.word	0x00002915
    2ac0:	0000105d 	.word	0x0000105d

00002ac4 <AT86RFX_ISR>:
void AT86RFX_ISR(void)
#else
AT86RFX_ISR()
#endif

{
    2ac4:	b508      	push	{r3, lr}
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));

	eic_module->INTFLAG.reg = eic_mask;
    2ac6:	2201      	movs	r2, #1
    2ac8:	4b03      	ldr	r3, [pc, #12]	; (2ad8 <AT86RFX_ISR+0x14>)
    2aca:	611a      	str	r2, [r3, #16]
	/*Clearing the RF interrupt*/
	trx_irq_flag_clr();
  	/*Calling the interrupt routines*/
	if (irq_hdl_trx) {
    2acc:	4b03      	ldr	r3, [pc, #12]	; (2adc <AT86RFX_ISR+0x18>)
    2ace:	681b      	ldr	r3, [r3, #0]
    2ad0:	2b00      	cmp	r3, #0
    2ad2:	d000      	beq.n	2ad6 <AT86RFX_ISR+0x12>
		irq_hdl_trx();
    2ad4:	4798      	blx	r3
	}
}
    2ad6:	bd08      	pop	{r3, pc}
    2ad8:	40001800 	.word	0x40001800
    2adc:	20000370 	.word	0x20000370

00002ae0 <trx_spi_init>:

void trx_spi_init(void)
{
    2ae0:	b510      	push	{r4, lr}
    2ae2:	b084      	sub	sp, #16
		struct spi_slave_inst_config *const config)
{
	Assert(config);

	config->ss_pin          = 10;
	config->address_enabled = false;
    2ae4:	4a32      	ldr	r2, [pc, #200]	; (2bb0 <trx_spi_init+0xd0>)
    2ae6:	2300      	movs	r3, #0
    2ae8:	7053      	strb	r3, [r2, #1]
	config->address         = 0;
    2aea:	7093      	strb	r3, [r2, #2]
	/* Initialize SPI in master mode to access the transceiver */
#if SAMD || SAMR21
	spi_slave_inst_get_config_defaults(&slave_dev_config);
	slave_dev_config.ss_pin = AT86RFX_SPI_CS;
    2aec:	213f      	movs	r1, #63	; 0x3f
    2aee:	7011      	strb	r1, [r2, #0]
		struct spi_slave_inst_config *const config)
{
	Assert(slave);
	Assert(config);

	slave->ss_pin          = config->ss_pin;
    2af0:	4c30      	ldr	r4, [pc, #192]	; (2bb4 <trx_spi_init+0xd4>)
    2af2:	7021      	strb	r1, [r4, #0]
	slave->address_enabled = config->address_enabled;
    2af4:	7063      	strb	r3, [r4, #1]
	slave->address         = config->address;
    2af6:	70a3      	strb	r3, [r4, #2]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
	config->input_pull = PORT_PIN_PULL_UP;
    2af8:	2201      	movs	r2, #1
    2afa:	4669      	mov	r1, sp
    2afc:	704a      	strb	r2, [r1, #1]
	config->powersave  = false;
    2afe:	708b      	strb	r3, [r1, #2]
	/* Get default config for pin */
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);

	/* Edit config to set the pin as output */
	pin_conf.direction = PORT_PIN_DIR_OUTPUT;
    2b00:	700a      	strb	r2, [r1, #0]

	/* Set config on Slave Select pin */
	port_pin_set_config(slave->ss_pin, &pin_conf);
    2b02:	203f      	movs	r0, #63	; 0x3f
    2b04:	4b2c      	ldr	r3, [pc, #176]	; (2bb8 <trx_spi_init+0xd8>)
    2b06:	4798      	blx	r3
	port_pin_set_output_level(slave->ss_pin, true);
    2b08:	7823      	ldrb	r3, [r4, #0]
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports. */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    2b0a:	09d9      	lsrs	r1, r3, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
    2b0c:	2200      	movs	r2, #0
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports. */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    2b0e:	2900      	cmp	r1, #0
    2b10:	d104      	bne.n	2b1c <trx_spi_init+0x3c>
		return &(ports[port_index]->Group[group_index]);
    2b12:	095a      	lsrs	r2, r3, #5
    2b14:	01d2      	lsls	r2, r2, #7
    2b16:	4929      	ldr	r1, [pc, #164]	; (2bbc <trx_spi_init+0xdc>)
    2b18:	468c      	mov	ip, r1
    2b1a:	4462      	add	r2, ip
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    2b1c:	211f      	movs	r1, #31
    2b1e:	400b      	ands	r3, r1
    2b20:	391e      	subs	r1, #30
    2b22:	1c08      	adds	r0, r1, #0
    2b24:	4098      	lsls	r0, r3

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
    2b26:	6190      	str	r0, [r2, #24]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mode             = SPI_MODE_MASTER;
    2b28:	4a25      	ldr	r2, [pc, #148]	; (2bc0 <trx_spi_init+0xe0>)
    2b2a:	7011      	strb	r1, [r2, #0]
	config->data_order       = SPI_DATA_ORDER_MSB;
    2b2c:	2300      	movs	r3, #0
    2b2e:	6053      	str	r3, [r2, #4]
	config->transfer_mode    = SPI_TRANSFER_MODE_0;
    2b30:	6093      	str	r3, [r2, #8]
	config->mux_setting      = SPI_SIGNAL_MUX_SETTING_D;
	config->character_size   = SPI_CHARACTER_SIZE_8BIT;
    2b32:	7413      	strb	r3, [r2, #16]
	config->run_in_standby   = false;
    2b34:	7453      	strb	r3, [r2, #17]
	config->receiver_enable  = true;
    2b36:	7491      	strb	r1, [r2, #18]
#  ifdef FEATURE_SPI_SLAVE_SELECT_LOW_DETECT
	config->select_slave_low_detect_enable= true;
    2b38:	74d1      	strb	r1, [r2, #19]
#  endif
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	config->master_slave_select_enable= false;
    2b3a:	7513      	strb	r3, [r2, #20]
#  endif
	config->generator_source = GCLK_GENERATOR_0;
    2b3c:	3123      	adds	r1, #35	; 0x23
    2b3e:	5453      	strb	r3, [r2, r1]

	/* Clear mode specific config */
	memset(&(config->mode_specific), 0, sizeof(config->mode_specific));
    2b40:	61d3      	str	r3, [r2, #28]
    2b42:	6213      	str	r3, [r2, #32]
	spi_attach_slave(&slave, &slave_dev_config);
	spi_get_config_defaults(&config);
	AT86RFX_SPI_CONFIG(config);
    2b44:	2380      	movs	r3, #128	; 0x80
    2b46:	025b      	lsls	r3, r3, #9
    2b48:	60d3      	str	r3, [r2, #12]
    2b4a:	4b1e      	ldr	r3, [pc, #120]	; (2bc4 <trx_spi_init+0xe4>)
    2b4c:	6193      	str	r3, [r2, #24]
    2b4e:	4b1e      	ldr	r3, [pc, #120]	; (2bc8 <trx_spi_init+0xe8>)
    2b50:	6293      	str	r3, [r2, #40]	; 0x28
    2b52:	2301      	movs	r3, #1
    2b54:	425b      	negs	r3, r3
    2b56:	62d3      	str	r3, [r2, #44]	; 0x2c
    2b58:	4b1c      	ldr	r3, [pc, #112]	; (2bcc <trx_spi_init+0xec>)
    2b5a:	6313      	str	r3, [r2, #48]	; 0x30
    2b5c:	4b1c      	ldr	r3, [pc, #112]	; (2bd0 <trx_spi_init+0xf0>)
    2b5e:	6353      	str	r3, [r2, #52]	; 0x34
	spi_init(&master, AT86RFX_SPI, &config);
    2b60:	4c1c      	ldr	r4, [pc, #112]	; (2bd4 <trx_spi_init+0xf4>)
    2b62:	1c20      	adds	r0, r4, #0
    2b64:	491c      	ldr	r1, [pc, #112]	; (2bd8 <trx_spi_init+0xf8>)
    2b66:	4b1d      	ldr	r3, [pc, #116]	; (2bdc <trx_spi_init+0xfc>)
    2b68:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    2b6a:	6822      	ldr	r2, [r4, #0]

	SercomSpi *const spi_module = &(module->hw->SPI);

#  ifdef FEATURE_SPI_SYNC_SCHEME_VERSION_2
	/* Return synchronization status */
	return (spi_module->SYNCBUSY.reg);
    2b6c:	69d3      	ldr	r3, [r2, #28]

#  if SPI_CALLBACK_MODE == true
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
#  endif

	while (spi_is_syncing(module)) {
    2b6e:	2b00      	cmp	r3, #0
    2b70:	d1fc      	bne.n	2b6c <trx_spi_init+0x8c>
		/* Wait until the synchronization is complete */
	}

	/* Enable SPI */
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
    2b72:	6811      	ldr	r1, [r2, #0]
    2b74:	3302      	adds	r3, #2
    2b76:	430b      	orrs	r3, r1
    2b78:	6013      	str	r3, [r2, #0]

	/* Default configuration values */
	config->gpio_pin            = 0;
	config->gpio_pin_mux        = 0;
	config->gpio_pin_pull       = EXTINT_PULL_UP;
	config->wake_if_sleeping    = true;
    2b7a:	a901      	add	r1, sp, #4
    2b7c:	2301      	movs	r3, #1
    2b7e:	724b      	strb	r3, [r1, #9]
	config->filter_input_signal = false;
    2b80:	2300      	movs	r3, #0
    2b82:	728b      	strb	r3, [r1, #10]
	spi_enable(&master);
	AT86RFX_INTC_INIT();
    2b84:	2220      	movs	r2, #32
    2b86:	9201      	str	r2, [sp, #4]
    2b88:	2280      	movs	r2, #128	; 0x80
    2b8a:	0392      	lsls	r2, r2, #14
    2b8c:	604a      	str	r2, [r1, #4]
    2b8e:	720b      	strb	r3, [r1, #8]
    2b90:	3303      	adds	r3, #3
    2b92:	72cb      	strb	r3, [r1, #11]
    2b94:	2000      	movs	r0, #0
    2b96:	4b12      	ldr	r3, [pc, #72]	; (2be0 <trx_spi_init+0x100>)
    2b98:	4798      	blx	r3
    2b9a:	4812      	ldr	r0, [pc, #72]	; (2be4 <trx_spi_init+0x104>)
    2b9c:	2100      	movs	r1, #0
    2b9e:	2200      	movs	r2, #0
    2ba0:	4b11      	ldr	r3, [pc, #68]	; (2be8 <trx_spi_init+0x108>)
    2ba2:	4798      	blx	r3
    2ba4:	2000      	movs	r0, #0
    2ba6:	2100      	movs	r1, #0
    2ba8:	4b10      	ldr	r3, [pc, #64]	; (2bec <trx_spi_init+0x10c>)
    2baa:	4798      	blx	r3
	spi_master_setup_device(AT86RFX_SPI, &SPI_AT86RFX_DEVICE, SPI_MODE_0,
			AT86RFX_SPI_BAUDRATE, 0);
	spi_enable(AT86RFX_SPI);
	AT86RFX_INTC_INIT();
#endif
}
    2bac:	b004      	add	sp, #16
    2bae:	bd10      	pop	{r4, pc}
    2bb0:	20002b08 	.word	0x20002b08
    2bb4:	20002b0c 	.word	0x20002b0c
    2bb8:	0000051d 	.word	0x0000051d
    2bbc:	41004400 	.word	0x41004400
    2bc0:	20002b10 	.word	0x20002b10
    2bc4:	003d0900 	.word	0x003d0900
    2bc8:	00530005 	.word	0x00530005
    2bcc:	003e0005 	.word	0x003e0005
    2bd0:	00520005 	.word	0x00520005
    2bd4:	20002b48 	.word	0x20002b48
    2bd8:	42001800 	.word	0x42001800
    2bdc:	00001125 	.word	0x00001125
    2be0:	00000369 	.word	0x00000369
    2be4:	00002ac5 	.word	0x00002ac5
    2be8:	000003e1 	.word	0x000003e1
    2bec:	0000040d 	.word	0x0000040d

00002bf0 <trx_reg_read>:
	delay_us(10);
	RST_HIGH();
}

uint8_t trx_reg_read(uint8_t addr)
{
    2bf0:	b570      	push	{r4, r5, r6, lr}
    2bf2:	1c05      	adds	r5, r0, #0
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    2bf4:	f3ef 8410 	mrs	r4, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
    2bf8:	4263      	negs	r3, r4
    2bfa:	415c      	adcs	r4, r3
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
    2bfc:	b672      	cpsid	i
    2bfe:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    2c02:	2200      	movs	r2, #0
    2c04:	4b33      	ldr	r3, [pc, #204]	; (2cd4 <trx_reg_read+0xe4>)
    2c06:	701a      	strb	r2, [r3, #0]
	/* Prepare the command byte */
	addr |= READ_ACCESS_COMMAND;

#if SAMD || SAMR21
	/* Start SPI transaction by pulling SEL low */
	spi_select_slave(&master, &slave, true);
    2c08:	4e33      	ldr	r6, [pc, #204]	; (2cd8 <trx_reg_read+0xe8>)
    2c0a:	1c30      	adds	r0, r6, #0
    2c0c:	4933      	ldr	r1, [pc, #204]	; (2cdc <trx_reg_read+0xec>)
    2c0e:	3201      	adds	r2, #1
    2c10:	4b33      	ldr	r3, [pc, #204]	; (2ce0 <trx_reg_read+0xf0>)
    2c12:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    2c14:	6833      	ldr	r3, [r6, #0]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    2c16:	2101      	movs	r1, #1
    2c18:	7e1a      	ldrb	r2, [r3, #24]

	/* Send the Read command byte */
	while (!spi_is_ready_to_write(&master)) {
    2c1a:	420a      	tst	r2, r1
    2c1c:	d0fc      	beq.n	2c18 <trx_reg_read+0x28>
    2c1e:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
    2c20:	07d2      	lsls	r2, r2, #31
    2c22:	d502      	bpl.n	2c2a <trx_reg_read+0x3a>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    2c24:	2280      	movs	r2, #128	; 0x80
    2c26:	4315      	orrs	r5, r2
    2c28:	629d      	str	r5, [r3, #40]	; 0x28
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    2c2a:	2102      	movs	r1, #2
    2c2c:	7e1a      	ldrb	r2, [r3, #24]
	}
	spi_write(&master, addr);
	while (!spi_is_write_complete(&master)) {
    2c2e:	420a      	tst	r2, r1
    2c30:	d0fc      	beq.n	2c2c <trx_reg_read+0x3c>
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    2c32:	2104      	movs	r1, #4
    2c34:	7e1a      	ldrb	r2, [r3, #24]
	}
	/* Dummy read since SPI RX is double buffered */
	while (!spi_is_ready_to_read(&master)) {
    2c36:	420a      	tst	r2, r1
    2c38:	d0fc      	beq.n	2c34 <trx_reg_read+0x44>
    2c3a:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
    2c3c:	0752      	lsls	r2, r2, #29
    2c3e:	d514      	bpl.n	2c6a <trx_reg_read+0x7a>

	/* Return value */
	enum status_code retval = STATUS_OK;

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    2c40:	8b5a      	ldrh	r2, [r3, #26]
    2c42:	0752      	lsls	r2, r2, #29
    2c44:	d503      	bpl.n	2c4e <trx_reg_read+0x5e>
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg |= SERCOM_SPI_STATUS_BUFOVF;
    2c46:	8b59      	ldrh	r1, [r3, #26]
    2c48:	2204      	movs	r2, #4
    2c4a:	430a      	orrs	r2, r1
    2c4c:	835a      	strh	r2, [r3, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    2c4e:	4a22      	ldr	r2, [pc, #136]	; (2cd8 <trx_reg_read+0xe8>)
    2c50:	7992      	ldrb	r2, [r2, #6]
    2c52:	2a01      	cmp	r2, #1
    2c54:	d105      	bne.n	2c62 <trx_reg_read+0x72>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    2c56:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    2c58:	05d2      	lsls	r2, r2, #23
    2c5a:	0dd2      	lsrs	r2, r2, #23
    2c5c:	4921      	ldr	r1, [pc, #132]	; (2ce4 <trx_reg_read+0xf4>)
    2c5e:	800a      	strh	r2, [r1, #0]
    2c60:	e003      	b.n	2c6a <trx_reg_read+0x7a>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    2c62:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    2c64:	b2d2      	uxtb	r2, r2
    2c66:	491f      	ldr	r1, [pc, #124]	; (2ce4 <trx_reg_read+0xf4>)
    2c68:	800a      	strh	r2, [r1, #0]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    2c6a:	2101      	movs	r1, #1
    2c6c:	7e1a      	ldrb	r2, [r3, #24]
	}
	spi_read(&master, &dummy_read);

	while (!spi_is_ready_to_write(&master)) {
    2c6e:	420a      	tst	r2, r1
    2c70:	d0fc      	beq.n	2c6c <trx_reg_read+0x7c>
    2c72:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
    2c74:	07d2      	lsls	r2, r2, #31
    2c76:	d501      	bpl.n	2c7c <trx_reg_read+0x8c>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    2c78:	2200      	movs	r2, #0
    2c7a:	629a      	str	r2, [r3, #40]	; 0x28
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    2c7c:	2102      	movs	r1, #2
    2c7e:	7e1a      	ldrb	r2, [r3, #24]
	}
	spi_write(&master, 0);
	while (!spi_is_write_complete(&master)) {
    2c80:	420a      	tst	r2, r1
    2c82:	d0fc      	beq.n	2c7e <trx_reg_read+0x8e>
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    2c84:	2104      	movs	r1, #4
    2c86:	7e1a      	ldrb	r2, [r3, #24]
	}
	while (!spi_is_ready_to_read(&master)) {
    2c88:	420a      	tst	r2, r1
    2c8a:	d0fc      	beq.n	2c86 <trx_reg_read+0x96>
    2c8c:	7e1a      	ldrb	r2, [r3, #24]
}

uint8_t trx_reg_read(uint8_t addr)
{
#if SAMD || SAMR21
	uint16_t register_value = 0;
    2c8e:	2500      	movs	r5, #0
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
    2c90:	0752      	lsls	r2, r2, #29
    2c92:	d510      	bpl.n	2cb6 <trx_reg_read+0xc6>

	/* Return value */
	enum status_code retval = STATUS_OK;

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    2c94:	8b5a      	ldrh	r2, [r3, #26]
    2c96:	0752      	lsls	r2, r2, #29
    2c98:	d503      	bpl.n	2ca2 <trx_reg_read+0xb2>
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg |= SERCOM_SPI_STATUS_BUFOVF;
    2c9a:	8b59      	ldrh	r1, [r3, #26]
    2c9c:	2204      	movs	r2, #4
    2c9e:	430a      	orrs	r2, r1
    2ca0:	835a      	strh	r2, [r3, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    2ca2:	4a0d      	ldr	r2, [pc, #52]	; (2cd8 <trx_reg_read+0xe8>)
    2ca4:	7992      	ldrb	r2, [r2, #6]
    2ca6:	2a01      	cmp	r2, #1
    2ca8:	d103      	bne.n	2cb2 <trx_reg_read+0xc2>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    2caa:	6a9d      	ldr	r5, [r3, #40]	; 0x28
    2cac:	05ed      	lsls	r5, r5, #23
    2cae:	0ded      	lsrs	r5, r5, #23
    2cb0:	e001      	b.n	2cb6 <trx_reg_read+0xc6>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    2cb2:	6a9d      	ldr	r5, [r3, #40]	; 0x28
    2cb4:	b2ed      	uxtb	r5, r5
	while (!spi_is_ready_to_read(&master)) {
	}
	spi_read(&master, &register_value);

	/* Stop the SPI transaction by setting SEL high */
	spi_select_slave(&master, &slave, false);
    2cb6:	4808      	ldr	r0, [pc, #32]	; (2cd8 <trx_reg_read+0xe8>)
    2cb8:	4908      	ldr	r1, [pc, #32]	; (2cdc <trx_reg_read+0xec>)
    2cba:	2200      	movs	r2, #0
    2cbc:	4b08      	ldr	r3, [pc, #32]	; (2ce0 <trx_reg_read+0xf0>)
    2cbe:	4798      	blx	r3
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
    2cc0:	2c00      	cmp	r4, #0
    2cc2:	d005      	beq.n	2cd0 <trx_reg_read+0xe0>
		cpu_irq_enable();
    2cc4:	2201      	movs	r2, #1
    2cc6:	4b03      	ldr	r3, [pc, #12]	; (2cd4 <trx_reg_read+0xe4>)
    2cc8:	701a      	strb	r2, [r3, #0]
    2cca:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
    2cce:	b662      	cpsie	i
#endif
	/*Restoring the interrupt status which was stored & enabling the global
	 *interrupt */
	LEAVE_TRX_CRITICAL_REGION();

	return register_value;
    2cd0:	b2e8      	uxtb	r0, r5
}
    2cd2:	bd70      	pop	{r4, r5, r6, pc}
    2cd4:	20000008 	.word	0x20000008
    2cd8:	20002b48 	.word	0x20002b48
    2cdc:	20002b0c 	.word	0x20002b0c
    2ce0:	000013d5 	.word	0x000013d5
    2ce4:	20002b04 	.word	0x20002b04

00002ce8 <trx_reg_write>:

void trx_reg_write(uint8_t addr, uint8_t data)
{
    2ce8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2cea:	1c06      	adds	r6, r0, #0
    2cec:	1c0c      	adds	r4, r1, #0
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    2cee:	f3ef 8510 	mrs	r5, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
    2cf2:	426b      	negs	r3, r5
    2cf4:	415d      	adcs	r5, r3
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
    2cf6:	b672      	cpsid	i
    2cf8:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    2cfc:	2200      	movs	r2, #0
    2cfe:	4b34      	ldr	r3, [pc, #208]	; (2dd0 <trx_reg_write+0xe8>)
    2d00:	701a      	strb	r2, [r3, #0]
	/* Prepare the command byte */
	addr |= WRITE_ACCESS_COMMAND;

#if SAMD || SAMR21
	/* Start SPI transaction by pulling SEL low */
	spi_select_slave(&master, &slave, true);
    2d02:	4f34      	ldr	r7, [pc, #208]	; (2dd4 <trx_reg_write+0xec>)
    2d04:	1c38      	adds	r0, r7, #0
    2d06:	4934      	ldr	r1, [pc, #208]	; (2dd8 <trx_reg_write+0xf0>)
    2d08:	3201      	adds	r2, #1
    2d0a:	4b34      	ldr	r3, [pc, #208]	; (2ddc <trx_reg_write+0xf4>)
    2d0c:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    2d0e:	683b      	ldr	r3, [r7, #0]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    2d10:	2101      	movs	r1, #1
    2d12:	7e1a      	ldrb	r2, [r3, #24]

	/* Send the Read command byte */
	while (!spi_is_ready_to_write(&master)) {
    2d14:	420a      	tst	r2, r1
    2d16:	d0fc      	beq.n	2d12 <trx_reg_write+0x2a>
    2d18:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
    2d1a:	07d2      	lsls	r2, r2, #31
    2d1c:	d502      	bpl.n	2d24 <trx_reg_write+0x3c>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    2d1e:	22c0      	movs	r2, #192	; 0xc0
    2d20:	4316      	orrs	r6, r2
    2d22:	629e      	str	r6, [r3, #40]	; 0x28
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    2d24:	2102      	movs	r1, #2
    2d26:	7e1a      	ldrb	r2, [r3, #24]
	}
	spi_write(&master, addr);
	while (!spi_is_write_complete(&master)) {
    2d28:	420a      	tst	r2, r1
    2d2a:	d0fc      	beq.n	2d26 <trx_reg_write+0x3e>
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    2d2c:	2104      	movs	r1, #4
    2d2e:	7e1a      	ldrb	r2, [r3, #24]
	}
	/* Dummy read since SPI RX is double buffered */
	while (!spi_is_ready_to_read(&master)) {
    2d30:	420a      	tst	r2, r1
    2d32:	d0fc      	beq.n	2d2e <trx_reg_write+0x46>
    2d34:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
    2d36:	0752      	lsls	r2, r2, #29
    2d38:	d514      	bpl.n	2d64 <trx_reg_write+0x7c>

	/* Return value */
	enum status_code retval = STATUS_OK;

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    2d3a:	8b5a      	ldrh	r2, [r3, #26]
    2d3c:	0752      	lsls	r2, r2, #29
    2d3e:	d503      	bpl.n	2d48 <trx_reg_write+0x60>
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg |= SERCOM_SPI_STATUS_BUFOVF;
    2d40:	8b59      	ldrh	r1, [r3, #26]
    2d42:	2204      	movs	r2, #4
    2d44:	430a      	orrs	r2, r1
    2d46:	835a      	strh	r2, [r3, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    2d48:	4a22      	ldr	r2, [pc, #136]	; (2dd4 <trx_reg_write+0xec>)
    2d4a:	7992      	ldrb	r2, [r2, #6]
    2d4c:	2a01      	cmp	r2, #1
    2d4e:	d105      	bne.n	2d5c <trx_reg_write+0x74>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    2d50:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    2d52:	05d2      	lsls	r2, r2, #23
    2d54:	0dd2      	lsrs	r2, r2, #23
    2d56:	4922      	ldr	r1, [pc, #136]	; (2de0 <trx_reg_write+0xf8>)
    2d58:	800a      	strh	r2, [r1, #0]
    2d5a:	e003      	b.n	2d64 <trx_reg_write+0x7c>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    2d5c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    2d5e:	b2d2      	uxtb	r2, r2
    2d60:	491f      	ldr	r1, [pc, #124]	; (2de0 <trx_reg_write+0xf8>)
    2d62:	800a      	strh	r2, [r1, #0]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    2d64:	2101      	movs	r1, #1
    2d66:	7e1a      	ldrb	r2, [r3, #24]
	}
	spi_read(&master, &dummy_read);

	/* Write the byte in the transceiver data register */
	while (!spi_is_ready_to_write(&master)) {
    2d68:	420a      	tst	r2, r1
    2d6a:	d0fc      	beq.n	2d66 <trx_reg_write+0x7e>
    2d6c:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
    2d6e:	07d2      	lsls	r2, r2, #31
    2d70:	d500      	bpl.n	2d74 <trx_reg_write+0x8c>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    2d72:	629c      	str	r4, [r3, #40]	; 0x28
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    2d74:	2102      	movs	r1, #2
    2d76:	7e1a      	ldrb	r2, [r3, #24]
	}
	spi_write(&master, data);
	while (!spi_is_write_complete(&master)) {
    2d78:	420a      	tst	r2, r1
    2d7a:	d0fc      	beq.n	2d76 <trx_reg_write+0x8e>
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    2d7c:	2104      	movs	r1, #4
    2d7e:	7e1a      	ldrb	r2, [r3, #24]
	}
	/* Dummy read since SPI RX is double buffered */
	while (!spi_is_ready_to_read(&master)) {
    2d80:	420a      	tst	r2, r1
    2d82:	d0fc      	beq.n	2d7e <trx_reg_write+0x96>
    2d84:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
    2d86:	0752      	lsls	r2, r2, #29
    2d88:	d514      	bpl.n	2db4 <trx_reg_write+0xcc>

	/* Return value */
	enum status_code retval = STATUS_OK;

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    2d8a:	8b5a      	ldrh	r2, [r3, #26]
    2d8c:	0752      	lsls	r2, r2, #29
    2d8e:	d503      	bpl.n	2d98 <trx_reg_write+0xb0>
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg |= SERCOM_SPI_STATUS_BUFOVF;
    2d90:	8b59      	ldrh	r1, [r3, #26]
    2d92:	2204      	movs	r2, #4
    2d94:	430a      	orrs	r2, r1
    2d96:	835a      	strh	r2, [r3, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    2d98:	4a0e      	ldr	r2, [pc, #56]	; (2dd4 <trx_reg_write+0xec>)
    2d9a:	7992      	ldrb	r2, [r2, #6]
    2d9c:	2a01      	cmp	r2, #1
    2d9e:	d105      	bne.n	2dac <trx_reg_write+0xc4>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    2da0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    2da2:	05db      	lsls	r3, r3, #23
    2da4:	0ddb      	lsrs	r3, r3, #23
    2da6:	4a0e      	ldr	r2, [pc, #56]	; (2de0 <trx_reg_write+0xf8>)
    2da8:	8013      	strh	r3, [r2, #0]
    2daa:	e003      	b.n	2db4 <trx_reg_write+0xcc>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    2dac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    2dae:	b2db      	uxtb	r3, r3
    2db0:	4a0b      	ldr	r2, [pc, #44]	; (2de0 <trx_reg_write+0xf8>)
    2db2:	8013      	strh	r3, [r2, #0]
	}
	spi_read(&master, &dummy_read);

	/* Stop the SPI transaction by setting SEL high */
	spi_select_slave(&master, &slave, false);
    2db4:	4807      	ldr	r0, [pc, #28]	; (2dd4 <trx_reg_write+0xec>)
    2db6:	4908      	ldr	r1, [pc, #32]	; (2dd8 <trx_reg_write+0xf0>)
    2db8:	2200      	movs	r2, #0
    2dba:	4b08      	ldr	r3, [pc, #32]	; (2ddc <trx_reg_write+0xf4>)
    2dbc:	4798      	blx	r3
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
    2dbe:	2d00      	cmp	r5, #0
    2dc0:	d005      	beq.n	2dce <trx_reg_write+0xe6>
		cpu_irq_enable();
    2dc2:	2201      	movs	r2, #1
    2dc4:	4b02      	ldr	r3, [pc, #8]	; (2dd0 <trx_reg_write+0xe8>)
    2dc6:	701a      	strb	r2, [r3, #0]
    2dc8:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
    2dcc:	b662      	cpsie	i
	spi_deselect_device(AT86RFX_SPI, &SPI_AT86RFX_DEVICE);
#endif
	/*Restoring the interrupt status which was stored & enabling the global
	 *interrupt */
	LEAVE_TRX_CRITICAL_REGION();
}
    2dce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2dd0:	20000008 	.word	0x20000008
    2dd4:	20002b48 	.word	0x20002b48
    2dd8:	20002b0c 	.word	0x20002b0c
    2ddc:	000013d5 	.word	0x000013d5
    2de0:	20002b04 	.word	0x20002b04

00002de4 <trx_irq_init>:
	 * Set the handler function.
	 * The handler is set before enabling the interrupt to prepare for
	 *spurious
	 * interrupts, that can pop up the moment they are enabled
	 */
	irq_hdl_trx = (irq_handler_t)trx_irq_cb;
    2de4:	4b01      	ldr	r3, [pc, #4]	; (2dec <trx_irq_init+0x8>)
    2de6:	6018      	str	r0, [r3, #0]
}
    2de8:	4770      	bx	lr
    2dea:	46c0      	nop			; (mov r8, r8)
    2dec:	20000370 	.word	0x20000370

00002df0 <trx_bit_read>:

uint8_t trx_bit_read(uint8_t addr, uint8_t mask, uint8_t pos)
{
    2df0:	b538      	push	{r3, r4, r5, lr}
    2df2:	1c0d      	adds	r5, r1, #0
    2df4:	1c14      	adds	r4, r2, #0
	uint8_t ret;
	ret = trx_reg_read(addr);
    2df6:	4b03      	ldr	r3, [pc, #12]	; (2e04 <trx_bit_read+0x14>)
    2df8:	4798      	blx	r3
	ret &= mask;
	ret >>= pos;
    2dfa:	4028      	ands	r0, r5
    2dfc:	4120      	asrs	r0, r4
	return ret;
    2dfe:	b2c0      	uxtb	r0, r0
}
    2e00:	bd38      	pop	{r3, r4, r5, pc}
    2e02:	46c0      	nop			; (mov r8, r8)
    2e04:	00002bf1 	.word	0x00002bf1

00002e08 <trx_frame_read>:
	new_value |= current_reg_value;
	trx_reg_write(reg_addr, new_value);
}

void trx_frame_read(uint8_t *data, uint8_t length)
{
    2e08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2e0a:	465f      	mov	r7, fp
    2e0c:	4656      	mov	r6, sl
    2e0e:	464d      	mov	r5, r9
    2e10:	4644      	mov	r4, r8
    2e12:	b4f0      	push	{r4, r5, r6, r7}
    2e14:	1c05      	adds	r5, r0, #0
    2e16:	1c0c      	adds	r4, r1, #0
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    2e18:	f3ef 8710 	mrs	r7, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
    2e1c:	427a      	negs	r2, r7
    2e1e:	417a      	adcs	r2, r7
    2e20:	4690      	mov	r8, r2
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
    2e22:	b672      	cpsid	i
    2e24:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    2e28:	2200      	movs	r2, #0
    2e2a:	4b41      	ldr	r3, [pc, #260]	; (2f30 <trx_frame_read+0x128>)
    2e2c:	701a      	strb	r2, [r3, #0]
	ENTER_TRX_CRITICAL_REGION();

#if SAMD || SAMR21
	uint16_t temp;
	/* Start SPI transaction by pulling SEL low */
	spi_select_slave(&master, &slave, true);
    2e2e:	4e41      	ldr	r6, [pc, #260]	; (2f34 <trx_frame_read+0x12c>)
    2e30:	1c30      	adds	r0, r6, #0
    2e32:	4941      	ldr	r1, [pc, #260]	; (2f38 <trx_frame_read+0x130>)
    2e34:	3201      	adds	r2, #1
    2e36:	4b41      	ldr	r3, [pc, #260]	; (2f3c <trx_frame_read+0x134>)
    2e38:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    2e3a:	6833      	ldr	r3, [r6, #0]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    2e3c:	2101      	movs	r1, #1
    2e3e:	7e1a      	ldrb	r2, [r3, #24]

	temp = TRX_CMD_FR;

	/* Send the command byte */
	while (!spi_is_ready_to_write(&master)) {
    2e40:	420a      	tst	r2, r1
    2e42:	d0fc      	beq.n	2e3e <trx_frame_read+0x36>
    2e44:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
    2e46:	07d2      	lsls	r2, r2, #31
    2e48:	d501      	bpl.n	2e4e <trx_frame_read+0x46>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    2e4a:	2220      	movs	r2, #32
    2e4c:	629a      	str	r2, [r3, #40]	; 0x28
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    2e4e:	2102      	movs	r1, #2
    2e50:	7e1a      	ldrb	r2, [r3, #24]
	}
	spi_write(&master, temp);
	while (!spi_is_write_complete(&master)) {
    2e52:	420a      	tst	r2, r1
    2e54:	d0fc      	beq.n	2e50 <trx_frame_read+0x48>
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    2e56:	2104      	movs	r1, #4
    2e58:	7e1a      	ldrb	r2, [r3, #24]
	}
	/* Dummy read since SPI RX is double buffered */
	while (!spi_is_ready_to_read(&master)) {
    2e5a:	420a      	tst	r2, r1
    2e5c:	d0fc      	beq.n	2e58 <trx_frame_read+0x50>
    2e5e:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
    2e60:	0752      	lsls	r2, r2, #29
    2e62:	d50f      	bpl.n	2e84 <trx_frame_read+0x7c>

	/* Return value */
	enum status_code retval = STATUS_OK;

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    2e64:	8b5a      	ldrh	r2, [r3, #26]
    2e66:	0752      	lsls	r2, r2, #29
    2e68:	d503      	bpl.n	2e72 <trx_frame_read+0x6a>
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg |= SERCOM_SPI_STATUS_BUFOVF;
    2e6a:	8b59      	ldrh	r1, [r3, #26]
    2e6c:	2204      	movs	r2, #4
    2e6e:	430a      	orrs	r2, r1
    2e70:	835a      	strh	r2, [r3, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    2e72:	4a30      	ldr	r2, [pc, #192]	; (2f34 <trx_frame_read+0x12c>)
    2e74:	7992      	ldrb	r2, [r2, #6]
    2e76:	2a01      	cmp	r2, #1
    2e78:	d109      	bne.n	2e8e <trx_frame_read+0x86>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    2e7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    2e7c:	05db      	lsls	r3, r3, #23
    2e7e:	0ddb      	lsrs	r3, r3, #23
    2e80:	4a2f      	ldr	r2, [pc, #188]	; (2f40 <trx_frame_read+0x138>)
    2e82:	8013      	strh	r3, [r2, #0]
	}
	spi_read(&master, &dummy_read);

	while (length--) {
    2e84:	1e63      	subs	r3, r4, #1
    2e86:	b2db      	uxtb	r3, r3
    2e88:	2c00      	cmp	r4, #0
    2e8a:	d105      	bne.n	2e98 <trx_frame_read+0x90>
    2e8c:	e03c      	b.n	2f08 <trx_frame_read+0x100>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    2e8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    2e90:	b2db      	uxtb	r3, r3
    2e92:	4a2b      	ldr	r2, [pc, #172]	; (2f40 <trx_frame_read+0x138>)
    2e94:	8013      	strh	r3, [r2, #0]
    2e96:	e7f5      	b.n	2e84 <trx_frame_read+0x7c>
    2e98:	3301      	adds	r3, #1
    2e9a:	469c      	mov	ip, r3
    2e9c:	44ac      	add	ip, r5
    2e9e:	2620      	movs	r6, #32
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    2ea0:	4b24      	ldr	r3, [pc, #144]	; (2f34 <trx_frame_read+0x12c>)
    2ea2:	4699      	mov	r9, r3

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    2ea4:	2001      	movs	r0, #1
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    2ea6:	2300      	movs	r3, #0
    2ea8:	469a      	mov	sl, r3
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    2eaa:	2402      	movs	r4, #2
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    2eac:	2104      	movs	r1, #4
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    2eae:	464f      	mov	r7, r9

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg |= SERCOM_SPI_STATUS_BUFOVF;
    2eb0:	2304      	movs	r3, #4
    2eb2:	469b      	mov	fp, r3
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    2eb4:	464b      	mov	r3, r9
    2eb6:	681b      	ldr	r3, [r3, #0]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    2eb8:	7e1a      	ldrb	r2, [r3, #24]
		while (!spi_is_ready_to_write(&master)) {
    2eba:	4202      	tst	r2, r0
    2ebc:	d0fc      	beq.n	2eb8 <trx_frame_read+0xb0>
    2ebe:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
    2ec0:	4202      	tst	r2, r0
    2ec2:	d001      	beq.n	2ec8 <trx_frame_read+0xc0>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    2ec4:	4652      	mov	r2, sl
    2ec6:	629a      	str	r2, [r3, #40]	; 0x28
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    2ec8:	7e1a      	ldrb	r2, [r3, #24]
		}
		spi_write(&master, 0);
		while (!spi_is_write_complete(&master)) {
    2eca:	4222      	tst	r2, r4
    2ecc:	d0fc      	beq.n	2ec8 <trx_frame_read+0xc0>
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    2ece:	7e1a      	ldrb	r2, [r3, #24]
		}
		/* Dummy read since SPI RX is double buffered */
		while (!spi_is_ready_to_read(&master)) {
    2ed0:	420a      	tst	r2, r1
    2ed2:	d0fc      	beq.n	2ece <trx_frame_read+0xc6>
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    2ed4:	683b      	ldr	r3, [r7, #0]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    2ed6:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
    2ed8:	420a      	tst	r2, r1
    2eda:	d011      	beq.n	2f00 <trx_frame_read+0xf8>

	/* Return value */
	enum status_code retval = STATUS_OK;

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    2edc:	8b5a      	ldrh	r2, [r3, #26]
    2ede:	420a      	tst	r2, r1
    2ee0:	d004      	beq.n	2eec <trx_frame_read+0xe4>
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg |= SERCOM_SPI_STATUS_BUFOVF;
    2ee2:	8b5a      	ldrh	r2, [r3, #26]
    2ee4:	465e      	mov	r6, fp
    2ee6:	4332      	orrs	r2, r6
    2ee8:	b292      	uxth	r2, r2
    2eea:	835a      	strh	r2, [r3, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    2eec:	4a11      	ldr	r2, [pc, #68]	; (2f34 <trx_frame_read+0x12c>)
    2eee:	7992      	ldrb	r2, [r2, #6]
    2ef0:	2a01      	cmp	r2, #1
    2ef2:	d103      	bne.n	2efc <trx_frame_read+0xf4>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    2ef4:	6a9e      	ldr	r6, [r3, #40]	; 0x28
    2ef6:	05f6      	lsls	r6, r6, #23
    2ef8:	0df6      	lsrs	r6, r6, #23
    2efa:	e001      	b.n	2f00 <trx_frame_read+0xf8>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    2efc:	6a9e      	ldr	r6, [r3, #40]	; 0x28
    2efe:	b2f6      	uxtb	r6, r6
		}
		spi_read(&master, &temp);
		*data = temp;
    2f00:	702e      	strb	r6, [r5, #0]
		data++;
    2f02:	3501      	adds	r5, #1
	/* Dummy read since SPI RX is double buffered */
	while (!spi_is_ready_to_read(&master)) {
	}
	spi_read(&master, &dummy_read);

	while (length--) {
    2f04:	4565      	cmp	r5, ip
    2f06:	d1d5      	bne.n	2eb4 <trx_frame_read+0xac>
		*data = temp;
		data++;
	}

	/* Stop the SPI transaction by setting SEL high */
	spi_select_slave(&master, &slave, false);
    2f08:	480a      	ldr	r0, [pc, #40]	; (2f34 <trx_frame_read+0x12c>)
    2f0a:	490b      	ldr	r1, [pc, #44]	; (2f38 <trx_frame_read+0x130>)
    2f0c:	2200      	movs	r2, #0
    2f0e:	4b0b      	ldr	r3, [pc, #44]	; (2f3c <trx_frame_read+0x134>)
    2f10:	4798      	blx	r3
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
    2f12:	4643      	mov	r3, r8
    2f14:	2b00      	cmp	r3, #0
    2f16:	d005      	beq.n	2f24 <trx_frame_read+0x11c>
		cpu_irq_enable();
    2f18:	2201      	movs	r2, #1
    2f1a:	4b05      	ldr	r3, [pc, #20]	; (2f30 <trx_frame_read+0x128>)
    2f1c:	701a      	strb	r2, [r3, #0]
    2f1e:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
    2f22:	b662      	cpsie	i
	spi_deselect_device(AT86RFX_SPI, &SPI_AT86RFX_DEVICE);
#endif
	/*Restoring the interrupt status which was stored & enabling the global
	 *interrupt */
	LEAVE_TRX_CRITICAL_REGION();
}
    2f24:	bc3c      	pop	{r2, r3, r4, r5}
    2f26:	4690      	mov	r8, r2
    2f28:	4699      	mov	r9, r3
    2f2a:	46a2      	mov	sl, r4
    2f2c:	46ab      	mov	fp, r5
    2f2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2f30:	20000008 	.word	0x20000008
    2f34:	20002b48 	.word	0x20002b48
    2f38:	20002b0c 	.word	0x20002b0c
    2f3c:	000013d5 	.word	0x000013d5
    2f40:	20002b04 	.word	0x20002b04

00002f44 <trx_frame_write>:

void trx_frame_write(uint8_t *data, uint8_t length)
{
    2f44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2f46:	464f      	mov	r7, r9
    2f48:	4646      	mov	r6, r8
    2f4a:	b4c0      	push	{r6, r7}
    2f4c:	1c04      	adds	r4, r0, #0
    2f4e:	1c0d      	adds	r5, r1, #0
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    2f50:	f3ef 8610 	mrs	r6, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
    2f54:	4272      	negs	r2, r6
    2f56:	4172      	adcs	r2, r6
    2f58:	4691      	mov	r9, r2
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
    2f5a:	b672      	cpsid	i
    2f5c:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    2f60:	2200      	movs	r2, #0
    2f62:	4b3c      	ldr	r3, [pc, #240]	; (3054 <trx_frame_write+0x110>)
    2f64:	701a      	strb	r2, [r3, #0]
	 **/
	ENTER_TRX_CRITICAL_REGION();

#if SAMD || SAMR21
	/* Start SPI transaction by pulling SEL low */
	spi_select_slave(&master, &slave, true);
    2f66:	4f3c      	ldr	r7, [pc, #240]	; (3058 <trx_frame_write+0x114>)
    2f68:	1c38      	adds	r0, r7, #0
    2f6a:	493c      	ldr	r1, [pc, #240]	; (305c <trx_frame_write+0x118>)
    2f6c:	3201      	adds	r2, #1
    2f6e:	4b3c      	ldr	r3, [pc, #240]	; (3060 <trx_frame_write+0x11c>)
    2f70:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    2f72:	683b      	ldr	r3, [r7, #0]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    2f74:	2101      	movs	r1, #1
    2f76:	7e1a      	ldrb	r2, [r3, #24]

	temp = TRX_CMD_FW;

	/* Send the command byte */
	while (!spi_is_ready_to_write(&master)) {
    2f78:	420a      	tst	r2, r1
    2f7a:	d0fc      	beq.n	2f76 <trx_frame_write+0x32>
    2f7c:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
    2f7e:	07d2      	lsls	r2, r2, #31
    2f80:	d501      	bpl.n	2f86 <trx_frame_write+0x42>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    2f82:	2260      	movs	r2, #96	; 0x60
    2f84:	629a      	str	r2, [r3, #40]	; 0x28
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    2f86:	2102      	movs	r1, #2
    2f88:	7e1a      	ldrb	r2, [r3, #24]
	}
	spi_write(&master, temp);
	while (!spi_is_write_complete(&master)) {
    2f8a:	420a      	tst	r2, r1
    2f8c:	d0fc      	beq.n	2f88 <trx_frame_write+0x44>
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    2f8e:	2104      	movs	r1, #4
    2f90:	7e1a      	ldrb	r2, [r3, #24]
	} 
	/* Dummy read since SPI RX is double buffered */
	while (!spi_is_ready_to_read(&master)) {
    2f92:	420a      	tst	r2, r1
    2f94:	d0fc      	beq.n	2f90 <trx_frame_write+0x4c>
    2f96:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
    2f98:	0752      	lsls	r2, r2, #29
    2f9a:	d50f      	bpl.n	2fbc <trx_frame_write+0x78>

	/* Return value */
	enum status_code retval = STATUS_OK;

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    2f9c:	8b5a      	ldrh	r2, [r3, #26]
    2f9e:	0752      	lsls	r2, r2, #29
    2fa0:	d503      	bpl.n	2faa <trx_frame_write+0x66>
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg |= SERCOM_SPI_STATUS_BUFOVF;
    2fa2:	8b59      	ldrh	r1, [r3, #26]
    2fa4:	2204      	movs	r2, #4
    2fa6:	430a      	orrs	r2, r1
    2fa8:	835a      	strh	r2, [r3, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    2faa:	4a2b      	ldr	r2, [pc, #172]	; (3058 <trx_frame_write+0x114>)
    2fac:	7992      	ldrb	r2, [r2, #6]
    2fae:	2a01      	cmp	r2, #1
    2fb0:	d10e      	bne.n	2fd0 <trx_frame_write+0x8c>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    2fb2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    2fb4:	05d2      	lsls	r2, r2, #23
    2fb6:	0dd2      	lsrs	r2, r2, #23
    2fb8:	492a      	ldr	r1, [pc, #168]	; (3064 <trx_frame_write+0x120>)
    2fba:	800a      	strh	r2, [r1, #0]
		/* Clear overflow flag */
		spi_module->STATUS.reg |= SERCOM_SPI_STATUS_BUFOVF;
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    2fbc:	4a26      	ldr	r2, [pc, #152]	; (3058 <trx_frame_write+0x114>)
    2fbe:	7992      	ldrb	r2, [r2, #6]
    2fc0:	4690      	mov	r8, r2
    2fc2:	1c26      	adds	r6, r4, #0
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    2fc4:	2701      	movs	r7, #1
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    2fc6:	2002      	movs	r0, #2
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    2fc8:	2404      	movs	r4, #4

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg |= SERCOM_SPI_STATUS_BUFOVF;
    2fca:	2204      	movs	r2, #4
    2fcc:	4694      	mov	ip, r2
    2fce:	e02b      	b.n	3028 <trx_frame_write+0xe4>

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    2fd0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    2fd2:	b2d2      	uxtb	r2, r2
    2fd4:	4923      	ldr	r1, [pc, #140]	; (3064 <trx_frame_write+0x120>)
    2fd6:	800a      	strh	r2, [r1, #0]
    2fd8:	e7f0      	b.n	2fbc <trx_frame_write+0x78>
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    2fda:	7e1a      	ldrb	r2, [r3, #24]
	}
	spi_read(&master, &dummy_read);
	while (length--) {
		while (!spi_is_ready_to_write(&master)) {
    2fdc:	423a      	tst	r2, r7
    2fde:	d0fc      	beq.n	2fda <trx_frame_write+0x96>
		}
		spi_write(&master, *data++);
    2fe0:	7832      	ldrb	r2, [r6, #0]
    2fe2:	7e19      	ldrb	r1, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
    2fe4:	4239      	tst	r1, r7
    2fe6:	d000      	beq.n	2fea <trx_frame_write+0xa6>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    2fe8:	629a      	str	r2, [r3, #40]	; 0x28
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    2fea:	7e1a      	ldrb	r2, [r3, #24]
		while (!spi_is_write_complete(&master)) {
    2fec:	4202      	tst	r2, r0
    2fee:	d0fc      	beq.n	2fea <trx_frame_write+0xa6>
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    2ff0:	7e1a      	ldrb	r2, [r3, #24]
		}
		/* Dummy read since SPI RX is double buffered */
		while (!spi_is_ready_to_read(&master)) {
    2ff2:	4222      	tst	r2, r4
    2ff4:	d0fc      	beq.n	2ff0 <trx_frame_write+0xac>
    2ff6:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
    2ff8:	4222      	tst	r2, r4
    2ffa:	d014      	beq.n	3026 <trx_frame_write+0xe2>

	/* Return value */
	enum status_code retval = STATUS_OK;

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    2ffc:	8b5a      	ldrh	r2, [r3, #26]
    2ffe:	4222      	tst	r2, r4
    3000:	d004      	beq.n	300c <trx_frame_write+0xc8>
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg |= SERCOM_SPI_STATUS_BUFOVF;
    3002:	8b5a      	ldrh	r2, [r3, #26]
    3004:	4661      	mov	r1, ip
    3006:	430a      	orrs	r2, r1
    3008:	b292      	uxth	r2, r2
    300a:	835a      	strh	r2, [r3, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    300c:	4642      	mov	r2, r8
    300e:	2a01      	cmp	r2, #1
    3010:	d105      	bne.n	301e <trx_frame_write+0xda>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    3012:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    3014:	05d2      	lsls	r2, r2, #23
    3016:	0dd2      	lsrs	r2, r2, #23
    3018:	4912      	ldr	r1, [pc, #72]	; (3064 <trx_frame_write+0x120>)
    301a:	800a      	strh	r2, [r1, #0]
    301c:	e003      	b.n	3026 <trx_frame_write+0xe2>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    301e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    3020:	b2d2      	uxtb	r2, r2
    3022:	4910      	ldr	r1, [pc, #64]	; (3064 <trx_frame_write+0x120>)
    3024:	800a      	strh	r2, [r1, #0]
    3026:	3601      	adds	r6, #1
	} 
	/* Dummy read since SPI RX is double buffered */
	while (!spi_is_ready_to_read(&master)) {
	}
	spi_read(&master, &dummy_read);
	while (length--) {
    3028:	3d01      	subs	r5, #1
    302a:	b2ed      	uxtb	r5, r5
    302c:	2dff      	cmp	r5, #255	; 0xff
    302e:	d1d4      	bne.n	2fda <trx_frame_write+0x96>
		}
		spi_read(&master, &dummy_read);
	}

	/* Stop the SPI transaction by setting SEL high */
	spi_select_slave(&master, &slave, false);
    3030:	4809      	ldr	r0, [pc, #36]	; (3058 <trx_frame_write+0x114>)
    3032:	490a      	ldr	r1, [pc, #40]	; (305c <trx_frame_write+0x118>)
    3034:	2200      	movs	r2, #0
    3036:	4b0a      	ldr	r3, [pc, #40]	; (3060 <trx_frame_write+0x11c>)
    3038:	4798      	blx	r3
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
    303a:	464b      	mov	r3, r9
    303c:	2b00      	cmp	r3, #0
    303e:	d005      	beq.n	304c <trx_frame_write+0x108>
		cpu_irq_enable();
    3040:	2201      	movs	r2, #1
    3042:	4b04      	ldr	r3, [pc, #16]	; (3054 <trx_frame_write+0x110>)
    3044:	701a      	strb	r2, [r3, #0]
    3046:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
    304a:	b662      	cpsie	i
	spi_deselect_device(AT86RFX_SPI, &SPI_AT86RFX_DEVICE);
#endif
	/*Restoring the interrupt status which was stored & enabling the global
	 *interrupt */
	LEAVE_TRX_CRITICAL_REGION();
}
    304c:	bc0c      	pop	{r2, r3}
    304e:	4690      	mov	r8, r2
    3050:	4699      	mov	r9, r3
    3052:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3054:	20000008 	.word	0x20000008
    3058:	20002b48 	.word	0x20002b48
    305c:	20002b0c 	.word	0x20002b0c
    3060:	000013d5 	.word	0x000013d5
    3064:	20002b04 	.word	0x20002b04

00003068 <trx_sram_read>:
 * @param[in] addr Start address in SRAM for read operation
 * @param[out] data Pointer to the location where data stored
 * @param[in] length Number of bytes to be read from SRAM
 */
void trx_sram_read(uint8_t addr, uint8_t *data, uint8_t length)
{
    3068:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    306a:	465f      	mov	r7, fp
    306c:	4656      	mov	r6, sl
    306e:	464d      	mov	r5, r9
    3070:	4644      	mov	r4, r8
    3072:	b4f0      	push	{r4, r5, r6, r7}
    3074:	1c04      	adds	r4, r0, #0
    3076:	1c0d      	adds	r5, r1, #0
    3078:	1c16      	adds	r6, r2, #0
	delay_us(1); /* wap_rf4ce */
    307a:	2001      	movs	r0, #1
    307c:	4b5a      	ldr	r3, [pc, #360]	; (31e8 <trx_sram_read+0x180>)
    307e:	4798      	blx	r3
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    3080:	f3ef 8710 	mrs	r7, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
    3084:	427a      	negs	r2, r7
    3086:	417a      	adcs	r2, r7
    3088:	4690      	mov	r8, r2
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
    308a:	b672      	cpsid	i
    308c:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    3090:	2200      	movs	r2, #0
    3092:	4b56      	ldr	r3, [pc, #344]	; (31ec <trx_sram_read+0x184>)
    3094:	701a      	strb	r2, [r3, #0]
	 **/
	ENTER_TRX_CRITICAL_REGION();
#if SAMD || SAMR21
	uint16_t temp;
	/* Start SPI transaction by pulling SEL low */
	spi_select_slave(&master, &slave, true);
    3096:	4f56      	ldr	r7, [pc, #344]	; (31f0 <trx_sram_read+0x188>)
    3098:	1c38      	adds	r0, r7, #0
    309a:	4956      	ldr	r1, [pc, #344]	; (31f4 <trx_sram_read+0x18c>)
    309c:	3201      	adds	r2, #1
    309e:	4b56      	ldr	r3, [pc, #344]	; (31f8 <trx_sram_read+0x190>)
    30a0:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    30a2:	683b      	ldr	r3, [r7, #0]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    30a4:	2101      	movs	r1, #1
    30a6:	7e1a      	ldrb	r2, [r3, #24]

	temp = TRX_CMD_SR;

	/* Send the command byte */
	while (!spi_is_ready_to_write(&master)) {
    30a8:	420a      	tst	r2, r1
    30aa:	d0fc      	beq.n	30a6 <trx_sram_read+0x3e>
    30ac:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
    30ae:	07d2      	lsls	r2, r2, #31
    30b0:	d501      	bpl.n	30b6 <trx_sram_read+0x4e>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    30b2:	2200      	movs	r2, #0
    30b4:	629a      	str	r2, [r3, #40]	; 0x28
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    30b6:	2102      	movs	r1, #2
    30b8:	7e1a      	ldrb	r2, [r3, #24]
	}
	spi_write(&master, temp);
	while (!spi_is_write_complete(&master)) {
    30ba:	420a      	tst	r2, r1
    30bc:	d0fc      	beq.n	30b8 <trx_sram_read+0x50>
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    30be:	2104      	movs	r1, #4
    30c0:	7e1a      	ldrb	r2, [r3, #24]
	}
	/* Dummy read since SPI RX is double buffered */
	while (!spi_is_ready_to_read(&master)) {
    30c2:	420a      	tst	r2, r1
    30c4:	d0fc      	beq.n	30c0 <trx_sram_read+0x58>
    30c6:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
    30c8:	0752      	lsls	r2, r2, #29
    30ca:	d514      	bpl.n	30f6 <trx_sram_read+0x8e>

	/* Return value */
	enum status_code retval = STATUS_OK;

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    30cc:	8b5a      	ldrh	r2, [r3, #26]
    30ce:	0752      	lsls	r2, r2, #29
    30d0:	d503      	bpl.n	30da <trx_sram_read+0x72>
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg |= SERCOM_SPI_STATUS_BUFOVF;
    30d2:	8b59      	ldrh	r1, [r3, #26]
    30d4:	2204      	movs	r2, #4
    30d6:	430a      	orrs	r2, r1
    30d8:	835a      	strh	r2, [r3, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    30da:	4a45      	ldr	r2, [pc, #276]	; (31f0 <trx_sram_read+0x188>)
    30dc:	7992      	ldrb	r2, [r2, #6]
    30de:	2a01      	cmp	r2, #1
    30e0:	d105      	bne.n	30ee <trx_sram_read+0x86>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    30e2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    30e4:	05d2      	lsls	r2, r2, #23
    30e6:	0dd2      	lsrs	r2, r2, #23
    30e8:	4944      	ldr	r1, [pc, #272]	; (31fc <trx_sram_read+0x194>)
    30ea:	800a      	strh	r2, [r1, #0]
    30ec:	e003      	b.n	30f6 <trx_sram_read+0x8e>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    30ee:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    30f0:	b2d2      	uxtb	r2, r2
    30f2:	4942      	ldr	r1, [pc, #264]	; (31fc <trx_sram_read+0x194>)
    30f4:	800a      	strh	r2, [r1, #0]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    30f6:	2101      	movs	r1, #1
    30f8:	7e1a      	ldrb	r2, [r3, #24]
	}
	spi_read(&master, &dummy_read);

	/* Send the address from which the read operation should start */
	while (!spi_is_ready_to_write(&master)) {
    30fa:	420a      	tst	r2, r1
    30fc:	d0fc      	beq.n	30f8 <trx_sram_read+0x90>
    30fe:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
    3100:	07d2      	lsls	r2, r2, #31
    3102:	d500      	bpl.n	3106 <trx_sram_read+0x9e>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    3104:	629c      	str	r4, [r3, #40]	; 0x28
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    3106:	2102      	movs	r1, #2
    3108:	7e1a      	ldrb	r2, [r3, #24]
	}
	spi_write(&master, addr);
	while (!spi_is_write_complete(&master)) {
    310a:	420a      	tst	r2, r1
    310c:	d0fc      	beq.n	3108 <trx_sram_read+0xa0>
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    310e:	2104      	movs	r1, #4
    3110:	7e1a      	ldrb	r2, [r3, #24]
	}
	/* Dummy read since SPI RX is double buffered */
	while (!spi_is_ready_to_read(&master)) {
    3112:	420a      	tst	r2, r1
    3114:	d0fc      	beq.n	3110 <trx_sram_read+0xa8>
    3116:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
    3118:	0752      	lsls	r2, r2, #29
    311a:	d50f      	bpl.n	313c <trx_sram_read+0xd4>

	/* Return value */
	enum status_code retval = STATUS_OK;

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    311c:	8b5a      	ldrh	r2, [r3, #26]
    311e:	0752      	lsls	r2, r2, #29
    3120:	d503      	bpl.n	312a <trx_sram_read+0xc2>
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg |= SERCOM_SPI_STATUS_BUFOVF;
    3122:	8b59      	ldrh	r1, [r3, #26]
    3124:	2204      	movs	r2, #4
    3126:	430a      	orrs	r2, r1
    3128:	835a      	strh	r2, [r3, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    312a:	4a31      	ldr	r2, [pc, #196]	; (31f0 <trx_sram_read+0x188>)
    312c:	7992      	ldrb	r2, [r2, #6]
    312e:	2a01      	cmp	r2, #1
    3130:	d109      	bne.n	3146 <trx_sram_read+0xde>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    3132:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    3134:	05db      	lsls	r3, r3, #23
    3136:	0ddb      	lsrs	r3, r3, #23
    3138:	4a30      	ldr	r2, [pc, #192]	; (31fc <trx_sram_read+0x194>)
    313a:	8013      	strh	r3, [r2, #0]
	}
	spi_read(&master, &dummy_read);

	/* Upload the received byte in the user provided location */
	while (length--) {
    313c:	1e73      	subs	r3, r6, #1
    313e:	b2db      	uxtb	r3, r3
    3140:	2e00      	cmp	r6, #0
    3142:	d105      	bne.n	3150 <trx_sram_read+0xe8>
    3144:	e03c      	b.n	31c0 <trx_sram_read+0x158>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    3146:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    3148:	b2db      	uxtb	r3, r3
    314a:	4a2c      	ldr	r2, [pc, #176]	; (31fc <trx_sram_read+0x194>)
    314c:	8013      	strh	r3, [r2, #0]
    314e:	e7f5      	b.n	313c <trx_sram_read+0xd4>
    3150:	3301      	adds	r3, #1
    3152:	469c      	mov	ip, r3
    3154:	44ac      	add	ip, r5
    3156:	2600      	movs	r6, #0
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    3158:	4b25      	ldr	r3, [pc, #148]	; (31f0 <trx_sram_read+0x188>)
    315a:	4699      	mov	r9, r3

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    315c:	2001      	movs	r0, #1
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    315e:	2300      	movs	r3, #0
    3160:	469a      	mov	sl, r3
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    3162:	2402      	movs	r4, #2
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    3164:	2104      	movs	r1, #4
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    3166:	464f      	mov	r7, r9

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg |= SERCOM_SPI_STATUS_BUFOVF;
    3168:	2304      	movs	r3, #4
    316a:	469b      	mov	fp, r3
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    316c:	464b      	mov	r3, r9
    316e:	681b      	ldr	r3, [r3, #0]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    3170:	7e1a      	ldrb	r2, [r3, #24]
		while (!spi_is_ready_to_write(&master)) {
    3172:	4202      	tst	r2, r0
    3174:	d0fc      	beq.n	3170 <trx_sram_read+0x108>
    3176:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
    3178:	4202      	tst	r2, r0
    317a:	d001      	beq.n	3180 <trx_sram_read+0x118>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    317c:	4652      	mov	r2, sl
    317e:	629a      	str	r2, [r3, #40]	; 0x28
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    3180:	7e1a      	ldrb	r2, [r3, #24]
		}
		spi_write(&master, 0);
		while (!spi_is_write_complete(&master)) {
    3182:	4222      	tst	r2, r4
    3184:	d0fc      	beq.n	3180 <trx_sram_read+0x118>
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    3186:	7e1a      	ldrb	r2, [r3, #24]
		}
		/* Dummy read since SPI RX is double buffered */
		while (!spi_is_ready_to_read(&master)) {
    3188:	420a      	tst	r2, r1
    318a:	d0fc      	beq.n	3186 <trx_sram_read+0x11e>
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    318c:	683b      	ldr	r3, [r7, #0]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    318e:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
    3190:	420a      	tst	r2, r1
    3192:	d011      	beq.n	31b8 <trx_sram_read+0x150>

	/* Return value */
	enum status_code retval = STATUS_OK;

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    3194:	8b5a      	ldrh	r2, [r3, #26]
    3196:	420a      	tst	r2, r1
    3198:	d004      	beq.n	31a4 <trx_sram_read+0x13c>
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg |= SERCOM_SPI_STATUS_BUFOVF;
    319a:	8b5a      	ldrh	r2, [r3, #26]
    319c:	465e      	mov	r6, fp
    319e:	4332      	orrs	r2, r6
    31a0:	b292      	uxth	r2, r2
    31a2:	835a      	strh	r2, [r3, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    31a4:	4a12      	ldr	r2, [pc, #72]	; (31f0 <trx_sram_read+0x188>)
    31a6:	7992      	ldrb	r2, [r2, #6]
    31a8:	2a01      	cmp	r2, #1
    31aa:	d103      	bne.n	31b4 <trx_sram_read+0x14c>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    31ac:	6a9e      	ldr	r6, [r3, #40]	; 0x28
    31ae:	05f6      	lsls	r6, r6, #23
    31b0:	0df6      	lsrs	r6, r6, #23
    31b2:	e001      	b.n	31b8 <trx_sram_read+0x150>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    31b4:	6a9e      	ldr	r6, [r3, #40]	; 0x28
    31b6:	b2f6      	uxtb	r6, r6
		}
		spi_read(&master, &temp);
		*data = temp;
    31b8:	702e      	strb	r6, [r5, #0]
		data++;
    31ba:	3501      	adds	r5, #1
	while (!spi_is_ready_to_read(&master)) {
	}
	spi_read(&master, &dummy_read);

	/* Upload the received byte in the user provided location */
	while (length--) {
    31bc:	4565      	cmp	r5, ip
    31be:	d1d5      	bne.n	316c <trx_sram_read+0x104>
		*data = temp;
		data++;
	}

	/* Stop the SPI transaction by setting SEL high */
	spi_select_slave(&master, &slave, false);
    31c0:	480b      	ldr	r0, [pc, #44]	; (31f0 <trx_sram_read+0x188>)
    31c2:	490c      	ldr	r1, [pc, #48]	; (31f4 <trx_sram_read+0x18c>)
    31c4:	2200      	movs	r2, #0
    31c6:	4b0c      	ldr	r3, [pc, #48]	; (31f8 <trx_sram_read+0x190>)
    31c8:	4798      	blx	r3
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
    31ca:	4643      	mov	r3, r8
    31cc:	2b00      	cmp	r3, #0
    31ce:	d005      	beq.n	31dc <trx_sram_read+0x174>
		cpu_irq_enable();
    31d0:	2201      	movs	r2, #1
    31d2:	4b06      	ldr	r3, [pc, #24]	; (31ec <trx_sram_read+0x184>)
    31d4:	701a      	strb	r2, [r3, #0]
    31d6:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
    31da:	b662      	cpsie	i
	spi_deselect_device(AT86RFX_SPI, &SPI_AT86RFX_DEVICE);
#endif
	/*Restoring the interrupt status which was stored & enabling the global
	 *interrupt */
	LEAVE_TRX_CRITICAL_REGION();
}
    31dc:	bc3c      	pop	{r2, r3, r4, r5}
    31de:	4690      	mov	r8, r2
    31e0:	4699      	mov	r9, r3
    31e2:	46a2      	mov	sl, r4
    31e4:	46ab      	mov	fp, r5
    31e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    31e8:	0000014d 	.word	0x0000014d
    31ec:	20000008 	.word	0x20000008
    31f0:	20002b48 	.word	0x20002b48
    31f4:	20002b0c 	.word	0x20002b0c
    31f8:	000013d5 	.word	0x000013d5
    31fc:	20002b04 	.word	0x20002b04

00003200 <encode_remaining_length>:
/*---------------------------------------------------------------------------*/
static void
encode_remaining_length(uint8_t *remaining_length,
                        uint8_t *remaining_length_bytes,
                        uint32_t length)
{
    3200:	b5f0      	push	{r4, r5, r6, r7, lr}
    3202:	4647      	mov	r7, r8
    3204:	b480      	push	{r7}
    3206:	1c06      	adds	r6, r0, #0
    3208:	1c0d      	adds	r5, r1, #0
    320a:	1c14      	adds	r4, r2, #0
  uint8_t digit;

  DBG("MQTT - Encoding length %lu\n\r", length);
    320c:	4815      	ldr	r0, [pc, #84]	; (3264 <encode_remaining_length+0x64>)
    320e:	1c11      	adds	r1, r2, #0
    3210:	4b15      	ldr	r3, [pc, #84]	; (3268 <encode_remaining_length+0x68>)
    3212:	4798      	blx	r3

  *remaining_length_bytes = 0;
    3214:	2300      	movs	r3, #0
    3216:	702b      	strb	r3, [r5, #0]
  do {
    digit = length % 128;
    3218:	277f      	movs	r7, #127	; 0x7f
      digit = digit | 0x80;
    }

    remaining_length[*remaining_length_bytes] = digit;
    (*remaining_length_bytes)++;
    DBG("MQTT - Encode len digit '%u' length '%lu'\n\r", digit, length);
    321a:	4b13      	ldr	r3, [pc, #76]	; (3268 <encode_remaining_length+0x68>)
    321c:	4698      	mov	r8, r3

  DBG("MQTT - Encoding length %lu\n\r", length);

  *remaining_length_bytes = 0;
  do {
    digit = length % 128;
    321e:	1c39      	adds	r1, r7, #0
    3220:	4021      	ands	r1, r4
    length = length / 128;
    3222:	09e4      	lsrs	r4, r4, #7
    if(length > 0) {
    3224:	d011      	beq.n	324a <encode_remaining_length+0x4a>
      digit = digit | 0x80;
    3226:	2380      	movs	r3, #128	; 0x80
    3228:	4319      	orrs	r1, r3
    }

    remaining_length[*remaining_length_bytes] = digit;
    322a:	782b      	ldrb	r3, [r5, #0]
    322c:	54f1      	strb	r1, [r6, r3]
    (*remaining_length_bytes)++;
    322e:	782b      	ldrb	r3, [r5, #0]
    3230:	3301      	adds	r3, #1
    3232:	702b      	strb	r3, [r5, #0]
    DBG("MQTT - Encode len digit '%u' length '%lu'\n\r", digit, length);
    3234:	480d      	ldr	r0, [pc, #52]	; (326c <encode_remaining_length+0x6c>)
    3236:	1c22      	adds	r2, r4, #0
    3238:	47c0      	blx	r8
  } while(length > 0 && *remaining_length_bytes < 5);
    323a:	782b      	ldrb	r3, [r5, #0]
    323c:	2b04      	cmp	r3, #4
    323e:	d9ee      	bls.n	321e <encode_remaining_length+0x1e>
  DBG("MQTT - remaining_length_bytes %u\n\r", *remaining_length_bytes);
    3240:	7829      	ldrb	r1, [r5, #0]
    3242:	480b      	ldr	r0, [pc, #44]	; (3270 <encode_remaining_length+0x70>)
    3244:	4b08      	ldr	r3, [pc, #32]	; (3268 <encode_remaining_length+0x68>)
    3246:	4798      	blx	r3
    3248:	e009      	b.n	325e <encode_remaining_length+0x5e>
    length = length / 128;
    if(length > 0) {
      digit = digit | 0x80;
    }

    remaining_length[*remaining_length_bytes] = digit;
    324a:	782b      	ldrb	r3, [r5, #0]
    324c:	54f1      	strb	r1, [r6, r3]
    (*remaining_length_bytes)++;
    324e:	782b      	ldrb	r3, [r5, #0]
    3250:	3301      	adds	r3, #1
    3252:	702b      	strb	r3, [r5, #0]
    DBG("MQTT - Encode len digit '%u' length '%lu'\n\r", digit, length);
    3254:	4805      	ldr	r0, [pc, #20]	; (326c <encode_remaining_length+0x6c>)
    3256:	2200      	movs	r2, #0
    3258:	4b03      	ldr	r3, [pc, #12]	; (3268 <encode_remaining_length+0x68>)
    325a:	4798      	blx	r3
    325c:	e7f0      	b.n	3240 <encode_remaining_length+0x40>
  } while(length > 0 && *remaining_length_bytes < 5);
  DBG("MQTT - remaining_length_bytes %u\n\r", *remaining_length_bytes);
}
    325e:	bc04      	pop	{r2}
    3260:	4690      	mov	r8, r2
    3262:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3264:	0001209c 	.word	0x0001209c
    3268:	00010b79 	.word	0x00010b79
    326c:	000120bc 	.word	0x000120bc
    3270:	000120e8 	.word	0x000120e8

00003274 <call_event>:
/*---------------------------------------------------------------------------*/
static void
call_event(struct mqtt_connection *conn,
           mqtt_event_t event,
           void *data)
{
    3274:	b510      	push	{r4, lr}
    3276:	1c04      	adds	r4, r0, #0
  conn->event_callback(conn, event, data);
    3278:	6e63      	ldr	r3, [r4, #100]	; 0x64
    327a:	4798      	blx	r3
  process_post(conn->app_process, mqtt_update_event, NULL);
    327c:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
    327e:	4b03      	ldr	r3, [pc, #12]	; (328c <call_event+0x18>)
    3280:	7819      	ldrb	r1, [r3, #0]
    3282:	2200      	movs	r2, #0
    3284:	4b02      	ldr	r3, [pc, #8]	; (3290 <call_event+0x1c>)
    3286:	4798      	blx	r3
}
    3288:	bd10      	pop	{r4, pc}
    328a:	46c0      	nop			; (mov r8, r8)
    328c:	20002b54 	.word	0x20002b54
    3290:	0000ec09 	.word	0x0000ec09

00003294 <reset_packet>:
  process_post(&mqtt_process, mqtt_do_pingreq_event, conn);
}
/*---------------------------------------------------------------------------*/
static void
reset_packet(struct mqtt_in_packet *packet)
{
    3294:	b510      	push	{r4, lr}
    3296:	1c04      	adds	r4, r0, #0
  memset(packet, 0, sizeof(struct mqtt_in_packet));
    3298:	2100      	movs	r1, #0
    329a:	2286      	movs	r2, #134	; 0x86
    329c:	0092      	lsls	r2, r2, #2
    329e:	4b02      	ldr	r3, [pc, #8]	; (32a8 <reset_packet+0x14>)
    32a0:	4798      	blx	r3
  packet->remaining_multiplier = 1;
    32a2:	2301      	movs	r3, #1
    32a4:	73a3      	strb	r3, [r4, #14]
}
    32a6:	bd10      	pop	{r4, pc}
    32a8:	00010b69 	.word	0x00010b69

000032ac <handle_publish>:
  call_event(conn, MQTT_EVENT_PUBACK, &conn->in_packet.mid);
}
/*---------------------------------------------------------------------------*/
static void
handle_publish(struct mqtt_connection *conn)
{
    32ac:	b538      	push	{r3, r4, r5, lr}
    32ae:	1c04      	adds	r4, r0, #0
  DBG("MQTT - Got PUBLISH, called once per manageable chunk of message.\n\r");
    32b0:	4812      	ldr	r0, [pc, #72]	; (32fc <handle_publish+0x50>)
    32b2:	4d13      	ldr	r5, [pc, #76]	; (3300 <handle_publish+0x54>)
    32b4:	47a8      	blx	r5
  DBG("MQTT - Handling publish on topic '%s'\n\r", conn->in_publish_msg.topic);
    32b6:	4b13      	ldr	r3, [pc, #76]	; (3304 <handle_publish+0x58>)
    32b8:	18e1      	adds	r1, r4, r3
    32ba:	4813      	ldr	r0, [pc, #76]	; (3308 <handle_publish+0x5c>)
    32bc:	47a8      	blx	r5

  DBG("MQTT - This chunk is %i bytes\n\r", conn->in_packet.payload_pos);
    32be:	4b13      	ldr	r3, [pc, #76]	; (330c <handle_publish+0x60>)
    32c0:	5ce1      	ldrb	r1, [r4, r3]
    32c2:	4813      	ldr	r0, [pc, #76]	; (3310 <handle_publish+0x64>)
    32c4:	47a8      	blx	r5

  if(((conn->in_packet.fhdr & 0x09) >> 1) > 0) {
    PRINTF("MQTT - Error, got incoming PUBLISH with QoS > 0, not supported atm!\n\r");
  }

  call_event(conn, MQTT_EVENT_PUBLISH, &conn->in_publish_msg);
    32c6:	23d8      	movs	r3, #216	; 0xd8
    32c8:	00db      	lsls	r3, r3, #3
    32ca:	18e2      	adds	r2, r4, r3
    32cc:	1c20      	adds	r0, r4, #0
    32ce:	2104      	movs	r1, #4
    32d0:	4b10      	ldr	r3, [pc, #64]	; (3314 <handle_publish+0x68>)
    32d2:	4798      	blx	r3

  if(conn->in_publish_msg.first_chunk == 1) {
    32d4:	4b10      	ldr	r3, [pc, #64]	; (3318 <handle_publish+0x6c>)
    32d6:	5ce3      	ldrb	r3, [r4, r3]
    32d8:	2b01      	cmp	r3, #1
    32da:	d102      	bne.n	32e2 <handle_publish+0x36>
    conn->in_publish_msg.first_chunk = 0;
    32dc:	2200      	movs	r2, #0
    32de:	4b0e      	ldr	r3, [pc, #56]	; (3318 <handle_publish+0x6c>)
    32e0:	54e2      	strb	r2, [r4, r3]
  }

  /* If this is the last time handle_publish will be called, reset packet. */
  if(conn->in_publish_msg.payload_left == 0) {
    32e2:	4b0e      	ldr	r3, [pc, #56]	; (331c <handle_publish+0x70>)
    32e4:	5ae3      	ldrh	r3, [r4, r3]
    32e6:	2b00      	cmp	r3, #0
    32e8:	d107      	bne.n	32fa <handle_publish+0x4e>

    /* Check for QoS and initiate the reply, do not rely on the data in the
     * in_packet being untouched. */

    DBG("MQTT - (handle_publish) resetting packet.\n\r");
    32ea:	480d      	ldr	r0, [pc, #52]	; (3320 <handle_publish+0x74>)
    32ec:	4b04      	ldr	r3, [pc, #16]	; (3300 <handle_publish+0x54>)
    32ee:	4798      	blx	r3
    reset_packet(&conn->in_packet);
    32f0:	2395      	movs	r3, #149	; 0x95
    32f2:	00db      	lsls	r3, r3, #3
    32f4:	18e0      	adds	r0, r4, r3
    32f6:	4b0b      	ldr	r3, [pc, #44]	; (3324 <handle_publish+0x78>)
    32f8:	4798      	blx	r3
  }
}
    32fa:	bd38      	pop	{r3, r4, r5, pc}
    32fc:	0001210c 	.word	0x0001210c
    3300:	00010b79 	.word	0x00010b79
    3304:	000006c4 	.word	0x000006c4
    3308:	00012150 	.word	0x00012150
    330c:	000004b9 	.word	0x000004b9
    3310:	00012178 	.word	0x00012178
    3314:	00003275 	.word	0x00003275
    3318:	0000070e 	.word	0x0000070e
    331c:	00000712 	.word	0x00000712
    3320:	00012198 	.word	0x00012198
    3324:	00003295 	.word	0x00003295

00003328 <connect_tcp>:
  conn->state = MQTT_CONN_STATE_NOT_CONNECTED;
}
/*---------------------------------------------------------------------------*/
static void
connect_tcp(struct mqtt_connection *conn)
{
    3328:	b570      	push	{r4, r5, r6, lr}
    332a:	b084      	sub	sp, #16
    332c:	1c04      	adds	r4, r0, #0
  conn->state = MQTT_CONN_STATE_TCP_CONNECTING;
    332e:	2205      	movs	r2, #5
    3330:	2360      	movs	r3, #96	; 0x60
    3332:	54c2      	strb	r2, [r0, r3]
}
/*---------------------------------------------------------------------------*/
static void
reset_defaults(struct mqtt_connection *conn)
{
  conn->mid_counter = 1;
    3334:	3a04      	subs	r2, #4
    3336:	3308      	adds	r3, #8
    3338:	52c2      	strh	r2, [r0, r3]
  PT_INIT(&conn->out_proto_thread);
    333a:	2200      	movs	r2, #0
    333c:	23a7      	movs	r3, #167	; 0xa7
    333e:	009b      	lsls	r3, r3, #2
    3340:	52c2      	strh	r2, [r0, r3]
  conn->waiting_for_pingresp = 0;
    3342:	2338      	movs	r3, #56	; 0x38
    3344:	54c2      	strb	r2, [r0, r3]

  reset_packet(&conn->in_packet);
    3346:	2395      	movs	r3, #149	; 0x95
    3348:	00db      	lsls	r3, r3, #3
    334a:	18c0      	adds	r0, r0, r3
    334c:	4b10      	ldr	r3, [pc, #64]	; (3390 <connect_tcp+0x68>)
    334e:	4798      	blx	r3
  conn->out_buffer_sent = 0;
    3350:	239d      	movs	r3, #157	; 0x9d
    3352:	009b      	lsls	r3, r3, #2
    3354:	2200      	movs	r2, #0
    3356:	54e2      	strb	r2, [r4, r3]
connect_tcp(struct mqtt_connection *conn)
{
  conn->state = MQTT_CONN_STATE_TCP_CONNECTING;

  reset_defaults(conn);
  tcp_socket_register(&(conn->socket),
    3358:	4b0e      	ldr	r3, [pc, #56]	; (3394 <connect_tcp+0x6c>)
    335a:	18e5      	adds	r5, r4, r3
                      conn,
                      conn->in_buffer,
    335c:	4b0e      	ldr	r3, [pc, #56]	; (3398 <connect_tcp+0x70>)
    335e:	18e2      	adds	r2, r4, r3
connect_tcp(struct mqtt_connection *conn)
{
  conn->state = MQTT_CONN_STATE_TCP_CONNECTING;

  reset_defaults(conn);
  tcp_socket_register(&(conn->socket),
    3360:	3ba6      	subs	r3, #166	; 0xa6
                      conn,
                      conn->in_buffer,
                      MQTT_TCP_INPUT_BUFF_SIZE,
                      conn->out_buffer,
    3362:	1c21      	adds	r1, r4, #0
    3364:	3174      	adds	r1, #116	; 0x74
connect_tcp(struct mqtt_connection *conn)
{
  conn->state = MQTT_CONN_STATE_TCP_CONNECTING;

  reset_defaults(conn);
  tcp_socket_register(&(conn->socket),
    3366:	9100      	str	r1, [sp, #0]
    3368:	9301      	str	r3, [sp, #4]
    336a:	490c      	ldr	r1, [pc, #48]	; (339c <connect_tcp+0x74>)
    336c:	9102      	str	r1, [sp, #8]
    336e:	490c      	ldr	r1, [pc, #48]	; (33a0 <connect_tcp+0x78>)
    3370:	9103      	str	r1, [sp, #12]
    3372:	1c28      	adds	r0, r5, #0
    3374:	1c21      	adds	r1, r4, #0
    3376:	4e0b      	ldr	r6, [pc, #44]	; (33a4 <connect_tcp+0x7c>)
    3378:	47b0      	blx	r6
                      MQTT_TCP_INPUT_BUFF_SIZE,
                      conn->out_buffer,
                      MQTT_TCP_OUTPUT_BUFF_SIZE,
                      tcp_input,
                      tcp_event);
  tcp_socket_connect(&(conn->socket), &(conn->server_ip), conn->server_port);
    337a:	23e3      	movs	r3, #227	; 0xe3
    337c:	00db      	lsls	r3, r3, #3
    337e:	18e1      	adds	r1, r4, r3
    3380:	3310      	adds	r3, #16
    3382:	5ae2      	ldrh	r2, [r4, r3]
    3384:	1c28      	adds	r0, r5, #0
    3386:	4b08      	ldr	r3, [pc, #32]	; (33a8 <connect_tcp+0x80>)
    3388:	4798      	blx	r3
}
    338a:	b004      	add	sp, #16
    338c:	bd70      	pop	{r4, r5, r6, pc}
    338e:	46c0      	nop			; (mov r8, r8)
    3390:	00003295 	.word	0x00003295
    3394:	0000072c 	.word	0x0000072c
    3398:	000002a6 	.word	0x000002a6
    339c:	000033ad 	.word	0x000033ad
    33a0:	00003981 	.word	0x00003981
    33a4:	0000a389 	.word	0x0000a389
    33a8:	0000a401 	.word	0x0000a401

000033ac <tcp_input>:
static int
tcp_input(struct tcp_socket *s,
          void *ptr,
          const uint8_t *input_data_ptr,
          int input_data_len)
{
    33ac:	b5f0      	push	{r4, r5, r6, r7, lr}
    33ae:	465f      	mov	r7, fp
    33b0:	4656      	mov	r6, sl
    33b2:	464d      	mov	r5, r9
    33b4:	4644      	mov	r4, r8
    33b6:	b4f0      	push	{r4, r5, r6, r7}
    33b8:	b085      	sub	sp, #20
  struct mqtt_connection *conn = ptr;
  uint32_t pos = 0;
  uint32_t copy_bytes = 0;
  uint8_t byte;

  if(input_data_len == 0) {
    33ba:	2b00      	cmp	r3, #0
    33bc:	d100      	bne.n	33c0 <tcp_input+0x14>
    33be:	e25b      	b.n	3878 <tcp_input+0x4cc>
    33c0:	469a      	mov	sl, r3
    33c2:	4693      	mov	fp, r2
    33c4:	1c0d      	adds	r5, r1, #0
    return 0;
  }

  if(conn->in_packet.packet_received) {
    33c6:	2396      	movs	r3, #150	; 0x96
    33c8:	00db      	lsls	r3, r3, #3
    33ca:	5ccb      	ldrb	r3, [r1, r3]
    33cc:	2b00      	cmp	r3, #0
    33ce:	d004      	beq.n	33da <tcp_input+0x2e>
    reset_packet(&conn->in_packet);
    33d0:	2395      	movs	r3, #149	; 0x95
    33d2:	00db      	lsls	r3, r3, #3
    33d4:	18c8      	adds	r0, r1, r3
    33d6:	4bcf      	ldr	r3, [pc, #828]	; (3714 <tcp_input+0x368>)
    33d8:	4798      	blx	r3
  }

  DBG("tcp_input with %i bytes of data:\n\r", input_data_len);
    33da:	48cf      	ldr	r0, [pc, #828]	; (3718 <tcp_input+0x36c>)
    33dc:	4651      	mov	r1, sl
    33de:	4bcf      	ldr	r3, [pc, #828]	; (371c <tcp_input+0x370>)
    33e0:	4798      	blx	r3

  /* Read the fixed header field, if we do not have it */
  if(!conn->in_packet.fhdr) {
    33e2:	4bcf      	ldr	r3, [pc, #828]	; (3720 <tcp_input+0x374>)
    33e4:	5ceb      	ldrb	r3, [r5, r3]
          void *ptr,
          const uint8_t *input_data_ptr,
          int input_data_len)
{
  struct mqtt_connection *conn = ptr;
  uint32_t pos = 0;
    33e6:	2200      	movs	r2, #0
    33e8:	4691      	mov	r9, r2
  }

  DBG("tcp_input with %i bytes of data:\n\r", input_data_len);

  /* Read the fixed header field, if we do not have it */
  if(!conn->in_packet.fhdr) {
    33ea:	2b00      	cmp	r3, #0
    33ec:	d110      	bne.n	3410 <tcp_input+0x64>
    conn->in_packet.fhdr = input_data_ptr[pos++];
    33ee:	465b      	mov	r3, fp
    33f0:	7819      	ldrb	r1, [r3, #0]
    33f2:	4bcb      	ldr	r3, [pc, #812]	; (3720 <tcp_input+0x374>)
    33f4:	54e9      	strb	r1, [r5, r3]
    conn->in_packet.byte_counter++;
    33f6:	4acb      	ldr	r2, [pc, #812]	; (3724 <tcp_input+0x378>)
    33f8:	58ab      	ldr	r3, [r5, r2]
    33fa:	3301      	adds	r3, #1
    33fc:	50ab      	str	r3, [r5, r2]

    DBG("MQTT - Read VHDR '%02X'\n\r", conn->in_packet.fhdr);
    33fe:	48ca      	ldr	r0, [pc, #808]	; (3728 <tcp_input+0x37c>)
    3400:	4bc6      	ldr	r3, [pc, #792]	; (371c <tcp_input+0x370>)
    3402:	4798      	blx	r3

    if(pos >= input_data_len) {
    3404:	4653      	mov	r3, sl
    3406:	2b01      	cmp	r3, #1
    3408:	d800      	bhi.n	340c <tcp_input+0x60>
    340a:	e235      	b.n	3878 <tcp_input+0x4cc>

  DBG("tcp_input with %i bytes of data:\n\r", input_data_len);

  /* Read the fixed header field, if we do not have it */
  if(!conn->in_packet.fhdr) {
    conn->in_packet.fhdr = input_data_ptr[pos++];
    340c:	2301      	movs	r3, #1
    340e:	4699      	mov	r9, r3
      return 0;
    }
  }

  /* Read the Remaining Length field, if we do not have it */
  if(!conn->in_packet.has_remaining_length) {
    3410:	4bc6      	ldr	r3, [pc, #792]	; (372c <tcp_input+0x380>)
    3412:	5ceb      	ldrb	r3, [r5, r3]
    3414:	2b00      	cmp	r3, #0
    3416:	d139      	bne.n	348c <tcp_input+0xe0>
    3418:	465f      	mov	r7, fp
    341a:	444f      	add	r7, r9
      if(pos >= input_data_len) {
        return 0;
      }

      byte = input_data_ptr[pos++];
      conn->in_packet.byte_counter++;
    341c:	4ec1      	ldr	r6, [pc, #772]	; (3724 <tcp_input+0x378>)
      conn->in_packet.remaining_length_bytes++;
      DBG("MQTT - Read Remaining Length byte\n\r");
    341e:	4bbf      	ldr	r3, [pc, #764]	; (371c <tcp_input+0x370>)
    3420:	4698      	mov	r8, r3
  }

  /* Read the Remaining Length field, if we do not have it */
  if(!conn->in_packet.has_remaining_length) {
    do {
      if(pos >= input_data_len) {
    3422:	45ca      	cmp	sl, r9
    3424:	d800      	bhi.n	3428 <tcp_input+0x7c>
    3426:	e227      	b.n	3878 <tcp_input+0x4cc>
        return 0;
      }

      byte = input_data_ptr[pos++];
    3428:	2301      	movs	r3, #1
    342a:	469c      	mov	ip, r3
    342c:	44e1      	add	r9, ip
    342e:	783c      	ldrb	r4, [r7, #0]
      conn->in_packet.byte_counter++;
    3430:	59ab      	ldr	r3, [r5, r6]
    3432:	3301      	adds	r3, #1
    3434:	51ab      	str	r3, [r5, r6]
      conn->in_packet.remaining_length_bytes++;
    3436:	2297      	movs	r2, #151	; 0x97
    3438:	00d2      	lsls	r2, r2, #3
    343a:	5cab      	ldrb	r3, [r5, r2]
    343c:	3301      	adds	r3, #1
    343e:	54ab      	strb	r3, [r5, r2]
      DBG("MQTT - Read Remaining Length byte\n\r");
    3440:	48bb      	ldr	r0, [pc, #748]	; (3730 <tcp_input+0x384>)
    3442:	47c0      	blx	r8

      if(conn->in_packet.byte_counter > 5) {
    3444:	59ab      	ldr	r3, [r5, r6]
    3446:	2b05      	cmp	r3, #5
    3448:	d908      	bls.n	345c <tcp_input+0xb0>
        call_event(conn, MQTT_EVENT_ERROR, NULL);
    344a:	1c28      	adds	r0, r5, #0
    344c:	2180      	movs	r1, #128	; 0x80
    344e:	2200      	movs	r2, #0
    3450:	4bb8      	ldr	r3, [pc, #736]	; (3734 <tcp_input+0x388>)
    3452:	4798      	blx	r3
        DBG("Received more then 4 byte 'remaining lenght'.");
    3454:	48b8      	ldr	r0, [pc, #736]	; (3738 <tcp_input+0x38c>)
    3456:	4bb1      	ldr	r3, [pc, #708]	; (371c <tcp_input+0x370>)
    3458:	4798      	blx	r3
        return 0;
    345a:	e20d      	b.n	3878 <tcp_input+0x4cc>
      }

      conn->in_packet.remaining_length +=
        (byte & 127) * conn->in_packet.remaining_multiplier;
    345c:	49b7      	ldr	r1, [pc, #732]	; (373c <tcp_input+0x390>)
    345e:	5c6a      	ldrb	r2, [r5, r1]
        call_event(conn, MQTT_EVENT_ERROR, NULL);
        DBG("Received more then 4 byte 'remaining lenght'.");
        return 0;
      }

      conn->in_packet.remaining_length +=
    3460:	237f      	movs	r3, #127	; 0x7f
    3462:	4023      	ands	r3, r4
    3464:	4353      	muls	r3, r2
    3466:	9301      	str	r3, [sp, #4]
    3468:	48b5      	ldr	r0, [pc, #724]	; (3740 <tcp_input+0x394>)
    346a:	5a2b      	ldrh	r3, [r5, r0]
    346c:	469c      	mov	ip, r3
    346e:	9b01      	ldr	r3, [sp, #4]
    3470:	4463      	add	r3, ip
    3472:	522b      	strh	r3, [r5, r0]
        (byte & 127) * conn->in_packet.remaining_multiplier;
      conn->in_packet.remaining_multiplier *= 128;
    3474:	01d2      	lsls	r2, r2, #7
    3476:	546a      	strb	r2, [r5, r1]
    3478:	3701      	adds	r7, #1
    } while((byte & 128) != 0);
    347a:	b264      	sxtb	r4, r4
    347c:	2c00      	cmp	r4, #0
    347e:	dbd0      	blt.n	3422 <tcp_input+0x76>

    DBG("MQTT - Finished reading remaining length byte\n\r");
    3480:	48b0      	ldr	r0, [pc, #704]	; (3744 <tcp_input+0x398>)
    3482:	4ba6      	ldr	r3, [pc, #664]	; (371c <tcp_input+0x370>)
    3484:	4798      	blx	r3
    conn->in_packet.has_remaining_length = 1;
    3486:	2201      	movs	r2, #1
    3488:	4ba8      	ldr	r3, [pc, #672]	; (372c <tcp_input+0x380>)
    348a:	54ea      	strb	r2, [r5, r3]
   * Check for unsupported payload length. Will read all incoming data from the
   * server in any case and then reset the packet.
   *
   * TODO: Decide if we, for example, want to disconnect instead.
   */
  if((conn->in_packet.remaining_length > MQTT_INPUT_BUFF_SIZE) &&
    348c:	4bac      	ldr	r3, [pc, #688]	; (3740 <tcp_input+0x394>)
    348e:	5aea      	ldrh	r2, [r5, r3]
    3490:	2380      	movs	r3, #128	; 0x80
    3492:	009b      	lsls	r3, r3, #2
    3494:	429a      	cmp	r2, r3
    3496:	d800      	bhi.n	349a <tcp_input+0xee>
    3498:	e0d0      	b.n	363c <tcp_input+0x290>
     (conn->in_packet.fhdr & 0xF0) != MQTT_FHDR_MSG_TYPE_PUBLISH) {
    349a:	4ba1      	ldr	r3, [pc, #644]	; (3720 <tcp_input+0x374>)
    349c:	5ceb      	ldrb	r3, [r5, r3]
   * Check for unsupported payload length. Will read all incoming data from the
   * server in any case and then reset the packet.
   *
   * TODO: Decide if we, for example, want to disconnect instead.
   */
  if((conn->in_packet.remaining_length > MQTT_INPUT_BUFF_SIZE) &&
    349e:	210f      	movs	r1, #15
    34a0:	438b      	bics	r3, r1
    34a2:	2b30      	cmp	r3, #48	; 0x30
    34a4:	d100      	bne.n	34a8 <tcp_input+0xfc>
    34a6:	e0c9      	b.n	363c <tcp_input+0x290>
     (conn->in_packet.fhdr & 0xF0) != MQTT_FHDR_MSG_TYPE_PUBLISH) {

    PRINTF("MQTT - Error, unsupported payload size for non-PUBLISH message\n\r");

    conn->in_packet.byte_counter += input_data_len;
    34a8:	499e      	ldr	r1, [pc, #632]	; (3724 <tcp_input+0x378>)
    34aa:	586b      	ldr	r3, [r5, r1]
    34ac:	4453      	add	r3, sl
    34ae:	506b      	str	r3, [r5, r1]
    if(conn->in_packet.byte_counter >=
       (MQTT_FHDR_SIZE + conn->in_packet.remaining_length)) {
    34b0:	3201      	adds	r2, #1
     (conn->in_packet.fhdr & 0xF0) != MQTT_FHDR_MSG_TYPE_PUBLISH) {

    PRINTF("MQTT - Error, unsupported payload size for non-PUBLISH message\n\r");

    conn->in_packet.byte_counter += input_data_len;
    if(conn->in_packet.byte_counter >=
    34b2:	4293      	cmp	r3, r2
    34b4:	d200      	bcs.n	34b8 <tcp_input+0x10c>
    34b6:	e1df      	b.n	3878 <tcp_input+0x4cc>
       (MQTT_FHDR_SIZE + conn->in_packet.remaining_length)) {
      conn->in_packet.packet_received = 1;
    34b8:	2201      	movs	r2, #1
    34ba:	2396      	movs	r3, #150	; 0x96
    34bc:	00db      	lsls	r3, r3, #3
    34be:	54ea      	strb	r2, [r5, r3]
    34c0:	e1da      	b.n	3878 <tcp_input+0x4cc>
   *       this loop.
   */
  while(conn->in_packet.byte_counter <
        (MQTT_FHDR_SIZE + conn->in_packet.remaining_length)) {

    if((conn->in_packet.fhdr & 0xF0) == MQTT_FHDR_MSG_TYPE_PUBLISH &&
    34c2:	4b97      	ldr	r3, [pc, #604]	; (3720 <tcp_input+0x374>)
    34c4:	5ceb      	ldrb	r3, [r5, r3]
    34c6:	210f      	movs	r1, #15
    34c8:	438b      	bics	r3, r1
    34ca:	2b30      	cmp	r3, #48	; 0x30
    34cc:	d173      	bne.n	35b6 <tcp_input+0x20a>
       conn->in_packet.topic_received == 0) {
    34ce:	4b9e      	ldr	r3, [pc, #632]	; (3748 <tcp_input+0x39c>)
   *       this loop.
   */
  while(conn->in_packet.byte_counter <
        (MQTT_FHDR_SIZE + conn->in_packet.remaining_length)) {

    if((conn->in_packet.fhdr & 0xF0) == MQTT_FHDR_MSG_TYPE_PUBLISH &&
    34d0:	5ceb      	ldrb	r3, [r5, r3]
    34d2:	2b00      	cmp	r3, #0
    34d4:	d16f      	bne.n	35b6 <tcp_input+0x20a>
                   int input_data_len)
{
  uint16_t copy_bytes;

  /* Read out topic length */
  if(conn->in_packet.topic_len_received == 0) {
    34d6:	4b9d      	ldr	r3, [pc, #628]	; (374c <tcp_input+0x3a0>)
    34d8:	5ceb      	ldrb	r3, [r5, r3]
    34da:	2b00      	cmp	r3, #0
    34dc:	d11c      	bne.n	3518 <tcp_input+0x16c>
    conn->in_packet.topic_len = (input_data_ptr[(*pos)++] << 8);
    34de:	464b      	mov	r3, r9
    34e0:	1c58      	adds	r0, r3, #1
    34e2:	465b      	mov	r3, fp
    34e4:	4649      	mov	r1, r9
    34e6:	5c5b      	ldrb	r3, [r3, r1]
    34e8:	021b      	lsls	r3, r3, #8
    34ea:	4999      	ldr	r1, [pc, #612]	; (3750 <tcp_input+0x3a4>)
    34ec:	526b      	strh	r3, [r5, r1]
    conn->in_packet.byte_counter++;
    34ee:	1c51      	adds	r1, r2, #1
    34f0:	4c8c      	ldr	r4, [pc, #560]	; (3724 <tcp_input+0x378>)
    34f2:	5129      	str	r1, [r5, r4]
    if(*pos >= input_data_len) {
    34f4:	4550      	cmp	r0, sl
    34f6:	d25d      	bcs.n	35b4 <tcp_input+0x208>
      return;
    }
    conn->in_packet.topic_len |= input_data_ptr[(*pos)++];
    34f8:	2102      	movs	r1, #2
    34fa:	468c      	mov	ip, r1
    34fc:	44e1      	add	r9, ip
    34fe:	4659      	mov	r1, fp
    3500:	5c09      	ldrb	r1, [r1, r0]
    3502:	4319      	orrs	r1, r3
    3504:	4b92      	ldr	r3, [pc, #584]	; (3750 <tcp_input+0x3a4>)
    3506:	52e9      	strh	r1, [r5, r3]
    conn->in_packet.byte_counter++;
    3508:	3202      	adds	r2, #2
    350a:	512a      	str	r2, [r5, r4]
    conn->in_packet.topic_len_received = 1;
    350c:	2201      	movs	r2, #1
    350e:	4b8f      	ldr	r3, [pc, #572]	; (374c <tcp_input+0x3a0>)
    3510:	54ea      	strb	r2, [r5, r3]

    DBG("MQTT - Read PUBLISH topic len %i\n\r", conn->in_packet.topic_len);
    3512:	4890      	ldr	r0, [pc, #576]	; (3754 <tcp_input+0x3a8>)
    3514:	4b81      	ldr	r3, [pc, #516]	; (371c <tcp_input+0x370>)
    3516:	4798      	blx	r3
    /* WARNING: Check here if TOPIC fits in payload area, otherwise error */
  }

  /* Read out topic */
  if(conn->in_packet.topic_len_received == 1 &&
    3518:	4b8c      	ldr	r3, [pc, #560]	; (374c <tcp_input+0x3a0>)
    351a:	5aeb      	ldrh	r3, [r5, r3]
    351c:	2b01      	cmp	r3, #1
    351e:	d14a      	bne.n	35b6 <tcp_input+0x20a>
     conn->in_packet.topic_received == 0) {
    copy_bytes = MIN(conn->in_packet.topic_len - conn->in_packet.topic_pos,
    3520:	4b8d      	ldr	r3, [pc, #564]	; (3758 <tcp_input+0x3ac>)
    3522:	5ae9      	ldrh	r1, [r5, r3]
    3524:	4b8a      	ldr	r3, [pc, #552]	; (3750 <tcp_input+0x3a4>)
    3526:	5aeb      	ldrh	r3, [r5, r3]
    3528:	1a5b      	subs	r3, r3, r1
    352a:	4652      	mov	r2, sl
    352c:	4648      	mov	r0, r9
    352e:	1a17      	subs	r7, r2, r0
    3530:	429f      	cmp	r7, r3
    3532:	d900      	bls.n	3536 <tcp_input+0x18a>
    3534:	1c1f      	adds	r7, r3, #0
    3536:	043e      	lsls	r6, r7, #16
    3538:	0c36      	lsrs	r6, r6, #16
                     input_data_len - *pos);
    DBG("MQTT - topic_pos: %i copy_bytes: %i", conn->in_packet.topic_pos,
    353a:	4888      	ldr	r0, [pc, #544]	; (375c <tcp_input+0x3b0>)
    353c:	1c32      	adds	r2, r6, #0
    353e:	4b77      	ldr	r3, [pc, #476]	; (371c <tcp_input+0x370>)
    3540:	4798      	blx	r3
        copy_bytes);
    memcpy(&conn->in_publish_msg.topic[conn->in_packet.topic_pos],
    3542:	4c85      	ldr	r4, [pc, #532]	; (3758 <tcp_input+0x3ac>)
    3544:	5b28      	ldrh	r0, [r5, r4]
    3546:	1828      	adds	r0, r5, r0
    3548:	4b85      	ldr	r3, [pc, #532]	; (3760 <tcp_input+0x3b4>)
    354a:	469c      	mov	ip, r3
    354c:	4460      	add	r0, ip
           &input_data_ptr[*pos],
    354e:	4659      	mov	r1, fp
    3550:	4449      	add	r1, r9
     conn->in_packet.topic_received == 0) {
    copy_bytes = MIN(conn->in_packet.topic_len - conn->in_packet.topic_pos,
                     input_data_len - *pos);
    DBG("MQTT - topic_pos: %i copy_bytes: %i", conn->in_packet.topic_pos,
        copy_bytes);
    memcpy(&conn->in_publish_msg.topic[conn->in_packet.topic_pos],
    3552:	1c32      	adds	r2, r6, #0
    3554:	4b83      	ldr	r3, [pc, #524]	; (3764 <tcp_input+0x3b8>)
    3556:	4798      	blx	r3
           &input_data_ptr[*pos],
           copy_bytes);
    (*pos) += copy_bytes;
    3558:	44b1      	add	r9, r6
    conn->in_packet.byte_counter += copy_bytes;
    355a:	4b72      	ldr	r3, [pc, #456]	; (3724 <tcp_input+0x378>)
    355c:	58ea      	ldr	r2, [r5, r3]
    355e:	4694      	mov	ip, r2
    3560:	4466      	add	r6, ip
    3562:	50ee      	str	r6, [r5, r3]
    conn->in_packet.topic_pos += copy_bytes;
    3564:	5b2b      	ldrh	r3, [r5, r4]
    3566:	18fb      	adds	r3, r7, r3
    3568:	b29b      	uxth	r3, r3
    356a:	532b      	strh	r3, [r5, r4]

    if(conn->in_packet.topic_len - conn->in_packet.topic_pos == 0) {
    356c:	4a78      	ldr	r2, [pc, #480]	; (3750 <tcp_input+0x3a4>)
    356e:	5aaa      	ldrh	r2, [r5, r2]
    3570:	429a      	cmp	r2, r3
    3572:	d11b      	bne.n	35ac <tcp_input+0x200>
      DBG("MQTT - Got topic '%s'", conn->in_publish_msg.topic);
    3574:	487c      	ldr	r0, [pc, #496]	; (3768 <tcp_input+0x3bc>)
    3576:	4b7a      	ldr	r3, [pc, #488]	; (3760 <tcp_input+0x3b4>)
    3578:	18e9      	adds	r1, r5, r3
    357a:	4b68      	ldr	r3, [pc, #416]	; (371c <tcp_input+0x370>)
    357c:	4798      	blx	r3
      conn->in_packet.topic_received = 1;
    357e:	2201      	movs	r2, #1
    3580:	4b71      	ldr	r3, [pc, #452]	; (3748 <tcp_input+0x39c>)
    3582:	54ea      	strb	r2, [r5, r3]
      conn->in_publish_msg.topic[conn->in_packet.topic_pos] = '\0';
    3584:	5b2b      	ldrh	r3, [r5, r4]
    3586:	18eb      	adds	r3, r5, r3
    3588:	22d8      	movs	r2, #216	; 0xd8
    358a:	00d2      	lsls	r2, r2, #3
    358c:	4694      	mov	ip, r2
    358e:	4463      	add	r3, ip
    3590:	2200      	movs	r2, #0
    3592:	711a      	strb	r2, [r3, #4]
      conn->in_publish_msg.payload_length =
        conn->in_packet.remaining_length - conn->in_packet.topic_len - 2;
    3594:	4b6a      	ldr	r3, [pc, #424]	; (3740 <tcp_input+0x394>)
    3596:	5aeb      	ldrh	r3, [r5, r3]
    3598:	3b02      	subs	r3, #2
    359a:	4a6d      	ldr	r2, [pc, #436]	; (3750 <tcp_input+0x3a4>)

    if(conn->in_packet.topic_len - conn->in_packet.topic_pos == 0) {
      DBG("MQTT - Got topic '%s'", conn->in_publish_msg.topic);
      conn->in_packet.topic_received = 1;
      conn->in_publish_msg.topic[conn->in_packet.topic_pos] = '\0';
      conn->in_publish_msg.payload_length =
    359c:	5aaa      	ldrh	r2, [r5, r2]
    359e:	1a9b      	subs	r3, r3, r2
    35a0:	b29b      	uxth	r3, r3
    35a2:	22e2      	movs	r2, #226	; 0xe2
    35a4:	00d2      	lsls	r2, r2, #3
    35a6:	52ab      	strh	r3, [r5, r2]
        conn->in_packet.remaining_length - conn->in_packet.topic_len - 2;
      conn->in_publish_msg.payload_left = conn->in_publish_msg.payload_length;
    35a8:	4a70      	ldr	r2, [pc, #448]	; (376c <tcp_input+0x3c0>)
    35aa:	52ab      	strh	r3, [r5, r2]
    }

    /* Set this once per incomming publish message */
    conn->in_publish_msg.first_chunk = 1;
    35ac:	2201      	movs	r2, #1
    35ae:	4b70      	ldr	r3, [pc, #448]	; (3770 <tcp_input+0x3c4>)
    35b0:	54ea      	strb	r2, [r5, r3]
    35b2:	e000      	b.n	35b6 <tcp_input+0x20a>
{
  uint16_t copy_bytes;

  /* Read out topic length */
  if(conn->in_packet.topic_len_received == 0) {
    conn->in_packet.topic_len = (input_data_ptr[(*pos)++] << 8);
    35b4:	4681      	mov	r9, r0
       conn->in_packet.topic_received == 0) {
      parse_publish_vhdr(conn, &pos, input_data_ptr, input_data_len);
    }

    /* Read in as much as we can into the packet payload */
    copy_bytes = MIN(input_data_len - pos,
    35b6:	46d0      	mov	r8, sl
    35b8:	4b6e      	ldr	r3, [pc, #440]	; (3774 <tcp_input+0x3c8>)
    35ba:	5cea      	ldrb	r2, [r5, r3]
    35bc:	2380      	movs	r3, #128	; 0x80
    35be:	009b      	lsls	r3, r3, #2
    35c0:	1a9b      	subs	r3, r3, r2
    35c2:	4652      	mov	r2, sl
    35c4:	4649      	mov	r1, r9
    35c6:	1a56      	subs	r6, r2, r1
    35c8:	429e      	cmp	r6, r3
    35ca:	d900      	bls.n	35ce <tcp_input+0x222>
    35cc:	1c1e      	adds	r6, r3, #0
                     MQTT_INPUT_BUFF_SIZE - conn->in_packet.payload_pos);
    DBG("- Copied %lu payload bytes\n\r", copy_bytes);
    35ce:	486a      	ldr	r0, [pc, #424]	; (3778 <tcp_input+0x3cc>)
    35d0:	1c31      	adds	r1, r6, #0
    35d2:	4f52      	ldr	r7, [pc, #328]	; (371c <tcp_input+0x370>)
    35d4:	47b8      	blx	r7
    memcpy(&conn->in_packet.payload[conn->in_packet.payload_pos],
    35d6:	4c67      	ldr	r4, [pc, #412]	; (3774 <tcp_input+0x3c8>)
    35d8:	5d28      	ldrb	r0, [r5, r4]
    35da:	1828      	adds	r0, r5, r0
    35dc:	4b67      	ldr	r3, [pc, #412]	; (377c <tcp_input+0x3d0>)
    35de:	469c      	mov	ip, r3
    35e0:	4460      	add	r0, ip
           &input_data_ptr[pos],
    35e2:	4659      	mov	r1, fp
    35e4:	4449      	add	r1, r9

    /* Read in as much as we can into the packet payload */
    copy_bytes = MIN(input_data_len - pos,
                     MQTT_INPUT_BUFF_SIZE - conn->in_packet.payload_pos);
    DBG("- Copied %lu payload bytes\n\r", copy_bytes);
    memcpy(&conn->in_packet.payload[conn->in_packet.payload_pos],
    35e6:	1c32      	adds	r2, r6, #0
    35e8:	4b5e      	ldr	r3, [pc, #376]	; (3764 <tcp_input+0x3b8>)
    35ea:	4798      	blx	r3
           &input_data_ptr[pos],
           copy_bytes);
    conn->in_packet.byte_counter += copy_bytes;
    35ec:	4a4d      	ldr	r2, [pc, #308]	; (3724 <tcp_input+0x378>)
    35ee:	58ab      	ldr	r3, [r5, r2]
    35f0:	18f3      	adds	r3, r6, r3
    35f2:	50ab      	str	r3, [r5, r2]
    conn->in_packet.payload_pos += copy_bytes;
    35f4:	5d2b      	ldrb	r3, [r5, r4]
    35f6:	18f3      	adds	r3, r6, r3
    35f8:	552b      	strb	r3, [r5, r4]
    pos += copy_bytes;
    35fa:	44b1      	add	r9, r6

    uint8_t i;
    DBG("MQTT - Copied bytes: \n\r");
    35fc:	4860      	ldr	r0, [pc, #384]	; (3780 <tcp_input+0x3d4>)
    35fe:	47b8      	blx	r7
    for(i = 0; i < copy_bytes; i++) {
    3600:	2e00      	cmp	r6, #0
    3602:	d00d      	beq.n	3620 <tcp_input+0x274>
    3604:	2400      	movs	r4, #0
      DBG("%02X ", conn->in_packet.payload[i]);
    3606:	4f45      	ldr	r7, [pc, #276]	; (371c <tcp_input+0x370>)
    3608:	192b      	adds	r3, r5, r4
    360a:	2297      	movs	r2, #151	; 0x97
    360c:	00d2      	lsls	r2, r2, #3
    360e:	4694      	mov	ip, r2
    3610:	4463      	add	r3, ip
    3612:	7899      	ldrb	r1, [r3, #2]
    3614:	485b      	ldr	r0, [pc, #364]	; (3784 <tcp_input+0x3d8>)
    3616:	47b8      	blx	r7
    conn->in_packet.payload_pos += copy_bytes;
    pos += copy_bytes;

    uint8_t i;
    DBG("MQTT - Copied bytes: \n\r");
    for(i = 0; i < copy_bytes; i++) {
    3618:	3401      	adds	r4, #1
    361a:	b2e4      	uxtb	r4, r4
    361c:	42a6      	cmp	r6, r4
    361e:	d8f3      	bhi.n	3608 <tcp_input+0x25c>
      DBG("%02X ", conn->in_packet.payload[i]);
    }
    DBG("\n\r");
    3620:	4859      	ldr	r0, [pc, #356]	; (3788 <tcp_input+0x3dc>)
    3622:	4b3e      	ldr	r3, [pc, #248]	; (371c <tcp_input+0x370>)
    3624:	4798      	blx	r3

      conn->in_publish_msg.payload_chunk = conn->in_packet.payload;
      conn->in_packet.payload_pos = 0;
    }

    if(pos >= input_data_len &&
    3626:	4643      	mov	r3, r8
    3628:	454b      	cmp	r3, r9
    362a:	d807      	bhi.n	363c <tcp_input+0x290>
       (conn->in_packet.byte_counter < (MQTT_FHDR_SIZE + conn->in_packet.remaining_length))) {
    362c:	4b44      	ldr	r3, [pc, #272]	; (3740 <tcp_input+0x394>)
    362e:	5aeb      	ldrh	r3, [r5, r3]
    3630:	3301      	adds	r3, #1

      conn->in_publish_msg.payload_chunk = conn->in_packet.payload;
      conn->in_packet.payload_pos = 0;
    }

    if(pos >= input_data_len &&
    3632:	4a3c      	ldr	r2, [pc, #240]	; (3724 <tcp_input+0x378>)
    3634:	58aa      	ldr	r2, [r5, r2]
    3636:	429a      	cmp	r2, r3
    3638:	d200      	bcs.n	363c <tcp_input+0x290>
    363a:	e11d      	b.n	3878 <tcp_input+0x4cc>
   * Supported payload, reads out both VHDR and Payload of all packets.
   *
   * Note: There will always be at least one byte left to read when we enter
   *       this loop.
   */
  while(conn->in_packet.byte_counter <
    363c:	4b39      	ldr	r3, [pc, #228]	; (3724 <tcp_input+0x378>)
    363e:	58ea      	ldr	r2, [r5, r3]
        (MQTT_FHDR_SIZE + conn->in_packet.remaining_length)) {
    3640:	4b3f      	ldr	r3, [pc, #252]	; (3740 <tcp_input+0x394>)
    3642:	5aeb      	ldrh	r3, [r5, r3]
    3644:	3301      	adds	r3, #1
   * Supported payload, reads out both VHDR and Payload of all packets.
   *
   * Note: There will always be at least one byte left to read when we enter
   *       this loop.
   */
  while(conn->in_packet.byte_counter <
    3646:	429a      	cmp	r2, r3
    3648:	d200      	bcs.n	364c <tcp_input+0x2a0>
    364a:	e73a      	b.n	34c2 <tcp_input+0x116>
      return 0;
    }
  }

  /* Debug information */
  DBG("\n\r");
    364c:	484e      	ldr	r0, [pc, #312]	; (3788 <tcp_input+0x3dc>)
    364e:	4c33      	ldr	r4, [pc, #204]	; (371c <tcp_input+0x370>)
    3650:	47a0      	blx	r4
  /* Take care of input */
  DBG("MQTT - Finished reading packet!\n\r");
    3652:	484e      	ldr	r0, [pc, #312]	; (378c <tcp_input+0x3e0>)
    3654:	47a0      	blx	r4
  /* What to return? */
  DBG("MQTT - total data was %i bytes of data. \n\r",
    3656:	4b3a      	ldr	r3, [pc, #232]	; (3740 <tcp_input+0x394>)
    3658:	5ae9      	ldrh	r1, [r5, r3]
    365a:	3101      	adds	r1, #1
    365c:	484c      	ldr	r0, [pc, #304]	; (3790 <tcp_input+0x3e4>)
    365e:	47a0      	blx	r4
      (MQTT_FHDR_SIZE + conn->in_packet.remaining_length));

  /* Handle packet here. */
  switch(conn->in_packet.fhdr & 0xF0) {
    3660:	4b2f      	ldr	r3, [pc, #188]	; (3720 <tcp_input+0x374>)
    3662:	5ceb      	ldrb	r3, [r5, r3]
    3664:	220f      	movs	r2, #15
    3666:	4393      	bics	r3, r2
    3668:	2b60      	cmp	r3, #96	; 0x60
    366a:	d100      	bne.n	366e <tcp_input+0x2c2>
    366c:	e0fb      	b.n	3866 <tcp_input+0x4ba>
    366e:	b2da      	uxtb	r2, r3
    3670:	2a60      	cmp	r2, #96	; 0x60
    3672:	d80d      	bhi.n	3690 <tcp_input+0x2e4>
    3674:	2b30      	cmp	r3, #48	; 0x30
    3676:	d03d      	beq.n	36f4 <tcp_input+0x348>
    3678:	2a30      	cmp	r2, #48	; 0x30
    367a:	d802      	bhi.n	3682 <tcp_input+0x2d6>
    367c:	2b20      	cmp	r3, #32
    367e:	d018      	beq.n	36b2 <tcp_input+0x306>
    3680:	e0f6      	b.n	3870 <tcp_input+0x4c4>
    3682:	2b40      	cmp	r3, #64	; 0x40
    3684:	d100      	bne.n	3688 <tcp_input+0x2dc>
    3686:	e093      	b.n	37b0 <tcp_input+0x404>
    3688:	2b50      	cmp	r3, #80	; 0x50
    368a:	d100      	bne.n	368e <tcp_input+0x2e2>
    368c:	e0eb      	b.n	3866 <tcp_input+0x4ba>
    368e:	e0ef      	b.n	3870 <tcp_input+0x4c4>
    3690:	b2da      	uxtb	r2, r3
    3692:	2a90      	cmp	r2, #144	; 0x90
    3694:	d100      	bne.n	3698 <tcp_input+0x2ec>
    3696:	e09f      	b.n	37d8 <tcp_input+0x42c>
    3698:	d803      	bhi.n	36a2 <tcp_input+0x2f6>
    369a:	2b70      	cmp	r3, #112	; 0x70
    369c:	d100      	bne.n	36a0 <tcp_input+0x2f4>
    369e:	e0e2      	b.n	3866 <tcp_input+0x4ba>
    36a0:	e0e6      	b.n	3870 <tcp_input+0x4c4>
    36a2:	b2da      	uxtb	r2, r3
    36a4:	2ab0      	cmp	r2, #176	; 0xb0
    36a6:	d100      	bne.n	36aa <tcp_input+0x2fe>
    36a8:	e0bd      	b.n	3826 <tcp_input+0x47a>
    36aa:	2ad0      	cmp	r2, #208	; 0xd0
    36ac:	d100      	bne.n	36b0 <tcp_input+0x304>
    36ae:	e0d6      	b.n	385e <tcp_input+0x4b2>
    36b0:	e0de      	b.n	3870 <tcp_input+0x4c4>
}
/*---------------------------------------------------------------------------*/
static void
handle_connack(struct mqtt_connection *conn)
{
  DBG("MQTT - Got CONNACK\n\r");
    36b2:	4838      	ldr	r0, [pc, #224]	; (3794 <tcp_input+0x3e8>)
    36b4:	4b19      	ldr	r3, [pc, #100]	; (371c <tcp_input+0x370>)
    36b6:	4798      	blx	r3

  if(conn->in_packet.payload[1] != 0) {
    36b8:	4b37      	ldr	r3, [pc, #220]	; (3798 <tcp_input+0x3ec>)
    36ba:	5ceb      	ldrb	r3, [r5, r3]
    36bc:	2b00      	cmp	r3, #0
    36be:	d005      	beq.n	36cc <tcp_input+0x320>
    PRINTF("MQTT - Connection refused with Return Code %i\n\r",
           conn->in_packet.payload[1]);
    call_event(conn,
               MQTT_EVENT_CONNECTION_REFUSED_ERROR,
               &conn->in_packet.payload[1]);
    36c0:	4b35      	ldr	r3, [pc, #212]	; (3798 <tcp_input+0x3ec>)
    36c2:	18ea      	adds	r2, r5, r3
  DBG("MQTT - Got CONNACK\n\r");

  if(conn->in_packet.payload[1] != 0) {
    PRINTF("MQTT - Connection refused with Return Code %i\n\r",
           conn->in_packet.payload[1]);
    call_event(conn,
    36c4:	1c28      	adds	r0, r5, #0
    36c6:	2182      	movs	r1, #130	; 0x82
    36c8:	4b1a      	ldr	r3, [pc, #104]	; (3734 <tcp_input+0x388>)
    36ca:	4798      	blx	r3
               MQTT_EVENT_CONNECTION_REFUSED_ERROR,
               &conn->in_packet.payload[1]);
  }

  conn->out_packet.qos_state = MQTT_QOS_STATE_GOT_ACK;
    36cc:	2201      	movs	r2, #1
    36ce:	4b33      	ldr	r3, [pc, #204]	; (379c <tcp_input+0x3f0>)
    36d0:	54ea      	strb	r2, [r5, r3]

  ctimer_set(&conn->keep_alive_timer, conn->keep_alive * CLOCK_SECOND,
    36d2:	1c28      	adds	r0, r5, #0
    36d4:	3018      	adds	r0, #24
    36d6:	8ae9      	ldrh	r1, [r5, #22]
    36d8:	01c9      	lsls	r1, r1, #7
    36da:	4a31      	ldr	r2, [pc, #196]	; (37a0 <tcp_input+0x3f4>)
    36dc:	1c2b      	adds	r3, r5, #0
    36de:	4c31      	ldr	r4, [pc, #196]	; (37a4 <tcp_input+0x3f8>)
    36e0:	47a0      	blx	r4
             keep_alive_callback, conn);

  /* Always reset packet before callback since it might be used directly */
  conn->state = MQTT_CONN_STATE_CONNECTED_TO_BROKER;
    36e2:	2208      	movs	r2, #8
    36e4:	2360      	movs	r3, #96	; 0x60
    36e6:	54ea      	strb	r2, [r5, r3]
  call_event(conn, MQTT_EVENT_CONNECTED, NULL);
    36e8:	1c28      	adds	r0, r5, #0
    36ea:	2100      	movs	r1, #0
    36ec:	2200      	movs	r2, #0
    36ee:	4b11      	ldr	r3, [pc, #68]	; (3734 <tcp_input+0x388>)
    36f0:	4798      	blx	r3
    36f2:	e0bd      	b.n	3870 <tcp_input+0x4c4>
  case MQTT_FHDR_MSG_TYPE_CONNACK:
    handle_connack(conn);
    break;
  case MQTT_FHDR_MSG_TYPE_PUBLISH:
    /* This is the only or the last chunk of publish payload */
    conn->in_publish_msg.payload_chunk = conn->in_packet.payload;
    36f4:	4b21      	ldr	r3, [pc, #132]	; (377c <tcp_input+0x3d0>)
    36f6:	18eb      	adds	r3, r5, r3
    36f8:	22e1      	movs	r2, #225	; 0xe1
    36fa:	00d2      	lsls	r2, r2, #3
    36fc:	50ab      	str	r3, [r5, r2]
    conn->in_publish_msg.payload_chunk_length = conn->in_packet.payload_pos;
    36fe:	4b1d      	ldr	r3, [pc, #116]	; (3774 <tcp_input+0x3c8>)
    3700:	5cea      	ldrb	r2, [r5, r3]
    3702:	4b29      	ldr	r3, [pc, #164]	; (37a8 <tcp_input+0x3fc>)
    3704:	52ea      	strh	r2, [r5, r3]
    conn->in_publish_msg.payload_left = 0;
    3706:	2200      	movs	r2, #0
    3708:	4b18      	ldr	r3, [pc, #96]	; (376c <tcp_input+0x3c0>)
    370a:	52ea      	strh	r2, [r5, r3]
    handle_publish(conn);
    370c:	1c28      	adds	r0, r5, #0
    370e:	4b27      	ldr	r3, [pc, #156]	; (37ac <tcp_input+0x400>)
    3710:	4798      	blx	r3
    break;
    3712:	e0ad      	b.n	3870 <tcp_input+0x4c4>
    3714:	00003295 	.word	0x00003295
    3718:	000121c4 	.word	0x000121c4
    371c:	00010b79 	.word	0x00010b79
    3720:	000004b1 	.word	0x000004b1
    3724:	000004ac 	.word	0x000004ac
    3728:	000121e8 	.word	0x000121e8
    372c:	000004b7 	.word	0x000004b7
    3730:	00012204 	.word	0x00012204
    3734:	00003275 	.word	0x00003275
    3738:	00012228 	.word	0x00012228
    373c:	000004b6 	.word	0x000004b6
    3740:	000004b2 	.word	0x000004b2
    3744:	00012258 	.word	0x00012258
    3748:	000006bf 	.word	0x000006bf
    374c:	000006be 	.word	0x000006be
    3750:	000006ba 	.word	0x000006ba
    3754:	00012288 	.word	0x00012288
    3758:	000006bc 	.word	0x000006bc
    375c:	000122ac 	.word	0x000122ac
    3760:	000006c4 	.word	0x000006c4
    3764:	00010b2f 	.word	0x00010b2f
    3768:	000122d0 	.word	0x000122d0
    376c:	00000712 	.word	0x00000712
    3770:	0000070e 	.word	0x0000070e
    3774:	000004b9 	.word	0x000004b9
    3778:	000122e8 	.word	0x000122e8
    377c:	000004ba 	.word	0x000004ba
    3780:	00012308 	.word	0x00012308
    3784:	00012320 	.word	0x00012320
    3788:	00013044 	.word	0x00013044
    378c:	00012328 	.word	0x00012328
    3790:	0001234c 	.word	0x0001234c
    3794:	00012378 	.word	0x00012378
    3798:	000004bb 	.word	0x000004bb
    379c:	00000299 	.word	0x00000299
    37a0:	000038c9 	.word	0x000038c9
    37a4:	0000e625 	.word	0x0000e625
    37a8:	0000070c 	.word	0x0000070c
    37ac:	000032ad 	.word	0x000032ad
}
/*---------------------------------------------------------------------------*/
static void
handle_puback(struct mqtt_connection *conn)
{
  DBG("MQTT - Got PUBACK\n\r");
    37b0:	4835      	ldr	r0, [pc, #212]	; (3888 <tcp_input+0x4dc>)
    37b2:	4b36      	ldr	r3, [pc, #216]	; (388c <tcp_input+0x4e0>)
    37b4:	4798      	blx	r3

  conn->out_packet.qos_state = MQTT_QOS_STATE_GOT_ACK;
    37b6:	2201      	movs	r2, #1
    37b8:	4b35      	ldr	r3, [pc, #212]	; (3890 <tcp_input+0x4e4>)
    37ba:	54ea      	strb	r2, [r5, r3]
  conn->in_packet.mid = (conn->in_packet.payload[0] << 8) |
    37bc:	4b35      	ldr	r3, [pc, #212]	; (3894 <tcp_input+0x4e8>)
    37be:	5ceb      	ldrb	r3, [r5, r3]
    37c0:	021b      	lsls	r3, r3, #8
    (conn->in_packet.payload[1]);
    37c2:	4a35      	ldr	r2, [pc, #212]	; (3898 <tcp_input+0x4ec>)
handle_puback(struct mqtt_connection *conn)
{
  DBG("MQTT - Got PUBACK\n\r");

  conn->out_packet.qos_state = MQTT_QOS_STATE_GOT_ACK;
  conn->in_packet.mid = (conn->in_packet.payload[0] << 8) |
    37c4:	5caa      	ldrb	r2, [r5, r2]
    37c6:	4313      	orrs	r3, r2
    37c8:	4a34      	ldr	r2, [pc, #208]	; (389c <tcp_input+0x4f0>)
    37ca:	52ab      	strh	r3, [r5, r2]
    (conn->in_packet.payload[1]);

  call_event(conn, MQTT_EVENT_PUBACK, &conn->in_packet.mid);
    37cc:	18aa      	adds	r2, r5, r2
    37ce:	1c28      	adds	r0, r5, #0
    37d0:	2105      	movs	r1, #5
    37d2:	4b33      	ldr	r3, [pc, #204]	; (38a0 <tcp_input+0x4f4>)
    37d4:	4798      	blx	r3
    37d6:	e04b      	b.n	3870 <tcp_input+0x4c4>
static void
handle_suback(struct mqtt_connection *conn)
{
  struct mqtt_suback_event suback_event;

  DBG("MQTT - Got SUBACK\n\r");
    37d8:	4832      	ldr	r0, [pc, #200]	; (38a4 <tcp_input+0x4f8>)
    37da:	4b2c      	ldr	r3, [pc, #176]	; (388c <tcp_input+0x4e0>)
    37dc:	4798      	blx	r3

  /* Only accept SUBACKS with X topic QoS response, assume 1 */
  if(conn->in_packet.remaining_length > MQTT_MID_SIZE +
    37de:	4b32      	ldr	r3, [pc, #200]	; (38a8 <tcp_input+0x4fc>)
    37e0:	5aeb      	ldrh	r3, [r5, r3]
    37e2:	2b03      	cmp	r3, #3
    37e4:	d902      	bls.n	37ec <tcp_input+0x440>
     MQTT_MAX_TOPICS_PER_SUBSCRIBE * MQTT_QOS_SIZE) {
    DBG("MQTT - Error, SUBACK with > 1 topic, not supported.\n\r");
    37e6:	4831      	ldr	r0, [pc, #196]	; (38ac <tcp_input+0x500>)
    37e8:	4b28      	ldr	r3, [pc, #160]	; (388c <tcp_input+0x4e0>)
    37ea:	4798      	blx	r3
  }

  conn->out_packet.qos_state = MQTT_QOS_STATE_GOT_ACK;
    37ec:	2201      	movs	r2, #1
    37ee:	4b28      	ldr	r3, [pc, #160]	; (3890 <tcp_input+0x4e4>)
    37f0:	54ea      	strb	r2, [r5, r3]

  suback_event.mid = (conn->in_packet.payload[0] << 8) |
    37f2:	4b28      	ldr	r3, [pc, #160]	; (3894 <tcp_input+0x4e8>)
    37f4:	5ceb      	ldrb	r3, [r5, r3]
    37f6:	021b      	lsls	r3, r3, #8
    (conn->in_packet.payload[1]);
    37f8:	4a27      	ldr	r2, [pc, #156]	; (3898 <tcp_input+0x4ec>)
    DBG("MQTT - Error, SUBACK with > 1 topic, not supported.\n\r");
  }

  conn->out_packet.qos_state = MQTT_QOS_STATE_GOT_ACK;

  suback_event.mid = (conn->in_packet.payload[0] << 8) |
    37fa:	5caa      	ldrb	r2, [r5, r2]
    37fc:	4313      	orrs	r3, r2
    37fe:	aa03      	add	r2, sp, #12
    3800:	8013      	strh	r3, [r2, #0]
    (conn->in_packet.payload[1]);
  suback_event.qos_level = conn->in_packet.payload[2];
    3802:	492b      	ldr	r1, [pc, #172]	; (38b0 <tcp_input+0x504>)
    3804:	5c69      	ldrb	r1, [r5, r1]
    3806:	7091      	strb	r1, [r2, #2]
  conn->in_packet.mid = suback_event.mid;
    3808:	4a24      	ldr	r2, [pc, #144]	; (389c <tcp_input+0x4f0>)
    380a:	52ab      	strh	r3, [r5, r2]

  if(conn->in_packet.mid != conn->out_packet.mid) {
    380c:	4a29      	ldr	r2, [pc, #164]	; (38b4 <tcp_input+0x508>)
    380e:	5aaa      	ldrh	r2, [r5, r2]
    3810:	429a      	cmp	r2, r3
    3812:	d002      	beq.n	381a <tcp_input+0x46e>
    DBG("MQTT - Warning, got SUBACK with none matching MID. Currently there is"
    3814:	4828      	ldr	r0, [pc, #160]	; (38b8 <tcp_input+0x50c>)
    3816:	4b1d      	ldr	r3, [pc, #116]	; (388c <tcp_input+0x4e0>)
    3818:	4798      	blx	r3
        "no support for several concurrent SUBSCRIBE messages.\n\r");
  }

  /* Always reset packet before callback since it might be used directly */
  call_event(conn, MQTT_EVENT_SUBACK, &suback_event);
    381a:	1c28      	adds	r0, r5, #0
    381c:	2102      	movs	r1, #2
    381e:	aa03      	add	r2, sp, #12
    3820:	4b1f      	ldr	r3, [pc, #124]	; (38a0 <tcp_input+0x4f4>)
    3822:	4798      	blx	r3
    3824:	e024      	b.n	3870 <tcp_input+0x4c4>
}
/*---------------------------------------------------------------------------*/
static void
handle_unsuback(struct mqtt_connection *conn)
{
  DBG("MQTT - Got UNSUBACK\n\r");
    3826:	4825      	ldr	r0, [pc, #148]	; (38bc <tcp_input+0x510>)
    3828:	4b18      	ldr	r3, [pc, #96]	; (388c <tcp_input+0x4e0>)
    382a:	4798      	blx	r3

  conn->out_packet.qos_state = MQTT_QOS_STATE_GOT_ACK;
    382c:	2201      	movs	r2, #1
    382e:	4b18      	ldr	r3, [pc, #96]	; (3890 <tcp_input+0x4e4>)
    3830:	54ea      	strb	r2, [r5, r3]
  conn->in_packet.mid = (conn->in_packet.payload[0] << 8) |
    3832:	4b18      	ldr	r3, [pc, #96]	; (3894 <tcp_input+0x4e8>)
    3834:	5ceb      	ldrb	r3, [r5, r3]
    3836:	021b      	lsls	r3, r3, #8
    (conn->in_packet.payload[1]);
    3838:	4a17      	ldr	r2, [pc, #92]	; (3898 <tcp_input+0x4ec>)
handle_unsuback(struct mqtt_connection *conn)
{
  DBG("MQTT - Got UNSUBACK\n\r");

  conn->out_packet.qos_state = MQTT_QOS_STATE_GOT_ACK;
  conn->in_packet.mid = (conn->in_packet.payload[0] << 8) |
    383a:	5caa      	ldrb	r2, [r5, r2]
    383c:	4313      	orrs	r3, r2
    383e:	4a17      	ldr	r2, [pc, #92]	; (389c <tcp_input+0x4f0>)
    3840:	52ab      	strh	r3, [r5, r2]
    (conn->in_packet.payload[1]);

  if(conn->in_packet.mid != conn->out_packet.mid) {
    3842:	4a1c      	ldr	r2, [pc, #112]	; (38b4 <tcp_input+0x508>)
    3844:	5aaa      	ldrh	r2, [r5, r2]
    3846:	429a      	cmp	r2, r3
    3848:	d002      	beq.n	3850 <tcp_input+0x4a4>
    DBG("MQTT - Warning, got UNSUBACK with none matching MID. Currently there is"
    384a:	481d      	ldr	r0, [pc, #116]	; (38c0 <tcp_input+0x514>)
    384c:	4b0f      	ldr	r3, [pc, #60]	; (388c <tcp_input+0x4e0>)
    384e:	4798      	blx	r3
        "no support for several concurrent UNSUBSCRIBE messages.\n\r");
  }

  call_event(conn, MQTT_EVENT_UNSUBACK, &conn->in_packet.mid);
    3850:	4b12      	ldr	r3, [pc, #72]	; (389c <tcp_input+0x4f0>)
    3852:	18ea      	adds	r2, r5, r3
    3854:	1c28      	adds	r0, r5, #0
    3856:	2103      	movs	r1, #3
    3858:	4b11      	ldr	r3, [pc, #68]	; (38a0 <tcp_input+0x4f4>)
    385a:	4798      	blx	r3
    385c:	e008      	b.n	3870 <tcp_input+0x4c4>
}
/*---------------------------------------------------------------------------*/
static void
handle_pingresp(struct mqtt_connection *conn)
{
  DBG("MQTT - Got RINGRESP\n\r");
    385e:	4819      	ldr	r0, [pc, #100]	; (38c4 <tcp_input+0x518>)
    3860:	4b0a      	ldr	r3, [pc, #40]	; (388c <tcp_input+0x4e0>)
    3862:	4798      	blx	r3
    3864:	e004      	b.n	3870 <tcp_input+0x4c4>

  /* QoS 2 not implemented yet */
  case MQTT_FHDR_MSG_TYPE_PUBREC:
  case MQTT_FHDR_MSG_TYPE_PUBREL:
  case MQTT_FHDR_MSG_TYPE_PUBCOMP:
    call_event(conn, MQTT_EVENT_NOT_IMPLEMENTED_ERROR, NULL);
    3866:	1c28      	adds	r0, r5, #0
    3868:	2184      	movs	r1, #132	; 0x84
    386a:	2200      	movs	r2, #0
    386c:	4b0c      	ldr	r3, [pc, #48]	; (38a0 <tcp_input+0x4f4>)
    386e:	4798      	blx	r3
    /* All server-only message */
    PRINTF("MQTT - Got MQTT Message Type '%i'", (conn->in_packet.fhdr & 0xF0));
    break;
  }

  conn->in_packet.packet_received = 1;
    3870:	2201      	movs	r2, #1
    3872:	2396      	movs	r3, #150	; 0x96
    3874:	00db      	lsls	r3, r3, #3
    3876:	54ea      	strb	r2, [r5, r3]

  return 0;
}
    3878:	2000      	movs	r0, #0
    387a:	b005      	add	sp, #20
    387c:	bc3c      	pop	{r2, r3, r4, r5}
    387e:	4690      	mov	r8, r2
    3880:	4699      	mov	r9, r3
    3882:	46a2      	mov	sl, r4
    3884:	46ab      	mov	fp, r5
    3886:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3888:	00012390 	.word	0x00012390
    388c:	00010b79 	.word	0x00010b79
    3890:	00000299 	.word	0x00000299
    3894:	000004ba 	.word	0x000004ba
    3898:	000004bb 	.word	0x000004bb
    389c:	000004b4 	.word	0x000004b4
    38a0:	00003275 	.word	0x00003275
    38a4:	000123a4 	.word	0x000123a4
    38a8:	000004b2 	.word	0x000004b2
    38ac:	000123b8 	.word	0x000123b8
    38b0:	000004bc 	.word	0x000004bc
    38b4:	00000286 	.word	0x00000286
    38b8:	000123f0 	.word	0x000123f0
    38bc:	00012470 	.word	0x00012470
    38c0:	00012488 	.word	0x00012488
    38c4:	0001250c 	.word	0x0001250c

000038c8 <keep_alive_callback>:
  DBG("MQTT - remaining_length_bytes %u\n\r", *remaining_length_bytes);
}
/*---------------------------------------------------------------------------*/
static void
keep_alive_callback(void *ptr)
{
    38c8:	b510      	push	{r4, lr}
    38ca:	1c04      	adds	r4, r0, #0
  struct mqtt_connection *conn = ptr;

  DBG("MQTT - (keep_alive_callback) Called!\n\r");
    38cc:	480f      	ldr	r0, [pc, #60]	; (390c <keep_alive_callback+0x44>)
    38ce:	4b10      	ldr	r3, [pc, #64]	; (3910 <keep_alive_callback+0x48>)
    38d0:	4798      	blx	r3

  /* The flag is set when the PINGREQ has been sent */
  if(conn->waiting_for_pingresp) {
    38d2:	2338      	movs	r3, #56	; 0x38
    38d4:	5ce3      	ldrb	r3, [r4, r3]
    38d6:	2b00      	cmp	r3, #0
    38d8:	d011      	beq.n	38fe <keep_alive_callback+0x36>
}
/*---------------------------------------------------------------------------*/
static void
disconnect_tcp(struct mqtt_connection *conn)
{
  conn->state = MQTT_CONN_STATE_DISCONNECTING;
    38da:	2202      	movs	r2, #2
    38dc:	2360      	movs	r3, #96	; 0x60
    38de:	54e2      	strb	r2, [r4, r3]
  tcp_socket_close(&(conn->socket));
    38e0:	4b0c      	ldr	r3, [pc, #48]	; (3914 <keep_alive_callback+0x4c>)
    38e2:	469c      	mov	ip, r3
    38e4:	4464      	add	r4, ip
    38e6:	1c20      	adds	r0, r4, #0
    38e8:	4b0b      	ldr	r3, [pc, #44]	; (3918 <keep_alive_callback+0x50>)
    38ea:	4798      	blx	r3
  tcp_socket_unregister(&conn->socket);
    38ec:	1c20      	adds	r0, r4, #0
    38ee:	4b0b      	ldr	r3, [pc, #44]	; (391c <keep_alive_callback+0x54>)
    38f0:	4798      	blx	r3

  memset(&conn->socket, 0, sizeof(conn->socket));
    38f2:	1c20      	adds	r0, r4, #0
    38f4:	2100      	movs	r1, #0
    38f6:	2234      	movs	r2, #52	; 0x34
    38f8:	4b09      	ldr	r3, [pc, #36]	; (3920 <keep_alive_callback+0x58>)
    38fa:	4798      	blx	r3
    38fc:	e005      	b.n	390a <keep_alive_callback+0x42>
    PRINTF("MQTT - Disconnect due to no PINGRESP from broker.\n\r");
    disconnect_tcp(conn);
    return;
  }

  process_post(&mqtt_process, mqtt_do_pingreq_event, conn);
    38fe:	4b09      	ldr	r3, [pc, #36]	; (3924 <keep_alive_callback+0x5c>)
    3900:	7819      	ldrb	r1, [r3, #0]
    3902:	4809      	ldr	r0, [pc, #36]	; (3928 <keep_alive_callback+0x60>)
    3904:	1c22      	adds	r2, r4, #0
    3906:	4b09      	ldr	r3, [pc, #36]	; (392c <keep_alive_callback+0x64>)
    3908:	4798      	blx	r3
}
    390a:	bd10      	pop	{r4, pc}
    390c:	00012524 	.word	0x00012524
    3910:	00010b79 	.word	0x00010b79
    3914:	0000072c 	.word	0x0000072c
    3918:	0000a4e5 	.word	0x0000a4e5
    391c:	0000a4fd 	.word	0x0000a4fd
    3920:	00010b69 	.word	0x00010b69
    3924:	20000374 	.word	0x20000374
    3928:	2000000c 	.word	0x2000000c
    392c:	0000ec09 	.word	0x0000ec09

00003930 <abort_connection>:
  conn->out_buffer_sent = 0;
}
/*---------------------------------------------------------------------------*/
static void
abort_connection(struct mqtt_connection *conn)
{
    3930:	b570      	push	{r4, r5, r6, lr}
    3932:	1c04      	adds	r4, r0, #0
  conn->out_buffer_ptr = conn->out_buffer;
    3934:	1c03      	adds	r3, r0, #0
    3936:	3374      	adds	r3, #116	; 0x74
    3938:	6703      	str	r3, [r0, #112]	; 0x70
  conn->out_queue_full = 0;
    393a:	2200      	movs	r2, #0
    393c:	236a      	movs	r3, #106	; 0x6a
    393e:	54c2      	strb	r2, [r0, r3]

  /* Reset outgoing packet */
  memset(&conn->out_packet, 0, sizeof(conn->out_packet));
    3940:	239e      	movs	r3, #158	; 0x9e
    3942:	009b      	lsls	r3, r3, #2
    3944:	18c0      	adds	r0, r0, r3
    3946:	2100      	movs	r1, #0
    3948:	3224      	adds	r2, #36	; 0x24
    394a:	4e09      	ldr	r6, [pc, #36]	; (3970 <abort_connection+0x40>)
    394c:	47b0      	blx	r6

  tcp_socket_close(&conn->socket);
    394e:	4b09      	ldr	r3, [pc, #36]	; (3974 <abort_connection+0x44>)
    3950:	18e5      	adds	r5, r4, r3
    3952:	1c28      	adds	r0, r5, #0
    3954:	4b08      	ldr	r3, [pc, #32]	; (3978 <abort_connection+0x48>)
    3956:	4798      	blx	r3
  tcp_socket_unregister(&conn->socket);
    3958:	1c28      	adds	r0, r5, #0
    395a:	4b08      	ldr	r3, [pc, #32]	; (397c <abort_connection+0x4c>)
    395c:	4798      	blx	r3

  memset(&conn->socket, 0, sizeof(conn->socket));
    395e:	1c28      	adds	r0, r5, #0
    3960:	2100      	movs	r1, #0
    3962:	2234      	movs	r2, #52	; 0x34
    3964:	47b0      	blx	r6

  conn->state = MQTT_CONN_STATE_NOT_CONNECTED;
    3966:	2203      	movs	r2, #3
    3968:	2360      	movs	r3, #96	; 0x60
    396a:	54e2      	strb	r2, [r4, r3]
}
    396c:	bd70      	pop	{r4, r5, r6, pc}
    396e:	46c0      	nop			; (mov r8, r8)
    3970:	00010b69 	.word	0x00010b69
    3974:	0000072c 	.word	0x0000072c
    3978:	0000a4e5 	.word	0x0000a4e5
    397c:	0000a4fd 	.word	0x0000a4fd

00003980 <tcp_event>:
/*
 * Handles TCP events from Simple TCP
 */
static void
tcp_event(struct tcp_socket *s, void *ptr, tcp_socket_event_t event)
{
    3980:	b510      	push	{r4, lr}
    3982:	b082      	sub	sp, #8
    3984:	1c0c      	adds	r4, r1, #0
    3986:	466b      	mov	r3, sp
    3988:	71da      	strb	r2, [r3, #7]
  struct mqtt_connection *conn = ptr;

  /* Take care of event */
  switch(event) {
    398a:	1e11      	subs	r1, r2, #0
    398c:	2903      	cmp	r1, #3
    398e:	d802      	bhi.n	3996 <tcp_event+0x16>
    3990:	2a00      	cmp	r2, #0
    3992:	d023      	beq.n	39dc <tcp_event+0x5c>
    3994:	e002      	b.n	399c <tcp_event+0x1c>
    3996:	2a04      	cmp	r2, #4
    3998:	d02e      	beq.n	39f8 <tcp_event+0x78>
    399a:	e040      	b.n	3a1e <tcp_event+0x9e>
  /* Fall through to manage different disconnect event the same way. */
  case TCP_SOCKET_CLOSED:
  case TCP_SOCKET_TIMEDOUT:
  case TCP_SOCKET_ABORTED: {

    DBG("MQTT - Disconnected by tcp event %d\n\r", event);
    399c:	4822      	ldr	r0, [pc, #136]	; (3a28 <tcp_event+0xa8>)
    399e:	4b23      	ldr	r3, [pc, #140]	; (3a2c <tcp_event+0xac>)
    39a0:	4798      	blx	r3
    process_post(&mqtt_process, mqtt_abort_now_event, conn);
    39a2:	4b23      	ldr	r3, [pc, #140]	; (3a30 <tcp_event+0xb0>)
    39a4:	7819      	ldrb	r1, [r3, #0]
    39a6:	4823      	ldr	r0, [pc, #140]	; (3a34 <tcp_event+0xb4>)
    39a8:	1c22      	adds	r2, r4, #0
    39aa:	4b23      	ldr	r3, [pc, #140]	; (3a38 <tcp_event+0xb8>)
    39ac:	4798      	blx	r3
    conn->state = MQTT_CONN_STATE_NOT_CONNECTED;
    39ae:	2203      	movs	r2, #3
    39b0:	2360      	movs	r3, #96	; 0x60
    39b2:	54e2      	strb	r2, [r4, r3]
    ctimer_stop(&conn->keep_alive_timer);
    39b4:	1c20      	adds	r0, r4, #0
    39b6:	3018      	adds	r0, #24
    39b8:	4b20      	ldr	r3, [pc, #128]	; (3a3c <tcp_event+0xbc>)
    39ba:	4798      	blx	r3
    call_event(conn, MQTT_EVENT_DISCONNECTED, &event);
    39bc:	1c20      	adds	r0, r4, #0
    39be:	2101      	movs	r1, #1
    39c0:	466b      	mov	r3, sp
    39c2:	1dda      	adds	r2, r3, #7
    39c4:	4b1e      	ldr	r3, [pc, #120]	; (3a40 <tcp_event+0xc0>)
    39c6:	4798      	blx	r3
    abort_connection(conn);
    39c8:	1c20      	adds	r0, r4, #0
    39ca:	4b1e      	ldr	r3, [pc, #120]	; (3a44 <tcp_event+0xc4>)
    39cc:	4798      	blx	r3

    /* If connecting retry */
    if(conn->auto_reconnect == 1) {
    39ce:	7d63      	ldrb	r3, [r4, #21]
    39d0:	2b01      	cmp	r3, #1
    39d2:	d127      	bne.n	3a24 <tcp_event+0xa4>
      connect_tcp(conn);
    39d4:	1c20      	adds	r0, r4, #0
    39d6:	4b1c      	ldr	r3, [pc, #112]	; (3a48 <tcp_event+0xc8>)
    39d8:	4798      	blx	r3
    39da:	e023      	b.n	3a24 <tcp_event+0xa4>
    }
    break;
  }
  case TCP_SOCKET_CONNECTED: {
    conn->state = MQTT_CONN_STATE_TCP_CONNECTED;
    39dc:	2206      	movs	r2, #6
    39de:	2360      	movs	r3, #96	; 0x60
    39e0:	54e2      	strb	r2, [r4, r3]
    conn->out_buffer_sent = 1;
    39e2:	3a05      	subs	r2, #5
    39e4:	239d      	movs	r3, #157	; 0x9d
    39e6:	009b      	lsls	r3, r3, #2
    39e8:	54e2      	strb	r2, [r4, r3]

    process_post(&mqtt_process, mqtt_do_connect_mqtt_event, conn);
    39ea:	4b18      	ldr	r3, [pc, #96]	; (3a4c <tcp_event+0xcc>)
    39ec:	7819      	ldrb	r1, [r3, #0]
    39ee:	4811      	ldr	r0, [pc, #68]	; (3a34 <tcp_event+0xb4>)
    39f0:	1c22      	adds	r2, r4, #0
    39f2:	4b11      	ldr	r3, [pc, #68]	; (3a38 <tcp_event+0xb8>)
    39f4:	4798      	blx	r3
    break;
    39f6:	e015      	b.n	3a24 <tcp_event+0xa4>
  }
  case TCP_SOCKET_DATA_SENT: {
    DBG("MQTT - Got TCP_DATA_SENT\n\r");
    39f8:	4815      	ldr	r0, [pc, #84]	; (3a50 <tcp_event+0xd0>)
    39fa:	4b0c      	ldr	r3, [pc, #48]	; (3a2c <tcp_event+0xac>)
    39fc:	4798      	blx	r3

    if(conn->socket.output_data_len == 0) {
    39fe:	4b15      	ldr	r3, [pc, #84]	; (3a54 <tcp_event+0xd4>)
    3a00:	5ae3      	ldrh	r3, [r4, r3]
    3a02:	2b00      	cmp	r3, #0
    3a04:	d106      	bne.n	3a14 <tcp_event+0x94>
      conn->out_buffer_sent = 1;
    3a06:	2201      	movs	r2, #1
    3a08:	239d      	movs	r3, #157	; 0x9d
    3a0a:	009b      	lsls	r3, r3, #2
    3a0c:	54e2      	strb	r2, [r4, r3]
      conn->out_buffer_ptr = conn->out_buffer;
    3a0e:	1c23      	adds	r3, r4, #0
    3a10:	3374      	adds	r3, #116	; 0x74
    3a12:	6723      	str	r3, [r4, #112]	; 0x70
    }

    ctimer_restart(&conn->keep_alive_timer);
    3a14:	1c20      	adds	r0, r4, #0
    3a16:	3018      	adds	r0, #24
    3a18:	4b0f      	ldr	r3, [pc, #60]	; (3a58 <tcp_event+0xd8>)
    3a1a:	4798      	blx	r3
    break;
    3a1c:	e002      	b.n	3a24 <tcp_event+0xa4>
  }

  default: {
    DBG("MQTT - TCP Event %d is currently not managed by the tcp event callback\n\r",
    3a1e:	480f      	ldr	r0, [pc, #60]	; (3a5c <tcp_event+0xdc>)
    3a20:	4b02      	ldr	r3, [pc, #8]	; (3a2c <tcp_event+0xac>)
    3a22:	4798      	blx	r3
        event);
  }
  }
}
    3a24:	b002      	add	sp, #8
    3a26:	bd10      	pop	{r4, pc}
    3a28:	0001254c 	.word	0x0001254c
    3a2c:	00010b79 	.word	0x00010b79
    3a30:	2000037b 	.word	0x2000037b
    3a34:	2000000c 	.word	0x2000000c
    3a38:	0000ec09 	.word	0x0000ec09
    3a3c:	0000e715 	.word	0x0000e715
    3a40:	00003275 	.word	0x00003275
    3a44:	00003931 	.word	0x00003931
    3a48:	00003329 	.word	0x00003329
    3a4c:	20000377 	.word	0x20000377
    3a50:	00012574 	.word	0x00012574
    3a54:	0000074e 	.word	0x0000074e
    3a58:	0000e6c9 	.word	0x0000e6c9
    3a5c:	00012590 	.word	0x00012590

00003a60 <send_out_buffer>:
  memset(&conn->socket, 0, sizeof(conn->socket));
}
/*---------------------------------------------------------------------------*/
static void
send_out_buffer(struct mqtt_connection *conn)
{
    3a60:	b538      	push	{r3, r4, r5, lr}
  if(conn->out_buffer_ptr - conn->out_buffer == 0) {
    3a62:	6f01      	ldr	r1, [r0, #112]	; 0x70
    3a64:	1c05      	adds	r5, r0, #0
    3a66:	3574      	adds	r5, #116	; 0x74
    3a68:	42a9      	cmp	r1, r5
    3a6a:	d104      	bne.n	3a76 <send_out_buffer+0x16>
    conn->out_buffer_sent = 1;
    3a6c:	2201      	movs	r2, #1
    3a6e:	239d      	movs	r3, #157	; 0x9d
    3a70:	009b      	lsls	r3, r3, #2
    3a72:	54c2      	strb	r2, [r0, r3]
    return;
    3a74:	e00f      	b.n	3a96 <send_out_buffer+0x36>
    3a76:	1c04      	adds	r4, r0, #0
  }
  conn->out_buffer_sent = 0;
    3a78:	2200      	movs	r2, #0
    3a7a:	239d      	movs	r3, #157	; 0x9d
    3a7c:	009b      	lsls	r3, r3, #2
    3a7e:	54c2      	strb	r2, [r0, r3]

  DBG("MQTT - (send_out_buffer) Space used in buffer: %i\n\r",
    3a80:	1b49      	subs	r1, r1, r5
    3a82:	4805      	ldr	r0, [pc, #20]	; (3a98 <send_out_buffer+0x38>)
    3a84:	4b05      	ldr	r3, [pc, #20]	; (3a9c <send_out_buffer+0x3c>)
    3a86:	4798      	blx	r3
      conn->out_buffer_ptr - conn->out_buffer);

  tcp_socket_send(&conn->socket, conn->out_buffer,
    3a88:	4b05      	ldr	r3, [pc, #20]	; (3aa0 <send_out_buffer+0x40>)
    3a8a:	18e0      	adds	r0, r4, r3
    3a8c:	6f22      	ldr	r2, [r4, #112]	; 0x70
    3a8e:	1b52      	subs	r2, r2, r5
    3a90:	1c29      	adds	r1, r5, #0
    3a92:	4b04      	ldr	r3, [pc, #16]	; (3aa4 <send_out_buffer+0x44>)
    3a94:	4798      	blx	r3
                  conn->out_buffer_ptr - conn->out_buffer);
}
    3a96:	bd38      	pop	{r3, r4, r5, pc}
    3a98:	000125dc 	.word	0x000125dc
    3a9c:	00010b79 	.word	0x00010b79
    3aa0:	0000072c 	.word	0x0000072c
    3aa4:	0000a4a5 	.word	0x0000a4a5

00003aa8 <write_byte>:
  }
}
/*---------------------------------------------------------------------------*/
static int
write_byte(struct mqtt_connection *conn, uint8_t data)
{
    3aa8:	b570      	push	{r4, r5, r6, lr}
    3aaa:	1c04      	adds	r4, r0, #0
    3aac:	1c0e      	adds	r6, r1, #0
  DBG("MQTT - (write_byte) buff_size: %i write: '%02X'\n\r",
    3aae:	239d      	movs	r3, #157	; 0x9d
    3ab0:	009b      	lsls	r3, r3, #2
    3ab2:	18c5      	adds	r5, r0, r3
    3ab4:	6f03      	ldr	r3, [r0, #112]	; 0x70
    3ab6:	1ae9      	subs	r1, r5, r3
    3ab8:	4808      	ldr	r0, [pc, #32]	; (3adc <write_byte+0x34>)
    3aba:	1c32      	adds	r2, r6, #0
    3abc:	4b08      	ldr	r3, [pc, #32]	; (3ae0 <write_byte+0x38>)
    3abe:	4798      	blx	r3
      &conn->out_buffer[MQTT_TCP_OUTPUT_BUFF_SIZE] - conn->out_buffer_ptr,
      data);

  if(&conn->out_buffer[MQTT_TCP_OUTPUT_BUFF_SIZE] - conn->out_buffer_ptr == 0) {
    3ac0:	6f23      	ldr	r3, [r4, #112]	; 0x70
    3ac2:	42ab      	cmp	r3, r5
    3ac4:	d104      	bne.n	3ad0 <write_byte+0x28>
    send_out_buffer(conn);
    3ac6:	1c20      	adds	r0, r4, #0
    3ac8:	4b06      	ldr	r3, [pc, #24]	; (3ae4 <write_byte+0x3c>)
    3aca:	4798      	blx	r3
    return 1;
    3acc:	2001      	movs	r0, #1
    3ace:	e004      	b.n	3ada <write_byte+0x32>
  }

  *conn->out_buffer_ptr = data;
    3ad0:	701e      	strb	r6, [r3, #0]
  conn->out_buffer_ptr++;
    3ad2:	6f23      	ldr	r3, [r4, #112]	; 0x70
    3ad4:	3301      	adds	r3, #1
    3ad6:	6723      	str	r3, [r4, #112]	; 0x70
  return 0;
    3ad8:	2000      	movs	r0, #0
}
    3ada:	bd70      	pop	{r4, r5, r6, pc}
    3adc:	00012610 	.word	0x00012610
    3ae0:	00010b79 	.word	0x00010b79
    3ae4:	00003a61 	.word	0x00003a61

00003ae8 <write_bytes>:
/*---------------------------------------------------------------------------*/
static int
write_bytes(struct mqtt_connection *conn, uint8_t *data, uint16_t len)
{
    3ae8:	b5f0      	push	{r4, r5, r6, r7, lr}
    3aea:	4647      	mov	r7, r8
    3aec:	b480      	push	{r7}
    3aee:	1c06      	adds	r6, r0, #0
    3af0:	1c15      	adds	r5, r2, #0
  uint16_t write_bytes;
  write_bytes =
    MIN(&conn->out_buffer[MQTT_TCP_OUTPUT_BUFF_SIZE] - conn->out_buffer_ptr,
    3af2:	4690      	mov	r8, r2
    3af4:	23a8      	movs	r3, #168	; 0xa8
    3af6:	009b      	lsls	r3, r3, #2
    3af8:	58c3      	ldr	r3, [r0, r3]
    3afa:	6f00      	ldr	r0, [r0, #112]	; 0x70
    3afc:	229d      	movs	r2, #157	; 0x9d
    3afe:	0092      	lsls	r2, r2, #2
    3b00:	18b2      	adds	r2, r6, r2
    3b02:	1a12      	subs	r2, r2, r0
    3b04:	1aec      	subs	r4, r5, r3
    3b06:	4294      	cmp	r4, r2
    3b08:	d900      	bls.n	3b0c <write_bytes+0x24>
    3b0a:	1c14      	adds	r4, r2, #0
        len - conn->out_write_pos);

  memcpy(conn->out_buffer_ptr, &data[conn->out_write_pos], write_bytes);
    3b0c:	0424      	lsls	r4, r4, #16
    3b0e:	0c24      	lsrs	r4, r4, #16
    3b10:	18c9      	adds	r1, r1, r3
    3b12:	1c22      	adds	r2, r4, #0
    3b14:	4b0f      	ldr	r3, [pc, #60]	; (3b54 <write_bytes+0x6c>)
    3b16:	4798      	blx	r3
  conn->out_write_pos += write_bytes;
    3b18:	27a8      	movs	r7, #168	; 0xa8
    3b1a:	00bf      	lsls	r7, r7, #2
    3b1c:	59f3      	ldr	r3, [r6, r7]
    3b1e:	18e2      	adds	r2, r4, r3
    3b20:	51f2      	str	r2, [r6, r7]
  conn->out_buffer_ptr += write_bytes;
    3b22:	6f33      	ldr	r3, [r6, #112]	; 0x70
    3b24:	469c      	mov	ip, r3
    3b26:	4464      	add	r4, ip
    3b28:	6734      	str	r4, [r6, #112]	; 0x70

  DBG("MQTT - (write_bytes) len: %u write_pos: %lu\n\r", len,
    3b2a:	480b      	ldr	r0, [pc, #44]	; (3b58 <write_bytes+0x70>)
    3b2c:	1c29      	adds	r1, r5, #0
    3b2e:	4b0b      	ldr	r3, [pc, #44]	; (3b5c <write_bytes+0x74>)
    3b30:	4798      	blx	r3
      conn->out_write_pos);

  if(len - conn->out_write_pos == 0) {
    3b32:	59f3      	ldr	r3, [r6, r7]
    3b34:	4598      	cmp	r8, r3
    3b36:	d103      	bne.n	3b40 <write_bytes+0x58>
    conn->out_write_pos = 0;
    3b38:	2200      	movs	r2, #0
    3b3a:	51f2      	str	r2, [r6, r7]
    return 0;
    3b3c:	2000      	movs	r0, #0
    3b3e:	e006      	b.n	3b4e <write_bytes+0x66>
  } else {
    send_out_buffer(conn);
    3b40:	1c30      	adds	r0, r6, #0
    3b42:	4b07      	ldr	r3, [pc, #28]	; (3b60 <write_bytes+0x78>)
    3b44:	4798      	blx	r3
    return len - conn->out_write_pos;
    3b46:	23a8      	movs	r3, #168	; 0xa8
    3b48:	009b      	lsls	r3, r3, #2
    3b4a:	58f0      	ldr	r0, [r6, r3]
    3b4c:	1a28      	subs	r0, r5, r0
  }
}
    3b4e:	bc04      	pop	{r2}
    3b50:	4690      	mov	r8, r2
    3b52:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3b54:	00010b2f 	.word	0x00010b2f
    3b58:	00012644 	.word	0x00012644
    3b5c:	00010b79 	.word	0x00010b79
    3b60:	00003a61 	.word	0x00003a61

00003b64 <string_to_mqtt_string>:
                  conn->out_buffer_ptr - conn->out_buffer);
}
/*---------------------------------------------------------------------------*/
static void
string_to_mqtt_string(struct mqtt_string *mqtt_string, char *string)
{
    3b64:	b510      	push	{r4, lr}
  if(mqtt_string == NULL) {
    3b66:	2800      	cmp	r0, #0
    3b68:	d00a      	beq.n	3b80 <string_to_mqtt_string+0x1c>
    return;
  }
  mqtt_string->string = string;
    3b6a:	6001      	str	r1, [r0, #0]

  if(string != NULL) {
    3b6c:	2900      	cmp	r1, #0
    3b6e:	d005      	beq.n	3b7c <string_to_mqtt_string+0x18>
    3b70:	1c04      	adds	r4, r0, #0
    mqtt_string->length = strlen(string);
    3b72:	1c08      	adds	r0, r1, #0
    3b74:	4b03      	ldr	r3, [pc, #12]	; (3b84 <string_to_mqtt_string+0x20>)
    3b76:	4798      	blx	r3
    3b78:	80a0      	strh	r0, [r4, #4]
    3b7a:	e001      	b.n	3b80 <string_to_mqtt_string+0x1c>
  } else {
    mqtt_string->length = 0;
    3b7c:	2300      	movs	r3, #0
    3b7e:	8083      	strh	r3, [r0, #4]
  }
}
    3b80:	bd10      	pop	{r4, pc}
    3b82:	46c0      	nop			; (mov r8, r8)
    3b84:	00010e31 	.word	0x00010e31

00003b88 <mqtt_init>:
  PROCESS_END();
}
/*---------------------------------------------------------------------------*/
void
mqtt_init(void)
{
    3b88:	b510      	push	{r4, lr}
  static uint8_t inited = 0;
  if(!inited) {
    3b8a:	4b19      	ldr	r3, [pc, #100]	; (3bf0 <mqtt_init+0x68>)
    3b8c:	781b      	ldrb	r3, [r3, #0]
    3b8e:	2b00      	cmp	r3, #0
    3b90:	d12c      	bne.n	3bec <mqtt_init+0x64>
    mqtt_do_connect_tcp_event = process_alloc_event();
    3b92:	4c18      	ldr	r4, [pc, #96]	; (3bf4 <mqtt_init+0x6c>)
    3b94:	47a0      	blx	r4
    3b96:	4b18      	ldr	r3, [pc, #96]	; (3bf8 <mqtt_init+0x70>)
    3b98:	7018      	strb	r0, [r3, #0]
    mqtt_event_min = mqtt_do_connect_tcp_event;
    3b9a:	4b18      	ldr	r3, [pc, #96]	; (3bfc <mqtt_init+0x74>)
    3b9c:	7018      	strb	r0, [r3, #0]

    mqtt_do_connect_mqtt_event = process_alloc_event();
    3b9e:	47a0      	blx	r4
    3ba0:	4b17      	ldr	r3, [pc, #92]	; (3c00 <mqtt_init+0x78>)
    3ba2:	7018      	strb	r0, [r3, #0]
    mqtt_do_disconnect_mqtt_event = process_alloc_event();
    3ba4:	47a0      	blx	r4
    3ba6:	4b17      	ldr	r3, [pc, #92]	; (3c04 <mqtt_init+0x7c>)
    3ba8:	7018      	strb	r0, [r3, #0]
    mqtt_do_subscribe_event = process_alloc_event();
    3baa:	47a0      	blx	r4
    3bac:	4b16      	ldr	r3, [pc, #88]	; (3c08 <mqtt_init+0x80>)
    3bae:	7018      	strb	r0, [r3, #0]
    mqtt_do_unsubscribe_event = process_alloc_event();
    3bb0:	47a0      	blx	r4
    3bb2:	4b16      	ldr	r3, [pc, #88]	; (3c0c <mqtt_init+0x84>)
    3bb4:	7018      	strb	r0, [r3, #0]
    mqtt_do_publish_event = process_alloc_event();
    3bb6:	47a0      	blx	r4
    3bb8:	4b15      	ldr	r3, [pc, #84]	; (3c10 <mqtt_init+0x88>)
    3bba:	7018      	strb	r0, [r3, #0]
    mqtt_do_pingreq_event = process_alloc_event();
    3bbc:	47a0      	blx	r4
    3bbe:	4b15      	ldr	r3, [pc, #84]	; (3c14 <mqtt_init+0x8c>)
    3bc0:	7018      	strb	r0, [r3, #0]
    mqtt_update_event = process_alloc_event();
    3bc2:	47a0      	blx	r4
    3bc4:	4b14      	ldr	r3, [pc, #80]	; (3c18 <mqtt_init+0x90>)
    3bc6:	7018      	strb	r0, [r3, #0]
    mqtt_abort_now_event = process_alloc_event();
    3bc8:	47a0      	blx	r4
    3bca:	4b14      	ldr	r3, [pc, #80]	; (3c1c <mqtt_init+0x94>)
    3bcc:	7018      	strb	r0, [r3, #0]
    mqtt_event_max = mqtt_abort_now_event;
    3bce:	4b14      	ldr	r3, [pc, #80]	; (3c20 <mqtt_init+0x98>)
    3bd0:	7018      	strb	r0, [r3, #0]

    mqtt_continue_send_event = process_alloc_event();
    3bd2:	47a0      	blx	r4
    3bd4:	4b13      	ldr	r3, [pc, #76]	; (3c24 <mqtt_init+0x9c>)
    3bd6:	7018      	strb	r0, [r3, #0]

    list_init(mqtt_conn_list);
    3bd8:	4813      	ldr	r0, [pc, #76]	; (3c28 <mqtt_init+0xa0>)
    3bda:	4b14      	ldr	r3, [pc, #80]	; (3c2c <mqtt_init+0xa4>)
    3bdc:	4798      	blx	r3
    process_start(&mqtt_process, NULL);
    3bde:	4814      	ldr	r0, [pc, #80]	; (3c30 <mqtt_init+0xa8>)
    3be0:	2100      	movs	r1, #0
    3be2:	4b14      	ldr	r3, [pc, #80]	; (3c34 <mqtt_init+0xac>)
    3be4:	4798      	blx	r3
    inited = 1;
    3be6:	2201      	movs	r2, #1
    3be8:	4b01      	ldr	r3, [pc, #4]	; (3bf0 <mqtt_init+0x68>)
    3bea:	701a      	strb	r2, [r3, #0]
  }
}
    3bec:	bd10      	pop	{r4, pc}
    3bee:	46c0      	nop			; (mov r8, r8)
    3bf0:	20000386 	.word	0x20000386
    3bf4:	0000eafd 	.word	0x0000eafd
    3bf8:	20000385 	.word	0x20000385
    3bfc:	20000375 	.word	0x20000375
    3c00:	20000377 	.word	0x20000377
    3c04:	2000037a 	.word	0x2000037a
    3c08:	2000037c 	.word	0x2000037c
    3c0c:	20000384 	.word	0x20000384
    3c10:	20000378 	.word	0x20000378
    3c14:	20000374 	.word	0x20000374
    3c18:	20002b54 	.word	0x20002b54
    3c1c:	2000037b 	.word	0x2000037b
    3c20:	20000376 	.word	0x20000376
    3c24:	20000379 	.word	0x20000379
    3c28:	20000388 	.word	0x20000388
    3c2c:	00005711 	.word	0x00005711
    3c30:	2000000c 	.word	0x2000000c
    3c34:	0000ec79 	.word	0x0000ec79

00003c38 <mqtt_register>:
/*---------------------------------------------------------------------------*/
mqtt_status_t
mqtt_register(struct mqtt_connection *conn, struct process *app_process,
              char *client_id, mqtt_event_callback_t event_callback,
              uint16_t max_segment_size)
{
    3c38:	b5f0      	push	{r4, r5, r6, r7, lr}
    3c3a:	b083      	sub	sp, #12
    3c3c:	1c04      	adds	r4, r0, #0
    3c3e:	a808      	add	r0, sp, #32
    3c40:	8806      	ldrh	r6, [r0, #0]
  if(strlen(client_id) < 1) {
    3c42:	7815      	ldrb	r5, [r2, #0]
    return MQTT_STATUS_INVALID_ARGS_ERROR;
    3c44:	2082      	movs	r0, #130	; 0x82
mqtt_status_t
mqtt_register(struct mqtt_connection *conn, struct process *app_process,
              char *client_id, mqtt_event_callback_t event_callback,
              uint16_t max_segment_size)
{
  if(strlen(client_id) < 1) {
    3c46:	2d00      	cmp	r5, #0
    3c48:	d02f      	beq.n	3caa <mqtt_register+0x72>
    3c4a:	1c1f      	adds	r7, r3, #0
    3c4c:	9201      	str	r2, [sp, #4]
    3c4e:	1c0d      	adds	r5, r1, #0
    return MQTT_STATUS_INVALID_ARGS_ERROR;
  }

  /* Set defaults - Set all to zero to begin with */
  memset(conn, 0, sizeof(struct mqtt_connection));
    3c50:	1c20      	adds	r0, r4, #0
    3c52:	2100      	movs	r1, #0
    3c54:	22ec      	movs	r2, #236	; 0xec
    3c56:	00d2      	lsls	r2, r2, #3
    3c58:	4b15      	ldr	r3, [pc, #84]	; (3cb0 <mqtt_register+0x78>)
    3c5a:	4798      	blx	r3
  string_to_mqtt_string(&conn->client_id, client_id);
    3c5c:	1c20      	adds	r0, r4, #0
    3c5e:	300c      	adds	r0, #12
    3c60:	9901      	ldr	r1, [sp, #4]
    3c62:	4b14      	ldr	r3, [pc, #80]	; (3cb4 <mqtt_register+0x7c>)
    3c64:	4798      	blx	r3
  conn->event_callback = event_callback;
    3c66:	6667      	str	r7, [r4, #100]	; 0x64
  conn->app_process = app_process;
    3c68:	66e5      	str	r5, [r4, #108]	; 0x6c
  conn->auto_reconnect = 1;
    3c6a:	2301      	movs	r3, #1
    3c6c:	7563      	strb	r3, [r4, #21]
  conn->max_segment_size = max_segment_size;
    3c6e:	22a9      	movs	r2, #169	; 0xa9
    3c70:	0092      	lsls	r2, r2, #2
    3c72:	52a6      	strh	r6, [r4, r2]
}
/*---------------------------------------------------------------------------*/
static void
reset_defaults(struct mqtt_connection *conn)
{
  conn->mid_counter = 1;
    3c74:	2268      	movs	r2, #104	; 0x68
    3c76:	52a3      	strh	r3, [r4, r2]
  PT_INIT(&conn->out_proto_thread);
    3c78:	2200      	movs	r2, #0
    3c7a:	23a7      	movs	r3, #167	; 0xa7
    3c7c:	009b      	lsls	r3, r3, #2
    3c7e:	52e2      	strh	r2, [r4, r3]
  conn->waiting_for_pingresp = 0;
    3c80:	2338      	movs	r3, #56	; 0x38
    3c82:	54e2      	strb	r2, [r4, r3]

  reset_packet(&conn->in_packet);
    3c84:	2395      	movs	r3, #149	; 0x95
    3c86:	00db      	lsls	r3, r3, #3
    3c88:	18e0      	adds	r0, r4, r3
    3c8a:	4b0b      	ldr	r3, [pc, #44]	; (3cb8 <mqtt_register+0x80>)
    3c8c:	4798      	blx	r3
  conn->out_buffer_sent = 0;
    3c8e:	239d      	movs	r3, #157	; 0x9d
    3c90:	009b      	lsls	r3, r3, #2
    3c92:	2200      	movs	r2, #0
    3c94:	54e2      	strb	r2, [r4, r3]
  conn->app_process = app_process;
  conn->auto_reconnect = 1;
  conn->max_segment_size = max_segment_size;
  reset_defaults(conn);

  mqtt_init();
    3c96:	4b09      	ldr	r3, [pc, #36]	; (3cbc <mqtt_register+0x84>)
    3c98:	4798      	blx	r3
  list_add(mqtt_conn_list, conn);
    3c9a:	4809      	ldr	r0, [pc, #36]	; (3cc0 <mqtt_register+0x88>)
    3c9c:	1c21      	adds	r1, r4, #0
    3c9e:	4b09      	ldr	r3, [pc, #36]	; (3cc4 <mqtt_register+0x8c>)
    3ca0:	4798      	blx	r3

  DBG("MQTT - Registered successfully\n\r");
    3ca2:	4809      	ldr	r0, [pc, #36]	; (3cc8 <mqtt_register+0x90>)
    3ca4:	4b09      	ldr	r3, [pc, #36]	; (3ccc <mqtt_register+0x94>)
    3ca6:	4798      	blx	r3

  return MQTT_STATUS_OK;
    3ca8:	2000      	movs	r0, #0
}
    3caa:	b003      	add	sp, #12
    3cac:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3cae:	46c0      	nop			; (mov r8, r8)
    3cb0:	00010b69 	.word	0x00010b69
    3cb4:	00003b65 	.word	0x00003b65
    3cb8:	00003295 	.word	0x00003295
    3cbc:	00003b89 	.word	0x00003b89
    3cc0:	20000388 	.word	0x20000388
    3cc4:	00005769 	.word	0x00005769
    3cc8:	00012674 	.word	0x00012674
    3ccc:	00010b79 	.word	0x00010b79

00003cd0 <mqtt_connect>:
 * N.B. Non-blocking call.
 */
mqtt_status_t
mqtt_connect(struct mqtt_connection *conn, char *host, uint16_t port,
             uint16_t keep_alive)
{
    3cd0:	b530      	push	{r4, r5, lr}
    3cd2:	b085      	sub	sp, #20
    3cd4:	1c04      	adds	r4, r0, #0
  uip_ip6addr_t ip6addr;
  uip_ipaddr_t *ipaddr;
  ipaddr = &ip6addr;

  /* Check if we are already trying to connect */
  if(conn->state > MQTT_CONN_STATE_NOT_CONNECTED) {
    3cd6:	2560      	movs	r5, #96	; 0x60
    3cd8:	5d45      	ldrb	r5, [r0, r5]
    3cda:	2d03      	cmp	r5, #3
    3cdc:	d821      	bhi.n	3d22 <mqtt_connect+0x52>
    return MQTT_STATUS_OK;
  }

  conn->server_host = host;
    3cde:	4812      	ldr	r0, [pc, #72]	; (3d28 <mqtt_connect+0x58>)
    3ce0:	5021      	str	r1, [r4, r0]
  conn->keep_alive = keep_alive;
    3ce2:	82e3      	strh	r3, [r4, #22]
  conn->server_port = port;
    3ce4:	23e5      	movs	r3, #229	; 0xe5
    3ce6:	00db      	lsls	r3, r3, #3
    3ce8:	52e2      	strh	r2, [r4, r3]
  conn->out_buffer_ptr = conn->out_buffer;
    3cea:	1c23      	adds	r3, r4, #0
    3cec:	3374      	adds	r3, #116	; 0x74
    3cee:	6723      	str	r3, [r4, #112]	; 0x70
  conn->out_packet.qos_state = MQTT_QOS_STATE_GOT_ACK;
    3cf0:	2201      	movs	r2, #1
    3cf2:	4b0e      	ldr	r3, [pc, #56]	; (3d2c <mqtt_connect+0x5c>)
    3cf4:	54e2      	strb	r2, [r4, r3]
  conn->connect_vhdr_flags |= MQTT_VHDR_CLEAN_SESSION_FLAG;
    3cf6:	7d22      	ldrb	r2, [r4, #20]
    3cf8:	2302      	movs	r3, #2
    3cfa:	4313      	orrs	r3, r2
    3cfc:	7523      	strb	r3, [r4, #20]

  /* convert the string IPv6 address to a numeric IPv6 address */
  uiplib_ip6addrconv(host, &ip6addr);
    3cfe:	466d      	mov	r5, sp
    3d00:	1c08      	adds	r0, r1, #0
    3d02:	4669      	mov	r1, sp
    3d04:	4b0a      	ldr	r3, [pc, #40]	; (3d30 <mqtt_connect+0x60>)
    3d06:	4798      	blx	r3

  uip_ipaddr_copy(&(conn->server_ip), ipaddr);
    3d08:	23e3      	movs	r3, #227	; 0xe3
    3d0a:	00db      	lsls	r3, r3, #3
    3d0c:	18e3      	adds	r3, r4, r3
    3d0e:	cd07      	ldmia	r5!, {r0, r1, r2}
    3d10:	c307      	stmia	r3!, {r0, r1, r2}
    3d12:	682a      	ldr	r2, [r5, #0]
    3d14:	601a      	str	r2, [r3, #0]
  /*
   * Initiate the connection if the IP could be resolved. Otherwise the
   * connection will be initiated when the DNS lookup is finished, in the main
   * event loop.
   */
  process_post(&mqtt_process, mqtt_do_connect_tcp_event, conn);
    3d16:	4b07      	ldr	r3, [pc, #28]	; (3d34 <mqtt_connect+0x64>)
    3d18:	7819      	ldrb	r1, [r3, #0]
    3d1a:	4807      	ldr	r0, [pc, #28]	; (3d38 <mqtt_connect+0x68>)
    3d1c:	1c22      	adds	r2, r4, #0
    3d1e:	4b07      	ldr	r3, [pc, #28]	; (3d3c <mqtt_connect+0x6c>)
    3d20:	4798      	blx	r3

  return MQTT_STATUS_OK;
}
    3d22:	2000      	movs	r0, #0
    3d24:	b005      	add	sp, #20
    3d26:	bd30      	pop	{r4, r5, pc}
    3d28:	00000714 	.word	0x00000714
    3d2c:	00000299 	.word	0x00000299
    3d30:	0000ab89 	.word	0x0000ab89
    3d34:	20000385 	.word	0x20000385
    3d38:	2000000c 	.word	0x2000000c
    3d3c:	0000ec09 	.word	0x0000ec09

00003d40 <mqtt_disconnect>:
/*----------------------------------------------------------------------------*/
void
mqtt_disconnect(struct mqtt_connection *conn)
{
    3d40:	b508      	push	{r3, lr}
  if(conn->state != MQTT_CONN_STATE_CONNECTED_TO_BROKER) {
    3d42:	2360      	movs	r3, #96	; 0x60
    3d44:	5cc3      	ldrb	r3, [r0, r3]
    3d46:	2b08      	cmp	r3, #8
    3d48:	d108      	bne.n	3d5c <mqtt_disconnect+0x1c>
    3d4a:	1c02      	adds	r2, r0, #0
    return;
  }

  conn->state = MQTT_CONN_STATE_SENDING_MQTT_DISCONNECT;
    3d4c:	2109      	movs	r1, #9
    3d4e:	3358      	adds	r3, #88	; 0x58
    3d50:	54c1      	strb	r1, [r0, r3]

  process_post(&mqtt_process, mqtt_do_disconnect_mqtt_event, conn);
    3d52:	4b03      	ldr	r3, [pc, #12]	; (3d60 <mqtt_disconnect+0x20>)
    3d54:	7819      	ldrb	r1, [r3, #0]
    3d56:	4803      	ldr	r0, [pc, #12]	; (3d64 <mqtt_disconnect+0x24>)
    3d58:	4b03      	ldr	r3, [pc, #12]	; (3d68 <mqtt_disconnect+0x28>)
    3d5a:	4798      	blx	r3
}
    3d5c:	bd08      	pop	{r3, pc}
    3d5e:	46c0      	nop			; (mov r8, r8)
    3d60:	2000037a 	.word	0x2000037a
    3d64:	2000000c 	.word	0x2000000c
    3d68:	0000ec09 	.word	0x0000ec09

00003d6c <process_thread_mqtt_process>:
  }
  }
}
/*---------------------------------------------------------------------------*/
PROCESS_THREAD(mqtt_process, ev, data)
{
    3d6c:	b5f0      	push	{r4, r5, r6, r7, lr}
    3d6e:	4657      	mov	r7, sl
    3d70:	464e      	mov	r6, r9
    3d72:	4645      	mov	r5, r8
    3d74:	b4e0      	push	{r5, r6, r7}
    3d76:	b084      	sub	sp, #16
    3d78:	1c04      	adds	r4, r0, #0
    3d7a:	1c15      	adds	r5, r2, #0
    3d7c:	230f      	movs	r3, #15
    3d7e:	446b      	add	r3, sp
    3d80:	7019      	strb	r1, [r3, #0]
  static struct mqtt_connection *conn;

  PROCESS_BEGIN();
    3d82:	8803      	ldrh	r3, [r0, #0]
    3d84:	4ac5      	ldr	r2, [pc, #788]	; (409c <process_thread_mqtt_process+0x330>)
    3d86:	4293      	cmp	r3, r2
    3d88:	d101      	bne.n	3d8e <process_thread_mqtt_process+0x22>
    3d8a:	f000 fc0e 	bl	45aa <process_thread_mqtt_process+0x83e>
    3d8e:	d80a      	bhi.n	3da6 <process_thread_mqtt_process+0x3a>
    3d90:	4ac3      	ldr	r2, [pc, #780]	; (40a0 <process_thread_mqtt_process+0x334>)
    3d92:	4293      	cmp	r3, r2
    3d94:	d025      	beq.n	3de2 <process_thread_mqtt_process+0x76>
    3d96:	4ac3      	ldr	r2, [pc, #780]	; (40a4 <process_thread_mqtt_process+0x338>)
    3d98:	4293      	cmp	r3, r2
    3d9a:	d06d      	beq.n	3e78 <process_thread_mqtt_process+0x10c>
    3d9c:	2b00      	cmp	r3, #0
    3d9e:	d001      	beq.n	3da4 <process_thread_mqtt_process+0x38>
    3da0:	f001 fad1 	bl	5346 <process_thread_mqtt_process+0x15da>
    3da4:	e018      	b.n	3dd8 <process_thread_mqtt_process+0x6c>
    3da6:	4ac0      	ldr	r2, [pc, #768]	; (40a8 <process_thread_mqtt_process+0x33c>)
    3da8:	4293      	cmp	r3, r2
    3daa:	d101      	bne.n	3db0 <process_thread_mqtt_process+0x44>
    3dac:	f000 fda5 	bl	48fa <process_thread_mqtt_process+0xb8e>
    3db0:	d806      	bhi.n	3dc0 <process_thread_mqtt_process+0x54>
    3db2:	4abe      	ldr	r2, [pc, #760]	; (40ac <process_thread_mqtt_process+0x340>)
    3db4:	4293      	cmp	r3, r2
    3db6:	d101      	bne.n	3dbc <process_thread_mqtt_process+0x50>
    3db8:	f000 fca9 	bl	470e <process_thread_mqtt_process+0x9a2>
    3dbc:	f001 fac3 	bl	5346 <process_thread_mqtt_process+0x15da>
    3dc0:	4abb      	ldr	r2, [pc, #748]	; (40b0 <process_thread_mqtt_process+0x344>)
    3dc2:	4293      	cmp	r3, r2
    3dc4:	d101      	bne.n	3dca <process_thread_mqtt_process+0x5e>
    3dc6:	f000 ff51 	bl	4c6c <process_thread_mqtt_process+0xf00>
    3dca:	4aba      	ldr	r2, [pc, #744]	; (40b4 <process_thread_mqtt_process+0x348>)
    3dcc:	4293      	cmp	r3, r2
    3dce:	d101      	bne.n	3dd4 <process_thread_mqtt_process+0x68>
    3dd0:	f001 f8eb 	bl	4faa <process_thread_mqtt_process+0x123e>
    3dd4:	f001 fab7 	bl	5346 <process_thread_mqtt_process+0x15da>

  while(1) {
    PROCESS_WAIT_EVENT();
    3dd8:	4bb1      	ldr	r3, [pc, #708]	; (40a0 <process_thread_mqtt_process+0x334>)
    3dda:	8023      	strh	r3, [r4, #0]
    3ddc:	2001      	movs	r0, #1
    3dde:	f001 faee 	bl	53be <process_thread_mqtt_process+0x1652>

    if(ev == mqtt_abort_now_event) {
    3de2:	230f      	movs	r3, #15
    3de4:	446b      	add	r3, sp
    3de6:	781a      	ldrb	r2, [r3, #0]
    3de8:	4bb3      	ldr	r3, [pc, #716]	; (40b8 <process_thread_mqtt_process+0x34c>)
    3dea:	781b      	ldrb	r3, [r3, #0]
    3dec:	429a      	cmp	r2, r3
    3dee:	d10a      	bne.n	3e06 <process_thread_mqtt_process+0x9a>
      DBG("MQTT - Abort\n\r");
    3df0:	48b2      	ldr	r0, [pc, #712]	; (40bc <process_thread_mqtt_process+0x350>)
    3df2:	4bb3      	ldr	r3, [pc, #716]	; (40c0 <process_thread_mqtt_process+0x354>)
    3df4:	4798      	blx	r3
      conn = data;
    3df6:	4bb3      	ldr	r3, [pc, #716]	; (40c4 <process_thread_mqtt_process+0x358>)
    3df8:	601d      	str	r5, [r3, #0]
      conn->state = MQTT_CONN_STATE_ABORT_IMMEDIATE;
    3dfa:	220a      	movs	r2, #10
    3dfc:	2360      	movs	r3, #96	; 0x60
    3dfe:	54ea      	strb	r2, [r5, r3]

      abort_connection(conn);
    3e00:	1c28      	adds	r0, r5, #0
    3e02:	4bb1      	ldr	r3, [pc, #708]	; (40c8 <process_thread_mqtt_process+0x35c>)
    3e04:	4798      	blx	r3
    }
    if(ev == mqtt_do_connect_tcp_event) {
    3e06:	230f      	movs	r3, #15
    3e08:	446b      	add	r3, sp
    3e0a:	781a      	ldrb	r2, [r3, #0]
    3e0c:	4baf      	ldr	r3, [pc, #700]	; (40cc <process_thread_mqtt_process+0x360>)
    3e0e:	781b      	ldrb	r3, [r3, #0]
    3e10:	429a      	cmp	r2, r3
    3e12:	d107      	bne.n	3e24 <process_thread_mqtt_process+0xb8>
      conn = data;
    3e14:	4eab      	ldr	r6, [pc, #684]	; (40c4 <process_thread_mqtt_process+0x358>)
    3e16:	6035      	str	r5, [r6, #0]
      DBG("MQTT - Got mqtt_do_connect_tcp_event!\n\r");
    3e18:	48ad      	ldr	r0, [pc, #692]	; (40d0 <process_thread_mqtt_process+0x364>)
    3e1a:	4ba9      	ldr	r3, [pc, #676]	; (40c0 <process_thread_mqtt_process+0x354>)
    3e1c:	4798      	blx	r3
      connect_tcp(conn);
    3e1e:	6830      	ldr	r0, [r6, #0]
    3e20:	4bac      	ldr	r3, [pc, #688]	; (40d4 <process_thread_mqtt_process+0x368>)
    3e22:	4798      	blx	r3
    }
    if(ev == mqtt_do_connect_mqtt_event) {
    3e24:	230f      	movs	r3, #15
    3e26:	446b      	add	r3, sp
    3e28:	781a      	ldrb	r2, [r3, #0]
    3e2a:	4bab      	ldr	r3, [pc, #684]	; (40d8 <process_thread_mqtt_process+0x36c>)
    3e2c:	781b      	ldrb	r3, [r3, #0]
    3e2e:	429a      	cmp	r2, r3
    3e30:	d000      	beq.n	3e34 <process_thread_mqtt_process+0xc8>
    3e32:	e390      	b.n	4556 <process_thread_mqtt_process+0x7ea>
      conn = data;
    3e34:	4ea3      	ldr	r6, [pc, #652]	; (40c4 <process_thread_mqtt_process+0x358>)
    3e36:	6035      	str	r5, [r6, #0]
      conn->socket.output_data_max_seg = conn->max_segment_size;
    3e38:	23a9      	movs	r3, #169	; 0xa9
    3e3a:	009b      	lsls	r3, r3, #2
    3e3c:	5aea      	ldrh	r2, [r5, r3]
    3e3e:	4ba7      	ldr	r3, [pc, #668]	; (40dc <process_thread_mqtt_process+0x370>)
    3e40:	52ea      	strh	r2, [r5, r3]
      DBG("MQTT - Got mqtt_do_connect_mqtt_event!\n\r");
    3e42:	48a7      	ldr	r0, [pc, #668]	; (40e0 <process_thread_mqtt_process+0x374>)
    3e44:	4b9e      	ldr	r3, [pc, #632]	; (40c0 <process_thread_mqtt_process+0x354>)
    3e46:	4798      	blx	r3

      if(conn->out_buffer_sent == 1) {
    3e48:	6833      	ldr	r3, [r6, #0]
    3e4a:	229d      	movs	r2, #157	; 0x9d
    3e4c:	0092      	lsls	r2, r2, #2
    3e4e:	5c9a      	ldrb	r2, [r3, r2]
    3e50:	2a01      	cmp	r2, #1
    3e52:	d000      	beq.n	3e56 <process_thread_mqtt_process+0xea>
    3e54:	e37f      	b.n	4556 <process_thread_mqtt_process+0x7ea>
        PT_INIT(&conn->out_proto_thread);
    3e56:	2100      	movs	r1, #0
    3e58:	22a7      	movs	r2, #167	; 0xa7
    3e5a:	0092      	lsls	r2, r2, #2
    3e5c:	5299      	strh	r1, [r3, r2]
        while(connect_pt(&conn->out_proto_thread, conn) < PT_EXITED &&
    3e5e:	e02b      	b.n	3eb8 <process_thread_mqtt_process+0x14c>
              conn->state != MQTT_CONN_STATE_ABORT_IMMEDIATE) {
          PT_MQTT_WAIT_SEND();
    3e60:	4ba0      	ldr	r3, [pc, #640]	; (40e4 <process_thread_mqtt_process+0x378>)
    3e62:	7819      	ldrb	r1, [r3, #0]
    3e64:	4ba0      	ldr	r3, [pc, #640]	; (40e8 <process_thread_mqtt_process+0x37c>)
    3e66:	6818      	ldr	r0, [r3, #0]
    3e68:	2200      	movs	r2, #0
    3e6a:	4ba0      	ldr	r3, [pc, #640]	; (40ec <process_thread_mqtt_process+0x380>)
    3e6c:	4798      	blx	r3
    3e6e:	4b8d      	ldr	r3, [pc, #564]	; (40a4 <process_thread_mqtt_process+0x338>)
    3e70:	8023      	strh	r3, [r4, #0]
    3e72:	2001      	movs	r0, #1
    3e74:	f001 faa3 	bl	53be <process_thread_mqtt_process+0x1652>
    3e78:	230f      	movs	r3, #15
    3e7a:	446b      	add	r3, sp
    3e7c:	7819      	ldrb	r1, [r3, #0]
    3e7e:	4b8e      	ldr	r3, [pc, #568]	; (40b8 <process_thread_mqtt_process+0x34c>)
    3e80:	781b      	ldrb	r3, [r3, #0]
    3e82:	428b      	cmp	r3, r1
    3e84:	d10b      	bne.n	3e9e <process_thread_mqtt_process+0x132>
    3e86:	4b8f      	ldr	r3, [pc, #572]	; (40c4 <process_thread_mqtt_process+0x358>)
    3e88:	681b      	ldr	r3, [r3, #0]
    3e8a:	210a      	movs	r1, #10
    3e8c:	2260      	movs	r2, #96	; 0x60
    3e8e:	5499      	strb	r1, [r3, r2]
    3e90:	2100      	movs	r1, #0
    3e92:	22a7      	movs	r2, #167	; 0xa7
    3e94:	0092      	lsls	r2, r2, #2
    3e96:	5299      	strh	r1, [r3, r2]
    3e98:	2002      	movs	r0, #2
    3e9a:	f001 fa90 	bl	53be <process_thread_mqtt_process+0x1652>
    3e9e:	4b94      	ldr	r3, [pc, #592]	; (40f0 <process_thread_mqtt_process+0x384>)
    3ea0:	781b      	ldrb	r3, [r3, #0]
    3ea2:	428b      	cmp	r3, r1
    3ea4:	d808      	bhi.n	3eb8 <process_thread_mqtt_process+0x14c>
    3ea6:	4b93      	ldr	r3, [pc, #588]	; (40f4 <process_thread_mqtt_process+0x388>)
    3ea8:	781b      	ldrb	r3, [r3, #0]
    3eaa:	428b      	cmp	r3, r1
    3eac:	d304      	bcc.n	3eb8 <process_thread_mqtt_process+0x14c>
    3eae:	4b8e      	ldr	r3, [pc, #568]	; (40e8 <process_thread_mqtt_process+0x37c>)
    3eb0:	6818      	ldr	r0, [r3, #0]
    3eb2:	1c2a      	adds	r2, r5, #0
    3eb4:	4b8d      	ldr	r3, [pc, #564]	; (40ec <process_thread_mqtt_process+0x380>)
    3eb6:	4798      	blx	r3
      conn->socket.output_data_max_seg = conn->max_segment_size;
      DBG("MQTT - Got mqtt_do_connect_mqtt_event!\n\r");

      if(conn->out_buffer_sent == 1) {
        PT_INIT(&conn->out_proto_thread);
        while(connect_pt(&conn->out_proto_thread, conn) < PT_EXITED &&
    3eb8:	4b82      	ldr	r3, [pc, #520]	; (40c4 <process_thread_mqtt_process+0x358>)
    3eba:	681e      	ldr	r6, [r3, #0]
}
/*---------------------------------------------------------------------------*/
static
PT_THREAD(connect_pt(struct pt *pt, struct mqtt_connection *conn))
{
  PT_BEGIN(pt);
    3ebc:	23a7      	movs	r3, #167	; 0xa7
    3ebe:	009b      	lsls	r3, r3, #2
    3ec0:	5af3      	ldrh	r3, [r6, r3]
    3ec2:	2276      	movs	r2, #118	; 0x76
    3ec4:	32ff      	adds	r2, #255	; 0xff
    3ec6:	4293      	cmp	r3, r2
    3ec8:	d100      	bne.n	3ecc <process_thread_mqtt_process+0x160>
    3eca:	e1d1      	b.n	4270 <process_thread_mqtt_process+0x504>
    3ecc:	d839      	bhi.n	3f42 <process_thread_mqtt_process+0x1d6>
    3ece:	226e      	movs	r2, #110	; 0x6e
    3ed0:	32ff      	adds	r2, #255	; 0xff
    3ed2:	4293      	cmp	r3, r2
    3ed4:	d100      	bne.n	3ed8 <process_thread_mqtt_process+0x16c>
    3ed6:	e144      	b.n	4162 <process_thread_mqtt_process+0x3f6>
    3ed8:	d816      	bhi.n	3f08 <process_thread_mqtt_process+0x19c>
    3eda:	3a03      	subs	r2, #3
    3edc:	4293      	cmp	r3, r2
    3ede:	d100      	bne.n	3ee2 <process_thread_mqtt_process+0x176>
    3ee0:	e0ca      	b.n	4078 <process_thread_mqtt_process+0x30c>
    3ee2:	d807      	bhi.n	3ef4 <process_thread_mqtt_process+0x188>
    3ee4:	2b00      	cmp	r3, #0
    3ee6:	d06c      	beq.n	3fc2 <process_thread_mqtt_process+0x256>
    3ee8:	2268      	movs	r2, #104	; 0x68
    3eea:	32ff      	adds	r2, #255	; 0xff
    3eec:	4293      	cmp	r3, r2
    3eee:	d100      	bne.n	3ef2 <process_thread_mqtt_process+0x186>
    3ef0:	e0ad      	b.n	404e <process_thread_mqtt_process+0x2e2>
    3ef2:	e32c      	b.n	454e <process_thread_mqtt_process+0x7e2>
    3ef4:	226c      	movs	r2, #108	; 0x6c
    3ef6:	32ff      	adds	r2, #255	; 0xff
    3ef8:	4293      	cmp	r3, r2
    3efa:	d100      	bne.n	3efe <process_thread_mqtt_process+0x192>
    3efc:	e10b      	b.n	4116 <process_thread_mqtt_process+0x3aa>
    3efe:	3201      	adds	r2, #1
    3f00:	4293      	cmp	r3, r2
    3f02:	d100      	bne.n	3f06 <process_thread_mqtt_process+0x19a>
    3f04:	e11a      	b.n	413c <process_thread_mqtt_process+0x3d0>
    3f06:	e322      	b.n	454e <process_thread_mqtt_process+0x7e2>
    3f08:	22b8      	movs	r2, #184	; 0xb8
    3f0a:	0052      	lsls	r2, r2, #1
    3f0c:	4293      	cmp	r3, r2
    3f0e:	d100      	bne.n	3f12 <process_thread_mqtt_process+0x1a6>
    3f10:	e161      	b.n	41d6 <process_thread_mqtt_process+0x46a>
    3f12:	d809      	bhi.n	3f28 <process_thread_mqtt_process+0x1bc>
    3f14:	3a02      	subs	r2, #2
    3f16:	4293      	cmp	r3, r2
    3f18:	d100      	bne.n	3f1c <process_thread_mqtt_process+0x1b0>
    3f1a:	e136      	b.n	418a <process_thread_mqtt_process+0x41e>
    3f1c:	2270      	movs	r2, #112	; 0x70
    3f1e:	32ff      	adds	r2, #255	; 0xff
    3f20:	4293      	cmp	r3, r2
    3f22:	d100      	bne.n	3f26 <process_thread_mqtt_process+0x1ba>
    3f24:	e144      	b.n	41b0 <process_thread_mqtt_process+0x444>
    3f26:	e312      	b.n	454e <process_thread_mqtt_process+0x7e2>
    3f28:	22b9      	movs	r2, #185	; 0xb9
    3f2a:	0052      	lsls	r2, r2, #1
    3f2c:	4293      	cmp	r3, r2
    3f2e:	d100      	bne.n	3f32 <process_thread_mqtt_process+0x1c6>
    3f30:	e178      	b.n	4224 <process_thread_mqtt_process+0x4b8>
    3f32:	d200      	bcs.n	3f36 <process_thread_mqtt_process+0x1ca>
    3f34:	e163      	b.n	41fe <process_thread_mqtt_process+0x492>
    3f36:	2274      	movs	r2, #116	; 0x74
    3f38:	32ff      	adds	r2, #255	; 0xff
    3f3a:	4293      	cmp	r3, r2
    3f3c:	d100      	bne.n	3f40 <process_thread_mqtt_process+0x1d4>
    3f3e:	e184      	b.n	424a <process_thread_mqtt_process+0x4de>
    3f40:	e305      	b.n	454e <process_thread_mqtt_process+0x7e2>
    3f42:	22c3      	movs	r2, #195	; 0xc3
    3f44:	0052      	lsls	r2, r2, #1
    3f46:	4293      	cmp	r3, r2
    3f48:	d100      	bne.n	3f4c <process_thread_mqtt_process+0x1e0>
    3f4a:	e22d      	b.n	43a8 <process_thread_mqtt_process+0x63c>
    3f4c:	d81a      	bhi.n	3f84 <process_thread_mqtt_process+0x218>
    3f4e:	3a0c      	subs	r2, #12
    3f50:	4293      	cmp	r3, r2
    3f52:	d100      	bne.n	3f56 <process_thread_mqtt_process+0x1ea>
    3f54:	e1ca      	b.n	42ec <process_thread_mqtt_process+0x580>
    3f56:	d809      	bhi.n	3f6c <process_thread_mqtt_process+0x200>
    3f58:	2278      	movs	r2, #120	; 0x78
    3f5a:	32ff      	adds	r2, #255	; 0xff
    3f5c:	4293      	cmp	r3, r2
    3f5e:	d100      	bne.n	3f62 <process_thread_mqtt_process+0x1f6>
    3f60:	e19d      	b.n	429e <process_thread_mqtt_process+0x532>
    3f62:	3201      	adds	r2, #1
    3f64:	4293      	cmp	r3, r2
    3f66:	d100      	bne.n	3f6a <process_thread_mqtt_process+0x1fe>
    3f68:	e1ac      	b.n	42c4 <process_thread_mqtt_process+0x558>
    3f6a:	e2f0      	b.n	454e <process_thread_mqtt_process+0x7e2>
    3f6c:	22be      	movs	r2, #190	; 0xbe
    3f6e:	0052      	lsls	r2, r2, #1
    3f70:	4293      	cmp	r3, r2
    3f72:	d100      	bne.n	3f76 <process_thread_mqtt_process+0x20a>
    3f74:	e1e2      	b.n	433c <process_thread_mqtt_process+0x5d0>
    3f76:	d200      	bcs.n	3f7a <process_thread_mqtt_process+0x20e>
    3f78:	e1cd      	b.n	4316 <process_thread_mqtt_process+0x5aa>
    3f7a:	3202      	adds	r2, #2
    3f7c:	4293      	cmp	r3, r2
    3f7e:	d100      	bne.n	3f82 <process_thread_mqtt_process+0x216>
    3f80:	e1f0      	b.n	4364 <process_thread_mqtt_process+0x5f8>
    3f82:	e2e4      	b.n	454e <process_thread_mqtt_process+0x7e2>
    3f84:	228e      	movs	r2, #142	; 0x8e
    3f86:	32ff      	adds	r2, #255	; 0xff
    3f88:	4293      	cmp	r3, r2
    3f8a:	d100      	bne.n	3f8e <process_thread_mqtt_process+0x222>
    3f8c:	e24b      	b.n	4426 <process_thread_mqtt_process+0x6ba>
    3f8e:	d809      	bhi.n	3fa4 <process_thread_mqtt_process+0x238>
    3f90:	2288      	movs	r2, #136	; 0x88
    3f92:	32ff      	adds	r2, #255	; 0xff
    3f94:	4293      	cmp	r3, r2
    3f96:	d100      	bne.n	3f9a <process_thread_mqtt_process+0x22e>
    3f98:	e219      	b.n	43ce <process_thread_mqtt_process+0x662>
    3f9a:	3203      	adds	r2, #3
    3f9c:	4293      	cmp	r3, r2
    3f9e:	d100      	bne.n	3fa2 <process_thread_mqtt_process+0x236>
    3fa0:	e229      	b.n	43f6 <process_thread_mqtt_process+0x68a>
    3fa2:	e2d4      	b.n	454e <process_thread_mqtt_process+0x7e2>
    3fa4:	2292      	movs	r2, #146	; 0x92
    3fa6:	32ff      	adds	r2, #255	; 0xff
    3fa8:	4293      	cmp	r3, r2
    3faa:	d100      	bne.n	3fae <process_thread_mqtt_process+0x242>
    3fac:	e26d      	b.n	448a <process_thread_mqtt_process+0x71e>
    3fae:	229e      	movs	r2, #158	; 0x9e
    3fb0:	32ff      	adds	r2, #255	; 0xff
    3fb2:	4293      	cmp	r3, r2
    3fb4:	d100      	bne.n	3fb8 <process_thread_mqtt_process+0x24c>
    3fb6:	e28c      	b.n	44d2 <process_thread_mqtt_process+0x766>
    3fb8:	3a0f      	subs	r2, #15
    3fba:	4293      	cmp	r3, r2
    3fbc:	d000      	beq.n	3fc0 <process_thread_mqtt_process+0x254>
    3fbe:	e2c6      	b.n	454e <process_thread_mqtt_process+0x7e2>
    3fc0:	e244      	b.n	444c <process_thread_mqtt_process+0x6e0>

  DBG("MQTT - Sending CONNECT message...\n\r");
    3fc2:	484d      	ldr	r0, [pc, #308]	; (40f8 <process_thread_mqtt_process+0x38c>)
    3fc4:	4b3e      	ldr	r3, [pc, #248]	; (40c0 <process_thread_mqtt_process+0x354>)
    3fc6:	4798      	blx	r3

  /* Set up FHDR */
  conn->out_packet.fhdr = MQTT_FHDR_MSG_TYPE_CONNECT;
    3fc8:	2210      	movs	r2, #16
    3fca:	239e      	movs	r3, #158	; 0x9e
    3fcc:	009b      	lsls	r3, r3, #2
    3fce:	54f2      	strb	r2, [r6, r3]
  conn->out_packet.remaining_length = 0;
  conn->out_packet.remaining_length += MQTT_CONNECT_VHDR_FLAGS_SIZE;
  conn->out_packet.remaining_length += MQTT_STRING_LENGTH(&conn->client_id);
    3fd0:	8a33      	ldrh	r3, [r6, #16]
    3fd2:	2200      	movs	r2, #0
    3fd4:	4293      	cmp	r3, r2
    3fd6:	d000      	beq.n	3fda <process_thread_mqtt_process+0x26e>
    3fd8:	1c9a      	adds	r2, r3, #2
    3fda:	320c      	adds	r2, #12
  conn->out_packet.remaining_length += MQTT_STRING_LENGTH(&conn->credentials.username);
    3fdc:	2354      	movs	r3, #84	; 0x54
    3fde:	5af1      	ldrh	r1, [r6, r3]
    3fe0:	2300      	movs	r3, #0
    3fe2:	4299      	cmp	r1, r3
    3fe4:	d000      	beq.n	3fe8 <process_thread_mqtt_process+0x27c>
    3fe6:	1c8b      	adds	r3, r1, #2
    3fe8:	18d2      	adds	r2, r2, r3
  conn->out_packet.remaining_length += MQTT_STRING_LENGTH(&conn->credentials.password);
    3fea:	235c      	movs	r3, #92	; 0x5c
    3fec:	5af1      	ldrh	r1, [r6, r3]
    3fee:	2300      	movs	r3, #0
    3ff0:	4299      	cmp	r1, r3
    3ff2:	d000      	beq.n	3ff6 <process_thread_mqtt_process+0x28a>
    3ff4:	1c8b      	adds	r3, r1, #2
    3ff6:	18d2      	adds	r2, r2, r3
  conn->out_packet.remaining_length += MQTT_STRING_LENGTH(&conn->will.topic);
    3ff8:	2340      	movs	r3, #64	; 0x40
    3ffa:	5af1      	ldrh	r1, [r6, r3]
    3ffc:	2300      	movs	r3, #0
    3ffe:	4299      	cmp	r1, r3
    4000:	d000      	beq.n	4004 <process_thread_mqtt_process+0x298>
    4002:	1c8b      	adds	r3, r1, #2
    4004:	18d2      	adds	r2, r2, r3
  conn->out_packet.remaining_length += MQTT_STRING_LENGTH(&conn->will.message);
    4006:	2348      	movs	r3, #72	; 0x48
    4008:	5af1      	ldrh	r1, [r6, r3]
    400a:	2300      	movs	r3, #0
    400c:	4299      	cmp	r1, r3
    400e:	d000      	beq.n	4012 <process_thread_mqtt_process+0x2a6>
    4010:	1c8b      	adds	r3, r1, #2
    4012:	18d2      	adds	r2, r2, r3
    4014:	239f      	movs	r3, #159	; 0x9f
    4016:	009b      	lsls	r3, r3, #2
    4018:	50f2      	str	r2, [r6, r3]
  encode_remaining_length(conn->out_packet.remaining_length_enc,
    401a:	3304      	adds	r3, #4
    401c:	18f0      	adds	r0, r6, r3
    401e:	3304      	adds	r3, #4
    4020:	18f1      	adds	r1, r6, r3
    4022:	4b36      	ldr	r3, [pc, #216]	; (40fc <process_thread_mqtt_process+0x390>)
    4024:	4798      	blx	r3
                          &conn->out_packet.remaining_length_enc_bytes,
                          conn->out_packet.remaining_length);
  if(conn->out_packet.remaining_length_enc_bytes > 4) {
    4026:	23a1      	movs	r3, #161	; 0xa1
    4028:	009b      	lsls	r3, r3, #2
    402a:	5cf3      	ldrb	r3, [r6, r3]
    402c:	2b04      	cmp	r3, #4
    402e:	d915      	bls.n	405c <process_thread_mqtt_process+0x2f0>
    call_event(conn, MQTT_EVENT_PROTOCOL_ERROR, NULL);
    4030:	1c30      	adds	r0, r6, #0
    4032:	2181      	movs	r1, #129	; 0x81
    4034:	2200      	movs	r2, #0
    4036:	4b32      	ldr	r3, [pc, #200]	; (4100 <process_thread_mqtt_process+0x394>)
    4038:	4798      	blx	r3
    PRINTF("MQTT - Error, remaining length > 4 bytes\n\r");
    PT_EXIT(pt);
    403a:	2200      	movs	r2, #0
    403c:	23a7      	movs	r3, #167	; 0xa7
    403e:	009b      	lsls	r3, r3, #2
    4040:	52f2      	strh	r2, [r6, r3]
    4042:	e288      	b.n	4556 <process_thread_mqtt_process+0x7ea>
  }

  /* Write Fixed Header */
  PT_MQTT_WRITE_BYTE(conn, conn->out_packet.fhdr);
    4044:	2268      	movs	r2, #104	; 0x68
    4046:	32ff      	adds	r2, #255	; 0xff
    4048:	23a7      	movs	r3, #167	; 0xa7
    404a:	009b      	lsls	r3, r3, #2
    404c:	52f2      	strh	r2, [r6, r3]
    404e:	239d      	movs	r3, #157	; 0x9d
    4050:	009b      	lsls	r3, r3, #2
    4052:	5cf3      	ldrb	r3, [r6, r3]
    4054:	2b00      	cmp	r3, #0
    4056:	d101      	bne.n	405c <process_thread_mqtt_process+0x2f0>
    4058:	f001 f979 	bl	534e <process_thread_mqtt_process+0x15e2>
    405c:	239e      	movs	r3, #158	; 0x9e
    405e:	009b      	lsls	r3, r3, #2
    4060:	5cf1      	ldrb	r1, [r6, r3]
    4062:	1c30      	adds	r0, r6, #0
    4064:	4b27      	ldr	r3, [pc, #156]	; (4104 <process_thread_mqtt_process+0x398>)
    4066:	4798      	blx	r3
    4068:	2800      	cmp	r0, #0
    406a:	d1eb      	bne.n	4044 <process_thread_mqtt_process+0x2d8>
    406c:	e00b      	b.n	4086 <process_thread_mqtt_process+0x31a>
  PT_MQTT_WRITE_BYTES(conn,
    406e:	22b5      	movs	r2, #181	; 0xb5
    4070:	0052      	lsls	r2, r2, #1
    4072:	23a7      	movs	r3, #167	; 0xa7
    4074:	009b      	lsls	r3, r3, #2
    4076:	52f2      	strh	r2, [r6, r3]
    4078:	239d      	movs	r3, #157	; 0x9d
    407a:	009b      	lsls	r3, r3, #2
    407c:	5cf3      	ldrb	r3, [r6, r3]
    407e:	2b00      	cmp	r3, #0
    4080:	d101      	bne.n	4086 <process_thread_mqtt_process+0x31a>
    4082:	f001 f964 	bl	534e <process_thread_mqtt_process+0x15e2>
    4086:	23a0      	movs	r3, #160	; 0xa0
    4088:	009b      	lsls	r3, r3, #2
    408a:	18f1      	adds	r1, r6, r3
    408c:	3304      	adds	r3, #4
    408e:	5cf2      	ldrb	r2, [r6, r3]
    4090:	1c30      	adds	r0, r6, #0
    4092:	4b1d      	ldr	r3, [pc, #116]	; (4108 <process_thread_mqtt_process+0x39c>)
    4094:	4798      	blx	r3
    4096:	2800      	cmp	r0, #0
    4098:	d1e9      	bne.n	406e <process_thread_mqtt_process+0x302>
    409a:	e043      	b.n	4124 <process_thread_mqtt_process+0x3b8>
    409c:	0000047a 	.word	0x0000047a
    40a0:	00000455 	.word	0x00000455
    40a4:	0000046c 	.word	0x0000046c
    40a8:	00000499 	.word	0x00000499
    40ac:	0000048c 	.word	0x0000048c
    40b0:	000004a6 	.word	0x000004a6
    40b4:	000004b3 	.word	0x000004b3
    40b8:	2000037b 	.word	0x2000037b
    40bc:	00012698 	.word	0x00012698
    40c0:	00010b79 	.word	0x00010b79
    40c4:	20000380 	.word	0x20000380
    40c8:	00003931 	.word	0x00003931
    40cc:	20000385 	.word	0x20000385
    40d0:	000126a8 	.word	0x000126a8
    40d4:	00003329 	.word	0x00003329
    40d8:	20000377 	.word	0x20000377
    40dc:	00000754 	.word	0x00000754
    40e0:	000126d0 	.word	0x000126d0
    40e4:	20000379 	.word	0x20000379
    40e8:	20001d2c 	.word	0x20001d2c
    40ec:	0000ec09 	.word	0x0000ec09
    40f0:	20000375 	.word	0x20000375
    40f4:	20000376 	.word	0x20000376
    40f8:	000126fc 	.word	0x000126fc
    40fc:	00003201 	.word	0x00003201
    4100:	00003275 	.word	0x00003275
    4104:	00003aa9 	.word	0x00003aa9
    4108:	00003ae9 	.word	0x00003ae9
                      conn->out_packet.remaining_length_enc,
                      conn->out_packet.remaining_length_enc_bytes);
  PT_MQTT_WRITE_BYTE(conn, 0);
    410c:	226c      	movs	r2, #108	; 0x6c
    410e:	32ff      	adds	r2, #255	; 0xff
    4110:	23a7      	movs	r3, #167	; 0xa7
    4112:	009b      	lsls	r3, r3, #2
    4114:	52f2      	strh	r2, [r6, r3]
    4116:	239d      	movs	r3, #157	; 0x9d
    4118:	009b      	lsls	r3, r3, #2
    411a:	5cf3      	ldrb	r3, [r6, r3]
    411c:	2b00      	cmp	r3, #0
    411e:	d101      	bne.n	4124 <process_thread_mqtt_process+0x3b8>
    4120:	f001 f915 	bl	534e <process_thread_mqtt_process+0x15e2>
    4124:	1c30      	adds	r0, r6, #0
    4126:	2100      	movs	r1, #0
    4128:	4bd0      	ldr	r3, [pc, #832]	; (446c <process_thread_mqtt_process+0x700>)
    412a:	4798      	blx	r3
    412c:	2800      	cmp	r0, #0
    412e:	d1ed      	bne.n	410c <process_thread_mqtt_process+0x3a0>
    4130:	e00b      	b.n	414a <process_thread_mqtt_process+0x3de>
  PT_MQTT_WRITE_BYTE(conn, 6);
    4132:	22b6      	movs	r2, #182	; 0xb6
    4134:	0052      	lsls	r2, r2, #1
    4136:	23a7      	movs	r3, #167	; 0xa7
    4138:	009b      	lsls	r3, r3, #2
    413a:	52f2      	strh	r2, [r6, r3]
    413c:	239d      	movs	r3, #157	; 0x9d
    413e:	009b      	lsls	r3, r3, #2
    4140:	5cf3      	ldrb	r3, [r6, r3]
    4142:	2b00      	cmp	r3, #0
    4144:	d101      	bne.n	414a <process_thread_mqtt_process+0x3de>
    4146:	f001 f902 	bl	534e <process_thread_mqtt_process+0x15e2>
    414a:	1c30      	adds	r0, r6, #0
    414c:	2106      	movs	r1, #6
    414e:	4bc7      	ldr	r3, [pc, #796]	; (446c <process_thread_mqtt_process+0x700>)
    4150:	4798      	blx	r3
    4152:	2800      	cmp	r0, #0
    4154:	d1ed      	bne.n	4132 <process_thread_mqtt_process+0x3c6>
    4156:	e00b      	b.n	4170 <process_thread_mqtt_process+0x404>
  PT_MQTT_WRITE_BYTES(conn, (uint8_t *)MQTT_PROTOCOL_NAME, 6);
    4158:	226e      	movs	r2, #110	; 0x6e
    415a:	32ff      	adds	r2, #255	; 0xff
    415c:	23a7      	movs	r3, #167	; 0xa7
    415e:	009b      	lsls	r3, r3, #2
    4160:	52f2      	strh	r2, [r6, r3]
    4162:	239d      	movs	r3, #157	; 0x9d
    4164:	009b      	lsls	r3, r3, #2
    4166:	5cf3      	ldrb	r3, [r6, r3]
    4168:	2b00      	cmp	r3, #0
    416a:	d101      	bne.n	4170 <process_thread_mqtt_process+0x404>
    416c:	f001 f8ef 	bl	534e <process_thread_mqtt_process+0x15e2>
    4170:	1c30      	adds	r0, r6, #0
    4172:	49bf      	ldr	r1, [pc, #764]	; (4470 <process_thread_mqtt_process+0x704>)
    4174:	2206      	movs	r2, #6
    4176:	4bbf      	ldr	r3, [pc, #764]	; (4474 <process_thread_mqtt_process+0x708>)
    4178:	4798      	blx	r3
    417a:	2800      	cmp	r0, #0
    417c:	d1ec      	bne.n	4158 <process_thread_mqtt_process+0x3ec>
    417e:	e00b      	b.n	4198 <process_thread_mqtt_process+0x42c>
  PT_MQTT_WRITE_BYTE(conn, MQTT_PROTOCOL_VERSION);
    4180:	22b7      	movs	r2, #183	; 0xb7
    4182:	0052      	lsls	r2, r2, #1
    4184:	23a7      	movs	r3, #167	; 0xa7
    4186:	009b      	lsls	r3, r3, #2
    4188:	52f2      	strh	r2, [r6, r3]
    418a:	239d      	movs	r3, #157	; 0x9d
    418c:	009b      	lsls	r3, r3, #2
    418e:	5cf3      	ldrb	r3, [r6, r3]
    4190:	2b00      	cmp	r3, #0
    4192:	d101      	bne.n	4198 <process_thread_mqtt_process+0x42c>
    4194:	f001 f8db 	bl	534e <process_thread_mqtt_process+0x15e2>
    4198:	1c30      	adds	r0, r6, #0
    419a:	2103      	movs	r1, #3
    419c:	4bb3      	ldr	r3, [pc, #716]	; (446c <process_thread_mqtt_process+0x700>)
    419e:	4798      	blx	r3
    41a0:	2800      	cmp	r0, #0
    41a2:	d1ed      	bne.n	4180 <process_thread_mqtt_process+0x414>
    41a4:	e00b      	b.n	41be <process_thread_mqtt_process+0x452>
  PT_MQTT_WRITE_BYTE(conn, conn->connect_vhdr_flags);
    41a6:	2270      	movs	r2, #112	; 0x70
    41a8:	32ff      	adds	r2, #255	; 0xff
    41aa:	23a7      	movs	r3, #167	; 0xa7
    41ac:	009b      	lsls	r3, r3, #2
    41ae:	52f2      	strh	r2, [r6, r3]
    41b0:	239d      	movs	r3, #157	; 0x9d
    41b2:	009b      	lsls	r3, r3, #2
    41b4:	5cf3      	ldrb	r3, [r6, r3]
    41b6:	2b00      	cmp	r3, #0
    41b8:	d101      	bne.n	41be <process_thread_mqtt_process+0x452>
    41ba:	f001 f8c8 	bl	534e <process_thread_mqtt_process+0x15e2>
    41be:	7d31      	ldrb	r1, [r6, #20]
    41c0:	1c30      	adds	r0, r6, #0
    41c2:	4baa      	ldr	r3, [pc, #680]	; (446c <process_thread_mqtt_process+0x700>)
    41c4:	4798      	blx	r3
    41c6:	2800      	cmp	r0, #0
    41c8:	d1ed      	bne.n	41a6 <process_thread_mqtt_process+0x43a>
    41ca:	e00b      	b.n	41e4 <process_thread_mqtt_process+0x478>
  PT_MQTT_WRITE_BYTE(conn, (conn->keep_alive >> 8));
    41cc:	22b8      	movs	r2, #184	; 0xb8
    41ce:	0052      	lsls	r2, r2, #1
    41d0:	23a7      	movs	r3, #167	; 0xa7
    41d2:	009b      	lsls	r3, r3, #2
    41d4:	52f2      	strh	r2, [r6, r3]
    41d6:	239d      	movs	r3, #157	; 0x9d
    41d8:	009b      	lsls	r3, r3, #2
    41da:	5cf3      	ldrb	r3, [r6, r3]
    41dc:	2b00      	cmp	r3, #0
    41de:	d101      	bne.n	41e4 <process_thread_mqtt_process+0x478>
    41e0:	f001 f8b5 	bl	534e <process_thread_mqtt_process+0x15e2>
    41e4:	8af1      	ldrh	r1, [r6, #22]
    41e6:	0a09      	lsrs	r1, r1, #8
    41e8:	1c30      	adds	r0, r6, #0
    41ea:	4ba0      	ldr	r3, [pc, #640]	; (446c <process_thread_mqtt_process+0x700>)
    41ec:	4798      	blx	r3
    41ee:	2800      	cmp	r0, #0
    41f0:	d1ec      	bne.n	41cc <process_thread_mqtt_process+0x460>
    41f2:	e00b      	b.n	420c <process_thread_mqtt_process+0x4a0>
  PT_MQTT_WRITE_BYTE(conn, (conn->keep_alive & 0x00FF));
    41f4:	2272      	movs	r2, #114	; 0x72
    41f6:	32ff      	adds	r2, #255	; 0xff
    41f8:	23a7      	movs	r3, #167	; 0xa7
    41fa:	009b      	lsls	r3, r3, #2
    41fc:	52f2      	strh	r2, [r6, r3]
    41fe:	239d      	movs	r3, #157	; 0x9d
    4200:	009b      	lsls	r3, r3, #2
    4202:	5cf3      	ldrb	r3, [r6, r3]
    4204:	2b00      	cmp	r3, #0
    4206:	d101      	bne.n	420c <process_thread_mqtt_process+0x4a0>
    4208:	f001 f8a1 	bl	534e <process_thread_mqtt_process+0x15e2>
    420c:	7db1      	ldrb	r1, [r6, #22]
    420e:	1c30      	adds	r0, r6, #0
    4210:	4b96      	ldr	r3, [pc, #600]	; (446c <process_thread_mqtt_process+0x700>)
    4212:	4798      	blx	r3
    4214:	2800      	cmp	r0, #0
    4216:	d1ed      	bne.n	41f4 <process_thread_mqtt_process+0x488>
    4218:	e00b      	b.n	4232 <process_thread_mqtt_process+0x4c6>
  PT_MQTT_WRITE_BYTE(conn, conn->client_id.length << 8);
    421a:	22b9      	movs	r2, #185	; 0xb9
    421c:	0052      	lsls	r2, r2, #1
    421e:	23a7      	movs	r3, #167	; 0xa7
    4220:	009b      	lsls	r3, r3, #2
    4222:	52f2      	strh	r2, [r6, r3]
    4224:	239d      	movs	r3, #157	; 0x9d
    4226:	009b      	lsls	r3, r3, #2
    4228:	5cf3      	ldrb	r3, [r6, r3]
    422a:	2b00      	cmp	r3, #0
    422c:	d101      	bne.n	4232 <process_thread_mqtt_process+0x4c6>
    422e:	f001 f88e 	bl	534e <process_thread_mqtt_process+0x15e2>
    4232:	1c30      	adds	r0, r6, #0
    4234:	2100      	movs	r1, #0
    4236:	4b8d      	ldr	r3, [pc, #564]	; (446c <process_thread_mqtt_process+0x700>)
    4238:	4798      	blx	r3
    423a:	2800      	cmp	r0, #0
    423c:	d1ed      	bne.n	421a <process_thread_mqtt_process+0x4ae>
    423e:	e00b      	b.n	4258 <process_thread_mqtt_process+0x4ec>
  PT_MQTT_WRITE_BYTE(conn, conn->client_id.length & 0x00FF);
    4240:	2274      	movs	r2, #116	; 0x74
    4242:	32ff      	adds	r2, #255	; 0xff
    4244:	23a7      	movs	r3, #167	; 0xa7
    4246:	009b      	lsls	r3, r3, #2
    4248:	52f2      	strh	r2, [r6, r3]
    424a:	239d      	movs	r3, #157	; 0x9d
    424c:	009b      	lsls	r3, r3, #2
    424e:	5cf3      	ldrb	r3, [r6, r3]
    4250:	2b00      	cmp	r3, #0
    4252:	d101      	bne.n	4258 <process_thread_mqtt_process+0x4ec>
    4254:	f001 f87b 	bl	534e <process_thread_mqtt_process+0x15e2>
    4258:	7c31      	ldrb	r1, [r6, #16]
    425a:	1c30      	adds	r0, r6, #0
    425c:	4b83      	ldr	r3, [pc, #524]	; (446c <process_thread_mqtt_process+0x700>)
    425e:	4798      	blx	r3
    4260:	2800      	cmp	r0, #0
    4262:	d1ed      	bne.n	4240 <process_thread_mqtt_process+0x4d4>
    4264:	e00b      	b.n	427e <process_thread_mqtt_process+0x512>
  PT_MQTT_WRITE_BYTES(conn, (uint8_t *)conn->client_id.string,
    4266:	2276      	movs	r2, #118	; 0x76
    4268:	32ff      	adds	r2, #255	; 0xff
    426a:	23a7      	movs	r3, #167	; 0xa7
    426c:	009b      	lsls	r3, r3, #2
    426e:	52f2      	strh	r2, [r6, r3]
    4270:	239d      	movs	r3, #157	; 0x9d
    4272:	009b      	lsls	r3, r3, #2
    4274:	5cf3      	ldrb	r3, [r6, r3]
    4276:	2b00      	cmp	r3, #0
    4278:	d101      	bne.n	427e <process_thread_mqtt_process+0x512>
    427a:	f001 f868 	bl	534e <process_thread_mqtt_process+0x15e2>
    427e:	8a32      	ldrh	r2, [r6, #16]
    4280:	1c30      	adds	r0, r6, #0
    4282:	68f1      	ldr	r1, [r6, #12]
    4284:	4b7b      	ldr	r3, [pc, #492]	; (4474 <process_thread_mqtt_process+0x708>)
    4286:	4798      	blx	r3
    4288:	2800      	cmp	r0, #0
    428a:	d1ec      	bne.n	4266 <process_thread_mqtt_process+0x4fa>
                      conn->client_id.length);
  if(conn->connect_vhdr_flags & MQTT_VHDR_WILL_FLAG) {
    428c:	7d33      	ldrb	r3, [r6, #20]
    428e:	075b      	lsls	r3, r3, #29
    4290:	d40c      	bmi.n	42ac <process_thread_mqtt_process+0x540>
    4292:	e080      	b.n	4396 <process_thread_mqtt_process+0x62a>
    PT_MQTT_WRITE_BYTE(conn, conn->will.topic.length << 8);
    4294:	2278      	movs	r2, #120	; 0x78
    4296:	32ff      	adds	r2, #255	; 0xff
    4298:	23a7      	movs	r3, #167	; 0xa7
    429a:	009b      	lsls	r3, r3, #2
    429c:	52f2      	strh	r2, [r6, r3]
    429e:	239d      	movs	r3, #157	; 0x9d
    42a0:	009b      	lsls	r3, r3, #2
    42a2:	5cf3      	ldrb	r3, [r6, r3]
    42a4:	2b00      	cmp	r3, #0
    42a6:	d101      	bne.n	42ac <process_thread_mqtt_process+0x540>
    42a8:	f001 f851 	bl	534e <process_thread_mqtt_process+0x15e2>
    42ac:	1c30      	adds	r0, r6, #0
    42ae:	2100      	movs	r1, #0
    42b0:	4b6e      	ldr	r3, [pc, #440]	; (446c <process_thread_mqtt_process+0x700>)
    42b2:	4798      	blx	r3
    42b4:	2800      	cmp	r0, #0
    42b6:	d1ed      	bne.n	4294 <process_thread_mqtt_process+0x528>
    42b8:	e00b      	b.n	42d2 <process_thread_mqtt_process+0x566>
    PT_MQTT_WRITE_BYTE(conn, conn->will.topic.length & 0x00FF);
    42ba:	22bc      	movs	r2, #188	; 0xbc
    42bc:	0052      	lsls	r2, r2, #1
    42be:	23a7      	movs	r3, #167	; 0xa7
    42c0:	009b      	lsls	r3, r3, #2
    42c2:	52f2      	strh	r2, [r6, r3]
    42c4:	239d      	movs	r3, #157	; 0x9d
    42c6:	009b      	lsls	r3, r3, #2
    42c8:	5cf3      	ldrb	r3, [r6, r3]
    42ca:	2b00      	cmp	r3, #0
    42cc:	d101      	bne.n	42d2 <process_thread_mqtt_process+0x566>
    42ce:	f001 f83e 	bl	534e <process_thread_mqtt_process+0x15e2>
    42d2:	2340      	movs	r3, #64	; 0x40
    42d4:	5cf1      	ldrb	r1, [r6, r3]
    42d6:	1c30      	adds	r0, r6, #0
    42d8:	4b64      	ldr	r3, [pc, #400]	; (446c <process_thread_mqtt_process+0x700>)
    42da:	4798      	blx	r3
    42dc:	2800      	cmp	r0, #0
    42de:	d1ec      	bne.n	42ba <process_thread_mqtt_process+0x54e>
    42e0:	e00b      	b.n	42fa <process_thread_mqtt_process+0x58e>
    PT_MQTT_WRITE_BYTES(conn, (uint8_t *)conn->will.topic.string,
    42e2:	22bd      	movs	r2, #189	; 0xbd
    42e4:	0052      	lsls	r2, r2, #1
    42e6:	23a7      	movs	r3, #167	; 0xa7
    42e8:	009b      	lsls	r3, r3, #2
    42ea:	52f2      	strh	r2, [r6, r3]
    42ec:	239d      	movs	r3, #157	; 0x9d
    42ee:	009b      	lsls	r3, r3, #2
    42f0:	5cf3      	ldrb	r3, [r6, r3]
    42f2:	2b00      	cmp	r3, #0
    42f4:	d101      	bne.n	42fa <process_thread_mqtt_process+0x58e>
    42f6:	f001 f82a 	bl	534e <process_thread_mqtt_process+0x15e2>
    42fa:	2340      	movs	r3, #64	; 0x40
    42fc:	5af2      	ldrh	r2, [r6, r3]
    42fe:	1c30      	adds	r0, r6, #0
    4300:	6bf1      	ldr	r1, [r6, #60]	; 0x3c
    4302:	4b5c      	ldr	r3, [pc, #368]	; (4474 <process_thread_mqtt_process+0x708>)
    4304:	4798      	blx	r3
    4306:	2800      	cmp	r0, #0
    4308:	d1eb      	bne.n	42e2 <process_thread_mqtt_process+0x576>
    430a:	e00b      	b.n	4324 <process_thread_mqtt_process+0x5b8>
                        conn->will.topic.length);
    PT_MQTT_WRITE_BYTE(conn, conn->will.message.length << 8);
    430c:	227c      	movs	r2, #124	; 0x7c
    430e:	32ff      	adds	r2, #255	; 0xff
    4310:	23a7      	movs	r3, #167	; 0xa7
    4312:	009b      	lsls	r3, r3, #2
    4314:	52f2      	strh	r2, [r6, r3]
    4316:	239d      	movs	r3, #157	; 0x9d
    4318:	009b      	lsls	r3, r3, #2
    431a:	5cf3      	ldrb	r3, [r6, r3]
    431c:	2b00      	cmp	r3, #0
    431e:	d101      	bne.n	4324 <process_thread_mqtt_process+0x5b8>
    4320:	f001 f815 	bl	534e <process_thread_mqtt_process+0x15e2>
    4324:	1c30      	adds	r0, r6, #0
    4326:	2100      	movs	r1, #0
    4328:	4b50      	ldr	r3, [pc, #320]	; (446c <process_thread_mqtt_process+0x700>)
    432a:	4798      	blx	r3
    432c:	2800      	cmp	r0, #0
    432e:	d1ed      	bne.n	430c <process_thread_mqtt_process+0x5a0>
    4330:	e00b      	b.n	434a <process_thread_mqtt_process+0x5de>
    PT_MQTT_WRITE_BYTE(conn, conn->will.message.length & 0x00FF);
    4332:	22be      	movs	r2, #190	; 0xbe
    4334:	0052      	lsls	r2, r2, #1
    4336:	23a7      	movs	r3, #167	; 0xa7
    4338:	009b      	lsls	r3, r3, #2
    433a:	52f2      	strh	r2, [r6, r3]
    433c:	239d      	movs	r3, #157	; 0x9d
    433e:	009b      	lsls	r3, r3, #2
    4340:	5cf3      	ldrb	r3, [r6, r3]
    4342:	2b00      	cmp	r3, #0
    4344:	d101      	bne.n	434a <process_thread_mqtt_process+0x5de>
    4346:	f001 f802 	bl	534e <process_thread_mqtt_process+0x15e2>
    434a:	2348      	movs	r3, #72	; 0x48
    434c:	5cf1      	ldrb	r1, [r6, r3]
    434e:	1c30      	adds	r0, r6, #0
    4350:	4b46      	ldr	r3, [pc, #280]	; (446c <process_thread_mqtt_process+0x700>)
    4352:	4798      	blx	r3
    4354:	2800      	cmp	r0, #0
    4356:	d1ec      	bne.n	4332 <process_thread_mqtt_process+0x5c6>
    4358:	e00b      	b.n	4372 <process_thread_mqtt_process+0x606>
    PT_MQTT_WRITE_BYTES(conn, (uint8_t *)conn->will.message.string,
    435a:	22bf      	movs	r2, #191	; 0xbf
    435c:	0052      	lsls	r2, r2, #1
    435e:	23a7      	movs	r3, #167	; 0xa7
    4360:	009b      	lsls	r3, r3, #2
    4362:	52f2      	strh	r2, [r6, r3]
    4364:	239d      	movs	r3, #157	; 0x9d
    4366:	009b      	lsls	r3, r3, #2
    4368:	5cf3      	ldrb	r3, [r6, r3]
    436a:	2b00      	cmp	r3, #0
    436c:	d101      	bne.n	4372 <process_thread_mqtt_process+0x606>
    436e:	f000 ffee 	bl	534e <process_thread_mqtt_process+0x15e2>
    4372:	2348      	movs	r3, #72	; 0x48
    4374:	5af2      	ldrh	r2, [r6, r3]
    4376:	1c30      	adds	r0, r6, #0
    4378:	6c71      	ldr	r1, [r6, #68]	; 0x44
    437a:	4b3e      	ldr	r3, [pc, #248]	; (4474 <process_thread_mqtt_process+0x708>)
    437c:	4798      	blx	r3
    437e:	2800      	cmp	r0, #0
    4380:	d1eb      	bne.n	435a <process_thread_mqtt_process+0x5ee>
                        conn->will.message.length);
    DBG("MQTT - Setting will topic to '%s' %u bytes and message to '%s' %u bytes\n\r",
    4382:	2340      	movs	r3, #64	; 0x40
    4384:	5af2      	ldrh	r2, [r6, r3]
    4386:	3308      	adds	r3, #8
    4388:	5af3      	ldrh	r3, [r6, r3]
    438a:	9300      	str	r3, [sp, #0]
    438c:	483a      	ldr	r0, [pc, #232]	; (4478 <process_thread_mqtt_process+0x70c>)
    438e:	6bf1      	ldr	r1, [r6, #60]	; 0x3c
    4390:	6c73      	ldr	r3, [r6, #68]	; 0x44
    4392:	4f3a      	ldr	r7, [pc, #232]	; (447c <process_thread_mqtt_process+0x710>)
    4394:	47b8      	blx	r7
        conn->will.topic.string,
        conn->will.topic.length,
        conn->will.message.string,
        conn->will.message.length);
  }
  if(conn->connect_vhdr_flags & MQTT_VHDR_USERNAME_FLAG) {
    4396:	7d33      	ldrb	r3, [r6, #20]
    4398:	2b7f      	cmp	r3, #127	; 0x7f
    439a:	d93b      	bls.n	4414 <process_thread_mqtt_process+0x6a8>
    439c:	e00b      	b.n	43b6 <process_thread_mqtt_process+0x64a>
    PT_MQTT_WRITE_BYTE(conn, conn->credentials.username.length << 8);
    439e:	22c3      	movs	r2, #195	; 0xc3
    43a0:	0052      	lsls	r2, r2, #1
    43a2:	23a7      	movs	r3, #167	; 0xa7
    43a4:	009b      	lsls	r3, r3, #2
    43a6:	52f2      	strh	r2, [r6, r3]
    43a8:	239d      	movs	r3, #157	; 0x9d
    43aa:	009b      	lsls	r3, r3, #2
    43ac:	5cf3      	ldrb	r3, [r6, r3]
    43ae:	2b00      	cmp	r3, #0
    43b0:	d101      	bne.n	43b6 <process_thread_mqtt_process+0x64a>
    43b2:	f000 ffcc 	bl	534e <process_thread_mqtt_process+0x15e2>
    43b6:	1c30      	adds	r0, r6, #0
    43b8:	2100      	movs	r1, #0
    43ba:	4b2c      	ldr	r3, [pc, #176]	; (446c <process_thread_mqtt_process+0x700>)
    43bc:	4798      	blx	r3
    43be:	2800      	cmp	r0, #0
    43c0:	d1ed      	bne.n	439e <process_thread_mqtt_process+0x632>
    43c2:	e00b      	b.n	43dc <process_thread_mqtt_process+0x670>
    PT_MQTT_WRITE_BYTE(conn, conn->credentials.username.length & 0x00FF);
    43c4:	2288      	movs	r2, #136	; 0x88
    43c6:	32ff      	adds	r2, #255	; 0xff
    43c8:	23a7      	movs	r3, #167	; 0xa7
    43ca:	009b      	lsls	r3, r3, #2
    43cc:	52f2      	strh	r2, [r6, r3]
    43ce:	239d      	movs	r3, #157	; 0x9d
    43d0:	009b      	lsls	r3, r3, #2
    43d2:	5cf3      	ldrb	r3, [r6, r3]
    43d4:	2b00      	cmp	r3, #0
    43d6:	d101      	bne.n	43dc <process_thread_mqtt_process+0x670>
    43d8:	f000 ffb9 	bl	534e <process_thread_mqtt_process+0x15e2>
    43dc:	2354      	movs	r3, #84	; 0x54
    43de:	5cf1      	ldrb	r1, [r6, r3]
    43e0:	1c30      	adds	r0, r6, #0
    43e2:	4b22      	ldr	r3, [pc, #136]	; (446c <process_thread_mqtt_process+0x700>)
    43e4:	4798      	blx	r3
    43e6:	2800      	cmp	r0, #0
    43e8:	d1ec      	bne.n	43c4 <process_thread_mqtt_process+0x658>
    43ea:	e00b      	b.n	4404 <process_thread_mqtt_process+0x698>
    PT_MQTT_WRITE_BYTES(conn,
    43ec:	22c5      	movs	r2, #197	; 0xc5
    43ee:	0052      	lsls	r2, r2, #1
    43f0:	23a7      	movs	r3, #167	; 0xa7
    43f2:	009b      	lsls	r3, r3, #2
    43f4:	52f2      	strh	r2, [r6, r3]
    43f6:	239d      	movs	r3, #157	; 0x9d
    43f8:	009b      	lsls	r3, r3, #2
    43fa:	5cf3      	ldrb	r3, [r6, r3]
    43fc:	2b00      	cmp	r3, #0
    43fe:	d101      	bne.n	4404 <process_thread_mqtt_process+0x698>
    4400:	f000 ffa5 	bl	534e <process_thread_mqtt_process+0x15e2>
    4404:	2354      	movs	r3, #84	; 0x54
    4406:	5af2      	ldrh	r2, [r6, r3]
    4408:	1c30      	adds	r0, r6, #0
    440a:	6d31      	ldr	r1, [r6, #80]	; 0x50
    440c:	4b19      	ldr	r3, [pc, #100]	; (4474 <process_thread_mqtt_process+0x708>)
    440e:	4798      	blx	r3
    4410:	2800      	cmp	r0, #0
    4412:	d1eb      	bne.n	43ec <process_thread_mqtt_process+0x680>
                        (uint8_t *)conn->credentials.username.string,
                        conn->credentials.username.length);
  }
  if(conn->connect_vhdr_flags & MQTT_VHDR_PASSWORD_FLAG) {
    4414:	7d33      	ldrb	r3, [r6, #20]
    4416:	065b      	lsls	r3, r3, #25
    4418:	d40c      	bmi.n	4434 <process_thread_mqtt_process+0x6c8>
    441a:	e045      	b.n	44a8 <process_thread_mqtt_process+0x73c>
    PT_MQTT_WRITE_BYTE(conn, conn->credentials.password.length << 8);
    441c:	228e      	movs	r2, #142	; 0x8e
    441e:	32ff      	adds	r2, #255	; 0xff
    4420:	23a7      	movs	r3, #167	; 0xa7
    4422:	009b      	lsls	r3, r3, #2
    4424:	52f2      	strh	r2, [r6, r3]
    4426:	239d      	movs	r3, #157	; 0x9d
    4428:	009b      	lsls	r3, r3, #2
    442a:	5cf3      	ldrb	r3, [r6, r3]
    442c:	2b00      	cmp	r3, #0
    442e:	d101      	bne.n	4434 <process_thread_mqtt_process+0x6c8>
    4430:	f000 ff8d 	bl	534e <process_thread_mqtt_process+0x15e2>
    4434:	1c30      	adds	r0, r6, #0
    4436:	2100      	movs	r1, #0
    4438:	4b0c      	ldr	r3, [pc, #48]	; (446c <process_thread_mqtt_process+0x700>)
    443a:	4798      	blx	r3
    443c:	2800      	cmp	r0, #0
    443e:	d1ed      	bne.n	441c <process_thread_mqtt_process+0x6b0>
    4440:	e00b      	b.n	445a <process_thread_mqtt_process+0x6ee>
    PT_MQTT_WRITE_BYTE(conn, conn->credentials.password.length & 0x00FF);
    4442:	22c7      	movs	r2, #199	; 0xc7
    4444:	0052      	lsls	r2, r2, #1
    4446:	23a7      	movs	r3, #167	; 0xa7
    4448:	009b      	lsls	r3, r3, #2
    444a:	52f2      	strh	r2, [r6, r3]
    444c:	239d      	movs	r3, #157	; 0x9d
    444e:	009b      	lsls	r3, r3, #2
    4450:	5cf3      	ldrb	r3, [r6, r3]
    4452:	2b00      	cmp	r3, #0
    4454:	d101      	bne.n	445a <process_thread_mqtt_process+0x6ee>
    4456:	f000 ff7a 	bl	534e <process_thread_mqtt_process+0x15e2>
    445a:	235c      	movs	r3, #92	; 0x5c
    445c:	5cf1      	ldrb	r1, [r6, r3]
    445e:	1c30      	adds	r0, r6, #0
    4460:	4b02      	ldr	r3, [pc, #8]	; (446c <process_thread_mqtt_process+0x700>)
    4462:	4798      	blx	r3
    4464:	2800      	cmp	r0, #0
    4466:	d1ec      	bne.n	4442 <process_thread_mqtt_process+0x6d6>
    4468:	e016      	b.n	4498 <process_thread_mqtt_process+0x72c>
    446a:	46c0      	nop			; (mov r8, r8)
    446c:	00003aa9 	.word	0x00003aa9
    4470:	00012720 	.word	0x00012720
    4474:	00003ae9 	.word	0x00003ae9
    4478:	00012728 	.word	0x00012728
    447c:	00010b79 	.word	0x00010b79
    PT_MQTT_WRITE_BYTES(conn,
    4480:	2292      	movs	r2, #146	; 0x92
    4482:	32ff      	adds	r2, #255	; 0xff
    4484:	23a7      	movs	r3, #167	; 0xa7
    4486:	009b      	lsls	r3, r3, #2
    4488:	52f2      	strh	r2, [r6, r3]
    448a:	239d      	movs	r3, #157	; 0x9d
    448c:	009b      	lsls	r3, r3, #2
    448e:	5cf3      	ldrb	r3, [r6, r3]
    4490:	2b00      	cmp	r3, #0
    4492:	d101      	bne.n	4498 <process_thread_mqtt_process+0x72c>
    4494:	f000 ff5b 	bl	534e <process_thread_mqtt_process+0x15e2>
    4498:	235c      	movs	r3, #92	; 0x5c
    449a:	5af2      	ldrh	r2, [r6, r3]
    449c:	1c30      	adds	r0, r6, #0
    449e:	6db1      	ldr	r1, [r6, #88]	; 0x58
    44a0:	4bc0      	ldr	r3, [pc, #768]	; (47a4 <process_thread_mqtt_process+0xa38>)
    44a2:	4798      	blx	r3
    44a4:	2800      	cmp	r0, #0
    44a6:	d1eb      	bne.n	4480 <process_thread_mqtt_process+0x714>
                        (uint8_t *)conn->credentials.password.string,
                        conn->credentials.password.length);
  }

  /* Send out buffer */
  send_out_buffer(conn);
    44a8:	1c30      	adds	r0, r6, #0
    44aa:	4bbf      	ldr	r3, [pc, #764]	; (47a8 <process_thread_mqtt_process+0xa3c>)
    44ac:	4798      	blx	r3
  conn->state = MQTT_CONN_STATE_CONNECTING_TO_BROKER;
    44ae:	2207      	movs	r2, #7
    44b0:	2360      	movs	r3, #96	; 0x60
    44b2:	54f2      	strb	r2, [r6, r3]

  timer_set(&conn->t, RESPONSE_WAIT_TIMEOUT);
    44b4:	1d30      	adds	r0, r6, #4
    44b6:	21a0      	movs	r1, #160	; 0xa0
    44b8:	00c9      	lsls	r1, r1, #3
    44ba:	4bbc      	ldr	r3, [pc, #752]	; (47ac <process_thread_mqtt_process+0xa40>)
    44bc:	4798      	blx	r3

  /* Wait for CONNACK */
  reset_packet(&conn->in_packet);
    44be:	2395      	movs	r3, #149	; 0x95
    44c0:	00db      	lsls	r3, r3, #3
    44c2:	18f0      	adds	r0, r6, r3
    44c4:	4bba      	ldr	r3, [pc, #744]	; (47b0 <process_thread_mqtt_process+0xa44>)
    44c6:	4798      	blx	r3
  PT_WAIT_UNTIL(pt, conn->out_packet.qos_state == MQTT_QOS_STATE_GOT_ACK ||
    44c8:	229e      	movs	r2, #158	; 0x9e
    44ca:	32ff      	adds	r2, #255	; 0xff
    44cc:	23a7      	movs	r3, #167	; 0xa7
    44ce:	009b      	lsls	r3, r3, #2
    44d0:	52f2      	strh	r2, [r6, r3]
    44d2:	4bb8      	ldr	r3, [pc, #736]	; (47b4 <process_thread_mqtt_process+0xa48>)
    44d4:	5cf3      	ldrb	r3, [r6, r3]
    44d6:	2b01      	cmp	r3, #1
    44d8:	d006      	beq.n	44e8 <process_thread_mqtt_process+0x77c>
    44da:	1d30      	adds	r0, r6, #4
    44dc:	4bb6      	ldr	r3, [pc, #728]	; (47b8 <process_thread_mqtt_process+0xa4c>)
    44de:	4798      	blx	r3
    44e0:	2800      	cmp	r0, #0
    44e2:	d101      	bne.n	44e8 <process_thread_mqtt_process+0x77c>
    44e4:	f000 ff33 	bl	534e <process_thread_mqtt_process+0x15e2>
                timer_expired(&conn->t));
  if(timer_expired(&conn->t)) {
    44e8:	1d30      	adds	r0, r6, #4
    44ea:	4bb3      	ldr	r3, [pc, #716]	; (47b8 <process_thread_mqtt_process+0xa4c>)
    44ec:	4798      	blx	r3
    44ee:	2800      	cmp	r0, #0
    44f0:	d005      	beq.n	44fe <process_thread_mqtt_process+0x792>
    DBG("Timeout waiting for CONNACK\n\r");
    44f2:	48b2      	ldr	r0, [pc, #712]	; (47bc <process_thread_mqtt_process+0xa50>)
    44f4:	4bb2      	ldr	r3, [pc, #712]	; (47c0 <process_thread_mqtt_process+0xa54>)
    44f6:	4798      	blx	r3
    /* We stick to the letter of the spec here: Tear the connection down */
    mqtt_disconnect(conn);
    44f8:	1c30      	adds	r0, r6, #0
    44fa:	4bb2      	ldr	r3, [pc, #712]	; (47c4 <process_thread_mqtt_process+0xa58>)
    44fc:	4798      	blx	r3
  }
  reset_packet(&conn->in_packet);
    44fe:	2395      	movs	r3, #149	; 0x95
    4500:	00db      	lsls	r3, r3, #3
    4502:	18f0      	adds	r0, r6, r3
    4504:	4baa      	ldr	r3, [pc, #680]	; (47b0 <process_thread_mqtt_process+0xa44>)
    4506:	4798      	blx	r3

  DBG("MQTT - Done sending CONNECT\n\r");
    4508:	48af      	ldr	r0, [pc, #700]	; (47c8 <process_thread_mqtt_process+0xa5c>)
    450a:	4fad      	ldr	r7, [pc, #692]	; (47c0 <process_thread_mqtt_process+0xa54>)
    450c:	47b8      	blx	r7

#if DEBUG_MQTT == 1
  DBG("MQTT - CONNECT message sent: \n\r");
    450e:	48af      	ldr	r0, [pc, #700]	; (47cc <process_thread_mqtt_process+0xa60>)
    4510:	47b8      	blx	r7
  uint16_t i;
  for(i = 0; i < (conn->out_buffer_ptr - conn->out_buffer); i++) {
    4512:	2374      	movs	r3, #116	; 0x74
    4514:	4698      	mov	r8, r3
    4516:	44b0      	add	r8, r6
    4518:	6f33      	ldr	r3, [r6, #112]	; 0x70
    451a:	4642      	mov	r2, r8
    451c:	1a9b      	subs	r3, r3, r2
    451e:	2b00      	cmp	r3, #0
    4520:	dd12      	ble.n	4548 <process_thread_mqtt_process+0x7dc>
    4522:	2700      	movs	r7, #0
    4524:	1c3b      	adds	r3, r7, #0
    DBG("%02X ", conn->out_buffer[i]);
    4526:	4aaa      	ldr	r2, [pc, #680]	; (47d0 <process_thread_mqtt_process+0xa64>)
    4528:	4692      	mov	sl, r2
    452a:	4aa5      	ldr	r2, [pc, #660]	; (47c0 <process_thread_mqtt_process+0xa54>)
    452c:	4691      	mov	r9, r2
    452e:	18f3      	adds	r3, r6, r3
    4530:	3370      	adds	r3, #112	; 0x70
    4532:	7919      	ldrb	r1, [r3, #4]
    4534:	4650      	mov	r0, sl
    4536:	47c8      	blx	r9
  DBG("MQTT - Done sending CONNECT\n\r");

#if DEBUG_MQTT == 1
  DBG("MQTT - CONNECT message sent: \n\r");
  uint16_t i;
  for(i = 0; i < (conn->out_buffer_ptr - conn->out_buffer); i++) {
    4538:	3701      	adds	r7, #1
    453a:	b2bf      	uxth	r7, r7
    453c:	1c3b      	adds	r3, r7, #0
    453e:	6f32      	ldr	r2, [r6, #112]	; 0x70
    4540:	4641      	mov	r1, r8
    4542:	1a52      	subs	r2, r2, r1
    4544:	4297      	cmp	r7, r2
    4546:	dbf2      	blt.n	452e <process_thread_mqtt_process+0x7c2>
    DBG("%02X ", conn->out_buffer[i]);
  }
  DBG("\n\r");
    4548:	48a2      	ldr	r0, [pc, #648]	; (47d4 <process_thread_mqtt_process+0xa68>)
    454a:	4b9d      	ldr	r3, [pc, #628]	; (47c0 <process_thread_mqtt_process+0xa54>)
    454c:	4798      	blx	r3
#endif

  PT_END(pt);
    454e:	2200      	movs	r2, #0
    4550:	23a7      	movs	r3, #167	; 0xa7
    4552:	009b      	lsls	r3, r3, #2
    4554:	52f2      	strh	r2, [r6, r3]
              conn->state != MQTT_CONN_STATE_ABORT_IMMEDIATE) {
          PT_MQTT_WAIT_SEND();
        }
      }
    }
    if(ev == mqtt_do_disconnect_mqtt_event) {
    4556:	230f      	movs	r3, #15
    4558:	446b      	add	r3, sp
    455a:	781a      	ldrb	r2, [r3, #0]
    455c:	4b9e      	ldr	r3, [pc, #632]	; (47d8 <process_thread_mqtt_process+0xa6c>)
    455e:	781b      	ldrb	r3, [r3, #0]
    4560:	429a      	cmp	r2, r3
    4562:	d000      	beq.n	4566 <process_thread_mqtt_process+0x7fa>
    4564:	e0a9      	b.n	46ba <process_thread_mqtt_process+0x94e>
      conn = data;
    4566:	4e9d      	ldr	r6, [pc, #628]	; (47dc <process_thread_mqtt_process+0xa70>)
    4568:	6035      	str	r5, [r6, #0]
      DBG("MQTT - Got mqtt_do_disconnect_mqtt_event!\n\r");
    456a:	489d      	ldr	r0, [pc, #628]	; (47e0 <process_thread_mqtt_process+0xa74>)
    456c:	4b94      	ldr	r3, [pc, #592]	; (47c0 <process_thread_mqtt_process+0xa54>)
    456e:	4798      	blx	r3

      /* Send MQTT Disconnect if we are connected */
      if(conn->state == MQTT_CONN_STATE_SENDING_MQTT_DISCONNECT) {
    4570:	6832      	ldr	r2, [r6, #0]
    4572:	2360      	movs	r3, #96	; 0x60
    4574:	5cd3      	ldrb	r3, [r2, r3]
    4576:	2b09      	cmp	r3, #9
    4578:	d000      	beq.n	457c <process_thread_mqtt_process+0x810>
    457a:	e09e      	b.n	46ba <process_thread_mqtt_process+0x94e>
        if(conn->out_buffer_sent == 1) {
    457c:	239d      	movs	r3, #157	; 0x9d
    457e:	009b      	lsls	r3, r3, #2
    4580:	5cd3      	ldrb	r3, [r2, r3]
    4582:	2b01      	cmp	r3, #1
    4584:	d000      	beq.n	4588 <process_thread_mqtt_process+0x81c>
    4586:	e093      	b.n	46b0 <process_thread_mqtt_process+0x944>
          PT_INIT(&conn->out_proto_thread);
    4588:	2100      	movs	r1, #0
    458a:	23a7      	movs	r3, #167	; 0xa7
    458c:	009b      	lsls	r3, r3, #2
    458e:	52d1      	strh	r1, [r2, r3]
          while(disconnect_pt(&conn->out_proto_thread, conn) < PT_EXITED &&
    4590:	e02b      	b.n	45ea <process_thread_mqtt_process+0x87e>
                conn->state != MQTT_CONN_STATE_ABORT_IMMEDIATE) {
            PT_MQTT_WAIT_SEND();
    4592:	4b94      	ldr	r3, [pc, #592]	; (47e4 <process_thread_mqtt_process+0xa78>)
    4594:	7819      	ldrb	r1, [r3, #0]
    4596:	4b94      	ldr	r3, [pc, #592]	; (47e8 <process_thread_mqtt_process+0xa7c>)
    4598:	6818      	ldr	r0, [r3, #0]
    459a:	2200      	movs	r2, #0
    459c:	4b93      	ldr	r3, [pc, #588]	; (47ec <process_thread_mqtt_process+0xa80>)
    459e:	4798      	blx	r3
    45a0:	4b93      	ldr	r3, [pc, #588]	; (47f0 <process_thread_mqtt_process+0xa84>)
    45a2:	8023      	strh	r3, [r4, #0]
    45a4:	2001      	movs	r0, #1
    45a6:	f000 ff0a 	bl	53be <process_thread_mqtt_process+0x1652>
    45aa:	230f      	movs	r3, #15
    45ac:	446b      	add	r3, sp
    45ae:	7819      	ldrb	r1, [r3, #0]
    45b0:	4b90      	ldr	r3, [pc, #576]	; (47f4 <process_thread_mqtt_process+0xa88>)
    45b2:	781b      	ldrb	r3, [r3, #0]
    45b4:	428b      	cmp	r3, r1
    45b6:	d10b      	bne.n	45d0 <process_thread_mqtt_process+0x864>
    45b8:	4b88      	ldr	r3, [pc, #544]	; (47dc <process_thread_mqtt_process+0xa70>)
    45ba:	681b      	ldr	r3, [r3, #0]
    45bc:	210a      	movs	r1, #10
    45be:	2260      	movs	r2, #96	; 0x60
    45c0:	5499      	strb	r1, [r3, r2]
    45c2:	2100      	movs	r1, #0
    45c4:	22a7      	movs	r2, #167	; 0xa7
    45c6:	0092      	lsls	r2, r2, #2
    45c8:	5299      	strh	r1, [r3, r2]
    45ca:	2002      	movs	r0, #2
    45cc:	f000 fef7 	bl	53be <process_thread_mqtt_process+0x1652>
    45d0:	4b89      	ldr	r3, [pc, #548]	; (47f8 <process_thread_mqtt_process+0xa8c>)
    45d2:	781b      	ldrb	r3, [r3, #0]
    45d4:	428b      	cmp	r3, r1
    45d6:	d808      	bhi.n	45ea <process_thread_mqtt_process+0x87e>
    45d8:	4b88      	ldr	r3, [pc, #544]	; (47fc <process_thread_mqtt_process+0xa90>)
    45da:	781b      	ldrb	r3, [r3, #0]
    45dc:	428b      	cmp	r3, r1
    45de:	d304      	bcc.n	45ea <process_thread_mqtt_process+0x87e>
    45e0:	4b81      	ldr	r3, [pc, #516]	; (47e8 <process_thread_mqtt_process+0xa7c>)
    45e2:	6818      	ldr	r0, [r3, #0]
    45e4:	1c2a      	adds	r2, r5, #0
    45e6:	4b81      	ldr	r3, [pc, #516]	; (47ec <process_thread_mqtt_process+0xa80>)
    45e8:	4798      	blx	r3

      /* Send MQTT Disconnect if we are connected */
      if(conn->state == MQTT_CONN_STATE_SENDING_MQTT_DISCONNECT) {
        if(conn->out_buffer_sent == 1) {
          PT_INIT(&conn->out_proto_thread);
          while(disconnect_pt(&conn->out_proto_thread, conn) < PT_EXITED &&
    45ea:	4b7c      	ldr	r3, [pc, #496]	; (47dc <process_thread_mqtt_process+0xa70>)
    45ec:	681e      	ldr	r6, [r3, #0]
}
/*---------------------------------------------------------------------------*/
static
PT_THREAD(disconnect_pt(struct pt *pt, struct mqtt_connection *conn))
{
  PT_BEGIN(pt);
    45ee:	23a7      	movs	r3, #167	; 0xa7
    45f0:	009b      	lsls	r3, r3, #2
    45f2:	5af3      	ldrh	r3, [r6, r3]
    45f4:	22dc      	movs	r2, #220	; 0xdc
    45f6:	0052      	lsls	r2, r2, #1
    45f8:	4293      	cmp	r3, r2
    45fa:	d011      	beq.n	4620 <process_thread_mqtt_process+0x8b4>
    45fc:	d802      	bhi.n	4604 <process_thread_mqtt_process+0x898>
    45fe:	2b00      	cmp	r3, #0
    4600:	d015      	beq.n	462e <process_thread_mqtt_process+0x8c2>
    4602:	e046      	b.n	4692 <process_thread_mqtt_process+0x926>
    4604:	22ba      	movs	r2, #186	; 0xba
    4606:	32ff      	adds	r2, #255	; 0xff
    4608:	4293      	cmp	r3, r2
    460a:	d01c      	beq.n	4646 <process_thread_mqtt_process+0x8da>
    460c:	22c4      	movs	r2, #196	; 0xc4
    460e:	32ff      	adds	r2, #255	; 0xff
    4610:	4293      	cmp	r3, r2
    4612:	d032      	beq.n	467a <process_thread_mqtt_process+0x90e>
    4614:	e03d      	b.n	4692 <process_thread_mqtt_process+0x926>

  PT_MQTT_WRITE_BYTE(conn, MQTT_FHDR_MSG_TYPE_DISCONNECT);
    4616:	22dc      	movs	r2, #220	; 0xdc
    4618:	0052      	lsls	r2, r2, #1
    461a:	23a7      	movs	r3, #167	; 0xa7
    461c:	009b      	lsls	r3, r3, #2
    461e:	52f2      	strh	r2, [r6, r3]
    4620:	239d      	movs	r3, #157	; 0x9d
    4622:	009b      	lsls	r3, r3, #2
    4624:	5cf3      	ldrb	r3, [r6, r3]
    4626:	2b00      	cmp	r3, #0
    4628:	d101      	bne.n	462e <process_thread_mqtt_process+0x8c2>
    462a:	f000 fe9a 	bl	5362 <process_thread_mqtt_process+0x15f6>
    462e:	1c30      	adds	r0, r6, #0
    4630:	21e0      	movs	r1, #224	; 0xe0
    4632:	4b73      	ldr	r3, [pc, #460]	; (4800 <process_thread_mqtt_process+0xa94>)
    4634:	4798      	blx	r3
    4636:	2800      	cmp	r0, #0
    4638:	d1ed      	bne.n	4616 <process_thread_mqtt_process+0x8aa>
    463a:	e00b      	b.n	4654 <process_thread_mqtt_process+0x8e8>
  PT_MQTT_WRITE_BYTE(conn, 0);
    463c:	22ba      	movs	r2, #186	; 0xba
    463e:	32ff      	adds	r2, #255	; 0xff
    4640:	23a7      	movs	r3, #167	; 0xa7
    4642:	009b      	lsls	r3, r3, #2
    4644:	52f2      	strh	r2, [r6, r3]
    4646:	239d      	movs	r3, #157	; 0x9d
    4648:	009b      	lsls	r3, r3, #2
    464a:	5cf3      	ldrb	r3, [r6, r3]
    464c:	2b00      	cmp	r3, #0
    464e:	d101      	bne.n	4654 <process_thread_mqtt_process+0x8e8>
    4650:	f000 fe87 	bl	5362 <process_thread_mqtt_process+0x15f6>
    4654:	1c30      	adds	r0, r6, #0
    4656:	2100      	movs	r1, #0
    4658:	4b69      	ldr	r3, [pc, #420]	; (4800 <process_thread_mqtt_process+0xa94>)
    465a:	4798      	blx	r3
    465c:	2800      	cmp	r0, #0
    465e:	d1ed      	bne.n	463c <process_thread_mqtt_process+0x8d0>

  send_out_buffer(conn);
    4660:	1c30      	adds	r0, r6, #0
    4662:	4b51      	ldr	r3, [pc, #324]	; (47a8 <process_thread_mqtt_process+0xa3c>)
    4664:	4798      	blx	r3
  /*
   * Wait a couple of seconds for a TCP ACK. We don't really need the ACK,
   * we do want the TCP/IP stack to actually send this disconnect before we
   * tear down the session.
   */
  timer_set(&conn->t, (CLOCK_SECOND * 2));
    4666:	1d30      	adds	r0, r6, #4
    4668:	2180      	movs	r1, #128	; 0x80
    466a:	0049      	lsls	r1, r1, #1
    466c:	4b4f      	ldr	r3, [pc, #316]	; (47ac <process_thread_mqtt_process+0xa40>)
    466e:	4798      	blx	r3
  PT_WAIT_UNTIL(pt, conn->out_buffer_sent || timer_expired(&conn->t));
    4670:	22c4      	movs	r2, #196	; 0xc4
    4672:	32ff      	adds	r2, #255	; 0xff
    4674:	23a7      	movs	r3, #167	; 0xa7
    4676:	009b      	lsls	r3, r3, #2
    4678:	52f2      	strh	r2, [r6, r3]
    467a:	239d      	movs	r3, #157	; 0x9d
    467c:	009b      	lsls	r3, r3, #2
    467e:	5cf3      	ldrb	r3, [r6, r3]
    4680:	2b00      	cmp	r3, #0
    4682:	d106      	bne.n	4692 <process_thread_mqtt_process+0x926>
    4684:	1d30      	adds	r0, r6, #4
    4686:	4b4c      	ldr	r3, [pc, #304]	; (47b8 <process_thread_mqtt_process+0xa4c>)
    4688:	4798      	blx	r3
    468a:	2800      	cmp	r0, #0
    468c:	d101      	bne.n	4692 <process_thread_mqtt_process+0x926>
    468e:	f000 fe68 	bl	5362 <process_thread_mqtt_process+0x15f6>

  PT_END(pt);
    4692:	2200      	movs	r2, #0
    4694:	23a7      	movs	r3, #167	; 0xa7
    4696:	009b      	lsls	r3, r3, #2
    4698:	52f2      	strh	r2, [r6, r3]
          PT_INIT(&conn->out_proto_thread);
          while(disconnect_pt(&conn->out_proto_thread, conn) < PT_EXITED &&
                conn->state != MQTT_CONN_STATE_ABORT_IMMEDIATE) {
            PT_MQTT_WAIT_SEND();
          }
          abort_connection(conn);
    469a:	4e50      	ldr	r6, [pc, #320]	; (47dc <process_thread_mqtt_process+0xa70>)
    469c:	6830      	ldr	r0, [r6, #0]
    469e:	4b59      	ldr	r3, [pc, #356]	; (4804 <process_thread_mqtt_process+0xa98>)
    46a0:	4798      	blx	r3
          call_event(conn, MQTT_EVENT_DISCONNECTED, &ev);
    46a2:	6830      	ldr	r0, [r6, #0]
    46a4:	2101      	movs	r1, #1
    46a6:	220f      	movs	r2, #15
    46a8:	446a      	add	r2, sp
    46aa:	4b57      	ldr	r3, [pc, #348]	; (4808 <process_thread_mqtt_process+0xa9c>)
    46ac:	4798      	blx	r3
    46ae:	e004      	b.n	46ba <process_thread_mqtt_process+0x94e>
        } else {
          process_post(&mqtt_process, mqtt_do_disconnect_mqtt_event, conn);
    46b0:	4b49      	ldr	r3, [pc, #292]	; (47d8 <process_thread_mqtt_process+0xa6c>)
    46b2:	7819      	ldrb	r1, [r3, #0]
    46b4:	4855      	ldr	r0, [pc, #340]	; (480c <process_thread_mqtt_process+0xaa0>)
    46b6:	4b4d      	ldr	r3, [pc, #308]	; (47ec <process_thread_mqtt_process+0xa80>)
    46b8:	4798      	blx	r3
        }
      }
    }
    if(ev == mqtt_do_pingreq_event) {
    46ba:	230f      	movs	r3, #15
    46bc:	446b      	add	r3, sp
    46be:	781a      	ldrb	r2, [r3, #0]
    46c0:	4b53      	ldr	r3, [pc, #332]	; (4810 <process_thread_mqtt_process+0xaa4>)
    46c2:	781b      	ldrb	r3, [r3, #0]
    46c4:	429a      	cmp	r2, r3
    46c6:	d000      	beq.n	46ca <process_thread_mqtt_process+0x95e>
    46c8:	e0ed      	b.n	48a6 <process_thread_mqtt_process+0xb3a>
      conn = data;
    46ca:	4e44      	ldr	r6, [pc, #272]	; (47dc <process_thread_mqtt_process+0xa70>)
    46cc:	6035      	str	r5, [r6, #0]
      DBG("MQTT - Got mqtt_do_pingreq_event!\n\r");
    46ce:	4851      	ldr	r0, [pc, #324]	; (4814 <process_thread_mqtt_process+0xaa8>)
    46d0:	4b3b      	ldr	r3, [pc, #236]	; (47c0 <process_thread_mqtt_process+0xa54>)
    46d2:	4798      	blx	r3

      if(conn->out_buffer_sent == 1 &&
    46d4:	6833      	ldr	r3, [r6, #0]
    46d6:	229d      	movs	r2, #157	; 0x9d
    46d8:	0092      	lsls	r2, r2, #2
    46da:	5c9a      	ldrb	r2, [r3, r2]
    46dc:	2a01      	cmp	r2, #1
    46de:	d000      	beq.n	46e2 <process_thread_mqtt_process+0x976>
    46e0:	e0e1      	b.n	48a6 <process_thread_mqtt_process+0xb3a>
         conn->state == MQTT_CONN_STATE_CONNECTED_TO_BROKER) {
    46e2:	325f      	adds	r2, #95	; 0x5f
    }
    if(ev == mqtt_do_pingreq_event) {
      conn = data;
      DBG("MQTT - Got mqtt_do_pingreq_event!\n\r");

      if(conn->out_buffer_sent == 1 &&
    46e4:	5c9a      	ldrb	r2, [r3, r2]
    46e6:	2a08      	cmp	r2, #8
    46e8:	d000      	beq.n	46ec <process_thread_mqtt_process+0x980>
    46ea:	e0dc      	b.n	48a6 <process_thread_mqtt_process+0xb3a>
         conn->state == MQTT_CONN_STATE_CONNECTED_TO_BROKER) {
        PT_INIT(&conn->out_proto_thread);
    46ec:	2100      	movs	r1, #0
    46ee:	22a7      	movs	r2, #167	; 0xa7
    46f0:	0092      	lsls	r2, r2, #2
    46f2:	5299      	strh	r1, [r3, r2]
        while(pingreq_pt(&conn->out_proto_thread, conn) < PT_EXITED &&
    46f4:	e02b      	b.n	474e <process_thread_mqtt_process+0x9e2>
              conn->state == MQTT_CONN_STATE_CONNECTED_TO_BROKER) {
          PT_MQTT_WAIT_SEND();
    46f6:	4b3b      	ldr	r3, [pc, #236]	; (47e4 <process_thread_mqtt_process+0xa78>)
    46f8:	7819      	ldrb	r1, [r3, #0]
    46fa:	4b3b      	ldr	r3, [pc, #236]	; (47e8 <process_thread_mqtt_process+0xa7c>)
    46fc:	6818      	ldr	r0, [r3, #0]
    46fe:	2200      	movs	r2, #0
    4700:	4b3a      	ldr	r3, [pc, #232]	; (47ec <process_thread_mqtt_process+0xa80>)
    4702:	4798      	blx	r3
    4704:	4b44      	ldr	r3, [pc, #272]	; (4818 <process_thread_mqtt_process+0xaac>)
    4706:	8023      	strh	r3, [r4, #0]
    4708:	2001      	movs	r0, #1
    470a:	f000 fe58 	bl	53be <process_thread_mqtt_process+0x1652>
    470e:	230f      	movs	r3, #15
    4710:	446b      	add	r3, sp
    4712:	7819      	ldrb	r1, [r3, #0]
    4714:	4b37      	ldr	r3, [pc, #220]	; (47f4 <process_thread_mqtt_process+0xa88>)
    4716:	781b      	ldrb	r3, [r3, #0]
    4718:	428b      	cmp	r3, r1
    471a:	d10b      	bne.n	4734 <process_thread_mqtt_process+0x9c8>
    471c:	4b2f      	ldr	r3, [pc, #188]	; (47dc <process_thread_mqtt_process+0xa70>)
    471e:	681b      	ldr	r3, [r3, #0]
    4720:	210a      	movs	r1, #10
    4722:	2260      	movs	r2, #96	; 0x60
    4724:	5499      	strb	r1, [r3, r2]
    4726:	2100      	movs	r1, #0
    4728:	22a7      	movs	r2, #167	; 0xa7
    472a:	0092      	lsls	r2, r2, #2
    472c:	5299      	strh	r1, [r3, r2]
    472e:	2002      	movs	r0, #2
    4730:	f000 fe45 	bl	53be <process_thread_mqtt_process+0x1652>
    4734:	4b30      	ldr	r3, [pc, #192]	; (47f8 <process_thread_mqtt_process+0xa8c>)
    4736:	781b      	ldrb	r3, [r3, #0]
    4738:	428b      	cmp	r3, r1
    473a:	d808      	bhi.n	474e <process_thread_mqtt_process+0x9e2>
    473c:	4b2f      	ldr	r3, [pc, #188]	; (47fc <process_thread_mqtt_process+0xa90>)
    473e:	781b      	ldrb	r3, [r3, #0]
    4740:	428b      	cmp	r3, r1
    4742:	d304      	bcc.n	474e <process_thread_mqtt_process+0x9e2>
    4744:	4b28      	ldr	r3, [pc, #160]	; (47e8 <process_thread_mqtt_process+0xa7c>)
    4746:	6818      	ldr	r0, [r3, #0]
    4748:	1c2a      	adds	r2, r5, #0
    474a:	4b28      	ldr	r3, [pc, #160]	; (47ec <process_thread_mqtt_process+0xa80>)
    474c:	4798      	blx	r3
      DBG("MQTT - Got mqtt_do_pingreq_event!\n\r");

      if(conn->out_buffer_sent == 1 &&
         conn->state == MQTT_CONN_STATE_CONNECTED_TO_BROKER) {
        PT_INIT(&conn->out_proto_thread);
        while(pingreq_pt(&conn->out_proto_thread, conn) < PT_EXITED &&
    474e:	4b23      	ldr	r3, [pc, #140]	; (47dc <process_thread_mqtt_process+0xa70>)
    4750:	681e      	ldr	r6, [r3, #0]
}
/*---------------------------------------------------------------------------*/
static
PT_THREAD(pingreq_pt(struct pt *pt, struct mqtt_connection *conn))
{
  PT_BEGIN(pt);
    4752:	23a7      	movs	r3, #167	; 0xa7
    4754:	009b      	lsls	r3, r3, #2
    4756:	5af3      	ldrh	r3, [r6, r3]
    4758:	4a30      	ldr	r2, [pc, #192]	; (481c <process_thread_mqtt_process+0xab0>)
    475a:	4293      	cmp	r3, r2
    475c:	d013      	beq.n	4786 <process_thread_mqtt_process+0xa1a>
    475e:	d802      	bhi.n	4766 <process_thread_mqtt_process+0x9fa>
    4760:	2b00      	cmp	r3, #0
    4762:	d008      	beq.n	4776 <process_thread_mqtt_process+0xa0a>
    4764:	e09b      	b.n	489e <process_thread_mqtt_process+0xb32>
    4766:	4a2e      	ldr	r2, [pc, #184]	; (4820 <process_thread_mqtt_process+0xab4>)
    4768:	4293      	cmp	r3, r2
    476a:	d063      	beq.n	4834 <process_thread_mqtt_process+0xac8>
    476c:	4a2d      	ldr	r2, [pc, #180]	; (4824 <process_thread_mqtt_process+0xab8>)
    476e:	4293      	cmp	r3, r2
    4770:	d100      	bne.n	4774 <process_thread_mqtt_process+0xa08>
    4772:	e080      	b.n	4876 <process_thread_mqtt_process+0xb0a>
    4774:	e093      	b.n	489e <process_thread_mqtt_process+0xb32>

  DBG("MQTT - Sending PINGREQ\n\r");
    4776:	482c      	ldr	r0, [pc, #176]	; (4828 <process_thread_mqtt_process+0xabc>)
    4778:	4b11      	ldr	r3, [pc, #68]	; (47c0 <process_thread_mqtt_process+0xa54>)
    477a:	4798      	blx	r3
    477c:	e00a      	b.n	4794 <process_thread_mqtt_process+0xa28>

  /* Write Fixed Header */
  PT_MQTT_WRITE_BYTE(conn, MQTT_FHDR_MSG_TYPE_PINGREQ);
    477e:	4a27      	ldr	r2, [pc, #156]	; (481c <process_thread_mqtt_process+0xab0>)
    4780:	23a7      	movs	r3, #167	; 0xa7
    4782:	009b      	lsls	r3, r3, #2
    4784:	52f2      	strh	r2, [r6, r3]
    4786:	239d      	movs	r3, #157	; 0x9d
    4788:	009b      	lsls	r3, r3, #2
    478a:	5cf3      	ldrb	r3, [r6, r3]
    478c:	2b00      	cmp	r3, #0
    478e:	d101      	bne.n	4794 <process_thread_mqtt_process+0xa28>
    4790:	f000 fdf1 	bl	5376 <process_thread_mqtt_process+0x160a>
    4794:	1c30      	adds	r0, r6, #0
    4796:	21c0      	movs	r1, #192	; 0xc0
    4798:	4b19      	ldr	r3, [pc, #100]	; (4800 <process_thread_mqtt_process+0xa94>)
    479a:	4798      	blx	r3
    479c:	2800      	cmp	r0, #0
    479e:	d1ee      	bne.n	477e <process_thread_mqtt_process+0xa12>
    47a0:	e04f      	b.n	4842 <process_thread_mqtt_process+0xad6>
    47a2:	46c0      	nop			; (mov r8, r8)
    47a4:	00003ae9 	.word	0x00003ae9
    47a8:	00003a61 	.word	0x00003a61
    47ac:	0000ed6d 	.word	0x0000ed6d
    47b0:	00003295 	.word	0x00003295
    47b4:	00000299 	.word	0x00000299
    47b8:	0000ed9d 	.word	0x0000ed9d
    47bc:	00012774 	.word	0x00012774
    47c0:	00010b79 	.word	0x00010b79
    47c4:	00003d41 	.word	0x00003d41
    47c8:	00012794 	.word	0x00012794
    47cc:	000127b4 	.word	0x000127b4
    47d0:	00012320 	.word	0x00012320
    47d4:	00013044 	.word	0x00013044
    47d8:	2000037a 	.word	0x2000037a
    47dc:	20000380 	.word	0x20000380
    47e0:	000127d4 	.word	0x000127d4
    47e4:	20000379 	.word	0x20000379
    47e8:	20001d2c 	.word	0x20001d2c
    47ec:	0000ec09 	.word	0x0000ec09
    47f0:	0000047a 	.word	0x0000047a
    47f4:	2000037b 	.word	0x2000037b
    47f8:	20000375 	.word	0x20000375
    47fc:	20000376 	.word	0x20000376
    4800:	00003aa9 	.word	0x00003aa9
    4804:	00003931 	.word	0x00003931
    4808:	00003275 	.word	0x00003275
    480c:	2000000c 	.word	0x2000000c
    4810:	20000374 	.word	0x20000374
    4814:	00012800 	.word	0x00012800
    4818:	0000048c 	.word	0x0000048c
    481c:	000002a5 	.word	0x000002a5
    4820:	000002a6 	.word	0x000002a6
    4824:	000002b1 	.word	0x000002b1
    4828:	00012824 	.word	0x00012824
  PT_MQTT_WRITE_BYTE(conn, 0);
    482c:	4abf      	ldr	r2, [pc, #764]	; (4b2c <process_thread_mqtt_process+0xdc0>)
    482e:	23a7      	movs	r3, #167	; 0xa7
    4830:	009b      	lsls	r3, r3, #2
    4832:	52f2      	strh	r2, [r6, r3]
    4834:	239d      	movs	r3, #157	; 0x9d
    4836:	009b      	lsls	r3, r3, #2
    4838:	5cf3      	ldrb	r3, [r6, r3]
    483a:	2b00      	cmp	r3, #0
    483c:	d101      	bne.n	4842 <process_thread_mqtt_process+0xad6>
    483e:	f000 fd9a 	bl	5376 <process_thread_mqtt_process+0x160a>
    4842:	1c30      	adds	r0, r6, #0
    4844:	2100      	movs	r1, #0
    4846:	4bba      	ldr	r3, [pc, #744]	; (4b30 <process_thread_mqtt_process+0xdc4>)
    4848:	4798      	blx	r3
    484a:	2800      	cmp	r0, #0
    484c:	d1ee      	bne.n	482c <process_thread_mqtt_process+0xac0>

  send_out_buffer(conn);
    484e:	1c30      	adds	r0, r6, #0
    4850:	4bb8      	ldr	r3, [pc, #736]	; (4b34 <process_thread_mqtt_process+0xdc8>)
    4852:	4798      	blx	r3

  /* Start timeout for reply. */
  conn->waiting_for_pingresp = 1;
    4854:	2201      	movs	r2, #1
    4856:	2338      	movs	r3, #56	; 0x38
    4858:	54f2      	strb	r2, [r6, r3]

  /* Wait for PINGRESP or timeout */
  reset_packet(&conn->in_packet);
    485a:	2395      	movs	r3, #149	; 0x95
    485c:	00db      	lsls	r3, r3, #3
    485e:	18f0      	adds	r0, r6, r3
    4860:	4bb5      	ldr	r3, [pc, #724]	; (4b38 <process_thread_mqtt_process+0xdcc>)
    4862:	4798      	blx	r3
  timer_set(&conn->t, RESPONSE_WAIT_TIMEOUT);
    4864:	1d30      	adds	r0, r6, #4
    4866:	21a0      	movs	r1, #160	; 0xa0
    4868:	00c9      	lsls	r1, r1, #3
    486a:	4bb4      	ldr	r3, [pc, #720]	; (4b3c <process_thread_mqtt_process+0xdd0>)
    486c:	4798      	blx	r3

  PT_WAIT_UNTIL(pt, conn->in_packet.packet_received || timer_expired(&conn->t));
    486e:	4ab4      	ldr	r2, [pc, #720]	; (4b40 <process_thread_mqtt_process+0xdd4>)
    4870:	23a7      	movs	r3, #167	; 0xa7
    4872:	009b      	lsls	r3, r3, #2
    4874:	52f2      	strh	r2, [r6, r3]
    4876:	2396      	movs	r3, #150	; 0x96
    4878:	00db      	lsls	r3, r3, #3
    487a:	5cf3      	ldrb	r3, [r6, r3]
    487c:	2b00      	cmp	r3, #0
    487e:	d106      	bne.n	488e <process_thread_mqtt_process+0xb22>
    4880:	1d30      	adds	r0, r6, #4
    4882:	4bb0      	ldr	r3, [pc, #704]	; (4b44 <process_thread_mqtt_process+0xdd8>)
    4884:	4798      	blx	r3
    4886:	2800      	cmp	r0, #0
    4888:	d101      	bne.n	488e <process_thread_mqtt_process+0xb22>
    488a:	f000 fd74 	bl	5376 <process_thread_mqtt_process+0x160a>

  reset_packet(&conn->in_packet);
    488e:	2395      	movs	r3, #149	; 0x95
    4890:	00db      	lsls	r3, r3, #3
    4892:	18f0      	adds	r0, r6, r3
    4894:	4ba8      	ldr	r3, [pc, #672]	; (4b38 <process_thread_mqtt_process+0xdcc>)
    4896:	4798      	blx	r3

  conn->waiting_for_pingresp = 0;
    4898:	2200      	movs	r2, #0
    489a:	2338      	movs	r3, #56	; 0x38
    489c:	54f2      	strb	r2, [r6, r3]

  PT_END(pt);
    489e:	2200      	movs	r2, #0
    48a0:	23a7      	movs	r3, #167	; 0xa7
    48a2:	009b      	lsls	r3, r3, #2
    48a4:	52f2      	strh	r2, [r6, r3]
              conn->state == MQTT_CONN_STATE_CONNECTED_TO_BROKER) {
          PT_MQTT_WAIT_SEND();
        }
      }
    }
    if(ev == mqtt_do_subscribe_event) {
    48a6:	230f      	movs	r3, #15
    48a8:	446b      	add	r3, sp
    48aa:	781a      	ldrb	r2, [r3, #0]
    48ac:	4ba6      	ldr	r3, [pc, #664]	; (4b48 <process_thread_mqtt_process+0xddc>)
    48ae:	781b      	ldrb	r3, [r3, #0]
    48b0:	429a      	cmp	r2, r3
    48b2:	d000      	beq.n	48b6 <process_thread_mqtt_process+0xb4a>
    48b4:	e1b1      	b.n	4c1a <process_thread_mqtt_process+0xeae>
      conn = data;
    48b6:	4ea5      	ldr	r6, [pc, #660]	; (4b4c <process_thread_mqtt_process+0xde0>)
    48b8:	6035      	str	r5, [r6, #0]
      DBG("MQTT - Got mqtt_do_subscribe_mqtt_event!\n\r");
    48ba:	48a5      	ldr	r0, [pc, #660]	; (4b50 <process_thread_mqtt_process+0xde4>)
    48bc:	4ba5      	ldr	r3, [pc, #660]	; (4b54 <process_thread_mqtt_process+0xde8>)
    48be:	4798      	blx	r3

      if(conn->out_buffer_sent == 1 &&
    48c0:	6833      	ldr	r3, [r6, #0]
    48c2:	229d      	movs	r2, #157	; 0x9d
    48c4:	0092      	lsls	r2, r2, #2
    48c6:	5c9a      	ldrb	r2, [r3, r2]
    48c8:	2a01      	cmp	r2, #1
    48ca:	d000      	beq.n	48ce <process_thread_mqtt_process+0xb62>
    48cc:	e1a5      	b.n	4c1a <process_thread_mqtt_process+0xeae>
         conn->state == MQTT_CONN_STATE_CONNECTED_TO_BROKER) {
    48ce:	325f      	adds	r2, #95	; 0x5f
    }
    if(ev == mqtt_do_subscribe_event) {
      conn = data;
      DBG("MQTT - Got mqtt_do_subscribe_mqtt_event!\n\r");

      if(conn->out_buffer_sent == 1 &&
    48d0:	5c9a      	ldrb	r2, [r3, r2]
    48d2:	2a08      	cmp	r2, #8
    48d4:	d000      	beq.n	48d8 <process_thread_mqtt_process+0xb6c>
    48d6:	e1a0      	b.n	4c1a <process_thread_mqtt_process+0xeae>
         conn->state == MQTT_CONN_STATE_CONNECTED_TO_BROKER) {
        PT_INIT(&conn->out_proto_thread);
    48d8:	2100      	movs	r1, #0
    48da:	22a7      	movs	r2, #167	; 0xa7
    48dc:	0092      	lsls	r2, r2, #2
    48de:	5299      	strh	r1, [r3, r2]
        while(subscribe_pt(&conn->out_proto_thread, conn) < PT_EXITED &&
    48e0:	e02b      	b.n	493a <process_thread_mqtt_process+0xbce>
              conn->state == MQTT_CONN_STATE_CONNECTED_TO_BROKER) {
          PT_MQTT_WAIT_SEND();
    48e2:	4b9d      	ldr	r3, [pc, #628]	; (4b58 <process_thread_mqtt_process+0xdec>)
    48e4:	7819      	ldrb	r1, [r3, #0]
    48e6:	4b9d      	ldr	r3, [pc, #628]	; (4b5c <process_thread_mqtt_process+0xdf0>)
    48e8:	6818      	ldr	r0, [r3, #0]
    48ea:	2200      	movs	r2, #0
    48ec:	4b9c      	ldr	r3, [pc, #624]	; (4b60 <process_thread_mqtt_process+0xdf4>)
    48ee:	4798      	blx	r3
    48f0:	4b9c      	ldr	r3, [pc, #624]	; (4b64 <process_thread_mqtt_process+0xdf8>)
    48f2:	8023      	strh	r3, [r4, #0]
    48f4:	2001      	movs	r0, #1
    48f6:	f000 fd62 	bl	53be <process_thread_mqtt_process+0x1652>
    48fa:	230f      	movs	r3, #15
    48fc:	446b      	add	r3, sp
    48fe:	7819      	ldrb	r1, [r3, #0]
    4900:	4b99      	ldr	r3, [pc, #612]	; (4b68 <process_thread_mqtt_process+0xdfc>)
    4902:	781b      	ldrb	r3, [r3, #0]
    4904:	428b      	cmp	r3, r1
    4906:	d10b      	bne.n	4920 <process_thread_mqtt_process+0xbb4>
    4908:	4b90      	ldr	r3, [pc, #576]	; (4b4c <process_thread_mqtt_process+0xde0>)
    490a:	681b      	ldr	r3, [r3, #0]
    490c:	210a      	movs	r1, #10
    490e:	2260      	movs	r2, #96	; 0x60
    4910:	5499      	strb	r1, [r3, r2]
    4912:	2100      	movs	r1, #0
    4914:	22a7      	movs	r2, #167	; 0xa7
    4916:	0092      	lsls	r2, r2, #2
    4918:	5299      	strh	r1, [r3, r2]
    491a:	2002      	movs	r0, #2
    491c:	f000 fd4f 	bl	53be <process_thread_mqtt_process+0x1652>
    4920:	4b92      	ldr	r3, [pc, #584]	; (4b6c <process_thread_mqtt_process+0xe00>)
    4922:	781b      	ldrb	r3, [r3, #0]
    4924:	428b      	cmp	r3, r1
    4926:	d808      	bhi.n	493a <process_thread_mqtt_process+0xbce>
    4928:	4b91      	ldr	r3, [pc, #580]	; (4b70 <process_thread_mqtt_process+0xe04>)
    492a:	781b      	ldrb	r3, [r3, #0]
    492c:	428b      	cmp	r3, r1
    492e:	d304      	bcc.n	493a <process_thread_mqtt_process+0xbce>
    4930:	4b8a      	ldr	r3, [pc, #552]	; (4b5c <process_thread_mqtt_process+0xdf0>)
    4932:	6818      	ldr	r0, [r3, #0]
    4934:	1c2a      	adds	r2, r5, #0
    4936:	4b8a      	ldr	r3, [pc, #552]	; (4b60 <process_thread_mqtt_process+0xdf4>)
    4938:	4798      	blx	r3
      DBG("MQTT - Got mqtt_do_subscribe_mqtt_event!\n\r");

      if(conn->out_buffer_sent == 1 &&
         conn->state == MQTT_CONN_STATE_CONNECTED_TO_BROKER) {
        PT_INIT(&conn->out_proto_thread);
        while(subscribe_pt(&conn->out_proto_thread, conn) < PT_EXITED &&
    493a:	4b84      	ldr	r3, [pc, #528]	; (4b4c <process_thread_mqtt_process+0xde0>)
    493c:	681e      	ldr	r6, [r3, #0]
}
/*---------------------------------------------------------------------------*/
static
PT_THREAD(subscribe_pt(struct pt *pt, struct mqtt_connection *conn))
{
  PT_BEGIN(pt);
    493e:	23a7      	movs	r3, #167	; 0xa7
    4940:	009b      	lsls	r3, r3, #2
    4942:	5af3      	ldrh	r3, [r6, r3]
    4944:	22ea      	movs	r2, #234	; 0xea
    4946:	32ff      	adds	r2, #255	; 0xff
    4948:	4293      	cmp	r3, r2
    494a:	d100      	bne.n	494e <process_thread_mqtt_process+0xbe2>
    494c:	e09c      	b.n	4a88 <process_thread_mqtt_process+0xd1c>
    494e:	d80f      	bhi.n	4970 <process_thread_mqtt_process+0xc04>
    4950:	22e4      	movs	r2, #228	; 0xe4
    4952:	32ff      	adds	r2, #255	; 0xff
    4954:	4293      	cmp	r3, r2
    4956:	d058      	beq.n	4a0a <process_thread_mqtt_process+0xc9e>
    4958:	d802      	bhi.n	4960 <process_thread_mqtt_process+0xbf4>
    495a:	2b00      	cmp	r3, #0
    495c:	d022      	beq.n	49a4 <process_thread_mqtt_process+0xc38>
    495e:	e158      	b.n	4c12 <process_thread_mqtt_process+0xea6>
    4960:	22f3      	movs	r2, #243	; 0xf3
    4962:	0052      	lsls	r2, r2, #1
    4964:	4293      	cmp	r3, r2
    4966:	d065      	beq.n	4a34 <process_thread_mqtt_process+0xcc8>
    4968:	3202      	adds	r2, #2
    496a:	4293      	cmp	r3, r2
    496c:	d079      	beq.n	4a62 <process_thread_mqtt_process+0xcf6>
    496e:	e150      	b.n	4c12 <process_thread_mqtt_process+0xea6>
    4970:	22f7      	movs	r2, #247	; 0xf7
    4972:	0052      	lsls	r2, r2, #1
    4974:	4293      	cmp	r3, r2
    4976:	d100      	bne.n	497a <process_thread_mqtt_process+0xc0e>
    4978:	e0c5      	b.n	4b06 <process_thread_mqtt_process+0xd9a>
    497a:	d809      	bhi.n	4990 <process_thread_mqtt_process+0xc24>
    497c:	22ec      	movs	r2, #236	; 0xec
    497e:	32ff      	adds	r2, #255	; 0xff
    4980:	4293      	cmp	r3, r2
    4982:	d100      	bne.n	4986 <process_thread_mqtt_process+0xc1a>
    4984:	e094      	b.n	4ab0 <process_thread_mqtt_process+0xd44>
    4986:	3201      	adds	r2, #1
    4988:	4293      	cmp	r3, r2
    498a:	d100      	bne.n	498e <process_thread_mqtt_process+0xc22>
    498c:	e0a6      	b.n	4adc <process_thread_mqtt_process+0xd70>
    498e:	e140      	b.n	4c12 <process_thread_mqtt_process+0xea6>
    4990:	22f0      	movs	r2, #240	; 0xf0
    4992:	32ff      	adds	r2, #255	; 0xff
    4994:	4293      	cmp	r3, r2
    4996:	d100      	bne.n	499a <process_thread_mqtt_process+0xc2e>
    4998:	e0fd      	b.n	4b96 <process_thread_mqtt_process+0xe2a>
    499a:	3209      	adds	r2, #9
    499c:	4293      	cmp	r3, r2
    499e:	d100      	bne.n	49a2 <process_thread_mqtt_process+0xc36>
    49a0:	e11a      	b.n	4bd8 <process_thread_mqtt_process+0xe6c>
    49a2:	e136      	b.n	4c12 <process_thread_mqtt_process+0xea6>

  DBG("MQTT - Sending subscribe message! topic %s topic_length %i\n\r",
    49a4:	27a3      	movs	r7, #163	; 0xa3
    49a6:	00bf      	lsls	r7, r7, #2
    49a8:	5bf2      	ldrh	r2, [r6, r7]
    49aa:	4872      	ldr	r0, [pc, #456]	; (4b74 <process_thread_mqtt_process+0xe08>)
    49ac:	23a2      	movs	r3, #162	; 0xa2
    49ae:	009b      	lsls	r3, r3, #2
    49b0:	58f1      	ldr	r1, [r6, r3]
    49b2:	4b68      	ldr	r3, [pc, #416]	; (4b54 <process_thread_mqtt_process+0xde8>)
    49b4:	4698      	mov	r8, r3
    49b6:	4798      	blx	r3
      conn->out_packet.topic,
      conn->out_packet.topic_length);
  DBG("MQTT - Buffer space is %i \n\r",
    49b8:	239d      	movs	r3, #157	; 0x9d
    49ba:	009b      	lsls	r3, r3, #2
    49bc:	18f3      	adds	r3, r6, r3
    49be:	6f32      	ldr	r2, [r6, #112]	; 0x70
    49c0:	1a99      	subs	r1, r3, r2
    49c2:	486d      	ldr	r0, [pc, #436]	; (4b78 <process_thread_mqtt_process+0xe0c>)
    49c4:	47c0      	blx	r8
      &conn->out_buffer[MQTT_TCP_OUTPUT_BUFF_SIZE] - conn->out_buffer_ptr);

  /* Set up FHDR */
  conn->out_packet.fhdr = MQTT_FHDR_MSG_TYPE_SUBSCRIBE | MQTT_FHDR_QOS_LEVEL_1;
    49c6:	2282      	movs	r2, #130	; 0x82
    49c8:	239e      	movs	r3, #158	; 0x9e
    49ca:	009b      	lsls	r3, r3, #2
    49cc:	54f2      	strb	r2, [r6, r3]
  conn->out_packet.remaining_length = MQTT_MID_SIZE +
    MQTT_STRING_LEN_SIZE +
    conn->out_packet.topic_length +
    49ce:	5bf2      	ldrh	r2, [r6, r7]
    49d0:	3205      	adds	r2, #5
  DBG("MQTT - Buffer space is %i \n\r",
      &conn->out_buffer[MQTT_TCP_OUTPUT_BUFF_SIZE] - conn->out_buffer_ptr);

  /* Set up FHDR */
  conn->out_packet.fhdr = MQTT_FHDR_MSG_TYPE_SUBSCRIBE | MQTT_FHDR_QOS_LEVEL_1;
  conn->out_packet.remaining_length = MQTT_MID_SIZE +
    49d2:	3304      	adds	r3, #4
    49d4:	50f2      	str	r2, [r6, r3]
    MQTT_STRING_LEN_SIZE +
    conn->out_packet.topic_length +
    MQTT_QOS_SIZE;
  encode_remaining_length(conn->out_packet.remaining_length_enc,
    49d6:	3304      	adds	r3, #4
    49d8:	18f0      	adds	r0, r6, r3
    49da:	3304      	adds	r3, #4
    49dc:	18f1      	adds	r1, r6, r3
    49de:	4b67      	ldr	r3, [pc, #412]	; (4b7c <process_thread_mqtt_process+0xe10>)
    49e0:	4798      	blx	r3
                          &conn->out_packet.remaining_length_enc_bytes,
                          conn->out_packet.remaining_length);
  if(conn->out_packet.remaining_length_enc_bytes > 4) {
    49e2:	23a1      	movs	r3, #161	; 0xa1
    49e4:	009b      	lsls	r3, r3, #2
    49e6:	5cf3      	ldrb	r3, [r6, r3]
    49e8:	2b04      	cmp	r3, #4
    49ea:	d915      	bls.n	4a18 <process_thread_mqtt_process+0xcac>
    call_event(conn, MQTT_EVENT_PROTOCOL_ERROR, NULL);
    49ec:	1c30      	adds	r0, r6, #0
    49ee:	2181      	movs	r1, #129	; 0x81
    49f0:	2200      	movs	r2, #0
    49f2:	4b63      	ldr	r3, [pc, #396]	; (4b80 <process_thread_mqtt_process+0xe14>)
    49f4:	4798      	blx	r3
    PRINTF("MQTT - Error, remaining length > 4 bytes\n\r");
    PT_EXIT(pt);
    49f6:	2200      	movs	r2, #0
    49f8:	23a7      	movs	r3, #167	; 0xa7
    49fa:	009b      	lsls	r3, r3, #2
    49fc:	52f2      	strh	r2, [r6, r3]
    49fe:	e10c      	b.n	4c1a <process_thread_mqtt_process+0xeae>
  }

  /* Write Fixed Header */
  PT_MQTT_WRITE_BYTE(conn, conn->out_packet.fhdr);
    4a00:	22e4      	movs	r2, #228	; 0xe4
    4a02:	32ff      	adds	r2, #255	; 0xff
    4a04:	23a7      	movs	r3, #167	; 0xa7
    4a06:	009b      	lsls	r3, r3, #2
    4a08:	52f2      	strh	r2, [r6, r3]
    4a0a:	239d      	movs	r3, #157	; 0x9d
    4a0c:	009b      	lsls	r3, r3, #2
    4a0e:	5cf3      	ldrb	r3, [r6, r3]
    4a10:	2b00      	cmp	r3, #0
    4a12:	d101      	bne.n	4a18 <process_thread_mqtt_process+0xcac>
    4a14:	f000 fcb9 	bl	538a <process_thread_mqtt_process+0x161e>
    4a18:	239e      	movs	r3, #158	; 0x9e
    4a1a:	009b      	lsls	r3, r3, #2
    4a1c:	5cf1      	ldrb	r1, [r6, r3]
    4a1e:	1c30      	adds	r0, r6, #0
    4a20:	4b43      	ldr	r3, [pc, #268]	; (4b30 <process_thread_mqtt_process+0xdc4>)
    4a22:	4798      	blx	r3
    4a24:	2800      	cmp	r0, #0
    4a26:	d1eb      	bne.n	4a00 <process_thread_mqtt_process+0xc94>
    4a28:	e00b      	b.n	4a42 <process_thread_mqtt_process+0xcd6>
  PT_MQTT_WRITE_BYTES(conn,
    4a2a:	22f3      	movs	r2, #243	; 0xf3
    4a2c:	0052      	lsls	r2, r2, #1
    4a2e:	23a7      	movs	r3, #167	; 0xa7
    4a30:	009b      	lsls	r3, r3, #2
    4a32:	52f2      	strh	r2, [r6, r3]
    4a34:	239d      	movs	r3, #157	; 0x9d
    4a36:	009b      	lsls	r3, r3, #2
    4a38:	5cf3      	ldrb	r3, [r6, r3]
    4a3a:	2b00      	cmp	r3, #0
    4a3c:	d101      	bne.n	4a42 <process_thread_mqtt_process+0xcd6>
    4a3e:	f000 fca4 	bl	538a <process_thread_mqtt_process+0x161e>
    4a42:	23a0      	movs	r3, #160	; 0xa0
    4a44:	009b      	lsls	r3, r3, #2
    4a46:	18f1      	adds	r1, r6, r3
    4a48:	3304      	adds	r3, #4
    4a4a:	5cf2      	ldrb	r2, [r6, r3]
    4a4c:	1c30      	adds	r0, r6, #0
    4a4e:	4b4d      	ldr	r3, [pc, #308]	; (4b84 <process_thread_mqtt_process+0xe18>)
    4a50:	4798      	blx	r3
    4a52:	2800      	cmp	r0, #0
    4a54:	d1e9      	bne.n	4a2a <process_thread_mqtt_process+0xcbe>
    4a56:	e00b      	b.n	4a70 <process_thread_mqtt_process+0xd04>
                      conn->out_packet.remaining_length_enc,
                      conn->out_packet.remaining_length_enc_bytes);
  /* Write Variable Header */
  PT_MQTT_WRITE_BYTE(conn, (conn->out_packet.mid << 8));
    4a58:	22f4      	movs	r2, #244	; 0xf4
    4a5a:	0052      	lsls	r2, r2, #1
    4a5c:	23a7      	movs	r3, #167	; 0xa7
    4a5e:	009b      	lsls	r3, r3, #2
    4a60:	52f2      	strh	r2, [r6, r3]
    4a62:	239d      	movs	r3, #157	; 0x9d
    4a64:	009b      	lsls	r3, r3, #2
    4a66:	5cf3      	ldrb	r3, [r6, r3]
    4a68:	2b00      	cmp	r3, #0
    4a6a:	d101      	bne.n	4a70 <process_thread_mqtt_process+0xd04>
    4a6c:	f000 fc8d 	bl	538a <process_thread_mqtt_process+0x161e>
    4a70:	1c30      	adds	r0, r6, #0
    4a72:	2100      	movs	r1, #0
    4a74:	4b2e      	ldr	r3, [pc, #184]	; (4b30 <process_thread_mqtt_process+0xdc4>)
    4a76:	4798      	blx	r3
    4a78:	2800      	cmp	r0, #0
    4a7a:	d1ed      	bne.n	4a58 <process_thread_mqtt_process+0xcec>
    4a7c:	e00b      	b.n	4a96 <process_thread_mqtt_process+0xd2a>
  PT_MQTT_WRITE_BYTE(conn, (conn->out_packet.mid & 0x00FF));
    4a7e:	22ea      	movs	r2, #234	; 0xea
    4a80:	32ff      	adds	r2, #255	; 0xff
    4a82:	23a7      	movs	r3, #167	; 0xa7
    4a84:	009b      	lsls	r3, r3, #2
    4a86:	52f2      	strh	r2, [r6, r3]
    4a88:	239d      	movs	r3, #157	; 0x9d
    4a8a:	009b      	lsls	r3, r3, #2
    4a8c:	5cf3      	ldrb	r3, [r6, r3]
    4a8e:	2b00      	cmp	r3, #0
    4a90:	d101      	bne.n	4a96 <process_thread_mqtt_process+0xd2a>
    4a92:	f000 fc7a 	bl	538a <process_thread_mqtt_process+0x161e>
    4a96:	4b3c      	ldr	r3, [pc, #240]	; (4b88 <process_thread_mqtt_process+0xe1c>)
    4a98:	5cf1      	ldrb	r1, [r6, r3]
    4a9a:	1c30      	adds	r0, r6, #0
    4a9c:	4b24      	ldr	r3, [pc, #144]	; (4b30 <process_thread_mqtt_process+0xdc4>)
    4a9e:	4798      	blx	r3
    4aa0:	2800      	cmp	r0, #0
    4aa2:	d1ec      	bne.n	4a7e <process_thread_mqtt_process+0xd12>
    4aa4:	e00b      	b.n	4abe <process_thread_mqtt_process+0xd52>
  /* Write Payload */
  PT_MQTT_WRITE_BYTE(conn, (conn->out_packet.topic_length >> 8));
    4aa6:	22ec      	movs	r2, #236	; 0xec
    4aa8:	32ff      	adds	r2, #255	; 0xff
    4aaa:	23a7      	movs	r3, #167	; 0xa7
    4aac:	009b      	lsls	r3, r3, #2
    4aae:	52f2      	strh	r2, [r6, r3]
    4ab0:	239d      	movs	r3, #157	; 0x9d
    4ab2:	009b      	lsls	r3, r3, #2
    4ab4:	5cf3      	ldrb	r3, [r6, r3]
    4ab6:	2b00      	cmp	r3, #0
    4ab8:	d101      	bne.n	4abe <process_thread_mqtt_process+0xd52>
    4aba:	f000 fc66 	bl	538a <process_thread_mqtt_process+0x161e>
    4abe:	23a3      	movs	r3, #163	; 0xa3
    4ac0:	009b      	lsls	r3, r3, #2
    4ac2:	5af1      	ldrh	r1, [r6, r3]
    4ac4:	0a09      	lsrs	r1, r1, #8
    4ac6:	1c30      	adds	r0, r6, #0
    4ac8:	4b19      	ldr	r3, [pc, #100]	; (4b30 <process_thread_mqtt_process+0xdc4>)
    4aca:	4798      	blx	r3
    4acc:	2800      	cmp	r0, #0
    4ace:	d1ea      	bne.n	4aa6 <process_thread_mqtt_process+0xd3a>
    4ad0:	e00b      	b.n	4aea <process_thread_mqtt_process+0xd7e>
  PT_MQTT_WRITE_BYTE(conn, (conn->out_packet.topic_length & 0x00FF));
    4ad2:	22f6      	movs	r2, #246	; 0xf6
    4ad4:	0052      	lsls	r2, r2, #1
    4ad6:	23a7      	movs	r3, #167	; 0xa7
    4ad8:	009b      	lsls	r3, r3, #2
    4ada:	52f2      	strh	r2, [r6, r3]
    4adc:	239d      	movs	r3, #157	; 0x9d
    4ade:	009b      	lsls	r3, r3, #2
    4ae0:	5cf3      	ldrb	r3, [r6, r3]
    4ae2:	2b00      	cmp	r3, #0
    4ae4:	d101      	bne.n	4aea <process_thread_mqtt_process+0xd7e>
    4ae6:	f000 fc50 	bl	538a <process_thread_mqtt_process+0x161e>
    4aea:	23a3      	movs	r3, #163	; 0xa3
    4aec:	009b      	lsls	r3, r3, #2
    4aee:	5cf1      	ldrb	r1, [r6, r3]
    4af0:	1c30      	adds	r0, r6, #0
    4af2:	4b0f      	ldr	r3, [pc, #60]	; (4b30 <process_thread_mqtt_process+0xdc4>)
    4af4:	4798      	blx	r3
    4af6:	2800      	cmp	r0, #0
    4af8:	d1eb      	bne.n	4ad2 <process_thread_mqtt_process+0xd66>
    4afa:	e00b      	b.n	4b14 <process_thread_mqtt_process+0xda8>
  PT_MQTT_WRITE_BYTES(conn, (uint8_t *)conn->out_packet.topic,
    4afc:	22f7      	movs	r2, #247	; 0xf7
    4afe:	0052      	lsls	r2, r2, #1
    4b00:	23a7      	movs	r3, #167	; 0xa7
    4b02:	009b      	lsls	r3, r3, #2
    4b04:	52f2      	strh	r2, [r6, r3]
    4b06:	239d      	movs	r3, #157	; 0x9d
    4b08:	009b      	lsls	r3, r3, #2
    4b0a:	5cf3      	ldrb	r3, [r6, r3]
    4b0c:	2b00      	cmp	r3, #0
    4b0e:	d101      	bne.n	4b14 <process_thread_mqtt_process+0xda8>
    4b10:	f000 fc3b 	bl	538a <process_thread_mqtt_process+0x161e>
    4b14:	23a3      	movs	r3, #163	; 0xa3
    4b16:	009b      	lsls	r3, r3, #2
    4b18:	5af2      	ldrh	r2, [r6, r3]
    4b1a:	1c30      	adds	r0, r6, #0
    4b1c:	3b04      	subs	r3, #4
    4b1e:	58f1      	ldr	r1, [r6, r3]
    4b20:	4b18      	ldr	r3, [pc, #96]	; (4b84 <process_thread_mqtt_process+0xe18>)
    4b22:	4798      	blx	r3
    4b24:	2800      	cmp	r0, #0
    4b26:	d1e9      	bne.n	4afc <process_thread_mqtt_process+0xd90>
    4b28:	e03c      	b.n	4ba4 <process_thread_mqtt_process+0xe38>
    4b2a:	46c0      	nop			; (mov r8, r8)
    4b2c:	000002a6 	.word	0x000002a6
    4b30:	00003aa9 	.word	0x00003aa9
    4b34:	00003a61 	.word	0x00003a61
    4b38:	00003295 	.word	0x00003295
    4b3c:	0000ed6d 	.word	0x0000ed6d
    4b40:	000002b1 	.word	0x000002b1
    4b44:	0000ed9d 	.word	0x0000ed9d
    4b48:	2000037c 	.word	0x2000037c
    4b4c:	20000380 	.word	0x20000380
    4b50:	00012840 	.word	0x00012840
    4b54:	00010b79 	.word	0x00010b79
    4b58:	20000379 	.word	0x20000379
    4b5c:	20001d2c 	.word	0x20001d2c
    4b60:	0000ec09 	.word	0x0000ec09
    4b64:	00000499 	.word	0x00000499
    4b68:	2000037b 	.word	0x2000037b
    4b6c:	20000375 	.word	0x20000375
    4b70:	20000376 	.word	0x20000376
    4b74:	0001286c 	.word	0x0001286c
    4b78:	000128ac 	.word	0x000128ac
    4b7c:	00003201 	.word	0x00003201
    4b80:	00003275 	.word	0x00003275
    4b84:	00003ae9 	.word	0x00003ae9
    4b88:	00000286 	.word	0x00000286
                      conn->out_packet.topic_length);
  PT_MQTT_WRITE_BYTE(conn, conn->out_packet.qos);
    4b8c:	22f0      	movs	r2, #240	; 0xf0
    4b8e:	32ff      	adds	r2, #255	; 0xff
    4b90:	23a7      	movs	r3, #167	; 0xa7
    4b92:	009b      	lsls	r3, r3, #2
    4b94:	52f2      	strh	r2, [r6, r3]
    4b96:	239d      	movs	r3, #157	; 0x9d
    4b98:	009b      	lsls	r3, r3, #2
    4b9a:	5cf3      	ldrb	r3, [r6, r3]
    4b9c:	2b00      	cmp	r3, #0
    4b9e:	d101      	bne.n	4ba4 <process_thread_mqtt_process+0xe38>
    4ba0:	f000 fbf3 	bl	538a <process_thread_mqtt_process+0x161e>
    4ba4:	23a6      	movs	r3, #166	; 0xa6
    4ba6:	009b      	lsls	r3, r3, #2
    4ba8:	5cf1      	ldrb	r1, [r6, r3]
    4baa:	1c30      	adds	r0, r6, #0
    4bac:	4ba6      	ldr	r3, [pc, #664]	; (4e48 <process_thread_mqtt_process+0x10dc>)
    4bae:	4798      	blx	r3
    4bb0:	2800      	cmp	r0, #0
    4bb2:	d1eb      	bne.n	4b8c <process_thread_mqtt_process+0xe20>

  /* Send out buffer */
  send_out_buffer(conn);
    4bb4:	1c30      	adds	r0, r6, #0
    4bb6:	4ba5      	ldr	r3, [pc, #660]	; (4e4c <process_thread_mqtt_process+0x10e0>)
    4bb8:	4798      	blx	r3
  timer_set(&conn->t, RESPONSE_WAIT_TIMEOUT);
    4bba:	1d30      	adds	r0, r6, #4
    4bbc:	21a0      	movs	r1, #160	; 0xa0
    4bbe:	00c9      	lsls	r1, r1, #3
    4bc0:	4ba3      	ldr	r3, [pc, #652]	; (4e50 <process_thread_mqtt_process+0x10e4>)
    4bc2:	4798      	blx	r3

  /* Wait for SUBACK. */
  reset_packet(&conn->in_packet);
    4bc4:	2395      	movs	r3, #149	; 0x95
    4bc6:	00db      	lsls	r3, r3, #3
    4bc8:	18f0      	adds	r0, r6, r3
    4bca:	4ba2      	ldr	r3, [pc, #648]	; (4e54 <process_thread_mqtt_process+0x10e8>)
    4bcc:	4798      	blx	r3
  PT_WAIT_UNTIL(pt, conn->out_packet.qos_state == MQTT_QOS_STATE_GOT_ACK ||
    4bce:	22fc      	movs	r2, #252	; 0xfc
    4bd0:	0052      	lsls	r2, r2, #1
    4bd2:	23a7      	movs	r3, #167	; 0xa7
    4bd4:	009b      	lsls	r3, r3, #2
    4bd6:	52f2      	strh	r2, [r6, r3]
    4bd8:	4b9f      	ldr	r3, [pc, #636]	; (4e58 <process_thread_mqtt_process+0x10ec>)
    4bda:	5cf3      	ldrb	r3, [r6, r3]
    4bdc:	2b01      	cmp	r3, #1
    4bde:	d005      	beq.n	4bec <process_thread_mqtt_process+0xe80>
    4be0:	1d30      	adds	r0, r6, #4
    4be2:	4b9e      	ldr	r3, [pc, #632]	; (4e5c <process_thread_mqtt_process+0x10f0>)
    4be4:	4798      	blx	r3
    4be6:	2800      	cmp	r0, #0
    4be8:	d100      	bne.n	4bec <process_thread_mqtt_process+0xe80>
    4bea:	e3ce      	b.n	538a <process_thread_mqtt_process+0x161e>
                timer_expired(&conn->t));

  if(timer_expired(&conn->t)) {
    4bec:	1d30      	adds	r0, r6, #4
    4bee:	4b9b      	ldr	r3, [pc, #620]	; (4e5c <process_thread_mqtt_process+0x10f0>)
    4bf0:	4798      	blx	r3
    4bf2:	2800      	cmp	r0, #0
    4bf4:	d002      	beq.n	4bfc <process_thread_mqtt_process+0xe90>
    DBG("Timeout waiting for SUBACK\n\r");
    4bf6:	489a      	ldr	r0, [pc, #616]	; (4e60 <process_thread_mqtt_process+0x10f4>)
    4bf8:	4b9a      	ldr	r3, [pc, #616]	; (4e64 <process_thread_mqtt_process+0x10f8>)
    4bfa:	4798      	blx	r3
  }
  reset_packet(&conn->in_packet);
    4bfc:	2395      	movs	r3, #149	; 0x95
    4bfe:	00db      	lsls	r3, r3, #3
    4c00:	18f0      	adds	r0, r6, r3
    4c02:	4b94      	ldr	r3, [pc, #592]	; (4e54 <process_thread_mqtt_process+0x10e8>)
    4c04:	4798      	blx	r3

  /* This is clear after the entire transaction is complete */
  conn->out_queue_full = 0;
    4c06:	2200      	movs	r2, #0
    4c08:	236a      	movs	r3, #106	; 0x6a
    4c0a:	54f2      	strb	r2, [r6, r3]

  DBG("MQTT - Done in send_subscribe!\n\r");
    4c0c:	4896      	ldr	r0, [pc, #600]	; (4e68 <process_thread_mqtt_process+0x10fc>)
    4c0e:	4b95      	ldr	r3, [pc, #596]	; (4e64 <process_thread_mqtt_process+0x10f8>)
    4c10:	4798      	blx	r3

  PT_END(pt);
    4c12:	2200      	movs	r2, #0
    4c14:	23a7      	movs	r3, #167	; 0xa7
    4c16:	009b      	lsls	r3, r3, #2
    4c18:	52f2      	strh	r2, [r6, r3]
              conn->state == MQTT_CONN_STATE_CONNECTED_TO_BROKER) {
          PT_MQTT_WAIT_SEND();
        }
      }
    }
    if(ev == mqtt_do_unsubscribe_event) {
    4c1a:	230f      	movs	r3, #15
    4c1c:	446b      	add	r3, sp
    4c1e:	781a      	ldrb	r2, [r3, #0]
    4c20:	4b92      	ldr	r3, [pc, #584]	; (4e6c <process_thread_mqtt_process+0x1100>)
    4c22:	781b      	ldrb	r3, [r3, #0]
    4c24:	429a      	cmp	r2, r3
    4c26:	d000      	beq.n	4c2a <process_thread_mqtt_process+0xebe>
    4c28:	e193      	b.n	4f52 <process_thread_mqtt_process+0x11e6>
      conn = data;
    4c2a:	4e91      	ldr	r6, [pc, #580]	; (4e70 <process_thread_mqtt_process+0x1104>)
    4c2c:	6035      	str	r5, [r6, #0]
      DBG("MQTT - Got mqtt_do_unsubscribe_mqtt_event!\n\r");
    4c2e:	4891      	ldr	r0, [pc, #580]	; (4e74 <process_thread_mqtt_process+0x1108>)
    4c30:	4b8c      	ldr	r3, [pc, #560]	; (4e64 <process_thread_mqtt_process+0x10f8>)
    4c32:	4798      	blx	r3

      if(conn->out_buffer_sent == 1 &&
    4c34:	6833      	ldr	r3, [r6, #0]
    4c36:	229d      	movs	r2, #157	; 0x9d
    4c38:	0092      	lsls	r2, r2, #2
    4c3a:	5c9a      	ldrb	r2, [r3, r2]
    4c3c:	2a01      	cmp	r2, #1
    4c3e:	d000      	beq.n	4c42 <process_thread_mqtt_process+0xed6>
    4c40:	e187      	b.n	4f52 <process_thread_mqtt_process+0x11e6>
         conn->state == MQTT_CONN_STATE_CONNECTED_TO_BROKER) {
    4c42:	325f      	adds	r2, #95	; 0x5f
    }
    if(ev == mqtt_do_unsubscribe_event) {
      conn = data;
      DBG("MQTT - Got mqtt_do_unsubscribe_mqtt_event!\n\r");

      if(conn->out_buffer_sent == 1 &&
    4c44:	5c9a      	ldrb	r2, [r3, r2]
    4c46:	2a08      	cmp	r2, #8
    4c48:	d000      	beq.n	4c4c <process_thread_mqtt_process+0xee0>
    4c4a:	e182      	b.n	4f52 <process_thread_mqtt_process+0x11e6>
         conn->state == MQTT_CONN_STATE_CONNECTED_TO_BROKER) {
        PT_INIT(&conn->out_proto_thread);
    4c4c:	2100      	movs	r1, #0
    4c4e:	22a7      	movs	r2, #167	; 0xa7
    4c50:	0092      	lsls	r2, r2, #2
    4c52:	5299      	strh	r1, [r3, r2]
        while(unsubscribe_pt(&conn->out_proto_thread, conn) < PT_EXITED &&
    4c54:	e029      	b.n	4caa <process_thread_mqtt_process+0xf3e>
              conn->state == MQTT_CONN_STATE_CONNECTED_TO_BROKER) {
          PT_MQTT_WAIT_SEND();
    4c56:	4b88      	ldr	r3, [pc, #544]	; (4e78 <process_thread_mqtt_process+0x110c>)
    4c58:	7819      	ldrb	r1, [r3, #0]
    4c5a:	4b88      	ldr	r3, [pc, #544]	; (4e7c <process_thread_mqtt_process+0x1110>)
    4c5c:	6818      	ldr	r0, [r3, #0]
    4c5e:	2200      	movs	r2, #0
    4c60:	4b87      	ldr	r3, [pc, #540]	; (4e80 <process_thread_mqtt_process+0x1114>)
    4c62:	4798      	blx	r3
    4c64:	4b87      	ldr	r3, [pc, #540]	; (4e84 <process_thread_mqtt_process+0x1118>)
    4c66:	8023      	strh	r3, [r4, #0]
    4c68:	2001      	movs	r0, #1
    4c6a:	e3a8      	b.n	53be <process_thread_mqtt_process+0x1652>
    4c6c:	230f      	movs	r3, #15
    4c6e:	446b      	add	r3, sp
    4c70:	7819      	ldrb	r1, [r3, #0]
    4c72:	4b85      	ldr	r3, [pc, #532]	; (4e88 <process_thread_mqtt_process+0x111c>)
    4c74:	781b      	ldrb	r3, [r3, #0]
    4c76:	428b      	cmp	r3, r1
    4c78:	d10a      	bne.n	4c90 <process_thread_mqtt_process+0xf24>
    4c7a:	4b7d      	ldr	r3, [pc, #500]	; (4e70 <process_thread_mqtt_process+0x1104>)
    4c7c:	681b      	ldr	r3, [r3, #0]
    4c7e:	210a      	movs	r1, #10
    4c80:	2260      	movs	r2, #96	; 0x60
    4c82:	5499      	strb	r1, [r3, r2]
    4c84:	2100      	movs	r1, #0
    4c86:	22a7      	movs	r2, #167	; 0xa7
    4c88:	0092      	lsls	r2, r2, #2
    4c8a:	5299      	strh	r1, [r3, r2]
    4c8c:	2002      	movs	r0, #2
    4c8e:	e396      	b.n	53be <process_thread_mqtt_process+0x1652>
    4c90:	4b7e      	ldr	r3, [pc, #504]	; (4e8c <process_thread_mqtt_process+0x1120>)
    4c92:	781b      	ldrb	r3, [r3, #0]
    4c94:	428b      	cmp	r3, r1
    4c96:	d808      	bhi.n	4caa <process_thread_mqtt_process+0xf3e>
    4c98:	4b7d      	ldr	r3, [pc, #500]	; (4e90 <process_thread_mqtt_process+0x1124>)
    4c9a:	781b      	ldrb	r3, [r3, #0]
    4c9c:	428b      	cmp	r3, r1
    4c9e:	d304      	bcc.n	4caa <process_thread_mqtt_process+0xf3e>
    4ca0:	4b76      	ldr	r3, [pc, #472]	; (4e7c <process_thread_mqtt_process+0x1110>)
    4ca2:	6818      	ldr	r0, [r3, #0]
    4ca4:	1c2a      	adds	r2, r5, #0
    4ca6:	4b76      	ldr	r3, [pc, #472]	; (4e80 <process_thread_mqtt_process+0x1114>)
    4ca8:	4798      	blx	r3
      DBG("MQTT - Got mqtt_do_unsubscribe_mqtt_event!\n\r");

      if(conn->out_buffer_sent == 1 &&
         conn->state == MQTT_CONN_STATE_CONNECTED_TO_BROKER) {
        PT_INIT(&conn->out_proto_thread);
        while(unsubscribe_pt(&conn->out_proto_thread, conn) < PT_EXITED &&
    4caa:	4b71      	ldr	r3, [pc, #452]	; (4e70 <process_thread_mqtt_process+0x1104>)
    4cac:	681e      	ldr	r6, [r3, #0]
}
/*---------------------------------------------------------------------------*/
static
PT_THREAD(unsubscribe_pt(struct pt *pt, struct mqtt_connection *conn))
{
  PT_BEGIN(pt);
    4cae:	23a7      	movs	r3, #167	; 0xa7
    4cb0:	009b      	lsls	r3, r3, #2
    4cb2:	5af3      	ldrh	r3, [r6, r3]
    4cb4:	4a77      	ldr	r2, [pc, #476]	; (4e94 <process_thread_mqtt_process+0x1128>)
    4cb6:	4293      	cmp	r3, r2
    4cb8:	d100      	bne.n	4cbc <process_thread_mqtt_process+0xf50>
    4cba:	e08f      	b.n	4ddc <process_thread_mqtt_process+0x1070>
    4cbc:	d80e      	bhi.n	4cdc <process_thread_mqtt_process+0xf70>
    4cbe:	4a76      	ldr	r2, [pc, #472]	; (4e98 <process_thread_mqtt_process+0x112c>)
    4cc0:	4293      	cmp	r3, r2
    4cc2:	d051      	beq.n	4d68 <process_thread_mqtt_process+0xffc>
    4cc4:	d802      	bhi.n	4ccc <process_thread_mqtt_process+0xf60>
    4cc6:	2b00      	cmp	r3, #0
    4cc8:	d01c      	beq.n	4d04 <process_thread_mqtt_process+0xf98>
    4cca:	e13e      	b.n	4f4a <process_thread_mqtt_process+0x11de>
    4ccc:	2289      	movs	r2, #137	; 0x89
    4cce:	0092      	lsls	r2, r2, #2
    4cd0:	4293      	cmp	r3, r2
    4cd2:	d05d      	beq.n	4d90 <process_thread_mqtt_process+0x1024>
    4cd4:	4a71      	ldr	r2, [pc, #452]	; (4e9c <process_thread_mqtt_process+0x1130>)
    4cd6:	4293      	cmp	r3, r2
    4cd8:	d06f      	beq.n	4dba <process_thread_mqtt_process+0x104e>
    4cda:	e136      	b.n	4f4a <process_thread_mqtt_process+0x11de>
    4cdc:	4a70      	ldr	r2, [pc, #448]	; (4ea0 <process_thread_mqtt_process+0x1134>)
    4cde:	4293      	cmp	r3, r2
    4ce0:	d100      	bne.n	4ce4 <process_thread_mqtt_process+0xf78>
    4ce2:	e0a1      	b.n	4e28 <process_thread_mqtt_process+0x10bc>
    4ce4:	d804      	bhi.n	4cf0 <process_thread_mqtt_process+0xf84>
    4ce6:	4a6f      	ldr	r2, [pc, #444]	; (4ea4 <process_thread_mqtt_process+0x1138>)
    4ce8:	4293      	cmp	r3, r2
    4cea:	d100      	bne.n	4cee <process_thread_mqtt_process+0xf82>
    4cec:	e088      	b.n	4e00 <process_thread_mqtt_process+0x1094>
    4cee:	e12c      	b.n	4f4a <process_thread_mqtt_process+0x11de>
    4cf0:	228b      	movs	r2, #139	; 0x8b
    4cf2:	0092      	lsls	r2, r2, #2
    4cf4:	4293      	cmp	r3, r2
    4cf6:	d100      	bne.n	4cfa <process_thread_mqtt_process+0xf8e>
    4cf8:	e0e9      	b.n	4ece <process_thread_mqtt_process+0x1162>
    4cfa:	4a6b      	ldr	r2, [pc, #428]	; (4ea8 <process_thread_mqtt_process+0x113c>)
    4cfc:	4293      	cmp	r3, r2
    4cfe:	d100      	bne.n	4d02 <process_thread_mqtt_process+0xf96>
    4d00:	e106      	b.n	4f10 <process_thread_mqtt_process+0x11a4>
    4d02:	e122      	b.n	4f4a <process_thread_mqtt_process+0x11de>

  DBG("MQTT - Sending unsubscribe message on topic %s topic_length %i\n\r",
    4d04:	27a3      	movs	r7, #163	; 0xa3
    4d06:	00bf      	lsls	r7, r7, #2
    4d08:	5bf2      	ldrh	r2, [r6, r7]
    4d0a:	4868      	ldr	r0, [pc, #416]	; (4eac <process_thread_mqtt_process+0x1140>)
    4d0c:	23a2      	movs	r3, #162	; 0xa2
    4d0e:	009b      	lsls	r3, r3, #2
    4d10:	58f1      	ldr	r1, [r6, r3]
    4d12:	4b54      	ldr	r3, [pc, #336]	; (4e64 <process_thread_mqtt_process+0x10f8>)
    4d14:	4698      	mov	r8, r3
    4d16:	4798      	blx	r3
      conn->out_packet.topic,
      conn->out_packet.topic_length);
  DBG("MQTT - Buffer space is %i \n\r",
    4d18:	239d      	movs	r3, #157	; 0x9d
    4d1a:	009b      	lsls	r3, r3, #2
    4d1c:	18f3      	adds	r3, r6, r3
    4d1e:	6f32      	ldr	r2, [r6, #112]	; 0x70
    4d20:	1a99      	subs	r1, r3, r2
    4d22:	4863      	ldr	r0, [pc, #396]	; (4eb0 <process_thread_mqtt_process+0x1144>)
    4d24:	47c0      	blx	r8
      &conn->out_buffer[MQTT_TCP_OUTPUT_BUFF_SIZE] - conn->out_buffer_ptr);

  /* Set up FHDR */
  conn->out_packet.fhdr = MQTT_FHDR_MSG_TYPE_UNSUBSCRIBE |
    4d26:	22a2      	movs	r2, #162	; 0xa2
    4d28:	239e      	movs	r3, #158	; 0x9e
    4d2a:	009b      	lsls	r3, r3, #2
    4d2c:	54f2      	strb	r2, [r6, r3]
    MQTT_FHDR_QOS_LEVEL_1;
  conn->out_packet.remaining_length = MQTT_MID_SIZE +
    MQTT_STRING_LEN_SIZE +
    4d2e:	5bf2      	ldrh	r2, [r6, r7]
    4d30:	3204      	adds	r2, #4
      &conn->out_buffer[MQTT_TCP_OUTPUT_BUFF_SIZE] - conn->out_buffer_ptr);

  /* Set up FHDR */
  conn->out_packet.fhdr = MQTT_FHDR_MSG_TYPE_UNSUBSCRIBE |
    MQTT_FHDR_QOS_LEVEL_1;
  conn->out_packet.remaining_length = MQTT_MID_SIZE +
    4d32:	3304      	adds	r3, #4
    4d34:	50f2      	str	r2, [r6, r3]
    MQTT_STRING_LEN_SIZE +
    conn->out_packet.topic_length;
  encode_remaining_length(conn->out_packet.remaining_length_enc,
    4d36:	3304      	adds	r3, #4
    4d38:	18f0      	adds	r0, r6, r3
    4d3a:	3304      	adds	r3, #4
    4d3c:	18f1      	adds	r1, r6, r3
    4d3e:	4b5d      	ldr	r3, [pc, #372]	; (4eb4 <process_thread_mqtt_process+0x1148>)
    4d40:	4798      	blx	r3
                          &conn->out_packet.remaining_length_enc_bytes,
                          conn->out_packet.remaining_length);
  if(conn->out_packet.remaining_length_enc_bytes > 4) {
    4d42:	23a1      	movs	r3, #161	; 0xa1
    4d44:	009b      	lsls	r3, r3, #2
    4d46:	5cf3      	ldrb	r3, [r6, r3]
    4d48:	2b04      	cmp	r3, #4
    4d4a:	d913      	bls.n	4d74 <process_thread_mqtt_process+0x1008>
    call_event(conn, MQTT_EVENT_PROTOCOL_ERROR, NULL);
    4d4c:	1c30      	adds	r0, r6, #0
    4d4e:	2181      	movs	r1, #129	; 0x81
    4d50:	2200      	movs	r2, #0
    4d52:	4b59      	ldr	r3, [pc, #356]	; (4eb8 <process_thread_mqtt_process+0x114c>)
    4d54:	4798      	blx	r3
    PRINTF("MQTT - Error, remaining length > 4 bytes\n\r");
    PT_EXIT(pt);
    4d56:	2200      	movs	r2, #0
    4d58:	23a7      	movs	r3, #167	; 0xa7
    4d5a:	009b      	lsls	r3, r3, #2
    4d5c:	52f2      	strh	r2, [r6, r3]
    4d5e:	e0f8      	b.n	4f52 <process_thread_mqtt_process+0x11e6>
  }

  /* Write Fixed Header */
  PT_MQTT_WRITE_BYTE(conn, conn->out_packet.fhdr);
    4d60:	4a4d      	ldr	r2, [pc, #308]	; (4e98 <process_thread_mqtt_process+0x112c>)
    4d62:	23a7      	movs	r3, #167	; 0xa7
    4d64:	009b      	lsls	r3, r3, #2
    4d66:	52f2      	strh	r2, [r6, r3]
    4d68:	239d      	movs	r3, #157	; 0x9d
    4d6a:	009b      	lsls	r3, r3, #2
    4d6c:	5cf3      	ldrb	r3, [r6, r3]
    4d6e:	2b00      	cmp	r3, #0
    4d70:	d100      	bne.n	4d74 <process_thread_mqtt_process+0x1008>
    4d72:	e313      	b.n	539c <process_thread_mqtt_process+0x1630>
    4d74:	239e      	movs	r3, #158	; 0x9e
    4d76:	009b      	lsls	r3, r3, #2
    4d78:	5cf1      	ldrb	r1, [r6, r3]
    4d7a:	1c30      	adds	r0, r6, #0
    4d7c:	4b32      	ldr	r3, [pc, #200]	; (4e48 <process_thread_mqtt_process+0x10dc>)
    4d7e:	4798      	blx	r3
    4d80:	2800      	cmp	r0, #0
    4d82:	d1ed      	bne.n	4d60 <process_thread_mqtt_process+0xff4>
    4d84:	e00a      	b.n	4d9c <process_thread_mqtt_process+0x1030>
  PT_MQTT_WRITE_BYTES(conn, (uint8_t *)conn->out_packet.remaining_length_enc,
    4d86:	2289      	movs	r2, #137	; 0x89
    4d88:	0092      	lsls	r2, r2, #2
    4d8a:	23a7      	movs	r3, #167	; 0xa7
    4d8c:	009b      	lsls	r3, r3, #2
    4d8e:	52f2      	strh	r2, [r6, r3]
    4d90:	239d      	movs	r3, #157	; 0x9d
    4d92:	009b      	lsls	r3, r3, #2
    4d94:	5cf3      	ldrb	r3, [r6, r3]
    4d96:	2b00      	cmp	r3, #0
    4d98:	d100      	bne.n	4d9c <process_thread_mqtt_process+0x1030>
    4d9a:	e2ff      	b.n	539c <process_thread_mqtt_process+0x1630>
    4d9c:	23a0      	movs	r3, #160	; 0xa0
    4d9e:	009b      	lsls	r3, r3, #2
    4da0:	18f1      	adds	r1, r6, r3
    4da2:	3304      	adds	r3, #4
    4da4:	5cf2      	ldrb	r2, [r6, r3]
    4da6:	1c30      	adds	r0, r6, #0
    4da8:	4b44      	ldr	r3, [pc, #272]	; (4ebc <process_thread_mqtt_process+0x1150>)
    4daa:	4798      	blx	r3
    4dac:	2800      	cmp	r0, #0
    4dae:	d1ea      	bne.n	4d86 <process_thread_mqtt_process+0x101a>
    4db0:	e009      	b.n	4dc6 <process_thread_mqtt_process+0x105a>
                      conn->out_packet.remaining_length_enc_bytes);
  /* Write Variable Header */
  PT_MQTT_WRITE_BYTE(conn, (conn->out_packet.mid << 8));
    4db2:	4a3a      	ldr	r2, [pc, #232]	; (4e9c <process_thread_mqtt_process+0x1130>)
    4db4:	23a7      	movs	r3, #167	; 0xa7
    4db6:	009b      	lsls	r3, r3, #2
    4db8:	52f2      	strh	r2, [r6, r3]
    4dba:	239d      	movs	r3, #157	; 0x9d
    4dbc:	009b      	lsls	r3, r3, #2
    4dbe:	5cf3      	ldrb	r3, [r6, r3]
    4dc0:	2b00      	cmp	r3, #0
    4dc2:	d100      	bne.n	4dc6 <process_thread_mqtt_process+0x105a>
    4dc4:	e2ea      	b.n	539c <process_thread_mqtt_process+0x1630>
    4dc6:	1c30      	adds	r0, r6, #0
    4dc8:	2100      	movs	r1, #0
    4dca:	4b1f      	ldr	r3, [pc, #124]	; (4e48 <process_thread_mqtt_process+0x10dc>)
    4dcc:	4798      	blx	r3
    4dce:	2800      	cmp	r0, #0
    4dd0:	d1ef      	bne.n	4db2 <process_thread_mqtt_process+0x1046>
    4dd2:	e009      	b.n	4de8 <process_thread_mqtt_process+0x107c>
  PT_MQTT_WRITE_BYTE(conn, (conn->out_packet.mid & 0x00FF));
    4dd4:	4a2f      	ldr	r2, [pc, #188]	; (4e94 <process_thread_mqtt_process+0x1128>)
    4dd6:	23a7      	movs	r3, #167	; 0xa7
    4dd8:	009b      	lsls	r3, r3, #2
    4dda:	52f2      	strh	r2, [r6, r3]
    4ddc:	239d      	movs	r3, #157	; 0x9d
    4dde:	009b      	lsls	r3, r3, #2
    4de0:	5cf3      	ldrb	r3, [r6, r3]
    4de2:	2b00      	cmp	r3, #0
    4de4:	d100      	bne.n	4de8 <process_thread_mqtt_process+0x107c>
    4de6:	e2d9      	b.n	539c <process_thread_mqtt_process+0x1630>
    4de8:	4b35      	ldr	r3, [pc, #212]	; (4ec0 <process_thread_mqtt_process+0x1154>)
    4dea:	5cf1      	ldrb	r1, [r6, r3]
    4dec:	1c30      	adds	r0, r6, #0
    4dee:	4b16      	ldr	r3, [pc, #88]	; (4e48 <process_thread_mqtt_process+0x10dc>)
    4df0:	4798      	blx	r3
    4df2:	2800      	cmp	r0, #0
    4df4:	d1ee      	bne.n	4dd4 <process_thread_mqtt_process+0x1068>
    4df6:	e009      	b.n	4e0c <process_thread_mqtt_process+0x10a0>
  /* Write Payload */
  PT_MQTT_WRITE_BYTE(conn, (conn->out_packet.topic_length >> 8));
    4df8:	4a2a      	ldr	r2, [pc, #168]	; (4ea4 <process_thread_mqtt_process+0x1138>)
    4dfa:	23a7      	movs	r3, #167	; 0xa7
    4dfc:	009b      	lsls	r3, r3, #2
    4dfe:	52f2      	strh	r2, [r6, r3]
    4e00:	239d      	movs	r3, #157	; 0x9d
    4e02:	009b      	lsls	r3, r3, #2
    4e04:	5cf3      	ldrb	r3, [r6, r3]
    4e06:	2b00      	cmp	r3, #0
    4e08:	d100      	bne.n	4e0c <process_thread_mqtt_process+0x10a0>
    4e0a:	e2c7      	b.n	539c <process_thread_mqtt_process+0x1630>
    4e0c:	23a3      	movs	r3, #163	; 0xa3
    4e0e:	009b      	lsls	r3, r3, #2
    4e10:	5af1      	ldrh	r1, [r6, r3]
    4e12:	0a09      	lsrs	r1, r1, #8
    4e14:	1c30      	adds	r0, r6, #0
    4e16:	4b0c      	ldr	r3, [pc, #48]	; (4e48 <process_thread_mqtt_process+0x10dc>)
    4e18:	4798      	blx	r3
    4e1a:	2800      	cmp	r0, #0
    4e1c:	d1ec      	bne.n	4df8 <process_thread_mqtt_process+0x108c>
    4e1e:	e009      	b.n	4e34 <process_thread_mqtt_process+0x10c8>
  PT_MQTT_WRITE_BYTE(conn, (conn->out_packet.topic_length & 0x00FF));
    4e20:	4a1f      	ldr	r2, [pc, #124]	; (4ea0 <process_thread_mqtt_process+0x1134>)
    4e22:	23a7      	movs	r3, #167	; 0xa7
    4e24:	009b      	lsls	r3, r3, #2
    4e26:	52f2      	strh	r2, [r6, r3]
    4e28:	239d      	movs	r3, #157	; 0x9d
    4e2a:	009b      	lsls	r3, r3, #2
    4e2c:	5cf3      	ldrb	r3, [r6, r3]
    4e2e:	2b00      	cmp	r3, #0
    4e30:	d100      	bne.n	4e34 <process_thread_mqtt_process+0x10c8>
    4e32:	e2b3      	b.n	539c <process_thread_mqtt_process+0x1630>
    4e34:	23a3      	movs	r3, #163	; 0xa3
    4e36:	009b      	lsls	r3, r3, #2
    4e38:	5cf1      	ldrb	r1, [r6, r3]
    4e3a:	1c30      	adds	r0, r6, #0
    4e3c:	4b02      	ldr	r3, [pc, #8]	; (4e48 <process_thread_mqtt_process+0x10dc>)
    4e3e:	4798      	blx	r3
    4e40:	2800      	cmp	r0, #0
    4e42:	d1ed      	bne.n	4e20 <process_thread_mqtt_process+0x10b4>
    4e44:	e049      	b.n	4eda <process_thread_mqtt_process+0x116e>
    4e46:	46c0      	nop			; (mov r8, r8)
    4e48:	00003aa9 	.word	0x00003aa9
    4e4c:	00003a61 	.word	0x00003a61
    4e50:	0000ed6d 	.word	0x0000ed6d
    4e54:	00003295 	.word	0x00003295
    4e58:	00000299 	.word	0x00000299
    4e5c:	0000ed9d 	.word	0x0000ed9d
    4e60:	000128cc 	.word	0x000128cc
    4e64:	00010b79 	.word	0x00010b79
    4e68:	000128ec 	.word	0x000128ec
    4e6c:	20000384 	.word	0x20000384
    4e70:	20000380 	.word	0x20000380
    4e74:	00012910 	.word	0x00012910
    4e78:	20000379 	.word	0x20000379
    4e7c:	20001d2c 	.word	0x20001d2c
    4e80:	0000ec09 	.word	0x0000ec09
    4e84:	000004a6 	.word	0x000004a6
    4e88:	2000037b 	.word	0x2000037b
    4e8c:	20000375 	.word	0x20000375
    4e90:	20000376 	.word	0x20000376
    4e94:	00000227 	.word	0x00000227
    4e98:	00000222 	.word	0x00000222
    4e9c:	00000226 	.word	0x00000226
    4ea0:	0000022a 	.word	0x0000022a
    4ea4:	00000229 	.word	0x00000229
    4ea8:	00000235 	.word	0x00000235
    4eac:	00012940 	.word	0x00012940
    4eb0:	000128ac 	.word	0x000128ac
    4eb4:	00003201 	.word	0x00003201
    4eb8:	00003275 	.word	0x00003275
    4ebc:	00003ae9 	.word	0x00003ae9
    4ec0:	00000286 	.word	0x00000286
  PT_MQTT_WRITE_BYTES(conn, (uint8_t *)conn->out_packet.topic,
    4ec4:	228b      	movs	r2, #139	; 0x8b
    4ec6:	0092      	lsls	r2, r2, #2
    4ec8:	23a7      	movs	r3, #167	; 0xa7
    4eca:	009b      	lsls	r3, r3, #2
    4ecc:	52f2      	strh	r2, [r6, r3]
    4ece:	239d      	movs	r3, #157	; 0x9d
    4ed0:	009b      	lsls	r3, r3, #2
    4ed2:	5cf3      	ldrb	r3, [r6, r3]
    4ed4:	2b00      	cmp	r3, #0
    4ed6:	d100      	bne.n	4eda <process_thread_mqtt_process+0x116e>
    4ed8:	e260      	b.n	539c <process_thread_mqtt_process+0x1630>
    4eda:	23a3      	movs	r3, #163	; 0xa3
    4edc:	009b      	lsls	r3, r3, #2
    4ede:	5af2      	ldrh	r2, [r6, r3]
    4ee0:	1c30      	adds	r0, r6, #0
    4ee2:	3b04      	subs	r3, #4
    4ee4:	58f1      	ldr	r1, [r6, r3]
    4ee6:	4bc4      	ldr	r3, [pc, #784]	; (51f8 <process_thread_mqtt_process+0x148c>)
    4ee8:	4798      	blx	r3
    4eea:	2800      	cmp	r0, #0
    4eec:	d1ea      	bne.n	4ec4 <process_thread_mqtt_process+0x1158>
                      conn->out_packet.topic_length);

  /* Send out buffer */
  send_out_buffer(conn);
    4eee:	1c30      	adds	r0, r6, #0
    4ef0:	4bc2      	ldr	r3, [pc, #776]	; (51fc <process_thread_mqtt_process+0x1490>)
    4ef2:	4798      	blx	r3
  timer_set(&conn->t, RESPONSE_WAIT_TIMEOUT);
    4ef4:	1d30      	adds	r0, r6, #4
    4ef6:	21a0      	movs	r1, #160	; 0xa0
    4ef8:	00c9      	lsls	r1, r1, #3
    4efa:	4bc1      	ldr	r3, [pc, #772]	; (5200 <process_thread_mqtt_process+0x1494>)
    4efc:	4798      	blx	r3

  /* Wait for UNSUBACK */
  reset_packet(&conn->in_packet);
    4efe:	2395      	movs	r3, #149	; 0x95
    4f00:	00db      	lsls	r3, r3, #3
    4f02:	18f0      	adds	r0, r6, r3
    4f04:	4bbf      	ldr	r3, [pc, #764]	; (5204 <process_thread_mqtt_process+0x1498>)
    4f06:	4798      	blx	r3
  PT_WAIT_UNTIL(pt, conn->out_packet.qos_state == MQTT_QOS_STATE_GOT_ACK ||
    4f08:	4abf      	ldr	r2, [pc, #764]	; (5208 <process_thread_mqtt_process+0x149c>)
    4f0a:	23a7      	movs	r3, #167	; 0xa7
    4f0c:	009b      	lsls	r3, r3, #2
    4f0e:	52f2      	strh	r2, [r6, r3]
    4f10:	4bbe      	ldr	r3, [pc, #760]	; (520c <process_thread_mqtt_process+0x14a0>)
    4f12:	5cf3      	ldrb	r3, [r6, r3]
    4f14:	2b01      	cmp	r3, #1
    4f16:	d005      	beq.n	4f24 <process_thread_mqtt_process+0x11b8>
    4f18:	1d30      	adds	r0, r6, #4
    4f1a:	4bbd      	ldr	r3, [pc, #756]	; (5210 <process_thread_mqtt_process+0x14a4>)
    4f1c:	4798      	blx	r3
    4f1e:	2800      	cmp	r0, #0
    4f20:	d100      	bne.n	4f24 <process_thread_mqtt_process+0x11b8>
    4f22:	e23b      	b.n	539c <process_thread_mqtt_process+0x1630>
                timer_expired(&conn->t));

  if(timer_expired(&conn->t)) {
    4f24:	1d30      	adds	r0, r6, #4
    4f26:	4bba      	ldr	r3, [pc, #744]	; (5210 <process_thread_mqtt_process+0x14a4>)
    4f28:	4798      	blx	r3
    4f2a:	2800      	cmp	r0, #0
    4f2c:	d002      	beq.n	4f34 <process_thread_mqtt_process+0x11c8>
    DBG("Timeout waiting for UNSUBACK\n\r");
    4f2e:	48b9      	ldr	r0, [pc, #740]	; (5214 <process_thread_mqtt_process+0x14a8>)
    4f30:	4bb9      	ldr	r3, [pc, #740]	; (5218 <process_thread_mqtt_process+0x14ac>)
    4f32:	4798      	blx	r3
  }

  reset_packet(&conn->in_packet);
    4f34:	2395      	movs	r3, #149	; 0x95
    4f36:	00db      	lsls	r3, r3, #3
    4f38:	18f0      	adds	r0, r6, r3
    4f3a:	4bb2      	ldr	r3, [pc, #712]	; (5204 <process_thread_mqtt_process+0x1498>)
    4f3c:	4798      	blx	r3

  /* This is clear after the entire transaction is complete */
  conn->out_queue_full = 0;
    4f3e:	2200      	movs	r2, #0
    4f40:	236a      	movs	r3, #106	; 0x6a
    4f42:	54f2      	strb	r2, [r6, r3]

  DBG("MQTT - Done writing subscribe message to out buffer!\n\r");
    4f44:	48b5      	ldr	r0, [pc, #724]	; (521c <process_thread_mqtt_process+0x14b0>)
    4f46:	4bb4      	ldr	r3, [pc, #720]	; (5218 <process_thread_mqtt_process+0x14ac>)
    4f48:	4798      	blx	r3

  PT_END(pt);
    4f4a:	2200      	movs	r2, #0
    4f4c:	23a7      	movs	r3, #167	; 0xa7
    4f4e:	009b      	lsls	r3, r3, #2
    4f50:	52f2      	strh	r2, [r6, r3]
              conn->state == MQTT_CONN_STATE_CONNECTED_TO_BROKER) {
          PT_MQTT_WAIT_SEND();
        }
      }
    }
    if(ev == mqtt_do_publish_event) {
    4f52:	230f      	movs	r3, #15
    4f54:	446b      	add	r3, sp
    4f56:	781a      	ldrb	r2, [r3, #0]
    4f58:	4bb1      	ldr	r3, [pc, #708]	; (5220 <process_thread_mqtt_process+0x14b4>)
    4f5a:	781b      	ldrb	r3, [r3, #0]
    4f5c:	429a      	cmp	r2, r3
    4f5e:	d001      	beq.n	4f64 <process_thread_mqtt_process+0x11f8>
    4f60:	f7fe ff3a 	bl	3dd8 <process_thread_mqtt_process+0x6c>
      conn = data;
    4f64:	4eaf      	ldr	r6, [pc, #700]	; (5224 <process_thread_mqtt_process+0x14b8>)
    4f66:	6035      	str	r5, [r6, #0]
      DBG("MQTT - Got mqtt_do_publish_mqtt_event!\n\r");
    4f68:	48af      	ldr	r0, [pc, #700]	; (5228 <process_thread_mqtt_process+0x14bc>)
    4f6a:	4bab      	ldr	r3, [pc, #684]	; (5218 <process_thread_mqtt_process+0x14ac>)
    4f6c:	4798      	blx	r3

      if(conn->out_buffer_sent == 1 &&
    4f6e:	6833      	ldr	r3, [r6, #0]
    4f70:	229d      	movs	r2, #157	; 0x9d
    4f72:	0092      	lsls	r2, r2, #2
    4f74:	5c9a      	ldrb	r2, [r3, r2]
    4f76:	2a01      	cmp	r2, #1
    4f78:	d001      	beq.n	4f7e <process_thread_mqtt_process+0x1212>
    4f7a:	f7fe ff2d 	bl	3dd8 <process_thread_mqtt_process+0x6c>
         conn->state == MQTT_CONN_STATE_CONNECTED_TO_BROKER) {
    4f7e:	325f      	adds	r2, #95	; 0x5f
    }
    if(ev == mqtt_do_publish_event) {
      conn = data;
      DBG("MQTT - Got mqtt_do_publish_mqtt_event!\n\r");

      if(conn->out_buffer_sent == 1 &&
    4f80:	5c9a      	ldrb	r2, [r3, r2]
    4f82:	2a08      	cmp	r2, #8
    4f84:	d001      	beq.n	4f8a <process_thread_mqtt_process+0x121e>
    4f86:	f7fe ff27 	bl	3dd8 <process_thread_mqtt_process+0x6c>
         conn->state == MQTT_CONN_STATE_CONNECTED_TO_BROKER) {
        PT_INIT(&conn->out_proto_thread);
    4f8a:	2100      	movs	r1, #0
    4f8c:	22a7      	movs	r2, #167	; 0xa7
    4f8e:	0092      	lsls	r2, r2, #2
    4f90:	5299      	strh	r1, [r3, r2]
        while(publish_pt(&conn->out_proto_thread, conn) < PT_EXITED &&
    4f92:	e029      	b.n	4fe8 <process_thread_mqtt_process+0x127c>
              conn->state == MQTT_CONN_STATE_CONNECTED_TO_BROKER) {
          PT_MQTT_WAIT_SEND();
    4f94:	4ba5      	ldr	r3, [pc, #660]	; (522c <process_thread_mqtt_process+0x14c0>)
    4f96:	7819      	ldrb	r1, [r3, #0]
    4f98:	4ba5      	ldr	r3, [pc, #660]	; (5230 <process_thread_mqtt_process+0x14c4>)
    4f9a:	6818      	ldr	r0, [r3, #0]
    4f9c:	2200      	movs	r2, #0
    4f9e:	4ba5      	ldr	r3, [pc, #660]	; (5234 <process_thread_mqtt_process+0x14c8>)
    4fa0:	4798      	blx	r3
    4fa2:	4ba5      	ldr	r3, [pc, #660]	; (5238 <process_thread_mqtt_process+0x14cc>)
    4fa4:	8023      	strh	r3, [r4, #0]
    4fa6:	2001      	movs	r0, #1
    4fa8:	e209      	b.n	53be <process_thread_mqtt_process+0x1652>
    4faa:	230f      	movs	r3, #15
    4fac:	446b      	add	r3, sp
    4fae:	7819      	ldrb	r1, [r3, #0]
    4fb0:	4ba2      	ldr	r3, [pc, #648]	; (523c <process_thread_mqtt_process+0x14d0>)
    4fb2:	781b      	ldrb	r3, [r3, #0]
    4fb4:	428b      	cmp	r3, r1
    4fb6:	d10a      	bne.n	4fce <process_thread_mqtt_process+0x1262>
    4fb8:	4b9a      	ldr	r3, [pc, #616]	; (5224 <process_thread_mqtt_process+0x14b8>)
    4fba:	681b      	ldr	r3, [r3, #0]
    4fbc:	210a      	movs	r1, #10
    4fbe:	2260      	movs	r2, #96	; 0x60
    4fc0:	5499      	strb	r1, [r3, r2]
    4fc2:	2100      	movs	r1, #0
    4fc4:	22a7      	movs	r2, #167	; 0xa7
    4fc6:	0092      	lsls	r2, r2, #2
    4fc8:	5299      	strh	r1, [r3, r2]
    4fca:	2002      	movs	r0, #2
    4fcc:	e1f7      	b.n	53be <process_thread_mqtt_process+0x1652>
    4fce:	4b9c      	ldr	r3, [pc, #624]	; (5240 <process_thread_mqtt_process+0x14d4>)
    4fd0:	781b      	ldrb	r3, [r3, #0]
    4fd2:	428b      	cmp	r3, r1
    4fd4:	d808      	bhi.n	4fe8 <process_thread_mqtt_process+0x127c>
    4fd6:	4b9b      	ldr	r3, [pc, #620]	; (5244 <process_thread_mqtt_process+0x14d8>)
    4fd8:	781b      	ldrb	r3, [r3, #0]
    4fda:	428b      	cmp	r3, r1
    4fdc:	d304      	bcc.n	4fe8 <process_thread_mqtt_process+0x127c>
    4fde:	4b94      	ldr	r3, [pc, #592]	; (5230 <process_thread_mqtt_process+0x14c4>)
    4fe0:	6818      	ldr	r0, [r3, #0]
    4fe2:	1c2a      	adds	r2, r5, #0
    4fe4:	4b93      	ldr	r3, [pc, #588]	; (5234 <process_thread_mqtt_process+0x14c8>)
    4fe6:	4798      	blx	r3
      DBG("MQTT - Got mqtt_do_publish_mqtt_event!\n\r");

      if(conn->out_buffer_sent == 1 &&
         conn->state == MQTT_CONN_STATE_CONNECTED_TO_BROKER) {
        PT_INIT(&conn->out_proto_thread);
        while(publish_pt(&conn->out_proto_thread, conn) < PT_EXITED &&
    4fe8:	4b8e      	ldr	r3, [pc, #568]	; (5224 <process_thread_mqtt_process+0x14b8>)
    4fea:	681d      	ldr	r5, [r3, #0]
}
/*---------------------------------------------------------------------------*/
static
PT_THREAD(publish_pt(struct pt *pt, struct mqtt_connection *conn))
{
  PT_BEGIN(pt);
    4fec:	23a7      	movs	r3, #167	; 0xa7
    4fee:	009b      	lsls	r3, r3, #2
    4ff0:	5aeb      	ldrh	r3, [r5, r3]
    4ff2:	4a95      	ldr	r2, [pc, #596]	; (5248 <process_thread_mqtt_process+0x14dc>)
    4ff4:	4293      	cmp	r3, r2
    4ff6:	d100      	bne.n	4ffa <process_thread_mqtt_process+0x128e>
    4ff8:	e0b1      	b.n	515e <process_thread_mqtt_process+0x13f2>
    4ffa:	d80f      	bhi.n	501c <process_thread_mqtt_process+0x12b0>
    4ffc:	4a93      	ldr	r2, [pc, #588]	; (524c <process_thread_mqtt_process+0x14e0>)
    4ffe:	4293      	cmp	r3, r2
    5000:	d070      	beq.n	50e4 <process_thread_mqtt_process+0x1378>
    5002:	d802      	bhi.n	500a <process_thread_mqtt_process+0x129e>
    5004:	2b00      	cmp	r3, #0
    5006:	d021      	beq.n	504c <process_thread_mqtt_process+0x12e0>
    5008:	e197      	b.n	533a <process_thread_mqtt_process+0x15ce>
    500a:	229a      	movs	r2, #154	; 0x9a
    500c:	0092      	lsls	r2, r2, #2
    500e:	4293      	cmp	r3, r2
    5010:	d07c      	beq.n	510c <process_thread_mqtt_process+0x13a0>
    5012:	4a8f      	ldr	r2, [pc, #572]	; (5250 <process_thread_mqtt_process+0x14e4>)
    5014:	4293      	cmp	r3, r2
    5016:	d100      	bne.n	501a <process_thread_mqtt_process+0x12ae>
    5018:	e08d      	b.n	5136 <process_thread_mqtt_process+0x13ca>
    501a:	e18e      	b.n	533a <process_thread_mqtt_process+0x15ce>
    501c:	229c      	movs	r2, #156	; 0x9c
    501e:	0092      	lsls	r2, r2, #2
    5020:	4293      	cmp	r3, r2
    5022:	d100      	bne.n	5026 <process_thread_mqtt_process+0x12ba>
    5024:	e0da      	b.n	51dc <process_thread_mqtt_process+0x1470>
    5026:	d808      	bhi.n	503a <process_thread_mqtt_process+0x12ce>
    5028:	4a8a      	ldr	r2, [pc, #552]	; (5254 <process_thread_mqtt_process+0x14e8>)
    502a:	4293      	cmp	r3, r2
    502c:	d100      	bne.n	5030 <process_thread_mqtt_process+0x12c4>
    502e:	e0a9      	b.n	5184 <process_thread_mqtt_process+0x1418>
    5030:	4a89      	ldr	r2, [pc, #548]	; (5258 <process_thread_mqtt_process+0x14ec>)
    5032:	4293      	cmp	r3, r2
    5034:	d100      	bne.n	5038 <process_thread_mqtt_process+0x12cc>
    5036:	e0bf      	b.n	51b8 <process_thread_mqtt_process+0x144c>
    5038:	e17f      	b.n	533a <process_thread_mqtt_process+0x15ce>
    503a:	4a88      	ldr	r2, [pc, #544]	; (525c <process_thread_mqtt_process+0x14f0>)
    503c:	4293      	cmp	r3, r2
    503e:	d100      	bne.n	5042 <process_thread_mqtt_process+0x12d6>
    5040:	e120      	b.n	5284 <process_thread_mqtt_process+0x1518>
    5042:	4a87      	ldr	r2, [pc, #540]	; (5260 <process_thread_mqtt_process+0x14f4>)
    5044:	4293      	cmp	r3, r2
    5046:	d100      	bne.n	504a <process_thread_mqtt_process+0x12de>
    5048:	e14c      	b.n	52e4 <process_thread_mqtt_process+0x1578>
    504a:	e176      	b.n	533a <process_thread_mqtt_process+0x15ce>

  DBG("MQTT - Sending publish message! topic %s topic_length %i\n\r",
    504c:	23a3      	movs	r3, #163	; 0xa3
    504e:	009b      	lsls	r3, r3, #2
    5050:	5aea      	ldrh	r2, [r5, r3]
    5052:	4884      	ldr	r0, [pc, #528]	; (5264 <process_thread_mqtt_process+0x14f8>)
    5054:	3b04      	subs	r3, #4
    5056:	58e9      	ldr	r1, [r5, r3]
    5058:	4e6f      	ldr	r6, [pc, #444]	; (5218 <process_thread_mqtt_process+0x14ac>)
    505a:	47b0      	blx	r6
      conn->out_packet.topic,
      conn->out_packet.topic_length);
  DBG("MQTT - Buffer space is %i \n\r",
    505c:	239d      	movs	r3, #157	; 0x9d
    505e:	009b      	lsls	r3, r3, #2
    5060:	18eb      	adds	r3, r5, r3
    5062:	6f2a      	ldr	r2, [r5, #112]	; 0x70
    5064:	1a99      	subs	r1, r3, r2
    5066:	4880      	ldr	r0, [pc, #512]	; (5268 <process_thread_mqtt_process+0x14fc>)
    5068:	47b0      	blx	r6
      &conn->out_buffer[MQTT_TCP_OUTPUT_BUFF_SIZE] - conn->out_buffer_ptr);

  /* Set up FHDR */
  conn->out_packet.fhdr = MQTT_FHDR_MSG_TYPE_PUBLISH |
    conn->out_packet.qos << 1;
    506a:	23a6      	movs	r3, #166	; 0xa6
    506c:	009b      	lsls	r3, r3, #2
    506e:	5cea      	ldrb	r2, [r5, r3]
    5070:	0053      	lsls	r3, r2, #1
      conn->out_packet.topic_length);
  DBG("MQTT - Buffer space is %i \n\r",
      &conn->out_buffer[MQTT_TCP_OUTPUT_BUFF_SIZE] - conn->out_buffer_ptr);

  /* Set up FHDR */
  conn->out_packet.fhdr = MQTT_FHDR_MSG_TYPE_PUBLISH |
    5072:	2130      	movs	r1, #48	; 0x30
    5074:	430b      	orrs	r3, r1
    5076:	b2db      	uxtb	r3, r3
    5078:	219e      	movs	r1, #158	; 0x9e
    507a:	0089      	lsls	r1, r1, #2
    507c:	546b      	strb	r3, [r5, r1]
    conn->out_packet.qos << 1;
  if(conn->out_packet.retain == MQTT_RETAIN_ON) {
    507e:	497b      	ldr	r1, [pc, #492]	; (526c <process_thread_mqtt_process+0x1500>)
    5080:	5c69      	ldrb	r1, [r5, r1]
    5082:	2901      	cmp	r1, #1
    5084:	d103      	bne.n	508e <process_thread_mqtt_process+0x1322>
    conn->out_packet.fhdr |= MQTT_FHDR_RETAIN_FLAG;
    5086:	430b      	orrs	r3, r1
    5088:	219e      	movs	r1, #158	; 0x9e
    508a:	0089      	lsls	r1, r1, #2
    508c:	546b      	strb	r3, [r5, r1]
  }
  conn->out_packet.remaining_length = MQTT_STRING_LEN_SIZE +
    conn->out_packet.topic_length +
    508e:	23a3      	movs	r3, #163	; 0xa3
    5090:	009b      	lsls	r3, r3, #2
    5092:	5ae9      	ldrh	r1, [r5, r3]
    conn->out_packet.payload_size;
    5094:	3308      	adds	r3, #8
    conn->out_packet.qos << 1;
  if(conn->out_packet.retain == MQTT_RETAIN_ON) {
    conn->out_packet.fhdr |= MQTT_FHDR_RETAIN_FLAG;
  }
  conn->out_packet.remaining_length = MQTT_STRING_LEN_SIZE +
    conn->out_packet.topic_length +
    5096:	58eb      	ldr	r3, [r5, r3]
    5098:	18cb      	adds	r3, r1, r3
    509a:	1c98      	adds	r0, r3, #2
  conn->out_packet.fhdr = MQTT_FHDR_MSG_TYPE_PUBLISH |
    conn->out_packet.qos << 1;
  if(conn->out_packet.retain == MQTT_RETAIN_ON) {
    conn->out_packet.fhdr |= MQTT_FHDR_RETAIN_FLAG;
  }
  conn->out_packet.remaining_length = MQTT_STRING_LEN_SIZE +
    509c:	219f      	movs	r1, #159	; 0x9f
    509e:	0089      	lsls	r1, r1, #2
    50a0:	5068      	str	r0, [r5, r1]
    conn->out_packet.topic_length +
    conn->out_packet.payload_size;
  if(conn->out_packet.qos > MQTT_QOS_LEVEL_0) {
    50a2:	2a00      	cmp	r2, #0
    50a4:	d001      	beq.n	50aa <process_thread_mqtt_process+0x133e>
    conn->out_packet.remaining_length += MQTT_MID_SIZE;
    50a6:	3304      	adds	r3, #4
    50a8:	506b      	str	r3, [r5, r1]
  }
  encode_remaining_length(conn->out_packet.remaining_length_enc,
    50aa:	23a0      	movs	r3, #160	; 0xa0
    50ac:	009b      	lsls	r3, r3, #2
    50ae:	18e8      	adds	r0, r5, r3
    50b0:	3304      	adds	r3, #4
    50b2:	18e9      	adds	r1, r5, r3
    50b4:	3b08      	subs	r3, #8
    50b6:	58ea      	ldr	r2, [r5, r3]
    50b8:	4b6d      	ldr	r3, [pc, #436]	; (5270 <process_thread_mqtt_process+0x1504>)
    50ba:	4798      	blx	r3
                          &conn->out_packet.remaining_length_enc_bytes,
                          conn->out_packet.remaining_length);
  if(conn->out_packet.remaining_length_enc_bytes > 4) {
    50bc:	23a1      	movs	r3, #161	; 0xa1
    50be:	009b      	lsls	r3, r3, #2
    50c0:	5ceb      	ldrb	r3, [r5, r3]
    50c2:	2b04      	cmp	r3, #4
    50c4:	d914      	bls.n	50f0 <process_thread_mqtt_process+0x1384>
    call_event(conn, MQTT_EVENT_PROTOCOL_ERROR, NULL);
    50c6:	1c28      	adds	r0, r5, #0
    50c8:	2181      	movs	r1, #129	; 0x81
    50ca:	2200      	movs	r2, #0
    50cc:	4b69      	ldr	r3, [pc, #420]	; (5274 <process_thread_mqtt_process+0x1508>)
    50ce:	4798      	blx	r3
    PRINTF("MQTT - Error, remaining length > 4 bytes\n\r");
    PT_EXIT(pt);
    50d0:	2200      	movs	r2, #0
    50d2:	23a7      	movs	r3, #167	; 0xa7
    50d4:	009b      	lsls	r3, r3, #2
    50d6:	52ea      	strh	r2, [r5, r3]
    50d8:	f7fe fe7e 	bl	3dd8 <process_thread_mqtt_process+0x6c>
  }

  /* Write Fixed Header */
  PT_MQTT_WRITE_BYTE(conn, conn->out_packet.fhdr);
    50dc:	4a5b      	ldr	r2, [pc, #364]	; (524c <process_thread_mqtt_process+0x14e0>)
    50de:	23a7      	movs	r3, #167	; 0xa7
    50e0:	009b      	lsls	r3, r3, #2
    50e2:	52ea      	strh	r2, [r5, r3]
    50e4:	239d      	movs	r3, #157	; 0x9d
    50e6:	009b      	lsls	r3, r3, #2
    50e8:	5ceb      	ldrb	r3, [r5, r3]
    50ea:	2b00      	cmp	r3, #0
    50ec:	d100      	bne.n	50f0 <process_thread_mqtt_process+0x1384>
    50ee:	e15d      	b.n	53ac <process_thread_mqtt_process+0x1640>
    50f0:	239e      	movs	r3, #158	; 0x9e
    50f2:	009b      	lsls	r3, r3, #2
    50f4:	5ce9      	ldrb	r1, [r5, r3]
    50f6:	1c28      	adds	r0, r5, #0
    50f8:	4b5f      	ldr	r3, [pc, #380]	; (5278 <process_thread_mqtt_process+0x150c>)
    50fa:	4798      	blx	r3
    50fc:	2800      	cmp	r0, #0
    50fe:	d1ed      	bne.n	50dc <process_thread_mqtt_process+0x1370>
    5100:	e00a      	b.n	5118 <process_thread_mqtt_process+0x13ac>
  PT_MQTT_WRITE_BYTES(conn, (uint8_t *)conn->out_packet.remaining_length_enc,
    5102:	229a      	movs	r2, #154	; 0x9a
    5104:	0092      	lsls	r2, r2, #2
    5106:	23a7      	movs	r3, #167	; 0xa7
    5108:	009b      	lsls	r3, r3, #2
    510a:	52ea      	strh	r2, [r5, r3]
    510c:	239d      	movs	r3, #157	; 0x9d
    510e:	009b      	lsls	r3, r3, #2
    5110:	5ceb      	ldrb	r3, [r5, r3]
    5112:	2b00      	cmp	r3, #0
    5114:	d100      	bne.n	5118 <process_thread_mqtt_process+0x13ac>
    5116:	e149      	b.n	53ac <process_thread_mqtt_process+0x1640>
    5118:	23a0      	movs	r3, #160	; 0xa0
    511a:	009b      	lsls	r3, r3, #2
    511c:	18e9      	adds	r1, r5, r3
    511e:	3304      	adds	r3, #4
    5120:	5cea      	ldrb	r2, [r5, r3]
    5122:	1c28      	adds	r0, r5, #0
    5124:	4b34      	ldr	r3, [pc, #208]	; (51f8 <process_thread_mqtt_process+0x148c>)
    5126:	4798      	blx	r3
    5128:	2800      	cmp	r0, #0
    512a:	d1ea      	bne.n	5102 <process_thread_mqtt_process+0x1396>
    512c:	e009      	b.n	5142 <process_thread_mqtt_process+0x13d6>
                      conn->out_packet.remaining_length_enc_bytes);
  /* Write Variable Header */
  PT_MQTT_WRITE_BYTE(conn, (conn->out_packet.topic_length >> 8));
    512e:	4a48      	ldr	r2, [pc, #288]	; (5250 <process_thread_mqtt_process+0x14e4>)
    5130:	23a7      	movs	r3, #167	; 0xa7
    5132:	009b      	lsls	r3, r3, #2
    5134:	52ea      	strh	r2, [r5, r3]
    5136:	239d      	movs	r3, #157	; 0x9d
    5138:	009b      	lsls	r3, r3, #2
    513a:	5ceb      	ldrb	r3, [r5, r3]
    513c:	2b00      	cmp	r3, #0
    513e:	d100      	bne.n	5142 <process_thread_mqtt_process+0x13d6>
    5140:	e134      	b.n	53ac <process_thread_mqtt_process+0x1640>
    5142:	23a3      	movs	r3, #163	; 0xa3
    5144:	009b      	lsls	r3, r3, #2
    5146:	5ae9      	ldrh	r1, [r5, r3]
    5148:	0a09      	lsrs	r1, r1, #8
    514a:	1c28      	adds	r0, r5, #0
    514c:	4b4a      	ldr	r3, [pc, #296]	; (5278 <process_thread_mqtt_process+0x150c>)
    514e:	4798      	blx	r3
    5150:	2800      	cmp	r0, #0
    5152:	d1ec      	bne.n	512e <process_thread_mqtt_process+0x13c2>
    5154:	e009      	b.n	516a <process_thread_mqtt_process+0x13fe>
  PT_MQTT_WRITE_BYTE(conn, (conn->out_packet.topic_length & 0x00FF));
    5156:	4a3c      	ldr	r2, [pc, #240]	; (5248 <process_thread_mqtt_process+0x14dc>)
    5158:	23a7      	movs	r3, #167	; 0xa7
    515a:	009b      	lsls	r3, r3, #2
    515c:	52ea      	strh	r2, [r5, r3]
    515e:	239d      	movs	r3, #157	; 0x9d
    5160:	009b      	lsls	r3, r3, #2
    5162:	5ceb      	ldrb	r3, [r5, r3]
    5164:	2b00      	cmp	r3, #0
    5166:	d100      	bne.n	516a <process_thread_mqtt_process+0x13fe>
    5168:	e120      	b.n	53ac <process_thread_mqtt_process+0x1640>
    516a:	23a3      	movs	r3, #163	; 0xa3
    516c:	009b      	lsls	r3, r3, #2
    516e:	5ce9      	ldrb	r1, [r5, r3]
    5170:	1c28      	adds	r0, r5, #0
    5172:	4b41      	ldr	r3, [pc, #260]	; (5278 <process_thread_mqtt_process+0x150c>)
    5174:	4798      	blx	r3
    5176:	2800      	cmp	r0, #0
    5178:	d1ed      	bne.n	5156 <process_thread_mqtt_process+0x13ea>
    517a:	e009      	b.n	5190 <process_thread_mqtt_process+0x1424>
  PT_MQTT_WRITE_BYTES(conn, (uint8_t *)conn->out_packet.topic,
    517c:	4a35      	ldr	r2, [pc, #212]	; (5254 <process_thread_mqtt_process+0x14e8>)
    517e:	23a7      	movs	r3, #167	; 0xa7
    5180:	009b      	lsls	r3, r3, #2
    5182:	52ea      	strh	r2, [r5, r3]
    5184:	239d      	movs	r3, #157	; 0x9d
    5186:	009b      	lsls	r3, r3, #2
    5188:	5ceb      	ldrb	r3, [r5, r3]
    518a:	2b00      	cmp	r3, #0
    518c:	d100      	bne.n	5190 <process_thread_mqtt_process+0x1424>
    518e:	e10d      	b.n	53ac <process_thread_mqtt_process+0x1640>
    5190:	23a3      	movs	r3, #163	; 0xa3
    5192:	009b      	lsls	r3, r3, #2
    5194:	5aea      	ldrh	r2, [r5, r3]
    5196:	1c28      	adds	r0, r5, #0
    5198:	3b04      	subs	r3, #4
    519a:	58e9      	ldr	r1, [r5, r3]
    519c:	4b16      	ldr	r3, [pc, #88]	; (51f8 <process_thread_mqtt_process+0x148c>)
    519e:	4798      	blx	r3
    51a0:	2800      	cmp	r0, #0
    51a2:	d1eb      	bne.n	517c <process_thread_mqtt_process+0x1410>
                      conn->out_packet.topic_length);
  if(conn->out_packet.qos > MQTT_QOS_LEVEL_0) {
    51a4:	23a6      	movs	r3, #166	; 0xa6
    51a6:	009b      	lsls	r3, r3, #2
    51a8:	5ceb      	ldrb	r3, [r5, r3]
    51aa:	2b00      	cmp	r3, #0
    51ac:	d10a      	bne.n	51c4 <process_thread_mqtt_process+0x1458>
    51ae:	e06f      	b.n	5290 <process_thread_mqtt_process+0x1524>
    PT_MQTT_WRITE_BYTE(conn, (conn->out_packet.mid << 8));
    51b0:	4a29      	ldr	r2, [pc, #164]	; (5258 <process_thread_mqtt_process+0x14ec>)
    51b2:	23a7      	movs	r3, #167	; 0xa7
    51b4:	009b      	lsls	r3, r3, #2
    51b6:	52ea      	strh	r2, [r5, r3]
    51b8:	239d      	movs	r3, #157	; 0x9d
    51ba:	009b      	lsls	r3, r3, #2
    51bc:	5ceb      	ldrb	r3, [r5, r3]
    51be:	2b00      	cmp	r3, #0
    51c0:	d100      	bne.n	51c4 <process_thread_mqtt_process+0x1458>
    51c2:	e0f3      	b.n	53ac <process_thread_mqtt_process+0x1640>
    51c4:	1c28      	adds	r0, r5, #0
    51c6:	2100      	movs	r1, #0
    51c8:	4b2b      	ldr	r3, [pc, #172]	; (5278 <process_thread_mqtt_process+0x150c>)
    51ca:	4798      	blx	r3
    51cc:	2800      	cmp	r0, #0
    51ce:	d1ef      	bne.n	51b0 <process_thread_mqtt_process+0x1444>
    51d0:	e00a      	b.n	51e8 <process_thread_mqtt_process+0x147c>
    PT_MQTT_WRITE_BYTE(conn, (conn->out_packet.mid & 0x00FF));
    51d2:	229c      	movs	r2, #156	; 0x9c
    51d4:	0092      	lsls	r2, r2, #2
    51d6:	23a7      	movs	r3, #167	; 0xa7
    51d8:	009b      	lsls	r3, r3, #2
    51da:	52ea      	strh	r2, [r5, r3]
    51dc:	239d      	movs	r3, #157	; 0x9d
    51de:	009b      	lsls	r3, r3, #2
    51e0:	5ceb      	ldrb	r3, [r5, r3]
    51e2:	2b00      	cmp	r3, #0
    51e4:	d100      	bne.n	51e8 <process_thread_mqtt_process+0x147c>
    51e6:	e0e1      	b.n	53ac <process_thread_mqtt_process+0x1640>
    51e8:	4b1d      	ldr	r3, [pc, #116]	; (5260 <process_thread_mqtt_process+0x14f4>)
    51ea:	5ce9      	ldrb	r1, [r5, r3]
    51ec:	1c28      	adds	r0, r5, #0
    51ee:	4b22      	ldr	r3, [pc, #136]	; (5278 <process_thread_mqtt_process+0x150c>)
    51f0:	4798      	blx	r3
    51f2:	2800      	cmp	r0, #0
    51f4:	d1ed      	bne.n	51d2 <process_thread_mqtt_process+0x1466>
    51f6:	e04b      	b.n	5290 <process_thread_mqtt_process+0x1524>
    51f8:	00003ae9 	.word	0x00003ae9
    51fc:	00003a61 	.word	0x00003a61
    5200:	0000ed6d 	.word	0x0000ed6d
    5204:	00003295 	.word	0x00003295
    5208:	00000235 	.word	0x00000235
    520c:	00000299 	.word	0x00000299
    5210:	0000ed9d 	.word	0x0000ed9d
    5214:	00012984 	.word	0x00012984
    5218:	00010b79 	.word	0x00010b79
    521c:	000129a4 	.word	0x000129a4
    5220:	20000378 	.word	0x20000378
    5224:	20000380 	.word	0x20000380
    5228:	000129dc 	.word	0x000129dc
    522c:	20000379 	.word	0x20000379
    5230:	20001d2c 	.word	0x20001d2c
    5234:	0000ec09 	.word	0x0000ec09
    5238:	000004b3 	.word	0x000004b3
    523c:	2000037b 	.word	0x2000037b
    5240:	20000375 	.word	0x20000375
    5244:	20000376 	.word	0x20000376
    5248:	0000026b 	.word	0x0000026b
    524c:	00000266 	.word	0x00000266
    5250:	0000026a 	.word	0x0000026a
    5254:	0000026d 	.word	0x0000026d
    5258:	0000026f 	.word	0x0000026f
    525c:	00000275 	.word	0x00000275
    5260:	00000286 	.word	0x00000286
    5264:	00012a08 	.word	0x00012a08
    5268:	000128ac 	.word	0x000128ac
    526c:	0000029a 	.word	0x0000029a
    5270:	00003201 	.word	0x00003201
    5274:	00003275 	.word	0x00003275
    5278:	00003aa9 	.word	0x00003aa9
  }
  /* Write Payload */
  PT_MQTT_WRITE_BYTES(conn,
    527c:	4a53      	ldr	r2, [pc, #332]	; (53cc <process_thread_mqtt_process+0x1660>)
    527e:	23a7      	movs	r3, #167	; 0xa7
    5280:	009b      	lsls	r3, r3, #2
    5282:	52ea      	strh	r2, [r5, r3]
    5284:	239d      	movs	r3, #157	; 0x9d
    5286:	009b      	lsls	r3, r3, #2
    5288:	5ceb      	ldrb	r3, [r5, r3]
    528a:	2b00      	cmp	r3, #0
    528c:	d100      	bne.n	5290 <process_thread_mqtt_process+0x1524>
    528e:	e08d      	b.n	53ac <process_thread_mqtt_process+0x1640>
    5290:	23a5      	movs	r3, #165	; 0xa5
    5292:	009b      	lsls	r3, r3, #2
    5294:	58ea      	ldr	r2, [r5, r3]
    5296:	b292      	uxth	r2, r2
    5298:	1c28      	adds	r0, r5, #0
    529a:	3b04      	subs	r3, #4
    529c:	58e9      	ldr	r1, [r5, r3]
    529e:	4b4c      	ldr	r3, [pc, #304]	; (53d0 <process_thread_mqtt_process+0x1664>)
    52a0:	4798      	blx	r3
    52a2:	2800      	cmp	r0, #0
    52a4:	d1ea      	bne.n	527c <process_thread_mqtt_process+0x1510>
                      conn->out_packet.payload,
                      conn->out_packet.payload_size);

  send_out_buffer(conn);
    52a6:	1c28      	adds	r0, r5, #0
    52a8:	4b4a      	ldr	r3, [pc, #296]	; (53d4 <process_thread_mqtt_process+0x1668>)
    52aa:	4798      	blx	r3
  timer_set(&conn->t, RESPONSE_WAIT_TIMEOUT);
    52ac:	1d28      	adds	r0, r5, #4
    52ae:	21a0      	movs	r1, #160	; 0xa0
    52b0:	00c9      	lsls	r1, r1, #3
    52b2:	4b49      	ldr	r3, [pc, #292]	; (53d8 <process_thread_mqtt_process+0x166c>)
    52b4:	4798      	blx	r3
   * If QoS is zero then wait until the message has been sent, since there is
   * no ACK to wait for.
   *
   * Also notify the app will not be notified via PUBACK or PUBCOMP
   */
  if(conn->out_packet.qos == 0) {
    52b6:	23a6      	movs	r3, #166	; 0xa6
    52b8:	009b      	lsls	r3, r3, #2
    52ba:	5ceb      	ldrb	r3, [r5, r3]
    52bc:	2b00      	cmp	r3, #0
    52be:	d106      	bne.n	52ce <process_thread_mqtt_process+0x1562>
    process_post(conn->app_process, mqtt_update_event, NULL);
    52c0:	4b46      	ldr	r3, [pc, #280]	; (53dc <process_thread_mqtt_process+0x1670>)
    52c2:	7819      	ldrb	r1, [r3, #0]
    52c4:	6ee8      	ldr	r0, [r5, #108]	; 0x6c
    52c6:	2200      	movs	r2, #0
    52c8:	4b45      	ldr	r3, [pc, #276]	; (53e0 <process_thread_mqtt_process+0x1674>)
    52ca:	4798      	blx	r3
    52cc:	e02a      	b.n	5324 <process_thread_mqtt_process+0x15b8>
  } else if(conn->out_packet.qos == 1) {
    52ce:	2b01      	cmp	r3, #1
    52d0:	d123      	bne.n	531a <process_thread_mqtt_process+0x15ae>
    /* Wait for PUBACK */
    reset_packet(&conn->in_packet);
    52d2:	2395      	movs	r3, #149	; 0x95
    52d4:	00db      	lsls	r3, r3, #3
    52d6:	18e8      	adds	r0, r5, r3
    52d8:	4b42      	ldr	r3, [pc, #264]	; (53e4 <process_thread_mqtt_process+0x1678>)
    52da:	4798      	blx	r3
    PT_WAIT_UNTIL(pt, conn->out_packet.qos_state == MQTT_QOS_STATE_GOT_ACK ||
    52dc:	4a42      	ldr	r2, [pc, #264]	; (53e8 <process_thread_mqtt_process+0x167c>)
    52de:	23a7      	movs	r3, #167	; 0xa7
    52e0:	009b      	lsls	r3, r3, #2
    52e2:	52ea      	strh	r2, [r5, r3]
    52e4:	4b41      	ldr	r3, [pc, #260]	; (53ec <process_thread_mqtt_process+0x1680>)
    52e6:	5ceb      	ldrb	r3, [r5, r3]
    52e8:	2b01      	cmp	r3, #1
    52ea:	d004      	beq.n	52f6 <process_thread_mqtt_process+0x158a>
    52ec:	1d28      	adds	r0, r5, #4
    52ee:	4b40      	ldr	r3, [pc, #256]	; (53f0 <process_thread_mqtt_process+0x1684>)
    52f0:	4798      	blx	r3
    52f2:	2800      	cmp	r0, #0
    52f4:	d05a      	beq.n	53ac <process_thread_mqtt_process+0x1640>
                  timer_expired(&conn->t));
    if(timer_expired(&conn->t)) {
    52f6:	1d28      	adds	r0, r5, #4
    52f8:	4b3d      	ldr	r3, [pc, #244]	; (53f0 <process_thread_mqtt_process+0x1684>)
    52fa:	4798      	blx	r3
    52fc:	2800      	cmp	r0, #0
    52fe:	d002      	beq.n	5306 <process_thread_mqtt_process+0x159a>
      DBG("Timeout waiting for PUBACK\n\r");
    5300:	483c      	ldr	r0, [pc, #240]	; (53f4 <process_thread_mqtt_process+0x1688>)
    5302:	4b3d      	ldr	r3, [pc, #244]	; (53f8 <process_thread_mqtt_process+0x168c>)
    5304:	4798      	blx	r3
    }
    if(conn->in_packet.mid != conn->out_packet.mid) {
    5306:	4b3d      	ldr	r3, [pc, #244]	; (53fc <process_thread_mqtt_process+0x1690>)
    5308:	5aea      	ldrh	r2, [r5, r3]
    530a:	4b37      	ldr	r3, [pc, #220]	; (53e8 <process_thread_mqtt_process+0x167c>)
    530c:	5aeb      	ldrh	r3, [r5, r3]
    530e:	429a      	cmp	r2, r3
    5310:	d008      	beq.n	5324 <process_thread_mqtt_process+0x15b8>
      DBG("MQTT - Warning, got PUBACK with none matching MID. Currently there "
    5312:	483b      	ldr	r0, [pc, #236]	; (5400 <process_thread_mqtt_process+0x1694>)
    5314:	4b38      	ldr	r3, [pc, #224]	; (53f8 <process_thread_mqtt_process+0x168c>)
    5316:	4798      	blx	r3
    5318:	e004      	b.n	5324 <process_thread_mqtt_process+0x15b8>
          "is no support for several concurrent PUBLISH messages.\n\r");
    }
  } else if(conn->out_packet.qos == 2) {
    531a:	2b02      	cmp	r3, #2
    531c:	d102      	bne.n	5324 <process_thread_mqtt_process+0x15b8>
    DBG("MQTT - QoS not implemented yet.\n\r");
    531e:	4839      	ldr	r0, [pc, #228]	; (5404 <process_thread_mqtt_process+0x1698>)
    5320:	4b35      	ldr	r3, [pc, #212]	; (53f8 <process_thread_mqtt_process+0x168c>)
    5322:	4798      	blx	r3
    /* Should wait for PUBREC, send PUBREL and then wait for PUBCOMP */
  }

  reset_packet(&conn->in_packet);
    5324:	2395      	movs	r3, #149	; 0x95
    5326:	00db      	lsls	r3, r3, #3
    5328:	18e8      	adds	r0, r5, r3
    532a:	4b2e      	ldr	r3, [pc, #184]	; (53e4 <process_thread_mqtt_process+0x1678>)
    532c:	4798      	blx	r3

  /* This is clear after the entire transaction is complete */
  conn->out_queue_full = 0;
    532e:	2200      	movs	r2, #0
    5330:	236a      	movs	r3, #106	; 0x6a
    5332:	54ea      	strb	r2, [r5, r3]

  DBG("MQTT - Publish Enqueued\n\r");
    5334:	4834      	ldr	r0, [pc, #208]	; (5408 <process_thread_mqtt_process+0x169c>)
    5336:	4b30      	ldr	r3, [pc, #192]	; (53f8 <process_thread_mqtt_process+0x168c>)
    5338:	4798      	blx	r3

  PT_END(pt);
    533a:	2200      	movs	r2, #0
    533c:	23a7      	movs	r3, #167	; 0xa7
    533e:	009b      	lsls	r3, r3, #2
    5340:	52ea      	strh	r2, [r5, r3]
    5342:	f7fe fd49 	bl	3dd8 <process_thread_mqtt_process+0x6c>
          PT_MQTT_WAIT_SEND();
        }
      }
    }
  }
  PROCESS_END();
    5346:	2300      	movs	r3, #0
    5348:	8023      	strh	r3, [r4, #0]
    534a:	2003      	movs	r0, #3
    534c:	e037      	b.n	53be <process_thread_mqtt_process+0x1652>
      DBG("MQTT - Got mqtt_do_connect_mqtt_event!\n\r");

      if(conn->out_buffer_sent == 1) {
        PT_INIT(&conn->out_proto_thread);
        while(connect_pt(&conn->out_proto_thread, conn) < PT_EXITED &&
              conn->state != MQTT_CONN_STATE_ABORT_IMMEDIATE) {
    534e:	4b2f      	ldr	r3, [pc, #188]	; (540c <process_thread_mqtt_process+0x16a0>)
    5350:	681a      	ldr	r2, [r3, #0]
    5352:	2360      	movs	r3, #96	; 0x60
      conn->socket.output_data_max_seg = conn->max_segment_size;
      DBG("MQTT - Got mqtt_do_connect_mqtt_event!\n\r");

      if(conn->out_buffer_sent == 1) {
        PT_INIT(&conn->out_proto_thread);
        while(connect_pt(&conn->out_proto_thread, conn) < PT_EXITED &&
    5354:	5cd3      	ldrb	r3, [r2, r3]
    5356:	2b0a      	cmp	r3, #10
    5358:	d001      	beq.n	535e <process_thread_mqtt_process+0x15f2>
    535a:	f7fe fd81 	bl	3e60 <process_thread_mqtt_process+0xf4>
    535e:	f7ff f8fa 	bl	4556 <process_thread_mqtt_process+0x7ea>
      /* Send MQTT Disconnect if we are connected */
      if(conn->state == MQTT_CONN_STATE_SENDING_MQTT_DISCONNECT) {
        if(conn->out_buffer_sent == 1) {
          PT_INIT(&conn->out_proto_thread);
          while(disconnect_pt(&conn->out_proto_thread, conn) < PT_EXITED &&
                conn->state != MQTT_CONN_STATE_ABORT_IMMEDIATE) {
    5362:	4b2a      	ldr	r3, [pc, #168]	; (540c <process_thread_mqtt_process+0x16a0>)
    5364:	681a      	ldr	r2, [r3, #0]
    5366:	2360      	movs	r3, #96	; 0x60

      /* Send MQTT Disconnect if we are connected */
      if(conn->state == MQTT_CONN_STATE_SENDING_MQTT_DISCONNECT) {
        if(conn->out_buffer_sent == 1) {
          PT_INIT(&conn->out_proto_thread);
          while(disconnect_pt(&conn->out_proto_thread, conn) < PT_EXITED &&
    5368:	5cd3      	ldrb	r3, [r2, r3]
    536a:	2b0a      	cmp	r3, #10
    536c:	d001      	beq.n	5372 <process_thread_mqtt_process+0x1606>
    536e:	f7ff f910 	bl	4592 <process_thread_mqtt_process+0x826>
    5372:	f7ff f992 	bl	469a <process_thread_mqtt_process+0x92e>

      if(conn->out_buffer_sent == 1 &&
         conn->state == MQTT_CONN_STATE_CONNECTED_TO_BROKER) {
        PT_INIT(&conn->out_proto_thread);
        while(pingreq_pt(&conn->out_proto_thread, conn) < PT_EXITED &&
              conn->state == MQTT_CONN_STATE_CONNECTED_TO_BROKER) {
    5376:	4b25      	ldr	r3, [pc, #148]	; (540c <process_thread_mqtt_process+0x16a0>)
    5378:	681a      	ldr	r2, [r3, #0]
    537a:	2360      	movs	r3, #96	; 0x60
      DBG("MQTT - Got mqtt_do_pingreq_event!\n\r");

      if(conn->out_buffer_sent == 1 &&
         conn->state == MQTT_CONN_STATE_CONNECTED_TO_BROKER) {
        PT_INIT(&conn->out_proto_thread);
        while(pingreq_pt(&conn->out_proto_thread, conn) < PT_EXITED &&
    537c:	5cd3      	ldrb	r3, [r2, r3]
    537e:	2b08      	cmp	r3, #8
    5380:	d001      	beq.n	5386 <process_thread_mqtt_process+0x161a>
    5382:	f7ff fa90 	bl	48a6 <process_thread_mqtt_process+0xb3a>
    5386:	f7ff f9b6 	bl	46f6 <process_thread_mqtt_process+0x98a>

      if(conn->out_buffer_sent == 1 &&
         conn->state == MQTT_CONN_STATE_CONNECTED_TO_BROKER) {
        PT_INIT(&conn->out_proto_thread);
        while(subscribe_pt(&conn->out_proto_thread, conn) < PT_EXITED &&
              conn->state == MQTT_CONN_STATE_CONNECTED_TO_BROKER) {
    538a:	4b20      	ldr	r3, [pc, #128]	; (540c <process_thread_mqtt_process+0x16a0>)
    538c:	681a      	ldr	r2, [r3, #0]
    538e:	2360      	movs	r3, #96	; 0x60
      DBG("MQTT - Got mqtt_do_subscribe_mqtt_event!\n\r");

      if(conn->out_buffer_sent == 1 &&
         conn->state == MQTT_CONN_STATE_CONNECTED_TO_BROKER) {
        PT_INIT(&conn->out_proto_thread);
        while(subscribe_pt(&conn->out_proto_thread, conn) < PT_EXITED &&
    5390:	5cd3      	ldrb	r3, [r2, r3]
    5392:	2b08      	cmp	r3, #8
    5394:	d000      	beq.n	5398 <process_thread_mqtt_process+0x162c>
    5396:	e440      	b.n	4c1a <process_thread_mqtt_process+0xeae>
    5398:	f7ff faa3 	bl	48e2 <process_thread_mqtt_process+0xb76>

      if(conn->out_buffer_sent == 1 &&
         conn->state == MQTT_CONN_STATE_CONNECTED_TO_BROKER) {
        PT_INIT(&conn->out_proto_thread);
        while(unsubscribe_pt(&conn->out_proto_thread, conn) < PT_EXITED &&
              conn->state == MQTT_CONN_STATE_CONNECTED_TO_BROKER) {
    539c:	4b1b      	ldr	r3, [pc, #108]	; (540c <process_thread_mqtt_process+0x16a0>)
    539e:	681a      	ldr	r2, [r3, #0]
    53a0:	2360      	movs	r3, #96	; 0x60
      DBG("MQTT - Got mqtt_do_unsubscribe_mqtt_event!\n\r");

      if(conn->out_buffer_sent == 1 &&
         conn->state == MQTT_CONN_STATE_CONNECTED_TO_BROKER) {
        PT_INIT(&conn->out_proto_thread);
        while(unsubscribe_pt(&conn->out_proto_thread, conn) < PT_EXITED &&
    53a2:	5cd3      	ldrb	r3, [r2, r3]
    53a4:	2b08      	cmp	r3, #8
    53a6:	d000      	beq.n	53aa <process_thread_mqtt_process+0x163e>
    53a8:	e5d3      	b.n	4f52 <process_thread_mqtt_process+0x11e6>
    53aa:	e454      	b.n	4c56 <process_thread_mqtt_process+0xeea>

      if(conn->out_buffer_sent == 1 &&
         conn->state == MQTT_CONN_STATE_CONNECTED_TO_BROKER) {
        PT_INIT(&conn->out_proto_thread);
        while(publish_pt(&conn->out_proto_thread, conn) < PT_EXITED &&
              conn->state == MQTT_CONN_STATE_CONNECTED_TO_BROKER) {
    53ac:	4b17      	ldr	r3, [pc, #92]	; (540c <process_thread_mqtt_process+0x16a0>)
    53ae:	681a      	ldr	r2, [r3, #0]
    53b0:	2360      	movs	r3, #96	; 0x60
      DBG("MQTT - Got mqtt_do_publish_mqtt_event!\n\r");

      if(conn->out_buffer_sent == 1 &&
         conn->state == MQTT_CONN_STATE_CONNECTED_TO_BROKER) {
        PT_INIT(&conn->out_proto_thread);
        while(publish_pt(&conn->out_proto_thread, conn) < PT_EXITED &&
    53b2:	5cd3      	ldrb	r3, [r2, r3]
    53b4:	2b08      	cmp	r3, #8
    53b6:	d001      	beq.n	53bc <process_thread_mqtt_process+0x1650>
    53b8:	f7fe fd0e 	bl	3dd8 <process_thread_mqtt_process+0x6c>
    53bc:	e5ea      	b.n	4f94 <process_thread_mqtt_process+0x1228>
        }
      }
    }
  }
  PROCESS_END();
}
    53be:	b004      	add	sp, #16
    53c0:	bc1c      	pop	{r2, r3, r4}
    53c2:	4690      	mov	r8, r2
    53c4:	4699      	mov	r9, r3
    53c6:	46a2      	mov	sl, r4
    53c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    53ca:	46c0      	nop			; (mov r8, r8)
    53cc:	00000275 	.word	0x00000275
    53d0:	00003ae9 	.word	0x00003ae9
    53d4:	00003a61 	.word	0x00003a61
    53d8:	0000ed6d 	.word	0x0000ed6d
    53dc:	20002b54 	.word	0x20002b54
    53e0:	0000ec09 	.word	0x0000ec09
    53e4:	00003295 	.word	0x00003295
    53e8:	00000286 	.word	0x00000286
    53ec:	00000299 	.word	0x00000299
    53f0:	0000ed9d 	.word	0x0000ed9d
    53f4:	00012a44 	.word	0x00012a44
    53f8:	00010b79 	.word	0x00010b79
    53fc:	000004b4 	.word	0x000004b4
    5400:	00012a64 	.word	0x00012a64
    5404:	00012ae0 	.word	0x00012ae0
    5408:	00012b04 	.word	0x00012b04
    540c:	20000380 	.word	0x20000380

00005410 <mqtt_subscribe>:
}
/*----------------------------------------------------------------------------*/
mqtt_status_t
mqtt_subscribe(struct mqtt_connection *conn, uint16_t *mid, char *topic,
               mqtt_qos_level_t qos_level)
{
    5410:	b570      	push	{r4, r5, r6, lr}
    5412:	1c04      	adds	r4, r0, #0
    5414:	1c15      	adds	r5, r2, #0
    5416:	1c1e      	adds	r6, r3, #0
  if(conn->state != MQTT_CONN_STATE_CONNECTED_TO_BROKER) {
    5418:	2360      	movs	r3, #96	; 0x60
    541a:	5cc3      	ldrb	r3, [r0, r3]
    return MQTT_STATUS_NOT_CONNECTED_ERROR;
    541c:	2081      	movs	r0, #129	; 0x81
/*----------------------------------------------------------------------------*/
mqtt_status_t
mqtt_subscribe(struct mqtt_connection *conn, uint16_t *mid, char *topic,
               mqtt_qos_level_t qos_level)
{
  if(conn->state != MQTT_CONN_STATE_CONNECTED_TO_BROKER) {
    541e:	2b08      	cmp	r3, #8
    5420:	d12d      	bne.n	547e <mqtt_subscribe+0x6e>
    return MQTT_STATUS_NOT_CONNECTED_ERROR;
  }

  DBG("MQTT - Call to mqtt_subscribe...\n\r");
    5422:	4817      	ldr	r0, [pc, #92]	; (5480 <mqtt_subscribe+0x70>)
    5424:	4b17      	ldr	r3, [pc, #92]	; (5484 <mqtt_subscribe+0x74>)
    5426:	4798      	blx	r3

  /* Currently don't have a queue, so only one item at a time */
  if(conn->out_queue_full) {
    5428:	236a      	movs	r3, #106	; 0x6a
    542a:	5ce3      	ldrb	r3, [r4, r3]
    542c:	2b00      	cmp	r3, #0
    542e:	d004      	beq.n	543a <mqtt_subscribe+0x2a>
    DBG("MQTT - Not accepted!\n\r");
    5430:	4815      	ldr	r0, [pc, #84]	; (5488 <mqtt_subscribe+0x78>)
    5432:	4b14      	ldr	r3, [pc, #80]	; (5484 <mqtt_subscribe+0x74>)
    5434:	4798      	blx	r3
    return MQTT_STATUS_OUT_QUEUE_FULL;
    5436:	2001      	movs	r0, #1
    5438:	e021      	b.n	547e <mqtt_subscribe+0x6e>
  }
  conn->out_queue_full = 1;
    543a:	2201      	movs	r2, #1
    543c:	236a      	movs	r3, #106	; 0x6a
    543e:	54e2      	strb	r2, [r4, r3]
  DBG("MQTT - Accepted!\n\r");
    5440:	4812      	ldr	r0, [pc, #72]	; (548c <mqtt_subscribe+0x7c>)
    5442:	4b10      	ldr	r3, [pc, #64]	; (5484 <mqtt_subscribe+0x74>)
    5444:	4798      	blx	r3

  conn->out_packet.mid = INCREMENT_MID(conn);
    5446:	2268      	movs	r2, #104	; 0x68
    5448:	5aa3      	ldrh	r3, [r4, r2]
    544a:	3302      	adds	r3, #2
    544c:	b29b      	uxth	r3, r3
    544e:	52a3      	strh	r3, [r4, r2]
    5450:	4a0f      	ldr	r2, [pc, #60]	; (5490 <mqtt_subscribe+0x80>)
    5452:	52a3      	strh	r3, [r4, r2]
  conn->out_packet.topic = topic;
    5454:	23a2      	movs	r3, #162	; 0xa2
    5456:	009b      	lsls	r3, r3, #2
    5458:	50e5      	str	r5, [r4, r3]
  conn->out_packet.topic_length = strlen(topic);
    545a:	1c28      	adds	r0, r5, #0
    545c:	4b0d      	ldr	r3, [pc, #52]	; (5494 <mqtt_subscribe+0x84>)
    545e:	4798      	blx	r3
    5460:	23a3      	movs	r3, #163	; 0xa3
    5462:	009b      	lsls	r3, r3, #2
    5464:	52e0      	strh	r0, [r4, r3]
  conn->out_packet.qos = qos_level;
    5466:	330c      	adds	r3, #12
    5468:	54e6      	strb	r6, [r4, r3]
  conn->out_packet.qos_state = MQTT_QOS_STATE_NO_ACK;
    546a:	2200      	movs	r2, #0
    546c:	4b0a      	ldr	r3, [pc, #40]	; (5498 <mqtt_subscribe+0x88>)
    546e:	54e2      	strb	r2, [r4, r3]

  process_post(&mqtt_process, mqtt_do_subscribe_event, conn);
    5470:	4b0a      	ldr	r3, [pc, #40]	; (549c <mqtt_subscribe+0x8c>)
    5472:	7819      	ldrb	r1, [r3, #0]
    5474:	480a      	ldr	r0, [pc, #40]	; (54a0 <mqtt_subscribe+0x90>)
    5476:	1c22      	adds	r2, r4, #0
    5478:	4b0a      	ldr	r3, [pc, #40]	; (54a4 <mqtt_subscribe+0x94>)
    547a:	4798      	blx	r3
  return MQTT_STATUS_OK;
    547c:	2000      	movs	r0, #0
}
    547e:	bd70      	pop	{r4, r5, r6, pc}
    5480:	00012b20 	.word	0x00012b20
    5484:	00010b79 	.word	0x00010b79
    5488:	00012b44 	.word	0x00012b44
    548c:	00012b5c 	.word	0x00012b5c
    5490:	00000286 	.word	0x00000286
    5494:	00010e31 	.word	0x00010e31
    5498:	00000299 	.word	0x00000299
    549c:	2000037c 	.word	0x2000037c
    54a0:	2000000c 	.word	0x2000000c
    54a4:	0000ec09 	.word	0x0000ec09

000054a8 <mqtt_publish>:
/*----------------------------------------------------------------------------*/
mqtt_status_t
mqtt_publish(struct mqtt_connection *conn, uint16_t *mid, char *topic,
             uint8_t *payload, uint32_t payload_size,
             mqtt_qos_level_t qos_level, mqtt_retain_t retain)
{
    54a8:	b5f0      	push	{r4, r5, r6, r7, lr}
    54aa:	b083      	sub	sp, #12
    54ac:	1c04      	adds	r4, r0, #0
    54ae:	9200      	str	r2, [sp, #0]
    54b0:	9301      	str	r3, [sp, #4]
    54b2:	ab08      	add	r3, sp, #32
    54b4:	cb40      	ldmia	r3!, {r6}
    54b6:	781f      	ldrb	r7, [r3, #0]
    54b8:	ab0a      	add	r3, sp, #40	; 0x28
    54ba:	781d      	ldrb	r5, [r3, #0]
  if(conn->state != MQTT_CONN_STATE_CONNECTED_TO_BROKER) {
    54bc:	2360      	movs	r3, #96	; 0x60
    54be:	5cc3      	ldrb	r3, [r0, r3]
    return MQTT_STATUS_NOT_CONNECTED_ERROR;
    54c0:	2081      	movs	r0, #129	; 0x81
mqtt_status_t
mqtt_publish(struct mqtt_connection *conn, uint16_t *mid, char *topic,
             uint8_t *payload, uint32_t payload_size,
             mqtt_qos_level_t qos_level, mqtt_retain_t retain)
{
  if(conn->state != MQTT_CONN_STATE_CONNECTED_TO_BROKER) {
    54c2:	2b08      	cmp	r3, #8
    54c4:	d134      	bne.n	5530 <mqtt_publish+0x88>
    return MQTT_STATUS_NOT_CONNECTED_ERROR;
  }

  DBG("MQTT - Call to mqtt_publish...\n\r");
    54c6:	481b      	ldr	r0, [pc, #108]	; (5534 <mqtt_publish+0x8c>)
    54c8:	4b1b      	ldr	r3, [pc, #108]	; (5538 <mqtt_publish+0x90>)
    54ca:	4798      	blx	r3

  /* Currently don't have a queue, so only one item at a time */
  if(conn->out_queue_full) {
    54cc:	236a      	movs	r3, #106	; 0x6a
    54ce:	5ce3      	ldrb	r3, [r4, r3]
    54d0:	2b00      	cmp	r3, #0
    54d2:	d004      	beq.n	54de <mqtt_publish+0x36>
    DBG("MQTT - Not accepted!\n\r");
    54d4:	4819      	ldr	r0, [pc, #100]	; (553c <mqtt_publish+0x94>)
    54d6:	4b18      	ldr	r3, [pc, #96]	; (5538 <mqtt_publish+0x90>)
    54d8:	4798      	blx	r3
    return MQTT_STATUS_OUT_QUEUE_FULL;
    54da:	2001      	movs	r0, #1
    54dc:	e028      	b.n	5530 <mqtt_publish+0x88>
  }
  conn->out_queue_full = 1;
    54de:	2201      	movs	r2, #1
    54e0:	236a      	movs	r3, #106	; 0x6a
    54e2:	54e2      	strb	r2, [r4, r3]
  DBG("MQTT - Accepted!\n\r");
    54e4:	4816      	ldr	r0, [pc, #88]	; (5540 <mqtt_publish+0x98>)
    54e6:	4b14      	ldr	r3, [pc, #80]	; (5538 <mqtt_publish+0x90>)
    54e8:	4798      	blx	r3

  conn->out_packet.mid = INCREMENT_MID(conn);
    54ea:	2268      	movs	r2, #104	; 0x68
    54ec:	5aa3      	ldrh	r3, [r4, r2]
    54ee:	3302      	adds	r3, #2
    54f0:	b29b      	uxth	r3, r3
    54f2:	52a3      	strh	r3, [r4, r2]
    54f4:	4a13      	ldr	r2, [pc, #76]	; (5544 <mqtt_publish+0x9c>)
    54f6:	52a3      	strh	r3, [r4, r2]
  conn->out_packet.retain = retain;
    54f8:	4b13      	ldr	r3, [pc, #76]	; (5548 <mqtt_publish+0xa0>)
    54fa:	54e5      	strb	r5, [r4, r3]
  conn->out_packet.topic = topic;
    54fc:	3b12      	subs	r3, #18
    54fe:	9a00      	ldr	r2, [sp, #0]
    5500:	50e2      	str	r2, [r4, r3]
  conn->out_packet.topic_length = strlen(topic);
    5502:	1c10      	adds	r0, r2, #0
    5504:	4b11      	ldr	r3, [pc, #68]	; (554c <mqtt_publish+0xa4>)
    5506:	4798      	blx	r3
    5508:	23a3      	movs	r3, #163	; 0xa3
    550a:	009b      	lsls	r3, r3, #2
    550c:	52e0      	strh	r0, [r4, r3]
  conn->out_packet.payload = payload;
    550e:	3304      	adds	r3, #4
    5510:	9a01      	ldr	r2, [sp, #4]
    5512:	50e2      	str	r2, [r4, r3]
  conn->out_packet.payload_size = payload_size;
    5514:	3304      	adds	r3, #4
    5516:	50e6      	str	r6, [r4, r3]
  conn->out_packet.qos = qos_level;
    5518:	3304      	adds	r3, #4
    551a:	54e7      	strb	r7, [r4, r3]
  conn->out_packet.qos_state = MQTT_QOS_STATE_NO_ACK;
    551c:	2200      	movs	r2, #0
    551e:	4b0c      	ldr	r3, [pc, #48]	; (5550 <mqtt_publish+0xa8>)
    5520:	54e2      	strb	r2, [r4, r3]

  process_post(&mqtt_process, mqtt_do_publish_event, conn);
    5522:	4b0c      	ldr	r3, [pc, #48]	; (5554 <mqtt_publish+0xac>)
    5524:	7819      	ldrb	r1, [r3, #0]
    5526:	480c      	ldr	r0, [pc, #48]	; (5558 <mqtt_publish+0xb0>)
    5528:	1c22      	adds	r2, r4, #0
    552a:	4b0c      	ldr	r3, [pc, #48]	; (555c <mqtt_publish+0xb4>)
    552c:	4798      	blx	r3
  return MQTT_STATUS_OK;
    552e:	2000      	movs	r0, #0
}
    5530:	b003      	add	sp, #12
    5532:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5534:	00012b98 	.word	0x00012b98
    5538:	00010b79 	.word	0x00010b79
    553c:	00012b44 	.word	0x00012b44
    5540:	00012b5c 	.word	0x00012b5c
    5544:	00000286 	.word	0x00000286
    5548:	0000029a 	.word	0x0000029a
    554c:	00010e31 	.word	0x00010e31
    5550:	00000299 	.word	0x00000299
    5554:	20000378 	.word	0x20000378
    5558:	2000000c 	.word	0x2000000c
    555c:	0000ec09 	.word	0x0000ec09

00005560 <mqtt_set_username_password>:
/*----------------------------------------------------------------------------*/
void
mqtt_set_username_password(struct mqtt_connection *conn, char *username,
                           char *password)
{
    5560:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5562:	1c04      	adds	r4, r0, #0
    5564:	1c0e      	adds	r6, r1, #0
    5566:	1c15      	adds	r5, r2, #0
  /* Set strings, NULL string will simply set length to zero */
  string_to_mqtt_string(&conn->credentials.username, username);
    5568:	3050      	adds	r0, #80	; 0x50
    556a:	4f0f      	ldr	r7, [pc, #60]	; (55a8 <mqtt_set_username_password+0x48>)
    556c:	47b8      	blx	r7
  string_to_mqtt_string(&conn->credentials.password, password);
    556e:	1c20      	adds	r0, r4, #0
    5570:	3058      	adds	r0, #88	; 0x58
    5572:	1c29      	adds	r1, r5, #0
    5574:	47b8      	blx	r7

  /* Set CONNECT VHDR flags */
  if(username != NULL) {
    5576:	2e00      	cmp	r6, #0
    5578:	d005      	beq.n	5586 <mqtt_set_username_password+0x26>
    conn->connect_vhdr_flags |= MQTT_VHDR_USERNAME_FLAG;
    557a:	7d23      	ldrb	r3, [r4, #20]
    557c:	2280      	movs	r2, #128	; 0x80
    557e:	4252      	negs	r2, r2
    5580:	4313      	orrs	r3, r2
    5582:	7523      	strb	r3, [r4, #20]
    5584:	e003      	b.n	558e <mqtt_set_username_password+0x2e>
  } else {
    conn->connect_vhdr_flags &= ~MQTT_VHDR_USERNAME_FLAG;
    5586:	7d23      	ldrb	r3, [r4, #20]
    5588:	227f      	movs	r2, #127	; 0x7f
    558a:	4013      	ands	r3, r2
    558c:	7523      	strb	r3, [r4, #20]
  }
  if(password != NULL) {
    558e:	2d00      	cmp	r5, #0
    5590:	d004      	beq.n	559c <mqtt_set_username_password+0x3c>
    conn->connect_vhdr_flags |= MQTT_VHDR_PASSWORD_FLAG;
    5592:	7d22      	ldrb	r2, [r4, #20]
    5594:	2340      	movs	r3, #64	; 0x40
    5596:	4313      	orrs	r3, r2
    5598:	7523      	strb	r3, [r4, #20]
    559a:	e003      	b.n	55a4 <mqtt_set_username_password+0x44>
  } else {
    conn->connect_vhdr_flags &= ~MQTT_VHDR_PASSWORD_FLAG;
    559c:	7d23      	ldrb	r3, [r4, #20]
    559e:	2240      	movs	r2, #64	; 0x40
    55a0:	4393      	bics	r3, r2
    55a2:	7523      	strb	r3, [r4, #20]
  }
}
    55a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    55a6:	46c0      	nop			; (mov r8, r8)
    55a8:	00003b65 	.word	0x00003b65

000055ac <show_leds>:

static unsigned char leds, invert;
/*---------------------------------------------------------------------------*/
static void
show_leds(unsigned char changed)
{
    55ac:	b538      	push	{r3, r4, r5, lr}
    55ae:	1c05      	adds	r5, r0, #0
  if(changed & LEDS_GREEN) {
    55b0:	2401      	movs	r4, #1
    55b2:	4004      	ands	r4, r0
    55b4:	d067      	beq.n	5686 <show_leds+0xda>
    /* Green did change */
    if((invert ^ leds) & LEDS_GREEN) {
    55b6:	4b39      	ldr	r3, [pc, #228]	; (569c <show_leds+0xf0>)
    55b8:	781a      	ldrb	r2, [r3, #0]
    55ba:	4b39      	ldr	r3, [pc, #228]	; (56a0 <show_leds+0xf4>)
    55bc:	781b      	ldrb	r3, [r3, #0]
    55be:	4053      	eors	r3, r2
    55c0:	07db      	lsls	r3, r3, #31
    55c2:	d507      	bpl.n	55d4 <show_leds+0x28>
      ENERGEST_ON(ENERGEST_TYPE_LED_GREEN);
    55c4:	4b37      	ldr	r3, [pc, #220]	; (56a4 <show_leds+0xf8>)
    55c6:	4798      	blx	r3
    55c8:	4b37      	ldr	r3, [pc, #220]	; (56a8 <show_leds+0xfc>)
    55ca:	60d8      	str	r0, [r3, #12]
    55cc:	2201      	movs	r2, #1
    55ce:	4b37      	ldr	r3, [pc, #220]	; (56ac <show_leds+0x100>)
    55d0:	70da      	strb	r2, [r3, #3]
    55d2:	e05b      	b.n	568c <show_leds+0xe0>
    } else {
      ENERGEST_OFF(ENERGEST_TYPE_LED_GREEN);
    55d4:	4b35      	ldr	r3, [pc, #212]	; (56ac <show_leds+0x100>)
    55d6:	78db      	ldrb	r3, [r3, #3]
    55d8:	2b00      	cmp	r3, #0
    55da:	d05a      	beq.n	5692 <show_leds+0xe6>
    55dc:	4b31      	ldr	r3, [pc, #196]	; (56a4 <show_leds+0xf8>)
    55de:	4798      	blx	r3
    55e0:	4a33      	ldr	r2, [pc, #204]	; (56b0 <show_leds+0x104>)
    55e2:	4b31      	ldr	r3, [pc, #196]	; (56a8 <show_leds+0xfc>)
    55e4:	68db      	ldr	r3, [r3, #12]
    55e6:	68d1      	ldr	r1, [r2, #12]
    55e8:	1acb      	subs	r3, r1, r3
    55ea:	1818      	adds	r0, r3, r0
    55ec:	60d0      	str	r0, [r2, #12]
    55ee:	2200      	movs	r2, #0
    55f0:	4b2e      	ldr	r3, [pc, #184]	; (56ac <show_leds+0x100>)
    55f2:	70da      	strb	r2, [r3, #3]
    55f4:	e04a      	b.n	568c <show_leds+0xe0>
    }
  }
  if(changed & LEDS_YELLOW) {
    if((invert ^ leds) & LEDS_YELLOW) {
    55f6:	4b29      	ldr	r3, [pc, #164]	; (569c <show_leds+0xf0>)
    55f8:	781a      	ldrb	r2, [r3, #0]
    55fa:	4b29      	ldr	r3, [pc, #164]	; (56a0 <show_leds+0xf4>)
    55fc:	781b      	ldrb	r3, [r3, #0]
    55fe:	4053      	eors	r3, r2
    5600:	079b      	lsls	r3, r3, #30
    5602:	d507      	bpl.n	5614 <show_leds+0x68>
      ENERGEST_ON(ENERGEST_TYPE_LED_YELLOW);
    5604:	4b27      	ldr	r3, [pc, #156]	; (56a4 <show_leds+0xf8>)
    5606:	4798      	blx	r3
    5608:	4b27      	ldr	r3, [pc, #156]	; (56a8 <show_leds+0xfc>)
    560a:	6118      	str	r0, [r3, #16]
    560c:	2201      	movs	r2, #1
    560e:	4b27      	ldr	r3, [pc, #156]	; (56ac <show_leds+0x100>)
    5610:	711a      	strb	r2, [r3, #4]
    5612:	e00f      	b.n	5634 <show_leds+0x88>
    } else {
      ENERGEST_OFF(ENERGEST_TYPE_LED_YELLOW);
    5614:	4b25      	ldr	r3, [pc, #148]	; (56ac <show_leds+0x100>)
    5616:	791b      	ldrb	r3, [r3, #4]
    5618:	2b00      	cmp	r3, #0
    561a:	d00b      	beq.n	5634 <show_leds+0x88>
    561c:	4b21      	ldr	r3, [pc, #132]	; (56a4 <show_leds+0xf8>)
    561e:	4798      	blx	r3
    5620:	4a23      	ldr	r2, [pc, #140]	; (56b0 <show_leds+0x104>)
    5622:	4b21      	ldr	r3, [pc, #132]	; (56a8 <show_leds+0xfc>)
    5624:	691b      	ldr	r3, [r3, #16]
    5626:	6911      	ldr	r1, [r2, #16]
    5628:	1acb      	subs	r3, r1, r3
    562a:	1818      	adds	r0, r3, r0
    562c:	6110      	str	r0, [r2, #16]
    562e:	2200      	movs	r2, #0
    5630:	4b1e      	ldr	r3, [pc, #120]	; (56ac <show_leds+0x100>)
    5632:	711a      	strb	r2, [r3, #4]
    }
  }
  if(changed & LEDS_RED) {
    5634:	2c00      	cmp	r4, #0
    5636:	d01e      	beq.n	5676 <show_leds+0xca>
    if((invert ^ leds) & LEDS_RED) {
    5638:	4b18      	ldr	r3, [pc, #96]	; (569c <show_leds+0xf0>)
    563a:	781a      	ldrb	r2, [r3, #0]
    563c:	4b18      	ldr	r3, [pc, #96]	; (56a0 <show_leds+0xf4>)
    563e:	781b      	ldrb	r3, [r3, #0]
    5640:	4053      	eors	r3, r2
    5642:	07db      	lsls	r3, r3, #31
    5644:	d507      	bpl.n	5656 <show_leds+0xaa>
      ENERGEST_ON(ENERGEST_TYPE_LED_RED);
    5646:	4b17      	ldr	r3, [pc, #92]	; (56a4 <show_leds+0xf8>)
    5648:	4798      	blx	r3
    564a:	4b17      	ldr	r3, [pc, #92]	; (56a8 <show_leds+0xfc>)
    564c:	6158      	str	r0, [r3, #20]
    564e:	2201      	movs	r2, #1
    5650:	4b16      	ldr	r3, [pc, #88]	; (56ac <show_leds+0x100>)
    5652:	715a      	strb	r2, [r3, #5]
    5654:	e00f      	b.n	5676 <show_leds+0xca>
    } else {
      ENERGEST_OFF(ENERGEST_TYPE_LED_RED);
    5656:	4b15      	ldr	r3, [pc, #84]	; (56ac <show_leds+0x100>)
    5658:	795b      	ldrb	r3, [r3, #5]
    565a:	2b00      	cmp	r3, #0
    565c:	d00b      	beq.n	5676 <show_leds+0xca>
    565e:	4b11      	ldr	r3, [pc, #68]	; (56a4 <show_leds+0xf8>)
    5660:	4798      	blx	r3
    5662:	4a13      	ldr	r2, [pc, #76]	; (56b0 <show_leds+0x104>)
    5664:	4b10      	ldr	r3, [pc, #64]	; (56a8 <show_leds+0xfc>)
    5666:	695b      	ldr	r3, [r3, #20]
    5668:	6951      	ldr	r1, [r2, #20]
    566a:	1acb      	subs	r3, r1, r3
    566c:	1818      	adds	r0, r3, r0
    566e:	6150      	str	r0, [r2, #20]
    5670:	2200      	movs	r2, #0
    5672:	4b0e      	ldr	r3, [pc, #56]	; (56ac <show_leds+0x100>)
    5674:	715a      	strb	r2, [r3, #5]
    }
  }
  leds_arch_set(leds ^ invert);
    5676:	4b0a      	ldr	r3, [pc, #40]	; (56a0 <show_leds+0xf4>)
    5678:	7818      	ldrb	r0, [r3, #0]
    567a:	4b08      	ldr	r3, [pc, #32]	; (569c <show_leds+0xf0>)
    567c:	781b      	ldrb	r3, [r3, #0]
    567e:	4058      	eors	r0, r3
    5680:	4b0c      	ldr	r3, [pc, #48]	; (56b4 <show_leds+0x108>)
    5682:	4798      	blx	r3
    5684:	e008      	b.n	5698 <show_leds+0xec>
      ENERGEST_ON(ENERGEST_TYPE_LED_GREEN);
    } else {
      ENERGEST_OFF(ENERGEST_TYPE_LED_GREEN);
    }
  }
  if(changed & LEDS_YELLOW) {
    5686:	0783      	lsls	r3, r0, #30
    5688:	d4b5      	bmi.n	55f6 <show_leds+0x4a>
    568a:	e7f4      	b.n	5676 <show_leds+0xca>
    568c:	07ab      	lsls	r3, r5, #30
    568e:	d4b2      	bmi.n	55f6 <show_leds+0x4a>
    5690:	e7d2      	b.n	5638 <show_leds+0x8c>
    5692:	0783      	lsls	r3, r0, #30
    5694:	d4af      	bmi.n	55f6 <show_leds+0x4a>
    5696:	e7de      	b.n	5656 <show_leds+0xaa>
    } else {
      ENERGEST_OFF(ENERGEST_TYPE_LED_RED);
    }
  }
  leds_arch_set(leds ^ invert);
}
    5698:	bd38      	pop	{r3, r4, r5, pc}
    569a:	46c0      	nop			; (mov r8, r8)
    569c:	2000038c 	.word	0x2000038c
    56a0:	2000038d 	.word	0x2000038d
    56a4:	0000fa29 	.word	0x0000fa29
    56a8:	200033cc 	.word	0x200033cc
    56ac:	200033c0 	.word	0x200033c0
    56b0:	2000338c 	.word	0x2000338c
    56b4:	0000f74d 	.word	0x0000f74d

000056b8 <leds_init>:
/*---------------------------------------------------------------------------*/
void
leds_init(void)
{
    56b8:	b508      	push	{r3, lr}
  leds_arch_init();
    56ba:	4b04      	ldr	r3, [pc, #16]	; (56cc <leds_init+0x14>)
    56bc:	4798      	blx	r3
  leds = invert = 0;
    56be:	2300      	movs	r3, #0
    56c0:	4a03      	ldr	r2, [pc, #12]	; (56d0 <leds_init+0x18>)
    56c2:	7013      	strb	r3, [r2, #0]
    56c4:	4a03      	ldr	r2, [pc, #12]	; (56d4 <leds_init+0x1c>)
    56c6:	7013      	strb	r3, [r2, #0]
}
    56c8:	bd08      	pop	{r3, pc}
    56ca:	46c0      	nop			; (mov r8, r8)
    56cc:	0000f721 	.word	0x0000f721
    56d0:	2000038d 	.word	0x2000038d
    56d4:	2000038c 	.word	0x2000038c

000056d8 <leds_on>:
  return leds_arch_get();
}
/*---------------------------------------------------------------------------*/
void
leds_on(unsigned char ledv)
{
    56d8:	b508      	push	{r3, lr}
  unsigned char changed;
  changed = (~leds) & ledv;
    56da:	4a04      	ldr	r2, [pc, #16]	; (56ec <leds_on+0x14>)
    56dc:	7813      	ldrb	r3, [r2, #0]
  leds |= ledv;
    56de:	1c01      	adds	r1, r0, #0
    56e0:	4319      	orrs	r1, r3
    56e2:	7011      	strb	r1, [r2, #0]
  show_leds(changed);
    56e4:	4398      	bics	r0, r3
    56e6:	4b02      	ldr	r3, [pc, #8]	; (56f0 <leds_on+0x18>)
    56e8:	4798      	blx	r3
}
    56ea:	bd08      	pop	{r3, pc}
    56ec:	2000038c 	.word	0x2000038c
    56f0:	000055ad 	.word	0x000055ad

000056f4 <leds_off>:
/*---------------------------------------------------------------------------*/
void
leds_off(unsigned char ledv)
{
    56f4:	b508      	push	{r3, lr}
  unsigned char changed;
  changed = leds & ledv;
    56f6:	4a04      	ldr	r2, [pc, #16]	; (5708 <leds_off+0x14>)
    56f8:	7813      	ldrb	r3, [r2, #0]
  leds &= ~ledv;
    56fa:	1c19      	adds	r1, r3, #0
    56fc:	4381      	bics	r1, r0
    56fe:	7011      	strb	r1, [r2, #0]
  show_leds(changed);
    5700:	4018      	ands	r0, r3
    5702:	4b02      	ldr	r3, [pc, #8]	; (570c <leds_off+0x18>)
    5704:	4798      	blx	r3
}
    5706:	bd08      	pop	{r3, pc}
    5708:	2000038c 	.word	0x2000038c
    570c:	000055ad 	.word	0x000055ad

00005710 <list_init>:
 * \param list The list to be initialized.
 */
void
list_init(list_t list)
{
  *list = NULL;
    5710:	2300      	movs	r3, #0
    5712:	6003      	str	r3, [r0, #0]
}
    5714:	4770      	bx	lr
    5716:	46c0      	nop			; (mov r8, r8)

00005718 <list_head>:
 * \sa list_tail()
 */
void *
list_head(list_t list)
{
  return *list;
    5718:	6800      	ldr	r0, [r0, #0]
}
    571a:	4770      	bx	lr

0000571c <list_tail>:
void *
list_tail(list_t list)
{
  struct list *l;
  
  if(*list == NULL) {
    571c:	6800      	ldr	r0, [r0, #0]
    571e:	2800      	cmp	r0, #0
    5720:	d101      	bne.n	5726 <list_tail+0xa>
    5722:	e004      	b.n	572e <list_tail+0x12>
    return NULL;
  }
  
  for(l = *list; l->next != NULL; l = l->next);
    5724:	1c18      	adds	r0, r3, #0
    5726:	6803      	ldr	r3, [r0, #0]
    5728:	2b00      	cmp	r3, #0
    572a:	d1fb      	bne.n	5724 <list_tail+0x8>
    572c:	e000      	b.n	5730 <list_tail+0x14>
list_tail(list_t list)
{
  struct list *l;
  
  if(*list == NULL) {
    return NULL;
    572e:	2000      	movs	r0, #0
  }
  
  for(l = *list; l->next != NULL; l = l->next);
  
  return l;
}
    5730:	4770      	bx	lr
    5732:	46c0      	nop			; (mov r8, r8)

00005734 <list_remove>:
void
list_remove(list_t list, void *item)
{
  struct list *l, *r;
  
  if(*list == NULL) {
    5734:	6802      	ldr	r2, [r0, #0]
    5736:	2a00      	cmp	r2, #0
    5738:	d014      	beq.n	5764 <list_remove+0x30>
    return;
  }
  
  r = NULL;
  for(l = *list; l != NULL; l = l->next) {
    if(l == item) {
    573a:	428a      	cmp	r2, r1
    573c:	d10f      	bne.n	575e <list_remove+0x2a>
    573e:	e004      	b.n	574a <list_remove+0x16>
    5740:	4299      	cmp	r1, r3
    5742:	d10b      	bne.n	575c <list_remove+0x28>
      if(r == NULL) {
    5744:	2a00      	cmp	r2, #0
    5746:	d104      	bne.n	5752 <list_remove+0x1e>
  if(*list == NULL) {
    return;
  }
  
  r = NULL;
  for(l = *list; l != NULL; l = l->next) {
    5748:	1c19      	adds	r1, r3, #0
    if(l == item) {
      if(r == NULL) {
	/* First on list */
	*list = l->next;
    574a:	680b      	ldr	r3, [r1, #0]
    574c:	6003      	str	r3, [r0, #0]
    574e:	1c0b      	adds	r3, r1, #0
    5750:	e001      	b.n	5756 <list_remove+0x22>
      } else {
	/* Not first on list */
	r->next = l->next;
    5752:	6819      	ldr	r1, [r3, #0]
    5754:	6011      	str	r1, [r2, #0]
      }
      l->next = NULL;
    5756:	2200      	movs	r2, #0
    5758:	601a      	str	r2, [r3, #0]
      return;
    575a:	e003      	b.n	5764 <list_remove+0x30>
  if(*list == NULL) {
    return;
  }
  
  r = NULL;
  for(l = *list; l != NULL; l = l->next) {
    575c:	1c1a      	adds	r2, r3, #0
    575e:	6813      	ldr	r3, [r2, #0]
    5760:	2b00      	cmp	r3, #0
    5762:	d1ed      	bne.n	5740 <list_remove+0xc>
      l->next = NULL;
      return;
    }
    r = l;
  }
}
    5764:	4770      	bx	lr
    5766:	46c0      	nop			; (mov r8, r8)

00005768 <list_add>:
 * \sa list_push()
 *
 */
void
list_add(list_t list, void *item)
{
    5768:	b538      	push	{r3, r4, r5, lr}
    576a:	1c05      	adds	r5, r0, #0
    576c:	1c0c      	adds	r4, r1, #0
  struct list *l;

  /* Make sure not to add the same element twice */
  list_remove(list, item);
    576e:	4b06      	ldr	r3, [pc, #24]	; (5788 <list_add+0x20>)
    5770:	4798      	blx	r3

  ((struct list *)item)->next = NULL;
    5772:	2300      	movs	r3, #0
    5774:	6023      	str	r3, [r4, #0]
  
  l = list_tail(list);
    5776:	1c28      	adds	r0, r5, #0
    5778:	4b04      	ldr	r3, [pc, #16]	; (578c <list_add+0x24>)
    577a:	4798      	blx	r3

  if(l == NULL) {
    577c:	2800      	cmp	r0, #0
    577e:	d101      	bne.n	5784 <list_add+0x1c>
    *list = item;
    5780:	602c      	str	r4, [r5, #0]
    5782:	e000      	b.n	5786 <list_add+0x1e>
  } else {
    l->next = item;
    5784:	6004      	str	r4, [r0, #0]
  }
}
    5786:	bd38      	pop	{r3, r4, r5, pc}
    5788:	00005735 	.word	0x00005735
    578c:	0000571d 	.word	0x0000571d

00005790 <list_push>:
/**
 * Add an item to the start of the list.
 */
void
list_push(list_t list, void *item)
{
    5790:	b538      	push	{r3, r4, r5, lr}
    5792:	1c04      	adds	r4, r0, #0
    5794:	1c0d      	adds	r5, r1, #0
  /*  struct list *l;*/

  /* Make sure not to add the same element twice */
  list_remove(list, item);
    5796:	4b03      	ldr	r3, [pc, #12]	; (57a4 <list_push+0x14>)
    5798:	4798      	blx	r3

  ((struct list *)item)->next = *list;
    579a:	6823      	ldr	r3, [r4, #0]
    579c:	602b      	str	r3, [r5, #0]
  *list = item;
    579e:	6025      	str	r5, [r4, #0]
}
    57a0:	bd38      	pop	{r3, r4, r5, pc}
    57a2:	46c0      	nop			; (mov r8, r8)
    57a4:	00005735 	.word	0x00005735

000057a8 <list_length>:
list_length(list_t list)
{
  struct list *l;
  int n = 0;

  for(l = *list; l != NULL; l = l->next) {
    57a8:	6803      	ldr	r3, [r0, #0]
    57aa:	2b00      	cmp	r3, #0
    57ac:	d005      	beq.n	57ba <list_length+0x12>
    57ae:	2000      	movs	r0, #0
    ++n;
    57b0:	3001      	adds	r0, #1
list_length(list_t list)
{
  struct list *l;
  int n = 0;

  for(l = *list; l != NULL; l = l->next) {
    57b2:	681b      	ldr	r3, [r3, #0]
    57b4:	2b00      	cmp	r3, #0
    57b6:	d1fb      	bne.n	57b0 <list_length+0x8>
    57b8:	e000      	b.n	57bc <list_length+0x14>
/*---------------------------------------------------------------------------*/
int
list_length(list_t list)
{
  struct list *l;
  int n = 0;
    57ba:	2000      	movs	r0, #0
  for(l = *list; l != NULL; l = l->next) {
    ++n;
  }

  return n;
}
    57bc:	4770      	bx	lr
    57be:	46c0      	nop			; (mov r8, r8)

000057c0 <list_item_next>:
 *             lists.
 */
void *
list_item_next(void *item)
{
  return item == NULL? NULL: ((struct list *)item)->next;
    57c0:	2800      	cmp	r0, #0
    57c2:	d001      	beq.n	57c8 <list_item_next+0x8>
    57c4:	6800      	ldr	r0, [r0, #0]
    57c6:	e000      	b.n	57ca <list_item_next+0xa>
    57c8:	2000      	movs	r0, #0
}
    57ca:	4770      	bx	lr

000057cc <memb_init>:
#include "lib/memb.h"

/*---------------------------------------------------------------------------*/
void
memb_init(struct memb *m)
{
    57cc:	b538      	push	{r3, r4, r5, lr}
    57ce:	1c04      	adds	r4, r0, #0
  memset(m->count, 0, m->num);
    57d0:	8842      	ldrh	r2, [r0, #2]
    57d2:	6840      	ldr	r0, [r0, #4]
    57d4:	2100      	movs	r1, #0
    57d6:	4d04      	ldr	r5, [pc, #16]	; (57e8 <memb_init+0x1c>)
    57d8:	47a8      	blx	r5
  memset(m->mem, 0, m->size * m->num);
    57da:	8822      	ldrh	r2, [r4, #0]
    57dc:	8863      	ldrh	r3, [r4, #2]
    57de:	435a      	muls	r2, r3
    57e0:	68a0      	ldr	r0, [r4, #8]
    57e2:	2100      	movs	r1, #0
    57e4:	47a8      	blx	r5
}
    57e6:	bd38      	pop	{r3, r4, r5, pc}
    57e8:	00010b69 	.word	0x00010b69

000057ec <memb_alloc>:
/*---------------------------------------------------------------------------*/
void *
memb_alloc(struct memb *m)
{
    57ec:	b530      	push	{r4, r5, lr}
  int i;

  for(i = 0; i < m->num; ++i) {
    57ee:	8845      	ldrh	r5, [r0, #2]
    57f0:	2d00      	cmp	r5, #0
    57f2:	dd1a      	ble.n	582a <memb_alloc+0x3e>
    if(m->count[i] == 0) {
    57f4:	6844      	ldr	r4, [r0, #4]
    57f6:	7823      	ldrb	r3, [r4, #0]
    57f8:	2b00      	cmp	r3, #0
    57fa:	d10f      	bne.n	581c <memb_alloc+0x30>
    57fc:	e006      	b.n	580c <memb_alloc+0x20>
    57fe:	1c1c      	adds	r4, r3, #0
    5800:	3301      	adds	r3, #1
    5802:	1e59      	subs	r1, r3, #1
    5804:	7809      	ldrb	r1, [r1, #0]
    5806:	2900      	cmp	r1, #0
    5808:	d10a      	bne.n	5820 <memb_alloc+0x34>
    580a:	e000      	b.n	580e <memb_alloc+0x22>
void *
memb_alloc(struct memb *m)
{
  int i;

  for(i = 0; i < m->num; ++i) {
    580c:	2200      	movs	r2, #0
    if(m->count[i] == 0) {
      /* If this block was unused, we increase the reference count to
	 indicate that it now is used and return a pointer to the
	 memory block. */
      ++(m->count[i]);
    580e:	2301      	movs	r3, #1
    5810:	7023      	strb	r3, [r4, #0]
      return (void *)((char *)m->mem + (i * m->size));
    5812:	8803      	ldrh	r3, [r0, #0]
    5814:	435a      	muls	r2, r3
    5816:	6880      	ldr	r0, [r0, #8]
    5818:	1880      	adds	r0, r0, r2
    581a:	e007      	b.n	582c <memb_alloc+0x40>
    581c:	1c63      	adds	r3, r4, #1
memb_alloc(struct memb *m)
{
  int i;

  for(i = 0; i < m->num; ++i) {
    if(m->count[i] == 0) {
    581e:	2200      	movs	r2, #0
void *
memb_alloc(struct memb *m)
{
  int i;

  for(i = 0; i < m->num; ++i) {
    5820:	3201      	adds	r2, #1
    5822:	42aa      	cmp	r2, r5
    5824:	dbeb      	blt.n	57fe <memb_alloc+0x12>
    }
  }

  /* No free block was found, so we return NULL to indicate failure to
     allocate block. */
  return NULL;
    5826:	2000      	movs	r0, #0
    5828:	e000      	b.n	582c <memb_alloc+0x40>
    582a:	2000      	movs	r0, #0
}
    582c:	bd30      	pop	{r4, r5, pc}
    582e:	46c0      	nop			; (mov r8, r8)

00005830 <memb_free>:
/*---------------------------------------------------------------------------*/
char
memb_free(struct memb *m, void *ptr)
{
    5830:	b570      	push	{r4, r5, r6, lr}
  int i;
  char *ptr2;

  /* Walk through the list of blocks and try to find the block to
     which the pointer "ptr" points to. */
  ptr2 = (char *)m->mem;
    5832:	6882      	ldr	r2, [r0, #8]
  for(i = 0; i < m->num; ++i) {
    5834:	8845      	ldrh	r5, [r0, #2]
    5836:	2d00      	cmp	r5, #0
    5838:	dd1d      	ble.n	5876 <memb_free+0x46>
    
    if(ptr2 == (char *)ptr) {
    583a:	428a      	cmp	r2, r1
    583c:	d111      	bne.n	5862 <memb_free+0x32>
    583e:	e003      	b.n	5848 <memb_free+0x18>
    5840:	1994      	adds	r4, r2, r6
    5842:	4291      	cmp	r1, r2
    5844:	d111      	bne.n	586a <memb_free+0x3a>
    5846:	e000      	b.n	584a <memb_free+0x1a>
  char *ptr2;

  /* Walk through the list of blocks and try to find the block to
     which the pointer "ptr" points to. */
  ptr2 = (char *)m->mem;
  for(i = 0; i < m->num; ++i) {
    5848:	2300      	movs	r3, #0
    
    if(ptr2 == (char *)ptr) {
      /* We've found to block to which "ptr" points so we decrease the
	 reference count and return the new value of it. */
      if(m->count[i] > 0) {
    584a:	1c19      	adds	r1, r3, #0
    584c:	6842      	ldr	r2, [r0, #4]
    584e:	4694      	mov	ip, r2
    5850:	4463      	add	r3, ip
    5852:	781a      	ldrb	r2, [r3, #0]
    5854:	2a00      	cmp	r2, #0
    5856:	d001      	beq.n	585c <memb_free+0x2c>
	/* Make sure that we don't deallocate free memory. */
	--(m->count[i]);
    5858:	3a01      	subs	r2, #1
    585a:	701a      	strb	r2, [r3, #0]
      }
      return m->count[i];
    585c:	6843      	ldr	r3, [r0, #4]
    585e:	5c58      	ldrb	r0, [r3, r1]
    5860:	e00a      	b.n	5878 <memb_free+0x48>
    }
    ptr2 += m->size;
    5862:	8806      	ldrh	r6, [r0, #0]
    5864:	1992      	adds	r2, r2, r6
    5866:	2300      	movs	r3, #0
    5868:	e000      	b.n	586c <memb_free+0x3c>
    586a:	1c22      	adds	r2, r4, #0
  char *ptr2;

  /* Walk through the list of blocks and try to find the block to
     which the pointer "ptr" points to. */
  ptr2 = (char *)m->mem;
  for(i = 0; i < m->num; ++i) {
    586c:	3301      	adds	r3, #1
    586e:	42ab      	cmp	r3, r5
    5870:	dbe6      	blt.n	5840 <memb_free+0x10>
      }
      return m->count[i];
    }
    ptr2 += m->size;
  }
  return -1;
    5872:	20ff      	movs	r0, #255	; 0xff
    5874:	e000      	b.n	5878 <memb_free+0x48>
    5876:	20ff      	movs	r0, #255	; 0xff
}
    5878:	bd70      	pop	{r4, r5, r6, pc}
    587a:	46c0      	nop			; (mov r8, r8)

0000587c <memb_inmemb>:
/*---------------------------------------------------------------------------*/
int
memb_inmemb(struct memb *m, void *ptr)
{
    587c:	1c03      	adds	r3, r0, #0
  return (char *)ptr >= (char *)m->mem &&
    587e:	6882      	ldr	r2, [r0, #8]
    5880:	2000      	movs	r0, #0
    5882:	428a      	cmp	r2, r1
    5884:	d806      	bhi.n	5894 <memb_inmemb+0x18>
    (char *)ptr < (char *)m->mem + (m->num * m->size);
    5886:	8858      	ldrh	r0, [r3, #2]
    5888:	881b      	ldrh	r3, [r3, #0]
    588a:	4358      	muls	r0, r3
    588c:	1810      	adds	r0, r2, r0
}
/*---------------------------------------------------------------------------*/
int
memb_inmemb(struct memb *m, void *ptr)
{
  return (char *)ptr >= (char *)m->mem &&
    588e:	4281      	cmp	r1, r0
    5890:	4189      	sbcs	r1, r1
    5892:	4248      	negs	r0, r1
    (char *)ptr < (char *)m->mem + (m->num * m->size);
}
    5894:	4770      	bx	lr
    5896:	46c0      	nop			; (mov r8, r8)

00005898 <random_init>:
#include <stdlib.h>

/*---------------------------------------------------------------------------*/
void
random_init(unsigned short seed)
{
    5898:	b508      	push	{r3, lr}
  srand(seed);
    589a:	4b01      	ldr	r3, [pc, #4]	; (58a0 <random_init+0x8>)
    589c:	4798      	blx	r3
}
    589e:	bd08      	pop	{r3, pc}
    58a0:	00010bd5 	.word	0x00010bd5

000058a4 <random_rand>:
/*---------------------------------------------------------------------------*/
unsigned short
random_rand(void)
{
    58a4:	b508      	push	{r3, lr}
/* In gcc int rand() uses RAND_MAX and long random() uses RANDOM_MAX=0x7FFFFFFF */
/* RAND_MAX varies depending on the architecture */

  return (unsigned short)rand();
    58a6:	4b02      	ldr	r3, [pc, #8]	; (58b0 <random_rand+0xc>)
    58a8:	4798      	blx	r3
    58aa:	b280      	uxth	r0, r0
}
    58ac:	bd08      	pop	{r3, pc}
    58ae:	46c0      	nop			; (mov r8, r8)
    58b0:	00010c31 	.word	0x00010c31

000058b4 <process_thread_sensors_process>:
  }
  return NULL;
}
/*---------------------------------------------------------------------------*/
PROCESS_THREAD(sensors_process, ev, data)
{
    58b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    58b6:	1c07      	adds	r7, r0, #0
  static int i;
  static int events;

  PROCESS_BEGIN();
    58b8:	8803      	ldrh	r3, [r0, #0]
    58ba:	2b78      	cmp	r3, #120	; 0x78
    58bc:	d026      	beq.n	590c <process_thread_sensors_process+0x58>
    58be:	2b7f      	cmp	r3, #127	; 0x7f
    58c0:	d03c      	beq.n	593c <process_thread_sensors_process+0x88>
    58c2:	2b00      	cmp	r3, #0
    58c4:	d159      	bne.n	597a <process_thread_sensors_process+0xc6>

  sensors_event = process_alloc_event();
    58c6:	4b2f      	ldr	r3, [pc, #188]	; (5984 <process_thread_sensors_process+0xd0>)
    58c8:	4798      	blx	r3
    58ca:	4b2f      	ldr	r3, [pc, #188]	; (5988 <process_thread_sensors_process+0xd4>)
    58cc:	7018      	strb	r0, [r3, #0]

  
  for(i = 0; sensors[i] != NULL; ++i) {
    58ce:	2200      	movs	r2, #0
    58d0:	4b2e      	ldr	r3, [pc, #184]	; (598c <process_thread_sensors_process+0xd8>)
    58d2:	601a      	str	r2, [r3, #0]
    58d4:	4b2e      	ldr	r3, [pc, #184]	; (5990 <process_thread_sensors_process+0xdc>)
    58d6:	681a      	ldr	r2, [r3, #0]
    58d8:	2a00      	cmp	r2, #0
    58da:	d010      	beq.n	58fe <process_thread_sensors_process+0x4a>
    58dc:	2300      	movs	r3, #0
    sensors_flags[i] = 0;
    58de:	4e2d      	ldr	r6, [pc, #180]	; (5994 <process_thread_sensors_process+0xe0>)
  PROCESS_BEGIN();

  sensors_event = process_alloc_event();

  
  for(i = 0; sensors[i] != NULL; ++i) {
    58e0:	4c2a      	ldr	r4, [pc, #168]	; (598c <process_thread_sensors_process+0xd8>)
    58e2:	4d2b      	ldr	r5, [pc, #172]	; (5990 <process_thread_sensors_process+0xdc>)
    sensors_flags[i] = 0;
    58e4:	2100      	movs	r1, #0
    58e6:	54f1      	strb	r1, [r6, r3]
    sensors[i]->configure(SENSORS_HW_INIT, 0);
    58e8:	6893      	ldr	r3, [r2, #8]
    58ea:	2080      	movs	r0, #128	; 0x80
    58ec:	4798      	blx	r3
  PROCESS_BEGIN();

  sensors_event = process_alloc_event();

  
  for(i = 0; sensors[i] != NULL; ++i) {
    58ee:	6823      	ldr	r3, [r4, #0]
    58f0:	3301      	adds	r3, #1
    58f2:	6023      	str	r3, [r4, #0]
    58f4:	009a      	lsls	r2, r3, #2
    58f6:	5952      	ldr	r2, [r2, r5]
    58f8:	2a00      	cmp	r2, #0
    58fa:	d1f3      	bne.n	58e4 <process_thread_sensors_process+0x30>
    58fc:	e000      	b.n	5900 <process_thread_sensors_process+0x4c>
    58fe:	2300      	movs	r3, #0
    sensors_flags[i] = 0;
    sensors[i]->configure(SENSORS_HW_INIT, 0);
  }
  num_sensors = i;
    5900:	4a25      	ldr	r2, [pc, #148]	; (5998 <process_thread_sensors_process+0xe4>)
    5902:	7013      	strb	r3, [r2, #0]

  while(1) {

    PROCESS_WAIT_EVENT();
    5904:	2378      	movs	r3, #120	; 0x78
    5906:	803b      	strh	r3, [r7, #0]
    5908:	2001      	movs	r0, #1
    590a:	e039      	b.n	5980 <process_thread_sensors_process+0xcc>

    do {
      events = 0;
    590c:	2300      	movs	r3, #0
    590e:	4a23      	ldr	r2, [pc, #140]	; (599c <process_thread_sensors_process+0xe8>)
    5910:	6013      	str	r3, [r2, #0]
      for(i = 0; i < num_sensors; ++i) {
    5912:	4a1e      	ldr	r2, [pc, #120]	; (598c <process_thread_sensors_process+0xd8>)
    5914:	6013      	str	r3, [r2, #0]
    5916:	e025      	b.n	5964 <process_thread_sensors_process+0xb0>
	if(sensors_flags[i] & FLAG_CHANGED) {
    5918:	4a1e      	ldr	r2, [pc, #120]	; (5994 <process_thread_sensors_process+0xe0>)
    591a:	5cd2      	ldrb	r2, [r2, r3]
    591c:	2a7f      	cmp	r2, #127	; 0x7f
    591e:	d91d      	bls.n	595c <process_thread_sensors_process+0xa8>
	  if(process_post(PROCESS_BROADCAST, sensors_event, (void *)sensors[i]) == PROCESS_ERR_OK) {
    5920:	4a19      	ldr	r2, [pc, #100]	; (5988 <process_thread_sensors_process+0xd4>)
    5922:	7811      	ldrb	r1, [r2, #0]
    5924:	009b      	lsls	r3, r3, #2
    5926:	4a1a      	ldr	r2, [pc, #104]	; (5990 <process_thread_sensors_process+0xdc>)
    5928:	589a      	ldr	r2, [r3, r2]
    592a:	2000      	movs	r0, #0
    592c:	4b1c      	ldr	r3, [pc, #112]	; (59a0 <process_thread_sensors_process+0xec>)
    592e:	4798      	blx	r3
    5930:	2800      	cmp	r0, #0
    5932:	d108      	bne.n	5946 <process_thread_sensors_process+0x92>
	    PROCESS_WAIT_EVENT_UNTIL(ev == sensors_event);
    5934:	237f      	movs	r3, #127	; 0x7f
    5936:	803b      	strh	r3, [r7, #0]
    5938:	3001      	adds	r0, #1
    593a:	e021      	b.n	5980 <process_thread_sensors_process+0xcc>
    593c:	4b12      	ldr	r3, [pc, #72]	; (5988 <process_thread_sensors_process+0xd4>)
    593e:	781b      	ldrb	r3, [r3, #0]
    5940:	2001      	movs	r0, #1
    5942:	428b      	cmp	r3, r1
    5944:	d11c      	bne.n	5980 <process_thread_sensors_process+0xcc>
	  }
	  sensors_flags[i] &= ~FLAG_CHANGED;
    5946:	4b11      	ldr	r3, [pc, #68]	; (598c <process_thread_sensors_process+0xd8>)
    5948:	681a      	ldr	r2, [r3, #0]
    594a:	4912      	ldr	r1, [pc, #72]	; (5994 <process_thread_sensors_process+0xe0>)
    594c:	5c8b      	ldrb	r3, [r1, r2]
    594e:	207f      	movs	r0, #127	; 0x7f
    5950:	4003      	ands	r3, r0
    5952:	548b      	strb	r3, [r1, r2]
	  events++;
    5954:	4a11      	ldr	r2, [pc, #68]	; (599c <process_thread_sensors_process+0xe8>)
    5956:	6813      	ldr	r3, [r2, #0]
    5958:	3301      	adds	r3, #1
    595a:	6013      	str	r3, [r2, #0]

    PROCESS_WAIT_EVENT();

    do {
      events = 0;
      for(i = 0; i < num_sensors; ++i) {
    595c:	4a0b      	ldr	r2, [pc, #44]	; (598c <process_thread_sensors_process+0xd8>)
    595e:	6813      	ldr	r3, [r2, #0]
    5960:	3301      	adds	r3, #1
    5962:	6013      	str	r3, [r2, #0]
    5964:	4b09      	ldr	r3, [pc, #36]	; (598c <process_thread_sensors_process+0xd8>)
    5966:	681b      	ldr	r3, [r3, #0]
    5968:	4a0b      	ldr	r2, [pc, #44]	; (5998 <process_thread_sensors_process+0xe4>)
    596a:	7812      	ldrb	r2, [r2, #0]
    596c:	429a      	cmp	r2, r3
    596e:	dcd3      	bgt.n	5918 <process_thread_sensors_process+0x64>
	  }
	  sensors_flags[i] &= ~FLAG_CHANGED;
	  events++;
	}
      }
    } while(events);
    5970:	4b0a      	ldr	r3, [pc, #40]	; (599c <process_thread_sensors_process+0xe8>)
    5972:	681b      	ldr	r3, [r3, #0]
    5974:	2b00      	cmp	r3, #0
    5976:	d1c9      	bne.n	590c <process_thread_sensors_process+0x58>
    5978:	e7c4      	b.n	5904 <process_thread_sensors_process+0x50>
  }

  PROCESS_END();
    597a:	2300      	movs	r3, #0
    597c:	8003      	strh	r3, [r0, #0]
    597e:	2003      	movs	r0, #3
}
    5980:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    5982:	46c0      	nop			; (mov r8, r8)
    5984:	0000eafd 	.word	0x0000eafd
    5988:	20002b55 	.word	0x20002b55
    598c:	20000390 	.word	0x20000390
    5990:	200001b8 	.word	0x200001b8
    5994:	20003520 	.word	0x20003520
    5998:	2000038e 	.word	0x2000038e
    599c:	20000394 	.word	0x20000394
    59a0:	0000ec09 	.word	0x0000ec09

000059a4 <set_packet_attrs>:
static void
set_packet_attrs(void)
{
  int c = 0;
  /* set protocol in NETWORK_ID */
  packetbuf_set_attr(PACKETBUF_ATTR_NETWORK_ID, UIP_IP_BUF->proto);
    59a4:	4b11      	ldr	r3, [pc, #68]	; (59ec <set_packet_attrs+0x48>)
    59a6:	799b      	ldrb	r3, [r3, #6]

static inline int
packetbuf_set_attr(uint8_t type, const packetbuf_attr_t val)
{
/*   packetbuf_attrs[type].type = type; */
  packetbuf_attrs[type].val = val;
    59a8:	4a11      	ldr	r2, [pc, #68]	; (59f0 <set_packet_attrs+0x4c>)
    59aa:	8093      	strh	r3, [r2, #4]

  /* assign values to the channel attribute (port or type + code) */
  if(UIP_IP_BUF->proto == UIP_PROTO_UDP) {
    59ac:	2b11      	cmp	r3, #17
    59ae:	d106      	bne.n	59be <set_packet_attrs+0x1a>
    c = UIP_UDP_BUF->srcport;
    59b0:	4b0e      	ldr	r3, [pc, #56]	; (59ec <set_packet_attrs+0x48>)
    59b2:	8d19      	ldrh	r1, [r3, #40]	; 0x28
    if(UIP_UDP_BUF->destport < c) {
    59b4:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
    59b6:	428a      	cmp	r2, r1
    59b8:	dd14      	ble.n	59e4 <set_packet_attrs+0x40>
    59ba:	1c0a      	adds	r2, r1, #0
    59bc:	e012      	b.n	59e4 <set_packet_attrs+0x40>
      c = UIP_UDP_BUF->destport;
    }
  } else if(UIP_IP_BUF->proto == UIP_PROTO_TCP) {
    59be:	2b06      	cmp	r3, #6
    59c0:	d106      	bne.n	59d0 <set_packet_attrs+0x2c>
    c = UIP_TCP_BUF->srcport;
    59c2:	4b0a      	ldr	r3, [pc, #40]	; (59ec <set_packet_attrs+0x48>)
    59c4:	8d19      	ldrh	r1, [r3, #40]	; 0x28
    if(UIP_TCP_BUF->destport < c) {
    59c6:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
    59c8:	428a      	cmp	r2, r1
    59ca:	dd0b      	ble.n	59e4 <set_packet_attrs+0x40>
    59cc:	1c0a      	adds	r2, r1, #0
    59ce:	e009      	b.n	59e4 <set_packet_attrs+0x40>
}

static void
set_packet_attrs(void)
{
  int c = 0;
    59d0:	2200      	movs	r2, #0
  } else if(UIP_IP_BUF->proto == UIP_PROTO_TCP) {
    c = UIP_TCP_BUF->srcport;
    if(UIP_TCP_BUF->destport < c) {
      c = UIP_TCP_BUF->destport;
    }
  } else if(UIP_IP_BUF->proto == UIP_PROTO_ICMP6) {
    59d2:	2b3a      	cmp	r3, #58	; 0x3a
    59d4:	d106      	bne.n	59e4 <set_packet_attrs+0x40>
    c = UIP_ICMP_BUF->type << 8 | UIP_ICMP_BUF->icode;
    59d6:	4b05      	ldr	r3, [pc, #20]	; (59ec <set_packet_attrs+0x48>)
    59d8:	3228      	adds	r2, #40	; 0x28
    59da:	5c9a      	ldrb	r2, [r3, r2]
    59dc:	0212      	lsls	r2, r2, #8
    59de:	2129      	movs	r1, #41	; 0x29
    59e0:	5c5b      	ldrb	r3, [r3, r1]
    59e2:	431a      	orrs	r2, r3
    59e4:	4b02      	ldr	r3, [pc, #8]	; (59f0 <set_packet_attrs+0x4c>)
    59e6:	805a      	strh	r2, [r3, #2]

/*   if(uip_ds6_is_my_addr(&UIP_IP_BUF->srcipaddr)) { */
/*     own = 1; */
/*   } */

}
    59e8:	4770      	bx	lr
    59ea:	46c0      	nop			; (mov r8, r8)
    59ec:	20002cd4 	.word	0x20002cd4
    59f0:	200031f8 	.word	0x200031f8

000059f4 <sicslowpan_init>:
/*--------------------------------------------------------------------*/
/* \brief 6lowpan init function (called by the MAC layer)             */
/*--------------------------------------------------------------------*/
void
sicslowpan_init(void)
{
    59f4:	b508      	push	{r3, lr}
  /*
   * Set out output function as the function to be called from uIP to
   * send a packet.
   */
  tcpip_set_outputfunc(output);
    59f6:	4806      	ldr	r0, [pc, #24]	; (5a10 <sicslowpan_init+0x1c>)
    59f8:	4b06      	ldr	r3, [pc, #24]	; (5a14 <sicslowpan_init+0x20>)
    59fa:	4798      	blx	r3
 * (Saves up to 13 bytes per 6lowpan packet)
 * The platform contiki-conf.h file can override this using e.g.
 * #define SICSLOWPAN_CONF_ADDR_CONTEXT_0 {addr_contexts[0].prefix[0]=0xbb;addr_contexts[0].prefix[1]=0xbb;}
 */
#if SICSLOWPAN_CONF_MAX_ADDR_CONTEXTS > 0 
  addr_contexts[0].used   = 1;
    59fc:	4b06      	ldr	r3, [pc, #24]	; (5a18 <sicslowpan_init+0x24>)
    59fe:	2201      	movs	r2, #1
    5a00:	701a      	strb	r2, [r3, #0]
  addr_contexts[0].number = 0;
    5a02:	2200      	movs	r2, #0
    5a04:	705a      	strb	r2, [r3, #1]
#ifdef SICSLOWPAN_CONF_ADDR_CONTEXT_0
	SICSLOWPAN_CONF_ADDR_CONTEXT_0;
#else
  addr_contexts[0].prefix[0] = 0xaa; 
    5a06:	32aa      	adds	r2, #170	; 0xaa
    5a08:	709a      	strb	r2, [r3, #2]
  addr_contexts[0].prefix[1] = 0xaa;
    5a0a:	70da      	strb	r2, [r3, #3]
    }
  }
#endif /* SICSLOWPAN_CONF_MAX_ADDR_CONTEXTS > 1 */

#endif /* SICSLOWPAN_COMPRESSION == SICSLOWPAN_COMPRESSION_HC06 */
}
    5a0c:	bd08      	pop	{r3, pc}
    5a0e:	46c0      	nop			; (mov r8, r8)
    5a10:	00005b29 	.word	0x00005b29
    5a14:	0000a571 	.word	0x0000a571
    5a18:	20000558 	.word	0x20000558

00005a1c <compress_addr_64>:
  return NULL;
}
/*--------------------------------------------------------------------*/
static uint8_t
compress_addr_64(uint8_t bitpos, uip_ipaddr_t *ipaddr, uip_lladdr_t *lladdr)
{
    5a1c:	b570      	push	{r4, r5, r6, lr}
  if(uip_is_addr_mac_addr_based(ipaddr, lladdr)) {
    5a1e:	7815      	ldrb	r5, [r2, #0]
    5a20:	7a0c      	ldrb	r4, [r1, #8]
    5a22:	2302      	movs	r3, #2
    5a24:	406b      	eors	r3, r5
    5a26:	429c      	cmp	r4, r3
    5a28:	d11f      	bne.n	5a6a <compress_addr_64+0x4e>
    5a2a:	7a4c      	ldrb	r4, [r1, #9]
    5a2c:	7853      	ldrb	r3, [r2, #1]
    5a2e:	429c      	cmp	r4, r3
    5a30:	d11b      	bne.n	5a6a <compress_addr_64+0x4e>
    5a32:	7a8c      	ldrb	r4, [r1, #10]
    5a34:	7893      	ldrb	r3, [r2, #2]
    5a36:	429c      	cmp	r4, r3
    5a38:	d117      	bne.n	5a6a <compress_addr_64+0x4e>
    5a3a:	7acc      	ldrb	r4, [r1, #11]
    5a3c:	78d3      	ldrb	r3, [r2, #3]
    5a3e:	429c      	cmp	r4, r3
    5a40:	d113      	bne.n	5a6a <compress_addr_64+0x4e>
    5a42:	7b0c      	ldrb	r4, [r1, #12]
    5a44:	7913      	ldrb	r3, [r2, #4]
    5a46:	429c      	cmp	r4, r3
    5a48:	d10f      	bne.n	5a6a <compress_addr_64+0x4e>
    5a4a:	7b4c      	ldrb	r4, [r1, #13]
    5a4c:	7953      	ldrb	r3, [r2, #5]
    5a4e:	429c      	cmp	r4, r3
    5a50:	d10b      	bne.n	5a6a <compress_addr_64+0x4e>
    5a52:	7b8c      	ldrb	r4, [r1, #14]
    5a54:	7993      	ldrb	r3, [r2, #6]
    5a56:	429c      	cmp	r4, r3
    5a58:	d107      	bne.n	5a6a <compress_addr_64+0x4e>
    5a5a:	7bcc      	ldrb	r4, [r1, #15]
    5a5c:	79d3      	ldrb	r3, [r2, #7]
    5a5e:	429c      	cmp	r4, r3
    5a60:	d103      	bne.n	5a6a <compress_addr_64+0x4e>
    return 3 << bitpos; /* 0-bits */
    5a62:	2303      	movs	r3, #3
    5a64:	4083      	lsls	r3, r0
    5a66:	b2d8      	uxtb	r0, r3
    5a68:	e02a      	b.n	5ac0 <compress_addr_64+0xa4>
    5a6a:	1c05      	adds	r5, r0, #0
  } else if(sicslowpan_is_iid_16_bit_compressable(ipaddr)) {
    5a6c:	7a0a      	ldrb	r2, [r1, #8]
    5a6e:	7a4b      	ldrb	r3, [r1, #9]
    5a70:	021b      	lsls	r3, r3, #8
    5a72:	4313      	orrs	r3, r2
    5a74:	d118      	bne.n	5aa8 <compress_addr_64+0x8c>
    5a76:	7a8b      	ldrb	r3, [r1, #10]
    5a78:	2b00      	cmp	r3, #0
    5a7a:	d115      	bne.n	5aa8 <compress_addr_64+0x8c>
    5a7c:	7acb      	ldrb	r3, [r1, #11]
    5a7e:	2bff      	cmp	r3, #255	; 0xff
    5a80:	d112      	bne.n	5aa8 <compress_addr_64+0x8c>
    5a82:	7b0b      	ldrb	r3, [r1, #12]
    5a84:	2bfe      	cmp	r3, #254	; 0xfe
    5a86:	d10f      	bne.n	5aa8 <compress_addr_64+0x8c>
    5a88:	7b4b      	ldrb	r3, [r1, #13]
    5a8a:	2b00      	cmp	r3, #0
    5a8c:	d10c      	bne.n	5aa8 <compress_addr_64+0x8c>
    /* compress IID to 16 bits xxxx::0000:00ff:fe00:XXXX */
    memcpy(hc06_ptr, &ipaddr->u16[7], 2);
    5a8e:	4e0d      	ldr	r6, [pc, #52]	; (5ac4 <compress_addr_64+0xa8>)
    5a90:	6834      	ldr	r4, [r6, #0]
    5a92:	310e      	adds	r1, #14
    5a94:	1c20      	adds	r0, r4, #0
    5a96:	2202      	movs	r2, #2
    5a98:	4b0b      	ldr	r3, [pc, #44]	; (5ac8 <compress_addr_64+0xac>)
    5a9a:	4798      	blx	r3
    hc06_ptr += 2;
    5a9c:	3402      	adds	r4, #2
    5a9e:	6034      	str	r4, [r6, #0]
    return 2 << bitpos; /* 16-bits */
    5aa0:	2302      	movs	r3, #2
    5aa2:	40ab      	lsls	r3, r5
    5aa4:	b2d8      	uxtb	r0, r3
    5aa6:	e00b      	b.n	5ac0 <compress_addr_64+0xa4>
  } else {
    /* do not compress IID => xxxx::IID */
    memcpy(hc06_ptr, &ipaddr->u16[4], 8);
    5aa8:	4e06      	ldr	r6, [pc, #24]	; (5ac4 <compress_addr_64+0xa8>)
    5aaa:	6834      	ldr	r4, [r6, #0]
    5aac:	3108      	adds	r1, #8
    5aae:	1c20      	adds	r0, r4, #0
    5ab0:	2208      	movs	r2, #8
    5ab2:	4b05      	ldr	r3, [pc, #20]	; (5ac8 <compress_addr_64+0xac>)
    5ab4:	4798      	blx	r3
    hc06_ptr += 8;
    5ab6:	3408      	adds	r4, #8
    5ab8:	6034      	str	r4, [r6, #0]
    return 1 << bitpos; /* 64-bits */
    5aba:	2001      	movs	r0, #1
    5abc:	40a8      	lsls	r0, r5
    5abe:	b2c0      	uxtb	r0, r0
  }
}
    5ac0:	bd70      	pop	{r4, r5, r6, pc}
    5ac2:	46c0      	nop			; (mov r8, r8)
    5ac4:	20000564 	.word	0x20000564
    5ac8:	00010b2f 	.word	0x00010b2f

00005acc <addr_context_lookup_by_prefix>:
 * @{                                                                 */
/*--------------------------------------------------------------------*/
/** \brief find the context corresponding to prefix ipaddr */
static struct sicslowpan_addr_context*
addr_context_lookup_by_prefix(uip_ipaddr_t *ipaddr)
{
    5acc:	b508      	push	{r3, lr}
/* Remove code to avoid warnings and save flash if no context is used */
#if SICSLOWPAN_CONF_MAX_ADDR_CONTEXTS > 0
  int i;
  for(i = 0; i < SICSLOWPAN_CONF_MAX_ADDR_CONTEXTS; i++) {
    if((addr_contexts[i].used == 1) &&
    5ace:	4b08      	ldr	r3, [pc, #32]	; (5af0 <addr_context_lookup_by_prefix+0x24>)
    5ad0:	781a      	ldrb	r2, [r3, #0]
       uip_ipaddr_prefixcmp(&addr_contexts[i].prefix, ipaddr, 64)) {
      return &addr_contexts[i];
    }
  }
#endif /* SICSLOWPAN_CONF_MAX_ADDR_CONTEXTS > 0 */
  return NULL;
    5ad2:	2300      	movs	r3, #0
{
/* Remove code to avoid warnings and save flash if no context is used */
#if SICSLOWPAN_CONF_MAX_ADDR_CONTEXTS > 0
  int i;
  for(i = 0; i < SICSLOWPAN_CONF_MAX_ADDR_CONTEXTS; i++) {
    if((addr_contexts[i].used == 1) &&
    5ad4:	2a01      	cmp	r2, #1
    5ad6:	d109      	bne.n	5aec <addr_context_lookup_by_prefix+0x20>
    5ad8:	1c01      	adds	r1, r0, #0
       uip_ipaddr_prefixcmp(&addr_contexts[i].prefix, ipaddr, 64)) {
    5ada:	4805      	ldr	r0, [pc, #20]	; (5af0 <addr_context_lookup_by_prefix+0x24>)
    5adc:	3002      	adds	r0, #2
    5ade:	3207      	adds	r2, #7
    5ae0:	4b04      	ldr	r3, [pc, #16]	; (5af4 <addr_context_lookup_by_prefix+0x28>)
    5ae2:	4798      	blx	r3
      return &addr_contexts[i];
    }
  }
#endif /* SICSLOWPAN_CONF_MAX_ADDR_CONTEXTS > 0 */
  return NULL;
    5ae4:	2300      	movs	r3, #0
{
/* Remove code to avoid warnings and save flash if no context is used */
#if SICSLOWPAN_CONF_MAX_ADDR_CONTEXTS > 0
  int i;
  for(i = 0; i < SICSLOWPAN_CONF_MAX_ADDR_CONTEXTS; i++) {
    if((addr_contexts[i].used == 1) &&
    5ae6:	2800      	cmp	r0, #0
    5ae8:	d100      	bne.n	5aec <addr_context_lookup_by_prefix+0x20>
       uip_ipaddr_prefixcmp(&addr_contexts[i].prefix, ipaddr, 64)) {
      return &addr_contexts[i];
    5aea:	4b01      	ldr	r3, [pc, #4]	; (5af0 <addr_context_lookup_by_prefix+0x24>)
    }
  }
#endif /* SICSLOWPAN_CONF_MAX_ADDR_CONTEXTS > 0 */
  return NULL;
}
    5aec:	1c18      	adds	r0, r3, #0
    5aee:	bd08      	pop	{r3, pc}
    5af0:	20000558 	.word	0x20000558
    5af4:	00010b11 	.word	0x00010b11

00005af8 <send_packet>:
 * packet.
 * \param dest the link layer destination address of the packet
 */
static void
send_packet(linkaddr_t *dest)
{
    5af8:	b508      	push	{r3, lr}
    5afa:	1c01      	adds	r1, r0, #0

static inline int
packetbuf_set_addr(uint8_t type, const linkaddr_t *addr)
{
/*   packetbuf_addrs[type - PACKETBUF_ADDR_FIRST].type = type; */
  linkaddr_copy(&packetbuf_addrs[type - PACKETBUF_ADDR_FIRST].addr, addr);
    5afc:	4805      	ldr	r0, [pc, #20]	; (5b14 <send_packet+0x1c>)
    5afe:	4b06      	ldr	r3, [pc, #24]	; (5b18 <send_packet+0x20>)
    5b00:	4798      	blx	r3
    packetbuf_set_attr(PACKETBUF_ATTR_RELIABLE, 1);
#endif

  /* Provide a callback function to receive the result of
     a packet transmission. */
  NETSTACK_MAC.send(&packet_sent, NULL);
    5b02:	4b06      	ldr	r3, [pc, #24]	; (5b1c <send_packet+0x24>)
    5b04:	689b      	ldr	r3, [r3, #8]
    5b06:	4806      	ldr	r0, [pc, #24]	; (5b20 <send_packet+0x28>)
    5b08:	2100      	movs	r1, #0
    5b0a:	4798      	blx	r3

  /* If we are sending multiple packets in a row, we need to let the
     watchdog know that we are still alive. */
  //watchdog_periodic();
  wdt_reset_count();
    5b0c:	4b05      	ldr	r3, [pc, #20]	; (5b24 <send_packet+0x2c>)
    5b0e:	4798      	blx	r3
}
    5b10:	bd08      	pop	{r3, pc}
    5b12:	46c0      	nop			; (mov r8, r8)
    5b14:	200031e0 	.word	0x200031e0
    5b18:	0000ac6d 	.word	0x0000ac6d
    5b1c:	00012e40 	.word	0x00012e40
    5b20:	000062a9 	.word	0x000062a9
    5b24:	00002729 	.word	0x00002729

00005b28 <output>:
 *  packet/fragments are put in packetbuf and delivered to the 802.15.4
 *  MAC.
 */
static uint8_t
output(const uip_lladdr_t *localdest)
{
    5b28:	b5f0      	push	{r4, r5, r6, r7, lr}
    5b2a:	464f      	mov	r7, r9
    5b2c:	4646      	mov	r6, r8
    5b2e:	b4c0      	push	{r6, r7}
    5b30:	b083      	sub	sp, #12
    5b32:	1c04      	adds	r4, r0, #0

  /* Number of bytes processed. */
  uint16_t processed_ip_out_len;

  /* init */
  uncomp_hdr_len = 0;
    5b34:	2300      	movs	r3, #0
    5b36:	4ab4      	ldr	r2, [pc, #720]	; (5e08 <output+0x2e0>)
    5b38:	7013      	strb	r3, [r2, #0]
  packetbuf_hdr_len = 0;
    5b3a:	4ab4      	ldr	r2, [pc, #720]	; (5e0c <output+0x2e4>)
    5b3c:	7013      	strb	r3, [r2, #0]

  /* reset packetbuf buffer */
  packetbuf_clear();
    5b3e:	4bb4      	ldr	r3, [pc, #720]	; (5e10 <output+0x2e8>)
    5b40:	4798      	blx	r3
  packetbuf_ptr = packetbuf_dataptr();
    5b42:	4bb4      	ldr	r3, [pc, #720]	; (5e14 <output+0x2ec>)
    5b44:	4798      	blx	r3
    5b46:	4bb4      	ldr	r3, [pc, #720]	; (5e18 <output+0x2f0>)
    5b48:	6018      	str	r0, [r3, #0]

static inline int
packetbuf_set_attr(uint8_t type, const packetbuf_attr_t val)
{
/*   packetbuf_attrs[type].type = type; */
  packetbuf_attrs[type].val = val;
    5b4a:	2205      	movs	r2, #5
    5b4c:	4bb3      	ldr	r3, [pc, #716]	; (5e1c <output+0x2f4>)
    5b4e:	829a      	strh	r2, [r3, #20]

  packetbuf_set_attr(PACKETBUF_ATTR_MAX_MAC_TRANSMISSIONS,
                     SICSLOWPAN_MAX_MAC_TRANSMISSIONS);

  if(callback) {
    5b50:	4bb3      	ldr	r3, [pc, #716]	; (5e20 <output+0x2f8>)
    5b52:	681b      	ldr	r3, [r3, #0]
    5b54:	2b00      	cmp	r3, #0
    5b56:	d001      	beq.n	5b5c <output+0x34>
    /* call the attribution when the callback comes, but set attributes
       here ! */
    set_packet_attrs();
    5b58:	4bb2      	ldr	r3, [pc, #712]	; (5e24 <output+0x2fc>)
    5b5a:	4798      	blx	r3

#define TCP_FIN 0x01
#define TCP_ACK 0x10
#define TCP_CTL 0x3f
  /* Set stream mode for all TCP packets, except FIN packets. */
  if(UIP_IP_BUF->proto == UIP_PROTO_TCP &&
    5b5c:	4bb2      	ldr	r3, [pc, #712]	; (5e28 <output+0x300>)
    5b5e:	799b      	ldrb	r3, [r3, #6]
    5b60:	2b06      	cmp	r3, #6
    5b62:	d10c      	bne.n	5b7e <output+0x56>
     (UIP_TCP_BUF->flags & TCP_FIN) == 0 &&
    5b64:	332f      	adds	r3, #47	; 0x2f
    5b66:	4ab0      	ldr	r2, [pc, #704]	; (5e28 <output+0x300>)
    5b68:	5cd3      	ldrb	r3, [r2, r3]

#define TCP_FIN 0x01
#define TCP_ACK 0x10
#define TCP_CTL 0x3f
  /* Set stream mode for all TCP packets, except FIN packets. */
  if(UIP_IP_BUF->proto == UIP_PROTO_TCP &&
    5b6a:	07da      	lsls	r2, r3, #31
    5b6c:	d500      	bpl.n	5b70 <output+0x48>
    5b6e:	e37d      	b.n	626c <output+0x744>
     (UIP_TCP_BUF->flags & TCP_FIN) == 0 &&
    5b70:	223f      	movs	r2, #63	; 0x3f
    5b72:	4013      	ands	r3, r2
    5b74:	2b10      	cmp	r3, #16
    5b76:	d002      	beq.n	5b7e <output+0x56>
    5b78:	3a3d      	subs	r2, #61	; 0x3d
    5b7a:	4ba8      	ldr	r3, [pc, #672]	; (5e1c <output+0x2f4>)
    5b7c:	849a      	strh	r2, [r3, #36]	; 0x24
  /*
   * The destination address will be tagged to each outbound
   * packet. If the argument localdest is NULL, we are sending a
   * broadcast packet.
   */
  if(localdest == NULL) {
    5b7e:	2c00      	cmp	r4, #0
    5b80:	d104      	bne.n	5b8c <output+0x64>
    linkaddr_copy(&dest, &linkaddr_null);
    5b82:	4668      	mov	r0, sp
    5b84:	49a9      	ldr	r1, [pc, #676]	; (5e2c <output+0x304>)
    5b86:	4baa      	ldr	r3, [pc, #680]	; (5e30 <output+0x308>)
    5b88:	4798      	blx	r3
    5b8a:	e003      	b.n	5b94 <output+0x6c>
  } else {
    linkaddr_copy(&dest, (const linkaddr_t *)localdest);
    5b8c:	4668      	mov	r0, sp
    5b8e:	1c21      	adds	r1, r4, #0
    5b90:	4ba7      	ldr	r3, [pc, #668]	; (5e30 <output+0x308>)
    5b92:	4798      	blx	r3
    }
    PRINTF("\n\r");
  }
#endif

  hc06_ptr = packetbuf_ptr + 2;
    5b94:	4ba0      	ldr	r3, [pc, #640]	; (5e18 <output+0x2f0>)
    5b96:	681d      	ldr	r5, [r3, #0]
    5b98:	1caa      	adds	r2, r5, #2
    5b9a:	4ba6      	ldr	r3, [pc, #664]	; (5e34 <output+0x30c>)
    5b9c:	601a      	str	r2, [r3, #0]
   * this does not work. We therefore reset the IPHC encoding here
   */

  iphc0 = SICSLOWPAN_DISPATCH_IPHC;
  iphc1 = 0;
  PACKETBUF_IPHC_BUF[2] = 0; /* might not be used - but needs to be cleared */
    5b9e:	4b9b      	ldr	r3, [pc, #620]	; (5e0c <output+0x2e4>)
    5ba0:	781c      	ldrb	r4, [r3, #0]
    5ba2:	3402      	adds	r4, #2
    5ba4:	192c      	adds	r4, r5, r4
    5ba6:	2300      	movs	r3, #0
    5ba8:	7023      	strb	r3, [r4, #0]


  /* check if dest context exists (for allocating third byte) */
  /* TODO: fix this so that it remembers the looked up values for
     avoiding two lookups - or set the lookup values immediately */
  if(addr_context_lookup_by_prefix(&UIP_IP_BUF->destipaddr) != NULL ||
    5baa:	48a3      	ldr	r0, [pc, #652]	; (5e38 <output+0x310>)
    5bac:	4ba3      	ldr	r3, [pc, #652]	; (5e3c <output+0x314>)
    5bae:	4798      	blx	r3
    5bb0:	2800      	cmp	r0, #0
    5bb2:	d104      	bne.n	5bbe <output+0x96>
     addr_context_lookup_by_prefix(&UIP_IP_BUF->srcipaddr) != NULL) {
    5bb4:	48a2      	ldr	r0, [pc, #648]	; (5e40 <output+0x318>)
    5bb6:	4ba1      	ldr	r3, [pc, #644]	; (5e3c <output+0x314>)
    5bb8:	4798      	blx	r3


  /* check if dest context exists (for allocating third byte) */
  /* TODO: fix this so that it remembers the looked up values for
     avoiding two lookups - or set the lookup values immediately */
  if(addr_context_lookup_by_prefix(&UIP_IP_BUF->destipaddr) != NULL ||
    5bba:	2800      	cmp	r0, #0
    5bbc:	d004      	beq.n	5bc8 <output+0xa0>
     addr_context_lookup_by_prefix(&UIP_IP_BUF->srcipaddr) != NULL) {
    /* set context flag and increase hc06_ptr */
    PRINTF("IPHC: compressing dest or src ipaddr - setting CID\n\r");
    iphc1 |= SICSLOWPAN_IPHC_CID;
    hc06_ptr++;
    5bbe:	3503      	adds	r5, #3
    5bc0:	4b9c      	ldr	r3, [pc, #624]	; (5e34 <output+0x30c>)
    5bc2:	601d      	str	r5, [r3, #0]
     avoiding two lookups - or set the lookup values immediately */
  if(addr_context_lookup_by_prefix(&UIP_IP_BUF->destipaddr) != NULL ||
     addr_context_lookup_by_prefix(&UIP_IP_BUF->srcipaddr) != NULL) {
    /* set context flag and increase hc06_ptr */
    PRINTF("IPHC: compressing dest or src ipaddr - setting CID\n\r");
    iphc1 |= SICSLOWPAN_IPHC_CID;
    5bc4:	2580      	movs	r5, #128	; 0x80
    5bc6:	e000      	b.n	5bca <output+0xa2>
   * If the field is 0, and the current bit value in memory is 1,
   * this does not work. We therefore reset the IPHC encoding here
   */

  iphc0 = SICSLOWPAN_DISPATCH_IPHC;
  iphc1 = 0;
    5bc8:	2500      	movs	r5, #0
   * We have to process both in the same time as the offset of traffic class
   * depends on the presence of version and flow label
   */
 
  /* hc06 format of tc is ECN | DSCP , original is DSCP | ECN */
  tmp = (UIP_IP_BUF->vtc << 4) | (UIP_IP_BUF->tcflow >> 4);
    5bca:	4b97      	ldr	r3, [pc, #604]	; (5e28 <output+0x300>)
    5bcc:	7818      	ldrb	r0, [r3, #0]
    5bce:	7859      	ldrb	r1, [r3, #1]
    5bd0:	0103      	lsls	r3, r0, #4
    5bd2:	090a      	lsrs	r2, r1, #4
    5bd4:	4313      	orrs	r3, r2
    5bd6:	b2db      	uxtb	r3, r3
  tmp = ((tmp & 0x03) << 6) | (tmp >> 2);
    5bd8:	019a      	lsls	r2, r3, #6
    5bda:	089b      	lsrs	r3, r3, #2
    5bdc:	4313      	orrs	r3, r2
    5bde:	b2db      	uxtb	r3, r3
    5be0:	b2df      	uxtb	r7, r3
  
  if(((UIP_IP_BUF->tcflow & 0x0F) == 0) &&
    5be2:	070a      	lsls	r2, r1, #28
    5be4:	d113      	bne.n	5c0e <output+0xe6>
     (UIP_IP_BUF->flow == 0)) {
    5be6:	4a90      	ldr	r2, [pc, #576]	; (5e28 <output+0x300>)
 
  /* hc06 format of tc is ECN | DSCP , original is DSCP | ECN */
  tmp = (UIP_IP_BUF->vtc << 4) | (UIP_IP_BUF->tcflow >> 4);
  tmp = ((tmp & 0x03) << 6) | (tmp >> 2);
  
  if(((UIP_IP_BUF->tcflow & 0x0F) == 0) &&
    5be8:	8852      	ldrh	r2, [r2, #2]
    5bea:	2a00      	cmp	r2, #0
    5bec:	d10f      	bne.n	5c0e <output+0xe6>
     (UIP_IP_BUF->flow == 0)) {
    /* flow label can be compressed */
    iphc0 |= SICSLOWPAN_IPHC_FL_C;
    if(((UIP_IP_BUF->vtc & 0x0F) == 0) &&
    5bee:	0703      	lsls	r3, r0, #28
    5bf0:	d106      	bne.n	5c00 <output+0xd8>
    5bf2:	230f      	movs	r3, #15
    5bf4:	1c0a      	adds	r2, r1, #0
    5bf6:	439a      	bics	r2, r3
       ((UIP_IP_BUF->tcflow & 0xF0) == 0)) {
      /* compress (elide) all */
      iphc0 |= SICSLOWPAN_IPHC_TC_C;
    5bf8:	2678      	movs	r6, #120	; 0x78
  
  if(((UIP_IP_BUF->tcflow & 0x0F) == 0) &&
     (UIP_IP_BUF->flow == 0)) {
    /* flow label can be compressed */
    iphc0 |= SICSLOWPAN_IPHC_FL_C;
    if(((UIP_IP_BUF->vtc & 0x0F) == 0) &&
    5bfa:	2a00      	cmp	r2, #0
    5bfc:	d100      	bne.n	5c00 <output+0xd8>
    5bfe:	e32f      	b.n	6260 <output+0x738>
       ((UIP_IP_BUF->tcflow & 0xF0) == 0)) {
      /* compress (elide) all */
      iphc0 |= SICSLOWPAN_IPHC_TC_C;
    } else {
      /* compress only the flow label */
     *hc06_ptr = tmp;
    5c00:	4a8c      	ldr	r2, [pc, #560]	; (5e34 <output+0x30c>)
    5c02:	6813      	ldr	r3, [r2, #0]
    5c04:	701f      	strb	r7, [r3, #0]
      hc06_ptr += 1;
    5c06:	3301      	adds	r3, #1
    5c08:	6013      	str	r3, [r2, #0]
  tmp = ((tmp & 0x03) << 6) | (tmp >> 2);
  
  if(((UIP_IP_BUF->tcflow & 0x0F) == 0) &&
     (UIP_IP_BUF->flow == 0)) {
    /* flow label can be compressed */
    iphc0 |= SICSLOWPAN_IPHC_FL_C;
    5c0a:	2670      	movs	r6, #112	; 0x70
    5c0c:	e328      	b.n	6260 <output+0x738>
     *hc06_ptr = tmp;
      hc06_ptr += 1;
    }
  } else {
    /* Flow label cannot be compressed */
    if(((UIP_IP_BUF->vtc & 0x0F) == 0) &&
    5c0e:	0702      	lsls	r2, r0, #28
    5c10:	d115      	bne.n	5c3e <output+0x116>
    5c12:	220f      	movs	r2, #15
    5c14:	1c08      	adds	r0, r1, #0
    5c16:	4390      	bics	r0, r2
    5c18:	1e02      	subs	r2, r0, #0
    5c1a:	d110      	bne.n	5c3e <output+0x116>
       ((UIP_IP_BUF->tcflow & 0xF0) == 0)) {
      /* compress only traffic class */
      iphc0 |= SICSLOWPAN_IPHC_TC_C;
      *hc06_ptr = (tmp & 0xc0) |
    5c1c:	4f85      	ldr	r7, [pc, #532]	; (5e34 <output+0x30c>)
    5c1e:	683e      	ldr	r6, [r7, #0]
    5c20:	323f      	adds	r2, #63	; 0x3f
    5c22:	4393      	bics	r3, r2
    5c24:	3a30      	subs	r2, #48	; 0x30
    5c26:	400a      	ands	r2, r1
    5c28:	4313      	orrs	r3, r2
    5c2a:	7033      	strb	r3, [r6, #0]
        (UIP_IP_BUF->tcflow & 0x0F);
      memcpy(hc06_ptr + 1, &UIP_IP_BUF->flow, 2);
    5c2c:	1c70      	adds	r0, r6, #1
    5c2e:	4985      	ldr	r1, [pc, #532]	; (5e44 <output+0x31c>)
    5c30:	2202      	movs	r2, #2
    5c32:	4b85      	ldr	r3, [pc, #532]	; (5e48 <output+0x320>)
    5c34:	4798      	blx	r3
      hc06_ptr += 3;
    5c36:	3603      	adds	r6, #3
    5c38:	603e      	str	r6, [r7, #0]
  } else {
    /* Flow label cannot be compressed */
    if(((UIP_IP_BUF->vtc & 0x0F) == 0) &&
       ((UIP_IP_BUF->tcflow & 0xF0) == 0)) {
      /* compress only traffic class */
      iphc0 |= SICSLOWPAN_IPHC_TC_C;
    5c3a:	2668      	movs	r6, #104	; 0x68
    5c3c:	e310      	b.n	6260 <output+0x738>
        (UIP_IP_BUF->tcflow & 0x0F);
      memcpy(hc06_ptr + 1, &UIP_IP_BUF->flow, 2);
      hc06_ptr += 3;
    } else {
      /* compress nothing */
      memcpy(hc06_ptr, &UIP_IP_BUF->vtc, 4);
    5c3e:	4b7d      	ldr	r3, [pc, #500]	; (5e34 <output+0x30c>)
    5c40:	4698      	mov	r8, r3
    5c42:	681e      	ldr	r6, [r3, #0]
    5c44:	1c30      	adds	r0, r6, #0
    5c46:	4978      	ldr	r1, [pc, #480]	; (5e28 <output+0x300>)
    5c48:	2204      	movs	r2, #4
    5c4a:	4b7f      	ldr	r3, [pc, #508]	; (5e48 <output+0x320>)
    5c4c:	4798      	blx	r3
      /* but replace the top byte with the new ECN | DSCP format*/
      *hc06_ptr = tmp;
    5c4e:	7037      	strb	r7, [r6, #0]
      hc06_ptr += 4;
    5c50:	3604      	adds	r6, #4
    5c52:	4643      	mov	r3, r8
    5c54:	601e      	str	r6, [r3, #0]
   * we sometimes use |=
   * If the field is 0, and the current bit value in memory is 1,
   * this does not work. We therefore reset the IPHC encoding here
   */

  iphc0 = SICSLOWPAN_DISPATCH_IPHC;
    5c56:	2660      	movs	r6, #96	; 0x60
    5c58:	e302      	b.n	6260 <output+0x738>
  /* Note that the payload length is always compressed */

  /* Next header. We compress it if UDP */
#if UIP_CONF_UDP || UIP_CONF_ROUTER
  if(UIP_IP_BUF->proto == UIP_PROTO_UDP) {
    iphc0 |= SICSLOWPAN_IPHC_NH_C;
    5c5a:	2304      	movs	r3, #4
    5c5c:	431e      	orrs	r6, r3
    5c5e:	e004      	b.n	5c6a <output+0x142>
  if(SICSLOWPAN_NH_COMPRESSOR.is_compressable(UIP_IP_BUF->proto)) {
    iphc0 |= SICSLOWPAN_IPHC_NH_C;
  }
#endif
  if ((iphc0 & SICSLOWPAN_IPHC_NH_C) == 0) {
    *hc06_ptr = UIP_IP_BUF->proto;
    5c60:	4974      	ldr	r1, [pc, #464]	; (5e34 <output+0x30c>)
    5c62:	680a      	ldr	r2, [r1, #0]
    5c64:	7013      	strb	r3, [r2, #0]
    hc06_ptr += 1;
    5c66:	3201      	adds	r2, #1
    5c68:	600a      	str	r2, [r1, #0]
   * if 1: compress, encoding is 01
   * if 64: compress, encoding is 10
   * if 255: compress, encoding is 11
   * else do not compress
   */
  switch(UIP_IP_BUF->ttl) {
    5c6a:	4b6f      	ldr	r3, [pc, #444]	; (5e28 <output+0x300>)
    5c6c:	79db      	ldrb	r3, [r3, #7]
    5c6e:	2b40      	cmp	r3, #64	; 0x40
    5c70:	d005      	beq.n	5c7e <output+0x156>
    5c72:	2bff      	cmp	r3, #255	; 0xff
    5c74:	d006      	beq.n	5c84 <output+0x15c>
    5c76:	2b01      	cmp	r3, #1
    5c78:	d107      	bne.n	5c8a <output+0x162>
    case 1:
      iphc0 |= SICSLOWPAN_IPHC_TTL_1;
    5c7a:	431e      	orrs	r6, r3
    5c7c:	e00a      	b.n	5c94 <output+0x16c>
      break;
    case 64:
      iphc0 |= SICSLOWPAN_IPHC_TTL_64;
    5c7e:	2302      	movs	r3, #2
    5c80:	431e      	orrs	r6, r3
    5c82:	e007      	b.n	5c94 <output+0x16c>
      break;
    case 255:
      iphc0 |= SICSLOWPAN_IPHC_TTL_255;
    5c84:	2303      	movs	r3, #3
    5c86:	431e      	orrs	r6, r3
    5c88:	e004      	b.n	5c94 <output+0x16c>
      break;
    default:
      *hc06_ptr = UIP_IP_BUF->ttl;
    5c8a:	496a      	ldr	r1, [pc, #424]	; (5e34 <output+0x30c>)
    5c8c:	680a      	ldr	r2, [r1, #0]
    5c8e:	7013      	strb	r3, [r2, #0]
      hc06_ptr += 1;
    5c90:	3201      	adds	r2, #1
    5c92:	600a      	str	r2, [r1, #0]
      break;
  }

  /* source address - cannot be multicast */
  if(uip_is_addr_unspecified(&UIP_IP_BUF->srcipaddr)) {
    5c94:	4b64      	ldr	r3, [pc, #400]	; (5e28 <output+0x300>)
    5c96:	891b      	ldrh	r3, [r3, #8]
    5c98:	2b00      	cmp	r3, #0
    5c9a:	d11e      	bne.n	5cda <output+0x1b2>
    5c9c:	4b62      	ldr	r3, [pc, #392]	; (5e28 <output+0x300>)
    5c9e:	895b      	ldrh	r3, [r3, #10]
    5ca0:	2b00      	cmp	r3, #0
    5ca2:	d11a      	bne.n	5cda <output+0x1b2>
    5ca4:	4b60      	ldr	r3, [pc, #384]	; (5e28 <output+0x300>)
    5ca6:	899b      	ldrh	r3, [r3, #12]
    5ca8:	2b00      	cmp	r3, #0
    5caa:	d116      	bne.n	5cda <output+0x1b2>
    5cac:	4b5e      	ldr	r3, [pc, #376]	; (5e28 <output+0x300>)
    5cae:	89db      	ldrh	r3, [r3, #14]
    5cb0:	2b00      	cmp	r3, #0
    5cb2:	d112      	bne.n	5cda <output+0x1b2>
    5cb4:	4b5c      	ldr	r3, [pc, #368]	; (5e28 <output+0x300>)
    5cb6:	8a1b      	ldrh	r3, [r3, #16]
    5cb8:	2b00      	cmp	r3, #0
    5cba:	d10e      	bne.n	5cda <output+0x1b2>
    5cbc:	4b5a      	ldr	r3, [pc, #360]	; (5e28 <output+0x300>)
    5cbe:	8a5b      	ldrh	r3, [r3, #18]
    5cc0:	2b00      	cmp	r3, #0
    5cc2:	d10a      	bne.n	5cda <output+0x1b2>
    5cc4:	4b58      	ldr	r3, [pc, #352]	; (5e28 <output+0x300>)
    5cc6:	8a9b      	ldrh	r3, [r3, #20]
    5cc8:	2b00      	cmp	r3, #0
    5cca:	d106      	bne.n	5cda <output+0x1b2>
    5ccc:	4b56      	ldr	r3, [pc, #344]	; (5e28 <output+0x300>)
    5cce:	8adb      	ldrh	r3, [r3, #22]
    5cd0:	2b00      	cmp	r3, #0
    5cd2:	d102      	bne.n	5cda <output+0x1b2>
    PRINTF("IPHC: compressing unspecified - setting SAC\n\r");
    iphc1 |= SICSLOWPAN_IPHC_SAC;
    5cd4:	3340      	adds	r3, #64	; 0x40
    5cd6:	431d      	orrs	r5, r3
    5cd8:	e03c      	b.n	5d54 <output+0x22c>
    iphc1 |= SICSLOWPAN_IPHC_SAM_00;
  } else if((context = addr_context_lookup_by_prefix(&UIP_IP_BUF->srcipaddr))
    5cda:	4859      	ldr	r0, [pc, #356]	; (5e40 <output+0x318>)
    5cdc:	4b57      	ldr	r3, [pc, #348]	; (5e3c <output+0x314>)
    5cde:	4798      	blx	r3
    5ce0:	4b5a      	ldr	r3, [pc, #360]	; (5e4c <output+0x324>)
    5ce2:	6018      	str	r0, [r3, #0]
    5ce4:	2800      	cmp	r0, #0
    5ce6:	d00e      	beq.n	5d06 <output+0x1de>
     != NULL) {
    /* elide the prefix - indicate by CID and set context + SAC */
    PRINTF("IPHC: compressing src with context - setting CID & SAC ctx: %d\n\r",
	   context->number);
    iphc1 |= SICSLOWPAN_IPHC_CID | SICSLOWPAN_IPHC_SAC;
    PACKETBUF_IPHC_BUF[2] |= context->number << 4;
    5ce8:	7843      	ldrb	r3, [r0, #1]
    5cea:	011b      	lsls	r3, r3, #4
    5cec:	7822      	ldrb	r2, [r4, #0]
    5cee:	4313      	orrs	r3, r2
    5cf0:	7023      	strb	r3, [r4, #0]
    /* compession compare with this nodes address (source) */

    iphc1 |= compress_addr_64(SICSLOWPAN_IPHC_SAM_BIT,
    5cf2:	2004      	movs	r0, #4
    5cf4:	4952      	ldr	r1, [pc, #328]	; (5e40 <output+0x318>)
    5cf6:	4a56      	ldr	r2, [pc, #344]	; (5e50 <output+0x328>)
    5cf8:	4b56      	ldr	r3, [pc, #344]	; (5e54 <output+0x32c>)
    5cfa:	4798      	blx	r3
    5cfc:	2540      	movs	r5, #64	; 0x40
    5cfe:	426d      	negs	r5, r5
    5d00:	4328      	orrs	r0, r5
    5d02:	b2c5      	uxtb	r5, r0
    5d04:	e026      	b.n	5d54 <output+0x22c>
                              &UIP_IP_BUF->srcipaddr, &uip_lladdr);
    /* No context found for this address */
  } else if(uip_is_addr_link_local(&UIP_IP_BUF->srcipaddr) &&
    5d06:	4b48      	ldr	r3, [pc, #288]	; (5e28 <output+0x300>)
    5d08:	7a1b      	ldrb	r3, [r3, #8]
    5d0a:	2bfe      	cmp	r3, #254	; 0xfe
    5d0c:	d117      	bne.n	5d3e <output+0x216>
    5d0e:	4b46      	ldr	r3, [pc, #280]	; (5e28 <output+0x300>)
    5d10:	7a5b      	ldrb	r3, [r3, #9]
    5d12:	2b80      	cmp	r3, #128	; 0x80
    5d14:	d113      	bne.n	5d3e <output+0x216>
	    UIP_IP_BUF->destipaddr.u16[1] == 0 &&
    5d16:	4b44      	ldr	r3, [pc, #272]	; (5e28 <output+0x300>)
    /* compession compare with this nodes address (source) */

    iphc1 |= compress_addr_64(SICSLOWPAN_IPHC_SAM_BIT,
                              &UIP_IP_BUF->srcipaddr, &uip_lladdr);
    /* No context found for this address */
  } else if(uip_is_addr_link_local(&UIP_IP_BUF->srcipaddr) &&
    5d18:	8b5b      	ldrh	r3, [r3, #26]
    5d1a:	2b00      	cmp	r3, #0
    5d1c:	d10f      	bne.n	5d3e <output+0x216>
	    UIP_IP_BUF->destipaddr.u16[1] == 0 &&
	    UIP_IP_BUF->destipaddr.u16[2] == 0 &&
    5d1e:	4b42      	ldr	r3, [pc, #264]	; (5e28 <output+0x300>)

    iphc1 |= compress_addr_64(SICSLOWPAN_IPHC_SAM_BIT,
                              &UIP_IP_BUF->srcipaddr, &uip_lladdr);
    /* No context found for this address */
  } else if(uip_is_addr_link_local(&UIP_IP_BUF->srcipaddr) &&
	    UIP_IP_BUF->destipaddr.u16[1] == 0 &&
    5d20:	8b9b      	ldrh	r3, [r3, #28]
    5d22:	2b00      	cmp	r3, #0
    5d24:	d10b      	bne.n	5d3e <output+0x216>
	    UIP_IP_BUF->destipaddr.u16[2] == 0 &&
	    UIP_IP_BUF->destipaddr.u16[3] == 0) {
    5d26:	4b40      	ldr	r3, [pc, #256]	; (5e28 <output+0x300>)
    iphc1 |= compress_addr_64(SICSLOWPAN_IPHC_SAM_BIT,
                              &UIP_IP_BUF->srcipaddr, &uip_lladdr);
    /* No context found for this address */
  } else if(uip_is_addr_link_local(&UIP_IP_BUF->srcipaddr) &&
	    UIP_IP_BUF->destipaddr.u16[1] == 0 &&
	    UIP_IP_BUF->destipaddr.u16[2] == 0 &&
    5d28:	8bdb      	ldrh	r3, [r3, #30]
    5d2a:	2b00      	cmp	r3, #0
    5d2c:	d107      	bne.n	5d3e <output+0x216>
	    UIP_IP_BUF->destipaddr.u16[3] == 0) {
    iphc1 |= compress_addr_64(SICSLOWPAN_IPHC_SAM_BIT,
    5d2e:	2004      	movs	r0, #4
    5d30:	4943      	ldr	r1, [pc, #268]	; (5e40 <output+0x318>)
    5d32:	4a47      	ldr	r2, [pc, #284]	; (5e50 <output+0x328>)
    5d34:	4b47      	ldr	r3, [pc, #284]	; (5e54 <output+0x32c>)
    5d36:	4798      	blx	r3
    5d38:	4305      	orrs	r5, r0
    5d3a:	b2ed      	uxtb	r5, r5
    5d3c:	e00a      	b.n	5d54 <output+0x22c>
                              &UIP_IP_BUF->srcipaddr, &uip_lladdr);
  } else {
    /* send the full address => SAC = 0, SAM = 00 */
    iphc1 |= SICSLOWPAN_IPHC_SAM_00; /* 128-bits */
    memcpy(hc06_ptr, &UIP_IP_BUF->srcipaddr.u16[0], 16);
    5d3e:	4b3d      	ldr	r3, [pc, #244]	; (5e34 <output+0x30c>)
    5d40:	4698      	mov	r8, r3
    5d42:	681f      	ldr	r7, [r3, #0]
    5d44:	1c38      	adds	r0, r7, #0
    5d46:	493e      	ldr	r1, [pc, #248]	; (5e40 <output+0x318>)
    5d48:	2210      	movs	r2, #16
    5d4a:	4b3f      	ldr	r3, [pc, #252]	; (5e48 <output+0x320>)
    5d4c:	4798      	blx	r3
    hc06_ptr += 16;
    5d4e:	3710      	adds	r7, #16
    5d50:	4643      	mov	r3, r8
    5d52:	601f      	str	r7, [r3, #0]
  }

  /* dest address*/
  if(uip_is_addr_mcast(&UIP_IP_BUF->destipaddr)) {
    5d54:	4b34      	ldr	r3, [pc, #208]	; (5e28 <output+0x300>)
    5d56:	7e1f      	ldrb	r7, [r3, #24]
    5d58:	2fff      	cmp	r7, #255	; 0xff
    5d5a:	d000      	beq.n	5d5e <output+0x236>
    5d5c:	e0a2      	b.n	5ea4 <output+0x37c>
    /* Address is multicast, try to compress */
    iphc1 |= SICSLOWPAN_IPHC_M;
    5d5e:	2408      	movs	r4, #8
    5d60:	432c      	orrs	r4, r5
    if(sicslowpan_is_mcast_addr_compressable8(&UIP_IP_BUF->destipaddr)) {
    5d62:	7e5b      	ldrb	r3, [r3, #25]
    5d64:	2b02      	cmp	r3, #2
    5d66:	d129      	bne.n	5dbc <output+0x294>
    5d68:	4a2f      	ldr	r2, [pc, #188]	; (5e28 <output+0x300>)
    5d6a:	8b52      	ldrh	r2, [r2, #26]
    5d6c:	2a00      	cmp	r2, #0
    5d6e:	d000      	beq.n	5d72 <output+0x24a>
    5d70:	e08e      	b.n	5e90 <output+0x368>
    5d72:	4a2d      	ldr	r2, [pc, #180]	; (5e28 <output+0x300>)
    5d74:	8b92      	ldrh	r2, [r2, #28]
    5d76:	2a00      	cmp	r2, #0
    5d78:	d000      	beq.n	5d7c <output+0x254>
    5d7a:	e27b      	b.n	6274 <output+0x74c>
    5d7c:	4a2a      	ldr	r2, [pc, #168]	; (5e28 <output+0x300>)
    5d7e:	8bd2      	ldrh	r2, [r2, #30]
    5d80:	2a00      	cmp	r2, #0
    5d82:	d123      	bne.n	5dcc <output+0x2a4>
    5d84:	4a28      	ldr	r2, [pc, #160]	; (5e28 <output+0x300>)
    5d86:	8c12      	ldrh	r2, [r2, #32]
    5d88:	2a00      	cmp	r2, #0
    5d8a:	d11f      	bne.n	5dcc <output+0x2a4>
    5d8c:	4a26      	ldr	r2, [pc, #152]	; (5e28 <output+0x300>)
    5d8e:	8c52      	ldrh	r2, [r2, #34]	; 0x22
    5d90:	2a00      	cmp	r2, #0
    5d92:	d11b      	bne.n	5dcc <output+0x2a4>
    5d94:	4a24      	ldr	r2, [pc, #144]	; (5e28 <output+0x300>)
    5d96:	8c92      	ldrh	r2, [r2, #36]	; 0x24
    5d98:	2a00      	cmp	r2, #0
    5d9a:	d117      	bne.n	5dcc <output+0x2a4>
    5d9c:	3226      	adds	r2, #38	; 0x26
    5d9e:	4922      	ldr	r1, [pc, #136]	; (5e28 <output+0x300>)
    5da0:	5c8a      	ldrb	r2, [r1, r2]
    5da2:	2a00      	cmp	r2, #0
    5da4:	d112      	bne.n	5dcc <output+0x2a4>
      iphc1 |= SICSLOWPAN_IPHC_DAM_11;
    5da6:	240b      	movs	r4, #11
    5da8:	432c      	orrs	r4, r5
      /* use last byte */
      *hc06_ptr = UIP_IP_BUF->destipaddr.u8[15];
    5daa:	4a22      	ldr	r2, [pc, #136]	; (5e34 <output+0x30c>)
    5dac:	6813      	ldr	r3, [r2, #0]
    5dae:	2127      	movs	r1, #39	; 0x27
    5db0:	481d      	ldr	r0, [pc, #116]	; (5e28 <output+0x300>)
    5db2:	5c41      	ldrb	r1, [r0, r1]
    5db4:	7019      	strb	r1, [r3, #0]
      hc06_ptr += 1;
    5db6:	3301      	adds	r3, #1
    5db8:	6013      	str	r3, [r2, #0]
    5dba:	e0ac      	b.n	5f16 <output+0x3ee>
    } else if(sicslowpan_is_mcast_addr_compressable32(&UIP_IP_BUF->destipaddr)) {
    5dbc:	4a1a      	ldr	r2, [pc, #104]	; (5e28 <output+0x300>)
    5dbe:	8b52      	ldrh	r2, [r2, #26]
    5dc0:	2a00      	cmp	r2, #0
    5dc2:	d165      	bne.n	5e90 <output+0x368>
    5dc4:	4a18      	ldr	r2, [pc, #96]	; (5e28 <output+0x300>)
    5dc6:	8b92      	ldrh	r2, [r2, #28]
    5dc8:	2a00      	cmp	r2, #0
    5dca:	d161      	bne.n	5e90 <output+0x368>
    5dcc:	4a16      	ldr	r2, [pc, #88]	; (5e28 <output+0x300>)
    5dce:	8bd2      	ldrh	r2, [r2, #30]
    5dd0:	2a00      	cmp	r2, #0
    5dd2:	d143      	bne.n	5e5c <output+0x334>
    5dd4:	4a14      	ldr	r2, [pc, #80]	; (5e28 <output+0x300>)
    5dd6:	8c12      	ldrh	r2, [r2, #32]
    5dd8:	2a00      	cmp	r2, #0
    5dda:	d13f      	bne.n	5e5c <output+0x334>
    5ddc:	4a12      	ldr	r2, [pc, #72]	; (5e28 <output+0x300>)
    5dde:	8c52      	ldrh	r2, [r2, #34]	; 0x22
    5de0:	2a00      	cmp	r2, #0
    5de2:	d13b      	bne.n	5e5c <output+0x334>
    5de4:	3224      	adds	r2, #36	; 0x24
    5de6:	4910      	ldr	r1, [pc, #64]	; (5e28 <output+0x300>)
    5de8:	5c8a      	ldrb	r2, [r1, r2]
    5dea:	2a00      	cmp	r2, #0
    5dec:	d136      	bne.n	5e5c <output+0x334>
      iphc1 |= SICSLOWPAN_IPHC_DAM_10;
    5dee:	240a      	movs	r4, #10
    5df0:	432c      	orrs	r4, r5
      /* second byte + the last three */
      *hc06_ptr = UIP_IP_BUF->destipaddr.u8[1];
    5df2:	4f10      	ldr	r7, [pc, #64]	; (5e34 <output+0x30c>)
    5df4:	683d      	ldr	r5, [r7, #0]
    5df6:	702b      	strb	r3, [r5, #0]
      memcpy(hc06_ptr + 1, &UIP_IP_BUF->destipaddr.u8[13], 3);
    5df8:	1c68      	adds	r0, r5, #1
    5dfa:	4917      	ldr	r1, [pc, #92]	; (5e58 <output+0x330>)
    5dfc:	3203      	adds	r2, #3
    5dfe:	4b12      	ldr	r3, [pc, #72]	; (5e48 <output+0x320>)
    5e00:	4798      	blx	r3
      hc06_ptr += 4;
    5e02:	3504      	adds	r5, #4
    5e04:	603d      	str	r5, [r7, #0]
    5e06:	e086      	b.n	5f16 <output+0x3ee>
    5e08:	20000548 	.word	0x20000548
    5e0c:	20000550 	.word	0x20000550
    5e10:	0000bfa1 	.word	0x0000bfa1
    5e14:	0000bec5 	.word	0x0000bec5
    5e18:	20000554 	.word	0x20000554
    5e1c:	200031f8 	.word	0x200031f8
    5e20:	2000052c 	.word	0x2000052c
    5e24:	000059a5 	.word	0x000059a5
    5e28:	20002cd4 	.word	0x20002cd4
    5e2c:	00012e30 	.word	0x00012e30
    5e30:	0000ac6d 	.word	0x0000ac6d
    5e34:	20000564 	.word	0x20000564
    5e38:	20002cec 	.word	0x20002cec
    5e3c:	00005acd 	.word	0x00005acd
    5e40:	20002cdc 	.word	0x20002cdc
    5e44:	20002cd6 	.word	0x20002cd6
    5e48:	00010b2f 	.word	0x00010b2f
    5e4c:	20000534 	.word	0x20000534
    5e50:	20002ccc 	.word	0x20002ccc
    5e54:	00005a1d 	.word	0x00005a1d
    5e58:	20002cf9 	.word	0x20002cf9
    } else if(sicslowpan_is_mcast_addr_compressable48(&UIP_IP_BUF->destipaddr)) {
    5e5c:	4ad4      	ldr	r2, [pc, #848]	; (61b0 <output+0x688>)
    5e5e:	8bd2      	ldrh	r2, [r2, #30]
    5e60:	2a00      	cmp	r2, #0
    5e62:	d115      	bne.n	5e90 <output+0x368>
    5e64:	4ad2      	ldr	r2, [pc, #840]	; (61b0 <output+0x688>)
    5e66:	8c12      	ldrh	r2, [r2, #32]
    5e68:	2a00      	cmp	r2, #0
    5e6a:	d111      	bne.n	5e90 <output+0x368>
    5e6c:	3222      	adds	r2, #34	; 0x22
    5e6e:	49d0      	ldr	r1, [pc, #832]	; (61b0 <output+0x688>)
    5e70:	5c8a      	ldrb	r2, [r1, r2]
    5e72:	2a00      	cmp	r2, #0
    5e74:	d10c      	bne.n	5e90 <output+0x368>
      iphc1 |= SICSLOWPAN_IPHC_DAM_01;
    5e76:	2409      	movs	r4, #9
    5e78:	432c      	orrs	r4, r5
      /* second byte + the last five */
      *hc06_ptr = UIP_IP_BUF->destipaddr.u8[1];
    5e7a:	4fce      	ldr	r7, [pc, #824]	; (61b4 <output+0x68c>)
    5e7c:	683d      	ldr	r5, [r7, #0]
    5e7e:	702b      	strb	r3, [r5, #0]
      memcpy(hc06_ptr + 1, &UIP_IP_BUF->destipaddr.u8[11], 5);
    5e80:	1c68      	adds	r0, r5, #1
    5e82:	49cd      	ldr	r1, [pc, #820]	; (61b8 <output+0x690>)
    5e84:	3205      	adds	r2, #5
    5e86:	4bcd      	ldr	r3, [pc, #820]	; (61bc <output+0x694>)
    5e88:	4798      	blx	r3
      hc06_ptr += 6;
    5e8a:	3506      	adds	r5, #6
    5e8c:	603d      	str	r5, [r7, #0]
    5e8e:	e042      	b.n	5f16 <output+0x3ee>
    } else {
      iphc1 |= SICSLOWPAN_IPHC_DAM_00;
      /* full address */
      memcpy(hc06_ptr, &UIP_IP_BUF->destipaddr.u8[0], 16);
    5e90:	4fc8      	ldr	r7, [pc, #800]	; (61b4 <output+0x68c>)
    5e92:	683d      	ldr	r5, [r7, #0]
    5e94:	1c28      	adds	r0, r5, #0
    5e96:	49ca      	ldr	r1, [pc, #808]	; (61c0 <output+0x698>)
    5e98:	2210      	movs	r2, #16
    5e9a:	4bc8      	ldr	r3, [pc, #800]	; (61bc <output+0x694>)
    5e9c:	4798      	blx	r3
      hc06_ptr += 16;
    5e9e:	3510      	adds	r5, #16
    5ea0:	603d      	str	r5, [r7, #0]
    5ea2:	e038      	b.n	5f16 <output+0x3ee>
    }
  } else {
    /* Address is unicast, try to compress */
    if((context = addr_context_lookup_by_prefix(&UIP_IP_BUF->destipaddr)) != NULL) {
    5ea4:	48c6      	ldr	r0, [pc, #792]	; (61c0 <output+0x698>)
    5ea6:	4bc7      	ldr	r3, [pc, #796]	; (61c4 <output+0x69c>)
    5ea8:	4798      	blx	r3
    5eaa:	4bc7      	ldr	r3, [pc, #796]	; (61c8 <output+0x6a0>)
    5eac:	6018      	str	r0, [r3, #0]
    5eae:	2800      	cmp	r0, #0
    5eb0:	d00d      	beq.n	5ece <output+0x3a6>
      /* elide the prefix */
      iphc1 |= SICSLOWPAN_IPHC_DAC;
    5eb2:	2304      	movs	r3, #4
    5eb4:	431d      	orrs	r5, r3
      PACKETBUF_IPHC_BUF[2] |= context->number;
    5eb6:	7822      	ldrb	r2, [r4, #0]
    5eb8:	7843      	ldrb	r3, [r0, #1]
    5eba:	4313      	orrs	r3, r2
    5ebc:	7023      	strb	r3, [r4, #0]
      /* compession compare with link adress (destination) */

      iphc1 |= compress_addr_64(SICSLOWPAN_IPHC_DAM_BIT,
    5ebe:	2000      	movs	r0, #0
    5ec0:	49bf      	ldr	r1, [pc, #764]	; (61c0 <output+0x698>)
    5ec2:	466a      	mov	r2, sp
    5ec4:	4bc1      	ldr	r3, [pc, #772]	; (61cc <output+0x6a4>)
    5ec6:	4798      	blx	r3
    5ec8:	4328      	orrs	r0, r5
    5eca:	b2c4      	uxtb	r4, r0
    5ecc:	e023      	b.n	5f16 <output+0x3ee>
	       &UIP_IP_BUF->destipaddr, (uip_lladdr_t *)link_destaddr);
      /* No context found for this address */
    } else if(uip_is_addr_link_local(&UIP_IP_BUF->destipaddr) &&
    5ece:	2ffe      	cmp	r7, #254	; 0xfe
    5ed0:	d117      	bne.n	5f02 <output+0x3da>
    5ed2:	4bb7      	ldr	r3, [pc, #732]	; (61b0 <output+0x688>)
    5ed4:	7e5b      	ldrb	r3, [r3, #25]
    5ed6:	2b80      	cmp	r3, #128	; 0x80
    5ed8:	d113      	bne.n	5f02 <output+0x3da>
	      UIP_IP_BUF->destipaddr.u16[1] == 0 &&
    5eda:	4bb5      	ldr	r3, [pc, #724]	; (61b0 <output+0x688>)
      /* compession compare with link adress (destination) */

      iphc1 |= compress_addr_64(SICSLOWPAN_IPHC_DAM_BIT,
	       &UIP_IP_BUF->destipaddr, (uip_lladdr_t *)link_destaddr);
      /* No context found for this address */
    } else if(uip_is_addr_link_local(&UIP_IP_BUF->destipaddr) &&
    5edc:	8b5b      	ldrh	r3, [r3, #26]
    5ede:	2b00      	cmp	r3, #0
    5ee0:	d10f      	bne.n	5f02 <output+0x3da>
	      UIP_IP_BUF->destipaddr.u16[1] == 0 &&
	      UIP_IP_BUF->destipaddr.u16[2] == 0 &&
    5ee2:	4bb3      	ldr	r3, [pc, #716]	; (61b0 <output+0x688>)

      iphc1 |= compress_addr_64(SICSLOWPAN_IPHC_DAM_BIT,
	       &UIP_IP_BUF->destipaddr, (uip_lladdr_t *)link_destaddr);
      /* No context found for this address */
    } else if(uip_is_addr_link_local(&UIP_IP_BUF->destipaddr) &&
	      UIP_IP_BUF->destipaddr.u16[1] == 0 &&
    5ee4:	8b9b      	ldrh	r3, [r3, #28]
    5ee6:	2b00      	cmp	r3, #0
    5ee8:	d10b      	bne.n	5f02 <output+0x3da>
	      UIP_IP_BUF->destipaddr.u16[2] == 0 &&
	      UIP_IP_BUF->destipaddr.u16[3] == 0) {
    5eea:	4bb1      	ldr	r3, [pc, #708]	; (61b0 <output+0x688>)
      iphc1 |= compress_addr_64(SICSLOWPAN_IPHC_DAM_BIT,
	       &UIP_IP_BUF->destipaddr, (uip_lladdr_t *)link_destaddr);
      /* No context found for this address */
    } else if(uip_is_addr_link_local(&UIP_IP_BUF->destipaddr) &&
	      UIP_IP_BUF->destipaddr.u16[1] == 0 &&
	      UIP_IP_BUF->destipaddr.u16[2] == 0 &&
    5eec:	8bdb      	ldrh	r3, [r3, #30]
    5eee:	2b00      	cmp	r3, #0
    5ef0:	d107      	bne.n	5f02 <output+0x3da>
	      UIP_IP_BUF->destipaddr.u16[3] == 0) {
      iphc1 |= compress_addr_64(SICSLOWPAN_IPHC_DAM_BIT,
    5ef2:	2000      	movs	r0, #0
    5ef4:	49b2      	ldr	r1, [pc, #712]	; (61c0 <output+0x698>)
    5ef6:	466a      	mov	r2, sp
    5ef8:	4bb4      	ldr	r3, [pc, #720]	; (61cc <output+0x6a4>)
    5efa:	4798      	blx	r3
    5efc:	4305      	orrs	r5, r0
    5efe:	b2ec      	uxtb	r4, r5
    5f00:	e009      	b.n	5f16 <output+0x3ee>
               &UIP_IP_BUF->destipaddr, (uip_lladdr_t *)link_destaddr);
    } else {
      /* send the full address */
      iphc1 |= SICSLOWPAN_IPHC_DAM_00; /* 128-bits */
      memcpy(hc06_ptr, &UIP_IP_BUF->destipaddr.u16[0], 16);
    5f02:	4fac      	ldr	r7, [pc, #688]	; (61b4 <output+0x68c>)
    5f04:	683c      	ldr	r4, [r7, #0]
    5f06:	1c20      	adds	r0, r4, #0
    5f08:	49ad      	ldr	r1, [pc, #692]	; (61c0 <output+0x698>)
    5f0a:	2210      	movs	r2, #16
    5f0c:	4bab      	ldr	r3, [pc, #684]	; (61bc <output+0x694>)
    5f0e:	4798      	blx	r3
      hc06_ptr += 16;
    5f10:	3410      	adds	r4, #16
    5f12:	603c      	str	r4, [r7, #0]
	      UIP_IP_BUF->destipaddr.u16[3] == 0) {
      iphc1 |= compress_addr_64(SICSLOWPAN_IPHC_DAM_BIT,
               &UIP_IP_BUF->destipaddr, (uip_lladdr_t *)link_destaddr);
    } else {
      /* send the full address */
      iphc1 |= SICSLOWPAN_IPHC_DAM_00; /* 128-bits */
    5f14:	1c2c      	adds	r4, r5, #0
      memcpy(hc06_ptr, &UIP_IP_BUF->destipaddr.u16[0], 16);
      hc06_ptr += 16;
    }
  }

  uncomp_hdr_len = UIP_IPH_LEN;
    5f16:	2228      	movs	r2, #40	; 0x28
    5f18:	4bad      	ldr	r3, [pc, #692]	; (61d0 <output+0x6a8>)
    5f1a:	701a      	strb	r2, [r3, #0]

#if UIP_CONF_UDP || UIP_CONF_ROUTER
  /* UDP header compression */
  if(UIP_IP_BUF->proto == UIP_PROTO_UDP) {
    5f1c:	4ba4      	ldr	r3, [pc, #656]	; (61b0 <output+0x688>)
    5f1e:	799b      	ldrb	r3, [r3, #6]
    5f20:	2b11      	cmp	r3, #17
    5f22:	d16f      	bne.n	6004 <output+0x4dc>
    PRINTF("IPHC: Uncompressed UDP ports on send side: %x, %x\n\r",
	   UIP_HTONS(UIP_UDP_BUF->srcport), UIP_HTONS(UIP_UDP_BUF->destport));
    /* Mask out the last 4 bits can be used as a mask */
    if(((UIP_HTONS(UIP_UDP_BUF->srcport) & 0xfff0) == SICSLOWPAN_UDP_4_BIT_PORT_MIN) &&
    5f24:	4ba2      	ldr	r3, [pc, #648]	; (61b0 <output+0x688>)
    5f26:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    5f28:	021a      	lsls	r2, r3, #8
    5f2a:	0a1b      	lsrs	r3, r3, #8
    5f2c:	4313      	orrs	r3, r2
    5f2e:	b29b      	uxth	r3, r3
    5f30:	220f      	movs	r2, #15
    5f32:	1c19      	adds	r1, r3, #0
    5f34:	4391      	bics	r1, r2
    5f36:	4aa7      	ldr	r2, [pc, #668]	; (61d4 <output+0x6ac>)
    5f38:	4291      	cmp	r1, r2
    5f3a:	d11b      	bne.n	5f74 <output+0x44c>
       ((UIP_HTONS(UIP_UDP_BUF->destport) & 0xfff0) == SICSLOWPAN_UDP_4_BIT_PORT_MIN)) {
    5f3c:	4a9c      	ldr	r2, [pc, #624]	; (61b0 <output+0x688>)
    5f3e:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
    5f40:	0211      	lsls	r1, r2, #8
    5f42:	0a12      	lsrs	r2, r2, #8
    5f44:	430a      	orrs	r2, r1
    5f46:	49a4      	ldr	r1, [pc, #656]	; (61d8 <output+0x6b0>)
  /* UDP header compression */
  if(UIP_IP_BUF->proto == UIP_PROTO_UDP) {
    PRINTF("IPHC: Uncompressed UDP ports on send side: %x, %x\n\r",
	   UIP_HTONS(UIP_UDP_BUF->srcport), UIP_HTONS(UIP_UDP_BUF->destport));
    /* Mask out the last 4 bits can be used as a mask */
    if(((UIP_HTONS(UIP_UDP_BUF->srcport) & 0xfff0) == SICSLOWPAN_UDP_4_BIT_PORT_MIN) &&
    5f48:	400a      	ands	r2, r1
    5f4a:	49a2      	ldr	r1, [pc, #648]	; (61d4 <output+0x6ac>)
    5f4c:	428a      	cmp	r2, r1
    5f4e:	d111      	bne.n	5f74 <output+0x44c>
       ((UIP_HTONS(UIP_UDP_BUF->destport) & 0xfff0) == SICSLOWPAN_UDP_4_BIT_PORT_MIN)) {
      /* we can compress 12 bits of both source and dest */
      *hc06_ptr = SICSLOWPAN_NHC_UDP_CS_P_11;
    5f50:	4898      	ldr	r0, [pc, #608]	; (61b4 <output+0x68c>)
    5f52:	6802      	ldr	r2, [r0, #0]
    5f54:	23f3      	movs	r3, #243	; 0xf3
    5f56:	7013      	strb	r3, [r2, #0]
      PRINTF("IPHC: remove 12 b of both source & dest with prefix 0xFOB\n\r");
      *(hc06_ptr + 1) =
	(uint8_t)((UIP_HTONS(UIP_UDP_BUF->srcport) -
		SICSLOWPAN_UDP_4_BIT_PORT_MIN) << 4) +
	(uint8_t)((UIP_HTONS(UIP_UDP_BUF->destport) -
    5f58:	4d95      	ldr	r5, [pc, #596]	; (61b0 <output+0x688>)
    if(((UIP_HTONS(UIP_UDP_BUF->srcport) & 0xfff0) == SICSLOWPAN_UDP_4_BIT_PORT_MIN) &&
       ((UIP_HTONS(UIP_UDP_BUF->destport) & 0xfff0) == SICSLOWPAN_UDP_4_BIT_PORT_MIN)) {
      /* we can compress 12 bits of both source and dest */
      *hc06_ptr = SICSLOWPAN_NHC_UDP_CS_P_11;
      PRINTF("IPHC: remove 12 b of both source & dest with prefix 0xFOB\n\r");
      *(hc06_ptr + 1) =
    5f5a:	8d6b      	ldrh	r3, [r5, #42]	; 0x2a
    5f5c:	0a1b      	lsrs	r3, r3, #8
    5f5e:	3350      	adds	r3, #80	; 0x50
    5f60:	1c19      	adds	r1, r3, #0
    5f62:	8d2b      	ldrh	r3, [r5, #40]	; 0x28
    5f64:	0a1b      	lsrs	r3, r3, #8
    5f66:	3350      	adds	r3, #80	; 0x50
	(uint8_t)((UIP_HTONS(UIP_UDP_BUF->srcport) -
    5f68:	011b      	lsls	r3, r3, #4
    if(((UIP_HTONS(UIP_UDP_BUF->srcport) & 0xfff0) == SICSLOWPAN_UDP_4_BIT_PORT_MIN) &&
       ((UIP_HTONS(UIP_UDP_BUF->destport) & 0xfff0) == SICSLOWPAN_UDP_4_BIT_PORT_MIN)) {
      /* we can compress 12 bits of both source and dest */
      *hc06_ptr = SICSLOWPAN_NHC_UDP_CS_P_11;
      PRINTF("IPHC: remove 12 b of both source & dest with prefix 0xFOB\n\r");
      *(hc06_ptr + 1) =
    5f6a:	18cb      	adds	r3, r1, r3
    5f6c:	7053      	strb	r3, [r2, #1]
	(uint8_t)((UIP_HTONS(UIP_UDP_BUF->srcport) -
		SICSLOWPAN_UDP_4_BIT_PORT_MIN) << 4) +
	(uint8_t)((UIP_HTONS(UIP_UDP_BUF->destport) -
		SICSLOWPAN_UDP_4_BIT_PORT_MIN));
      hc06_ptr += 2;
    5f6e:	3202      	adds	r2, #2
    5f70:	6002      	str	r2, [r0, #0]
    5f72:	e03a      	b.n	5fea <output+0x4c2>
    } else if((UIP_HTONS(UIP_UDP_BUF->destport) & 0xff00) == SICSLOWPAN_UDP_8_BIT_PORT_MIN) {
    5f74:	4a8e      	ldr	r2, [pc, #568]	; (61b0 <output+0x688>)
    5f76:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
    5f78:	0212      	lsls	r2, r2, #8
    5f7a:	b292      	uxth	r2, r2
    5f7c:	21f0      	movs	r1, #240	; 0xf0
    5f7e:	0209      	lsls	r1, r1, #8
    5f80:	428a      	cmp	r2, r1
    5f82:	d111      	bne.n	5fa8 <output+0x480>
      /* we can compress 8 bits of dest, leave source. */
      *hc06_ptr = SICSLOWPAN_NHC_UDP_CS_P_01;
    5f84:	4f8b      	ldr	r7, [pc, #556]	; (61b4 <output+0x68c>)
    5f86:	683d      	ldr	r5, [r7, #0]
    5f88:	23f1      	movs	r3, #241	; 0xf1
    5f8a:	702b      	strb	r3, [r5, #0]
      PRINTF("IPHC: leave source, remove 8 bits of dest with prefix 0xF0\n\r");
      memcpy(hc06_ptr + 1, &UIP_UDP_BUF->srcport, 2);
    5f8c:	1c68      	adds	r0, r5, #1
    5f8e:	4b93      	ldr	r3, [pc, #588]	; (61dc <output+0x6b4>)
    5f90:	4698      	mov	r8, r3
    5f92:	1c19      	adds	r1, r3, #0
    5f94:	2202      	movs	r2, #2
    5f96:	4b89      	ldr	r3, [pc, #548]	; (61bc <output+0x694>)
    5f98:	4798      	blx	r3
      *(hc06_ptr + 3) =
	(uint8_t)((UIP_HTONS(UIP_UDP_BUF->destport) -
    5f9a:	4643      	mov	r3, r8
    5f9c:	885b      	ldrh	r3, [r3, #2]
    5f9e:	0a1b      	lsrs	r3, r3, #8
    5fa0:	70eb      	strb	r3, [r5, #3]
		SICSLOWPAN_UDP_8_BIT_PORT_MIN));
      hc06_ptr += 4;
    5fa2:	3504      	adds	r5, #4
    5fa4:	603d      	str	r5, [r7, #0]
    5fa6:	e020      	b.n	5fea <output+0x4c2>
    } else if((UIP_HTONS(UIP_UDP_BUF->srcport) & 0xff00) == SICSLOWPAN_UDP_8_BIT_PORT_MIN) {
    5fa8:	22ff      	movs	r2, #255	; 0xff
    5faa:	4393      	bics	r3, r2
    5fac:	22f0      	movs	r2, #240	; 0xf0
    5fae:	0212      	lsls	r2, r2, #8
    5fb0:	4293      	cmp	r3, r2
    5fb2:	d10f      	bne.n	5fd4 <output+0x4ac>
      /* we can compress 8 bits of src, leave dest. Copy compressed port */
      *hc06_ptr = SICSLOWPAN_NHC_UDP_CS_P_10;
    5fb4:	4f7f      	ldr	r7, [pc, #508]	; (61b4 <output+0x68c>)
    5fb6:	683d      	ldr	r5, [r7, #0]
    5fb8:	23f2      	movs	r3, #242	; 0xf2
    5fba:	702b      	strb	r3, [r5, #0]
      PRINTF("IPHC: remove 8 bits of source with prefix 0xF0, leave dest. hch: %i\n\r", *hc06_ptr);
      *(hc06_ptr + 1) =
	(uint8_t)((UIP_HTONS(UIP_UDP_BUF->srcport) -
    5fbc:	497c      	ldr	r1, [pc, #496]	; (61b0 <output+0x688>)
    5fbe:	8d0b      	ldrh	r3, [r1, #40]	; 0x28
    5fc0:	0a1b      	lsrs	r3, r3, #8
    5fc2:	706b      	strb	r3, [r5, #1]
		SICSLOWPAN_UDP_8_BIT_PORT_MIN));
      memcpy(hc06_ptr + 2, &UIP_UDP_BUF->destport, 2);
    5fc4:	1ca8      	adds	r0, r5, #2
    5fc6:	312a      	adds	r1, #42	; 0x2a
    5fc8:	2202      	movs	r2, #2
    5fca:	4b7c      	ldr	r3, [pc, #496]	; (61bc <output+0x694>)
    5fcc:	4798      	blx	r3
      hc06_ptr += 4;
    5fce:	3504      	adds	r5, #4
    5fd0:	603d      	str	r5, [r7, #0]
    5fd2:	e00a      	b.n	5fea <output+0x4c2>
    } else {
      /* we cannot compress. Copy uncompressed ports, full checksum  */
      *hc06_ptr = SICSLOWPAN_NHC_UDP_CS_P_00;
    5fd4:	4f77      	ldr	r7, [pc, #476]	; (61b4 <output+0x68c>)
    5fd6:	683d      	ldr	r5, [r7, #0]
    5fd8:	23f0      	movs	r3, #240	; 0xf0
    5fda:	702b      	strb	r3, [r5, #0]
      PRINTF("IPHC: cannot compress headers\n\r");
      memcpy(hc06_ptr + 1, &UIP_UDP_BUF->srcport, 4);
    5fdc:	1c68      	adds	r0, r5, #1
    5fde:	497f      	ldr	r1, [pc, #508]	; (61dc <output+0x6b4>)
    5fe0:	2204      	movs	r2, #4
    5fe2:	4b76      	ldr	r3, [pc, #472]	; (61bc <output+0x694>)
    5fe4:	4798      	blx	r3
      hc06_ptr += 5;
    5fe6:	3505      	adds	r5, #5
    5fe8:	603d      	str	r5, [r7, #0]
    }
    /* always inline the checksum  */
    if(1) {
      memcpy(hc06_ptr, &UIP_UDP_BUF->udpchksum, 2);
    5fea:	4f72      	ldr	r7, [pc, #456]	; (61b4 <output+0x68c>)
    5fec:	683d      	ldr	r5, [r7, #0]
    5fee:	1c28      	adds	r0, r5, #0
    5ff0:	497b      	ldr	r1, [pc, #492]	; (61e0 <output+0x6b8>)
    5ff2:	2202      	movs	r2, #2
    5ff4:	4b71      	ldr	r3, [pc, #452]	; (61bc <output+0x694>)
    5ff6:	4798      	blx	r3
      hc06_ptr += 2;
    5ff8:	3502      	adds	r5, #2
    5ffa:	603d      	str	r5, [r7, #0]
    }
    uncomp_hdr_len += UIP_UDPH_LEN;
    5ffc:	4a74      	ldr	r2, [pc, #464]	; (61d0 <output+0x6a8>)
    5ffe:	7813      	ldrb	r3, [r2, #0]
    6000:	3308      	adds	r3, #8
    6002:	7013      	strb	r3, [r2, #0]
  /* if nothing to compress just return zero  */
  hc06_ptr += SICSLOWPAN_NH_COMPRESSOR.compress(hc06_ptr, &uncomp_hdr_len);
#endif

  /* before the packetbuf_hdr_len operation */
  PACKETBUF_IPHC_BUF[0] = iphc0;
    6004:	4b77      	ldr	r3, [pc, #476]	; (61e4 <output+0x6bc>)
    6006:	681a      	ldr	r2, [r3, #0]
    6008:	4977      	ldr	r1, [pc, #476]	; (61e8 <output+0x6c0>)
    600a:	780b      	ldrb	r3, [r1, #0]
    600c:	54d6      	strb	r6, [r2, r3]
  PACKETBUF_IPHC_BUF[1] = iphc1;
    600e:	18d3      	adds	r3, r2, r3
    6010:	705c      	strb	r4, [r3, #1]

  packetbuf_hdr_len = hc06_ptr - packetbuf_ptr;
    6012:	4b68      	ldr	r3, [pc, #416]	; (61b4 <output+0x68c>)
    6014:	681b      	ldr	r3, [r3, #0]
    6016:	1a9b      	subs	r3, r3, r2
    6018:	700b      	strb	r3, [r1, #0]

  /* Calculate NETSTACK_FRAMER's header length, that will be added in the NETSTACK_RDC.
   * We calculate it here only to make a better decision of whether the outgoing packet
   * needs to be fragmented or not. */
#if USE_FRAMER_HDRLEN
  packetbuf_clear();
    601a:	4b74      	ldr	r3, [pc, #464]	; (61ec <output+0x6c4>)
    601c:	4798      	blx	r3

static inline int
packetbuf_set_addr(uint8_t type, const linkaddr_t *addr)
{
/*   packetbuf_addrs[type - PACKETBUF_ADDR_FIRST].type = type; */
  linkaddr_copy(&packetbuf_addrs[type - PACKETBUF_ADDR_FIRST].addr, addr);
    601e:	4874      	ldr	r0, [pc, #464]	; (61f0 <output+0x6c8>)
    6020:	4669      	mov	r1, sp
    6022:	4b74      	ldr	r3, [pc, #464]	; (61f4 <output+0x6cc>)
    6024:	4798      	blx	r3
  packetbuf_set_addr(PACKETBUF_ADDR_RECEIVER, &dest);
  framer_hdrlen = NETSTACK_FRAMER.create();
    6026:	4b74      	ldr	r3, [pc, #464]	; (61f8 <output+0x6d0>)
    6028:	681b      	ldr	r3, [r3, #0]
    602a:	4798      	blx	r3
    602c:	1e06      	subs	r6, r0, #0
  if(framer_hdrlen < 0) {
    602e:	da00      	bge.n	6032 <output+0x50a>
    /* Framing failed, we assume the maximum header length */
    framer_hdrlen = 21;
    6030:	2615      	movs	r6, #21
  }
  packetbuf_clear();
    6032:	4b6e      	ldr	r3, [pc, #440]	; (61ec <output+0x6c4>)
    6034:	4798      	blx	r3

static inline int
packetbuf_set_attr(uint8_t type, const packetbuf_attr_t val)
{
/*   packetbuf_attrs[type].type = type; */
  packetbuf_attrs[type].val = val;
    6036:	2205      	movs	r2, #5
    6038:	4b70      	ldr	r3, [pc, #448]	; (61fc <output+0x6d4>)
    603a:	829a      	strh	r2, [r3, #20]
                     SICSLOWPAN_MAX_MAC_TRANSMISSIONS);
#else /* USE_FRAMER_HDRLEN */
  framer_hdrlen = 21;
#endif /* USE_FRAMER_HDRLEN */

  if((int)uip_len - (int)uncomp_hdr_len > (int)MAC_MAX_PAYLOAD - framer_hdrlen - (int)packetbuf_hdr_len) {
    603c:	4b70      	ldr	r3, [pc, #448]	; (6200 <output+0x6d8>)
    603e:	881b      	ldrh	r3, [r3, #0]
    6040:	4699      	mov	r9, r3
    6042:	4b63      	ldr	r3, [pc, #396]	; (61d0 <output+0x6a8>)
    6044:	781f      	ldrb	r7, [r3, #0]
    6046:	464b      	mov	r3, r9
    6048:	1bda      	subs	r2, r3, r7
    604a:	257d      	movs	r5, #125	; 0x7d
    604c:	1bad      	subs	r5, r5, r6
    604e:	4b66      	ldr	r3, [pc, #408]	; (61e8 <output+0x6c0>)
    6050:	781c      	ldrb	r4, [r3, #0]
    6052:	1b2b      	subs	r3, r5, r4
    6054:	429a      	cmp	r2, r3
    6056:	dc00      	bgt.n	605a <output+0x532>
    6058:	e0ef      	b.n	623a <output+0x712>

    /* Create 1st Fragment */
    PRINTFO("sicslowpan output: 1rst fragment ");

    /* move HC1/HC06/IPv6 header */
    memmove(packetbuf_ptr + SICSLOWPAN_FRAG1_HDR_LEN, packetbuf_ptr, packetbuf_hdr_len);
    605a:	4b62      	ldr	r3, [pc, #392]	; (61e4 <output+0x6bc>)
    605c:	681b      	ldr	r3, [r3, #0]
    605e:	4698      	mov	r8, r3
    6060:	1d18      	adds	r0, r3, #4
    6062:	1c19      	adds	r1, r3, #0
    6064:	1c22      	adds	r2, r4, #0
    6066:	4b67      	ldr	r3, [pc, #412]	; (6204 <output+0x6dc>)
    6068:	4798      	blx	r3
     * FRAG1 dispatch + header
     * Note that the length is in units of 8 bytes
     */
/*     PACKETBUF_FRAG_BUF->dispatch_size = */
/*       uip_htons((SICSLOWPAN_DISPATCH_FRAG1 << 8) | uip_len); */
    SET16(PACKETBUF_FRAG_PTR, PACKETBUF_FRAG_DISPATCH_SIZE,
    606a:	23c0      	movs	r3, #192	; 0xc0
    606c:	021b      	lsls	r3, r3, #8
    606e:	464a      	mov	r2, r9
    6070:	431a      	orrs	r2, r3
    6072:	0a13      	lsrs	r3, r2, #8
    6074:	4642      	mov	r2, r8
    6076:	7013      	strb	r3, [r2, #0]
    6078:	4b61      	ldr	r3, [pc, #388]	; (6200 <output+0x6d8>)
    607a:	881b      	ldrh	r3, [r3, #0]
    607c:	7053      	strb	r3, [r2, #1]
          ((SICSLOWPAN_DISPATCH_FRAG1 << 8) | uip_len));
/*     PACKETBUF_FRAG_BUF->tag = uip_htons(my_tag); */
    SET16(PACKETBUF_FRAG_PTR, PACKETBUF_FRAG_TAG, my_tag);
    607e:	4a62      	ldr	r2, [pc, #392]	; (6208 <output+0x6e0>)
    6080:	8813      	ldrh	r3, [r2, #0]
    6082:	0a19      	lsrs	r1, r3, #8
    6084:	4640      	mov	r0, r8
    6086:	7081      	strb	r1, [r0, #2]
    6088:	70c3      	strb	r3, [r0, #3]
    my_tag++;
    608a:	3301      	adds	r3, #1
    608c:	8013      	strh	r3, [r2, #0]

    /* Copy payload and send */
    packetbuf_hdr_len += SICSLOWPAN_FRAG1_HDR_LEN;
    608e:	3404      	adds	r4, #4
    6090:	b2e4      	uxtb	r4, r4
    6092:	4b55      	ldr	r3, [pc, #340]	; (61e8 <output+0x6c0>)
    6094:	701c      	strb	r4, [r3, #0]
    packetbuf_payload_len = (MAC_MAX_PAYLOAD - framer_hdrlen - packetbuf_hdr_len) & 0xfffffff8;
    6096:	1b2d      	subs	r5, r5, r4
    6098:	2307      	movs	r3, #7
    609a:	439d      	bics	r5, r3
    609c:	4b5b      	ldr	r3, [pc, #364]	; (620c <output+0x6e4>)
    609e:	601d      	str	r5, [r3, #0]
    PRINTFO("(len %d, tag %d)\n\r", packetbuf_payload_len, my_tag);
    memcpy(packetbuf_ptr + packetbuf_hdr_len,
    60a0:	1900      	adds	r0, r0, r4
    60a2:	4943      	ldr	r1, [pc, #268]	; (61b0 <output+0x688>)
    60a4:	1879      	adds	r1, r7, r1
    60a6:	1c2a      	adds	r2, r5, #0
    60a8:	4b44      	ldr	r3, [pc, #272]	; (61bc <output+0x694>)
    60aa:	4798      	blx	r3
           (uint8_t *)UIP_IP_BUF + uncomp_hdr_len, packetbuf_payload_len);
    packetbuf_set_datalen(packetbuf_payload_len + packetbuf_hdr_len);
    60ac:	1928      	adds	r0, r5, r4
    60ae:	b280      	uxth	r0, r0
    60b0:	4b57      	ldr	r3, [pc, #348]	; (6210 <output+0x6e8>)
    60b2:	4798      	blx	r3
    q = queuebuf_new_from_packetbuf();
    60b4:	4b57      	ldr	r3, [pc, #348]	; (6214 <output+0x6ec>)
    60b6:	4798      	blx	r3
    60b8:	1e04      	subs	r4, r0, #0
    if(q == NULL) {
    60ba:	d105      	bne.n	60c8 <output+0x5a0>
      PRINTFO("could not allocate queuebuf for first fragment, dropping packet\n\r");
      RIMESTATS_ADD(sicslowpandrops);
    60bc:	4a56      	ldr	r2, [pc, #344]	; (6218 <output+0x6f0>)
    60be:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
    60c0:	3301      	adds	r3, #1
    60c2:	64d3      	str	r3, [r2, #76]	; 0x4c
      return 0;
    60c4:	2000      	movs	r0, #0
    60c6:	e0db      	b.n	6280 <output+0x758>
    }
    send_packet(&dest);
    60c8:	4668      	mov	r0, sp
    60ca:	4b54      	ldr	r3, [pc, #336]	; (621c <output+0x6f4>)
    60cc:	4798      	blx	r3
    queuebuf_to_packetbuf(q);
    60ce:	1c20      	adds	r0, r4, #0
    60d0:	4b53      	ldr	r3, [pc, #332]	; (6220 <output+0x6f8>)
    60d2:	4798      	blx	r3
    queuebuf_free(q);
    60d4:	1c20      	adds	r0, r4, #0
    60d6:	4b53      	ldr	r3, [pc, #332]	; (6224 <output+0x6fc>)
    60d8:	4798      	blx	r3
    q = NULL;

    /* Check tx result. */
    if((last_tx_status == MAC_TX_COLLISION) ||
    60da:	4b53      	ldr	r3, [pc, #332]	; (6228 <output+0x700>)
    60dc:	681b      	ldr	r3, [r3, #0]
    60de:	2b01      	cmp	r3, #1
    60e0:	d002      	beq.n	60e8 <output+0x5c0>
    60e2:	3b05      	subs	r3, #5
    60e4:	2b01      	cmp	r3, #1
    60e6:	d805      	bhi.n	60f4 <output+0x5cc>
       (last_tx_status == MAC_TX_ERR) ||
       (last_tx_status == MAC_TX_ERR_FATAL)) {
      PRINTFO("error in fragment tx, dropping subsequent fragments.\n\r");
      RIMESTATS_ADD(sicslowpandrops);
    60e8:	4a4b      	ldr	r2, [pc, #300]	; (6218 <output+0x6f0>)
    60ea:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
    60ec:	3301      	adds	r3, #1
    60ee:	64d3      	str	r3, [r2, #76]	; 0x4c
      return 0;
    60f0:	2000      	movs	r0, #0
    60f2:	e0c5      	b.n	6280 <output+0x758>
    }

    /* set processed_ip_out_len to what we already sent from the IP payload*/
    processed_ip_out_len = packetbuf_payload_len + uncomp_hdr_len;
    60f4:	4a45      	ldr	r2, [pc, #276]	; (620c <output+0x6e4>)
    60f6:	4b36      	ldr	r3, [pc, #216]	; (61d0 <output+0x6a8>)
    60f8:	781d      	ldrb	r5, [r3, #0]
    60fa:	6813      	ldr	r3, [r2, #0]
    60fc:	469c      	mov	ip, r3
    60fe:	4465      	add	r5, ip
    6100:	b2ad      	uxth	r5, r5
    /*
     * Create following fragments
     * Datagram tag is already in the buffer, we need to set the
     * FRAGN dispatch and for each fragment, the offset
     */
    packetbuf_hdr_len = SICSLOWPAN_FRAGN_HDR_LEN;
    6102:	2105      	movs	r1, #5
    6104:	4b38      	ldr	r3, [pc, #224]	; (61e8 <output+0x6c0>)
    6106:	7019      	strb	r1, [r3, #0]
/*     PACKETBUF_FRAG_BUF->dispatch_size = */
/*       uip_htons((SICSLOWPAN_DISPATCH_FRAGN << 8) | uip_len); */
    SET16(PACKETBUF_FRAG_PTR, PACKETBUF_FRAG_DISPATCH_SIZE,
    6108:	4b36      	ldr	r3, [pc, #216]	; (61e4 <output+0x6bc>)
    610a:	6819      	ldr	r1, [r3, #0]
    610c:	483c      	ldr	r0, [pc, #240]	; (6200 <output+0x6d8>)
    610e:	8804      	ldrh	r4, [r0, #0]
    6110:	23e0      	movs	r3, #224	; 0xe0
    6112:	021b      	lsls	r3, r3, #8
    6114:	4323      	orrs	r3, r4
    6116:	0a1b      	lsrs	r3, r3, #8
    6118:	700b      	strb	r3, [r1, #0]
    611a:	8803      	ldrh	r3, [r0, #0]
    611c:	704b      	strb	r3, [r1, #1]
          ((SICSLOWPAN_DISPATCH_FRAGN << 8) | uip_len));
    packetbuf_payload_len = (MAC_MAX_PAYLOAD - framer_hdrlen - packetbuf_hdr_len) & 0xfffffff8;
    611e:	2378      	movs	r3, #120	; 0x78
    6120:	1b9e      	subs	r6, r3, r6
    6122:	3b71      	subs	r3, #113	; 0x71
    6124:	439e      	bics	r6, r3
    6126:	6016      	str	r6, [r2, #0]
    while(processed_ip_out_len < uip_len) {
    6128:	4681      	mov	r9, r0
      PRINTFO("sicslowpan output: fragment ");
      PACKETBUF_FRAG_PTR[PACKETBUF_FRAG_OFFSET] = processed_ip_out_len >> 3;
    612a:	4b2e      	ldr	r3, [pc, #184]	; (61e4 <output+0x6bc>)
    612c:	4698      	mov	r8, r3
      
      /* Copy payload and send */
      if(uip_len - processed_ip_out_len < packetbuf_payload_len) {
    612e:	1c17      	adds	r7, r2, #0
/*     PACKETBUF_FRAG_BUF->dispatch_size = */
/*       uip_htons((SICSLOWPAN_DISPATCH_FRAGN << 8) | uip_len); */
    SET16(PACKETBUF_FRAG_PTR, PACKETBUF_FRAG_DISPATCH_SIZE,
          ((SICSLOWPAN_DISPATCH_FRAGN << 8) | uip_len));
    packetbuf_payload_len = (MAC_MAX_PAYLOAD - framer_hdrlen - packetbuf_hdr_len) & 0xfffffff8;
    while(processed_ip_out_len < uip_len) {
    6130:	e07c      	b.n	622c <output+0x704>
      PRINTFO("sicslowpan output: fragment ");
      PACKETBUF_FRAG_PTR[PACKETBUF_FRAG_OFFSET] = processed_ip_out_len >> 3;
    6132:	08ea      	lsrs	r2, r5, #3
    6134:	4641      	mov	r1, r8
    6136:	6809      	ldr	r1, [r1, #0]
    6138:	710a      	strb	r2, [r1, #4]
      
      /* Copy payload and send */
      if(uip_len - processed_ip_out_len < packetbuf_payload_len) {
    613a:	1b5b      	subs	r3, r3, r5
    613c:	683a      	ldr	r2, [r7, #0]
    613e:	4293      	cmp	r3, r2
    6140:	da01      	bge.n	6146 <output+0x61e>
        /* last fragment */
        packetbuf_payload_len = uip_len - processed_ip_out_len;
    6142:	4a32      	ldr	r2, [pc, #200]	; (620c <output+0x6e4>)
    6144:	6013      	str	r3, [r2, #0]
      }
      PRINTFO("(offset %d, len %d, tag %d)\n\r",
             processed_ip_out_len >> 3, packetbuf_payload_len, my_tag);
      memcpy(packetbuf_ptr + packetbuf_hdr_len,
    6146:	4b28      	ldr	r3, [pc, #160]	; (61e8 <output+0x6c0>)
    6148:	781c      	ldrb	r4, [r3, #0]
    614a:	4b30      	ldr	r3, [pc, #192]	; (620c <output+0x6e4>)
    614c:	681e      	ldr	r6, [r3, #0]
    614e:	4b25      	ldr	r3, [pc, #148]	; (61e4 <output+0x6bc>)
    6150:	6818      	ldr	r0, [r3, #0]
    6152:	1900      	adds	r0, r0, r4
    6154:	4916      	ldr	r1, [pc, #88]	; (61b0 <output+0x688>)
    6156:	1869      	adds	r1, r5, r1
    6158:	1c32      	adds	r2, r6, #0
    615a:	4b18      	ldr	r3, [pc, #96]	; (61bc <output+0x694>)
    615c:	4798      	blx	r3
             (uint8_t *)UIP_IP_BUF + processed_ip_out_len, packetbuf_payload_len);
      packetbuf_set_datalen(packetbuf_payload_len + packetbuf_hdr_len);
    615e:	1930      	adds	r0, r6, r4
    6160:	b280      	uxth	r0, r0
    6162:	4b2b      	ldr	r3, [pc, #172]	; (6210 <output+0x6e8>)
    6164:	4798      	blx	r3
      q = queuebuf_new_from_packetbuf();
    6166:	4b2b      	ldr	r3, [pc, #172]	; (6214 <output+0x6ec>)
    6168:	4798      	blx	r3
    616a:	1e04      	subs	r4, r0, #0
      if(q == NULL) {
    616c:	d105      	bne.n	617a <output+0x652>
        PRINTFO("could not allocate queuebuf, dropping fragment\n\r");
        RIMESTATS_ADD(sicslowpandrops);
    616e:	4a2a      	ldr	r2, [pc, #168]	; (6218 <output+0x6f0>)
    6170:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
    6172:	3301      	adds	r3, #1
    6174:	64d3      	str	r3, [r2, #76]	; 0x4c
        return 0;
    6176:	2000      	movs	r0, #0
    6178:	e082      	b.n	6280 <output+0x758>
      }
      send_packet(&dest);
    617a:	4668      	mov	r0, sp
    617c:	4b27      	ldr	r3, [pc, #156]	; (621c <output+0x6f4>)
    617e:	4798      	blx	r3
      queuebuf_to_packetbuf(q);
    6180:	1c20      	adds	r0, r4, #0
    6182:	4b27      	ldr	r3, [pc, #156]	; (6220 <output+0x6f8>)
    6184:	4798      	blx	r3
      queuebuf_free(q);
    6186:	1c20      	adds	r0, r4, #0
    6188:	4b26      	ldr	r3, [pc, #152]	; (6224 <output+0x6fc>)
    618a:	4798      	blx	r3
      q = NULL;
      processed_ip_out_len += packetbuf_payload_len;
    618c:	4b1f      	ldr	r3, [pc, #124]	; (620c <output+0x6e4>)
    618e:	681b      	ldr	r3, [r3, #0]
    6190:	18ed      	adds	r5, r5, r3
    6192:	b2ad      	uxth	r5, r5

      /* Check tx result. */
      if((last_tx_status == MAC_TX_COLLISION) ||
    6194:	4b24      	ldr	r3, [pc, #144]	; (6228 <output+0x700>)
    6196:	681b      	ldr	r3, [r3, #0]
    6198:	2b01      	cmp	r3, #1
    619a:	d002      	beq.n	61a2 <output+0x67a>
    619c:	3b05      	subs	r3, #5
    619e:	2b01      	cmp	r3, #1
    61a0:	d844      	bhi.n	622c <output+0x704>
         (last_tx_status == MAC_TX_ERR) ||
         (last_tx_status == MAC_TX_ERR_FATAL)) {
        PRINTFO("error in fragment tx, dropping subsequent fragments.\n\r");
        RIMESTATS_ADD(sicslowpandrops);
    61a2:	4a1d      	ldr	r2, [pc, #116]	; (6218 <output+0x6f0>)
    61a4:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
    61a6:	3301      	adds	r3, #1
    61a8:	64d3      	str	r3, [r2, #76]	; 0x4c
        return 0;
    61aa:	2000      	movs	r0, #0
    61ac:	e068      	b.n	6280 <output+0x758>
    61ae:	46c0      	nop			; (mov r8, r8)
    61b0:	20002cd4 	.word	0x20002cd4
    61b4:	20000564 	.word	0x20000564
    61b8:	20002cf7 	.word	0x20002cf7
    61bc:	00010b2f 	.word	0x00010b2f
    61c0:	20002cec 	.word	0x20002cec
    61c4:	00005acd 	.word	0x00005acd
    61c8:	20000534 	.word	0x20000534
    61cc:	00005a1d 	.word	0x00005a1d
    61d0:	20000548 	.word	0x20000548
    61d4:	0000f0b0 	.word	0x0000f0b0
    61d8:	0000fff0 	.word	0x0000fff0
    61dc:	20002cfc 	.word	0x20002cfc
    61e0:	20002d02 	.word	0x20002d02
    61e4:	20000554 	.word	0x20000554
    61e8:	20000550 	.word	0x20000550
    61ec:	0000bfa1 	.word	0x0000bfa1
    61f0:	200031e0 	.word	0x200031e0
    61f4:	0000ac6d 	.word	0x0000ac6d
    61f8:	00012e5c 	.word	0x00012e5c
    61fc:	200031f8 	.word	0x200031f8
    6200:	20002cc0 	.word	0x20002cc0
    6204:	00010b41 	.word	0x00010b41
    6208:	20000538 	.word	0x20000538
    620c:	20000544 	.word	0x20000544
    6210:	0000beb9 	.word	0x0000beb9
    6214:	0000c081 	.word	0x0000c081
    6218:	20003230 	.word	0x20003230
    621c:	00005af9 	.word	0x00005af9
    6220:	0000c185 	.word	0x0000c185
    6224:	0000c139 	.word	0x0000c139
    6228:	20000568 	.word	0x20000568
/*     PACKETBUF_FRAG_BUF->dispatch_size = */
/*       uip_htons((SICSLOWPAN_DISPATCH_FRAGN << 8) | uip_len); */
    SET16(PACKETBUF_FRAG_PTR, PACKETBUF_FRAG_DISPATCH_SIZE,
          ((SICSLOWPAN_DISPATCH_FRAGN << 8) | uip_len));
    packetbuf_payload_len = (MAC_MAX_PAYLOAD - framer_hdrlen - packetbuf_hdr_len) & 0xfffffff8;
    while(processed_ip_out_len < uip_len) {
    622c:	464b      	mov	r3, r9
    622e:	881b      	ldrh	r3, [r3, #0]
    6230:	429d      	cmp	r5, r3
    6232:	d200      	bcs.n	6236 <output+0x70e>
    6234:	e77d      	b.n	6132 <output+0x60a>
    memcpy(packetbuf_ptr + packetbuf_hdr_len, (uint8_t *)UIP_IP_BUF + uncomp_hdr_len,
           uip_len - uncomp_hdr_len);
    packetbuf_set_datalen(uip_len - uncomp_hdr_len + packetbuf_hdr_len);
    send_packet(&dest);
  }
  return 1;
    6236:	2001      	movs	r0, #1
    6238:	e022      	b.n	6280 <output+0x758>

    /*
     * The packet does not need to be fragmented
     * copy "payload" and send
     */
    memcpy(packetbuf_ptr + packetbuf_hdr_len, (uint8_t *)UIP_IP_BUF + uncomp_hdr_len,
    623a:	4b14      	ldr	r3, [pc, #80]	; (628c <output+0x764>)
    623c:	6818      	ldr	r0, [r3, #0]
    623e:	1900      	adds	r0, r0, r4
    6240:	4913      	ldr	r1, [pc, #76]	; (6290 <output+0x768>)
    6242:	1879      	adds	r1, r7, r1
    6244:	4b13      	ldr	r3, [pc, #76]	; (6294 <output+0x76c>)
    6246:	4798      	blx	r3
           uip_len - uncomp_hdr_len);
    packetbuf_set_datalen(uip_len - uncomp_hdr_len + packetbuf_hdr_len);
    6248:	4b13      	ldr	r3, [pc, #76]	; (6298 <output+0x770>)
    624a:	8818      	ldrh	r0, [r3, #0]
    624c:	1820      	adds	r0, r4, r0
    624e:	1bc0      	subs	r0, r0, r7
    6250:	b280      	uxth	r0, r0
    6252:	4b12      	ldr	r3, [pc, #72]	; (629c <output+0x774>)
    6254:	4798      	blx	r3
    send_packet(&dest);
    6256:	4668      	mov	r0, sp
    6258:	4b11      	ldr	r3, [pc, #68]	; (62a0 <output+0x778>)
    625a:	4798      	blx	r3
  }
  return 1;
    625c:	2001      	movs	r0, #1
    625e:	e00f      	b.n	6280 <output+0x758>

  /* Note that the payload length is always compressed */

  /* Next header. We compress it if UDP */
#if UIP_CONF_UDP || UIP_CONF_ROUTER
  if(UIP_IP_BUF->proto == UIP_PROTO_UDP) {
    6260:	4b0b      	ldr	r3, [pc, #44]	; (6290 <output+0x768>)
    6262:	799b      	ldrb	r3, [r3, #6]
    6264:	2b11      	cmp	r3, #17
    6266:	d000      	beq.n	626a <output+0x742>
    6268:	e4fa      	b.n	5c60 <output+0x138>
    626a:	e4f6      	b.n	5c5a <output+0x132>
    626c:	2203      	movs	r2, #3
    626e:	4b0d      	ldr	r3, [pc, #52]	; (62a4 <output+0x77c>)
    6270:	849a      	strh	r2, [r3, #36]	; 0x24
    6272:	e484      	b.n	5b7e <output+0x56>
    if(sicslowpan_is_mcast_addr_compressable8(&UIP_IP_BUF->destipaddr)) {
      iphc1 |= SICSLOWPAN_IPHC_DAM_11;
      /* use last byte */
      *hc06_ptr = UIP_IP_BUF->destipaddr.u8[15];
      hc06_ptr += 1;
    } else if(sicslowpan_is_mcast_addr_compressable32(&UIP_IP_BUF->destipaddr)) {
    6274:	4a06      	ldr	r2, [pc, #24]	; (6290 <output+0x768>)
      iphc1 |= SICSLOWPAN_IPHC_DAM_10;
      /* second byte + the last three */
      *hc06_ptr = UIP_IP_BUF->destipaddr.u8[1];
      memcpy(hc06_ptr + 1, &UIP_IP_BUF->destipaddr.u8[13], 3);
      hc06_ptr += 4;
    } else if(sicslowpan_is_mcast_addr_compressable48(&UIP_IP_BUF->destipaddr)) {
    6276:	8b92      	ldrh	r2, [r2, #28]
    6278:	2a00      	cmp	r2, #0
    627a:	d000      	beq.n	627e <output+0x756>
    627c:	e608      	b.n	5e90 <output+0x368>
    627e:	e5ed      	b.n	5e5c <output+0x334>
           uip_len - uncomp_hdr_len);
    packetbuf_set_datalen(uip_len - uncomp_hdr_len + packetbuf_hdr_len);
    send_packet(&dest);
  }
  return 1;
}
    6280:	b003      	add	sp, #12
    6282:	bc0c      	pop	{r2, r3}
    6284:	4690      	mov	r8, r2
    6286:	4699      	mov	r9, r3
    6288:	bdf0      	pop	{r4, r5, r6, r7, pc}
    628a:	46c0      	nop			; (mov r8, r8)
    628c:	20000554 	.word	0x20000554
    6290:	20002cd4 	.word	0x20002cd4
    6294:	00010b2f 	.word	0x00010b2f
    6298:	20002cc0 	.word	0x20002cc0
    629c:	0000beb9 	.word	0x0000beb9
    62a0:	00005af9 	.word	0x00005af9
    62a4:	200031f8 	.word	0x200031f8

000062a8 <packet_sent>:
/**
 * Callback function for the MAC packet sent callback
 */
static void
packet_sent(void *ptr, int status, int transmissions)
{
    62a8:	b510      	push	{r4, lr}
    62aa:	1c0c      	adds	r4, r1, #0
  uip_ds6_link_neighbor_callback(status, transmissions);
    62ac:	1c08      	adds	r0, r1, #0
    62ae:	1c11      	adds	r1, r2, #0
    62b0:	4b05      	ldr	r3, [pc, #20]	; (62c8 <packet_sent+0x20>)
    62b2:	4798      	blx	r3

  if(callback != NULL) {
    62b4:	4b05      	ldr	r3, [pc, #20]	; (62cc <packet_sent+0x24>)
    62b6:	681b      	ldr	r3, [r3, #0]
    62b8:	2b00      	cmp	r3, #0
    62ba:	d002      	beq.n	62c2 <packet_sent+0x1a>
    callback->output_callback(status);
    62bc:	689b      	ldr	r3, [r3, #8]
    62be:	1c20      	adds	r0, r4, #0
    62c0:	4798      	blx	r3
  }
  last_tx_status = status;
    62c2:	4b03      	ldr	r3, [pc, #12]	; (62d0 <packet_sent+0x28>)
    62c4:	601c      	str	r4, [r3, #0]
}
    62c6:	bd10      	pop	{r4, pc}
    62c8:	00006bfd 	.word	0x00006bfd
    62cc:	2000052c 	.word	0x2000052c
    62d0:	20000568 	.word	0x20000568

000062d4 <uncompress_addr>:
 * and the second postfix count (NOTE: 15/0xf => 16 bytes copy).
 */
static void
uncompress_addr(uip_ipaddr_t *ipaddr, uint8_t const prefix[],
                uint8_t pref_post_count, uip_lladdr_t *lladdr)
{
    62d4:	b5f0      	push	{r4, r5, r6, r7, lr}
    62d6:	464f      	mov	r7, r9
    62d8:	b480      	push	{r7}
    62da:	b082      	sub	sp, #8
    62dc:	1c05      	adds	r5, r0, #0
    62de:	1c1e      	adds	r6, r3, #0
  uint8_t prefcount = pref_post_count >> 4;
    62e0:	0917      	lsrs	r7, r2, #4
  uint8_t postcount = pref_post_count & 0x0f;
    62e2:	240f      	movs	r4, #15
    62e4:	4014      	ands	r4, r2
  /* full nibble 15 => 16 */
  prefcount = prefcount == 15 ? 16 : prefcount;
    62e6:	2f0f      	cmp	r7, #15
    62e8:	d035      	beq.n	6356 <uncompress_addr+0x82>
  postcount = postcount == 15 ? 16 : postcount;
    62ea:	2c0f      	cmp	r4, #15
    62ec:	d100      	bne.n	62f0 <uncompress_addr+0x1c>
    62ee:	3401      	adds	r4, #1

  PRINTF("Uncompressing %d + %d => ", prefcount, postcount);

  if(prefcount > 0) {
    62f0:	2f00      	cmp	r7, #0
    62f2:	d006      	beq.n	6302 <uncompress_addr+0x2e>
    62f4:	e001      	b.n	62fa <uncompress_addr+0x26>
{
  uint8_t prefcount = pref_post_count >> 4;
  uint8_t postcount = pref_post_count & 0x0f;
  /* full nibble 15 => 16 */
  prefcount = prefcount == 15 ? 16 : prefcount;
  postcount = postcount == 15 ? 16 : postcount;
    62f6:	2410      	movs	r4, #16
                uint8_t pref_post_count, uip_lladdr_t *lladdr)
{
  uint8_t prefcount = pref_post_count >> 4;
  uint8_t postcount = pref_post_count & 0x0f;
  /* full nibble 15 => 16 */
  prefcount = prefcount == 15 ? 16 : prefcount;
    62f8:	2710      	movs	r7, #16
  postcount = postcount == 15 ? 16 : postcount;

  PRINTF("Uncompressing %d + %d => ", prefcount, postcount);

  if(prefcount > 0) {
    memcpy(ipaddr, prefix, prefcount);
    62fa:	1c28      	adds	r0, r5, #0
    62fc:	1c3a      	adds	r2, r7, #0
    62fe:	4b1a      	ldr	r3, [pc, #104]	; (6368 <uncompress_addr+0x94>)
    6300:	4798      	blx	r3
  }
  if(prefcount + postcount < 16) {
    6302:	9401      	str	r4, [sp, #4]
    6304:	193b      	adds	r3, r7, r4
    6306:	2b0f      	cmp	r3, #15
    6308:	dc05      	bgt.n	6316 <uncompress_addr+0x42>
    memset(&ipaddr->u8[prefcount], 0, 16 - (prefcount + postcount));
    630a:	2210      	movs	r2, #16
    630c:	1ad2      	subs	r2, r2, r3
    630e:	19e8      	adds	r0, r5, r7
    6310:	2100      	movs	r1, #0
    6312:	4b16      	ldr	r3, [pc, #88]	; (636c <uncompress_addr+0x98>)
    6314:	4798      	blx	r3
  }
  if(postcount > 0) {
    6316:	2c00      	cmp	r4, #0
    6318:	d016      	beq.n	6348 <uncompress_addr+0x74>
    memcpy(&ipaddr->u8[16 - postcount], hc06_ptr, postcount);
    631a:	4b15      	ldr	r3, [pc, #84]	; (6370 <uncompress_addr+0x9c>)
    631c:	681b      	ldr	r3, [r3, #0]
    631e:	4699      	mov	r9, r3
    6320:	1c26      	adds	r6, r4, #0
    6322:	9b01      	ldr	r3, [sp, #4]
    6324:	1ae8      	subs	r0, r5, r3
    6326:	3010      	adds	r0, #16
    6328:	4649      	mov	r1, r9
    632a:	1c22      	adds	r2, r4, #0
    632c:	4b0e      	ldr	r3, [pc, #56]	; (6368 <uncompress_addr+0x94>)
    632e:	4798      	blx	r3
    if(postcount == 2 && prefcount < 11) {
    6330:	2c02      	cmp	r4, #2
    6332:	d105      	bne.n	6340 <uncompress_addr+0x6c>
    6334:	2f0a      	cmp	r7, #10
    6336:	d803      	bhi.n	6340 <uncompress_addr+0x6c>
      /* 16 bits uncompression => 0000:00ff:fe00:XXXX */
      ipaddr->u8[11] = 0xff;
    6338:	23ff      	movs	r3, #255	; 0xff
    633a:	72eb      	strb	r3, [r5, #11]
      ipaddr->u8[12] = 0xfe;
    633c:	3b01      	subs	r3, #1
    633e:	732b      	strb	r3, [r5, #12]
    }
    hc06_ptr += postcount;
    6340:	444e      	add	r6, r9
    6342:	4b0b      	ldr	r3, [pc, #44]	; (6370 <uncompress_addr+0x9c>)
    6344:	601e      	str	r6, [r3, #0]
    6346:	e00a      	b.n	635e <uncompress_addr+0x8a>
  } else if (prefcount > 0) {
    6348:	2f00      	cmp	r7, #0
    634a:	d008      	beq.n	635e <uncompress_addr+0x8a>
    /* no IID based configuration if no prefix and no data => unspec */
    uip_ds6_set_addr_iid(ipaddr, lladdr);
    634c:	1c28      	adds	r0, r5, #0
    634e:	1c31      	adds	r1, r6, #0
    6350:	4b08      	ldr	r3, [pc, #32]	; (6374 <uncompress_addr+0xa0>)
    6352:	4798      	blx	r3
    6354:	e003      	b.n	635e <uncompress_addr+0x8a>
{
  uint8_t prefcount = pref_post_count >> 4;
  uint8_t postcount = pref_post_count & 0x0f;
  /* full nibble 15 => 16 */
  prefcount = prefcount == 15 ? 16 : prefcount;
  postcount = postcount == 15 ? 16 : postcount;
    6356:	2c0f      	cmp	r4, #15
    6358:	d0cd      	beq.n	62f6 <uncompress_addr+0x22>
                uint8_t pref_post_count, uip_lladdr_t *lladdr)
{
  uint8_t prefcount = pref_post_count >> 4;
  uint8_t postcount = pref_post_count & 0x0f;
  /* full nibble 15 => 16 */
  prefcount = prefcount == 15 ? 16 : prefcount;
    635a:	2710      	movs	r7, #16
    635c:	e7cd      	b.n	62fa <uncompress_addr+0x26>
    uip_ds6_set_addr_iid(ipaddr, lladdr);
  }

  PRINT6ADDR(ipaddr);
  PRINTF("\n\r");
}
    635e:	b002      	add	sp, #8
    6360:	bc04      	pop	{r2}
    6362:	4691      	mov	r9, r2
    6364:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6366:	46c0      	nop			; (mov r8, r8)
    6368:	00010b2f 	.word	0x00010b2f
    636c:	00010b69 	.word	0x00010b69
    6370:	20000564 	.word	0x20000564
    6374:	000076a5 	.word	0x000076a5

00006378 <input>:
 * \note We do not check for overlapping sicslowpan fragments
 * (it is a SHALL in the RFC 4944 and should never happen)
 */
static void
input(void)
{
    6378:	b5f0      	push	{r4, r5, r6, r7, lr}
    637a:	465f      	mov	r7, fp
    637c:	4656      	mov	r6, sl
    637e:	464d      	mov	r5, r9
    6380:	4644      	mov	r4, r8
    6382:	b4f0      	push	{r4, r5, r6, r7}
    6384:	b085      	sub	sp, #20
  uint16_t frag_tag = 0;
  uint8_t first_fragment = 0, last_fragment = 0;
#endif /*SICSLOWPAN_CONF_FRAG*/

  /* init */
  uncomp_hdr_len = 0;
    6386:	2300      	movs	r3, #0
    6388:	4ad5      	ldr	r2, [pc, #852]	; (66e0 <input+0x368>)
    638a:	7013      	strb	r3, [r2, #0]
  packetbuf_hdr_len = 0;
    638c:	4ad5      	ldr	r2, [pc, #852]	; (66e4 <input+0x36c>)
    638e:	7013      	strb	r3, [r2, #0]

  /* The MAC puts the 15.4 payload inside the packetbuf data buffer */
  packetbuf_ptr = packetbuf_dataptr();
    6390:	4bd5      	ldr	r3, [pc, #852]	; (66e8 <input+0x370>)
    6392:	4798      	blx	r3
    6394:	4bd5      	ldr	r3, [pc, #852]	; (66ec <input+0x374>)
    6396:	6018      	str	r0, [r3, #0]
  return 1;
}
static inline packetbuf_attr_t
packetbuf_attr(uint8_t type)
{
  return packetbuf_attrs[type].val;
    6398:	4bd5      	ldr	r3, [pc, #852]	; (66f0 <input+0x378>)

  /* Save the RSSI of the incoming packet in case the upper layer will
     want to query us for it later. */
  last_rssi = (signed short)packetbuf_attr(PACKETBUF_ATTR_RSSI);
    639a:	2208      	movs	r2, #8
    639c:	5e9a      	ldrsh	r2, [r3, r2]
    639e:	4bd5      	ldr	r3, [pc, #852]	; (66f4 <input+0x37c>)
    63a0:	601a      	str	r2, [r3, #0]
#if SICSLOWPAN_CONF_FRAG
  /* if reassembly timed out, cancel it */
  if(timer_expired(&reass_timer)) {
    63a2:	48d5      	ldr	r0, [pc, #852]	; (66f8 <input+0x380>)
    63a4:	4bd5      	ldr	r3, [pc, #852]	; (66fc <input+0x384>)
    63a6:	4798      	blx	r3
    63a8:	2800      	cmp	r0, #0
    63aa:	d004      	beq.n	63b6 <input+0x3e>
    sicslowpan_len = 0;
    63ac:	2300      	movs	r3, #0
    63ae:	4ad4      	ldr	r2, [pc, #848]	; (6700 <input+0x388>)
    63b0:	8013      	strh	r3, [r2, #0]
    processed_ip_in_len = 0;
    63b2:	4ad4      	ldr	r2, [pc, #848]	; (6704 <input+0x38c>)
    63b4:	8013      	strh	r3, [r2, #0]
  }
  /*
   * Since we don't support the mesh and broadcast header, the first header
   * we look for is the fragmentation header
   */
  switch((GET16(PACKETBUF_FRAG_PTR, PACKETBUF_FRAG_DISPATCH_SIZE) & 0xf800) >> 8) {
    63b6:	4bcd      	ldr	r3, [pc, #820]	; (66ec <input+0x374>)
    63b8:	6819      	ldr	r1, [r3, #0]
    63ba:	780c      	ldrb	r4, [r1, #0]
    63bc:	0224      	lsls	r4, r4, #8
    63be:	784a      	ldrb	r2, [r1, #1]
    63c0:	23f8      	movs	r3, #248	; 0xf8
    63c2:	021b      	lsls	r3, r3, #8
    63c4:	4023      	ands	r3, r4
    63c6:	121b      	asrs	r3, r3, #8
    63c8:	2bc0      	cmp	r3, #192	; 0xc0
    63ca:	d002      	beq.n	63d2 <input+0x5a>
    63cc:	2be0      	cmp	r3, #224	; 0xe0
    63ce:	d015      	beq.n	63fc <input+0x84>
    63d0:	e036      	b.n	6440 <input+0xc8>
    case SICSLOWPAN_DISPATCH_FRAG1:
      PRINTFI("sicslowpan input: FRAG1 ");
      frag_offset = 0;
/*       frag_size = (uip_ntohs(PACKETBUF_FRAG_BUF->dispatch_size) & 0x07ff); */
      frag_size = GET16(PACKETBUF_FRAG_PTR, PACKETBUF_FRAG_DISPATCH_SIZE) & 0x07ff;
    63d2:	4314      	orrs	r4, r2
    63d4:	0564      	lsls	r4, r4, #21
    63d6:	0d64      	lsrs	r4, r4, #21
/*       frag_tag = uip_ntohs(PACKETBUF_FRAG_BUF->tag); */
      frag_tag = GET16(PACKETBUF_FRAG_PTR, PACKETBUF_FRAG_TAG);
    63d8:	788f      	ldrb	r7, [r1, #2]
    63da:	023f      	lsls	r7, r7, #8
    63dc:	78cb      	ldrb	r3, [r1, #3]
    63de:	431f      	orrs	r7, r3
      PRINTFI("size %d, tag %d, offset %d)\n\r",
             frag_size, frag_tag, frag_offset);
      packetbuf_hdr_len += SICSLOWPAN_FRAG1_HDR_LEN;
    63e0:	4ac0      	ldr	r2, [pc, #768]	; (66e4 <input+0x36c>)
    63e2:	7813      	ldrb	r3, [r2, #0]
    63e4:	3304      	adds	r3, #4
    63e6:	7013      	strb	r3, [r2, #0]

  if(!is_fragment) {
    /* Prioritize non-fragment packets too. */
    sicslowpan_len = 0;
    processed_ip_in_len = 0;
  } else if(processed_ip_in_len > 0 && first_fragment
    63e8:	4bc6      	ldr	r3, [pc, #792]	; (6704 <input+0x38c>)
    63ea:	881b      	ldrh	r3, [r3, #0]
    63ec:	2b00      	cmp	r3, #0
    63ee:	d133      	bne.n	6458 <input+0xe0>
  uint8_t frag_offset = 0;
  uint8_t is_fragment = 0;
#if SICSLOWPAN_CONF_FRAG
  /* tag of the fragment */
  uint16_t frag_tag = 0;
  uint8_t first_fragment = 0, last_fragment = 0;
    63f0:	9300      	str	r3, [sp, #0]
      frag_tag = GET16(PACKETBUF_FRAG_PTR, PACKETBUF_FRAG_TAG);
      PRINTFI("size %d, tag %d, offset %d)\n\r",
             frag_size, frag_tag, frag_offset);
      packetbuf_hdr_len += SICSLOWPAN_FRAG1_HDR_LEN;
      /*      printf("frag1 %d %d\n\r", reass_tag, frag_tag);*/
      first_fragment = 1;
    63f2:	3301      	adds	r3, #1
    63f4:	4698      	mov	r8, r3

  if(!is_fragment) {
    /* Prioritize non-fragment packets too. */
    sicslowpan_len = 0;
    processed_ip_in_len = 0;
  } else if(processed_ip_in_len > 0 && first_fragment
    63f6:	2101      	movs	r1, #1
   * we look for is the fragmentation header
   */
  switch((GET16(PACKETBUF_FRAG_PTR, PACKETBUF_FRAG_DISPATCH_SIZE) & 0xf800) >> 8) {
    case SICSLOWPAN_DISPATCH_FRAG1:
      PRINTFI("sicslowpan input: FRAG1 ");
      frag_offset = 0;
    63f8:	2600      	movs	r6, #0
    63fa:	e2f6      	b.n	69ea <input+0x672>
      /*
       * set offset, tag, size
       * Offset is in units of 8 bytes
       */
      PRINTFI("sicslowpan input: FRAGN ");
      frag_offset = PACKETBUF_FRAG_PTR[PACKETBUF_FRAG_OFFSET];
    63fc:	790e      	ldrb	r6, [r1, #4]
      frag_tag = GET16(PACKETBUF_FRAG_PTR, PACKETBUF_FRAG_TAG);
    63fe:	788f      	ldrb	r7, [r1, #2]
    6400:	023f      	lsls	r7, r7, #8
    6402:	78cb      	ldrb	r3, [r1, #3]
    6404:	431f      	orrs	r7, r3
      frag_size = GET16(PACKETBUF_FRAG_PTR, PACKETBUF_FRAG_DISPATCH_SIZE) & 0x07ff;
    6406:	4314      	orrs	r4, r2
    6408:	0564      	lsls	r4, r4, #21
    640a:	0d64      	lsrs	r4, r4, #21
      PRINTFI("size %d, tag %d, offset %d)\n\r",
             frag_size, frag_tag, frag_offset);
      packetbuf_hdr_len += SICSLOWPAN_FRAGN_HDR_LEN;
    640c:	4db5      	ldr	r5, [pc, #724]	; (66e4 <input+0x36c>)
    640e:	782b      	ldrb	r3, [r5, #0]
    6410:	3305      	adds	r3, #5
    6412:	702b      	strb	r3, [r5, #0]
      /* If this is the last fragment, we may shave off any extrenous
         bytes at the end. We must be liberal in what we accept. */
      PRINTFI("last_fragment?: processed_ip_in_len %d packetbuf_payload_len %d frag_size %d\n\r",
              processed_ip_in_len, packetbuf_datalen() - packetbuf_hdr_len, frag_size);

      if(processed_ip_in_len + packetbuf_datalen() - packetbuf_hdr_len >= frag_size) {
    6414:	4bbb      	ldr	r3, [pc, #748]	; (6704 <input+0x38c>)
    6416:	4698      	mov	r8, r3
    6418:	881b      	ldrh	r3, [r3, #0]
    641a:	4699      	mov	r9, r3
    641c:	4bba      	ldr	r3, [pc, #744]	; (6708 <input+0x390>)
    641e:	4798      	blx	r3
    6420:	4448      	add	r0, r9
    6422:	782b      	ldrb	r3, [r5, #0]
    6424:	1ac0      	subs	r0, r0, r3
    6426:	17c5      	asrs	r5, r0, #31
    6428:	0fe3      	lsrs	r3, r4, #31
    642a:	42a0      	cmp	r0, r4
    642c:	415d      	adcs	r5, r3
  uint8_t frag_offset = 0;
  uint8_t is_fragment = 0;
#if SICSLOWPAN_CONF_FRAG
  /* tag of the fragment */
  uint16_t frag_tag = 0;
  uint8_t first_fragment = 0, last_fragment = 0;
    642e:	b2eb      	uxtb	r3, r5
    6430:	9300      	str	r3, [sp, #0]

  if(!is_fragment) {
    /* Prioritize non-fragment packets too. */
    sicslowpan_len = 0;
    processed_ip_in_len = 0;
  } else if(processed_ip_in_len > 0 && first_fragment
    6432:	4643      	mov	r3, r8
    6434:	881b      	ldrh	r3, [r3, #0]
    6436:	2b00      	cmp	r3, #0
    6438:	d12a      	bne.n	6490 <input+0x118>
  uint8_t frag_offset = 0;
  uint8_t is_fragment = 0;
#if SICSLOWPAN_CONF_FRAG
  /* tag of the fragment */
  uint16_t frag_tag = 0;
  uint8_t first_fragment = 0, last_fragment = 0;
    643a:	4698      	mov	r8, r3

  if(!is_fragment) {
    /* Prioritize non-fragment packets too. */
    sicslowpan_len = 0;
    processed_ip_in_len = 0;
  } else if(processed_ip_in_len > 0 && first_fragment
    643c:	2101      	movs	r1, #1
    643e:	e2d4      	b.n	69ea <input+0x672>
#define PRIORITIZE_NEW_PACKETS 1
#if PRIORITIZE_NEW_PACKETS

  if(!is_fragment) {
    /* Prioritize non-fragment packets too. */
    sicslowpan_len = 0;
    6440:	2300      	movs	r3, #0
    6442:	4aaf      	ldr	r2, [pc, #700]	; (6700 <input+0x388>)
    6444:	8013      	strh	r3, [r2, #0]
    processed_ip_in_len = 0;
    6446:	4aaf      	ldr	r2, [pc, #700]	; (6704 <input+0x38c>)
    6448:	8013      	strh	r3, [r2, #0]
  uint8_t frag_offset = 0;
  uint8_t is_fragment = 0;
#if SICSLOWPAN_CONF_FRAG
  /* tag of the fragment */
  uint16_t frag_tag = 0;
  uint8_t first_fragment = 0, last_fragment = 0;
    644a:	9300      	str	r3, [sp, #0]
    644c:	4698      	mov	r8, r3
  /* offset of the fragment in the IP packet */
  uint8_t frag_offset = 0;
  uint8_t is_fragment = 0;
#if SICSLOWPAN_CONF_FRAG
  /* tag of the fragment */
  uint16_t frag_tag = 0;
    644e:	2700      	movs	r7, #0
{
  /* size of the IP packet (read from fragment) */
  uint16_t frag_size = 0;
  /* offset of the fragment in the IP packet */
  uint8_t frag_offset = 0;
  uint8_t is_fragment = 0;
    6450:	2100      	movs	r1, #0
input(void)
{
  /* size of the IP packet (read from fragment) */
  uint16_t frag_size = 0;
  /* offset of the fragment in the IP packet */
  uint8_t frag_offset = 0;
    6452:	2600      	movs	r6, #0
 */
static void
input(void)
{
  /* size of the IP packet (read from fragment) */
  uint16_t frag_size = 0;
    6454:	2400      	movs	r4, #0
    6456:	e2c8      	b.n	69ea <input+0x672>
  if(!is_fragment) {
    /* Prioritize non-fragment packets too. */
    sicslowpan_len = 0;
    processed_ip_in_len = 0;
  } else if(processed_ip_in_len > 0 && first_fragment
      && !linkaddr_cmp(&frag_sender, packetbuf_addr(PACKETBUF_ADDR_SENDER))) {
    6458:	48ac      	ldr	r0, [pc, #688]	; (670c <input+0x394>)
    645a:	49ad      	ldr	r1, [pc, #692]	; (6710 <input+0x398>)
    645c:	4bad      	ldr	r3, [pc, #692]	; (6714 <input+0x39c>)
    645e:	4798      	blx	r3
    6460:	2800      	cmp	r0, #0
    6462:	d10a      	bne.n	647a <input+0x102>
    sicslowpan_len = 0;
    6464:	2300      	movs	r3, #0
    6466:	4aa6      	ldr	r2, [pc, #664]	; (6700 <input+0x388>)
    6468:	8013      	strh	r3, [r2, #0]
    processed_ip_in_len = 0;
    646a:	4aa6      	ldr	r2, [pc, #664]	; (6704 <input+0x38c>)
    646c:	8013      	strh	r3, [r2, #0]
  uint8_t frag_offset = 0;
  uint8_t is_fragment = 0;
#if SICSLOWPAN_CONF_FRAG
  /* tag of the fragment */
  uint16_t frag_tag = 0;
  uint8_t first_fragment = 0, last_fragment = 0;
    646e:	9300      	str	r3, [sp, #0]
      frag_tag = GET16(PACKETBUF_FRAG_PTR, PACKETBUF_FRAG_TAG);
      PRINTFI("size %d, tag %d, offset %d)\n\r",
             frag_size, frag_tag, frag_offset);
      packetbuf_hdr_len += SICSLOWPAN_FRAG1_HDR_LEN;
      /*      printf("frag1 %d %d\n\r", reass_tag, frag_tag);*/
      first_fragment = 1;
    6470:	3301      	adds	r3, #1
    6472:	4698      	mov	r8, r3
    sicslowpan_len = 0;
    processed_ip_in_len = 0;
  } else if(processed_ip_in_len > 0 && first_fragment
      && !linkaddr_cmp(&frag_sender, packetbuf_addr(PACKETBUF_ADDR_SENDER))) {
    sicslowpan_len = 0;
    processed_ip_in_len = 0;
    6474:	2101      	movs	r1, #1
   * we look for is the fragmentation header
   */
  switch((GET16(PACKETBUF_FRAG_PTR, PACKETBUF_FRAG_DISPATCH_SIZE) & 0xf800) >> 8) {
    case SICSLOWPAN_DISPATCH_FRAG1:
      PRINTFI("sicslowpan input: FRAG1 ");
      frag_offset = 0;
    6476:	2600      	movs	r6, #0
    6478:	e2b7      	b.n	69ea <input+0x672>
    sicslowpan_len = 0;
    processed_ip_in_len = 0;
  }
#endif /* PRIORITIZE_NEW_PACKETS */

  if(processed_ip_in_len > 0) {
    647a:	4ba2      	ldr	r3, [pc, #648]	; (6704 <input+0x38c>)
    647c:	881b      	ldrh	r3, [r3, #0]
    647e:	2b00      	cmp	r3, #0
    6480:	d100      	bne.n	6484 <input+0x10c>
    6482:	e2c2      	b.n	6a0a <input+0x692>
      frag_tag = GET16(PACKETBUF_FRAG_PTR, PACKETBUF_FRAG_TAG);
      PRINTFI("size %d, tag %d, offset %d)\n\r",
             frag_size, frag_tag, frag_offset);
      packetbuf_hdr_len += SICSLOWPAN_FRAG1_HDR_LEN;
      /*      printf("frag1 %d %d\n\r", reass_tag, frag_tag);*/
      first_fragment = 1;
    6484:	2301      	movs	r3, #1
    6486:	4698      	mov	r8, r3
  uint8_t frag_offset = 0;
  uint8_t is_fragment = 0;
#if SICSLOWPAN_CONF_FRAG
  /* tag of the fragment */
  uint16_t frag_tag = 0;
  uint8_t first_fragment = 0, last_fragment = 0;
    6488:	2300      	movs	r3, #0
    648a:	9300      	str	r3, [sp, #0]
   * we look for is the fragmentation header
   */
  switch((GET16(PACKETBUF_FRAG_PTR, PACKETBUF_FRAG_DISPATCH_SIZE) & 0xf800) >> 8) {
    case SICSLOWPAN_DISPATCH_FRAG1:
      PRINTFI("sicslowpan input: FRAG1 ");
      frag_offset = 0;
    648c:	2600      	movs	r6, #0
    648e:	e001      	b.n	6494 <input+0x11c>
  uint8_t frag_offset = 0;
  uint8_t is_fragment = 0;
#if SICSLOWPAN_CONF_FRAG
  /* tag of the fragment */
  uint16_t frag_tag = 0;
  uint8_t first_fragment = 0, last_fragment = 0;
    6490:	2300      	movs	r3, #0
    6492:	4698      	mov	r8, r3
#endif /* PRIORITIZE_NEW_PACKETS */

  if(processed_ip_in_len > 0) {
    /* reassembly is ongoing */
    /*    printf("frag %d %d\n\r", reass_tag, frag_tag);*/
    if((frag_size > 0 &&
    6494:	2c00      	cmp	r4, #0
    6496:	d00e      	beq.n	64b6 <input+0x13e>
        (frag_size != sicslowpan_len ||
    6498:	4b99      	ldr	r3, [pc, #612]	; (6700 <input+0x388>)
    649a:	881d      	ldrh	r5, [r3, #0]
#endif /* PRIORITIZE_NEW_PACKETS */

  if(processed_ip_in_len > 0) {
    /* reassembly is ongoing */
    /*    printf("frag %d %d\n\r", reass_tag, frag_tag);*/
    if((frag_size > 0 &&
    649c:	42a5      	cmp	r5, r4
    649e:	d10a      	bne.n	64b6 <input+0x13e>
        (frag_size != sicslowpan_len ||
         reass_tag  != frag_tag ||
    64a0:	4b9d      	ldr	r3, [pc, #628]	; (6718 <input+0x3a0>)

  if(processed_ip_in_len > 0) {
    /* reassembly is ongoing */
    /*    printf("frag %d %d\n\r", reass_tag, frag_tag);*/
    if((frag_size > 0 &&
        (frag_size != sicslowpan_len ||
    64a2:	881b      	ldrh	r3, [r3, #0]
    64a4:	42bb      	cmp	r3, r7
    64a6:	d106      	bne.n	64b6 <input+0x13e>
         reass_tag  != frag_tag ||
         !linkaddr_cmp(&frag_sender, packetbuf_addr(PACKETBUF_ADDR_SENDER))))  ||
    64a8:	4898      	ldr	r0, [pc, #608]	; (670c <input+0x394>)
    64aa:	4999      	ldr	r1, [pc, #612]	; (6710 <input+0x398>)
    64ac:	4b99      	ldr	r3, [pc, #612]	; (6714 <input+0x39c>)
    64ae:	4798      	blx	r3
    64b0:	1c2c      	adds	r4, r5, #0
  if(processed_ip_in_len > 0) {
    /* reassembly is ongoing */
    /*    printf("frag %d %d\n\r", reass_tag, frag_tag);*/
    if((frag_size > 0 &&
        (frag_size != sicslowpan_len ||
         reass_tag  != frag_tag ||
    64b2:	2800      	cmp	r0, #0
    64b4:	d123      	bne.n	64fe <input+0x186>
      /*
       * the packet is a fragment that does not belong to the packet
       * being reassembled or the packet is not a fragment.
       */
      PRINTFI("sicslowpan input: Dropping 6lowpan packet that is not a fragment of the packet currently being reassembled\n\r");
      printf("frag %d %d\n\r", reass_tag, frag_tag);
    64b6:	4b98      	ldr	r3, [pc, #608]	; (6718 <input+0x3a0>)
    64b8:	8819      	ldrh	r1, [r3, #0]
    64ba:	4898      	ldr	r0, [pc, #608]	; (671c <input+0x3a4>)
    64bc:	1c3a      	adds	r2, r7, #0
    64be:	4c98      	ldr	r4, [pc, #608]	; (6720 <input+0x3a8>)
    64c0:	47a0      	blx	r4
      printf("drop incoming frag\n\r");
    64c2:	4898      	ldr	r0, [pc, #608]	; (6724 <input+0x3ac>)
    64c4:	47a0      	blx	r4
      RIMESTATS_ADD(sicslowpandrops);
    64c6:	4a98      	ldr	r2, [pc, #608]	; (6728 <input+0x3b0>)
    64c8:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
    64ca:	3301      	adds	r3, #1
    64cc:	64d3      	str	r3, [r2, #76]	; 0x4c
      return;
    64ce:	e2af      	b.n	6a30 <input+0x6b8>
     * start it if we received a fragment
     */
    if((frag_size > 0) && (frag_size <= UIP_BUFSIZE)) {
      /* We are currently not reassembling a packet, but have received a packet fragment
       * that is not the first one. */
      if(is_fragment && !first_fragment) {
    64d0:	2900      	cmp	r1, #0
    64d2:	d008      	beq.n	64e6 <input+0x16e>
    64d4:	4643      	mov	r3, r8
    64d6:	2b00      	cmp	r3, #0
    64d8:	d105      	bne.n	64e6 <input+0x16e>
    64da:	e2a9      	b.n	6a30 <input+0x6b8>
  uint8_t frag_offset = 0;
  uint8_t is_fragment = 0;
#if SICSLOWPAN_CONF_FRAG
  /* tag of the fragment */
  uint16_t frag_tag = 0;
  uint8_t first_fragment = 0, last_fragment = 0;
    64dc:	2300      	movs	r3, #0
    64de:	9300      	str	r3, [sp, #0]
      frag_tag = GET16(PACKETBUF_FRAG_PTR, PACKETBUF_FRAG_TAG);
      PRINTFI("size %d, tag %d, offset %d)\n\r",
             frag_size, frag_tag, frag_offset);
      packetbuf_hdr_len += SICSLOWPAN_FRAG1_HDR_LEN;
      /*      printf("frag1 %d %d\n\r", reass_tag, frag_tag);*/
      first_fragment = 1;
    64e0:	2201      	movs	r2, #1
    64e2:	4690      	mov	r8, r2
   * we look for is the fragmentation header
   */
  switch((GET16(PACKETBUF_FRAG_PTR, PACKETBUF_FRAG_DISPATCH_SIZE) & 0xf800) >> 8) {
    case SICSLOWPAN_DISPATCH_FRAG1:
      PRINTFI("sicslowpan input: FRAG1 ");
      frag_offset = 0;
    64e4:	1c1e      	adds	r6, r3, #0
       * that is not the first one. */
      if(is_fragment && !first_fragment) {
        return;
      }

      sicslowpan_len = frag_size;
    64e6:	4b86      	ldr	r3, [pc, #536]	; (6700 <input+0x388>)
    64e8:	801c      	strh	r4, [r3, #0]
      reass_tag = frag_tag;
    64ea:	4b8b      	ldr	r3, [pc, #556]	; (6718 <input+0x3a0>)
    64ec:	801f      	strh	r7, [r3, #0]
      timer_set(&reass_timer, SICSLOWPAN_REASS_MAXAGE * CLOCK_SECOND / 16);
    64ee:	4882      	ldr	r0, [pc, #520]	; (66f8 <input+0x380>)
    64f0:	21a0      	movs	r1, #160	; 0xa0
    64f2:	4b8e      	ldr	r3, [pc, #568]	; (672c <input+0x3b4>)
    64f4:	4798      	blx	r3
      PRINTFI("sicslowpan input: INIT FRAGMENTATION (len %d, tag %d)\n\r",
             sicslowpan_len, reass_tag);
      linkaddr_copy(&frag_sender, packetbuf_addr(PACKETBUF_ADDR_SENDER));
    64f6:	4885      	ldr	r0, [pc, #532]	; (670c <input+0x394>)
    64f8:	4985      	ldr	r1, [pc, #532]	; (6710 <input+0x398>)
    64fa:	4b8d      	ldr	r3, [pc, #564]	; (6730 <input+0x3b8>)
    64fc:	4798      	blx	r3
    }
  }

  if(packetbuf_hdr_len == SICSLOWPAN_FRAGN_HDR_LEN) {
    64fe:	4b79      	ldr	r3, [pc, #484]	; (66e4 <input+0x36c>)
    6500:	781d      	ldrb	r5, [r3, #0]
    6502:	2d05      	cmp	r5, #5
    6504:	d100      	bne.n	6508 <input+0x190>
    6506:	e21a      	b.n	693e <input+0x5c6>
  }
#endif /* SICSLOWPAN_CONF_FRAG */

  /* Process next dispatch and headers */
#if SICSLOWPAN_COMPRESSION == SICSLOWPAN_COMPRESSION_HC06
  if((PACKETBUF_HC1_PTR[PACKETBUF_HC1_DISPATCH] & 0xe0) == SICSLOWPAN_DISPATCH_IPHC) {
    6508:	4b78      	ldr	r3, [pc, #480]	; (66ec <input+0x374>)
    650a:	681b      	ldr	r3, [r3, #0]
    650c:	5d5f      	ldrb	r7, [r3, r5]
    650e:	221f      	movs	r2, #31
    6510:	1c39      	adds	r1, r7, #0
    6512:	4391      	bics	r1, r2
    6514:	2960      	cmp	r1, #96	; 0x60
    6516:	d000      	beq.n	651a <input+0x1a2>
    6518:	e1ff      	b.n	691a <input+0x5a2>
static void
uncompress_hdr_hc06(uint16_t ip_len)
{
  uint8_t tmp, iphc0, iphc1;
  /* at least two byte will be used for the encoding */
  hc06_ptr = packetbuf_ptr + packetbuf_hdr_len + 2;
    651a:	1caa      	adds	r2, r5, #2
    651c:	189a      	adds	r2, r3, r2
    651e:	4985      	ldr	r1, [pc, #532]	; (6734 <input+0x3bc>)
    6520:	600a      	str	r2, [r1, #0]

  iphc0 = PACKETBUF_IPHC_BUF[0];
  iphc1 = PACKETBUF_IPHC_BUF[1];
    6522:	195b      	adds	r3, r3, r5
    6524:	785b      	ldrb	r3, [r3, #1]
    6526:	4699      	mov	r9, r3

  /* another if the CID flag is set */
  if(iphc1 & SICSLOWPAN_IPHC_CID) {
    6528:	4669      	mov	r1, sp
    652a:	710b      	strb	r3, [r1, #4]
    652c:	790b      	ldrb	r3, [r1, #4]
    652e:	9301      	str	r3, [sp, #4]
    6530:	b25b      	sxtb	r3, r3
    6532:	2b00      	cmp	r3, #0
    6534:	da02      	bge.n	653c <input+0x1c4>
    PRINTF("IPHC: CID flag set - increase header with one\n\r");
    hc06_ptr++;
    6536:	3201      	adds	r2, #1
    6538:	4b7e      	ldr	r3, [pc, #504]	; (6734 <input+0x3bc>)
    653a:	601a      	str	r2, [r3, #0]
  }

  /* Traffic class and flow label */
    if((iphc0 & SICSLOWPAN_IPHC_FL_C) == 0) {
    653c:	06fb      	lsls	r3, r7, #27
    653e:	d43d      	bmi.n	65bc <input+0x244>
      /* Flow label are carried inline */
      if((iphc0 & SICSLOWPAN_IPHC_TC_C) == 0) {
    6540:	073b      	lsls	r3, r7, #28
    6542:	d423      	bmi.n	658c <input+0x214>
        /* Traffic class is carried inline */
        memcpy(&SICSLOWPAN_IP_BUF->tcflow, hc06_ptr + 1, 3);
    6544:	4b7b      	ldr	r3, [pc, #492]	; (6734 <input+0x3bc>)
    6546:	469a      	mov	sl, r3
    6548:	681b      	ldr	r3, [r3, #0]
    654a:	469b      	mov	fp, r3
    654c:	4d7a      	ldr	r5, [pc, #488]	; (6738 <input+0x3c0>)
    654e:	1c68      	adds	r0, r5, #1
    6550:	1c59      	adds	r1, r3, #1
    6552:	2203      	movs	r2, #3
    6554:	4b79      	ldr	r3, [pc, #484]	; (673c <input+0x3c4>)
    6556:	4798      	blx	r3
        tmp = *hc06_ptr;
    6558:	465b      	mov	r3, fp
    655a:	781b      	ldrb	r3, [r3, #0]
        hc06_ptr += 4;
    655c:	465a      	mov	r2, fp
    655e:	3204      	adds	r2, #4
    6560:	4651      	mov	r1, sl
    6562:	600a      	str	r2, [r1, #0]
        /* hc06 format of tc is ECN | DSCP , original is DSCP | ECN */
        /* set version, pick highest DSCP bits and set in vtc */
        SICSLOWPAN_IP_BUF->vtc = 0x60 | ((tmp >> 2) & 0x0f);
    6564:	089a      	lsrs	r2, r3, #2
    6566:	210f      	movs	r1, #15
    6568:	468a      	mov	sl, r1
    656a:	1c08      	adds	r0, r1, #0
    656c:	4010      	ands	r0, r2
    656e:	4684      	mov	ip, r0
    6570:	2060      	movs	r0, #96	; 0x60
    6572:	4661      	mov	r1, ip
    6574:	4308      	orrs	r0, r1
    6576:	7028      	strb	r0, [r5, #0]
        /* ECN rolled down two steps + lowest DSCP bits at top two bits */
        SICSLOWPAN_IP_BUF->tcflow = ((tmp >> 2) & 0x30) | (tmp << 6) |
    6578:	2030      	movs	r0, #48	; 0x30
    657a:	4002      	ands	r2, r0
    657c:	019b      	lsls	r3, r3, #6
    657e:	4313      	orrs	r3, r2
    6580:	786a      	ldrb	r2, [r5, #1]
    6582:	4651      	mov	r1, sl
    6584:	400a      	ands	r2, r1
    6586:	4313      	orrs	r3, r2
    6588:	706b      	strb	r3, [r5, #1]
    658a:	e036      	b.n	65fa <input+0x282>
  	(SICSLOWPAN_IP_BUF->tcflow & 0x0f);
      } else {
        /* Traffic class is compressed (set version and no TC)*/
        SICSLOWPAN_IP_BUF->vtc = 0x60;
    658c:	486a      	ldr	r0, [pc, #424]	; (6738 <input+0x3c0>)
    658e:	2360      	movs	r3, #96	; 0x60
    6590:	7003      	strb	r3, [r0, #0]
        /* highest flow label bits + ECN bits */
        SICSLOWPAN_IP_BUF->tcflow = (*hc06_ptr & 0x0F) |
    6592:	4d68      	ldr	r5, [pc, #416]	; (6734 <input+0x3bc>)
    6594:	682b      	ldr	r3, [r5, #0]
    6596:	469a      	mov	sl, r3
    6598:	781b      	ldrb	r3, [r3, #0]
    659a:	089a      	lsrs	r2, r3, #2
    659c:	2130      	movs	r1, #48	; 0x30
    659e:	400a      	ands	r2, r1
    65a0:	3921      	subs	r1, #33	; 0x21
    65a2:	400b      	ands	r3, r1
    65a4:	4313      	orrs	r3, r2
    65a6:	7043      	strb	r3, [r0, #1]
  	((*hc06_ptr >> 2) & 0x30);
        memcpy(&SICSLOWPAN_IP_BUF->flow, hc06_ptr + 1, 2);
    65a8:	3002      	adds	r0, #2
    65aa:	4653      	mov	r3, sl
    65ac:	1c59      	adds	r1, r3, #1
    65ae:	2202      	movs	r2, #2
    65b0:	4b62      	ldr	r3, [pc, #392]	; (673c <input+0x3c4>)
    65b2:	4798      	blx	r3
        hc06_ptr += 3;
    65b4:	4653      	mov	r3, sl
    65b6:	3303      	adds	r3, #3
    65b8:	602b      	str	r3, [r5, #0]
    65ba:	e01e      	b.n	65fa <input+0x282>
      }
    } else {
      /* Version is always 6! */
      /* Version and flow label are compressed */
      if((iphc0 & SICSLOWPAN_IPHC_TC_C) == 0) {
    65bc:	073b      	lsls	r3, r7, #28
    65be:	d416      	bmi.n	65ee <input+0x276>
        /* Traffic class is inline */
          SICSLOWPAN_IP_BUF->vtc = 0x60 | ((*hc06_ptr >> 2) & 0x0f);
    65c0:	4b5c      	ldr	r3, [pc, #368]	; (6734 <input+0x3bc>)
    65c2:	469c      	mov	ip, r3
    65c4:	681a      	ldr	r2, [r3, #0]
    65c6:	485c      	ldr	r0, [pc, #368]	; (6738 <input+0x3c0>)
    65c8:	7813      	ldrb	r3, [r2, #0]
    65ca:	069b      	lsls	r3, r3, #26
    65cc:	0f1b      	lsrs	r3, r3, #28
    65ce:	2560      	movs	r5, #96	; 0x60
    65d0:	432b      	orrs	r3, r5
    65d2:	7003      	strb	r3, [r0, #0]
          SICSLOWPAN_IP_BUF->tcflow = ((*hc06_ptr << 6) & 0xC0) | ((*hc06_ptr >> 2) & 0x30);
    65d4:	7813      	ldrb	r3, [r2, #0]
    65d6:	089d      	lsrs	r5, r3, #2
    65d8:	2130      	movs	r1, #48	; 0x30
    65da:	400d      	ands	r5, r1
    65dc:	019b      	lsls	r3, r3, #6
    65de:	432b      	orrs	r3, r5
    65e0:	7043      	strb	r3, [r0, #1]
          SICSLOWPAN_IP_BUF->flow = 0;
    65e2:	2300      	movs	r3, #0
    65e4:	8043      	strh	r3, [r0, #2]
          hc06_ptr += 1;
    65e6:	3201      	adds	r2, #1
    65e8:	4663      	mov	r3, ip
    65ea:	601a      	str	r2, [r3, #0]
    65ec:	e005      	b.n	65fa <input+0x282>
      } else {
        /* Traffic class is compressed */
        SICSLOWPAN_IP_BUF->vtc = 0x60;
    65ee:	4b52      	ldr	r3, [pc, #328]	; (6738 <input+0x3c0>)
    65f0:	2260      	movs	r2, #96	; 0x60
    65f2:	701a      	strb	r2, [r3, #0]
        SICSLOWPAN_IP_BUF->tcflow = 0;
    65f4:	2200      	movs	r2, #0
    65f6:	705a      	strb	r2, [r3, #1]
        SICSLOWPAN_IP_BUF->flow = 0;
    65f8:	805a      	strh	r2, [r3, #2]
      }
    }

  /* Next Header */
  if((iphc0 & SICSLOWPAN_IPHC_NH_C) == 0) {
    65fa:	2304      	movs	r3, #4
    65fc:	403b      	ands	r3, r7
    65fe:	469a      	mov	sl, r3
    6600:	d106      	bne.n	6610 <input+0x298>
    /* Next header is carried inline */
    SICSLOWPAN_IP_BUF->proto = *hc06_ptr;
    6602:	4a4c      	ldr	r2, [pc, #304]	; (6734 <input+0x3bc>)
    6604:	6813      	ldr	r3, [r2, #0]
    6606:	7818      	ldrb	r0, [r3, #0]
    6608:	494b      	ldr	r1, [pc, #300]	; (6738 <input+0x3c0>)
    660a:	7188      	strb	r0, [r1, #6]
    PRINTF("IPHC: next header inline: %d\n\r", SICSLOWPAN_IP_BUF->proto);
    hc06_ptr += 1;
    660c:	3301      	adds	r3, #1
    660e:	6013      	str	r3, [r2, #0]
  }

  /* Hop limit */
  if((iphc0 & 0x03) != SICSLOWPAN_IPHC_TTL_I) {
    6610:	2303      	movs	r3, #3
    6612:	401f      	ands	r7, r3
    6614:	d004      	beq.n	6620 <input+0x2a8>
    SICSLOWPAN_IP_BUF->ttl = ttl_values[iphc0 & 0x03];
    6616:	4b4a      	ldr	r3, [pc, #296]	; (6740 <input+0x3c8>)
    6618:	5dda      	ldrb	r2, [r3, r7]
    661a:	4b47      	ldr	r3, [pc, #284]	; (6738 <input+0x3c0>)
    661c:	71da      	strb	r2, [r3, #7]
    661e:	e006      	b.n	662e <input+0x2b6>
  } else {
    SICSLOWPAN_IP_BUF->ttl = *hc06_ptr;
    6620:	4a44      	ldr	r2, [pc, #272]	; (6734 <input+0x3bc>)
    6622:	6813      	ldr	r3, [r2, #0]
    6624:	7818      	ldrb	r0, [r3, #0]
    6626:	4944      	ldr	r1, [pc, #272]	; (6738 <input+0x3c0>)
    6628:	71c8      	strb	r0, [r1, #7]
    hc06_ptr += 1;
    662a:	3301      	adds	r3, #1
    662c:	6013      	str	r3, [r2, #0]
  }

  /* put the source address compression mode SAM in the tmp var */
  tmp = ((iphc1 & SICSLOWPAN_IPHC_SAM_11) >> SICSLOWPAN_IPHC_SAM_BIT) & 0x03;
    662e:	464b      	mov	r3, r9
    6630:	069b      	lsls	r3, r3, #26
    6632:	0f9b      	lsrs	r3, r3, #30

  /* context based compression */
  if(iphc1 & SICSLOWPAN_IPHC_SAC) {
    6634:	464a      	mov	r2, r9
    6636:	0652      	lsls	r2, r2, #25
    6638:	d528      	bpl.n	668c <input+0x314>
    uint8_t sci = (iphc1 & SICSLOWPAN_IPHC_CID) ?
    663a:	466a      	mov	r2, sp
    663c:	7912      	ldrb	r2, [r2, #4]
    663e:	b252      	sxtb	r2, r2
    6640:	2a00      	cmp	r2, #0
    6642:	db00      	blt.n	6646 <input+0x2ce>
    6644:	e1ef      	b.n	6a26 <input+0x6ae>
      PACKETBUF_IPHC_BUF[2] >> 4 : 0;
    6646:	4a27      	ldr	r2, [pc, #156]	; (66e4 <input+0x36c>)
    6648:	7812      	ldrb	r2, [r2, #0]
    664a:	4928      	ldr	r1, [pc, #160]	; (66ec <input+0x374>)
    664c:	6809      	ldr	r1, [r1, #0]
    664e:	188a      	adds	r2, r1, r2
  /* put the source address compression mode SAM in the tmp var */
  tmp = ((iphc1 & SICSLOWPAN_IPHC_SAM_11) >> SICSLOWPAN_IPHC_SAM_BIT) & 0x03;

  /* context based compression */
  if(iphc1 & SICSLOWPAN_IPHC_SAC) {
    uint8_t sci = (iphc1 & SICSLOWPAN_IPHC_CID) ?
    6650:	7892      	ldrb	r2, [r2, #2]
    6652:	0912      	lsrs	r2, r2, #4
      PACKETBUF_IPHC_BUF[2] >> 4 : 0;

    /* Source address - check context != NULL only if SAM bits are != 0*/
    if (tmp != 0) {
    6654:	2b00      	cmp	r3, #0
    6656:	d010      	beq.n	667a <input+0x302>
    6658:	e000      	b.n	665c <input+0x2e4>
  /* put the source address compression mode SAM in the tmp var */
  tmp = ((iphc1 & SICSLOWPAN_IPHC_SAM_11) >> SICSLOWPAN_IPHC_SAM_BIT) & 0x03;

  /* context based compression */
  if(iphc1 & SICSLOWPAN_IPHC_SAC) {
    uint8_t sci = (iphc1 & SICSLOWPAN_IPHC_CID) ?
    665a:	2200      	movs	r2, #0
{
/* Remove code to avoid warnings and save flash if no context is used */ 
#if SICSLOWPAN_CONF_MAX_ADDR_CONTEXTS > 0
  int i;
  for(i = 0; i < SICSLOWPAN_CONF_MAX_ADDR_CONTEXTS; i++) {
    if((addr_contexts[i].used == 1) &&
    665c:	4939      	ldr	r1, [pc, #228]	; (6744 <input+0x3cc>)
    665e:	7809      	ldrb	r1, [r1, #0]
    6660:	2901      	cmp	r1, #1
    6662:	d000      	beq.n	6666 <input+0x2ee>
    6664:	e1c9      	b.n	69fa <input+0x682>
       addr_contexts[i].number == number) {
    6666:	4937      	ldr	r1, [pc, #220]	; (6744 <input+0x3cc>)
{
/* Remove code to avoid warnings and save flash if no context is used */ 
#if SICSLOWPAN_CONF_MAX_ADDR_CONTEXTS > 0
  int i;
  for(i = 0; i < SICSLOWPAN_CONF_MAX_ADDR_CONTEXTS; i++) {
    if((addr_contexts[i].used == 1) &&
    6668:	7849      	ldrb	r1, [r1, #1]
    666a:	4291      	cmp	r1, r2
    666c:	d000      	beq.n	6670 <input+0x2f8>
    666e:	e1c4      	b.n	69fa <input+0x682>
    uint8_t sci = (iphc1 & SICSLOWPAN_IPHC_CID) ?
      PACKETBUF_IPHC_BUF[2] >> 4 : 0;

    /* Source address - check context != NULL only if SAM bits are != 0*/
    if (tmp != 0) {
      context = addr_context_lookup_by_number(sci);
    6670:	4934      	ldr	r1, [pc, #208]	; (6744 <input+0x3cc>)
    6672:	4a35      	ldr	r2, [pc, #212]	; (6748 <input+0x3d0>)
    6674:	6011      	str	r1, [r2, #0]
        PRINTF("sicslowpan uncompress_hdr: error context not found\n\r");
        return;
      }
    }
    /* if tmp == 0 we do not have a context and therefore no prefix */
    uncompress_addr(&SICSLOWPAN_IP_BUF->srcipaddr,
    6676:	3102      	adds	r1, #2
    6678:	e000      	b.n	667c <input+0x304>
    667a:	2100      	movs	r1, #0
    667c:	4a33      	ldr	r2, [pc, #204]	; (674c <input+0x3d4>)
    667e:	5cd2      	ldrb	r2, [r2, r3]
    6680:	482d      	ldr	r0, [pc, #180]	; (6738 <input+0x3c0>)
    6682:	3008      	adds	r0, #8
    6684:	4b22      	ldr	r3, [pc, #136]	; (6710 <input+0x398>)
    6686:	4f32      	ldr	r7, [pc, #200]	; (6750 <input+0x3d8>)
    6688:	47b8      	blx	r7
    668a:	e007      	b.n	669c <input+0x324>
                    tmp != 0 ? context->prefix : NULL, unc_ctxconf[tmp],
                    (uip_lladdr_t *)packetbuf_addr(PACKETBUF_ADDR_SENDER));
  } else {
    /* no compression and link local */
    uncompress_addr(&SICSLOWPAN_IP_BUF->srcipaddr, llprefix, unc_llconf[tmp],
    668c:	4a31      	ldr	r2, [pc, #196]	; (6754 <input+0x3dc>)
    668e:	5cd2      	ldrb	r2, [r2, r3]
    6690:	4829      	ldr	r0, [pc, #164]	; (6738 <input+0x3c0>)
    6692:	3008      	adds	r0, #8
    6694:	4930      	ldr	r1, [pc, #192]	; (6758 <input+0x3e0>)
    6696:	4b1e      	ldr	r3, [pc, #120]	; (6710 <input+0x398>)
    6698:	4f2d      	ldr	r7, [pc, #180]	; (6750 <input+0x3d8>)
    669a:	47b8      	blx	r7
                    (uip_lladdr_t *)packetbuf_addr(PACKETBUF_ADDR_SENDER));
  }

  /* Destination address */
  /* put the destination address compression mode into tmp */
  tmp = ((iphc1 & SICSLOWPAN_IPHC_DAM_11) >> SICSLOWPAN_IPHC_DAM_BIT) & 0x03;
    669c:	2303      	movs	r3, #3
    669e:	464f      	mov	r7, r9
    66a0:	401f      	ands	r7, r3

  /* multicast compression */
  if(iphc1 & SICSLOWPAN_IPHC_M) {
    66a2:	464b      	mov	r3, r9
    66a4:	071b      	lsls	r3, r3, #28
    66a6:	d55d      	bpl.n	6764 <input+0x3ec>
    /* context based multicast compression */
    if(iphc1 & SICSLOWPAN_IPHC_DAC) {
    66a8:	464b      	mov	r3, r9
    66aa:	075b      	lsls	r3, r3, #29
    66ac:	d500      	bpl.n	66b0 <input+0x338>
    66ae:	e088      	b.n	67c2 <input+0x44a>
      /* non-context based multicast compression - */
      /* DAM_00: 128 bits  */
      /* DAM_01:  48 bits FFXX::00XX:XXXX:XXXX */
      /* DAM_10:  32 bits FFXX::00XX:XXXX */
      /* DAM_11:   8 bits FF02::00XX */
      uint8_t prefix[] = {0xff, 0x02};
    66b0:	a803      	add	r0, sp, #12
    66b2:	492a      	ldr	r1, [pc, #168]	; (675c <input+0x3e4>)
    66b4:	2202      	movs	r2, #2
    66b6:	4b21      	ldr	r3, [pc, #132]	; (673c <input+0x3c4>)
    66b8:	4798      	blx	r3
      if(tmp > 0 && tmp < 3) {
    66ba:	1e7b      	subs	r3, r7, #1
    66bc:	2b01      	cmp	r3, #1
    66be:	d806      	bhi.n	66ce <input+0x356>
        prefix[1] = *hc06_ptr;
    66c0:	4a1c      	ldr	r2, [pc, #112]	; (6734 <input+0x3bc>)
    66c2:	6813      	ldr	r3, [r2, #0]
    66c4:	7818      	ldrb	r0, [r3, #0]
    66c6:	a903      	add	r1, sp, #12
    66c8:	7048      	strb	r0, [r1, #1]
        hc06_ptr++;
    66ca:	3301      	adds	r3, #1
    66cc:	6013      	str	r3, [r2, #0]
      }

      uncompress_addr(&SICSLOWPAN_IP_BUF->destipaddr, prefix,
    66ce:	4b24      	ldr	r3, [pc, #144]	; (6760 <input+0x3e8>)
    66d0:	5dda      	ldrb	r2, [r3, r7]
    66d2:	4819      	ldr	r0, [pc, #100]	; (6738 <input+0x3c0>)
    66d4:	3018      	adds	r0, #24
    66d6:	a903      	add	r1, sp, #12
    66d8:	2300      	movs	r3, #0
    66da:	4f1d      	ldr	r7, [pc, #116]	; (6750 <input+0x3d8>)
    66dc:	47b8      	blx	r7
    66de:	e070      	b.n	67c2 <input+0x44a>
    66e0:	20000548 	.word	0x20000548
    66e4:	20000550 	.word	0x20000550
    66e8:	0000bec5 	.word	0x0000bec5
    66ec:	20000554 	.word	0x20000554
    66f0:	200031f8 	.word	0x200031f8
    66f4:	2000054c 	.word	0x2000054c
    66f8:	2000053c 	.word	0x2000053c
    66fc:	0000ed9d 	.word	0x0000ed9d
    6700:	20000530 	.word	0x20000530
    6704:	2000039a 	.word	0x2000039a
    6708:	0000bf11 	.word	0x0000bf11
    670c:	20002b58 	.word	0x20002b58
    6710:	200031d8 	.word	0x200031d8
    6714:	0000ac7d 	.word	0x0000ac7d
    6718:	20000398 	.word	0x20000398
    671c:	00012bf8 	.word	0x00012bf8
    6720:	00010b79 	.word	0x00010b79
    6724:	00012c08 	.word	0x00012c08
    6728:	20003230 	.word	0x20003230
    672c:	0000ed6d 	.word	0x0000ed6d
    6730:	0000ac6d 	.word	0x0000ac6d
    6734:	20000564 	.word	0x20000564
    6738:	2000039c 	.word	0x2000039c
    673c:	00010b2f 	.word	0x00010b2f
    6740:	00012bf4 	.word	0x00012bf4
    6744:	20000558 	.word	0x20000558
    6748:	20000534 	.word	0x20000534
    674c:	00012bdc 	.word	0x00012bdc
    6750:	000062d5 	.word	0x000062d5
    6754:	00012bd8 	.word	0x00012bd8
    6758:	00012be4 	.word	0x00012be4
    675c:	00012bd4 	.word	0x00012bd4
    6760:	00012be0 	.word	0x00012be0
                      unc_mxconf[tmp], NULL);
    }
  } else {
    /* no multicast */
    /* Context based */
    if(iphc1 & SICSLOWPAN_IPHC_DAC) {
    6764:	464b      	mov	r3, r9
    6766:	075b      	lsls	r3, r3, #29
    6768:	d523      	bpl.n	67b2 <input+0x43a>
      uint8_t dci = (iphc1 & SICSLOWPAN_IPHC_CID) ?
    676a:	466b      	mov	r3, sp
    676c:	2204      	movs	r2, #4
    676e:	569a      	ldrsb	r2, [r3, r2]
    6770:	2300      	movs	r3, #0
    6772:	2a00      	cmp	r2, #0
    6774:	da07      	bge.n	6786 <input+0x40e>
	PACKETBUF_IPHC_BUF[2] & 0x0f : 0;
    6776:	4bb2      	ldr	r3, [pc, #712]	; (6a40 <input+0x6c8>)
    6778:	781b      	ldrb	r3, [r3, #0]
    677a:	4ab2      	ldr	r2, [pc, #712]	; (6a44 <input+0x6cc>)
    677c:	6812      	ldr	r2, [r2, #0]
    677e:	18d3      	adds	r3, r2, r3
    }
  } else {
    /* no multicast */
    /* Context based */
    if(iphc1 & SICSLOWPAN_IPHC_DAC) {
      uint8_t dci = (iphc1 & SICSLOWPAN_IPHC_CID) ?
    6780:	789b      	ldrb	r3, [r3, #2]
    6782:	220f      	movs	r2, #15
    6784:	4013      	ands	r3, r2
{
/* Remove code to avoid warnings and save flash if no context is used */ 
#if SICSLOWPAN_CONF_MAX_ADDR_CONTEXTS > 0
  int i;
  for(i = 0; i < SICSLOWPAN_CONF_MAX_ADDR_CONTEXTS; i++) {
    if((addr_contexts[i].used == 1) &&
    6786:	4ab0      	ldr	r2, [pc, #704]	; (6a48 <input+0x6d0>)
    6788:	7812      	ldrb	r2, [r2, #0]
    678a:	2a01      	cmp	r2, #1
    678c:	d000      	beq.n	6790 <input+0x418>
    678e:	e138      	b.n	6a02 <input+0x68a>
       addr_contexts[i].number == number) {
    6790:	4aad      	ldr	r2, [pc, #692]	; (6a48 <input+0x6d0>)
{
/* Remove code to avoid warnings and save flash if no context is used */ 
#if SICSLOWPAN_CONF_MAX_ADDR_CONTEXTS > 0
  int i;
  for(i = 0; i < SICSLOWPAN_CONF_MAX_ADDR_CONTEXTS; i++) {
    if((addr_contexts[i].used == 1) &&
    6792:	7852      	ldrb	r2, [r2, #1]
    6794:	429a      	cmp	r2, r3
    6796:	d000      	beq.n	679a <input+0x422>
    6798:	e133      	b.n	6a02 <input+0x68a>
    /* no multicast */
    /* Context based */
    if(iphc1 & SICSLOWPAN_IPHC_DAC) {
      uint8_t dci = (iphc1 & SICSLOWPAN_IPHC_CID) ?
	PACKETBUF_IPHC_BUF[2] & 0x0f : 0;
      context = addr_context_lookup_by_number(dci);
    679a:	49ab      	ldr	r1, [pc, #684]	; (6a48 <input+0x6d0>)
    679c:	4bab      	ldr	r3, [pc, #684]	; (6a4c <input+0x6d4>)
    679e:	6019      	str	r1, [r3, #0]
      /* all valid cases below need the context! */
      if(context == NULL) {
	PRINTF("sicslowpan uncompress_hdr: error context not found\n\r");
	return;
      }
      uncompress_addr(&SICSLOWPAN_IP_BUF->destipaddr, context->prefix,
    67a0:	3102      	adds	r1, #2
    67a2:	4bab      	ldr	r3, [pc, #684]	; (6a50 <input+0x6d8>)
    67a4:	5dda      	ldrb	r2, [r3, r7]
    67a6:	48ab      	ldr	r0, [pc, #684]	; (6a54 <input+0x6dc>)
    67a8:	3018      	adds	r0, #24
    67aa:	4bab      	ldr	r3, [pc, #684]	; (6a58 <input+0x6e0>)
    67ac:	4fab      	ldr	r7, [pc, #684]	; (6a5c <input+0x6e4>)
    67ae:	47b8      	blx	r7
    67b0:	e007      	b.n	67c2 <input+0x44a>
                      unc_ctxconf[tmp],
                      (uip_lladdr_t *)packetbuf_addr(PACKETBUF_ADDR_RECEIVER));
    } else {
      /* not context based => link local M = 0, DAC = 0 - same as SAC */
      uncompress_addr(&SICSLOWPAN_IP_BUF->destipaddr, llprefix,
    67b2:	4bab      	ldr	r3, [pc, #684]	; (6a60 <input+0x6e8>)
    67b4:	5dda      	ldrb	r2, [r3, r7]
    67b6:	48a7      	ldr	r0, [pc, #668]	; (6a54 <input+0x6dc>)
    67b8:	3018      	adds	r0, #24
    67ba:	49aa      	ldr	r1, [pc, #680]	; (6a64 <input+0x6ec>)
    67bc:	4ba6      	ldr	r3, [pc, #664]	; (6a58 <input+0x6e0>)
    67be:	4fa7      	ldr	r7, [pc, #668]	; (6a5c <input+0x6e4>)
    67c0:	47b8      	blx	r7
                      unc_llconf[tmp],
                      (uip_lladdr_t *)packetbuf_addr(PACKETBUF_ADDR_RECEIVER));
    }
  }
  uncomp_hdr_len += UIP_IPH_LEN;
    67c2:	4aa9      	ldr	r2, [pc, #676]	; (6a68 <input+0x6f0>)
    67c4:	7813      	ldrb	r3, [r2, #0]
    67c6:	3328      	adds	r3, #40	; 0x28
    67c8:	7013      	strb	r3, [r2, #0]

  /* Next header processing - continued */
  if((iphc0 & SICSLOWPAN_IPHC_NH_C)) {
    67ca:	4653      	mov	r3, sl
    67cc:	2b00      	cmp	r3, #0
    67ce:	d07d      	beq.n	68cc <input+0x554>
    /* The next header is compressed, NHC is following */
    if((*hc06_ptr & SICSLOWPAN_NHC_UDP_MASK) == SICSLOWPAN_NHC_UDP_ID) {
    67d0:	4ba6      	ldr	r3, [pc, #664]	; (6a6c <input+0x6f4>)
    67d2:	681f      	ldr	r7, [r3, #0]
    67d4:	783b      	ldrb	r3, [r7, #0]
    67d6:	2207      	movs	r2, #7
    67d8:	4393      	bics	r3, r2
    67da:	2bf0      	cmp	r3, #240	; 0xf0
    67dc:	d176      	bne.n	68cc <input+0x554>
      uint8_t checksum_compressed;
      SICSLOWPAN_IP_BUF->proto = UIP_PROTO_UDP;
    67de:	320a      	adds	r2, #10
    67e0:	4b9c      	ldr	r3, [pc, #624]	; (6a54 <input+0x6dc>)
    67e2:	719a      	strb	r2, [r3, #6]
      checksum_compressed = *hc06_ptr & SICSLOWPAN_NHC_UDP_CHECKSUMC;
    67e4:	783b      	ldrb	r3, [r7, #0]
    67e6:	3a0d      	subs	r2, #13
    67e8:	401a      	ands	r2, r3
    67ea:	1c15      	adds	r5, r2, #0
      PRINTF("IPHC: Incoming header value: %i\n\r", *hc06_ptr);
      switch(*hc06_ptr & SICSLOWPAN_NHC_UDP_CS_P_11) {
    67ec:	220c      	movs	r2, #12
    67ee:	4393      	bics	r3, r2
    67f0:	b2da      	uxtb	r2, r3
    67f2:	2af1      	cmp	r2, #241	; 0xf1
    67f4:	d01b      	beq.n	682e <input+0x4b6>
    67f6:	d802      	bhi.n	67fe <input+0x486>
    67f8:	2af0      	cmp	r2, #240	; 0xf0
    67fa:	d006      	beq.n	680a <input+0x492>
    67fc:	e09f      	b.n	693e <input+0x5c6>
    67fe:	b2da      	uxtb	r2, r3
    6800:	2af2      	cmp	r2, #242	; 0xf2
    6802:	d02a      	beq.n	685a <input+0x4e2>
    6804:	2af3      	cmp	r2, #243	; 0xf3
    6806:	d03b      	beq.n	6880 <input+0x508>
    6808:	e099      	b.n	693e <input+0x5c6>
      case SICSLOWPAN_NHC_UDP_CS_P_00:
	/* 1 byte for NHC, 4 byte for ports, 2 bytes chksum */
	memcpy(&SICSLOWPAN_UDP_BUF->srcport, hc06_ptr + 1, 2);
    680a:	4b92      	ldr	r3, [pc, #584]	; (6a54 <input+0x6dc>)
    680c:	469a      	mov	sl, r3
    680e:	1c18      	adds	r0, r3, #0
    6810:	3028      	adds	r0, #40	; 0x28
    6812:	1c79      	adds	r1, r7, #1
    6814:	2202      	movs	r2, #2
    6816:	4b96      	ldr	r3, [pc, #600]	; (6a70 <input+0x6f8>)
    6818:	469b      	mov	fp, r3
    681a:	4798      	blx	r3
	memcpy(&SICSLOWPAN_UDP_BUF->destport, hc06_ptr + 3, 2);
    681c:	4650      	mov	r0, sl
    681e:	302a      	adds	r0, #42	; 0x2a
    6820:	1cf9      	adds	r1, r7, #3
    6822:	2202      	movs	r2, #2
    6824:	47d8      	blx	fp
	PRINTF("IPHC: Uncompressed UDP ports (ptr+5): %x, %x\n\r",
	       UIP_HTONS(SICSLOWPAN_UDP_BUF->srcport), UIP_HTONS(SICSLOWPAN_UDP_BUF->destport));
	hc06_ptr += 5;
    6826:	3705      	adds	r7, #5
    6828:	4b90      	ldr	r3, [pc, #576]	; (6a6c <input+0x6f4>)
    682a:	601f      	str	r7, [r3, #0]
    682c:	e03e      	b.n	68ac <input+0x534>
	break;

      case SICSLOWPAN_NHC_UDP_CS_P_01:
        /* 1 byte for NHC + source 16bit inline, dest = 0xF0 + 8 bit inline */
	PRINTF("IPHC: Decompressing destination\n\r");
	memcpy(&SICSLOWPAN_UDP_BUF->srcport, hc06_ptr + 1, 2);
    682e:	4b89      	ldr	r3, [pc, #548]	; (6a54 <input+0x6dc>)
    6830:	469a      	mov	sl, r3
    6832:	1c18      	adds	r0, r3, #0
    6834:	3028      	adds	r0, #40	; 0x28
    6836:	1c79      	adds	r1, r7, #1
    6838:	2202      	movs	r2, #2
    683a:	4b8d      	ldr	r3, [pc, #564]	; (6a70 <input+0x6f8>)
    683c:	4798      	blx	r3
	SICSLOWPAN_UDP_BUF->destport = UIP_HTONS(SICSLOWPAN_UDP_8_BIT_PORT_MIN + (*(hc06_ptr + 3)));
    683e:	78fb      	ldrb	r3, [r7, #3]
    6840:	4a8c      	ldr	r2, [pc, #560]	; (6a74 <input+0x6fc>)
    6842:	4694      	mov	ip, r2
    6844:	4463      	add	r3, ip
    6846:	b29b      	uxth	r3, r3
    6848:	021a      	lsls	r2, r3, #8
    684a:	0a1b      	lsrs	r3, r3, #8
    684c:	4313      	orrs	r3, r2
    684e:	4652      	mov	r2, sl
    6850:	8553      	strh	r3, [r2, #42]	; 0x2a
	PRINTF("IPHC: Uncompressed UDP ports (ptr+4): %x, %x\n\r",
	       UIP_HTONS(SICSLOWPAN_UDP_BUF->srcport), UIP_HTONS(SICSLOWPAN_UDP_BUF->destport));
	hc06_ptr += 4;
    6852:	3704      	adds	r7, #4
    6854:	4b85      	ldr	r3, [pc, #532]	; (6a6c <input+0x6f4>)
    6856:	601f      	str	r7, [r3, #0]
    6858:	e028      	b.n	68ac <input+0x534>
	break;

      case SICSLOWPAN_NHC_UDP_CS_P_10:
        /* 1 byte for NHC + source = 0xF0 + 8bit inline, dest = 16 bit inline*/
	PRINTF("IPHC: Decompressing source\n\r");
	SICSLOWPAN_UDP_BUF->srcport = UIP_HTONS(SICSLOWPAN_UDP_8_BIT_PORT_MIN +
    685a:	787b      	ldrb	r3, [r7, #1]
    685c:	4a85      	ldr	r2, [pc, #532]	; (6a74 <input+0x6fc>)
    685e:	4694      	mov	ip, r2
    6860:	4463      	add	r3, ip
    6862:	b29b      	uxth	r3, r3
    6864:	487b      	ldr	r0, [pc, #492]	; (6a54 <input+0x6dc>)
    6866:	021a      	lsls	r2, r3, #8
    6868:	0a1b      	lsrs	r3, r3, #8
    686a:	4313      	orrs	r3, r2
    686c:	8503      	strh	r3, [r0, #40]	; 0x28
					    (*(hc06_ptr + 1)));
	memcpy(&SICSLOWPAN_UDP_BUF->destport, hc06_ptr + 2, 2);
    686e:	302a      	adds	r0, #42	; 0x2a
    6870:	1cb9      	adds	r1, r7, #2
    6872:	2202      	movs	r2, #2
    6874:	4b7e      	ldr	r3, [pc, #504]	; (6a70 <input+0x6f8>)
    6876:	4798      	blx	r3
	PRINTF("IPHC: Uncompressed UDP ports (ptr+4): %x, %x\n\r",
	       UIP_HTONS(SICSLOWPAN_UDP_BUF->srcport), UIP_HTONS(SICSLOWPAN_UDP_BUF->destport));
	hc06_ptr += 4;
    6878:	3704      	adds	r7, #4
    687a:	4b7c      	ldr	r3, [pc, #496]	; (6a6c <input+0x6f4>)
    687c:	601f      	str	r7, [r3, #0]
    687e:	e015      	b.n	68ac <input+0x534>
	break;

      case SICSLOWPAN_NHC_UDP_CS_P_11:
	/* 1 byte for NHC, 1 byte for ports */
	SICSLOWPAN_UDP_BUF->srcport = UIP_HTONS(SICSLOWPAN_UDP_4_BIT_PORT_MIN +
    6880:	4a74      	ldr	r2, [pc, #464]	; (6a54 <input+0x6dc>)
    6882:	787b      	ldrb	r3, [r7, #1]
    6884:	091b      	lsrs	r3, r3, #4
    6886:	497c      	ldr	r1, [pc, #496]	; (6a78 <input+0x700>)
    6888:	468c      	mov	ip, r1
    688a:	4463      	add	r3, ip
    688c:	b29b      	uxth	r3, r3
    688e:	021b      	lsls	r3, r3, #8
    6890:	21f0      	movs	r1, #240	; 0xf0
    6892:	430b      	orrs	r3, r1
    6894:	8513      	strh	r3, [r2, #40]	; 0x28
					    (*(hc06_ptr + 1) >> 4));
	SICSLOWPAN_UDP_BUF->destport = UIP_HTONS(SICSLOWPAN_UDP_4_BIT_PORT_MIN +
    6896:	787b      	ldrb	r3, [r7, #1]
    6898:	200f      	movs	r0, #15
    689a:	4003      	ands	r3, r0
    689c:	4463      	add	r3, ip
    689e:	b29b      	uxth	r3, r3
    68a0:	021b      	lsls	r3, r3, #8
    68a2:	430b      	orrs	r3, r1
    68a4:	8553      	strh	r3, [r2, #42]	; 0x2a
					     ((*(hc06_ptr + 1)) & 0x0F));
	PRINTF("IPHC: Uncompressed UDP ports (ptr+2): %x, %x\n\r",
	       UIP_HTONS(SICSLOWPAN_UDP_BUF->srcport), UIP_HTONS(SICSLOWPAN_UDP_BUF->destport));
	hc06_ptr += 2;
    68a6:	3702      	adds	r7, #2
    68a8:	4b70      	ldr	r3, [pc, #448]	; (6a6c <input+0x6f4>)
    68aa:	601f      	str	r7, [r3, #0]

      default:
	PRINTF("sicslowpan uncompress_hdr: error unsupported UDP compression\n\r");
	return;
      }
      if(!checksum_compressed) { /* has_checksum, default  */
    68ac:	2d00      	cmp	r5, #0
    68ae:	d109      	bne.n	68c4 <input+0x54c>
	memcpy(&SICSLOWPAN_UDP_BUF->udpchksum, hc06_ptr, 2);
    68b0:	4d6e      	ldr	r5, [pc, #440]	; (6a6c <input+0x6f4>)
    68b2:	682f      	ldr	r7, [r5, #0]
    68b4:	4867      	ldr	r0, [pc, #412]	; (6a54 <input+0x6dc>)
    68b6:	302e      	adds	r0, #46	; 0x2e
    68b8:	1c39      	adds	r1, r7, #0
    68ba:	2202      	movs	r2, #2
    68bc:	4b6c      	ldr	r3, [pc, #432]	; (6a70 <input+0x6f8>)
    68be:	4798      	blx	r3
	hc06_ptr += 2;
    68c0:	3702      	adds	r7, #2
    68c2:	602f      	str	r7, [r5, #0]
	PRINTF("IPHC: sicslowpan uncompress_hdr: checksum included\n\r");
      } else {
	PRINTF("IPHC: sicslowpan uncompress_hdr: checksum *NOT* included\n\r");
      }
      uncomp_hdr_len += UIP_UDPH_LEN;
    68c4:	4a68      	ldr	r2, [pc, #416]	; (6a68 <input+0x6f0>)
    68c6:	7813      	ldrb	r3, [r2, #0]
    68c8:	3308      	adds	r3, #8
    68ca:	7013      	strb	r3, [r2, #0]
      hc06_ptr += SICSLOWPAN_NH_COMPRESSOR.uncompress(hc06_ptr, sicslowpan_buf, &uncomp_hdr_len);
    }
#endif
  }

  packetbuf_hdr_len = hc06_ptr - packetbuf_ptr;
    68cc:	4b67      	ldr	r3, [pc, #412]	; (6a6c <input+0x6f4>)
    68ce:	681b      	ldr	r3, [r3, #0]
    68d0:	4a5c      	ldr	r2, [pc, #368]	; (6a44 <input+0x6cc>)
    68d2:	6812      	ldr	r2, [r2, #0]
    68d4:	1a9b      	subs	r3, r3, r2
    68d6:	4a5a      	ldr	r2, [pc, #360]	; (6a40 <input+0x6c8>)
    68d8:	7013      	strb	r3, [r2, #0]
  
  /* IP length field. */
  if(ip_len == 0) {
    68da:	2c00      	cmp	r4, #0
    68dc:	d10d      	bne.n	68fa <input+0x582>
    int len = packetbuf_datalen() - packetbuf_hdr_len + uncomp_hdr_len - UIP_IPH_LEN;
    68de:	4b67      	ldr	r3, [pc, #412]	; (6a7c <input+0x704>)
    68e0:	4798      	blx	r3
    68e2:	4b57      	ldr	r3, [pc, #348]	; (6a40 <input+0x6c8>)
    68e4:	781b      	ldrb	r3, [r3, #0]
    68e6:	1ac0      	subs	r0, r0, r3
    68e8:	4b5f      	ldr	r3, [pc, #380]	; (6a68 <input+0x6f0>)
    68ea:	781b      	ldrb	r3, [r3, #0]
    68ec:	18c3      	adds	r3, r0, r3
    68ee:	3b28      	subs	r3, #40	; 0x28
    /* This is not a fragmented packet */
    SICSLOWPAN_IP_BUF->len[0] = len >> 8;
    68f0:	4a58      	ldr	r2, [pc, #352]	; (6a54 <input+0x6dc>)
    68f2:	1219      	asrs	r1, r3, #8
    68f4:	7111      	strb	r1, [r2, #4]
    SICSLOWPAN_IP_BUF->len[1] = len & 0x00FF;
    68f6:	7153      	strb	r3, [r2, #5]
    68f8:	e007      	b.n	690a <input+0x592>
  } else {
    /* This is a 1st fragment */
    SICSLOWPAN_IP_BUF->len[0] = (ip_len - UIP_IPH_LEN) >> 8;
    68fa:	4a56      	ldr	r2, [pc, #344]	; (6a54 <input+0x6dc>)
    68fc:	1c23      	adds	r3, r4, #0
    68fe:	3b28      	subs	r3, #40	; 0x28
    6900:	121b      	asrs	r3, r3, #8
    6902:	7113      	strb	r3, [r2, #4]
    SICSLOWPAN_IP_BUF->len[1] = (ip_len - UIP_IPH_LEN) & 0x00FF;
    6904:	1c23      	adds	r3, r4, #0
    6906:	3b28      	subs	r3, #40	; 0x28
    6908:	7153      	strb	r3, [r2, #5]
  }
  
  /* length field in UDP header */
  if(SICSLOWPAN_IP_BUF->proto == UIP_PROTO_UDP) {
    690a:	4b52      	ldr	r3, [pc, #328]	; (6a54 <input+0x6dc>)
    690c:	799b      	ldrb	r3, [r3, #6]
    690e:	2b11      	cmp	r3, #17
    6910:	d115      	bne.n	693e <input+0x5c6>
    memcpy(&SICSLOWPAN_UDP_BUF->udplen, &SICSLOWPAN_IP_BUF->len[0], 2);
    6912:	4b50      	ldr	r3, [pc, #320]	; (6a54 <input+0x6dc>)
    6914:	889a      	ldrh	r2, [r3, #4]
    6916:	859a      	strh	r2, [r3, #44]	; 0x2c
    6918:	e011      	b.n	693e <input+0x5c6>
  if((PACKETBUF_HC1_PTR[PACKETBUF_HC1_DISPATCH] & 0xe0) == SICSLOWPAN_DISPATCH_IPHC) {
    PRINTFI("sicslowpan input: IPHC\n\r");
    uncompress_hdr_hc06(frag_size);
  } else
#endif /* SICSLOWPAN_COMPRESSION == SICSLOWPAN_COMPRESSION_HC06 */
    switch(PACKETBUF_HC1_PTR[PACKETBUF_HC1_DISPATCH]) {
    691a:	2f41      	cmp	r7, #65	; 0x41
    691c:	d000      	beq.n	6920 <input+0x5a8>
    691e:	e087      	b.n	6a30 <input+0x6b8>
      uncompress_hdr_hc1(frag_size);
      break;
#endif /* SICSLOWPAN_COMPRESSION == SICSLOWPAN_COMPRESSION_HC1 */
    case SICSLOWPAN_DISPATCH_IPV6:
      PRINTFI("sicslowpan input: IPV6\n\r");
      packetbuf_hdr_len += SICSLOWPAN_IPV6_HDR_LEN;
    6920:	1c69      	adds	r1, r5, #1

      /* Put uncompressed IP header in sicslowpan_buf. */
      memcpy(SICSLOWPAN_IP_BUF, packetbuf_ptr + packetbuf_hdr_len, UIP_IPH_LEN);
    6922:	b2c9      	uxtb	r1, r1
    6924:	1859      	adds	r1, r3, r1
    6926:	484b      	ldr	r0, [pc, #300]	; (6a54 <input+0x6dc>)
    6928:	2228      	movs	r2, #40	; 0x28
    692a:	4b51      	ldr	r3, [pc, #324]	; (6a70 <input+0x6f8>)
    692c:	4798      	blx	r3

      /* Update uncomp_hdr_len and packetbuf_hdr_len. */
      packetbuf_hdr_len += UIP_IPH_LEN;
    692e:	1c2b      	adds	r3, r5, #0
    6930:	3329      	adds	r3, #41	; 0x29
    6932:	4a43      	ldr	r2, [pc, #268]	; (6a40 <input+0x6c8>)
    6934:	7013      	strb	r3, [r2, #0]
      uncomp_hdr_len += UIP_IPH_LEN;
    6936:	4a4c      	ldr	r2, [pc, #304]	; (6a68 <input+0x6f0>)
    6938:	7813      	ldrb	r3, [r2, #0]
    693a:	3328      	adds	r3, #40	; 0x28
    693c:	7013      	strb	r3, [r2, #0]
   * if this is a first fragment or not fragmented packet,
   * we have already copied the compressed headers, uncomp_hdr_len
   * and packetbuf_hdr_len are non 0, frag_offset is.
   * If this is a subsequent fragment, this is the contrary.
   */
  if(packetbuf_datalen() < packetbuf_hdr_len) {
    693e:	4b4f      	ldr	r3, [pc, #316]	; (6a7c <input+0x704>)
    6940:	4798      	blx	r3
    6942:	4b3f      	ldr	r3, [pc, #252]	; (6a40 <input+0x6c8>)
    6944:	781b      	ldrb	r3, [r3, #0]
    6946:	4283      	cmp	r3, r0
    6948:	d904      	bls.n	6954 <input+0x5dc>
    PRINTF("SICSLOWPAN: packet dropped due to header > total packet\n\r");
    RIMESTATS_ADD(sicslowpandrops);
    694a:	4a4d      	ldr	r2, [pc, #308]	; (6a80 <input+0x708>)
    694c:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
    694e:	3301      	adds	r3, #1
    6950:	64d3      	str	r3, [r2, #76]	; 0x4c
    return;
    6952:	e06d      	b.n	6a30 <input+0x6b8>
  }
  packetbuf_payload_len = packetbuf_datalen() - packetbuf_hdr_len;
    6954:	4b49      	ldr	r3, [pc, #292]	; (6a7c <input+0x704>)
    6956:	4798      	blx	r3
    6958:	4b39      	ldr	r3, [pc, #228]	; (6a40 <input+0x6c8>)
    695a:	781b      	ldrb	r3, [r3, #0]
    695c:	1ac7      	subs	r7, r0, r3
    695e:	4a49      	ldr	r2, [pc, #292]	; (6a84 <input+0x70c>)
    6960:	6017      	str	r7, [r2, #0]
          RIMESTATS_ADD(sicslowpandrops);
      return;
    }
  }

  memcpy((uint8_t *)SICSLOWPAN_IP_BUF + uncomp_hdr_len + (uint16_t)(frag_offset << 3), packetbuf_ptr + packetbuf_hdr_len, packetbuf_payload_len);
    6962:	4a41      	ldr	r2, [pc, #260]	; (6a68 <input+0x6f0>)
    6964:	7812      	ldrb	r2, [r2, #0]
    6966:	4691      	mov	r9, r2
    6968:	00f6      	lsls	r6, r6, #3
    696a:	444e      	add	r6, r9
    696c:	4839      	ldr	r0, [pc, #228]	; (6a54 <input+0x6dc>)
    696e:	1980      	adds	r0, r0, r6
    6970:	4a34      	ldr	r2, [pc, #208]	; (6a44 <input+0x6cc>)
    6972:	6811      	ldr	r1, [r2, #0]
    6974:	18c9      	adds	r1, r1, r3
    6976:	1c3a      	adds	r2, r7, #0
    6978:	4b3d      	ldr	r3, [pc, #244]	; (6a70 <input+0x6f8>)
    697a:	4798      	blx	r3
  
  /* update processed_ip_in_len if fragment, sicslowpan_len otherwise */

#if SICSLOWPAN_CONF_FRAG
  if(frag_size > 0) {
    697c:	2c00      	cmp	r4, #0
    697e:	d011      	beq.n	69a4 <input+0x62c>
    /* Add the size of the header only for the first fragment. */
    if(first_fragment != 0) {
    6980:	4643      	mov	r3, r8
    6982:	2b00      	cmp	r3, #0
    6984:	d003      	beq.n	698e <input+0x616>
      processed_ip_in_len += uncomp_hdr_len;
    6986:	4a40      	ldr	r2, [pc, #256]	; (6a88 <input+0x710>)
    6988:	8813      	ldrh	r3, [r2, #0]
    698a:	444b      	add	r3, r9
    698c:	8013      	strh	r3, [r2, #0]
    }
    /* For the last fragment, we are OK if there is extrenous bytes at
       the end of the packet. */
    if(last_fragment != 0) {
    698e:	9b00      	ldr	r3, [sp, #0]
    6990:	2b00      	cmp	r3, #0
    6992:	d002      	beq.n	699a <input+0x622>
      processed_ip_in_len = frag_size;
    6994:	4b3c      	ldr	r3, [pc, #240]	; (6a88 <input+0x710>)
    6996:	801c      	strh	r4, [r3, #0]
    6998:	e00b      	b.n	69b2 <input+0x63a>
    } else {
      processed_ip_in_len += packetbuf_payload_len;
    699a:	4a3b      	ldr	r2, [pc, #236]	; (6a88 <input+0x710>)
    699c:	8813      	ldrh	r3, [r2, #0]
    699e:	18ff      	adds	r7, r7, r3
    69a0:	8017      	strh	r7, [r2, #0]
    69a2:	e002      	b.n	69aa <input+0x632>
    }
    PRINTF("processed_ip_in_len %d, packetbuf_payload_len %d\n\r", processed_ip_in_len, packetbuf_payload_len);

  } else {
#endif /* SICSLOWPAN_CONF_FRAG */
    sicslowpan_len = packetbuf_payload_len + uncomp_hdr_len;
    69a4:	444f      	add	r7, r9
    69a6:	4b39      	ldr	r3, [pc, #228]	; (6a8c <input+0x714>)
    69a8:	801f      	strh	r7, [r3, #0]
   * If we have a full IP packet in sicslowpan_buf, deliver it to
   * the IP stack
   */
  PRINTF("sicslowpan_init processed_ip_in_len %d, sicslowpan_len %d\n\r",
         processed_ip_in_len, sicslowpan_len);
  if(processed_ip_in_len == 0 || (processed_ip_in_len == sicslowpan_len)) {
    69aa:	4b37      	ldr	r3, [pc, #220]	; (6a88 <input+0x710>)
    69ac:	881c      	ldrh	r4, [r3, #0]
    69ae:	2c00      	cmp	r4, #0
    69b0:	d003      	beq.n	69ba <input+0x642>
    69b2:	4b36      	ldr	r3, [pc, #216]	; (6a8c <input+0x714>)
    69b4:	881b      	ldrh	r3, [r3, #0]
    69b6:	42a3      	cmp	r3, r4
    69b8:	d13a      	bne.n	6a30 <input+0x6b8>
    PRINTFI("sicslowpan input: IP packet ready (length %d)\n\r",
           sicslowpan_len);
    memcpy((uint8_t *)UIP_IP_BUF, (uint8_t *)SICSLOWPAN_IP_BUF, sicslowpan_len);
    69ba:	4c34      	ldr	r4, [pc, #208]	; (6a8c <input+0x714>)
    69bc:	8825      	ldrh	r5, [r4, #0]
    69be:	4834      	ldr	r0, [pc, #208]	; (6a90 <input+0x718>)
    69c0:	4924      	ldr	r1, [pc, #144]	; (6a54 <input+0x6dc>)
    69c2:	1c2a      	adds	r2, r5, #0
    69c4:	4b2a      	ldr	r3, [pc, #168]	; (6a70 <input+0x6f8>)
    69c6:	4798      	blx	r3
    uip_len = sicslowpan_len;
    69c8:	4b32      	ldr	r3, [pc, #200]	; (6a94 <input+0x71c>)
    69ca:	801d      	strh	r5, [r3, #0]
    sicslowpan_len = 0;
    69cc:	2300      	movs	r3, #0
    69ce:	8023      	strh	r3, [r4, #0]
    processed_ip_in_len = 0;
    69d0:	4a2d      	ldr	r2, [pc, #180]	; (6a88 <input+0x710>)
    69d2:	8013      	strh	r3, [r2, #0]
      PRINTF("\n\r");
    }
#endif

    /* if callback is set then set attributes and call */
    if(callback) {
    69d4:	4b30      	ldr	r3, [pc, #192]	; (6a98 <input+0x720>)
    69d6:	681c      	ldr	r4, [r3, #0]
    69d8:	2c00      	cmp	r4, #0
    69da:	d003      	beq.n	69e4 <input+0x66c>
      set_packet_attrs();
    69dc:	4b2f      	ldr	r3, [pc, #188]	; (6a9c <input+0x724>)
    69de:	4798      	blx	r3
      callback->input_callback();
    69e0:	6863      	ldr	r3, [r4, #4]
    69e2:	4798      	blx	r3
    }

    tcpip_input();
    69e4:	4b2e      	ldr	r3, [pc, #184]	; (6aa0 <input+0x728>)
    69e6:	4798      	blx	r3
    69e8:	e022      	b.n	6a30 <input+0x6b8>
  } else {
    /*
     * reassembly is off
     * start it if we received a fragment
     */
    if((frag_size > 0) && (frag_size <= UIP_BUFSIZE)) {
    69ea:	1e63      	subs	r3, r4, #1
    69ec:	b29b      	uxth	r3, r3
    69ee:	2290      	movs	r2, #144	; 0x90
    69f0:	32ff      	adds	r2, #255	; 0xff
    69f2:	4293      	cmp	r3, r2
    69f4:	d800      	bhi.n	69f8 <input+0x680>
    69f6:	e56b      	b.n	64d0 <input+0x158>
    69f8:	e581      	b.n	64fe <input+0x186>
    uint8_t sci = (iphc1 & SICSLOWPAN_IPHC_CID) ?
      PACKETBUF_IPHC_BUF[2] >> 4 : 0;

    /* Source address - check context != NULL only if SAM bits are != 0*/
    if (tmp != 0) {
      context = addr_context_lookup_by_number(sci);
    69fa:	2200      	movs	r2, #0
    69fc:	4b13      	ldr	r3, [pc, #76]	; (6a4c <input+0x6d4>)
    69fe:	601a      	str	r2, [r3, #0]
    6a00:	e79d      	b.n	693e <input+0x5c6>
    /* no multicast */
    /* Context based */
    if(iphc1 & SICSLOWPAN_IPHC_DAC) {
      uint8_t dci = (iphc1 & SICSLOWPAN_IPHC_CID) ?
	PACKETBUF_IPHC_BUF[2] & 0x0f : 0;
      context = addr_context_lookup_by_number(dci);
    6a02:	2200      	movs	r2, #0
    6a04:	4b11      	ldr	r3, [pc, #68]	; (6a4c <input+0x6d4>)
    6a06:	601a      	str	r2, [r3, #0]
    6a08:	e799      	b.n	693e <input+0x5c6>
  } else {
    /*
     * reassembly is off
     * start it if we received a fragment
     */
    if((frag_size > 0) && (frag_size <= UIP_BUFSIZE)) {
    6a0a:	1e63      	subs	r3, r4, #1
    6a0c:	b29b      	uxth	r3, r3
    6a0e:	2290      	movs	r2, #144	; 0x90
    6a10:	32ff      	adds	r2, #255	; 0xff
    6a12:	4293      	cmp	r3, r2
    6a14:	d800      	bhi.n	6a18 <input+0x6a0>
    6a16:	e561      	b.n	64dc <input+0x164>
  uint8_t frag_offset = 0;
  uint8_t is_fragment = 0;
#if SICSLOWPAN_CONF_FRAG
  /* tag of the fragment */
  uint16_t frag_tag = 0;
  uint8_t first_fragment = 0, last_fragment = 0;
    6a18:	2300      	movs	r3, #0
    6a1a:	9300      	str	r3, [sp, #0]
      frag_tag = GET16(PACKETBUF_FRAG_PTR, PACKETBUF_FRAG_TAG);
      PRINTFI("size %d, tag %d, offset %d)\n\r",
             frag_size, frag_tag, frag_offset);
      packetbuf_hdr_len += SICSLOWPAN_FRAG1_HDR_LEN;
      /*      printf("frag1 %d %d\n\r", reass_tag, frag_tag);*/
      first_fragment = 1;
    6a1c:	3a8f      	subs	r2, #143	; 0x8f
    6a1e:	3aff      	subs	r2, #255	; 0xff
    6a20:	4690      	mov	r8, r2
   * we look for is the fragmentation header
   */
  switch((GET16(PACKETBUF_FRAG_PTR, PACKETBUF_FRAG_DISPATCH_SIZE) & 0xf800) >> 8) {
    case SICSLOWPAN_DISPATCH_FRAG1:
      PRINTFI("sicslowpan input: FRAG1 ");
      frag_offset = 0;
    6a22:	1c1e      	adds	r6, r3, #0
    6a24:	e56b      	b.n	64fe <input+0x186>
        PRINTF("sicslowpan uncompress_hdr: error context not found\n\r");
        return;
      }
    }
    /* if tmp == 0 we do not have a context and therefore no prefix */
    uncompress_addr(&SICSLOWPAN_IP_BUF->srcipaddr,
    6a26:	2100      	movs	r1, #0
  if(iphc1 & SICSLOWPAN_IPHC_SAC) {
    uint8_t sci = (iphc1 & SICSLOWPAN_IPHC_CID) ?
      PACKETBUF_IPHC_BUF[2] >> 4 : 0;

    /* Source address - check context != NULL only if SAM bits are != 0*/
    if (tmp != 0) {
    6a28:	2b00      	cmp	r3, #0
    6a2a:	d100      	bne.n	6a2e <input+0x6b6>
    6a2c:	e626      	b.n	667c <input+0x304>
    6a2e:	e614      	b.n	665a <input+0x2e2>

    tcpip_input();
#if SICSLOWPAN_CONF_FRAG
  }
#endif /* SICSLOWPAN_CONF_FRAG */
}
    6a30:	b005      	add	sp, #20
    6a32:	bc3c      	pop	{r2, r3, r4, r5}
    6a34:	4690      	mov	r8, r2
    6a36:	4699      	mov	r9, r3
    6a38:	46a2      	mov	sl, r4
    6a3a:	46ab      	mov	fp, r5
    6a3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6a3e:	46c0      	nop			; (mov r8, r8)
    6a40:	20000550 	.word	0x20000550
    6a44:	20000554 	.word	0x20000554
    6a48:	20000558 	.word	0x20000558
    6a4c:	20000534 	.word	0x20000534
    6a50:	00012bdc 	.word	0x00012bdc
    6a54:	2000039c 	.word	0x2000039c
    6a58:	200031e0 	.word	0x200031e0
    6a5c:	000062d5 	.word	0x000062d5
    6a60:	00012bd8 	.word	0x00012bd8
    6a64:	00012be4 	.word	0x00012be4
    6a68:	20000548 	.word	0x20000548
    6a6c:	20000564 	.word	0x20000564
    6a70:	00010b2f 	.word	0x00010b2f
    6a74:	fffff000 	.word	0xfffff000
    6a78:	fffff0b0 	.word	0xfffff0b0
    6a7c:	0000bf11 	.word	0x0000bf11
    6a80:	20003230 	.word	0x20003230
    6a84:	20000544 	.word	0x20000544
    6a88:	2000039a 	.word	0x2000039a
    6a8c:	20000530 	.word	0x20000530
    6a90:	20002cd4 	.word	0x20002cd4
    6a94:	20002cc0 	.word	0x20002cc0
    6a98:	2000052c 	.word	0x2000052c
    6a9c:	000059a5 	.word	0x000059a5
    6aa0:	0000a60d 	.word	0x0000a60d

00006aa4 <sicslowpan_get_last_rssi>:
}
/*--------------------------------------------------------------------*/
int
sicslowpan_get_last_rssi(void)
{
  return last_rssi;
    6aa4:	4b01      	ldr	r3, [pc, #4]	; (6aac <sicslowpan_get_last_rssi+0x8>)
    6aa6:	6818      	ldr	r0, [r3, #0]
}
    6aa8:	4770      	bx	lr
    6aaa:	46c0      	nop			; (mov r8, r8)
    6aac:	2000054c 	.word	0x2000054c

00006ab0 <uip_ds6_nbr_rm>:
}

/*---------------------------------------------------------------------------*/
void
uip_ds6_nbr_rm(uip_ds6_nbr_t *nbr)
{
    6ab0:	b510      	push	{r4, lr}
  if(nbr != NULL) {
    6ab2:	2800      	cmp	r0, #0
    6ab4:	d007      	beq.n	6ac6 <uip_ds6_nbr_rm+0x16>
    6ab6:	1c04      	adds	r4, r0, #0
#if UIP_CONF_IPV6_QUEUE_PKT
    uip_packetqueue_free(&nbr->packethandle);
#endif /* UIP_CONF_IPV6_QUEUE_PKT */
    NEIGHBOR_STATE_CHANGED(nbr);
    6ab8:	4b03      	ldr	r3, [pc, #12]	; (6ac8 <uip_ds6_nbr_rm+0x18>)
    6aba:	4798      	blx	r3
    nbr_table_remove(ds6_neighbors, nbr);
    6abc:	4b03      	ldr	r3, [pc, #12]	; (6acc <uip_ds6_nbr_rm+0x1c>)
    6abe:	6818      	ldr	r0, [r3, #0]
    6ac0:	1c21      	adds	r1, r4, #0
    6ac2:	4b03      	ldr	r3, [pc, #12]	; (6ad0 <uip_ds6_nbr_rm+0x20>)
    6ac4:	4798      	blx	r3
  }
  return;
}
    6ac6:	bd10      	pop	{r4, pc}
    6ac8:	0000e4ad 	.word	0x0000e4ad
    6acc:	2000002c 	.word	0x2000002c
    6ad0:	0000bd55 	.word	0x0000bd55

00006ad4 <uip_ds6_neighbors_init>:
NBR_TABLE_GLOBAL(uip_ds6_nbr_t, ds6_neighbors);

/*---------------------------------------------------------------------------*/
void
uip_ds6_neighbors_init(void)
{
    6ad4:	b508      	push	{r3, lr}
  nbr_table_register(ds6_neighbors, (nbr_table_callback *)uip_ds6_nbr_rm);
    6ad6:	4b03      	ldr	r3, [pc, #12]	; (6ae4 <uip_ds6_neighbors_init+0x10>)
    6ad8:	6818      	ldr	r0, [r3, #0]
    6ada:	4903      	ldr	r1, [pc, #12]	; (6ae8 <uip_ds6_neighbors_init+0x14>)
    6adc:	4b03      	ldr	r3, [pc, #12]	; (6aec <uip_ds6_neighbors_init+0x18>)
    6ade:	4798      	blx	r3
}
    6ae0:	bd08      	pop	{r3, pc}
    6ae2:	46c0      	nop			; (mov r8, r8)
    6ae4:	2000002c 	.word	0x2000002c
    6ae8:	00006ab1 	.word	0x00006ab1
    6aec:	0000baa9 	.word	0x0000baa9

00006af0 <uip_ds6_nbr_add>:
/*---------------------------------------------------------------------------*/
uip_ds6_nbr_t *
uip_ds6_nbr_add(const uip_ipaddr_t *ipaddr, const uip_lladdr_t *lladdr,
                uint8_t isrouter, uint8_t state)
{
    6af0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6af2:	1c05      	adds	r5, r0, #0
    6af4:	1c17      	adds	r7, r2, #0
    6af6:	1c1e      	adds	r6, r3, #0
  uip_ds6_nbr_t *nbr = nbr_table_add_lladdr(ds6_neighbors, (linkaddr_t*)lladdr);
    6af8:	4b0f      	ldr	r3, [pc, #60]	; (6b38 <uip_ds6_nbr_add+0x48>)
    6afa:	6818      	ldr	r0, [r3, #0]
    6afc:	4b0f      	ldr	r3, [pc, #60]	; (6b3c <uip_ds6_nbr_add+0x4c>)
    6afe:	4798      	blx	r3
    6b00:	1e04      	subs	r4, r0, #0
  if(nbr) {
    6b02:	d016      	beq.n	6b32 <uip_ds6_nbr_add+0x42>
    uip_ipaddr_copy(&nbr->ipaddr, ipaddr);
    6b04:	1c29      	adds	r1, r5, #0
    6b06:	2210      	movs	r2, #16
    6b08:	4b0d      	ldr	r3, [pc, #52]	; (6b40 <uip_ds6_nbr_add+0x50>)
    6b0a:	4798      	blx	r3
    nbr->isrouter = isrouter;
    6b0c:	2321      	movs	r3, #33	; 0x21
    6b0e:	54e7      	strb	r7, [r4, r3]
    nbr->state = state;
    6b10:	3301      	adds	r3, #1
    6b12:	54e6      	strb	r6, [r4, r3]
  #if UIP_CONF_IPV6_QUEUE_PKT
    uip_packetqueue_new(&nbr->packethandle);
  #endif /* UIP_CONF_IPV6_QUEUE_PKT */
    /* timers are set separately, for now we put them in expired state */
    stimer_set(&nbr->reachable, 0);
    6b14:	1c20      	adds	r0, r4, #0
    6b16:	3010      	adds	r0, #16
    6b18:	2100      	movs	r1, #0
    6b1a:	4d0a      	ldr	r5, [pc, #40]	; (6b44 <uip_ds6_nbr_add+0x54>)
    6b1c:	47a8      	blx	r5
    stimer_set(&nbr->sendns, 0);
    6b1e:	1c20      	adds	r0, r4, #0
    6b20:	3018      	adds	r0, #24
    6b22:	2100      	movs	r1, #0
    6b24:	47a8      	blx	r5
    nbr->nscount = 0;
    6b26:	2200      	movs	r2, #0
    6b28:	2320      	movs	r3, #32
    6b2a:	54e2      	strb	r2, [r4, r3]
    PRINTF("Adding neighbor with ip addr ");
    PRINT6ADDR(ipaddr);
    PRINTF(" link addr ");
    PRINTLLADDR(lladdr);
    PRINTF(" state %u\n\r", state);
    NEIGHBOR_STATE_CHANGED(nbr);
    6b2c:	1c20      	adds	r0, r4, #0
    6b2e:	4b06      	ldr	r3, [pc, #24]	; (6b48 <uip_ds6_nbr_add+0x58>)
    6b30:	4798      	blx	r3
    PRINTF(" link addr (%p) ", lladdr);
    PRINTLLADDR(lladdr);
    PRINTF(" state %u\n\r", state);
    return NULL;
  }
}
    6b32:	1c20      	adds	r0, r4, #0
    6b34:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    6b36:	46c0      	nop			; (mov r8, r8)
    6b38:	2000002c 	.word	0x2000002c
    6b3c:	0000bb91 	.word	0x0000bb91
    6b40:	00010b2f 	.word	0x00010b2f
    6b44:	0000ed0d 	.word	0x0000ed0d
    6b48:	0000e4ad 	.word	0x0000e4ad

00006b4c <uip_ds6_nbr_get_ll>:
}

/*---------------------------------------------------------------------------*/
const uip_lladdr_t *
uip_ds6_nbr_get_ll(const uip_ds6_nbr_t *nbr)
{
    6b4c:	b508      	push	{r3, lr}
    6b4e:	1c01      	adds	r1, r0, #0
  return (const uip_lladdr_t *)nbr_table_get_lladdr(ds6_neighbors, nbr);
    6b50:	4b02      	ldr	r3, [pc, #8]	; (6b5c <uip_ds6_nbr_get_ll+0x10>)
    6b52:	6818      	ldr	r0, [r3, #0]
    6b54:	4b02      	ldr	r3, [pc, #8]	; (6b60 <uip_ds6_nbr_get_ll+0x14>)
    6b56:	4798      	blx	r3
}
    6b58:	bd08      	pop	{r3, pc}
    6b5a:	46c0      	nop			; (mov r8, r8)
    6b5c:	2000002c 	.word	0x2000002c
    6b60:	0000bdbd 	.word	0x0000bdbd

00006b64 <uip_ds6_nbr_lookup>:
  return num;
}
/*---------------------------------------------------------------------------*/
uip_ds6_nbr_t *
uip_ds6_nbr_lookup(const uip_ipaddr_t *ipaddr)
{
    6b64:	b5f0      	push	{r4, r5, r6, r7, lr}
    6b66:	b083      	sub	sp, #12
    6b68:	1c05      	adds	r5, r0, #0
    6b6a:	9001      	str	r0, [sp, #4]
  uip_ds6_nbr_t *nbr = nbr_table_head(ds6_neighbors);
    6b6c:	4b0f      	ldr	r3, [pc, #60]	; (6bac <uip_ds6_nbr_lookup+0x48>)
    6b6e:	6818      	ldr	r0, [r3, #0]
    6b70:	4b0f      	ldr	r3, [pc, #60]	; (6bb0 <uip_ds6_nbr_lookup+0x4c>)
    6b72:	4798      	blx	r3
    6b74:	1c04      	adds	r4, r0, #0
  if(ipaddr != NULL) {
    6b76:	2d00      	cmp	r5, #0
    6b78:	d011      	beq.n	6b9e <uip_ds6_nbr_lookup+0x3a>
    while(nbr != NULL) {
    6b7a:	2800      	cmp	r0, #0
    6b7c:	d011      	beq.n	6ba2 <uip_ds6_nbr_lookup+0x3e>
      if(uip_ipaddr_cmp(&nbr->ipaddr, ipaddr)) {
    6b7e:	4e0d      	ldr	r6, [pc, #52]	; (6bb4 <uip_ds6_nbr_lookup+0x50>)
        return nbr;
      }
      nbr = nbr_table_next(ds6_neighbors, nbr);
    6b80:	4d0a      	ldr	r5, [pc, #40]	; (6bac <uip_ds6_nbr_lookup+0x48>)
    6b82:	4f0d      	ldr	r7, [pc, #52]	; (6bb8 <uip_ds6_nbr_lookup+0x54>)
uip_ds6_nbr_lookup(const uip_ipaddr_t *ipaddr)
{
  uip_ds6_nbr_t *nbr = nbr_table_head(ds6_neighbors);
  if(ipaddr != NULL) {
    while(nbr != NULL) {
      if(uip_ipaddr_cmp(&nbr->ipaddr, ipaddr)) {
    6b84:	1c20      	adds	r0, r4, #0
    6b86:	9901      	ldr	r1, [sp, #4]
    6b88:	2210      	movs	r2, #16
    6b8a:	47b0      	blx	r6
    6b8c:	2800      	cmp	r0, #0
    6b8e:	d00a      	beq.n	6ba6 <uip_ds6_nbr_lookup+0x42>
        return nbr;
      }
      nbr = nbr_table_next(ds6_neighbors, nbr);
    6b90:	6828      	ldr	r0, [r5, #0]
    6b92:	1c21      	adds	r1, r4, #0
    6b94:	47b8      	blx	r7
    6b96:	1e04      	subs	r4, r0, #0
uip_ds6_nbr_t *
uip_ds6_nbr_lookup(const uip_ipaddr_t *ipaddr)
{
  uip_ds6_nbr_t *nbr = nbr_table_head(ds6_neighbors);
  if(ipaddr != NULL) {
    while(nbr != NULL) {
    6b98:	d1f4      	bne.n	6b84 <uip_ds6_nbr_lookup+0x20>
        return nbr;
      }
      nbr = nbr_table_next(ds6_neighbors, nbr);
    }
  }
  return NULL;
    6b9a:	2000      	movs	r0, #0
    6b9c:	e004      	b.n	6ba8 <uip_ds6_nbr_lookup+0x44>
    6b9e:	2000      	movs	r0, #0
    6ba0:	e002      	b.n	6ba8 <uip_ds6_nbr_lookup+0x44>
    6ba2:	2000      	movs	r0, #0
    6ba4:	e000      	b.n	6ba8 <uip_ds6_nbr_lookup+0x44>
    6ba6:	1c20      	adds	r0, r4, #0
}
    6ba8:	b003      	add	sp, #12
    6baa:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6bac:	2000002c 	.word	0x2000002c
    6bb0:	0000bb41 	.word	0x0000bb41
    6bb4:	00010b11 	.word	0x00010b11
    6bb8:	0000bad5 	.word	0x0000bad5

00006bbc <uip_ds6_nbr_ll_lookup>:
/*---------------------------------------------------------------------------*/
uip_ds6_nbr_t *
uip_ds6_nbr_ll_lookup(const uip_lladdr_t *lladdr)
{
    6bbc:	b508      	push	{r3, lr}
    6bbe:	1c01      	adds	r1, r0, #0
  return nbr_table_get_from_lladdr(ds6_neighbors, (linkaddr_t*)lladdr);
    6bc0:	4b02      	ldr	r3, [pc, #8]	; (6bcc <uip_ds6_nbr_ll_lookup+0x10>)
    6bc2:	6818      	ldr	r0, [r3, #0]
    6bc4:	4b02      	ldr	r3, [pc, #8]	; (6bd0 <uip_ds6_nbr_ll_lookup+0x14>)
    6bc6:	4798      	blx	r3
}
    6bc8:	bd08      	pop	{r3, pc}
    6bca:	46c0      	nop			; (mov r8, r8)
    6bcc:	2000002c 	.word	0x2000002c
    6bd0:	0000bd19 	.word	0x0000bd19

00006bd4 <uip_ds6_nbr_ipaddr_from_lladdr>:

/*---------------------------------------------------------------------------*/
uip_ipaddr_t *
uip_ds6_nbr_ipaddr_from_lladdr(const uip_lladdr_t *lladdr)
{
    6bd4:	b508      	push	{r3, lr}
  uip_ds6_nbr_t *nbr = uip_ds6_nbr_ll_lookup(lladdr);
    6bd6:	4b01      	ldr	r3, [pc, #4]	; (6bdc <uip_ds6_nbr_ipaddr_from_lladdr+0x8>)
    6bd8:	4798      	blx	r3
  return nbr ? &nbr->ipaddr : NULL;
}
    6bda:	bd08      	pop	{r3, pc}
    6bdc:	00006bbd 	.word	0x00006bbd

00006be0 <uip_ds6_nbr_lladdr_from_ipaddr>:

/*---------------------------------------------------------------------------*/
const uip_lladdr_t *
uip_ds6_nbr_lladdr_from_ipaddr(const uip_ipaddr_t *ipaddr)
{
    6be0:	b508      	push	{r3, lr}
  uip_ds6_nbr_t *nbr = uip_ds6_nbr_lookup(ipaddr);
    6be2:	4b04      	ldr	r3, [pc, #16]	; (6bf4 <uip_ds6_nbr_lladdr_from_ipaddr+0x14>)
    6be4:	4798      	blx	r3
  return nbr ? uip_ds6_nbr_get_ll(nbr) : NULL;
    6be6:	2800      	cmp	r0, #0
    6be8:	d002      	beq.n	6bf0 <uip_ds6_nbr_lladdr_from_ipaddr+0x10>
    6bea:	4b03      	ldr	r3, [pc, #12]	; (6bf8 <uip_ds6_nbr_lladdr_from_ipaddr+0x18>)
    6bec:	4798      	blx	r3
    6bee:	e000      	b.n	6bf2 <uip_ds6_nbr_lladdr_from_ipaddr+0x12>
    6bf0:	2000      	movs	r0, #0
}
    6bf2:	bd08      	pop	{r3, pc}
    6bf4:	00006b65 	.word	0x00006b65
    6bf8:	00006b4d 	.word	0x00006b4d

00006bfc <uip_ds6_link_neighbor_callback>:
/*---------------------------------------------------------------------------*/
void
uip_ds6_link_neighbor_callback(int status, int numtx)
{
    6bfc:	b538      	push	{r3, r4, r5, lr}
    6bfe:	1c05      	adds	r5, r0, #0
    6c00:	1c0c      	adds	r4, r1, #0
  const linkaddr_t *dest = packetbuf_addr(PACKETBUF_ADDR_RECEIVER);
  if(linkaddr_cmp(dest, &linkaddr_null)) {
    6c02:	4806      	ldr	r0, [pc, #24]	; (6c1c <uip_ds6_link_neighbor_callback+0x20>)
    6c04:	4906      	ldr	r1, [pc, #24]	; (6c20 <uip_ds6_link_neighbor_callback+0x24>)
    6c06:	4b07      	ldr	r3, [pc, #28]	; (6c24 <uip_ds6_link_neighbor_callback+0x28>)
    6c08:	4798      	blx	r3
    6c0a:	2800      	cmp	r0, #0
    6c0c:	d104      	bne.n	6c18 <uip_ds6_link_neighbor_callback+0x1c>
    return;
  }

  LINK_NEIGHBOR_CALLBACK(dest, status, numtx);
    6c0e:	4803      	ldr	r0, [pc, #12]	; (6c1c <uip_ds6_link_neighbor_callback+0x20>)
    6c10:	1c29      	adds	r1, r5, #0
    6c12:	1c22      	adds	r2, r4, #0
    6c14:	4b04      	ldr	r3, [pc, #16]	; (6c28 <uip_ds6_link_neighbor_callback+0x2c>)
    6c16:	4798      	blx	r3
      PRINTF(" is reachable.\n\r");
    }
  }
#endif /* UIP_DS6_LL_NUD */

}
    6c18:	bd38      	pop	{r3, r4, r5, pc}
    6c1a:	46c0      	nop			; (mov r8, r8)
    6c1c:	200031e0 	.word	0x200031e0
    6c20:	00012e30 	.word	0x00012e30
    6c24:	0000ac7d 	.word	0x0000ac7d
    6c28:	0000e445 	.word	0x0000e445

00006c2c <uip_ds6_neighbor_periodic>:
/*---------------------------------------------------------------------------*/
void
uip_ds6_neighbor_periodic(void)
{
    6c2c:	b538      	push	{r3, r4, r5, lr}
  /* Periodic processing on neighbors */
  uip_ds6_nbr_t *nbr = nbr_table_head(ds6_neighbors);
    6c2e:	4b47      	ldr	r3, [pc, #284]	; (6d4c <uip_ds6_neighbor_periodic+0x120>)
    6c30:	6818      	ldr	r0, [r3, #0]
    6c32:	4b47      	ldr	r3, [pc, #284]	; (6d50 <uip_ds6_neighbor_periodic+0x124>)
    6c34:	4798      	blx	r3
    6c36:	1e04      	subs	r4, r0, #0
  while(nbr != NULL) {
    6c38:	d100      	bne.n	6c3c <uip_ds6_neighbor_periodic+0x10>
    6c3a:	e085      	b.n	6d48 <uip_ds6_neighbor_periodic+0x11c>
    switch(nbr->state) {
    6c3c:	2322      	movs	r3, #34	; 0x22
    6c3e:	5ce3      	ldrb	r3, [r4, r3]
    6c40:	2b01      	cmp	r3, #1
    6c42:	d006      	beq.n	6c52 <uip_ds6_neighbor_periodic+0x26>
    6c44:	2b00      	cmp	r3, #0
    6c46:	d00e      	beq.n	6c66 <uip_ds6_neighbor_periodic+0x3a>
    6c48:	2b03      	cmp	r3, #3
    6c4a:	d033      	beq.n	6cb4 <uip_ds6_neighbor_periodic+0x88>
    6c4c:	2b04      	cmp	r3, #4
    6c4e:	d043      	beq.n	6cd8 <uip_ds6_neighbor_periodic+0xac>
    6c50:	e072      	b.n	6d38 <uip_ds6_neighbor_periodic+0x10c>
    case NBR_REACHABLE:
      if(stimer_expired(&nbr->reachable)) {
    6c52:	1c20      	adds	r0, r4, #0
    6c54:	3010      	adds	r0, #16
    6c56:	4b3f      	ldr	r3, [pc, #252]	; (6d54 <uip_ds6_neighbor_periodic+0x128>)
    6c58:	4798      	blx	r3
    6c5a:	2800      	cmp	r0, #0
    6c5c:	d06c      	beq.n	6d38 <uip_ds6_neighbor_periodic+0x10c>
        PRINTF("REACHABLE: moving to STALE (");
        PRINT6ADDR(&nbr->ipaddr);
        PRINTF(")\n\r");
        nbr->state = NBR_STALE;
    6c5e:	2202      	movs	r2, #2
    6c60:	2322      	movs	r3, #34	; 0x22
    6c62:	54e2      	strb	r2, [r4, r3]
    6c64:	e068      	b.n	6d38 <uip_ds6_neighbor_periodic+0x10c>
      }
      break;
#if UIP_ND6_SEND_NA
    case NBR_INCOMPLETE:
      if(nbr->nscount >= UIP_ND6_MAX_MULTICAST_SOLICIT) {
    6c66:	2320      	movs	r3, #32
    6c68:	5ce3      	ldrb	r3, [r4, r3]
    6c6a:	2b02      	cmp	r3, #2
    6c6c:	d903      	bls.n	6c76 <uip_ds6_neighbor_periodic+0x4a>
        uip_ds6_nbr_rm(nbr);
    6c6e:	1c20      	adds	r0, r4, #0
    6c70:	4b39      	ldr	r3, [pc, #228]	; (6d58 <uip_ds6_neighbor_periodic+0x12c>)
    6c72:	4798      	blx	r3
    6c74:	e060      	b.n	6d38 <uip_ds6_neighbor_periodic+0x10c>
      } else if(stimer_expired(&nbr->sendns) && (uip_len == 0)) {
    6c76:	1c25      	adds	r5, r4, #0
    6c78:	3518      	adds	r5, #24
    6c7a:	1c28      	adds	r0, r5, #0
    6c7c:	4b35      	ldr	r3, [pc, #212]	; (6d54 <uip_ds6_neighbor_periodic+0x128>)
    6c7e:	4798      	blx	r3
    6c80:	2800      	cmp	r0, #0
    6c82:	d059      	beq.n	6d38 <uip_ds6_neighbor_periodic+0x10c>
    6c84:	4b35      	ldr	r3, [pc, #212]	; (6d5c <uip_ds6_neighbor_periodic+0x130>)
    6c86:	881b      	ldrh	r3, [r3, #0]
    6c88:	2b00      	cmp	r3, #0
    6c8a:	d155      	bne.n	6d38 <uip_ds6_neighbor_periodic+0x10c>
        nbr->nscount++;
    6c8c:	2220      	movs	r2, #32
    6c8e:	5ca3      	ldrb	r3, [r4, r2]
    6c90:	3301      	adds	r3, #1
    6c92:	54a3      	strb	r3, [r4, r2]
        PRINTF("NBR_INCOMPLETE: NS %u\n\r", nbr->nscount);
        uip_nd6_ns_output(NULL, NULL, &nbr->ipaddr);
    6c94:	2000      	movs	r0, #0
    6c96:	2100      	movs	r1, #0
    6c98:	1c22      	adds	r2, r4, #0
    6c9a:	4b31      	ldr	r3, [pc, #196]	; (6d60 <uip_ds6_neighbor_periodic+0x134>)
    6c9c:	4798      	blx	r3
        stimer_set(&nbr->sendns, uip_ds6_if.retrans_timer / 1000);
    6c9e:	4b31      	ldr	r3, [pc, #196]	; (6d64 <uip_ds6_neighbor_periodic+0x138>)
    6ca0:	6918      	ldr	r0, [r3, #16]
    6ca2:	21fa      	movs	r1, #250	; 0xfa
    6ca4:	0089      	lsls	r1, r1, #2
    6ca6:	4b30      	ldr	r3, [pc, #192]	; (6d68 <uip_ds6_neighbor_periodic+0x13c>)
    6ca8:	4798      	blx	r3
    6caa:	1c01      	adds	r1, r0, #0
    6cac:	1c28      	adds	r0, r5, #0
    6cae:	4b2f      	ldr	r3, [pc, #188]	; (6d6c <uip_ds6_neighbor_periodic+0x140>)
    6cb0:	4798      	blx	r3
    6cb2:	e041      	b.n	6d38 <uip_ds6_neighbor_periodic+0x10c>
      }
      break;
    case NBR_DELAY:
      if(stimer_expired(&nbr->reachable)) {
    6cb4:	1c20      	adds	r0, r4, #0
    6cb6:	3010      	adds	r0, #16
    6cb8:	4b26      	ldr	r3, [pc, #152]	; (6d54 <uip_ds6_neighbor_periodic+0x128>)
    6cba:	4798      	blx	r3
    6cbc:	2800      	cmp	r0, #0
    6cbe:	d03b      	beq.n	6d38 <uip_ds6_neighbor_periodic+0x10c>
        nbr->state = NBR_PROBE;
    6cc0:	2204      	movs	r2, #4
    6cc2:	2322      	movs	r3, #34	; 0x22
    6cc4:	54e2      	strb	r2, [r4, r3]
        nbr->nscount = 0;
    6cc6:	2200      	movs	r2, #0
    6cc8:	3b02      	subs	r3, #2
    6cca:	54e2      	strb	r2, [r4, r3]
        PRINTF("DELAY: moving to PROBE\n\r");
        stimer_set(&nbr->sendns, 0);
    6ccc:	1c20      	adds	r0, r4, #0
    6cce:	3018      	adds	r0, #24
    6cd0:	2100      	movs	r1, #0
    6cd2:	4b26      	ldr	r3, [pc, #152]	; (6d6c <uip_ds6_neighbor_periodic+0x140>)
    6cd4:	4798      	blx	r3
    6cd6:	e02f      	b.n	6d38 <uip_ds6_neighbor_periodic+0x10c>
      }
      break;
    case NBR_PROBE:
      if(nbr->nscount >= UIP_ND6_MAX_UNICAST_SOLICIT) {
    6cd8:	2320      	movs	r3, #32
    6cda:	5ce3      	ldrb	r3, [r4, r3]
    6cdc:	2b02      	cmp	r3, #2
    6cde:	d90d      	bls.n	6cfc <uip_ds6_neighbor_periodic+0xd0>
        uip_ds6_defrt_t *locdefrt;
        PRINTF("PROBE END\n\r");
        if((locdefrt = uip_ds6_defrt_lookup(&nbr->ipaddr)) != NULL) {
    6ce0:	1c20      	adds	r0, r4, #0
    6ce2:	4b23      	ldr	r3, [pc, #140]	; (6d70 <uip_ds6_neighbor_periodic+0x144>)
    6ce4:	4798      	blx	r3
    6ce6:	2800      	cmp	r0, #0
    6ce8:	d004      	beq.n	6cf4 <uip_ds6_neighbor_periodic+0xc8>
          if (!locdefrt->isinfinite) {
    6cea:	7f03      	ldrb	r3, [r0, #28]
    6cec:	2b00      	cmp	r3, #0
    6cee:	d101      	bne.n	6cf4 <uip_ds6_neighbor_periodic+0xc8>
            uip_ds6_defrt_rm(locdefrt);
    6cf0:	4b20      	ldr	r3, [pc, #128]	; (6d74 <uip_ds6_neighbor_periodic+0x148>)
    6cf2:	4798      	blx	r3
          }
        }
        uip_ds6_nbr_rm(nbr);
    6cf4:	1c20      	adds	r0, r4, #0
    6cf6:	4b18      	ldr	r3, [pc, #96]	; (6d58 <uip_ds6_neighbor_periodic+0x12c>)
    6cf8:	4798      	blx	r3
    6cfa:	e01d      	b.n	6d38 <uip_ds6_neighbor_periodic+0x10c>
      } else if(stimer_expired(&nbr->sendns) && (uip_len == 0)) {
    6cfc:	1c25      	adds	r5, r4, #0
    6cfe:	3518      	adds	r5, #24
    6d00:	1c28      	adds	r0, r5, #0
    6d02:	4b14      	ldr	r3, [pc, #80]	; (6d54 <uip_ds6_neighbor_periodic+0x128>)
    6d04:	4798      	blx	r3
    6d06:	2800      	cmp	r0, #0
    6d08:	d016      	beq.n	6d38 <uip_ds6_neighbor_periodic+0x10c>
    6d0a:	4b14      	ldr	r3, [pc, #80]	; (6d5c <uip_ds6_neighbor_periodic+0x130>)
    6d0c:	881b      	ldrh	r3, [r3, #0]
    6d0e:	2b00      	cmp	r3, #0
    6d10:	d112      	bne.n	6d38 <uip_ds6_neighbor_periodic+0x10c>
        nbr->nscount++;
    6d12:	2220      	movs	r2, #32
    6d14:	5ca3      	ldrb	r3, [r4, r2]
    6d16:	3301      	adds	r3, #1
    6d18:	54a3      	strb	r3, [r4, r2]
        PRINTF("PROBE: NS %u\n\r", nbr->nscount);
        uip_nd6_ns_output(NULL, &nbr->ipaddr, &nbr->ipaddr);
    6d1a:	2000      	movs	r0, #0
    6d1c:	1c21      	adds	r1, r4, #0
    6d1e:	1c22      	adds	r2, r4, #0
    6d20:	4b0f      	ldr	r3, [pc, #60]	; (6d60 <uip_ds6_neighbor_periodic+0x134>)
    6d22:	4798      	blx	r3
        stimer_set(&nbr->sendns, uip_ds6_if.retrans_timer / 1000);
    6d24:	4b0f      	ldr	r3, [pc, #60]	; (6d64 <uip_ds6_neighbor_periodic+0x138>)
    6d26:	6918      	ldr	r0, [r3, #16]
    6d28:	21fa      	movs	r1, #250	; 0xfa
    6d2a:	0089      	lsls	r1, r1, #2
    6d2c:	4b0e      	ldr	r3, [pc, #56]	; (6d68 <uip_ds6_neighbor_periodic+0x13c>)
    6d2e:	4798      	blx	r3
    6d30:	1c01      	adds	r1, r0, #0
    6d32:	1c28      	adds	r0, r5, #0
    6d34:	4b0d      	ldr	r3, [pc, #52]	; (6d6c <uip_ds6_neighbor_periodic+0x140>)
    6d36:	4798      	blx	r3
      break;
#endif /* UIP_ND6_SEND_NA */
    default:
      break;
    }
    nbr = nbr_table_next(ds6_neighbors, nbr);
    6d38:	4b04      	ldr	r3, [pc, #16]	; (6d4c <uip_ds6_neighbor_periodic+0x120>)
    6d3a:	6818      	ldr	r0, [r3, #0]
    6d3c:	1c21      	adds	r1, r4, #0
    6d3e:	4b0e      	ldr	r3, [pc, #56]	; (6d78 <uip_ds6_neighbor_periodic+0x14c>)
    6d40:	4798      	blx	r3
    6d42:	1e04      	subs	r4, r0, #0
void
uip_ds6_neighbor_periodic(void)
{
  /* Periodic processing on neighbors */
  uip_ds6_nbr_t *nbr = nbr_table_head(ds6_neighbors);
  while(nbr != NULL) {
    6d44:	d000      	beq.n	6d48 <uip_ds6_neighbor_periodic+0x11c>
    6d46:	e779      	b.n	6c3c <uip_ds6_neighbor_periodic+0x10>
    default:
      break;
    }
    nbr = nbr_table_next(ds6_neighbors, nbr);
  }
}
    6d48:	bd38      	pop	{r3, r4, r5, pc}
    6d4a:	46c0      	nop			; (mov r8, r8)
    6d4c:	2000002c 	.word	0x2000002c
    6d50:	0000bb41 	.word	0x0000bb41
    6d54:	0000ed21 	.word	0x0000ed21
    6d58:	00006ab1 	.word	0x00006ab1
    6d5c:	20002cc0 	.word	0x20002cc0
    6d60:	000086d1 	.word	0x000086d1
    6d64:	20002b68 	.word	0x20002b68
    6d68:	0001076d 	.word	0x0001076d
    6d6c:	0000ed0d 	.word	0x0000ed0d
    6d70:	00007189 	.word	0x00007189
    6d74:	0000712d 	.word	0x0000712d
    6d78:	0000bad5 	.word	0x0000bad5

00006d7c <call_route_callback>:
/*---------------------------------------------------------------------------*/
#if UIP_DS6_NOTIFICATIONS
static void
call_route_callback(int event, uip_ipaddr_t *route,
		    uip_ipaddr_t *nexthop)
{
    6d7c:	b5f0      	push	{r4, r5, r6, r7, lr}
    6d7e:	4647      	mov	r7, r8
    6d80:	b480      	push	{r7}
    6d82:	b082      	sub	sp, #8
    6d84:	1c05      	adds	r5, r0, #0
    6d86:	9101      	str	r1, [sp, #4]
    6d88:	1c17      	adds	r7, r2, #0
  int num;
  struct uip_ds6_notification *n;
  for(n = list_head(notificationlist);
    6d8a:	480f      	ldr	r0, [pc, #60]	; (6dc8 <call_route_callback+0x4c>)
    6d8c:	4b0f      	ldr	r3, [pc, #60]	; (6dcc <call_route_callback+0x50>)
    6d8e:	4798      	blx	r3
    6d90:	1e04      	subs	r4, r0, #0
    6d92:	d014      	beq.n	6dbe <call_route_callback+0x42>
      n = list_item_next(n)) {
    if(event == UIP_DS6_NOTIFICATION_DEFRT_ADD ||
       event == UIP_DS6_NOTIFICATION_DEFRT_RM) {
      num = list_length(defaultrouterlist);
    } else {
      num = num_routes;
    6d94:	4b0e      	ldr	r3, [pc, #56]	; (6dd0 <call_route_callback+0x54>)
    6d96:	4698      	mov	r8, r3
  int num;
  struct uip_ds6_notification *n;
  for(n = list_head(notificationlist);
      n != NULL;
      n = list_item_next(n)) {
    if(event == UIP_DS6_NOTIFICATION_DEFRT_ADD ||
    6d98:	2d01      	cmp	r5, #1
    6d9a:	d804      	bhi.n	6da6 <call_route_callback+0x2a>
       event == UIP_DS6_NOTIFICATION_DEFRT_RM) {
      num = list_length(defaultrouterlist);
    6d9c:	480d      	ldr	r0, [pc, #52]	; (6dd4 <call_route_callback+0x58>)
    6d9e:	4b0e      	ldr	r3, [pc, #56]	; (6dd8 <call_route_callback+0x5c>)
    6da0:	4798      	blx	r3
    6da2:	1c03      	adds	r3, r0, #0
    6da4:	e001      	b.n	6daa <call_route_callback+0x2e>
    } else {
      num = num_routes;
    6da6:	4643      	mov	r3, r8
    6da8:	681b      	ldr	r3, [r3, #0]
    }
    n->callback(event, route, nexthop, num);
    6daa:	1c28      	adds	r0, r5, #0
    6dac:	9901      	ldr	r1, [sp, #4]
    6dae:	1c3a      	adds	r2, r7, #0
    6db0:	6866      	ldr	r6, [r4, #4]
    6db2:	47b0      	blx	r6
{
  int num;
  struct uip_ds6_notification *n;
  for(n = list_head(notificationlist);
      n != NULL;
      n = list_item_next(n)) {
    6db4:	1c20      	adds	r0, r4, #0
    6db6:	4b09      	ldr	r3, [pc, #36]	; (6ddc <call_route_callback+0x60>)
    6db8:	4798      	blx	r3
    6dba:	1e04      	subs	r4, r0, #0
call_route_callback(int event, uip_ipaddr_t *route,
		    uip_ipaddr_t *nexthop)
{
  int num;
  struct uip_ds6_notification *n;
  for(n = list_head(notificationlist);
    6dbc:	d1ec      	bne.n	6d98 <call_route_callback+0x1c>
    } else {
      num = num_routes;
    }
    n->callback(event, route, nexthop, num);
  }
}
    6dbe:	b002      	add	sp, #8
    6dc0:	bc04      	pop	{r2}
    6dc2:	4690      	mov	r8, r2
    6dc4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6dc6:	46c0      	nop			; (mov r8, r8)
    6dc8:	20000aac 	.word	0x20000aac
    6dcc:	00005719 	.word	0x00005719
    6dd0:	2000087c 	.word	0x2000087c
    6dd4:	20000884 	.word	0x20000884
    6dd8:	000057a9 	.word	0x000057a9
    6ddc:	000057c1 	.word	0x000057c1

00006de0 <uip_ds6_route_init>:
}
#endif
/*---------------------------------------------------------------------------*/
void
uip_ds6_route_init(void)
{
    6de0:	b538      	push	{r3, r4, r5, lr}
  memb_init(&routememb);
    6de2:	4808      	ldr	r0, [pc, #32]	; (6e04 <uip_ds6_route_init+0x24>)
    6de4:	4d08      	ldr	r5, [pc, #32]	; (6e08 <uip_ds6_route_init+0x28>)
    6de6:	47a8      	blx	r5
  list_init(routelist);
    6de8:	4808      	ldr	r0, [pc, #32]	; (6e0c <uip_ds6_route_init+0x2c>)
    6dea:	4c09      	ldr	r4, [pc, #36]	; (6e10 <uip_ds6_route_init+0x30>)
    6dec:	47a0      	blx	r4
  nbr_table_register(nbr_routes,
    6dee:	4809      	ldr	r0, [pc, #36]	; (6e14 <uip_ds6_route_init+0x34>)
    6df0:	4909      	ldr	r1, [pc, #36]	; (6e18 <uip_ds6_route_init+0x38>)
    6df2:	4b0a      	ldr	r3, [pc, #40]	; (6e1c <uip_ds6_route_init+0x3c>)
    6df4:	4798      	blx	r3
                     (nbr_table_callback *)rm_routelist_callback);

  memb_init(&defaultroutermemb);
    6df6:	480a      	ldr	r0, [pc, #40]	; (6e20 <uip_ds6_route_init+0x40>)
    6df8:	47a8      	blx	r5
  list_init(defaultrouterlist);
    6dfa:	480a      	ldr	r0, [pc, #40]	; (6e24 <uip_ds6_route_init+0x44>)
    6dfc:	47a0      	blx	r4

#if UIP_DS6_NOTIFICATIONS
  list_init(notificationlist);
    6dfe:	480a      	ldr	r0, [pc, #40]	; (6e28 <uip_ds6_route_init+0x48>)
    6e00:	47a0      	blx	r4
#endif
}
    6e02:	bd38      	pop	{r3, r4, r5, pc}
    6e04:	2000005c 	.word	0x2000005c
    6e08:	000057cd 	.word	0x000057cd
    6e0c:	20000928 	.word	0x20000928
    6e10:	00005711 	.word	0x00005711
    6e14:	2000004c 	.word	0x2000004c
    6e18:	00007005 	.word	0x00007005
    6e1c:	0000baa9 	.word	0x0000baa9
    6e20:	20000040 	.word	0x20000040
    6e24:	20000884 	.word	0x20000884
    6e28:	20000aac 	.word	0x20000aac

00006e2c <uip_ds6_route_nexthop>:
  }
}
/*---------------------------------------------------------------------------*/
uip_ipaddr_t *
uip_ds6_route_nexthop(uip_ds6_route_t *route)
{
    6e2c:	b508      	push	{r3, lr}
  if(route != NULL) {
    6e2e:	2800      	cmp	r0, #0
    6e30:	d006      	beq.n	6e40 <uip_ds6_route_nexthop+0x14>
/*---------------------------------------------------------------------------*/
static uip_lladdr_t *
uip_ds6_route_nexthop_lladdr(uip_ds6_route_t *route)
{
  if(route != NULL) {
    return (uip_lladdr_t *)nbr_table_get_lladdr(nbr_routes,
    6e32:	6841      	ldr	r1, [r0, #4]
    6e34:	4803      	ldr	r0, [pc, #12]	; (6e44 <uip_ds6_route_nexthop+0x18>)
    6e36:	4b04      	ldr	r3, [pc, #16]	; (6e48 <uip_ds6_route_nexthop+0x1c>)
    6e38:	4798      	blx	r3
/*---------------------------------------------------------------------------*/
uip_ipaddr_t *
uip_ds6_route_nexthop(uip_ds6_route_t *route)
{
  if(route != NULL) {
    return uip_ds6_nbr_ipaddr_from_lladdr(uip_ds6_route_nexthop_lladdr(route));
    6e3a:	4b04      	ldr	r3, [pc, #16]	; (6e4c <uip_ds6_route_nexthop+0x20>)
    6e3c:	4798      	blx	r3
    6e3e:	e000      	b.n	6e42 <uip_ds6_route_nexthop+0x16>
  } else {
    return NULL;
    6e40:	2000      	movs	r0, #0
  }
}
    6e42:	bd08      	pop	{r3, pc}
    6e44:	2000004c 	.word	0x2000004c
    6e48:	0000bdbd 	.word	0x0000bdbd
    6e4c:	00006bd5 	.word	0x00006bd5

00006e50 <uip_ds6_route_head>:
/*---------------------------------------------------------------------------*/
uip_ds6_route_t *
uip_ds6_route_head(void)
{
    6e50:	b508      	push	{r3, lr}
  return list_head(routelist);
    6e52:	4802      	ldr	r0, [pc, #8]	; (6e5c <uip_ds6_route_head+0xc>)
    6e54:	4b02      	ldr	r3, [pc, #8]	; (6e60 <uip_ds6_route_head+0x10>)
    6e56:	4798      	blx	r3
}
    6e58:	bd08      	pop	{r3, pc}
    6e5a:	46c0      	nop			; (mov r8, r8)
    6e5c:	20000928 	.word	0x20000928
    6e60:	00005719 	.word	0x00005719

00006e64 <uip_ds6_route_next>:
/*---------------------------------------------------------------------------*/
uip_ds6_route_t *
uip_ds6_route_next(uip_ds6_route_t *r)
{
    6e64:	b508      	push	{r3, lr}
  if(r != NULL) {
    6e66:	2800      	cmp	r0, #0
    6e68:	d002      	beq.n	6e70 <uip_ds6_route_next+0xc>
    uip_ds6_route_t *n = list_item_next(r);
    6e6a:	4b02      	ldr	r3, [pc, #8]	; (6e74 <uip_ds6_route_next+0x10>)
    6e6c:	4798      	blx	r3
    return n;
    6e6e:	e000      	b.n	6e72 <uip_ds6_route_next+0xe>
  }
  return NULL;
    6e70:	2000      	movs	r0, #0
}
    6e72:	bd08      	pop	{r3, pc}
    6e74:	000057c1 	.word	0x000057c1

00006e78 <uip_ds6_route_lookup>:
  return num_routes;
}
/*---------------------------------------------------------------------------*/
uip_ds6_route_t *
uip_ds6_route_lookup(uip_ipaddr_t *addr)
{
    6e78:	b5f0      	push	{r4, r5, r6, r7, lr}
    6e7a:	464f      	mov	r7, r9
    6e7c:	4646      	mov	r6, r8
    6e7e:	b4c0      	push	{r6, r7}
    6e80:	b083      	sub	sp, #12
    6e82:	9000      	str	r0, [sp, #0]
  PRINTF("\n\r");


  found_route = NULL;
  longestmatch = 0;
  for(r = uip_ds6_route_head();
    6e84:	4b17      	ldr	r3, [pc, #92]	; (6ee4 <uip_ds6_route_lookup+0x6c>)
    6e86:	4798      	blx	r3
    6e88:	1e04      	subs	r4, r0, #0
    6e8a:	d023      	beq.n	6ed4 <uip_ds6_route_lookup+0x5c>
    6e8c:	2300      	movs	r3, #0
    6e8e:	4698      	mov	r8, r3
    6e90:	9301      	str	r3, [sp, #4]
      r != NULL;
      r = uip_ds6_route_next(r)) {
    if(r->length >= longestmatch &&
    6e92:	2624      	movs	r6, #36	; 0x24
       uip_ipaddr_prefixcmp(addr, &r->ipaddr, r->length)) {
    6e94:	4b14      	ldr	r3, [pc, #80]	; (6ee8 <uip_ds6_route_lookup+0x70>)
    6e96:	4699      	mov	r9, r3

  found_route = NULL;
  longestmatch = 0;
  for(r = uip_ds6_route_head();
      r != NULL;
      r = uip_ds6_route_next(r)) {
    6e98:	4f14      	ldr	r7, [pc, #80]	; (6eec <uip_ds6_route_lookup+0x74>)
    if(r->length >= longestmatch &&
    6e9a:	5da5      	ldrb	r5, [r4, r6]
    6e9c:	4545      	cmp	r5, r8
    6e9e:	d308      	bcc.n	6eb2 <uip_ds6_route_lookup+0x3a>
       uip_ipaddr_prefixcmp(addr, &r->ipaddr, r->length)) {
    6ea0:	1c21      	adds	r1, r4, #0
    6ea2:	3108      	adds	r1, #8
    6ea4:	08ea      	lsrs	r2, r5, #3
    6ea6:	9800      	ldr	r0, [sp, #0]
    6ea8:	47c8      	blx	r9
  found_route = NULL;
  longestmatch = 0;
  for(r = uip_ds6_route_head();
      r != NULL;
      r = uip_ds6_route_next(r)) {
    if(r->length >= longestmatch &&
    6eaa:	2800      	cmp	r0, #0
    6eac:	d101      	bne.n	6eb2 <uip_ds6_route_lookup+0x3a>
       uip_ipaddr_prefixcmp(addr, &r->ipaddr, r->length)) {
      longestmatch = r->length;
    6eae:	46a8      	mov	r8, r5
  found_route = NULL;
  longestmatch = 0;
  for(r = uip_ds6_route_head();
      r != NULL;
      r = uip_ds6_route_next(r)) {
    if(r->length >= longestmatch &&
    6eb0:	9401      	str	r4, [sp, #4]

  found_route = NULL;
  longestmatch = 0;
  for(r = uip_ds6_route_head();
      r != NULL;
      r = uip_ds6_route_next(r)) {
    6eb2:	1c20      	adds	r0, r4, #0
    6eb4:	47b8      	blx	r7
    6eb6:	1e04      	subs	r4, r0, #0
  PRINTF("\n\r");


  found_route = NULL;
  longestmatch = 0;
  for(r = uip_ds6_route_head();
    6eb8:	d1ef      	bne.n	6e9a <uip_ds6_route_lookup+0x22>
    PRINTF("\n\r");
  } else {
    PRINTF("uip-ds6-route: No route found\n\r");
  }

  if(found_route != NULL) {
    6eba:	9d01      	ldr	r5, [sp, #4]
    6ebc:	2d00      	cmp	r5, #0
    6ebe:	d00a      	beq.n	6ed6 <uip_ds6_route_lookup+0x5e>
    /* If we found a route, we put it at the end of the routeslist
       list. The list is ordered by how recently we looked them up:
       the least recently used route will be at the start of the
       list. */
    list_remove(routelist, found_route);
    6ec0:	4c0b      	ldr	r4, [pc, #44]	; (6ef0 <uip_ds6_route_lookup+0x78>)
    6ec2:	1c20      	adds	r0, r4, #0
    6ec4:	1c29      	adds	r1, r5, #0
    6ec6:	4b0b      	ldr	r3, [pc, #44]	; (6ef4 <uip_ds6_route_lookup+0x7c>)
    6ec8:	4798      	blx	r3
    list_add(routelist, found_route);
    6eca:	1c20      	adds	r0, r4, #0
    6ecc:	1c29      	adds	r1, r5, #0
    6ece:	4b0a      	ldr	r3, [pc, #40]	; (6ef8 <uip_ds6_route_lookup+0x80>)
    6ed0:	4798      	blx	r3
    6ed2:	e000      	b.n	6ed6 <uip_ds6_route_lookup+0x5e>
  PRINTF("uip-ds6-route: Looking up route for ");
  PRINT6ADDR(addr);
  PRINTF("\n\r");


  found_route = NULL;
    6ed4:	9001      	str	r0, [sp, #4]
    list_remove(routelist, found_route);
    list_add(routelist, found_route);
  }

  return found_route;
}
    6ed6:	9801      	ldr	r0, [sp, #4]
    6ed8:	b003      	add	sp, #12
    6eda:	bc0c      	pop	{r2, r3}
    6edc:	4690      	mov	r8, r2
    6ede:	4699      	mov	r9, r3
    6ee0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6ee2:	46c0      	nop			; (mov r8, r8)
    6ee4:	00006e51 	.word	0x00006e51
    6ee8:	00010b11 	.word	0x00010b11
    6eec:	00006e65 	.word	0x00006e65
    6ef0:	20000928 	.word	0x20000928
    6ef4:	00005735 	.word	0x00005735
    6ef8:	00005769 	.word	0x00005769

00006efc <uip_ds6_route_rm>:
}

/*---------------------------------------------------------------------------*/
void
uip_ds6_route_rm(uip_ds6_route_t *route)
{
    6efc:	b570      	push	{r4, r5, r6, lr}
  struct uip_ds6_route_neighbor_route *neighbor_route;
#if DEBUG != DEBUG_NONE
  assert_nbr_routes_list_sane();
#endif /* DEBUG != DEBUG_NONE */
  if(route != NULL && route->neighbor_routes != NULL) {
    6efe:	2800      	cmp	r0, #0
    6f00:	d043      	beq.n	6f8a <uip_ds6_route_rm+0x8e>
    6f02:	6843      	ldr	r3, [r0, #4]
    6f04:	2b00      	cmp	r3, #0
    6f06:	d040      	beq.n	6f8a <uip_ds6_route_rm+0x8e>
    6f08:	1c05      	adds	r5, r0, #0
    PRINTF("uip_ds6_route_rm: removing route: ");
    PRINT6ADDR(&route->ipaddr);
    PRINTF("\n\r");

    /* Remove the neighbor from the route list */
    list_remove(routelist, route);
    6f0a:	4820      	ldr	r0, [pc, #128]	; (6f8c <uip_ds6_route_rm+0x90>)
    6f0c:	1c29      	adds	r1, r5, #0
    6f0e:	4b20      	ldr	r3, [pc, #128]	; (6f90 <uip_ds6_route_rm+0x94>)
    6f10:	4798      	blx	r3

    /* Find the corresponding neighbor_route and remove it. */
    for(neighbor_route = list_head(route->neighbor_routes->route_list);
    6f12:	686b      	ldr	r3, [r5, #4]
    6f14:	6858      	ldr	r0, [r3, #4]
    6f16:	4b1f      	ldr	r3, [pc, #124]	; (6f94 <uip_ds6_route_rm+0x98>)
    6f18:	4798      	blx	r3
    6f1a:	1e04      	subs	r4, r0, #0
    6f1c:	d02f      	beq.n	6f7e <uip_ds6_route_rm+0x82>
        neighbor_route != NULL && neighbor_route->route != route;
    6f1e:	6843      	ldr	r3, [r0, #4]
    6f20:	42ab      	cmp	r3, r5
    6f22:	d007      	beq.n	6f34 <uip_ds6_route_rm+0x38>
        neighbor_route = list_item_next(neighbor_route));
    6f24:	4e1c      	ldr	r6, [pc, #112]	; (6f98 <uip_ds6_route_rm+0x9c>)
    6f26:	1c20      	adds	r0, r4, #0
    6f28:	47b0      	blx	r6
    6f2a:	1e04      	subs	r4, r0, #0

    /* Remove the neighbor from the route list */
    list_remove(routelist, route);

    /* Find the corresponding neighbor_route and remove it. */
    for(neighbor_route = list_head(route->neighbor_routes->route_list);
    6f2c:	d027      	beq.n	6f7e <uip_ds6_route_rm+0x82>
        neighbor_route != NULL && neighbor_route->route != route;
    6f2e:	6843      	ldr	r3, [r0, #4]
    6f30:	42ab      	cmp	r3, r5
    6f32:	d1f8      	bne.n	6f26 <uip_ds6_route_rm+0x2a>
    if(neighbor_route == NULL) {
      PRINTF("uip_ds6_route_rm: neighbor_route was NULL for ");
      uip_debug_ipaddr_print(&route->ipaddr);
      PRINTF("\n\r");
    }
    list_remove(route->neighbor_routes->route_list, neighbor_route);
    6f34:	686b      	ldr	r3, [r5, #4]
    6f36:	6858      	ldr	r0, [r3, #4]
    6f38:	1c21      	adds	r1, r4, #0
    6f3a:	4b15      	ldr	r3, [pc, #84]	; (6f90 <uip_ds6_route_rm+0x94>)
    6f3c:	4798      	blx	r3
    if(list_head(route->neighbor_routes->route_list) == NULL) {
    6f3e:	686b      	ldr	r3, [r5, #4]
    6f40:	6858      	ldr	r0, [r3, #4]
    6f42:	4b14      	ldr	r3, [pc, #80]	; (6f94 <uip_ds6_route_rm+0x98>)
    6f44:	4798      	blx	r3
    6f46:	2800      	cmp	r0, #0
    6f48:	d104      	bne.n	6f54 <uip_ds6_route_rm+0x58>
      /* If this was the only route using this neighbor, remove the
         neibhor from the table */
      PRINTF("uip_ds6_route_rm: removing neighbor too\n\r");
      nbr_table_remove(nbr_routes, route->neighbor_routes->route_list);
    6f4a:	686b      	ldr	r3, [r5, #4]
    6f4c:	6859      	ldr	r1, [r3, #4]
    6f4e:	4813      	ldr	r0, [pc, #76]	; (6f9c <uip_ds6_route_rm+0xa0>)
    6f50:	4b13      	ldr	r3, [pc, #76]	; (6fa0 <uip_ds6_route_rm+0xa4>)
    6f52:	4798      	blx	r3
    }
    memb_free(&routememb, route);
    6f54:	4813      	ldr	r0, [pc, #76]	; (6fa4 <uip_ds6_route_rm+0xa8>)
    6f56:	1c29      	adds	r1, r5, #0
    6f58:	4e13      	ldr	r6, [pc, #76]	; (6fa8 <uip_ds6_route_rm+0xac>)
    6f5a:	47b0      	blx	r6
    memb_free(&neighborroutememb, neighbor_route);
    6f5c:	4813      	ldr	r0, [pc, #76]	; (6fac <uip_ds6_route_rm+0xb0>)
    6f5e:	1c21      	adds	r1, r4, #0
    6f60:	47b0      	blx	r6

    num_routes--;
    6f62:	4a13      	ldr	r2, [pc, #76]	; (6fb0 <uip_ds6_route_rm+0xb4>)
    6f64:	6813      	ldr	r3, [r2, #0]
    6f66:	3b01      	subs	r3, #1
    6f68:	6013      	str	r3, [r2, #0]

    PRINTF("uip_ds6_route_rm num %d\n\r", num_routes);

#if UIP_DS6_NOTIFICATIONS
    call_route_callback(UIP_DS6_NOTIFICATION_ROUTE_RM,
    6f6a:	1c28      	adds	r0, r5, #0
    6f6c:	4b11      	ldr	r3, [pc, #68]	; (6fb4 <uip_ds6_route_rm+0xb8>)
    6f6e:	4798      	blx	r3
    6f70:	1c02      	adds	r2, r0, #0
    6f72:	1c29      	adds	r1, r5, #0
    6f74:	3108      	adds	r1, #8
    6f76:	2003      	movs	r0, #3
    6f78:	4b0f      	ldr	r3, [pc, #60]	; (6fb8 <uip_ds6_route_rm+0xbc>)
    6f7a:	4798      	blx	r3
    6f7c:	e005      	b.n	6f8a <uip_ds6_route_rm+0x8e>
        neighbor_route != NULL && neighbor_route->route != route;
        neighbor_route = list_item_next(neighbor_route));

    if(neighbor_route == NULL) {
      PRINTF("uip_ds6_route_rm: neighbor_route was NULL for ");
      uip_debug_ipaddr_print(&route->ipaddr);
    6f7e:	1c28      	adds	r0, r5, #0
    6f80:	3008      	adds	r0, #8
    6f82:	4b0e      	ldr	r3, [pc, #56]	; (6fbc <uip_ds6_route_rm+0xc0>)
    6f84:	4798      	blx	r3
    6f86:	2400      	movs	r4, #0
    6f88:	e7d4      	b.n	6f34 <uip_ds6_route_rm+0x38>

#if DEBUG != DEBUG_NONE
  assert_nbr_routes_list_sane();
#endif /* DEBUG != DEBUG_NONE */
  return;
}
    6f8a:	bd70      	pop	{r4, r5, r6, pc}
    6f8c:	20000928 	.word	0x20000928
    6f90:	00005735 	.word	0x00005735
    6f94:	00005719 	.word	0x00005719
    6f98:	000057c1 	.word	0x000057c1
    6f9c:	2000004c 	.word	0x2000004c
    6fa0:	0000bd55 	.word	0x0000bd55
    6fa4:	2000005c 	.word	0x2000005c
    6fa8:	00005831 	.word	0x00005831
    6fac:	20000068 	.word	0x20000068
    6fb0:	2000087c 	.word	0x2000087c
    6fb4:	00006e2d 	.word	0x00006e2d
    6fb8:	00006d7d 	.word	0x00006d7d
    6fbc:	0000ab09 	.word	0x0000ab09

00006fc0 <rm_routelist>:
/*---------------------------------------------------------------------------*/
static void
rm_routelist(struct uip_ds6_route_neighbor_routes *routes)
{
    6fc0:	b570      	push	{r4, r5, r6, lr}
#if DEBUG != DEBUG_NONE
  assert_nbr_routes_list_sane();
#endif /* DEBUG != DEBUG_NONE */
  PRINTF("uip_ds6_route_rm_routelist\n\r");
  if(routes != NULL && routes->route_list != NULL) {
    6fc2:	2800      	cmp	r0, #0
    6fc4:	d014      	beq.n	6ff0 <rm_routelist+0x30>
    6fc6:	6843      	ldr	r3, [r0, #4]
    6fc8:	2b00      	cmp	r3, #0
    6fca:	d011      	beq.n	6ff0 <rm_routelist+0x30>
    6fcc:	1c04      	adds	r4, r0, #0
    struct uip_ds6_route_neighbor_route *r;
    r = list_head(routes->route_list);
    6fce:	1c18      	adds	r0, r3, #0
    6fd0:	4b08      	ldr	r3, [pc, #32]	; (6ff4 <rm_routelist+0x34>)
    6fd2:	4798      	blx	r3
    while(r != NULL) {
    6fd4:	2800      	cmp	r0, #0
    6fd6:	d007      	beq.n	6fe8 <rm_routelist+0x28>
      uip_ds6_route_rm(r->route);
    6fd8:	4e07      	ldr	r6, [pc, #28]	; (6ff8 <rm_routelist+0x38>)
      r = list_head(routes->route_list);
    6fda:	4d06      	ldr	r5, [pc, #24]	; (6ff4 <rm_routelist+0x34>)
  PRINTF("uip_ds6_route_rm_routelist\n\r");
  if(routes != NULL && routes->route_list != NULL) {
    struct uip_ds6_route_neighbor_route *r;
    r = list_head(routes->route_list);
    while(r != NULL) {
      uip_ds6_route_rm(r->route);
    6fdc:	6840      	ldr	r0, [r0, #4]
    6fde:	47b0      	blx	r6
      r = list_head(routes->route_list);
    6fe0:	6860      	ldr	r0, [r4, #4]
    6fe2:	47a8      	blx	r5
#endif /* DEBUG != DEBUG_NONE */
  PRINTF("uip_ds6_route_rm_routelist\n\r");
  if(routes != NULL && routes->route_list != NULL) {
    struct uip_ds6_route_neighbor_route *r;
    r = list_head(routes->route_list);
    while(r != NULL) {
    6fe4:	2800      	cmp	r0, #0
    6fe6:	d1f9      	bne.n	6fdc <rm_routelist+0x1c>
      uip_ds6_route_rm(r->route);
      r = list_head(routes->route_list);
    }
    nbr_table_remove(nbr_routes, routes);
    6fe8:	4804      	ldr	r0, [pc, #16]	; (6ffc <rm_routelist+0x3c>)
    6fea:	1c21      	adds	r1, r4, #0
    6fec:	4b04      	ldr	r3, [pc, #16]	; (7000 <rm_routelist+0x40>)
    6fee:	4798      	blx	r3
  }
#if DEBUG != DEBUG_NONE
  assert_nbr_routes_list_sane();
#endif /* DEBUG != DEBUG_NONE */
}
    6ff0:	bd70      	pop	{r4, r5, r6, pc}
    6ff2:	46c0      	nop			; (mov r8, r8)
    6ff4:	00005719 	.word	0x00005719
    6ff8:	00006efd 	.word	0x00006efd
    6ffc:	2000004c 	.word	0x2000004c
    7000:	0000bd55 	.word	0x0000bd55

00007004 <rm_routelist_callback>:
/*---------------------------------------------------------------------------*/
static void
rm_routelist_callback(nbr_table_item_t *ptr)
{
    7004:	b508      	push	{r3, lr}
  rm_routelist((struct uip_ds6_route_neighbor_routes *)ptr);
    7006:	4b01      	ldr	r3, [pc, #4]	; (700c <rm_routelist_callback+0x8>)
    7008:	4798      	blx	r3
}
    700a:	bd08      	pop	{r3, pc}
    700c:	00006fc1 	.word	0x00006fc1

00007010 <uip_ds6_route_add>:
}
/*---------------------------------------------------------------------------*/
uip_ds6_route_t *
uip_ds6_route_add(uip_ipaddr_t *ipaddr, uint8_t length,
		  uip_ipaddr_t *nexthop)
{
    7010:	b5f0      	push	{r4, r5, r6, r7, lr}
    7012:	b083      	sub	sp, #12
    7014:	1c04      	adds	r4, r0, #0
    7016:	9000      	str	r0, [sp, #0]
    7018:	1c0d      	adds	r5, r1, #0
    701a:	9201      	str	r2, [sp, #4]
#if DEBUG != DEBUG_NONE
  assert_nbr_routes_list_sane();
#endif /* DEBUG != DEBUG_NONE */

  /* Get link-layer address of next hop, make sure it is in neighbor table */
  const uip_lladdr_t *nexthop_lladdr = uip_ds6_nbr_lladdr_from_ipaddr(nexthop);
    701c:	1c10      	adds	r0, r2, #0
    701e:	4b32      	ldr	r3, [pc, #200]	; (70e8 <uip_ds6_route_add+0xd8>)
    7020:	4798      	blx	r3
    7022:	1e07      	subs	r7, r0, #0
  if(nexthop_lladdr == NULL) {
    7024:	d059      	beq.n	70da <uip_ds6_route_add+0xca>
  }

  /* First make sure that we don't add a route twice. If we find an
     existing route for our destination, we'll just update the old
     one. */
  r = uip_ds6_route_lookup(ipaddr);
    7026:	1c20      	adds	r0, r4, #0
    7028:	4b30      	ldr	r3, [pc, #192]	; (70ec <uip_ds6_route_add+0xdc>)
    702a:	4798      	blx	r3
    702c:	1e06      	subs	r6, r0, #0
  if(r != NULL) {
    702e:	d135      	bne.n	709c <uip_ds6_route_add+0x8c>
}
/*---------------------------------------------------------------------------*/
int
uip_ds6_route_num_routes(void)
{
  return num_routes;
    7030:	4b2f      	ldr	r3, [pc, #188]	; (70f0 <uip_ds6_route_add+0xe0>)
    struct uip_ds6_route_neighbor_routes *routes;
    /* If there is no routing entry, create one. We first need to
       check if we have room for this route. If not, we remove the
       least recently used one we have. */

    if(uip_ds6_route_num_routes() == UIP_DS6_ROUTE_NB) {
    7032:	681b      	ldr	r3, [r3, #0]
    7034:	2b08      	cmp	r3, #8
    7036:	d103      	bne.n	7040 <uip_ds6_route_add+0x30>
      /* Removing the oldest route entry from the route table. The
         least recently used route is the first route on the list. */
      uip_ds6_route_t *oldest;

      oldest = uip_ds6_route_head();
    7038:	4b2e      	ldr	r3, [pc, #184]	; (70f4 <uip_ds6_route_add+0xe4>)
    703a:	4798      	blx	r3
      PRINTF("uip_ds6_route_add: dropping route to ");
      PRINT6ADDR(&oldest->ipaddr);
      PRINTF("\n\r");
      uip_ds6_route_rm(oldest);
    703c:	4b2e      	ldr	r3, [pc, #184]	; (70f8 <uip_ds6_route_add+0xe8>)
    703e:	4798      	blx	r3

       We first check to see if we already have this neighbor in our
       nbr_route table. If so, the neighbor already has a route entry
       list.
    */
    routes = nbr_table_get_from_lladdr(nbr_routes,
    7040:	482e      	ldr	r0, [pc, #184]	; (70fc <uip_ds6_route_add+0xec>)
    7042:	1c39      	adds	r1, r7, #0
    7044:	4b2e      	ldr	r3, [pc, #184]	; (7100 <uip_ds6_route_add+0xf0>)
    7046:	4798      	blx	r3
    7048:	1e04      	subs	r4, r0, #0
                                       (linkaddr_t *)nexthop_lladdr);

    if(routes == NULL) {
    704a:	d10a      	bne.n	7062 <uip_ds6_route_add+0x52>
      /* If the neighbor did not have an entry in our neighbor table,
         we create one. The nbr_table_add_lladdr() function returns a
         pointer to a pointer that we may use for our own purposes. We
         initialize this pointer with the list of routing entries that
         are attached to this neighbor. */
      routes = nbr_table_add_lladdr(nbr_routes,
    704c:	482b      	ldr	r0, [pc, #172]	; (70fc <uip_ds6_route_add+0xec>)
    704e:	1c39      	adds	r1, r7, #0
    7050:	4b2c      	ldr	r3, [pc, #176]	; (7104 <uip_ds6_route_add+0xf4>)
    7052:	4798      	blx	r3
    7054:	1e04      	subs	r4, r0, #0
                                    (linkaddr_t *)nexthop_lladdr);
      if(routes == NULL) {
    7056:	d042      	beq.n	70de <uip_ds6_route_add+0xce>
        /* This should not happen, as we explicitly deallocated one
           route table entry above. */
        PRINTF("uip_ds6_route_add: could not allocate neighbor table entry\n\r");
        return NULL;
      }
      LIST_STRUCT_INIT(routes, route_list);
    7058:	6060      	str	r0, [r4, #4]
    705a:	2300      	movs	r3, #0
    705c:	6003      	str	r3, [r0, #0]
    705e:	4b2a      	ldr	r3, [pc, #168]	; (7108 <uip_ds6_route_add+0xf8>)
    7060:	4798      	blx	r3
    }

    /* Allocate a routing entry and populate it. */
    r = memb_alloc(&routememb);
    7062:	482a      	ldr	r0, [pc, #168]	; (710c <uip_ds6_route_add+0xfc>)
    7064:	4b2a      	ldr	r3, [pc, #168]	; (7110 <uip_ds6_route_add+0x100>)
    7066:	4798      	blx	r3
    7068:	1e06      	subs	r6, r0, #0

    if(r == NULL) {
    706a:	d03a      	beq.n	70e2 <uip_ds6_route_add+0xd2>
         route table entry above. */
      PRINTF("uip_ds6_route_add: could not allocate route\n\r");
      return NULL;
    }

    list_add(routelist, r);
    706c:	4829      	ldr	r0, [pc, #164]	; (7114 <uip_ds6_route_add+0x104>)
    706e:	1c31      	adds	r1, r6, #0
    7070:	4b29      	ldr	r3, [pc, #164]	; (7118 <uip_ds6_route_add+0x108>)
    7072:	4798      	blx	r3

    nbrr = memb_alloc(&neighborroutememb);
    7074:	4829      	ldr	r0, [pc, #164]	; (711c <uip_ds6_route_add+0x10c>)
    7076:	4b26      	ldr	r3, [pc, #152]	; (7110 <uip_ds6_route_add+0x100>)
    7078:	4798      	blx	r3
    707a:	1e01      	subs	r1, r0, #0
    if(nbrr == NULL) {
    707c:	d105      	bne.n	708a <uip_ds6_route_add+0x7a>
      /* This should not happen, as we explicitly deallocated one
         route table entry above. */
      PRINTF("uip_ds6_route_add: could not allocate neighbor route list entry\n\r");
      memb_free(&routememb, r);
    707e:	4823      	ldr	r0, [pc, #140]	; (710c <uip_ds6_route_add+0xfc>)
    7080:	1c31      	adds	r1, r6, #0
    7082:	4b27      	ldr	r3, [pc, #156]	; (7120 <uip_ds6_route_add+0x110>)
    7084:	4798      	blx	r3
      return NULL;
    7086:	2000      	movs	r0, #0
    7088:	e02c      	b.n	70e4 <uip_ds6_route_add+0xd4>
    }

    nbrr->route = r;
    708a:	6046      	str	r6, [r0, #4]
    /* Add the route to this neighbor */
    list_add(routes->route_list, nbrr);
    708c:	6860      	ldr	r0, [r4, #4]
    708e:	4b22      	ldr	r3, [pc, #136]	; (7118 <uip_ds6_route_add+0x108>)
    7090:	4798      	blx	r3
    r->neighbor_routes = routes;
    7092:	6074      	str	r4, [r6, #4]
    num_routes++;
    7094:	4a16      	ldr	r2, [pc, #88]	; (70f0 <uip_ds6_route_add+0xe0>)
    7096:	6813      	ldr	r3, [r2, #0]
    7098:	3301      	adds	r3, #1
    709a:	6013      	str	r3, [r2, #0]

    PRINTF("uip_ds6_route_add num %d\n\r", num_routes);
  }

  uip_ipaddr_copy(&(r->ipaddr), ipaddr);
    709c:	1c30      	adds	r0, r6, #0
    709e:	3008      	adds	r0, #8
    70a0:	9c00      	ldr	r4, [sp, #0]
    70a2:	1c21      	adds	r1, r4, #0
    70a4:	2210      	movs	r2, #16
    70a6:	4b1f      	ldr	r3, [pc, #124]	; (7124 <uip_ds6_route_add+0x114>)
    70a8:	4798      	blx	r3
  r->length = length;
    70aa:	2324      	movs	r3, #36	; 0x24
    70ac:	54f5      	strb	r5, [r6, r3]

#ifdef UIP_DS6_ROUTE_STATE_TYPE
  memset(&r->state, 0, sizeof(UIP_DS6_ROUTE_STATE_TYPE));
    70ae:	1c32      	adds	r2, r6, #0
    70b0:	2300      	movs	r3, #0
    70b2:	7633      	strb	r3, [r6, #24]
    70b4:	7673      	strb	r3, [r6, #25]
    70b6:	76b3      	strb	r3, [r6, #26]
    70b8:	76f3      	strb	r3, [r6, #27]
    70ba:	7733      	strb	r3, [r6, #28]
    70bc:	7773      	strb	r3, [r6, #29]
    70be:	77b3      	strb	r3, [r6, #30]
    70c0:	77f3      	strb	r3, [r6, #31]
    70c2:	3218      	adds	r2, #24
    70c4:	7213      	strb	r3, [r2, #8]
    70c6:	7253      	strb	r3, [r2, #9]
    70c8:	7293      	strb	r3, [r2, #10]
    70ca:	72d3      	strb	r3, [r2, #11]
  PRINT6ADDR(nexthop);
  PRINTF("\n\r");
  ANNOTATE("#L %u 1;blue\n\r", nexthop->u8[sizeof(uip_ipaddr_t) - 1]);

#if UIP_DS6_NOTIFICATIONS
  call_route_callback(UIP_DS6_NOTIFICATION_ROUTE_ADD, ipaddr, nexthop);
    70cc:	2002      	movs	r0, #2
    70ce:	1c21      	adds	r1, r4, #0
    70d0:	9a01      	ldr	r2, [sp, #4]
    70d2:	4b15      	ldr	r3, [pc, #84]	; (7128 <uip_ds6_route_add+0x118>)
    70d4:	4798      	blx	r3
#endif

#if DEBUG != DEBUG_NONE
  assert_nbr_routes_list_sane();
#endif /* DEBUG != DEBUG_NONE */
  return r;
    70d6:	1c30      	adds	r0, r6, #0
    70d8:	e004      	b.n	70e4 <uip_ds6_route_add+0xd4>
  const uip_lladdr_t *nexthop_lladdr = uip_ds6_nbr_lladdr_from_ipaddr(nexthop);
  if(nexthop_lladdr == NULL) {
    PRINTF("uip_ds6_route_add: neighbor link-local address unknown for ");
    PRINT6ADDR(nexthop);
    PRINTF("\n\r");
    return NULL;
    70da:	2000      	movs	r0, #0
    70dc:	e002      	b.n	70e4 <uip_ds6_route_add+0xd4>
                                    (linkaddr_t *)nexthop_lladdr);
      if(routes == NULL) {
        /* This should not happen, as we explicitly deallocated one
           route table entry above. */
        PRINTF("uip_ds6_route_add: could not allocate neighbor table entry\n\r");
        return NULL;
    70de:	2000      	movs	r0, #0
    70e0:	e000      	b.n	70e4 <uip_ds6_route_add+0xd4>

    if(r == NULL) {
      /* This should not happen, as we explicitly deallocated one
         route table entry above. */
      PRINTF("uip_ds6_route_add: could not allocate route\n\r");
      return NULL;
    70e2:	2000      	movs	r0, #0

#if DEBUG != DEBUG_NONE
  assert_nbr_routes_list_sane();
#endif /* DEBUG != DEBUG_NONE */
  return r;
}
    70e4:	b003      	add	sp, #12
    70e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    70e8:	00006be1 	.word	0x00006be1
    70ec:	00006e79 	.word	0x00006e79
    70f0:	2000087c 	.word	0x2000087c
    70f4:	00006e51 	.word	0x00006e51
    70f8:	00006efd 	.word	0x00006efd
    70fc:	2000004c 	.word	0x2000004c
    7100:	0000bd19 	.word	0x0000bd19
    7104:	0000bb91 	.word	0x0000bb91
    7108:	00005711 	.word	0x00005711
    710c:	2000005c 	.word	0x2000005c
    7110:	000057ed 	.word	0x000057ed
    7114:	20000928 	.word	0x20000928
    7118:	00005769 	.word	0x00005769
    711c:	20000068 	.word	0x20000068
    7120:	00005831 	.word	0x00005831
    7124:	00010b2f 	.word	0x00010b2f
    7128:	00006d7d 	.word	0x00006d7d

0000712c <uip_ds6_defrt_rm>:
  return d;
}
/*---------------------------------------------------------------------------*/
void
uip_ds6_defrt_rm(uip_ds6_defrt_t *defrt)
{
    712c:	b538      	push	{r3, r4, r5, lr}
    712e:	1c04      	adds	r4, r0, #0
#if DEBUG != DEBUG_NONE
  assert_nbr_routes_list_sane();
#endif /* DEBUG != DEBUG_NONE */

  /* Make sure that the defrt is in the list before we remove it. */
  for(d = list_head(defaultrouterlist);
    7130:	480e      	ldr	r0, [pc, #56]	; (716c <uip_ds6_defrt_rm+0x40>)
    7132:	4b0f      	ldr	r3, [pc, #60]	; (7170 <uip_ds6_defrt_rm+0x44>)
    7134:	4798      	blx	r3
    7136:	2800      	cmp	r0, #0
    7138:	d016      	beq.n	7168 <uip_ds6_defrt_rm+0x3c>
      d != NULL;
      d = list_item_next(d)) {
    if(d == defrt) {
    713a:	42a0      	cmp	r0, r4
    713c:	d003      	beq.n	7146 <uip_ds6_defrt_rm+0x1a>
#endif /* DEBUG != DEBUG_NONE */

  /* Make sure that the defrt is in the list before we remove it. */
  for(d = list_head(defaultrouterlist);
      d != NULL;
      d = list_item_next(d)) {
    713e:	4d0d      	ldr	r5, [pc, #52]	; (7174 <uip_ds6_defrt_rm+0x48>)
    7140:	e00f      	b.n	7162 <uip_ds6_defrt_rm+0x36>
    if(d == defrt) {
    7142:	4284      	cmp	r4, r0
    7144:	d10d      	bne.n	7162 <uip_ds6_defrt_rm+0x36>
      PRINTF("Removing default route\n\r");
      list_remove(defaultrouterlist, defrt);
    7146:	4809      	ldr	r0, [pc, #36]	; (716c <uip_ds6_defrt_rm+0x40>)
    7148:	1c21      	adds	r1, r4, #0
    714a:	4b0b      	ldr	r3, [pc, #44]	; (7178 <uip_ds6_defrt_rm+0x4c>)
    714c:	4798      	blx	r3
      memb_free(&defaultroutermemb, defrt);
    714e:	480b      	ldr	r0, [pc, #44]	; (717c <uip_ds6_defrt_rm+0x50>)
    7150:	1c21      	adds	r1, r4, #0
    7152:	4b0b      	ldr	r3, [pc, #44]	; (7180 <uip_ds6_defrt_rm+0x54>)
    7154:	4798      	blx	r3
      ANNOTATE("#L %u 0\n\r", defrt->ipaddr.u8[sizeof(uip_ipaddr_t) - 1]);
#if UIP_DS6_NOTIFICATIONS
      call_route_callback(UIP_DS6_NOTIFICATION_DEFRT_RM,
    7156:	1d22      	adds	r2, r4, #4
    7158:	2001      	movs	r0, #1
    715a:	1c11      	adds	r1, r2, #0
    715c:	4b09      	ldr	r3, [pc, #36]	; (7184 <uip_ds6_defrt_rm+0x58>)
    715e:	4798      	blx	r3
			  &defrt->ipaddr, &defrt->ipaddr);
#endif
      return;
    7160:	e002      	b.n	7168 <uip_ds6_defrt_rm+0x3c>
#endif /* DEBUG != DEBUG_NONE */

  /* Make sure that the defrt is in the list before we remove it. */
  for(d = list_head(defaultrouterlist);
      d != NULL;
      d = list_item_next(d)) {
    7162:	47a8      	blx	r5
#if DEBUG != DEBUG_NONE
  assert_nbr_routes_list_sane();
#endif /* DEBUG != DEBUG_NONE */

  /* Make sure that the defrt is in the list before we remove it. */
  for(d = list_head(defaultrouterlist);
    7164:	2800      	cmp	r0, #0
    7166:	d1ec      	bne.n	7142 <uip_ds6_defrt_rm+0x16>
  }
#if DEBUG != DEBUG_NONE
  assert_nbr_routes_list_sane();
#endif /* DEBUG != DEBUG_NONE */

}
    7168:	bd38      	pop	{r3, r4, r5, pc}
    716a:	46c0      	nop			; (mov r8, r8)
    716c:	20000884 	.word	0x20000884
    7170:	00005719 	.word	0x00005719
    7174:	000057c1 	.word	0x000057c1
    7178:	00005735 	.word	0x00005735
    717c:	20000040 	.word	0x20000040
    7180:	00005831 	.word	0x00005831
    7184:	00006d7d 	.word	0x00006d7d

00007188 <uip_ds6_defrt_lookup>:
/*---------------------------------------------------------------------------*/
uip_ds6_defrt_t *
uip_ds6_defrt_lookup(uip_ipaddr_t *ipaddr)
{
    7188:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    718a:	1c05      	adds	r5, r0, #0
  uip_ds6_defrt_t *d;
  for(d = list_head(defaultrouterlist);
    718c:	480b      	ldr	r0, [pc, #44]	; (71bc <uip_ds6_defrt_lookup+0x34>)
    718e:	4b0c      	ldr	r3, [pc, #48]	; (71c0 <uip_ds6_defrt_lookup+0x38>)
    7190:	4798      	blx	r3
    7192:	1e04      	subs	r4, r0, #0
    7194:	d00d      	beq.n	71b2 <uip_ds6_defrt_lookup+0x2a>
      d != NULL;
      d = list_item_next(d)) {
    if(uip_ipaddr_cmp(&d->ipaddr, ipaddr)) {
    7196:	4e0b      	ldr	r6, [pc, #44]	; (71c4 <uip_ds6_defrt_lookup+0x3c>)
uip_ds6_defrt_lookup(uip_ipaddr_t *ipaddr)
{
  uip_ds6_defrt_t *d;
  for(d = list_head(defaultrouterlist);
      d != NULL;
      d = list_item_next(d)) {
    7198:	4f0b      	ldr	r7, [pc, #44]	; (71c8 <uip_ds6_defrt_lookup+0x40>)
    if(uip_ipaddr_cmp(&d->ipaddr, ipaddr)) {
    719a:	1d20      	adds	r0, r4, #4
    719c:	1c29      	adds	r1, r5, #0
    719e:	2210      	movs	r2, #16
    71a0:	47b0      	blx	r6
    71a2:	2800      	cmp	r0, #0
    71a4:	d007      	beq.n	71b6 <uip_ds6_defrt_lookup+0x2e>
uip_ds6_defrt_lookup(uip_ipaddr_t *ipaddr)
{
  uip_ds6_defrt_t *d;
  for(d = list_head(defaultrouterlist);
      d != NULL;
      d = list_item_next(d)) {
    71a6:	1c20      	adds	r0, r4, #0
    71a8:	47b8      	blx	r7
    71aa:	1e04      	subs	r4, r0, #0
/*---------------------------------------------------------------------------*/
uip_ds6_defrt_t *
uip_ds6_defrt_lookup(uip_ipaddr_t *ipaddr)
{
  uip_ds6_defrt_t *d;
  for(d = list_head(defaultrouterlist);
    71ac:	d1f5      	bne.n	719a <uip_ds6_defrt_lookup+0x12>
      d = list_item_next(d)) {
    if(uip_ipaddr_cmp(&d->ipaddr, ipaddr)) {
      return d;
    }
  }
  return NULL;
    71ae:	2000      	movs	r0, #0
    71b0:	e002      	b.n	71b8 <uip_ds6_defrt_lookup+0x30>
    71b2:	2000      	movs	r0, #0
    71b4:	e000      	b.n	71b8 <uip_ds6_defrt_lookup+0x30>
    71b6:	1c20      	adds	r0, r4, #0
}
    71b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    71ba:	46c0      	nop			; (mov r8, r8)
    71bc:	20000884 	.word	0x20000884
    71c0:	00005719 	.word	0x00005719
    71c4:	00010b11 	.word	0x00010b11
    71c8:	000057c1 	.word	0x000057c1

000071cc <uip_ds6_defrt_add>:
  rm_routelist(routes);
}
/*---------------------------------------------------------------------------*/
uip_ds6_defrt_t *
uip_ds6_defrt_add(uip_ipaddr_t *ipaddr, unsigned long interval)
{
    71cc:	b570      	push	{r4, r5, r6, lr}
    71ce:	1c05      	adds	r5, r0, #0
    71d0:	1c0e      	adds	r6, r1, #0
#if DEBUG != DEBUG_NONE
  assert_nbr_routes_list_sane();
#endif /* DEBUG != DEBUG_NONE */

  PRINTF("uip_ds6_defrt_add\n\r");
  d = uip_ds6_defrt_lookup(ipaddr);
    71d2:	4b1a      	ldr	r3, [pc, #104]	; (723c <uip_ds6_defrt_add+0x70>)
    71d4:	4798      	blx	r3
    71d6:	1e04      	subs	r4, r0, #0
  if(d == NULL) {
    71d8:	d108      	bne.n	71ec <uip_ds6_defrt_add+0x20>
    d = memb_alloc(&defaultroutermemb);
    71da:	4819      	ldr	r0, [pc, #100]	; (7240 <uip_ds6_defrt_add+0x74>)
    71dc:	4b19      	ldr	r3, [pc, #100]	; (7244 <uip_ds6_defrt_add+0x78>)
    71de:	4798      	blx	r3
    71e0:	1e04      	subs	r4, r0, #0
    if(d == NULL) {
    71e2:	d028      	beq.n	7236 <uip_ds6_defrt_add+0x6a>
      PRINTF("uip_ds6_defrt_add: adding default route to ");
      PRINT6ADDR(ipaddr);
      PRINTF("\n\r");
    }

    list_push(defaultrouterlist, d);
    71e4:	4818      	ldr	r0, [pc, #96]	; (7248 <uip_ds6_defrt_add+0x7c>)
    71e6:	1c21      	adds	r1, r4, #0
    71e8:	4b18      	ldr	r3, [pc, #96]	; (724c <uip_ds6_defrt_add+0x80>)
    71ea:	4798      	blx	r3
  }

  if(ipaddr == NULL) {
    71ec:	2d00      	cmp	r5, #0
    71ee:	d10a      	bne.n	7206 <uip_ds6_defrt_add+0x3a>
       route, this is an indication that we want to force packets to
       go out to the fallback interface. If so, we add an unspecified
       route to the list of default routes. uip_ds6_defrt_choose()
       will trap this and ensure that packets go to the fallback
       interface. */
    uip_create_unspecified(&d->ipaddr);
    71f0:	2300      	movs	r3, #0
    71f2:	80a3      	strh	r3, [r4, #4]
    71f4:	80e3      	strh	r3, [r4, #6]
    71f6:	8123      	strh	r3, [r4, #8]
    71f8:	8163      	strh	r3, [r4, #10]
    71fa:	81a3      	strh	r3, [r4, #12]
    71fc:	81e3      	strh	r3, [r4, #14]
    71fe:	8223      	strh	r3, [r4, #16]
    7200:	8263      	strh	r3, [r4, #18]
    ipaddr = &d->ipaddr;
    7202:	1d25      	adds	r5, r4, #4
    7204:	e004      	b.n	7210 <uip_ds6_defrt_add+0x44>
  } else {
    uip_ipaddr_copy(&d->ipaddr, ipaddr);
    7206:	1d20      	adds	r0, r4, #4
    7208:	1c29      	adds	r1, r5, #0
    720a:	2210      	movs	r2, #16
    720c:	4b10      	ldr	r3, [pc, #64]	; (7250 <uip_ds6_defrt_add+0x84>)
    720e:	4798      	blx	r3
  }

  if(interval != 0) {
    7210:	2e00      	cmp	r6, #0
    7212:	d007      	beq.n	7224 <uip_ds6_defrt_add+0x58>
    stimer_set(&d->lifetime, interval);
    7214:	1c20      	adds	r0, r4, #0
    7216:	3014      	adds	r0, #20
    7218:	1c31      	adds	r1, r6, #0
    721a:	4b0e      	ldr	r3, [pc, #56]	; (7254 <uip_ds6_defrt_add+0x88>)
    721c:	4798      	blx	r3
    d->isinfinite = 0;
    721e:	2300      	movs	r3, #0
    7220:	7723      	strb	r3, [r4, #28]
    7222:	e001      	b.n	7228 <uip_ds6_defrt_add+0x5c>
  } else {
    d->isinfinite = 1;
    7224:	2301      	movs	r3, #1
    7226:	7723      	strb	r3, [r4, #28]
  }

  ANNOTATE("#L %u 1\n\r", ipaddr->u8[sizeof(uip_ipaddr_t) - 1]);

#if UIP_DS6_NOTIFICATIONS
  call_route_callback(UIP_DS6_NOTIFICATION_DEFRT_ADD, ipaddr, ipaddr);
    7228:	2000      	movs	r0, #0
    722a:	1c29      	adds	r1, r5, #0
    722c:	1c2a      	adds	r2, r5, #0
    722e:	4b0a      	ldr	r3, [pc, #40]	; (7258 <uip_ds6_defrt_add+0x8c>)
    7230:	4798      	blx	r3

#if DEBUG != DEBUG_NONE
  assert_nbr_routes_list_sane();
#endif /* DEBUG != DEBUG_NONE */

  return d;
    7232:	1c20      	adds	r0, r4, #0
    7234:	e000      	b.n	7238 <uip_ds6_defrt_add+0x6c>
    d = memb_alloc(&defaultroutermemb);
    if(d == NULL) {
      PRINTF("uip_ds6_defrt_add: could not add default route to ");
      PRINT6ADDR(ipaddr);
      PRINTF(", out of memory\n\r");
      return NULL;
    7236:	2000      	movs	r0, #0
#if DEBUG != DEBUG_NONE
  assert_nbr_routes_list_sane();
#endif /* DEBUG != DEBUG_NONE */

  return d;
}
    7238:	bd70      	pop	{r4, r5, r6, pc}
    723a:	46c0      	nop			; (mov r8, r8)
    723c:	00007189 	.word	0x00007189
    7240:	20000040 	.word	0x20000040
    7244:	000057ed 	.word	0x000057ed
    7248:	20000884 	.word	0x20000884
    724c:	00005791 	.word	0x00005791
    7250:	00010b2f 	.word	0x00010b2f
    7254:	0000ed0d 	.word	0x0000ed0d
    7258:	00006d7d 	.word	0x00006d7d

0000725c <uip_ds6_defrt_choose>:
  return NULL;
}
/*---------------------------------------------------------------------------*/
uip_ipaddr_t *
uip_ds6_defrt_choose(void)
{
    725c:	b5f0      	push	{r4, r5, r6, r7, lr}
    725e:	4647      	mov	r7, r8
    7260:	b480      	push	{r7}
    7262:	b084      	sub	sp, #16

  /* Check if we have a default route that go to the unspecified IP
     address. This signals that we have set up a route that should
     always go to the fallback interface. If so, we return NULL for
     any route. */
  uip_create_unspecified(&unspec);
    7264:	2300      	movs	r3, #0
    7266:	466a      	mov	r2, sp
    7268:	8013      	strh	r3, [r2, #0]
    726a:	8053      	strh	r3, [r2, #2]
    726c:	8093      	strh	r3, [r2, #4]
    726e:	80d3      	strh	r3, [r2, #6]
    7270:	8113      	strh	r3, [r2, #8]
    7272:	8153      	strh	r3, [r2, #10]
    7274:	8193      	strh	r3, [r2, #12]
    7276:	81d3      	strh	r3, [r2, #14]
  for(d = list_head(defaultrouterlist);
    7278:	4818      	ldr	r0, [pc, #96]	; (72dc <uip_ds6_defrt_choose+0x80>)
    727a:	4b19      	ldr	r3, [pc, #100]	; (72e0 <uip_ds6_defrt_choose+0x84>)
    727c:	4798      	blx	r3
    727e:	1e04      	subs	r4, r0, #0
    7280:	d00b      	beq.n	729a <uip_ds6_defrt_choose+0x3e>
      d != NULL;
      d = list_item_next(d)) {
    if(uip_ipaddr_cmp(&d->ipaddr, &unspec)) {
    7282:	4d18      	ldr	r5, [pc, #96]	; (72e4 <uip_ds6_defrt_choose+0x88>)
     always go to the fallback interface. If so, we return NULL for
     any route. */
  uip_create_unspecified(&unspec);
  for(d = list_head(defaultrouterlist);
      d != NULL;
      d = list_item_next(d)) {
    7284:	4e18      	ldr	r6, [pc, #96]	; (72e8 <uip_ds6_defrt_choose+0x8c>)
    if(uip_ipaddr_cmp(&d->ipaddr, &unspec)) {
    7286:	1d20      	adds	r0, r4, #4
    7288:	4669      	mov	r1, sp
    728a:	2210      	movs	r2, #16
    728c:	47a8      	blx	r5
    728e:	2800      	cmp	r0, #0
    7290:	d01d      	beq.n	72ce <uip_ds6_defrt_choose+0x72>
     always go to the fallback interface. If so, we return NULL for
     any route. */
  uip_create_unspecified(&unspec);
  for(d = list_head(defaultrouterlist);
      d != NULL;
      d = list_item_next(d)) {
    7292:	1c20      	adds	r0, r4, #0
    7294:	47b0      	blx	r6
    7296:	1e04      	subs	r4, r0, #0
  /* Check if we have a default route that go to the unspecified IP
     address. This signals that we have set up a route that should
     always go to the fallback interface. If so, we return NULL for
     any route. */
  uip_create_unspecified(&unspec);
  for(d = list_head(defaultrouterlist);
    7298:	d1f5      	bne.n	7286 <uip_ds6_defrt_choose+0x2a>
    if(uip_ipaddr_cmp(&d->ipaddr, &unspec)) {
      return NULL;
    }
  }
  addr = NULL;
  for(d = list_head(defaultrouterlist);
    729a:	4810      	ldr	r0, [pc, #64]	; (72dc <uip_ds6_defrt_choose+0x80>)
    729c:	4b10      	ldr	r3, [pc, #64]	; (72e0 <uip_ds6_defrt_choose+0x84>)
    729e:	4798      	blx	r3
    72a0:	1e04      	subs	r4, r0, #0
    72a2:	d011      	beq.n	72c8 <uip_ds6_defrt_choose+0x6c>
      d != NULL;
      d = list_item_next(d)) {
    PRINTF("Defrt, IP address ");
    PRINT6ADDR(&d->ipaddr);
    PRINTF("\n\r");
    bestnbr = uip_ds6_nbr_lookup(&d->ipaddr);
    72a4:	4e11      	ldr	r6, [pc, #68]	; (72ec <uip_ds6_defrt_choose+0x90>)
    if(bestnbr != NULL && bestnbr->state != NBR_INCOMPLETE) {
    72a6:	2322      	movs	r3, #34	; 0x22
    72a8:	4698      	mov	r8, r3
    }
  }
  addr = NULL;
  for(d = list_head(defaultrouterlist);
      d != NULL;
      d = list_item_next(d)) {
    72aa:	4f0f      	ldr	r7, [pc, #60]	; (72e8 <uip_ds6_defrt_choose+0x8c>)
    PRINTF("Defrt, IP address ");
    PRINT6ADDR(&d->ipaddr);
    PRINTF("\n\r");
    bestnbr = uip_ds6_nbr_lookup(&d->ipaddr);
    72ac:	1d25      	adds	r5, r4, #4
    72ae:	1c28      	adds	r0, r5, #0
    72b0:	47b0      	blx	r6
    if(bestnbr != NULL && bestnbr->state != NBR_INCOMPLETE) {
    72b2:	2800      	cmp	r0, #0
    72b4:	d003      	beq.n	72be <uip_ds6_defrt_choose+0x62>
    72b6:	4643      	mov	r3, r8
    72b8:	5cc3      	ldrb	r3, [r0, r3]
    72ba:	2b00      	cmp	r3, #0
    72bc:	d109      	bne.n	72d2 <uip_ds6_defrt_choose+0x76>
    }
  }
  addr = NULL;
  for(d = list_head(defaultrouterlist);
      d != NULL;
      d = list_item_next(d)) {
    72be:	1c20      	adds	r0, r4, #0
    72c0:	47b8      	blx	r7
    72c2:	1e04      	subs	r4, r0, #0
    if(uip_ipaddr_cmp(&d->ipaddr, &unspec)) {
      return NULL;
    }
  }
  addr = NULL;
  for(d = list_head(defaultrouterlist);
    72c4:	d1f2      	bne.n	72ac <uip_ds6_defrt_choose+0x50>
    72c6:	e000      	b.n	72ca <uip_ds6_defrt_choose+0x6e>
      d = list_item_next(d)) {
    if(uip_ipaddr_cmp(&d->ipaddr, &unspec)) {
      return NULL;
    }
  }
  addr = NULL;
    72c8:	2500      	movs	r5, #0
      PRINTF("Defrt INCOMPLETE found, IP address ");
      PRINT6ADDR(&d->ipaddr);
      PRINTF("\n\r");
    }
  }
  return addr;
    72ca:	1c28      	adds	r0, r5, #0
    72cc:	e002      	b.n	72d4 <uip_ds6_defrt_choose+0x78>
  uip_create_unspecified(&unspec);
  for(d = list_head(defaultrouterlist);
      d != NULL;
      d = list_item_next(d)) {
    if(uip_ipaddr_cmp(&d->ipaddr, &unspec)) {
      return NULL;
    72ce:	2000      	movs	r0, #0
    72d0:	e000      	b.n	72d4 <uip_ds6_defrt_choose+0x78>
      d != NULL;
      d = list_item_next(d)) {
    PRINTF("Defrt, IP address ");
    PRINT6ADDR(&d->ipaddr);
    PRINTF("\n\r");
    bestnbr = uip_ds6_nbr_lookup(&d->ipaddr);
    72d2:	1c28      	adds	r0, r5, #0
      PRINT6ADDR(&d->ipaddr);
      PRINTF("\n\r");
    }
  }
  return addr;
}
    72d4:	b004      	add	sp, #16
    72d6:	bc04      	pop	{r2}
    72d8:	4690      	mov	r8, r2
    72da:	bdf0      	pop	{r4, r5, r6, r7, pc}
    72dc:	20000884 	.word	0x20000884
    72e0:	00005719 	.word	0x00005719
    72e4:	00010b11 	.word	0x00010b11
    72e8:	000057c1 	.word	0x000057c1
    72ec:	00006b65 	.word	0x00006b65

000072f0 <uip_ds6_defrt_periodic>:
/*---------------------------------------------------------------------------*/
void
uip_ds6_defrt_periodic(void)
{
    72f0:	b538      	push	{r3, r4, r5, lr}
  uip_ds6_defrt_t *d;
  d = list_head(defaultrouterlist);
    72f2:	480e      	ldr	r0, [pc, #56]	; (732c <uip_ds6_defrt_periodic+0x3c>)
    72f4:	4b0e      	ldr	r3, [pc, #56]	; (7330 <uip_ds6_defrt_periodic+0x40>)
    72f6:	4798      	blx	r3
    72f8:	1e04      	subs	r4, r0, #0
  while(d != NULL) {
    72fa:	d016      	beq.n	732a <uip_ds6_defrt_periodic+0x3a>
    if(!d->isinfinite &&
       stimer_expired(&d->lifetime)) {
    72fc:	4d0d      	ldr	r5, [pc, #52]	; (7334 <uip_ds6_defrt_periodic+0x44>)
uip_ds6_defrt_periodic(void)
{
  uip_ds6_defrt_t *d;
  d = list_head(defaultrouterlist);
  while(d != NULL) {
    if(!d->isinfinite &&
    72fe:	7f23      	ldrb	r3, [r4, #28]
    7300:	2b00      	cmp	r3, #0
    7302:	d10c      	bne.n	731e <uip_ds6_defrt_periodic+0x2e>
       stimer_expired(&d->lifetime)) {
    7304:	1c20      	adds	r0, r4, #0
    7306:	3014      	adds	r0, #20
    7308:	47a8      	blx	r5
uip_ds6_defrt_periodic(void)
{
  uip_ds6_defrt_t *d;
  d = list_head(defaultrouterlist);
  while(d != NULL) {
    if(!d->isinfinite &&
    730a:	2800      	cmp	r0, #0
    730c:	d007      	beq.n	731e <uip_ds6_defrt_periodic+0x2e>
       stimer_expired(&d->lifetime)) {
      PRINTF("uip_ds6_defrt_periodic: defrt lifetime expired\n\r");
      uip_ds6_defrt_rm(d);
    730e:	1c20      	adds	r0, r4, #0
    7310:	4b09      	ldr	r3, [pc, #36]	; (7338 <uip_ds6_defrt_periodic+0x48>)
    7312:	4798      	blx	r3
      d = list_head(defaultrouterlist);
    7314:	4805      	ldr	r0, [pc, #20]	; (732c <uip_ds6_defrt_periodic+0x3c>)
    7316:	4b06      	ldr	r3, [pc, #24]	; (7330 <uip_ds6_defrt_periodic+0x40>)
    7318:	4798      	blx	r3
    731a:	1c04      	adds	r4, r0, #0
    731c:	e003      	b.n	7326 <uip_ds6_defrt_periodic+0x36>
    } else {
      d = list_item_next(d);
    731e:	1c20      	adds	r0, r4, #0
    7320:	4b06      	ldr	r3, [pc, #24]	; (733c <uip_ds6_defrt_periodic+0x4c>)
    7322:	4798      	blx	r3
    7324:	1c04      	adds	r4, r0, #0
void
uip_ds6_defrt_periodic(void)
{
  uip_ds6_defrt_t *d;
  d = list_head(defaultrouterlist);
  while(d != NULL) {
    7326:	2c00      	cmp	r4, #0
    7328:	d1e9      	bne.n	72fe <uip_ds6_defrt_periodic+0xe>
      d = list_head(defaultrouterlist);
    } else {
      d = list_item_next(d);
    }
  }
}
    732a:	bd38      	pop	{r3, r4, r5, pc}
    732c:	20000884 	.word	0x20000884
    7330:	00005719 	.word	0x00005719
    7334:	0000ed21 	.word	0x0000ed21
    7338:	0000712d 	.word	0x0000712d
    733c:	000057c1 	.word	0x000057c1

00007340 <uip_ds6_list_loop>:
/*---------------------------------------------------------------------------*/
uint8_t
uip_ds6_list_loop(uip_ds6_element_t *list, uint8_t size,
                  uint16_t elementsize, uip_ipaddr_t *ipaddr,
                  uint8_t ipaddrlen, uip_ds6_element_t **out_element)
{
    7340:	b5f0      	push	{r4, r5, r6, r7, lr}
    7342:	4647      	mov	r7, r8
    7344:	b480      	push	{r7}
    7346:	b082      	sub	sp, #8
    7348:	1c04      	adds	r4, r0, #0
    734a:	1c15      	adds	r5, r2, #0
    734c:	9300      	str	r3, [sp, #0]
    734e:	ab08      	add	r3, sp, #32
    7350:	781a      	ldrb	r2, [r3, #0]
    7352:	9e09      	ldr	r6, [sp, #36]	; 0x24
  uip_ds6_element_t *element;

  *out_element = NULL;
    7354:	2300      	movs	r3, #0
    7356:	6033      	str	r3, [r6, #0]

  for(element = list;
      element <
      (uip_ds6_element_t *)((uint8_t *)list + (size * elementsize));
    7358:	4369      	muls	r1, r5
    735a:	1847      	adds	r7, r0, r1
{
  uip_ds6_element_t *element;

  *out_element = NULL;

  for(element = list;
    735c:	42b8      	cmp	r0, r7
    735e:	d218      	bcs.n	7392 <uip_ds6_list_loop+0x52>
      element <
      (uip_ds6_element_t *)((uint8_t *)list + (size * elementsize));
      element = (uip_ds6_element_t *)((uint8_t *)element + elementsize)) {
    if(element->isused) {
      if(uip_ipaddr_prefixcmp(&element->ipaddr, ipaddr, ipaddrlen)) {
    7360:	08d3      	lsrs	r3, r2, #3
    7362:	9301      	str	r3, [sp, #4]
    7364:	4b0d      	ldr	r3, [pc, #52]	; (739c <uip_ds6_list_loop+0x5c>)
    7366:	4698      	mov	r8, r3

  for(element = list;
      element <
      (uip_ds6_element_t *)((uint8_t *)list + (size * elementsize));
      element = (uip_ds6_element_t *)((uint8_t *)element + elementsize)) {
    if(element->isused) {
    7368:	7823      	ldrb	r3, [r4, #0]
    736a:	2b00      	cmp	r3, #0
    736c:	d007      	beq.n	737e <uip_ds6_list_loop+0x3e>
    736e:	1c60      	adds	r0, r4, #1
      if(uip_ipaddr_prefixcmp(&element->ipaddr, ipaddr, ipaddrlen)) {
    7370:	9900      	ldr	r1, [sp, #0]
    7372:	9a01      	ldr	r2, [sp, #4]
    7374:	47c0      	blx	r8
    7376:	2800      	cmp	r0, #0
    7378:	d102      	bne.n	7380 <uip_ds6_list_loop+0x40>
        *out_element = element;
    737a:	6034      	str	r4, [r6, #0]
        return FOUND;
    737c:	e00a      	b.n	7394 <uip_ds6_list_loop+0x54>
      }
    } else {
      *out_element = element;
    737e:	6034      	str	r4, [r6, #0]
    7380:	1964      	adds	r4, r4, r5
{
  uip_ds6_element_t *element;

  *out_element = NULL;

  for(element = list;
    7382:	42bc      	cmp	r4, r7
    7384:	d3f0      	bcc.n	7368 <uip_ds6_list_loop+0x28>
    } else {
      *out_element = element;
    }
  }

  return *out_element != NULL ? FREESPACE : NOSPACE;
    7386:	6830      	ldr	r0, [r6, #0]
    7388:	1e43      	subs	r3, r0, #1
    738a:	4198      	sbcs	r0, r3
    738c:	2302      	movs	r3, #2
    738e:	1a18      	subs	r0, r3, r0
    7390:	e000      	b.n	7394 <uip_ds6_list_loop+0x54>
    7392:	2002      	movs	r0, #2
}
    7394:	b002      	add	sp, #8
    7396:	bc04      	pop	{r2}
    7398:	4690      	mov	r8, r2
    739a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    739c:	00010b11 	.word	0x00010b11

000073a0 <uip_ds6_prefix_add>:
/*---------------------------------------------------------------------------*/
uip_ds6_prefix_t *
uip_ds6_prefix_add(uip_ipaddr_t *ipaddr, uint8_t ipaddrlen,
                   uint8_t advertise, uint8_t flags, unsigned long vtime,
                   unsigned long ptime)
{
    73a0:	b5f0      	push	{r4, r5, r6, r7, lr}
    73a2:	b085      	sub	sp, #20
    73a4:	1c04      	adds	r4, r0, #0
    73a6:	1c0d      	adds	r5, r1, #0
    73a8:	1c16      	adds	r6, r2, #0
    73aa:	1c1f      	adds	r7, r3, #0
  if(uip_ds6_list_loop
    73ac:	9100      	str	r1, [sp, #0]
    73ae:	4b10      	ldr	r3, [pc, #64]	; (73f0 <uip_ds6_prefix_add+0x50>)
    73b0:	9301      	str	r3, [sp, #4]
    73b2:	4810      	ldr	r0, [pc, #64]	; (73f4 <uip_ds6_prefix_add+0x54>)
    73b4:	2103      	movs	r1, #3
    73b6:	2220      	movs	r2, #32
    73b8:	9403      	str	r4, [sp, #12]
    73ba:	1c23      	adds	r3, r4, #0
    73bc:	4c0e      	ldr	r4, [pc, #56]	; (73f8 <uip_ds6_prefix_add+0x58>)
    73be:	47a0      	blx	r4
    73c0:	2801      	cmp	r0, #1
    73c2:	d112      	bne.n	73ea <uip_ds6_prefix_add+0x4a>
     ((uip_ds6_element_t *)uip_ds6_prefix_list, UIP_DS6_PREFIX_NB,
      sizeof(uip_ds6_prefix_t), ipaddr, ipaddrlen,
      (uip_ds6_element_t **)&locprefix) == FREESPACE) {
    locprefix->isused = 1;
    73c4:	4c0a      	ldr	r4, [pc, #40]	; (73f0 <uip_ds6_prefix_add+0x50>)
    73c6:	2301      	movs	r3, #1
    73c8:	6822      	ldr	r2, [r4, #0]
    73ca:	7013      	strb	r3, [r2, #0]
    uip_ipaddr_copy(&locprefix->ipaddr, ipaddr);
    73cc:	6823      	ldr	r3, [r4, #0]
    73ce:	1c58      	adds	r0, r3, #1
    73d0:	9903      	ldr	r1, [sp, #12]
    73d2:	2210      	movs	r2, #16
    73d4:	4b09      	ldr	r3, [pc, #36]	; (73fc <uip_ds6_prefix_add+0x5c>)
    73d6:	4798      	blx	r3
    locprefix->length = ipaddrlen;
    73d8:	6820      	ldr	r0, [r4, #0]
    73da:	7445      	strb	r5, [r0, #17]
    locprefix->advertise = advertise;
    73dc:	7486      	strb	r6, [r0, #18]
    locprefix->l_a_reserved = flags;
    73de:	7707      	strb	r7, [r0, #28]
    locprefix->vlifetime = vtime;
    73e0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    73e2:	6143      	str	r3, [r0, #20]
    locprefix->plifetime = ptime;
    73e4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    73e6:	6183      	str	r3, [r0, #24]
    PRINTF("Adding prefix ");
    PRINT6ADDR(&locprefix->ipaddr);
    PRINTF("length %u, flags %x, Valid lifetime %lx, Preffered lifetime %lx\n\r",
       ipaddrlen, flags, vtime, ptime);
    return locprefix;
    73e8:	e000      	b.n	73ec <uip_ds6_prefix_add+0x4c>
  } else {
    PRINTF("No more space in Prefix list\n\r");
  }
  return NULL;
    73ea:	2000      	movs	r0, #0
}
    73ec:	b005      	add	sp, #20
    73ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
    73f0:	20000ac8 	.word	0x20000ac8
    73f4:	20002c50 	.word	0x20002c50
    73f8:	00007341 	.word	0x00007341
    73fc:	00010b2f 	.word	0x00010b2f

00007400 <uip_ds6_is_addr_onlink>:
}

/*---------------------------------------------------------------------------*/
uint8_t
uip_ds6_is_addr_onlink(uip_ipaddr_t *ipaddr)
{
    7400:	b5f0      	push	{r4, r5, r6, r7, lr}
    7402:	b083      	sub	sp, #12
    7404:	9001      	str	r0, [sp, #4]
  for(locprefix = uip_ds6_prefix_list;
    7406:	4c0c      	ldr	r4, [pc, #48]	; (7438 <uip_ds6_is_addr_onlink+0x38>)
    7408:	4b0c      	ldr	r3, [pc, #48]	; (743c <uip_ds6_is_addr_onlink+0x3c>)
    740a:	601c      	str	r4, [r3, #0]
      locprefix < uip_ds6_prefix_list + UIP_DS6_PREFIX_NB; locprefix++) {
    if(locprefix->isused &&
       uip_ipaddr_prefixcmp(&locprefix->ipaddr, ipaddr, locprefix->length)) {
    740c:	4d0c      	ldr	r5, [pc, #48]	; (7440 <uip_ds6_is_addr_onlink+0x40>)
/*---------------------------------------------------------------------------*/
uint8_t
uip_ds6_is_addr_onlink(uip_ipaddr_t *ipaddr)
{
  for(locprefix = uip_ds6_prefix_list;
      locprefix < uip_ds6_prefix_list + UIP_DS6_PREFIX_NB; locprefix++) {
    740e:	1c1f      	adds	r7, r3, #0

/*---------------------------------------------------------------------------*/
uint8_t
uip_ds6_is_addr_onlink(uip_ipaddr_t *ipaddr)
{
  for(locprefix = uip_ds6_prefix_list;
    7410:	4e0c      	ldr	r6, [pc, #48]	; (7444 <uip_ds6_is_addr_onlink+0x44>)
      locprefix < uip_ds6_prefix_list + UIP_DS6_PREFIX_NB; locprefix++) {
    if(locprefix->isused &&
    7412:	7823      	ldrb	r3, [r4, #0]
    7414:	2b00      	cmp	r3, #0
    7416:	d006      	beq.n	7426 <uip_ds6_is_addr_onlink+0x26>
    7418:	1c60      	adds	r0, r4, #1
       uip_ipaddr_prefixcmp(&locprefix->ipaddr, ipaddr, locprefix->length)) {
    741a:	7c62      	ldrb	r2, [r4, #17]
    741c:	08d2      	lsrs	r2, r2, #3
    741e:	9901      	ldr	r1, [sp, #4]
    7420:	47a8      	blx	r5
uint8_t
uip_ds6_is_addr_onlink(uip_ipaddr_t *ipaddr)
{
  for(locprefix = uip_ds6_prefix_list;
      locprefix < uip_ds6_prefix_list + UIP_DS6_PREFIX_NB; locprefix++) {
    if(locprefix->isused &&
    7422:	2800      	cmp	r0, #0
    7424:	d005      	beq.n	7432 <uip_ds6_is_addr_onlink+0x32>
/*---------------------------------------------------------------------------*/
uint8_t
uip_ds6_is_addr_onlink(uip_ipaddr_t *ipaddr)
{
  for(locprefix = uip_ds6_prefix_list;
      locprefix < uip_ds6_prefix_list + UIP_DS6_PREFIX_NB; locprefix++) {
    7426:	3420      	adds	r4, #32
    7428:	603c      	str	r4, [r7, #0]

/*---------------------------------------------------------------------------*/
uint8_t
uip_ds6_is_addr_onlink(uip_ipaddr_t *ipaddr)
{
  for(locprefix = uip_ds6_prefix_list;
    742a:	42b4      	cmp	r4, r6
    742c:	d3f1      	bcc.n	7412 <uip_ds6_is_addr_onlink+0x12>
    if(locprefix->isused &&
       uip_ipaddr_prefixcmp(&locprefix->ipaddr, ipaddr, locprefix->length)) {
      return 1;
    }
  }
  return 0;
    742e:	2000      	movs	r0, #0
    7430:	e000      	b.n	7434 <uip_ds6_is_addr_onlink+0x34>
{
  for(locprefix = uip_ds6_prefix_list;
      locprefix < uip_ds6_prefix_list + UIP_DS6_PREFIX_NB; locprefix++) {
    if(locprefix->isused &&
       uip_ipaddr_prefixcmp(&locprefix->ipaddr, ipaddr, locprefix->length)) {
      return 1;
    7432:	2001      	movs	r0, #1
    }
  }
  return 0;
}
    7434:	b003      	add	sp, #12
    7436:	bdf0      	pop	{r4, r5, r6, r7, pc}
    7438:	20002c50 	.word	0x20002c50
    743c:	20000ac8 	.word	0x20000ac8
    7440:	00010b11 	.word	0x00010b11
    7444:	20002cb0 	.word	0x20002cb0

00007448 <uip_ds6_addr_lookup>:
}

/*---------------------------------------------------------------------------*/
uip_ds6_addr_t *
uip_ds6_addr_lookup(uip_ipaddr_t *ipaddr)
{
    7448:	b510      	push	{r4, lr}
    744a:	b082      	sub	sp, #8
    744c:	1c03      	adds	r3, r0, #0
  if(uip_ds6_list_loop
    744e:	2280      	movs	r2, #128	; 0x80
    7450:	9200      	str	r2, [sp, #0]
    7452:	4a07      	ldr	r2, [pc, #28]	; (7470 <uip_ds6_addr_lookup+0x28>)
    7454:	9201      	str	r2, [sp, #4]
    7456:	4807      	ldr	r0, [pc, #28]	; (7474 <uip_ds6_addr_lookup+0x2c>)
    7458:	2103      	movs	r1, #3
    745a:	221c      	movs	r2, #28
    745c:	4c06      	ldr	r4, [pc, #24]	; (7478 <uip_ds6_addr_lookup+0x30>)
    745e:	47a0      	blx	r4
    7460:	2800      	cmp	r0, #0
    7462:	d102      	bne.n	746a <uip_ds6_addr_lookup+0x22>
     ((uip_ds6_element_t *)uip_ds6_if.addr_list, UIP_DS6_ADDR_NB,
      sizeof(uip_ds6_addr_t), ipaddr, 128,
      (uip_ds6_element_t **)&locaddr) == FOUND) {
    return locaddr;
    7464:	4b02      	ldr	r3, [pc, #8]	; (7470 <uip_ds6_addr_lookup+0x28>)
    7466:	6818      	ldr	r0, [r3, #0]
    7468:	e000      	b.n	746c <uip_ds6_addr_lookup+0x24>
  }
  return NULL;
    746a:	2000      	movs	r0, #0
}
    746c:	b002      	add	sp, #8
    746e:	bd10      	pop	{r4, pc}
    7470:	20000acc 	.word	0x20000acc
    7474:	20002b80 	.word	0x20002b80
    7478:	00007341 	.word	0x00007341

0000747c <uip_ds6_get_link_local>:
 * state = -1 => any address is ok. Otherwise state = desired state of addr.
 * (TENTATIVE, PREFERRED, DEPRECATED)
 */
uip_ds6_addr_t *
uip_ds6_get_link_local(int8_t state)
{
    747c:	b570      	push	{r4, r5, r6, lr}
    747e:	1c04      	adds	r4, r0, #0
  for(locaddr = uip_ds6_if.addr_list;
    7480:	4b0c      	ldr	r3, [pc, #48]	; (74b4 <uip_ds6_get_link_local+0x38>)
    7482:	4a0d      	ldr	r2, [pc, #52]	; (74b8 <uip_ds6_get_link_local+0x3c>)
    7484:	6013      	str	r3, [r2, #0]
    7486:	1c18      	adds	r0, r3, #0
      locaddr < uip_ds6_if.addr_list + UIP_DS6_ADDR_NB; locaddr++) {
    if(locaddr->isused && (state == -1 || locaddr->state == state)
       && (uip_is_addr_link_local(&locaddr->ipaddr))) {
    7488:	4e0c      	ldr	r6, [pc, #48]	; (74bc <uip_ds6_get_link_local+0x40>)
    748a:	4d0d      	ldr	r5, [pc, #52]	; (74c0 <uip_ds6_get_link_local+0x44>)
 */
uip_ds6_addr_t *
uip_ds6_get_link_local(int8_t state)
{
  for(locaddr = uip_ds6_if.addr_list;
      locaddr < uip_ds6_if.addr_list + UIP_DS6_ADDR_NB; locaddr++) {
    748c:	1c11      	adds	r1, r2, #0
 * (TENTATIVE, PREFERRED, DEPRECATED)
 */
uip_ds6_addr_t *
uip_ds6_get_link_local(int8_t state)
{
  for(locaddr = uip_ds6_if.addr_list;
    748e:	4a0d      	ldr	r2, [pc, #52]	; (74c4 <uip_ds6_get_link_local+0x48>)
      locaddr < uip_ds6_if.addr_list + UIP_DS6_ADDR_NB; locaddr++) {
    if(locaddr->isused && (state == -1 || locaddr->state == state)
    7490:	7803      	ldrb	r3, [r0, #0]
    7492:	2b00      	cmp	r3, #0
    7494:	d008      	beq.n	74a8 <uip_ds6_get_link_local+0x2c>
    7496:	1c63      	adds	r3, r4, #1
    7498:	d002      	beq.n	74a0 <uip_ds6_get_link_local+0x24>
    749a:	7c43      	ldrb	r3, [r0, #17]
    749c:	42a3      	cmp	r3, r4
    749e:	d103      	bne.n	74a8 <uip_ds6_get_link_local+0x2c>
       && (uip_is_addr_link_local(&locaddr->ipaddr))) {
    74a0:	6803      	ldr	r3, [r0, #0]
    74a2:	4033      	ands	r3, r6
    74a4:	42ab      	cmp	r3, r5
    74a6:	d004      	beq.n	74b2 <uip_ds6_get_link_local+0x36>
 */
uip_ds6_addr_t *
uip_ds6_get_link_local(int8_t state)
{
  for(locaddr = uip_ds6_if.addr_list;
      locaddr < uip_ds6_if.addr_list + UIP_DS6_ADDR_NB; locaddr++) {
    74a8:	301c      	adds	r0, #28
    74aa:	6008      	str	r0, [r1, #0]
 * (TENTATIVE, PREFERRED, DEPRECATED)
 */
uip_ds6_addr_t *
uip_ds6_get_link_local(int8_t state)
{
  for(locaddr = uip_ds6_if.addr_list;
    74ac:	4290      	cmp	r0, r2
    74ae:	d1ef      	bne.n	7490 <uip_ds6_get_link_local+0x14>
    if(locaddr->isused && (state == -1 || locaddr->state == state)
       && (uip_is_addr_link_local(&locaddr->ipaddr))) {
      return locaddr;
    }
  }
  return NULL;
    74b0:	2000      	movs	r0, #0
}
    74b2:	bd70      	pop	{r4, r5, r6, pc}
    74b4:	20002b80 	.word	0x20002b80
    74b8:	20000acc 	.word	0x20000acc
    74bc:	00ffff00 	.word	0x00ffff00
    74c0:	0080fe00 	.word	0x0080fe00
    74c4:	20002bd4 	.word	0x20002bd4

000074c8 <uip_ds6_get_global>:
 * state = -1 => any address is ok. Otherwise state = desired state of addr.
 * (TENTATIVE, PREFERRED, DEPRECATED)
 */
uip_ds6_addr_t *
uip_ds6_get_global(int8_t state)
{
    74c8:	b570      	push	{r4, r5, r6, lr}
    74ca:	1c04      	adds	r4, r0, #0
  for(locaddr = uip_ds6_if.addr_list;
    74cc:	4b0c      	ldr	r3, [pc, #48]	; (7500 <uip_ds6_get_global+0x38>)
    74ce:	4a0d      	ldr	r2, [pc, #52]	; (7504 <uip_ds6_get_global+0x3c>)
    74d0:	6013      	str	r3, [r2, #0]
    74d2:	1c18      	adds	r0, r3, #0
      locaddr < uip_ds6_if.addr_list + UIP_DS6_ADDR_NB; locaddr++) {
    if(locaddr->isused && (state == -1 || locaddr->state == state)
       && !(uip_is_addr_link_local(&locaddr->ipaddr))) {
    74d4:	4e0c      	ldr	r6, [pc, #48]	; (7508 <uip_ds6_get_global+0x40>)
    74d6:	4d0d      	ldr	r5, [pc, #52]	; (750c <uip_ds6_get_global+0x44>)
 */
uip_ds6_addr_t *
uip_ds6_get_global(int8_t state)
{
  for(locaddr = uip_ds6_if.addr_list;
      locaddr < uip_ds6_if.addr_list + UIP_DS6_ADDR_NB; locaddr++) {
    74d8:	1c11      	adds	r1, r2, #0
 * (TENTATIVE, PREFERRED, DEPRECATED)
 */
uip_ds6_addr_t *
uip_ds6_get_global(int8_t state)
{
  for(locaddr = uip_ds6_if.addr_list;
    74da:	4a0d      	ldr	r2, [pc, #52]	; (7510 <uip_ds6_get_global+0x48>)
      locaddr < uip_ds6_if.addr_list + UIP_DS6_ADDR_NB; locaddr++) {
    if(locaddr->isused && (state == -1 || locaddr->state == state)
    74dc:	7803      	ldrb	r3, [r0, #0]
    74de:	2b00      	cmp	r3, #0
    74e0:	d008      	beq.n	74f4 <uip_ds6_get_global+0x2c>
    74e2:	1c63      	adds	r3, r4, #1
    74e4:	d002      	beq.n	74ec <uip_ds6_get_global+0x24>
    74e6:	7c43      	ldrb	r3, [r0, #17]
    74e8:	42a3      	cmp	r3, r4
    74ea:	d103      	bne.n	74f4 <uip_ds6_get_global+0x2c>
       && !(uip_is_addr_link_local(&locaddr->ipaddr))) {
    74ec:	6803      	ldr	r3, [r0, #0]
    74ee:	4033      	ands	r3, r6
    74f0:	42ab      	cmp	r3, r5
    74f2:	d104      	bne.n	74fe <uip_ds6_get_global+0x36>
 */
uip_ds6_addr_t *
uip_ds6_get_global(int8_t state)
{
  for(locaddr = uip_ds6_if.addr_list;
      locaddr < uip_ds6_if.addr_list + UIP_DS6_ADDR_NB; locaddr++) {
    74f4:	301c      	adds	r0, #28
    74f6:	6008      	str	r0, [r1, #0]
 * (TENTATIVE, PREFERRED, DEPRECATED)
 */
uip_ds6_addr_t *
uip_ds6_get_global(int8_t state)
{
  for(locaddr = uip_ds6_if.addr_list;
    74f8:	4290      	cmp	r0, r2
    74fa:	d1ef      	bne.n	74dc <uip_ds6_get_global+0x14>
    if(locaddr->isused && (state == -1 || locaddr->state == state)
       && !(uip_is_addr_link_local(&locaddr->ipaddr))) {
      return locaddr;
    }
  }
  return NULL;
    74fc:	2000      	movs	r0, #0
}
    74fe:	bd70      	pop	{r4, r5, r6, pc}
    7500:	20002b80 	.word	0x20002b80
    7504:	20000acc 	.word	0x20000acc
    7508:	00ffff00 	.word	0x00ffff00
    750c:	0080fe00 	.word	0x0080fe00
    7510:	20002bd4 	.word	0x20002bd4

00007514 <uip_ds6_maddr_add>:

/*---------------------------------------------------------------------------*/
uip_ds6_maddr_t *
uip_ds6_maddr_add(const uip_ipaddr_t *ipaddr)
{
    7514:	b530      	push	{r4, r5, lr}
    7516:	b083      	sub	sp, #12
    7518:	1c05      	adds	r5, r0, #0
  if(uip_ds6_list_loop
    751a:	2380      	movs	r3, #128	; 0x80
    751c:	9300      	str	r3, [sp, #0]
    751e:	4b0c      	ldr	r3, [pc, #48]	; (7550 <uip_ds6_maddr_add+0x3c>)
    7520:	9301      	str	r3, [sp, #4]
    7522:	480c      	ldr	r0, [pc, #48]	; (7554 <uip_ds6_maddr_add+0x40>)
    7524:	2105      	movs	r1, #5
    7526:	2211      	movs	r2, #17
    7528:	1c2b      	adds	r3, r5, #0
    752a:	4c0b      	ldr	r4, [pc, #44]	; (7558 <uip_ds6_maddr_add+0x44>)
    752c:	47a0      	blx	r4
    752e:	2801      	cmp	r0, #1
    7530:	d10b      	bne.n	754a <uip_ds6_maddr_add+0x36>
     ((uip_ds6_element_t *)uip_ds6_if.maddr_list, UIP_DS6_MADDR_NB,
      sizeof(uip_ds6_maddr_t), (void*)ipaddr, 128,
      (uip_ds6_element_t **)&locmaddr) == FREESPACE) {
    locmaddr->isused = 1;
    7532:	4c07      	ldr	r4, [pc, #28]	; (7550 <uip_ds6_maddr_add+0x3c>)
    7534:	2301      	movs	r3, #1
    7536:	6822      	ldr	r2, [r4, #0]
    7538:	7013      	strb	r3, [r2, #0]
    uip_ipaddr_copy(&locmaddr->ipaddr, ipaddr);
    753a:	6823      	ldr	r3, [r4, #0]
    753c:	1c58      	adds	r0, r3, #1
    753e:	1c29      	adds	r1, r5, #0
    7540:	2210      	movs	r2, #16
    7542:	4b06      	ldr	r3, [pc, #24]	; (755c <uip_ds6_maddr_add+0x48>)
    7544:	4798      	blx	r3
    return locmaddr;
    7546:	6820      	ldr	r0, [r4, #0]
    7548:	e000      	b.n	754c <uip_ds6_maddr_add+0x38>
  }
  return NULL;
    754a:	2000      	movs	r0, #0
}
    754c:	b003      	add	sp, #12
    754e:	bd30      	pop	{r4, r5, pc}
    7550:	20000ac0 	.word	0x20000ac0
    7554:	20002bf6 	.word	0x20002bf6
    7558:	00007341 	.word	0x00007341
    755c:	00010b2f 	.word	0x00010b2f

00007560 <uip_ds6_addr_add>:
}

/*---------------------------------------------------------------------------*/
uip_ds6_addr_t *
uip_ds6_addr_add(uip_ipaddr_t *ipaddr, unsigned long vlifetime, uint8_t type)
{
    7560:	b5f0      	push	{r4, r5, r6, r7, lr}
    7562:	b083      	sub	sp, #12
    7564:	1c04      	adds	r4, r0, #0
    7566:	1c0e      	adds	r6, r1, #0
    7568:	1c17      	adds	r7, r2, #0
  if(uip_ds6_list_loop
    756a:	2380      	movs	r3, #128	; 0x80
    756c:	9300      	str	r3, [sp, #0]
    756e:	4b20      	ldr	r3, [pc, #128]	; (75f0 <uip_ds6_addr_add+0x90>)
    7570:	9301      	str	r3, [sp, #4]
    7572:	4820      	ldr	r0, [pc, #128]	; (75f4 <uip_ds6_addr_add+0x94>)
    7574:	2103      	movs	r1, #3
    7576:	221c      	movs	r2, #28
    7578:	1c23      	adds	r3, r4, #0
    757a:	4d1f      	ldr	r5, [pc, #124]	; (75f8 <uip_ds6_addr_add+0x98>)
    757c:	47a8      	blx	r5
    757e:	2801      	cmp	r0, #1
    7580:	d132      	bne.n	75e8 <uip_ds6_addr_add+0x88>
     ((uip_ds6_element_t *)uip_ds6_if.addr_list, UIP_DS6_ADDR_NB,
      sizeof(uip_ds6_addr_t), ipaddr, 128,
      (uip_ds6_element_t **)&locaddr) == FREESPACE) {
    locaddr->isused = 1;
    7582:	4d1b      	ldr	r5, [pc, #108]	; (75f0 <uip_ds6_addr_add+0x90>)
    7584:	2301      	movs	r3, #1
    7586:	682a      	ldr	r2, [r5, #0]
    7588:	7013      	strb	r3, [r2, #0]
    uip_ipaddr_copy(&locaddr->ipaddr, ipaddr);
    758a:	682b      	ldr	r3, [r5, #0]
    758c:	1c58      	adds	r0, r3, #1
    758e:	1c21      	adds	r1, r4, #0
    7590:	2210      	movs	r2, #16
    7592:	4b1a      	ldr	r3, [pc, #104]	; (75fc <uip_ds6_addr_add+0x9c>)
    7594:	4798      	blx	r3
    locaddr->type = type;
    7596:	6828      	ldr	r0, [r5, #0]
    7598:	7487      	strb	r7, [r0, #18]
    if(vlifetime == 0) {
    759a:	2e00      	cmp	r6, #0
    759c:	d102      	bne.n	75a4 <uip_ds6_addr_add+0x44>
      locaddr->isinfinite = 1;
    759e:	2301      	movs	r3, #1
    75a0:	74c3      	strb	r3, [r0, #19]
    75a2:	e005      	b.n	75b0 <uip_ds6_addr_add+0x50>
    } else {
      locaddr->isinfinite = 0;
    75a4:	2300      	movs	r3, #0
    75a6:	74c3      	strb	r3, [r0, #19]
      stimer_set(&(locaddr->vlifetime), vlifetime);
    75a8:	3014      	adds	r0, #20
    75aa:	1c31      	adds	r1, r6, #0
    75ac:	4b14      	ldr	r3, [pc, #80]	; (7600 <uip_ds6_addr_add+0xa0>)
    75ae:	4798      	blx	r3
    timer_set(&locaddr->dadtimer,
              random_rand() % (UIP_ND6_MAX_RTR_SOLICITATION_DELAY *
                               CLOCK_SECOND));
    locaddr->dadnscount = 0;
#else /* UIP_ND6_DEF_MAXDADNS > 0 */
    locaddr->state = ADDR_PREFERRED;
    75b0:	4d0f      	ldr	r5, [pc, #60]	; (75f0 <uip_ds6_addr_add+0x90>)
    75b2:	2101      	movs	r1, #1
    75b4:	682b      	ldr	r3, [r5, #0]
    75b6:	7459      	strb	r1, [r3, #17]
#endif /* UIP_ND6_DEF_MAXDADNS > 0 */
    uip_create_solicited_node(ipaddr, &loc_fipaddr);
    75b8:	4812      	ldr	r0, [pc, #72]	; (7604 <uip_ds6_addr_add+0xa4>)
    75ba:	22ff      	movs	r2, #255	; 0xff
    75bc:	7002      	strb	r2, [r0, #0]
    75be:	2302      	movs	r3, #2
    75c0:	7043      	strb	r3, [r0, #1]
    75c2:	2300      	movs	r3, #0
    75c4:	8043      	strh	r3, [r0, #2]
    75c6:	8083      	strh	r3, [r0, #4]
    75c8:	80c3      	strh	r3, [r0, #6]
    75ca:	8103      	strh	r3, [r0, #8]
    75cc:	7283      	strb	r3, [r0, #10]
    75ce:	72c1      	strb	r1, [r0, #11]
    75d0:	7302      	strb	r2, [r0, #12]
    75d2:	7b63      	ldrb	r3, [r4, #13]
    75d4:	7343      	strb	r3, [r0, #13]
    75d6:	7ba2      	ldrb	r2, [r4, #14]
    75d8:	7be3      	ldrb	r3, [r4, #15]
    75da:	021b      	lsls	r3, r3, #8
    75dc:	4313      	orrs	r3, r2
    75de:	81c3      	strh	r3, [r0, #14]
    uip_ds6_maddr_add(&loc_fipaddr);
    75e0:	4b09      	ldr	r3, [pc, #36]	; (7608 <uip_ds6_addr_add+0xa8>)
    75e2:	4798      	blx	r3
    return locaddr;
    75e4:	6828      	ldr	r0, [r5, #0]
    75e6:	e000      	b.n	75ea <uip_ds6_addr_add+0x8a>
  }
  return NULL;
    75e8:	2000      	movs	r0, #0
}
    75ea:	b003      	add	sp, #12
    75ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
    75ee:	46c0      	nop			; (mov r8, r8)
    75f0:	20000acc 	.word	0x20000acc
    75f4:	20002b80 	.word	0x20002b80
    75f8:	00007341 	.word	0x00007341
    75fc:	00010b2f 	.word	0x00010b2f
    7600:	0000ed0d 	.word	0x0000ed0d
    7604:	20000ad0 	.word	0x20000ad0
    7608:	00007515 	.word	0x00007515

0000760c <uip_ds6_maddr_rm>:

/*---------------------------------------------------------------------------*/
void
uip_ds6_maddr_rm(uip_ds6_maddr_t *maddr)
{
  if(maddr != NULL) {
    760c:	2800      	cmp	r0, #0
    760e:	d001      	beq.n	7614 <uip_ds6_maddr_rm+0x8>
    maddr->isused = 0;
    7610:	2300      	movs	r3, #0
    7612:	7003      	strb	r3, [r0, #0]
  }
  return;
}
    7614:	4770      	bx	lr
    7616:	46c0      	nop			; (mov r8, r8)

00007618 <uip_ds6_maddr_lookup>:

/*---------------------------------------------------------------------------*/
uip_ds6_maddr_t *
uip_ds6_maddr_lookup(const uip_ipaddr_t *ipaddr)
{
    7618:	b510      	push	{r4, lr}
    761a:	b082      	sub	sp, #8
    761c:	1c03      	adds	r3, r0, #0
  if(uip_ds6_list_loop
    761e:	2280      	movs	r2, #128	; 0x80
    7620:	9200      	str	r2, [sp, #0]
    7622:	4a07      	ldr	r2, [pc, #28]	; (7640 <uip_ds6_maddr_lookup+0x28>)
    7624:	9201      	str	r2, [sp, #4]
    7626:	4807      	ldr	r0, [pc, #28]	; (7644 <uip_ds6_maddr_lookup+0x2c>)
    7628:	2105      	movs	r1, #5
    762a:	2211      	movs	r2, #17
    762c:	4c06      	ldr	r4, [pc, #24]	; (7648 <uip_ds6_maddr_lookup+0x30>)
    762e:	47a0      	blx	r4
    7630:	2800      	cmp	r0, #0
    7632:	d102      	bne.n	763a <uip_ds6_maddr_lookup+0x22>
     ((uip_ds6_element_t *)uip_ds6_if.maddr_list, UIP_DS6_MADDR_NB,
      sizeof(uip_ds6_maddr_t), (void*)ipaddr, 128,
      (uip_ds6_element_t **)&locmaddr) == FOUND) {
    return locmaddr;
    7634:	4b02      	ldr	r3, [pc, #8]	; (7640 <uip_ds6_maddr_lookup+0x28>)
    7636:	6818      	ldr	r0, [r3, #0]
    7638:	e000      	b.n	763c <uip_ds6_maddr_lookup+0x24>
  }
  return NULL;
    763a:	2000      	movs	r0, #0
}
    763c:	b002      	add	sp, #8
    763e:	bd10      	pop	{r4, pc}
    7640:	20000ac0 	.word	0x20000ac0
    7644:	20002bf6 	.word	0x20002bf6
    7648:	00007341 	.word	0x00007341

0000764c <uip_ds6_addr_rm>:
}

/*---------------------------------------------------------------------------*/
void
uip_ds6_addr_rm(uip_ds6_addr_t *addr)
{
    764c:	b510      	push	{r4, lr}
  if(addr != NULL) {
    764e:	2800      	cmp	r0, #0
    7650:	d01f      	beq.n	7692 <uip_ds6_addr_rm+0x46>
    7652:	1c04      	adds	r4, r0, #0
    uip_create_solicited_node(&addr->ipaddr, &loc_fipaddr);
    7654:	480f      	ldr	r0, [pc, #60]	; (7694 <uip_ds6_addr_rm+0x48>)
    7656:	22ff      	movs	r2, #255	; 0xff
    7658:	7002      	strb	r2, [r0, #0]
    765a:	2302      	movs	r3, #2
    765c:	7043      	strb	r3, [r0, #1]
    765e:	2300      	movs	r3, #0
    7660:	8043      	strh	r3, [r0, #2]
    7662:	8083      	strh	r3, [r0, #4]
    7664:	80c3      	strh	r3, [r0, #6]
    7666:	8103      	strh	r3, [r0, #8]
    7668:	7283      	strb	r3, [r0, #10]
    766a:	2301      	movs	r3, #1
    766c:	72c3      	strb	r3, [r0, #11]
    766e:	7302      	strb	r2, [r0, #12]
    7670:	7ba3      	ldrb	r3, [r4, #14]
    7672:	7343      	strb	r3, [r0, #13]
    7674:	7be2      	ldrb	r2, [r4, #15]
    7676:	7c23      	ldrb	r3, [r4, #16]
    7678:	021b      	lsls	r3, r3, #8
    767a:	4313      	orrs	r3, r2
    767c:	81c3      	strh	r3, [r0, #14]
    if((locmaddr = uip_ds6_maddr_lookup(&loc_fipaddr)) != NULL) {
    767e:	4b06      	ldr	r3, [pc, #24]	; (7698 <uip_ds6_addr_rm+0x4c>)
    7680:	4798      	blx	r3
    7682:	4b06      	ldr	r3, [pc, #24]	; (769c <uip_ds6_addr_rm+0x50>)
    7684:	6018      	str	r0, [r3, #0]
    7686:	2800      	cmp	r0, #0
    7688:	d001      	beq.n	768e <uip_ds6_addr_rm+0x42>
      uip_ds6_maddr_rm(locmaddr);
    768a:	4b05      	ldr	r3, [pc, #20]	; (76a0 <uip_ds6_addr_rm+0x54>)
    768c:	4798      	blx	r3
    }
    addr->isused = 0;
    768e:	2300      	movs	r3, #0
    7690:	7023      	strb	r3, [r4, #0]
  }
  return;
}
    7692:	bd10      	pop	{r4, pc}
    7694:	20000ad0 	.word	0x20000ad0
    7698:	00007619 	.word	0x00007619
    769c:	20000ac0 	.word	0x20000ac0
    76a0:	0000760d 	.word	0x0000760d

000076a4 <uip_ds6_set_addr_iid>:
}

/*---------------------------------------------------------------------------*/
void
uip_ds6_set_addr_iid(uip_ipaddr_t *ipaddr, uip_lladdr_t *lladdr)
{
    76a4:	b510      	push	{r4, lr}
    76a6:	1c04      	adds	r4, r0, #0
  /* We consider only links with IEEE EUI-64 identifier or
   * IEEE 48-bit MAC addresses */
#if (UIP_LLADDR_LEN == 8)
  memcpy(ipaddr->u8 + 8, lladdr, UIP_LLADDR_LEN);
    76a8:	3008      	adds	r0, #8
    76aa:	2208      	movs	r2, #8
    76ac:	4b03      	ldr	r3, [pc, #12]	; (76bc <uip_ds6_set_addr_iid+0x18>)
    76ae:	4798      	blx	r3
  ipaddr->u8[8] ^= 0x02;
    76b0:	7a22      	ldrb	r2, [r4, #8]
    76b2:	2302      	movs	r3, #2
    76b4:	4053      	eors	r3, r2
    76b6:	7223      	strb	r3, [r4, #8]
  memcpy(ipaddr->u8 + 13, (uint8_t *)lladdr + 3, 3);
  ipaddr->u8[8] ^= 0x02;
#else
#error uip-ds6.c cannot build interface address when UIP_LLADDR_LEN is not 6 or 8
#endif
}
    76b8:	bd10      	pop	{r4, pc}
    76ba:	46c0      	nop			; (mov r8, r8)
    76bc:	00010b2f 	.word	0x00010b2f

000076c0 <get_match_length>:

/*---------------------------------------------------------------------------*/
uint8_t
get_match_length(uip_ipaddr_t *src, uip_ipaddr_t *dst)
{
    76c0:	b530      	push	{r4, r5, lr}
    76c2:	1c05      	adds	r5, r0, #0
  uint8_t j, k, x_or;
  uint8_t len = 0;

  for(j = 0; j < 16; j++) {
    if(src->u8[j] == dst->u8[j]) {
    76c4:	7802      	ldrb	r2, [r0, #0]
    76c6:	780c      	ldrb	r4, [r1, #0]
    76c8:	42a2      	cmp	r2, r4
    76ca:	d10d      	bne.n	76e8 <get_match_length+0x28>
    76cc:	2300      	movs	r3, #0
    76ce:	2008      	movs	r0, #8
    76d0:	18ea      	adds	r2, r5, r3
    76d2:	7852      	ldrb	r2, [r2, #1]
    76d4:	18cc      	adds	r4, r1, r3
    76d6:	7864      	ldrb	r4, [r4, #1]
    76d8:	42a2      	cmp	r2, r4
    76da:	d106      	bne.n	76ea <get_match_length+0x2a>
      len += 8;
    76dc:	3008      	adds	r0, #8
    76de:	b2c0      	uxtb	r0, r0
    76e0:	3301      	adds	r3, #1
get_match_length(uip_ipaddr_t *src, uip_ipaddr_t *dst)
{
  uint8_t j, k, x_or;
  uint8_t len = 0;

  for(j = 0; j < 16; j++) {
    76e2:	2880      	cmp	r0, #128	; 0x80
    76e4:	d1f4      	bne.n	76d0 <get_match_length+0x10>
    76e6:	e018      	b.n	771a <get_match_length+0x5a>
/*---------------------------------------------------------------------------*/
uint8_t
get_match_length(uip_ipaddr_t *src, uip_ipaddr_t *dst)
{
  uint8_t j, k, x_or;
  uint8_t len = 0;
    76e8:	2000      	movs	r0, #0

  for(j = 0; j < 16; j++) {
    if(src->u8[j] == dst->u8[j]) {
      len += 8;
    } else {
      x_or = src->u8[j] ^ dst->u8[j];
    76ea:	4062      	eors	r2, r4
      for(k = 0; k < 8; k++) {
        if((x_or & 0x80) == 0) {
    76ec:	b253      	sxtb	r3, r2
    76ee:	2b00      	cmp	r3, #0
    76f0:	da0c      	bge.n	770c <get_match_length+0x4c>
    76f2:	e012      	b.n	771a <get_match_length+0x5a>
    76f4:	b251      	sxtb	r1, r2
    76f6:	2900      	cmp	r1, #0
    76f8:	db06      	blt.n	7708 <get_match_length+0x48>
          len++;
    76fa:	3301      	adds	r3, #1
    76fc:	b2db      	uxtb	r3, r3
          x_or <<= 1;
    76fe:	0052      	lsls	r2, r2, #1
    7700:	b2d2      	uxtb	r2, r2
  for(j = 0; j < 16; j++) {
    if(src->u8[j] == dst->u8[j]) {
      len += 8;
    } else {
      x_or = src->u8[j] ^ dst->u8[j];
      for(k = 0; k < 8; k++) {
    7702:	4283      	cmp	r3, r0
    7704:	d1f6      	bne.n	76f4 <get_match_length+0x34>
    7706:	e008      	b.n	771a <get_match_length+0x5a>
    7708:	1c18      	adds	r0, r3, #0
    770a:	e006      	b.n	771a <get_match_length+0x5a>
        if((x_or & 0x80) == 0) {
          len++;
    770c:	1c43      	adds	r3, r0, #1
    770e:	b2db      	uxtb	r3, r3
          x_or <<= 1;
    7710:	0052      	lsls	r2, r2, #1
    7712:	b2d2      	uxtb	r2, r2
    7714:	3008      	adds	r0, #8
    7716:	b2c0      	uxtb	r0, r0
    7718:	e7ec      	b.n	76f4 <get_match_length+0x34>
      }
      break;
    }
  }
  return len;
}
    771a:	bd30      	pop	{r4, r5, pc}

0000771c <uip_ds6_select_src>:
}

/*---------------------------------------------------------------------------*/
void
uip_ds6_select_src(uip_ipaddr_t *src, uip_ipaddr_t *dst)
{
    771c:	b5f0      	push	{r4, r5, r6, r7, lr}
    771e:	465f      	mov	r7, fp
    7720:	4656      	mov	r6, sl
    7722:	464d      	mov	r5, r9
    7724:	4644      	mov	r4, r8
    7726:	b4f0      	push	{r4, r5, r6, r7}
    7728:	b083      	sub	sp, #12
    772a:	4680      	mov	r8, r0
    772c:	9101      	str	r1, [sp, #4]
  uint8_t best = 0;             /* number of bit in common with best match */
  uint8_t n = 0;
  uip_ds6_addr_t *matchaddr = NULL;

  if(!uip_is_addr_link_local(dst) && !uip_is_addr_mcast(dst)) {
    772e:	780b      	ldrb	r3, [r1, #0]
    7730:	2bfe      	cmp	r3, #254	; 0xfe
    7732:	d14a      	bne.n	77ca <uip_ds6_select_src+0xae>
    7734:	784b      	ldrb	r3, [r1, #1]
    7736:	2b80      	cmp	r3, #128	; 0x80
    7738:	d024      	beq.n	7784 <uip_ds6_select_src+0x68>
    /* find longest match */
    for(locaddr = uip_ds6_if.addr_list;
    773a:	4a29      	ldr	r2, [pc, #164]	; (77e0 <uip_ds6_select_src+0xc4>)
    773c:	4b29      	ldr	r3, [pc, #164]	; (77e4 <uip_ds6_select_src+0xc8>)
    773e:	601a      	str	r2, [r3, #0]
}

/*---------------------------------------------------------------------------*/
void
uip_ds6_select_src(uip_ipaddr_t *src, uip_ipaddr_t *dst)
{
    7740:	4c27      	ldr	r4, [pc, #156]	; (77e0 <uip_ds6_select_src+0xc4>)
    7742:	2700      	movs	r7, #0
    7744:	2300      	movs	r3, #0
    7746:	4699      	mov	r9, r3
    /* find longest match */
    for(locaddr = uip_ds6_if.addr_list;
        locaddr < uip_ds6_if.addr_list + UIP_DS6_ADDR_NB; locaddr++) {
      /* Only preferred global (not link-local) addresses */
      if(locaddr->isused && locaddr->state == ADDR_PREFERRED &&
         !uip_is_addr_link_local(&locaddr->ipaddr)) {
    7748:	4b27      	ldr	r3, [pc, #156]	; (77e8 <uip_ds6_select_src+0xcc>)
    774a:	469b      	mov	fp, r3
  if(!uip_is_addr_link_local(dst) && !uip_is_addr_mcast(dst)) {
    /* find longest match */
    for(locaddr = uip_ds6_if.addr_list;
        locaddr < uip_ds6_if.addr_list + UIP_DS6_ADDR_NB; locaddr++) {
      /* Only preferred global (not link-local) addresses */
      if(locaddr->isused && locaddr->state == ADDR_PREFERRED &&
    774c:	4b27      	ldr	r3, [pc, #156]	; (77ec <uip_ds6_select_src+0xd0>)
    774e:	469a      	mov	sl, r3
  uip_ds6_addr_t *matchaddr = NULL;

  if(!uip_is_addr_link_local(dst) && !uip_is_addr_mcast(dst)) {
    /* find longest match */
    for(locaddr = uip_ds6_if.addr_list;
        locaddr < uip_ds6_if.addr_list + UIP_DS6_ADDR_NB; locaddr++) {
    7750:	4e24      	ldr	r6, [pc, #144]	; (77e4 <uip_ds6_select_src+0xc8>)
  uint8_t n = 0;
  uip_ds6_addr_t *matchaddr = NULL;

  if(!uip_is_addr_link_local(dst) && !uip_is_addr_mcast(dst)) {
    /* find longest match */
    for(locaddr = uip_ds6_if.addr_list;
    7752:	4d27      	ldr	r5, [pc, #156]	; (77f0 <uip_ds6_select_src+0xd4>)
        locaddr < uip_ds6_if.addr_list + UIP_DS6_ADDR_NB; locaddr++) {
      /* Only preferred global (not link-local) addresses */
      if(locaddr->isused && locaddr->state == ADDR_PREFERRED &&
    7754:	7823      	ldrb	r3, [r4, #0]
    7756:	2b00      	cmp	r3, #0
    7758:	d00f      	beq.n	777a <uip_ds6_select_src+0x5e>
    775a:	7c63      	ldrb	r3, [r4, #17]
    775c:	2b01      	cmp	r3, #1
    775e:	d10c      	bne.n	777a <uip_ds6_select_src+0x5e>
         !uip_is_addr_link_local(&locaddr->ipaddr)) {
    7760:	6823      	ldr	r3, [r4, #0]
    7762:	465a      	mov	r2, fp
    7764:	4013      	ands	r3, r2
  if(!uip_is_addr_link_local(dst) && !uip_is_addr_mcast(dst)) {
    /* find longest match */
    for(locaddr = uip_ds6_if.addr_list;
        locaddr < uip_ds6_if.addr_list + UIP_DS6_ADDR_NB; locaddr++) {
      /* Only preferred global (not link-local) addresses */
      if(locaddr->isused && locaddr->state == ADDR_PREFERRED &&
    7766:	4553      	cmp	r3, sl
    7768:	d007      	beq.n	777a <uip_ds6_select_src+0x5e>
    776a:	1c61      	adds	r1, r4, #1
         !uip_is_addr_link_local(&locaddr->ipaddr)) {
        n = get_match_length(dst, &locaddr->ipaddr);
    776c:	9801      	ldr	r0, [sp, #4]
    776e:	4b21      	ldr	r3, [pc, #132]	; (77f4 <uip_ds6_select_src+0xd8>)
    7770:	4798      	blx	r3
        if(n >= best) {
    7772:	4548      	cmp	r0, r9
    7774:	d301      	bcc.n	777a <uip_ds6_select_src+0x5e>
    7776:	1c27      	adds	r7, r4, #0
          best = n;
    7778:	4681      	mov	r9, r0
  uip_ds6_addr_t *matchaddr = NULL;

  if(!uip_is_addr_link_local(dst) && !uip_is_addr_mcast(dst)) {
    /* find longest match */
    for(locaddr = uip_ds6_if.addr_list;
        locaddr < uip_ds6_if.addr_list + UIP_DS6_ADDR_NB; locaddr++) {
    777a:	341c      	adds	r4, #28
    777c:	6034      	str	r4, [r6, #0]
  uint8_t n = 0;
  uip_ds6_addr_t *matchaddr = NULL;

  if(!uip_is_addr_link_local(dst) && !uip_is_addr_mcast(dst)) {
    /* find longest match */
    for(locaddr = uip_ds6_if.addr_list;
    777e:	42ac      	cmp	r4, r5
    7780:	d1e8      	bne.n	7754 <uip_ds6_select_src+0x38>
    7782:	e003      	b.n	778c <uip_ds6_select_src+0x70>
#if UIP_IPV6_MULTICAST
  } else if(uip_is_addr_mcast_routable(dst)) {
    matchaddr = uip_ds6_get_global(ADDR_PREFERRED);
#endif
  } else {
    matchaddr = uip_ds6_get_link_local(ADDR_PREFERRED);
    7784:	2001      	movs	r0, #1
    7786:	4b1c      	ldr	r3, [pc, #112]	; (77f8 <uip_ds6_select_src+0xdc>)
    7788:	4798      	blx	r3
    778a:	1c07      	adds	r7, r0, #0
  }

  /* use the :: (unspecified address) as source if no match found */
  if(matchaddr == NULL) {
    778c:	2f00      	cmp	r7, #0
    778e:	d112      	bne.n	77b6 <uip_ds6_select_src+0x9a>
    uip_create_unspecified(src);
    7790:	2300      	movs	r3, #0
    7792:	4642      	mov	r2, r8
    7794:	7013      	strb	r3, [r2, #0]
    7796:	7053      	strb	r3, [r2, #1]
    7798:	7093      	strb	r3, [r2, #2]
    779a:	70d3      	strb	r3, [r2, #3]
    779c:	7113      	strb	r3, [r2, #4]
    779e:	7153      	strb	r3, [r2, #5]
    77a0:	7193      	strb	r3, [r2, #6]
    77a2:	71d3      	strb	r3, [r2, #7]
    77a4:	7213      	strb	r3, [r2, #8]
    77a6:	7253      	strb	r3, [r2, #9]
    77a8:	7293      	strb	r3, [r2, #10]
    77aa:	72d3      	strb	r3, [r2, #11]
    77ac:	7313      	strb	r3, [r2, #12]
    77ae:	7353      	strb	r3, [r2, #13]
    77b0:	7393      	strb	r3, [r2, #14]
    77b2:	73d3      	strb	r3, [r2, #15]
    77b4:	e00c      	b.n	77d0 <uip_ds6_select_src+0xb4>
  } else {
    uip_ipaddr_copy(src, &matchaddr->ipaddr);
    77b6:	1c79      	adds	r1, r7, #1
    77b8:	4640      	mov	r0, r8
    77ba:	2210      	movs	r2, #16
    77bc:	4b0f      	ldr	r3, [pc, #60]	; (77fc <uip_ds6_select_src+0xe0>)
    77be:	4798      	blx	r3
    77c0:	e006      	b.n	77d0 <uip_ds6_select_src+0xb4>
  uint8_t n = 0;
  uip_ds6_addr_t *matchaddr = NULL;

  if(!uip_is_addr_link_local(dst) && !uip_is_addr_mcast(dst)) {
    /* find longest match */
    for(locaddr = uip_ds6_if.addr_list;
    77c2:	4a07      	ldr	r2, [pc, #28]	; (77e0 <uip_ds6_select_src+0xc4>)
    77c4:	4b07      	ldr	r3, [pc, #28]	; (77e4 <uip_ds6_select_src+0xc8>)
    77c6:	601a      	str	r2, [r3, #0]
    77c8:	e7ba      	b.n	7740 <uip_ds6_select_src+0x24>
{
  uint8_t best = 0;             /* number of bit in common with best match */
  uint8_t n = 0;
  uip_ds6_addr_t *matchaddr = NULL;

  if(!uip_is_addr_link_local(dst) && !uip_is_addr_mcast(dst)) {
    77ca:	2bff      	cmp	r3, #255	; 0xff
    77cc:	d1f9      	bne.n	77c2 <uip_ds6_select_src+0xa6>
    77ce:	e7d9      	b.n	7784 <uip_ds6_select_src+0x68>
  if(matchaddr == NULL) {
    uip_create_unspecified(src);
  } else {
    uip_ipaddr_copy(src, &matchaddr->ipaddr);
  }
}
    77d0:	b003      	add	sp, #12
    77d2:	bc3c      	pop	{r2, r3, r4, r5}
    77d4:	4690      	mov	r8, r2
    77d6:	4699      	mov	r9, r3
    77d8:	46a2      	mov	sl, r4
    77da:	46ab      	mov	fp, r5
    77dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    77de:	46c0      	nop			; (mov r8, r8)
    77e0:	20002b80 	.word	0x20002b80
    77e4:	20000acc 	.word	0x20000acc
    77e8:	00ffff00 	.word	0x00ffff00
    77ec:	0080fe00 	.word	0x0080fe00
    77f0:	20002bd4 	.word	0x20002bd4
    77f4:	000076c1 	.word	0x000076c1
    77f8:	0000747d 	.word	0x0000747d
    77fc:	00010b2f 	.word	0x00010b2f

00007800 <uip_ds6_send_ra_sollicited>:
/*---------------------------------------------------------------------------*/
#if UIP_CONF_ROUTER
#if UIP_ND6_SEND_RA
void
uip_ds6_send_ra_sollicited(void)
{
    7800:	b510      	push	{r4, lr}
   * hence we have to use stimers. However, when receiving a RS, we
   * should delay the reply by a random value between 0 and 500ms timers.
   * stimers are in seconds, hence we cannot do this. Therefore we just send
   * the RA (setting the timer to 0 below). We keep the code logic for
   * the days contiki will support appropriate timers */
  rand_time = 0;
    7802:	4c0a      	ldr	r4, [pc, #40]	; (782c <uip_ds6_send_ra_sollicited+0x2c>)
    7804:	2300      	movs	r3, #0
    7806:	8023      	strh	r3, [r4, #0]
  PRINTF("Solicited RA, random time %u\n\r", rand_time);

  if(stimer_remaining(&uip_ds6_timer_ra) > rand_time) {
    7808:	4809      	ldr	r0, [pc, #36]	; (7830 <uip_ds6_send_ra_sollicited+0x30>)
    780a:	4b0a      	ldr	r3, [pc, #40]	; (7834 <uip_ds6_send_ra_sollicited+0x34>)
    780c:	4798      	blx	r3
    780e:	8823      	ldrh	r3, [r4, #0]
    7810:	4298      	cmp	r0, r3
    7812:	d909      	bls.n	7828 <uip_ds6_send_ra_sollicited+0x28>
    if(stimer_elapsed(&uip_ds6_timer_ra) < UIP_ND6_MIN_DELAY_BETWEEN_RAS) {
    7814:	4806      	ldr	r0, [pc, #24]	; (7830 <uip_ds6_send_ra_sollicited+0x30>)
    7816:	4b08      	ldr	r3, [pc, #32]	; (7838 <uip_ds6_send_ra_sollicited+0x38>)
    7818:	4798      	blx	r3
    781a:	2802      	cmp	r0, #2
    781c:	d904      	bls.n	7828 <uip_ds6_send_ra_sollicited+0x28>
      /* Ensure that the RAs are rate limited */
/*      stimer_set(&uip_ds6_timer_ra, rand_time +
                 UIP_ND6_MIN_DELAY_BETWEEN_RAS -
                 stimer_elapsed(&uip_ds6_timer_ra));
  */ } else {
      stimer_set(&uip_ds6_timer_ra, rand_time);
    781e:	4b03      	ldr	r3, [pc, #12]	; (782c <uip_ds6_send_ra_sollicited+0x2c>)
    7820:	8819      	ldrh	r1, [r3, #0]
    7822:	4803      	ldr	r0, [pc, #12]	; (7830 <uip_ds6_send_ra_sollicited+0x30>)
    7824:	4b05      	ldr	r3, [pc, #20]	; (783c <uip_ds6_send_ra_sollicited+0x3c>)
    7826:	4798      	blx	r3
    }
  }
}
    7828:	bd10      	pop	{r4, pc}
    782a:	46c0      	nop			; (mov r8, r8)
    782c:	20000ae0 	.word	0x20000ae0
    7830:	20002b60 	.word	0x20002b60
    7834:	0000ed45 	.word	0x0000ed45
    7838:	0000ed59 	.word	0x0000ed59
    783c:	0000ed0d 	.word	0x0000ed0d

00007840 <uip_ds6_send_ra_periodic>:

/*---------------------------------------------------------------------------*/
void
uip_ds6_send_ra_periodic(void)
{
    7840:	b508      	push	{r3, lr}
  if(racount > 0) {
    7842:	4b11      	ldr	r3, [pc, #68]	; (7888 <uip_ds6_send_ra_periodic+0x48>)
    7844:	781b      	ldrb	r3, [r3, #0]
    7846:	2b00      	cmp	r3, #0
    7848:	d002      	beq.n	7850 <uip_ds6_send_ra_periodic+0x10>
    /* send previously scheduled RA */
    uip_nd6_ra_output(NULL);
    784a:	2000      	movs	r0, #0
    784c:	4b0f      	ldr	r3, [pc, #60]	; (788c <uip_ds6_send_ra_periodic+0x4c>)
    784e:	4798      	blx	r3
    PRINTF("Sending periodic RA\n\r");
  }

  rand_time = UIP_ND6_MIN_RA_INTERVAL + random_rand() %
    7850:	4b0f      	ldr	r3, [pc, #60]	; (7890 <uip_ds6_send_ra_periodic+0x50>)
    7852:	4798      	blx	r3
    7854:	21c8      	movs	r1, #200	; 0xc8
    7856:	0049      	lsls	r1, r1, #1
    7858:	4b0e      	ldr	r3, [pc, #56]	; (7894 <uip_ds6_send_ra_periodic+0x54>)
    785a:	4798      	blx	r3
    785c:	31c8      	adds	r1, #200	; 0xc8
    785e:	b289      	uxth	r1, r1
    7860:	4b0d      	ldr	r3, [pc, #52]	; (7898 <uip_ds6_send_ra_periodic+0x58>)
    7862:	8019      	strh	r1, [r3, #0]
    (uint16_t) (UIP_ND6_MAX_RA_INTERVAL - UIP_ND6_MIN_RA_INTERVAL);
  PRINTF("Random time 1 = %u\n\r", rand_time);

  if(racount < UIP_ND6_MAX_INITIAL_RAS) {
    7864:	4b08      	ldr	r3, [pc, #32]	; (7888 <uip_ds6_send_ra_periodic+0x48>)
    7866:	781b      	ldrb	r3, [r3, #0]
    7868:	2b02      	cmp	r3, #2
    786a:	d807      	bhi.n	787c <uip_ds6_send_ra_periodic+0x3c>
    if(rand_time > UIP_ND6_MAX_INITIAL_RA_INTERVAL) {
    786c:	2910      	cmp	r1, #16
    786e:	d902      	bls.n	7876 <uip_ds6_send_ra_periodic+0x36>
      rand_time = UIP_ND6_MAX_INITIAL_RA_INTERVAL;
    7870:	2110      	movs	r1, #16
    7872:	4a09      	ldr	r2, [pc, #36]	; (7898 <uip_ds6_send_ra_periodic+0x58>)
    7874:	8011      	strh	r1, [r2, #0]
      PRINTF("Random time 2 = %u\n\r", rand_time);
    }
    racount++;
    7876:	3301      	adds	r3, #1
    7878:	4a03      	ldr	r2, [pc, #12]	; (7888 <uip_ds6_send_ra_periodic+0x48>)
    787a:	7013      	strb	r3, [r2, #0]
  }
  PRINTF("Random time 3 = %u\n\r", rand_time);
  stimer_set(&uip_ds6_timer_ra, rand_time);
    787c:	4b06      	ldr	r3, [pc, #24]	; (7898 <uip_ds6_send_ra_periodic+0x58>)
    787e:	8819      	ldrh	r1, [r3, #0]
    7880:	4806      	ldr	r0, [pc, #24]	; (789c <uip_ds6_send_ra_periodic+0x5c>)
    7882:	4b07      	ldr	r3, [pc, #28]	; (78a0 <uip_ds6_send_ra_periodic+0x60>)
    7884:	4798      	blx	r3
}
    7886:	bd08      	pop	{r3, pc}
    7888:	20000ac4 	.word	0x20000ac4
    788c:	0000884d 	.word	0x0000884d
    7890:	000058a5 	.word	0x000058a5
    7894:	00010879 	.word	0x00010879
    7898:	20000ae0 	.word	0x20000ae0
    789c:	20002b60 	.word	0x20002b60
    78a0:	0000ed0d 	.word	0x0000ed0d

000078a4 <uip_ds6_periodic>:


/*---------------------------------------------------------------------------*/
void
uip_ds6_periodic(void)
{
    78a4:	b508      	push	{r3, lr}

  /* Periodic processing on unicast addresses */
  for(locaddr = uip_ds6_if.addr_list;
    78a6:	4816      	ldr	r0, [pc, #88]	; (7900 <uip_ds6_periodic+0x5c>)
    78a8:	4b16      	ldr	r3, [pc, #88]	; (7904 <uip_ds6_periodic+0x60>)
    78aa:	6018      	str	r0, [r3, #0]
      locaddr < uip_ds6_if.addr_list + UIP_DS6_ADDR_NB; locaddr++) {
    if(locaddr->isused) {
    78ac:	7803      	ldrb	r3, [r0, #0]
    78ae:	2b00      	cmp	r3, #0
    78b0:	d00b      	beq.n	78ca <uip_ds6_periodic+0x26>
      if((!locaddr->isinfinite) && (stimer_expired(&locaddr->vlifetime))) {
    78b2:	7cc3      	ldrb	r3, [r0, #19]
    78b4:	2b00      	cmp	r3, #0
    78b6:	d108      	bne.n	78ca <uip_ds6_periodic+0x26>
    78b8:	3014      	adds	r0, #20
    78ba:	4b13      	ldr	r3, [pc, #76]	; (7908 <uip_ds6_periodic+0x64>)
    78bc:	4798      	blx	r3
    78be:	2800      	cmp	r0, #0
    78c0:	d003      	beq.n	78ca <uip_ds6_periodic+0x26>
        uip_ds6_addr_rm(locaddr);
    78c2:	4b10      	ldr	r3, [pc, #64]	; (7904 <uip_ds6_periodic+0x60>)
    78c4:	6818      	ldr	r0, [r3, #0]
    78c6:	4b11      	ldr	r3, [pc, #68]	; (790c <uip_ds6_periodic+0x68>)
    78c8:	4798      	blx	r3
uip_ds6_periodic(void)
{

  /* Periodic processing on unicast addresses */
  for(locaddr = uip_ds6_if.addr_list;
      locaddr < uip_ds6_if.addr_list + UIP_DS6_ADDR_NB; locaddr++) {
    78ca:	4b0e      	ldr	r3, [pc, #56]	; (7904 <uip_ds6_periodic+0x60>)
    78cc:	6818      	ldr	r0, [r3, #0]
    78ce:	301c      	adds	r0, #28
    78d0:	6018      	str	r0, [r3, #0]
void
uip_ds6_periodic(void)
{

  /* Periodic processing on unicast addresses */
  for(locaddr = uip_ds6_if.addr_list;
    78d2:	4b0f      	ldr	r3, [pc, #60]	; (7910 <uip_ds6_periodic+0x6c>)
    78d4:	4298      	cmp	r0, r3
    78d6:	d3e9      	bcc.n	78ac <uip_ds6_periodic+0x8>
      }
    }
  }

  /* Periodic processing on default routers */
  uip_ds6_defrt_periodic();
    78d8:	4b0e      	ldr	r3, [pc, #56]	; (7914 <uip_ds6_periodic+0x70>)
    78da:	4798      	blx	r3
      uip_ds6_prefix_rm(locprefix);
    }
  }
#endif /* !UIP_CONF_ROUTER */

  uip_ds6_neighbor_periodic();
    78dc:	4b0e      	ldr	r3, [pc, #56]	; (7918 <uip_ds6_periodic+0x74>)
    78de:	4798      	blx	r3

#if UIP_CONF_ROUTER & UIP_ND6_SEND_RA
  /* Periodic RA sending */
  if(stimer_expired(&uip_ds6_timer_ra) && (uip_len == 0)) {
    78e0:	480e      	ldr	r0, [pc, #56]	; (791c <uip_ds6_periodic+0x78>)
    78e2:	4b09      	ldr	r3, [pc, #36]	; (7908 <uip_ds6_periodic+0x64>)
    78e4:	4798      	blx	r3
    78e6:	2800      	cmp	r0, #0
    78e8:	d005      	beq.n	78f6 <uip_ds6_periodic+0x52>
    78ea:	4b0d      	ldr	r3, [pc, #52]	; (7920 <uip_ds6_periodic+0x7c>)
    78ec:	881b      	ldrh	r3, [r3, #0]
    78ee:	2b00      	cmp	r3, #0
    78f0:	d101      	bne.n	78f6 <uip_ds6_periodic+0x52>
    uip_ds6_send_ra_periodic();
    78f2:	4b0c      	ldr	r3, [pc, #48]	; (7924 <uip_ds6_periodic+0x80>)
    78f4:	4798      	blx	r3
  }
#endif /* UIP_CONF_ROUTER & UIP_ND6_SEND_RA */
  etimer_reset(&uip_ds6_timer_periodic);
    78f6:	480c      	ldr	r0, [pc, #48]	; (7928 <uip_ds6_periodic+0x84>)
    78f8:	4b0c      	ldr	r3, [pc, #48]	; (792c <uip_ds6_periodic+0x88>)
    78fa:	4798      	blx	r3
  return;
}
    78fc:	bd08      	pop	{r3, pc}
    78fe:	46c0      	nop			; (mov r8, r8)
    7900:	20002b80 	.word	0x20002b80
    7904:	20000acc 	.word	0x20000acc
    7908:	0000ed21 	.word	0x0000ed21
    790c:	0000764d 	.word	0x0000764d
    7910:	20002bd4 	.word	0x20002bd4
    7914:	000072f1 	.word	0x000072f1
    7918:	00006c2d 	.word	0x00006c2d
    791c:	20002b60 	.word	0x20002b60
    7920:	20002cc0 	.word	0x20002cc0
    7924:	00007841 	.word	0x00007841
    7928:	20002cb0 	.word	0x20002cb0
    792c:	0000e935 	.word	0x0000e935

00007930 <uip_ds6_compute_reachable_time>:

#endif /* UIP_CONF_ROUTER */
/*---------------------------------------------------------------------------*/
uint32_t
uip_ds6_compute_reachable_time(void)
{
    7930:	b538      	push	{r3, r4, r5, lr}
  return (uint32_t) (UIP_ND6_MIN_RANDOM_FACTOR
                     (uip_ds6_if.base_reachable_time)) +
    ((uint16_t) (random_rand() << 8) +
    7932:	4c07      	ldr	r4, [pc, #28]	; (7950 <uip_ds6_compute_reachable_time+0x20>)
    7934:	47a0      	blx	r4
    7936:	1c05      	adds	r5, r0, #0
     (uint16_t) random_rand()) %
    7938:	47a0      	blx	r4
    (uint32_t) (UIP_ND6_MAX_RANDOM_FACTOR(uip_ds6_if.base_reachable_time) -
    793a:	4b06      	ldr	r3, [pc, #24]	; (7954 <uip_ds6_compute_reachable_time+0x24>)
    793c:	689c      	ldr	r4, [r3, #8]
uint32_t
uip_ds6_compute_reachable_time(void)
{
  return (uint32_t) (UIP_ND6_MIN_RANDOM_FACTOR
                     (uip_ds6_if.base_reachable_time)) +
    ((uint16_t) (random_rand() << 8) +
    793e:	022d      	lsls	r5, r5, #8
    7940:	b2ad      	uxth	r5, r5
    7942:	1828      	adds	r0, r5, r0
     (uint16_t) random_rand()) %
    7944:	1c21      	adds	r1, r4, #0
    7946:	4b04      	ldr	r3, [pc, #16]	; (7958 <uip_ds6_compute_reachable_time+0x28>)
    7948:	4798      	blx	r3
    (uint32_t) (UIP_ND6_MAX_RANDOM_FACTOR(uip_ds6_if.base_reachable_time) -
    794a:	0864      	lsrs	r4, r4, #1
#endif /* UIP_CONF_ROUTER */
/*---------------------------------------------------------------------------*/
uint32_t
uip_ds6_compute_reachable_time(void)
{
  return (uint32_t) (UIP_ND6_MIN_RANDOM_FACTOR
    794c:	1908      	adds	r0, r1, r4
                     (uip_ds6_if.base_reachable_time)) +
    ((uint16_t) (random_rand() << 8) +
     (uint16_t) random_rand()) %
    (uint32_t) (UIP_ND6_MAX_RANDOM_FACTOR(uip_ds6_if.base_reachable_time) -
                UIP_ND6_MIN_RANDOM_FACTOR(uip_ds6_if.base_reachable_time));
}
    794e:	bd38      	pop	{r3, r4, r5, pc}
    7950:	000058a5 	.word	0x000058a5
    7954:	20002b68 	.word	0x20002b68
    7958:	00010879 	.word	0x00010879

0000795c <uip_ds6_init>:
static uip_ds6_prefix_t *locprefix;

/*---------------------------------------------------------------------------*/
void
uip_ds6_init(void)
{
    795c:	b5f0      	push	{r4, r5, r6, r7, lr}
    795e:	b083      	sub	sp, #12

  uip_ds6_neighbors_init();
    7960:	4b2e      	ldr	r3, [pc, #184]	; (7a1c <uip_ds6_init+0xc0>)
    7962:	4798      	blx	r3
  uip_ds6_route_init();
    7964:	4b2e      	ldr	r3, [pc, #184]	; (7a20 <uip_ds6_init+0xc4>)
    7966:	4798      	blx	r3

  PRINTF("Init of IPv6 data structures\n\r");
  PRINTF("%u neighbors\n%u default routers\n%u prefixes\n%u routes\n%u unicast addresses\n%u multicast addresses\n%u anycast addresses\n\r",
     NBR_TABLE_MAX_NEIGHBORS, UIP_DS6_DEFRT_NB, UIP_DS6_PREFIX_NB, UIP_DS6_ROUTE_NB,
     UIP_DS6_ADDR_NB, UIP_DS6_MADDR_NB, UIP_DS6_AADDR_NB);
  memset(uip_ds6_prefix_list, 0, sizeof(uip_ds6_prefix_list));
    7968:	482e      	ldr	r0, [pc, #184]	; (7a24 <uip_ds6_init+0xc8>)
    796a:	2100      	movs	r1, #0
    796c:	2260      	movs	r2, #96	; 0x60
    796e:	4d2e      	ldr	r5, [pc, #184]	; (7a28 <uip_ds6_init+0xcc>)
    7970:	47a8      	blx	r5
  memset(&uip_ds6_if, 0, sizeof(uip_ds6_if));
    7972:	4c2e      	ldr	r4, [pc, #184]	; (7a2c <uip_ds6_init+0xd0>)
    7974:	1c20      	adds	r0, r4, #0
    7976:	2100      	movs	r1, #0
    7978:	22e4      	movs	r2, #228	; 0xe4
    797a:	47a8      	blx	r5
  uip_ds6_addr_size = sizeof(struct uip_ds6_addr);
    797c:	221c      	movs	r2, #28
    797e:	4b2c      	ldr	r3, [pc, #176]	; (7a30 <uip_ds6_init+0xd4>)
    7980:	701a      	strb	r2, [r3, #0]
  uip_ds6_netif_addr_list_offset = offsetof(struct uip_ds6_netif, addr_list);
    7982:	3a04      	subs	r2, #4
    7984:	4b2b      	ldr	r3, [pc, #172]	; (7a34 <uip_ds6_init+0xd8>)
    7986:	701a      	strb	r2, [r3, #0]

  /* Set interface parameters */
  uip_ds6_if.link_mtu = UIP_LINK_MTU;
    7988:	23a0      	movs	r3, #160	; 0xa0
    798a:	00db      	lsls	r3, r3, #3
    798c:	6023      	str	r3, [r4, #0]
  uip_ds6_if.cur_hop_limit = UIP_TTL;
    798e:	2340      	movs	r3, #64	; 0x40
    7990:	7123      	strb	r3, [r4, #4]
  uip_ds6_if.base_reachable_time = UIP_ND6_REACHABLE_TIME;
    7992:	4b29      	ldr	r3, [pc, #164]	; (7a38 <uip_ds6_init+0xdc>)
    7994:	60a3      	str	r3, [r4, #8]
  uip_ds6_if.reachable_time = uip_ds6_compute_reachable_time();
    7996:	4b29      	ldr	r3, [pc, #164]	; (7a3c <uip_ds6_init+0xe0>)
    7998:	4798      	blx	r3
    799a:	60e0      	str	r0, [r4, #12]
  uip_ds6_if.retrans_timer = UIP_ND6_RETRANS_TIMER;
    799c:	23fa      	movs	r3, #250	; 0xfa
    799e:	009b      	lsls	r3, r3, #2
    79a0:	6123      	str	r3, [r4, #16]
  uip_ds6_if.maxdadns = UIP_ND6_DEF_MAXDADNS;
    79a2:	2500      	movs	r5, #0
    79a4:	7525      	strb	r5, [r4, #20]

  /* Create link local address, prefix, multicast addresses, anycast addresses */
  uip_create_linklocal_prefix(&loc_fipaddr);
    79a6:	4c26      	ldr	r4, [pc, #152]	; (7a40 <uip_ds6_init+0xe4>)
    79a8:	4b26      	ldr	r3, [pc, #152]	; (7a44 <uip_ds6_init+0xe8>)
    79aa:	8023      	strh	r3, [r4, #0]
    79ac:	8065      	strh	r5, [r4, #2]
    79ae:	80a5      	strh	r5, [r4, #4]
    79b0:	80e5      	strh	r5, [r4, #6]
#if UIP_CONF_ROUTER
  uip_ds6_prefix_add(&loc_fipaddr, UIP_DEFAULT_PREFIX_LEN, 0, 0, 0, 0);
    79b2:	9500      	str	r5, [sp, #0]
    79b4:	9501      	str	r5, [sp, #4]
    79b6:	1c20      	adds	r0, r4, #0
    79b8:	2140      	movs	r1, #64	; 0x40
    79ba:	2200      	movs	r2, #0
    79bc:	2300      	movs	r3, #0
    79be:	4e22      	ldr	r6, [pc, #136]	; (7a48 <uip_ds6_init+0xec>)
    79c0:	47b0      	blx	r6
#else /* UIP_CONF_ROUTER */
  uip_ds6_prefix_add(&loc_fipaddr, UIP_DEFAULT_PREFIX_LEN, 0);
#endif /* UIP_CONF_ROUTER */
  uip_ds6_set_addr_iid(&loc_fipaddr, &uip_lladdr);
    79c2:	1c20      	adds	r0, r4, #0
    79c4:	4921      	ldr	r1, [pc, #132]	; (7a4c <uip_ds6_init+0xf0>)
    79c6:	4b22      	ldr	r3, [pc, #136]	; (7a50 <uip_ds6_init+0xf4>)
    79c8:	4798      	blx	r3
  uip_ds6_addr_add(&loc_fipaddr, 0, ADDR_AUTOCONF);
    79ca:	1c20      	adds	r0, r4, #0
    79cc:	2100      	movs	r1, #0
    79ce:	2201      	movs	r2, #1
    79d0:	4b20      	ldr	r3, [pc, #128]	; (7a54 <uip_ds6_init+0xf8>)
    79d2:	4798      	blx	r3

  uip_create_linklocal_allnodes_mcast(&loc_fipaddr);
    79d4:	4f20      	ldr	r7, [pc, #128]	; (7a58 <uip_ds6_init+0xfc>)
    79d6:	8027      	strh	r7, [r4, #0]
    79d8:	8065      	strh	r5, [r4, #2]
    79da:	80a5      	strh	r5, [r4, #4]
    79dc:	80e5      	strh	r5, [r4, #6]
    79de:	8125      	strh	r5, [r4, #8]
    79e0:	8165      	strh	r5, [r4, #10]
    79e2:	81a5      	strh	r5, [r4, #12]
    79e4:	2380      	movs	r3, #128	; 0x80
    79e6:	005b      	lsls	r3, r3, #1
    79e8:	81e3      	strh	r3, [r4, #14]
  uip_ds6_maddr_add(&loc_fipaddr);
    79ea:	1c20      	adds	r0, r4, #0
    79ec:	4e1b      	ldr	r6, [pc, #108]	; (7a5c <uip_ds6_init+0x100>)
    79ee:	47b0      	blx	r6
#if UIP_CONF_ROUTER
  uip_create_linklocal_allrouters_mcast(&loc_fipaddr);
    79f0:	8027      	strh	r7, [r4, #0]
    79f2:	8065      	strh	r5, [r4, #2]
    79f4:	80a5      	strh	r5, [r4, #4]
    79f6:	80e5      	strh	r5, [r4, #6]
    79f8:	8125      	strh	r5, [r4, #8]
    79fa:	8165      	strh	r5, [r4, #10]
    79fc:	81a5      	strh	r5, [r4, #12]
    79fe:	2380      	movs	r3, #128	; 0x80
    7a00:	009b      	lsls	r3, r3, #2
    7a02:	81e3      	strh	r3, [r4, #14]
  uip_ds6_maddr_add(&loc_fipaddr);
    7a04:	1c20      	adds	r0, r4, #0
    7a06:	47b0      	blx	r6
#if UIP_ND6_SEND_RA
  stimer_set(&uip_ds6_timer_ra, 2);     /* wait to have a link local IP address */
    7a08:	4815      	ldr	r0, [pc, #84]	; (7a60 <uip_ds6_init+0x104>)
    7a0a:	2102      	movs	r1, #2
    7a0c:	4b15      	ldr	r3, [pc, #84]	; (7a64 <uip_ds6_init+0x108>)
    7a0e:	4798      	blx	r3
#else /* UIP_CONF_ROUTER */
  etimer_set(&uip_ds6_timer_rs,
             random_rand() % (UIP_ND6_MAX_RTR_SOLICITATION_DELAY *
                              CLOCK_SECOND));
#endif /* UIP_CONF_ROUTER */
  etimer_set(&uip_ds6_timer_periodic, UIP_DS6_PERIOD);
    7a10:	4815      	ldr	r0, [pc, #84]	; (7a68 <uip_ds6_init+0x10c>)
    7a12:	210c      	movs	r1, #12
    7a14:	4b15      	ldr	r3, [pc, #84]	; (7a6c <uip_ds6_init+0x110>)
    7a16:	4798      	blx	r3

  return;
}
    7a18:	b003      	add	sp, #12
    7a1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    7a1c:	00006ad5 	.word	0x00006ad5
    7a20:	00006de1 	.word	0x00006de1
    7a24:	20002c50 	.word	0x20002c50
    7a28:	00010b69 	.word	0x00010b69
    7a2c:	20002b68 	.word	0x20002b68
    7a30:	20002c4d 	.word	0x20002c4d
    7a34:	20002c4c 	.word	0x20002c4c
    7a38:	00007530 	.word	0x00007530
    7a3c:	00007931 	.word	0x00007931
    7a40:	20000ad0 	.word	0x20000ad0
    7a44:	ffff80fe 	.word	0xffff80fe
    7a48:	000073a1 	.word	0x000073a1
    7a4c:	20002ccc 	.word	0x20002ccc
    7a50:	000076a5 	.word	0x000076a5
    7a54:	00007561 	.word	0x00007561
    7a58:	000002ff 	.word	0x000002ff
    7a5c:	00007515 	.word	0x00007515
    7a60:	20002b60 	.word	0x20002b60
    7a64:	0000ed0d 	.word	0x0000ed0d
    7a68:	20002cb0 	.word	0x20002cb0
    7a6c:	0000e91d 	.word	0x0000e91d

00007a70 <echo_reply_input>:
  tcpip_ipv6_output();
}
/*---------------------------------------------------------------------------*/
static void
echo_reply_input(void)
{
    7a70:	b5f0      	push	{r4, r5, r6, r7, lr}
    7a72:	4647      	mov	r7, r8
    7a74:	b480      	push	{r7}
    7a76:	b086      	sub	sp, #24
  uip_ipaddr_t sender;
#if UIP_CONF_IPV6_RPL
  uint8_t temp_ext_len;
#endif /* UIP_CONF_IPV6_RPL */

  uip_ipaddr_copy(&sender, &UIP_IP_BUF->srcipaddr);
    7a78:	aa02      	add	r2, sp, #8
    7a7a:	4938      	ldr	r1, [pc, #224]	; (7b5c <echo_reply_input+0xec>)
    7a7c:	1c0b      	adds	r3, r1, #0
    7a7e:	3308      	adds	r3, #8
    7a80:	cb31      	ldmia	r3!, {r0, r4, r5}
    7a82:	c231      	stmia	r2!, {r0, r4, r5}
    7a84:	681b      	ldr	r3, [r3, #0]
    7a86:	6013      	str	r3, [r2, #0]
  ttl = UIP_IP_BUF->ttl;
    7a88:	79cb      	ldrb	r3, [r1, #7]
    7a8a:	9301      	str	r3, [sp, #4]

  if(uip_ext_len > 0) {
    7a8c:	4b34      	ldr	r3, [pc, #208]	; (7b60 <echo_reply_input+0xf0>)
    7a8e:	781b      	ldrb	r3, [r3, #0]
    7a90:	2b00      	cmp	r3, #0
    7a92:	d041      	beq.n	7b18 <echo_reply_input+0xa8>
#if UIP_CONF_IPV6_RPL
    if((temp_ext_len = rpl_invert_header())) {
    7a94:	4b33      	ldr	r3, [pc, #204]	; (7b64 <echo_reply_input+0xf4>)
    7a96:	4798      	blx	r3
    7a98:	1e04      	subs	r4, r0, #0
    7a9a:	d023      	beq.n	7ae4 <echo_reply_input+0x74>
      /* If there were other extension headers*/
      UIP_FIRST_EXT_BUF->next = UIP_PROTO_ICMP6;
    7a9c:	203a      	movs	r0, #58	; 0x3a
    7a9e:	2228      	movs	r2, #40	; 0x28
    7aa0:	492e      	ldr	r1, [pc, #184]	; (7b5c <echo_reply_input+0xec>)
    7aa2:	5488      	strb	r0, [r1, r2]
      if (uip_ext_len != temp_ext_len) {
    7aa4:	4a2e      	ldr	r2, [pc, #184]	; (7b60 <echo_reply_input+0xf0>)
    7aa6:	7812      	ldrb	r2, [r2, #0]
    7aa8:	42a2      	cmp	r2, r4
    7aaa:	d014      	beq.n	7ad6 <echo_reply_input+0x66>
        uip_len -= (uip_ext_len - temp_ext_len);
    7aac:	492e      	ldr	r1, [pc, #184]	; (7b68 <echo_reply_input+0xf8>)
    7aae:	880b      	ldrh	r3, [r1, #0]
    7ab0:	1a9b      	subs	r3, r3, r2
    7ab2:	191b      	adds	r3, r3, r4
    7ab4:	b29b      	uxth	r3, r3
    7ab6:	800b      	strh	r3, [r1, #0]
        UIP_IP_BUF->len[0] = ((uip_len - UIP_IPH_LEN) >> 8);
    7ab8:	1c1e      	adds	r6, r3, #0
    7aba:	3e28      	subs	r6, #40	; 0x28
    7abc:	4927      	ldr	r1, [pc, #156]	; (7b5c <echo_reply_input+0xec>)
    7abe:	1230      	asrs	r0, r6, #8
    7ac0:	7108      	strb	r0, [r1, #4]
        UIP_IP_BUF->len[1] = ((uip_len - UIP_IPH_LEN) & 0xff);
    7ac2:	714e      	strb	r6, [r1, #5]
         * header) to the new location in the reply.  The shift is
         * equal to the length of the remaining extension headers
         * present Note: UIP_ICMP_BUF still points to the echo reply
         * at this stage
         */
        memmove((uint8_t *)UIP_ICMP_BUF + UIP_ICMPH_LEN - (uip_ext_len - temp_ext_len),
    7ac4:	322c      	adds	r2, #44	; 0x2c
    7ac6:	1c20      	adds	r0, r4, #0
    7ac8:	302c      	adds	r0, #44	; 0x2c
    7aca:	1840      	adds	r0, r0, r1
    7acc:	1851      	adds	r1, r2, r1
                (uint8_t *)UIP_ICMP_BUF + UIP_ICMPH_LEN,
                (uip_len - UIP_IPH_LEN - temp_ext_len - UIP_ICMPH_LEN));
    7ace:	1b36      	subs	r6, r6, r4
    7ad0:	1f32      	subs	r2, r6, #4
         * header) to the new location in the reply.  The shift is
         * equal to the length of the remaining extension headers
         * present Note: UIP_ICMP_BUF still points to the echo reply
         * at this stage
         */
        memmove((uint8_t *)UIP_ICMP_BUF + UIP_ICMPH_LEN - (uip_ext_len - temp_ext_len),
    7ad2:	4b26      	ldr	r3, [pc, #152]	; (7b6c <echo_reply_input+0xfc>)
    7ad4:	4798      	blx	r3
                (uint8_t *)UIP_ICMP_BUF + UIP_ICMPH_LEN,
                (uip_len - UIP_IPH_LEN - temp_ext_len - UIP_ICMPH_LEN));
      }
      uip_ext_len = temp_ext_len;
    7ad6:	4b22      	ldr	r3, [pc, #136]	; (7b60 <echo_reply_input+0xf0>)
    7ad8:	701c      	strb	r4, [r3, #0]
      uip_len -= uip_ext_len;
    7ada:	4a23      	ldr	r2, [pc, #140]	; (7b68 <echo_reply_input+0xf8>)
    7adc:	8813      	ldrh	r3, [r2, #0]
    7ade:	1b1c      	subs	r4, r3, r4
    7ae0:	8014      	strh	r4, [r2, #0]
    7ae2:	e019      	b.n	7b18 <echo_reply_input+0xa8>
    } else {
#endif /* UIP_CONF_IPV6_RPL */
      /* If there were extension headers*/
      UIP_IP_BUF->proto = UIP_PROTO_ICMP6;
    7ae4:	4b1d      	ldr	r3, [pc, #116]	; (7b5c <echo_reply_input+0xec>)
    7ae6:	223a      	movs	r2, #58	; 0x3a
    7ae8:	719a      	strb	r2, [r3, #6]
      uip_len -= uip_ext_len;
    7aea:	4c1d      	ldr	r4, [pc, #116]	; (7b60 <echo_reply_input+0xf0>)
    7aec:	7821      	ldrb	r1, [r4, #0]
    7aee:	481e      	ldr	r0, [pc, #120]	; (7b68 <echo_reply_input+0xf8>)
    7af0:	8802      	ldrh	r2, [r0, #0]
    7af2:	1a52      	subs	r2, r2, r1
    7af4:	b292      	uxth	r2, r2
    7af6:	8002      	strh	r2, [r0, #0]
      UIP_IP_BUF->len[0] = ((uip_len - UIP_IPH_LEN) >> 8);
    7af8:	1c10      	adds	r0, r2, #0
    7afa:	3828      	subs	r0, #40	; 0x28
    7afc:	1200      	asrs	r0, r0, #8
    7afe:	7118      	strb	r0, [r3, #4]
      UIP_IP_BUF->len[1] = ((uip_len - UIP_IPH_LEN) & 0xff);
    7b00:	1c10      	adds	r0, r2, #0
    7b02:	3828      	subs	r0, #40	; 0x28
    7b04:	7158      	strb	r0, [r3, #5]
      /* move the echo reply payload (starting after the icmp header)
       * to the new location in the reply.  The shift is equal to the
       * length of the extension headers present Note: UIP_ICMP_BUF
       * still points to the echo request at this stage
       */
      memmove((uint8_t *)UIP_ICMP_BUF + UIP_ICMPH_LEN - uip_ext_len,
    7b06:	1c18      	adds	r0, r3, #0
    7b08:	302c      	adds	r0, #44	; 0x2c
              (uint8_t *)UIP_ICMP_BUF + UIP_ICMPH_LEN,
    7b0a:	312c      	adds	r1, #44	; 0x2c
      /* move the echo reply payload (starting after the icmp header)
       * to the new location in the reply.  The shift is equal to the
       * length of the extension headers present Note: UIP_ICMP_BUF
       * still points to the echo request at this stage
       */
      memmove((uint8_t *)UIP_ICMP_BUF + UIP_ICMPH_LEN - uip_ext_len,
    7b0c:	18c9      	adds	r1, r1, r3
              (uint8_t *)UIP_ICMP_BUF + UIP_ICMPH_LEN,
              (uip_len - UIP_IPH_LEN - UIP_ICMPH_LEN));
    7b0e:	3a2c      	subs	r2, #44	; 0x2c
      /* move the echo reply payload (starting after the icmp header)
       * to the new location in the reply.  The shift is equal to the
       * length of the extension headers present Note: UIP_ICMP_BUF
       * still points to the echo request at this stage
       */
      memmove((uint8_t *)UIP_ICMP_BUF + UIP_ICMPH_LEN - uip_ext_len,
    7b10:	4b16      	ldr	r3, [pc, #88]	; (7b6c <echo_reply_input+0xfc>)
    7b12:	4798      	blx	r3
              (uint8_t *)UIP_ICMP_BUF + UIP_ICMPH_LEN,
              (uip_len - UIP_IPH_LEN - UIP_ICMPH_LEN));
      uip_ext_len = 0;
    7b14:	2300      	movs	r3, #0
    7b16:	7023      	strb	r3, [r4, #0]

  /* Call all registered applications to let them know an echo reply
     has been received. */
  {
    struct uip_icmp6_echo_reply_notification *n;
    for(n = list_head(echo_reply_callback_list);
    7b18:	4815      	ldr	r0, [pc, #84]	; (7b70 <echo_reply_input+0x100>)
    7b1a:	4b16      	ldr	r3, [pc, #88]	; (7b74 <echo_reply_input+0x104>)
    7b1c:	4798      	blx	r3
    7b1e:	1e04      	subs	r4, r0, #0
    7b20:	d015      	beq.n	7b4e <echo_reply_input+0xde>
        n != NULL;
        n = list_item_next(n)) {
      if(n->callback != NULL) {
        n->callback(&sender, ttl,
                    (uint8_t *)&UIP_ICMP_BUF[sizeof(struct uip_icmp_hdr)],
    7b22:	4b0f      	ldr	r3, [pc, #60]	; (7b60 <echo_reply_input+0xf0>)
    7b24:	4698      	mov	r8, r3
    struct uip_icmp6_echo_reply_notification *n;
    for(n = list_head(echo_reply_callback_list);
        n != NULL;
        n = list_item_next(n)) {
      if(n->callback != NULL) {
        n->callback(&sender, ttl,
    7b26:	4f0d      	ldr	r7, [pc, #52]	; (7b5c <echo_reply_input+0xec>)
    7b28:	4e0f      	ldr	r6, [pc, #60]	; (7b68 <echo_reply_input+0xf8>)
  {
    struct uip_icmp6_echo_reply_notification *n;
    for(n = list_head(echo_reply_callback_list);
        n != NULL;
        n = list_item_next(n)) {
      if(n->callback != NULL) {
    7b2a:	6865      	ldr	r5, [r4, #4]
    7b2c:	2d00      	cmp	r5, #0
    7b2e:	d009      	beq.n	7b44 <echo_reply_input+0xd4>
        n->callback(&sender, ttl,
                    (uint8_t *)&UIP_ICMP_BUF[sizeof(struct uip_icmp_hdr)],
    7b30:	4643      	mov	r3, r8
    7b32:	781a      	ldrb	r2, [r3, #0]
    7b34:	3238      	adds	r2, #56	; 0x38
    struct uip_icmp6_echo_reply_notification *n;
    for(n = list_head(echo_reply_callback_list);
        n != NULL;
        n = list_item_next(n)) {
      if(n->callback != NULL) {
        n->callback(&sender, ttl,
    7b36:	19d2      	adds	r2, r2, r7
    7b38:	8833      	ldrh	r3, [r6, #0]
    7b3a:	3b2c      	subs	r3, #44	; 0x2c
    7b3c:	b29b      	uxth	r3, r3
    7b3e:	a802      	add	r0, sp, #8
    7b40:	9901      	ldr	r1, [sp, #4]
    7b42:	47a8      	blx	r5
     has been received. */
  {
    struct uip_icmp6_echo_reply_notification *n;
    for(n = list_head(echo_reply_callback_list);
        n != NULL;
        n = list_item_next(n)) {
    7b44:	1c20      	adds	r0, r4, #0
    7b46:	4b0c      	ldr	r3, [pc, #48]	; (7b78 <echo_reply_input+0x108>)
    7b48:	4798      	blx	r3
    7b4a:	1e04      	subs	r4, r0, #0

  /* Call all registered applications to let them know an echo reply
     has been received. */
  {
    struct uip_icmp6_echo_reply_notification *n;
    for(n = list_head(echo_reply_callback_list);
    7b4c:	d1ed      	bne.n	7b2a <echo_reply_input+0xba>
                    uip_len - sizeof(struct uip_icmp_hdr) - UIP_IPH_LEN);
      }
    }
  }

  uip_len = 0;
    7b4e:	2200      	movs	r2, #0
    7b50:	4b05      	ldr	r3, [pc, #20]	; (7b68 <echo_reply_input+0xf8>)
    7b52:	801a      	strh	r2, [r3, #0]
  return;
}
    7b54:	b006      	add	sp, #24
    7b56:	bc04      	pop	{r2}
    7b58:	4690      	mov	r8, r2
    7b5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    7b5c:	20002cd4 	.word	0x20002cd4
    7b60:	20000b12 	.word	0x20000b12
    7b64:	0000d419 	.word	0x0000d419
    7b68:	20002cc0 	.word	0x20002cc0
    7b6c:	00010b41 	.word	0x00010b41
    7b70:	20000af4 	.word	0x20000af4
    7b74:	00005719 	.word	0x00005719
    7b78:	000057c1 	.word	0x000057c1

00007b7c <echo_request_input>:
  list_add(input_handler_list, handler);
}
/*---------------------------------------------------------------------------*/
static void
echo_request_input(void)
{
    7b7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  PRINTF("to");
  PRINT6ADDR(&UIP_IP_BUF->destipaddr);
  PRINTF("\n\r");

  /* IP header */
  UIP_IP_BUF->ttl = uip_ds6_if.cur_hop_limit;
    7b7e:	4b40      	ldr	r3, [pc, #256]	; (7c80 <echo_request_input+0x104>)
    7b80:	4a40      	ldr	r2, [pc, #256]	; (7c84 <echo_request_input+0x108>)
    7b82:	7912      	ldrb	r2, [r2, #4]
    7b84:	71da      	strb	r2, [r3, #7]

  if(uip_is_addr_mcast(&UIP_IP_BUF->destipaddr)){
    7b86:	7e1b      	ldrb	r3, [r3, #24]
    7b88:	2bff      	cmp	r3, #255	; 0xff
    7b8a:	d10e      	bne.n	7baa <echo_request_input+0x2e>
    uip_ipaddr_copy(&UIP_IP_BUF->destipaddr, &UIP_IP_BUF->srcipaddr);
    7b8c:	483c      	ldr	r0, [pc, #240]	; (7c80 <echo_request_input+0x104>)
    7b8e:	1c03      	adds	r3, r0, #0
    7b90:	3318      	adds	r3, #24
    7b92:	1c02      	adds	r2, r0, #0
    7b94:	3208      	adds	r2, #8
    7b96:	ca32      	ldmia	r2!, {r1, r4, r5}
    7b98:	c332      	stmia	r3!, {r1, r4, r5}
    7b9a:	6812      	ldr	r2, [r2, #0]
    7b9c:	601a      	str	r2, [r3, #0]
    uip_ds6_select_src(&UIP_IP_BUF->srcipaddr, &UIP_IP_BUF->destipaddr);
    7b9e:	3008      	adds	r0, #8
    7ba0:	1c01      	adds	r1, r0, #0
    7ba2:	3110      	adds	r1, #16
    7ba4:	4b38      	ldr	r3, [pc, #224]	; (7c88 <echo_request_input+0x10c>)
    7ba6:	4798      	blx	r3
    7ba8:	e014      	b.n	7bd4 <echo_request_input+0x58>
  } else {
    uip_ipaddr_copy(&tmp_ipaddr, &UIP_IP_BUF->srcipaddr);
    7baa:	4a38      	ldr	r2, [pc, #224]	; (7c8c <echo_request_input+0x110>)
    7bac:	4b34      	ldr	r3, [pc, #208]	; (7c80 <echo_request_input+0x104>)
    7bae:	1c19      	adds	r1, r3, #0
    7bb0:	3108      	adds	r1, #8
    7bb2:	1c10      	adds	r0, r2, #0
    7bb4:	c970      	ldmia	r1!, {r4, r5, r6}
    7bb6:	c070      	stmia	r0!, {r4, r5, r6}
    7bb8:	680c      	ldr	r4, [r1, #0]
    7bba:	6004      	str	r4, [r0, #0]
    uip_ipaddr_copy(&UIP_IP_BUF->srcipaddr, &UIP_IP_BUF->destipaddr);
    7bbc:	1c19      	adds	r1, r3, #0
    7bbe:	3108      	adds	r1, #8
    7bc0:	1c18      	adds	r0, r3, #0
    7bc2:	3018      	adds	r0, #24
    7bc4:	c8e0      	ldmia	r0!, {r5, r6, r7}
    7bc6:	c1e0      	stmia	r1!, {r5, r6, r7}
    7bc8:	6800      	ldr	r0, [r0, #0]
    7bca:	6008      	str	r0, [r1, #0]
    uip_ipaddr_copy(&UIP_IP_BUF->destipaddr, &tmp_ipaddr);
    7bcc:	3318      	adds	r3, #24
    7bce:	ca23      	ldmia	r2!, {r0, r1, r5}
    7bd0:	c323      	stmia	r3!, {r0, r1, r5}
    7bd2:	601c      	str	r4, [r3, #0]
  }

  if(uip_ext_len > 0) {
    7bd4:	4b2e      	ldr	r3, [pc, #184]	; (7c90 <echo_request_input+0x114>)
    7bd6:	781b      	ldrb	r3, [r3, #0]
    7bd8:	2b00      	cmp	r3, #0
    7bda:	d03d      	beq.n	7c58 <echo_request_input+0xdc>
#if UIP_CONF_IPV6_RPL
    if((temp_ext_len = rpl_invert_header())) {
    7bdc:	4b2d      	ldr	r3, [pc, #180]	; (7c94 <echo_request_input+0x118>)
    7bde:	4798      	blx	r3
    7be0:	1e04      	subs	r4, r0, #0
    7be2:	d01f      	beq.n	7c24 <echo_request_input+0xa8>
      /* If there were other extension headers*/
      UIP_FIRST_EXT_BUF->next = UIP_PROTO_ICMP6;
    7be4:	203a      	movs	r0, #58	; 0x3a
    7be6:	2228      	movs	r2, #40	; 0x28
    7be8:	4925      	ldr	r1, [pc, #148]	; (7c80 <echo_request_input+0x104>)
    7bea:	5488      	strb	r0, [r1, r2]
      if (uip_ext_len != temp_ext_len) {
    7bec:	4a28      	ldr	r2, [pc, #160]	; (7c90 <echo_request_input+0x114>)
    7bee:	7811      	ldrb	r1, [r2, #0]
    7bf0:	42a1      	cmp	r1, r4
    7bf2:	d014      	beq.n	7c1e <echo_request_input+0xa2>
        uip_len -= (uip_ext_len - temp_ext_len);
    7bf4:	4a28      	ldr	r2, [pc, #160]	; (7c98 <echo_request_input+0x11c>)
    7bf6:	8813      	ldrh	r3, [r2, #0]
    7bf8:	1a5b      	subs	r3, r3, r1
    7bfa:	191b      	adds	r3, r3, r4
    7bfc:	b29b      	uxth	r3, r3
    7bfe:	8013      	strh	r3, [r2, #0]
        UIP_IP_BUF->len[0] = ((uip_len - UIP_IPH_LEN) >> 8);
    7c00:	1c1a      	adds	r2, r3, #0
    7c02:	3a28      	subs	r2, #40	; 0x28
    7c04:	4d1e      	ldr	r5, [pc, #120]	; (7c80 <echo_request_input+0x104>)
    7c06:	1210      	asrs	r0, r2, #8
    7c08:	7128      	strb	r0, [r5, #4]
        UIP_IP_BUF->len[1] = ((uip_len - UIP_IPH_LEN) & 0xff);
    7c0a:	716a      	strb	r2, [r5, #5]
        /* move the echo request payload (starting after the icmp header)
         * to the new location in the reply.
         * The shift is equal to the length of the remaining extension headers present
         * Note: UIP_ICMP_BUF still points to the echo request at this stage
         */
      memmove((uint8_t *)UIP_ICMP_BUF + UIP_ICMPH_LEN - (uip_ext_len - temp_ext_len),
    7c0c:	312c      	adds	r1, #44	; 0x2c
    7c0e:	1c20      	adds	r0, r4, #0
    7c10:	302c      	adds	r0, #44	; 0x2c
    7c12:	1940      	adds	r0, r0, r5
    7c14:	1949      	adds	r1, r1, r5
              (uint8_t *)UIP_ICMP_BUF + UIP_ICMPH_LEN,
              (uip_len - UIP_IPH_LEN - temp_ext_len - UIP_ICMPH_LEN));
    7c16:	1b12      	subs	r2, r2, r4
    7c18:	3a04      	subs	r2, #4
        /* move the echo request payload (starting after the icmp header)
         * to the new location in the reply.
         * The shift is equal to the length of the remaining extension headers present
         * Note: UIP_ICMP_BUF still points to the echo request at this stage
         */
      memmove((uint8_t *)UIP_ICMP_BUF + UIP_ICMPH_LEN - (uip_ext_len - temp_ext_len),
    7c1a:	4b20      	ldr	r3, [pc, #128]	; (7c9c <echo_request_input+0x120>)
    7c1c:	4798      	blx	r3
              (uint8_t *)UIP_ICMP_BUF + UIP_ICMPH_LEN,
              (uip_len - UIP_IPH_LEN - temp_ext_len - UIP_ICMPH_LEN));
      }
      uip_ext_len = temp_ext_len;
    7c1e:	4b1c      	ldr	r3, [pc, #112]	; (7c90 <echo_request_input+0x114>)
    7c20:	701c      	strb	r4, [r3, #0]
    7c22:	e019      	b.n	7c58 <echo_request_input+0xdc>
    } else {
#endif /* UIP_CONF_IPV6_RPL */
      /* If there were extension headers*/
      UIP_IP_BUF->proto = UIP_PROTO_ICMP6;
    7c24:	4b16      	ldr	r3, [pc, #88]	; (7c80 <echo_request_input+0x104>)
    7c26:	223a      	movs	r2, #58	; 0x3a
    7c28:	719a      	strb	r2, [r3, #6]
      uip_len -= uip_ext_len;
    7c2a:	4c19      	ldr	r4, [pc, #100]	; (7c90 <echo_request_input+0x114>)
    7c2c:	7821      	ldrb	r1, [r4, #0]
    7c2e:	481a      	ldr	r0, [pc, #104]	; (7c98 <echo_request_input+0x11c>)
    7c30:	8802      	ldrh	r2, [r0, #0]
    7c32:	1a52      	subs	r2, r2, r1
    7c34:	b292      	uxth	r2, r2
    7c36:	8002      	strh	r2, [r0, #0]
      UIP_IP_BUF->len[0] = ((uip_len - UIP_IPH_LEN) >> 8);
    7c38:	1c10      	adds	r0, r2, #0
    7c3a:	3828      	subs	r0, #40	; 0x28
    7c3c:	1200      	asrs	r0, r0, #8
    7c3e:	7118      	strb	r0, [r3, #4]
      UIP_IP_BUF->len[1] = ((uip_len - UIP_IPH_LEN) & 0xff);
    7c40:	1c10      	adds	r0, r2, #0
    7c42:	3828      	subs	r0, #40	; 0x28
    7c44:	7158      	strb	r0, [r3, #5]
      /* move the echo request payload (starting after the icmp header)
       * to the new location in the reply.
       * The shift is equal to the length of the extension headers present
       * Note: UIP_ICMP_BUF still points to the echo request at this stage
       */
      memmove((uint8_t *)UIP_ICMP_BUF + UIP_ICMPH_LEN - uip_ext_len,
    7c46:	1c18      	adds	r0, r3, #0
    7c48:	302c      	adds	r0, #44	; 0x2c
              (uint8_t *)UIP_ICMP_BUF + UIP_ICMPH_LEN,
    7c4a:	312c      	adds	r1, #44	; 0x2c
      /* move the echo request payload (starting after the icmp header)
       * to the new location in the reply.
       * The shift is equal to the length of the extension headers present
       * Note: UIP_ICMP_BUF still points to the echo request at this stage
       */
      memmove((uint8_t *)UIP_ICMP_BUF + UIP_ICMPH_LEN - uip_ext_len,
    7c4c:	18c9      	adds	r1, r1, r3
              (uint8_t *)UIP_ICMP_BUF + UIP_ICMPH_LEN,
              (uip_len - UIP_IPH_LEN - UIP_ICMPH_LEN));
    7c4e:	3a2c      	subs	r2, #44	; 0x2c
      /* move the echo request payload (starting after the icmp header)
       * to the new location in the reply.
       * The shift is equal to the length of the extension headers present
       * Note: UIP_ICMP_BUF still points to the echo request at this stage
       */
      memmove((uint8_t *)UIP_ICMP_BUF + UIP_ICMPH_LEN - uip_ext_len,
    7c50:	4b12      	ldr	r3, [pc, #72]	; (7c9c <echo_request_input+0x120>)
    7c52:	4798      	blx	r3
              (uint8_t *)UIP_ICMP_BUF + UIP_ICMPH_LEN,
              (uip_len - UIP_IPH_LEN - UIP_ICMPH_LEN));
      uip_ext_len = 0;
    7c54:	2300      	movs	r3, #0
    7c56:	7023      	strb	r3, [r4, #0]
  /* Below is important for the correctness of UIP_ICMP_BUF and the
   * checksum
   */

  /* Note: now UIP_ICMP_BUF points to the beginning of the echo reply */
  UIP_ICMP_BUF->type = ICMP6_ECHO_REPLY;
    7c58:	4b0d      	ldr	r3, [pc, #52]	; (7c90 <echo_request_input+0x114>)
    7c5a:	781c      	ldrb	r4, [r3, #0]
    7c5c:	3428      	adds	r4, #40	; 0x28
    7c5e:	4b08      	ldr	r3, [pc, #32]	; (7c80 <echo_request_input+0x104>)
    7c60:	18e4      	adds	r4, r4, r3
    7c62:	2381      	movs	r3, #129	; 0x81
    7c64:	7023      	strb	r3, [r4, #0]
  UIP_ICMP_BUF->icode = 0;
    7c66:	2300      	movs	r3, #0
    7c68:	7063      	strb	r3, [r4, #1]
  UIP_ICMP_BUF->icmpchksum = 0;
    7c6a:	70a3      	strb	r3, [r4, #2]
    7c6c:	70e3      	strb	r3, [r4, #3]
  UIP_ICMP_BUF->icmpchksum = ~uip_icmp6chksum();
    7c6e:	4b0c      	ldr	r3, [pc, #48]	; (7ca0 <echo_request_input+0x124>)
    7c70:	4798      	blx	r3
    7c72:	43c0      	mvns	r0, r0
    7c74:	b280      	uxth	r0, r0
    7c76:	70a0      	strb	r0, [r4, #2]
    7c78:	0a00      	lsrs	r0, r0, #8
    7c7a:	70e0      	strb	r0, [r4, #3]
  PRINTF("from");
  PRINT6ADDR(&UIP_IP_BUF->srcipaddr);
  PRINTF("\n\r");
  UIP_STAT(++uip_stat.icmp.sent);
  return;
}
    7c7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    7c7e:	46c0      	nop			; (mov r8, r8)
    7c80:	20002cd4 	.word	0x20002cd4
    7c84:	20002b68 	.word	0x20002b68
    7c88:	0000771d 	.word	0x0000771d
    7c8c:	20000ae4 	.word	0x20000ae4
    7c90:	20000b12 	.word	0x20000b12
    7c94:	0000d419 	.word	0x0000d419
    7c98:	20002cc0 	.word	0x20002cc0
    7c9c:	00010b41 	.word	0x00010b41
    7ca0:	00008be1 	.word	0x00008be1

00007ca4 <uip_icmp6_input>:
  return NULL;
}
/*---------------------------------------------------------------------------*/
uint8_t
uip_icmp6_input(uint8_t type, uint8_t icode)
{
    7ca4:	b570      	push	{r4, r5, r6, lr}
    7ca6:	1c04      	adds	r4, r0, #0
    7ca8:	1c0e      	adds	r6, r1, #0
static uip_icmp6_input_handler_t *
input_handler_lookup(uint8_t type, uint8_t icode)
{
  uip_icmp6_input_handler_t *handler = NULL;

  for(handler = list_head(input_handler_list);
    7caa:	4810      	ldr	r0, [pc, #64]	; (7cec <uip_icmp6_input+0x48>)
    7cac:	4b10      	ldr	r3, [pc, #64]	; (7cf0 <uip_icmp6_input+0x4c>)
    7cae:	4798      	blx	r3
    7cb0:	2800      	cmp	r0, #0
    7cb2:	d018      	beq.n	7ce6 <uip_icmp6_input+0x42>
      handler != NULL;
      handler = list_item_next(handler)) {
    7cb4:	4d0f      	ldr	r5, [pc, #60]	; (7cf4 <uip_icmp6_input+0x50>)
    if(handler->type == type &&
    7cb6:	7903      	ldrb	r3, [r0, #4]
    7cb8:	42a3      	cmp	r3, r4
    7cba:	d108      	bne.n	7cce <uip_icmp6_input+0x2a>
       (handler->icode == icode ||
    7cbc:	7943      	ldrb	r3, [r0, #5]
  uip_icmp6_input_handler_t *handler = NULL;

  for(handler = list_head(input_handler_list);
      handler != NULL;
      handler = list_item_next(handler)) {
    if(handler->type == type &&
    7cbe:	429e      	cmp	r6, r3
    7cc0:	d001      	beq.n	7cc6 <uip_icmp6_input+0x22>
       (handler->icode == icode ||
    7cc2:	2bff      	cmp	r3, #255	; 0xff
    7cc4:	d103      	bne.n	7cce <uip_icmp6_input+0x2a>
uip_icmp6_input(uint8_t type, uint8_t icode)
{
  uip_icmp6_input_handler_t *handler = input_handler_lookup(type, icode);

  if(handler == NULL) {
    return UIP_ICMP6_INPUT_ERROR;
    7cc6:	2301      	movs	r3, #1
uint8_t
uip_icmp6_input(uint8_t type, uint8_t icode)
{
  uip_icmp6_input_handler_t *handler = input_handler_lookup(type, icode);

  if(handler == NULL) {
    7cc8:	2800      	cmp	r0, #0
    7cca:	d104      	bne.n	7cd6 <uip_icmp6_input+0x32>
    7ccc:	e00c      	b.n	7ce8 <uip_icmp6_input+0x44>
{
  uip_icmp6_input_handler_t *handler = NULL;

  for(handler = list_head(input_handler_list);
      handler != NULL;
      handler = list_item_next(handler)) {
    7cce:	47a8      	blx	r5
static uip_icmp6_input_handler_t *
input_handler_lookup(uint8_t type, uint8_t icode)
{
  uip_icmp6_input_handler_t *handler = NULL;

  for(handler = list_head(input_handler_list);
    7cd0:	2800      	cmp	r0, #0
    7cd2:	d1f0      	bne.n	7cb6 <uip_icmp6_input+0x12>
    7cd4:	e007      	b.n	7ce6 <uip_icmp6_input+0x42>

  if(handler == NULL) {
    return UIP_ICMP6_INPUT_ERROR;
  }

  if(handler->handler == NULL) {
    7cd6:	6883      	ldr	r3, [r0, #8]
    7cd8:	2b00      	cmp	r3, #0
    7cda:	d002      	beq.n	7ce2 <uip_icmp6_input+0x3e>
    return UIP_ICMP6_INPUT_ERROR;
  }

  handler->handler();
    7cdc:	4798      	blx	r3
  return UIP_ICMP6_INPUT_SUCCESS;
    7cde:	2300      	movs	r3, #0
    7ce0:	e002      	b.n	7ce8 <uip_icmp6_input+0x44>
  if(handler == NULL) {
    return UIP_ICMP6_INPUT_ERROR;
  }

  if(handler->handler == NULL) {
    return UIP_ICMP6_INPUT_ERROR;
    7ce2:	2301      	movs	r3, #1
    7ce4:	e000      	b.n	7ce8 <uip_icmp6_input+0x44>
uip_icmp6_input(uint8_t type, uint8_t icode)
{
  uip_icmp6_input_handler_t *handler = input_handler_lookup(type, icode);

  if(handler == NULL) {
    return UIP_ICMP6_INPUT_ERROR;
    7ce6:	2301      	movs	r3, #1
    return UIP_ICMP6_INPUT_ERROR;
  }

  handler->handler();
  return UIP_ICMP6_INPUT_SUCCESS;
}
    7ce8:	1c18      	adds	r0, r3, #0
    7cea:	bd70      	pop	{r4, r5, r6, pc}
    7cec:	20000af8 	.word	0x20000af8
    7cf0:	00005719 	.word	0x00005719
    7cf4:	000057c1 	.word	0x000057c1

00007cf8 <uip_icmp6_register_input_handler>:
/*---------------------------------------------------------------------------*/
void
uip_icmp6_register_input_handler(uip_icmp6_input_handler_t *handler)
{
    7cf8:	b508      	push	{r3, lr}
    7cfa:	1c01      	adds	r1, r0, #0
  list_add(input_handler_list, handler);
    7cfc:	4801      	ldr	r0, [pc, #4]	; (7d04 <uip_icmp6_register_input_handler+0xc>)
    7cfe:	4b02      	ldr	r3, [pc, #8]	; (7d08 <uip_icmp6_register_input_handler+0x10>)
    7d00:	4798      	blx	r3
}
    7d02:	bd08      	pop	{r3, pc}
    7d04:	20000af8 	.word	0x20000af8
    7d08:	00005769 	.word	0x00005769

00007d0c <uip_icmp6_error_output>:
  UIP_STAT(++uip_stat.icmp.sent);
  return;
}
/*---------------------------------------------------------------------------*/
void
uip_icmp6_error_output(uint8_t type, uint8_t code, uint32_t param) {
    7d0c:	b5f0      	push	{r4, r5, r6, r7, lr}
    7d0e:	4647      	mov	r7, r8
    7d10:	b480      	push	{r7}
    7d12:	b082      	sub	sp, #8
    7d14:	1c06      	adds	r6, r0, #0
    7d16:	9100      	str	r1, [sp, #0]
    7d18:	9201      	str	r2, [sp, #4]

 /* check if originating packet is not an ICMP error*/
  if (uip_ext_len) {
    7d1a:	4b62      	ldr	r3, [pc, #392]	; (7ea4 <uip_icmp6_error_output+0x198>)
    7d1c:	781b      	ldrb	r3, [r3, #0]
    7d1e:	2b00      	cmp	r3, #0
    7d20:	d008      	beq.n	7d34 <uip_icmp6_error_output+0x28>
    if(UIP_EXT_BUF->next == UIP_PROTO_ICMP6 && UIP_ICMP_BUF->type < 128){
    7d22:	3328      	adds	r3, #40	; 0x28
    7d24:	4a60      	ldr	r2, [pc, #384]	; (7ea8 <uip_icmp6_error_output+0x19c>)
    7d26:	5cd3      	ldrb	r3, [r2, r3]
    7d28:	2b3a      	cmp	r3, #58	; 0x3a
    7d2a:	d110      	bne.n	7d4e <uip_icmp6_error_output+0x42>
      uip_len = 0;
    7d2c:	2200      	movs	r2, #0
    7d2e:	4b5f      	ldr	r3, [pc, #380]	; (7eac <uip_icmp6_error_output+0x1a0>)
    7d30:	801a      	strh	r2, [r3, #0]
      return;
    7d32:	e0b3      	b.n	7e9c <uip_icmp6_error_output+0x190>
    }
  } else {
    if(UIP_IP_BUF->proto == UIP_PROTO_ICMP6 && UIP_ICMP_BUF->type < 128){
    7d34:	4b5c      	ldr	r3, [pc, #368]	; (7ea8 <uip_icmp6_error_output+0x19c>)
    7d36:	799b      	ldrb	r3, [r3, #6]
    7d38:	2b3a      	cmp	r3, #58	; 0x3a
    7d3a:	d108      	bne.n	7d4e <uip_icmp6_error_output+0x42>
    7d3c:	3b12      	subs	r3, #18
    7d3e:	4a5a      	ldr	r2, [pc, #360]	; (7ea8 <uip_icmp6_error_output+0x19c>)
    7d40:	5cd3      	ldrb	r3, [r2, r3]
    7d42:	2b7f      	cmp	r3, #127	; 0x7f
    7d44:	d803      	bhi.n	7d4e <uip_icmp6_error_output+0x42>
      uip_len = 0;
    7d46:	2200      	movs	r2, #0
    7d48:	4b58      	ldr	r3, [pc, #352]	; (7eac <uip_icmp6_error_output+0x1a0>)
    7d4a:	801a      	strh	r2, [r3, #0]
      return;
    7d4c:	e0a6      	b.n	7e9c <uip_icmp6_error_output+0x190>
    }
  }

#if UIP_CONF_IPV6_RPL
  uip_ext_len = rpl_invert_header();
    7d4e:	4b58      	ldr	r3, [pc, #352]	; (7eb0 <uip_icmp6_error_output+0x1a4>)
    7d50:	4798      	blx	r3
    7d52:	1c07      	adds	r7, r0, #0
    7d54:	4b53      	ldr	r3, [pc, #332]	; (7ea4 <uip_icmp6_error_output+0x198>)
    7d56:	7018      	strb	r0, [r3, #0]
#else /* UIP_CONF_IPV6_RPL */
  uip_ext_len = 0;
#endif /* UIP_CONF_IPV6_RPL */

  /* remember data of original packet before shifting */
  uip_ipaddr_copy(&tmp_ipaddr, &UIP_IP_BUF->destipaddr);
    7d58:	4a56      	ldr	r2, [pc, #344]	; (7eb4 <uip_icmp6_error_output+0x1a8>)
    7d5a:	4b53      	ldr	r3, [pc, #332]	; (7ea8 <uip_icmp6_error_output+0x19c>)
    7d5c:	3318      	adds	r3, #24
    7d5e:	cb32      	ldmia	r3!, {r1, r4, r5}
    7d60:	c232      	stmia	r2!, {r1, r4, r5}
    7d62:	681b      	ldr	r3, [r3, #0]
    7d64:	6013      	str	r3, [r2, #0]

  uip_len += UIP_IPICMPH_LEN + UIP_ICMP6_ERROR_LEN;
    7d66:	4b51      	ldr	r3, [pc, #324]	; (7eac <uip_icmp6_error_output+0x1a0>)
    7d68:	881b      	ldrh	r3, [r3, #0]
    7d6a:	3330      	adds	r3, #48	; 0x30
    7d6c:	b29b      	uxth	r3, r3

  if(uip_len > UIP_LINK_MTU)
    7d6e:	22a0      	movs	r2, #160	; 0xa0
    7d70:	00d2      	lsls	r2, r2, #3
    7d72:	4293      	cmp	r3, r2
    7d74:	d802      	bhi.n	7d7c <uip_icmp6_error_output+0x70>
#endif /* UIP_CONF_IPV6_RPL */

  /* remember data of original packet before shifting */
  uip_ipaddr_copy(&tmp_ipaddr, &UIP_IP_BUF->destipaddr);

  uip_len += UIP_IPICMPH_LEN + UIP_ICMP6_ERROR_LEN;
    7d76:	4a4d      	ldr	r2, [pc, #308]	; (7eac <uip_icmp6_error_output+0x1a0>)
    7d78:	8013      	strh	r3, [r2, #0]
    7d7a:	e003      	b.n	7d84 <uip_icmp6_error_output+0x78>

  if(uip_len > UIP_LINK_MTU)
    uip_len = UIP_LINK_MTU;
    7d7c:	22a0      	movs	r2, #160	; 0xa0
    7d7e:	00d2      	lsls	r2, r2, #3
    7d80:	4b4a      	ldr	r3, [pc, #296]	; (7eac <uip_icmp6_error_output+0x1a0>)
    7d82:	801a      	strh	r2, [r3, #0]

  memmove((uint8_t *)UIP_ICMP6_ERROR_BUF + uip_ext_len + UIP_ICMP6_ERROR_LEN,
    7d84:	0041      	lsls	r1, r0, #1
    7d86:	3130      	adds	r1, #48	; 0x30
    7d88:	4d47      	ldr	r5, [pc, #284]	; (7ea8 <uip_icmp6_error_output+0x19c>)
    7d8a:	1949      	adds	r1, r1, r5
          (void *)UIP_IP_BUF, uip_len - UIP_IPICMPH_LEN - uip_ext_len - UIP_ICMP6_ERROR_LEN);
    7d8c:	4b47      	ldr	r3, [pc, #284]	; (7eac <uip_icmp6_error_output+0x1a0>)
    7d8e:	881b      	ldrh	r3, [r3, #0]
    7d90:	1a1a      	subs	r2, r3, r0
    7d92:	3a30      	subs	r2, #48	; 0x30
  uip_len += UIP_IPICMPH_LEN + UIP_ICMP6_ERROR_LEN;

  if(uip_len > UIP_LINK_MTU)
    uip_len = UIP_LINK_MTU;

  memmove((uint8_t *)UIP_ICMP6_ERROR_BUF + uip_ext_len + UIP_ICMP6_ERROR_LEN,
    7d94:	1c08      	adds	r0, r1, #0
    7d96:	1c29      	adds	r1, r5, #0
    7d98:	4b47      	ldr	r3, [pc, #284]	; (7eb8 <uip_icmp6_error_output+0x1ac>)
    7d9a:	4798      	blx	r3
          (void *)UIP_IP_BUF, uip_len - UIP_IPICMPH_LEN - uip_ext_len - UIP_ICMP6_ERROR_LEN);

  UIP_IP_BUF->vtc = 0x60;
    7d9c:	2360      	movs	r3, #96	; 0x60
    7d9e:	702b      	strb	r3, [r5, #0]
  UIP_IP_BUF->tcflow = 0;
    7da0:	2300      	movs	r3, #0
    7da2:	706b      	strb	r3, [r5, #1]
  UIP_IP_BUF->flow = 0;
    7da4:	806b      	strh	r3, [r5, #2]
  if (uip_ext_len) {
    7da6:	2f00      	cmp	r7, #0
    7da8:	d004      	beq.n	7db4 <uip_icmp6_error_output+0xa8>
    UIP_FIRST_EXT_BUF->next = UIP_PROTO_ICMP6;
    7daa:	213a      	movs	r1, #58	; 0x3a
    7dac:	3328      	adds	r3, #40	; 0x28
    7dae:	4a3e      	ldr	r2, [pc, #248]	; (7ea8 <uip_icmp6_error_output+0x19c>)
    7db0:	54d1      	strb	r1, [r2, r3]
    7db2:	e002      	b.n	7dba <uip_icmp6_error_output+0xae>
  } else {
    UIP_IP_BUF->proto = UIP_PROTO_ICMP6;
    7db4:	223a      	movs	r2, #58	; 0x3a
    7db6:	4b3c      	ldr	r3, [pc, #240]	; (7ea8 <uip_icmp6_error_output+0x19c>)
    7db8:	719a      	strb	r2, [r3, #6]
  }
  UIP_IP_BUF->ttl = uip_ds6_if.cur_hop_limit;
    7dba:	4b3b      	ldr	r3, [pc, #236]	; (7ea8 <uip_icmp6_error_output+0x19c>)
    7dbc:	4a3f      	ldr	r2, [pc, #252]	; (7ebc <uip_icmp6_error_output+0x1b0>)
    7dbe:	7912      	ldrb	r2, [r2, #4]
    7dc0:	71da      	strb	r2, [r3, #7]

  /* the source should not be unspecified nor multicast, the check for
     multicast is done in uip_process */
  if(uip_is_addr_unspecified(&UIP_IP_BUF->srcipaddr)){
    7dc2:	891b      	ldrh	r3, [r3, #8]
    7dc4:	2b00      	cmp	r3, #0
    7dc6:	d11f      	bne.n	7e08 <uip_icmp6_error_output+0xfc>
    7dc8:	4b37      	ldr	r3, [pc, #220]	; (7ea8 <uip_icmp6_error_output+0x19c>)
    7dca:	895b      	ldrh	r3, [r3, #10]
    7dcc:	2b00      	cmp	r3, #0
    7dce:	d11b      	bne.n	7e08 <uip_icmp6_error_output+0xfc>
    7dd0:	4b35      	ldr	r3, [pc, #212]	; (7ea8 <uip_icmp6_error_output+0x19c>)
    7dd2:	899b      	ldrh	r3, [r3, #12]
    7dd4:	2b00      	cmp	r3, #0
    7dd6:	d117      	bne.n	7e08 <uip_icmp6_error_output+0xfc>
    7dd8:	4b33      	ldr	r3, [pc, #204]	; (7ea8 <uip_icmp6_error_output+0x19c>)
    7dda:	89db      	ldrh	r3, [r3, #14]
    7ddc:	2b00      	cmp	r3, #0
    7dde:	d113      	bne.n	7e08 <uip_icmp6_error_output+0xfc>
    7de0:	4b31      	ldr	r3, [pc, #196]	; (7ea8 <uip_icmp6_error_output+0x19c>)
    7de2:	8a1b      	ldrh	r3, [r3, #16]
    7de4:	2b00      	cmp	r3, #0
    7de6:	d10f      	bne.n	7e08 <uip_icmp6_error_output+0xfc>
    7de8:	4b2f      	ldr	r3, [pc, #188]	; (7ea8 <uip_icmp6_error_output+0x19c>)
    7dea:	8a5b      	ldrh	r3, [r3, #18]
    7dec:	2b00      	cmp	r3, #0
    7dee:	d10b      	bne.n	7e08 <uip_icmp6_error_output+0xfc>
    7df0:	4b2d      	ldr	r3, [pc, #180]	; (7ea8 <uip_icmp6_error_output+0x19c>)
    7df2:	8a9b      	ldrh	r3, [r3, #20]
    7df4:	2b00      	cmp	r3, #0
    7df6:	d107      	bne.n	7e08 <uip_icmp6_error_output+0xfc>
    7df8:	4b2b      	ldr	r3, [pc, #172]	; (7ea8 <uip_icmp6_error_output+0x19c>)
    7dfa:	8adb      	ldrh	r3, [r3, #22]
    7dfc:	2b00      	cmp	r3, #0
    7dfe:	d103      	bne.n	7e08 <uip_icmp6_error_output+0xfc>
    uip_len = 0;
    7e00:	2200      	movs	r2, #0
    7e02:	4b2a      	ldr	r3, [pc, #168]	; (7eac <uip_icmp6_error_output+0x1a0>)
    7e04:	801a      	strh	r2, [r3, #0]
    return;
    7e06:	e049      	b.n	7e9c <uip_icmp6_error_output+0x190>
  }

  uip_ipaddr_copy(&UIP_IP_BUF->destipaddr, &UIP_IP_BUF->srcipaddr);
    7e08:	4b27      	ldr	r3, [pc, #156]	; (7ea8 <uip_icmp6_error_output+0x19c>)
    7e0a:	1c1a      	adds	r2, r3, #0
    7e0c:	3218      	adds	r2, #24
    7e0e:	3308      	adds	r3, #8
    7e10:	cb13      	ldmia	r3!, {r0, r1, r4}
    7e12:	c213      	stmia	r2!, {r0, r1, r4}
    7e14:	681b      	ldr	r3, [r3, #0]
    7e16:	6013      	str	r3, [r2, #0]

  if(uip_is_addr_mcast(&tmp_ipaddr)){
    7e18:	4b26      	ldr	r3, [pc, #152]	; (7eb4 <uip_icmp6_error_output+0x1a8>)
    7e1a:	781b      	ldrb	r3, [r3, #0]
    7e1c:	2bff      	cmp	r3, #255	; 0xff
    7e1e:	d10d      	bne.n	7e3c <uip_icmp6_error_output+0x130>
    if(type == ICMP6_PARAM_PROB && code == ICMP6_PARAMPROB_OPTION){
    7e20:	2e04      	cmp	r6, #4
    7e22:	d107      	bne.n	7e34 <uip_icmp6_error_output+0x128>
    7e24:	9b00      	ldr	r3, [sp, #0]
    7e26:	2b02      	cmp	r3, #2
    7e28:	d104      	bne.n	7e34 <uip_icmp6_error_output+0x128>
      uip_ds6_select_src(&UIP_IP_BUF->srcipaddr, &tmp_ipaddr);
    7e2a:	4825      	ldr	r0, [pc, #148]	; (7ec0 <uip_icmp6_error_output+0x1b4>)
    7e2c:	4921      	ldr	r1, [pc, #132]	; (7eb4 <uip_icmp6_error_output+0x1a8>)
    7e2e:	4b25      	ldr	r3, [pc, #148]	; (7ec4 <uip_icmp6_error_output+0x1b8>)
    7e30:	4798      	blx	r3
    7e32:	e007      	b.n	7e44 <uip_icmp6_error_output+0x138>
    } else {
      uip_len = 0;
    7e34:	2200      	movs	r2, #0
    7e36:	4b1d      	ldr	r3, [pc, #116]	; (7eac <uip_icmp6_error_output+0x1a0>)
    7e38:	801a      	strh	r2, [r3, #0]
      return;
    7e3a:	e02f      	b.n	7e9c <uip_icmp6_error_output+0x190>
    }
  } else {
#if UIP_CONF_ROUTER
    /* need to pick a source that corresponds to this node */
    uip_ds6_select_src(&UIP_IP_BUF->srcipaddr, &tmp_ipaddr);
    7e3c:	4820      	ldr	r0, [pc, #128]	; (7ec0 <uip_icmp6_error_output+0x1b4>)
    7e3e:	491d      	ldr	r1, [pc, #116]	; (7eb4 <uip_icmp6_error_output+0x1a8>)
    7e40:	4b20      	ldr	r3, [pc, #128]	; (7ec4 <uip_icmp6_error_output+0x1b8>)
    7e42:	4798      	blx	r3
#else
    uip_ipaddr_copy(&UIP_IP_BUF->srcipaddr, &tmp_ipaddr);
#endif
  }

  UIP_ICMP_BUF->type = type;
    7e44:	4d17      	ldr	r5, [pc, #92]	; (7ea4 <uip_icmp6_error_output+0x198>)
    7e46:	782b      	ldrb	r3, [r5, #0]
    7e48:	4698      	mov	r8, r3
    7e4a:	3328      	adds	r3, #40	; 0x28
    7e4c:	4f16      	ldr	r7, [pc, #88]	; (7ea8 <uip_icmp6_error_output+0x19c>)
    7e4e:	19db      	adds	r3, r3, r7
    7e50:	701e      	strb	r6, [r3, #0]
  UIP_ICMP_BUF->icode = code;
    7e52:	466a      	mov	r2, sp
    7e54:	7812      	ldrb	r2, [r2, #0]
    7e56:	705a      	strb	r2, [r3, #1]
  UIP_ICMP6_ERROR_BUF->param = uip_htonl(param);
    7e58:	9801      	ldr	r0, [sp, #4]
    7e5a:	4b1b      	ldr	r3, [pc, #108]	; (7ec8 <uip_icmp6_error_output+0x1bc>)
    7e5c:	4798      	blx	r3
    7e5e:	4643      	mov	r3, r8
    7e60:	332c      	adds	r3, #44	; 0x2c
    7e62:	19db      	adds	r3, r3, r7
    7e64:	7018      	strb	r0, [r3, #0]
    7e66:	0a02      	lsrs	r2, r0, #8
    7e68:	705a      	strb	r2, [r3, #1]
    7e6a:	0c02      	lsrs	r2, r0, #16
    7e6c:	709a      	strb	r2, [r3, #2]
    7e6e:	0e00      	lsrs	r0, r0, #24
    7e70:	70d8      	strb	r0, [r3, #3]
  UIP_IP_BUF->len[0] = ((uip_len - UIP_IPH_LEN) >> 8);
    7e72:	4b0e      	ldr	r3, [pc, #56]	; (7eac <uip_icmp6_error_output+0x1a0>)
    7e74:	881b      	ldrh	r3, [r3, #0]
    7e76:	1c1a      	adds	r2, r3, #0
    7e78:	3a28      	subs	r2, #40	; 0x28
    7e7a:	1212      	asrs	r2, r2, #8
    7e7c:	713a      	strb	r2, [r7, #4]
  UIP_IP_BUF->len[1] = ((uip_len - UIP_IPH_LEN) & 0xff);
    7e7e:	3b28      	subs	r3, #40	; 0x28
    7e80:	717b      	strb	r3, [r7, #5]
  UIP_ICMP_BUF->icmpchksum = 0;
    7e82:	782b      	ldrb	r3, [r5, #0]
    7e84:	3328      	adds	r3, #40	; 0x28
    7e86:	19df      	adds	r7, r3, r7
    7e88:	2300      	movs	r3, #0
    7e8a:	70bb      	strb	r3, [r7, #2]
    7e8c:	70fb      	strb	r3, [r7, #3]
  UIP_ICMP_BUF->icmpchksum = ~uip_icmp6chksum();
    7e8e:	4b0f      	ldr	r3, [pc, #60]	; (7ecc <uip_icmp6_error_output+0x1c0>)
    7e90:	4798      	blx	r3
    7e92:	43c0      	mvns	r0, r0
    7e94:	b280      	uxth	r0, r0
    7e96:	70b8      	strb	r0, [r7, #2]
    7e98:	0a00      	lsrs	r0, r0, #8
    7e9a:	70f8      	strb	r0, [r7, #3]
  PRINT6ADDR(&UIP_IP_BUF->destipaddr);
  PRINTF("from");
  PRINT6ADDR(&UIP_IP_BUF->srcipaddr);
  PRINTF("\n\r");
  return;
}
    7e9c:	b002      	add	sp, #8
    7e9e:	bc04      	pop	{r2}
    7ea0:	4690      	mov	r8, r2
    7ea2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    7ea4:	20000b12 	.word	0x20000b12
    7ea8:	20002cd4 	.word	0x20002cd4
    7eac:	20002cc0 	.word	0x20002cc0
    7eb0:	0000d419 	.word	0x0000d419
    7eb4:	20000ae4 	.word	0x20000ae4
    7eb8:	00010b41 	.word	0x00010b41
    7ebc:	20002b68 	.word	0x20002b68
    7ec0:	20002cdc 	.word	0x20002cdc
    7ec4:	0000771d 	.word	0x0000771d
    7ec8:	00009fdd 	.word	0x00009fdd
    7ecc:	00008be1 	.word	0x00008be1

00007ed0 <uip_icmp6_send>:

/*---------------------------------------------------------------------------*/
void
uip_icmp6_send(const uip_ipaddr_t *dest, int type, int code, int payload_len)
{
    7ed0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    7ed2:	464f      	mov	r7, r9
    7ed4:	4646      	mov	r6, r8
    7ed6:	b4c0      	push	{r6, r7}
    7ed8:	1c04      	adds	r4, r0, #0
    7eda:	4688      	mov	r8, r1
    7edc:	4691      	mov	r9, r2
    7ede:	1c1d      	adds	r5, r3, #0

  UIP_IP_BUF->vtc = 0x60;
    7ee0:	4f1b      	ldr	r7, [pc, #108]	; (7f50 <uip_icmp6_send+0x80>)
    7ee2:	2360      	movs	r3, #96	; 0x60
    7ee4:	703b      	strb	r3, [r7, #0]
  UIP_IP_BUF->tcflow = 0;
    7ee6:	2300      	movs	r3, #0
    7ee8:	707b      	strb	r3, [r7, #1]
  UIP_IP_BUF->flow = 0;
    7eea:	807b      	strh	r3, [r7, #2]
  UIP_IP_BUF->proto = UIP_PROTO_ICMP6;
    7eec:	333a      	adds	r3, #58	; 0x3a
    7eee:	71bb      	strb	r3, [r7, #6]
  UIP_IP_BUF->ttl = uip_ds6_if.cur_hop_limit;
    7ef0:	4b18      	ldr	r3, [pc, #96]	; (7f54 <uip_icmp6_send+0x84>)
    7ef2:	791b      	ldrb	r3, [r3, #4]
    7ef4:	71fb      	strb	r3, [r7, #7]
  UIP_IP_BUF->len[0] = (UIP_ICMPH_LEN + payload_len) >> 8;
    7ef6:	1d2b      	adds	r3, r5, #4
    7ef8:	121b      	asrs	r3, r3, #8
    7efa:	713b      	strb	r3, [r7, #4]
  UIP_IP_BUF->len[1] = (UIP_ICMPH_LEN + payload_len) & 0xff;
    7efc:	1d2b      	adds	r3, r5, #4
    7efe:	717b      	strb	r3, [r7, #5]

  memcpy(&UIP_IP_BUF->destipaddr, dest, sizeof(*dest));
    7f00:	1c3e      	adds	r6, r7, #0
    7f02:	3618      	adds	r6, #24
    7f04:	1c30      	adds	r0, r6, #0
    7f06:	1c21      	adds	r1, r4, #0
    7f08:	2210      	movs	r2, #16
    7f0a:	4b13      	ldr	r3, [pc, #76]	; (7f58 <uip_icmp6_send+0x88>)
    7f0c:	4798      	blx	r3
  uip_ds6_select_src(&UIP_IP_BUF->srcipaddr, &UIP_IP_BUF->destipaddr);
    7f0e:	1c38      	adds	r0, r7, #0
    7f10:	3008      	adds	r0, #8
    7f12:	1c31      	adds	r1, r6, #0
    7f14:	4b11      	ldr	r3, [pc, #68]	; (7f5c <uip_icmp6_send+0x8c>)
    7f16:	4798      	blx	r3

  UIP_ICMP_BUF->type = type;
    7f18:	4b11      	ldr	r3, [pc, #68]	; (7f60 <uip_icmp6_send+0x90>)
    7f1a:	781c      	ldrb	r4, [r3, #0]
    7f1c:	3428      	adds	r4, #40	; 0x28
    7f1e:	19e4      	adds	r4, r4, r7
    7f20:	4643      	mov	r3, r8
    7f22:	7023      	strb	r3, [r4, #0]
  UIP_ICMP_BUF->icode = code;
    7f24:	464b      	mov	r3, r9
    7f26:	7063      	strb	r3, [r4, #1]

  UIP_ICMP_BUF->icmpchksum = 0;
    7f28:	2300      	movs	r3, #0
    7f2a:	70a3      	strb	r3, [r4, #2]
    7f2c:	70e3      	strb	r3, [r4, #3]
  UIP_ICMP_BUF->icmpchksum = ~uip_icmp6chksum();
    7f2e:	4b0d      	ldr	r3, [pc, #52]	; (7f64 <uip_icmp6_send+0x94>)
    7f30:	4798      	blx	r3
    7f32:	43c0      	mvns	r0, r0
    7f34:	b280      	uxth	r0, r0
    7f36:	70a0      	strb	r0, [r4, #2]
    7f38:	0a00      	lsrs	r0, r0, #8
    7f3a:	70e0      	strb	r0, [r4, #3]

  uip_len = UIP_IPH_LEN + UIP_ICMPH_LEN + payload_len;
    7f3c:	1c2b      	adds	r3, r5, #0
    7f3e:	332c      	adds	r3, #44	; 0x2c
    7f40:	4a09      	ldr	r2, [pc, #36]	; (7f68 <uip_icmp6_send+0x98>)
    7f42:	8013      	strh	r3, [r2, #0]
  tcpip_ipv6_output();
    7f44:	4b09      	ldr	r3, [pc, #36]	; (7f6c <uip_icmp6_send+0x9c>)
    7f46:	4798      	blx	r3
}
    7f48:	bc0c      	pop	{r2, r3}
    7f4a:	4690      	mov	r8, r2
    7f4c:	4699      	mov	r9, r3
    7f4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    7f50:	20002cd4 	.word	0x20002cd4
    7f54:	20002b68 	.word	0x20002b68
    7f58:	00010b2f 	.word	0x00010b2f
    7f5c:	0000771d 	.word	0x0000771d
    7f60:	20000b12 	.word	0x20000b12
    7f64:	00008be1 	.word	0x00008be1
    7f68:	20002cc0 	.word	0x20002cc0
    7f6c:	0000a635 	.word	0x0000a635

00007f70 <uip_icmp6_echo_reply_callback_add>:
}
/*---------------------------------------------------------------------------*/
void
uip_icmp6_echo_reply_callback_add(struct uip_icmp6_echo_reply_notification *n,
                                  uip_icmp6_echo_reply_callback_t c)
{
    7f70:	b508      	push	{r3, lr}
  if(n != NULL && c != NULL) {
    7f72:	2800      	cmp	r0, #0
    7f74:	d007      	beq.n	7f86 <uip_icmp6_echo_reply_callback_add+0x16>
    7f76:	2900      	cmp	r1, #0
    7f78:	d005      	beq.n	7f86 <uip_icmp6_echo_reply_callback_add+0x16>
    7f7a:	1c0b      	adds	r3, r1, #0
    7f7c:	1c01      	adds	r1, r0, #0
    n->callback = c;
    7f7e:	6043      	str	r3, [r0, #4]
    list_add(echo_reply_callback_list, n);
    7f80:	4801      	ldr	r0, [pc, #4]	; (7f88 <uip_icmp6_echo_reply_callback_add+0x18>)
    7f82:	4b02      	ldr	r3, [pc, #8]	; (7f8c <uip_icmp6_echo_reply_callback_add+0x1c>)
    7f84:	4798      	blx	r3
  }
}
    7f86:	bd08      	pop	{r3, pc}
    7f88:	20000af4 	.word	0x20000af4
    7f8c:	00005769 	.word	0x00005769

00007f90 <uip_icmp6_init>:
UIP_ICMP6_HANDLER(echo_reply_handler, ICMP6_ECHO_REPLY,
                  UIP_ICMP6_HANDLER_CODE_ANY, echo_reply_input);
/*---------------------------------------------------------------------------*/
void
uip_icmp6_init()
{
    7f90:	b510      	push	{r4, lr}
  /* Register Echo Request and Reply handlers */
  uip_icmp6_register_input_handler(&echo_request_handler);
    7f92:	4803      	ldr	r0, [pc, #12]	; (7fa0 <uip_icmp6_init+0x10>)
    7f94:	4c03      	ldr	r4, [pc, #12]	; (7fa4 <uip_icmp6_init+0x14>)
    7f96:	47a0      	blx	r4
  uip_icmp6_register_input_handler(&echo_reply_handler);
    7f98:	4803      	ldr	r0, [pc, #12]	; (7fa8 <uip_icmp6_init+0x18>)
    7f9a:	47a0      	blx	r4
}
    7f9c:	bd10      	pop	{r4, pc}
    7f9e:	46c0      	nop			; (mov r8, r8)
    7fa0:	20000074 	.word	0x20000074
    7fa4:	00007cf9 	.word	0x00007cf9
    7fa8:	20000080 	.word	0x20000080

00007fac <create_llao>:
static uip_ds6_defrt_t *defrt; /**  Pointer to a router list entry */
static uip_ds6_addr_t *addr; /**  Pointer to an interface address */
/*------------------------------------------------------------------*/
/* create a llao */ 
static void
create_llao(uint8_t *llao, uint8_t type) {
    7fac:	b510      	push	{r4, lr}
    7fae:	1c04      	adds	r4, r0, #0
  llao[UIP_ND6_OPT_TYPE_OFFSET] = type;
    7fb0:	7001      	strb	r1, [r0, #0]
  llao[UIP_ND6_OPT_LEN_OFFSET] = UIP_ND6_OPT_LLAO_LEN >> 3;
    7fb2:	2302      	movs	r3, #2
    7fb4:	7043      	strb	r3, [r0, #1]
  memcpy(&llao[UIP_ND6_OPT_DATA_OFFSET], &uip_lladdr, UIP_LLADDR_LEN);
    7fb6:	3002      	adds	r0, #2
    7fb8:	4905      	ldr	r1, [pc, #20]	; (7fd0 <create_llao+0x24>)
    7fba:	2208      	movs	r2, #8
    7fbc:	4b05      	ldr	r3, [pc, #20]	; (7fd4 <create_llao+0x28>)
    7fbe:	4798      	blx	r3
  /* padding on some */
  memset(&llao[UIP_ND6_OPT_DATA_OFFSET + UIP_LLADDR_LEN], 0,
    7fc0:	2300      	movs	r3, #0
    7fc2:	72a3      	strb	r3, [r4, #10]
    7fc4:	72e3      	strb	r3, [r4, #11]
    7fc6:	7323      	strb	r3, [r4, #12]
    7fc8:	7363      	strb	r3, [r4, #13]
    7fca:	73a3      	strb	r3, [r4, #14]
    7fcc:	73e3      	strb	r3, [r4, #15]
         UIP_ND6_OPT_LLAO_LEN - 2 - UIP_LLADDR_LEN);
}
    7fce:	bd10      	pop	{r4, pc}
    7fd0:	20002ccc 	.word	0x20002ccc
    7fd4:	00010b2f 	.word	0x00010b2f

00007fd8 <rs_input>:
#if UIP_CONF_ROUTER
#if UIP_ND6_SEND_RA
/*---------------------------------------------------------------------------*/
static void
rs_input(void)
{
    7fd8:	b5f0      	push	{r4, r5, r6, r7, lr}
    7fda:	b08b      	sub	sp, #44	; 0x2c
  /*
   * Check hop limit / icmp code 
   * target address must not be multicast
   * if the NA is solicited, dest must not be multicast
   */
  if((UIP_IP_BUF->ttl != UIP_ND6_HOP_LIMIT) || (UIP_ICMP_BUF->icode != 0)) {
    7fdc:	4b56      	ldr	r3, [pc, #344]	; (8138 <rs_input+0x160>)
    7fde:	79db      	ldrb	r3, [r3, #7]
    7fe0:	2bff      	cmp	r3, #255	; 0xff
    7fe2:	d000      	beq.n	7fe6 <rs_input+0xe>
    7fe4:	e0a2      	b.n	812c <rs_input+0x154>
    7fe6:	4b55      	ldr	r3, [pc, #340]	; (813c <rs_input+0x164>)
    7fe8:	781b      	ldrb	r3, [r3, #0]
    7fea:	1c19      	adds	r1, r3, #0
    7fec:	3128      	adds	r1, #40	; 0x28
    7fee:	4a52      	ldr	r2, [pc, #328]	; (8138 <rs_input+0x160>)
    7ff0:	188a      	adds	r2, r1, r2
    7ff2:	7852      	ldrb	r2, [r2, #1]
    7ff4:	2a00      	cmp	r2, #0
    7ff6:	d000      	beq.n	7ffa <rs_input+0x22>
    7ff8:	e098      	b.n	812c <rs_input+0x154>
  }
#endif /*UIP_CONF_IPV6_CHECKS */

  /* Only valid option is Source Link-Layer Address option any thing
     else is discarded */
  nd6_opt_offset = UIP_ND6_RS_LEN;
    7ffa:	2104      	movs	r1, #4
    7ffc:	4a50      	ldr	r2, [pc, #320]	; (8140 <rs_input+0x168>)
    7ffe:	7011      	strb	r1, [r2, #0]
  nd6_opt_llao = NULL;
    8000:	2100      	movs	r1, #0
    8002:	4a50      	ldr	r2, [pc, #320]	; (8144 <rs_input+0x16c>)
    8004:	6011      	str	r1, [r2, #0]

  while(uip_l3_icmp_hdr_len + nd6_opt_offset < uip_len) {
    8006:	1c1c      	adds	r4, r3, #0
    8008:	342c      	adds	r4, #44	; 0x2c
    800a:	3104      	adds	r1, #4
    800c:	3330      	adds	r3, #48	; 0x30
    800e:	4a4e      	ldr	r2, [pc, #312]	; (8148 <rs_input+0x170>)
    8010:	8815      	ldrh	r5, [r2, #0]
    8012:	42ab      	cmp	r3, r5
    8014:	db00      	blt.n	8018 <rs_input+0x40>
    8016:	e087      	b.n	8128 <rs_input+0x150>
#if UIP_CONF_IPV6_CHECKS
    if(UIP_ND6_OPT_HDR_BUF->len == 0) {
    8018:	4a47      	ldr	r2, [pc, #284]	; (8138 <rs_input+0x160>)
    801a:	189b      	adds	r3, r3, r2
    801c:	785a      	ldrb	r2, [r3, #1]
    801e:	2a00      	cmp	r2, #0
    8020:	d100      	bne.n	8024 <rs_input+0x4c>
    8022:	e083      	b.n	812c <rs_input+0x154>
    8024:	2000      	movs	r0, #0
      break;
    default:
      PRINTF("ND option not supported in RS\n\r");
      break;
    }
    nd6_opt_offset += (UIP_ND6_OPT_HDR_BUF->len << 3);
    8026:	4e44      	ldr	r6, [pc, #272]	; (8138 <rs_input+0x160>)
  nd6_opt_offset = UIP_ND6_RS_LEN;
  nd6_opt_llao = NULL;

  while(uip_l3_icmp_hdr_len + nd6_opt_offset < uip_len) {
#if UIP_CONF_IPV6_CHECKS
    if(UIP_ND6_OPT_HDR_BUF->len == 0) {
    8028:	1c37      	adds	r7, r6, #0
    802a:	e008      	b.n	803e <rs_input+0x66>
    802c:	19db      	adds	r3, r3, r7
    802e:	785a      	ldrb	r2, [r3, #1]
    8030:	2a00      	cmp	r2, #0
    8032:	d104      	bne.n	803e <rs_input+0x66>
    8034:	4b43      	ldr	r3, [pc, #268]	; (8144 <rs_input+0x16c>)
    8036:	6018      	str	r0, [r3, #0]
    8038:	4b41      	ldr	r3, [pc, #260]	; (8140 <rs_input+0x168>)
    803a:	7019      	strb	r1, [r3, #0]
    803c:	e076      	b.n	812c <rs_input+0x154>
      PRINTF("RS received is bad\n\r");
      goto discard;
    }
#endif /*UIP_CONF_IPV6_CHECKS */
    switch (UIP_ND6_OPT_HDR_BUF->type) {
    803e:	781a      	ldrb	r2, [r3, #0]
    8040:	2a01      	cmp	r2, #1
    8042:	d100      	bne.n	8046 <rs_input+0x6e>
    case UIP_ND6_OPT_SLLAO:
      nd6_opt_llao = (uint8_t *)UIP_ND6_OPT_HDR_BUF;
    8044:	1c18      	adds	r0, r3, #0
      break;
    default:
      PRINTF("ND option not supported in RS\n\r");
      break;
    }
    nd6_opt_offset += (UIP_ND6_OPT_HDR_BUF->len << 3);
    8046:	190b      	adds	r3, r1, r4
    8048:	199b      	adds	r3, r3, r6
    804a:	785b      	ldrb	r3, [r3, #1]
    804c:	00da      	lsls	r2, r3, #3
    804e:	188b      	adds	r3, r1, r2
    8050:	b2d9      	uxtb	r1, r3
  /* Only valid option is Source Link-Layer Address option any thing
     else is discarded */
  nd6_opt_offset = UIP_ND6_RS_LEN;
  nd6_opt_llao = NULL;

  while(uip_l3_icmp_hdr_len + nd6_opt_offset < uip_len) {
    8052:	190b      	adds	r3, r1, r4
    8054:	42ab      	cmp	r3, r5
    8056:	dbe9      	blt.n	802c <rs_input+0x54>
    8058:	4b3a      	ldr	r3, [pc, #232]	; (8144 <rs_input+0x16c>)
    805a:	6018      	str	r0, [r3, #0]
    805c:	4b38      	ldr	r3, [pc, #224]	; (8140 <rs_input+0x168>)
    805e:	7019      	strb	r1, [r3, #0]
      break;
    }
    nd6_opt_offset += (UIP_ND6_OPT_HDR_BUF->len << 3);
  }
  /* Options processing: only SLLAO */
  if(nd6_opt_llao != NULL) {
    8060:	2800      	cmp	r0, #0
    8062:	d061      	beq.n	8128 <rs_input+0x150>
#if UIP_CONF_IPV6_CHECKS
    if(uip_is_addr_unspecified(&UIP_IP_BUF->srcipaddr)) {
    8064:	4b34      	ldr	r3, [pc, #208]	; (8138 <rs_input+0x160>)
    8066:	891b      	ldrh	r3, [r3, #8]
    8068:	2b00      	cmp	r3, #0
    806a:	d11b      	bne.n	80a4 <rs_input+0xcc>
    806c:	4b32      	ldr	r3, [pc, #200]	; (8138 <rs_input+0x160>)
    806e:	895b      	ldrh	r3, [r3, #10]
    8070:	2b00      	cmp	r3, #0
    8072:	d117      	bne.n	80a4 <rs_input+0xcc>
    8074:	4b30      	ldr	r3, [pc, #192]	; (8138 <rs_input+0x160>)
    8076:	899b      	ldrh	r3, [r3, #12]
    8078:	2b00      	cmp	r3, #0
    807a:	d113      	bne.n	80a4 <rs_input+0xcc>
    807c:	4b2e      	ldr	r3, [pc, #184]	; (8138 <rs_input+0x160>)
    807e:	89db      	ldrh	r3, [r3, #14]
    8080:	2b00      	cmp	r3, #0
    8082:	d10f      	bne.n	80a4 <rs_input+0xcc>
    8084:	4b2c      	ldr	r3, [pc, #176]	; (8138 <rs_input+0x160>)
    8086:	8a1b      	ldrh	r3, [r3, #16]
    8088:	2b00      	cmp	r3, #0
    808a:	d10b      	bne.n	80a4 <rs_input+0xcc>
    808c:	4b2a      	ldr	r3, [pc, #168]	; (8138 <rs_input+0x160>)
    808e:	8a5b      	ldrh	r3, [r3, #18]
    8090:	2b00      	cmp	r3, #0
    8092:	d107      	bne.n	80a4 <rs_input+0xcc>
    8094:	4b28      	ldr	r3, [pc, #160]	; (8138 <rs_input+0x160>)
    8096:	8a9b      	ldrh	r3, [r3, #20]
    8098:	2b00      	cmp	r3, #0
    809a:	d103      	bne.n	80a4 <rs_input+0xcc>
    809c:	4b26      	ldr	r3, [pc, #152]	; (8138 <rs_input+0x160>)
    809e:	8adb      	ldrh	r3, [r3, #22]
    80a0:	2b00      	cmp	r3, #0
    80a2:	d043      	beq.n	812c <rs_input+0x154>
      PRINTF("RS received is bad\n\r");
      goto discard;
    } else {
#endif /*UIP_CONF_IPV6_CHECKS */
      if((nbr = uip_ds6_nbr_lookup(&UIP_IP_BUF->srcipaddr)) == NULL) {
    80a4:	4829      	ldr	r0, [pc, #164]	; (814c <rs_input+0x174>)
    80a6:	4b2a      	ldr	r3, [pc, #168]	; (8150 <rs_input+0x178>)
    80a8:	4798      	blx	r3
    80aa:	4b2a      	ldr	r3, [pc, #168]	; (8154 <rs_input+0x17c>)
    80ac:	6018      	str	r0, [r3, #0]
    80ae:	2800      	cmp	r0, #0
    80b0:	d108      	bne.n	80c4 <rs_input+0xec>
        /* we need to add the neighbor */
        uip_ds6_nbr_add(&UIP_IP_BUF->srcipaddr,
                        (uip_lladdr_t *)&nd6_opt_llao[UIP_ND6_OPT_DATA_OFFSET], 0, NBR_STALE);
    80b2:	4b24      	ldr	r3, [pc, #144]	; (8144 <rs_input+0x16c>)
      goto discard;
    } else {
#endif /*UIP_CONF_IPV6_CHECKS */
      if((nbr = uip_ds6_nbr_lookup(&UIP_IP_BUF->srcipaddr)) == NULL) {
        /* we need to add the neighbor */
        uip_ds6_nbr_add(&UIP_IP_BUF->srcipaddr,
    80b4:	6819      	ldr	r1, [r3, #0]
    80b6:	3102      	adds	r1, #2
    80b8:	4824      	ldr	r0, [pc, #144]	; (814c <rs_input+0x174>)
    80ba:	2200      	movs	r2, #0
    80bc:	2302      	movs	r3, #2
    80be:	4c26      	ldr	r4, [pc, #152]	; (8158 <rs_input+0x180>)
    80c0:	47a0      	blx	r4
    80c2:	e031      	b.n	8128 <rs_input+0x150>
                        (uip_lladdr_t *)&nd6_opt_llao[UIP_ND6_OPT_DATA_OFFSET], 0, NBR_STALE);
      } else {
        /* If LL address changed, set neighbor state to stale */
        if(memcmp(&nd6_opt_llao[UIP_ND6_OPT_DATA_OFFSET],
    80c4:	4b1f      	ldr	r3, [pc, #124]	; (8144 <rs_input+0x16c>)
    80c6:	681c      	ldr	r4, [r3, #0]
    80c8:	3402      	adds	r4, #2
            uip_ds6_nbr_get_ll(nbr), UIP_LLADDR_LEN) != 0) {
    80ca:	4b24      	ldr	r3, [pc, #144]	; (815c <rs_input+0x184>)
    80cc:	4798      	blx	r3
    80ce:	1c01      	adds	r1, r0, #0
        /* we need to add the neighbor */
        uip_ds6_nbr_add(&UIP_IP_BUF->srcipaddr,
                        (uip_lladdr_t *)&nd6_opt_llao[UIP_ND6_OPT_DATA_OFFSET], 0, NBR_STALE);
      } else {
        /* If LL address changed, set neighbor state to stale */
        if(memcmp(&nd6_opt_llao[UIP_ND6_OPT_DATA_OFFSET],
    80d0:	1c20      	adds	r0, r4, #0
    80d2:	2208      	movs	r2, #8
    80d4:	4b22      	ldr	r3, [pc, #136]	; (8160 <rs_input+0x188>)
    80d6:	4798      	blx	r3
    80d8:	2800      	cmp	r0, #0
    80da:	d020      	beq.n	811e <rs_input+0x146>
            uip_ds6_nbr_get_ll(nbr), UIP_LLADDR_LEN) != 0) {
          uip_ds6_nbr_t nbr_data = *nbr;
    80dc:	4e1d      	ldr	r6, [pc, #116]	; (8154 <rs_input+0x17c>)
    80de:	6830      	ldr	r0, [r6, #0]
    80e0:	a901      	add	r1, sp, #4
    80e2:	1c0b      	adds	r3, r1, #0
    80e4:	1c02      	adds	r2, r0, #0
    80e6:	ca32      	ldmia	r2!, {r1, r4, r5}
    80e8:	c332      	stmia	r3!, {r1, r4, r5}
    80ea:	ca32      	ldmia	r2!, {r1, r4, r5}
    80ec:	c332      	stmia	r3!, {r1, r4, r5}
    80ee:	ca32      	ldmia	r2!, {r1, r4, r5}
    80f0:	c332      	stmia	r3!, {r1, r4, r5}
    80f2:	2420      	movs	r4, #32
    80f4:	5d05      	ldrb	r5, [r0, r4]
          uip_ds6_nbr_rm(nbr);
    80f6:	4b1b      	ldr	r3, [pc, #108]	; (8164 <rs_input+0x18c>)
    80f8:	4798      	blx	r3
          nbr = uip_ds6_nbr_add(&UIP_IP_BUF->srcipaddr,
                                (uip_lladdr_t *)&nd6_opt_llao[UIP_ND6_OPT_DATA_OFFSET], 0, NBR_STALE);
    80fa:	4b12      	ldr	r3, [pc, #72]	; (8144 <rs_input+0x16c>)
        /* If LL address changed, set neighbor state to stale */
        if(memcmp(&nd6_opt_llao[UIP_ND6_OPT_DATA_OFFSET],
            uip_ds6_nbr_get_ll(nbr), UIP_LLADDR_LEN) != 0) {
          uip_ds6_nbr_t nbr_data = *nbr;
          uip_ds6_nbr_rm(nbr);
          nbr = uip_ds6_nbr_add(&UIP_IP_BUF->srcipaddr,
    80fc:	6819      	ldr	r1, [r3, #0]
    80fe:	3102      	adds	r1, #2
    8100:	4812      	ldr	r0, [pc, #72]	; (814c <rs_input+0x174>)
    8102:	2200      	movs	r2, #0
    8104:	2302      	movs	r3, #2
    8106:	4f14      	ldr	r7, [pc, #80]	; (8158 <rs_input+0x180>)
    8108:	47b8      	blx	r7
    810a:	6030      	str	r0, [r6, #0]
                                (uip_lladdr_t *)&nd6_opt_llao[UIP_ND6_OPT_DATA_OFFSET], 0, NBR_STALE);
          nbr->reachable = nbr_data.reachable;
    810c:	1c03      	adds	r3, r0, #0
    810e:	3310      	adds	r3, #16
    8110:	aa05      	add	r2, sp, #20
    8112:	ca42      	ldmia	r2!, {r1, r6}
    8114:	c342      	stmia	r3!, {r1, r6}
          nbr->sendns = nbr_data.sendns;
    8116:	aa07      	add	r2, sp, #28
    8118:	ca42      	ldmia	r2!, {r1, r6}
    811a:	c342      	stmia	r3!, {r1, r6}
          nbr->nscount = nbr_data.nscount;
    811c:	5505      	strb	r5, [r0, r4]
        }
        nbr->isrouter = 0;
    811e:	4b0d      	ldr	r3, [pc, #52]	; (8154 <rs_input+0x17c>)
    8120:	681a      	ldr	r2, [r3, #0]
    8122:	2100      	movs	r1, #0
    8124:	2321      	movs	r3, #33	; 0x21
    8126:	54d1      	strb	r1, [r2, r3]
    }
#endif /*UIP_CONF_IPV6_CHECKS */
  }

  /* Schedule a sollicited RA */
  uip_ds6_send_ra_sollicited();
    8128:	4b0f      	ldr	r3, [pc, #60]	; (8168 <rs_input+0x190>)
    812a:	4798      	blx	r3

discard:
  uip_len = 0;
    812c:	2200      	movs	r2, #0
    812e:	4b06      	ldr	r3, [pc, #24]	; (8148 <rs_input+0x170>)
    8130:	801a      	strh	r2, [r3, #0]
  return;
}
    8132:	b00b      	add	sp, #44	; 0x2c
    8134:	bdf0      	pop	{r4, r5, r6, r7, pc}
    8136:	46c0      	nop			; (mov r8, r8)
    8138:	20002cd4 	.word	0x20002cd4
    813c:	20000b12 	.word	0x20000b12
    8140:	20000b08 	.word	0x20000b08
    8144:	20000b04 	.word	0x20000b04
    8148:	20002cc0 	.word	0x20002cc0
    814c:	20002cdc 	.word	0x20002cdc
    8150:	00006b65 	.word	0x00006b65
    8154:	20000b00 	.word	0x20000b00
    8158:	00006af1 	.word	0x00006af1
    815c:	00006b4d 	.word	0x00006b4d
    8160:	00010b11 	.word	0x00010b11
    8164:	00006ab1 	.word	0x00006ab1
    8168:	00007801 	.word	0x00007801

0000816c <ns_input>:
/*------------------------------------------------------------------*/


static void
ns_input(void)
{
    816c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  PRINT6ADDR((uip_ipaddr_t *) (&UIP_ND6_NS_BUF->tgtipaddr));
  PRINTF("\n\r");
  UIP_STAT(++uip_stat.nd6.recv);

#if UIP_CONF_IPV6_CHECKS
  if((UIP_IP_BUF->ttl != UIP_ND6_HOP_LIMIT) ||
    816e:	4bab      	ldr	r3, [pc, #684]	; (841c <ns_input+0x2b0>)
    8170:	79db      	ldrb	r3, [r3, #7]
    8172:	2bff      	cmp	r3, #255	; 0xff
    8174:	d000      	beq.n	8178 <ns_input+0xc>
    8176:	e14c      	b.n	8412 <ns_input+0x2a6>
     (uip_is_addr_mcast(&UIP_ND6_NS_BUF->tgtipaddr)) ||
    8178:	4ba9      	ldr	r3, [pc, #676]	; (8420 <ns_input+0x2b4>)
    817a:	781b      	ldrb	r3, [r3, #0]
    817c:	1c19      	adds	r1, r3, #0
    817e:	312c      	adds	r1, #44	; 0x2c
    8180:	4aa6      	ldr	r2, [pc, #664]	; (841c <ns_input+0x2b0>)
    8182:	188a      	adds	r2, r1, r2
  PRINT6ADDR((uip_ipaddr_t *) (&UIP_ND6_NS_BUF->tgtipaddr));
  PRINTF("\n\r");
  UIP_STAT(++uip_stat.nd6.recv);

#if UIP_CONF_IPV6_CHECKS
  if((UIP_IP_BUF->ttl != UIP_ND6_HOP_LIMIT) ||
    8184:	7912      	ldrb	r2, [r2, #4]
    8186:	2aff      	cmp	r2, #255	; 0xff
    8188:	d100      	bne.n	818c <ns_input+0x20>
    818a:	e142      	b.n	8412 <ns_input+0x2a6>
     (uip_is_addr_mcast(&UIP_ND6_NS_BUF->tgtipaddr)) ||
     (UIP_ICMP_BUF->icode != 0)) {
    818c:	3328      	adds	r3, #40	; 0x28
    818e:	4aa3      	ldr	r2, [pc, #652]	; (841c <ns_input+0x2b0>)
    8190:	189b      	adds	r3, r3, r2
  PRINTF("\n\r");
  UIP_STAT(++uip_stat.nd6.recv);

#if UIP_CONF_IPV6_CHECKS
  if((UIP_IP_BUF->ttl != UIP_ND6_HOP_LIMIT) ||
     (uip_is_addr_mcast(&UIP_ND6_NS_BUF->tgtipaddr)) ||
    8192:	785b      	ldrb	r3, [r3, #1]
    8194:	2b00      	cmp	r3, #0
    8196:	d000      	beq.n	819a <ns_input+0x2e>
    8198:	e13b      	b.n	8412 <ns_input+0x2a6>
    goto discard;
  }
#endif /* UIP_CONF_IPV6_CHECKS */

  /* Options processing */
  nd6_opt_llao = NULL;
    819a:	2200      	movs	r2, #0
    819c:	4ba1      	ldr	r3, [pc, #644]	; (8424 <ns_input+0x2b8>)
    819e:	601a      	str	r2, [r3, #0]
  nd6_opt_offset = UIP_ND6_NS_LEN;
    81a0:	3214      	adds	r2, #20
    81a2:	4ba1      	ldr	r3, [pc, #644]	; (8428 <ns_input+0x2bc>)
    81a4:	701a      	strb	r2, [r3, #0]
  while(uip_l3_icmp_hdr_len + nd6_opt_offset < uip_len) {
    81a6:	4b9e      	ldr	r3, [pc, #632]	; (8420 <ns_input+0x2b4>)
    81a8:	7818      	ldrb	r0, [r3, #0]
    81aa:	1c02      	adds	r2, r0, #0
    81ac:	3240      	adds	r2, #64	; 0x40
    81ae:	4b9f      	ldr	r3, [pc, #636]	; (842c <ns_input+0x2c0>)
    81b0:	881b      	ldrh	r3, [r3, #0]
    81b2:	1c08      	adds	r0, r1, #0
    81b4:	429a      	cmp	r2, r3
    81b6:	db00      	blt.n	81ba <ns_input+0x4e>
    81b8:	e077      	b.n	82aa <ns_input+0x13e>
#if UIP_CONF_IPV6_CHECKS
    if(UIP_ND6_OPT_HDR_BUF->len == 0) {
    81ba:	4b98      	ldr	r3, [pc, #608]	; (841c <ns_input+0x2b0>)
    81bc:	18d3      	adds	r3, r2, r3
    81be:	785a      	ldrb	r2, [r3, #1]
    81c0:	2a00      	cmp	r2, #0
    81c2:	d100      	bne.n	81c6 <ns_input+0x5a>
    81c4:	e125      	b.n	8412 <ns_input+0x2a6>
      goto discard;
    }
#endif /* UIP_CONF_IPV6_CHECKS */
    switch (UIP_ND6_OPT_HDR_BUF->type) {
    case UIP_ND6_OPT_SLLAO:
      nd6_opt_llao = &uip_buf[uip_l2_l3_icmp_hdr_len + nd6_opt_offset];
    81c6:	4d97      	ldr	r5, [pc, #604]	; (8424 <ns_input+0x2b8>)
#if UIP_CONF_IPV6_CHECKS
      /* There must be NO option in a DAD NS */
      if(uip_is_addr_unspecified(&UIP_IP_BUF->srcipaddr)) {
    81c8:	4c94      	ldr	r4, [pc, #592]	; (841c <ns_input+0x2b0>)
    81ca:	e005      	b.n	81d8 <ns_input+0x6c>
  /* Options processing */
  nd6_opt_llao = NULL;
  nd6_opt_offset = UIP_ND6_NS_LEN;
  while(uip_l3_icmp_hdr_len + nd6_opt_offset < uip_len) {
#if UIP_CONF_IPV6_CHECKS
    if(UIP_ND6_OPT_HDR_BUF->len == 0) {
    81cc:	4a93      	ldr	r2, [pc, #588]	; (841c <ns_input+0x2b0>)
    81ce:	189b      	adds	r3, r3, r2
    81d0:	785a      	ldrb	r2, [r3, #1]
    81d2:	2a00      	cmp	r2, #0
    81d4:	d100      	bne.n	81d8 <ns_input+0x6c>
    81d6:	e11c      	b.n	8412 <ns_input+0x2a6>
      PRINTF("NS received is bad\n\r");
      goto discard;
    }
#endif /* UIP_CONF_IPV6_CHECKS */
    switch (UIP_ND6_OPT_HDR_BUF->type) {
    81d8:	781a      	ldrb	r2, [r3, #0]
    81da:	2a01      	cmp	r2, #1
    81dc:	d151      	bne.n	8282 <ns_input+0x116>
    case UIP_ND6_OPT_SLLAO:
      nd6_opt_llao = &uip_buf[uip_l2_l3_icmp_hdr_len + nd6_opt_offset];
    81de:	602b      	str	r3, [r5, #0]
#if UIP_CONF_IPV6_CHECKS
      /* There must be NO option in a DAD NS */
      if(uip_is_addr_unspecified(&UIP_IP_BUF->srcipaddr)) {
    81e0:	8923      	ldrh	r3, [r4, #8]
    81e2:	2b00      	cmp	r3, #0
    81e4:	d11c      	bne.n	8220 <ns_input+0xb4>
    81e6:	4b8d      	ldr	r3, [pc, #564]	; (841c <ns_input+0x2b0>)
    81e8:	895b      	ldrh	r3, [r3, #10]
    81ea:	2b00      	cmp	r3, #0
    81ec:	d118      	bne.n	8220 <ns_input+0xb4>
    81ee:	4b8b      	ldr	r3, [pc, #556]	; (841c <ns_input+0x2b0>)
    81f0:	899b      	ldrh	r3, [r3, #12]
    81f2:	2b00      	cmp	r3, #0
    81f4:	d114      	bne.n	8220 <ns_input+0xb4>
    81f6:	4b89      	ldr	r3, [pc, #548]	; (841c <ns_input+0x2b0>)
    81f8:	89db      	ldrh	r3, [r3, #14]
    81fa:	2b00      	cmp	r3, #0
    81fc:	d110      	bne.n	8220 <ns_input+0xb4>
    81fe:	4b87      	ldr	r3, [pc, #540]	; (841c <ns_input+0x2b0>)
    8200:	8a1b      	ldrh	r3, [r3, #16]
    8202:	2b00      	cmp	r3, #0
    8204:	d10c      	bne.n	8220 <ns_input+0xb4>
    8206:	4b85      	ldr	r3, [pc, #532]	; (841c <ns_input+0x2b0>)
    8208:	8a5b      	ldrh	r3, [r3, #18]
    820a:	2b00      	cmp	r3, #0
    820c:	d108      	bne.n	8220 <ns_input+0xb4>
    820e:	4b83      	ldr	r3, [pc, #524]	; (841c <ns_input+0x2b0>)
    8210:	8a9b      	ldrh	r3, [r3, #20]
    8212:	2b00      	cmp	r3, #0
    8214:	d104      	bne.n	8220 <ns_input+0xb4>
    8216:	4b81      	ldr	r3, [pc, #516]	; (841c <ns_input+0x2b0>)
    8218:	8adb      	ldrh	r3, [r3, #22]
    821a:	2b00      	cmp	r3, #0
    821c:	d100      	bne.n	8220 <ns_input+0xb4>
    821e:	e0f8      	b.n	8412 <ns_input+0x2a6>
        PRINTF("NS received is bad\n\r");
        goto discard;
      } else {
#endif /*UIP_CONF_IPV6_CHECKS */
        nbr = uip_ds6_nbr_lookup(&UIP_IP_BUF->srcipaddr);
    8220:	4883      	ldr	r0, [pc, #524]	; (8430 <ns_input+0x2c4>)
    8222:	4b84      	ldr	r3, [pc, #528]	; (8434 <ns_input+0x2c8>)
    8224:	4798      	blx	r3
    8226:	4b84      	ldr	r3, [pc, #528]	; (8438 <ns_input+0x2cc>)
    8228:	6018      	str	r0, [r3, #0]
        if(nbr == NULL) {
    822a:	2800      	cmp	r0, #0
    822c:	d108      	bne.n	8240 <ns_input+0xd4>
          uip_ds6_nbr_add(&UIP_IP_BUF->srcipaddr,
			  (uip_lladdr_t *)&nd6_opt_llao[UIP_ND6_OPT_DATA_OFFSET],
    822e:	4b7d      	ldr	r3, [pc, #500]	; (8424 <ns_input+0x2b8>)
        goto discard;
      } else {
#endif /*UIP_CONF_IPV6_CHECKS */
        nbr = uip_ds6_nbr_lookup(&UIP_IP_BUF->srcipaddr);
        if(nbr == NULL) {
          uip_ds6_nbr_add(&UIP_IP_BUF->srcipaddr,
    8230:	6819      	ldr	r1, [r3, #0]
    8232:	3102      	adds	r1, #2
    8234:	487e      	ldr	r0, [pc, #504]	; (8430 <ns_input+0x2c4>)
    8236:	2200      	movs	r2, #0
    8238:	2302      	movs	r3, #2
    823a:	4e80      	ldr	r6, [pc, #512]	; (843c <ns_input+0x2d0>)
    823c:	47b0      	blx	r6
    823e:	e020      	b.n	8282 <ns_input+0x116>
			  (uip_lladdr_t *)&nd6_opt_llao[UIP_ND6_OPT_DATA_OFFSET],
			  0, NBR_STALE);
        } else {
          uip_lladdr_t *lladdr = (uip_lladdr_t *)uip_ds6_nbr_get_ll(nbr);
    8240:	4b7f      	ldr	r3, [pc, #508]	; (8440 <ns_input+0x2d4>)
    8242:	4798      	blx	r3
    8244:	1c07      	adds	r7, r0, #0
          if(memcmp(&nd6_opt_llao[UIP_ND6_OPT_DATA_OFFSET],
    8246:	4b77      	ldr	r3, [pc, #476]	; (8424 <ns_input+0x2b8>)
    8248:	681e      	ldr	r6, [r3, #0]
    824a:	3602      	adds	r6, #2
    824c:	1c30      	adds	r0, r6, #0
    824e:	1c39      	adds	r1, r7, #0
    8250:	2208      	movs	r2, #8
    8252:	4b7c      	ldr	r3, [pc, #496]	; (8444 <ns_input+0x2d8>)
    8254:	4798      	blx	r3
    8256:	2800      	cmp	r0, #0
    8258:	d00a      	beq.n	8270 <ns_input+0x104>
		    lladdr, UIP_LLADDR_LEN) != 0) {
            memcpy(lladdr, &nd6_opt_llao[UIP_ND6_OPT_DATA_OFFSET],
    825a:	1c38      	adds	r0, r7, #0
    825c:	1c31      	adds	r1, r6, #0
    825e:	2208      	movs	r2, #8
    8260:	4b79      	ldr	r3, [pc, #484]	; (8448 <ns_input+0x2dc>)
    8262:	4798      	blx	r3
		   UIP_LLADDR_LEN);
            nbr->state = NBR_STALE;
    8264:	4b74      	ldr	r3, [pc, #464]	; (8438 <ns_input+0x2cc>)
    8266:	681a      	ldr	r2, [r3, #0]
    8268:	2102      	movs	r1, #2
    826a:	2322      	movs	r3, #34	; 0x22
    826c:	54d1      	strb	r1, [r2, r3]
    826e:	e008      	b.n	8282 <ns_input+0x116>
          } else {
            if(nbr->state == NBR_INCOMPLETE) {
    8270:	4b71      	ldr	r3, [pc, #452]	; (8438 <ns_input+0x2cc>)
    8272:	681b      	ldr	r3, [r3, #0]
    8274:	2222      	movs	r2, #34	; 0x22
    8276:	5c9a      	ldrb	r2, [r3, r2]
    8278:	2a00      	cmp	r2, #0
    827a:	d102      	bne.n	8282 <ns_input+0x116>
              nbr->state = NBR_STALE;
    827c:	2102      	movs	r1, #2
    827e:	3222      	adds	r2, #34	; 0x22
    8280:	5499      	strb	r1, [r3, r2]
      break;
    default:
      PRINTF("ND option not supported in NS");
      break;
    }
    nd6_opt_offset += (UIP_ND6_OPT_HDR_BUF->len << 3);
    8282:	4e69      	ldr	r6, [pc, #420]	; (8428 <ns_input+0x2bc>)
    8284:	7837      	ldrb	r7, [r6, #0]
    8286:	4b66      	ldr	r3, [pc, #408]	; (8420 <ns_input+0x2b4>)
    8288:	781b      	ldrb	r3, [r3, #0]
    828a:	332c      	adds	r3, #44	; 0x2c
    828c:	1c19      	adds	r1, r3, #0
    828e:	19db      	adds	r3, r3, r7
    8290:	4862      	ldr	r0, [pc, #392]	; (841c <ns_input+0x2b0>)
    8292:	1818      	adds	r0, r3, r0
    8294:	7842      	ldrb	r2, [r0, #1]
    8296:	00d2      	lsls	r2, r2, #3
    8298:	18ba      	adds	r2, r7, r2
    829a:	b2d3      	uxtb	r3, r2
    829c:	7033      	strb	r3, [r6, #0]
#endif /* UIP_CONF_IPV6_CHECKS */

  /* Options processing */
  nd6_opt_llao = NULL;
  nd6_opt_offset = UIP_ND6_NS_LEN;
  while(uip_l3_icmp_hdr_len + nd6_opt_offset < uip_len) {
    829e:	1c08      	adds	r0, r1, #0
    82a0:	18cb      	adds	r3, r1, r3
    82a2:	4a62      	ldr	r2, [pc, #392]	; (842c <ns_input+0x2c0>)
    82a4:	8812      	ldrh	r2, [r2, #0]
    82a6:	4293      	cmp	r3, r2
    82a8:	db90      	blt.n	81cc <ns_input+0x60>
      break;
    }
    nd6_opt_offset += (UIP_ND6_OPT_HDR_BUF->len << 3);
  }

  addr = uip_ds6_addr_lookup(&UIP_ND6_NS_BUF->tgtipaddr);
    82aa:	4b5c      	ldr	r3, [pc, #368]	; (841c <ns_input+0x2b0>)
    82ac:	18c0      	adds	r0, r0, r3
    82ae:	3004      	adds	r0, #4
    82b0:	4b66      	ldr	r3, [pc, #408]	; (844c <ns_input+0x2e0>)
    82b2:	4798      	blx	r3
    82b4:	4b66      	ldr	r3, [pc, #408]	; (8450 <ns_input+0x2e4>)
    82b6:	6018      	str	r0, [r3, #0]
  if(addr != NULL) {
    82b8:	2800      	cmp	r0, #0
    82ba:	d100      	bne.n	82be <ns_input+0x152>
    82bc:	e0a9      	b.n	8412 <ns_input+0x2a6>
          /** \todo if I sent a NS before him, I win */
        uip_ds6_dad_failed(addr);
        goto discard;
      }
#else /* UIP_ND6_DEF_MAXDADNS > 0 */
    if(uip_is_addr_unspecified(&UIP_IP_BUF->srcipaddr)) {
    82be:	4b57      	ldr	r3, [pc, #348]	; (841c <ns_input+0x2b0>)
    82c0:	891b      	ldrh	r3, [r3, #8]
    82c2:	2b00      	cmp	r3, #0
    82c4:	d11c      	bne.n	8300 <ns_input+0x194>
    82c6:	4b55      	ldr	r3, [pc, #340]	; (841c <ns_input+0x2b0>)
    82c8:	895b      	ldrh	r3, [r3, #10]
    82ca:	2b00      	cmp	r3, #0
    82cc:	d118      	bne.n	8300 <ns_input+0x194>
    82ce:	4b53      	ldr	r3, [pc, #332]	; (841c <ns_input+0x2b0>)
    82d0:	899b      	ldrh	r3, [r3, #12]
    82d2:	2b00      	cmp	r3, #0
    82d4:	d114      	bne.n	8300 <ns_input+0x194>
    82d6:	4b51      	ldr	r3, [pc, #324]	; (841c <ns_input+0x2b0>)
    82d8:	89db      	ldrh	r3, [r3, #14]
    82da:	2b00      	cmp	r3, #0
    82dc:	d110      	bne.n	8300 <ns_input+0x194>
    82de:	4b4f      	ldr	r3, [pc, #316]	; (841c <ns_input+0x2b0>)
    82e0:	8a1b      	ldrh	r3, [r3, #16]
    82e2:	2b00      	cmp	r3, #0
    82e4:	d10c      	bne.n	8300 <ns_input+0x194>
    82e6:	4b4d      	ldr	r3, [pc, #308]	; (841c <ns_input+0x2b0>)
    82e8:	8a5b      	ldrh	r3, [r3, #18]
    82ea:	2b00      	cmp	r3, #0
    82ec:	d108      	bne.n	8300 <ns_input+0x194>
    82ee:	4b4b      	ldr	r3, [pc, #300]	; (841c <ns_input+0x2b0>)
    82f0:	8a9b      	ldrh	r3, [r3, #20]
    82f2:	2b00      	cmp	r3, #0
    82f4:	d104      	bne.n	8300 <ns_input+0x194>
    82f6:	4b49      	ldr	r3, [pc, #292]	; (841c <ns_input+0x2b0>)
    82f8:	8adb      	ldrh	r3, [r3, #22]
    82fa:	2b00      	cmp	r3, #0
    82fc:	d100      	bne.n	8300 <ns_input+0x194>
    82fe:	e088      	b.n	8412 <ns_input+0x2a6>
      /* DAD CASE */
      goto discard;
#endif /* UIP_ND6_DEF_MAXDADNS > 0 */
    }
#if UIP_CONF_IPV6_CHECKS
    if(uip_ds6_is_my_addr(&UIP_IP_BUF->srcipaddr)) {
    8300:	484b      	ldr	r0, [pc, #300]	; (8430 <ns_input+0x2c4>)
    8302:	4b52      	ldr	r3, [pc, #328]	; (844c <ns_input+0x2e0>)
    8304:	4798      	blx	r3
    8306:	2800      	cmp	r0, #0
    8308:	d000      	beq.n	830c <ns_input+0x1a0>
    830a:	e082      	b.n	8412 <ns_input+0x2a6>
      goto discard;
    }
#endif /*UIP_CONF_IPV6_CHECKS */

    /* Address resolution case */
    if(uip_is_addr_solicited_node(&UIP_IP_BUF->destipaddr)) {
    830c:	4b43      	ldr	r3, [pc, #268]	; (841c <ns_input+0x2b0>)
    830e:	7e1b      	ldrb	r3, [r3, #24]
    8310:	2bff      	cmp	r3, #255	; 0xff
    8312:	d131      	bne.n	8378 <ns_input+0x20c>
    8314:	4b41      	ldr	r3, [pc, #260]	; (841c <ns_input+0x2b0>)
    8316:	7e5b      	ldrb	r3, [r3, #25]
    8318:	2b02      	cmp	r3, #2
    831a:	d12d      	bne.n	8378 <ns_input+0x20c>
    831c:	4b3f      	ldr	r3, [pc, #252]	; (841c <ns_input+0x2b0>)
    831e:	8b5b      	ldrh	r3, [r3, #26]
    8320:	2b00      	cmp	r3, #0
    8322:	d129      	bne.n	8378 <ns_input+0x20c>
    8324:	4b3d      	ldr	r3, [pc, #244]	; (841c <ns_input+0x2b0>)
    8326:	8b9b      	ldrh	r3, [r3, #28]
    8328:	2b00      	cmp	r3, #0
    832a:	d125      	bne.n	8378 <ns_input+0x20c>
    832c:	4b3b      	ldr	r3, [pc, #236]	; (841c <ns_input+0x2b0>)
    832e:	8bdb      	ldrh	r3, [r3, #30]
    8330:	2b00      	cmp	r3, #0
    8332:	d121      	bne.n	8378 <ns_input+0x20c>
    8334:	4b39      	ldr	r3, [pc, #228]	; (841c <ns_input+0x2b0>)
    8336:	8c1b      	ldrh	r3, [r3, #32]
    8338:	2b00      	cmp	r3, #0
    833a:	d11d      	bne.n	8378 <ns_input+0x20c>
    833c:	3322      	adds	r3, #34	; 0x22
    833e:	4a37      	ldr	r2, [pc, #220]	; (841c <ns_input+0x2b0>)
    8340:	5cd3      	ldrb	r3, [r2, r3]
    8342:	2b00      	cmp	r3, #0
    8344:	d118      	bne.n	8378 <ns_input+0x20c>
    8346:	3323      	adds	r3, #35	; 0x23
    8348:	5cd3      	ldrb	r3, [r2, r3]
    834a:	2b01      	cmp	r3, #1
    834c:	d114      	bne.n	8378 <ns_input+0x20c>
    834e:	3323      	adds	r3, #35	; 0x23
    8350:	5cd3      	ldrb	r3, [r2, r3]
    8352:	2bff      	cmp	r3, #255	; 0xff
    8354:	d110      	bne.n	8378 <ns_input+0x20c>
      uip_ipaddr_copy(&UIP_IP_BUF->destipaddr, &UIP_IP_BUF->srcipaddr);
    8356:	1c10      	adds	r0, r2, #0
    8358:	1c13      	adds	r3, r2, #0
    835a:	3318      	adds	r3, #24
    835c:	3208      	adds	r2, #8
    835e:	ca32      	ldmia	r2!, {r1, r4, r5}
    8360:	c332      	stmia	r3!, {r1, r4, r5}
    8362:	6812      	ldr	r2, [r2, #0]
    8364:	601a      	str	r2, [r3, #0]
      uip_ipaddr_copy(&UIP_IP_BUF->srcipaddr, &UIP_ND6_NS_BUF->tgtipaddr);
    8366:	4b2e      	ldr	r3, [pc, #184]	; (8420 <ns_input+0x2b4>)
    8368:	7819      	ldrb	r1, [r3, #0]
    836a:	1841      	adds	r1, r0, r1
    836c:	3008      	adds	r0, #8
    836e:	3130      	adds	r1, #48	; 0x30
    8370:	2210      	movs	r2, #16
    8372:	4b35      	ldr	r3, [pc, #212]	; (8448 <ns_input+0x2dc>)
    8374:	4798      	blx	r3
      flags = UIP_ND6_NA_FLAG_SOLICITED | UIP_ND6_NA_FLAG_OVERRIDE;
      goto create_na;
    8376:	e017      	b.n	83a8 <ns_input+0x23c>
    }

    /* NUD CASE */
    if(uip_ds6_addr_lookup(&UIP_IP_BUF->destipaddr) == addr) {
    8378:	4836      	ldr	r0, [pc, #216]	; (8454 <ns_input+0x2e8>)
    837a:	4b34      	ldr	r3, [pc, #208]	; (844c <ns_input+0x2e0>)
    837c:	4798      	blx	r3
    837e:	4b34      	ldr	r3, [pc, #208]	; (8450 <ns_input+0x2e4>)
    8380:	681b      	ldr	r3, [r3, #0]
    8382:	4298      	cmp	r0, r3
    8384:	d145      	bne.n	8412 <ns_input+0x2a6>
      uip_ipaddr_copy(&UIP_IP_BUF->destipaddr, &UIP_IP_BUF->srcipaddr);
    8386:	4825      	ldr	r0, [pc, #148]	; (841c <ns_input+0x2b0>)
    8388:	1c03      	adds	r3, r0, #0
    838a:	3318      	adds	r3, #24
    838c:	1c02      	adds	r2, r0, #0
    838e:	3208      	adds	r2, #8
    8390:	ca32      	ldmia	r2!, {r1, r4, r5}
    8392:	c332      	stmia	r3!, {r1, r4, r5}
    8394:	6812      	ldr	r2, [r2, #0]
    8396:	601a      	str	r2, [r3, #0]
      uip_ipaddr_copy(&UIP_IP_BUF->srcipaddr, &UIP_ND6_NS_BUF->tgtipaddr);
    8398:	4b21      	ldr	r3, [pc, #132]	; (8420 <ns_input+0x2b4>)
    839a:	7819      	ldrb	r1, [r3, #0]
    839c:	1841      	adds	r1, r0, r1
    839e:	3008      	adds	r0, #8
    83a0:	3130      	adds	r1, #48	; 0x30
    83a2:	2210      	movs	r2, #16
    83a4:	4b28      	ldr	r3, [pc, #160]	; (8448 <ns_input+0x2dc>)
    83a6:	4798      	blx	r3
create_na:
    /* If the node is a router it should set R flag in NAs */
#if UIP_CONF_ROUTER
    flags = flags | UIP_ND6_NA_FLAG_ROUTER;
#endif
  uip_ext_len = 0;
    83a8:	4d1d      	ldr	r5, [pc, #116]	; (8420 <ns_input+0x2b4>)
    83aa:	2300      	movs	r3, #0
    83ac:	702b      	strb	r3, [r5, #0]
  UIP_IP_BUF->vtc = 0x60;
    83ae:	4c1b      	ldr	r4, [pc, #108]	; (841c <ns_input+0x2b0>)
    83b0:	2260      	movs	r2, #96	; 0x60
    83b2:	7022      	strb	r2, [r4, #0]
  UIP_IP_BUF->tcflow = 0;
    83b4:	7063      	strb	r3, [r4, #1]
  UIP_IP_BUF->flow = 0;
    83b6:	8063      	strh	r3, [r4, #2]
  UIP_IP_BUF->len[0] = 0;       /* length will not be more than 255 */
    83b8:	7123      	strb	r3, [r4, #4]
  UIP_IP_BUF->len[1] = UIP_ICMPH_LEN + UIP_ND6_NA_LEN + UIP_ND6_OPT_LLAO_LEN;
    83ba:	2328      	movs	r3, #40	; 0x28
    83bc:	7163      	strb	r3, [r4, #5]
  UIP_IP_BUF->proto = UIP_PROTO_ICMP6;
    83be:	3a26      	subs	r2, #38	; 0x26
    83c0:	71a2      	strb	r2, [r4, #6]
  UIP_IP_BUF->ttl = UIP_ND6_HOP_LIMIT;
    83c2:	32c5      	adds	r2, #197	; 0xc5
    83c4:	71e2      	strb	r2, [r4, #7]

  UIP_ICMP_BUF->type = ICMP6_NA;
    83c6:	3a77      	subs	r2, #119	; 0x77
    83c8:	54e2      	strb	r2, [r4, r3]
  UIP_ICMP_BUF->icode = 0;
    83ca:	3301      	adds	r3, #1
    83cc:	2200      	movs	r2, #0
    83ce:	54e2      	strb	r2, [r4, r3]

  UIP_ND6_NA_BUF->flagsreserved = flags;
    83d0:	22e0      	movs	r2, #224	; 0xe0
    83d2:	3303      	adds	r3, #3
    83d4:	54e2      	strb	r2, [r4, r3]
  memcpy(&UIP_ND6_NA_BUF->tgtipaddr, &addr->ipaddr, sizeof(uip_ipaddr_t));
    83d6:	1c20      	adds	r0, r4, #0
    83d8:	3030      	adds	r0, #48	; 0x30
    83da:	4b1d      	ldr	r3, [pc, #116]	; (8450 <ns_input+0x2e4>)
    83dc:	6819      	ldr	r1, [r3, #0]
    83de:	3101      	adds	r1, #1
    83e0:	3ad0      	subs	r2, #208	; 0xd0
    83e2:	4b19      	ldr	r3, [pc, #100]	; (8448 <ns_input+0x2dc>)
    83e4:	4798      	blx	r3

  create_llao(&uip_buf[uip_l2_l3_icmp_hdr_len + UIP_ND6_NA_LEN],
    83e6:	1c20      	adds	r0, r4, #0
    83e8:	3040      	adds	r0, #64	; 0x40
    83ea:	2102      	movs	r1, #2
    83ec:	4b1a      	ldr	r3, [pc, #104]	; (8458 <ns_input+0x2ec>)
    83ee:	4798      	blx	r3
              UIP_ND6_OPT_TLLAO);

  UIP_ICMP_BUF->icmpchksum = 0;
    83f0:	782b      	ldrb	r3, [r5, #0]
    83f2:	3328      	adds	r3, #40	; 0x28
    83f4:	191c      	adds	r4, r3, r4
    83f6:	2300      	movs	r3, #0
    83f8:	70a3      	strb	r3, [r4, #2]
    83fa:	70e3      	strb	r3, [r4, #3]
  UIP_ICMP_BUF->icmpchksum = ~uip_icmp6chksum();
    83fc:	4b17      	ldr	r3, [pc, #92]	; (845c <ns_input+0x2f0>)
    83fe:	4798      	blx	r3
    8400:	43c3      	mvns	r3, r0
    8402:	b29b      	uxth	r3, r3
    8404:	70a3      	strb	r3, [r4, #2]
    8406:	0a1b      	lsrs	r3, r3, #8
    8408:	70e3      	strb	r3, [r4, #3]

  uip_len =
    840a:	2250      	movs	r2, #80	; 0x50
    840c:	4b07      	ldr	r3, [pc, #28]	; (842c <ns_input+0x2c0>)
    840e:	801a      	strh	r2, [r3, #0]
  PRINTF(" from ");
  PRINT6ADDR(&UIP_IP_BUF->srcipaddr);
  PRINTF(" with target address ");
  PRINT6ADDR(&UIP_ND6_NA_BUF->tgtipaddr);
  PRINTF("\n\r");
  return;
    8410:	e002      	b.n	8418 <ns_input+0x2ac>

discard:
  uip_len = 0;
    8412:	2200      	movs	r2, #0
    8414:	4b05      	ldr	r3, [pc, #20]	; (842c <ns_input+0x2c0>)
    8416:	801a      	strh	r2, [r3, #0]
  return;
}
    8418:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    841a:	46c0      	nop			; (mov r8, r8)
    841c:	20002cd4 	.word	0x20002cd4
    8420:	20000b12 	.word	0x20000b12
    8424:	20000b04 	.word	0x20000b04
    8428:	20000b08 	.word	0x20000b08
    842c:	20002cc0 	.word	0x20002cc0
    8430:	20002cdc 	.word	0x20002cdc
    8434:	00006b65 	.word	0x00006b65
    8438:	20000b00 	.word	0x20000b00
    843c:	00006af1 	.word	0x00006af1
    8440:	00006b4d 	.word	0x00006b4d
    8444:	00010b11 	.word	0x00010b11
    8448:	00010b2f 	.word	0x00010b2f
    844c:	00007449 	.word	0x00007449
    8450:	20000b0c 	.word	0x20000b0c
    8454:	20002cec 	.word	0x20002cec
    8458:	00007fad 	.word	0x00007fad
    845c:	00008be1 	.word	0x00008be1

00008460 <na_input>:
 * If the NS was for DAD, it means DAD failed
 *
 */
static void
na_input(void)
{
    8460:	b5f0      	push	{r4, r5, r6, r7, lr}
    8462:	4657      	mov	r7, sl
    8464:	464e      	mov	r6, r9
    8466:	4645      	mov	r5, r8
    8468:	b4e0      	push	{r5, r6, r7}
    846a:	b082      	sub	sp, #8
  /* 
   * booleans. the three last one are not 0 or 1 but 0 or 0x80, 0x40, 0x20
   * but it works. Be careful though, do not use tests such as is_router == 1 
   */
  is_llchange = 0;
  is_router = ((UIP_ND6_NA_BUF->flagsreserved & UIP_ND6_NA_FLAG_ROUTER));
    846c:	4b85      	ldr	r3, [pc, #532]	; (8684 <na_input+0x224>)
    846e:	781b      	ldrb	r3, [r3, #0]
    8470:	1c1f      	adds	r7, r3, #0
    8472:	372c      	adds	r7, #44	; 0x2c
    8474:	4a84      	ldr	r2, [pc, #528]	; (8688 <na_input+0x228>)
    8476:	18b8      	adds	r0, r7, r2
    8478:	7804      	ldrb	r4, [r0, #0]
    ((UIP_ND6_NA_BUF->flagsreserved & UIP_ND6_NA_FLAG_SOLICITED));
  is_override =
    ((UIP_ND6_NA_BUF->flagsreserved & UIP_ND6_NA_FLAG_OVERRIDE));

#if UIP_CONF_IPV6_CHECKS
  if((UIP_IP_BUF->ttl != UIP_ND6_HOP_LIMIT) ||
    847a:	79d2      	ldrb	r2, [r2, #7]
    847c:	2aff      	cmp	r2, #255	; 0xff
    847e:	d000      	beq.n	8482 <na_input+0x22>
    8480:	e0e1      	b.n	8646 <na_input+0x1e6>
     (UIP_ICMP_BUF->icode != 0) ||
    8482:	3328      	adds	r3, #40	; 0x28
    8484:	4a80      	ldr	r2, [pc, #512]	; (8688 <na_input+0x228>)
    8486:	189b      	adds	r3, r3, r2
    ((UIP_ND6_NA_BUF->flagsreserved & UIP_ND6_NA_FLAG_SOLICITED));
  is_override =
    ((UIP_ND6_NA_BUF->flagsreserved & UIP_ND6_NA_FLAG_OVERRIDE));

#if UIP_CONF_IPV6_CHECKS
  if((UIP_IP_BUF->ttl != UIP_ND6_HOP_LIMIT) ||
    8488:	785b      	ldrb	r3, [r3, #1]
    848a:	2b00      	cmp	r3, #0
    848c:	d000      	beq.n	8490 <na_input+0x30>
    848e:	e0da      	b.n	8646 <na_input+0x1e6>
     (UIP_ICMP_BUF->icode != 0) ||
    8490:	7903      	ldrb	r3, [r0, #4]
    8492:	2bff      	cmp	r3, #255	; 0xff
    8494:	d100      	bne.n	8498 <na_input+0x38>
    8496:	e0d6      	b.n	8646 <na_input+0x1e6>
   * booleans. the three last one are not 0 or 1 but 0 or 0x80, 0x40, 0x20
   * but it works. Be careful though, do not use tests such as is_router == 1 
   */
  is_llchange = 0;
  is_router = ((UIP_ND6_NA_BUF->flagsreserved & UIP_ND6_NA_FLAG_ROUTER));
  is_solicited =
    8498:	2540      	movs	r5, #64	; 0x40
    849a:	4025      	ands	r5, r4
    849c:	46aa      	mov	sl, r5
    ((UIP_ND6_NA_BUF->flagsreserved & UIP_ND6_NA_FLAG_OVERRIDE));

#if UIP_CONF_IPV6_CHECKS
  if((UIP_IP_BUF->ttl != UIP_ND6_HOP_LIMIT) ||
     (UIP_ICMP_BUF->icode != 0) ||
     (uip_is_addr_mcast(&UIP_ND6_NA_BUF->tgtipaddr)) ||
    849e:	d003      	beq.n	84a8 <na_input+0x48>
     (is_solicited && uip_is_addr_mcast(&UIP_IP_BUF->destipaddr))) {
    84a0:	7e13      	ldrb	r3, [r2, #24]
    84a2:	2bff      	cmp	r3, #255	; 0xff
    84a4:	d100      	bne.n	84a8 <na_input+0x48>
    84a6:	e0ce      	b.n	8646 <na_input+0x1e6>
    goto discard;
  }
#endif /*UIP_CONF_IPV6_CHECKS */

  /* Options processing: we handle TLLAO, and must ignore others */
  nd6_opt_offset = UIP_ND6_NA_LEN;
    84a8:	2214      	movs	r2, #20
    84aa:	4b78      	ldr	r3, [pc, #480]	; (868c <na_input+0x22c>)
    84ac:	701a      	strb	r2, [r3, #0]
  nd6_opt_llao = NULL;
    84ae:	2200      	movs	r2, #0
    84b0:	4b77      	ldr	r3, [pc, #476]	; (8690 <na_input+0x230>)
    84b2:	601a      	str	r2, [r3, #0]
  while(uip_l3_icmp_hdr_len + nd6_opt_offset < uip_len) {
    84b4:	2114      	movs	r1, #20
    84b6:	1c3a      	adds	r2, r7, #0
    84b8:	3214      	adds	r2, #20
    84ba:	4b76      	ldr	r3, [pc, #472]	; (8694 <na_input+0x234>)
    84bc:	881b      	ldrh	r3, [r3, #0]
    84be:	469c      	mov	ip, r3
    84c0:	429a      	cmp	r2, r3
    84c2:	da26      	bge.n	8512 <na_input+0xb2>
#if UIP_CONF_IPV6_CHECKS
    if(UIP_ND6_OPT_HDR_BUF->len == 0) {
    84c4:	4b70      	ldr	r3, [pc, #448]	; (8688 <na_input+0x228>)
    84c6:	18d3      	adds	r3, r2, r3
    84c8:	785a      	ldrb	r2, [r3, #1]
    84ca:	2a00      	cmp	r2, #0
    84cc:	d100      	bne.n	84d0 <na_input+0x70>
    84ce:	e0ba      	b.n	8646 <na_input+0x1e6>
    84d0:	2200      	movs	r2, #0
    84d2:	9201      	str	r2, [sp, #4]
      break;
    default:
      PRINTF("ND option not supported in NA\n\r");
      break;
    }
    nd6_opt_offset += (UIP_ND6_OPT_HDR_BUF->len << 3);
    84d4:	4d6c      	ldr	r5, [pc, #432]	; (8688 <na_input+0x228>)
  /* Options processing: we handle TLLAO, and must ignore others */
  nd6_opt_offset = UIP_ND6_NA_LEN;
  nd6_opt_llao = NULL;
  while(uip_l3_icmp_hdr_len + nd6_opt_offset < uip_len) {
#if UIP_CONF_IPV6_CHECKS
    if(UIP_ND6_OPT_HDR_BUF->len == 0) {
    84d6:	1c2e      	adds	r6, r5, #0
    84d8:	e009      	b.n	84ee <na_input+0x8e>
    84da:	199b      	adds	r3, r3, r6
    84dc:	785a      	ldrb	r2, [r3, #1]
    84de:	2a00      	cmp	r2, #0
    84e0:	d105      	bne.n	84ee <na_input+0x8e>
    84e2:	4b6b      	ldr	r3, [pc, #428]	; (8690 <na_input+0x230>)
    84e4:	9a01      	ldr	r2, [sp, #4]
    84e6:	601a      	str	r2, [r3, #0]
    84e8:	4b68      	ldr	r3, [pc, #416]	; (868c <na_input+0x22c>)
    84ea:	7019      	strb	r1, [r3, #0]
    84ec:	e0ab      	b.n	8646 <na_input+0x1e6>
      PRINTF("NA received is bad\n\r");
      goto discard;
    }
#endif /*UIP_CONF_IPV6_CHECKS */
    switch (UIP_ND6_OPT_HDR_BUF->type) {
    84ee:	781a      	ldrb	r2, [r3, #0]
    84f0:	2a02      	cmp	r2, #2
    84f2:	d100      	bne.n	84f6 <na_input+0x96>
    case UIP_ND6_OPT_TLLAO:
      nd6_opt_llao = (uint8_t *)UIP_ND6_OPT_HDR_BUF;
    84f4:	9301      	str	r3, [sp, #4]
      break;
    default:
      PRINTF("ND option not supported in NA\n\r");
      break;
    }
    nd6_opt_offset += (UIP_ND6_OPT_HDR_BUF->len << 3);
    84f6:	187b      	adds	r3, r7, r1
    84f8:	195b      	adds	r3, r3, r5
    84fa:	785b      	ldrb	r3, [r3, #1]
    84fc:	00da      	lsls	r2, r3, #3
    84fe:	188b      	adds	r3, r1, r2
    8500:	b2d9      	uxtb	r1, r3
#endif /*UIP_CONF_IPV6_CHECKS */

  /* Options processing: we handle TLLAO, and must ignore others */
  nd6_opt_offset = UIP_ND6_NA_LEN;
  nd6_opt_llao = NULL;
  while(uip_l3_icmp_hdr_len + nd6_opt_offset < uip_len) {
    8502:	187b      	adds	r3, r7, r1
    8504:	4563      	cmp	r3, ip
    8506:	dbe8      	blt.n	84da <na_input+0x7a>
    8508:	4b61      	ldr	r3, [pc, #388]	; (8690 <na_input+0x230>)
    850a:	9a01      	ldr	r2, [sp, #4]
    850c:	601a      	str	r2, [r3, #0]
    850e:	4b5f      	ldr	r3, [pc, #380]	; (868c <na_input+0x22c>)
    8510:	7019      	strb	r1, [r3, #0]
      PRINTF("ND option not supported in NA\n\r");
      break;
    }
    nd6_opt_offset += (UIP_ND6_OPT_HDR_BUF->len << 3);
  }
  addr = uip_ds6_addr_lookup(&UIP_ND6_NA_BUF->tgtipaddr);
    8512:	3004      	adds	r0, #4
    8514:	4b60      	ldr	r3, [pc, #384]	; (8698 <na_input+0x238>)
    8516:	4798      	blx	r3
    8518:	4b60      	ldr	r3, [pc, #384]	; (869c <na_input+0x23c>)
    851a:	6018      	str	r0, [r3, #0]
  /* Message processing, including TLLAO if any */
  if(addr != NULL) {
    851c:	2800      	cmp	r0, #0
    851e:	d000      	beq.n	8522 <na_input+0xc2>
    8520:	e091      	b.n	8646 <na_input+0x1e6>
#endif /*UIP_ND6_DEF_MAXDADNS > 0 */
    PRINTF("NA received is bad\n\r");
    goto discard;
  } else {
    uip_lladdr_t *lladdr;
    nbr = uip_ds6_nbr_lookup(&UIP_ND6_NA_BUF->tgtipaddr);
    8522:	4b58      	ldr	r3, [pc, #352]	; (8684 <na_input+0x224>)
    8524:	781b      	ldrb	r3, [r3, #0]
    8526:	4858      	ldr	r0, [pc, #352]	; (8688 <na_input+0x228>)
    8528:	18c0      	adds	r0, r0, r3
    852a:	3030      	adds	r0, #48	; 0x30
    852c:	4b5c      	ldr	r3, [pc, #368]	; (86a0 <na_input+0x240>)
    852e:	4798      	blx	r3
    8530:	4e5c      	ldr	r6, [pc, #368]	; (86a4 <na_input+0x244>)
    8532:	6030      	str	r0, [r6, #0]
    lladdr = (uip_lladdr_t *)uip_ds6_nbr_get_ll(nbr);
    8534:	4b5c      	ldr	r3, [pc, #368]	; (86a8 <na_input+0x248>)
    8536:	4798      	blx	r3
    8538:	1c05      	adds	r5, r0, #0
    if(nbr == NULL) {
    853a:	6836      	ldr	r6, [r6, #0]
    853c:	2e00      	cmp	r6, #0
    853e:	d100      	bne.n	8542 <na_input+0xe2>
    8540:	e081      	b.n	8646 <na_input+0x1e6>
  /* 
   * booleans. the three last one are not 0 or 1 but 0 or 0x80, 0x40, 0x20
   * but it works. Be careful though, do not use tests such as is_router == 1 
   */
  is_llchange = 0;
  is_router = ((UIP_ND6_NA_BUF->flagsreserved & UIP_ND6_NA_FLAG_ROUTER));
    8542:	237f      	movs	r3, #127	; 0x7f
    8544:	1c22      	adds	r2, r4, #0
    8546:	439a      	bics	r2, r3
    8548:	4690      	mov	r8, r2
    nbr = uip_ds6_nbr_lookup(&UIP_ND6_NA_BUF->tgtipaddr);
    lladdr = (uip_lladdr_t *)uip_ds6_nbr_get_ll(nbr);
    if(nbr == NULL) {
      goto discard;
    }
    if(nd6_opt_llao != 0) {
    854a:	4b51      	ldr	r3, [pc, #324]	; (8690 <na_input+0x230>)
    854c:	681f      	ldr	r7, [r3, #0]
    854e:	2f00      	cmp	r7, #0
    8550:	d07d      	beq.n	864e <na_input+0x1ee>
      is_llchange =
        memcmp(&nd6_opt_llao[UIP_ND6_OPT_DATA_OFFSET], (void *)lladdr,
    8552:	1cbb      	adds	r3, r7, #2
    8554:	4699      	mov	r9, r3
    8556:	1c18      	adds	r0, r3, #0
    8558:	1c29      	adds	r1, r5, #0
    855a:	2208      	movs	r2, #8
    855c:	4b53      	ldr	r3, [pc, #332]	; (86ac <na_input+0x24c>)
    855e:	4798      	blx	r3
               UIP_LLADDR_LEN);
    }
    if(nbr->state == NBR_INCOMPLETE) {
    8560:	2322      	movs	r3, #34	; 0x22
    8562:	5cf3      	ldrb	r3, [r6, r3]
    8564:	2b00      	cmp	r3, #0
    8566:	d122      	bne.n	85ae <na_input+0x14e>
      if(nd6_opt_llao == NULL) {
        goto discard;
      }
      memcpy(lladdr, &nd6_opt_llao[UIP_ND6_OPT_DATA_OFFSET],
    8568:	1c28      	adds	r0, r5, #0
    856a:	4649      	mov	r1, r9
    856c:	2208      	movs	r2, #8
    856e:	4b50      	ldr	r3, [pc, #320]	; (86b0 <na_input+0x250>)
    8570:	4798      	blx	r3
	     UIP_LLADDR_LEN);
      if(is_solicited) {
    8572:	4653      	mov	r3, sl
    8574:	2b00      	cmp	r3, #0
    8576:	d011      	beq.n	859c <na_input+0x13c>
        nbr->state = NBR_REACHABLE;
    8578:	2201      	movs	r2, #1
    857a:	2322      	movs	r3, #34	; 0x22
    857c:	54f2      	strb	r2, [r6, r3]
        nbr->nscount = 0;
    857e:	2200      	movs	r2, #0
    8580:	3b02      	subs	r3, #2
    8582:	54f2      	strb	r2, [r6, r3]

        /* reachable time is stored in ms */
        stimer_set(&(nbr->reachable), uip_ds6_if.reachable_time / 1000);
    8584:	3610      	adds	r6, #16
    8586:	4b4b      	ldr	r3, [pc, #300]	; (86b4 <na_input+0x254>)
    8588:	68d8      	ldr	r0, [r3, #12]
    858a:	21fa      	movs	r1, #250	; 0xfa
    858c:	0089      	lsls	r1, r1, #2
    858e:	4b4a      	ldr	r3, [pc, #296]	; (86b8 <na_input+0x258>)
    8590:	4798      	blx	r3
    8592:	1c01      	adds	r1, r0, #0
    8594:	1c30      	adds	r0, r6, #0
    8596:	4b49      	ldr	r3, [pc, #292]	; (86bc <na_input+0x25c>)
    8598:	4798      	blx	r3
    859a:	e002      	b.n	85a2 <na_input+0x142>

      } else {
        nbr->state = NBR_STALE;
    859c:	2202      	movs	r2, #2
    859e:	2322      	movs	r3, #34	; 0x22
    85a0:	54f2      	strb	r2, [r6, r3]
      }
      nbr->isrouter = is_router;
    85a2:	4b40      	ldr	r3, [pc, #256]	; (86a4 <na_input+0x244>)
    85a4:	681a      	ldr	r2, [r3, #0]
    85a6:	2321      	movs	r3, #33	; 0x21
    85a8:	4641      	mov	r1, r8
    85aa:	54d1      	strb	r1, [r2, r3]
    85ac:	e04b      	b.n	8646 <na_input+0x1e6>
    lladdr = (uip_lladdr_t *)uip_ds6_nbr_get_ll(nbr);
    if(nbr == NULL) {
      goto discard;
    }
    if(nd6_opt_llao != 0) {
      is_llchange =
    85ae:	b2c2      	uxtb	r2, r0
    85b0:	4691      	mov	r9, r2
      } else {
        nbr->state = NBR_STALE;
      }
      nbr->isrouter = is_router;
    } else {
      if(!is_override && is_llchange) {
    85b2:	06a2      	lsls	r2, r4, #26
    85b4:	d40f      	bmi.n	85d6 <na_input+0x176>
    85b6:	464a      	mov	r2, r9
    85b8:	2a00      	cmp	r2, #0
    85ba:	d005      	beq.n	85c8 <na_input+0x168>
        if(nbr->state == NBR_REACHABLE) {
    85bc:	2b01      	cmp	r3, #1
    85be:	d142      	bne.n	8646 <na_input+0x1e6>
          nbr->state = NBR_STALE;
    85c0:	2202      	movs	r2, #2
    85c2:	3321      	adds	r3, #33	; 0x21
    85c4:	54f2      	strb	r2, [r6, r3]
    85c6:	e03e      	b.n	8646 <na_input+0x1e6>
        }
        goto discard;
      } else {
        if(is_override || (!is_override && nd6_opt_llao != 0 && !is_llchange)
    85c8:	2f00      	cmp	r7, #0
    85ca:	d14c      	bne.n	8666 <na_input+0x206>
    85cc:	e00c      	b.n	85e8 <na_input+0x188>
           || nd6_opt_llao == 0) {
          if(nd6_opt_llao != 0) {
    85ce:	2f00      	cmp	r7, #0
    85d0:	d042      	beq.n	8658 <na_input+0x1f8>

  /* 
   * booleans. the three last one are not 0 or 1 but 0 or 0x80, 0x40, 0x20
   * but it works. Be careful though, do not use tests such as is_router == 1 
   */
  is_llchange = 0;
    85d2:	2300      	movs	r3, #0
    85d4:	4699      	mov	r9, r3
        goto discard;
      } else {
        if(is_override || (!is_override && nd6_opt_llao != 0 && !is_llchange)
           || nd6_opt_llao == 0) {
          if(nd6_opt_llao != 0) {
            memcpy(lladdr, &nd6_opt_llao[UIP_ND6_OPT_DATA_OFFSET],
    85d6:	1cb9      	adds	r1, r7, #2
    85d8:	1c28      	adds	r0, r5, #0
    85da:	2208      	movs	r2, #8
    85dc:	4b34      	ldr	r3, [pc, #208]	; (86b0 <na_input+0x250>)
    85de:	4798      	blx	r3
		   UIP_LLADDR_LEN);
          }
          if(is_solicited) {
    85e0:	4653      	mov	r3, sl
    85e2:	2b00      	cmp	r3, #0
    85e4:	d012      	beq.n	860c <na_input+0x1ac>
    85e6:	e002      	b.n	85ee <na_input+0x18e>
    85e8:	4653      	mov	r3, sl
    85ea:	2b00      	cmp	r3, #0
    85ec:	d014      	beq.n	8618 <na_input+0x1b8>
            nbr->state = NBR_REACHABLE;
    85ee:	2201      	movs	r2, #1
    85f0:	2322      	movs	r3, #34	; 0x22
    85f2:	54f2      	strb	r2, [r6, r3]
            /* reachable time is stored in ms */
            stimer_set(&(nbr->reachable), uip_ds6_if.reachable_time / 1000);
    85f4:	3610      	adds	r6, #16
    85f6:	4b2f      	ldr	r3, [pc, #188]	; (86b4 <na_input+0x254>)
    85f8:	68d8      	ldr	r0, [r3, #12]
    85fa:	21fa      	movs	r1, #250	; 0xfa
    85fc:	0089      	lsls	r1, r1, #2
    85fe:	4b2e      	ldr	r3, [pc, #184]	; (86b8 <na_input+0x258>)
    8600:	4798      	blx	r3
    8602:	1c01      	adds	r1, r0, #0
    8604:	1c30      	adds	r0, r6, #0
    8606:	4b2d      	ldr	r3, [pc, #180]	; (86bc <na_input+0x25c>)
    8608:	4798      	blx	r3
    860a:	e005      	b.n	8618 <na_input+0x1b8>
          } else {
            if(nd6_opt_llao != 0 && is_llchange) {
    860c:	464b      	mov	r3, r9
    860e:	2b00      	cmp	r3, #0
    8610:	d002      	beq.n	8618 <na_input+0x1b8>
              nbr->state = NBR_STALE;
    8612:	2202      	movs	r2, #2
    8614:	2322      	movs	r3, #34	; 0x22
    8616:	54f2      	strb	r2, [r6, r3]
            }
          }
        }
      }
      if(nbr->isrouter && !is_router) {
    8618:	4b22      	ldr	r3, [pc, #136]	; (86a4 <na_input+0x244>)
    861a:	681a      	ldr	r2, [r3, #0]
    861c:	2321      	movs	r3, #33	; 0x21
    861e:	5cd3      	ldrb	r3, [r2, r3]
    8620:	2b00      	cmp	r3, #0
    8622:	d00b      	beq.n	863c <na_input+0x1dc>
    8624:	4643      	mov	r3, r8
    8626:	2b00      	cmp	r3, #0
    8628:	d108      	bne.n	863c <na_input+0x1dc>
        defrt = uip_ds6_defrt_lookup(&UIP_IP_BUF->srcipaddr);
    862a:	4825      	ldr	r0, [pc, #148]	; (86c0 <na_input+0x260>)
    862c:	4b25      	ldr	r3, [pc, #148]	; (86c4 <na_input+0x264>)
    862e:	4798      	blx	r3
    8630:	4b25      	ldr	r3, [pc, #148]	; (86c8 <na_input+0x268>)
    8632:	6018      	str	r0, [r3, #0]
        if(defrt != NULL) {
    8634:	2800      	cmp	r0, #0
    8636:	d001      	beq.n	863c <na_input+0x1dc>
          uip_ds6_defrt_rm(defrt);
    8638:	4b24      	ldr	r3, [pc, #144]	; (86cc <na_input+0x26c>)
    863a:	4798      	blx	r3
        }
      }
      nbr->isrouter = is_router;
    863c:	4b19      	ldr	r3, [pc, #100]	; (86a4 <na_input+0x244>)
    863e:	681a      	ldr	r2, [r3, #0]
    8640:	2321      	movs	r3, #33	; 0x21
    8642:	4641      	mov	r1, r8
    8644:	54d1      	strb	r1, [r2, r3]
  }
  
#endif /*UIP_CONF_IPV6_QUEUE_PKT */

discard:
  uip_len = 0;
    8646:	2200      	movs	r2, #0
    8648:	4b12      	ldr	r3, [pc, #72]	; (8694 <na_input+0x234>)
    864a:	801a      	strh	r2, [r3, #0]
    864c:	e014      	b.n	8678 <na_input+0x218>
    if(nd6_opt_llao != 0) {
      is_llchange =
        memcmp(&nd6_opt_llao[UIP_ND6_OPT_DATA_OFFSET], (void *)lladdr,
               UIP_LLADDR_LEN);
    }
    if(nbr->state == NBR_INCOMPLETE) {
    864e:	2322      	movs	r3, #34	; 0x22
    8650:	5cf3      	ldrb	r3, [r6, r3]
    8652:	2b00      	cmp	r3, #0
    8654:	d0f7      	beq.n	8646 <na_input+0x1e6>
    8656:	e003      	b.n	8660 <na_input+0x200>
           || nd6_opt_llao == 0) {
          if(nd6_opt_llao != 0) {
            memcpy(lladdr, &nd6_opt_llao[UIP_ND6_OPT_DATA_OFFSET],
		   UIP_LLADDR_LEN);
          }
          if(is_solicited) {
    8658:	4653      	mov	r3, sl
    865a:	2b00      	cmp	r3, #0
    865c:	d0dc      	beq.n	8618 <na_input+0x1b8>
    865e:	e7c6      	b.n	85ee <na_input+0x18e>
      } else {
        nbr->state = NBR_STALE;
      }
      nbr->isrouter = is_router;
    } else {
      if(!is_override && is_llchange) {
    8660:	06a3      	lsls	r3, r4, #26
    8662:	d5c1      	bpl.n	85e8 <na_input+0x188>
    8664:	e7b3      	b.n	85ce <na_input+0x16e>
        goto discard;
      } else {
        if(is_override || (!is_override && nd6_opt_llao != 0 && !is_llchange)
           || nd6_opt_llao == 0) {
          if(nd6_opt_llao != 0) {
            memcpy(lladdr, &nd6_opt_llao[UIP_ND6_OPT_DATA_OFFSET],
    8666:	1cb9      	adds	r1, r7, #2
    8668:	1c28      	adds	r0, r5, #0
    866a:	2208      	movs	r2, #8
    866c:	4b10      	ldr	r3, [pc, #64]	; (86b0 <na_input+0x250>)
    866e:	4798      	blx	r3
		   UIP_LLADDR_LEN);
          }
          if(is_solicited) {
    8670:	4653      	mov	r3, sl
    8672:	2b00      	cmp	r3, #0
    8674:	d0d0      	beq.n	8618 <na_input+0x1b8>
    8676:	e7ba      	b.n	85ee <na_input+0x18e>
#endif /*UIP_CONF_IPV6_QUEUE_PKT */

discard:
  uip_len = 0;
  return;
}
    8678:	b002      	add	sp, #8
    867a:	bc1c      	pop	{r2, r3, r4}
    867c:	4690      	mov	r8, r2
    867e:	4699      	mov	r9, r3
    8680:	46a2      	mov	sl, r4
    8682:	bdf0      	pop	{r4, r5, r6, r7, pc}
    8684:	20000b12 	.word	0x20000b12
    8688:	20002cd4 	.word	0x20002cd4
    868c:	20000b08 	.word	0x20000b08
    8690:	20000b04 	.word	0x20000b04
    8694:	20002cc0 	.word	0x20002cc0
    8698:	00007449 	.word	0x00007449
    869c:	20000b0c 	.word	0x20000b0c
    86a0:	00006b65 	.word	0x00006b65
    86a4:	20000b00 	.word	0x20000b00
    86a8:	00006b4d 	.word	0x00006b4d
    86ac:	00010b11 	.word	0x00010b11
    86b0:	00010b2f 	.word	0x00010b2f
    86b4:	20002b68 	.word	0x20002b68
    86b8:	0001076d 	.word	0x0001076d
    86bc:	0000ed0d 	.word	0x0000ed0d
    86c0:	20002cdc 	.word	0x20002cdc
    86c4:	00007189 	.word	0x00007189
    86c8:	20000afc 	.word	0x20000afc
    86cc:	0000712d 	.word	0x0000712d

000086d0 <uip_nd6_ns_output>:


/*------------------------------------------------------------------*/
void
uip_nd6_ns_output(uip_ipaddr_t * src, uip_ipaddr_t * dest, uip_ipaddr_t * tgt)
{
    86d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    86d2:	1c05      	adds	r5, r0, #0
    86d4:	1c14      	adds	r4, r2, #0
  uip_ext_len = 0;
    86d6:	2200      	movs	r2, #0
    86d8:	4b53      	ldr	r3, [pc, #332]	; (8828 <uip_nd6_ns_output+0x158>)
    86da:	701a      	strb	r2, [r3, #0]
  UIP_IP_BUF->vtc = 0x60;
    86dc:	4b53      	ldr	r3, [pc, #332]	; (882c <uip_nd6_ns_output+0x15c>)
    86de:	2060      	movs	r0, #96	; 0x60
    86e0:	7018      	strb	r0, [r3, #0]
  UIP_IP_BUF->tcflow = 0;
    86e2:	705a      	strb	r2, [r3, #1]
  UIP_IP_BUF->flow = 0;
    86e4:	805a      	strh	r2, [r3, #2]
  UIP_IP_BUF->proto = UIP_PROTO_ICMP6;
    86e6:	323a      	adds	r2, #58	; 0x3a
    86e8:	719a      	strb	r2, [r3, #6]
  UIP_IP_BUF->ttl = UIP_ND6_HOP_LIMIT;
    86ea:	32c5      	adds	r2, #197	; 0xc5
    86ec:	71da      	strb	r2, [r3, #7]

  if(dest == NULL) {
    86ee:	2900      	cmp	r1, #0
    86f0:	d119      	bne.n	8726 <uip_nd6_ns_output+0x56>
    uip_create_solicited_node(tgt, &UIP_IP_BUF->destipaddr);
    86f2:	31ff      	adds	r1, #255	; 0xff
    86f4:	7619      	strb	r1, [r3, #24]
    86f6:	3afd      	subs	r2, #253	; 0xfd
    86f8:	765a      	strb	r2, [r3, #25]
    86fa:	2200      	movs	r2, #0
    86fc:	835a      	strh	r2, [r3, #26]
    86fe:	839a      	strh	r2, [r3, #28]
    8700:	83da      	strh	r2, [r3, #30]
    8702:	841a      	strh	r2, [r3, #32]
    8704:	3222      	adds	r2, #34	; 0x22
    8706:	2000      	movs	r0, #0
    8708:	5498      	strb	r0, [r3, r2]
    870a:	2001      	movs	r0, #1
    870c:	3201      	adds	r2, #1
    870e:	5498      	strb	r0, [r3, r2]
    8710:	3201      	adds	r2, #1
    8712:	5499      	strb	r1, [r3, r2]
    8714:	7b61      	ldrb	r1, [r4, #13]
    8716:	3201      	adds	r2, #1
    8718:	5499      	strb	r1, [r3, r2]
    871a:	7ba1      	ldrb	r1, [r4, #14]
    871c:	7be2      	ldrb	r2, [r4, #15]
    871e:	0212      	lsls	r2, r2, #8
    8720:	430a      	orrs	r2, r1
    8722:	84da      	strh	r2, [r3, #38]	; 0x26
    8724:	e004      	b.n	8730 <uip_nd6_ns_output+0x60>
  } else {
    uip_ipaddr_copy(&UIP_IP_BUF->destipaddr, dest);
    8726:	4841      	ldr	r0, [pc, #260]	; (882c <uip_nd6_ns_output+0x15c>)
    8728:	3018      	adds	r0, #24
    872a:	2210      	movs	r2, #16
    872c:	4b40      	ldr	r3, [pc, #256]	; (8830 <uip_nd6_ns_output+0x160>)
    872e:	4798      	blx	r3
  }
  UIP_ICMP_BUF->type = ICMP6_NS;
    8730:	4b3d      	ldr	r3, [pc, #244]	; (8828 <uip_nd6_ns_output+0x158>)
    8732:	7818      	ldrb	r0, [r3, #0]
    8734:	1c03      	adds	r3, r0, #0
    8736:	3328      	adds	r3, #40	; 0x28
    8738:	4e3c      	ldr	r6, [pc, #240]	; (882c <uip_nd6_ns_output+0x15c>)
    873a:	199b      	adds	r3, r3, r6
    873c:	2287      	movs	r2, #135	; 0x87
    873e:	701a      	strb	r2, [r3, #0]
  UIP_ICMP_BUF->icode = 0;
    8740:	2700      	movs	r7, #0
    8742:	705f      	strb	r7, [r3, #1]
  UIP_ND6_NS_BUF->reserved = 0;
    8744:	302c      	adds	r0, #44	; 0x2c
    8746:	1980      	adds	r0, r0, r6
    8748:	2300      	movs	r3, #0
    874a:	7003      	strb	r3, [r0, #0]
    874c:	7043      	strb	r3, [r0, #1]
    874e:	7083      	strb	r3, [r0, #2]
    8750:	70c3      	strb	r3, [r0, #3]
  uip_ipaddr_copy((uip_ipaddr_t *) &UIP_ND6_NS_BUF->tgtipaddr, tgt);
    8752:	3004      	adds	r0, #4
    8754:	1c21      	adds	r1, r4, #0
    8756:	3a77      	subs	r2, #119	; 0x77
    8758:	4b35      	ldr	r3, [pc, #212]	; (8830 <uip_nd6_ns_output+0x160>)
    875a:	4798      	blx	r3
  UIP_IP_BUF->len[0] = 0;       /* length will not be more than 255 */
    875c:	7137      	strb	r7, [r6, #4]
  /*
   * check if we add a SLLAO option: for DAD, MUST NOT, for NUD, MAY
   * (here yes), for Address resolution , MUST 
   */
  if(!(uip_ds6_is_my_addr(tgt))) {
    875e:	1c20      	adds	r0, r4, #0
    8760:	4b34      	ldr	r3, [pc, #208]	; (8834 <uip_nd6_ns_output+0x164>)
    8762:	4798      	blx	r3
    8764:	2800      	cmp	r0, #0
    8766:	d13f      	bne.n	87e8 <uip_nd6_ns_output+0x118>
    if(src != NULL) {
    8768:	2d00      	cmp	r5, #0
    876a:	d006      	beq.n	877a <uip_nd6_ns_output+0xaa>
      uip_ipaddr_copy(&UIP_IP_BUF->srcipaddr, src);
    876c:	482f      	ldr	r0, [pc, #188]	; (882c <uip_nd6_ns_output+0x15c>)
    876e:	3008      	adds	r0, #8
    8770:	1c29      	adds	r1, r5, #0
    8772:	2210      	movs	r2, #16
    8774:	4b2e      	ldr	r3, [pc, #184]	; (8830 <uip_nd6_ns_output+0x160>)
    8776:	4798      	blx	r3
    8778:	e004      	b.n	8784 <uip_nd6_ns_output+0xb4>
    } else {
      uip_ds6_select_src(&UIP_IP_BUF->srcipaddr, &UIP_IP_BUF->destipaddr);
    877a:	482f      	ldr	r0, [pc, #188]	; (8838 <uip_nd6_ns_output+0x168>)
    877c:	1c01      	adds	r1, r0, #0
    877e:	3110      	adds	r1, #16
    8780:	4b2e      	ldr	r3, [pc, #184]	; (883c <uip_nd6_ns_output+0x16c>)
    8782:	4798      	blx	r3
    }
    if (uip_is_addr_unspecified(&UIP_IP_BUF->srcipaddr)) {
    8784:	4b29      	ldr	r3, [pc, #164]	; (882c <uip_nd6_ns_output+0x15c>)
    8786:	891b      	ldrh	r3, [r3, #8]
    8788:	2b00      	cmp	r3, #0
    878a:	d11f      	bne.n	87cc <uip_nd6_ns_output+0xfc>
    878c:	4b27      	ldr	r3, [pc, #156]	; (882c <uip_nd6_ns_output+0x15c>)
    878e:	895b      	ldrh	r3, [r3, #10]
    8790:	2b00      	cmp	r3, #0
    8792:	d11b      	bne.n	87cc <uip_nd6_ns_output+0xfc>
    8794:	4b25      	ldr	r3, [pc, #148]	; (882c <uip_nd6_ns_output+0x15c>)
    8796:	899b      	ldrh	r3, [r3, #12]
    8798:	2b00      	cmp	r3, #0
    879a:	d117      	bne.n	87cc <uip_nd6_ns_output+0xfc>
    879c:	4b23      	ldr	r3, [pc, #140]	; (882c <uip_nd6_ns_output+0x15c>)
    879e:	89db      	ldrh	r3, [r3, #14]
    87a0:	2b00      	cmp	r3, #0
    87a2:	d113      	bne.n	87cc <uip_nd6_ns_output+0xfc>
    87a4:	4b21      	ldr	r3, [pc, #132]	; (882c <uip_nd6_ns_output+0x15c>)
    87a6:	8a1b      	ldrh	r3, [r3, #16]
    87a8:	2b00      	cmp	r3, #0
    87aa:	d10f      	bne.n	87cc <uip_nd6_ns_output+0xfc>
    87ac:	4b1f      	ldr	r3, [pc, #124]	; (882c <uip_nd6_ns_output+0x15c>)
    87ae:	8a5b      	ldrh	r3, [r3, #18]
    87b0:	2b00      	cmp	r3, #0
    87b2:	d10b      	bne.n	87cc <uip_nd6_ns_output+0xfc>
    87b4:	4b1d      	ldr	r3, [pc, #116]	; (882c <uip_nd6_ns_output+0x15c>)
    87b6:	8a9b      	ldrh	r3, [r3, #20]
    87b8:	2b00      	cmp	r3, #0
    87ba:	d107      	bne.n	87cc <uip_nd6_ns_output+0xfc>
    87bc:	4b1b      	ldr	r3, [pc, #108]	; (882c <uip_nd6_ns_output+0x15c>)
    87be:	8adb      	ldrh	r3, [r3, #22]
    87c0:	2b00      	cmp	r3, #0
    87c2:	d103      	bne.n	87cc <uip_nd6_ns_output+0xfc>
      PRINTF("Dropping NS due to no suitable source address\n\r");
      uip_len = 0;
    87c4:	2200      	movs	r2, #0
    87c6:	4b1e      	ldr	r3, [pc, #120]	; (8840 <uip_nd6_ns_output+0x170>)
    87c8:	801a      	strh	r2, [r3, #0]
      return;
    87ca:	e02b      	b.n	8824 <uip_nd6_ns_output+0x154>
    }
    UIP_IP_BUF->len[1] =
    87cc:	4b17      	ldr	r3, [pc, #92]	; (882c <uip_nd6_ns_output+0x15c>)
    87ce:	2228      	movs	r2, #40	; 0x28
    87d0:	715a      	strb	r2, [r3, #5]
      UIP_ICMPH_LEN + UIP_ND6_NS_LEN + UIP_ND6_OPT_LLAO_LEN;

    create_llao(&uip_buf[uip_l2_l3_icmp_hdr_len + UIP_ND6_NS_LEN],
    87d2:	4a15      	ldr	r2, [pc, #84]	; (8828 <uip_nd6_ns_output+0x158>)
    87d4:	7810      	ldrb	r0, [r2, #0]
    87d6:	3040      	adds	r0, #64	; 0x40
    87d8:	18c0      	adds	r0, r0, r3
    87da:	2101      	movs	r1, #1
    87dc:	4b19      	ldr	r3, [pc, #100]	; (8844 <uip_nd6_ns_output+0x174>)
    87de:	4798      	blx	r3
		UIP_ND6_OPT_SLLAO);

    uip_len =
    87e0:	2250      	movs	r2, #80	; 0x50
    87e2:	4b17      	ldr	r3, [pc, #92]	; (8840 <uip_nd6_ns_output+0x170>)
    87e4:	801a      	strh	r2, [r3, #0]
    87e6:	e00e      	b.n	8806 <uip_nd6_ns_output+0x136>
      UIP_IPH_LEN + UIP_ICMPH_LEN + UIP_ND6_NS_LEN + UIP_ND6_OPT_LLAO_LEN;
  } else {
    uip_create_unspecified(&UIP_IP_BUF->srcipaddr);
    87e8:	4b10      	ldr	r3, [pc, #64]	; (882c <uip_nd6_ns_output+0x15c>)
    87ea:	2200      	movs	r2, #0
    87ec:	811a      	strh	r2, [r3, #8]
    87ee:	815a      	strh	r2, [r3, #10]
    87f0:	819a      	strh	r2, [r3, #12]
    87f2:	81da      	strh	r2, [r3, #14]
    87f4:	821a      	strh	r2, [r3, #16]
    87f6:	825a      	strh	r2, [r3, #18]
    87f8:	829a      	strh	r2, [r3, #20]
    87fa:	82da      	strh	r2, [r3, #22]
    UIP_IP_BUF->len[1] = UIP_ICMPH_LEN + UIP_ND6_NS_LEN;
    87fc:	3218      	adds	r2, #24
    87fe:	715a      	strb	r2, [r3, #5]
    uip_len = UIP_IPH_LEN + UIP_ICMPH_LEN + UIP_ND6_NS_LEN;
    8800:	3228      	adds	r2, #40	; 0x28
    8802:	4b0f      	ldr	r3, [pc, #60]	; (8840 <uip_nd6_ns_output+0x170>)
    8804:	801a      	strh	r2, [r3, #0]
  }

  UIP_ICMP_BUF->icmpchksum = 0;
    8806:	4b08      	ldr	r3, [pc, #32]	; (8828 <uip_nd6_ns_output+0x158>)
    8808:	781c      	ldrb	r4, [r3, #0]
    880a:	3428      	adds	r4, #40	; 0x28
    880c:	4b07      	ldr	r3, [pc, #28]	; (882c <uip_nd6_ns_output+0x15c>)
    880e:	18e4      	adds	r4, r4, r3
    8810:	2300      	movs	r3, #0
    8812:	70a3      	strb	r3, [r4, #2]
    8814:	70e3      	strb	r3, [r4, #3]
  UIP_ICMP_BUF->icmpchksum = ~uip_icmp6chksum();
    8816:	4b0c      	ldr	r3, [pc, #48]	; (8848 <uip_nd6_ns_output+0x178>)
    8818:	4798      	blx	r3
    881a:	43c0      	mvns	r0, r0
    881c:	b280      	uxth	r0, r0
    881e:	70a0      	strb	r0, [r4, #2]
    8820:	0a00      	lsrs	r0, r0, #8
    8822:	70e0      	strb	r0, [r4, #3]
  PRINT6ADDR(&UIP_IP_BUF->srcipaddr);
  PRINTF("with target address");
  PRINT6ADDR(tgt);
  PRINTF("\n\r");
  return;
}
    8824:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    8826:	46c0      	nop			; (mov r8, r8)
    8828:	20000b12 	.word	0x20000b12
    882c:	20002cd4 	.word	0x20002cd4
    8830:	00010b2f 	.word	0x00010b2f
    8834:	00007449 	.word	0x00007449
    8838:	20002cdc 	.word	0x20002cdc
    883c:	0000771d 	.word	0x0000771d
    8840:	20002cc0 	.word	0x20002cc0
    8844:	00007fad 	.word	0x00007fad
    8848:	00008be1 	.word	0x00008be1

0000884c <uip_nd6_ra_output>:
}

/*---------------------------------------------------------------------------*/
void
uip_nd6_ra_output(uip_ipaddr_t * dest)
{
    884c:	b5f0      	push	{r4, r5, r6, r7, lr}
    884e:	4647      	mov	r7, r8
    8850:	b480      	push	{r7}
    8852:	1c01      	adds	r1, r0, #0

  UIP_IP_BUF->vtc = 0x60;
    8854:	4b45      	ldr	r3, [pc, #276]	; (896c <uip_nd6_ra_output+0x120>)
    8856:	2260      	movs	r2, #96	; 0x60
    8858:	701a      	strb	r2, [r3, #0]
  UIP_IP_BUF->tcflow = 0;
    885a:	2200      	movs	r2, #0
    885c:	705a      	strb	r2, [r3, #1]
  UIP_IP_BUF->flow = 0;
    885e:	805a      	strh	r2, [r3, #2]
  UIP_IP_BUF->proto = UIP_PROTO_ICMP6;
    8860:	323a      	adds	r2, #58	; 0x3a
    8862:	719a      	strb	r2, [r3, #6]
  UIP_IP_BUF->ttl = UIP_ND6_HOP_LIMIT;
    8864:	32c5      	adds	r2, #197	; 0xc5
    8866:	71da      	strb	r2, [r3, #7]

  if(dest == NULL) {
    8868:	2800      	cmp	r0, #0
    886a:	d10c      	bne.n	8886 <uip_nd6_ra_output+0x3a>
    uip_create_linklocal_allnodes_mcast(&UIP_IP_BUF->destipaddr);
    886c:	4a40      	ldr	r2, [pc, #256]	; (8970 <uip_nd6_ra_output+0x124>)
    886e:	831a      	strh	r2, [r3, #24]
    8870:	2200      	movs	r2, #0
    8872:	835a      	strh	r2, [r3, #26]
    8874:	839a      	strh	r2, [r3, #28]
    8876:	83da      	strh	r2, [r3, #30]
    8878:	841a      	strh	r2, [r3, #32]
    887a:	845a      	strh	r2, [r3, #34]	; 0x22
    887c:	849a      	strh	r2, [r3, #36]	; 0x24
    887e:	3201      	adds	r2, #1
    8880:	32ff      	adds	r2, #255	; 0xff
    8882:	84da      	strh	r2, [r3, #38]	; 0x26
    8884:	e004      	b.n	8890 <uip_nd6_ra_output+0x44>
  } else {
    /* For sollicited RA */
    uip_ipaddr_copy(&UIP_IP_BUF->destipaddr, dest);
    8886:	4839      	ldr	r0, [pc, #228]	; (896c <uip_nd6_ra_output+0x120>)
    8888:	3018      	adds	r0, #24
    888a:	2210      	movs	r2, #16
    888c:	4b39      	ldr	r3, [pc, #228]	; (8974 <uip_nd6_ra_output+0x128>)
    888e:	4798      	blx	r3
  }
  uip_ds6_select_src(&UIP_IP_BUF->srcipaddr, &UIP_IP_BUF->destipaddr);
    8890:	4c39      	ldr	r4, [pc, #228]	; (8978 <uip_nd6_ra_output+0x12c>)
    8892:	1c21      	adds	r1, r4, #0
    8894:	3110      	adds	r1, #16
    8896:	1c20      	adds	r0, r4, #0
    8898:	4b38      	ldr	r3, [pc, #224]	; (897c <uip_nd6_ra_output+0x130>)
    889a:	4798      	blx	r3

  UIP_ICMP_BUF->type = ICMP6_RA;
    889c:	4e38      	ldr	r6, [pc, #224]	; (8980 <uip_nd6_ra_output+0x134>)
    889e:	7835      	ldrb	r5, [r6, #0]
    88a0:	1c2b      	adds	r3, r5, #0
    88a2:	3328      	adds	r3, #40	; 0x28
    88a4:	3c08      	subs	r4, #8
    88a6:	191b      	adds	r3, r3, r4
    88a8:	2286      	movs	r2, #134	; 0x86
    88aa:	701a      	strb	r2, [r3, #0]
  UIP_ICMP_BUF->icode = 0;
    88ac:	2200      	movs	r2, #0
    88ae:	705a      	strb	r2, [r3, #1]

  UIP_ND6_RA_BUF->cur_ttl = uip_ds6_if.cur_hop_limit;
    88b0:	352c      	adds	r5, #44	; 0x2c
    88b2:	192d      	adds	r5, r5, r4
    88b4:	4b33      	ldr	r3, [pc, #204]	; (8984 <uip_nd6_ra_output+0x138>)
    88b6:	791b      	ldrb	r3, [r3, #4]
    88b8:	702b      	strb	r3, [r5, #0]

  UIP_ND6_RA_BUF->flags_reserved =
    88ba:	706a      	strb	r2, [r5, #1]
    (UIP_ND6_M_FLAG << 7) | (UIP_ND6_O_FLAG << 6);

  UIP_ND6_RA_BUF->router_lifetime = uip_htons(UIP_ND6_ROUTER_LIFETIME);
    88bc:	20e1      	movs	r0, #225	; 0xe1
    88be:	00c0      	lsls	r0, r0, #3
    88c0:	4b31      	ldr	r3, [pc, #196]	; (8988 <uip_nd6_ra_output+0x13c>)
    88c2:	4798      	blx	r3
    88c4:	70a8      	strb	r0, [r5, #2]
    88c6:	0a00      	lsrs	r0, r0, #8
    88c8:	70e8      	strb	r0, [r5, #3]
  //UIP_ND6_RA_BUF->reachable_time = uip_htonl(uip_ds6_if.reachable_time);
  //UIP_ND6_RA_BUF->retrans_timer = uip_htonl(uip_ds6_if.retrans_timer);
  UIP_ND6_RA_BUF->reachable_time = 0;
    88ca:	7830      	ldrb	r0, [r6, #0]
    88cc:	1c03      	adds	r3, r0, #0
    88ce:	332c      	adds	r3, #44	; 0x2c
    88d0:	191b      	adds	r3, r3, r4
    88d2:	2200      	movs	r2, #0
    88d4:	711a      	strb	r2, [r3, #4]
    88d6:	715a      	strb	r2, [r3, #5]
    88d8:	719a      	strb	r2, [r3, #6]
    88da:	71da      	strb	r2, [r3, #7]
  UIP_ND6_RA_BUF->retrans_timer = 0;
    88dc:	721a      	strb	r2, [r3, #8]
    88de:	725a      	strb	r2, [r3, #9]
    88e0:	729a      	strb	r2, [r3, #10]
    88e2:	72da      	strb	r2, [r3, #11]

  uip_len = UIP_IPH_LEN + UIP_ICMPH_LEN + UIP_ND6_RA_LEN;
    88e4:	4f29      	ldr	r7, [pc, #164]	; (898c <uip_nd6_ra_output+0x140>)
    88e6:	2338      	movs	r3, #56	; 0x38
    88e8:	803b      	strh	r3, [r7, #0]
    }
  }
#endif /* !UIP_CONF_ROUTER */

  /* Source link-layer option */
  create_llao((uint8_t *)UIP_ND6_OPT_HDR_BUF, UIP_ND6_OPT_SLLAO);
    88ea:	3038      	adds	r0, #56	; 0x38
    88ec:	1900      	adds	r0, r0, r4
    88ee:	2101      	movs	r1, #1
    88f0:	4b27      	ldr	r3, [pc, #156]	; (8990 <uip_nd6_ra_output+0x144>)
    88f2:	4798      	blx	r3

  uip_len += UIP_ND6_OPT_LLAO_LEN;
    88f4:	883b      	ldrh	r3, [r7, #0]
    88f6:	3310      	adds	r3, #16
    88f8:	803b      	strh	r3, [r7, #0]
  nd6_opt_offset += UIP_ND6_OPT_LLAO_LEN;
    88fa:	4b26      	ldr	r3, [pc, #152]	; (8994 <uip_nd6_ra_output+0x148>)
    88fc:	4698      	mov	r8, r3
    88fe:	231c      	movs	r3, #28
    8900:	4642      	mov	r2, r8
    8902:	7013      	strb	r3, [r2, #0]

  /* MTU */
  UIP_ND6_OPT_MTU_BUF->type = UIP_ND6_OPT_MTU;
    8904:	7835      	ldrb	r5, [r6, #0]
    8906:	3548      	adds	r5, #72	; 0x48
    8908:	192d      	adds	r5, r5, r4
    890a:	3b17      	subs	r3, #23
    890c:	702b      	strb	r3, [r5, #0]
  UIP_ND6_OPT_MTU_BUF->len = UIP_ND6_OPT_MTU_LEN >> 3;
    890e:	3b04      	subs	r3, #4
    8910:	706b      	strb	r3, [r5, #1]
  UIP_ND6_OPT_MTU_BUF->reserved = 0;
    8912:	2300      	movs	r3, #0
    8914:	70ab      	strb	r3, [r5, #2]
    8916:	70eb      	strb	r3, [r5, #3]
  //UIP_ND6_OPT_MTU_BUF->mtu = uip_htonl(uip_ds6_if.link_mtu);
  UIP_ND6_OPT_MTU_BUF->mtu = uip_htonl(1500);
    8918:	481f      	ldr	r0, [pc, #124]	; (8998 <uip_nd6_ra_output+0x14c>)
    891a:	4b20      	ldr	r3, [pc, #128]	; (899c <uip_nd6_ra_output+0x150>)
    891c:	4798      	blx	r3
    891e:	7128      	strb	r0, [r5, #4]
    8920:	0a03      	lsrs	r3, r0, #8
    8922:	716b      	strb	r3, [r5, #5]
    8924:	0c03      	lsrs	r3, r0, #16
    8926:	71ab      	strb	r3, [r5, #6]
    8928:	0e00      	lsrs	r0, r0, #24
    892a:	71e8      	strb	r0, [r5, #7]

  uip_len += UIP_ND6_OPT_MTU_LEN;
    892c:	883b      	ldrh	r3, [r7, #0]
    892e:	3308      	adds	r3, #8
    8930:	b29b      	uxth	r3, r3
    8932:	803b      	strh	r3, [r7, #0]
  nd6_opt_offset += UIP_ND6_OPT_MTU_LEN;
    8934:	4642      	mov	r2, r8
    8936:	7812      	ldrb	r2, [r2, #0]
    8938:	3208      	adds	r2, #8
    893a:	4641      	mov	r1, r8
    893c:	700a      	strb	r2, [r1, #0]
  UIP_IP_BUF->len[0] = ((uip_len - UIP_IPH_LEN) >> 8);
    893e:	1c1a      	adds	r2, r3, #0
    8940:	3a28      	subs	r2, #40	; 0x28
    8942:	1212      	asrs	r2, r2, #8
    8944:	7122      	strb	r2, [r4, #4]
  UIP_IP_BUF->len[1] = ((uip_len - UIP_IPH_LEN) & 0xff);
    8946:	3b28      	subs	r3, #40	; 0x28
    8948:	7163      	strb	r3, [r4, #5]

  /*ICMP checksum */
  UIP_ICMP_BUF->icmpchksum = 0;
    894a:	7833      	ldrb	r3, [r6, #0]
    894c:	3328      	adds	r3, #40	; 0x28
    894e:	191c      	adds	r4, r3, r4
    8950:	2300      	movs	r3, #0
    8952:	70a3      	strb	r3, [r4, #2]
    8954:	70e3      	strb	r3, [r4, #3]
  UIP_ICMP_BUF->icmpchksum = ~uip_icmp6chksum();
    8956:	4b12      	ldr	r3, [pc, #72]	; (89a0 <uip_nd6_ra_output+0x154>)
    8958:	4798      	blx	r3
    895a:	43c0      	mvns	r0, r0
    895c:	b280      	uxth	r0, r0
    895e:	70a0      	strb	r0, [r4, #2]
    8960:	0a00      	lsrs	r0, r0, #8
    8962:	70e0      	strb	r0, [r4, #3]
  PRINT6ADDR(&UIP_IP_BUF->destipaddr);
  PRINTF("from");
  PRINT6ADDR(&UIP_IP_BUF->srcipaddr);
  PRINTF("\n\r");
  return;
}
    8964:	bc04      	pop	{r2}
    8966:	4690      	mov	r8, r2
    8968:	bdf0      	pop	{r4, r5, r6, r7, pc}
    896a:	46c0      	nop			; (mov r8, r8)
    896c:	20002cd4 	.word	0x20002cd4
    8970:	000002ff 	.word	0x000002ff
    8974:	00010b2f 	.word	0x00010b2f
    8978:	20002cdc 	.word	0x20002cdc
    897c:	0000771d 	.word	0x0000771d
    8980:	20000b12 	.word	0x20000b12
    8984:	20002b68 	.word	0x20002b68
    8988:	00009fd1 	.word	0x00009fd1
    898c:	20002cc0 	.word	0x20002cc0
    8990:	00007fad 	.word	0x00007fad
    8994:	20000b08 	.word	0x20000b08
    8998:	000005dc 	.word	0x000005dc
    899c:	00009fdd 	.word	0x00009fdd
    89a0:	00008be1 	.word	0x00008be1

000089a4 <uip_nd6_init>:
                  ra_input);
#endif
/*---------------------------------------------------------------------------*/
void
uip_nd6_init()
{
    89a4:	b510      	push	{r4, lr}

#if UIP_ND6_SEND_NA
  /* Only handle NSs if we are prepared to send out NAs */
  uip_icmp6_register_input_handler(&ns_input_handler);
    89a6:	4804      	ldr	r0, [pc, #16]	; (89b8 <uip_nd6_init+0x14>)
    89a8:	4c04      	ldr	r4, [pc, #16]	; (89bc <uip_nd6_init+0x18>)
    89aa:	47a0      	blx	r4
  /*
   * Only handle NAs if we are prepared to send out NAs.
   * This is perhaps logically incorrect, but this condition was present in
   * uip_process and we keep it until proven wrong
   */
  uip_icmp6_register_input_handler(&na_input_handler);
    89ac:	4804      	ldr	r0, [pc, #16]	; (89c0 <uip_nd6_init+0x1c>)
    89ae:	47a0      	blx	r4
#endif


#if UIP_CONF_ROUTER && UIP_ND6_SEND_RA
  /* Only accept RS if we are a router and happy to send out RAs */
  uip_icmp6_register_input_handler(&rs_input_handler);
    89b0:	4804      	ldr	r0, [pc, #16]	; (89c4 <uip_nd6_init+0x20>)
    89b2:	47a0      	blx	r4

#if !UIP_CONF_ROUTER
  /* Only process RAs if we are not a router */
  uip_icmp6_register_input_handler(&ra_input_handler);
#endif
}
    89b4:	bd10      	pop	{r4, pc}
    89b6:	46c0      	nop			; (mov r8, r8)
    89b8:	20000098 	.word	0x20000098
    89bc:	00007cf9 	.word	0x00007cf9
    89c0:	200000a4 	.word	0x200000a4
    89c4:	2000008c 	.word	0x2000008c

000089c8 <chksum>:

#if ! UIP_ARCH_CHKSUM
/*---------------------------------------------------------------------------*/
static uint16_t
chksum(uint16_t sum, const uint8_t *data, uint16_t len)
{
    89c8:	b530      	push	{r4, r5, lr}
  uint16_t t;
  const uint8_t *dataptr;
  const uint8_t *last_byte;

  dataptr = data;
  last_byte = data + len - 1;
    89ca:	3a01      	subs	r2, #1
    89cc:	188a      	adds	r2, r1, r2
  
  while(dataptr < last_byte) {   /* At least two more bytes */
    89ce:	4291      	cmp	r1, r2
    89d0:	d214      	bcs.n	89fc <chksum+0x34>
    89d2:	1c0c      	adds	r4, r1, #0
    t = (dataptr[0] << 8) + dataptr[1];
    89d4:	7823      	ldrb	r3, [r4, #0]
    89d6:	021b      	lsls	r3, r3, #8
    89d8:	7865      	ldrb	r5, [r4, #1]
    89da:	18eb      	adds	r3, r5, r3
    89dc:	b29b      	uxth	r3, r3
    sum += t;
    89de:	18c0      	adds	r0, r0, r3
    89e0:	b280      	uxth	r0, r0
    if(sum < t) {
    89e2:	4283      	cmp	r3, r0
    89e4:	d901      	bls.n	89ea <chksum+0x22>
      sum++;      /* carry */
    89e6:	3001      	adds	r0, #1
    89e8:	b280      	uxth	r0, r0
    }
    dataptr += 2;
    89ea:	3402      	adds	r4, #2
  const uint8_t *last_byte;

  dataptr = data;
  last_byte = data + len - 1;
  
  while(dataptr < last_byte) {   /* At least two more bytes */
    89ec:	42a2      	cmp	r2, r4
    89ee:	d8f1      	bhi.n	89d4 <chksum+0xc>
    89f0:	43cb      	mvns	r3, r1
    89f2:	189b      	adds	r3, r3, r2
    89f4:	085b      	lsrs	r3, r3, #1
    89f6:	3301      	adds	r3, #1
    89f8:	005b      	lsls	r3, r3, #1
    89fa:	18c9      	adds	r1, r1, r3
      sum++;      /* carry */
    }
    dataptr += 2;
  }
  
  if(dataptr == last_byte) {
    89fc:	4291      	cmp	r1, r2
    89fe:	d107      	bne.n	8a10 <chksum+0x48>
    t = (dataptr[0] << 8) + 0;
    8a00:	780b      	ldrb	r3, [r1, #0]
    8a02:	021b      	lsls	r3, r3, #8
    sum += t;
    8a04:	1818      	adds	r0, r3, r0
    8a06:	b280      	uxth	r0, r0
    if(sum < t) {
    8a08:	4283      	cmp	r3, r0
    8a0a:	d901      	bls.n	8a10 <chksum+0x48>
      sum++;      /* carry */
    8a0c:	3001      	adds	r0, #1
    8a0e:	b280      	uxth	r0, r0
    }
  }

  /* Return sum in host byte order. */
  return sum;
}
    8a10:	bd30      	pop	{r4, r5, pc}
    8a12:	46c0      	nop			; (mov r8, r8)

00008a14 <ext_hdr_options_process>:
/**
 * \brief Process the options in Destination and Hop By Hop extension headers
 */
static uint8_t
ext_hdr_options_process(void)
{
    8a14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 /*
  * Length field in the extension header: length of the header in units of
  * 8 bytes, excluding the first 8 bytes
  * length field in an option : the length of data in the option
  */
  uip_ext_opt_offset = 2;
    8a16:	2202      	movs	r2, #2
    8a18:	4b31      	ldr	r3, [pc, #196]	; (8ae0 <ext_hdr_options_process+0xcc>)
    8a1a:	701a      	strb	r2, [r3, #0]
  while(uip_ext_opt_offset < ((UIP_EXT_BUF->len << 3) + 8)) {
    8a1c:	4b31      	ldr	r3, [pc, #196]	; (8ae4 <ext_hdr_options_process+0xd0>)
    8a1e:	781a      	ldrb	r2, [r3, #0]
    8a20:	1c16      	adds	r6, r2, #0
    8a22:	3628      	adds	r6, #40	; 0x28
    8a24:	4930      	ldr	r1, [pc, #192]	; (8ae8 <ext_hdr_options_process+0xd4>)
    8a26:	1871      	adds	r1, r6, r1
    8a28:	784d      	ldrb	r5, [r1, #1]
    8a2a:	00ed      	lsls	r5, r5, #3
    8a2c:	3508      	adds	r5, #8
    8a2e:	2302      	movs	r3, #2
         *   Address was not a multicast address, send an ICMP Parameter
         *   Problem, Code 2, message to the packet's Source Address,
         *   pointing to the unrecognized Option Type.
         */
        PRINTF("MSB %x\n\r", UIP_EXT_HDR_OPT_BUF->type);
        switch(UIP_EXT_HDR_OPT_BUF->type & 0xC0) {
    8a30:	273f      	movs	r7, #63	; 0x3f
  * Length field in the extension header: length of the header in units of
  * 8 bytes, excluding the first 8 bytes
  * length field in an option : the length of data in the option
  */
  uip_ext_opt_offset = 2;
  while(uip_ext_opt_offset < ((UIP_EXT_BUF->len << 3) + 8)) {
    8a32:	e04a      	b.n	8aca <ext_hdr_options_process+0xb6>
    switch(UIP_EXT_HDR_OPT_BUF->type) {
    8a34:	1999      	adds	r1, r3, r6
    8a36:	4c2c      	ldr	r4, [pc, #176]	; (8ae8 <ext_hdr_options_process+0xd4>)
    8a38:	46a4      	mov	ip, r4
    8a3a:	4461      	add	r1, ip
    8a3c:	780c      	ldrb	r4, [r1, #0]
    8a3e:	2c01      	cmp	r4, #1
    8a40:	d007      	beq.n	8a52 <ext_hdr_options_process+0x3e>
    8a42:	2c00      	cmp	r4, #0
    8a44:	d002      	beq.n	8a4c <ext_hdr_options_process+0x38>
    8a46:	2c63      	cmp	r4, #99	; 0x63
    8a48:	d008      	beq.n	8a5c <ext_hdr_options_process+0x48>
    8a4a:	e01c      	b.n	8a86 <ext_hdr_options_process+0x72>
       * PAD1 does not make sense as the header must be 8bytes aligned,
       * hence we can only have
       */
      case UIP_EXT_HDR_OPT_PAD1:
        PRINTF("Processing PAD1 option\n\r");
        uip_ext_opt_offset += 1;
    8a4c:	3301      	adds	r3, #1
    8a4e:	b2db      	uxtb	r3, r3
        break;
    8a50:	e03b      	b.n	8aca <ext_hdr_options_process+0xb6>
    8a52:	7849      	ldrb	r1, [r1, #1]
    8a54:	3102      	adds	r1, #2
      case UIP_EXT_HDR_OPT_PADN:
        PRINTF("Processing PADN option\n\r");
        uip_ext_opt_offset += UIP_EXT_HDR_OPT_PADN_BUF->opt_len + 2;
    8a56:	185b      	adds	r3, r3, r1
    8a58:	b2db      	uxtb	r3, r3
        break;
    8a5a:	e036      	b.n	8aca <ext_hdr_options_process+0xb6>
    8a5c:	4a20      	ldr	r2, [pc, #128]	; (8ae0 <ext_hdr_options_process+0xcc>)
    8a5e:	7013      	strb	r3, [r2, #0]
		 * Using this fix, the header is ignored, and the next header (if
		 * present) is processed.
		 */
#if UIP_CONF_IPV6_RPL
        PRINTF("Processing RPL option\n\r");
        if(rpl_verify_header(uip_ext_opt_offset)) {
    8a60:	4b22      	ldr	r3, [pc, #136]	; (8aec <ext_hdr_options_process+0xd8>)
    8a62:	4798      	blx	r3
          PRINTF("RPL Option Error: Dropping Packet\n\r");
          return 1;
    8a64:	2301      	movs	r3, #1
		 * Using this fix, the header is ignored, and the next header (if
		 * present) is processed.
		 */
#if UIP_CONF_IPV6_RPL
        PRINTF("Processing RPL option\n\r");
        if(rpl_verify_header(uip_ext_opt_offset)) {
    8a66:	2800      	cmp	r0, #0
    8a68:	d137      	bne.n	8ada <ext_hdr_options_process+0xc6>
          PRINTF("RPL Option Error: Dropping Packet\n\r");
          return 1;
        }
#endif /* UIP_CONF_IPV6_RPL */
        uip_ext_opt_offset += (UIP_EXT_HDR_OPT_BUF->len) + 2;
    8a6a:	481d      	ldr	r0, [pc, #116]	; (8ae0 <ext_hdr_options_process+0xcc>)
    8a6c:	7804      	ldrb	r4, [r0, #0]
    8a6e:	4b1d      	ldr	r3, [pc, #116]	; (8ae4 <ext_hdr_options_process+0xd0>)
    8a70:	781a      	ldrb	r2, [r3, #0]
    8a72:	3228      	adds	r2, #40	; 0x28
    8a74:	1912      	adds	r2, r2, r4
    8a76:	491c      	ldr	r1, [pc, #112]	; (8ae8 <ext_hdr_options_process+0xd4>)
    8a78:	1852      	adds	r2, r2, r1
    8a7a:	7853      	ldrb	r3, [r2, #1]
    8a7c:	18e3      	adds	r3, r4, r3
    8a7e:	3302      	adds	r3, #2
    8a80:	7003      	strb	r3, [r0, #0]
        return 0;
    8a82:	2300      	movs	r3, #0
    8a84:	e029      	b.n	8ada <ext_hdr_options_process+0xc6>
         *   Address was not a multicast address, send an ICMP Parameter
         *   Problem, Code 2, message to the packet's Source Address,
         *   pointing to the unrecognized Option Type.
         */
        PRINTF("MSB %x\n\r", UIP_EXT_HDR_OPT_BUF->type);
        switch(UIP_EXT_HDR_OPT_BUF->type & 0xC0) {
    8a86:	43bc      	bics	r4, r7
    8a88:	b2e0      	uxtb	r0, r4
    8a8a:	2880      	cmp	r0, #128	; 0x80
    8a8c:	d004      	beq.n	8a98 <ext_hdr_options_process+0x84>
    8a8e:	28c0      	cmp	r0, #192	; 0xc0
    8a90:	d009      	beq.n	8aa6 <ext_hdr_options_process+0x92>
    8a92:	2c40      	cmp	r4, #64	; 0x40
    8a94:	d115      	bne.n	8ac2 <ext_hdr_options_process+0xae>
    8a96:	e002      	b.n	8a9e <ext_hdr_options_process+0x8a>
    8a98:	4911      	ldr	r1, [pc, #68]	; (8ae0 <ext_hdr_options_process+0xcc>)
    8a9a:	700b      	strb	r3, [r1, #0]
    8a9c:	e009      	b.n	8ab2 <ext_hdr_options_process+0x9e>
    8a9e:	4a10      	ldr	r2, [pc, #64]	; (8ae0 <ext_hdr_options_process+0xcc>)
    8aa0:	7013      	strb	r3, [r2, #0]
          case 0:
            break;
          case 0x40:
            return 1;
    8aa2:	2301      	movs	r3, #1
    8aa4:	e019      	b.n	8ada <ext_hdr_options_process+0xc6>
    8aa6:	490e      	ldr	r1, [pc, #56]	; (8ae0 <ext_hdr_options_process+0xcc>)
    8aa8:	700b      	strb	r3, [r1, #0]
          case 0xC0:
            if(uip_is_addr_mcast(&UIP_IP_BUF->destipaddr)) {
    8aaa:	490f      	ldr	r1, [pc, #60]	; (8ae8 <ext_hdr_options_process+0xd4>)
    8aac:	7e09      	ldrb	r1, [r1, #24]
    8aae:	29ff      	cmp	r1, #255	; 0xff
    8ab0:	d012      	beq.n	8ad8 <ext_hdr_options_process+0xc4>
    8ab2:	3228      	adds	r2, #40	; 0x28
              return 1;
            }
          case 0x80:
            uip_icmp6_error_output(ICMP6_PARAM_PROB, ICMP6_PARAMPROB_OPTION,
    8ab4:	18d2      	adds	r2, r2, r3
    8ab6:	2004      	movs	r0, #4
    8ab8:	2102      	movs	r1, #2
    8aba:	4b0d      	ldr	r3, [pc, #52]	; (8af0 <ext_hdr_options_process+0xdc>)
    8abc:	4798      	blx	r3
                             (uint32_t)UIP_IPH_LEN + uip_ext_len + uip_ext_opt_offset);
            return 2;
    8abe:	2302      	movs	r3, #2
    8ac0:	e00b      	b.n	8ada <ext_hdr_options_process+0xc6>
    8ac2:	7849      	ldrb	r1, [r1, #1]
    8ac4:	3102      	adds	r1, #2
        }
        /* in the cases were we did not discard, update ext_opt* */
        uip_ext_opt_offset += UIP_EXT_HDR_OPT_BUF->len + 2;
    8ac6:	185b      	adds	r3, r3, r1
    8ac8:	b2db      	uxtb	r3, r3
  * Length field in the extension header: length of the header in units of
  * 8 bytes, excluding the first 8 bytes
  * length field in an option : the length of data in the option
  */
  uip_ext_opt_offset = 2;
  while(uip_ext_opt_offset < ((UIP_EXT_BUF->len << 3) + 8)) {
    8aca:	1e18      	subs	r0, r3, #0
    8acc:	42a8      	cmp	r0, r5
    8ace:	dbb1      	blt.n	8a34 <ext_hdr_options_process+0x20>
    8ad0:	4a03      	ldr	r2, [pc, #12]	; (8ae0 <ext_hdr_options_process+0xcc>)
    8ad2:	7013      	strb	r3, [r2, #0]
        /* in the cases were we did not discard, update ext_opt* */
        uip_ext_opt_offset += UIP_EXT_HDR_OPT_BUF->len + 2;
        break;
    }
  }
  return 0;
    8ad4:	2300      	movs	r3, #0
    8ad6:	e000      	b.n	8ada <ext_hdr_options_process+0xc6>
            break;
          case 0x40:
            return 1;
          case 0xC0:
            if(uip_is_addr_mcast(&UIP_IP_BUF->destipaddr)) {
              return 1;
    8ad8:	2301      	movs	r3, #1
        uip_ext_opt_offset += UIP_EXT_HDR_OPT_BUF->len + 2;
        break;
    }
  }
  return 0;
}
    8ada:	1c18      	adds	r0, r3, #0
    8adc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    8ade:	46c0      	nop			; (mov r8, r8)
    8ae0:	20000b18 	.word	0x20000b18
    8ae4:	20000b12 	.word	0x20000b12
    8ae8:	20002cd4 	.word	0x20002cd4
    8aec:	0000d13d 	.word	0x0000d13d
    8af0:	00007d0d 	.word	0x00007d0d

00008af4 <upper_layer_chksum>:
}
#endif
/*---------------------------------------------------------------------------*/
static uint16_t
upper_layer_chksum(uint8_t proto)
{
    8af4:	b5f0      	push	{r4, r5, r6, r7, lr}
    8af6:	b083      	sub	sp, #12
 * See https://sourceforge.net/apps/mantisbt/contiki/view.php?id=3
 */
  volatile uint16_t upper_layer_len;
  uint16_t sum;
  
  upper_layer_len = (((uint16_t)(UIP_IP_BUF->len[0]) << 8) + UIP_IP_BUF->len[1] - uip_ext_len);
    8af8:	4b11      	ldr	r3, [pc, #68]	; (8b40 <upper_layer_chksum+0x4c>)
    8afa:	781d      	ldrb	r5, [r3, #0]
    8afc:	4c11      	ldr	r4, [pc, #68]	; (8b44 <upper_layer_chksum+0x50>)
    8afe:	7923      	ldrb	r3, [r4, #4]
    8b00:	021b      	lsls	r3, r3, #8
    8b02:	1b5b      	subs	r3, r3, r5
    8b04:	7962      	ldrb	r2, [r4, #5]
    8b06:	18d3      	adds	r3, r2, r3
    8b08:	b29b      	uxth	r3, r3
    8b0a:	466a      	mov	r2, sp
    8b0c:	1d96      	adds	r6, r2, #6
    8b0e:	80d3      	strh	r3, [r2, #6]
  PRINTF("Upper layer checksum len: %d from: %d\n\r", upper_layer_len,
	 UIP_IPH_LEN + UIP_LLH_LEN + uip_ext_len);

  /* First sum pseudoheader. */
  /* IP protocol and length fields. This addition cannot carry. */
  sum = upper_layer_len + proto;
    8b10:	88d3      	ldrh	r3, [r2, #6]
    8b12:	1818      	adds	r0, r3, r0
    8b14:	b280      	uxth	r0, r0
  /* Sum IP source and destination addresses. */
  sum = chksum(sum, (uint8_t *)&UIP_IP_BUF->srcipaddr, 2 * sizeof(uip_ipaddr_t));
    8b16:	1c21      	adds	r1, r4, #0
    8b18:	3108      	adds	r1, #8
    8b1a:	2220      	movs	r2, #32
    8b1c:	4f0a      	ldr	r7, [pc, #40]	; (8b48 <upper_layer_chksum+0x54>)
    8b1e:	47b8      	blx	r7

  /* Sum TCP header and data. */
  sum = chksum(sum, &uip_buf[UIP_IPH_LEN + UIP_LLH_LEN + uip_ext_len],
    8b20:	8832      	ldrh	r2, [r6, #0]
    8b22:	b292      	uxth	r2, r2
    8b24:	3528      	adds	r5, #40	; 0x28
    8b26:	1929      	adds	r1, r5, r4
    8b28:	47b8      	blx	r7
               upper_layer_len);
    
  return (sum == 0) ? 0xffff : uip_htons(sum);
    8b2a:	2800      	cmp	r0, #0
    8b2c:	d004      	beq.n	8b38 <upper_layer_chksum+0x44>
}
/*---------------------------------------------------------------------------*/
uint16_t
uip_htons(uint16_t val)
{
  return UIP_HTONS(val);
    8b2e:	0203      	lsls	r3, r0, #8
    8b30:	0a00      	lsrs	r0, r0, #8
    8b32:	4318      	orrs	r0, r3
    8b34:	b280      	uxth	r0, r0
    8b36:	e000      	b.n	8b3a <upper_layer_chksum+0x46>

  /* Sum TCP header and data. */
  sum = chksum(sum, &uip_buf[UIP_IPH_LEN + UIP_LLH_LEN + uip_ext_len],
               upper_layer_len);
    
  return (sum == 0) ? 0xffff : uip_htons(sum);
    8b38:	4804      	ldr	r0, [pc, #16]	; (8b4c <upper_layer_chksum+0x58>)
}
    8b3a:	b003      	add	sp, #12
    8b3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    8b3e:	46c0      	nop			; (mov r8, r8)
    8b40:	20000b12 	.word	0x20000b12
    8b44:	20002cd4 	.word	0x20002cd4
    8b48:	000089c9 	.word	0x000089c9
    8b4c:	0000ffff 	.word	0x0000ffff

00008b50 <uip_add32>:
/* Functions                                                                 */
/*---------------------------------------------------------------------------*/
#if (!UIP_ARCH_ADD32 && UIP_TCP)
void
uip_add32(uint8_t *op32, uint16_t op16)
{
    8b50:	b570      	push	{r4, r5, r6, lr}
  uip_acc32[3] = op32[3] + (op16 & 0xff);
    8b52:	78c5      	ldrb	r5, [r0, #3]
    8b54:	186d      	adds	r5, r5, r1
    8b56:	b2ed      	uxtb	r5, r5
    8b58:	4c14      	ldr	r4, [pc, #80]	; (8bac <uip_add32+0x5c>)
    8b5a:	70e5      	strb	r5, [r4, #3]
  uip_acc32[2] = op32[2] + (op16 >> 8);
    8b5c:	0a0e      	lsrs	r6, r1, #8
    8b5e:	7883      	ldrb	r3, [r0, #2]
    8b60:	199b      	adds	r3, r3, r6
    8b62:	b2db      	uxtb	r3, r3
    8b64:	70a3      	strb	r3, [r4, #2]
  uip_acc32[1] = op32[1];
    8b66:	7842      	ldrb	r2, [r0, #1]
    8b68:	7062      	strb	r2, [r4, #1]
  uip_acc32[0] = op32[0];
    8b6a:	7800      	ldrb	r0, [r0, #0]
    8b6c:	7020      	strb	r0, [r4, #0]
  
  if(uip_acc32[2] < (op16 >> 8)) {
    8b6e:	b29c      	uxth	r4, r3
    8b70:	42a6      	cmp	r6, r4
    8b72:	d907      	bls.n	8b84 <uip_add32+0x34>
    ++uip_acc32[1];
    8b74:	3201      	adds	r2, #1
    8b76:	b2d2      	uxtb	r2, r2
    8b78:	4c0c      	ldr	r4, [pc, #48]	; (8bac <uip_add32+0x5c>)
    8b7a:	7062      	strb	r2, [r4, #1]
    if(uip_acc32[1] == 0) {
    8b7c:	2a00      	cmp	r2, #0
    8b7e:	d101      	bne.n	8b84 <uip_add32+0x34>
      ++uip_acc32[0];
    8b80:	3001      	adds	r0, #1
    8b82:	7020      	strb	r0, [r4, #0]
    }
  }
  
  
  if(uip_acc32[3] < (op16 & 0xff)) {
    8b84:	b2c9      	uxtb	r1, r1
    8b86:	42a9      	cmp	r1, r5
    8b88:	dd0e      	ble.n	8ba8 <uip_add32+0x58>
    ++uip_acc32[2];
    8b8a:	3301      	adds	r3, #1
    8b8c:	b2db      	uxtb	r3, r3
    8b8e:	4a07      	ldr	r2, [pc, #28]	; (8bac <uip_add32+0x5c>)
    8b90:	7093      	strb	r3, [r2, #2]
    if(uip_acc32[2] == 0) {
    8b92:	2b00      	cmp	r3, #0
    8b94:	d108      	bne.n	8ba8 <uip_add32+0x58>
      ++uip_acc32[1];
    8b96:	7853      	ldrb	r3, [r2, #1]
    8b98:	3301      	adds	r3, #1
    8b9a:	b2db      	uxtb	r3, r3
    8b9c:	7053      	strb	r3, [r2, #1]
      if(uip_acc32[1] == 0) {
    8b9e:	2b00      	cmp	r3, #0
    8ba0:	d102      	bne.n	8ba8 <uip_add32+0x58>
        ++uip_acc32[0];
    8ba2:	7813      	ldrb	r3, [r2, #0]
    8ba4:	3301      	adds	r3, #1
    8ba6:	7013      	strb	r3, [r2, #0]
      }
    }
  }
}
    8ba8:	bd70      	pop	{r4, r5, r6, pc}
    8baa:	46c0      	nop			; (mov r8, r8)
    8bac:	20002cc8 	.word	0x20002cc8

00008bb0 <uip_add_rcv_nxt>:

/*---------------------------------------------------------------------------*/
#if UIP_TCP
static void
uip_add_rcv_nxt(uint16_t n)
{
    8bb0:	b510      	push	{r4, lr}
    8bb2:	1c01      	adds	r1, r0, #0
  uip_add32(uip_conn->rcv_nxt, n);
    8bb4:	4c07      	ldr	r4, [pc, #28]	; (8bd4 <uip_add_rcv_nxt+0x24>)
    8bb6:	6820      	ldr	r0, [r4, #0]
    8bb8:	3014      	adds	r0, #20
    8bba:	4b07      	ldr	r3, [pc, #28]	; (8bd8 <uip_add_rcv_nxt+0x28>)
    8bbc:	4798      	blx	r3
  uip_conn->rcv_nxt[0] = uip_acc32[0];
    8bbe:	6823      	ldr	r3, [r4, #0]
    8bc0:	4a06      	ldr	r2, [pc, #24]	; (8bdc <uip_add_rcv_nxt+0x2c>)
    8bc2:	7811      	ldrb	r1, [r2, #0]
    8bc4:	7519      	strb	r1, [r3, #20]
  uip_conn->rcv_nxt[1] = uip_acc32[1];
    8bc6:	7851      	ldrb	r1, [r2, #1]
    8bc8:	7559      	strb	r1, [r3, #21]
  uip_conn->rcv_nxt[2] = uip_acc32[2];
    8bca:	7891      	ldrb	r1, [r2, #2]
    8bcc:	7599      	strb	r1, [r3, #22]
  uip_conn->rcv_nxt[3] = uip_acc32[3];
    8bce:	78d2      	ldrb	r2, [r2, #3]
    8bd0:	75da      	strb	r2, [r3, #23]
}
    8bd2:	bd10      	pop	{r4, pc}
    8bd4:	20002e74 	.word	0x20002e74
    8bd8:	00008b51 	.word	0x00008b51
    8bdc:	20002cc8 	.word	0x20002cc8

00008be0 <uip_icmp6chksum>:
  return (sum == 0) ? 0xffff : uip_htons(sum);
}
/*---------------------------------------------------------------------------*/
uint16_t
uip_icmp6chksum(void)
{
    8be0:	b508      	push	{r3, lr}
  return upper_layer_chksum(UIP_PROTO_ICMP6);
    8be2:	203a      	movs	r0, #58	; 0x3a
    8be4:	4b01      	ldr	r3, [pc, #4]	; (8bec <uip_icmp6chksum+0xc>)
    8be6:	4798      	blx	r3
  
}
    8be8:	bd08      	pop	{r3, pc}
    8bea:	46c0      	nop			; (mov r8, r8)
    8bec:	00008af5 	.word	0x00008af5

00008bf0 <uip_tcpchksum>:
/*---------------------------------------------------------------------------*/
#if UIP_TCP
uint16_t
uip_tcpchksum(void)
{
    8bf0:	b508      	push	{r3, lr}
  return upper_layer_chksum(UIP_PROTO_TCP);
    8bf2:	2006      	movs	r0, #6
    8bf4:	4b01      	ldr	r3, [pc, #4]	; (8bfc <uip_tcpchksum+0xc>)
    8bf6:	4798      	blx	r3
}
    8bf8:	bd08      	pop	{r3, pc}
    8bfa:	46c0      	nop			; (mov r8, r8)
    8bfc:	00008af5 	.word	0x00008af5

00008c00 <uip_udpchksum>:
#endif /* UIP_TCP */
/*---------------------------------------------------------------------------*/
#if UIP_UDP && UIP_UDP_CHECKSUMS
uint16_t
uip_udpchksum(void)
{
    8c00:	b508      	push	{r3, lr}
  return upper_layer_chksum(UIP_PROTO_UDP);
    8c02:	2011      	movs	r0, #17
    8c04:	4b01      	ldr	r3, [pc, #4]	; (8c0c <uip_udpchksum+0xc>)
    8c06:	4798      	blx	r3
}
    8c08:	bd08      	pop	{r3, pc}
    8c0a:	46c0      	nop			; (mov r8, r8)
    8c0c:	00008af5 	.word	0x00008af5

00008c10 <uip_init>:
#endif /* UIP_UDP && UIP_UDP_CHECKSUMS */
#endif /* UIP_ARCH_CHKSUM */
/*---------------------------------------------------------------------------*/
void
uip_init(void)
{
    8c10:	b508      	push	{r3, lr}
   
  uip_ds6_init();
    8c12:	4b14      	ldr	r3, [pc, #80]	; (8c64 <uip_init+0x54>)
    8c14:	4798      	blx	r3
  uip_icmp6_init();
    8c16:	4b14      	ldr	r3, [pc, #80]	; (8c68 <uip_init+0x58>)
    8c18:	4798      	blx	r3
  uip_nd6_init();
    8c1a:	4b14      	ldr	r3, [pc, #80]	; (8c6c <uip_init+0x5c>)
    8c1c:	4798      	blx	r3
    8c1e:	4b14      	ldr	r3, [pc, #80]	; (8c70 <uip_init+0x60>)
    8c20:	1c19      	adds	r1, r3, #0
    8c22:	3128      	adds	r1, #40	; 0x28

#if UIP_TCP
  for(c = 0; c < UIP_LISTENPORTS; ++c) {
    uip_listenports[c] = 0;
    8c24:	2200      	movs	r2, #0
    8c26:	801a      	strh	r2, [r3, #0]
    8c28:	3302      	adds	r3, #2
  uip_ds6_init();
  uip_icmp6_init();
  uip_nd6_init();

#if UIP_TCP
  for(c = 0; c < UIP_LISTENPORTS; ++c) {
    8c2a:	428b      	cmp	r3, r1
    8c2c:	d1fb      	bne.n	8c26 <uip_init+0x16>
    8c2e:	4b11      	ldr	r3, [pc, #68]	; (8c74 <uip_init+0x64>)
    8c30:	1c19      	adds	r1, r3, #0
    8c32:	31e1      	adds	r1, #225	; 0xe1
    8c34:	31ff      	adds	r1, #255	; 0xff
    uip_listenports[c] = 0;
  }
  for(c = 0; c < UIP_CONNS; ++c) {
    uip_conns[c].tcpstateflags = UIP_CLOSED;
    8c36:	2200      	movs	r2, #0
    8c38:	701a      	strb	r2, [r3, #0]
    8c3a:	3330      	adds	r3, #48	; 0x30

#if UIP_TCP
  for(c = 0; c < UIP_LISTENPORTS; ++c) {
    uip_listenports[c] = 0;
  }
  for(c = 0; c < UIP_CONNS; ++c) {
    8c3c:	428b      	cmp	r3, r1
    8c3e:	d1fb      	bne.n	8c38 <uip_init+0x28>
    uip_conns[c].tcpstateflags = UIP_CLOSED;
  }
#endif /* UIP_TCP */

#if UIP_ACTIVE_OPEN || UIP_UDP
  lastport = 1024;
    8c40:	2280      	movs	r2, #128	; 0x80
    8c42:	00d2      	lsls	r2, r2, #3
    8c44:	4b0c      	ldr	r3, [pc, #48]	; (8c78 <uip_init+0x68>)
    8c46:	801a      	strh	r2, [r3, #0]
    8c48:	4b0c      	ldr	r3, [pc, #48]	; (8c7c <uip_init+0x6c>)
    8c4a:	1c19      	adds	r1, r3, #0
    8c4c:	3141      	adds	r1, #65	; 0x41
    8c4e:	31ff      	adds	r1, #255	; 0xff
#endif /* UIP_ACTIVE_OPEN || UIP_UDP */

#if UIP_UDP
  for(c = 0; c < UIP_UDP_CONNS; ++c) {
    uip_udp_conns[c].lport = 0;
    8c50:	2200      	movs	r2, #0
    8c52:	801a      	strh	r2, [r3, #0]
    8c54:	3320      	adds	r3, #32
#if UIP_ACTIVE_OPEN || UIP_UDP
  lastport = 1024;
#endif /* UIP_ACTIVE_OPEN || UIP_UDP */

#if UIP_UDP
  for(c = 0; c < UIP_UDP_CONNS; ++c) {
    8c56:	428b      	cmp	r3, r1
    8c58:	d1fb      	bne.n	8c52 <uip_init+0x42>
    8c5a:	220a      	movs	r2, #10
    8c5c:	4b08      	ldr	r3, [pc, #32]	; (8c80 <uip_init+0x70>)
    8c5e:	701a      	strb	r2, [r3, #0]
#endif /* UIP_UDP */

#if UIP_CONF_IPV6_MULTICAST
  UIP_MCAST6.init();
#endif
}
    8c60:	bd08      	pop	{r3, pc}
    8c62:	46c0      	nop			; (mov r8, r8)
    8c64:	0000795d 	.word	0x0000795d
    8c68:	00007f91 	.word	0x00007f91
    8c6c:	000089a5 	.word	0x000089a5
    8c70:	20003060 	.word	0x20003060
    8c74:	20002e9d 	.word	0x20002e9d
    8c78:	20000b1a 	.word	0x20000b1a
    8c7c:	2000309c 	.word	0x2000309c
    8c80:	20000b1c 	.word	0x20000b1c

00008c84 <uip_connect>:
/*---------------------------------------------------------------------------*/
#if UIP_TCP && UIP_ACTIVE_OPEN
struct uip_conn *
uip_connect(uip_ipaddr_t *ripaddr, uint16_t rport)
{
    8c84:	b5f0      	push	{r4, r5, r6, r7, lr}
    8c86:	b083      	sub	sp, #12
    8c88:	9001      	str	r0, [sp, #4]
    8c8a:	4b41      	ldr	r3, [pc, #260]	; (8d90 <uip_connect+0x10c>)
    8c8c:	881c      	ldrh	r4, [r3, #0]
  
  /* Find an unused local port. */
 again:
  ++lastport;

  if(lastport >= 32000) {
    8c8e:	4f41      	ldr	r7, [pc, #260]	; (8d94 <uip_connect+0x110>)
    8c90:	4e41      	ldr	r6, [pc, #260]	; (8d98 <uip_connect+0x114>)
{
  register struct uip_conn *conn, *cconn;
  
  /* Find an unused local port. */
 again:
  ++lastport;
    8c92:	1c63      	adds	r3, r4, #1
    8c94:	b29c      	uxth	r4, r3

  if(lastport >= 32000) {
    8c96:	42bc      	cmp	r4, r7
    8c98:	d901      	bls.n	8c9e <uip_connect+0x1a>
    lastport = 4096;
    8c9a:	2480      	movs	r4, #128	; 0x80
    8c9c:	0164      	lsls	r4, r4, #5
}
/*---------------------------------------------------------------------------*/
uint16_t
uip_htons(uint16_t val)
{
  return UIP_HTONS(val);
    8c9e:	0222      	lsls	r2, r4, #8
    8ca0:	0a20      	lsrs	r0, r4, #8
    8ca2:	1c13      	adds	r3, r2, #0
    8ca4:	4303      	orrs	r3, r0
    8ca6:	b29d      	uxth	r5, r3
    8ca8:	1c32      	adds	r2, r6, #0
    8caa:	2301      	movs	r3, #1

  /* Check if this port is already in use, and if so try to find
     another one. */
  for(c = 0; c < UIP_CONNS; ++c) {
    conn = &uip_conns[c];
    if(conn->tcpstateflags != UIP_CLOSED &&
    8cac:	7d50      	ldrb	r0, [r2, #21]
    8cae:	2800      	cmp	r0, #0
    8cb0:	d002      	beq.n	8cb8 <uip_connect+0x34>
    8cb2:	8810      	ldrh	r0, [r2, #0]
    8cb4:	42a8      	cmp	r0, r5
    8cb6:	d0ec      	beq.n	8c92 <uip_connect+0xe>
    8cb8:	3301      	adds	r3, #1
    8cba:	b2db      	uxtb	r3, r3
    8cbc:	3230      	adds	r2, #48	; 0x30
    lastport = 4096;
  }

  /* Check if this port is already in use, and if so try to find
     another one. */
  for(c = 0; c < UIP_CONNS; ++c) {
    8cbe:	2b0b      	cmp	r3, #11
    8cc0:	d1f4      	bne.n	8cac <uip_connect+0x28>
    8cc2:	4b33      	ldr	r3, [pc, #204]	; (8d90 <uip_connect+0x10c>)
    8cc4:	801c      	strh	r4, [r3, #0]
      goto again;
    }
  }

  conn = 0;
  for(c = 0; c < UIP_CONNS; ++c) {
    8cc6:	2200      	movs	r2, #0
    8cc8:	4b34      	ldr	r3, [pc, #208]	; (8d9c <uip_connect+0x118>)
    8cca:	701a      	strb	r2, [r3, #0]
    cconn = &uip_conns[c];
    if(cconn->tcpstateflags == UIP_CLOSED) {
    8ccc:	2325      	movs	r3, #37	; 0x25
    8cce:	4a34      	ldr	r2, [pc, #208]	; (8da0 <uip_connect+0x11c>)
    8cd0:	5cd0      	ldrb	r0, [r2, r3]
    8cd2:	2800      	cmp	r0, #0
    8cd4:	d10e      	bne.n	8cf4 <uip_connect+0x70>
    8cd6:	e00b      	b.n	8cf0 <uip_connect+0x6c>
    }
  }

  conn = 0;
  for(c = 0; c < UIP_CONNS; ++c) {
    cconn = &uip_conns[c];
    8cd8:	1c1e      	adds	r6, r3, #0
    8cda:	1c18      	adds	r0, r3, #0
    8cdc:	3025      	adds	r0, #37	; 0x25
    if(cconn->tcpstateflags == UIP_CLOSED) {
    8cde:	7800      	ldrb	r0, [r0, #0]
    8ce0:	3201      	adds	r2, #1
    8ce2:	3330      	adds	r3, #48	; 0x30
    8ce4:	2800      	cmp	r0, #0
    8ce6:	d10b      	bne.n	8d00 <uip_connect+0x7c>
    8ce8:	4b2c      	ldr	r3, [pc, #176]	; (8d9c <uip_connect+0x118>)
    8cea:	701f      	strb	r7, [r3, #0]
    }
  }

  conn = 0;
  for(c = 0; c < UIP_CONNS; ++c) {
    cconn = &uip_conns[c];
    8cec:	1c35      	adds	r5, r6, #0
    8cee:	e019      	b.n	8d24 <uip_connect+0xa0>
    8cf0:	4d2b      	ldr	r5, [pc, #172]	; (8da0 <uip_connect+0x11c>)
    if(cconn->tcpstateflags == UIP_CLOSED) {
      conn = cconn;
      break;
    8cf2:	e017      	b.n	8d24 <uip_connect+0xa0>
    8cf4:	4b2b      	ldr	r3, [pc, #172]	; (8da4 <uip_connect+0x120>)
  }

  conn = 0;
  for(c = 0; c < UIP_CONNS; ++c) {
    cconn = &uip_conns[c];
    if(cconn->tcpstateflags == UIP_CLOSED) {
    8cf6:	2201      	movs	r2, #1
    8cf8:	1c1e      	adds	r6, r3, #0
    8cfa:	3e30      	subs	r6, #48	; 0x30
    8cfc:	2500      	movs	r5, #0
      conn = cconn;
      break;
    }
    if(cconn->tcpstateflags == UIP_TIME_WAIT) {
      if(conn == 0 ||
         cconn->timer > conn->timer) {
    8cfe:	2426      	movs	r4, #38	; 0x26
    cconn = &uip_conns[c];
    if(cconn->tcpstateflags == UIP_CLOSED) {
      conn = cconn;
      break;
    }
    if(cconn->tcpstateflags == UIP_TIME_WAIT) {
    8d00:	2807      	cmp	r0, #7
    8d02:	d10a      	bne.n	8d1a <uip_connect+0x96>
      if(conn == 0 ||
    8d04:	2d00      	cmp	r5, #0
    8d06:	d007      	beq.n	8d18 <uip_connect+0x94>
    8d08:	1c18      	adds	r0, r3, #0
    8d0a:	380a      	subs	r0, #10
    8d0c:	7807      	ldrb	r7, [r0, #0]
    8d0e:	5d28      	ldrb	r0, [r5, r4]
    8d10:	4287      	cmp	r7, r0
    8d12:	d902      	bls.n	8d1a <uip_connect+0x96>
    8d14:	1c35      	adds	r5, r6, #0
    8d16:	e000      	b.n	8d1a <uip_connect+0x96>
    8d18:	1c35      	adds	r5, r6, #0
      goto again;
    }
  }

  conn = 0;
  for(c = 0; c < UIP_CONNS; ++c) {
    8d1a:	b2d7      	uxtb	r7, r2
    8d1c:	2a0a      	cmp	r2, #10
    8d1e:	d1db      	bne.n	8cd8 <uip_connect+0x54>
    8d20:	4b1e      	ldr	r3, [pc, #120]	; (8d9c <uip_connect+0x118>)
    8d22:	701f      	strb	r7, [r3, #0]
        conn = cconn;
      }
    }
  }

  if(conn == 0) {
    8d24:	2d00      	cmp	r5, #0
    8d26:	d030      	beq.n	8d8a <uip_connect+0x106>
    return 0;
  }
  
  conn->tcpstateflags = UIP_SYN_SENT;
    8d28:	2202      	movs	r2, #2
    8d2a:	2325      	movs	r3, #37	; 0x25
    8d2c:	54ea      	strb	r2, [r5, r3]

  conn->snd_nxt[0] = iss[0];
    8d2e:	4b1e      	ldr	r3, [pc, #120]	; (8da8 <uip_connect+0x124>)
    8d30:	781a      	ldrb	r2, [r3, #0]
    8d32:	762a      	strb	r2, [r5, #24]
  conn->snd_nxt[1] = iss[1];
    8d34:	785a      	ldrb	r2, [r3, #1]
    8d36:	766a      	strb	r2, [r5, #25]
  conn->snd_nxt[2] = iss[2];
    8d38:	789a      	ldrb	r2, [r3, #2]
    8d3a:	76aa      	strb	r2, [r5, #26]
  conn->snd_nxt[3] = iss[3];
    8d3c:	78db      	ldrb	r3, [r3, #3]
    8d3e:	76eb      	strb	r3, [r5, #27]

  conn->rcv_nxt[0] = 0;
    8d40:	2300      	movs	r3, #0
    8d42:	752b      	strb	r3, [r5, #20]
  conn->rcv_nxt[1] = 0;
    8d44:	756b      	strb	r3, [r5, #21]
  conn->rcv_nxt[2] = 0;
    8d46:	75ab      	strb	r3, [r5, #22]
  conn->rcv_nxt[3] = 0;
    8d48:	75eb      	strb	r3, [r5, #23]

  conn->initialmss = conn->mss = UIP_TCP_MSS;
    8d4a:	22aa      	movs	r2, #170	; 0xaa
    8d4c:	0052      	lsls	r2, r2, #1
    8d4e:	83ea      	strh	r2, [r5, #30]
    8d50:	842a      	strh	r2, [r5, #32]
  
  conn->len = 1;   /* TCP length of the SYN is one. */
    8d52:	3a54      	subs	r2, #84	; 0x54
    8d54:	3aff      	subs	r2, #255	; 0xff
    8d56:	83aa      	strh	r2, [r5, #28]
  conn->nrtx = 0;
    8d58:	3226      	adds	r2, #38	; 0x26
    8d5a:	54ab      	strb	r3, [r5, r2]
  conn->timer = 1; /* Send the SYN next time around. */
    8d5c:	3a01      	subs	r2, #1
    8d5e:	2001      	movs	r0, #1
    8d60:	54a8      	strb	r0, [r5, r2]
  conn->rto = UIP_RTO;
    8d62:	2003      	movs	r0, #3
    8d64:	3a02      	subs	r2, #2
    8d66:	54a8      	strb	r0, [r5, r2]
  conn->sa = 0;
    8d68:	3a02      	subs	r2, #2
    8d6a:	54ab      	strb	r3, [r5, r2]
  conn->sv = 16;   /* Initial value of the RTT variance. */
    8d6c:	3a12      	subs	r2, #18
    8d6e:	3323      	adds	r3, #35	; 0x23
    8d70:	54ea      	strb	r2, [r5, r3]
  conn->lport = uip_htons(lastport);
    8d72:	4b07      	ldr	r3, [pc, #28]	; (8d90 <uip_connect+0x10c>)
    8d74:	881b      	ldrh	r3, [r3, #0]
}
/*---------------------------------------------------------------------------*/
uint16_t
uip_htons(uint16_t val)
{
  return UIP_HTONS(val);
    8d76:	021a      	lsls	r2, r3, #8
    8d78:	0a1b      	lsrs	r3, r3, #8
    8d7a:	4313      	orrs	r3, r2
  conn->nrtx = 0;
  conn->timer = 1; /* Send the SYN next time around. */
  conn->rto = UIP_RTO;
  conn->sa = 0;
  conn->sv = 16;   /* Initial value of the RTT variance. */
  conn->lport = uip_htons(lastport);
    8d7c:	822b      	strh	r3, [r5, #16]
  conn->rport = rport;
    8d7e:	8269      	strh	r1, [r5, #18]
  uip_ipaddr_copy(&conn->ripaddr, ripaddr);
    8d80:	1c28      	adds	r0, r5, #0
    8d82:	9901      	ldr	r1, [sp, #4]
    8d84:	2210      	movs	r2, #16
    8d86:	4b09      	ldr	r3, [pc, #36]	; (8dac <uip_connect+0x128>)
    8d88:	4798      	blx	r3
  
  return conn;
}
    8d8a:	1c28      	adds	r0, r5, #0
    8d8c:	b003      	add	sp, #12
    8d8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    8d90:	20000b1a 	.word	0x20000b1a
    8d94:	00007cff 	.word	0x00007cff
    8d98:	20002e88 	.word	0x20002e88
    8d9c:	20000b1c 	.word	0x20000b1c
    8da0:	20002e78 	.word	0x20002e78
    8da4:	20002ea8 	.word	0x20002ea8
    8da8:	20000b14 	.word	0x20000b14
    8dac:	00010b2f 	.word	0x00010b2f

00008db0 <remove_ext_hdr>:
#endif /* UIP_TCP && UIP_ACTIVE_OPEN */
/*---------------------------------------------------------------------------*/
void
remove_ext_hdr(void)
{
    8db0:	b570      	push	{r4, r5, r6, lr}
  /* Remove ext header before TCP/UDP processing. */
  if(uip_ext_len > 0) {
    8db2:	4b13      	ldr	r3, [pc, #76]	; (8e00 <remove_ext_hdr+0x50>)
    8db4:	781d      	ldrb	r5, [r3, #0]
    8db6:	2d00      	cmp	r5, #0
    8db8:	d021      	beq.n	8dfe <remove_ext_hdr+0x4e>
    PRINTF("Cutting ext-header before processing (extlen: %d, uiplen: %d)\n\r",
	   uip_ext_len, uip_len);
    if(uip_len < UIP_IPH_LEN + uip_ext_len) {
    8dba:	4b12      	ldr	r3, [pc, #72]	; (8e04 <remove_ext_hdr+0x54>)
    8dbc:	881c      	ldrh	r4, [r3, #0]
    8dbe:	1c2b      	adds	r3, r5, #0
    8dc0:	3328      	adds	r3, #40	; 0x28
    8dc2:	429c      	cmp	r4, r3
    8dc4:	da05      	bge.n	8dd2 <remove_ext_hdr+0x22>
      PRINTF("ERROR: uip_len too short compared to ext len\n\r");
      uip_ext_len = 0;
    8dc6:	2300      	movs	r3, #0
    8dc8:	4a0d      	ldr	r2, [pc, #52]	; (8e00 <remove_ext_hdr+0x50>)
    8dca:	7013      	strb	r3, [r2, #0]
      uip_len = 0;
    8dcc:	4a0d      	ldr	r2, [pc, #52]	; (8e04 <remove_ext_hdr+0x54>)
    8dce:	8013      	strh	r3, [r2, #0]
      return;
    8dd0:	e015      	b.n	8dfe <remove_ext_hdr+0x4e>
    }
    memmove(((uint8_t *)UIP_TCP_BUF), (uint8_t *)UIP_TCP_BUF + uip_ext_len,
    8dd2:	480d      	ldr	r0, [pc, #52]	; (8e08 <remove_ext_hdr+0x58>)
    8dd4:	1c06      	adds	r6, r0, #0
    8dd6:	3e28      	subs	r6, #40	; 0x28
    8dd8:	1941      	adds	r1, r0, r5
	    uip_len - UIP_IPH_LEN - uip_ext_len);
    8dda:	1c22      	adds	r2, r4, #0
    8ddc:	3a28      	subs	r2, #40	; 0x28
    8dde:	1b52      	subs	r2, r2, r5
      PRINTF("ERROR: uip_len too short compared to ext len\n\r");
      uip_ext_len = 0;
      uip_len = 0;
      return;
    }
    memmove(((uint8_t *)UIP_TCP_BUF), (uint8_t *)UIP_TCP_BUF + uip_ext_len,
    8de0:	4b0a      	ldr	r3, [pc, #40]	; (8e0c <remove_ext_hdr+0x5c>)
    8de2:	4798      	blx	r3
	    uip_len - UIP_IPH_LEN - uip_ext_len);

    uip_len -= uip_ext_len;
    8de4:	1b64      	subs	r4, r4, r5
    8de6:	b2a4      	uxth	r4, r4
    8de8:	4b06      	ldr	r3, [pc, #24]	; (8e04 <remove_ext_hdr+0x54>)
    8dea:	801c      	strh	r4, [r3, #0]

    /* Update the IP length. */
    UIP_IP_BUF->len[0] = (uip_len - UIP_IPH_LEN) >> 8;
    8dec:	1c23      	adds	r3, r4, #0
    8dee:	3b28      	subs	r3, #40	; 0x28
    8df0:	121b      	asrs	r3, r3, #8
    8df2:	7133      	strb	r3, [r6, #4]
    UIP_IP_BUF->len[1] = (uip_len - UIP_IPH_LEN) & 0xff;
    8df4:	3c28      	subs	r4, #40	; 0x28
    8df6:	7174      	strb	r4, [r6, #5]
    uip_ext_len = 0;
    8df8:	2200      	movs	r2, #0
    8dfa:	4b01      	ldr	r3, [pc, #4]	; (8e00 <remove_ext_hdr+0x50>)
    8dfc:	701a      	strb	r2, [r3, #0]
  }
}
    8dfe:	bd70      	pop	{r4, r5, r6, pc}
    8e00:	20000b12 	.word	0x20000b12
    8e04:	20002cc0 	.word	0x20002cc0
    8e08:	20002cfc 	.word	0x20002cfc
    8e0c:	00010b41 	.word	0x00010b41

00008e10 <uip_unlisten>:
#endif /* UIP_UDP */
/*---------------------------------------------------------------------------*/
#if UIP_TCP
void
uip_unlisten(uint16_t port)
{
    8e10:	b530      	push	{r4, r5, lr}
  for(c = 0; c < UIP_LISTENPORTS; ++c) {
    8e12:	2200      	movs	r2, #0
    8e14:	4b11      	ldr	r3, [pc, #68]	; (8e5c <uip_unlisten+0x4c>)
    8e16:	701a      	strb	r2, [r3, #0]
    if(uip_listenports[c] == port) {
    8e18:	4b11      	ldr	r3, [pc, #68]	; (8e60 <uip_unlisten+0x50>)
    8e1a:	881b      	ldrh	r3, [r3, #0]
    8e1c:	4283      	cmp	r3, r0
    8e1e:	d116      	bne.n	8e4e <uip_unlisten+0x3e>
    8e20:	e006      	b.n	8e30 <uip_unlisten+0x20>
    8e22:	1c1d      	adds	r5, r3, #0
    8e24:	880c      	ldrh	r4, [r1, #0]
    8e26:	4284      	cmp	r4, r0
    8e28:	d108      	bne.n	8e3c <uip_unlisten+0x2c>
    8e2a:	4b0c      	ldr	r3, [pc, #48]	; (8e5c <uip_unlisten+0x4c>)
    8e2c:	701a      	strb	r2, [r3, #0]
    8e2e:	e000      	b.n	8e32 <uip_unlisten+0x22>
    8e30:	2500      	movs	r5, #0
      uip_listenports[c] = 0;
    8e32:	006d      	lsls	r5, r5, #1
    8e34:	2200      	movs	r2, #0
    8e36:	4b0a      	ldr	r3, [pc, #40]	; (8e60 <uip_unlisten+0x50>)
    8e38:	52ea      	strh	r2, [r5, r3]
      return;
    8e3a:	e00e      	b.n	8e5a <uip_unlisten+0x4a>
    8e3c:	1c5a      	adds	r2, r3, #1
    8e3e:	b2d2      	uxtb	r2, r2
    8e40:	3301      	adds	r3, #1
    8e42:	3102      	adds	r1, #2
/*---------------------------------------------------------------------------*/
#if UIP_TCP
void
uip_unlisten(uint16_t port)
{
  for(c = 0; c < UIP_LISTENPORTS; ++c) {
    8e44:	2b14      	cmp	r3, #20
    8e46:	d1ec      	bne.n	8e22 <uip_unlisten+0x12>
    8e48:	4b04      	ldr	r3, [pc, #16]	; (8e5c <uip_unlisten+0x4c>)
    8e4a:	701a      	strb	r2, [r3, #0]
    8e4c:	e005      	b.n	8e5a <uip_unlisten+0x4a>
    8e4e:	2201      	movs	r2, #1
    8e50:	4b02      	ldr	r3, [pc, #8]	; (8e5c <uip_unlisten+0x4c>)
    8e52:	701a      	strb	r2, [r3, #0]
    8e54:	4903      	ldr	r1, [pc, #12]	; (8e64 <uip_unlisten+0x54>)
    8e56:	2301      	movs	r3, #1
    8e58:	e7e3      	b.n	8e22 <uip_unlisten+0x12>
    if(uip_listenports[c] == port) {
      uip_listenports[c] = 0;
      return;
    }
  }
}
    8e5a:	bd30      	pop	{r4, r5, pc}
    8e5c:	20000b1c 	.word	0x20000b1c
    8e60:	20003060 	.word	0x20003060
    8e64:	20003062 	.word	0x20003062

00008e68 <uip_process>:


/*---------------------------------------------------------------------------*/
void
uip_process(uint8_t flag)
{
    8e68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    8e6a:	464f      	mov	r7, r9
    8e6c:	4646      	mov	r6, r8
    8e6e:	b4c0      	push	{r6, r7}
#if UIP_TCP
  register struct uip_conn *uip_connr = uip_conn;
    8e70:	4bc8      	ldr	r3, [pc, #800]	; (9194 <uip_process+0x32c>)
    8e72:	681c      	ldr	r4, [r3, #0]
#endif /* UIP_TCP */
#if UIP_UDP
  if(flag == UIP_UDP_SEND_CONN) {
    8e74:	2804      	cmp	r0, #4
    8e76:	d100      	bne.n	8e7a <uip_process+0x12>
    8e78:	e351      	b.n	951e <uip_process+0x6b6>
    goto udp_send;
  }
#endif /* UIP_UDP */
  uip_sappdata = uip_appdata = &uip_buf[UIP_IPTCPH_LEN + UIP_LLH_LEN];
    8e7a:	4bc7      	ldr	r3, [pc, #796]	; (9198 <uip_process+0x330>)
    8e7c:	4ac7      	ldr	r2, [pc, #796]	; (919c <uip_process+0x334>)
    8e7e:	6013      	str	r3, [r2, #0]
    8e80:	4ac7      	ldr	r2, [pc, #796]	; (91a0 <uip_process+0x338>)
    8e82:	6013      	str	r3, [r2, #0]
   
  /* Check if we were invoked because of a poll request for a
     particular connection. */
  if(flag == UIP_POLL_REQUEST) {
    8e84:	2803      	cmp	r0, #3
    8e86:	d11b      	bne.n	8ec0 <uip_process+0x58>
#if UIP_TCP
    if((uip_connr->tcpstateflags & UIP_TS_MASK) == UIP_ESTABLISHED &&
    8e88:	2325      	movs	r3, #37	; 0x25
    8e8a:	5ce3      	ldrb	r3, [r4, r3]
    8e8c:	220f      	movs	r2, #15
    8e8e:	4013      	ands	r3, r2
    8e90:	2b03      	cmp	r3, #3
    8e92:	d10b      	bne.n	8eac <uip_process+0x44>
    8e94:	8ba3      	ldrh	r3, [r4, #28]
    8e96:	2b00      	cmp	r3, #0
    8e98:	d001      	beq.n	8e9e <uip_process+0x36>
    8e9a:	f001 f86b 	bl	9f74 <uip_process+0x110c>
       !uip_outstanding(uip_connr)) {
      uip_flags = UIP_POLL;
    8e9e:	3a07      	subs	r2, #7
    8ea0:	4bc0      	ldr	r3, [pc, #768]	; (91a4 <uip_process+0x33c>)
    8ea2:	701a      	strb	r2, [r3, #0]
      UIP_APPCALL();
    8ea4:	4bc0      	ldr	r3, [pc, #768]	; (91a8 <uip_process+0x340>)
    8ea6:	4798      	blx	r3
      goto appsend;
    8ea8:	f000 ff1e 	bl	9ce8 <uip_process+0xe80>
#if UIP_ACTIVE_OPEN
    } else if((uip_connr->tcpstateflags & UIP_TS_MASK) == UIP_SYN_SENT) {
    8eac:	2b02      	cmp	r3, #2
    8eae:	d001      	beq.n	8eb4 <uip_process+0x4c>
    8eb0:	f001 f860 	bl	9f74 <uip_process+0x110c>
      /* In the SYN_SENT state, we retransmit out SYN. */
      UIP_TCP_BUF->flags = 0;
    8eb4:	2100      	movs	r1, #0
    8eb6:	3333      	adds	r3, #51	; 0x33
    8eb8:	4abc      	ldr	r2, [pc, #752]	; (91ac <uip_process+0x344>)
    8eba:	54d1      	strb	r1, [r2, r3]
      goto tcp_send_syn;
    8ebc:	f000 fd0c 	bl	98d8 <uip_process+0xa70>
#endif /* UIP_ACTIVE_OPEN */
    }
    goto drop;
#endif /* UIP_TCP */
    /* Check if we were invoked because of the perodic timer fireing. */
  } else if(flag == UIP_TIMER) {
    8ec0:	2802      	cmp	r0, #2
    8ec2:	d000      	beq.n	8ec6 <uip_process+0x5e>
    8ec4:	e086      	b.n	8fd4 <uip_process+0x16c>
    /* Reset the length variables. */
#if UIP_TCP
    uip_len = 0;
    8ec6:	2300      	movs	r3, #0
    8ec8:	4ab9      	ldr	r2, [pc, #740]	; (91b0 <uip_process+0x348>)
    8eca:	8013      	strh	r3, [r2, #0]
    uip_slen = 0;
    8ecc:	4ab9      	ldr	r2, [pc, #740]	; (91b4 <uip_process+0x34c>)
    8ece:	8013      	strh	r3, [r2, #0]
    
    /* Increase the initial sequence number. */
    if(++iss[3] == 0) {
    8ed0:	4ab9      	ldr	r2, [pc, #740]	; (91b8 <uip_process+0x350>)
    8ed2:	78d3      	ldrb	r3, [r2, #3]
    8ed4:	3301      	adds	r3, #1
    8ed6:	b2db      	uxtb	r3, r3
    8ed8:	70d3      	strb	r3, [r2, #3]
    8eda:	2b00      	cmp	r3, #0
    8edc:	d10e      	bne.n	8efc <uip_process+0x94>
      if(++iss[2] == 0) {
    8ede:	7893      	ldrb	r3, [r2, #2]
    8ee0:	3301      	adds	r3, #1
    8ee2:	b2db      	uxtb	r3, r3
    8ee4:	7093      	strb	r3, [r2, #2]
    8ee6:	2b00      	cmp	r3, #0
    8ee8:	d108      	bne.n	8efc <uip_process+0x94>
        if(++iss[1] == 0) {
    8eea:	7853      	ldrb	r3, [r2, #1]
    8eec:	3301      	adds	r3, #1
    8eee:	b2db      	uxtb	r3, r3
    8ef0:	7053      	strb	r3, [r2, #1]
    8ef2:	2b00      	cmp	r3, #0
    8ef4:	d102      	bne.n	8efc <uip_process+0x94>
          ++iss[0];
    8ef6:	7813      	ldrb	r3, [r2, #0]
    8ef8:	3301      	adds	r3, #1
    8efa:	7013      	strb	r3, [r2, #0]
     * Check if the connection is in a state in which we simply wait
     * for the connection to time out. If so, we increase the
     * connection's timer and remove the connection if it times
     * out.
     */
    if(uip_connr->tcpstateflags == UIP_TIME_WAIT ||
    8efc:	2325      	movs	r3, #37	; 0x25
    8efe:	5ce3      	ldrb	r3, [r4, r3]
    8f00:	2202      	movs	r2, #2
    8f02:	1c19      	adds	r1, r3, #0
    8f04:	4391      	bics	r1, r2
    8f06:	1e0a      	subs	r2, r1, #0
    8f08:	2a05      	cmp	r2, #5
    8f0a:	d10d      	bne.n	8f28 <uip_process+0xc0>
       uip_connr->tcpstateflags == UIP_FIN_WAIT_2) {
      ++(uip_connr->timer);
    8f0c:	3221      	adds	r2, #33	; 0x21
    8f0e:	5ca3      	ldrb	r3, [r4, r2]
    8f10:	3301      	adds	r3, #1
    8f12:	b2db      	uxtb	r3, r3
    8f14:	54a3      	strb	r3, [r4, r2]
      if(uip_connr->timer == UIP_TIME_WAIT_TIMEOUT) {
    8f16:	2b78      	cmp	r3, #120	; 0x78
    8f18:	d001      	beq.n	8f1e <uip_process+0xb6>
    8f1a:	f001 f82b 	bl	9f74 <uip_process+0x110c>
        uip_connr->tcpstateflags = UIP_CLOSED;
    8f1e:	2200      	movs	r2, #0
    8f20:	3b53      	subs	r3, #83	; 0x53
    8f22:	54e2      	strb	r2, [r4, r3]
    8f24:	f001 f826 	bl	9f74 <uip_process+0x110c>
      }
    } else if(uip_connr->tcpstateflags != UIP_CLOSED) {
    8f28:	2b00      	cmp	r3, #0
    8f2a:	d101      	bne.n	8f30 <uip_process+0xc8>
    8f2c:	f001 f822 	bl	9f74 <uip_process+0x110c>
      /*
       * If the connection has outstanding data, we increase the
       * connection's timer and see if it has reached the RTO value
       * in which case we retransmit.
       */
      if(uip_outstanding(uip_connr)) {
    8f30:	8ba2      	ldrh	r2, [r4, #28]
    8f32:	2a00      	cmp	r2, #0
    8f34:	d041      	beq.n	8fba <uip_process+0x152>
        if(uip_connr->timer-- == 0) {
    8f36:	2126      	movs	r1, #38	; 0x26
    8f38:	5c62      	ldrb	r2, [r4, r1]
    8f3a:	1e50      	subs	r0, r2, #1
    8f3c:	5460      	strb	r0, [r4, r1]
    8f3e:	2a00      	cmp	r2, #0
    8f40:	d001      	beq.n	8f46 <uip_process+0xde>
    8f42:	f001 f817 	bl	9f74 <uip_process+0x110c>
          if(uip_connr->nrtx == UIP_MAXRTX ||
    8f46:	3227      	adds	r2, #39	; 0x27
    8f48:	5ca2      	ldrb	r2, [r4, r2]
    8f4a:	2a08      	cmp	r2, #8
    8f4c:	d004      	beq.n	8f58 <uip_process+0xf0>
    8f4e:	1e59      	subs	r1, r3, #1
    8f50:	2901      	cmp	r1, #1
    8f52:	d80f      	bhi.n	8f74 <uip_process+0x10c>
             ((uip_connr->tcpstateflags == UIP_SYN_SENT ||
               uip_connr->tcpstateflags == UIP_SYN_RCVD) &&
    8f54:	2a05      	cmp	r2, #5
    8f56:	d10d      	bne.n	8f74 <uip_process+0x10c>
              uip_connr->nrtx == UIP_MAXSYNRTX)) {
            uip_connr->tcpstateflags = UIP_CLOSED;
    8f58:	2200      	movs	r2, #0
    8f5a:	2325      	movs	r3, #37	; 0x25
    8f5c:	54e2      	strb	r2, [r4, r3]
            /*
             * We call UIP_APPCALL() with uip_flags set to
             * UIP_TIMEDOUT to inform the application that the
             * connection has timed out.
             */
            uip_flags = UIP_TIMEDOUT;
    8f5e:	3280      	adds	r2, #128	; 0x80
    8f60:	4b90      	ldr	r3, [pc, #576]	; (91a4 <uip_process+0x33c>)
    8f62:	701a      	strb	r2, [r3, #0]
            UIP_APPCALL();
    8f64:	4b90      	ldr	r3, [pc, #576]	; (91a8 <uip_process+0x340>)
    8f66:	4798      	blx	r3
                  
            /* We also send a reset packet to the remote host. */
            UIP_TCP_BUF->flags = TCP_RST | TCP_ACK;
    8f68:	2114      	movs	r1, #20
    8f6a:	2335      	movs	r3, #53	; 0x35
    8f6c:	4a8f      	ldr	r2, [pc, #572]	; (91ac <uip_process+0x344>)
    8f6e:	54d1      	strb	r1, [r2, r3]
            goto tcp_send_nodata;
    8f70:	f000 ff84 	bl	9e7c <uip_process+0x1014>
          }
               
          /* Exponential backoff. */
          uip_connr->timer = UIP_RTO << (uip_connr->nrtx > 4?
    8f74:	2130      	movs	r1, #48	; 0x30
    8f76:	2a04      	cmp	r2, #4
    8f78:	d802      	bhi.n	8f80 <uip_process+0x118>
    8f7a:	392d      	subs	r1, #45	; 0x2d
    8f7c:	4091      	lsls	r1, r2
    8f7e:	b2c9      	uxtb	r1, r1
    8f80:	2026      	movs	r0, #38	; 0x26
    8f82:	5421      	strb	r1, [r4, r0]
                                         4:
                                         uip_connr->nrtx);
          ++(uip_connr->nrtx);
    8f84:	3201      	adds	r2, #1
    8f86:	2127      	movs	r1, #39	; 0x27
    8f88:	5462      	strb	r2, [r4, r1]
           * data for the retransmit. In SYN_RCVD, we resend the
           * SYNACK that we sent earlier and in LAST_ACK we have to
           * retransmit our FINACK.
           */
          UIP_STAT(++uip_stat.tcp.rexmit);
          switch(uip_connr->tcpstateflags & UIP_TS_MASK) {
    8f8a:	220f      	movs	r2, #15
    8f8c:	4013      	ands	r3, r2
    8f8e:	b2da      	uxtb	r2, r3
    8f90:	2a08      	cmp	r2, #8
    8f92:	d901      	bls.n	8f98 <uip_process+0x130>
    8f94:	f000 ffee 	bl	9f74 <uip_process+0x110c>
    8f98:	009b      	lsls	r3, r3, #2
    8f9a:	4a88      	ldr	r2, [pc, #544]	; (91bc <uip_process+0x354>)
    8f9c:	58d3      	ldr	r3, [r2, r3]
    8f9e:	469f      	mov	pc, r3
              goto tcp_send_synack;
                     
#if UIP_ACTIVE_OPEN
            case UIP_SYN_SENT:
              /* In the SYN_SENT state, we retransmit out SYN. */
              UIP_TCP_BUF->flags = 0;
    8fa0:	2100      	movs	r1, #0
    8fa2:	2335      	movs	r3, #53	; 0x35
    8fa4:	4a81      	ldr	r2, [pc, #516]	; (91ac <uip_process+0x344>)
    8fa6:	54d1      	strb	r1, [r2, r3]
              goto tcp_send_syn;
    8fa8:	f000 fc96 	bl	98d8 <uip_process+0xa70>
               * In the ESTABLISHED state, we call upon the application
               * to do the actual retransmit after which we jump into
               * the code for sending out the packet (the apprexmit
               * label).
               */
              uip_flags = UIP_REXMIT;
    8fac:	2204      	movs	r2, #4
    8fae:	4b7d      	ldr	r3, [pc, #500]	; (91a4 <uip_process+0x33c>)
    8fb0:	701a      	strb	r2, [r3, #0]
              UIP_APPCALL();
    8fb2:	4b7d      	ldr	r3, [pc, #500]	; (91a8 <uip_process+0x340>)
    8fb4:	4798      	blx	r3
              goto apprexmit;
    8fb6:	f000 fed1 	bl	9d5c <uip_process+0xef4>
            case UIP_LAST_ACK:
              /* In all these states we should retransmit a FINACK. */
              goto tcp_send_finack;
          }
        }
      } else if((uip_connr->tcpstateflags & UIP_TS_MASK) == UIP_ESTABLISHED) {
    8fba:	220f      	movs	r2, #15
    8fbc:	4013      	ands	r3, r2
    8fbe:	2b03      	cmp	r3, #3
    8fc0:	d001      	beq.n	8fc6 <uip_process+0x15e>
    8fc2:	f000 ffd7 	bl	9f74 <uip_process+0x110c>
        /*
         * If there was no need for a retransmission, we poll the
         * application for new data.
         */
        uip_flags = UIP_POLL;
    8fc6:	3a07      	subs	r2, #7
    8fc8:	4b76      	ldr	r3, [pc, #472]	; (91a4 <uip_process+0x33c>)
    8fca:	701a      	strb	r2, [r3, #0]
        UIP_APPCALL();
    8fcc:	4b76      	ldr	r3, [pc, #472]	; (91a8 <uip_process+0x340>)
    8fce:	4798      	blx	r3
        goto appsend;
    8fd0:	f000 fe8a 	bl	9ce8 <uip_process+0xe80>
    }
    goto drop;
#endif /* UIP_TCP */
  }
#if UIP_UDP
  if(flag == UIP_UDP_TIMER) {
    8fd4:	2805      	cmp	r0, #5
    8fd6:	d118      	bne.n	900a <uip_process+0x1a2>
    if(uip_udp_conn->lport != 0) {
    8fd8:	4b79      	ldr	r3, [pc, #484]	; (91c0 <uip_process+0x358>)
    8fda:	681b      	ldr	r3, [r3, #0]
    8fdc:	8a1b      	ldrh	r3, [r3, #16]
    8fde:	2b00      	cmp	r3, #0
    8fe0:	d101      	bne.n	8fe6 <uip_process+0x17e>
    8fe2:	f000 ffc7 	bl	9f74 <uip_process+0x110c>
      uip_conn = NULL;
    8fe6:	2300      	movs	r3, #0
    8fe8:	4a6a      	ldr	r2, [pc, #424]	; (9194 <uip_process+0x32c>)
    8fea:	6013      	str	r3, [r2, #0]
      uip_sappdata = uip_appdata = &uip_buf[UIP_IPUDPH_LEN + UIP_LLH_LEN];
    8fec:	4a75      	ldr	r2, [pc, #468]	; (91c4 <uip_process+0x35c>)
    8fee:	496b      	ldr	r1, [pc, #428]	; (919c <uip_process+0x334>)
    8ff0:	600a      	str	r2, [r1, #0]
    8ff2:	496b      	ldr	r1, [pc, #428]	; (91a0 <uip_process+0x338>)
    8ff4:	600a      	str	r2, [r1, #0]
      uip_len = uip_slen = 0;
    8ff6:	4a6f      	ldr	r2, [pc, #444]	; (91b4 <uip_process+0x34c>)
    8ff8:	8013      	strh	r3, [r2, #0]
    8ffa:	4a6d      	ldr	r2, [pc, #436]	; (91b0 <uip_process+0x348>)
    8ffc:	8013      	strh	r3, [r2, #0]
      uip_flags = UIP_POLL;
    8ffe:	2208      	movs	r2, #8
    9000:	4b68      	ldr	r3, [pc, #416]	; (91a4 <uip_process+0x33c>)
    9002:	701a      	strb	r2, [r3, #0]
      UIP_UDP_APPCALL();
    9004:	4b68      	ldr	r3, [pc, #416]	; (91a8 <uip_process+0x340>)
    9006:	4798      	blx	r3
      goto udp_send;
    9008:	e289      	b.n	951e <uip_process+0x6b6>
  UIP_STAT(++uip_stat.ip.recv);
   
  /* Start of IP input header processing code. */
   
  /* Check validity of the IP header. */
  if((UIP_IP_BUF->vtc & 0xf0) != 0x60)  { /* IP version and header length. */
    900a:	4b68      	ldr	r3, [pc, #416]	; (91ac <uip_process+0x344>)
    900c:	781b      	ldrb	r3, [r3, #0]
    900e:	220f      	movs	r2, #15
    9010:	4393      	bics	r3, r2
    9012:	2b60      	cmp	r3, #96	; 0x60
    9014:	d001      	beq.n	901a <uip_process+0x1b2>
    9016:	f000 ffad 	bl	9f74 <uip_process+0x110c>
   * uip_len is larger than the size reported in the IP packet header,
   * the packet has been padded and we set uip_len to the correct
   * value..
   */
   
  if((UIP_IP_BUF->len[0] << 8) + UIP_IP_BUF->len[1] <= uip_len) {
    901a:	4a64      	ldr	r2, [pc, #400]	; (91ac <uip_process+0x344>)
    901c:	7913      	ldrb	r3, [r2, #4]
    901e:	7951      	ldrb	r1, [r2, #5]
    9020:	021a      	lsls	r2, r3, #8
    9022:	1852      	adds	r2, r2, r1
    9024:	4862      	ldr	r0, [pc, #392]	; (91b0 <uip_process+0x348>)
    9026:	8800      	ldrh	r0, [r0, #0]
    9028:	4282      	cmp	r2, r0
    902a:	dd01      	ble.n	9030 <uip_process+0x1c8>
    902c:	f000 ffa2 	bl	9f74 <uip_process+0x110c>
    9030:	3128      	adds	r1, #40	; 0x28
    uip_len = (UIP_IP_BUF->len[0] << 8) + UIP_IP_BUF->len[1] + UIP_IPH_LEN;
    9032:	021b      	lsls	r3, r3, #8
    9034:	18cb      	adds	r3, r1, r3
    9036:	4a5e      	ldr	r2, [pc, #376]	; (91b0 <uip_process+0x348>)
    9038:	8013      	strh	r3, [r2, #0]
  PRINT6ADDR(&UIP_IP_BUF->srcipaddr);
  PRINTF(" to ");
  PRINT6ADDR(&UIP_IP_BUF->destipaddr);
  PRINTF("\n\r");

  if(uip_is_addr_mcast(&UIP_IP_BUF->srcipaddr)){
    903a:	4b5c      	ldr	r3, [pc, #368]	; (91ac <uip_process+0x344>)
    903c:	7a1b      	ldrb	r3, [r3, #8]
    903e:	2bff      	cmp	r3, #255	; 0xff
    9040:	d101      	bne.n	9046 <uip_process+0x1de>
    9042:	f000 ff97 	bl	9f74 <uip_process+0x110c>
  /*
   * Next header field processing. In IPv6, we can have extension headers,
   * if present, the Hop-by-Hop Option must be processed before forwarding
   * the packet.
   */
  uip_next_hdr = &UIP_IP_BUF->proto;
    9046:	4b60      	ldr	r3, [pc, #384]	; (91c8 <uip_process+0x360>)
    9048:	4a60      	ldr	r2, [pc, #384]	; (91cc <uip_process+0x364>)
    904a:	6013      	str	r3, [r2, #0]
  uip_ext_len = 0;
    904c:	2200      	movs	r2, #0
    904e:	4960      	ldr	r1, [pc, #384]	; (91d0 <uip_process+0x368>)
    9050:	700a      	strb	r2, [r1, #0]
  uip_ext_bitmap = 0;
    9052:	4960      	ldr	r1, [pc, #384]	; (91d4 <uip_process+0x36c>)
    9054:	700a      	strb	r2, [r1, #0]
  if(*uip_next_hdr == UIP_PROTO_HBHO) {
    9056:	781b      	ldrb	r3, [r3, #0]
    9058:	2b00      	cmp	r3, #0
    905a:	d11c      	bne.n	9096 <uip_process+0x22e>
#if UIP_CONF_IPV6_CHECKS
    uip_ext_bitmap |= UIP_EXT_HDR_BITMAP_HBHO;
    905c:	3201      	adds	r2, #1
    905e:	700a      	strb	r2, [r1, #0]
#endif /* UIP_CONF_IPV6_CHECKS */
    switch(ext_hdr_options_process()) {
    9060:	4b5d      	ldr	r3, [pc, #372]	; (91d8 <uip_process+0x370>)
    9062:	4798      	blx	r3
    9064:	2801      	cmp	r0, #1
    9066:	d101      	bne.n	906c <uip_process+0x204>
    9068:	f000 ff84 	bl	9f74 <uip_process+0x110c>
    906c:	2800      	cmp	r0, #0
    906e:	d004      	beq.n	907a <uip_process+0x212>
    9070:	2802      	cmp	r0, #2
    9072:	d101      	bne.n	9078 <uip_process+0x210>
    9074:	f000 ff62 	bl	9f3c <uip_process+0x10d4>
    9078:	e00d      	b.n	9096 <uip_process+0x22e>
      case 0:
        /* continue */
        uip_next_hdr = &UIP_EXT_BUF->next;
    907a:	4855      	ldr	r0, [pc, #340]	; (91d0 <uip_process+0x368>)
    907c:	7803      	ldrb	r3, [r0, #0]
    907e:	1c19      	adds	r1, r3, #0
    9080:	3128      	adds	r1, #40	; 0x28
    9082:	4a4a      	ldr	r2, [pc, #296]	; (91ac <uip_process+0x344>)
    9084:	1889      	adds	r1, r1, r2
    9086:	4a51      	ldr	r2, [pc, #324]	; (91cc <uip_process+0x364>)
    9088:	6011      	str	r1, [r2, #0]
    908a:	3308      	adds	r3, #8
    908c:	1c1a      	adds	r2, r3, #0
        uip_ext_len += (UIP_EXT_BUF->len << 3) + 8;
    908e:	784b      	ldrb	r3, [r1, #1]
    9090:	00db      	lsls	r3, r3, #3
    9092:	18d3      	adds	r3, r2, r3
    9094:	7003      	strb	r3, [r0, #0]
    }
  }
#endif /* UIP_IPV6_CONF_MULTICAST */

  /* TBD Some Parameter problem messages */
  if(!uip_ds6_is_my_addr(&UIP_IP_BUF->destipaddr) &&
    9096:	4851      	ldr	r0, [pc, #324]	; (91dc <uip_process+0x374>)
    9098:	4b51      	ldr	r3, [pc, #324]	; (91e0 <uip_process+0x378>)
    909a:	4798      	blx	r3
    909c:	2800      	cmp	r0, #0
    909e:	d104      	bne.n	90aa <uip_process+0x242>
     !uip_ds6_is_my_maddr(&UIP_IP_BUF->destipaddr)) {
    90a0:	484e      	ldr	r0, [pc, #312]	; (91dc <uip_process+0x374>)
    90a2:	4b50      	ldr	r3, [pc, #320]	; (91e4 <uip_process+0x37c>)
    90a4:	4798      	blx	r3
    }
  }
#endif /* UIP_IPV6_CONF_MULTICAST */

  /* TBD Some Parameter problem messages */
  if(!uip_ds6_is_my_addr(&UIP_IP_BUF->destipaddr) &&
    90a6:	2800      	cmp	r0, #0
    90a8:	d001      	beq.n	90ae <uip_process+0x246>
#if UIP_CONF_IPV6_MULTICAST
  process:
#endif

  while(1) {
    switch(*uip_next_hdr){
    90aa:	4c48      	ldr	r4, [pc, #288]	; (91cc <uip_process+0x364>)
    90ac:	e10d      	b.n	92ca <uip_process+0x462>
#endif /* UIP_IPV6_CONF_MULTICAST */

  /* TBD Some Parameter problem messages */
  if(!uip_ds6_is_my_addr(&UIP_IP_BUF->destipaddr) &&
     !uip_ds6_is_my_maddr(&UIP_IP_BUF->destipaddr)) {
    if(!uip_is_addr_mcast(&UIP_IP_BUF->destipaddr) &&
    90ae:	4b3f      	ldr	r3, [pc, #252]	; (91ac <uip_process+0x344>)
    90b0:	7e1b      	ldrb	r3, [r3, #24]
    90b2:	2bff      	cmp	r3, #255	; 0xff
    90b4:	d100      	bne.n	90b8 <uip_process+0x250>
    90b6:	e0a1      	b.n	91fc <uip_process+0x394>
    90b8:	2bfe      	cmp	r3, #254	; 0xfe
    90ba:	d104      	bne.n	90c6 <uip_process+0x25e>
       !uip_is_addr_link_local(&UIP_IP_BUF->destipaddr) &&
    90bc:	4a3b      	ldr	r2, [pc, #236]	; (91ac <uip_process+0x344>)
    90be:	7e52      	ldrb	r2, [r2, #25]
    90c0:	2a80      	cmp	r2, #128	; 0x80
    90c2:	d100      	bne.n	90c6 <uip_process+0x25e>
    90c4:	e09a      	b.n	91fc <uip_process+0x394>
       !uip_is_addr_link_local(&UIP_IP_BUF->srcipaddr) &&
    90c6:	4a39      	ldr	r2, [pc, #228]	; (91ac <uip_process+0x344>)

  /* TBD Some Parameter problem messages */
  if(!uip_ds6_is_my_addr(&UIP_IP_BUF->destipaddr) &&
     !uip_ds6_is_my_maddr(&UIP_IP_BUF->destipaddr)) {
    if(!uip_is_addr_mcast(&UIP_IP_BUF->destipaddr) &&
       !uip_is_addr_link_local(&UIP_IP_BUF->destipaddr) &&
    90c8:	7a12      	ldrb	r2, [r2, #8]
    90ca:	2afe      	cmp	r2, #254	; 0xfe
    90cc:	d104      	bne.n	90d8 <uip_process+0x270>
       !uip_is_addr_link_local(&UIP_IP_BUF->srcipaddr) &&
    90ce:	4a37      	ldr	r2, [pc, #220]	; (91ac <uip_process+0x344>)
    90d0:	7a52      	ldrb	r2, [r2, #9]
    90d2:	2a80      	cmp	r2, #128	; 0x80
    90d4:	d100      	bne.n	90d8 <uip_process+0x270>
    90d6:	e09d      	b.n	9214 <uip_process+0x3ac>
       !uip_is_addr_unspecified(&UIP_IP_BUF->srcipaddr) &&
    90d8:	4a34      	ldr	r2, [pc, #208]	; (91ac <uip_process+0x344>)
  /* TBD Some Parameter problem messages */
  if(!uip_ds6_is_my_addr(&UIP_IP_BUF->destipaddr) &&
     !uip_ds6_is_my_maddr(&UIP_IP_BUF->destipaddr)) {
    if(!uip_is_addr_mcast(&UIP_IP_BUF->destipaddr) &&
       !uip_is_addr_link_local(&UIP_IP_BUF->destipaddr) &&
       !uip_is_addr_link_local(&UIP_IP_BUF->srcipaddr) &&
    90da:	8912      	ldrh	r2, [r2, #8]
    90dc:	2a00      	cmp	r2, #0
    90de:	d11b      	bne.n	9118 <uip_process+0x2b0>
       !uip_is_addr_unspecified(&UIP_IP_BUF->srcipaddr) &&
    90e0:	4a32      	ldr	r2, [pc, #200]	; (91ac <uip_process+0x344>)
    90e2:	8952      	ldrh	r2, [r2, #10]
    90e4:	2a00      	cmp	r2, #0
    90e6:	d117      	bne.n	9118 <uip_process+0x2b0>
    90e8:	4a30      	ldr	r2, [pc, #192]	; (91ac <uip_process+0x344>)
    90ea:	8992      	ldrh	r2, [r2, #12]
    90ec:	2a00      	cmp	r2, #0
    90ee:	d113      	bne.n	9118 <uip_process+0x2b0>
    90f0:	4a2e      	ldr	r2, [pc, #184]	; (91ac <uip_process+0x344>)
    90f2:	89d2      	ldrh	r2, [r2, #14]
    90f4:	2a00      	cmp	r2, #0
    90f6:	d10f      	bne.n	9118 <uip_process+0x2b0>
    90f8:	4a2c      	ldr	r2, [pc, #176]	; (91ac <uip_process+0x344>)
    90fa:	8a12      	ldrh	r2, [r2, #16]
    90fc:	2a00      	cmp	r2, #0
    90fe:	d10b      	bne.n	9118 <uip_process+0x2b0>
    9100:	4a2a      	ldr	r2, [pc, #168]	; (91ac <uip_process+0x344>)
    9102:	8a52      	ldrh	r2, [r2, #18]
    9104:	2a00      	cmp	r2, #0
    9106:	d107      	bne.n	9118 <uip_process+0x2b0>
    9108:	4a28      	ldr	r2, [pc, #160]	; (91ac <uip_process+0x344>)
    910a:	8a92      	ldrh	r2, [r2, #20]
    910c:	2a00      	cmp	r2, #0
    910e:	d103      	bne.n	9118 <uip_process+0x2b0>
    9110:	4a26      	ldr	r2, [pc, #152]	; (91ac <uip_process+0x344>)
    9112:	8ad2      	ldrh	r2, [r2, #22]
    9114:	2a00      	cmp	r2, #0
    9116:	d071      	beq.n	91fc <uip_process+0x394>
       !uip_is_addr_loopback(&UIP_IP_BUF->destipaddr)) {
    9118:	4a24      	ldr	r2, [pc, #144]	; (91ac <uip_process+0x344>)
  if(!uip_ds6_is_my_addr(&UIP_IP_BUF->destipaddr) &&
     !uip_ds6_is_my_maddr(&UIP_IP_BUF->destipaddr)) {
    if(!uip_is_addr_mcast(&UIP_IP_BUF->destipaddr) &&
       !uip_is_addr_link_local(&UIP_IP_BUF->destipaddr) &&
       !uip_is_addr_link_local(&UIP_IP_BUF->srcipaddr) &&
       !uip_is_addr_unspecified(&UIP_IP_BUF->srcipaddr) &&
    911a:	8b12      	ldrh	r2, [r2, #24]
    911c:	2a00      	cmp	r2, #0
    911e:	d120      	bne.n	9162 <uip_process+0x2fa>
       !uip_is_addr_loopback(&UIP_IP_BUF->destipaddr)) {
    9120:	4a22      	ldr	r2, [pc, #136]	; (91ac <uip_process+0x344>)
    9122:	8b52      	ldrh	r2, [r2, #26]
    9124:	2a00      	cmp	r2, #0
    9126:	d11c      	bne.n	9162 <uip_process+0x2fa>
    9128:	4a20      	ldr	r2, [pc, #128]	; (91ac <uip_process+0x344>)
    912a:	8b92      	ldrh	r2, [r2, #28]
    912c:	2a00      	cmp	r2, #0
    912e:	d118      	bne.n	9162 <uip_process+0x2fa>
    9130:	4a1e      	ldr	r2, [pc, #120]	; (91ac <uip_process+0x344>)
    9132:	8bd2      	ldrh	r2, [r2, #30]
    9134:	2a00      	cmp	r2, #0
    9136:	d114      	bne.n	9162 <uip_process+0x2fa>
    9138:	4a1c      	ldr	r2, [pc, #112]	; (91ac <uip_process+0x344>)
    913a:	8c12      	ldrh	r2, [r2, #32]
    913c:	2a00      	cmp	r2, #0
    913e:	d110      	bne.n	9162 <uip_process+0x2fa>
    9140:	4a1a      	ldr	r2, [pc, #104]	; (91ac <uip_process+0x344>)
    9142:	8c52      	ldrh	r2, [r2, #34]	; 0x22
    9144:	2a00      	cmp	r2, #0
    9146:	d10c      	bne.n	9162 <uip_process+0x2fa>
    9148:	4a18      	ldr	r2, [pc, #96]	; (91ac <uip_process+0x344>)
    914a:	8c92      	ldrh	r2, [r2, #36]	; 0x24
    914c:	2a00      	cmp	r2, #0
    914e:	d108      	bne.n	9162 <uip_process+0x2fa>
    9150:	3226      	adds	r2, #38	; 0x26
    9152:	4916      	ldr	r1, [pc, #88]	; (91ac <uip_process+0x344>)
    9154:	5c8a      	ldrb	r2, [r1, r2]
    9156:	2a00      	cmp	r2, #0
    9158:	d103      	bne.n	9162 <uip_process+0x2fa>
    915a:	3227      	adds	r2, #39	; 0x27
    915c:	5c8a      	ldrb	r2, [r1, r2]
    915e:	2a01      	cmp	r2, #1
    9160:	d04c      	beq.n	91fc <uip_process+0x394>


      /* Check MTU */
      if(uip_len > UIP_LINK_MTU) {
    9162:	4b13      	ldr	r3, [pc, #76]	; (91b0 <uip_process+0x348>)
    9164:	881a      	ldrh	r2, [r3, #0]
    9166:	23a0      	movs	r3, #160	; 0xa0
    9168:	00db      	lsls	r3, r3, #3
    916a:	429a      	cmp	r2, r3
    916c:	d906      	bls.n	917c <uip_process+0x314>
        uip_icmp6_error_output(ICMP6_PACKET_TOO_BIG, 0, UIP_LINK_MTU);
    916e:	2002      	movs	r0, #2
    9170:	2100      	movs	r1, #0
    9172:	1c1a      	adds	r2, r3, #0
    9174:	4b1c      	ldr	r3, [pc, #112]	; (91e8 <uip_process+0x380>)
    9176:	4798      	blx	r3
        UIP_STAT(++uip_stat.ip.drop);
        goto send;
    9178:	f000 fee0 	bl	9f3c <uip_process+0x10d4>
      }
      /* Check Hop Limit */
      if(UIP_IP_BUF->ttl <= 1) {
    917c:	4b0b      	ldr	r3, [pc, #44]	; (91ac <uip_process+0x344>)
    917e:	79db      	ldrb	r3, [r3, #7]
    9180:	2b01      	cmp	r3, #1
    9182:	d833      	bhi.n	91ec <uip_process+0x384>
        uip_icmp6_error_output(ICMP6_TIME_EXCEEDED,
    9184:	2003      	movs	r0, #3
    9186:	2100      	movs	r1, #0
    9188:	1c0a      	adds	r2, r1, #0
    918a:	4b17      	ldr	r3, [pc, #92]	; (91e8 <uip_process+0x380>)
    918c:	4798      	blx	r3
                               ICMP6_TIME_EXCEED_TRANSIT, 0);
        UIP_STAT(++uip_stat.ip.drop);
        goto send;
    918e:	f000 fed5 	bl	9f3c <uip_process+0x10d4>
    9192:	46c0      	nop			; (mov r8, r8)
    9194:	20002e74 	.word	0x20002e74
    9198:	20002d10 	.word	0x20002d10
    919c:	20002e70 	.word	0x20002e70
    91a0:	20002cc4 	.word	0x20002cc4
    91a4:	20002e64 	.word	0x20002e64
    91a8:	0000aa79 	.word	0x0000aa79
    91ac:	20002cd4 	.word	0x20002cd4
    91b0:	20002cc0 	.word	0x20002cc0
    91b4:	20003088 	.word	0x20003088
    91b8:	20000b14 	.word	0x20000b14
    91bc:	00012c30 	.word	0x00012c30
    91c0:	20002e6c 	.word	0x20002e6c
    91c4:	20002d04 	.word	0x20002d04
    91c8:	20002cda 	.word	0x20002cda
    91cc:	20002e68 	.word	0x20002e68
    91d0:	20000b12 	.word	0x20000b12
    91d4:	20000b13 	.word	0x20000b13
    91d8:	00008a15 	.word	0x00008a15
    91dc:	20002cec 	.word	0x20002cec
    91e0:	00007449 	.word	0x00007449
    91e4:	00007619 	.word	0x00007619
    91e8:	00007d0d 	.word	0x00007d0d
      }

#if UIP_CONF_IPV6_RPL
      rpl_update_header_empty();
    91ec:	4bac      	ldr	r3, [pc, #688]	; (94a0 <uip_process+0x638>)
    91ee:	4798      	blx	r3
#endif /* UIP_CONF_IPV6_RPL */

      UIP_IP_BUF->ttl = UIP_IP_BUF->ttl - 1;
    91f0:	4aac      	ldr	r2, [pc, #688]	; (94a4 <uip_process+0x63c>)
    91f2:	79d3      	ldrb	r3, [r2, #7]
    91f4:	3b01      	subs	r3, #1
    91f6:	71d3      	strb	r3, [r2, #7]
      PRINTF("Forwarding packet to ");
      PRINT6ADDR(&UIP_IP_BUF->destipaddr);
      PRINTF("\n\r");
      UIP_STAT(++uip_stat.ip.forwarded);
      goto send;
    91f8:	f000 fea0 	bl	9f3c <uip_process+0x10d4>
    } else {
      if((uip_is_addr_link_local(&UIP_IP_BUF->srcipaddr)) &&
    91fc:	4aa9      	ldr	r2, [pc, #676]	; (94a4 <uip_process+0x63c>)
    91fe:	7a12      	ldrb	r2, [r2, #8]
    9200:	2afe      	cmp	r2, #254	; 0xfe
    9202:	d001      	beq.n	9208 <uip_process+0x3a0>
    9204:	f000 feb6 	bl	9f74 <uip_process+0x110c>
    9208:	4aa6      	ldr	r2, [pc, #664]	; (94a4 <uip_process+0x63c>)
    920a:	7a52      	ldrb	r2, [r2, #9]
    920c:	2a80      	cmp	r2, #128	; 0x80
    920e:	d001      	beq.n	9214 <uip_process+0x3ac>
    9210:	f000 feb0 	bl	9f74 <uip_process+0x110c>
         (!uip_is_addr_unspecified(&UIP_IP_BUF->srcipaddr)) &&
    9214:	4aa3      	ldr	r2, [pc, #652]	; (94a4 <uip_process+0x63c>)
      PRINT6ADDR(&UIP_IP_BUF->destipaddr);
      PRINTF("\n\r");
      UIP_STAT(++uip_stat.ip.forwarded);
      goto send;
    } else {
      if((uip_is_addr_link_local(&UIP_IP_BUF->srcipaddr)) &&
    9216:	8912      	ldrh	r2, [r2, #8]
    9218:	2a00      	cmp	r2, #0
    921a:	d11d      	bne.n	9258 <uip_process+0x3f0>
         (!uip_is_addr_unspecified(&UIP_IP_BUF->srcipaddr)) &&
    921c:	4aa1      	ldr	r2, [pc, #644]	; (94a4 <uip_process+0x63c>)
    921e:	8952      	ldrh	r2, [r2, #10]
    9220:	2a00      	cmp	r2, #0
    9222:	d119      	bne.n	9258 <uip_process+0x3f0>
    9224:	4a9f      	ldr	r2, [pc, #636]	; (94a4 <uip_process+0x63c>)
    9226:	8992      	ldrh	r2, [r2, #12]
    9228:	2a00      	cmp	r2, #0
    922a:	d115      	bne.n	9258 <uip_process+0x3f0>
    922c:	4a9d      	ldr	r2, [pc, #628]	; (94a4 <uip_process+0x63c>)
    922e:	89d2      	ldrh	r2, [r2, #14]
    9230:	2a00      	cmp	r2, #0
    9232:	d111      	bne.n	9258 <uip_process+0x3f0>
    9234:	4a9b      	ldr	r2, [pc, #620]	; (94a4 <uip_process+0x63c>)
    9236:	8a12      	ldrh	r2, [r2, #16]
    9238:	2a00      	cmp	r2, #0
    923a:	d10d      	bne.n	9258 <uip_process+0x3f0>
    923c:	4a99      	ldr	r2, [pc, #612]	; (94a4 <uip_process+0x63c>)
    923e:	8a52      	ldrh	r2, [r2, #18]
    9240:	2a00      	cmp	r2, #0
    9242:	d109      	bne.n	9258 <uip_process+0x3f0>
    9244:	4a97      	ldr	r2, [pc, #604]	; (94a4 <uip_process+0x63c>)
    9246:	8a92      	ldrh	r2, [r2, #20]
    9248:	2a00      	cmp	r2, #0
    924a:	d105      	bne.n	9258 <uip_process+0x3f0>
    924c:	4a95      	ldr	r2, [pc, #596]	; (94a4 <uip_process+0x63c>)
    924e:	8ad2      	ldrh	r2, [r2, #22]
    9250:	2a00      	cmp	r2, #0
    9252:	d101      	bne.n	9258 <uip_process+0x3f0>
    9254:	f000 fe8e 	bl	9f74 <uip_process+0x110c>
         (!uip_is_addr_loopback(&UIP_IP_BUF->destipaddr)) &&
    9258:	4a92      	ldr	r2, [pc, #584]	; (94a4 <uip_process+0x63c>)
      PRINTF("\n\r");
      UIP_STAT(++uip_stat.ip.forwarded);
      goto send;
    } else {
      if((uip_is_addr_link_local(&UIP_IP_BUF->srcipaddr)) &&
         (!uip_is_addr_unspecified(&UIP_IP_BUF->srcipaddr)) &&
    925a:	8b12      	ldrh	r2, [r2, #24]
    925c:	2a00      	cmp	r2, #0
    925e:	d122      	bne.n	92a6 <uip_process+0x43e>
         (!uip_is_addr_loopback(&UIP_IP_BUF->destipaddr)) &&
    9260:	4a90      	ldr	r2, [pc, #576]	; (94a4 <uip_process+0x63c>)
    9262:	8b52      	ldrh	r2, [r2, #26]
    9264:	2a00      	cmp	r2, #0
    9266:	d11e      	bne.n	92a6 <uip_process+0x43e>
    9268:	4a8e      	ldr	r2, [pc, #568]	; (94a4 <uip_process+0x63c>)
    926a:	8b92      	ldrh	r2, [r2, #28]
    926c:	2a00      	cmp	r2, #0
    926e:	d11a      	bne.n	92a6 <uip_process+0x43e>
    9270:	4a8c      	ldr	r2, [pc, #560]	; (94a4 <uip_process+0x63c>)
    9272:	8bd2      	ldrh	r2, [r2, #30]
    9274:	2a00      	cmp	r2, #0
    9276:	d116      	bne.n	92a6 <uip_process+0x43e>
    9278:	4a8a      	ldr	r2, [pc, #552]	; (94a4 <uip_process+0x63c>)
    927a:	8c12      	ldrh	r2, [r2, #32]
    927c:	2a00      	cmp	r2, #0
    927e:	d112      	bne.n	92a6 <uip_process+0x43e>
    9280:	4a88      	ldr	r2, [pc, #544]	; (94a4 <uip_process+0x63c>)
    9282:	8c52      	ldrh	r2, [r2, #34]	; 0x22
    9284:	2a00      	cmp	r2, #0
    9286:	d10e      	bne.n	92a6 <uip_process+0x43e>
    9288:	4a86      	ldr	r2, [pc, #536]	; (94a4 <uip_process+0x63c>)
    928a:	8c92      	ldrh	r2, [r2, #36]	; 0x24
    928c:	2a00      	cmp	r2, #0
    928e:	d10a      	bne.n	92a6 <uip_process+0x43e>
    9290:	3226      	adds	r2, #38	; 0x26
    9292:	4984      	ldr	r1, [pc, #528]	; (94a4 <uip_process+0x63c>)
    9294:	5c8a      	ldrb	r2, [r1, r2]
    9296:	2a00      	cmp	r2, #0
    9298:	d105      	bne.n	92a6 <uip_process+0x43e>
    929a:	3227      	adds	r2, #39	; 0x27
    929c:	5c8a      	ldrb	r2, [r1, r2]
    929e:	2a01      	cmp	r2, #1
    92a0:	d101      	bne.n	92a6 <uip_process+0x43e>
    92a2:	f000 fe67 	bl	9f74 <uip_process+0x110c>
    92a6:	2bff      	cmp	r3, #255	; 0xff
    92a8:	d101      	bne.n	92ae <uip_process+0x446>
    92aa:	f000 fe63 	bl	9f74 <uip_process+0x110c>
         (!uip_is_addr_mcast(&UIP_IP_BUF->destipaddr)) &&
         (!uip_ds6_is_addr_onlink((&UIP_IP_BUF->destipaddr)))) {
    92ae:	487e      	ldr	r0, [pc, #504]	; (94a8 <uip_process+0x640>)
    92b0:	4b7e      	ldr	r3, [pc, #504]	; (94ac <uip_process+0x644>)
    92b2:	4798      	blx	r3
      goto send;
    } else {
      if((uip_is_addr_link_local(&UIP_IP_BUF->srcipaddr)) &&
         (!uip_is_addr_unspecified(&UIP_IP_BUF->srcipaddr)) &&
         (!uip_is_addr_loopback(&UIP_IP_BUF->destipaddr)) &&
         (!uip_is_addr_mcast(&UIP_IP_BUF->destipaddr)) &&
    92b4:	2800      	cmp	r0, #0
    92b6:	d001      	beq.n	92bc <uip_process+0x454>
    92b8:	f000 fe5c 	bl	9f74 <uip_process+0x110c>
         (!uip_ds6_is_addr_onlink((&UIP_IP_BUF->destipaddr)))) {
        PRINTF("LL source address with off link destination, dropping\n\r");
        uip_icmp6_error_output(ICMP6_DST_UNREACH,
    92bc:	3001      	adds	r0, #1
    92be:	2102      	movs	r1, #2
    92c0:	2200      	movs	r2, #0
    92c2:	4b7b      	ldr	r3, [pc, #492]	; (94b0 <uip_process+0x648>)
    92c4:	4798      	blx	r3
                               ICMP6_DST_UNREACH_NOTNEIGHBOR, 0);
        goto send;
    92c6:	f000 fe39 	bl	9f3c <uip_process+0x10d4>
#if UIP_CONF_IPV6_MULTICAST
  process:
#endif

  while(1) {
    switch(*uip_next_hdr){
    92ca:	6822      	ldr	r2, [r4, #0]
    92cc:	7813      	ldrb	r3, [r2, #0]
    92ce:	2b3c      	cmp	r3, #60	; 0x3c
    92d0:	d875      	bhi.n	93be <uip_process+0x556>
    92d2:	009b      	lsls	r3, r3, #2
    92d4:	4977      	ldr	r1, [pc, #476]	; (94b4 <uip_process+0x64c>)
    92d6:	58cb      	ldr	r3, [r1, r3]
    92d8:	469f      	mov	pc, r3
      case UIP_PROTO_HBHO:
        PRINTF("Processing hbh header\n\r");
        /* Hop by hop option header */
#if UIP_CONF_IPV6_CHECKS
        /* Hop by hop option header. If we saw one HBH already, drop */
        if(uip_ext_bitmap & UIP_EXT_HDR_BITMAP_HBHO) {
    92da:	4b77      	ldr	r3, [pc, #476]	; (94b8 <uip_process+0x650>)
    92dc:	7819      	ldrb	r1, [r3, #0]
    92de:	07cb      	lsls	r3, r1, #31
    92e0:	d46d      	bmi.n	93be <uip_process+0x556>
          goto bad_hdr;
        } else {
          uip_ext_bitmap |= UIP_EXT_HDR_BITMAP_HBHO;
    92e2:	2301      	movs	r3, #1
    92e4:	430b      	orrs	r3, r1
    92e6:	4a74      	ldr	r2, [pc, #464]	; (94b8 <uip_process+0x650>)
    92e8:	7013      	strb	r3, [r2, #0]
        }
#endif /*UIP_CONF_IPV6_CHECKS*/
        switch(ext_hdr_options_process()) {
    92ea:	4b74      	ldr	r3, [pc, #464]	; (94bc <uip_process+0x654>)
    92ec:	4798      	blx	r3
    92ee:	2801      	cmp	r0, #1
    92f0:	d101      	bne.n	92f6 <uip_process+0x48e>
    92f2:	f000 fe3f 	bl	9f74 <uip_process+0x110c>
    92f6:	2800      	cmp	r0, #0
    92f8:	d004      	beq.n	9304 <uip_process+0x49c>
    92fa:	2802      	cmp	r0, #2
    92fc:	d101      	bne.n	9302 <uip_process+0x49a>
    92fe:	f000 fe1d 	bl	9f3c <uip_process+0x10d4>
    9302:	e7e2      	b.n	92ca <uip_process+0x462>
          case 0:
            /*continue*/
            uip_next_hdr = &UIP_EXT_BUF->next;
    9304:	486e      	ldr	r0, [pc, #440]	; (94c0 <uip_process+0x658>)
    9306:	7803      	ldrb	r3, [r0, #0]
    9308:	1c19      	adds	r1, r3, #0
    930a:	3128      	adds	r1, #40	; 0x28
    930c:	4a65      	ldr	r2, [pc, #404]	; (94a4 <uip_process+0x63c>)
    930e:	1889      	adds	r1, r1, r2
    9310:	4a6c      	ldr	r2, [pc, #432]	; (94c4 <uip_process+0x65c>)
    9312:	6011      	str	r1, [r2, #0]
    9314:	3308      	adds	r3, #8
    9316:	1c1a      	adds	r2, r3, #0
            uip_ext_len += (UIP_EXT_BUF->len << 3) + 8;
    9318:	784b      	ldrb	r3, [r1, #1]
    931a:	00db      	lsls	r3, r3, #3
    931c:	18d3      	adds	r3, r2, r3
    931e:	7003      	strb	r3, [r0, #0]
            break;
    9320:	e7d3      	b.n	92ca <uip_process+0x462>
        break;
      case UIP_PROTO_DESTO:
#if UIP_CONF_IPV6_CHECKS
        /* Destination option header. if we saw two already, drop */
        PRINTF("Processing desto header\n\r");
        if(uip_ext_bitmap & UIP_EXT_HDR_BITMAP_DESTO1) {
    9322:	4b65      	ldr	r3, [pc, #404]	; (94b8 <uip_process+0x650>)
    9324:	781b      	ldrb	r3, [r3, #0]
    9326:	0799      	lsls	r1, r3, #30
    9328:	d506      	bpl.n	9338 <uip_process+0x4d0>
          if(uip_ext_bitmap & UIP_EXT_HDR_BITMAP_DESTO2) {
    932a:	0659      	lsls	r1, r3, #25
    932c:	d447      	bmi.n	93be <uip_process+0x556>
            goto bad_hdr;
          } else{
            uip_ext_bitmap |= UIP_EXT_HDR_BITMAP_DESTO2;
    932e:	2240      	movs	r2, #64	; 0x40
    9330:	4313      	orrs	r3, r2
    9332:	4a61      	ldr	r2, [pc, #388]	; (94b8 <uip_process+0x650>)
    9334:	7013      	strb	r3, [r2, #0]
    9336:	e003      	b.n	9340 <uip_process+0x4d8>
          }
        } else {
          uip_ext_bitmap |= UIP_EXT_HDR_BITMAP_DESTO1;
    9338:	2202      	movs	r2, #2
    933a:	4313      	orrs	r3, r2
    933c:	4a5e      	ldr	r2, [pc, #376]	; (94b8 <uip_process+0x650>)
    933e:	7013      	strb	r3, [r2, #0]
        }
#endif /*UIP_CONF_IPV6_CHECKS*/
        switch(ext_hdr_options_process()) {
    9340:	4b5e      	ldr	r3, [pc, #376]	; (94bc <uip_process+0x654>)
    9342:	4798      	blx	r3
    9344:	2801      	cmp	r0, #1
    9346:	d101      	bne.n	934c <uip_process+0x4e4>
    9348:	f000 fe14 	bl	9f74 <uip_process+0x110c>
    934c:	2800      	cmp	r0, #0
    934e:	d004      	beq.n	935a <uip_process+0x4f2>
    9350:	2802      	cmp	r0, #2
    9352:	d101      	bne.n	9358 <uip_process+0x4f0>
    9354:	f000 fdf2 	bl	9f3c <uip_process+0x10d4>
    9358:	e7b7      	b.n	92ca <uip_process+0x462>
          case 0:
            /*continue*/
            uip_next_hdr = &UIP_EXT_BUF->next;
    935a:	4859      	ldr	r0, [pc, #356]	; (94c0 <uip_process+0x658>)
    935c:	7803      	ldrb	r3, [r0, #0]
    935e:	1c19      	adds	r1, r3, #0
    9360:	3128      	adds	r1, #40	; 0x28
    9362:	4a50      	ldr	r2, [pc, #320]	; (94a4 <uip_process+0x63c>)
    9364:	1889      	adds	r1, r1, r2
    9366:	4a57      	ldr	r2, [pc, #348]	; (94c4 <uip_process+0x65c>)
    9368:	6011      	str	r1, [r2, #0]
    936a:	3308      	adds	r3, #8
    936c:	1c1a      	adds	r2, r3, #0
            uip_ext_len += (UIP_EXT_BUF->len << 3) + 8;
    936e:	784b      	ldrb	r3, [r1, #1]
    9370:	00db      	lsls	r3, r3, #3
    9372:	18d3      	adds	r3, r2, r3
    9374:	7003      	strb	r3, [r0, #0]
            break;
    9376:	e7a8      	b.n	92ca <uip_process+0x462>
        }
        break;
      case UIP_PROTO_ROUTING:
#if UIP_CONF_IPV6_CHECKS
        /* Routing header. If we saw one already, drop */
        if(uip_ext_bitmap & UIP_EXT_HDR_BITMAP_ROUTING) {
    9378:	4b4f      	ldr	r3, [pc, #316]	; (94b8 <uip_process+0x650>)
    937a:	7819      	ldrb	r1, [r3, #0]
    937c:	074b      	lsls	r3, r1, #29
    937e:	d41e      	bmi.n	93be <uip_process+0x556>
          goto bad_hdr;
        } else {
          uip_ext_bitmap |= UIP_EXT_HDR_BITMAP_ROUTING;
    9380:	2304      	movs	r3, #4
    9382:	430b      	orrs	r3, r1
    9384:	4a4c      	ldr	r2, [pc, #304]	; (94b8 <uip_process+0x650>)
    9386:	7013      	strb	r3, [r2, #0]
         * if segments left > 0, discard packet and send icmp error pointing
         * to the routing type
         */

        PRINTF("Processing Routing header\n\r");
        if(UIP_ROUTING_BUF->seg_left > 0) {
    9388:	4b4d      	ldr	r3, [pc, #308]	; (94c0 <uip_process+0x658>)
    938a:	781b      	ldrb	r3, [r3, #0]
    938c:	1c1a      	adds	r2, r3, #0
    938e:	1c18      	adds	r0, r3, #0
    9390:	3028      	adds	r0, #40	; 0x28
    9392:	4944      	ldr	r1, [pc, #272]	; (94a4 <uip_process+0x63c>)
    9394:	1841      	adds	r1, r0, r1
    9396:	78c8      	ldrb	r0, [r1, #3]
    9398:	2800      	cmp	r0, #0
    939a:	d006      	beq.n	93aa <uip_process+0x542>
          uip_icmp6_error_output(ICMP6_PARAM_PROB, ICMP6_PARAMPROB_HEADER, UIP_IPH_LEN + uip_ext_len + 2);
    939c:	322a      	adds	r2, #42	; 0x2a
    939e:	2004      	movs	r0, #4
    93a0:	2100      	movs	r1, #0
    93a2:	4b43      	ldr	r3, [pc, #268]	; (94b0 <uip_process+0x648>)
    93a4:	4798      	blx	r3
          UIP_STAT(++uip_stat.ip.drop);
          UIP_LOG("ip6: unrecognized routing type");
          goto send;
    93a6:	f000 fdc9 	bl	9f3c <uip_process+0x10d4>
        }
        uip_next_hdr = &UIP_EXT_BUF->next;
    93aa:	4a46      	ldr	r2, [pc, #280]	; (94c4 <uip_process+0x65c>)
    93ac:	6011      	str	r1, [r2, #0]
    93ae:	3308      	adds	r3, #8
    93b0:	1c1a      	adds	r2, r3, #0
        uip_ext_len += (UIP_EXT_BUF->len << 3) + 8;
    93b2:	784b      	ldrb	r3, [r1, #1]
    93b4:	00db      	lsls	r3, r3, #3
    93b6:	18d3      	adds	r3, r2, r3
    93b8:	4a41      	ldr	r2, [pc, #260]	; (94c0 <uip_process+0x658>)
    93ba:	7013      	strb	r3, [r2, #0]
        break;
    93bc:	e785      	b.n	92ca <uip_process+0x462>
  bad_hdr:
  /*
   * RFC 2460 send error message parameterr problem, code unrecognized
   * next header, pointing to the next header field
   */
  uip_icmp6_error_output(ICMP6_PARAM_PROB, ICMP6_PARAMPROB_NEXTHEADER, (uint32_t)(uip_next_hdr - (uint8_t *)UIP_IP_BUF));
    93be:	4b39      	ldr	r3, [pc, #228]	; (94a4 <uip_process+0x63c>)
    93c0:	1ad2      	subs	r2, r2, r3
    93c2:	2004      	movs	r0, #4
    93c4:	2101      	movs	r1, #1
    93c6:	4b3a      	ldr	r3, [pc, #232]	; (94b0 <uip_process+0x648>)
    93c8:	4798      	blx	r3
  UIP_STAT(++uip_stat.ip.drop);
  UIP_STAT(++uip_stat.ip.protoerr);
  UIP_LOG("ip6: unrecognized header");
  goto send;
    93ca:	f000 fdb7 	bl	9f3c <uip_process+0x10d4>
  /* This is IPv6 ICMPv6 processing code. */
  PRINTF("icmp6_input: length %d type: %d \n\r", uip_len, UIP_ICMP_BUF->type);

#if UIP_CONF_IPV6_CHECKS
  /* Compute and check the ICMP header checksum */
  if(uip_icmp6chksum() != 0xffff) {
    93ce:	4b3e      	ldr	r3, [pc, #248]	; (94c8 <uip_process+0x660>)
    93d0:	4798      	blx	r3
    93d2:	4b3e      	ldr	r3, [pc, #248]	; (94cc <uip_process+0x664>)
    93d4:	4298      	cmp	r0, r3
    93d6:	d001      	beq.n	93dc <uip_process+0x574>
    93d8:	f000 fdcc 	bl	9f74 <uip_process+0x110c>
   * If no pkt is to be sent as an answer to the incoming one, we
   * "goto drop". Else we just break; then at the after the "switch"
   * we "goto send"
   */
#if UIP_CONF_ICMP6
  UIP_ICMP6_APPCALL(UIP_ICMP_BUF->type);
    93dc:	4d38      	ldr	r5, [pc, #224]	; (94c0 <uip_process+0x658>)
    93de:	782b      	ldrb	r3, [r5, #0]
    93e0:	3328      	adds	r3, #40	; 0x28
    93e2:	4c30      	ldr	r4, [pc, #192]	; (94a4 <uip_process+0x63c>)
    93e4:	5ce0      	ldrb	r0, [r4, r3]
    93e6:	4b3a      	ldr	r3, [pc, #232]	; (94d0 <uip_process+0x668>)
    93e8:	4798      	blx	r3

  /*
   * Search generic input handlers.
   * The handler is in charge of setting uip_len to 0
   */
  if(uip_icmp6_input(UIP_ICMP_BUF->type,
    93ea:	782b      	ldrb	r3, [r5, #0]
    93ec:	3328      	adds	r3, #40	; 0x28
    93ee:	191c      	adds	r4, r3, r4
    93f0:	7820      	ldrb	r0, [r4, #0]
    93f2:	7861      	ldrb	r1, [r4, #1]
    93f4:	4b37      	ldr	r3, [pc, #220]	; (94d4 <uip_process+0x66c>)
    93f6:	4798      	blx	r3
    93f8:	2801      	cmp	r0, #1
    93fa:	d101      	bne.n	9400 <uip_process+0x598>
    93fc:	f000 fdba 	bl	9f74 <uip_process+0x110c>
    UIP_STAT(++uip_stat.icmp.typeerr);
    UIP_LOG("icmp6: unknown ICMPv6 message.");
    uip_len = 0;
  }
  
  if(uip_len > 0) {
    9400:	4b35      	ldr	r3, [pc, #212]	; (94d8 <uip_process+0x670>)
    9402:	881b      	ldrh	r3, [r3, #0]
    9404:	2b00      	cmp	r3, #0
    9406:	d101      	bne.n	940c <uip_process+0x5a4>
    9408:	f000 fdb4 	bl	9f74 <uip_process+0x110c>
    940c:	f000 fd96 	bl	9f3c <uip_process+0x10d4>

#if UIP_UDP
  /* UDP input processing. */
 udp_input:

  remove_ext_hdr();
    9410:	4b32      	ldr	r3, [pc, #200]	; (94dc <uip_process+0x674>)
    9412:	4798      	blx	r3
  /* UDP processing is really just a hack. We don't do anything to the
     UDP/IP headers, but let the UDP application do all the hard
     work. If the application sets uip_slen, it has a packet to
     send. */
#if UIP_UDP_CHECKSUMS
  uip_len = uip_len - UIP_IPUDPH_LEN;
    9414:	4a30      	ldr	r2, [pc, #192]	; (94d8 <uip_process+0x670>)
    9416:	8813      	ldrh	r3, [r2, #0]
    9418:	3b30      	subs	r3, #48	; 0x30
    941a:	8013      	strh	r3, [r2, #0]
  uip_appdata = &uip_buf[UIP_IPUDPH_LEN + UIP_LLH_LEN];
    941c:	4b30      	ldr	r3, [pc, #192]	; (94e0 <uip_process+0x678>)
    941e:	4a31      	ldr	r2, [pc, #196]	; (94e4 <uip_process+0x67c>)
    9420:	6013      	str	r3, [r2, #0]
  /* XXX hack: UDP/IPv6 receivers should drop packets with UDP
     checksum 0. Here, we explicitly receive UDP packets with checksum
     0. This is to be able to debug code that for one reason or
     another miscomputes UDP checksums. The reception of zero UDP
     checksums should be turned into a configration option. */
  if(UIP_UDP_BUF->udpchksum != 0 && uip_udpchksum() != 0xffff) {
    9422:	3b30      	subs	r3, #48	; 0x30
    9424:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
    9426:	2b00      	cmp	r3, #0
    9428:	d101      	bne.n	942e <uip_process+0x5c6>
    942a:	f000 fdb4 	bl	9f96 <uip_process+0x112e>
    942e:	4b2e      	ldr	r3, [pc, #184]	; (94e8 <uip_process+0x680>)
    9430:	4798      	blx	r3
    9432:	4b26      	ldr	r3, [pc, #152]	; (94cc <uip_process+0x664>)
    9434:	4298      	cmp	r0, r3
    9436:	d001      	beq.n	943c <uip_process+0x5d4>
    9438:	f000 fd9c 	bl	9f74 <uip_process+0x110c>
#else /* UIP_UDP_CHECKSUMS */
  uip_len = uip_len - UIP_IPUDPH_LEN;
#endif /* UIP_UDP_CHECKSUMS */

  /* Make sure that the UDP destination port number is not zero. */
  if(UIP_UDP_BUF->destport == 0) {
    943c:	4b19      	ldr	r3, [pc, #100]	; (94a4 <uip_process+0x63c>)
    943e:	8d5e      	ldrh	r6, [r3, #42]	; 0x2a
    9440:	2e00      	cmp	r6, #0
    9442:	d101      	bne.n	9448 <uip_process+0x5e0>
    9444:	f000 fd96 	bl	9f74 <uip_process+0x110c>
    PRINTF("udp: zero port.\n\r");
    goto drop;
  }

  /* Demultiplex this UDP packet between the UDP "connections". */
  for(uip_udp_conn = &uip_udp_conns[0];
    9448:	4a28      	ldr	r2, [pc, #160]	; (94ec <uip_process+0x684>)
    944a:	4b29      	ldr	r3, [pc, #164]	; (94f0 <uip_process+0x688>)
    944c:	601a      	str	r2, [r3, #0]
       connection is bound to a remote IP address, the source IP
       address of the packet is checked. */
    if(uip_udp_conn->lport != 0 &&
       UIP_UDP_BUF->destport == uip_udp_conn->lport &&
       (uip_udp_conn->rport == 0 ||
        UIP_UDP_BUF->srcport == uip_udp_conn->rport) &&
    944e:	4b15      	ldr	r3, [pc, #84]	; (94a4 <uip_process+0x63c>)
    9450:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    9452:	4699      	mov	r9, r3
    9454:	4c25      	ldr	r4, [pc, #148]	; (94ec <uip_process+0x684>)
  }

  /* Demultiplex this UDP packet between the UDP "connections". */
  for(uip_udp_conn = &uip_udp_conns[0];
      uip_udp_conn < &uip_udp_conns[UIP_UDP_CONNS];
      ++uip_udp_conn) {
    9456:	4f26      	ldr	r7, [pc, #152]	; (94f0 <uip_process+0x688>)
    PRINTF("udp: zero port.\n\r");
    goto drop;
  }

  /* Demultiplex this UDP packet between the UDP "connections". */
  for(uip_udp_conn = &uip_udp_conns[0];
    9458:	4d26      	ldr	r5, [pc, #152]	; (94f4 <uip_process+0x68c>)
       destination port number in the received packet. If the two port
       numbers match, the remote port number is checked if the
       connection is bound to a remote port. Finally, if the
       connection is bound to a remote IP address, the source IP
       address of the packet is checked. */
    if(uip_udp_conn->lport != 0 &&
    945a:	8a23      	ldrh	r3, [r4, #16]
    945c:	2b00      	cmp	r3, #0
    945e:	d019      	beq.n	9494 <uip_process+0x62c>
    9460:	429e      	cmp	r6, r3
    9462:	d117      	bne.n	9494 <uip_process+0x62c>
       UIP_UDP_BUF->destport == uip_udp_conn->lport &&
       (uip_udp_conn->rport == 0 ||
    9464:	8a63      	ldrh	r3, [r4, #18]
       numbers match, the remote port number is checked if the
       connection is bound to a remote port. Finally, if the
       connection is bound to a remote IP address, the source IP
       address of the packet is checked. */
    if(uip_udp_conn->lport != 0 &&
       UIP_UDP_BUF->destport == uip_udp_conn->lport &&
    9466:	2b00      	cmp	r3, #0
    9468:	d001      	beq.n	946e <uip_process+0x606>
       (uip_udp_conn->rport == 0 ||
    946a:	454b      	cmp	r3, r9
    946c:	d112      	bne.n	9494 <uip_process+0x62c>
        UIP_UDP_BUF->srcport == uip_udp_conn->rport) &&
    946e:	6823      	ldr	r3, [r4, #0]
    9470:	2b00      	cmp	r3, #0
    9472:	d108      	bne.n	9486 <uip_process+0x61e>
       (uip_is_addr_unspecified(&uip_udp_conn->ripaddr) ||
    9474:	6863      	ldr	r3, [r4, #4]
    9476:	2b00      	cmp	r3, #0
    9478:	d105      	bne.n	9486 <uip_process+0x61e>
    947a:	68a3      	ldr	r3, [r4, #8]
    947c:	2b00      	cmp	r3, #0
    947e:	d102      	bne.n	9486 <uip_process+0x61e>
    9480:	68e3      	ldr	r3, [r4, #12]
    9482:	2b00      	cmp	r3, #0
    9484:	d03c      	beq.n	9500 <uip_process+0x698>
        uip_ipaddr_cmp(&UIP_IP_BUF->srcipaddr, &uip_udp_conn->ripaddr))) {
    9486:	481c      	ldr	r0, [pc, #112]	; (94f8 <uip_process+0x690>)
    9488:	1c21      	adds	r1, r4, #0
    948a:	2210      	movs	r2, #16
    948c:	4b1b      	ldr	r3, [pc, #108]	; (94fc <uip_process+0x694>)
    948e:	4798      	blx	r3
       address of the packet is checked. */
    if(uip_udp_conn->lport != 0 &&
       UIP_UDP_BUF->destport == uip_udp_conn->lport &&
       (uip_udp_conn->rport == 0 ||
        UIP_UDP_BUF->srcport == uip_udp_conn->rport) &&
       (uip_is_addr_unspecified(&uip_udp_conn->ripaddr) ||
    9490:	2800      	cmp	r0, #0
    9492:	d035      	beq.n	9500 <uip_process+0x698>
  }

  /* Demultiplex this UDP packet between the UDP "connections". */
  for(uip_udp_conn = &uip_udp_conns[0];
      uip_udp_conn < &uip_udp_conns[UIP_UDP_CONNS];
      ++uip_udp_conn) {
    9494:	3420      	adds	r4, #32
    9496:	603c      	str	r4, [r7, #0]
    PRINTF("udp: zero port.\n\r");
    goto drop;
  }

  /* Demultiplex this UDP packet between the UDP "connections". */
  for(uip_udp_conn = &uip_udp_conns[0];
    9498:	42ac      	cmp	r4, r5
    949a:	d1de      	bne.n	945a <uip_process+0x5f2>
    949c:	f000 fd6a 	bl	9f74 <uip_process+0x110c>
    94a0:	0000d20d 	.word	0x0000d20d
    94a4:	20002cd4 	.word	0x20002cd4
    94a8:	20002cec 	.word	0x20002cec
    94ac:	00007401 	.word	0x00007401
    94b0:	00007d0d 	.word	0x00007d0d
    94b4:	00012c54 	.word	0x00012c54
    94b8:	20000b13 	.word	0x20000b13
    94bc:	00008a15 	.word	0x00008a15
    94c0:	20000b12 	.word	0x20000b12
    94c4:	20002e68 	.word	0x20002e68
    94c8:	00008be1 	.word	0x00008be1
    94cc:	0000ffff 	.word	0x0000ffff
    94d0:	0000a5e1 	.word	0x0000a5e1
    94d4:	00007ca5 	.word	0x00007ca5
    94d8:	20002cc0 	.word	0x20002cc0
    94dc:	00008db1 	.word	0x00008db1
    94e0:	20002d04 	.word	0x20002d04
    94e4:	20002e70 	.word	0x20002e70
    94e8:	00008c01 	.word	0x00008c01
    94ec:	2000308c 	.word	0x2000308c
    94f0:	20002e6c 	.word	0x20002e6c
    94f4:	200031cc 	.word	0x200031cc
    94f8:	20002cdc 	.word	0x20002cdc
    94fc:	00010b11 	.word	0x00010b11

 udp_found:
  PRINTF("In udp_found\n\r");
  UIP_STAT(++uip_stat.udp.recv);
 
  uip_conn = NULL;
    9500:	2300      	movs	r3, #0
    9502:	4ad2      	ldr	r2, [pc, #840]	; (984c <uip_process+0x9e4>)
    9504:	6013      	str	r3, [r2, #0]
  uip_flags = UIP_NEWDATA;
    9506:	2102      	movs	r1, #2
    9508:	4ad1      	ldr	r2, [pc, #836]	; (9850 <uip_process+0x9e8>)
    950a:	7011      	strb	r1, [r2, #0]
  uip_sappdata = uip_appdata = &uip_buf[UIP_IPUDPH_LEN + UIP_LLH_LEN];
    950c:	4ad1      	ldr	r2, [pc, #836]	; (9854 <uip_process+0x9ec>)
    950e:	49d2      	ldr	r1, [pc, #840]	; (9858 <uip_process+0x9f0>)
    9510:	600a      	str	r2, [r1, #0]
    9512:	49d2      	ldr	r1, [pc, #840]	; (985c <uip_process+0x9f4>)
    9514:	600a      	str	r2, [r1, #0]
  uip_slen = 0;
    9516:	4ad2      	ldr	r2, [pc, #840]	; (9860 <uip_process+0x9f8>)
    9518:	8013      	strh	r3, [r2, #0]
  UIP_UDP_APPCALL();
    951a:	4bd2      	ldr	r3, [pc, #840]	; (9864 <uip_process+0x9fc>)
    951c:	4798      	blx	r3

 udp_send:
  PRINTF("In udp_send\n\r");

  if(uip_slen == 0) {
    951e:	4bd0      	ldr	r3, [pc, #832]	; (9860 <uip_process+0x9f8>)
    9520:	881b      	ldrh	r3, [r3, #0]
    9522:	2b00      	cmp	r3, #0
    9524:	d101      	bne.n	952a <uip_process+0x6c2>
    9526:	f000 fd25 	bl	9f74 <uip_process+0x110c>
    goto drop;
  }
  uip_len = uip_slen + UIP_IPUDPH_LEN;
    952a:	1c1a      	adds	r2, r3, #0
    952c:	3230      	adds	r2, #48	; 0x30
    952e:	b292      	uxth	r2, r2
    9530:	49cd      	ldr	r1, [pc, #820]	; (9868 <uip_process+0xa00>)
    9532:	800a      	strh	r2, [r1, #0]

  /* For IPv6, the IP length field does not include the IPv6 IP header
     length. */
  UIP_IP_BUF->len[0] = ((uip_len - UIP_IPH_LEN) >> 8);
    9534:	4ccd      	ldr	r4, [pc, #820]	; (986c <uip_process+0xa04>)
    9536:	1c11      	adds	r1, r2, #0
    9538:	3928      	subs	r1, #40	; 0x28
    953a:	1209      	asrs	r1, r1, #8
    953c:	7121      	strb	r1, [r4, #4]
  UIP_IP_BUF->len[1] = ((uip_len - UIP_IPH_LEN) & 0xff);
    953e:	3a28      	subs	r2, #40	; 0x28
    9540:	7162      	strb	r2, [r4, #5]

  UIP_IP_BUF->ttl = uip_udp_conn->ttl;
    9542:	4acb      	ldr	r2, [pc, #812]	; (9870 <uip_process+0xa08>)
    9544:	6812      	ldr	r2, [r2, #0]
    9546:	7d11      	ldrb	r1, [r2, #20]
    9548:	71e1      	strb	r1, [r4, #7]
  UIP_IP_BUF->proto = UIP_PROTO_UDP;
    954a:	2111      	movs	r1, #17
    954c:	71a1      	strb	r1, [r4, #6]

  UIP_UDP_BUF->udplen = UIP_HTONS(uip_slen + UIP_UDPH_LEN);
    954e:	3308      	adds	r3, #8
    9550:	b29b      	uxth	r3, r3
    9552:	0219      	lsls	r1, r3, #8
    9554:	0a1b      	lsrs	r3, r3, #8
    9556:	430b      	orrs	r3, r1
    9558:	85a3      	strh	r3, [r4, #44]	; 0x2c
  UIP_UDP_BUF->udpchksum = 0;
    955a:	2300      	movs	r3, #0
    955c:	85e3      	strh	r3, [r4, #46]	; 0x2e

  UIP_UDP_BUF->srcport  = uip_udp_conn->lport;
    955e:	8a13      	ldrh	r3, [r2, #16]
    9560:	8523      	strh	r3, [r4, #40]	; 0x28
  UIP_UDP_BUF->destport = uip_udp_conn->rport;
    9562:	8a53      	ldrh	r3, [r2, #18]
    9564:	8563      	strh	r3, [r4, #42]	; 0x2a

  uip_ipaddr_copy(&UIP_IP_BUF->destipaddr, &uip_udp_conn->ripaddr);
    9566:	1c23      	adds	r3, r4, #0
    9568:	3318      	adds	r3, #24
    956a:	ca23      	ldmia	r2!, {r0, r1, r5}
    956c:	c323      	stmia	r3!, {r0, r1, r5}
    956e:	6812      	ldr	r2, [r2, #0]
    9570:	601a      	str	r2, [r3, #0]
  uip_ds6_select_src(&UIP_IP_BUF->srcipaddr, &UIP_IP_BUF->destipaddr);
    9572:	1c20      	adds	r0, r4, #0
    9574:	3008      	adds	r0, #8
    9576:	1c01      	adds	r1, r0, #0
    9578:	3110      	adds	r1, #16
    957a:	4bbe      	ldr	r3, [pc, #760]	; (9874 <uip_process+0xa0c>)
    957c:	4798      	blx	r3

  uip_appdata = &uip_buf[UIP_LLH_LEN + UIP_IPTCPH_LEN];
    957e:	343c      	adds	r4, #60	; 0x3c
    9580:	4bb5      	ldr	r3, [pc, #724]	; (9858 <uip_process+0x9f0>)
    9582:	601c      	str	r4, [r3, #0]

#if UIP_CONF_IPV6_RPL
  rpl_insert_header();
    9584:	4bbc      	ldr	r3, [pc, #752]	; (9878 <uip_process+0xa10>)
    9586:	4798      	blx	r3
#endif /* UIP_CONF_IPV6_RPL */

#if UIP_UDP_CHECKSUMS
  /* Calculate UDP checksum. */
  UIP_UDP_BUF->udpchksum = ~(uip_udpchksum());
    9588:	4bbc      	ldr	r3, [pc, #752]	; (987c <uip_process+0xa14>)
    958a:	4798      	blx	r3
    958c:	43c0      	mvns	r0, r0
    958e:	b280      	uxth	r0, r0
  if(UIP_UDP_BUF->udpchksum == 0) {
    9590:	2800      	cmp	r0, #0
    9592:	d003      	beq.n	959c <uip_process+0x734>
  rpl_insert_header();
#endif /* UIP_CONF_IPV6_RPL */

#if UIP_UDP_CHECKSUMS
  /* Calculate UDP checksum. */
  UIP_UDP_BUF->udpchksum = ~(uip_udpchksum());
    9594:	4bb5      	ldr	r3, [pc, #724]	; (986c <uip_process+0xa04>)
    9596:	85d8      	strh	r0, [r3, #46]	; 0x2e
    9598:	f000 fcca 	bl	9f30 <uip_process+0x10c8>
  if(UIP_UDP_BUF->udpchksum == 0) {
    UIP_UDP_BUF->udpchksum = 0xffff;
    959c:	2201      	movs	r2, #1
    959e:	4252      	negs	r2, r2
    95a0:	4bb2      	ldr	r3, [pc, #712]	; (986c <uip_process+0xa04>)
    95a2:	85da      	strh	r2, [r3, #46]	; 0x2e
    95a4:	f000 fcc4 	bl	9f30 <uip_process+0x10c8>

#if UIP_TCP
  /* TCP input processing. */
 tcp_input:

  remove_ext_hdr();
    95a8:	4bb5      	ldr	r3, [pc, #724]	; (9880 <uip_process+0xa18>)
    95aa:	4798      	blx	r3

  UIP_STAT(++uip_stat.tcp.recv);
  PRINTF("Receiving TCP packet\n\r");
  /* Start of TCP input header processing code. */
  
  if(uip_tcpchksum() != 0xffff) {   /* Compute and check the TCP
    95ac:	4bb5      	ldr	r3, [pc, #724]	; (9884 <uip_process+0xa1c>)
    95ae:	4798      	blx	r3
    95b0:	4bb5      	ldr	r3, [pc, #724]	; (9888 <uip_process+0xa20>)
    95b2:	4298      	cmp	r0, r3
    95b4:	d001      	beq.n	95ba <uip_process+0x752>
    95b6:	f000 fcdd 	bl	9f74 <uip_process+0x110c>
           uip_tcpchksum());
    goto drop;
  }

  /* Make sure that the TCP port number is not zero. */
  if(UIP_TCP_BUF->destport == 0 || UIP_TCP_BUF->srcport == 0) {
    95ba:	4bac      	ldr	r3, [pc, #688]	; (986c <uip_process+0xa04>)
    95bc:	8d5d      	ldrh	r5, [r3, #42]	; 0x2a
    95be:	2d00      	cmp	r5, #0
    95c0:	d101      	bne.n	95c6 <uip_process+0x75e>
    95c2:	f000 fcd7 	bl	9f74 <uip_process+0x110c>
    95c6:	8d1e      	ldrh	r6, [r3, #40]	; 0x28
    95c8:	2e00      	cmp	r6, #0
    95ca:	d101      	bne.n	95d0 <uip_process+0x768>
    95cc:	f000 fcd2 	bl	9f74 <uip_process+0x110c>
    95d0:	4cae      	ldr	r4, [pc, #696]	; (988c <uip_process+0xa24>)
    95d2:	1c23      	adds	r3, r4, #0
    95d4:	3325      	adds	r3, #37	; 0x25

  /* Demultiplex this segment. */
  /* First check any active connections. */
  for(uip_connr = &uip_conns[0]; uip_connr <= &uip_conns[UIP_CONNS - 1];
      ++uip_connr) {
    if(uip_connr->tcpstateflags != UIP_CLOSED &&
    95d6:	781f      	ldrb	r7, [r3, #0]
    95d8:	2f00      	cmp	r7, #0
    95da:	d00d      	beq.n	95f8 <uip_process+0x790>
    95dc:	8a23      	ldrh	r3, [r4, #16]
    95de:	42ab      	cmp	r3, r5
    95e0:	d10a      	bne.n	95f8 <uip_process+0x790>
       UIP_TCP_BUF->destport == uip_connr->lport &&
    95e2:	8a63      	ldrh	r3, [r4, #18]
    95e4:	42b3      	cmp	r3, r6
    95e6:	d107      	bne.n	95f8 <uip_process+0x790>
       UIP_TCP_BUF->srcport == uip_connr->rport &&
       uip_ipaddr_cmp(&UIP_IP_BUF->srcipaddr, &uip_connr->ripaddr)) {
    95e8:	48a9      	ldr	r0, [pc, #676]	; (9890 <uip_process+0xa28>)
    95ea:	1c21      	adds	r1, r4, #0
    95ec:	2210      	movs	r2, #16
    95ee:	4ba9      	ldr	r3, [pc, #676]	; (9894 <uip_process+0xa2c>)
    95f0:	4798      	blx	r3
  /* First check any active connections. */
  for(uip_connr = &uip_conns[0]; uip_connr <= &uip_conns[UIP_CONNS - 1];
      ++uip_connr) {
    if(uip_connr->tcpstateflags != UIP_CLOSED &&
       UIP_TCP_BUF->destport == uip_connr->lport &&
       UIP_TCP_BUF->srcport == uip_connr->rport &&
    95f2:	2800      	cmp	r0, #0
    95f4:	d100      	bne.n	95f8 <uip_process+0x790>
    95f6:	e188      	b.n	990a <uip_process+0xaa2>
  }

  /* Demultiplex this segment. */
  /* First check any active connections. */
  for(uip_connr = &uip_conns[0]; uip_connr <= &uip_conns[UIP_CONNS - 1];
      ++uip_connr) {
    95f8:	3430      	adds	r4, #48	; 0x30
    goto drop;
  }

  /* Demultiplex this segment. */
  /* First check any active connections. */
  for(uip_connr = &uip_conns[0]; uip_connr <= &uip_conns[UIP_CONNS - 1];
    95fa:	4ba7      	ldr	r3, [pc, #668]	; (9898 <uip_process+0xa30>)
    95fc:	429c      	cmp	r4, r3
    95fe:	d1e8      	bne.n	95d2 <uip_process+0x76a>

  /* If we didn't find and active connection that expected the packet,
     either this packet is an old duplicate, or this is a SYN packet
     destined for a connection in LISTEN. If the SYN flag isn't set,
     it is an old packet and we send a RST. */
  if((UIP_TCP_BUF->flags & TCP_CTL) != TCP_SYN) {
    9600:	2335      	movs	r3, #53	; 0x35
    9602:	4a9a      	ldr	r2, [pc, #616]	; (986c <uip_process+0xa04>)
    9604:	5cd2      	ldrb	r2, [r2, r3]
    9606:	330a      	adds	r3, #10
    9608:	4013      	ands	r3, r2
    960a:	2b02      	cmp	r3, #2
    960c:	d10f      	bne.n	962e <uip_process+0x7c6>
    goto reset;
  }
  
  tmp16 = UIP_TCP_BUF->destport;
    960e:	4ba3      	ldr	r3, [pc, #652]	; (989c <uip_process+0xa34>)
    9610:	801d      	strh	r5, [r3, #0]
  /* Next, check listening connections. */
  for(c = 0; c < UIP_LISTENPORTS; ++c) {
    9612:	2300      	movs	r3, #0
    9614:	4aa2      	ldr	r2, [pc, #648]	; (98a0 <uip_process+0xa38>)
    9616:	7013      	strb	r3, [r2, #0]
    if(tmp16 == uip_listenports[c]) {
    9618:	4aa2      	ldr	r2, [pc, #648]	; (98a4 <uip_process+0xa3c>)
    961a:	0059      	lsls	r1, r3, #1
    961c:	5a89      	ldrh	r1, [r1, r2]
    961e:	42a9      	cmp	r1, r5
    9620:	d059      	beq.n	96d6 <uip_process+0x86e>
    goto reset;
  }
  
  tmp16 = UIP_TCP_BUF->destport;
  /* Next, check listening connections. */
  for(c = 0; c < UIP_LISTENPORTS; ++c) {
    9622:	3301      	adds	r3, #1
    9624:	b2db      	uxtb	r3, r3
    9626:	2b13      	cmp	r3, #19
    9628:	d9f7      	bls.n	961a <uip_process+0x7b2>
    962a:	4a9d      	ldr	r2, [pc, #628]	; (98a0 <uip_process+0xa38>)
    962c:	7013      	strb	r3, [r2, #0]
  UIP_STAT(++uip_stat.tcp.synrst);

 reset:
  PRINTF("In reset\n\r");
  /* We do not send resets in response to resets. */
  if(UIP_TCP_BUF->flags & TCP_RST) {
    962e:	2335      	movs	r3, #53	; 0x35
    9630:	4a8e      	ldr	r2, [pc, #568]	; (986c <uip_process+0xa04>)
    9632:	5cd3      	ldrb	r3, [r2, r3]
    9634:	075b      	lsls	r3, r3, #29
    9636:	d501      	bpl.n	963c <uip_process+0x7d4>
    9638:	f000 fc9c 	bl	9f74 <uip_process+0x110c>
    goto drop;
  }

  UIP_STAT(++uip_stat.tcp.rst);
  
  UIP_TCP_BUF->flags = TCP_RST | TCP_ACK;
    963c:	1c13      	adds	r3, r2, #0
    963e:	2114      	movs	r1, #20
    9640:	2235      	movs	r2, #53	; 0x35
    9642:	5499      	strb	r1, [r3, r2]
  uip_len = UIP_IPTCPH_LEN;
    9644:	3128      	adds	r1, #40	; 0x28
    9646:	4a88      	ldr	r2, [pc, #544]	; (9868 <uip_process+0xa00>)
    9648:	8011      	strh	r1, [r2, #0]
  UIP_TCP_BUF->tcpoffset = 5 << 4;
    964a:	3114      	adds	r1, #20
    964c:	2234      	movs	r2, #52	; 0x34
    964e:	5499      	strb	r1, [r3, r2]

  /* Flip the seqno and ackno fields in the TCP header. */
  c = UIP_TCP_BUF->seqno[3];
    9650:	3a05      	subs	r2, #5
    9652:	5c99      	ldrb	r1, [r3, r2]
    9654:	4688      	mov	r8, r1
  UIP_TCP_BUF->seqno[3] = UIP_TCP_BUF->ackno[3];
    9656:	2533      	movs	r5, #51	; 0x33
    9658:	5d58      	ldrb	r0, [r3, r5]
    965a:	5498      	strb	r0, [r3, r2]
  UIP_TCP_BUF->ackno[3] = c;
  
  c = UIP_TCP_BUF->seqno[2];
    965c:	242e      	movs	r4, #46	; 0x2e
    965e:	5d1a      	ldrb	r2, [r3, r4]
  UIP_TCP_BUF->seqno[2] = UIP_TCP_BUF->ackno[2];
    9660:	2032      	movs	r0, #50	; 0x32
    9662:	5c1e      	ldrb	r6, [r3, r0]
    9664:	551e      	strb	r6, [r3, r4]
  UIP_TCP_BUF->ackno[2] = c;
    9666:	541a      	strb	r2, [r3, r0]
  
  c = UIP_TCP_BUF->seqno[1];
    9668:	262d      	movs	r6, #45	; 0x2d
    966a:	5d98      	ldrb	r0, [r3, r6]
  UIP_TCP_BUF->seqno[1] = UIP_TCP_BUF->ackno[1];
    966c:	3403      	adds	r4, #3
    966e:	5d1f      	ldrb	r7, [r3, r4]
    9670:	559f      	strb	r7, [r3, r6]
  UIP_TCP_BUF->ackno[1] = c;
    9672:	5518      	strb	r0, [r3, r4]
  
  c = UIP_TCP_BUF->seqno[0];
    9674:	272c      	movs	r7, #44	; 0x2c
    9676:	5ddc      	ldrb	r4, [r3, r7]
    9678:	4e89      	ldr	r6, [pc, #548]	; (98a0 <uip_process+0xa38>)
    967a:	7034      	strb	r4, [r6, #0]
  UIP_TCP_BUF->seqno[0] = UIP_TCP_BUF->ackno[0];
    967c:	2630      	movs	r6, #48	; 0x30
    967e:	5d99      	ldrb	r1, [r3, r6]
    9680:	55d9      	strb	r1, [r3, r7]
  UIP_TCP_BUF->ackno[0] = c;
    9682:	559c      	strb	r4, [r3, r6]

  /* We also have to increase the sequence number we are
     acknowledging. If the least significant byte overflowed, we need
     to propagate the carry to the other bytes as well. */
  if(++UIP_TCP_BUF->ackno[3] == 0) {
    9684:	4641      	mov	r1, r8
    9686:	3101      	adds	r1, #1
    9688:	b2c9      	uxtb	r1, r1
    968a:	5559      	strb	r1, [r3, r5]
    968c:	2900      	cmp	r1, #0
    968e:	d10e      	bne.n	96ae <uip_process+0x846>
    if(++UIP_TCP_BUF->ackno[2] == 0) {
    9690:	3201      	adds	r2, #1
    9692:	b2d2      	uxtb	r2, r2
    9694:	2332      	movs	r3, #50	; 0x32
    9696:	4975      	ldr	r1, [pc, #468]	; (986c <uip_process+0xa04>)
    9698:	54ca      	strb	r2, [r1, r3]
    969a:	2a00      	cmp	r2, #0
    969c:	d107      	bne.n	96ae <uip_process+0x846>
      if(++UIP_TCP_BUF->ackno[1] == 0) {
    969e:	1c43      	adds	r3, r0, #1
    96a0:	b2db      	uxtb	r3, r3
    96a2:	3231      	adds	r2, #49	; 0x31
    96a4:	548b      	strb	r3, [r1, r2]
    96a6:	2b00      	cmp	r3, #0
    96a8:	d101      	bne.n	96ae <uip_process+0x846>
        ++UIP_TCP_BUF->ackno[0];
    96aa:	1c63      	adds	r3, r4, #1
    96ac:	558b      	strb	r3, [r1, r6]
      }
    }
  }
 
  /* Swap port numbers. */
  tmp16 = UIP_TCP_BUF->srcport;
    96ae:	4b6f      	ldr	r3, [pc, #444]	; (986c <uip_process+0xa04>)
    96b0:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
    96b2:	497a      	ldr	r1, [pc, #488]	; (989c <uip_process+0xa34>)
    96b4:	800a      	strh	r2, [r1, #0]
  UIP_TCP_BUF->srcport = UIP_TCP_BUF->destport;
    96b6:	8d59      	ldrh	r1, [r3, #42]	; 0x2a
    96b8:	8519      	strh	r1, [r3, #40]	; 0x28
  UIP_TCP_BUF->destport = tmp16;
    96ba:	855a      	strh	r2, [r3, #42]	; 0x2a
  
  /* Swap IP addresses. */
  uip_ipaddr_copy(&UIP_IP_BUF->destipaddr, &UIP_IP_BUF->srcipaddr);
    96bc:	1c1a      	adds	r2, r3, #0
    96be:	3218      	adds	r2, #24
    96c0:	3308      	adds	r3, #8
    96c2:	cb13      	ldmia	r3!, {r0, r1, r4}
    96c4:	c213      	stmia	r2!, {r0, r1, r4}
    96c6:	681b      	ldr	r3, [r3, #0]
    96c8:	6013      	str	r3, [r2, #0]
  uip_ds6_select_src(&UIP_IP_BUF->srcipaddr, &UIP_IP_BUF->destipaddr);
    96ca:	4871      	ldr	r0, [pc, #452]	; (9890 <uip_process+0xa28>)
    96cc:	4976      	ldr	r1, [pc, #472]	; (98a8 <uip_process+0xa40>)
    96ce:	4b69      	ldr	r3, [pc, #420]	; (9874 <uip_process+0xa0c>)
    96d0:	4798      	blx	r3
  /* And send out the RST packet! */
  goto tcp_send_noconn;
    96d2:	f000 fc17 	bl	9f04 <uip_process+0x109c>
     unused ones have the tcpstate set to CLOSED. Also, connections in
     TIME_WAIT are kept track of and we'll use the oldest one if no
     CLOSED connections are found. Thanks to Eddie C. Dost for a very
     nice algorithm for the TIME_WAIT search. */
  uip_connr = 0;
  for(c = 0; c < UIP_CONNS; ++c) {
    96d6:	2400      	movs	r4, #0
    96d8:	4b71      	ldr	r3, [pc, #452]	; (98a0 <uip_process+0xa38>)
    96da:	701c      	strb	r4, [r3, #0]
    96dc:	1c23      	adds	r3, r4, #0
    if(uip_conns[c].tcpstateflags == UIP_CLOSED) {
    96de:	4a6b      	ldr	r2, [pc, #428]	; (988c <uip_process+0xa24>)
    96e0:	4691      	mov	r9, r2
    96e2:	2030      	movs	r0, #48	; 0x30
      uip_connr = &uip_conns[c];
      break;
    }
    if(uip_conns[c].tcpstateflags == UIP_TIME_WAIT) {
      if(uip_connr == 0 ||
         uip_conns[c].timer > uip_connr->timer) {
    96e4:	2226      	movs	r2, #38	; 0x26
    96e6:	4690      	mov	r8, r2
     TIME_WAIT are kept track of and we'll use the oldest one if no
     CLOSED connections are found. Thanks to Eddie C. Dost for a very
     nice algorithm for the TIME_WAIT search. */
  uip_connr = 0;
  for(c = 0; c < UIP_CONNS; ++c) {
    if(uip_conns[c].tcpstateflags == UIP_CLOSED) {
    96e8:	1c1a      	adds	r2, r3, #0
    96ea:	1c01      	adds	r1, r0, #0
    96ec:	4359      	muls	r1, r3
    96ee:	4449      	add	r1, r9
    96f0:	3120      	adds	r1, #32
    96f2:	7949      	ldrb	r1, [r1, #5]
    96f4:	2900      	cmp	r1, #0
    96f6:	d106      	bne.n	9706 <uip_process+0x89e>
    96f8:	4969      	ldr	r1, [pc, #420]	; (98a0 <uip_process+0xa38>)
    96fa:	700b      	strb	r3, [r1, #0]
      uip_connr = &uip_conns[c];
    96fc:	2430      	movs	r4, #48	; 0x30
    96fe:	4362      	muls	r2, r4
    9700:	4c62      	ldr	r4, [pc, #392]	; (988c <uip_process+0xa24>)
    9702:	1914      	adds	r4, r2, r4
      break;
    9704:	e01a      	b.n	973c <uip_process+0x8d4>
    }
    if(uip_conns[c].tcpstateflags == UIP_TIME_WAIT) {
    9706:	2907      	cmp	r1, #7
    9708:	d112      	bne.n	9730 <uip_process+0x8c8>
      if(uip_connr == 0 ||
    970a:	2c00      	cmp	r4, #0
    970c:	d00b      	beq.n	9726 <uip_process+0x8be>
         uip_conns[c].timer > uip_connr->timer) {
    970e:	1c01      	adds	r1, r0, #0
    9710:	4359      	muls	r1, r3
    9712:	4f5e      	ldr	r7, [pc, #376]	; (988c <uip_process+0xa24>)
    9714:	46bc      	mov	ip, r7
    9716:	4461      	add	r1, ip
    9718:	3120      	adds	r1, #32
    if(uip_conns[c].tcpstateflags == UIP_CLOSED) {
      uip_connr = &uip_conns[c];
      break;
    }
    if(uip_conns[c].tcpstateflags == UIP_TIME_WAIT) {
      if(uip_connr == 0 ||
    971a:	7989      	ldrb	r1, [r1, #6]
    971c:	468c      	mov	ip, r1
    971e:	4641      	mov	r1, r8
    9720:	5c61      	ldrb	r1, [r4, r1]
    9722:	458c      	cmp	ip, r1
    9724:	d904      	bls.n	9730 <uip_process+0x8c8>
         uip_conns[c].timer > uip_connr->timer) {
        uip_connr = &uip_conns[c];
    9726:	4342      	muls	r2, r0
    9728:	1c14      	adds	r4, r2, #0
    972a:	4a58      	ldr	r2, [pc, #352]	; (988c <uip_process+0xa24>)
    972c:	4694      	mov	ip, r2
    972e:	4464      	add	r4, ip
     unused ones have the tcpstate set to CLOSED. Also, connections in
     TIME_WAIT are kept track of and we'll use the oldest one if no
     CLOSED connections are found. Thanks to Eddie C. Dost for a very
     nice algorithm for the TIME_WAIT search. */
  uip_connr = 0;
  for(c = 0; c < UIP_CONNS; ++c) {
    9730:	3301      	adds	r3, #1
    9732:	b2db      	uxtb	r3, r3
    9734:	2b09      	cmp	r3, #9
    9736:	d9d7      	bls.n	96e8 <uip_process+0x880>
    9738:	4a59      	ldr	r2, [pc, #356]	; (98a0 <uip_process+0xa38>)
    973a:	7013      	strb	r3, [r2, #0]
        uip_connr = &uip_conns[c];
      }
    }
  }

  if(uip_connr == 0) {
    973c:	2c00      	cmp	r4, #0
    973e:	d101      	bne.n	9744 <uip_process+0x8dc>
    9740:	f000 fc18 	bl	9f74 <uip_process+0x110c>
       have more spare connections. */
    UIP_STAT(++uip_stat.tcp.syndrop);
    UIP_LOG("tcp: found no unused connections.");
    goto drop;
  }
  uip_conn = uip_connr;
    9744:	4b41      	ldr	r3, [pc, #260]	; (984c <uip_process+0x9e4>)
    9746:	601c      	str	r4, [r3, #0]
  
  /* Fill in the necessary fields for the new connection. */
  uip_connr->rto = uip_connr->timer = UIP_RTO;
    9748:	2303      	movs	r3, #3
    974a:	2226      	movs	r2, #38	; 0x26
    974c:	54a3      	strb	r3, [r4, r2]
    974e:	3a02      	subs	r2, #2
    9750:	54a3      	strb	r3, [r4, r2]
  uip_connr->sa = 0;
    9752:	2300      	movs	r3, #0
    9754:	3a02      	subs	r2, #2
    9756:	54a3      	strb	r3, [r4, r2]
  uip_connr->sv = 4;
    9758:	2104      	movs	r1, #4
    975a:	3201      	adds	r2, #1
    975c:	54a1      	strb	r1, [r4, r2]
  uip_connr->nrtx = 0;
    975e:	3204      	adds	r2, #4
    9760:	54a3      	strb	r3, [r4, r2]
  uip_connr->lport = UIP_TCP_BUF->destport;
    9762:	8225      	strh	r5, [r4, #16]
  uip_connr->rport = UIP_TCP_BUF->srcport;
    9764:	8266      	strh	r6, [r4, #18]
  uip_ipaddr_copy(&uip_connr->ripaddr, &UIP_IP_BUF->srcipaddr);
    9766:	4d41      	ldr	r5, [pc, #260]	; (986c <uip_process+0xa04>)
    9768:	1c2b      	adds	r3, r5, #0
    976a:	3308      	adds	r3, #8
    976c:	1c22      	adds	r2, r4, #0
    976e:	cb43      	ldmia	r3!, {r0, r1, r6}
    9770:	c243      	stmia	r2!, {r0, r1, r6}
    9772:	681b      	ldr	r3, [r3, #0]
    9774:	6013      	str	r3, [r2, #0]
  uip_connr->tcpstateflags = UIP_SYN_RCVD;
    9776:	2001      	movs	r0, #1
    9778:	2325      	movs	r3, #37	; 0x25
    977a:	54e0      	strb	r0, [r4, r3]

  uip_connr->snd_nxt[0] = iss[0];
    977c:	4b4b      	ldr	r3, [pc, #300]	; (98ac <uip_process+0xa44>)
    977e:	781a      	ldrb	r2, [r3, #0]
    9780:	7622      	strb	r2, [r4, #24]
  uip_connr->snd_nxt[1] = iss[1];
    9782:	785a      	ldrb	r2, [r3, #1]
    9784:	7662      	strb	r2, [r4, #25]
  uip_connr->snd_nxt[2] = iss[2];
    9786:	789a      	ldrb	r2, [r3, #2]
    9788:	76a2      	strb	r2, [r4, #26]
  uip_connr->snd_nxt[3] = iss[3];
    978a:	78db      	ldrb	r3, [r3, #3]
    978c:	76e3      	strb	r3, [r4, #27]
  uip_connr->len = 1;
    978e:	83a0      	strh	r0, [r4, #28]

  /* rcv_nxt should be the seqno from the incoming packet + 1. */
  uip_connr->rcv_nxt[3] = UIP_TCP_BUF->seqno[3];
    9790:	232f      	movs	r3, #47	; 0x2f
    9792:	5ceb      	ldrb	r3, [r5, r3]
    9794:	75e3      	strb	r3, [r4, #23]
  uip_connr->rcv_nxt[2] = UIP_TCP_BUF->seqno[2];
    9796:	232e      	movs	r3, #46	; 0x2e
    9798:	5ceb      	ldrb	r3, [r5, r3]
    979a:	75a3      	strb	r3, [r4, #22]
  uip_connr->rcv_nxt[1] = UIP_TCP_BUF->seqno[1];
    979c:	232d      	movs	r3, #45	; 0x2d
    979e:	5ceb      	ldrb	r3, [r5, r3]
    97a0:	7563      	strb	r3, [r4, #21]
  uip_connr->rcv_nxt[0] = UIP_TCP_BUF->seqno[0];
    97a2:	232c      	movs	r3, #44	; 0x2c
    97a4:	5ceb      	ldrb	r3, [r5, r3]
    97a6:	7523      	strb	r3, [r4, #20]
  uip_add_rcv_nxt(1);
    97a8:	4b41      	ldr	r3, [pc, #260]	; (98b0 <uip_process+0xa48>)
    97aa:	4798      	blx	r3

  /* Parse the TCP MSS option, if present. */
  if((UIP_TCP_BUF->tcpoffset & 0xf0) > 0x50) {
    97ac:	2334      	movs	r3, #52	; 0x34
    97ae:	5cea      	ldrb	r2, [r5, r3]
    97b0:	3b25      	subs	r3, #37	; 0x25
    97b2:	1c11      	adds	r1, r2, #0
    97b4:	4399      	bics	r1, r3
    97b6:	2950      	cmp	r1, #80	; 0x50
    97b8:	dc00      	bgt.n	97bc <uip_process+0x954>
    97ba:	e089      	b.n	98d0 <uip_process+0xa68>
    for(c = 0; c < ((UIP_TCP_BUF->tcpoffset >> 4) - 5) << 2 ;) {
    97bc:	2300      	movs	r3, #0
    97be:	4938      	ldr	r1, [pc, #224]	; (98a0 <uip_process+0xa38>)
    97c0:	700b      	strb	r3, [r1, #0]
    97c2:	0912      	lsrs	r2, r2, #4
    97c4:	3a05      	subs	r2, #5
    97c6:	0090      	lsls	r0, r2, #2
    97c8:	4a3a      	ldr	r2, [pc, #232]	; (98b4 <uip_process+0xa4c>)
    97ca:	7815      	ldrb	r5, [r2, #0]
    97cc:	e078      	b.n	98c0 <uip_process+0xa58>
      opt = uip_buf[UIP_TCPIP_HLEN + UIP_LLH_LEN + c];
    97ce:	4927      	ldr	r1, [pc, #156]	; (986c <uip_process+0xa04>)
    97d0:	18c9      	adds	r1, r1, r3
    97d2:	313c      	adds	r1, #60	; 0x3c
    97d4:	780d      	ldrb	r5, [r1, #0]
      if(opt == TCP_OPT_END) {
    97d6:	2d00      	cmp	r5, #0
    97d8:	d105      	bne.n	97e6 <uip_process+0x97e>
    97da:	4a31      	ldr	r2, [pc, #196]	; (98a0 <uip_process+0xa38>)
    97dc:	7013      	strb	r3, [r2, #0]
    97de:	2200      	movs	r2, #0
    97e0:	4b34      	ldr	r3, [pc, #208]	; (98b4 <uip_process+0xa4c>)
    97e2:	701a      	strb	r2, [r3, #0]
    97e4:	e074      	b.n	98d0 <uip_process+0xa68>
        /* End of options. */
        break;
      } else if(opt == TCP_OPT_NOOP) {
    97e6:	2d01      	cmp	r5, #1
    97e8:	d102      	bne.n	97f0 <uip_process+0x988>
        ++c;
    97ea:	3301      	adds	r3, #1
    97ec:	b2db      	uxtb	r3, r3
    97ee:	e067      	b.n	98c0 <uip_process+0xa58>
        /* NOP option. */
      } else if(opt == TCP_OPT_MSS &&
    97f0:	2d02      	cmp	r5, #2
    97f2:	d11f      	bne.n	9834 <uip_process+0x9cc>
                uip_buf[UIP_TCPIP_HLEN + UIP_LLH_LEN + 1 + c] == TCP_OPT_MSS_LEN) {
    97f4:	491d      	ldr	r1, [pc, #116]	; (986c <uip_process+0xa04>)
    97f6:	1889      	adds	r1, r1, r2
    97f8:	313d      	adds	r1, #61	; 0x3d
        /* End of options. */
        break;
      } else if(opt == TCP_OPT_NOOP) {
        ++c;
        /* NOP option. */
      } else if(opt == TCP_OPT_MSS &&
    97fa:	7809      	ldrb	r1, [r1, #0]
    97fc:	2904      	cmp	r1, #4
    97fe:	d119      	bne.n	9834 <uip_process+0x9cc>
    9800:	4927      	ldr	r1, [pc, #156]	; (98a0 <uip_process+0xa38>)
    9802:	700b      	strb	r3, [r1, #0]
    9804:	2102      	movs	r1, #2
    9806:	4b2b      	ldr	r3, [pc, #172]	; (98b4 <uip_process+0xa4c>)
    9808:	7019      	strb	r1, [r3, #0]
                uip_buf[UIP_TCPIP_HLEN + UIP_LLH_LEN + 1 + c] == TCP_OPT_MSS_LEN) {
        /* An MSS option with the right option length. */
        tmp16 = ((uint16_t)uip_buf[UIP_TCPIP_HLEN + UIP_LLH_LEN + 2 + c] << 8) |
    980a:	4b18      	ldr	r3, [pc, #96]	; (986c <uip_process+0xa04>)
    980c:	189a      	adds	r2, r3, r2
    980e:	1c13      	adds	r3, r2, #0
    9810:	333e      	adds	r3, #62	; 0x3e
    9812:	781b      	ldrb	r3, [r3, #0]
    9814:	021b      	lsls	r3, r3, #8
          (uint16_t)uip_buf[UIP_IPTCPH_LEN + UIP_LLH_LEN + 3 + c];
    9816:	323f      	adds	r2, #63	; 0x3f
        ++c;
        /* NOP option. */
      } else if(opt == TCP_OPT_MSS &&
                uip_buf[UIP_TCPIP_HLEN + UIP_LLH_LEN + 1 + c] == TCP_OPT_MSS_LEN) {
        /* An MSS option with the right option length. */
        tmp16 = ((uint16_t)uip_buf[UIP_TCPIP_HLEN + UIP_LLH_LEN + 2 + c] << 8) |
    9818:	7812      	ldrb	r2, [r2, #0]
    981a:	4313      	orrs	r3, r2
    981c:	4a1f      	ldr	r2, [pc, #124]	; (989c <uip_process+0xa34>)
    981e:	8013      	strh	r3, [r2, #0]
          (uint16_t)uip_buf[UIP_IPTCPH_LEN + UIP_LLH_LEN + 3 + c];
        uip_connr->initialmss = uip_connr->mss =
    9820:	1c1a      	adds	r2, r3, #0
    9822:	3153      	adds	r1, #83	; 0x53
    9824:	31ff      	adds	r1, #255	; 0xff
    9826:	428b      	cmp	r3, r1
    9828:	d901      	bls.n	982e <uip_process+0x9c6>
    982a:	4b23      	ldr	r3, [pc, #140]	; (98b8 <uip_process+0xa50>)
    982c:	881a      	ldrh	r2, [r3, #0]
    982e:	83e2      	strh	r2, [r4, #30]
    9830:	8422      	strh	r2, [r4, #32]
          tmp16 > UIP_TCP_MSS? UIP_TCP_MSS: tmp16;
   
        /* And we are done processing options. */
        break;
    9832:	e04d      	b.n	98d0 <uip_process+0xa68>
      } else {
        /* All other options have a length field, so that we easily
           can skip past them. */
        if(uip_buf[UIP_TCPIP_HLEN + UIP_LLH_LEN + 1 + c] == 0) {
    9834:	490d      	ldr	r1, [pc, #52]	; (986c <uip_process+0xa04>)
    9836:	1889      	adds	r1, r1, r2
    9838:	313d      	adds	r1, #61	; 0x3d
    983a:	7809      	ldrb	r1, [r1, #0]
    983c:	2900      	cmp	r1, #0
    983e:	d13d      	bne.n	98bc <uip_process+0xa54>
    9840:	4a17      	ldr	r2, [pc, #92]	; (98a0 <uip_process+0xa38>)
    9842:	7013      	strb	r3, [r2, #0]
    9844:	4b1b      	ldr	r3, [pc, #108]	; (98b4 <uip_process+0xa4c>)
    9846:	701d      	strb	r5, [r3, #0]
    9848:	e042      	b.n	98d0 <uip_process+0xa68>
    984a:	46c0      	nop			; (mov r8, r8)
    984c:	20002e74 	.word	0x20002e74
    9850:	20002e64 	.word	0x20002e64
    9854:	20002d04 	.word	0x20002d04
    9858:	20002e70 	.word	0x20002e70
    985c:	20002cc4 	.word	0x20002cc4
    9860:	20003088 	.word	0x20003088
    9864:	0000aa79 	.word	0x0000aa79
    9868:	20002cc0 	.word	0x20002cc0
    986c:	20002cd4 	.word	0x20002cd4
    9870:	20002e6c 	.word	0x20002e6c
    9874:	0000771d 	.word	0x0000771d
    9878:	0000d475 	.word	0x0000d475
    987c:	00008c01 	.word	0x00008c01
    9880:	00008db1 	.word	0x00008db1
    9884:	00008bf1 	.word	0x00008bf1
    9888:	0000ffff 	.word	0x0000ffff
    988c:	20002e78 	.word	0x20002e78
    9890:	20002cdc 	.word	0x20002cdc
    9894:	00010b11 	.word	0x00010b11
    9898:	20003058 	.word	0x20003058
    989c:	20000b10 	.word	0x20000b10
    98a0:	20000b1c 	.word	0x20000b1c
    98a4:	20003060 	.word	0x20003060
    98a8:	20002cec 	.word	0x20002cec
    98ac:	20000b14 	.word	0x20000b14
    98b0:	00008bb1 	.word	0x00008bb1
    98b4:	20000b1d 	.word	0x20000b1d
    98b8:	00012c2c 	.word	0x00012c2c
          /* If the length field is zero, the options are malformed
             and we don't process them further. */
          break;
        }
        c += uip_buf[UIP_TCPIP_HLEN + UIP_LLH_LEN + 1 + c];
    98bc:	18cb      	adds	r3, r1, r3
    98be:	b2db      	uxtb	r3, r3
  uip_connr->rcv_nxt[0] = UIP_TCP_BUF->seqno[0];
  uip_add_rcv_nxt(1);

  /* Parse the TCP MSS option, if present. */
  if((UIP_TCP_BUF->tcpoffset & 0xf0) > 0x50) {
    for(c = 0; c < ((UIP_TCP_BUF->tcpoffset >> 4) - 5) << 2 ;) {
    98c0:	1e1a      	subs	r2, r3, #0
    98c2:	4282      	cmp	r2, r0
    98c4:	da00      	bge.n	98c8 <uip_process+0xa60>
    98c6:	e782      	b.n	97ce <uip_process+0x966>
    98c8:	4ac4      	ldr	r2, [pc, #784]	; (9bdc <uip_process+0xd74>)
    98ca:	7013      	strb	r3, [r2, #0]
    98cc:	4bc4      	ldr	r3, [pc, #784]	; (9be0 <uip_process+0xd78>)
    98ce:	701d      	strb	r5, [r3, #0]
  }
  
  /* Our response will be a SYNACK. */
#if UIP_ACTIVE_OPEN
 tcp_send_synack:
  UIP_TCP_BUF->flags = TCP_ACK;
    98d0:	2110      	movs	r1, #16
    98d2:	2335      	movs	r3, #53	; 0x35
    98d4:	4ac3      	ldr	r2, [pc, #780]	; (9be4 <uip_process+0xd7c>)
    98d6:	54d1      	strb	r1, [r2, r3]
  
 tcp_send_syn:
  UIP_TCP_BUF->flags |= TCP_SYN;
    98d8:	4bc2      	ldr	r3, [pc, #776]	; (9be4 <uip_process+0xd7c>)
    98da:	2135      	movs	r1, #53	; 0x35
    98dc:	5c58      	ldrb	r0, [r3, r1]
    98de:	2202      	movs	r2, #2
    98e0:	4302      	orrs	r2, r0
    98e2:	545a      	strb	r2, [r3, r1]
  UIP_TCP_BUF->flags = TCP_SYN | TCP_ACK;
#endif /* UIP_ACTIVE_OPEN */
  
  /* We send out the TCP Maximum Segment Size option with our
     SYNACK. */
  UIP_TCP_BUF->optdata[0] = TCP_OPT_MSS;
    98e4:	223c      	movs	r2, #60	; 0x3c
    98e6:	3933      	subs	r1, #51	; 0x33
    98e8:	5499      	strb	r1, [r3, r2]
  UIP_TCP_BUF->optdata[1] = TCP_OPT_MSS_LEN;
    98ea:	3102      	adds	r1, #2
    98ec:	3201      	adds	r2, #1
    98ee:	5499      	strb	r1, [r3, r2]
  UIP_TCP_BUF->optdata[2] = (UIP_TCP_MSS) / 256;
    98f0:	3903      	subs	r1, #3
    98f2:	3201      	adds	r2, #1
    98f4:	5499      	strb	r1, [r3, r2]
  UIP_TCP_BUF->optdata[3] = (UIP_TCP_MSS) & 255;
    98f6:	3153      	adds	r1, #83	; 0x53
    98f8:	3201      	adds	r2, #1
    98fa:	5499      	strb	r1, [r3, r2]
  uip_len = UIP_IPTCPH_LEN + TCP_OPT_MSS_LEN;
    98fc:	3914      	subs	r1, #20
    98fe:	4aba      	ldr	r2, [pc, #744]	; (9be8 <uip_process+0xd80>)
    9900:	8011      	strh	r1, [r2, #0]
  UIP_TCP_BUF->tcpoffset = ((UIP_TCPH_LEN + TCP_OPT_MSS_LEN) / 4) << 4;
    9902:	3120      	adds	r1, #32
    9904:	2234      	movs	r2, #52	; 0x34
    9906:	5499      	strb	r1, [r3, r2]
  goto tcp_send;
    9908:	e2bf      	b.n	9e8a <uip_process+0x1022>
    990a:	1c25      	adds	r5, r4, #0

  /* This label will be jumped to if we found an active connection. */
 found:
  PRINTF("In found\n\r");
  uip_conn = uip_connr;
    990c:	4bb7      	ldr	r3, [pc, #732]	; (9bec <uip_process+0xd84>)
    990e:	601c      	str	r4, [r3, #0]
  uip_flags = 0;
    9910:	2200      	movs	r2, #0
    9912:	4bb7      	ldr	r3, [pc, #732]	; (9bf0 <uip_process+0xd88>)
    9914:	701a      	strb	r2, [r3, #0]
  /* We do a very naive form of TCP reset processing; we just accept
     any RST and kill our connection. We should in fact check if the
     sequence number of this reset is wihtin our advertised window
     before we accept the reset. */
  if(UIP_TCP_BUF->flags & TCP_RST) {
    9916:	2335      	movs	r3, #53	; 0x35
    9918:	4ab2      	ldr	r2, [pc, #712]	; (9be4 <uip_process+0xd7c>)
    991a:	5cd1      	ldrb	r1, [r2, r3]
    991c:	2604      	movs	r6, #4
    991e:	400e      	ands	r6, r1
    9920:	d008      	beq.n	9934 <uip_process+0xacc>
    uip_connr->tcpstateflags = UIP_CLOSED;
    9922:	2200      	movs	r2, #0
    9924:	3b10      	subs	r3, #16
    9926:	54e2      	strb	r2, [r4, r3]
    UIP_LOG("tcp: got reset, aborting connection.");
    uip_flags = UIP_ABORT;
    9928:	3220      	adds	r2, #32
    992a:	4bb1      	ldr	r3, [pc, #708]	; (9bf0 <uip_process+0xd88>)
    992c:	701a      	strb	r2, [r3, #0]
    UIP_APPCALL();
    992e:	4bb1      	ldr	r3, [pc, #708]	; (9bf4 <uip_process+0xd8c>)
    9930:	4798      	blx	r3
    goto drop;
    9932:	e31f      	b.n	9f74 <uip_process+0x110c>
  }
  /* Calculate the length of the data, if the application has sent
     any data to us. */
  c = (UIP_TCP_BUF->tcpoffset >> 4) << 2;
    9934:	2334      	movs	r3, #52	; 0x34
    9936:	4aab      	ldr	r2, [pc, #684]	; (9be4 <uip_process+0xd7c>)
    9938:	5cd3      	ldrb	r3, [r2, r3]
    993a:	091b      	lsrs	r3, r3, #4
    993c:	009a      	lsls	r2, r3, #2
    993e:	4ba7      	ldr	r3, [pc, #668]	; (9bdc <uip_process+0xd74>)
    9940:	701a      	strb	r2, [r3, #0]
  /* uip_len will contain the length of the actual TCP data. This is
     calculated by subtracing the length of the TCP header (in
     c) and the length of the IP header (20 bytes). */
  uip_len = uip_len - c - UIP_IPH_LEN;
    9942:	48a9      	ldr	r0, [pc, #676]	; (9be8 <uip_process+0xd80>)
    9944:	8803      	ldrh	r3, [r0, #0]
    9946:	3b28      	subs	r3, #40	; 0x28
    9948:	1a9b      	subs	r3, r3, r2
    994a:	b29b      	uxth	r3, r3
    994c:	8003      	strh	r3, [r0, #0]
  /* First, check if the sequence number of the incoming packet is
     what we're expecting next. If not, we send out an ACK with the
     correct numbers in, unless we are in the SYN_RCVD state and
     receive a SYN, in which case we should retransmit our SYNACK
     (which is done futher down). */
  if(!((((uip_connr->tcpstateflags & UIP_TS_MASK) == UIP_SYN_SENT) &&
    994e:	200f      	movs	r0, #15
    9950:	4038      	ands	r0, r7
    9952:	2802      	cmp	r0, #2
    9954:	d104      	bne.n	9960 <uip_process+0xaf8>
    9956:	223f      	movs	r2, #63	; 0x3f
    9958:	400a      	ands	r2, r1
    995a:	2a12      	cmp	r2, #18
    995c:	d106      	bne.n	996c <uip_process+0xb04>
    995e:	e02a      	b.n	99b6 <uip_process+0xb4e>
    9960:	2801      	cmp	r0, #1
    9962:	d103      	bne.n	996c <uip_process+0xb04>
	((UIP_TCP_BUF->flags & TCP_CTL) == (TCP_SYN | TCP_ACK))) ||
       (((uip_connr->tcpstateflags & UIP_TS_MASK) == UIP_SYN_RCVD) &&
    9964:	223f      	movs	r2, #63	; 0x3f
    9966:	400a      	ands	r2, r1
    9968:	2a02      	cmp	r2, #2
    996a:	d024      	beq.n	99b6 <uip_process+0xb4e>
	((UIP_TCP_BUF->flags & TCP_CTL) == TCP_SYN)))) {
    if((uip_len > 0 || ((UIP_TCP_BUF->flags & (TCP_SYN | TCP_FIN)) != 0)) &&
    996c:	2b00      	cmp	r3, #0
    996e:	d101      	bne.n	9974 <uip_process+0xb0c>
    9970:	078b      	lsls	r3, r1, #30
    9972:	d020      	beq.n	99b6 <uip_process+0xb4e>
       (UIP_TCP_BUF->seqno[0] != uip_connr->rcv_nxt[0] ||
    9974:	232c      	movs	r3, #44	; 0x2c
     (which is done futher down). */
  if(!((((uip_connr->tcpstateflags & UIP_TS_MASK) == UIP_SYN_SENT) &&
	((UIP_TCP_BUF->flags & TCP_CTL) == (TCP_SYN | TCP_ACK))) ||
       (((uip_connr->tcpstateflags & UIP_TS_MASK) == UIP_SYN_RCVD) &&
	((UIP_TCP_BUF->flags & TCP_CTL) == TCP_SYN)))) {
    if((uip_len > 0 || ((UIP_TCP_BUF->flags & (TCP_SYN | TCP_FIN)) != 0)) &&
    9976:	4a9b      	ldr	r2, [pc, #620]	; (9be4 <uip_process+0xd7c>)
    9978:	5cd2      	ldrb	r2, [r2, r3]
    997a:	7d2b      	ldrb	r3, [r5, #20]
    997c:	429a      	cmp	r2, r3
    997e:	d111      	bne.n	99a4 <uip_process+0xb3c>
       (UIP_TCP_BUF->seqno[0] != uip_connr->rcv_nxt[0] ||
        UIP_TCP_BUF->seqno[1] != uip_connr->rcv_nxt[1] ||
    9980:	232d      	movs	r3, #45	; 0x2d
  if(!((((uip_connr->tcpstateflags & UIP_TS_MASK) == UIP_SYN_SENT) &&
	((UIP_TCP_BUF->flags & TCP_CTL) == (TCP_SYN | TCP_ACK))) ||
       (((uip_connr->tcpstateflags & UIP_TS_MASK) == UIP_SYN_RCVD) &&
	((UIP_TCP_BUF->flags & TCP_CTL) == TCP_SYN)))) {
    if((uip_len > 0 || ((UIP_TCP_BUF->flags & (TCP_SYN | TCP_FIN)) != 0)) &&
       (UIP_TCP_BUF->seqno[0] != uip_connr->rcv_nxt[0] ||
    9982:	4a98      	ldr	r2, [pc, #608]	; (9be4 <uip_process+0xd7c>)
    9984:	5cd2      	ldrb	r2, [r2, r3]
    9986:	7d6b      	ldrb	r3, [r5, #21]
    9988:	429a      	cmp	r2, r3
    998a:	d10b      	bne.n	99a4 <uip_process+0xb3c>
        UIP_TCP_BUF->seqno[1] != uip_connr->rcv_nxt[1] ||
        UIP_TCP_BUF->seqno[2] != uip_connr->rcv_nxt[2] ||
    998c:	232e      	movs	r3, #46	; 0x2e
	((UIP_TCP_BUF->flags & TCP_CTL) == (TCP_SYN | TCP_ACK))) ||
       (((uip_connr->tcpstateflags & UIP_TS_MASK) == UIP_SYN_RCVD) &&
	((UIP_TCP_BUF->flags & TCP_CTL) == TCP_SYN)))) {
    if((uip_len > 0 || ((UIP_TCP_BUF->flags & (TCP_SYN | TCP_FIN)) != 0)) &&
       (UIP_TCP_BUF->seqno[0] != uip_connr->rcv_nxt[0] ||
        UIP_TCP_BUF->seqno[1] != uip_connr->rcv_nxt[1] ||
    998e:	4a95      	ldr	r2, [pc, #596]	; (9be4 <uip_process+0xd7c>)
    9990:	5cd2      	ldrb	r2, [r2, r3]
    9992:	7dab      	ldrb	r3, [r5, #22]
    9994:	429a      	cmp	r2, r3
    9996:	d105      	bne.n	99a4 <uip_process+0xb3c>
        UIP_TCP_BUF->seqno[2] != uip_connr->rcv_nxt[2] ||
        UIP_TCP_BUF->seqno[3] != uip_connr->rcv_nxt[3])) {
    9998:	232f      	movs	r3, #47	; 0x2f
       (((uip_connr->tcpstateflags & UIP_TS_MASK) == UIP_SYN_RCVD) &&
	((UIP_TCP_BUF->flags & TCP_CTL) == TCP_SYN)))) {
    if((uip_len > 0 || ((UIP_TCP_BUF->flags & (TCP_SYN | TCP_FIN)) != 0)) &&
       (UIP_TCP_BUF->seqno[0] != uip_connr->rcv_nxt[0] ||
        UIP_TCP_BUF->seqno[1] != uip_connr->rcv_nxt[1] ||
        UIP_TCP_BUF->seqno[2] != uip_connr->rcv_nxt[2] ||
    999a:	4a92      	ldr	r2, [pc, #584]	; (9be4 <uip_process+0xd7c>)
    999c:	5cd2      	ldrb	r2, [r2, r3]
    999e:	7deb      	ldrb	r3, [r5, #23]
    99a0:	429a      	cmp	r2, r3
    99a2:	d008      	beq.n	99b6 <uip_process+0xb4e>
        UIP_TCP_BUF->seqno[3] != uip_connr->rcv_nxt[3])) {

      if((UIP_TCP_BUF->flags & TCP_SYN)) {
    99a4:	078b      	lsls	r3, r1, #30
    99a6:	d400      	bmi.n	99aa <uip_process+0xb42>
    99a8:	e264      	b.n	9e74 <uip_process+0x100c>
        if((uip_connr->tcpstateflags & UIP_TS_MASK) == UIP_SYN_RCVD) {
    99aa:	2801      	cmp	r0, #1
    99ac:	d090      	beq.n	98d0 <uip_process+0xa68>
          goto tcp_send_synack;
        } else if((uip_connr->tcpstateflags & UIP_TS_MASK) == UIP_SYN_SENT) {
    99ae:	2802      	cmp	r0, #2
    99b0:	d000      	beq.n	99b4 <uip_process+0xb4c>
    99b2:	e25f      	b.n	9e74 <uip_process+0x100c>
    99b4:	e790      	b.n	98d8 <uip_process+0xa70>

  /* Next, check if the incoming segment acknowledges any outstanding
     data. If so, we update the sequence number, reset the length of
     the outstanding data, calculate RTT estimations, and reset the
     retransmission timer. */
  if((UIP_TCP_BUF->flags & TCP_ACK) && uip_outstanding(uip_connr)) {
    99b6:	06cb      	lsls	r3, r1, #27
    99b8:	d54f      	bpl.n	9a5a <uip_process+0xbf2>
    99ba:	8ba9      	ldrh	r1, [r5, #28]
    99bc:	2900      	cmp	r1, #0
    99be:	d04c      	beq.n	9a5a <uip_process+0xbf2>
    uip_add32(uip_connr->snd_nxt, uip_connr->len);
    99c0:	1c28      	adds	r0, r5, #0
    99c2:	3018      	adds	r0, #24
    99c4:	4b8c      	ldr	r3, [pc, #560]	; (9bf8 <uip_process+0xd90>)
    99c6:	4798      	blx	r3

    if(UIP_TCP_BUF->ackno[0] == uip_acc32[0] &&
    99c8:	2330      	movs	r3, #48	; 0x30
    99ca:	4a86      	ldr	r2, [pc, #536]	; (9be4 <uip_process+0xd7c>)
    99cc:	5cd0      	ldrb	r0, [r2, r3]
    99ce:	4b8b      	ldr	r3, [pc, #556]	; (9bfc <uip_process+0xd94>)
    99d0:	781b      	ldrb	r3, [r3, #0]
    99d2:	4283      	cmp	r3, r0
    99d4:	d141      	bne.n	9a5a <uip_process+0xbf2>
       UIP_TCP_BUF->ackno[1] == uip_acc32[1] &&
    99d6:	2331      	movs	r3, #49	; 0x31
    99d8:	5cd1      	ldrb	r1, [r2, r3]
    99da:	4b88      	ldr	r3, [pc, #544]	; (9bfc <uip_process+0xd94>)
     the outstanding data, calculate RTT estimations, and reset the
     retransmission timer. */
  if((UIP_TCP_BUF->flags & TCP_ACK) && uip_outstanding(uip_connr)) {
    uip_add32(uip_connr->snd_nxt, uip_connr->len);

    if(UIP_TCP_BUF->ackno[0] == uip_acc32[0] &&
    99dc:	785b      	ldrb	r3, [r3, #1]
    99de:	428b      	cmp	r3, r1
    99e0:	d13b      	bne.n	9a5a <uip_process+0xbf2>
       UIP_TCP_BUF->ackno[1] == uip_acc32[1] &&
       UIP_TCP_BUF->ackno[2] == uip_acc32[2] &&
    99e2:	2332      	movs	r3, #50	; 0x32
    99e4:	5cd2      	ldrb	r2, [r2, r3]
    99e6:	4b85      	ldr	r3, [pc, #532]	; (9bfc <uip_process+0xd94>)
     retransmission timer. */
  if((UIP_TCP_BUF->flags & TCP_ACK) && uip_outstanding(uip_connr)) {
    uip_add32(uip_connr->snd_nxt, uip_connr->len);

    if(UIP_TCP_BUF->ackno[0] == uip_acc32[0] &&
       UIP_TCP_BUF->ackno[1] == uip_acc32[1] &&
    99e8:	789b      	ldrb	r3, [r3, #2]
    99ea:	4293      	cmp	r3, r2
    99ec:	d135      	bne.n	9a5a <uip_process+0xbf2>
       UIP_TCP_BUF->ackno[2] == uip_acc32[2] &&
       UIP_TCP_BUF->ackno[3] == uip_acc32[3]) {
    99ee:	2333      	movs	r3, #51	; 0x33
    99f0:	4f7c      	ldr	r7, [pc, #496]	; (9be4 <uip_process+0xd7c>)
    99f2:	5cfb      	ldrb	r3, [r7, r3]
    99f4:	4f81      	ldr	r7, [pc, #516]	; (9bfc <uip_process+0xd94>)
  if((UIP_TCP_BUF->flags & TCP_ACK) && uip_outstanding(uip_connr)) {
    uip_add32(uip_connr->snd_nxt, uip_connr->len);

    if(UIP_TCP_BUF->ackno[0] == uip_acc32[0] &&
       UIP_TCP_BUF->ackno[1] == uip_acc32[1] &&
       UIP_TCP_BUF->ackno[2] == uip_acc32[2] &&
    99f6:	78ff      	ldrb	r7, [r7, #3]
    99f8:	429f      	cmp	r7, r3
    99fa:	d12e      	bne.n	9a5a <uip_process+0xbf2>
       UIP_TCP_BUF->ackno[3] == uip_acc32[3]) {
      /* Update sequence number. */
      uip_connr->snd_nxt[0] = uip_acc32[0];
    99fc:	7628      	strb	r0, [r5, #24]
      uip_connr->snd_nxt[1] = uip_acc32[1];
    99fe:	7669      	strb	r1, [r5, #25]
      uip_connr->snd_nxt[2] = uip_acc32[2];
    9a00:	76aa      	strb	r2, [r5, #26]
      uip_connr->snd_nxt[3] = uip_acc32[3];
    9a02:	76eb      	strb	r3, [r5, #27]
   
      /* Do RTT estimation, unless we have done retransmissions. */
      if(uip_connr->nrtx == 0) {
    9a04:	2327      	movs	r3, #39	; 0x27
    9a06:	5ceb      	ldrb	r3, [r5, r3]
    9a08:	2b00      	cmp	r3, #0
    9a0a:	d11d      	bne.n	9a48 <uip_process+0xbe0>
        signed char m;
        m = uip_connr->rto - uip_connr->timer;
        /* This is taken directly from VJs original code in his paper */
        m = m - (uip_connr->sa >> 3);
    9a0c:	2122      	movs	r1, #34	; 0x22
    9a0e:	5c6a      	ldrb	r2, [r5, r1]
      uip_connr->snd_nxt[3] = uip_acc32[3];
   
      /* Do RTT estimation, unless we have done retransmissions. */
      if(uip_connr->nrtx == 0) {
        signed char m;
        m = uip_connr->rto - uip_connr->timer;
    9a10:	3324      	adds	r3, #36	; 0x24
    9a12:	5ceb      	ldrb	r3, [r5, r3]
    9a14:	2026      	movs	r0, #38	; 0x26
    9a16:	5c28      	ldrb	r0, [r5, r0]
    9a18:	1a1b      	subs	r3, r3, r0
        /* This is taken directly from VJs original code in his paper */
        m = m - (uip_connr->sa >> 3);
    9a1a:	08d0      	lsrs	r0, r2, #3
    9a1c:	1a1b      	subs	r3, r3, r0
    9a1e:	b2db      	uxtb	r3, r3
    9a20:	b2df      	uxtb	r7, r3
        uip_connr->sa += m;
    9a22:	189a      	adds	r2, r3, r2
    9a24:	b2d2      	uxtb	r2, r2
    9a26:	546a      	strb	r2, [r5, r1]
        if(m < 0) {
    9a28:	b279      	sxtb	r1, r7
    9a2a:	2900      	cmp	r1, #0
    9a2c:	da01      	bge.n	9a32 <uip_process+0xbca>
          m = -m;
    9a2e:	425b      	negs	r3, r3
    9a30:	b2df      	uxtb	r7, r3
        }
        m = m - (uip_connr->sv >> 2);
    9a32:	2023      	movs	r0, #35	; 0x23
    9a34:	5c29      	ldrb	r1, [r5, r0]
    9a36:	088b      	lsrs	r3, r1, #2
    9a38:	1ac9      	subs	r1, r1, r3
        uip_connr->sv += m;
    9a3a:	19cb      	adds	r3, r1, r7
    9a3c:	b2db      	uxtb	r3, r3
    9a3e:	542b      	strb	r3, [r5, r0]
        uip_connr->rto = (uip_connr->sa >> 3) + uip_connr->sv;
    9a40:	08d2      	lsrs	r2, r2, #3
    9a42:	189b      	adds	r3, r3, r2
    9a44:	2224      	movs	r2, #36	; 0x24
    9a46:	54ab      	strb	r3, [r5, r2]

      }
      /* Set the acknowledged flag. */
      uip_flags = UIP_ACKDATA;
    9a48:	2201      	movs	r2, #1
    9a4a:	4b69      	ldr	r3, [pc, #420]	; (9bf0 <uip_process+0xd88>)
    9a4c:	701a      	strb	r2, [r3, #0]
      /* Reset the retransmission timer. */
      uip_connr->timer = uip_connr->rto;
    9a4e:	2324      	movs	r3, #36	; 0x24
    9a50:	5cea      	ldrb	r2, [r5, r3]
    9a52:	3302      	adds	r3, #2
    9a54:	54ea      	strb	r2, [r5, r3]

      /* Reset length of outstanding data. */
      uip_connr->len = 0;
    9a56:	2300      	movs	r3, #0
    9a58:	83ab      	strh	r3, [r5, #28]
    }
    
  }

  /* Do different things depending on in what state the connection is. */
  switch(uip_connr->tcpstateflags & UIP_TS_MASK) {
    9a5a:	2325      	movs	r3, #37	; 0x25
    9a5c:	5ce9      	ldrb	r1, [r5, r3]
    9a5e:	3b16      	subs	r3, #22
    9a60:	400b      	ands	r3, r1
    9a62:	3b01      	subs	r3, #1
    9a64:	b2da      	uxtb	r2, r3
    9a66:	2a07      	cmp	r2, #7
    9a68:	d900      	bls.n	9a6c <uip_process+0xc04>
    9a6a:	e283      	b.n	9f74 <uip_process+0x110c>
    9a6c:	b2db      	uxtb	r3, r3
    9a6e:	009b      	lsls	r3, r3, #2
    9a70:	4a63      	ldr	r2, [pc, #396]	; (9c00 <uip_process+0xd98>)
    9a72:	58d3      	ldr	r3, [r2, r3]
    9a74:	469f      	mov	pc, r3
    case UIP_SYN_RCVD:
      /* In SYN_RCVD we have sent out a SYNACK in response to a SYN, and
         we are waiting for an ACK that acknowledges the data we sent
         out the last time. Therefore, we want to have the UIP_ACKDATA
         flag set. If so, we enter the ESTABLISHED state. */
      if(uip_flags & UIP_ACKDATA) {
    9a76:	4b5e      	ldr	r3, [pc, #376]	; (9bf0 <uip_process+0xd88>)
    9a78:	781b      	ldrb	r3, [r3, #0]
    9a7a:	07db      	lsls	r3, r3, #31
    9a7c:	d516      	bpl.n	9aac <uip_process+0xc44>
        uip_connr->tcpstateflags = UIP_ESTABLISHED;
    9a7e:	2203      	movs	r2, #3
    9a80:	2325      	movs	r3, #37	; 0x25
    9a82:	54ea      	strb	r2, [r5, r3]
        uip_flags = UIP_CONNECTED;
    9a84:	323d      	adds	r2, #61	; 0x3d
    9a86:	4b5a      	ldr	r3, [pc, #360]	; (9bf0 <uip_process+0xd88>)
    9a88:	701a      	strb	r2, [r3, #0]
        uip_connr->len = 0;
    9a8a:	2300      	movs	r3, #0
    9a8c:	83ab      	strh	r3, [r5, #28]
        if(uip_len > 0) {
    9a8e:	4b56      	ldr	r3, [pc, #344]	; (9be8 <uip_process+0xd80>)
    9a90:	8818      	ldrh	r0, [r3, #0]
    9a92:	2800      	cmp	r0, #0
    9a94:	d004      	beq.n	9aa0 <uip_process+0xc38>
          uip_flags |= UIP_NEWDATA;
    9a96:	3202      	adds	r2, #2
    9a98:	4b55      	ldr	r3, [pc, #340]	; (9bf0 <uip_process+0xd88>)
    9a9a:	701a      	strb	r2, [r3, #0]
          uip_add_rcv_nxt(uip_len);
    9a9c:	4b59      	ldr	r3, [pc, #356]	; (9c04 <uip_process+0xd9c>)
    9a9e:	4798      	blx	r3
        }
        uip_slen = 0;
    9aa0:	2200      	movs	r2, #0
    9aa2:	4b59      	ldr	r3, [pc, #356]	; (9c08 <uip_process+0xda0>)
    9aa4:	801a      	strh	r2, [r3, #0]
        UIP_APPCALL();
    9aa6:	4b53      	ldr	r3, [pc, #332]	; (9bf4 <uip_process+0xd8c>)
    9aa8:	4798      	blx	r3
        goto appsend;
    9aaa:	e11d      	b.n	9ce8 <uip_process+0xe80>
      }
      /* We need to retransmit the SYNACK */
      if((UIP_TCP_BUF->flags & TCP_CTL) == TCP_SYN) {
    9aac:	2335      	movs	r3, #53	; 0x35
    9aae:	4a4d      	ldr	r2, [pc, #308]	; (9be4 <uip_process+0xd7c>)
    9ab0:	5cd2      	ldrb	r2, [r2, r3]
    9ab2:	330a      	adds	r3, #10
    9ab4:	4013      	ands	r3, r2
    9ab6:	2b02      	cmp	r3, #2
    9ab8:	d000      	beq.n	9abc <uip_process+0xc54>
    9aba:	e25b      	b.n	9f74 <uip_process+0x110c>
    9abc:	e708      	b.n	98d0 <uip_process+0xa68>
    case UIP_SYN_SENT:
      /* In SYN_SENT, we wait for a SYNACK that is sent in response to
         our SYN. The rcv_nxt is set to sequence number in the SYNACK
         plus one, and we send an ACK. We move into the ESTABLISHED
         state. */
      if((uip_flags & UIP_ACKDATA) &&
    9abe:	4b4c      	ldr	r3, [pc, #304]	; (9bf0 <uip_process+0xd88>)
    9ac0:	781b      	ldrb	r3, [r3, #0]
    9ac2:	07db      	lsls	r3, r3, #31
    9ac4:	d57e      	bpl.n	9bc4 <uip_process+0xd5c>
         (UIP_TCP_BUF->flags & TCP_CTL) == (TCP_SYN | TCP_ACK)) {
    9ac6:	2335      	movs	r3, #53	; 0x35
    9ac8:	4a46      	ldr	r2, [pc, #280]	; (9be4 <uip_process+0xd7c>)
    9aca:	5cd2      	ldrb	r2, [r2, r3]
    case UIP_SYN_SENT:
      /* In SYN_SENT, we wait for a SYNACK that is sent in response to
         our SYN. The rcv_nxt is set to sequence number in the SYNACK
         plus one, and we send an ACK. We move into the ESTABLISHED
         state. */
      if((uip_flags & UIP_ACKDATA) &&
    9acc:	330a      	adds	r3, #10
    9ace:	4013      	ands	r3, r2
    9ad0:	2b12      	cmp	r3, #18
    9ad2:	d177      	bne.n	9bc4 <uip_process+0xd5c>
         (UIP_TCP_BUF->flags & TCP_CTL) == (TCP_SYN | TCP_ACK)) {

        /* Parse the TCP MSS option, if present. */
        if((UIP_TCP_BUF->tcpoffset & 0xf0) > 0x50) {
    9ad4:	3322      	adds	r3, #34	; 0x22
    9ad6:	4a43      	ldr	r2, [pc, #268]	; (9be4 <uip_process+0xd7c>)
    9ad8:	5cd3      	ldrb	r3, [r2, r3]
    9ada:	220f      	movs	r2, #15
    9adc:	1c19      	adds	r1, r3, #0
    9ade:	4391      	bics	r1, r2
    9ae0:	2950      	cmp	r1, #80	; 0x50
    9ae2:	dd50      	ble.n	9b86 <uip_process+0xd1e>
          for(c = 0; c < ((UIP_TCP_BUF->tcpoffset >> 4) - 5) << 2 ;) {
    9ae4:	2100      	movs	r1, #0
    9ae6:	4a3d      	ldr	r2, [pc, #244]	; (9bdc <uip_process+0xd74>)
    9ae8:	7011      	strb	r1, [r2, #0]
    9aea:	091b      	lsrs	r3, r3, #4
    9aec:	3b05      	subs	r3, #5
    9aee:	009b      	lsls	r3, r3, #2
    9af0:	4a3b      	ldr	r2, [pc, #236]	; (9be0 <uip_process+0xd78>)
    9af2:	7810      	ldrb	r0, [r2, #0]
    9af4:	e040      	b.n	9b78 <uip_process+0xd10>
            opt = uip_buf[UIP_IPTCPH_LEN + UIP_LLH_LEN + c];
    9af6:	493b      	ldr	r1, [pc, #236]	; (9be4 <uip_process+0xd7c>)
    9af8:	1989      	adds	r1, r1, r6
    9afa:	313c      	adds	r1, #60	; 0x3c
    9afc:	7808      	ldrb	r0, [r1, #0]
            if(opt == TCP_OPT_END) {
    9afe:	2800      	cmp	r0, #0
    9b00:	d105      	bne.n	9b0e <uip_process+0xca6>
    9b02:	4b36      	ldr	r3, [pc, #216]	; (9bdc <uip_process+0xd74>)
    9b04:	701e      	strb	r6, [r3, #0]
    9b06:	2200      	movs	r2, #0
    9b08:	4b35      	ldr	r3, [pc, #212]	; (9be0 <uip_process+0xd78>)
    9b0a:	701a      	strb	r2, [r3, #0]
    9b0c:	e03b      	b.n	9b86 <uip_process+0xd1e>
              /* End of options. */
              break;
            } else if(opt == TCP_OPT_NOOP) {
    9b0e:	2801      	cmp	r0, #1
    9b10:	d102      	bne.n	9b18 <uip_process+0xcb0>
              ++c;
    9b12:	3601      	adds	r6, #1
    9b14:	b2f6      	uxtb	r6, r6
    9b16:	e02f      	b.n	9b78 <uip_process+0xd10>
              /* NOP option. */
            } else if(opt == TCP_OPT_MSS &&
    9b18:	2802      	cmp	r0, #2
    9b1a:	d11f      	bne.n	9b5c <uip_process+0xcf4>
                      uip_buf[UIP_TCPIP_HLEN + UIP_LLH_LEN + 1 + c] == TCP_OPT_MSS_LEN) {
    9b1c:	4931      	ldr	r1, [pc, #196]	; (9be4 <uip_process+0xd7c>)
    9b1e:	1889      	adds	r1, r1, r2
    9b20:	313d      	adds	r1, #61	; 0x3d
              /* End of options. */
              break;
            } else if(opt == TCP_OPT_NOOP) {
              ++c;
              /* NOP option. */
            } else if(opt == TCP_OPT_MSS &&
    9b22:	7809      	ldrb	r1, [r1, #0]
    9b24:	2904      	cmp	r1, #4
    9b26:	d119      	bne.n	9b5c <uip_process+0xcf4>
    9b28:	4b2c      	ldr	r3, [pc, #176]	; (9bdc <uip_process+0xd74>)
    9b2a:	701e      	strb	r6, [r3, #0]
    9b2c:	3902      	subs	r1, #2
    9b2e:	4b2c      	ldr	r3, [pc, #176]	; (9be0 <uip_process+0xd78>)
    9b30:	7019      	strb	r1, [r3, #0]
                      uip_buf[UIP_TCPIP_HLEN + UIP_LLH_LEN + 1 + c] == TCP_OPT_MSS_LEN) {
              /* An MSS option with the right option length. */
              tmp16 = (uip_buf[UIP_TCPIP_HLEN + UIP_LLH_LEN + 2 + c] << 8) |
    9b32:	4b2c      	ldr	r3, [pc, #176]	; (9be4 <uip_process+0xd7c>)
    9b34:	189b      	adds	r3, r3, r2
    9b36:	1c1a      	adds	r2, r3, #0
    9b38:	323e      	adds	r2, #62	; 0x3e
    9b3a:	7812      	ldrb	r2, [r2, #0]
    9b3c:	0212      	lsls	r2, r2, #8
                uip_buf[UIP_TCPIP_HLEN + UIP_LLH_LEN + 3 + c];
    9b3e:	333f      	adds	r3, #63	; 0x3f
              ++c;
              /* NOP option. */
            } else if(opt == TCP_OPT_MSS &&
                      uip_buf[UIP_TCPIP_HLEN + UIP_LLH_LEN + 1 + c] == TCP_OPT_MSS_LEN) {
              /* An MSS option with the right option length. */
              tmp16 = (uip_buf[UIP_TCPIP_HLEN + UIP_LLH_LEN + 2 + c] << 8) |
    9b40:	781b      	ldrb	r3, [r3, #0]
    9b42:	4313      	orrs	r3, r2
    9b44:	4a31      	ldr	r2, [pc, #196]	; (9c0c <uip_process+0xda4>)
    9b46:	8013      	strh	r3, [r2, #0]
                uip_buf[UIP_TCPIP_HLEN + UIP_LLH_LEN + 3 + c];
              uip_connr->initialmss =
                uip_connr->mss = tmp16 > UIP_TCP_MSS? UIP_TCP_MSS: tmp16;
    9b48:	1c1a      	adds	r2, r3, #0
    9b4a:	3153      	adds	r1, #83	; 0x53
    9b4c:	31ff      	adds	r1, #255	; 0xff
    9b4e:	428b      	cmp	r3, r1
    9b50:	d901      	bls.n	9b56 <uip_process+0xcee>
    9b52:	4b2f      	ldr	r3, [pc, #188]	; (9c10 <uip_process+0xda8>)
    9b54:	881a      	ldrh	r2, [r3, #0]
    9b56:	83ea      	strh	r2, [r5, #30]
            } else if(opt == TCP_OPT_MSS &&
                      uip_buf[UIP_TCPIP_HLEN + UIP_LLH_LEN + 1 + c] == TCP_OPT_MSS_LEN) {
              /* An MSS option with the right option length. */
              tmp16 = (uip_buf[UIP_TCPIP_HLEN + UIP_LLH_LEN + 2 + c] << 8) |
                uip_buf[UIP_TCPIP_HLEN + UIP_LLH_LEN + 3 + c];
              uip_connr->initialmss =
    9b58:	842a      	strh	r2, [r5, #32]
                uip_connr->mss = tmp16 > UIP_TCP_MSS? UIP_TCP_MSS: tmp16;

              /* And we are done processing options. */
              break;
    9b5a:	e014      	b.n	9b86 <uip_process+0xd1e>
            } else {
              /* All other options have a length field, so that we easily
                 can skip past them. */
              if(uip_buf[UIP_TCPIP_HLEN + UIP_LLH_LEN + 1 + c] == 0) {
    9b5c:	4921      	ldr	r1, [pc, #132]	; (9be4 <uip_process+0xd7c>)
    9b5e:	468c      	mov	ip, r1
    9b60:	4462      	add	r2, ip
    9b62:	323d      	adds	r2, #61	; 0x3d
    9b64:	7812      	ldrb	r2, [r2, #0]
    9b66:	2a00      	cmp	r2, #0
    9b68:	d104      	bne.n	9b74 <uip_process+0xd0c>
    9b6a:	4b1c      	ldr	r3, [pc, #112]	; (9bdc <uip_process+0xd74>)
    9b6c:	701e      	strb	r6, [r3, #0]
    9b6e:	4b1c      	ldr	r3, [pc, #112]	; (9be0 <uip_process+0xd78>)
    9b70:	7018      	strb	r0, [r3, #0]
    9b72:	e008      	b.n	9b86 <uip_process+0xd1e>
                /* If the length field is zero, the options are malformed
                   and we don't process them further. */
                break;
              }
              c += uip_buf[UIP_TCPIP_HLEN + UIP_LLH_LEN + 1 + c];
    9b74:	1996      	adds	r6, r2, r6
    9b76:	b2f6      	uxtb	r6, r6
      if((uip_flags & UIP_ACKDATA) &&
         (UIP_TCP_BUF->flags & TCP_CTL) == (TCP_SYN | TCP_ACK)) {

        /* Parse the TCP MSS option, if present. */
        if((UIP_TCP_BUF->tcpoffset & 0xf0) > 0x50) {
          for(c = 0; c < ((UIP_TCP_BUF->tcpoffset >> 4) - 5) << 2 ;) {
    9b78:	1e32      	subs	r2, r6, #0
    9b7a:	429a      	cmp	r2, r3
    9b7c:	dbbb      	blt.n	9af6 <uip_process+0xc8e>
    9b7e:	4b17      	ldr	r3, [pc, #92]	; (9bdc <uip_process+0xd74>)
    9b80:	701e      	strb	r6, [r3, #0]
    9b82:	4b17      	ldr	r3, [pc, #92]	; (9be0 <uip_process+0xd78>)
    9b84:	7018      	strb	r0, [r3, #0]
              }
              c += uip_buf[UIP_TCPIP_HLEN + UIP_LLH_LEN + 1 + c];
            }
          }
        }
        uip_connr->tcpstateflags = UIP_ESTABLISHED;
    9b86:	2203      	movs	r2, #3
    9b88:	2325      	movs	r3, #37	; 0x25
    9b8a:	54ea      	strb	r2, [r5, r3]
        uip_connr->rcv_nxt[0] = UIP_TCP_BUF->seqno[0];
    9b8c:	4b15      	ldr	r3, [pc, #84]	; (9be4 <uip_process+0xd7c>)
    9b8e:	3229      	adds	r2, #41	; 0x29
    9b90:	5c9a      	ldrb	r2, [r3, r2]
    9b92:	752a      	strb	r2, [r5, #20]
        uip_connr->rcv_nxt[1] = UIP_TCP_BUF->seqno[1];
    9b94:	222d      	movs	r2, #45	; 0x2d
    9b96:	5c9a      	ldrb	r2, [r3, r2]
    9b98:	756a      	strb	r2, [r5, #21]
        uip_connr->rcv_nxt[2] = UIP_TCP_BUF->seqno[2];
    9b9a:	222e      	movs	r2, #46	; 0x2e
    9b9c:	5c9a      	ldrb	r2, [r3, r2]
    9b9e:	75aa      	strb	r2, [r5, #22]
        uip_connr->rcv_nxt[3] = UIP_TCP_BUF->seqno[3];
    9ba0:	222f      	movs	r2, #47	; 0x2f
    9ba2:	5c9b      	ldrb	r3, [r3, r2]
    9ba4:	75eb      	strb	r3, [r5, #23]
        uip_add_rcv_nxt(1);
    9ba6:	2001      	movs	r0, #1
    9ba8:	4b16      	ldr	r3, [pc, #88]	; (9c04 <uip_process+0xd9c>)
    9baa:	4798      	blx	r3
        uip_flags = UIP_CONNECTED | UIP_NEWDATA;
    9bac:	2242      	movs	r2, #66	; 0x42
    9bae:	4b10      	ldr	r3, [pc, #64]	; (9bf0 <uip_process+0xd88>)
    9bb0:	701a      	strb	r2, [r3, #0]
        uip_connr->len = 0;
    9bb2:	2300      	movs	r3, #0
    9bb4:	83ab      	strh	r3, [r5, #28]
        uip_len = 0;
    9bb6:	4a0c      	ldr	r2, [pc, #48]	; (9be8 <uip_process+0xd80>)
    9bb8:	8013      	strh	r3, [r2, #0]
        uip_slen = 0;
    9bba:	4a13      	ldr	r2, [pc, #76]	; (9c08 <uip_process+0xda0>)
    9bbc:	8013      	strh	r3, [r2, #0]
        UIP_APPCALL();
    9bbe:	4b0d      	ldr	r3, [pc, #52]	; (9bf4 <uip_process+0xd8c>)
    9bc0:	4798      	blx	r3
        goto appsend;
    9bc2:	e091      	b.n	9ce8 <uip_process+0xe80>
      }
      /* Inform the application that the connection failed */
      uip_flags = UIP_ABORT;
    9bc4:	2220      	movs	r2, #32
    9bc6:	4b0a      	ldr	r3, [pc, #40]	; (9bf0 <uip_process+0xd88>)
    9bc8:	701a      	strb	r2, [r3, #0]
      UIP_APPCALL();
    9bca:	4b0a      	ldr	r3, [pc, #40]	; (9bf4 <uip_process+0xd8c>)
    9bcc:	4798      	blx	r3
      /* The connection is closed after we send the RST */
      uip_conn->tcpstateflags = UIP_CLOSED;
    9bce:	4b07      	ldr	r3, [pc, #28]	; (9bec <uip_process+0xd84>)
    9bd0:	681a      	ldr	r2, [r3, #0]
    9bd2:	2100      	movs	r1, #0
    9bd4:	2325      	movs	r3, #37	; 0x25
    9bd6:	54d1      	strb	r1, [r2, r3]
      goto reset;
    9bd8:	e529      	b.n	962e <uip_process+0x7c6>
    9bda:	46c0      	nop			; (mov r8, r8)
    9bdc:	20000b1c 	.word	0x20000b1c
    9be0:	20000b1d 	.word	0x20000b1d
    9be4:	20002cd4 	.word	0x20002cd4
    9be8:	20002cc0 	.word	0x20002cc0
    9bec:	20002e74 	.word	0x20002e74
    9bf0:	20002e64 	.word	0x20002e64
    9bf4:	0000aa79 	.word	0x0000aa79
    9bf8:	00008b51 	.word	0x00008b51
    9bfc:	20002cc8 	.word	0x20002cc8
    9c00:	00012d48 	.word	0x00012d48
    9c04:	00008bb1 	.word	0x00008bb1
    9c08:	20003088 	.word	0x20003088
    9c0c:	20000b10 	.word	0x20000b10
    9c10:	00012c2c 	.word	0x00012c2c
         If the incoming packet is a FIN, we should close the connection on
         this side as well, and we send out a FIN and enter the LAST_ACK
         state. We require that there is no outstanding data; otherwise the
         sequence numbers will be screwed up. */

      if(UIP_TCP_BUF->flags & TCP_FIN && !(uip_connr->tcpstateflags & UIP_STOPPED)) {
    9c14:	2335      	movs	r3, #53	; 0x35
    9c16:	4acb      	ldr	r2, [pc, #812]	; (9f44 <uip_process+0x10dc>)
    9c18:	5cd3      	ldrb	r3, [r2, r3]
    9c1a:	07da      	lsls	r2, r3, #31
    9c1c:	d525      	bpl.n	9c6a <uip_process+0xe02>
    9c1e:	06ca      	lsls	r2, r1, #27
    9c20:	d423      	bmi.n	9c6a <uip_process+0xe02>
        if(uip_outstanding(uip_connr)) {
    9c22:	8bab      	ldrh	r3, [r5, #28]
    9c24:	2b00      	cmp	r3, #0
    9c26:	d000      	beq.n	9c2a <uip_process+0xdc2>
    9c28:	e1a4      	b.n	9f74 <uip_process+0x110c>
          goto drop;
        }
        uip_add_rcv_nxt(1 + uip_len);
    9c2a:	4ec7      	ldr	r6, [pc, #796]	; (9f48 <uip_process+0x10e0>)
    9c2c:	8830      	ldrh	r0, [r6, #0]
    9c2e:	3001      	adds	r0, #1
    9c30:	b280      	uxth	r0, r0
    9c32:	4bc6      	ldr	r3, [pc, #792]	; (9f4c <uip_process+0x10e4>)
    9c34:	4798      	blx	r3
        uip_flags |= UIP_CLOSE;
    9c36:	49c6      	ldr	r1, [pc, #792]	; (9f50 <uip_process+0x10e8>)
    9c38:	780b      	ldrb	r3, [r1, #0]
    9c3a:	2210      	movs	r2, #16
    9c3c:	431a      	orrs	r2, r3
    9c3e:	700a      	strb	r2, [r1, #0]
        if(uip_len > 0) {
    9c40:	8832      	ldrh	r2, [r6, #0]
    9c42:	2a00      	cmp	r2, #0
    9c44:	d002      	beq.n	9c4c <uip_process+0xde4>
          uip_flags |= UIP_NEWDATA;
    9c46:	2212      	movs	r2, #18
    9c48:	4313      	orrs	r3, r2
    9c4a:	700b      	strb	r3, [r1, #0]
        }
        UIP_APPCALL();
    9c4c:	4bc1      	ldr	r3, [pc, #772]	; (9f54 <uip_process+0x10ec>)
    9c4e:	4798      	blx	r3
        uip_connr->len = 1;
    9c50:	2301      	movs	r3, #1
    9c52:	83ab      	strh	r3, [r5, #28]
        uip_connr->tcpstateflags = UIP_LAST_ACK;
    9c54:	2208      	movs	r2, #8
    9c56:	3324      	adds	r3, #36	; 0x24
    9c58:	54ea      	strb	r2, [r5, r3]
        uip_connr->nrtx = 0;
    9c5a:	2200      	movs	r2, #0
    9c5c:	3302      	adds	r3, #2
    9c5e:	54ea      	strb	r2, [r5, r3]
      tcp_send_finack:
        UIP_TCP_BUF->flags = TCP_FIN | TCP_ACK;
    9c60:	2111      	movs	r1, #17
    9c62:	2335      	movs	r3, #53	; 0x35
    9c64:	4ab7      	ldr	r2, [pc, #732]	; (9f44 <uip_process+0x10dc>)
    9c66:	54d1      	strb	r1, [r2, r3]
        goto tcp_send_nodata;
    9c68:	e108      	b.n	9e7c <uip_process+0x1014>
      }

      /* Check the URG flag. If this is set, the segment carries urgent
         data that we must pass to the application. */
      if((UIP_TCP_BUF->flags & TCP_URG) != 0) {
    9c6a:	069b      	lsls	r3, r3, #26
    9c6c:	d511      	bpl.n	9c92 <uip_process+0xe2a>
        uip_urgdata = uip_appdata;
        uip_appdata += uip_urglen;
      } else {
        uip_urglen = 0;
#else /* UIP_URGDATA > 0 */
        uip_appdata = ((char *)uip_appdata) + ((UIP_TCP_BUF->urgp[0] << 8) | UIP_TCP_BUF->urgp[1]);
    9c6e:	48b5      	ldr	r0, [pc, #724]	; (9f44 <uip_process+0x10dc>)
    9c70:	233a      	movs	r3, #58	; 0x3a
    9c72:	5cc3      	ldrb	r3, [r0, r3]
    9c74:	021a      	lsls	r2, r3, #8
    9c76:	233b      	movs	r3, #59	; 0x3b
    9c78:	5cc3      	ldrb	r3, [r0, r3]
    9c7a:	4eb7      	ldr	r6, [pc, #732]	; (9f58 <uip_process+0x10f0>)
    9c7c:	1c10      	adds	r0, r2, #0
    9c7e:	4318      	orrs	r0, r3
    9c80:	6837      	ldr	r7, [r6, #0]
    9c82:	46bc      	mov	ip, r7
    9c84:	4460      	add	r0, ip
    9c86:	6030      	str	r0, [r6, #0]
        uip_len -= (UIP_TCP_BUF->urgp[0] << 8) | UIP_TCP_BUF->urgp[1];
    9c88:	48af      	ldr	r0, [pc, #700]	; (9f48 <uip_process+0x10e0>)
    9c8a:	4313      	orrs	r3, r2
    9c8c:	8802      	ldrh	r2, [r0, #0]
    9c8e:	1ad3      	subs	r3, r2, r3
    9c90:	8003      	strh	r3, [r0, #0]
      /* If uip_len > 0 we have TCP data in the packet, and we flag this
         by setting the UIP_NEWDATA flag and update the sequence number
         we acknowledge. If the application has stopped the dataflow
         using uip_stop(), we must not accept any data packets from the
         remote host. */
      if(uip_len > 0 && !(uip_connr->tcpstateflags & UIP_STOPPED)) {
    9c92:	4bad      	ldr	r3, [pc, #692]	; (9f48 <uip_process+0x10e0>)
    9c94:	8818      	ldrh	r0, [r3, #0]
    9c96:	2800      	cmp	r0, #0
    9c98:	d008      	beq.n	9cac <uip_process+0xe44>
    9c9a:	06cb      	lsls	r3, r1, #27
    9c9c:	d406      	bmi.n	9cac <uip_process+0xe44>
        uip_flags |= UIP_NEWDATA;
    9c9e:	4aac      	ldr	r2, [pc, #688]	; (9f50 <uip_process+0x10e8>)
    9ca0:	7813      	ldrb	r3, [r2, #0]
    9ca2:	2102      	movs	r1, #2
    9ca4:	430b      	orrs	r3, r1
    9ca6:	7013      	strb	r3, [r2, #0]
        uip_add_rcv_nxt(uip_len);
    9ca8:	4ba8      	ldr	r3, [pc, #672]	; (9f4c <uip_process+0x10e4>)
    9caa:	4798      	blx	r3
         the initial MSS so that the application will send an entire MSS
         of data. This data will not be acknowledged by the receiver,
         and the application will retransmit it. This is called the
         "persistent timer" and uses the retransmission mechanim.
      */
      tmp16 = ((uint16_t)UIP_TCP_BUF->wnd[0] << 8) + (uint16_t)UIP_TCP_BUF->wnd[1];
    9cac:	4aa5      	ldr	r2, [pc, #660]	; (9f44 <uip_process+0x10dc>)
    9cae:	2336      	movs	r3, #54	; 0x36
    9cb0:	5cd3      	ldrb	r3, [r2, r3]
    9cb2:	021b      	lsls	r3, r3, #8
    9cb4:	2137      	movs	r1, #55	; 0x37
    9cb6:	5c52      	ldrb	r2, [r2, r1]
    9cb8:	18d3      	adds	r3, r2, r3
    9cba:	b29b      	uxth	r3, r3
    9cbc:	4aa7      	ldr	r2, [pc, #668]	; (9f5c <uip_process+0x10f4>)
    9cbe:	8013      	strh	r3, [r2, #0]
      if(tmp16 > uip_connr->initialmss ||
    9cc0:	8c2a      	ldrh	r2, [r5, #32]
    9cc2:	4293      	cmp	r3, r2
    9cc4:	d801      	bhi.n	9cca <uip_process+0xe62>
    9cc6:	2b00      	cmp	r3, #0
    9cc8:	d101      	bne.n	9cce <uip_process+0xe66>
         tmp16 == 0) {
        tmp16 = uip_connr->initialmss;
    9cca:	4ba4      	ldr	r3, [pc, #656]	; (9f5c <uip_process+0x10f4>)
    9ccc:	801a      	strh	r2, [r3, #0]
      }
      uip_connr->mss = tmp16;
    9cce:	4ba3      	ldr	r3, [pc, #652]	; (9f5c <uip_process+0x10f4>)
    9cd0:	881b      	ldrh	r3, [r3, #0]
    9cd2:	83eb      	strh	r3, [r5, #30]

         If the application wishes to send any data, this data should be
         put into the uip_appdata and the length of the data should be
         put into uip_len. If the application don't have any data to
         send, uip_len must be set to 0. */
      if(uip_flags & (UIP_NEWDATA | UIP_ACKDATA)) {
    9cd4:	4b9e      	ldr	r3, [pc, #632]	; (9f50 <uip_process+0x10e8>)
    9cd6:	781b      	ldrb	r3, [r3, #0]
    9cd8:	079b      	lsls	r3, r3, #30
    9cda:	d100      	bne.n	9cde <uip_process+0xe76>
    9cdc:	e14a      	b.n	9f74 <uip_process+0x110c>
        uip_slen = 0;
    9cde:	2200      	movs	r2, #0
    9ce0:	4b9f      	ldr	r3, [pc, #636]	; (9f60 <uip_process+0x10f8>)
    9ce2:	801a      	strh	r2, [r3, #0]
        UIP_APPCALL();
    9ce4:	4b9b      	ldr	r3, [pc, #620]	; (9f54 <uip_process+0x10ec>)
    9ce6:	4798      	blx	r3

      appsend:
      
        if(uip_flags & UIP_ABORT) {
    9ce8:	4b99      	ldr	r3, [pc, #612]	; (9f50 <uip_process+0x10e8>)
    9cea:	781b      	ldrb	r3, [r3, #0]
    9cec:	069a      	lsls	r2, r3, #26
    9cee:	d509      	bpl.n	9d04 <uip_process+0xe9c>
          uip_slen = 0;
    9cf0:	2200      	movs	r2, #0
    9cf2:	4b9b      	ldr	r3, [pc, #620]	; (9f60 <uip_process+0x10f8>)
    9cf4:	801a      	strh	r2, [r3, #0]
          uip_connr->tcpstateflags = UIP_CLOSED;
    9cf6:	2325      	movs	r3, #37	; 0x25
    9cf8:	54e2      	strb	r2, [r4, r3]
          UIP_TCP_BUF->flags = TCP_RST | TCP_ACK;
    9cfa:	2114      	movs	r1, #20
    9cfc:	3310      	adds	r3, #16
    9cfe:	4a91      	ldr	r2, [pc, #580]	; (9f44 <uip_process+0x10dc>)
    9d00:	54d1      	strb	r1, [r2, r3]
          goto tcp_send_nodata;
    9d02:	e0bb      	b.n	9e7c <uip_process+0x1014>
        }

        if(uip_flags & UIP_CLOSE) {
    9d04:	06da      	lsls	r2, r3, #27
    9d06:	d50f      	bpl.n	9d28 <uip_process+0xec0>
          uip_slen = 0;
    9d08:	2200      	movs	r2, #0
    9d0a:	4b95      	ldr	r3, [pc, #596]	; (9f60 <uip_process+0x10f8>)
    9d0c:	801a      	strh	r2, [r3, #0]
          uip_connr->len = 1;
    9d0e:	2301      	movs	r3, #1
    9d10:	83a3      	strh	r3, [r4, #28]
          uip_connr->tcpstateflags = UIP_FIN_WAIT_1;
    9d12:	3204      	adds	r2, #4
    9d14:	3324      	adds	r3, #36	; 0x24
    9d16:	54e2      	strb	r2, [r4, r3]
          uip_connr->nrtx = 0;
    9d18:	3302      	adds	r3, #2
    9d1a:	2200      	movs	r2, #0
    9d1c:	54e2      	strb	r2, [r4, r3]
          UIP_TCP_BUF->flags = TCP_FIN | TCP_ACK;
    9d1e:	2111      	movs	r1, #17
    9d20:	330e      	adds	r3, #14
    9d22:	4a88      	ldr	r2, [pc, #544]	; (9f44 <uip_process+0x10dc>)
    9d24:	54d1      	strb	r1, [r2, r3]
          goto tcp_send_nodata;
    9d26:	e0a9      	b.n	9e7c <uip_process+0x1014>
        }

        /* If uip_slen > 0, the application has data to be sent. */
        if(uip_slen > 0) {
    9d28:	4a8d      	ldr	r2, [pc, #564]	; (9f60 <uip_process+0x10f8>)
    9d2a:	8812      	ldrh	r2, [r2, #0]
    9d2c:	2a00      	cmp	r2, #0
    9d2e:	d012      	beq.n	9d56 <uip_process+0xeee>

          /* If the connection has acknowledged data, the contents of
             the ->len variable should be discarded. */
          if((uip_flags & UIP_ACKDATA) != 0) {
    9d30:	07db      	lsls	r3, r3, #31
    9d32:	d502      	bpl.n	9d3a <uip_process+0xed2>
            uip_connr->len = 0;
    9d34:	2300      	movs	r3, #0
    9d36:	83a3      	strh	r3, [r4, #28]
    9d38:	e002      	b.n	9d40 <uip_process+0xed8>
          }

          /* If the ->len variable is non-zero the connection has
             already data in transit and cannot send anymore right
             now. */
          if(uip_connr->len == 0) {
    9d3a:	8ba3      	ldrh	r3, [r4, #28]
    9d3c:	2b00      	cmp	r3, #0
    9d3e:	d108      	bne.n	9d52 <uip_process+0xeea>

            /* The application cannot send more than what is allowed by
               the mss (the minumum of the MSS and the available
               window). */
            if(uip_slen > uip_connr->mss) {
    9d40:	8be3      	ldrh	r3, [r4, #30]
    9d42:	429a      	cmp	r2, r3
    9d44:	d901      	bls.n	9d4a <uip_process+0xee2>
              uip_slen = uip_connr->mss;
    9d46:	4a86      	ldr	r2, [pc, #536]	; (9f60 <uip_process+0x10f8>)
    9d48:	8013      	strh	r3, [r2, #0]
            }

            /* Remember how much data we send out now so that we know
               when everything has been acknowledged. */
            uip_connr->len = uip_slen;
    9d4a:	4b85      	ldr	r3, [pc, #532]	; (9f60 <uip_process+0x10f8>)
    9d4c:	881b      	ldrh	r3, [r3, #0]
    9d4e:	83a3      	strh	r3, [r4, #28]
    9d50:	e001      	b.n	9d56 <uip_process+0xeee>
          } else {

            /* If the application already had unacknowledged data, we
               make sure that the application does not send (i.e.,
               retransmit) out more than it previously sent out. */
            uip_slen = uip_connr->len;
    9d52:	4a83      	ldr	r2, [pc, #524]	; (9f60 <uip_process+0x10f8>)
    9d54:	8013      	strh	r3, [r2, #0]
          }
        }
        uip_connr->nrtx = 0;
    9d56:	2200      	movs	r2, #0
    9d58:	2327      	movs	r3, #39	; 0x27
    9d5a:	54e2      	strb	r2, [r4, r3]
      apprexmit:
        uip_appdata = uip_sappdata;
    9d5c:	4b81      	ldr	r3, [pc, #516]	; (9f64 <uip_process+0x10fc>)
    9d5e:	681a      	ldr	r2, [r3, #0]
    9d60:	4b7d      	ldr	r3, [pc, #500]	; (9f58 <uip_process+0x10f0>)
    9d62:	601a      	str	r2, [r3, #0]
      
        /* If the application has data to be sent, or if the incoming
           packet had new data in it, we must send out a packet. */
        if(uip_slen > 0 && uip_connr->len > 0) {
    9d64:	4b7e      	ldr	r3, [pc, #504]	; (9f60 <uip_process+0x10f8>)
    9d66:	881b      	ldrh	r3, [r3, #0]
    9d68:	2b00      	cmp	r3, #0
    9d6a:	d00a      	beq.n	9d82 <uip_process+0xf1a>
    9d6c:	8ba3      	ldrh	r3, [r4, #28]
    9d6e:	2b00      	cmp	r3, #0
    9d70:	d007      	beq.n	9d82 <uip_process+0xf1a>
          /* Add the length of the IP and TCP headers. */
          uip_len = uip_connr->len + UIP_TCPIP_HLEN;
    9d72:	333c      	adds	r3, #60	; 0x3c
    9d74:	4a74      	ldr	r2, [pc, #464]	; (9f48 <uip_process+0x10e0>)
    9d76:	8013      	strh	r3, [r2, #0]
          /* We always set the ACK flag in response packets. */
          UIP_TCP_BUF->flags = TCP_ACK | TCP_PSH;
    9d78:	2118      	movs	r1, #24
    9d7a:	2335      	movs	r3, #53	; 0x35
    9d7c:	4a71      	ldr	r2, [pc, #452]	; (9f44 <uip_process+0x10dc>)
    9d7e:	54d1      	strb	r1, [r2, r3]
          /* Send the packet. */
          goto tcp_send_noopts;
    9d80:	e07f      	b.n	9e82 <uip_process+0x101a>
        }
        /* If there is no data to send, just send out a pure ACK if
           there is newdata. */
        if(uip_flags & UIP_NEWDATA) {
    9d82:	4b73      	ldr	r3, [pc, #460]	; (9f50 <uip_process+0x10e8>)
    9d84:	781b      	ldrb	r3, [r3, #0]
    9d86:	079b      	lsls	r3, r3, #30
    9d88:	d400      	bmi.n	9d8c <uip_process+0xf24>
    9d8a:	e0f3      	b.n	9f74 <uip_process+0x110c>
          uip_len = UIP_TCPIP_HLEN;
    9d8c:	223c      	movs	r2, #60	; 0x3c
    9d8e:	4b6e      	ldr	r3, [pc, #440]	; (9f48 <uip_process+0x10e0>)
    9d90:	801a      	strh	r2, [r3, #0]
          UIP_TCP_BUF->flags = TCP_ACK;
    9d92:	2110      	movs	r1, #16
    9d94:	2335      	movs	r3, #53	; 0x35
    9d96:	4a6b      	ldr	r2, [pc, #428]	; (9f44 <uip_process+0x10dc>)
    9d98:	54d1      	strb	r1, [r2, r3]
          goto tcp_send_noopts;
    9d9a:	e072      	b.n	9e82 <uip_process+0x101a>
      }
      goto drop;
    case UIP_LAST_ACK:
      /* We can close this connection if the peer has acknowledged our
         FIN. This is indicated by the UIP_ACKDATA flag. */
      if(uip_flags & UIP_ACKDATA) {
    9d9c:	4b6c      	ldr	r3, [pc, #432]	; (9f50 <uip_process+0x10e8>)
    9d9e:	781b      	ldrb	r3, [r3, #0]
    9da0:	07db      	lsls	r3, r3, #31
    9da2:	d400      	bmi.n	9da6 <uip_process+0xf3e>
    9da4:	e0e6      	b.n	9f74 <uip_process+0x110c>
        uip_connr->tcpstateflags = UIP_CLOSED;
    9da6:	2200      	movs	r2, #0
    9da8:	2325      	movs	r3, #37	; 0x25
    9daa:	54ea      	strb	r2, [r5, r3]
        uip_flags = UIP_CLOSE;
    9dac:	3210      	adds	r2, #16
    9dae:	4b68      	ldr	r3, [pc, #416]	; (9f50 <uip_process+0x10e8>)
    9db0:	701a      	strb	r2, [r3, #0]
        UIP_APPCALL();
    9db2:	4b68      	ldr	r3, [pc, #416]	; (9f54 <uip_process+0x10ec>)
    9db4:	4798      	blx	r3
    9db6:	e0dd      	b.n	9f74 <uip_process+0x110c>
    
    case UIP_FIN_WAIT_1:
      /* The application has closed the connection, but the remote host
         hasn't closed its end yet. Thus we do nothing but wait for a
         FIN from the other side. */
      if(uip_len > 0) {
    9db8:	4b63      	ldr	r3, [pc, #396]	; (9f48 <uip_process+0x10e0>)
    9dba:	8818      	ldrh	r0, [r3, #0]
    9dbc:	2800      	cmp	r0, #0
    9dbe:	d001      	beq.n	9dc4 <uip_process+0xf5c>
        uip_add_rcv_nxt(uip_len);
    9dc0:	4b62      	ldr	r3, [pc, #392]	; (9f4c <uip_process+0x10e4>)
    9dc2:	4798      	blx	r3
      }
      if(UIP_TCP_BUF->flags & TCP_FIN) {
    9dc4:	2335      	movs	r3, #53	; 0x35
    9dc6:	4a5f      	ldr	r2, [pc, #380]	; (9f44 <uip_process+0x10dc>)
    9dc8:	5cd3      	ldrb	r3, [r2, r3]
    9dca:	07db      	lsls	r3, r3, #31
    9dcc:	d517      	bpl.n	9dfe <uip_process+0xf96>
        if(uip_flags & UIP_ACKDATA) {
    9dce:	4b60      	ldr	r3, [pc, #384]	; (9f50 <uip_process+0x10e8>)
    9dd0:	781b      	ldrb	r3, [r3, #0]
    9dd2:	07db      	lsls	r3, r3, #31
    9dd4:	d507      	bpl.n	9de6 <uip_process+0xf7e>
          uip_connr->tcpstateflags = UIP_TIME_WAIT;
    9dd6:	2207      	movs	r2, #7
    9dd8:	2325      	movs	r3, #37	; 0x25
    9dda:	54ea      	strb	r2, [r5, r3]
          uip_connr->timer = 0;
    9ddc:	2300      	movs	r3, #0
    9dde:	321f      	adds	r2, #31
    9de0:	54ab      	strb	r3, [r5, r2]
          uip_connr->len = 0;
    9de2:	83ab      	strh	r3, [r5, #28]
    9de4:	e002      	b.n	9dec <uip_process+0xf84>
        } else {
          uip_connr->tcpstateflags = UIP_CLOSING;
    9de6:	2206      	movs	r2, #6
    9de8:	2325      	movs	r3, #37	; 0x25
    9dea:	54ea      	strb	r2, [r5, r3]
        }
        uip_add_rcv_nxt(1);
    9dec:	2001      	movs	r0, #1
    9dee:	4b57      	ldr	r3, [pc, #348]	; (9f4c <uip_process+0x10e4>)
    9df0:	4798      	blx	r3
        uip_flags = UIP_CLOSE;
    9df2:	2210      	movs	r2, #16
    9df4:	4b56      	ldr	r3, [pc, #344]	; (9f50 <uip_process+0x10e8>)
    9df6:	701a      	strb	r2, [r3, #0]
        UIP_APPCALL();
    9df8:	4b56      	ldr	r3, [pc, #344]	; (9f54 <uip_process+0x10ec>)
    9dfa:	4798      	blx	r3
        goto tcp_send_ack;
    9dfc:	e03a      	b.n	9e74 <uip_process+0x100c>
      } else if(uip_flags & UIP_ACKDATA) {
    9dfe:	4b54      	ldr	r3, [pc, #336]	; (9f50 <uip_process+0x10e8>)
    9e00:	781b      	ldrb	r3, [r3, #0]
    9e02:	07db      	lsls	r3, r3, #31
    9e04:	d505      	bpl.n	9e12 <uip_process+0xfaa>
        uip_connr->tcpstateflags = UIP_FIN_WAIT_2;
    9e06:	2205      	movs	r2, #5
    9e08:	2325      	movs	r3, #37	; 0x25
    9e0a:	54ea      	strb	r2, [r5, r3]
        uip_connr->len = 0;
    9e0c:	2300      	movs	r3, #0
    9e0e:	83ab      	strh	r3, [r5, #28]
        goto drop;
    9e10:	e0b0      	b.n	9f74 <uip_process+0x110c>
      }
      if(uip_len > 0) {
    9e12:	4b4d      	ldr	r3, [pc, #308]	; (9f48 <uip_process+0x10e0>)
    9e14:	881b      	ldrh	r3, [r3, #0]
    9e16:	2b00      	cmp	r3, #0
    9e18:	d12c      	bne.n	9e74 <uip_process+0x100c>
    9e1a:	e0ab      	b.n	9f74 <uip_process+0x110c>
        goto tcp_send_ack;
      }
      goto drop;
      
    case UIP_FIN_WAIT_2:
      if(uip_len > 0) {
    9e1c:	4b4a      	ldr	r3, [pc, #296]	; (9f48 <uip_process+0x10e0>)
    9e1e:	8818      	ldrh	r0, [r3, #0]
    9e20:	2800      	cmp	r0, #0
    9e22:	d100      	bne.n	9e26 <uip_process+0xfbe>
    9e24:	e0bc      	b.n	9fa0 <uip_process+0x1138>
        uip_add_rcv_nxt(uip_len);
    9e26:	4b49      	ldr	r3, [pc, #292]	; (9f4c <uip_process+0x10e4>)
    9e28:	4798      	blx	r3
      }
      if(UIP_TCP_BUF->flags & TCP_FIN) {
    9e2a:	2335      	movs	r3, #53	; 0x35
    9e2c:	4a45      	ldr	r2, [pc, #276]	; (9f44 <uip_process+0x10dc>)
    9e2e:	5cd3      	ldrb	r3, [r2, r3]
    9e30:	07db      	lsls	r3, r3, #31
    9e32:	d50e      	bpl.n	9e52 <uip_process+0xfea>
        uip_connr->tcpstateflags = UIP_TIME_WAIT;
    9e34:	2207      	movs	r2, #7
    9e36:	2325      	movs	r3, #37	; 0x25
    9e38:	54ea      	strb	r2, [r5, r3]
        uip_connr->timer = 0;
    9e3a:	2200      	movs	r2, #0
    9e3c:	3301      	adds	r3, #1
    9e3e:	54ea      	strb	r2, [r5, r3]
        uip_add_rcv_nxt(1);
    9e40:	2001      	movs	r0, #1
    9e42:	4b42      	ldr	r3, [pc, #264]	; (9f4c <uip_process+0x10e4>)
    9e44:	4798      	blx	r3
        uip_flags = UIP_CLOSE;
    9e46:	2210      	movs	r2, #16
    9e48:	4b41      	ldr	r3, [pc, #260]	; (9f50 <uip_process+0x10e8>)
    9e4a:	701a      	strb	r2, [r3, #0]
        UIP_APPCALL();
    9e4c:	4b41      	ldr	r3, [pc, #260]	; (9f54 <uip_process+0x10ec>)
    9e4e:	4798      	blx	r3
        goto tcp_send_ack;
    9e50:	e010      	b.n	9e74 <uip_process+0x100c>
      }
      if(uip_len > 0) {
    9e52:	4b3d      	ldr	r3, [pc, #244]	; (9f48 <uip_process+0x10e0>)
    9e54:	881b      	ldrh	r3, [r3, #0]
    9e56:	2b00      	cmp	r3, #0
    9e58:	d10c      	bne.n	9e74 <uip_process+0x100c>
    9e5a:	e08b      	b.n	9f74 <uip_process+0x110c>

    case UIP_TIME_WAIT:
      goto tcp_send_ack;
    
    case UIP_CLOSING:
      if(uip_flags & UIP_ACKDATA) {
    9e5c:	4b3c      	ldr	r3, [pc, #240]	; (9f50 <uip_process+0x10e8>)
    9e5e:	781b      	ldrb	r3, [r3, #0]
    9e60:	07db      	lsls	r3, r3, #31
    9e62:	d400      	bmi.n	9e66 <uip_process+0xffe>
    9e64:	e086      	b.n	9f74 <uip_process+0x110c>
        uip_connr->tcpstateflags = UIP_TIME_WAIT;
    9e66:	2207      	movs	r2, #7
    9e68:	2325      	movs	r3, #37	; 0x25
    9e6a:	54ea      	strb	r2, [r5, r3]
        uip_connr->timer = 0;
    9e6c:	2200      	movs	r2, #0
    9e6e:	3301      	adds	r3, #1
    9e70:	54ea      	strb	r2, [r5, r3]
    9e72:	e07f      	b.n	9f74 <uip_process+0x110c>
  goto drop;
  
  /* We jump here when we are ready to send the packet, and just want
     to set the appropriate TCP sequence numbers in the TCP header. */
 tcp_send_ack:
  UIP_TCP_BUF->flags = TCP_ACK;
    9e74:	2110      	movs	r1, #16
    9e76:	2335      	movs	r3, #53	; 0x35
    9e78:	4a32      	ldr	r2, [pc, #200]	; (9f44 <uip_process+0x10dc>)
    9e7a:	54d1      	strb	r1, [r2, r3]

 tcp_send_nodata:
  uip_len = UIP_IPTCPH_LEN;
    9e7c:	223c      	movs	r2, #60	; 0x3c
    9e7e:	4b32      	ldr	r3, [pc, #200]	; (9f48 <uip_process+0x10e0>)
    9e80:	801a      	strh	r2, [r3, #0]

 tcp_send_noopts:
  UIP_TCP_BUF->tcpoffset = (UIP_TCPH_LEN / 4) << 4;
    9e82:	2150      	movs	r1, #80	; 0x50
    9e84:	2334      	movs	r3, #52	; 0x34
    9e86:	4a2f      	ldr	r2, [pc, #188]	; (9f44 <uip_process+0x10dc>)
    9e88:	54d1      	strb	r1, [r2, r3]
     headers before calculating the checksum and finally send the
     packet. */
 tcp_send:
  PRINTF("In tcp_send\n\r");
   
  UIP_TCP_BUF->ackno[0] = uip_connr->rcv_nxt[0];
    9e8a:	7d22      	ldrb	r2, [r4, #20]
    9e8c:	482d      	ldr	r0, [pc, #180]	; (9f44 <uip_process+0x10dc>)
    9e8e:	2330      	movs	r3, #48	; 0x30
    9e90:	54c2      	strb	r2, [r0, r3]
  UIP_TCP_BUF->ackno[1] = uip_connr->rcv_nxt[1];
    9e92:	7d62      	ldrb	r2, [r4, #21]
    9e94:	3301      	adds	r3, #1
    9e96:	54c2      	strb	r2, [r0, r3]
  UIP_TCP_BUF->ackno[2] = uip_connr->rcv_nxt[2];
    9e98:	7da2      	ldrb	r2, [r4, #22]
    9e9a:	3301      	adds	r3, #1
    9e9c:	54c2      	strb	r2, [r0, r3]
  UIP_TCP_BUF->ackno[3] = uip_connr->rcv_nxt[3];
    9e9e:	7de2      	ldrb	r2, [r4, #23]
    9ea0:	3301      	adds	r3, #1
    9ea2:	54c2      	strb	r2, [r0, r3]
  
  UIP_TCP_BUF->seqno[0] = uip_connr->snd_nxt[0];
    9ea4:	7e22      	ldrb	r2, [r4, #24]
    9ea6:	3b07      	subs	r3, #7
    9ea8:	54c2      	strb	r2, [r0, r3]
  UIP_TCP_BUF->seqno[1] = uip_connr->snd_nxt[1];
    9eaa:	7e62      	ldrb	r2, [r4, #25]
    9eac:	3301      	adds	r3, #1
    9eae:	54c2      	strb	r2, [r0, r3]
  UIP_TCP_BUF->seqno[2] = uip_connr->snd_nxt[2];
    9eb0:	7ea2      	ldrb	r2, [r4, #26]
    9eb2:	3301      	adds	r3, #1
    9eb4:	54c2      	strb	r2, [r0, r3]
  UIP_TCP_BUF->seqno[3] = uip_connr->snd_nxt[3];
    9eb6:	7ee2      	ldrb	r2, [r4, #27]
    9eb8:	3301      	adds	r3, #1
    9eba:	54c2      	strb	r2, [r0, r3]

  UIP_IP_BUF->proto = UIP_PROTO_TCP;
    9ebc:	3b29      	subs	r3, #41	; 0x29
    9ebe:	7183      	strb	r3, [r0, #6]

  UIP_TCP_BUF->srcport  = uip_connr->lport;
    9ec0:	8a23      	ldrh	r3, [r4, #16]
    9ec2:	8503      	strh	r3, [r0, #40]	; 0x28
  UIP_TCP_BUF->destport = uip_connr->rport;
    9ec4:	8a63      	ldrh	r3, [r4, #18]
    9ec6:	8543      	strh	r3, [r0, #42]	; 0x2a

  uip_ipaddr_copy(&UIP_IP_BUF->destipaddr, &uip_connr->ripaddr);
    9ec8:	1c03      	adds	r3, r0, #0
    9eca:	3318      	adds	r3, #24
    9ecc:	1c22      	adds	r2, r4, #0
    9ece:	ca62      	ldmia	r2!, {r1, r5, r6}
    9ed0:	c362      	stmia	r3!, {r1, r5, r6}
    9ed2:	6812      	ldr	r2, [r2, #0]
    9ed4:	601a      	str	r2, [r3, #0]
  uip_ds6_select_src(&UIP_IP_BUF->srcipaddr, &UIP_IP_BUF->destipaddr);
    9ed6:	3008      	adds	r0, #8
    9ed8:	1c01      	adds	r1, r0, #0
    9eda:	3110      	adds	r1, #16
    9edc:	4b22      	ldr	r3, [pc, #136]	; (9f68 <uip_process+0x1100>)
    9ede:	4798      	blx	r3
  PRINT6ADDR(&UIP_IP_BUF->destipaddr);
  PRINTF(" from ");
  PRINT6ADDR(&UIP_IP_BUF->srcipaddr);
  PRINTF("\n\r");

  if(uip_connr->tcpstateflags & UIP_STOPPED) {
    9ee0:	2325      	movs	r3, #37	; 0x25
    9ee2:	5ce3      	ldrb	r3, [r4, r3]
    9ee4:	06db      	lsls	r3, r3, #27
    9ee6:	d506      	bpl.n	9ef6 <uip_process+0x108e>
    /* If the connection has issued uip_stop(), we advertise a zero
       window so that the remote host will stop sending data. */
    UIP_TCP_BUF->wnd[0] = UIP_TCP_BUF->wnd[1] = 0;
    9ee8:	4b16      	ldr	r3, [pc, #88]	; (9f44 <uip_process+0x10dc>)
    9eea:	2200      	movs	r2, #0
    9eec:	2137      	movs	r1, #55	; 0x37
    9eee:	545a      	strb	r2, [r3, r1]
    9ef0:	3901      	subs	r1, #1
    9ef2:	545a      	strb	r2, [r3, r1]
    9ef4:	e006      	b.n	9f04 <uip_process+0x109c>
  } else {
    UIP_TCP_BUF->wnd[0] = ((UIP_RECEIVE_WINDOW) >> 8);
    9ef6:	4b13      	ldr	r3, [pc, #76]	; (9f44 <uip_process+0x10dc>)
    9ef8:	2101      	movs	r1, #1
    9efa:	2236      	movs	r2, #54	; 0x36
    9efc:	5499      	strb	r1, [r3, r2]
    UIP_TCP_BUF->wnd[1] = ((UIP_RECEIVE_WINDOW) & 0xff);
    9efe:	3153      	adds	r1, #83	; 0x53
    9f00:	3201      	adds	r2, #1
    9f02:	5499      	strb	r1, [r3, r2]
  }

 tcp_send_noconn:
  UIP_IP_BUF->ttl = uip_ds6_if.cur_hop_limit;
    9f04:	4c0f      	ldr	r4, [pc, #60]	; (9f44 <uip_process+0x10dc>)
    9f06:	4b19      	ldr	r3, [pc, #100]	; (9f6c <uip_process+0x1104>)
    9f08:	791b      	ldrb	r3, [r3, #4]
    9f0a:	71e3      	strb	r3, [r4, #7]
  UIP_IP_BUF->len[0] = ((uip_len - UIP_IPH_LEN) >> 8);
    9f0c:	4b0e      	ldr	r3, [pc, #56]	; (9f48 <uip_process+0x10e0>)
    9f0e:	881b      	ldrh	r3, [r3, #0]
    9f10:	1c1a      	adds	r2, r3, #0
    9f12:	3a28      	subs	r2, #40	; 0x28
    9f14:	1212      	asrs	r2, r2, #8
    9f16:	7122      	strb	r2, [r4, #4]
  UIP_IP_BUF->len[1] = ((uip_len - UIP_IPH_LEN) & 0xff);
    9f18:	3b28      	subs	r3, #40	; 0x28
    9f1a:	7163      	strb	r3, [r4, #5]

  UIP_TCP_BUF->urgp[0] = UIP_TCP_BUF->urgp[1] = 0;
    9f1c:	2300      	movs	r3, #0
    9f1e:	223b      	movs	r2, #59	; 0x3b
    9f20:	54a3      	strb	r3, [r4, r2]
    9f22:	3a01      	subs	r2, #1
    9f24:	54a3      	strb	r3, [r4, r2]
  
  /* Calculate TCP checksum. */
  UIP_TCP_BUF->tcpchksum = 0;
    9f26:	8723      	strh	r3, [r4, #56]	; 0x38
  UIP_TCP_BUF->tcpchksum = ~(uip_tcpchksum());
    9f28:	4b11      	ldr	r3, [pc, #68]	; (9f70 <uip_process+0x1108>)
    9f2a:	4798      	blx	r3
    9f2c:	43c0      	mvns	r0, r0
    9f2e:	8720      	strh	r0, [r4, #56]	; 0x38

#endif /* UIP_TCP */
#if UIP_UDP
 ip_send_nolen:
#endif
  UIP_IP_BUF->vtc = 0x60;
    9f30:	4b04      	ldr	r3, [pc, #16]	; (9f44 <uip_process+0x10dc>)
    9f32:	2260      	movs	r2, #96	; 0x60
    9f34:	701a      	strb	r2, [r3, #0]
  UIP_IP_BUF->tcflow = 0x00;
    9f36:	2200      	movs	r2, #0
    9f38:	705a      	strb	r2, [r3, #1]
  UIP_IP_BUF->flow = 0x00;
    9f3a:	805a      	strh	r2, [r3, #2]
  PRINTF("Sending packet with length %d (%d)\n\r", uip_len,
         (UIP_IP_BUF->len[0] << 8) | UIP_IP_BUF->len[1]);
  
  UIP_STAT(++uip_stat.ip.sent);
  /* Return and let the caller do the actual transmission. */
  uip_flags = 0;
    9f3c:	2200      	movs	r2, #0
    9f3e:	4b04      	ldr	r3, [pc, #16]	; (9f50 <uip_process+0x10e8>)
    9f40:	701a      	strb	r2, [r3, #0]
  return;
    9f42:	e033      	b.n	9fac <uip_process+0x1144>
    9f44:	20002cd4 	.word	0x20002cd4
    9f48:	20002cc0 	.word	0x20002cc0
    9f4c:	00008bb1 	.word	0x00008bb1
    9f50:	20002e64 	.word	0x20002e64
    9f54:	0000aa79 	.word	0x0000aa79
    9f58:	20002e70 	.word	0x20002e70
    9f5c:	20000b10 	.word	0x20000b10
    9f60:	20003088 	.word	0x20003088
    9f64:	20002cc4 	.word	0x20002cc4
    9f68:	0000771d 	.word	0x0000771d
    9f6c:	20002b68 	.word	0x20002b68
    9f70:	00008bf1 	.word	0x00008bf1

 drop:
  uip_len = 0;
    9f74:	2200      	movs	r2, #0
    9f76:	4b0f      	ldr	r3, [pc, #60]	; (9fb4 <uip_process+0x114c>)
    9f78:	801a      	strh	r2, [r3, #0]
  uip_ext_len = 0;
    9f7a:	2300      	movs	r3, #0
    9f7c:	4a0e      	ldr	r2, [pc, #56]	; (9fb8 <uip_process+0x1150>)
    9f7e:	2100      	movs	r1, #0
    9f80:	7011      	strb	r1, [r2, #0]
  uip_ext_bitmap = 0;
    9f82:	4a0e      	ldr	r2, [pc, #56]	; (9fbc <uip_process+0x1154>)
    9f84:	7013      	strb	r3, [r2, #0]
  uip_flags = 0;
    9f86:	4a0e      	ldr	r2, [pc, #56]	; (9fc0 <uip_process+0x1158>)
    9f88:	7013      	strb	r3, [r2, #0]
  return;
    9f8a:	e00f      	b.n	9fac <uip_process+0x1144>
    PRINTF("udp: zero port.\n\r");
    goto drop;
  }

  /* Demultiplex this UDP packet between the UDP "connections". */
  for(uip_udp_conn = &uip_udp_conns[0];
    9f8c:	4a0d      	ldr	r2, [pc, #52]	; (9fc4 <uip_process+0x115c>)
    9f8e:	4b0e      	ldr	r3, [pc, #56]	; (9fc8 <uip_process+0x1160>)
    9f90:	601a      	str	r2, [r3, #0]
    9f92:	f7ff fa5c 	bl	944e <uip_process+0x5e6>
#else /* UIP_UDP_CHECKSUMS */
  uip_len = uip_len - UIP_IPUDPH_LEN;
#endif /* UIP_UDP_CHECKSUMS */

  /* Make sure that the UDP destination port number is not zero. */
  if(UIP_UDP_BUF->destport == 0) {
    9f96:	4b0d      	ldr	r3, [pc, #52]	; (9fcc <uip_process+0x1164>)
    9f98:	8d5e      	ldrh	r6, [r3, #42]	; 0x2a
    9f9a:	2e00      	cmp	r6, #0
    9f9c:	d0ea      	beq.n	9f74 <uip_process+0x110c>
    9f9e:	e7f5      	b.n	9f8c <uip_process+0x1124>
      
    case UIP_FIN_WAIT_2:
      if(uip_len > 0) {
        uip_add_rcv_nxt(uip_len);
      }
      if(UIP_TCP_BUF->flags & TCP_FIN) {
    9fa0:	2335      	movs	r3, #53	; 0x35
    9fa2:	4a0a      	ldr	r2, [pc, #40]	; (9fcc <uip_process+0x1164>)
    9fa4:	5cd3      	ldrb	r3, [r2, r3]
    9fa6:	07db      	lsls	r3, r3, #31
    9fa8:	d5e4      	bpl.n	9f74 <uip_process+0x110c>
    9faa:	e743      	b.n	9e34 <uip_process+0xfcc>
  uip_len = 0;
  uip_ext_len = 0;
  uip_ext_bitmap = 0;
  uip_flags = 0;
  return;
}
    9fac:	bc0c      	pop	{r2, r3}
    9fae:	4690      	mov	r8, r2
    9fb0:	4699      	mov	r9, r3
    9fb2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    9fb4:	20002cc0 	.word	0x20002cc0
    9fb8:	20000b12 	.word	0x20000b12
    9fbc:	20000b13 	.word	0x20000b13
    9fc0:	20002e64 	.word	0x20002e64
    9fc4:	2000308c 	.word	0x2000308c
    9fc8:	20002e6c 	.word	0x20002e6c
    9fcc:	20002cd4 	.word	0x20002cd4

00009fd0 <uip_htons>:
/*---------------------------------------------------------------------------*/
uint16_t
uip_htons(uint16_t val)
{
  return UIP_HTONS(val);
    9fd0:	0203      	lsls	r3, r0, #8
    9fd2:	0a00      	lsrs	r0, r0, #8
    9fd4:	4318      	orrs	r0, r3
    9fd6:	b280      	uxth	r0, r0
}
    9fd8:	4770      	bx	lr
    9fda:	46c0      	nop			; (mov r8, r8)

00009fdc <uip_htonl>:

uint32_t
uip_htonl(uint32_t val)
{
  return UIP_HTONL(val);
    9fdc:	0c03      	lsrs	r3, r0, #16
    9fde:	0402      	lsls	r2, r0, #16
    9fe0:	b280      	uxth	r0, r0
    9fe2:	4310      	orrs	r0, r2
    9fe4:	0a00      	lsrs	r0, r0, #8
    9fe6:	0400      	lsls	r0, r0, #16
    9fe8:	0a1a      	lsrs	r2, r3, #8
    9fea:	021b      	lsls	r3, r3, #8
    9fec:	4313      	orrs	r3, r2
    9fee:	b29b      	uxth	r3, r3
    9ff0:	4318      	orrs	r0, r3
}
    9ff2:	4770      	bx	lr

00009ff4 <uip_send>:
/*---------------------------------------------------------------------------*/
void
uip_send(const void *data, int len)
{
    9ff4:	b510      	push	{r4, lr}
    9ff6:	1c04      	adds	r4, r0, #0
  int copylen;
#define MIN(a,b) ((a) < (b)? (a): (b))

  if(uip_sappdata != NULL) {
    9ff8:	4b13      	ldr	r3, [pc, #76]	; (a048 <uip_send+0x54>)
    9ffa:	6818      	ldr	r0, [r3, #0]
    9ffc:	2800      	cmp	r0, #0
    9ffe:	d008      	beq.n	a012 <uip_send+0x1e>
    copylen = MIN(len, UIP_BUFSIZE - UIP_LLH_LEN - UIP_TCPIP_HLEN -
    a000:	4b12      	ldr	r3, [pc, #72]	; (a04c <uip_send+0x58>)
    a002:	3355      	adds	r3, #85	; 0x55
    a004:	33ff      	adds	r3, #255	; 0xff
    a006:	1a1b      	subs	r3, r3, r0
    a008:	1e0a      	subs	r2, r1, #0
    a00a:	429a      	cmp	r2, r3
    a00c:	dd07      	ble.n	a01e <uip_send+0x2a>
    a00e:	1c1a      	adds	r2, r3, #0
    a010:	e005      	b.n	a01e <uip_send+0x2a>
                  (int)((char *)uip_sappdata -
                        (char *)&uip_buf[UIP_LLH_LEN + UIP_TCPIP_HLEN]));
  } else {
    copylen = MIN(len, UIP_BUFSIZE - UIP_LLH_LEN - UIP_TCPIP_HLEN);
    a012:	1c0a      	adds	r2, r1, #0
    a014:	23aa      	movs	r3, #170	; 0xaa
    a016:	005b      	lsls	r3, r3, #1
    a018:	4299      	cmp	r1, r3
    a01a:	dd00      	ble.n	a01e <uip_send+0x2a>
    a01c:	1c1a      	adds	r2, r3, #0
  }
  if(copylen > 0) {
    a01e:	2a00      	cmp	r2, #0
    a020:	dd10      	ble.n	a044 <uip_send+0x50>
    uip_slen = copylen;
    a022:	4b0b      	ldr	r3, [pc, #44]	; (a050 <uip_send+0x5c>)
    a024:	801a      	strh	r2, [r3, #0]
    if(data != uip_sappdata) {
    a026:	42a0      	cmp	r0, r4
    a028:	d00c      	beq.n	a044 <uip_send+0x50>
    a02a:	1c21      	adds	r1, r4, #0
      if(uip_sappdata == NULL) {
    a02c:	2800      	cmp	r0, #0
    a02e:	d105      	bne.n	a03c <uip_send+0x48>
    a030:	0412      	lsls	r2, r2, #16
    a032:	0c12      	lsrs	r2, r2, #16
        memcpy((char *)&uip_buf[UIP_LLH_LEN + UIP_TCPIP_HLEN],
    a034:	4805      	ldr	r0, [pc, #20]	; (a04c <uip_send+0x58>)
    a036:	4b07      	ldr	r3, [pc, #28]	; (a054 <uip_send+0x60>)
    a038:	4798      	blx	r3
    a03a:	e003      	b.n	a044 <uip_send+0x50>
    a03c:	0412      	lsls	r2, r2, #16
    a03e:	0c12      	lsrs	r2, r2, #16
               (data), uip_slen);
      } else {
        memcpy(uip_sappdata, (data), uip_slen);
    a040:	4b04      	ldr	r3, [pc, #16]	; (a054 <uip_send+0x60>)
    a042:	4798      	blx	r3
      }
    }
  }
}
    a044:	bd10      	pop	{r4, pc}
    a046:	46c0      	nop			; (mov r8, r8)
    a048:	20002cc4 	.word	0x20002cc4
    a04c:	20002d10 	.word	0x20002d10
    a050:	20003088 	.word	0x20003088
    a054:	00010b2f 	.word	0x00010b2f

0000a058 <call_event>:
/*---------------------------------------------------------------------------*/
PROCESS(tcp_socket_process, "TCP socket process");
/*---------------------------------------------------------------------------*/
static void
call_event(struct tcp_socket *s, tcp_socket_event_t event)
{
    a058:	b508      	push	{r3, lr}
  if(s != NULL && s->event_callback != NULL) {
    a05a:	2800      	cmp	r0, #0
    a05c:	d005      	beq.n	a06a <call_event+0x12>
    a05e:	6883      	ldr	r3, [r0, #8]
    a060:	2b00      	cmp	r3, #0
    a062:	d002      	beq.n	a06a <call_event+0x12>
    a064:	1c0a      	adds	r2, r1, #0
    s->event_callback(s, s->ptr, event);
    a066:	68c1      	ldr	r1, [r0, #12]
    a068:	4798      	blx	r3
  }
}
    a06a:	bd08      	pop	{r3, pc}

0000a06c <relisten>:
}
/*---------------------------------------------------------------------------*/
static void
relisten(struct tcp_socket *s)
{
	if(s != NULL && s->listen_port != 0) {
    a06c:	2800      	cmp	r0, #0
    a06e:	d007      	beq.n	a080 <relisten+0x14>
    a070:	8d83      	ldrh	r3, [r0, #44]	; 0x2c
    a072:	2b00      	cmp	r3, #0
    a074:	d004      	beq.n	a080 <relisten+0x14>
		s->flags |= TCP_SOCKET_FLAGS_LISTENING;
    a076:	222a      	movs	r2, #42	; 0x2a
    a078:	5c81      	ldrb	r1, [r0, r2]
    a07a:	2301      	movs	r3, #1
    a07c:	430b      	orrs	r3, r1
    a07e:	5483      	strb	r3, [r0, r2]
	}
}
    a080:	4770      	bx	lr
    a082:	46c0      	nop			; (mov r8, r8)

0000a084 <newdata>:
}

/*---------------------------------------------------------------------------*/
static void
newdata(struct tcp_socket *s)
{
    a084:	b5f0      	push	{r4, r5, r6, r7, lr}
    a086:	4647      	mov	r7, r8
    a088:	b480      	push	{r7}
    a08a:	1c05      	adds	r5, r0, #0
  uint16_t len, copylen, bytesleft;
  uint8_t *dataptr;
  len = uip_datalen();
    a08c:	4b14      	ldr	r3, [pc, #80]	; (a0e0 <newdata+0x5c>)
    a08e:	881f      	ldrh	r7, [r3, #0]
  dataptr = uip_appdata;
    a090:	4b14      	ldr	r3, [pc, #80]	; (a0e4 <newdata+0x60>)
    a092:	681e      	ldr	r6, [r3, #0]
     should be retained in the buffer, or zero if all data should be
     consumed. If there is data to be retained, the highest bytes of
     data are copied down into the input buffer. */
  do {
    copylen = MIN(len, s->input_data_maxlen);
    memcpy(s->input_data_ptr, dataptr, copylen);
    a094:	4b14      	ldr	r3, [pc, #80]	; (a0e8 <newdata+0x64>)
    a096:	4698      	mov	r8, r3
     function. The input callback returns the number of bytes that
     should be retained in the buffer, or zero if all data should be
     consumed. If there is data to be retained, the highest bytes of
     data are copied down into the input buffer. */
  do {
    copylen = MIN(len, s->input_data_maxlen);
    a098:	8bab      	ldrh	r3, [r5, #28]
    a09a:	1c3c      	adds	r4, r7, #0
    a09c:	b29a      	uxth	r2, r3
    a09e:	4297      	cmp	r7, r2
    a0a0:	d900      	bls.n	a0a4 <newdata+0x20>
    a0a2:	1c1c      	adds	r4, r3, #0
    a0a4:	b2a4      	uxth	r4, r4
    memcpy(s->input_data_ptr, dataptr, copylen);
    a0a6:	6968      	ldr	r0, [r5, #20]
    a0a8:	1c31      	adds	r1, r6, #0
    a0aa:	1c22      	adds	r2, r4, #0
    a0ac:	47c0      	blx	r8
    if(s->input_callback) {
    a0ae:	686b      	ldr	r3, [r5, #4]
    a0b0:	469c      	mov	ip, r3
    a0b2:	2b00      	cmp	r3, #0
    a0b4:	d00c      	beq.n	a0d0 <newdata+0x4c>
      bytesleft = s->input_callback(s, s->ptr,
    a0b6:	1c28      	adds	r0, r5, #0
    a0b8:	68e9      	ldr	r1, [r5, #12]
    a0ba:	696a      	ldr	r2, [r5, #20]
    a0bc:	1c23      	adds	r3, r4, #0
    a0be:	47e0      	blx	ip
				    s->input_data_ptr, copylen);
    } else {
      bytesleft = 0;
    }
    if(bytesleft > 0) {
    a0c0:	b283      	uxth	r3, r0
    a0c2:	2b00      	cmp	r3, #0
    a0c4:	d004      	beq.n	a0d0 <newdata+0x4c>
      printf("tcp: newdata, bytesleft > 0 (%d) not implemented\n\r", bytesleft);
    a0c6:	0400      	lsls	r0, r0, #16
    a0c8:	0c01      	lsrs	r1, r0, #16
    a0ca:	4808      	ldr	r0, [pc, #32]	; (a0ec <newdata+0x68>)
    a0cc:	4b08      	ldr	r3, [pc, #32]	; (a0f0 <newdata+0x6c>)
    a0ce:	4798      	blx	r3
    }
    dataptr += copylen;
    a0d0:	1936      	adds	r6, r6, r4
    len -= copylen;
    a0d2:	1b3c      	subs	r4, r7, r4
    a0d4:	b2a7      	uxth	r7, r4

  } while(len > 0);
    a0d6:	2f00      	cmp	r7, #0
    a0d8:	d1de      	bne.n	a098 <newdata+0x14>
}
    a0da:	bc04      	pop	{r2}
    a0dc:	4690      	mov	r8, r2
    a0de:	bdf0      	pop	{r4, r5, r6, r7, pc}
    a0e0:	20002cc0 	.word	0x20002cc0
    a0e4:	20002e70 	.word	0x20002e70
    a0e8:	00010b2f 	.word	0x00010b2f
    a0ec:	00012d68 	.word	0x00012d68
    a0f0:	00010b79 	.word	0x00010b79

0000a0f4 <senddata>:
  }
}
/*---------------------------------------------------------------------------*/
static void
senddata(struct tcp_socket *s)
{
    a0f4:	b510      	push	{r4, lr}
  int len = MIN(s->output_data_max_seg, uip_mss());
    a0f6:	4b0a      	ldr	r3, [pc, #40]	; (a120 <senddata+0x2c>)
    a0f8:	681b      	ldr	r3, [r3, #0]
    a0fa:	8bdc      	ldrh	r4, [r3, #30]
    a0fc:	8d02      	ldrh	r2, [r0, #40]	; 0x28

  if(s->output_senddata_len > 0) {
    a0fe:	8cc3      	ldrh	r3, [r0, #38]	; 0x26
    a100:	2b00      	cmp	r3, #0
    a102:	d00b      	beq.n	a11c <senddata+0x28>
}
/*---------------------------------------------------------------------------*/
static void
senddata(struct tcp_socket *s)
{
  int len = MIN(s->output_data_max_seg, uip_mss());
    a104:	1c11      	adds	r1, r2, #0
    a106:	42a2      	cmp	r2, r4
    a108:	d900      	bls.n	a10c <senddata+0x18>
    a10a:	1c21      	adds	r1, r4, #0
    a10c:	b289      	uxth	r1, r1

  if(s->output_senddata_len > 0) {
    len = MIN(s->output_senddata_len, len);
    a10e:	4299      	cmp	r1, r3
    a110:	dd00      	ble.n	a114 <senddata+0x20>
    a112:	1c19      	adds	r1, r3, #0
    s->output_data_send_nxt = len;
    a114:	8481      	strh	r1, [r0, #36]	; 0x24
    uip_send(s->output_data_ptr, len);
    a116:	6980      	ldr	r0, [r0, #24]
    a118:	4b02      	ldr	r3, [pc, #8]	; (a124 <senddata+0x30>)
    a11a:	4798      	blx	r3
  }
}
    a11c:	bd10      	pop	{r4, pc}
    a11e:	46c0      	nop			; (mov r8, r8)
    a120:	20002e74 	.word	0x20002e74
    a124:	00009ff5 	.word	0x00009ff5

0000a128 <process_thread_tcp_socket_process>:
    relisten(s);
  }
}
/*---------------------------------------------------------------------------*/
PROCESS_THREAD(tcp_socket_process, ev, data)
{
    a128:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    a12a:	464f      	mov	r7, r9
    a12c:	4646      	mov	r6, r8
    a12e:	b4c0      	push	{r6, r7}
    a130:	1c04      	adds	r4, r0, #0
    a132:	1c15      	adds	r5, r2, #0
  PROCESS_BEGIN();
    a134:	8803      	ldrh	r3, [r0, #0]
    a136:	2b00      	cmp	r3, #0
    a138:	d002      	beq.n	a140 <process_thread_tcp_socket_process+0x18>
    a13a:	2bef      	cmp	r3, #239	; 0xef
    a13c:	d004      	beq.n	a148 <process_thread_tcp_socket_process+0x20>
    a13e:	e0ee      	b.n	a31e <process_thread_tcp_socket_process+0x1f6>
  while(1) {
    PROCESS_WAIT_EVENT();
    a140:	23ef      	movs	r3, #239	; 0xef
    a142:	8023      	strh	r3, [r4, #0]
    a144:	2001      	movs	r0, #1
    a146:	e0fc      	b.n	a342 <process_thread_tcp_socket_process+0x21a>

    if(ev == tcpip_event) {
    a148:	4b80      	ldr	r3, [pc, #512]	; (a34c <process_thread_tcp_socket_process+0x224>)
    a14a:	781b      	ldrb	r3, [r3, #0]
    a14c:	428b      	cmp	r3, r1
    a14e:	d1f7      	bne.n	a140 <process_thread_tcp_socket_process+0x18>
static void
appcall(void *state)
{
  struct tcp_socket *s = state;

  if(s != NULL && s->c != NULL && s->c != uip_conn) {
    a150:	2a00      	cmp	r2, #0
    a152:	d100      	bne.n	a156 <process_thread_tcp_socket_process+0x2e>
    a154:	e0ed      	b.n	a332 <process_thread_tcp_socket_process+0x20a>
    a156:	6b13      	ldr	r3, [r2, #48]	; 0x30
    a158:	2b00      	cmp	r3, #0
    a15a:	d100      	bne.n	a15e <process_thread_tcp_socket_process+0x36>
    a15c:	e0e3      	b.n	a326 <process_thread_tcp_socket_process+0x1fe>
    a15e:	4a7c      	ldr	r2, [pc, #496]	; (a350 <process_thread_tcp_socket_process+0x228>)
    a160:	6812      	ldr	r2, [r2, #0]
    a162:	4293      	cmp	r3, r2
    a164:	d1ec      	bne.n	a140 <process_thread_tcp_socket_process+0x18>
    a166:	e0de      	b.n	a326 <process_thread_tcp_socket_process+0x1fe>
       socket. We do this by checking the state pointer - if NULL,
       this is an incoming listen connection. If so, we need to
       connect the socket to the uip_conn and call the event
       function. */
    if(s == NULL) {
      for(s = list_head(socketlist);
    a168:	487a      	ldr	r0, [pc, #488]	; (a354 <process_thread_tcp_socket_process+0x22c>)
    a16a:	4b7b      	ldr	r3, [pc, #492]	; (a358 <process_thread_tcp_socket_process+0x230>)
    a16c:	4798      	blx	r3
    a16e:	1e05      	subs	r5, r0, #0
    a170:	d032      	beq.n	a1d8 <process_thread_tcp_socket_process+0xb0>
	  s != NULL;
	  s = list_item_next(s)) {
	if((s->flags & TCP_SOCKET_FLAGS_LISTENING) != 0 &&
	   s->listen_port != 0 &&
	   s->listen_port == uip_htons(uip_conn->lport)) {
    a172:	4b77      	ldr	r3, [pc, #476]	; (a350 <process_thread_tcp_socket_process+0x228>)
    a174:	4699      	mov	r9, r3
    a176:	4b79      	ldr	r3, [pc, #484]	; (a35c <process_thread_tcp_socket_process+0x234>)
    a178:	4698      	mov	r8, r3
       connect the socket to the uip_conn and call the event
       function. */
    if(s == NULL) {
      for(s = list_head(socketlist);
	  s != NULL;
	  s = list_item_next(s)) {
    a17a:	4f79      	ldr	r7, [pc, #484]	; (a360 <process_thread_tcp_socket_process+0x238>)
	if((s->flags & TCP_SOCKET_FLAGS_LISTENING) != 0 &&
    a17c:	232a      	movs	r3, #42	; 0x2a
    a17e:	5ceb      	ldrb	r3, [r5, r3]
    a180:	07db      	lsls	r3, r3, #31
    a182:	d51b      	bpl.n	a1bc <process_thread_tcp_socket_process+0x94>
	   s->listen_port != 0 &&
    a184:	8dae      	ldrh	r6, [r5, #44]	; 0x2c
       function. */
    if(s == NULL) {
      for(s = list_head(socketlist);
	  s != NULL;
	  s = list_item_next(s)) {
	if((s->flags & TCP_SOCKET_FLAGS_LISTENING) != 0 &&
    a186:	2e00      	cmp	r6, #0
    a188:	d018      	beq.n	a1bc <process_thread_tcp_socket_process+0x94>
	   s->listen_port != 0 &&
	   s->listen_port == uip_htons(uip_conn->lport)) {
    a18a:	464b      	mov	r3, r9
    a18c:	681b      	ldr	r3, [r3, #0]
    a18e:	8a18      	ldrh	r0, [r3, #16]
    a190:	47c0      	blx	r8
    if(s == NULL) {
      for(s = list_head(socketlist);
	  s != NULL;
	  s = list_item_next(s)) {
	if((s->flags & TCP_SOCKET_FLAGS_LISTENING) != 0 &&
	   s->listen_port != 0 &&
    a192:	4286      	cmp	r6, r0
    a194:	d112      	bne.n	a1bc <process_thread_tcp_socket_process+0x94>
	   s->listen_port == uip_htons(uip_conn->lport)) {
	  s->flags &= ~TCP_SOCKET_FLAGS_LISTENING;
    a196:	222a      	movs	r2, #42	; 0x2a
    a198:	5cab      	ldrb	r3, [r5, r2]
    a19a:	2101      	movs	r1, #1
    a19c:	438b      	bics	r3, r1
    a19e:	54ab      	strb	r3, [r5, r2]
          s->output_data_max_seg = uip_mss();
    a1a0:	4b6b      	ldr	r3, [pc, #428]	; (a350 <process_thread_tcp_socket_process+0x228>)
    a1a2:	6818      	ldr	r0, [r3, #0]
    a1a4:	8bc3      	ldrh	r3, [r0, #30]
    a1a6:	852b      	strh	r3, [r5, #40]	; 0x28
	  tcp_markconn(uip_conn, s);
    a1a8:	1c29      	adds	r1, r5, #0
    a1aa:	4b6e      	ldr	r3, [pc, #440]	; (a364 <process_thread_tcp_socket_process+0x23c>)
    a1ac:	4798      	blx	r3
	  call_event(s, TCP_SOCKET_CONNECTED);
    a1ae:	1c28      	adds	r0, r5, #0
    a1b0:	2100      	movs	r1, #0
    a1b2:	4b6d      	ldr	r3, [pc, #436]	; (a368 <process_thread_tcp_socket_process+0x240>)
    a1b4:	4798      	blx	r3
    } else {
      s->output_data_max_seg = uip_mss();
      call_event(s, TCP_SOCKET_CONNECTED);
    }

    if(s == NULL) {
    a1b6:	2d00      	cmp	r5, #0
    a1b8:	d112      	bne.n	a1e0 <process_thread_tcp_socket_process+0xb8>
    a1ba:	e00d      	b.n	a1d8 <process_thread_tcp_socket_process+0xb0>
       connect the socket to the uip_conn and call the event
       function. */
    if(s == NULL) {
      for(s = list_head(socketlist);
	  s != NULL;
	  s = list_item_next(s)) {
    a1bc:	1c28      	adds	r0, r5, #0
    a1be:	47b8      	blx	r7
    a1c0:	1e05      	subs	r5, r0, #0
       socket. We do this by checking the state pointer - if NULL,
       this is an incoming listen connection. If so, we need to
       connect the socket to the uip_conn and call the event
       function. */
    if(s == NULL) {
      for(s = list_head(socketlist);
    a1c2:	d1db      	bne.n	a17c <process_thread_tcp_socket_process+0x54>
    a1c4:	e008      	b.n	a1d8 <process_thread_tcp_socket_process+0xb0>
	  call_event(s, TCP_SOCKET_CONNECTED);
	  break;
	}
      }
    } else {
      s->output_data_max_seg = uip_mss();
    a1c6:	4b62      	ldr	r3, [pc, #392]	; (a350 <process_thread_tcp_socket_process+0x228>)
    a1c8:	681b      	ldr	r3, [r3, #0]
    a1ca:	8bdb      	ldrh	r3, [r3, #30]
    a1cc:	852b      	strh	r3, [r5, #40]	; 0x28
      call_event(s, TCP_SOCKET_CONNECTED);
    a1ce:	1c28      	adds	r0, r5, #0
    a1d0:	2100      	movs	r1, #0
    a1d2:	4b65      	ldr	r3, [pc, #404]	; (a368 <process_thread_tcp_socket_process+0x240>)
    a1d4:	4798      	blx	r3
    a1d6:	e003      	b.n	a1e0 <process_thread_tcp_socket_process+0xb8>
    }

    if(s == NULL) {
      uip_abort();
    a1d8:	2220      	movs	r2, #32
    a1da:	4b64      	ldr	r3, [pc, #400]	; (a36c <process_thread_tcp_socket_process+0x244>)
    a1dc:	701a      	strb	r2, [r3, #0]
    a1de:	e7af      	b.n	a140 <process_thread_tcp_socket_process+0x18>
    } else {
      if(uip_newdata()) {
    a1e0:	4b62      	ldr	r3, [pc, #392]	; (a36c <process_thread_tcp_socket_process+0x244>)
    a1e2:	781b      	ldrb	r3, [r3, #0]
    a1e4:	079b      	lsls	r3, r3, #30
    a1e6:	d502      	bpl.n	a1ee <process_thread_tcp_socket_process+0xc6>
        newdata(s);
    a1e8:	1c28      	adds	r0, r5, #0
    a1ea:	4b61      	ldr	r3, [pc, #388]	; (a370 <process_thread_tcp_socket_process+0x248>)
    a1ec:	4798      	blx	r3
      }
      senddata(s);
    a1ee:	1c28      	adds	r0, r5, #0
    a1f0:	4b60      	ldr	r3, [pc, #384]	; (a374 <process_thread_tcp_socket_process+0x24c>)
    a1f2:	4798      	blx	r3
    a1f4:	e7a4      	b.n	a140 <process_thread_tcp_socket_process+0x18>
    }
    return;
  }

  if(uip_timedout()) {
    a1f6:	b25b      	sxtb	r3, r3
    a1f8:	2b00      	cmp	r3, #0
    a1fa:	da06      	bge.n	a20a <process_thread_tcp_socket_process+0xe2>
    call_event(s, TCP_SOCKET_TIMEDOUT);
    a1fc:	1c28      	adds	r0, r5, #0
    a1fe:	2102      	movs	r1, #2
    a200:	4b59      	ldr	r3, [pc, #356]	; (a368 <process_thread_tcp_socket_process+0x240>)
    a202:	4798      	blx	r3
    relisten(s);
    a204:	1c28      	adds	r0, r5, #0
    a206:	4b5c      	ldr	r3, [pc, #368]	; (a378 <process_thread_tcp_socket_process+0x250>)
    a208:	4798      	blx	r3
  }

  if(uip_aborted()) {
    a20a:	4b58      	ldr	r3, [pc, #352]	; (a36c <process_thread_tcp_socket_process+0x244>)
    a20c:	781b      	ldrb	r3, [r3, #0]
    a20e:	069b      	lsls	r3, r3, #26
    a210:	d50b      	bpl.n	a22a <process_thread_tcp_socket_process+0x102>
    tcp_markconn(uip_conn, NULL);
    a212:	4b4f      	ldr	r3, [pc, #316]	; (a350 <process_thread_tcp_socket_process+0x228>)
    a214:	6818      	ldr	r0, [r3, #0]
    a216:	2100      	movs	r1, #0
    a218:	4b52      	ldr	r3, [pc, #328]	; (a364 <process_thread_tcp_socket_process+0x23c>)
    a21a:	4798      	blx	r3
    call_event(s, TCP_SOCKET_ABORTED);
    a21c:	1c28      	adds	r0, r5, #0
    a21e:	2103      	movs	r1, #3
    a220:	4b51      	ldr	r3, [pc, #324]	; (a368 <process_thread_tcp_socket_process+0x240>)
    a222:	4798      	blx	r3
    relisten(s);
    a224:	1c28      	adds	r0, r5, #0
    a226:	4b54      	ldr	r3, [pc, #336]	; (a378 <process_thread_tcp_socket_process+0x250>)
    a228:	4798      	blx	r3

  }

  if(s == NULL) {
    a22a:	2d00      	cmp	r5, #0
    a22c:	d103      	bne.n	a236 <process_thread_tcp_socket_process+0x10e>
    uip_abort();
    a22e:	2220      	movs	r2, #32
    a230:	4b4e      	ldr	r3, [pc, #312]	; (a36c <process_thread_tcp_socket_process+0x244>)
    a232:	701a      	strb	r2, [r3, #0]
    a234:	e784      	b.n	a140 <process_thread_tcp_socket_process+0x18>
    return;
  }

  if(uip_acked()) {
    a236:	4b4d      	ldr	r3, [pc, #308]	; (a36c <process_thread_tcp_socket_process+0x244>)
    a238:	781b      	ldrb	r3, [r3, #0]
    a23a:	07db      	lsls	r3, r3, #31
    a23c:	d52e      	bpl.n	a29c <process_thread_tcp_socket_process+0x174>
/*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*/
static void
acked(struct tcp_socket *s)
{
  if(s->output_senddata_len > 0) {
    a23e:	8ceb      	ldrh	r3, [r5, #38]	; 0x26
    a240:	2b00      	cmp	r3, #0
    a242:	d02b      	beq.n	a29c <process_thread_tcp_socket_process+0x174>
    /* Copy the data in the outputbuf down and update outputbufptr and
       outputbuf_lastsent */

    if(s->output_data_send_nxt > 0) {
    a244:	8cab      	ldrh	r3, [r5, #36]	; 0x24
    a246:	2b00      	cmp	r3, #0
    a248:	d079      	beq.n	a33e <process_thread_tcp_socket_process+0x216>
      memcpy(&s->output_data_ptr[0],
             &s->output_data_ptr[s->output_data_send_nxt],
             s->output_data_maxlen - s->output_data_send_nxt);
    a24a:	8c2a      	ldrh	r2, [r5, #32]
    a24c:	1ad2      	subs	r2, r2, r3
    /* Copy the data in the outputbuf down and update outputbufptr and
       outputbuf_lastsent */

    if(s->output_data_send_nxt > 0) {
      memcpy(&s->output_data_ptr[0],
             &s->output_data_ptr[s->output_data_send_nxt],
    a24e:	69a9      	ldr	r1, [r5, #24]
    a250:	18c9      	adds	r1, r1, r3
  if(s->output_senddata_len > 0) {
    /* Copy the data in the outputbuf down and update outputbufptr and
       outputbuf_lastsent */

    if(s->output_data_send_nxt > 0) {
      memcpy(&s->output_data_ptr[0],
    a252:	69a8      	ldr	r0, [r5, #24]
    a254:	4b49      	ldr	r3, [pc, #292]	; (a37c <process_thread_tcp_socket_process+0x254>)
    a256:	4798      	blx	r3
             &s->output_data_ptr[s->output_data_send_nxt],
             s->output_data_maxlen - s->output_data_send_nxt);
    }
    if(s->output_data_len < s->output_data_send_nxt) {
    a258:	8c69      	ldrh	r1, [r5, #34]	; 0x22
    a25a:	8cab      	ldrh	r3, [r5, #36]	; 0x24
    a25c:	4299      	cmp	r1, r3
    a25e:	d213      	bcs.n	a288 <process_thread_tcp_socket_process+0x160>
      printf("tcp: acked assertion failed s->output_data_len (%d) < s->output_data_send_nxt (%d)\n\r",
    a260:	4847      	ldr	r0, [pc, #284]	; (a380 <process_thread_tcp_socket_process+0x258>)
    a262:	1c1a      	adds	r2, r3, #0
    a264:	4b47      	ldr	r3, [pc, #284]	; (a384 <process_thread_tcp_socket_process+0x25c>)
    a266:	4798      	blx	r3
             s->output_data_len,
             s->output_data_send_nxt);
      tcp_markconn(uip_conn, NULL);
    a268:	4b39      	ldr	r3, [pc, #228]	; (a350 <process_thread_tcp_socket_process+0x228>)
    a26a:	6818      	ldr	r0, [r3, #0]
    a26c:	2100      	movs	r1, #0
    a26e:	4b3d      	ldr	r3, [pc, #244]	; (a364 <process_thread_tcp_socket_process+0x23c>)
    a270:	4798      	blx	r3
      uip_abort();
    a272:	2220      	movs	r2, #32
    a274:	4b3d      	ldr	r3, [pc, #244]	; (a36c <process_thread_tcp_socket_process+0x244>)
    a276:	701a      	strb	r2, [r3, #0]
      call_event(s, TCP_SOCKET_ABORTED);
    a278:	1c28      	adds	r0, r5, #0
    a27a:	2103      	movs	r1, #3
    a27c:	4b3a      	ldr	r3, [pc, #232]	; (a368 <process_thread_tcp_socket_process+0x240>)
    a27e:	4798      	blx	r3
      relisten(s);
    a280:	1c28      	adds	r0, r5, #0
    a282:	4b3d      	ldr	r3, [pc, #244]	; (a378 <process_thread_tcp_socket_process+0x250>)
    a284:	4798      	blx	r3
    a286:	e009      	b.n	a29c <process_thread_tcp_socket_process+0x174>
      return;
    }
    s->output_data_len -= s->output_data_send_nxt;
    a288:	1acb      	subs	r3, r1, r3
    a28a:	b29b      	uxth	r3, r3
    a28c:	846b      	strh	r3, [r5, #34]	; 0x22
    s->output_senddata_len = s->output_data_len;
    a28e:	84eb      	strh	r3, [r5, #38]	; 0x26
    s->output_data_send_nxt = 0;
    a290:	2300      	movs	r3, #0
    a292:	84ab      	strh	r3, [r5, #36]	; 0x24

    call_event(s, TCP_SOCKET_DATA_SENT);
    a294:	1c28      	adds	r0, r5, #0
    a296:	2104      	movs	r1, #4
    a298:	4b33      	ldr	r3, [pc, #204]	; (a368 <process_thread_tcp_socket_process+0x240>)
    a29a:	4798      	blx	r3
  }

  if(uip_acked()) {
    acked(s);
  }
  if(uip_newdata()) {
    a29c:	4b33      	ldr	r3, [pc, #204]	; (a36c <process_thread_tcp_socket_process+0x244>)
    a29e:	781b      	ldrb	r3, [r3, #0]
    a2a0:	079b      	lsls	r3, r3, #30
    a2a2:	d502      	bpl.n	a2aa <process_thread_tcp_socket_process+0x182>
    newdata(s);
    a2a4:	1c28      	adds	r0, r5, #0
    a2a6:	4b32      	ldr	r3, [pc, #200]	; (a370 <process_thread_tcp_socket_process+0x248>)
    a2a8:	4798      	blx	r3
  }

  if(uip_rexmit() ||
    a2aa:	4b30      	ldr	r3, [pc, #192]	; (a36c <process_thread_tcp_socket_process+0x244>)
    a2ac:	781b      	ldrb	r3, [r3, #0]
     uip_newdata() ||
    a2ae:	075a      	lsls	r2, r3, #29
    a2b0:	d003      	beq.n	a2ba <process_thread_tcp_socket_process+0x192>
     uip_acked()) {
    senddata(s);
    a2b2:	1c28      	adds	r0, r5, #0
    a2b4:	4b2f      	ldr	r3, [pc, #188]	; (a374 <process_thread_tcp_socket_process+0x24c>)
    a2b6:	4798      	blx	r3
    a2b8:	e004      	b.n	a2c4 <process_thread_tcp_socket_process+0x19c>
  } else if(uip_poll()) {
    a2ba:	071b      	lsls	r3, r3, #28
    a2bc:	d502      	bpl.n	a2c4 <process_thread_tcp_socket_process+0x19c>
    senddata(s);
    a2be:	1c28      	adds	r0, r5, #0
    a2c0:	4b2c      	ldr	r3, [pc, #176]	; (a374 <process_thread_tcp_socket_process+0x24c>)
    a2c2:	4798      	blx	r3
  }

  if(s->output_data_len == 0 && s->flags & TCP_SOCKET_FLAGS_CLOSING) {
    a2c4:	8c6b      	ldrh	r3, [r5, #34]	; 0x22
    a2c6:	2b00      	cmp	r3, #0
    a2c8:	d115      	bne.n	a2f6 <process_thread_tcp_socket_process+0x1ce>
    a2ca:	332a      	adds	r3, #42	; 0x2a
    a2cc:	5ceb      	ldrb	r3, [r5, r3]
    a2ce:	079a      	lsls	r2, r3, #30
    a2d0:	d511      	bpl.n	a2f6 <process_thread_tcp_socket_process+0x1ce>
    s->flags &= ~TCP_SOCKET_FLAGS_CLOSING;
    a2d2:	2202      	movs	r2, #2
    a2d4:	4393      	bics	r3, r2
    a2d6:	3228      	adds	r2, #40	; 0x28
    a2d8:	54ab      	strb	r3, [r5, r2]
    uip_close();
    a2da:	3a1a      	subs	r2, #26
    a2dc:	4b23      	ldr	r3, [pc, #140]	; (a36c <process_thread_tcp_socket_process+0x244>)
    a2de:	701a      	strb	r2, [r3, #0]
    s->c = NULL;
    a2e0:	2600      	movs	r6, #0
    a2e2:	632e      	str	r6, [r5, #48]	; 0x30
    tcp_markconn(uip_conn, NULL);
    a2e4:	4b1a      	ldr	r3, [pc, #104]	; (a350 <process_thread_tcp_socket_process+0x228>)
    a2e6:	6818      	ldr	r0, [r3, #0]
    a2e8:	2100      	movs	r1, #0
    a2ea:	4b1e      	ldr	r3, [pc, #120]	; (a364 <process_thread_tcp_socket_process+0x23c>)
    a2ec:	4798      	blx	r3
    s->c = NULL;
    a2ee:	632e      	str	r6, [r5, #48]	; 0x30
    /*call_event(s, TCP_SOCKET_CLOSED);*/
    relisten(s);
    a2f0:	1c28      	adds	r0, r5, #0
    a2f2:	4b21      	ldr	r3, [pc, #132]	; (a378 <process_thread_tcp_socket_process+0x250>)
    a2f4:	4798      	blx	r3
  }

  if(uip_closed()) {
    a2f6:	4b1d      	ldr	r3, [pc, #116]	; (a36c <process_thread_tcp_socket_process+0x244>)
    a2f8:	781b      	ldrb	r3, [r3, #0]
    a2fa:	06db      	lsls	r3, r3, #27
    a2fc:	d400      	bmi.n	a300 <process_thread_tcp_socket_process+0x1d8>
    a2fe:	e71f      	b.n	a140 <process_thread_tcp_socket_process+0x18>
    tcp_markconn(uip_conn, NULL);
    a300:	4b13      	ldr	r3, [pc, #76]	; (a350 <process_thread_tcp_socket_process+0x228>)
    a302:	6818      	ldr	r0, [r3, #0]
    a304:	2100      	movs	r1, #0
    a306:	4b17      	ldr	r3, [pc, #92]	; (a364 <process_thread_tcp_socket_process+0x23c>)
    a308:	4798      	blx	r3
    s->c = NULL;
    a30a:	2300      	movs	r3, #0
    a30c:	632b      	str	r3, [r5, #48]	; 0x30
    call_event(s, TCP_SOCKET_CLOSED);
    a30e:	1c28      	adds	r0, r5, #0
    a310:	2101      	movs	r1, #1
    a312:	4b15      	ldr	r3, [pc, #84]	; (a368 <process_thread_tcp_socket_process+0x240>)
    a314:	4798      	blx	r3
    relisten(s);
    a316:	1c28      	adds	r0, r5, #0
    a318:	4b17      	ldr	r3, [pc, #92]	; (a378 <process_thread_tcp_socket_process+0x250>)
    a31a:	4798      	blx	r3
    a31c:	e710      	b.n	a140 <process_thread_tcp_socket_process+0x18>

    if(ev == tcpip_event) {
      appcall(data);
    }
  }
  PROCESS_END();
    a31e:	2300      	movs	r3, #0
    a320:	8003      	strh	r3, [r0, #0]
    a322:	2003      	movs	r0, #3
    a324:	e00d      	b.n	a342 <process_thread_tcp_socket_process+0x21a>
  if(s != NULL && s->c != NULL && s->c != uip_conn) {
    /* Safe-guard: this should not happen, as the incoming event relates to
     * a previous connection */
    return;
  }
  if(uip_connected()) {
    a326:	4b11      	ldr	r3, [pc, #68]	; (a36c <process_thread_tcp_socket_process+0x244>)
    a328:	781b      	ldrb	r3, [r3, #0]
    a32a:	065a      	lsls	r2, r3, #25
    a32c:	d500      	bpl.n	a330 <process_thread_tcp_socket_process+0x208>
    a32e:	e74a      	b.n	a1c6 <process_thread_tcp_socket_process+0x9e>
    a330:	e761      	b.n	a1f6 <process_thread_tcp_socket_process+0xce>
    a332:	4b0e      	ldr	r3, [pc, #56]	; (a36c <process_thread_tcp_socket_process+0x244>)
    a334:	781b      	ldrb	r3, [r3, #0]
    a336:	065a      	lsls	r2, r3, #25
    a338:	d500      	bpl.n	a33c <process_thread_tcp_socket_process+0x214>
    a33a:	e715      	b.n	a168 <process_thread_tcp_socket_process+0x40>
    a33c:	e75b      	b.n	a1f6 <process_thread_tcp_socket_process+0xce>
    if(s->output_data_send_nxt > 0) {
      memcpy(&s->output_data_ptr[0],
             &s->output_data_ptr[s->output_data_send_nxt],
             s->output_data_maxlen - s->output_data_send_nxt);
    }
    if(s->output_data_len < s->output_data_send_nxt) {
    a33e:	8c69      	ldrh	r1, [r5, #34]	; 0x22
    a340:	e7a2      	b.n	a288 <process_thread_tcp_socket_process+0x160>
    if(ev == tcpip_event) {
      appcall(data);
    }
  }
  PROCESS_END();
}
    a342:	bc0c      	pop	{r2, r3}
    a344:	4690      	mov	r8, r2
    a346:	4699      	mov	r9, r3
    a348:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    a34a:	46c0      	nop			; (mov r8, r8)
    a34c:	200031cc 	.word	0x200031cc
    a350:	20002e74 	.word	0x20002e74
    a354:	20000b20 	.word	0x20000b20
    a358:	00005719 	.word	0x00005719
    a35c:	00009fd1 	.word	0x00009fd1
    a360:	000057c1 	.word	0x000057c1
    a364:	0000a5d1 	.word	0x0000a5d1
    a368:	0000a059 	.word	0x0000a059
    a36c:	20002e64 	.word	0x20002e64
    a370:	0000a085 	.word	0x0000a085
    a374:	0000a0f5 	.word	0x0000a0f5
    a378:	0000a06d 	.word	0x0000a06d
    a37c:	00010b2f 	.word	0x00010b2f
    a380:	00012d9c 	.word	0x00012d9c
    a384:	00010b79 	.word	0x00010b79

0000a388 <tcp_socket_register>:
tcp_socket_register(struct tcp_socket *s, void *ptr,
		    uint8_t *input_databuf, int input_databuf_len,
		    uint8_t *output_databuf, int output_databuf_len,
		    tcp_socket_data_callback_t input_callback,
		    tcp_socket_event_callback_t event_callback)
{
    a388:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    a38a:	1c04      	adds	r4, r0, #0
    a38c:	1c0f      	adds	r7, r1, #0
    a38e:	1c16      	adds	r6, r2, #0
    a390:	1c1d      	adds	r5, r3, #0
/*---------------------------------------------------------------------------*/
static void
init(void)
{
  static uint8_t inited = 0;
  if(!inited) {
    a392:	4b15      	ldr	r3, [pc, #84]	; (a3e8 <tcp_socket_register+0x60>)
    a394:	781b      	ldrb	r3, [r3, #0]
    a396:	2b00      	cmp	r3, #0
    a398:	d109      	bne.n	a3ae <tcp_socket_register+0x26>
    list_init(socketlist);
    a39a:	4814      	ldr	r0, [pc, #80]	; (a3ec <tcp_socket_register+0x64>)
    a39c:	4b14      	ldr	r3, [pc, #80]	; (a3f0 <tcp_socket_register+0x68>)
    a39e:	4798      	blx	r3
    process_start(&tcp_socket_process, NULL);
    a3a0:	4814      	ldr	r0, [pc, #80]	; (a3f4 <tcp_socket_register+0x6c>)
    a3a2:	2100      	movs	r1, #0
    a3a4:	4b14      	ldr	r3, [pc, #80]	; (a3f8 <tcp_socket_register+0x70>)
    a3a6:	4798      	blx	r3
    inited = 1;
    a3a8:	2201      	movs	r2, #1
    a3aa:	4b0f      	ldr	r3, [pc, #60]	; (a3e8 <tcp_socket_register+0x60>)
    a3ac:	701a      	strb	r2, [r3, #0]
		    tcp_socket_event_callback_t event_callback)
{

  init();

  if(s == NULL) {
    a3ae:	2c00      	cmp	r4, #0
    a3b0:	d016      	beq.n	a3e0 <tcp_socket_register+0x58>
    return -1;
  }
  s->ptr = ptr;
    a3b2:	60e7      	str	r7, [r4, #12]
  s->input_data_ptr = input_databuf;
    a3b4:	6166      	str	r6, [r4, #20]
  s->input_data_maxlen = input_databuf_len;
    a3b6:	83a5      	strh	r5, [r4, #28]
  s->output_data_len = 0;
    a3b8:	2500      	movs	r5, #0
    a3ba:	8465      	strh	r5, [r4, #34]	; 0x22
  s->output_data_ptr = output_databuf;
    a3bc:	9b06      	ldr	r3, [sp, #24]
    a3be:	61a3      	str	r3, [r4, #24]
  s->output_data_maxlen = output_databuf_len;
    a3c0:	9b07      	ldr	r3, [sp, #28]
    a3c2:	8423      	strh	r3, [r4, #32]
  s->input_callback = input_callback;
    a3c4:	9b08      	ldr	r3, [sp, #32]
    a3c6:	6063      	str	r3, [r4, #4]
  s->event_callback = event_callback;
    a3c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
    a3ca:	60a3      	str	r3, [r4, #8]
  list_add(socketlist, s);
    a3cc:	4807      	ldr	r0, [pc, #28]	; (a3ec <tcp_socket_register+0x64>)
    a3ce:	1c21      	adds	r1, r4, #0
    a3d0:	4b0a      	ldr	r3, [pc, #40]	; (a3fc <tcp_socket_register+0x74>)
    a3d2:	4798      	blx	r3

  s->listen_port = 0;
    a3d4:	85a5      	strh	r5, [r4, #44]	; 0x2c
  s->flags = TCP_SOCKET_FLAGS_NONE;
    a3d6:	232a      	movs	r3, #42	; 0x2a
    a3d8:	2200      	movs	r2, #0
    a3da:	54e2      	strb	r2, [r4, r3]
  return 1;
    a3dc:	2001      	movs	r0, #1
    a3de:	e001      	b.n	a3e4 <tcp_socket_register+0x5c>
{

  init();

  if(s == NULL) {
    return -1;
    a3e0:	2001      	movs	r0, #1
    a3e2:	4240      	negs	r0, r0
  list_add(socketlist, s);

  s->listen_port = 0;
  s->flags = TCP_SOCKET_FLAGS_NONE;
  return 1;
}
    a3e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    a3e6:	46c0      	nop			; (mov r8, r8)
    a3e8:	20000b1e 	.word	0x20000b1e
    a3ec:	20000b20 	.word	0x20000b20
    a3f0:	00005711 	.word	0x00005711
    a3f4:	200000b0 	.word	0x200000b0
    a3f8:	0000ec79 	.word	0x0000ec79
    a3fc:	00005769 	.word	0x00005769

0000a400 <tcp_socket_connect>:
/*---------------------------------------------------------------------------*/
int
tcp_socket_connect(struct tcp_socket *s,
                   const uip_ipaddr_t *ipaddr,
                   uint16_t port)
{
    a400:	b5f0      	push	{r4, r5, r6, r7, lr}
    a402:	b083      	sub	sp, #12
  if(s == NULL) {
    a404:	2800      	cmp	r0, #0
    a406:	d01c      	beq.n	a442 <tcp_socket_connect+0x42>
    a408:	1c16      	adds	r6, r2, #0
    a40a:	9101      	str	r1, [sp, #4]
    a40c:	1c04      	adds	r4, r0, #0
    return -1;
  }
  if(s->c != NULL) {
    a40e:	6b00      	ldr	r0, [r0, #48]	; 0x30
    a410:	2800      	cmp	r0, #0
    a412:	d002      	beq.n	a41a <tcp_socket_connect+0x1a>
    tcp_markconn(s->c, NULL);
    a414:	2100      	movs	r1, #0
    a416:	4b0d      	ldr	r3, [pc, #52]	; (a44c <tcp_socket_connect+0x4c>)
    a418:	4798      	blx	r3
  }
  PROCESS_CONTEXT_BEGIN(&tcp_socket_process);
    a41a:	4f0d      	ldr	r7, [pc, #52]	; (a450 <tcp_socket_connect+0x50>)
    a41c:	683d      	ldr	r5, [r7, #0]
    a41e:	4b0d      	ldr	r3, [pc, #52]	; (a454 <tcp_socket_connect+0x54>)
    a420:	603b      	str	r3, [r7, #0]
  s->c = tcp_connect(ipaddr, uip_htons(port), s);
    a422:	1c30      	adds	r0, r6, #0
    a424:	4b0c      	ldr	r3, [pc, #48]	; (a458 <tcp_socket_connect+0x58>)
    a426:	4798      	blx	r3
    a428:	1c01      	adds	r1, r0, #0
    a42a:	9801      	ldr	r0, [sp, #4]
    a42c:	1c22      	adds	r2, r4, #0
    a42e:	4b0b      	ldr	r3, [pc, #44]	; (a45c <tcp_socket_connect+0x5c>)
    a430:	4798      	blx	r3
    a432:	6320      	str	r0, [r4, #48]	; 0x30
  PROCESS_CONTEXT_END();
    a434:	603d      	str	r5, [r7, #0]
  if(s->c == NULL) {
    return -1;
  } else {
    return 1;
    a436:	4243      	negs	r3, r0
    a438:	4158      	adcs	r0, r3
    a43a:	4240      	negs	r0, r0
    a43c:	2301      	movs	r3, #1
    a43e:	4318      	orrs	r0, r3
    a440:	e001      	b.n	a446 <tcp_socket_connect+0x46>
tcp_socket_connect(struct tcp_socket *s,
                   const uip_ipaddr_t *ipaddr,
                   uint16_t port)
{
  if(s == NULL) {
    return -1;
    a442:	2001      	movs	r0, #1
    a444:	4240      	negs	r0, r0
  if(s->c == NULL) {
    return -1;
  } else {
    return 1;
  }
}
    a446:	b003      	add	sp, #12
    a448:	bdf0      	pop	{r4, r5, r6, r7, pc}
    a44a:	46c0      	nop			; (mov r8, r8)
    a44c:	0000a5d1 	.word	0x0000a5d1
    a450:	20001d2c 	.word	0x20001d2c
    a454:	200000b0 	.word	0x200000b0
    a458:	00009fd1 	.word	0x00009fd1
    a45c:	0000aa51 	.word	0x0000aa51

0000a460 <tcp_socket_unlisten>:
  return 1;
}
/*---------------------------------------------------------------------------*/
int
tcp_socket_unlisten(struct tcp_socket *s)
{
    a460:	b570      	push	{r4, r5, r6, lr}
  if(s == NULL) {
    a462:	2800      	cmp	r0, #0
    a464:	d013      	beq.n	a48e <tcp_socket_unlisten+0x2e>
    a466:	1c04      	adds	r4, r0, #0
    return -1;
  }

  PROCESS_CONTEXT_BEGIN(&tcp_socket_process);
    a468:	4d0a      	ldr	r5, [pc, #40]	; (a494 <tcp_socket_unlisten+0x34>)
    a46a:	682e      	ldr	r6, [r5, #0]
    a46c:	4b0a      	ldr	r3, [pc, #40]	; (a498 <tcp_socket_unlisten+0x38>)
    a46e:	602b      	str	r3, [r5, #0]
  tcp_unlisten(uip_htons(s->listen_port));
    a470:	8d80      	ldrh	r0, [r0, #44]	; 0x2c
    a472:	4b0a      	ldr	r3, [pc, #40]	; (a49c <tcp_socket_unlisten+0x3c>)
    a474:	4798      	blx	r3
    a476:	4b0a      	ldr	r3, [pc, #40]	; (a4a0 <tcp_socket_unlisten+0x40>)
    a478:	4798      	blx	r3
  PROCESS_CONTEXT_END();
    a47a:	602e      	str	r6, [r5, #0]
  s->listen_port = 0;
    a47c:	2300      	movs	r3, #0
    a47e:	85a3      	strh	r3, [r4, #44]	; 0x2c
  s->flags &= ~TCP_SOCKET_FLAGS_LISTENING;
    a480:	222a      	movs	r2, #42	; 0x2a
    a482:	5ca3      	ldrb	r3, [r4, r2]
    a484:	2101      	movs	r1, #1
    a486:	438b      	bics	r3, r1
    a488:	54a3      	strb	r3, [r4, r2]
  return 1;
    a48a:	2001      	movs	r0, #1
    a48c:	e001      	b.n	a492 <tcp_socket_unlisten+0x32>
/*---------------------------------------------------------------------------*/
int
tcp_socket_unlisten(struct tcp_socket *s)
{
  if(s == NULL) {
    return -1;
    a48e:	2001      	movs	r0, #1
    a490:	4240      	negs	r0, r0
  tcp_unlisten(uip_htons(s->listen_port));
  PROCESS_CONTEXT_END();
  s->listen_port = 0;
  s->flags &= ~TCP_SOCKET_FLAGS_LISTENING;
  return 1;
}
    a492:	bd70      	pop	{r4, r5, r6, pc}
    a494:	20001d2c 	.word	0x20001d2c
    a498:	200000b0 	.word	0x200000b0
    a49c:	00009fd1 	.word	0x00009fd1
    a4a0:	0000a57d 	.word	0x0000a57d

0000a4a4 <tcp_socket_send>:
/*---------------------------------------------------------------------------*/
int
tcp_socket_send(struct tcp_socket *s,
                const uint8_t *data, int datalen)
{
    a4a4:	b538      	push	{r3, r4, r5, lr}
  int len;

  if(s == NULL) {
    a4a6:	2800      	cmp	r0, #0
    a4a8:	d016      	beq.n	a4d8 <tcp_socket_send+0x34>
    return -1;
  }

  len = MIN(datalen, s->output_data_maxlen - s->output_data_len);
    a4aa:	8c43      	ldrh	r3, [r0, #34]	; 0x22
    a4ac:	8c04      	ldrh	r4, [r0, #32]
    a4ae:	1ae4      	subs	r4, r4, r3
    a4b0:	1e15      	subs	r5, r2, #0
    a4b2:	42a5      	cmp	r5, r4
    a4b4:	dd00      	ble.n	a4b8 <tcp_socket_send+0x14>
    a4b6:	1c25      	adds	r5, r4, #0
    a4b8:	1c04      	adds	r4, r0, #0

  memcpy(&s->output_data_ptr[s->output_data_len], data, len);
    a4ba:	6982      	ldr	r2, [r0, #24]
    a4bc:	18d0      	adds	r0, r2, r3
    a4be:	1c2a      	adds	r2, r5, #0
    a4c0:	4b07      	ldr	r3, [pc, #28]	; (a4e0 <tcp_socket_send+0x3c>)
    a4c2:	4798      	blx	r3
  s->output_data_len += len;
    a4c4:	8c63      	ldrh	r3, [r4, #34]	; 0x22
    a4c6:	18eb      	adds	r3, r5, r3
    a4c8:	b29b      	uxth	r3, r3
    a4ca:	8463      	strh	r3, [r4, #34]	; 0x22

  if(s->output_senddata_len == 0) {
    a4cc:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
    s->output_senddata_len = s->output_data_len;
  }

  return len;
    a4ce:	1c28      	adds	r0, r5, #0
  len = MIN(datalen, s->output_data_maxlen - s->output_data_len);

  memcpy(&s->output_data_ptr[s->output_data_len], data, len);
  s->output_data_len += len;

  if(s->output_senddata_len == 0) {
    a4d0:	2a00      	cmp	r2, #0
    a4d2:	d103      	bne.n	a4dc <tcp_socket_send+0x38>
    s->output_senddata_len = s->output_data_len;
    a4d4:	84e3      	strh	r3, [r4, #38]	; 0x26
    a4d6:	e001      	b.n	a4dc <tcp_socket_send+0x38>
                const uint8_t *data, int datalen)
{
  int len;

  if(s == NULL) {
    return -1;
    a4d8:	2001      	movs	r0, #1
    a4da:	4240      	negs	r0, r0
  if(s->output_senddata_len == 0) {
    s->output_senddata_len = s->output_data_len;
  }

  return len;
}
    a4dc:	bd38      	pop	{r3, r4, r5, pc}
    a4de:	46c0      	nop			; (mov r8, r8)
    a4e0:	00010b2f 	.word	0x00010b2f

0000a4e4 <tcp_socket_close>:
}
/*---------------------------------------------------------------------------*/
int
tcp_socket_close(struct tcp_socket *s)
{
  if(s == NULL) {
    a4e4:	2800      	cmp	r0, #0
    a4e6:	d006      	beq.n	a4f6 <tcp_socket_close+0x12>
    return -1;
  }

  s->flags |= TCP_SOCKET_FLAGS_CLOSING;
    a4e8:	222a      	movs	r2, #42	; 0x2a
    a4ea:	5c81      	ldrb	r1, [r0, r2]
    a4ec:	2302      	movs	r3, #2
    a4ee:	430b      	orrs	r3, r1
    a4f0:	5483      	strb	r3, [r0, r2]
  return 1;
    a4f2:	2001      	movs	r0, #1
    a4f4:	e001      	b.n	a4fa <tcp_socket_close+0x16>
/*---------------------------------------------------------------------------*/
int
tcp_socket_close(struct tcp_socket *s)
{
  if(s == NULL) {
    return -1;
    a4f6:	2001      	movs	r0, #1
    a4f8:	4240      	negs	r0, r0
  }

  s->flags |= TCP_SOCKET_FLAGS_CLOSING;
  return 1;
}
    a4fa:	4770      	bx	lr

0000a4fc <tcp_socket_unregister>:
/*---------------------------------------------------------------------------*/
int
tcp_socket_unregister(struct tcp_socket *s)
{
    a4fc:	b510      	push	{r4, lr}
  if(s == NULL) {
    a4fe:	2800      	cmp	r0, #0
    a500:	d00e      	beq.n	a520 <tcp_socket_unregister+0x24>
    a502:	1c04      	adds	r4, r0, #0
    return -1;
  }

  tcp_socket_unlisten(s);
    a504:	4b08      	ldr	r3, [pc, #32]	; (a528 <tcp_socket_unregister+0x2c>)
    a506:	4798      	blx	r3
  if(s->c != NULL) {
    a508:	6b20      	ldr	r0, [r4, #48]	; 0x30
    a50a:	2800      	cmp	r0, #0
    a50c:	d002      	beq.n	a514 <tcp_socket_unregister+0x18>
    tcp_attach(s->c, NULL);
    a50e:	2100      	movs	r1, #0
    a510:	4b06      	ldr	r3, [pc, #24]	; (a52c <tcp_socket_unregister+0x30>)
    a512:	4798      	blx	r3
  }
  list_remove(socketlist, s);
    a514:	4806      	ldr	r0, [pc, #24]	; (a530 <tcp_socket_unregister+0x34>)
    a516:	1c21      	adds	r1, r4, #0
    a518:	4b06      	ldr	r3, [pc, #24]	; (a534 <tcp_socket_unregister+0x38>)
    a51a:	4798      	blx	r3
  return 1;
    a51c:	2001      	movs	r0, #1
    a51e:	e001      	b.n	a524 <tcp_socket_unregister+0x28>
/*---------------------------------------------------------------------------*/
int
tcp_socket_unregister(struct tcp_socket *s)
{
  if(s == NULL) {
    return -1;
    a520:	2001      	movs	r0, #1
    a522:	4240      	negs	r0, r0
  if(s->c != NULL) {
    tcp_attach(s->c, NULL);
  }
  list_remove(socketlist, s);
  return 1;
}
    a524:	bd10      	pop	{r4, pc}
    a526:	46c0      	nop			; (mov r8, r8)
    a528:	0000a461 	.word	0x0000a461
    a52c:	0000a5d1 	.word	0x0000a5d1
    a530:	20000b20 	.word	0x20000b20
    a534:	00005735 	.word	0x00005735

0000a538 <start_periodic_tcp_timer>:
PROCESS(tcpip_process, "TCP/IP stack");

/*---------------------------------------------------------------------------*/
static void
start_periodic_tcp_timer(void)
{
    a538:	b508      	push	{r3, lr}
  if(etimer_expired(&periodic)) {
    a53a:	4804      	ldr	r0, [pc, #16]	; (a54c <start_periodic_tcp_timer+0x14>)
    a53c:	4b04      	ldr	r3, [pc, #16]	; (a550 <start_periodic_tcp_timer+0x18>)
    a53e:	4798      	blx	r3
    a540:	2800      	cmp	r0, #0
    a542:	d002      	beq.n	a54a <start_periodic_tcp_timer+0x12>
    etimer_restart(&periodic);
    a544:	4801      	ldr	r0, [pc, #4]	; (a54c <start_periodic_tcp_timer+0x14>)
    a546:	4b03      	ldr	r3, [pc, #12]	; (a554 <start_periodic_tcp_timer+0x1c>)
    a548:	4798      	blx	r3
  }
}
    a54a:	bd08      	pop	{r3, pc}
    a54c:	20000bd0 	.word	0x20000bd0
    a550:	0000e965 	.word	0x0000e965
    a554:	0000e94d 	.word	0x0000e94d

0000a558 <tcpip_output>:

static uint8_t (* outputfunc)(const uip_lladdr_t *a);

uint8_t
tcpip_output(const uip_lladdr_t *a)
{
    a558:	b508      	push	{r3, lr}
  int ret;
  if(outputfunc != NULL) {
    a55a:	4b04      	ldr	r3, [pc, #16]	; (a56c <tcpip_output+0x14>)
    a55c:	681b      	ldr	r3, [r3, #0]
    a55e:	2b00      	cmp	r3, #0
    a560:	d001      	beq.n	a566 <tcpip_output+0xe>
    ret = outputfunc(a);
    a562:	4798      	blx	r3
    return ret;
    a564:	e000      	b.n	a568 <tcpip_output+0x10>
  }
  UIP_LOG("tcpip_output: Use tcpip_set_outputfunc() to set an output function");
  return 0;
    a566:	2000      	movs	r0, #0
}
    a568:	bd08      	pop	{r3, pc}
    a56a:	46c0      	nop			; (mov r8, r8)
    a56c:	20000be0 	.word	0x20000be0

0000a570 <tcpip_set_outputfunc>:

void
tcpip_set_outputfunc(uint8_t (*f)(const uip_lladdr_t *))
{
  outputfunc = f;
    a570:	4b01      	ldr	r3, [pc, #4]	; (a578 <tcpip_set_outputfunc+0x8>)
    a572:	6018      	str	r0, [r3, #0]
}
    a574:	4770      	bx	lr
    a576:	46c0      	nop			; (mov r8, r8)
    a578:	20000be0 	.word	0x20000be0

0000a57c <tcp_unlisten>:
}
#endif /* UIP_ACTIVE_OPEN */
/*---------------------------------------------------------------------------*/
void
tcp_unlisten(uint16_t port)
{
    a57c:	b538      	push	{r3, r4, r5, lr}
  static unsigned char i;
  struct listenport *l;

  l = s.listenports;
  for(i = 0; i < UIP_LISTENPORTS; ++i) {
    a57e:	2200      	movs	r2, #0
    a580:	4b0f      	ldr	r3, [pc, #60]	; (a5c0 <tcp_unlisten+0x44>)
    a582:	701a      	strb	r2, [r3, #0]
    if(l->port == port &&
       l->p == PROCESS_CURRENT()) {
    a584:	4b0f      	ldr	r3, [pc, #60]	; (a5c4 <tcp_unlisten+0x48>)
    a586:	681d      	ldr	r5, [r3, #0]
    a588:	2101      	movs	r1, #1
    a58a:	2400      	movs	r4, #0
    a58c:	4a0e      	ldr	r2, [pc, #56]	; (a5c8 <tcp_unlisten+0x4c>)
    a58e:	e000      	b.n	a592 <tcp_unlisten+0x16>
    a590:	1c19      	adds	r1, r3, #0
  static unsigned char i;
  struct listenport *l;

  l = s.listenports;
  for(i = 0; i < UIP_LISTENPORTS; ++i) {
    if(l->port == port &&
    a592:	8813      	ldrh	r3, [r2, #0]
    a594:	4283      	cmp	r3, r0
    a596:	d109      	bne.n	a5ac <tcp_unlisten+0x30>
    a598:	6853      	ldr	r3, [r2, #4]
    a59a:	42ab      	cmp	r3, r5
    a59c:	d106      	bne.n	a5ac <tcp_unlisten+0x30>
    a59e:	4b08      	ldr	r3, [pc, #32]	; (a5c0 <tcp_unlisten+0x44>)
    a5a0:	701c      	strb	r4, [r3, #0]
       l->p == PROCESS_CURRENT()) {
      l->port = 0;
    a5a2:	2300      	movs	r3, #0
    a5a4:	8013      	strh	r3, [r2, #0]
      uip_unlisten(port);
    a5a6:	4b09      	ldr	r3, [pc, #36]	; (a5cc <tcp_unlisten+0x50>)
    a5a8:	4798      	blx	r3
      break;
    a5aa:	e007      	b.n	a5bc <tcp_unlisten+0x40>
    }
    ++l;
    a5ac:	3208      	adds	r2, #8
    a5ae:	1c4b      	adds	r3, r1, #1
    a5b0:	b2db      	uxtb	r3, r3
{
  static unsigned char i;
  struct listenport *l;

  l = s.listenports;
  for(i = 0; i < UIP_LISTENPORTS; ++i) {
    a5b2:	1c0c      	adds	r4, r1, #0
    a5b4:	2b15      	cmp	r3, #21
    a5b6:	d1eb      	bne.n	a590 <tcp_unlisten+0x14>
    a5b8:	4b01      	ldr	r3, [pc, #4]	; (a5c0 <tcp_unlisten+0x44>)
    a5ba:	7019      	strb	r1, [r3, #0]
      uip_unlisten(port);
      break;
    }
    ++l;
  }
}
    a5bc:	bd38      	pop	{r3, r4, r5, pc}
    a5be:	46c0      	nop			; (mov r8, r8)
    a5c0:	20000bcd 	.word	0x20000bcd
    a5c4:	20001d2c 	.word	0x20001d2c
    a5c8:	20000b28 	.word	0x20000b28
    a5cc:	00008e11 	.word	0x00008e11

0000a5d0 <tcp_attach>:
	   void *appstate)
{
  uip_tcp_appstate_t *s;

  s = &conn->appstate;
  s->p = PROCESS_CURRENT();
    a5d0:	4b02      	ldr	r3, [pc, #8]	; (a5dc <tcp_attach+0xc>)
    a5d2:	681b      	ldr	r3, [r3, #0]
    a5d4:	6283      	str	r3, [r0, #40]	; 0x28
  s->state = appstate;
    a5d6:	62c1      	str	r1, [r0, #44]	; 0x2c
}
    a5d8:	4770      	bx	lr
    a5da:	46c0      	nop			; (mov r8, r8)
    a5dc:	20001d2c 	.word	0x20001d2c

0000a5e0 <tcpip_icmp6_call>:
  return 1;
}

void
tcpip_icmp6_call(uint8_t type)
{
    a5e0:	b500      	push	{lr}
    a5e2:	b083      	sub	sp, #12
    a5e4:	466b      	mov	r3, sp
    a5e6:	71d8      	strb	r0, [r3, #7]
  if(uip_icmp6_conns.appstate.p != PROCESS_NONE) {
    a5e8:	4b05      	ldr	r3, [pc, #20]	; (a600 <tcpip_icmp6_call+0x20>)
    a5ea:	6818      	ldr	r0, [r3, #0]
    a5ec:	2800      	cmp	r0, #0
    a5ee:	d005      	beq.n	a5fc <tcpip_icmp6_call+0x1c>
    /* XXX: This is a hack that needs to be updated. Passing a pointer (&type)
       like this only works with process_post_synch. */
    process_post_synch(uip_icmp6_conns.appstate.p, tcpip_icmp6_event, &type);
    a5f0:	4b04      	ldr	r3, [pc, #16]	; (a604 <tcpip_icmp6_call+0x24>)
    a5f2:	7819      	ldrb	r1, [r3, #0]
    a5f4:	466b      	mov	r3, sp
    a5f6:	1dda      	adds	r2, r3, #7
    a5f8:	4b03      	ldr	r3, [pc, #12]	; (a608 <tcpip_icmp6_call+0x28>)
    a5fa:	4798      	blx	r3
  }
  return;
}
    a5fc:	b003      	add	sp, #12
    a5fe:	bd00      	pop	{pc}
    a600:	20003058 	.word	0x20003058
    a604:	200031cd 	.word	0x200031cd
    a608:	0000ec61 	.word	0x0000ec61

0000a60c <tcpip_input>:
  };
}
/*---------------------------------------------------------------------------*/
void
tcpip_input(void)
{
    a60c:	b508      	push	{r3, lr}
  process_post_synch(&tcpip_process, PACKET_INPUT, NULL);
    a60e:	4805      	ldr	r0, [pc, #20]	; (a624 <tcpip_input+0x18>)
    a610:	2102      	movs	r1, #2
    a612:	2200      	movs	r2, #0
    a614:	4b04      	ldr	r3, [pc, #16]	; (a628 <tcpip_input+0x1c>)
    a616:	4798      	blx	r3
  uip_len = 0;
    a618:	2200      	movs	r2, #0
    a61a:	4b04      	ldr	r3, [pc, #16]	; (a62c <tcpip_input+0x20>)
    a61c:	801a      	strh	r2, [r3, #0]
#if UIP_CONF_IPV6
  uip_ext_len = 0;
    a61e:	4b04      	ldr	r3, [pc, #16]	; (a630 <tcpip_input+0x24>)
    a620:	701a      	strb	r2, [r3, #0]
#endif /*UIP_CONF_IPV6*/
}
    a622:	bd08      	pop	{r3, pc}
    a624:	200000c0 	.word	0x200000c0
    a628:	0000ec61 	.word	0x0000ec61
    a62c:	20002cc0 	.word	0x20002cc0
    a630:	20000b12 	.word	0x20000b12

0000a634 <tcpip_ipv6_output>:
/*---------------------------------------------------------------------------*/
#if UIP_CONF_IPV6
void
tcpip_ipv6_output(void)
{
    a634:	b538      	push	{r3, r4, r5, lr}
  uip_ds6_nbr_t *nbr = NULL;
  uip_ipaddr_t *nexthop;

  if(uip_len == 0) {
    a636:	4b5c      	ldr	r3, [pc, #368]	; (a7a8 <tcpip_ipv6_output+0x174>)
    a638:	881b      	ldrh	r3, [r3, #0]
    a63a:	2b00      	cmp	r3, #0
    a63c:	d100      	bne.n	a640 <tcpip_ipv6_output+0xc>
    a63e:	e0b1      	b.n	a7a4 <tcpip_ipv6_output+0x170>
    return;
  }

  if(uip_len > UIP_LINK_MTU) {
    a640:	22a0      	movs	r2, #160	; 0xa0
    a642:	00d2      	lsls	r2, r2, #3
    a644:	4293      	cmp	r3, r2
    a646:	d903      	bls.n	a650 <tcpip_ipv6_output+0x1c>
    UIP_LOG("tcpip_ipv6_output: Packet to big");
    uip_len = 0;
    a648:	2200      	movs	r2, #0
    a64a:	4b57      	ldr	r3, [pc, #348]	; (a7a8 <tcpip_ipv6_output+0x174>)
    a64c:	801a      	strh	r2, [r3, #0]
    return;
    a64e:	e0a9      	b.n	a7a4 <tcpip_ipv6_output+0x170>
  }

  if(uip_is_addr_unspecified(&UIP_IP_BUF->destipaddr)){
    a650:	4b56      	ldr	r3, [pc, #344]	; (a7ac <tcpip_ipv6_output+0x178>)
    a652:	8b1b      	ldrh	r3, [r3, #24]
    a654:	2b00      	cmp	r3, #0
    a656:	d11f      	bne.n	a698 <tcpip_ipv6_output+0x64>
    a658:	4b54      	ldr	r3, [pc, #336]	; (a7ac <tcpip_ipv6_output+0x178>)
    a65a:	8b5b      	ldrh	r3, [r3, #26]
    a65c:	2b00      	cmp	r3, #0
    a65e:	d11b      	bne.n	a698 <tcpip_ipv6_output+0x64>
    a660:	4b52      	ldr	r3, [pc, #328]	; (a7ac <tcpip_ipv6_output+0x178>)
    a662:	8b9b      	ldrh	r3, [r3, #28]
    a664:	2b00      	cmp	r3, #0
    a666:	d117      	bne.n	a698 <tcpip_ipv6_output+0x64>
    a668:	4b50      	ldr	r3, [pc, #320]	; (a7ac <tcpip_ipv6_output+0x178>)
    a66a:	8bdb      	ldrh	r3, [r3, #30]
    a66c:	2b00      	cmp	r3, #0
    a66e:	d113      	bne.n	a698 <tcpip_ipv6_output+0x64>
    a670:	4b4e      	ldr	r3, [pc, #312]	; (a7ac <tcpip_ipv6_output+0x178>)
    a672:	8c1b      	ldrh	r3, [r3, #32]
    a674:	2b00      	cmp	r3, #0
    a676:	d10f      	bne.n	a698 <tcpip_ipv6_output+0x64>
    a678:	4b4c      	ldr	r3, [pc, #304]	; (a7ac <tcpip_ipv6_output+0x178>)
    a67a:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
    a67c:	2b00      	cmp	r3, #0
    a67e:	d10b      	bne.n	a698 <tcpip_ipv6_output+0x64>
    a680:	4b4a      	ldr	r3, [pc, #296]	; (a7ac <tcpip_ipv6_output+0x178>)
    a682:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
    a684:	2b00      	cmp	r3, #0
    a686:	d107      	bne.n	a698 <tcpip_ipv6_output+0x64>
    a688:	4b48      	ldr	r3, [pc, #288]	; (a7ac <tcpip_ipv6_output+0x178>)
    a68a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
    a68c:	2b00      	cmp	r3, #0
    a68e:	d103      	bne.n	a698 <tcpip_ipv6_output+0x64>
    UIP_LOG("tcpip_ipv6_output: Destination address unspecified");
    uip_len = 0;
    a690:	2200      	movs	r2, #0
    a692:	4b45      	ldr	r3, [pc, #276]	; (a7a8 <tcpip_ipv6_output+0x174>)
    a694:	801a      	strh	r2, [r3, #0]
    return;
    a696:	e085      	b.n	a7a4 <tcpip_ipv6_output+0x170>
  }

  if(!uip_is_addr_mcast(&UIP_IP_BUF->destipaddr)) {
    a698:	4b44      	ldr	r3, [pc, #272]	; (a7ac <tcpip_ipv6_output+0x178>)
    a69a:	7e1b      	ldrb	r3, [r3, #24]
    a69c:	2bff      	cmp	r3, #255	; 0xff
    a69e:	d079      	beq.n	a794 <tcpip_ipv6_output+0x160>
    nbr = NULL;

    /* We first check if the destination address is on our immediate
       link. If so, we simply use the destination address as our
       nexthop address. */
    if(uip_ds6_is_addr_onlink(&UIP_IP_BUF->destipaddr)){
    a6a0:	4843      	ldr	r0, [pc, #268]	; (a7b0 <tcpip_ipv6_output+0x17c>)
    a6a2:	4b44      	ldr	r3, [pc, #272]	; (a7b4 <tcpip_ipv6_output+0x180>)
    a6a4:	4798      	blx	r3
    a6a6:	2800      	cmp	r0, #0
    a6a8:	d11c      	bne.n	a6e4 <tcpip_ipv6_output+0xb0>
      nexthop = &UIP_IP_BUF->destipaddr;
    } else {
      uip_ds6_route_t *route;
      /* Check if we have a route to the destination address. */
      route = uip_ds6_route_lookup(&UIP_IP_BUF->destipaddr);
    a6aa:	4841      	ldr	r0, [pc, #260]	; (a7b0 <tcpip_ipv6_output+0x17c>)
    a6ac:	4b42      	ldr	r3, [pc, #264]	; (a7b8 <tcpip_ipv6_output+0x184>)
    a6ae:	4798      	blx	r3
    a6b0:	1e05      	subs	r5, r0, #0

      /* No route was found - we send to the default route instead. */
      if(route == NULL) {
    a6b2:	d107      	bne.n	a6c4 <tcpip_ipv6_output+0x90>
        PRINTF("tcpip_ipv6_output: no route found, using default route\n\r");
        nexthop = uip_ds6_defrt_choose();
    a6b4:	4b41      	ldr	r3, [pc, #260]	; (a7bc <tcpip_ipv6_output+0x188>)
    a6b6:	4798      	blx	r3
    a6b8:	1e04      	subs	r4, r0, #0
        if(nexthop == NULL) {
    a6ba:	d114      	bne.n	a6e6 <tcpip_ipv6_output+0xb2>
	  }
	  UIP_FALLBACK_INTERFACE.output();
#else
          PRINTF("tcpip_ipv6_output: Destination off-link but no route\n\r");
#endif /* !UIP_FALLBACK_INTERFACE */
          uip_len = 0;
    a6bc:	2200      	movs	r2, #0
    a6be:	4b3a      	ldr	r3, [pc, #232]	; (a7a8 <tcpip_ipv6_output+0x174>)
    a6c0:	801a      	strh	r2, [r3, #0]
          return;
    a6c2:	e06f      	b.n	a7a4 <tcpip_ipv6_output+0x170>
        }

      } else {
        /* A route was found, so we look up the nexthop neighbor for
           the route. */
        nexthop = uip_ds6_route_nexthop(route);
    a6c4:	4b3e      	ldr	r3, [pc, #248]	; (a7c0 <tcpip_ipv6_output+0x18c>)
    a6c6:	4798      	blx	r3
    a6c8:	1e04      	subs	r4, r0, #0

        /* If the nexthop is dead, for example because the neighbor
           never responded to link-layer acks, we drop its route. */
        if(nexthop == NULL) {
    a6ca:	d10c      	bne.n	a6e6 <tcpip_ipv6_output+0xb2>
             network, we'll trigger a global repair berfore we remove
             the route. */
          rpl_dag_t *dag;
          rpl_instance_t *instance;

          dag = (rpl_dag_t *)route->state.dag;
    a6cc:	69eb      	ldr	r3, [r5, #28]
          if(dag != NULL) {
    a6ce:	2b00      	cmp	r3, #0
    a6d0:	d004      	beq.n	a6dc <tcpip_ipv6_output+0xa8>
            instance = dag->instance;

            rpl_repair_root(instance->instance_id);
    a6d2:	6a1a      	ldr	r2, [r3, #32]
    a6d4:	238c      	movs	r3, #140	; 0x8c
    a6d6:	5cd0      	ldrb	r0, [r2, r3]
    a6d8:	4b3a      	ldr	r3, [pc, #232]	; (a7c4 <tcpip_ipv6_output+0x190>)
    a6da:	4798      	blx	r3
          }
#endif /* UIP_CONF_RPL */
          uip_ds6_route_rm(route);
    a6dc:	1c28      	adds	r0, r5, #0
    a6de:	4b3a      	ldr	r3, [pc, #232]	; (a7c8 <tcpip_ipv6_output+0x194>)
    a6e0:	4798      	blx	r3

          /* We don't have a nexthop to send the packet to, so we drop
             it. */
          return;
    a6e2:	e05f      	b.n	a7a4 <tcpip_ipv6_output+0x170>

    /* We first check if the destination address is on our immediate
       link. If so, we simply use the destination address as our
       nexthop address. */
    if(uip_ds6_is_addr_onlink(&UIP_IP_BUF->destipaddr)){
      nexthop = &UIP_IP_BUF->destipaddr;
    a6e4:	4c32      	ldr	r4, [pc, #200]	; (a7b0 <tcpip_ipv6_output+0x17c>)
    }

    /* End of next hop determination */

#if UIP_CONF_IPV6_RPL
    if(rpl_update_header_final(nexthop)) {
    a6e6:	1c20      	adds	r0, r4, #0
    a6e8:	4b38      	ldr	r3, [pc, #224]	; (a7cc <tcpip_ipv6_output+0x198>)
    a6ea:	4798      	blx	r3
    a6ec:	2800      	cmp	r0, #0
    a6ee:	d003      	beq.n	a6f8 <tcpip_ipv6_output+0xc4>
      uip_len = 0;
    a6f0:	2200      	movs	r2, #0
    a6f2:	4b2d      	ldr	r3, [pc, #180]	; (a7a8 <tcpip_ipv6_output+0x174>)
    a6f4:	801a      	strh	r2, [r3, #0]
      return;
    a6f6:	e055      	b.n	a7a4 <tcpip_ipv6_output+0x170>
    }
#endif /* UIP_CONF_IPV6_RPL */
    nbr = uip_ds6_nbr_lookup(nexthop);
    a6f8:	1c20      	adds	r0, r4, #0
    a6fa:	4b35      	ldr	r3, [pc, #212]	; (a7d0 <tcpip_ipv6_output+0x19c>)
    a6fc:	4798      	blx	r3
    a6fe:	1e05      	subs	r5, r0, #0
    if(nbr == NULL) {
    a700:	d12b      	bne.n	a75a <tcpip_ipv6_output+0x126>
#if UIP_ND6_SEND_NA
      if((nbr = uip_ds6_nbr_add(nexthop, NULL, 0, NBR_INCOMPLETE)) == NULL) {
    a702:	1c20      	adds	r0, r4, #0
    a704:	2100      	movs	r1, #0
    a706:	2200      	movs	r2, #0
    a708:	2300      	movs	r3, #0
    a70a:	4c32      	ldr	r4, [pc, #200]	; (a7d4 <tcpip_ipv6_output+0x1a0>)
    a70c:	47a0      	blx	r4
    a70e:	1e04      	subs	r4, r0, #0
    a710:	d103      	bne.n	a71a <tcpip_ipv6_output+0xe6>
        uip_len = 0;
    a712:	2200      	movs	r2, #0
    a714:	4b24      	ldr	r3, [pc, #144]	; (a7a8 <tcpip_ipv6_output+0x174>)
    a716:	801a      	strh	r2, [r3, #0]
        return;
    a718:	e044      	b.n	a7a4 <tcpip_ipv6_output+0x170>
       * "If the source address of the packet prompting the solicitation is the
       * same as one of the addresses assigned to the outgoing interface, that
       * address SHOULD be placed in the IP Source Address of the outgoing
       * solicitation.  Otherwise, any one of the addresses assigned to the
       * interface should be used."*/
       if(uip_ds6_is_my_addr(&UIP_IP_BUF->srcipaddr)){
    a71a:	482f      	ldr	r0, [pc, #188]	; (a7d8 <tcpip_ipv6_output+0x1a4>)
    a71c:	4b2f      	ldr	r3, [pc, #188]	; (a7dc <tcpip_ipv6_output+0x1a8>)
    a71e:	4798      	blx	r3
    a720:	2800      	cmp	r0, #0
    a722:	d005      	beq.n	a730 <tcpip_ipv6_output+0xfc>
          uip_nd6_ns_output(&UIP_IP_BUF->srcipaddr, NULL, &nbr->ipaddr);
    a724:	482c      	ldr	r0, [pc, #176]	; (a7d8 <tcpip_ipv6_output+0x1a4>)
    a726:	2100      	movs	r1, #0
    a728:	1c22      	adds	r2, r4, #0
    a72a:	4b2d      	ldr	r3, [pc, #180]	; (a7e0 <tcpip_ipv6_output+0x1ac>)
    a72c:	4798      	blx	r3
    a72e:	e004      	b.n	a73a <tcpip_ipv6_output+0x106>
        } else {
          uip_nd6_ns_output(NULL, NULL, &nbr->ipaddr);
    a730:	2000      	movs	r0, #0
    a732:	1c01      	adds	r1, r0, #0
    a734:	1c22      	adds	r2, r4, #0
    a736:	4b2a      	ldr	r3, [pc, #168]	; (a7e0 <tcpip_ipv6_output+0x1ac>)
    a738:	4798      	blx	r3
        }

        stimer_set(&nbr->sendns, uip_ds6_if.retrans_timer / 1000);
    a73a:	1c25      	adds	r5, r4, #0
    a73c:	3518      	adds	r5, #24
    a73e:	4b29      	ldr	r3, [pc, #164]	; (a7e4 <tcpip_ipv6_output+0x1b0>)
    a740:	6918      	ldr	r0, [r3, #16]
    a742:	21fa      	movs	r1, #250	; 0xfa
    a744:	0089      	lsls	r1, r1, #2
    a746:	4b28      	ldr	r3, [pc, #160]	; (a7e8 <tcpip_ipv6_output+0x1b4>)
    a748:	4798      	blx	r3
    a74a:	1c01      	adds	r1, r0, #0
    a74c:	1c28      	adds	r0, r5, #0
    a74e:	4b27      	ldr	r3, [pc, #156]	; (a7ec <tcpip_ipv6_output+0x1b8>)
    a750:	4798      	blx	r3
        nbr->nscount = 1;
    a752:	2201      	movs	r2, #1
    a754:	2320      	movs	r3, #32
    a756:	54e2      	strb	r2, [r4, r3]
#endif /*UIP_CONF_IPV6_QUEUE_PKT*/

      uip_len = 0;
      return;
    }
    return;
    a758:	e024      	b.n	a7a4 <tcpip_ipv6_output+0x170>
        nbr->nscount = 1;
      }
#endif /* UIP_ND6_SEND_NA */
    } else {
#if UIP_ND6_SEND_NA
      if(nbr->state == NBR_INCOMPLETE) {
    a75a:	2322      	movs	r3, #34	; 0x22
    a75c:	5cc3      	ldrb	r3, [r0, r3]
    a75e:	2b00      	cmp	r3, #0
    a760:	d103      	bne.n	a76a <tcpip_ipv6_output+0x136>
        if(uip_packetqueue_alloc(&nbr->packethandle, UIP_DS6_NBR_PACKET_LIFETIME) != NULL) {
          memcpy(uip_packetqueue_buf(&nbr->packethandle), UIP_IP_BUF, uip_len);
          uip_packetqueue_set_buflen(&nbr->packethandle, uip_len);
        }
#endif /*UIP_CONF_IPV6_QUEUE_PKT*/
        uip_len = 0;
    a762:	2200      	movs	r2, #0
    a764:	4b10      	ldr	r3, [pc, #64]	; (a7a8 <tcpip_ipv6_output+0x174>)
    a766:	801a      	strh	r2, [r3, #0]
        return;
    a768:	e01c      	b.n	a7a4 <tcpip_ipv6_output+0x170>
      }
      /* Send in parallel if we are running NUD (nbc state is either STALE,
         DELAY, or PROBE). See RFC 4861, section 7.3.3 on node behavior. */
      if(nbr->state == NBR_STALE) {
    a76a:	2b02      	cmp	r3, #2
    a76c:	d109      	bne.n	a782 <tcpip_ipv6_output+0x14e>
        nbr->state = NBR_DELAY;
    a76e:	2203      	movs	r2, #3
    a770:	3320      	adds	r3, #32
    a772:	54c2      	strb	r2, [r0, r3]
        stimer_set(&nbr->reachable, UIP_ND6_DELAY_FIRST_PROBE_TIME);
    a774:	3010      	adds	r0, #16
    a776:	2105      	movs	r1, #5
    a778:	4b1c      	ldr	r3, [pc, #112]	; (a7ec <tcpip_ipv6_output+0x1b8>)
    a77a:	4798      	blx	r3
        nbr->nscount = 0;
    a77c:	2200      	movs	r2, #0
    a77e:	2320      	movs	r3, #32
    a780:	54ea      	strb	r2, [r5, r3]
        PRINTF("tcpip_ipv6_output: nbr cache entry stale moving to delay\n\r");
      }
#endif /* UIP_ND6_SEND_NA */

      tcpip_output(uip_ds6_nbr_get_ll(nbr));
    a782:	1c28      	adds	r0, r5, #0
    a784:	4b1a      	ldr	r3, [pc, #104]	; (a7f0 <tcpip_ipv6_output+0x1bc>)
    a786:	4798      	blx	r3
    a788:	4b1a      	ldr	r3, [pc, #104]	; (a7f4 <tcpip_ipv6_output+0x1c0>)
    a78a:	4798      	blx	r3
        uip_packetqueue_free(&nbr->packethandle);
        tcpip_output(uip_ds6_nbr_get_ll(nbr));
      }
#endif /*UIP_CONF_IPV6_QUEUE_PKT*/

      uip_len = 0;
    a78c:	2200      	movs	r2, #0
    a78e:	4b06      	ldr	r3, [pc, #24]	; (a7a8 <tcpip_ipv6_output+0x174>)
    a790:	801a      	strh	r2, [r3, #0]
      return;
    a792:	e007      	b.n	a7a4 <tcpip_ipv6_output+0x170>
    }
    return;
  }
  /* Multicast IP destination address. */
  tcpip_output(NULL);
    a794:	2000      	movs	r0, #0
    a796:	4b17      	ldr	r3, [pc, #92]	; (a7f4 <tcpip_ipv6_output+0x1c0>)
    a798:	4798      	blx	r3
  uip_len = 0;
    a79a:	2200      	movs	r2, #0
    a79c:	4b02      	ldr	r3, [pc, #8]	; (a7a8 <tcpip_ipv6_output+0x174>)
    a79e:	801a      	strh	r2, [r3, #0]
  uip_ext_len = 0;
    a7a0:	4b15      	ldr	r3, [pc, #84]	; (a7f8 <tcpip_ipv6_output+0x1c4>)
    a7a2:	701a      	strb	r2, [r3, #0]
}
    a7a4:	bd38      	pop	{r3, r4, r5, pc}
    a7a6:	46c0      	nop			; (mov r8, r8)
    a7a8:	20002cc0 	.word	0x20002cc0
    a7ac:	20002cd4 	.word	0x20002cd4
    a7b0:	20002cec 	.word	0x20002cec
    a7b4:	00007401 	.word	0x00007401
    a7b8:	00006e79 	.word	0x00006e79
    a7bc:	0000725d 	.word	0x0000725d
    a7c0:	00006e2d 	.word	0x00006e2d
    a7c4:	0000c9e9 	.word	0x0000c9e9
    a7c8:	00006efd 	.word	0x00006efd
    a7cc:	0000d365 	.word	0x0000d365
    a7d0:	00006b65 	.word	0x00006b65
    a7d4:	00006af1 	.word	0x00006af1
    a7d8:	20002cdc 	.word	0x20002cdc
    a7dc:	00007449 	.word	0x00007449
    a7e0:	000086d1 	.word	0x000086d1
    a7e4:	20002b68 	.word	0x20002b68
    a7e8:	0001076d 	.word	0x0001076d
    a7ec:	0000ed0d 	.word	0x0000ed0d
    a7f0:	00006b4d 	.word	0x00006b4d
    a7f4:	0000a559 	.word	0x0000a559
    a7f8:	20000b12 	.word	0x20000b12

0000a7fc <process_thread_tcpip_process>:
    process_post_synch(ts->p, tcpip_event, ts->state);
  }
}
/*---------------------------------------------------------------------------*/
PROCESS_THREAD(tcpip_process, ev, data)
{
    a7fc:	b5f0      	push	{r4, r5, r6, r7, lr}
    a7fe:	4647      	mov	r7, r8
    a800:	b480      	push	{r7}
    a802:	1c04      	adds	r4, r0, #0
    a804:	1c15      	adds	r5, r2, #0
  PROCESS_BEGIN();
    a806:	8803      	ldrh	r3, [r0, #0]
    a808:	2b00      	cmp	r3, #0
    a80a:	d004      	beq.n	a816 <process_thread_tcpip_process+0x1a>
    a80c:	22cf      	movs	r2, #207	; 0xcf
    a80e:	0092      	lsls	r2, r2, #2
    a810:	4293      	cmp	r3, r2
    a812:	d024      	beq.n	a85e <process_thread_tcpip_process+0x62>
    a814:	e0d3      	b.n	a9be <process_thread_tcpip_process+0x1c2>
    a816:	4b6d      	ldr	r3, [pc, #436]	; (a9cc <process_thread_tcpip_process+0x1d0>)
    a818:	1c19      	adds	r1, r3, #0
    a81a:	31a0      	adds	r1, #160	; 0xa0
#if UIP_TCP
 {
   static unsigned char i;
   
   for(i = 0; i < UIP_LISTENPORTS; ++i) {
     s.listenports[i].port = 0;
    a81c:	2200      	movs	r2, #0
    a81e:	801a      	strh	r2, [r3, #0]
    a820:	3308      	adds	r3, #8
  
#if UIP_TCP
 {
   static unsigned char i;
   
   for(i = 0; i < UIP_LISTENPORTS; ++i) {
    a822:	428b      	cmp	r3, r1
    a824:	d1fb      	bne.n	a81e <process_thread_tcpip_process+0x22>
    a826:	2214      	movs	r2, #20
    a828:	4b69      	ldr	r3, [pc, #420]	; (a9d0 <process_thread_tcpip_process+0x1d4>)
    a82a:	701a      	strb	r2, [r3, #0]
     s.listenports[i].port = 0;
   }
   s.p = PROCESS_CURRENT();
    a82c:	4b69      	ldr	r3, [pc, #420]	; (a9d4 <process_thread_tcpip_process+0x1d8>)
    a82e:	6819      	ldr	r1, [r3, #0]
    a830:	23a0      	movs	r3, #160	; 0xa0
    a832:	4a66      	ldr	r2, [pc, #408]	; (a9cc <process_thread_tcpip_process+0x1d0>)
    a834:	50d1      	str	r1, [r2, r3]
 }
#endif

  tcpip_event = process_alloc_event();
    a836:	4d68      	ldr	r5, [pc, #416]	; (a9d8 <process_thread_tcpip_process+0x1dc>)
    a838:	47a8      	blx	r5
    a83a:	4b68      	ldr	r3, [pc, #416]	; (a9dc <process_thread_tcpip_process+0x1e0>)
    a83c:	7018      	strb	r0, [r3, #0]
#if UIP_CONF_ICMP6
  tcpip_icmp6_event = process_alloc_event();
    a83e:	47a8      	blx	r5
    a840:	4b67      	ldr	r3, [pc, #412]	; (a9e0 <process_thread_tcpip_process+0x1e4>)
    a842:	7018      	strb	r0, [r3, #0]
#endif /* UIP_CONF_ICMP6 */
  etimer_set(&periodic, CLOCK_SECOND / 2);
    a844:	4867      	ldr	r0, [pc, #412]	; (a9e4 <process_thread_tcpip_process+0x1e8>)
    a846:	2140      	movs	r1, #64	; 0x40
    a848:	4b67      	ldr	r3, [pc, #412]	; (a9e8 <process_thread_tcpip_process+0x1ec>)
    a84a:	4798      	blx	r3

  uip_init();
    a84c:	4b67      	ldr	r3, [pc, #412]	; (a9ec <process_thread_tcpip_process+0x1f0>)
    a84e:	4798      	blx	r3
#ifdef UIP_FALLBACK_INTERFACE
  UIP_FALLBACK_INTERFACE.init();
#endif
/* initialize RPL if configured for using RPL */
#if UIP_CONF_IPV6 && UIP_CONF_IPV6_RPL
  rpl_init();
    a850:	4b67      	ldr	r3, [pc, #412]	; (a9f0 <process_thread_tcpip_process+0x1f4>)
    a852:	4798      	blx	r3
#endif /* UIP_CONF_IPV6_RPL */

  while(1) {
    PROCESS_YIELD();
    a854:	23cf      	movs	r3, #207	; 0xcf
    a856:	009b      	lsls	r3, r3, #2
    a858:	8023      	strh	r3, [r4, #0]
    a85a:	2001      	movs	r0, #1
    a85c:	e0b2      	b.n	a9c4 <process_thread_tcpip_process+0x1c8>
  static unsigned char i;
  register struct listenport *l;
#endif /*UIP_TCP*/
  struct process *p;

  switch(ev) {
    a85e:	2902      	cmp	r1, #2
    a860:	d100      	bne.n	a864 <process_thread_tcpip_process+0x68>
    a862:	e091      	b.n	a988 <process_thread_tcpip_process+0x18c>
    a864:	d805      	bhi.n	a872 <process_thread_tcpip_process+0x76>
    a866:	2900      	cmp	r1, #0
    a868:	d076      	beq.n	a958 <process_thread_tcpip_process+0x15c>
    a86a:	2901      	cmp	r1, #1
    a86c:	d100      	bne.n	a870 <process_thread_tcpip_process+0x74>
    a86e:	e080      	b.n	a972 <process_thread_tcpip_process+0x176>
    a870:	e7f0      	b.n	a854 <process_thread_tcpip_process+0x58>
    a872:	2987      	cmp	r1, #135	; 0x87
    a874:	d002      	beq.n	a87c <process_thread_tcpip_process+0x80>
    a876:	2988      	cmp	r1, #136	; 0x88
    a878:	d031      	beq.n	a8de <process_thread_tcpip_process+0xe2>
    a87a:	e7eb      	b.n	a854 <process_thread_tcpip_process+0x58>
         connections. */

      p = (struct process *)data;
#if UIP_TCP
      l = s.listenports;
      for(i = 0; i < UIP_LISTENPORTS; ++i) {
    a87c:	2200      	movs	r2, #0
    a87e:	4b5d      	ldr	r3, [pc, #372]	; (a9f4 <process_thread_tcpip_process+0x1f8>)
    a880:	701a      	strb	r2, [r3, #0]
    a882:	4e52      	ldr	r6, [pc, #328]	; (a9cc <process_thread_tcpip_process+0x1d0>)
        if(l->p == p) {
          uip_unlisten(l->port);
          l->port = 0;
    a884:	2300      	movs	r3, #0
    a886:	4698      	mov	r8, r3
         connections. */

      p = (struct process *)data;
#if UIP_TCP
      l = s.listenports;
      for(i = 0; i < UIP_LISTENPORTS; ++i) {
    a888:	4f5a      	ldr	r7, [pc, #360]	; (a9f4 <process_thread_tcpip_process+0x1f8>)
        if(l->p == p) {
    a88a:	6873      	ldr	r3, [r6, #4]
    a88c:	429d      	cmp	r5, r3
    a88e:	d106      	bne.n	a89e <process_thread_tcpip_process+0xa2>
          uip_unlisten(l->port);
    a890:	8830      	ldrh	r0, [r6, #0]
    a892:	4b59      	ldr	r3, [pc, #356]	; (a9f8 <process_thread_tcpip_process+0x1fc>)
    a894:	4798      	blx	r3
          l->port = 0;
    a896:	4643      	mov	r3, r8
    a898:	8033      	strh	r3, [r6, #0]
          l->p = PROCESS_NONE;
    a89a:	4643      	mov	r3, r8
    a89c:	6073      	str	r3, [r6, #4]
        }
        ++l;
    a89e:	3608      	adds	r6, #8
         connections. */

      p = (struct process *)data;
#if UIP_TCP
      l = s.listenports;
      for(i = 0; i < UIP_LISTENPORTS; ++i) {
    a8a0:	783b      	ldrb	r3, [r7, #0]
    a8a2:	3301      	adds	r3, #1
    a8a4:	b2db      	uxtb	r3, r3
    a8a6:	703b      	strb	r3, [r7, #0]
    a8a8:	2b13      	cmp	r3, #19
    a8aa:	d9ee      	bls.n	a88a <process_thread_tcpip_process+0x8e>
    a8ac:	4b53      	ldr	r3, [pc, #332]	; (a9fc <process_thread_tcpip_process+0x200>)
    a8ae:	1c19      	adds	r1, r3, #0
    a8b0:	3181      	adds	r1, #129	; 0x81
    a8b2:	31ff      	adds	r1, #255	; 0xff
      {
        struct uip_conn *cptr;
	    
        for(cptr = &uip_conns[0]; cptr < &uip_conns[UIP_CONNS]; ++cptr) {
          if(cptr->appstate.p == p) {
            cptr->appstate.p = PROCESS_NONE;
    a8b4:	2000      	movs	r0, #0
    a8b6:	1cda      	adds	r2, r3, #3
	 
      {
        struct uip_conn *cptr;
	    
        for(cptr = &uip_conns[0]; cptr < &uip_conns[UIP_CONNS]; ++cptr) {
          if(cptr->appstate.p == p) {
    a8b8:	6816      	ldr	r6, [r2, #0]
    a8ba:	42b5      	cmp	r5, r6
    a8bc:	d101      	bne.n	a8c2 <process_thread_tcpip_process+0xc6>
            cptr->appstate.p = PROCESS_NONE;
    a8be:	6010      	str	r0, [r2, #0]
            cptr->tcpstateflags = UIP_CLOSED;
    a8c0:	7018      	strb	r0, [r3, #0]
    a8c2:	3330      	adds	r3, #48	; 0x30
      }
	 
      {
        struct uip_conn *cptr;
	    
        for(cptr = &uip_conns[0]; cptr < &uip_conns[UIP_CONNS]; ++cptr) {
    a8c4:	428b      	cmp	r3, r1
    a8c6:	d1f6      	bne.n	a8b6 <process_thread_tcpip_process+0xba>
    a8c8:	4b4d      	ldr	r3, [pc, #308]	; (aa00 <process_thread_tcpip_process+0x204>)
        struct uip_udp_conn *cptr;

        for(cptr = &uip_udp_conns[0];
            cptr < &uip_udp_conns[UIP_UDP_CONNS]; ++cptr) {
          if(cptr->appstate.p == p) {
            cptr->lport = 0;
    a8ca:	2100      	movs	r1, #0
#endif /* UIP_TCP */
#if UIP_UDP
      {
        struct uip_udp_conn *cptr;

        for(cptr = &uip_udp_conns[0];
    a8cc:	4a4d      	ldr	r2, [pc, #308]	; (aa04 <process_thread_tcpip_process+0x208>)
            cptr < &uip_udp_conns[UIP_UDP_CONNS]; ++cptr) {
          if(cptr->appstate.p == p) {
    a8ce:	6998      	ldr	r0, [r3, #24]
    a8d0:	4285      	cmp	r5, r0
    a8d2:	d100      	bne.n	a8d6 <process_thread_tcpip_process+0xda>
            cptr->lport = 0;
    a8d4:	8219      	strh	r1, [r3, #16]
#if UIP_UDP
      {
        struct uip_udp_conn *cptr;

        for(cptr = &uip_udp_conns[0];
            cptr < &uip_udp_conns[UIP_UDP_CONNS]; ++cptr) {
    a8d6:	3320      	adds	r3, #32
#endif /* UIP_TCP */
#if UIP_UDP
      {
        struct uip_udp_conn *cptr;

        for(cptr = &uip_udp_conns[0];
    a8d8:	4293      	cmp	r3, r2
    a8da:	d1f8      	bne.n	a8ce <process_thread_tcpip_process+0xd2>
    a8dc:	e7ba      	b.n	a854 <process_thread_tcpip_process+0x58>
      }
#endif /* UIP_UDP */
      break;

    case PROCESS_EVENT_TIMER:
      uip_len = 0;
    a8de:	2200      	movs	r2, #0
    a8e0:	4b49      	ldr	r3, [pc, #292]	; (aa08 <process_thread_tcpip_process+0x20c>)
    a8e2:	801a      	strh	r2, [r3, #0]
      /* We get this event if one of our timers have expired. */
      {
        /* Check the clock so see if we should call the periodic uIP
           processing. */
        if(data == &periodic &&
    a8e4:	4b3f      	ldr	r3, [pc, #252]	; (a9e4 <process_thread_tcpip_process+0x1e8>)
    a8e6:	429d      	cmp	r5, r3
    a8e8:	d129      	bne.n	a93e <process_thread_tcpip_process+0x142>
           etimer_expired(&periodic)) {
    a8ea:	1c18      	adds	r0, r3, #0
    a8ec:	4b47      	ldr	r3, [pc, #284]	; (aa0c <process_thread_tcpip_process+0x210>)
    a8ee:	4798      	blx	r3
      uip_len = 0;
      /* We get this event if one of our timers have expired. */
      {
        /* Check the clock so see if we should call the periodic uIP
           processing. */
        if(data == &periodic &&
    a8f0:	2800      	cmp	r0, #0
    a8f2:	d024      	beq.n	a93e <process_thread_tcpip_process+0x142>
           etimer_expired(&periodic)) {
#if UIP_TCP
          for(i = 0; i < UIP_CONNS; ++i) {
    a8f4:	2200      	movs	r2, #0
    a8f6:	4b3f      	ldr	r3, [pc, #252]	; (a9f4 <process_thread_tcpip_process+0x1f8>)
    a8f8:	701a      	strb	r2, [r3, #0]
    a8fa:	2300      	movs	r3, #0
            if(uip_conn_active(i)) {
    a8fc:	4e44      	ldr	r6, [pc, #272]	; (aa10 <process_thread_tcpip_process+0x214>)
    a8fe:	005a      	lsls	r2, r3, #1
    a900:	18d3      	adds	r3, r2, r3
    a902:	011b      	lsls	r3, r3, #4
    a904:	18f3      	adds	r3, r6, r3
    a906:	3320      	adds	r3, #32
    a908:	795b      	ldrb	r3, [r3, #5]
    a90a:	2b00      	cmp	r3, #0
    a90c:	d010      	beq.n	a930 <process_thread_tcpip_process+0x134>
              /* Only restart the timer if there are active
                 connections. */
              etimer_restart(&periodic);
    a90e:	4835      	ldr	r0, [pc, #212]	; (a9e4 <process_thread_tcpip_process+0x1e8>)
    a910:	4b40      	ldr	r3, [pc, #256]	; (aa14 <process_thread_tcpip_process+0x218>)
    a912:	4798      	blx	r3
              uip_periodic(i);
    a914:	4b37      	ldr	r3, [pc, #220]	; (a9f4 <process_thread_tcpip_process+0x1f8>)
    a916:	781b      	ldrb	r3, [r3, #0]
    a918:	005a      	lsls	r2, r3, #1
    a91a:	18d3      	adds	r3, r2, r3
    a91c:	011b      	lsls	r3, r3, #4
    a91e:	4a3c      	ldr	r2, [pc, #240]	; (aa10 <process_thread_tcpip_process+0x214>)
    a920:	189b      	adds	r3, r3, r2
    a922:	4a3d      	ldr	r2, [pc, #244]	; (aa18 <process_thread_tcpip_process+0x21c>)
    a924:	6013      	str	r3, [r2, #0]
    a926:	2002      	movs	r0, #2
    a928:	4b3c      	ldr	r3, [pc, #240]	; (aa1c <process_thread_tcpip_process+0x220>)
    a92a:	4798      	blx	r3
#if UIP_CONF_IPV6
              tcpip_ipv6_output();
    a92c:	4b3c      	ldr	r3, [pc, #240]	; (aa20 <process_thread_tcpip_process+0x224>)
    a92e:	4798      	blx	r3
        /* Check the clock so see if we should call the periodic uIP
           processing. */
        if(data == &periodic &&
           etimer_expired(&periodic)) {
#if UIP_TCP
          for(i = 0; i < UIP_CONNS; ++i) {
    a930:	4a30      	ldr	r2, [pc, #192]	; (a9f4 <process_thread_tcpip_process+0x1f8>)
    a932:	7813      	ldrb	r3, [r2, #0]
    a934:	3301      	adds	r3, #1
    a936:	b2db      	uxtb	r3, r3
    a938:	7013      	strb	r3, [r2, #0]
    a93a:	2b07      	cmp	r3, #7
    a93c:	d9df      	bls.n	a8fe <process_thread_tcpip_process+0x102>
           etimer_expired(&uip_ds6_timer_rs)) {
          uip_ds6_send_rs();
          tcpip_ipv6_output();
        }
#endif /* !UIP_CONF_ROUTER */
        if(data == &uip_ds6_timer_periodic &&
    a93e:	4b39      	ldr	r3, [pc, #228]	; (aa24 <process_thread_tcpip_process+0x228>)
    a940:	429d      	cmp	r5, r3
    a942:	d187      	bne.n	a854 <process_thread_tcpip_process+0x58>
           etimer_expired(&uip_ds6_timer_periodic)) {
    a944:	1c18      	adds	r0, r3, #0
    a946:	4b31      	ldr	r3, [pc, #196]	; (aa0c <process_thread_tcpip_process+0x210>)
    a948:	4798      	blx	r3
           etimer_expired(&uip_ds6_timer_rs)) {
          uip_ds6_send_rs();
          tcpip_ipv6_output();
        }
#endif /* !UIP_CONF_ROUTER */
        if(data == &uip_ds6_timer_periodic &&
    a94a:	2800      	cmp	r0, #0
    a94c:	d082      	beq.n	a854 <process_thread_tcpip_process+0x58>
           etimer_expired(&uip_ds6_timer_periodic)) {
          uip_ds6_periodic();
    a94e:	4b36      	ldr	r3, [pc, #216]	; (aa28 <process_thread_tcpip_process+0x22c>)
    a950:	4798      	blx	r3
          tcpip_ipv6_output();
    a952:	4b33      	ldr	r3, [pc, #204]	; (aa20 <process_thread_tcpip_process+0x224>)
    a954:	4798      	blx	r3
    a956:	e77d      	b.n	a854 <process_thread_tcpip_process+0x58>
      }
      break;
	 
#if UIP_TCP
    case TCP_POLL:
      if(data != NULL) {
    a958:	2d00      	cmp	r5, #0
    a95a:	d100      	bne.n	a95e <process_thread_tcpip_process+0x162>
    a95c:	e77a      	b.n	a854 <process_thread_tcpip_process+0x58>
        uip_poll_conn(data);
    a95e:	4b2e      	ldr	r3, [pc, #184]	; (aa18 <process_thread_tcpip_process+0x21c>)
    a960:	601d      	str	r5, [r3, #0]
    a962:	2003      	movs	r0, #3
    a964:	4b2d      	ldr	r3, [pc, #180]	; (aa1c <process_thread_tcpip_process+0x220>)
    a966:	4798      	blx	r3
#if UIP_CONF_IPV6
        tcpip_ipv6_output();
    a968:	4b2d      	ldr	r3, [pc, #180]	; (aa20 <process_thread_tcpip_process+0x224>)
    a96a:	4798      	blx	r3
	  PRINTF("tcpip_output from tcp poll len %d\n\r", uip_len);
          tcpip_output();
        }
#endif /* UIP_CONF_IPV6 */
        /* Start the periodic polling, if it isn't already active. */
        start_periodic_tcp_timer();
    a96c:	4b2f      	ldr	r3, [pc, #188]	; (aa2c <process_thread_tcpip_process+0x230>)
    a96e:	4798      	blx	r3
    a970:	e770      	b.n	a854 <process_thread_tcpip_process+0x58>
      }
      break;
#endif /* UIP_TCP */
#if UIP_UDP
    case UDP_POLL:
      if(data != NULL) {
    a972:	2d00      	cmp	r5, #0
    a974:	d100      	bne.n	a978 <process_thread_tcpip_process+0x17c>
    a976:	e76d      	b.n	a854 <process_thread_tcpip_process+0x58>
        uip_udp_periodic_conn(data);
    a978:	4b2d      	ldr	r3, [pc, #180]	; (aa30 <process_thread_tcpip_process+0x234>)
    a97a:	601d      	str	r5, [r3, #0]
    a97c:	2005      	movs	r0, #5
    a97e:	4b27      	ldr	r3, [pc, #156]	; (aa1c <process_thread_tcpip_process+0x220>)
    a980:	4798      	blx	r3
#if UIP_CONF_IPV6
        tcpip_ipv6_output();
    a982:	4b27      	ldr	r3, [pc, #156]	; (aa20 <process_thread_tcpip_process+0x224>)
    a984:	4798      	blx	r3
    a986:	e765      	b.n	a854 <process_thread_tcpip_process+0x58>
      }
    }
    tcpip_is_forwarding = 0;
  }
#else /* UIP_CONF_IP_FORWARD */
  if(uip_len > 0) {
    a988:	4b1f      	ldr	r3, [pc, #124]	; (aa08 <process_thread_tcpip_process+0x20c>)
    a98a:	881b      	ldrh	r3, [r3, #0]
    a98c:	2b00      	cmp	r3, #0
    a98e:	d100      	bne.n	a992 <process_thread_tcpip_process+0x196>
    a990:	e760      	b.n	a854 <process_thread_tcpip_process+0x58>
     an incoming packet contains a SYN: since uIP does not inform the
     application if a SYN arrives, we have no other way of starting
     this timer.  This function is called for every incoming IP packet
     to check for such SYNs. */
#define TCP_SYN 0x02
  if(UIP_IP_BUF->proto == UIP_PROTO_TCP &&
    a992:	4b28      	ldr	r3, [pc, #160]	; (aa34 <process_thread_tcpip_process+0x238>)
    a994:	799b      	ldrb	r3, [r3, #6]
    a996:	2b06      	cmp	r3, #6
    a998:	d106      	bne.n	a9a8 <process_thread_tcpip_process+0x1ac>
     (UIP_TCP_BUF->flags & TCP_SYN) == TCP_SYN) {
    a99a:	332f      	adds	r3, #47	; 0x2f
    a99c:	4a25      	ldr	r2, [pc, #148]	; (aa34 <process_thread_tcpip_process+0x238>)
    a99e:	5cd3      	ldrb	r3, [r2, r3]
     an incoming packet contains a SYN: since uIP does not inform the
     application if a SYN arrives, we have no other way of starting
     this timer.  This function is called for every incoming IP packet
     to check for such SYNs. */
#define TCP_SYN 0x02
  if(UIP_IP_BUF->proto == UIP_PROTO_TCP &&
    a9a0:	079b      	lsls	r3, r3, #30
    a9a2:	d501      	bpl.n	a9a8 <process_thread_tcpip_process+0x1ac>
     (UIP_TCP_BUF->flags & TCP_SYN) == TCP_SYN) {
    start_periodic_tcp_timer();
    a9a4:	4b21      	ldr	r3, [pc, #132]	; (aa2c <process_thread_tcpip_process+0x230>)
    a9a6:	4798      	blx	r3
    tcpip_is_forwarding = 0;
  }
#else /* UIP_CONF_IP_FORWARD */
  if(uip_len > 0) {
    check_for_tcp_syn();
    uip_input();
    a9a8:	2001      	movs	r0, #1
    a9aa:	4b1c      	ldr	r3, [pc, #112]	; (aa1c <process_thread_tcpip_process+0x220>)
    a9ac:	4798      	blx	r3
    if(uip_len > 0) {
    a9ae:	4b16      	ldr	r3, [pc, #88]	; (aa08 <process_thread_tcpip_process+0x20c>)
    a9b0:	881b      	ldrh	r3, [r3, #0]
    a9b2:	2b00      	cmp	r3, #0
    a9b4:	d100      	bne.n	a9b8 <process_thread_tcpip_process+0x1bc>
    a9b6:	e74d      	b.n	a854 <process_thread_tcpip_process+0x58>
#if UIP_CONF_TCP_SPLIT
      uip_split_output();
#else /* UIP_CONF_TCP_SPLIT */
#if UIP_CONF_IPV6
      tcpip_ipv6_output();
    a9b8:	4b19      	ldr	r3, [pc, #100]	; (aa20 <process_thread_tcpip_process+0x224>)
    a9ba:	4798      	blx	r3
    a9bc:	e74a      	b.n	a854 <process_thread_tcpip_process+0x58>
  while(1) {
    PROCESS_YIELD();
    eventhandler(ev, data);
  }
  
  PROCESS_END();
    a9be:	2300      	movs	r3, #0
    a9c0:	8003      	strh	r3, [r0, #0]
    a9c2:	2003      	movs	r0, #3
}
    a9c4:	bc04      	pop	{r2}
    a9c6:	4690      	mov	r8, r2
    a9c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    a9ca:	46c0      	nop			; (mov r8, r8)
    a9cc:	20000b28 	.word	0x20000b28
    a9d0:	20000bcc 	.word	0x20000bcc
    a9d4:	20001d2c 	.word	0x20001d2c
    a9d8:	0000eafd 	.word	0x0000eafd
    a9dc:	200031cc 	.word	0x200031cc
    a9e0:	200031cd 	.word	0x200031cd
    a9e4:	20000bd0 	.word	0x20000bd0
    a9e8:	0000e91d 	.word	0x0000e91d
    a9ec:	00008c11 	.word	0x00008c11
    a9f0:	0000e4d9 	.word	0x0000e4d9
    a9f4:	20000bce 	.word	0x20000bce
    a9f8:	00008e11 	.word	0x00008e11
    a9fc:	20002e9d 	.word	0x20002e9d
    aa00:	2000308c 	.word	0x2000308c
    aa04:	200031cc 	.word	0x200031cc
    aa08:	20002cc0 	.word	0x20002cc0
    aa0c:	0000e965 	.word	0x0000e965
    aa10:	20002e78 	.word	0x20002e78
    aa14:	0000e94d 	.word	0x0000e94d
    aa18:	20002e74 	.word	0x20002e74
    aa1c:	00008e69 	.word	0x00008e69
    aa20:	0000a635 	.word	0x0000a635
    aa24:	20002cb0 	.word	0x20002cb0
    aa28:	000078a5 	.word	0x000078a5
    aa2c:	0000a539 	.word	0x0000a539
    aa30:	20002e6c 	.word	0x20002e6c
    aa34:	20002cd4 	.word	0x20002cd4

0000aa38 <tcpip_poll_tcp>:
#endif /* UIP_UDP */
/*---------------------------------------------------------------------------*/
#if UIP_TCP
void
tcpip_poll_tcp(struct uip_conn *conn)
{
    aa38:	b508      	push	{r3, lr}
    aa3a:	1c02      	adds	r2, r0, #0
  process_post(&tcpip_process, TCP_POLL, conn);
    aa3c:	4802      	ldr	r0, [pc, #8]	; (aa48 <tcpip_poll_tcp+0x10>)
    aa3e:	2100      	movs	r1, #0
    aa40:	4b02      	ldr	r3, [pc, #8]	; (aa4c <tcpip_poll_tcp+0x14>)
    aa42:	4798      	blx	r3
}
    aa44:	bd08      	pop	{r3, pc}
    aa46:	46c0      	nop			; (mov r8, r8)
    aa48:	200000c0 	.word	0x200000c0
    aa4c:	0000ec09 	.word	0x0000ec09

0000aa50 <tcp_connect>:
/*---------------------------------------------------------------------------*/
#if UIP_TCP
#if UIP_ACTIVE_OPEN
struct uip_conn *
tcp_connect(uip_ipaddr_t *ripaddr, uint16_t port, void *appstate)
{
    aa50:	b538      	push	{r3, r4, r5, lr}
    aa52:	1c15      	adds	r5, r2, #0
  struct uip_conn *c;
  
  c = uip_connect(ripaddr, port);
    aa54:	4b05      	ldr	r3, [pc, #20]	; (aa6c <tcp_connect+0x1c>)
    aa56:	4798      	blx	r3
    aa58:	1e04      	subs	r4, r0, #0
  if(c == NULL) {
    aa5a:	d005      	beq.n	aa68 <tcp_connect+0x18>
    return NULL;
  }

  c->appstate.p = PROCESS_CURRENT();
    aa5c:	4b04      	ldr	r3, [pc, #16]	; (aa70 <tcp_connect+0x20>)
    aa5e:	681b      	ldr	r3, [r3, #0]
    aa60:	6283      	str	r3, [r0, #40]	; 0x28
  c->appstate.state = appstate;
    aa62:	62c5      	str	r5, [r0, #44]	; 0x2c
  
  tcpip_poll_tcp(c);
    aa64:	4b03      	ldr	r3, [pc, #12]	; (aa74 <tcp_connect+0x24>)
    aa66:	4798      	blx	r3
  
  return c;
}
    aa68:	1c20      	adds	r0, r4, #0
    aa6a:	bd38      	pop	{r3, r4, r5, pc}
    aa6c:	00008c85 	.word	0x00008c85
    aa70:	20001d2c 	.word	0x20001d2c
    aa74:	0000aa39 	.word	0x0000aa39

0000aa78 <tcpip_uipcall>:
}
#endif /* UIP_TCP */
/*---------------------------------------------------------------------------*/
void
tcpip_uipcall(void)
{
    aa78:	b538      	push	{r3, r4, r5, lr}
  uip_udp_appstate_t *ts;
  
#if UIP_UDP
  if(uip_conn != NULL) {
    aa7a:	4b1b      	ldr	r3, [pc, #108]	; (aae8 <tcpip_uipcall+0x70>)
    aa7c:	681b      	ldr	r3, [r3, #0]
    aa7e:	2b00      	cmp	r3, #0
    aa80:	d002      	beq.n	aa88 <tcpip_uipcall+0x10>
    ts = &uip_conn->appstate;
    aa82:	1c1d      	adds	r5, r3, #0
    aa84:	3528      	adds	r5, #40	; 0x28
    aa86:	e002      	b.n	aa8e <tcpip_uipcall+0x16>
  } else {
    ts = &uip_udp_conn->appstate;
    aa88:	4a18      	ldr	r2, [pc, #96]	; (aaec <tcpip_uipcall+0x74>)
    aa8a:	6815      	ldr	r5, [r2, #0]
    aa8c:	3518      	adds	r5, #24
   static unsigned char i;
   struct listenport *l;
   
   /* If this is a connection request for a listening port, we must
      mark the connection with the right process ID. */
   if(uip_connected()) {
    aa8e:	4a18      	ldr	r2, [pc, #96]	; (aaf0 <tcpip_uipcall+0x78>)
    aa90:	7812      	ldrb	r2, [r2, #0]
    aa92:	0652      	lsls	r2, r2, #25
    aa94:	d51e      	bpl.n	aad4 <tcpip_uipcall+0x5c>
     l = &s.listenports[0];
     for(i = 0; i < UIP_LISTENPORTS; ++i) {
    aa96:	2100      	movs	r1, #0
    aa98:	4a16      	ldr	r2, [pc, #88]	; (aaf4 <tcpip_uipcall+0x7c>)
    aa9a:	7011      	strb	r1, [r2, #0]
       if(l->port == uip_conn->lport &&
    aa9c:	8a1c      	ldrh	r4, [r3, #16]
    aa9e:	3101      	adds	r1, #1
    aaa0:	2000      	movs	r0, #0
    aaa2:	4a15      	ldr	r2, [pc, #84]	; (aaf8 <tcpip_uipcall+0x80>)
    aaa4:	e000      	b.n	aaa8 <tcpip_uipcall+0x30>
    aaa6:	1c19      	adds	r1, r3, #0
    aaa8:	8813      	ldrh	r3, [r2, #0]
    aaaa:	42a3      	cmp	r3, r4
    aaac:	d108      	bne.n	aac0 <tcpip_uipcall+0x48>
	  l->p != PROCESS_NONE) {
    aaae:	6853      	ldr	r3, [r2, #4]
   /* If this is a connection request for a listening port, we must
      mark the connection with the right process ID. */
   if(uip_connected()) {
     l = &s.listenports[0];
     for(i = 0; i < UIP_LISTENPORTS; ++i) {
       if(l->port == uip_conn->lport &&
    aab0:	2b00      	cmp	r3, #0
    aab2:	d005      	beq.n	aac0 <tcpip_uipcall+0x48>
    aab4:	4a0f      	ldr	r2, [pc, #60]	; (aaf4 <tcpip_uipcall+0x7c>)
    aab6:	7010      	strb	r0, [r2, #0]
	  l->p != PROCESS_NONE) {
	 ts->p = l->p;
    aab8:	602b      	str	r3, [r5, #0]
	 ts->state = NULL;
    aaba:	2300      	movs	r3, #0
    aabc:	606b      	str	r3, [r5, #4]
	 break;
    aabe:	e007      	b.n	aad0 <tcpip_uipcall+0x58>
       }
       ++l;
    aac0:	3208      	adds	r2, #8
    aac2:	1c4b      	adds	r3, r1, #1
    aac4:	b2db      	uxtb	r3, r3
   
   /* If this is a connection request for a listening port, we must
      mark the connection with the right process ID. */
   if(uip_connected()) {
     l = &s.listenports[0];
     for(i = 0; i < UIP_LISTENPORTS; ++i) {
    aac6:	1c08      	adds	r0, r1, #0
    aac8:	2b15      	cmp	r3, #21
    aaca:	d1ec      	bne.n	aaa6 <tcpip_uipcall+0x2e>
    aacc:	4b09      	ldr	r3, [pc, #36]	; (aaf4 <tcpip_uipcall+0x7c>)
    aace:	7019      	strb	r1, [r3, #0]
       }
       ++l;
     }
     
     /* Start the periodic polling, if it isn't already active. */
     start_periodic_tcp_timer();
    aad0:	4b0a      	ldr	r3, [pc, #40]	; (aafc <tcpip_uipcall+0x84>)
    aad2:	4798      	blx	r3
   }
 }
#endif /* UIP_TCP */
  
  if(ts->p != NULL) {
    aad4:	6828      	ldr	r0, [r5, #0]
    aad6:	2800      	cmp	r0, #0
    aad8:	d004      	beq.n	aae4 <tcpip_uipcall+0x6c>
    process_post_synch(ts->p, tcpip_event, ts->state);
    aada:	4b09      	ldr	r3, [pc, #36]	; (ab00 <tcpip_uipcall+0x88>)
    aadc:	7819      	ldrb	r1, [r3, #0]
    aade:	686a      	ldr	r2, [r5, #4]
    aae0:	4b08      	ldr	r3, [pc, #32]	; (ab04 <tcpip_uipcall+0x8c>)
    aae2:	4798      	blx	r3
  }
}
    aae4:	bd38      	pop	{r3, r4, r5, pc}
    aae6:	46c0      	nop			; (mov r8, r8)
    aae8:	20002e74 	.word	0x20002e74
    aaec:	20002e6c 	.word	0x20002e6c
    aaf0:	20002e64 	.word	0x20002e64
    aaf4:	20000b24 	.word	0x20000b24
    aaf8:	20000b28 	.word	0x20000b28
    aafc:	0000a539 	.word	0x0000a539
    ab00:	200031cc 	.word	0x200031cc
    ab04:	0000ec61 	.word	0x0000ec61

0000ab08 <uip_debug_ipaddr_print>:
#include "net/ip/uip-debug.h"

/*---------------------------------------------------------------------------*/
void
uip_debug_ipaddr_print(const uip_ipaddr_t *addr)
{
    ab08:	b5f0      	push	{r4, r5, r6, r7, lr}
    ab0a:	4647      	mov	r7, r8
    ab0c:	b480      	push	{r7}
  if(addr == NULL || addr->u8 == NULL) {
    ab0e:	2800      	cmp	r0, #0
    ab10:	d000      	beq.n	ab14 <uip_debug_ipaddr_print+0xc>
    ab12:	d103      	bne.n	ab1c <uip_debug_ipaddr_print+0x14>
    printf("(NULL IP addr)");
    ab14:	4817      	ldr	r0, [pc, #92]	; (ab74 <uip_debug_ipaddr_print+0x6c>)
    ab16:	4b18      	ldr	r3, [pc, #96]	; (ab78 <uip_debug_ipaddr_print+0x70>)
    ab18:	4798      	blx	r3
    return;
    ab1a:	e028      	b.n	ab6e <uip_debug_ipaddr_print+0x66>
    ab1c:	1c05      	adds	r5, r0, #0

/*---------------------------------------------------------------------------*/
void
uip_debug_ipaddr_print(const uip_ipaddr_t *addr)
{
  if(addr == NULL || addr->u8 == NULL) {
    ab1e:	2700      	movs	r7, #0
    ab20:	2600      	movs	r6, #0
      if(f > 0) {
        f = -1;
      } else if(i > 0) {
        PRINTA(":");
      }
      PRINTA("%x", a);
    ab22:	4b15      	ldr	r3, [pc, #84]	; (ab78 <uip_debug_ipaddr_print+0x70>)
    ab24:	4698      	mov	r8, r3
#if UIP_CONF_IPV6
  uint16_t a;
  unsigned int i;
  int f;
  for(i = 0, f = 0; i < sizeof(uip_ipaddr_t); i += 2) {
    a = (addr->u8[i] << 8) + addr->u8[i + 1];
    ab26:	782c      	ldrb	r4, [r5, #0]
    ab28:	0224      	lsls	r4, r4, #8
    ab2a:	786b      	ldrb	r3, [r5, #1]
    ab2c:	191c      	adds	r4, r3, r4
    ab2e:	b2a4      	uxth	r4, r4
    if(a == 0 && f >= 0) {
    ab30:	2c00      	cmp	r4, #0
    ab32:	d109      	bne.n	ab48 <uip_debug_ipaddr_print+0x40>
    ab34:	2f00      	cmp	r7, #0
    ab36:	db07      	blt.n	ab48 <uip_debug_ipaddr_print+0x40>
      if(f++ == 0) {
    ab38:	1c7c      	adds	r4, r7, #1
    ab3a:	2f00      	cmp	r7, #0
    ab3c:	d112      	bne.n	ab64 <uip_debug_ipaddr_print+0x5c>
        PRINTA("::");
    ab3e:	480f      	ldr	r0, [pc, #60]	; (ab7c <uip_debug_ipaddr_print+0x74>)
    ab40:	4b0d      	ldr	r3, [pc, #52]	; (ab78 <uip_debug_ipaddr_print+0x70>)
    ab42:	4798      	blx	r3
  unsigned int i;
  int f;
  for(i = 0, f = 0; i < sizeof(uip_ipaddr_t); i += 2) {
    a = (addr->u8[i] << 8) + addr->u8[i + 1];
    if(a == 0 && f >= 0) {
      if(f++ == 0) {
    ab44:	1c27      	adds	r7, r4, #0
    ab46:	e00e      	b.n	ab66 <uip_debug_ipaddr_print+0x5e>
        PRINTA("::");
      }
    } else {
      if(f > 0) {
    ab48:	2f00      	cmp	r7, #0
    ab4a:	dc05      	bgt.n	ab58 <uip_debug_ipaddr_print+0x50>
        f = -1;
      } else if(i > 0) {
    ab4c:	2e00      	cmp	r6, #0
    ab4e:	d005      	beq.n	ab5c <uip_debug_ipaddr_print+0x54>
        PRINTA(":");
    ab50:	203a      	movs	r0, #58	; 0x3a
    ab52:	4b0b      	ldr	r3, [pc, #44]	; (ab80 <uip_debug_ipaddr_print+0x78>)
    ab54:	4798      	blx	r3
    ab56:	e001      	b.n	ab5c <uip_debug_ipaddr_print+0x54>
      if(f++ == 0) {
        PRINTA("::");
      }
    } else {
      if(f > 0) {
        f = -1;
    ab58:	2701      	movs	r7, #1
    ab5a:	427f      	negs	r7, r7
      } else if(i > 0) {
        PRINTA(":");
      }
      PRINTA("%x", a);
    ab5c:	4809      	ldr	r0, [pc, #36]	; (ab84 <uip_debug_ipaddr_print+0x7c>)
    ab5e:	1c21      	adds	r1, r4, #0
    ab60:	47c0      	blx	r8
    ab62:	e000      	b.n	ab66 <uip_debug_ipaddr_print+0x5e>
  unsigned int i;
  int f;
  for(i = 0, f = 0; i < sizeof(uip_ipaddr_t); i += 2) {
    a = (addr->u8[i] << 8) + addr->u8[i + 1];
    if(a == 0 && f >= 0) {
      if(f++ == 0) {
    ab64:	1c27      	adds	r7, r4, #0
  }
#if UIP_CONF_IPV6
  uint16_t a;
  unsigned int i;
  int f;
  for(i = 0, f = 0; i < sizeof(uip_ipaddr_t); i += 2) {
    ab66:	3602      	adds	r6, #2
    ab68:	3502      	adds	r5, #2
    ab6a:	2e10      	cmp	r6, #16
    ab6c:	d1db      	bne.n	ab26 <uip_debug_ipaddr_print+0x1e>
    }
  }
#else /* UIP_CONF_IPV6 */
  PRINTA("%u.%u.%u.%u", addr->u8[0], addr->u8[1], addr->u8[2], addr->u8[3]);
#endif /* UIP_CONF_IPV6 */
}
    ab6e:	bc04      	pop	{r2}
    ab70:	4690      	mov	r8, r2
    ab72:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ab74:	00012e18 	.word	0x00012e18
    ab78:	00010b79 	.word	0x00010b79
    ab7c:	00012e28 	.word	0x00012e28
    ab80:	00010bad 	.word	0x00010bad
    ab84:	00012e2c 	.word	0x00012e2c

0000ab88 <uiplib_ip6addrconv>:

/*-----------------------------------------------------------------------------------*/
#if UIP_CONF_IPV6
int
uiplib_ip6addrconv(const char *addrstr, uip_ip6addr_t *ipaddr)
{
    ab88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  unsigned int len;
  char c = 0;  //gcc warning if not initialized

  value = 0;
  zero = -1;
  if(*addrstr == '[') addrstr++;
    ab8a:	7803      	ldrb	r3, [r0, #0]
    ab8c:	3b5b      	subs	r3, #91	; 0x5b
    ab8e:	425a      	negs	r2, r3
    ab90:	4153      	adcs	r3, r2
    ab92:	18c0      	adds	r0, r0, r3

/*-----------------------------------------------------------------------------------*/
#if UIP_CONF_IPV6
int
uiplib_ip6addrconv(const char *addrstr, uip_ip6addr_t *ipaddr)
{
    ab94:	2400      	movs	r4, #0
    ab96:	2201      	movs	r2, #1
    ab98:	4252      	negs	r2, r2
    ab9a:	2500      	movs	r5, #0
        tmp = c - 'A' + 10;
      } else {
        PRINTF("uiplib: illegal char: '%c'\n\r", c);
        return 0;
      }
      value = (value << 4) + (tmp & 0xf);
    ab9c:	270f      	movs	r7, #15
  value = 0;
  zero = -1;
  if(*addrstr == '[') addrstr++;

  for(len = 0; len < sizeof(uip_ip6addr_t) - 1; addrstr++) {
    c = *addrstr;
    ab9e:	7803      	ldrb	r3, [r0, #0]
    if(c == ':' || c == '\0' || c == ']' || c == '/') {
    aba0:	2b3a      	cmp	r3, #58	; 0x3a
    aba2:	d04e      	beq.n	ac42 <uiplib_ip6addrconv+0xba>
    aba4:	2b00      	cmp	r3, #0
    aba6:	d046      	beq.n	ac36 <uiplib_ip6addrconv+0xae>
    aba8:	2b5d      	cmp	r3, #93	; 0x5d
    abaa:	d03e      	beq.n	ac2a <uiplib_ip6addrconv+0xa2>
    abac:	2b2f      	cmp	r3, #47	; 0x2f
    abae:	d106      	bne.n	abbe <uiplib_ip6addrconv+0x36>
    abb0:	e051      	b.n	ac56 <uiplib_ip6addrconv+0xce>
        break;
      }

      if(*(addrstr + 1) == ':') {
        /* Zero compression */
        if(zero < 0) {
    abb2:	2a00      	cmp	r2, #0
    abb4:	da00      	bge.n	abb8 <uiplib_ip6addrconv+0x30>
          zero = len;
    abb6:	1c22      	adds	r2, r4, #0
        }
        addrstr++;
    abb8:	3001      	adds	r0, #1
    c = *addrstr;
    if(c == ':' || c == '\0' || c == ']' || c == '/') {
      ipaddr->u8[len] = (value >> 8) & 0xff;
      ipaddr->u8[len + 1] = value & 0xff;
      len += 2;
      value = 0;
    abba:	2500      	movs	r5, #0
    abbc:	e012      	b.n	abe4 <uiplib_ip6addrconv+0x5c>
          zero = len;
        }
        addrstr++;
      }
    } else {
      if(c >= '0' && c <= '9') {
    abbe:	1c1e      	adds	r6, r3, #0
    abc0:	3e30      	subs	r6, #48	; 0x30
    abc2:	2e09      	cmp	r6, #9
    abc4:	d90a      	bls.n	abdc <uiplib_ip6addrconv+0x54>
        tmp = c - '0';
      } else if(c >= 'a' && c <= 'f') {
    abc6:	1c1e      	adds	r6, r3, #0
    abc8:	3e61      	subs	r6, #97	; 0x61
    abca:	2e05      	cmp	r6, #5
    abcc:	d801      	bhi.n	abd2 <uiplib_ip6addrconv+0x4a>
        tmp = c - 'a' + 10;
    abce:	360a      	adds	r6, #10
    abd0:	e004      	b.n	abdc <uiplib_ip6addrconv+0x54>
      } else if(c >= 'A' && c <= 'F') {
    abd2:	1c1e      	adds	r6, r3, #0
    abd4:	3e41      	subs	r6, #65	; 0x41
    abd6:	2e05      	cmp	r6, #5
    abd8:	d823      	bhi.n	ac22 <uiplib_ip6addrconv+0x9a>
        tmp = c - 'A' + 10;
    abda:	360a      	adds	r6, #10
      } else {
        PRINTF("uiplib: illegal char: '%c'\n\r", c);
        return 0;
      }
      value = (value << 4) + (tmp & 0xf);
    abdc:	012d      	lsls	r5, r5, #4
    abde:	403e      	ands	r6, r7
    abe0:	19ad      	adds	r5, r5, r6
    abe2:	b2ad      	uxth	r5, r5

  value = 0;
  zero = -1;
  if(*addrstr == '[') addrstr++;

  for(len = 0; len < sizeof(uip_ip6addr_t) - 1; addrstr++) {
    abe4:	3001      	adds	r0, #1
    abe6:	2c0e      	cmp	r4, #14
    abe8:	d9d9      	bls.n	ab9e <uiplib_ip6addrconv+0x16>
        return 0;
      }
      value = (value << 4) + (tmp & 0xf);
    }
  }
  if(c != '\0' && c != ']' && c != '/') {
    abea:	2b00      	cmp	r3, #0
    abec:	d004      	beq.n	abf8 <uiplib_ip6addrconv+0x70>
    abee:	2b5d      	cmp	r3, #93	; 0x5d
    abf0:	d002      	beq.n	abf8 <uiplib_ip6addrconv+0x70>
    PRINTF("uiplib: too large address\n\r");
    return 0;
    abf2:	2000      	movs	r0, #0
        return 0;
      }
      value = (value << 4) + (tmp & 0xf);
    }
  }
  if(c != '\0' && c != ']' && c != '/') {
    abf4:	2b2f      	cmp	r3, #47	; 0x2f
    abf6:	d134      	bne.n	ac62 <uiplib_ip6addrconv+0xda>
    memmove(&ipaddr->u8[zero + sizeof(uip_ip6addr_t) - len],
            &ipaddr->u8[zero], len - zero);
    memset(&ipaddr->u8[zero], 0, sizeof(uip_ip6addr_t) - len);
  }

  return 1;
    abf8:	2001      	movs	r0, #1
  }
  if(c != '\0' && c != ']' && c != '/') {
    PRINTF("uiplib: too large address\n\r");
    return 0;
  }
  if(len < sizeof(uip_ip6addr_t)) {
    abfa:	2c0f      	cmp	r4, #15
    abfc:	d831      	bhi.n	ac62 <uiplib_ip6addrconv+0xda>
    if(zero < 0) {
    abfe:	2a00      	cmp	r2, #0
    ac00:	db11      	blt.n	ac26 <uiplib_ip6addrconv+0x9e>
      PRINTF("uiplib: too short address\n\r");
      return 0;
    }
    memmove(&ipaddr->u8[zero + sizeof(uip_ip6addr_t) - len],
            &ipaddr->u8[zero], len - zero);
    ac02:	188d      	adds	r5, r1, r2
  if(len < sizeof(uip_ip6addr_t)) {
    if(zero < 0) {
      PRINTF("uiplib: too short address\n\r");
      return 0;
    }
    memmove(&ipaddr->u8[zero + sizeof(uip_ip6addr_t) - len],
    ac04:	1b10      	subs	r0, r2, r4
    ac06:	3010      	adds	r0, #16
    ac08:	1808      	adds	r0, r1, r0
    ac0a:	1aa2      	subs	r2, r4, r2
    ac0c:	1c29      	adds	r1, r5, #0
    ac0e:	4b15      	ldr	r3, [pc, #84]	; (ac64 <uiplib_ip6addrconv+0xdc>)
    ac10:	4798      	blx	r3
            &ipaddr->u8[zero], len - zero);
    memset(&ipaddr->u8[zero], 0, sizeof(uip_ip6addr_t) - len);
    ac12:	2210      	movs	r2, #16
    ac14:	1b12      	subs	r2, r2, r4
    ac16:	1c28      	adds	r0, r5, #0
    ac18:	2100      	movs	r1, #0
    ac1a:	4b13      	ldr	r3, [pc, #76]	; (ac68 <uiplib_ip6addrconv+0xe0>)
    ac1c:	4798      	blx	r3
  }

  return 1;
    ac1e:	2001      	movs	r0, #1
    ac20:	e01f      	b.n	ac62 <uiplib_ip6addrconv+0xda>
        tmp = c - 'a' + 10;
      } else if(c >= 'A' && c <= 'F') {
        tmp = c - 'A' + 10;
      } else {
        PRINTF("uiplib: illegal char: '%c'\n\r", c);
        return 0;
    ac22:	2000      	movs	r0, #0
    ac24:	e01d      	b.n	ac62 <uiplib_ip6addrconv+0xda>
    return 0;
  }
  if(len < sizeof(uip_ip6addr_t)) {
    if(zero < 0) {
      PRINTF("uiplib: too short address\n\r");
      return 0;
    ac26:	2000      	movs	r0, #0
    ac28:	e01b      	b.n	ac62 <uiplib_ip6addrconv+0xda>
  if(*addrstr == '[') addrstr++;

  for(len = 0; len < sizeof(uip_ip6addr_t) - 1; addrstr++) {
    c = *addrstr;
    if(c == ':' || c == '\0' || c == ']' || c == '/') {
      ipaddr->u8[len] = (value >> 8) & 0xff;
    ac2a:	0a2b      	lsrs	r3, r5, #8
    ac2c:	550b      	strb	r3, [r1, r4]
      ipaddr->u8[len + 1] = value & 0xff;
    ac2e:	190b      	adds	r3, r1, r4
    ac30:	705d      	strb	r5, [r3, #1]
      len += 2;
    ac32:	3402      	adds	r4, #2
    ac34:	e7e0      	b.n	abf8 <uiplib_ip6addrconv+0x70>
  if(*addrstr == '[') addrstr++;

  for(len = 0; len < sizeof(uip_ip6addr_t) - 1; addrstr++) {
    c = *addrstr;
    if(c == ':' || c == '\0' || c == ']' || c == '/') {
      ipaddr->u8[len] = (value >> 8) & 0xff;
    ac36:	0a2b      	lsrs	r3, r5, #8
    ac38:	550b      	strb	r3, [r1, r4]
      ipaddr->u8[len + 1] = value & 0xff;
    ac3a:	190b      	adds	r3, r1, r4
    ac3c:	705d      	strb	r5, [r3, #1]
      len += 2;
    ac3e:	3402      	adds	r4, #2
    ac40:	e7da      	b.n	abf8 <uiplib_ip6addrconv+0x70>
  if(*addrstr == '[') addrstr++;

  for(len = 0; len < sizeof(uip_ip6addr_t) - 1; addrstr++) {
    c = *addrstr;
    if(c == ':' || c == '\0' || c == ']' || c == '/') {
      ipaddr->u8[len] = (value >> 8) & 0xff;
    ac42:	0a2e      	lsrs	r6, r5, #8
    ac44:	550e      	strb	r6, [r1, r4]
      ipaddr->u8[len + 1] = value & 0xff;
    ac46:	190e      	adds	r6, r1, r4
    ac48:	7075      	strb	r5, [r6, #1]
      len += 2;
    ac4a:	3402      	adds	r4, #2

      if(c == '\0' || c == ']' || c == '/') {
        break;
      }

      if(*(addrstr + 1) == ':') {
    ac4c:	7845      	ldrb	r5, [r0, #1]
    ac4e:	2d3a      	cmp	r5, #58	; 0x3a
    ac50:	d0af      	beq.n	abb2 <uiplib_ip6addrconv+0x2a>
    c = *addrstr;
    if(c == ':' || c == '\0' || c == ']' || c == '/') {
      ipaddr->u8[len] = (value >> 8) & 0xff;
      ipaddr->u8[len + 1] = value & 0xff;
      len += 2;
      value = 0;
    ac52:	2500      	movs	r5, #0
    ac54:	e7c6      	b.n	abe4 <uiplib_ip6addrconv+0x5c>
  if(*addrstr == '[') addrstr++;

  for(len = 0; len < sizeof(uip_ip6addr_t) - 1; addrstr++) {
    c = *addrstr;
    if(c == ':' || c == '\0' || c == ']' || c == '/') {
      ipaddr->u8[len] = (value >> 8) & 0xff;
    ac56:	0a2b      	lsrs	r3, r5, #8
    ac58:	550b      	strb	r3, [r1, r4]
      ipaddr->u8[len + 1] = value & 0xff;
    ac5a:	190b      	adds	r3, r1, r4
    ac5c:	705d      	strb	r5, [r3, #1]
      len += 2;
    ac5e:	3402      	adds	r4, #2
    ac60:	e7ca      	b.n	abf8 <uiplib_ip6addrconv+0x70>
            &ipaddr->u8[zero], len - zero);
    memset(&ipaddr->u8[zero], 0, sizeof(uip_ip6addr_t) - len);
  }

  return 1;
}
    ac62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ac64:	00010b41 	.word	0x00010b41
    ac68:	00010b69 	.word	0x00010b69

0000ac6c <linkaddr_copy>:


/*---------------------------------------------------------------------------*/
void
linkaddr_copy(linkaddr_t *dest, const linkaddr_t *src)
{
    ac6c:	b508      	push	{r3, lr}
	memcpy(dest, src, LINKADDR_SIZE);
    ac6e:	2208      	movs	r2, #8
    ac70:	4b01      	ldr	r3, [pc, #4]	; (ac78 <linkaddr_copy+0xc>)
    ac72:	4798      	blx	r3
}
    ac74:	bd08      	pop	{r3, pc}
    ac76:	46c0      	nop			; (mov r8, r8)
    ac78:	00010b2f 	.word	0x00010b2f

0000ac7c <linkaddr_cmp>:
/*---------------------------------------------------------------------------*/
int
linkaddr_cmp(const linkaddr_t *addr1, const linkaddr_t *addr2)
{
    ac7c:	b508      	push	{r3, lr}
	return (memcmp(addr1, addr2, LINKADDR_SIZE) == 0);
    ac7e:	2208      	movs	r2, #8
    ac80:	4b02      	ldr	r3, [pc, #8]	; (ac8c <linkaddr_cmp+0x10>)
    ac82:	4798      	blx	r3
    ac84:	4243      	negs	r3, r0
    ac86:	4158      	adcs	r0, r3
}
    ac88:	bd08      	pop	{r3, pc}
    ac8a:	46c0      	nop			; (mov r8, r8)
    ac8c:	00010b11 	.word	0x00010b11

0000ac90 <linkaddr_set_node_addr>:
/*---------------------------------------------------------------------------*/
void
linkaddr_set_node_addr(linkaddr_t *t)
{
    ac90:	b508      	push	{r3, lr}
    ac92:	1c01      	adds	r1, r0, #0
  linkaddr_copy(&linkaddr_node_addr, t);
    ac94:	4801      	ldr	r0, [pc, #4]	; (ac9c <linkaddr_set_node_addr+0xc>)
    ac96:	4b02      	ldr	r3, [pc, #8]	; (aca0 <linkaddr_set_node_addr+0x10>)
    ac98:	4798      	blx	r3
}
    ac9a:	bd08      	pop	{r3, pc}
    ac9c:	200031d0 	.word	0x200031d0
    aca0:	0000ac6d 	.word	0x0000ac6d

0000aca4 <input_packet>:
  mac_call_sent_callback(sent, ptr, MAC_TX_ERR, 1);
}
/*---------------------------------------------------------------------------*/
static void
input_packet(void)
{
    aca4:	b508      	push	{r3, lr}
  NETSTACK_NETWORK.input();
    aca6:	4b02      	ldr	r3, [pc, #8]	; (acb0 <input_packet+0xc>)
    aca8:	689b      	ldr	r3, [r3, #8]
    acaa:	4798      	blx	r3
}
    acac:	bd08      	pop	{r3, pc}
    acae:	46c0      	nop			; (mov r8, r8)
    acb0:	00012be8 	.word	0x00012be8

0000acb4 <on>:
/*---------------------------------------------------------------------------*/
static int
on(void)
{
    acb4:	b508      	push	{r3, lr}
  return NETSTACK_RDC.on();
    acb6:	4b02      	ldr	r3, [pc, #8]	; (acc0 <on+0xc>)
    acb8:	695b      	ldr	r3, [r3, #20]
    acba:	4798      	blx	r3
}
    acbc:	bd08      	pop	{r3, pc}
    acbe:	46c0      	nop			; (mov r8, r8)
    acc0:	00012e6c 	.word	0x00012e6c

0000acc4 <off>:
/*---------------------------------------------------------------------------*/
static int
off(int keep_radio_on)
{
    acc4:	b508      	push	{r3, lr}
  return NETSTACK_RDC.off(keep_radio_on);
    acc6:	4b02      	ldr	r3, [pc, #8]	; (acd0 <off+0xc>)
    acc8:	699b      	ldr	r3, [r3, #24]
    acca:	4798      	blx	r3
}
    accc:	bd08      	pop	{r3, pc}
    acce:	46c0      	nop			; (mov r8, r8)
    acd0:	00012e6c 	.word	0x00012e6c

0000acd4 <channel_check_interval>:
/*---------------------------------------------------------------------------*/
static unsigned short
channel_check_interval(void)
{
    acd4:	b508      	push	{r3, lr}
  if(NETSTACK_RDC.channel_check_interval) {
    acd6:	4b04      	ldr	r3, [pc, #16]	; (ace8 <channel_check_interval+0x14>)
    acd8:	69db      	ldr	r3, [r3, #28]
    acda:	2b00      	cmp	r3, #0
    acdc:	d001      	beq.n	ace2 <channel_check_interval+0xe>
    return NETSTACK_RDC.channel_check_interval();
    acde:	4798      	blx	r3
    ace0:	e000      	b.n	ace4 <channel_check_interval+0x10>
  }
  return 0;
    ace2:	2000      	movs	r0, #0
}
    ace4:	bd08      	pop	{r3, pc}
    ace6:	46c0      	nop			; (mov r8, r8)
    ace8:	00012e6c 	.word	0x00012e6c

0000acec <transmit_packet_list>:
  return time;
}
/*---------------------------------------------------------------------------*/
static void
transmit_packet_list(void *ptr)
{
    acec:	b510      	push	{r4, lr}
  struct neighbor_queue *n = ptr;
  if(n) {
    acee:	2800      	cmp	r0, #0
    acf0:	d00a      	beq.n	ad08 <transmit_packet_list+0x1c>
    acf2:	1c04      	adds	r4, r0, #0
    struct rdc_buf_list *q = list_head(n->queued_packet_list);
    acf4:	6b40      	ldr	r0, [r0, #52]	; 0x34
    acf6:	4b05      	ldr	r3, [pc, #20]	; (ad0c <transmit_packet_list+0x20>)
    acf8:	4798      	blx	r3
    acfa:	1e02      	subs	r2, r0, #0
    if(q != NULL) {
    acfc:	d004      	beq.n	ad08 <transmit_packet_list+0x1c>
      PRINTF("csma: preparing number %d %p, queue len %d\n\r", n->transmissions, q,
          list_length(n->queued_packet_list));
      /* Send packets in the neighbor's list */
      NETSTACK_RDC.send_list(packet_sent, n, q);
    acfe:	4b04      	ldr	r3, [pc, #16]	; (ad10 <transmit_packet_list+0x24>)
    ad00:	68db      	ldr	r3, [r3, #12]
    ad02:	4804      	ldr	r0, [pc, #16]	; (ad14 <transmit_packet_list+0x28>)
    ad04:	1c21      	adds	r1, r4, #0
    ad06:	4798      	blx	r3
    }
  }
}
    ad08:	bd10      	pop	{r4, pc}
    ad0a:	46c0      	nop			; (mov r8, r8)
    ad0c:	00005719 	.word	0x00005719
    ad10:	00012e6c 	.word	0x00012e6c
    ad14:	0000af85 	.word	0x0000af85

0000ad18 <free_packet>:
/*---------------------------------------------------------------------------*/
static void
free_packet(struct neighbor_queue *n, struct rdc_buf_list *p)
{
    ad18:	b570      	push	{r4, r5, r6, lr}
  if(p != NULL) {
    ad1a:	2900      	cmp	r1, #0
    ad1c:	d034      	beq.n	ad88 <free_packet+0x70>
    ad1e:	1c0d      	adds	r5, r1, #0
    ad20:	1c04      	adds	r4, r0, #0
    /* Remove packet from list and deallocate */
    list_remove(n->queued_packet_list, p);
    ad22:	6b40      	ldr	r0, [r0, #52]	; 0x34
    ad24:	4b19      	ldr	r3, [pc, #100]	; (ad8c <free_packet+0x74>)
    ad26:	4798      	blx	r3

    queuebuf_free(p->buf);
    ad28:	6868      	ldr	r0, [r5, #4]
    ad2a:	4b19      	ldr	r3, [pc, #100]	; (ad90 <free_packet+0x78>)
    ad2c:	4798      	blx	r3
    memb_free(&metadata_memb, p->ptr);
    ad2e:	4819      	ldr	r0, [pc, #100]	; (ad94 <free_packet+0x7c>)
    ad30:	68a9      	ldr	r1, [r5, #8]
    ad32:	4e19      	ldr	r6, [pc, #100]	; (ad98 <free_packet+0x80>)
    ad34:	47b0      	blx	r6
    memb_free(&packet_memb, p);
    ad36:	4819      	ldr	r0, [pc, #100]	; (ad9c <free_packet+0x84>)
    ad38:	1c29      	adds	r1, r5, #0
    ad3a:	47b0      	blx	r6
    PRINTF("csma: free_queued_packet, queue length %d\n\r",
        list_length(n->queued_packet_list));
    if(list_head(n->queued_packet_list) != NULL) {
    ad3c:	6b60      	ldr	r0, [r4, #52]	; 0x34
    ad3e:	4b18      	ldr	r3, [pc, #96]	; (ada0 <free_packet+0x88>)
    ad40:	4798      	blx	r3
    ad42:	2800      	cmp	r0, #0
    ad44:	d014      	beq.n	ad70 <free_packet+0x58>
      /* There is a next packet. We reset current tx information */
      n->transmissions = 0;
    ad46:	2300      	movs	r3, #0
    ad48:	222c      	movs	r2, #44	; 0x2c
    ad4a:	54a3      	strb	r3, [r4, r2]
      n->collisions = 0;
    ad4c:	3201      	adds	r2, #1
    ad4e:	54a3      	strb	r3, [r4, r2]
      n->deferrals = 0;
    ad50:	3201      	adds	r2, #1
    ad52:	54a3      	strb	r3, [r4, r2]
      /* Set a timer for next transmissions */
      ctimer_set(&n->transmit_timer, default_timebase(),
    ad54:	1c25      	adds	r5, r4, #0
    ad56:	350c      	adds	r5, #12
default_timebase(void)
{
  clock_time_t time;
  /* The retransmission time must be proportional to the channel
     check interval of the underlying radio duty cycling layer. */
  time = NETSTACK_RDC.channel_check_interval();
    ad58:	4b12      	ldr	r3, [pc, #72]	; (ada4 <free_packet+0x8c>)
    ad5a:	69db      	ldr	r3, [r3, #28]
    ad5c:	4798      	blx	r3
    ad5e:	1e01      	subs	r1, r0, #0

  /* If the radio duty cycle has no channel check interval (i.e., it
     does not turn the radio off), we make the retransmission time
     proportional to the configured MAC channel check rate. */
  if(time == 0) {
    ad60:	d100      	bne.n	ad64 <free_packet+0x4c>
    time = CLOCK_SECOND / NETSTACK_RDC_CHANNEL_CHECK_RATE;
    ad62:	3104      	adds	r1, #4
      /* There is a next packet. We reset current tx information */
      n->transmissions = 0;
      n->collisions = 0;
      n->deferrals = 0;
      /* Set a timer for next transmissions */
      ctimer_set(&n->transmit_timer, default_timebase(),
    ad64:	1c28      	adds	r0, r5, #0
    ad66:	4a10      	ldr	r2, [pc, #64]	; (ada8 <free_packet+0x90>)
    ad68:	1c23      	adds	r3, r4, #0
    ad6a:	4c10      	ldr	r4, [pc, #64]	; (adac <free_packet+0x94>)
    ad6c:	47a0      	blx	r4
    ad6e:	e00b      	b.n	ad88 <free_packet+0x70>
                 transmit_packet_list, n);
    } else {
      /* This was the last packet in the queue, we free the neighbor */
      ctimer_stop(&n->transmit_timer);
    ad70:	1c20      	adds	r0, r4, #0
    ad72:	300c      	adds	r0, #12
    ad74:	4b0e      	ldr	r3, [pc, #56]	; (adb0 <free_packet+0x98>)
    ad76:	4798      	blx	r3
      list_remove(neighbor_list, n);
    ad78:	480e      	ldr	r0, [pc, #56]	; (adb4 <free_packet+0x9c>)
    ad7a:	1c21      	adds	r1, r4, #0
    ad7c:	4b03      	ldr	r3, [pc, #12]	; (ad8c <free_packet+0x74>)
    ad7e:	4798      	blx	r3
      memb_free(&neighbor_memb, n);
    ad80:	480d      	ldr	r0, [pc, #52]	; (adb8 <free_packet+0xa0>)
    ad82:	1c21      	adds	r1, r4, #0
    ad84:	4b04      	ldr	r3, [pc, #16]	; (ad98 <free_packet+0x80>)
    ad86:	4798      	blx	r3
    }
  }
}
    ad88:	bd70      	pop	{r4, r5, r6, pc}
    ad8a:	46c0      	nop			; (mov r8, r8)
    ad8c:	00005735 	.word	0x00005735
    ad90:	0000c139 	.word	0x0000c139
    ad94:	200000d0 	.word	0x200000d0
    ad98:	00005831 	.word	0x00005831
    ad9c:	200000e8 	.word	0x200000e8
    ada0:	00005719 	.word	0x00005719
    ada4:	00012e6c 	.word	0x00012e6c
    ada8:	0000aced 	.word	0x0000aced
    adac:	0000e625 	.word	0x0000e625
    adb0:	0000e715 	.word	0x0000e715
    adb4:	20000c90 	.word	0x20000c90
    adb8:	200000dc 	.word	0x200000dc

0000adbc <send_packet>:
  }
}
/*---------------------------------------------------------------------------*/
static void
send_packet(mac_callback_t sent, void *ptr)
{
    adbc:	b5f0      	push	{r4, r5, r6, r7, lr}
    adbe:	b083      	sub	sp, #12
    adc0:	9000      	str	r0, [sp, #0]
    adc2:	9101      	str	r1, [sp, #4]
  struct neighbor_queue *n;
  static uint8_t initialized = 0;
  static uint16_t seqno;
  const linkaddr_t *addr = packetbuf_addr(PACKETBUF_ADDR_RECEIVER);

  if(!initialized) {
    adc4:	4b4e      	ldr	r3, [pc, #312]	; (af00 <send_packet+0x144>)
    adc6:	781b      	ldrb	r3, [r3, #0]
    adc8:	2b00      	cmp	r3, #0
    adca:	d106      	bne.n	adda <send_packet+0x1e>
    initialized = 1;
    adcc:	2201      	movs	r2, #1
    adce:	4b4c      	ldr	r3, [pc, #304]	; (af00 <send_packet+0x144>)
    add0:	701a      	strb	r2, [r3, #0]
    /* Initialize the sequence number to a random value as per 802.15.4. */
    seqno = random_rand();
    add2:	4b4c      	ldr	r3, [pc, #304]	; (af04 <send_packet+0x148>)
    add4:	4798      	blx	r3
    add6:	4b4c      	ldr	r3, [pc, #304]	; (af08 <send_packet+0x14c>)
    add8:	8018      	strh	r0, [r3, #0]
  }

  if(seqno == 0) {
    adda:	4b4b      	ldr	r3, [pc, #300]	; (af08 <send_packet+0x14c>)
    addc:	881b      	ldrh	r3, [r3, #0]
    adde:	2b00      	cmp	r3, #0
    ade0:	d102      	bne.n	ade8 <send_packet+0x2c>
    /* PACKETBUF_ATTR_MAC_SEQNO cannot be zero, due to a pecuilarity
       in framer-802154.c. */
    seqno++;
    ade2:	2201      	movs	r2, #1
    ade4:	4b48      	ldr	r3, [pc, #288]	; (af08 <send_packet+0x14c>)
    ade6:	801a      	strh	r2, [r3, #0]
  }
  packetbuf_set_attr(PACKETBUF_ATTR_MAC_SEQNO, seqno++);
    ade8:	4a47      	ldr	r2, [pc, #284]	; (af08 <send_packet+0x14c>)
    adea:	8813      	ldrh	r3, [r2, #0]
    adec:	1c59      	adds	r1, r3, #1
    adee:	8011      	strh	r1, [r2, #0]

static inline int
packetbuf_set_attr(uint8_t type, const packetbuf_attr_t val)
{
/*   packetbuf_attrs[type].type = type; */
  packetbuf_attrs[type].val = val;
    adf0:	4a46      	ldr	r2, [pc, #280]	; (af0c <send_packet+0x150>)
    adf2:	82d3      	strh	r3, [r2, #22]

/*---------------------------------------------------------------------------*/
static struct neighbor_queue *
neighbor_queue_from_addr(const linkaddr_t *addr)
{
  struct neighbor_queue *n = list_head(neighbor_list);
    adf4:	4846      	ldr	r0, [pc, #280]	; (af10 <send_packet+0x154>)
    adf6:	4b47      	ldr	r3, [pc, #284]	; (af14 <send_packet+0x158>)
    adf8:	4798      	blx	r3
    adfa:	1e04      	subs	r4, r0, #0
  while(n != NULL) {
    adfc:	d00e      	beq.n	ae1c <send_packet+0x60>
    if(linkaddr_cmp(&n->addr, addr)) {
    adfe:	4d46      	ldr	r5, [pc, #280]	; (af18 <send_packet+0x15c>)
    ae00:	4f46      	ldr	r7, [pc, #280]	; (af1c <send_packet+0x160>)
      return n;
    }
    n = list_item_next(n);
    ae02:	4e47      	ldr	r6, [pc, #284]	; (af20 <send_packet+0x164>)
static struct neighbor_queue *
neighbor_queue_from_addr(const linkaddr_t *addr)
{
  struct neighbor_queue *n = list_head(neighbor_list);
  while(n != NULL) {
    if(linkaddr_cmp(&n->addr, addr)) {
    ae04:	1d20      	adds	r0, r4, #4
    ae06:	1c29      	adds	r1, r5, #0
    ae08:	47b8      	blx	r7
    ae0a:	2800      	cmp	r0, #0
    ae0c:	d002      	beq.n	ae14 <send_packet+0x58>
  }
  packetbuf_set_attr(PACKETBUF_ATTR_MAC_SEQNO, seqno++);

  /* Look for the neighbor entry */
  n = neighbor_queue_from_addr(addr);
  if(n == NULL) {
    ae0e:	2c00      	cmp	r4, #0
    ae10:	d16d      	bne.n	aeee <send_packet+0x132>
    ae12:	e003      	b.n	ae1c <send_packet+0x60>
  struct neighbor_queue *n = list_head(neighbor_list);
  while(n != NULL) {
    if(linkaddr_cmp(&n->addr, addr)) {
      return n;
    }
    n = list_item_next(n);
    ae14:	1c20      	adds	r0, r4, #0
    ae16:	47b0      	blx	r6
    ae18:	1e04      	subs	r4, r0, #0
/*---------------------------------------------------------------------------*/
static struct neighbor_queue *
neighbor_queue_from_addr(const linkaddr_t *addr)
{
  struct neighbor_queue *n = list_head(neighbor_list);
  while(n != NULL) {
    ae1a:	d1f3      	bne.n	ae04 <send_packet+0x48>

  /* Look for the neighbor entry */
  n = neighbor_queue_from_addr(addr);
  if(n == NULL) {
    /* Allocate a new neighbor entry */
    n = memb_alloc(&neighbor_memb);
    ae1c:	4841      	ldr	r0, [pc, #260]	; (af24 <send_packet+0x168>)
    ae1e:	4b42      	ldr	r3, [pc, #264]	; (af28 <send_packet+0x16c>)
    ae20:	4798      	blx	r3
    ae22:	1e04      	subs	r4, r0, #0
    if(n != NULL) {
    ae24:	d05c      	beq.n	aee0 <send_packet+0x124>
      /* Init neighbor entry */
      linkaddr_copy(&n->addr, addr);
    ae26:	3004      	adds	r0, #4
    ae28:	493b      	ldr	r1, [pc, #236]	; (af18 <send_packet+0x15c>)
    ae2a:	4b40      	ldr	r3, [pc, #256]	; (af2c <send_packet+0x170>)
    ae2c:	4798      	blx	r3
      n->transmissions = 0;
    ae2e:	2300      	movs	r3, #0
    ae30:	222c      	movs	r2, #44	; 0x2c
    ae32:	54a3      	strb	r3, [r4, r2]
      n->collisions = 0;
    ae34:	3201      	adds	r2, #1
    ae36:	54a3      	strb	r3, [r4, r2]
      n->deferrals = 0;
    ae38:	3201      	adds	r2, #1
    ae3a:	54a3      	strb	r3, [r4, r2]
      /* Init packet list for this neighbor */
      LIST_STRUCT_INIT(n, queued_packet_list);
    ae3c:	1c20      	adds	r0, r4, #0
    ae3e:	3030      	adds	r0, #48	; 0x30
    ae40:	6360      	str	r0, [r4, #52]	; 0x34
    ae42:	6323      	str	r3, [r4, #48]	; 0x30
    ae44:	4b3a      	ldr	r3, [pc, #232]	; (af30 <send_packet+0x174>)
    ae46:	4798      	blx	r3
      /* Add neighbor to the list */
      list_add(neighbor_list, n);
    ae48:	4831      	ldr	r0, [pc, #196]	; (af10 <send_packet+0x154>)
    ae4a:	1c21      	adds	r1, r4, #0
    ae4c:	4b39      	ldr	r3, [pc, #228]	; (af34 <send_packet+0x178>)
    ae4e:	4798      	blx	r3
    ae50:	e04d      	b.n	aeee <send_packet+0x132>

  if(n != NULL) {
    /* Add packet to the neighbor's queue */
    q = memb_alloc(&packet_memb);
    if(q != NULL) {
      q->ptr = memb_alloc(&metadata_memb);
    ae52:	4839      	ldr	r0, [pc, #228]	; (af38 <send_packet+0x17c>)
    ae54:	4b34      	ldr	r3, [pc, #208]	; (af28 <send_packet+0x16c>)
    ae56:	4798      	blx	r3
    ae58:	60a8      	str	r0, [r5, #8]
      if(q->ptr != NULL) {
    ae5a:	2800      	cmp	r0, #0
    ae5c:	d02f      	beq.n	aebe <send_packet+0x102>
	q->buf = queuebuf_new_from_packetbuf();
    ae5e:	4b37      	ldr	r3, [pc, #220]	; (af3c <send_packet+0x180>)
    ae60:	4798      	blx	r3
    ae62:	6068      	str	r0, [r5, #4]
	if(q->buf != NULL) {
    ae64:	2800      	cmp	r0, #0
    ae66:	d026      	beq.n	aeb6 <send_packet+0xfa>
	  struct qbuf_metadata *metadata = (struct qbuf_metadata *)q->ptr;
    ae68:	68ab      	ldr	r3, [r5, #8]
  return 1;
}
static inline packetbuf_attr_t
packetbuf_attr(uint8_t type)
{
  return packetbuf_attrs[type].val;
    ae6a:	4a28      	ldr	r2, [pc, #160]	; (af0c <send_packet+0x150>)
    ae6c:	8a92      	ldrh	r2, [r2, #20]
	  /* Neighbor and packet successfully allocated */
	  if(packetbuf_attr(PACKETBUF_ATTR_MAX_MAC_TRANSMISSIONS) == 0) {
    ae6e:	2a00      	cmp	r2, #0
    ae70:	d102      	bne.n	ae78 <send_packet+0xbc>
	    /* Use default configuration for max transmissions */
	    metadata->max_transmissions = CSMA_MAX_MAC_TRANSMISSIONS;
    ae72:	3203      	adds	r2, #3
    ae74:	721a      	strb	r2, [r3, #8]
    ae76:	e000      	b.n	ae7a <send_packet+0xbe>
	  } else {
	    metadata->max_transmissions =
    ae78:	721a      	strb	r2, [r3, #8]
                  packetbuf_attr(PACKETBUF_ATTR_MAX_MAC_TRANSMISSIONS);
	  }
	  metadata->sent = sent;
    ae7a:	9a00      	ldr	r2, [sp, #0]
    ae7c:	601a      	str	r2, [r3, #0]
	  metadata->cptr = ptr;
    ae7e:	9a01      	ldr	r2, [sp, #4]
    ae80:	605a      	str	r2, [r3, #4]
    ae82:	4b22      	ldr	r3, [pc, #136]	; (af0c <send_packet+0x150>)

	  if(packetbuf_attr(PACKETBUF_ATTR_PACKET_TYPE) ==
    ae84:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
    ae86:	2b01      	cmp	r3, #1
    ae88:	d104      	bne.n	ae94 <send_packet+0xd8>
	     PACKETBUF_ATTR_PACKET_TYPE_ACK) {
	    list_push(n->queued_packet_list, q);
    ae8a:	6b60      	ldr	r0, [r4, #52]	; 0x34
    ae8c:	1c29      	adds	r1, r5, #0
    ae8e:	4b2c      	ldr	r3, [pc, #176]	; (af40 <send_packet+0x184>)
    ae90:	4798      	blx	r3
    ae92:	e003      	b.n	ae9c <send_packet+0xe0>
	  } else {
	    list_add(n->queued_packet_list, q);
    ae94:	6b60      	ldr	r0, [r4, #52]	; 0x34
    ae96:	1c29      	adds	r1, r5, #0
    ae98:	4b26      	ldr	r3, [pc, #152]	; (af34 <send_packet+0x178>)
    ae9a:	4798      	blx	r3
	  }

	  /* If q is the first packet in the neighbor's queue, send asap */
	  if(list_head(n->queued_packet_list) == q) {
    ae9c:	6b60      	ldr	r0, [r4, #52]	; 0x34
    ae9e:	4b1d      	ldr	r3, [pc, #116]	; (af14 <send_packet+0x158>)
    aea0:	4798      	blx	r3
    aea2:	42a8      	cmp	r0, r5
    aea4:	d129      	bne.n	aefa <send_packet+0x13e>
	    ctimer_set(&n->transmit_timer, 0, transmit_packet_list, n);
    aea6:	1c20      	adds	r0, r4, #0
    aea8:	300c      	adds	r0, #12
    aeaa:	2100      	movs	r1, #0
    aeac:	4a25      	ldr	r2, [pc, #148]	; (af44 <send_packet+0x188>)
    aeae:	1c23      	adds	r3, r4, #0
    aeb0:	4c25      	ldr	r4, [pc, #148]	; (af48 <send_packet+0x18c>)
    aeb2:	47a0      	blx	r4
    aeb4:	e021      	b.n	aefa <send_packet+0x13e>
	  }
	  return;
	}
	memb_free(&metadata_memb, q->ptr);
    aeb6:	4820      	ldr	r0, [pc, #128]	; (af38 <send_packet+0x17c>)
    aeb8:	68a9      	ldr	r1, [r5, #8]
    aeba:	4b24      	ldr	r3, [pc, #144]	; (af4c <send_packet+0x190>)
    aebc:	4798      	blx	r3
	PRINTF("csma: could not allocate queuebuf, dropping packet\n\r");
      }
      memb_free(&packet_memb, q);
    aebe:	4824      	ldr	r0, [pc, #144]	; (af50 <send_packet+0x194>)
    aec0:	1c29      	adds	r1, r5, #0
    aec2:	4b22      	ldr	r3, [pc, #136]	; (af4c <send_packet+0x190>)
    aec4:	4798      	blx	r3
      PRINTF("csma: could not allocate queuebuf, dropping packet\n\r");
    }
    /* The packet allocation failed. Remove and free neighbor entry if empty. */
    if(list_length(n->queued_packet_list) == 0) {
    aec6:	6b60      	ldr	r0, [r4, #52]	; 0x34
    aec8:	4b22      	ldr	r3, [pc, #136]	; (af54 <send_packet+0x198>)
    aeca:	4798      	blx	r3
    aecc:	2800      	cmp	r0, #0
    aece:	d107      	bne.n	aee0 <send_packet+0x124>
      list_remove(neighbor_list, n);
    aed0:	480f      	ldr	r0, [pc, #60]	; (af10 <send_packet+0x154>)
    aed2:	1c21      	adds	r1, r4, #0
    aed4:	4b20      	ldr	r3, [pc, #128]	; (af58 <send_packet+0x19c>)
    aed6:	4798      	blx	r3
      memb_free(&neighbor_memb, n);
    aed8:	4812      	ldr	r0, [pc, #72]	; (af24 <send_packet+0x168>)
    aeda:	1c21      	adds	r1, r4, #0
    aedc:	4b1b      	ldr	r3, [pc, #108]	; (af4c <send_packet+0x190>)
    aede:	4798      	blx	r3
    }
    PRINTF("csma: could not allocate packet, dropping packet\n\r");
  } else {
    PRINTF("csma: could not allocate neighbor, dropping packet\n\r");
  }
  mac_call_sent_callback(sent, ptr, MAC_TX_ERR, 1);
    aee0:	9800      	ldr	r0, [sp, #0]
    aee2:	9901      	ldr	r1, [sp, #4]
    aee4:	2205      	movs	r2, #5
    aee6:	2301      	movs	r3, #1
    aee8:	4c1c      	ldr	r4, [pc, #112]	; (af5c <send_packet+0x1a0>)
    aeea:	47a0      	blx	r4
    aeec:	e005      	b.n	aefa <send_packet+0x13e>
    }
  }

  if(n != NULL) {
    /* Add packet to the neighbor's queue */
    q = memb_alloc(&packet_memb);
    aeee:	4818      	ldr	r0, [pc, #96]	; (af50 <send_packet+0x194>)
    aef0:	4b0d      	ldr	r3, [pc, #52]	; (af28 <send_packet+0x16c>)
    aef2:	4798      	blx	r3
    aef4:	1e05      	subs	r5, r0, #0
    if(q != NULL) {
    aef6:	d1ac      	bne.n	ae52 <send_packet+0x96>
    aef8:	e7e5      	b.n	aec6 <send_packet+0x10a>
    PRINTF("csma: could not allocate packet, dropping packet\n\r");
  } else {
    PRINTF("csma: could not allocate neighbor, dropping packet\n\r");
  }
  mac_call_sent_callback(sent, ptr, MAC_TX_ERR, 1);
}
    aefa:	b003      	add	sp, #12
    aefc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    aefe:	46c0      	nop			; (mov r8, r8)
    af00:	20000c8c 	.word	0x20000c8c
    af04:	000058a5 	.word	0x000058a5
    af08:	20000e08 	.word	0x20000e08
    af0c:	200031f8 	.word	0x200031f8
    af10:	20000c90 	.word	0x20000c90
    af14:	00005719 	.word	0x00005719
    af18:	200031e0 	.word	0x200031e0
    af1c:	0000ac7d 	.word	0x0000ac7d
    af20:	000057c1 	.word	0x000057c1
    af24:	200000dc 	.word	0x200000dc
    af28:	000057ed 	.word	0x000057ed
    af2c:	0000ac6d 	.word	0x0000ac6d
    af30:	00005711 	.word	0x00005711
    af34:	00005769 	.word	0x00005769
    af38:	200000d0 	.word	0x200000d0
    af3c:	0000c081 	.word	0x0000c081
    af40:	00005791 	.word	0x00005791
    af44:	0000aced 	.word	0x0000aced
    af48:	0000e625 	.word	0x0000e625
    af4c:	00005831 	.word	0x00005831
    af50:	200000e8 	.word	0x200000e8
    af54:	000057a9 	.word	0x000057a9
    af58:	00005735 	.word	0x00005735
    af5c:	0000b691 	.word	0x0000b691

0000af60 <init>:
  return 0;
}
/*---------------------------------------------------------------------------*/
static void
init(void)
{
    af60:	b510      	push	{r4, lr}
  memb_init(&packet_memb);
    af62:	4804      	ldr	r0, [pc, #16]	; (af74 <init+0x14>)
    af64:	4c04      	ldr	r4, [pc, #16]	; (af78 <init+0x18>)
    af66:	47a0      	blx	r4
  memb_init(&metadata_memb);
    af68:	4804      	ldr	r0, [pc, #16]	; (af7c <init+0x1c>)
    af6a:	47a0      	blx	r4
  memb_init(&neighbor_memb);
    af6c:	4804      	ldr	r0, [pc, #16]	; (af80 <init+0x20>)
    af6e:	47a0      	blx	r4
}
    af70:	bd10      	pop	{r4, pc}
    af72:	46c0      	nop			; (mov r8, r8)
    af74:	200000e8 	.word	0x200000e8
    af78:	000057cd 	.word	0x000057cd
    af7c:	200000d0 	.word	0x200000d0
    af80:	200000dc 	.word	0x200000dc

0000af84 <packet_sent>:
  }
}
/*---------------------------------------------------------------------------*/
static void
packet_sent(void *ptr, int status, int num_transmissions)
{
    af84:	b5f0      	push	{r4, r5, r6, r7, lr}
    af86:	465f      	mov	r7, fp
    af88:	4656      	mov	r6, sl
    af8a:	464d      	mov	r5, r9
    af8c:	4644      	mov	r4, r8
    af8e:	b4f0      	push	{r4, r5, r6, r7}
    af90:	b085      	sub	sp, #20
  int num_tx;
  int backoff_exponent;
  int backoff_transmissions;

  n = ptr;
  if(n == NULL) {
    af92:	2800      	cmp	r0, #0
    af94:	d100      	bne.n	af98 <packet_sent+0x14>
    af96:	e091      	b.n	b0bc <packet_sent+0x138>
    return;
  }
  switch(status) {
    af98:	2901      	cmp	r1, #1
    af9a:	d00d      	beq.n	afb8 <packet_sent+0x34>
    af9c:	dc02      	bgt.n	afa4 <packet_sent+0x20>
    af9e:	2900      	cmp	r1, #0
    afa0:	d005      	beq.n	afae <packet_sent+0x2a>
    afa2:	e012      	b.n	afca <packet_sent+0x46>
    afa4:	2902      	cmp	r1, #2
    afa6:	d002      	beq.n	afae <packet_sent+0x2a>
    afa8:	2903      	cmp	r1, #3
    afaa:	d00a      	beq.n	afc2 <packet_sent+0x3e>
    afac:	e00d      	b.n	afca <packet_sent+0x46>
  case MAC_TX_OK:
  case MAC_TX_NOACK:
    n->transmissions += num_transmissions;
    afae:	242c      	movs	r4, #44	; 0x2c
    afb0:	5d03      	ldrb	r3, [r0, r4]
    afb2:	18d3      	adds	r3, r2, r3
    afb4:	5503      	strb	r3, [r0, r4]
    break;
    afb6:	e008      	b.n	afca <packet_sent+0x46>
  case MAC_TX_COLLISION:
    n->collisions += num_transmissions;
    afb8:	242d      	movs	r4, #45	; 0x2d
    afba:	5d03      	ldrb	r3, [r0, r4]
    afbc:	18d3      	adds	r3, r2, r3
    afbe:	5503      	strb	r3, [r0, r4]
    break;
    afc0:	e003      	b.n	afca <packet_sent+0x46>
  case MAC_TX_DEFERRED:
    n->deferrals += num_transmissions;
    afc2:	242e      	movs	r4, #46	; 0x2e
    afc4:	5d03      	ldrb	r3, [r0, r4]
    afc6:	18d3      	adds	r3, r2, r3
    afc8:	5503      	strb	r3, [r0, r4]
    afca:	9203      	str	r2, [sp, #12]
    afcc:	9101      	str	r1, [sp, #4]
    afce:	9000      	str	r0, [sp, #0]
    break;
  }

  /* Find out what packet this callback refers to */
  for(q = list_head(n->queued_packet_list);
    afd0:	6b43      	ldr	r3, [r0, #52]	; 0x34
    afd2:	9302      	str	r3, [sp, #8]
    afd4:	1c18      	adds	r0, r3, #0
    afd6:	4b3d      	ldr	r3, [pc, #244]	; (b0cc <packet_sent+0x148>)
    afd8:	4798      	blx	r3
    afda:	1e04      	subs	r4, r0, #0
    afdc:	d06e      	beq.n	b0bc <packet_sent+0x138>
      q != NULL; q = list_item_next(q)) {
    if(queuebuf_attr(q->buf, PACKETBUF_ATTR_MAC_SEQNO) ==
    afde:	4d3c      	ldr	r5, [pc, #240]	; (b0d0 <packet_sent+0x14c>)
    afe0:	4f3c      	ldr	r7, [pc, #240]	; (b0d4 <packet_sent+0x150>)
    break;
  }

  /* Find out what packet this callback refers to */
  for(q = list_head(n->queued_packet_list);
      q != NULL; q = list_item_next(q)) {
    afe2:	4e3d      	ldr	r6, [pc, #244]	; (b0d8 <packet_sent+0x154>)
    if(queuebuf_attr(q->buf, PACKETBUF_ATTR_MAC_SEQNO) ==
    afe4:	6860      	ldr	r0, [r4, #4]
    afe6:	210b      	movs	r1, #11
    afe8:	47a8      	blx	r5
    afea:	8afb      	ldrh	r3, [r7, #22]
    afec:	4283      	cmp	r3, r0
    afee:	d004      	beq.n	affa <packet_sent+0x76>
    break;
  }

  /* Find out what packet this callback refers to */
  for(q = list_head(n->queued_packet_list);
      q != NULL; q = list_item_next(q)) {
    aff0:	1c20      	adds	r0, r4, #0
    aff2:	47b0      	blx	r6
    aff4:	1e04      	subs	r4, r0, #0
    n->deferrals += num_transmissions;
    break;
  }

  /* Find out what packet this callback refers to */
  for(q = list_head(n->queued_packet_list);
    aff6:	d1f5      	bne.n	afe4 <packet_sent+0x60>
    aff8:	e060      	b.n	b0bc <packet_sent+0x138>
       packetbuf_attr(PACKETBUF_ATTR_MAC_SEQNO)) {
      break;
    }
  }

  if(q != NULL) {
    affa:	2c00      	cmp	r4, #0
    affc:	d05e      	beq.n	b0bc <packet_sent+0x138>
    metadata = (struct qbuf_metadata *)q->ptr;
    affe:	68a7      	ldr	r7, [r4, #8]

    if(metadata != NULL) {
    b000:	2f00      	cmp	r7, #0
    b002:	d05b      	beq.n	b0bc <packet_sent+0x138>
      sent = metadata->sent;
    b004:	683b      	ldr	r3, [r7, #0]
    b006:	469a      	mov	sl, r3
      cptr = metadata->cptr;
    b008:	687b      	ldr	r3, [r7, #4]
    b00a:	469b      	mov	fp, r3
      num_tx = n->transmissions;
    b00c:	232c      	movs	r3, #44	; 0x2c
    b00e:	9a00      	ldr	r2, [sp, #0]
    b010:	5cd3      	ldrb	r3, [r2, r3]
    b012:	4699      	mov	r9, r3
      if(status == MAC_TX_COLLISION ||
    b014:	9a01      	ldr	r2, [sp, #4]
    b016:	1c13      	adds	r3, r2, #0
    b018:	3b01      	subs	r3, #1
    b01a:	2b01      	cmp	r3, #1
    b01c:	d902      	bls.n	b024 <packet_sent+0xa0>
         status == MAC_TX_NOACK ||
    b01e:	2a04      	cmp	r2, #4
    b020:	d136      	bne.n	b090 <packet_sent+0x10c>
    b022:	e043      	b.n	b0ac <packet_sent+0x128>
default_timebase(void)
{
  clock_time_t time;
  /* The retransmission time must be proportional to the channel
     check interval of the underlying radio duty cycling layer. */
  time = NETSTACK_RDC.channel_check_interval();
    b024:	4b2d      	ldr	r3, [pc, #180]	; (b0dc <packet_sent+0x158>)
    b026:	69db      	ldr	r3, [r3, #28]
    b028:	4798      	blx	r3
    b02a:	4680      	mov	r8, r0

  /* If the radio duty cycle has no channel check interval (i.e., it
     does not turn the radio off), we make the retransmission time
     proportional to the configured MAC channel check rate. */
  if(time == 0) {
    b02c:	1e03      	subs	r3, r0, #0
    b02e:	d101      	bne.n	b034 <packet_sent+0xb0>
    time = CLOCK_SECOND / NETSTACK_RDC_CHANNEL_CHECK_RATE;
    b030:	3304      	adds	r3, #4
    b032:	4698      	mov	r8, r3
        /* Proceed to exponentiation. */
        backoff_transmissions = 1 << backoff_exponent;

        /* Pick a time for next transmission, within the interval:
         * [time, time + 2^backoff_exponent * time[ */
        time = time + (random_rand() % (backoff_transmissions * time));
    b034:	4b2a      	ldr	r3, [pc, #168]	; (b0e0 <packet_sent+0x15c>)
    b036:	4798      	blx	r3

        if(status == MAC_TX_AGAIN) {
    b038:	9b01      	ldr	r3, [sp, #4]
    b03a:	2b04      	cmp	r3, #4
    b03c:	d00c      	beq.n	b058 <packet_sent+0xd4>
    b03e:	4649      	mov	r1, r9
    b040:	2903      	cmp	r1, #3
    b042:	dd00      	ble.n	b046 <packet_sent+0xc2>
    b044:	2103      	movs	r1, #3
        if(backoff_exponent > CSMA_MAX_BACKOFF_EXPONENT) {
          backoff_exponent = CSMA_MAX_BACKOFF_EXPONENT;
        }

        /* Proceed to exponentiation. */
        backoff_transmissions = 1 << backoff_exponent;
    b046:	2301      	movs	r3, #1
    b048:	408b      	lsls	r3, r1
    b04a:	1c19      	adds	r1, r3, #0

        /* Pick a time for next transmission, within the interval:
         * [time, time + 2^backoff_exponent * time[ */
        time = time + (random_rand() % (backoff_transmissions * time));
    b04c:	4643      	mov	r3, r8
    b04e:	4359      	muls	r1, r3
    b050:	4b24      	ldr	r3, [pc, #144]	; (b0e4 <packet_sent+0x160>)
    b052:	4798      	blx	r3
    b054:	4441      	add	r1, r8
    b056:	e000      	b.n	b05a <packet_sent+0xd6>

        if(status == MAC_TX_AGAIN) {
        	time = (clock_time_t) num_transmissions;
    b058:	9903      	ldr	r1, [sp, #12]
        }

        if(n->transmissions < metadata->max_transmissions) {
    b05a:	232c      	movs	r3, #44	; 0x2c
    b05c:	9a00      	ldr	r2, [sp, #0]
    b05e:	5cd2      	ldrb	r2, [r2, r3]
    b060:	7a3b      	ldrb	r3, [r7, #8]
    b062:	429a      	cmp	r2, r3
    b064:	d209      	bcs.n	b07a <packet_sent+0xf6>
          PRINTF("csma: retransmitting with time %lu %p\n\r", time, q);
          ctimer_set(&n->transmit_timer, time,
    b066:	9b00      	ldr	r3, [sp, #0]
    b068:	1c18      	adds	r0, r3, #0
    b06a:	300c      	adds	r0, #12
    b06c:	4a1e      	ldr	r2, [pc, #120]	; (b0e8 <packet_sent+0x164>)
    b06e:	4d1f      	ldr	r5, [pc, #124]	; (b0ec <packet_sent+0x168>)
    b070:	47a8      	blx	r5
                     transmit_packet_list, n);
          /* This is needed to correctly attribute energy that we spent
             transmitting this packet. */
          queuebuf_update_attr_from_packetbuf(q->buf);
    b072:	6860      	ldr	r0, [r4, #4]
    b074:	4b1e      	ldr	r3, [pc, #120]	; (b0f0 <packet_sent+0x16c>)
    b076:	4798      	blx	r3
    b078:	e020      	b.n	b0bc <packet_sent+0x138>
        } else {
          PRINTF("csma: drop with status %d after %d transmissions, %d collisions\n\r",
                 status, n->transmissions, n->collisions);
          free_packet(n, q);
    b07a:	9800      	ldr	r0, [sp, #0]
    b07c:	1c21      	adds	r1, r4, #0
    b07e:	4b1d      	ldr	r3, [pc, #116]	; (b0f4 <packet_sent+0x170>)
    b080:	4798      	blx	r3
          mac_call_sent_callback(sent, cptr, status, num_tx);
    b082:	4650      	mov	r0, sl
    b084:	4659      	mov	r1, fp
    b086:	9a01      	ldr	r2, [sp, #4]
    b088:	464b      	mov	r3, r9
    b08a:	4c1b      	ldr	r4, [pc, #108]	; (b0f8 <packet_sent+0x174>)
    b08c:	47a0      	blx	r4
    b08e:	e015      	b.n	b0bc <packet_sent+0x138>
        if(status == MAC_TX_OK) {
          PRINTF("csma: rexmit ok %d\n\r", n->transmissions);
        } else {
          PRINTF("csma: rexmit failed %d: %d\n\r", n->transmissions, status);
        }
        free_packet(n, q);
    b090:	9800      	ldr	r0, [sp, #0]
    b092:	1c21      	adds	r1, r4, #0
    b094:	4b17      	ldr	r3, [pc, #92]	; (b0f4 <packet_sent+0x170>)
    b096:	4798      	blx	r3
        mac_call_sent_callback(sent, cptr, status, num_tx);
    b098:	4650      	mov	r0, sl
    b09a:	4659      	mov	r1, fp
    b09c:	9a01      	ldr	r2, [sp, #4]
    b09e:	464b      	mov	r3, r9
    b0a0:	4c15      	ldr	r4, [pc, #84]	; (b0f8 <packet_sent+0x174>)
    b0a2:	47a0      	blx	r4
    b0a4:	e00a      	b.n	b0bc <packet_sent+0x138>
        /* Proceed to exponentiation. */
        backoff_transmissions = 1 << backoff_exponent;

        /* Pick a time for next transmission, within the interval:
         * [time, time + 2^backoff_exponent * time[ */
        time = time + (random_rand() % (backoff_transmissions * time));
    b0a6:	4b0e      	ldr	r3, [pc, #56]	; (b0e0 <packet_sent+0x15c>)
    b0a8:	4798      	blx	r3
    b0aa:	e7d5      	b.n	b058 <packet_sent+0xd4>
default_timebase(void)
{
  clock_time_t time;
  /* The retransmission time must be proportional to the channel
     check interval of the underlying radio duty cycling layer. */
  time = NETSTACK_RDC.channel_check_interval();
    b0ac:	4b0b      	ldr	r3, [pc, #44]	; (b0dc <packet_sent+0x158>)
    b0ae:	69db      	ldr	r3, [r3, #28]
    b0b0:	4798      	blx	r3

  /* If the radio duty cycle has no channel check interval (i.e., it
     does not turn the radio off), we make the retransmission time
     proportional to the configured MAC channel check rate. */
  if(time == 0) {
    b0b2:	2800      	cmp	r0, #0
    b0b4:	d0f7      	beq.n	b0a6 <packet_sent+0x122>
        /* Proceed to exponentiation. */
        backoff_transmissions = 1 << backoff_exponent;

        /* Pick a time for next transmission, within the interval:
         * [time, time + 2^backoff_exponent * time[ */
        time = time + (random_rand() % (backoff_transmissions * time));
    b0b6:	4b0a      	ldr	r3, [pc, #40]	; (b0e0 <packet_sent+0x15c>)
    b0b8:	4798      	blx	r3
    b0ba:	e7cd      	b.n	b058 <packet_sent+0xd4>
        free_packet(n, q);
        mac_call_sent_callback(sent, cptr, status, num_tx);
      }
    }
  }
}
    b0bc:	b005      	add	sp, #20
    b0be:	bc3c      	pop	{r2, r3, r4, r5}
    b0c0:	4690      	mov	r8, r2
    b0c2:	4699      	mov	r9, r3
    b0c4:	46a2      	mov	sl, r4
    b0c6:	46ab      	mov	fp, r5
    b0c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    b0ca:	46c0      	nop			; (mov r8, r8)
    b0cc:	00005719 	.word	0x00005719
    b0d0:	0000c201 	.word	0x0000c201
    b0d4:	200031f8 	.word	0x200031f8
    b0d8:	000057c1 	.word	0x000057c1
    b0dc:	00012e6c 	.word	0x00012e6c
    b0e0:	000058a5 	.word	0x000058a5
    b0e4:	00010879 	.word	0x00010879
    b0e8:	0000aced 	.word	0x0000aced
    b0ec:	0000e625 	.word	0x0000e625
    b0f0:	0000c125 	.word	0x0000c125
    b0f4:	0000ad19 	.word	0x0000ad19
    b0f8:	0000b691 	.word	0x0000b691

0000b0fc <field_len>:
/*----------------------------------------------------------------------------*/
static void
field_len(frame802154_t *p, field_length_t *flen)
{
  /* init flen to zeros */
  memset(flen, 0, sizeof(field_length_t));
    b0fc:	2300      	movs	r3, #0
    b0fe:	700b      	strb	r3, [r1, #0]
    b100:	704b      	strb	r3, [r1, #1]
    b102:	708b      	strb	r3, [r1, #2]
    b104:	70cb      	strb	r3, [r1, #3]
    b106:	710b      	strb	r3, [r1, #4]

  /* Determine lengths of each field based on fcf and other args */
  if(p->fcf.dest_addr_mode & 3) {
    b108:	7943      	ldrb	r3, [r0, #5]
    b10a:	079b      	lsls	r3, r3, #30
    b10c:	d001      	beq.n	b112 <field_len+0x16>
    flen->dest_pid_len = 2;
    b10e:	2302      	movs	r3, #2
    b110:	700b      	strb	r3, [r1, #0]
  }
  if(p->fcf.src_addr_mode & 3) {
    b112:	79c3      	ldrb	r3, [r0, #7]
    b114:	079b      	lsls	r3, r3, #30
    b116:	d010      	beq.n	b13a <field_len+0x3e>
    flen->src_pid_len = 2;
    b118:	2302      	movs	r3, #2
    b11a:	708b      	strb	r3, [r1, #2]
  }

  /* Set PAN ID compression bit if src pan id matches dest pan id. */
  if(p->fcf.dest_addr_mode & 3 && p->fcf.src_addr_mode & 3 &&
    b11c:	7943      	ldrb	r3, [r0, #5]
    b11e:	079b      	lsls	r3, r3, #30
    b120:	d00b      	beq.n	b13a <field_len+0x3e>
    b122:	79c3      	ldrb	r3, [r0, #7]
    b124:	079b      	lsls	r3, r3, #30
    b126:	d008      	beq.n	b13a <field_len+0x3e>
    b128:	8a82      	ldrh	r2, [r0, #20]
    b12a:	8943      	ldrh	r3, [r0, #10]
    b12c:	429a      	cmp	r2, r3
    b12e:	d104      	bne.n	b13a <field_len+0x3e>
     p->src_pid == p->dest_pid) {
    p->fcf.panid_compression = 1;
    b130:	2301      	movs	r3, #1
    b132:	7103      	strb	r3, [r0, #4]

    /* compressed header, only do dest pid */
    flen->src_pid_len = 0;
    b134:	2300      	movs	r3, #0
    b136:	708b      	strb	r3, [r1, #2]
    b138:	e001      	b.n	b13e <field_len+0x42>
  } else {
    p->fcf.panid_compression = 0;
    b13a:	2300      	movs	r3, #0
    b13c:	7103      	strb	r3, [r0, #4]
  }

  /* determine address lengths */
  flen->dest_addr_len = addr_len(p->fcf.dest_addr_mode & 3);
    b13e:	7943      	ldrb	r3, [r0, #5]
    b140:	2203      	movs	r2, #3
    b142:	4013      	ands	r3, r2

/*----------------------------------------------------------------------------*/
CC_INLINE static uint8_t
addr_len(uint8_t mode)
{
  switch(mode) {
    b144:	2b02      	cmp	r3, #2
    b146:	d003      	beq.n	b150 <field_len+0x54>
  case FRAME802154_SHORTADDRMODE:  /* 16-bit address */
    return 2;
  case FRAME802154_LONGADDRMODE:   /* 64-bit address */
    return 8;
  default:
    return 0;
    b148:	3b03      	subs	r3, #3
    b14a:	425a      	negs	r2, r3
    b14c:	4153      	adcs	r3, r2
    b14e:	00db      	lsls	r3, r3, #3
  } else {
    p->fcf.panid_compression = 0;
  }

  /* determine address lengths */
  flen->dest_addr_len = addr_len(p->fcf.dest_addr_mode & 3);
    b150:	704b      	strb	r3, [r1, #1]
  flen->src_addr_len = addr_len(p->fcf.src_addr_mode & 3);
    b152:	79c3      	ldrb	r3, [r0, #7]
    b154:	2203      	movs	r2, #3
    b156:	4013      	ands	r3, r2

/*----------------------------------------------------------------------------*/
CC_INLINE static uint8_t
addr_len(uint8_t mode)
{
  switch(mode) {
    b158:	2b02      	cmp	r3, #2
    b15a:	d003      	beq.n	b164 <field_len+0x68>
  case FRAME802154_SHORTADDRMODE:  /* 16-bit address */
    return 2;
  case FRAME802154_LONGADDRMODE:   /* 64-bit address */
    return 8;
  default:
    return 0;
    b15c:	3b03      	subs	r3, #3
    b15e:	425a      	negs	r2, r3
    b160:	4153      	adcs	r3, r2
    b162:	00db      	lsls	r3, r3, #3
    p->fcf.panid_compression = 0;
  }

  /* determine address lengths */
  flen->dest_addr_len = addr_len(p->fcf.dest_addr_mode & 3);
  flen->src_addr_len = addr_len(p->fcf.src_addr_mode & 3);
    b164:	70cb      	strb	r3, [r1, #3]
    default:
      break;
    }
#endif
  }
}
    b166:	4770      	bx	lr

0000b168 <frame802154_hdrlen>:
 *
 *   \return The length of the frame header.
*/
int
frame802154_hdrlen(frame802154_t *p)
{
    b168:	b500      	push	{lr}
    b16a:	b083      	sub	sp, #12
  field_length_t flen;
  field_len(p, &flen);
    b16c:	4669      	mov	r1, sp
    b16e:	4b09      	ldr	r3, [pc, #36]	; (b194 <frame802154_hdrlen+0x2c>)
    b170:	4798      	blx	r3
  return 3 + flen.dest_pid_len + flen.dest_addr_len +
    b172:	466b      	mov	r3, sp
    b174:	7818      	ldrb	r0, [r3, #0]
    b176:	3003      	adds	r0, #3
    b178:	785b      	ldrb	r3, [r3, #1]
    b17a:	18c0      	adds	r0, r0, r3
    b17c:	466b      	mov	r3, sp
    b17e:	789b      	ldrb	r3, [r3, #2]
    b180:	18c0      	adds	r0, r0, r3
    flen.src_pid_len + flen.src_addr_len + flen.aux_sec_len;
    b182:	466b      	mov	r3, sp
    b184:	78db      	ldrb	r3, [r3, #3]
    b186:	18c0      	adds	r0, r0, r3
    b188:	466b      	mov	r3, sp
    b18a:	791b      	ldrb	r3, [r3, #4]
int
frame802154_hdrlen(frame802154_t *p)
{
  field_length_t flen;
  field_len(p, &flen);
  return 3 + flen.dest_pid_len + flen.dest_addr_len +
    b18c:	18c0      	adds	r0, r0, r3
    flen.src_pid_len + flen.src_addr_len + flen.aux_sec_len;
}
    b18e:	b003      	add	sp, #12
    b190:	bd00      	pop	{pc}
    b192:	46c0      	nop			; (mov r8, r8)
    b194:	0000b0fd 	.word	0x0000b0fd

0000b198 <frame802154_create>:
 *   \return The length of the frame header or 0 if there was
 *   insufficient space in the buffer for the frame headers.
*/
int
frame802154_create(frame802154_t *p, uint8_t *buf, int buf_len)
{
    b198:	b5f0      	push	{r4, r5, r6, r7, lr}
    b19a:	465f      	mov	r7, fp
    b19c:	4656      	mov	r6, sl
    b19e:	464d      	mov	r5, r9
    b1a0:	4644      	mov	r4, r8
    b1a2:	b4f0      	push	{r4, r5, r6, r7}
    b1a4:	b085      	sub	sp, #20
    b1a6:	1c05      	adds	r5, r0, #0
    b1a8:	1c0c      	adds	r4, r1, #0
    b1aa:	4690      	mov	r8, r2
  int c;
  field_length_t flen;
  uint8_t *tx_frame_buffer;
  uint8_t pos;

  field_len(p, &flen);
    b1ac:	a902      	add	r1, sp, #8
    b1ae:	4b3e      	ldr	r3, [pc, #248]	; (b2a8 <frame802154_create+0x110>)
    b1b0:	4798      	blx	r3

  if(3 + flen.dest_pid_len + flen.dest_addr_len +
    b1b2:	ab02      	add	r3, sp, #8
    b1b4:	7819      	ldrb	r1, [r3, #0]
    b1b6:	785b      	ldrb	r3, [r3, #1]
    b1b8:	469b      	mov	fp, r3
    b1ba:	1c1e      	adds	r6, r3, #0
     flen.src_pid_len + flen.src_addr_len + flen.aux_sec_len > buf_len) {
    b1bc:	ab02      	add	r3, sp, #8
    b1be:	789b      	ldrb	r3, [r3, #2]
    b1c0:	469c      	mov	ip, r3
    b1c2:	ab02      	add	r3, sp, #8
    b1c4:	78db      	ldrb	r3, [r3, #3]
    b1c6:	4699      	mov	r9, r3
    b1c8:	9301      	str	r3, [sp, #4]
  uint8_t *tx_frame_buffer;
  uint8_t pos;

  field_len(p, &flen);

  if(3 + flen.dest_pid_len + flen.dest_addr_len +
    b1ca:	1cca      	adds	r2, r1, #3
    b1cc:	445a      	add	r2, fp
    b1ce:	4462      	add	r2, ip
     flen.src_pid_len + flen.src_addr_len + flen.aux_sec_len > buf_len) {
    b1d0:	444a      	add	r2, r9
    b1d2:	ab02      	add	r3, sp, #8
    b1d4:	7918      	ldrb	r0, [r3, #4]
    b1d6:	1812      	adds	r2, r2, r0
    /* Too little space for headers. */
    return 0;
    b1d8:	2000      	movs	r0, #0
  uint8_t *tx_frame_buffer;
  uint8_t pos;

  field_len(p, &flen);

  if(3 + flen.dest_pid_len + flen.dest_addr_len +
    b1da:	4542      	cmp	r2, r8
    b1dc:	dc5c      	bgt.n	b298 <frame802154_create+0x100>

  /* OK, now we have field lengths.  Time to actually construct */
  /* the outgoing frame, and store it in tx_frame_buffer */
  tx_frame_buffer = buf;
  tx_frame_buffer[0] = (p->fcf.frame_type & 7) |
    ((p->fcf.security_enabled & 1) << 3) |
    b1de:	7868      	ldrb	r0, [r5, #1]
    b1e0:	2301      	movs	r3, #1
    b1e2:	4018      	ands	r0, r3
    b1e4:	00c0      	lsls	r0, r0, #3
    ((p->fcf.frame_pending & 1) << 4) |
    b1e6:	78aa      	ldrb	r2, [r5, #2]
    b1e8:	401a      	ands	r2, r3
    b1ea:	0112      	lsls	r2, r2, #4
    b1ec:	4310      	orrs	r0, r2
  }

  /* OK, now we have field lengths.  Time to actually construct */
  /* the outgoing frame, and store it in tx_frame_buffer */
  tx_frame_buffer = buf;
  tx_frame_buffer[0] = (p->fcf.frame_type & 7) |
    b1ee:	782a      	ldrb	r2, [r5, #0]
    b1f0:	2707      	movs	r7, #7
    b1f2:	403a      	ands	r2, r7
    b1f4:	4310      	orrs	r0, r2
    ((p->fcf.security_enabled & 1) << 3) |
    ((p->fcf.frame_pending & 1) << 4) |
    ((p->fcf.ack_required & 1) << 5) |
    b1f6:	78ea      	ldrb	r2, [r5, #3]
    b1f8:	401a      	ands	r2, r3
    b1fa:	0152      	lsls	r2, r2, #5
  }

  /* OK, now we have field lengths.  Time to actually construct */
  /* the outgoing frame, and store it in tx_frame_buffer */
  tx_frame_buffer = buf;
  tx_frame_buffer[0] = (p->fcf.frame_type & 7) |
    b1fc:	4302      	orrs	r2, r0
    ((p->fcf.security_enabled & 1) << 3) |
    ((p->fcf.frame_pending & 1) << 4) |
    ((p->fcf.ack_required & 1) << 5) |
    ((p->fcf.panid_compression & 1) << 6);
    b1fe:	7928      	ldrb	r0, [r5, #4]
    b200:	4018      	ands	r0, r3
    b202:	0180      	lsls	r0, r0, #6
  }

  /* OK, now we have field lengths.  Time to actually construct */
  /* the outgoing frame, and store it in tx_frame_buffer */
  tx_frame_buffer = buf;
  tx_frame_buffer[0] = (p->fcf.frame_type & 7) |
    b204:	4302      	orrs	r2, r0
    b206:	7022      	strb	r2, [r4, #0]
    ((p->fcf.security_enabled & 1) << 3) |
    ((p->fcf.frame_pending & 1) << 4) |
    ((p->fcf.ack_required & 1) << 5) |
    ((p->fcf.panid_compression & 1) << 6);
  tx_frame_buffer[1] = ((p->fcf.dest_addr_mode & 3) << 2) |
    b208:	7968      	ldrb	r0, [r5, #5]
    b20a:	2203      	movs	r2, #3
    b20c:	4010      	ands	r0, r2
    b20e:	0083      	lsls	r3, r0, #2
    ((p->fcf.frame_version & 3) << 4) |
    b210:	79a8      	ldrb	r0, [r5, #6]
    b212:	4002      	ands	r2, r0
    b214:	0112      	lsls	r2, r2, #4
  tx_frame_buffer[0] = (p->fcf.frame_type & 7) |
    ((p->fcf.security_enabled & 1) << 3) |
    ((p->fcf.frame_pending & 1) << 4) |
    ((p->fcf.ack_required & 1) << 5) |
    ((p->fcf.panid_compression & 1) << 6);
  tx_frame_buffer[1] = ((p->fcf.dest_addr_mode & 3) << 2) |
    b216:	431a      	orrs	r2, r3
    ((p->fcf.frame_version & 3) << 4) |
    ((p->fcf.src_addr_mode & 3) << 6);
    b218:	79e8      	ldrb	r0, [r5, #7]
    b21a:	0180      	lsls	r0, r0, #6
  tx_frame_buffer[0] = (p->fcf.frame_type & 7) |
    ((p->fcf.security_enabled & 1) << 3) |
    ((p->fcf.frame_pending & 1) << 4) |
    ((p->fcf.ack_required & 1) << 5) |
    ((p->fcf.panid_compression & 1) << 6);
  tx_frame_buffer[1] = ((p->fcf.dest_addr_mode & 3) << 2) |
    b21c:	4302      	orrs	r2, r0
    b21e:	7062      	strb	r2, [r4, #1]
    ((p->fcf.frame_version & 3) << 4) |
    ((p->fcf.src_addr_mode & 3) << 6);

  /* sequence number */
  tx_frame_buffer[2] = p->seq;
    b220:	7a2a      	ldrb	r2, [r5, #8]
    b222:	70a2      	strb	r2, [r4, #2]
  pos = 3;
    b224:	2003      	movs	r0, #3

  /* Destination PAN ID */
  if(flen.dest_pid_len == 2) {
    b226:	2902      	cmp	r1, #2
    b228:	d105      	bne.n	b236 <frame802154_create+0x9e>
    tx_frame_buffer[pos++] = p->dest_pid & 0xff;
    b22a:	896a      	ldrh	r2, [r5, #10]
    b22c:	70e2      	strb	r2, [r4, #3]
    tx_frame_buffer[pos++] = (p->dest_pid >> 8) & 0xff;
    b22e:	896a      	ldrh	r2, [r5, #10]
    b230:	0a12      	lsrs	r2, r2, #8
    b232:	7122      	strb	r2, [r4, #4]
    b234:	3002      	adds	r0, #2
  }

  /* Destination address */
  for(c = flen.dest_addr_len; c > 0; c--) {
    b236:	2e00      	cmp	r6, #0
    b238:	dd0f      	ble.n	b25a <frame802154_create+0xc2>
    b23a:	465a      	mov	r2, fp
    b23c:	320b      	adds	r2, #11
    b23e:	18aa      	adds	r2, r5, r2
    b240:	465b      	mov	r3, fp
    b242:	18c3      	adds	r3, r0, r3
    b244:	b2d9      	uxtb	r1, r3
    b246:	1c03      	adds	r3, r0, #0
    tx_frame_buffer[pos++] = p->dest_addr[c - 1];
    b248:	1c5e      	adds	r6, r3, #1
    b24a:	7817      	ldrb	r7, [r2, #0]
    b24c:	54e7      	strb	r7, [r4, r3]
    b24e:	3a01      	subs	r2, #1
    b250:	b2f3      	uxtb	r3, r6
    tx_frame_buffer[pos++] = p->dest_pid & 0xff;
    tx_frame_buffer[pos++] = (p->dest_pid >> 8) & 0xff;
  }

  /* Destination address */
  for(c = flen.dest_addr_len; c > 0; c--) {
    b252:	428b      	cmp	r3, r1
    b254:	d1f8      	bne.n	b248 <frame802154_create+0xb0>
    b256:	4458      	add	r0, fp
    b258:	b2c0      	uxtb	r0, r0
    tx_frame_buffer[pos++] = p->dest_addr[c - 1];
  }

  /* Source PAN ID */
  if(flen.src_pid_len == 2) {
    b25a:	4663      	mov	r3, ip
    b25c:	2b02      	cmp	r3, #2
    b25e:	d108      	bne.n	b272 <frame802154_create+0xda>
    tx_frame_buffer[pos++] = p->src_pid & 0xff;
    b260:	1c43      	adds	r3, r0, #1
    b262:	b2db      	uxtb	r3, r3
    b264:	8aaa      	ldrh	r2, [r5, #20]
    b266:	5422      	strb	r2, [r4, r0]
    tx_frame_buffer[pos++] = (p->src_pid >> 8) & 0xff;
    b268:	3002      	adds	r0, #2
    b26a:	b2c0      	uxtb	r0, r0
    b26c:	8aaa      	ldrh	r2, [r5, #20]
    b26e:	0a12      	lsrs	r2, r2, #8
    b270:	54e2      	strb	r2, [r4, r3]
  }

  /* Source address */
  for(c = flen.src_addr_len; c > 0; c--) {
    b272:	9b01      	ldr	r3, [sp, #4]
    b274:	2b00      	cmp	r3, #0
    b276:	dd0f      	ble.n	b298 <frame802154_create+0x100>
    b278:	464a      	mov	r2, r9
    b27a:	3215      	adds	r2, #21
    b27c:	18aa      	adds	r2, r5, r2
    b27e:	464b      	mov	r3, r9
    b280:	18c7      	adds	r7, r0, r3
    b282:	b2ff      	uxtb	r7, r7
    b284:	1c03      	adds	r3, r0, #0
    tx_frame_buffer[pos++] = p->src_addr[c - 1];
    b286:	1c59      	adds	r1, r3, #1
    b288:	7815      	ldrb	r5, [r2, #0]
    b28a:	54e5      	strb	r5, [r4, r3]
    b28c:	3a01      	subs	r2, #1
    b28e:	b2cb      	uxtb	r3, r1
    tx_frame_buffer[pos++] = p->src_pid & 0xff;
    tx_frame_buffer[pos++] = (p->src_pid >> 8) & 0xff;
  }

  /* Source address */
  for(c = flen.src_addr_len; c > 0; c--) {
    b290:	42bb      	cmp	r3, r7
    b292:	d1f8      	bne.n	b286 <frame802154_create+0xee>
    b294:	4448      	add	r0, r9
    b296:	b2c0      	uxtb	r0, r0
    /* TODO Aux security header not yet implemented */
/*     pos += flen.aux_sec_len; */
  }

  return (int)pos;
}
    b298:	b005      	add	sp, #20
    b29a:	bc3c      	pop	{r2, r3, r4, r5}
    b29c:	4690      	mov	r8, r2
    b29e:	4699      	mov	r9, r3
    b2a0:	46a2      	mov	sl, r4
    b2a2:	46ab      	mov	fp, r5
    b2a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    b2a6:	46c0      	nop			; (mov r8, r8)
    b2a8:	0000b0fd 	.word	0x0000b0fd

0000b2ac <frame802154_parse>:
 *   \param len The size of the input data
 *   \param pf The frame802154_t struct to store the parsed frame information.
 */
int
frame802154_parse(uint8_t *data, int len, frame802154_t *pf)
{
    b2ac:	b5f0      	push	{r4, r5, r6, r7, lr}
    b2ae:	4657      	mov	r7, sl
    b2b0:	464e      	mov	r6, r9
    b2b2:	4645      	mov	r5, r8
    b2b4:	b4e0      	push	{r5, r6, r7}
  uint8_t *p;
  frame802154_fcf_t fcf;
  int c;

  if(len < 3) {
    return 0;
    b2b6:	2300      	movs	r3, #0
{
  uint8_t *p;
  frame802154_fcf_t fcf;
  int c;

  if(len < 3) {
    b2b8:	2902      	cmp	r1, #2
    b2ba:	dc00      	bgt.n	b2be <frame802154_parse+0x12>
    b2bc:	e08b      	b.n	b3d6 <frame802154_parse+0x12a>
    b2be:	1c14      	adds	r4, r2, #0
    b2c0:	468a      	mov	sl, r1
    b2c2:	1c05      	adds	r5, r0, #0
  }

  p = data;

  /* decode the FCF */
  fcf.frame_type = p[0] & 7;
    b2c4:	7803      	ldrb	r3, [r0, #0]
  fcf.security_enabled = (p[0] >> 3) & 1;
  fcf.frame_pending = (p[0] >> 4) & 1;
  fcf.ack_required = (p[0] >> 5) & 1;
  fcf.panid_compression = (p[0] >> 6) & 1;
    b2c6:	099f      	lsrs	r7, r3, #6
    b2c8:	2001      	movs	r0, #1
    b2ca:	4007      	ands	r7, r0

  fcf.dest_addr_mode = (p[1] >> 2) & 3;
    b2cc:	786a      	ldrb	r2, [r5, #1]
    b2ce:	0891      	lsrs	r1, r2, #2
    b2d0:	2603      	movs	r6, #3
    b2d2:	46b4      	mov	ip, r6
    b2d4:	4031      	ands	r1, r6
  fcf.frame_version = (p[1] >> 4) & 3;
  fcf.src_addr_mode = (p[1] >> 6) & 3;
    b2d6:	0996      	lsrs	r6, r2, #6
    b2d8:	46b0      	mov	r8, r6
  }

  p = data;

  /* decode the FCF */
  fcf.frame_type = p[0] & 7;
    b2da:	2607      	movs	r6, #7
    b2dc:	401e      	ands	r6, r3
  fcf.dest_addr_mode = (p[1] >> 2) & 3;
  fcf.frame_version = (p[1] >> 4) & 3;
  fcf.src_addr_mode = (p[1] >> 6) & 3;

  /* copy fcf and seqNum */
  memcpy(&pf->fcf, &fcf, sizeof(frame802154_fcf_t));
    b2de:	7026      	strb	r6, [r4, #0]

  p = data;

  /* decode the FCF */
  fcf.frame_type = p[0] & 7;
  fcf.security_enabled = (p[0] >> 3) & 1;
    b2e0:	08de      	lsrs	r6, r3, #3
    b2e2:	4006      	ands	r6, r0
  fcf.dest_addr_mode = (p[1] >> 2) & 3;
  fcf.frame_version = (p[1] >> 4) & 3;
  fcf.src_addr_mode = (p[1] >> 6) & 3;

  /* copy fcf and seqNum */
  memcpy(&pf->fcf, &fcf, sizeof(frame802154_fcf_t));
    b2e4:	7066      	strb	r6, [r4, #1]
  p = data;

  /* decode the FCF */
  fcf.frame_type = p[0] & 7;
  fcf.security_enabled = (p[0] >> 3) & 1;
  fcf.frame_pending = (p[0] >> 4) & 1;
    b2e6:	091e      	lsrs	r6, r3, #4
    b2e8:	4006      	ands	r6, r0
  fcf.dest_addr_mode = (p[1] >> 2) & 3;
  fcf.frame_version = (p[1] >> 4) & 3;
  fcf.src_addr_mode = (p[1] >> 6) & 3;

  /* copy fcf and seqNum */
  memcpy(&pf->fcf, &fcf, sizeof(frame802154_fcf_t));
    b2ea:	70a6      	strb	r6, [r4, #2]

  /* decode the FCF */
  fcf.frame_type = p[0] & 7;
  fcf.security_enabled = (p[0] >> 3) & 1;
  fcf.frame_pending = (p[0] >> 4) & 1;
  fcf.ack_required = (p[0] >> 5) & 1;
    b2ec:	095b      	lsrs	r3, r3, #5
    b2ee:	4003      	ands	r3, r0
  fcf.dest_addr_mode = (p[1] >> 2) & 3;
  fcf.frame_version = (p[1] >> 4) & 3;
  fcf.src_addr_mode = (p[1] >> 6) & 3;

  /* copy fcf and seqNum */
  memcpy(&pf->fcf, &fcf, sizeof(frame802154_fcf_t));
    b2f0:	70e3      	strb	r3, [r4, #3]
    b2f2:	7127      	strb	r7, [r4, #4]
    b2f4:	7161      	strb	r1, [r4, #5]
  fcf.frame_pending = (p[0] >> 4) & 1;
  fcf.ack_required = (p[0] >> 5) & 1;
  fcf.panid_compression = (p[0] >> 6) & 1;

  fcf.dest_addr_mode = (p[1] >> 2) & 3;
  fcf.frame_version = (p[1] >> 4) & 3;
    b2f6:	0912      	lsrs	r2, r2, #4
    b2f8:	4663      	mov	r3, ip
    b2fa:	401a      	ands	r2, r3
  fcf.src_addr_mode = (p[1] >> 6) & 3;

  /* copy fcf and seqNum */
  memcpy(&pf->fcf, &fcf, sizeof(frame802154_fcf_t));
    b2fc:	71a2      	strb	r2, [r4, #6]
    b2fe:	4643      	mov	r3, r8
    b300:	71e3      	strb	r3, [r4, #7]
  pf->seq = p[2];
    b302:	78ab      	ldrb	r3, [r5, #2]
    b304:	7223      	strb	r3, [r4, #8]
  p += 3;                             /* Skip first three bytes */

  /* Destination address, if any */
  if(fcf.dest_addr_mode) {
    b306:	2900      	cmp	r1, #0
    b308:	d022      	beq.n	b350 <frame802154_parse+0xa4>
    /* Destination PAN */
    pf->dest_pid = p[0] + (p[1] << 8);
    b30a:	792b      	ldrb	r3, [r5, #4]
    b30c:	021b      	lsls	r3, r3, #8
    b30e:	78ea      	ldrb	r2, [r5, #3]
    b310:	18d3      	adds	r3, r2, r3
    b312:	8163      	strh	r3, [r4, #10]
    p += 2;
    b314:	1d6e      	adds	r6, r5, #5
/*     l = addr_len(fcf.dest_addr_mode); */
/*     for(c = 0; c < l; c++) { */
/*       pf->dest_addr.u8[c] = p[l - c - 1]; */
/*     } */
/*     p += l; */
    if(fcf.dest_addr_mode == FRAME802154_SHORTADDRMODE) {
    b316:	2902      	cmp	r1, #2
    b318:	d10a      	bne.n	b330 <frame802154_parse+0x84>
      linkaddr_copy((linkaddr_t *)&(pf->dest_addr), &linkaddr_null);
    b31a:	1c20      	adds	r0, r4, #0
    b31c:	300c      	adds	r0, #12
    b31e:	4931      	ldr	r1, [pc, #196]	; (b3e4 <frame802154_parse+0x138>)
    b320:	4b31      	ldr	r3, [pc, #196]	; (b3e8 <frame802154_parse+0x13c>)
    b322:	4798      	blx	r3
      pf->dest_addr[0] = p[1];
    b324:	79ab      	ldrb	r3, [r5, #6]
    b326:	7323      	strb	r3, [r4, #12]
      pf->dest_addr[1] = p[0];
    b328:	796b      	ldrb	r3, [r5, #5]
    b32a:	7363      	strb	r3, [r4, #13]
      p += 2;
    b32c:	1dee      	adds	r6, r5, #7
    b32e:	e017      	b.n	b360 <frame802154_parse+0xb4>
    } else if(fcf.dest_addr_mode == FRAME802154_LONGADDRMODE) {
    b330:	2903      	cmp	r1, #3
    b332:	d115      	bne.n	b360 <frame802154_parse+0xb4>
    b334:	1c2b      	adds	r3, r5, #0
    b336:	330c      	adds	r3, #12
    b338:	1c22      	adds	r2, r4, #0
    b33a:	320c      	adds	r2, #12
    b33c:	1d28      	adds	r0, r5, #4
      for(c = 0; c < 8; c++) {
        pf->dest_addr[c] = p[7 - c];
    b33e:	7819      	ldrb	r1, [r3, #0]
    b340:	7011      	strb	r1, [r2, #0]
    b342:	3b01      	subs	r3, #1
    b344:	3201      	adds	r2, #1
      linkaddr_copy((linkaddr_t *)&(pf->dest_addr), &linkaddr_null);
      pf->dest_addr[0] = p[1];
      pf->dest_addr[1] = p[0];
      p += 2;
    } else if(fcf.dest_addr_mode == FRAME802154_LONGADDRMODE) {
      for(c = 0; c < 8; c++) {
    b346:	4283      	cmp	r3, r0
    b348:	d1f9      	bne.n	b33e <frame802154_parse+0x92>
        pf->dest_addr[c] = p[7 - c];
      }
      p += 8;
    b34a:	1c2e      	adds	r6, r5, #0
    b34c:	360d      	adds	r6, #13
    b34e:	e007      	b.n	b360 <frame802154_parse+0xb4>
  fcf.src_addr_mode = (p[1] >> 6) & 3;

  /* copy fcf and seqNum */
  memcpy(&pf->fcf, &fcf, sizeof(frame802154_fcf_t));
  pf->seq = p[2];
  p += 3;                             /* Skip first three bytes */
    b350:	1cee      	adds	r6, r5, #3
        pf->dest_addr[c] = p[7 - c];
      }
      p += 8;
    }
  } else {
    linkaddr_copy((linkaddr_t *)&(pf->dest_addr), &linkaddr_null);
    b352:	1c20      	adds	r0, r4, #0
    b354:	300c      	adds	r0, #12
    b356:	4923      	ldr	r1, [pc, #140]	; (b3e4 <frame802154_parse+0x138>)
    b358:	4b23      	ldr	r3, [pc, #140]	; (b3e8 <frame802154_parse+0x13c>)
    b35a:	4798      	blx	r3
    pf->dest_pid = 0;
    b35c:	2300      	movs	r3, #0
    b35e:	8163      	strh	r3, [r4, #10]
  }

  /* Source address, if any */
  if(fcf.src_addr_mode) {
    b360:	4643      	mov	r3, r8
    b362:	2b00      	cmp	r3, #0
    b364:	d027      	beq.n	b3b6 <frame802154_parse+0x10a>
    /* Source PAN */
    if(!fcf.panid_compression) {
    b366:	2f00      	cmp	r7, #0
    b368:	d106      	bne.n	b378 <frame802154_parse+0xcc>
      pf->src_pid = p[0] + (p[1] << 8);
    b36a:	7873      	ldrb	r3, [r6, #1]
    b36c:	021b      	lsls	r3, r3, #8
    b36e:	7832      	ldrb	r2, [r6, #0]
    b370:	18d3      	adds	r3, r2, r3
    b372:	82a3      	strh	r3, [r4, #20]
      p += 2;
    b374:	3602      	adds	r6, #2
    b376:	e001      	b.n	b37c <frame802154_parse+0xd0>
    } else {
      pf->src_pid = pf->dest_pid;
    b378:	8963      	ldrh	r3, [r4, #10]
    b37a:	82a3      	strh	r3, [r4, #20]
/*     l = addr_len(fcf.src_addr_mode); */
/*     for(c = 0; c < l; c++) { */
/*       pf->src_addr.u8[c] = p[l - c - 1]; */
/*     } */
/*     p += l; */
    if(fcf.src_addr_mode == FRAME802154_SHORTADDRMODE) {
    b37c:	4643      	mov	r3, r8
    b37e:	2b02      	cmp	r3, #2
    b380:	d10a      	bne.n	b398 <frame802154_parse+0xec>
      linkaddr_copy((linkaddr_t *)&(pf->src_addr), &linkaddr_null);
    b382:	1c20      	adds	r0, r4, #0
    b384:	3016      	adds	r0, #22
    b386:	4917      	ldr	r1, [pc, #92]	; (b3e4 <frame802154_parse+0x138>)
    b388:	4b17      	ldr	r3, [pc, #92]	; (b3e8 <frame802154_parse+0x13c>)
    b38a:	4798      	blx	r3
      pf->src_addr[0] = p[1];
    b38c:	7873      	ldrb	r3, [r6, #1]
    b38e:	75a3      	strb	r3, [r4, #22]
      pf->src_addr[1] = p[0];
    b390:	7833      	ldrb	r3, [r6, #0]
    b392:	75e3      	strb	r3, [r4, #23]
      p += 2;
    b394:	3602      	adds	r6, #2
    b396:	e015      	b.n	b3c4 <frame802154_parse+0x118>
    } else if(fcf.src_addr_mode == FRAME802154_LONGADDRMODE) {
    b398:	4643      	mov	r3, r8
    b39a:	2b03      	cmp	r3, #3
    b39c:	d112      	bne.n	b3c4 <frame802154_parse+0x118>
    b39e:	1df3      	adds	r3, r6, #7
    b3a0:	1c22      	adds	r2, r4, #0
    b3a2:	3216      	adds	r2, #22
    b3a4:	1e70      	subs	r0, r6, #1
      for(c = 0; c < 8; c++) {
        pf->src_addr[c] = p[7 - c];
    b3a6:	7819      	ldrb	r1, [r3, #0]
    b3a8:	7011      	strb	r1, [r2, #0]
    b3aa:	3b01      	subs	r3, #1
    b3ac:	3201      	adds	r2, #1
      linkaddr_copy((linkaddr_t *)&(pf->src_addr), &linkaddr_null);
      pf->src_addr[0] = p[1];
      pf->src_addr[1] = p[0];
      p += 2;
    } else if(fcf.src_addr_mode == FRAME802154_LONGADDRMODE) {
      for(c = 0; c < 8; c++) {
    b3ae:	4283      	cmp	r3, r0
    b3b0:	d1f9      	bne.n	b3a6 <frame802154_parse+0xfa>
        pf->src_addr[c] = p[7 - c];
      }
      p += 8;
    b3b2:	3608      	adds	r6, #8
    b3b4:	e006      	b.n	b3c4 <frame802154_parse+0x118>
    }
  } else {
    linkaddr_copy((linkaddr_t *)&(pf->src_addr), &linkaddr_null);
    b3b6:	1c20      	adds	r0, r4, #0
    b3b8:	3016      	adds	r0, #22
    b3ba:	490a      	ldr	r1, [pc, #40]	; (b3e4 <frame802154_parse+0x138>)
    b3bc:	4b0a      	ldr	r3, [pc, #40]	; (b3e8 <frame802154_parse+0x13c>)
    b3be:	4798      	blx	r3
    pf->src_pid = 0;
    b3c0:	2300      	movs	r3, #0
    b3c2:	82a3      	strh	r3, [r4, #20]
    /* TODO aux security header, not yet implemented */
/*     return 0; */
  }

  /* header length */
  c = p - data;
    b3c4:	1b75      	subs	r5, r6, r5
  /* payload length */
  pf->payload_len = (len - c);
    b3c6:	4653      	mov	r3, sl
    b3c8:	1b5b      	subs	r3, r3, r5
    b3ca:	63a3      	str	r3, [r4, #56]	; 0x38
  /* payload */
  pf->payload = p;
    b3cc:	6366      	str	r6, [r4, #52]	; 0x34

  /* return header length if successful */
  return c > len ? 0 : c;
    b3ce:	2300      	movs	r3, #0
    b3d0:	45aa      	cmp	sl, r5
    b3d2:	db00      	blt.n	b3d6 <frame802154_parse+0x12a>
    b3d4:	1c2b      	adds	r3, r5, #0
}
    b3d6:	1c18      	adds	r0, r3, #0
    b3d8:	bc1c      	pop	{r2, r3, r4}
    b3da:	4690      	mov	r8, r2
    b3dc:	4699      	mov	r9, r3
    b3de:	46a2      	mov	sl, r4
    b3e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    b3e2:	46c0      	nop			; (mov r8, r8)
    b3e4:	00012e30 	.word	0x00012e30
    b3e8:	0000ac6d 	.word	0x0000ac6d

0000b3ec <parse>:
  }
}
/*---------------------------------------------------------------------------*/
static int
parse(void)
{
    b3ec:	b530      	push	{r4, r5, lr}
    b3ee:	b091      	sub	sp, #68	; 0x44
  frame802154_t frame;
  int len;
  len = packetbuf_datalen();
    b3f0:	4b24      	ldr	r3, [pc, #144]	; (b484 <parse+0x98>)
    b3f2:	4798      	blx	r3
    b3f4:	1c04      	adds	r4, r0, #0
  if(frame802154_parse(packetbuf_dataptr(), len, &frame) &&
    b3f6:	4b24      	ldr	r3, [pc, #144]	; (b488 <parse+0x9c>)
    b3f8:	4798      	blx	r3
    b3fa:	1c21      	adds	r1, r4, #0
    b3fc:	aa01      	add	r2, sp, #4
    b3fe:	4b23      	ldr	r3, [pc, #140]	; (b48c <parse+0xa0>)
    b400:	4798      	blx	r3
    b402:	2800      	cmp	r0, #0
    b404:	d02d      	beq.n	b462 <parse+0x76>
     packetbuf_hdrreduce(len - frame.payload_len)) {
    b406:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    b408:	1ae0      	subs	r0, r4, r3
    b40a:	4b21      	ldr	r3, [pc, #132]	; (b490 <parse+0xa4>)
    b40c:	4798      	blx	r3
parse(void)
{
  frame802154_t frame;
  int len;
  len = packetbuf_datalen();
  if(frame802154_parse(packetbuf_dataptr(), len, &frame) &&
    b40e:	2800      	cmp	r0, #0
    b410:	d02a      	beq.n	b468 <parse+0x7c>
     packetbuf_hdrreduce(len - frame.payload_len)) {
    if(frame.fcf.dest_addr_mode) {
    b412:	ab01      	add	r3, sp, #4
    b414:	795b      	ldrb	r3, [r3, #5]
    b416:	2b00      	cmp	r3, #0
    b418:	d015      	beq.n	b446 <parse+0x5a>
      if(frame.dest_pid != mac_src_pan_id &&
    b41a:	aa01      	add	r2, sp, #4
    b41c:	8952      	ldrh	r2, [r2, #10]
    b41e:	491d      	ldr	r1, [pc, #116]	; (b494 <parse+0xa8>)
    b420:	428a      	cmp	r2, r1
    b422:	d002      	beq.n	b42a <parse+0x3e>
    b424:	491c      	ldr	r1, [pc, #112]	; (b498 <parse+0xac>)
    b426:	428a      	cmp	r2, r1
    b428:	d121      	bne.n	b46e <parse+0x82>

/*---------------------------------------------------------------------------*/
static int
is_broadcast_addr(uint8_t mode, uint8_t *addr)
{
  int i = mode == FRAME802154_SHORTADDRMODE ? 2 : 8;
    b42a:	2b02      	cmp	r3, #2
    b42c:	d008      	beq.n	b440 <parse+0x54>
    b42e:	2308      	movs	r3, #8
    b430:	e007      	b.n	b442 <parse+0x56>
    b432:	3b01      	subs	r3, #1
    b434:	aa01      	add	r2, sp, #4
    b436:	18d2      	adds	r2, r2, r3
  while(i-- > 0) {
    if(addr[i] != 0xff) {
    b438:	7b12      	ldrb	r2, [r2, #12]
    b43a:	2aff      	cmp	r2, #255	; 0xff
    b43c:	d001      	beq.n	b442 <parse+0x56>
    b43e:	e019      	b.n	b474 <parse+0x88>

/*---------------------------------------------------------------------------*/
static int
is_broadcast_addr(uint8_t mode, uint8_t *addr)
{
  int i = mode == FRAME802154_SHORTADDRMODE ? 2 : 8;
    b440:	2302      	movs	r3, #2
  while(i-- > 0) {
    b442:	2b00      	cmp	r3, #0
    b444:	dcf5      	bgt.n	b432 <parse+0x46>

static inline int
packetbuf_set_addr(uint8_t type, const linkaddr_t *addr)
{
/*   packetbuf_addrs[type - PACKETBUF_ADDR_FIRST].type = type; */
  linkaddr_copy(&packetbuf_addrs[type - PACKETBUF_ADDR_FIRST].addr, addr);
    b446:	ad01      	add	r5, sp, #4
    b448:	4814      	ldr	r0, [pc, #80]	; (b49c <parse+0xb0>)
    b44a:	211a      	movs	r1, #26
    b44c:	4469      	add	r1, sp
    b44e:	4b14      	ldr	r3, [pc, #80]	; (b4a0 <parse+0xb4>)
    b450:	4798      	blx	r3

static inline int
packetbuf_set_attr(uint8_t type, const packetbuf_attr_t val)
{
/*   packetbuf_attrs[type].type = type; */
  packetbuf_attrs[type].val = val;
    b452:	4b14      	ldr	r3, [pc, #80]	; (b4a4 <parse+0xb8>)
      if(!is_broadcast_addr(frame.fcf.dest_addr_mode, frame.dest_addr)) {
        packetbuf_set_addr(PACKETBUF_ADDR_RECEIVER, (linkaddr_t *)&frame.dest_addr);
      }
    }
    packetbuf_set_addr(PACKETBUF_ADDR_SENDER, (linkaddr_t *)&frame.src_addr);
    packetbuf_set_attr(PACKETBUF_ATTR_PENDING, frame.fcf.frame_pending);
    b454:	78aa      	ldrb	r2, [r5, #2]
    b456:	859a      	strh	r2, [r3, #44]	; 0x2c
    /*    packetbuf_set_attr(PACKETBUF_ATTR_RELIABLE, frame.fcf.ack_required);*/
    packetbuf_set_attr(PACKETBUF_ATTR_PACKET_ID, frame.seq);
    b458:	7a2a      	ldrb	r2, [r5, #8]
    b45a:	845a      	strh	r2, [r3, #34]	; 0x22
    PRINTF("15.4-IN: %2X", frame.fcf.frame_type);
    PRINTADDR(packetbuf_addr(PACKETBUF_ADDR_SENDER));
    PRINTADDR(packetbuf_addr(PACKETBUF_ADDR_RECEIVER));
    PRINTF("%u (%u)\n\r", packetbuf_datalen(), len);

    return len - frame.payload_len;
    b45c:	6ba8      	ldr	r0, [r5, #56]	; 0x38
    b45e:	1a20      	subs	r0, r4, r0
    b460:	e00d      	b.n	b47e <parse+0x92>
  }
  return FRAMER_FAILED;
    b462:	2001      	movs	r0, #1
    b464:	4240      	negs	r0, r0
    b466:	e00a      	b.n	b47e <parse+0x92>
    b468:	2001      	movs	r0, #1
    b46a:	4240      	negs	r0, r0
    b46c:	e007      	b.n	b47e <parse+0x92>
    if(frame.fcf.dest_addr_mode) {
      if(frame.dest_pid != mac_src_pan_id &&
         frame.dest_pid != FRAME802154_BROADCASTPANDID) {
        /* Packet to another PAN */
        PRINTF("15.4: for another pan %u\n\r", frame.dest_pid);
        return FRAMER_FAILED;
    b46e:	2001      	movs	r0, #1
    b470:	4240      	negs	r0, r0
    b472:	e004      	b.n	b47e <parse+0x92>

static inline int
packetbuf_set_addr(uint8_t type, const linkaddr_t *addr)
{
/*   packetbuf_addrs[type - PACKETBUF_ADDR_FIRST].type = type; */
  linkaddr_copy(&packetbuf_addrs[type - PACKETBUF_ADDR_FIRST].addr, addr);
    b474:	480c      	ldr	r0, [pc, #48]	; (b4a8 <parse+0xbc>)
    b476:	a904      	add	r1, sp, #16
    b478:	4b09      	ldr	r3, [pc, #36]	; (b4a0 <parse+0xb4>)
    b47a:	4798      	blx	r3
    b47c:	e7e3      	b.n	b446 <parse+0x5a>
    PRINTF("%u (%u)\n\r", packetbuf_datalen(), len);

    return len - frame.payload_len;
  }
  return FRAMER_FAILED;
}
    b47e:	b011      	add	sp, #68	; 0x44
    b480:	bd30      	pop	{r4, r5, pc}
    b482:	46c0      	nop			; (mov r8, r8)
    b484:	0000bf11 	.word	0x0000bf11
    b488:	0000bec5 	.word	0x0000bec5
    b48c:	0000b2ad 	.word	0x0000b2ad
    b490:	0000be91 	.word	0x0000be91
    b494:	0000abcd 	.word	0x0000abcd
    b498:	0000ffff 	.word	0x0000ffff
    b49c:	200031d8 	.word	0x200031d8
    b4a0:	0000ac6d 	.word	0x0000ac6d
    b4a4:	200031f8 	.word	0x200031f8
    b4a8:	200031e0 	.word	0x200031e0

0000b4ac <create>:
  return 1;
}
/*---------------------------------------------------------------------------*/
static int
create(void)
{
    b4ac:	b510      	push	{r4, lr}
    b4ae:	b090      	sub	sp, #64	; 0x40
  frame802154_t params;
  int len;

  /* init to zeros */
  memset(&params, 0, sizeof(params));
    b4b0:	a801      	add	r0, sp, #4
    b4b2:	2100      	movs	r1, #0
    b4b4:	223c      	movs	r2, #60	; 0x3c
    b4b6:	4b39      	ldr	r3, [pc, #228]	; (b59c <create+0xf0>)
    b4b8:	4798      	blx	r3

  if(!initialized) {
    b4ba:	4b39      	ldr	r3, [pc, #228]	; (b5a0 <create+0xf4>)
    b4bc:	781b      	ldrb	r3, [r3, #0]
    b4be:	2b00      	cmp	r3, #0
    b4c0:	d106      	bne.n	b4d0 <create+0x24>
    initialized = 1;
    b4c2:	2201      	movs	r2, #1
    b4c4:	4b36      	ldr	r3, [pc, #216]	; (b5a0 <create+0xf4>)
    b4c6:	701a      	strb	r2, [r3, #0]
    mac_dsn = random_rand() & 0xff;
    b4c8:	4b36      	ldr	r3, [pc, #216]	; (b5a4 <create+0xf8>)
    b4ca:	4798      	blx	r3
    b4cc:	4b36      	ldr	r3, [pc, #216]	; (b5a8 <create+0xfc>)
    b4ce:	7018      	strb	r0, [r3, #0]
  }

  /* Build the FCF. */
  params.fcf.frame_type = FRAME802154_DATAFRAME;
    b4d0:	ab01      	add	r3, sp, #4
    b4d2:	2201      	movs	r2, #1
    b4d4:	701a      	strb	r2, [r3, #0]
  params.fcf.security_enabled = 0;
    b4d6:	2200      	movs	r2, #0
    b4d8:	705a      	strb	r2, [r3, #1]
  return 1;
}
static inline packetbuf_attr_t
packetbuf_attr(uint8_t type)
{
  return packetbuf_attrs[type].val;
    b4da:	4a34      	ldr	r2, [pc, #208]	; (b5ac <create+0x100>)
  params.fcf.frame_pending = packetbuf_attr(PACKETBUF_ATTR_PENDING);
    b4dc:	8d92      	ldrh	r2, [r2, #44]	; 0x2c
    b4de:	709a      	strb	r2, [r3, #2]
  if(linkaddr_cmp(packetbuf_addr(PACKETBUF_ADDR_RECEIVER), &linkaddr_null)) {
    b4e0:	4833      	ldr	r0, [pc, #204]	; (b5b0 <create+0x104>)
    b4e2:	4934      	ldr	r1, [pc, #208]	; (b5b4 <create+0x108>)
    b4e4:	4b34      	ldr	r3, [pc, #208]	; (b5b8 <create+0x10c>)
    b4e6:	4798      	blx	r3
    b4e8:	2800      	cmp	r0, #0
    b4ea:	d003      	beq.n	b4f4 <create+0x48>
    params.fcf.ack_required = 0;
    b4ec:	2200      	movs	r2, #0
    b4ee:	ab01      	add	r3, sp, #4
    b4f0:	70da      	strb	r2, [r3, #3]
    b4f2:	e003      	b.n	b4fc <create+0x50>
    b4f4:	4b2d      	ldr	r3, [pc, #180]	; (b5ac <create+0x100>)
  } else {
    params.fcf.ack_required = packetbuf_attr(PACKETBUF_ATTR_MAC_ACK);
    b4f6:	8b1a      	ldrh	r2, [r3, #24]
    b4f8:	ab01      	add	r3, sp, #4
    b4fa:	70da      	strb	r2, [r3, #3]
  }
  params.fcf.panid_compression = 0;
    b4fc:	ab01      	add	r3, sp, #4
    b4fe:	2200      	movs	r2, #0
    b500:	711a      	strb	r2, [r3, #4]

  /* Insert IEEE 802.15.4 (2003) version bit. */
  params.fcf.frame_version = FRAME802154_IEEE802154_2003;
    b502:	719a      	strb	r2, [r3, #6]
    b504:	4b29      	ldr	r3, [pc, #164]	; (b5ac <create+0x100>)
    b506:	8adb      	ldrh	r3, [r3, #22]

  /* Increment and set the data sequence number. */
  if(packetbuf_attr(PACKETBUF_ATTR_MAC_SEQNO)) {
    b508:	2b00      	cmp	r3, #0
    b50a:	d002      	beq.n	b512 <create+0x66>
    params.seq = packetbuf_attr(PACKETBUF_ATTR_MAC_SEQNO);
    b50c:	aa01      	add	r2, sp, #4
    b50e:	7213      	strb	r3, [r2, #8]
    b510:	e007      	b.n	b522 <create+0x76>
  } else {
    params.seq = mac_dsn++;
    b512:	4a25      	ldr	r2, [pc, #148]	; (b5a8 <create+0xfc>)
    b514:	7813      	ldrb	r3, [r2, #0]
    b516:	1c59      	adds	r1, r3, #1
    b518:	7011      	strb	r1, [r2, #0]
    b51a:	aa01      	add	r2, sp, #4
    b51c:	7213      	strb	r3, [r2, #8]

static inline int
packetbuf_set_attr(uint8_t type, const packetbuf_attr_t val)
{
/*   packetbuf_attrs[type].type = type; */
  packetbuf_attrs[type].val = val;
    b51e:	4a23      	ldr	r2, [pc, #140]	; (b5ac <create+0x100>)
    b520:	82d3      	strh	r3, [r2, #22]
  */
  if(sizeof(linkaddr_t) == 2) {
    /* Use short address mode if linkaddr size is short. */
    params.fcf.src_addr_mode = FRAME802154_SHORTADDRMODE;
  } else {
    params.fcf.src_addr_mode = FRAME802154_LONGADDRMODE;
    b522:	ab01      	add	r3, sp, #4
    b524:	2203      	movs	r2, #3
    b526:	71da      	strb	r2, [r3, #7]
  }
  params.dest_pid = mac_dst_pan_id;
    b528:	4a24      	ldr	r2, [pc, #144]	; (b5bc <create+0x110>)
    b52a:	815a      	strh	r2, [r3, #10]

  /*
   *  If the output address is NULL in the Rime buf, then it is broadcast
   *  on the 802.15.4 network.
   */
  if(linkaddr_cmp(packetbuf_addr(PACKETBUF_ADDR_RECEIVER), &linkaddr_null)) {
    b52c:	4820      	ldr	r0, [pc, #128]	; (b5b0 <create+0x104>)
    b52e:	4921      	ldr	r1, [pc, #132]	; (b5b4 <create+0x108>)
    b530:	4b21      	ldr	r3, [pc, #132]	; (b5b8 <create+0x10c>)
    b532:	4798      	blx	r3
    b534:	2800      	cmp	r0, #0
    b536:	d006      	beq.n	b546 <create+0x9a>
    /* Broadcast requires short address mode. */
    params.fcf.dest_addr_mode = FRAME802154_SHORTADDRMODE;
    b538:	ab01      	add	r3, sp, #4
    b53a:	2202      	movs	r2, #2
    b53c:	715a      	strb	r2, [r3, #5]
    params.dest_addr[0] = 0xFF;
    b53e:	32fd      	adds	r2, #253	; 0xfd
    b540:	731a      	strb	r2, [r3, #12]
    params.dest_addr[1] = 0xFF;
    b542:	735a      	strb	r2, [r3, #13]
    b544:	e006      	b.n	b554 <create+0xa8>

  } else {
    linkaddr_copy((linkaddr_t *)&params.dest_addr,
    b546:	a804      	add	r0, sp, #16
    b548:	4919      	ldr	r1, [pc, #100]	; (b5b0 <create+0x104>)
    b54a:	4b1d      	ldr	r3, [pc, #116]	; (b5c0 <create+0x114>)
    b54c:	4798      	blx	r3
                  packetbuf_addr(PACKETBUF_ADDR_RECEIVER));
    /* Use short address mode if linkaddr size is small */
    if(sizeof(linkaddr_t) == 2) {
      params.fcf.dest_addr_mode = FRAME802154_SHORTADDRMODE;
    } else {
      params.fcf.dest_addr_mode = FRAME802154_LONGADDRMODE;
    b54e:	2203      	movs	r2, #3
    b550:	ab01      	add	r3, sp, #4
    b552:	715a      	strb	r2, [r3, #5]
    }
  }

  /* Set the source PAN ID to the global variable. */
  params.src_pid = mac_src_pan_id;
    b554:	ac01      	add	r4, sp, #4
    b556:	4b19      	ldr	r3, [pc, #100]	; (b5bc <create+0x110>)
    b558:	82a3      	strh	r3, [r4, #20]

  /*
   * Set up the source address using only the long address mode for
   * phase 1.
   */
  linkaddr_copy((linkaddr_t *)&params.src_addr, &linkaddr_node_addr);
    b55a:	201a      	movs	r0, #26
    b55c:	4468      	add	r0, sp
    b55e:	4919      	ldr	r1, [pc, #100]	; (b5c4 <create+0x118>)
    b560:	4b17      	ldr	r3, [pc, #92]	; (b5c0 <create+0x114>)
    b562:	4798      	blx	r3

  params.payload = packetbuf_dataptr();
    b564:	4b18      	ldr	r3, [pc, #96]	; (b5c8 <create+0x11c>)
    b566:	4798      	blx	r3
    b568:	6360      	str	r0, [r4, #52]	; 0x34
  params.payload_len = packetbuf_datalen();
    b56a:	4b18      	ldr	r3, [pc, #96]	; (b5cc <create+0x120>)
    b56c:	4798      	blx	r3
    b56e:	63a0      	str	r0, [r4, #56]	; 0x38
  len = frame802154_hdrlen(&params);
    b570:	1c20      	adds	r0, r4, #0
    b572:	4b17      	ldr	r3, [pc, #92]	; (b5d0 <create+0x124>)
    b574:	4798      	blx	r3
    b576:	1c04      	adds	r4, r0, #0
  if(packetbuf_hdralloc(len)) {
    b578:	4b16      	ldr	r3, [pc, #88]	; (b5d4 <create+0x128>)
    b57a:	4798      	blx	r3
    b57c:	2800      	cmp	r0, #0
    b57e:	d008      	beq.n	b592 <create+0xe6>
    frame802154_create(&params, packetbuf_hdrptr(), len);
    b580:	4b15      	ldr	r3, [pc, #84]	; (b5d8 <create+0x12c>)
    b582:	4798      	blx	r3
    b584:	1c01      	adds	r1, r0, #0
    b586:	a801      	add	r0, sp, #4
    b588:	1c22      	adds	r2, r4, #0
    b58a:	4b14      	ldr	r3, [pc, #80]	; (b5dc <create+0x130>)
    b58c:	4798      	blx	r3

    PRINTF("15.4-OUT: %2X", params.fcf.frame_type);
    PRINTADDR(params.dest_addr);
    PRINTF("%d %u (%u)\n\r", len, packetbuf_datalen(), packetbuf_totlen());

    return len;
    b58e:	1c20      	adds	r0, r4, #0
    b590:	e001      	b.n	b596 <create+0xea>
  } else {
    PRINTF("15.4-OUT: too large header: %u\n\r", len);
    return FRAMER_FAILED;
    b592:	2001      	movs	r0, #1
    b594:	4240      	negs	r0, r0
  }
}
    b596:	b010      	add	sp, #64	; 0x40
    b598:	bd10      	pop	{r4, pc}
    b59a:	46c0      	nop			; (mov r8, r8)
    b59c:	00010b69 	.word	0x00010b69
    b5a0:	20000e0b 	.word	0x20000e0b
    b5a4:	000058a5 	.word	0x000058a5
    b5a8:	20000e0a 	.word	0x20000e0a
    b5ac:	200031f8 	.word	0x200031f8
    b5b0:	200031e0 	.word	0x200031e0
    b5b4:	00012e30 	.word	0x00012e30
    b5b8:	0000ac7d 	.word	0x0000ac7d
    b5bc:	ffffabcd 	.word	0xffffabcd
    b5c0:	0000ac6d 	.word	0x0000ac6d
    b5c4:	200031d0 	.word	0x200031d0
    b5c8:	0000bec5 	.word	0x0000bec5
    b5cc:	0000bf11 	.word	0x0000bf11
    b5d0:	0000b169 	.word	0x0000b169
    b5d4:	0000bf39 	.word	0x0000bf39
    b5d8:	0000bed9 	.word	0x0000bed9
    b5dc:	0000b199 	.word	0x0000b199

0000b5e0 <mac_sequence_is_duplicate>:
static struct seqno received_seqnos[MAX_SEQNOS];

/*---------------------------------------------------------------------------*/
int
mac_sequence_is_duplicate(void)
{
    b5e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    b5e2:	4d0c      	ldr	r5, [pc, #48]	; (b614 <mac_sequence_is_duplicate+0x34>)

  /*
   * Check for duplicate packet by comparing the sequence number of the incoming
   * packet with the last few ones we saw.
   */
  for(i = 0; i < MAX_SEQNOS; ++i) {
    b5e4:	2400      	movs	r4, #0
    if(linkaddr_cmp(packetbuf_addr(PACKETBUF_ADDR_SENDER),
    b5e6:	4e0c      	ldr	r6, [pc, #48]	; (b618 <mac_sequence_is_duplicate+0x38>)
    b5e8:	4f0c      	ldr	r7, [pc, #48]	; (b61c <mac_sequence_is_duplicate+0x3c>)
    b5ea:	1c30      	adds	r0, r6, #0
    b5ec:	1c29      	adds	r1, r5, #0
    b5ee:	47b8      	blx	r7
    b5f0:	2800      	cmp	r0, #0
    b5f2:	d00a      	beq.n	b60a <mac_sequence_is_duplicate+0x2a>
                    &received_seqnos[i].sender)) {
      if(packetbuf_attr(PACKETBUF_ATTR_PACKET_ID) == received_seqnos[i].seqno) {
    b5f4:	00e3      	lsls	r3, r4, #3
    b5f6:	191c      	adds	r4, r3, r4
    b5f8:	4b06      	ldr	r3, [pc, #24]	; (b614 <mac_sequence_is_duplicate+0x34>)
    b5fa:	191c      	adds	r4, r3, r4
    b5fc:	7a23      	ldrb	r3, [r4, #8]
    b5fe:	4a08      	ldr	r2, [pc, #32]	; (b620 <mac_sequence_is_duplicate+0x40>)
    b600:	8c50      	ldrh	r0, [r2, #34]	; 0x22
    b602:	1a18      	subs	r0, r3, r0
        /* Duplicate packet. */
        return 1;
    b604:	4243      	negs	r3, r0
    b606:	4158      	adcs	r0, r3
    b608:	e003      	b.n	b612 <mac_sequence_is_duplicate+0x32>

  /*
   * Check for duplicate packet by comparing the sequence number of the incoming
   * packet with the last few ones we saw.
   */
  for(i = 0; i < MAX_SEQNOS; ++i) {
    b60a:	3401      	adds	r4, #1
    b60c:	3509      	adds	r5, #9
    b60e:	2c10      	cmp	r4, #16
    b610:	d1eb      	bne.n	b5ea <mac_sequence_is_duplicate+0xa>
      }
      break;
    }
  }
  return 0;
}
    b612:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    b614:	20000e0c 	.word	0x20000e0c
    b618:	200031d8 	.word	0x200031d8
    b61c:	0000ac7d 	.word	0x0000ac7d
    b620:	200031f8 	.word	0x200031f8

0000b624 <mac_sequence_register_seqno>:
/*---------------------------------------------------------------------------*/
void
mac_sequence_register_seqno(void)
{
    b624:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    b626:	4d14      	ldr	r5, [pc, #80]	; (b678 <mac_sequence_register_seqno+0x54>)
  int i, j;

  /* Locate possible previous sequence number for this address. */
  for(i = 0; i < MAX_SEQNOS; ++i) {
    b628:	2400      	movs	r4, #0
    if(linkaddr_cmp(packetbuf_addr(PACKETBUF_ADDR_SENDER),
    b62a:	4e14      	ldr	r6, [pc, #80]	; (b67c <mac_sequence_register_seqno+0x58>)
    b62c:	4f14      	ldr	r7, [pc, #80]	; (b680 <mac_sequence_register_seqno+0x5c>)
    b62e:	1c30      	adds	r0, r6, #0
    b630:	1c29      	adds	r1, r5, #0
    b632:	47b8      	blx	r7
    b634:	2800      	cmp	r0, #0
    b636:	d003      	beq.n	b640 <mac_sequence_register_seqno+0x1c>
                    &received_seqnos[i].sender)) {
      i++;
    b638:	1c63      	adds	r3, r4, #1
      break;
    }
  }

  /* Keep the last sequence number for each address as per 802.15.4e. */
  for(j = i - 1; j > 0; --j) {
    b63a:	2c00      	cmp	r4, #0
    b63c:	dc05      	bgt.n	b64a <mac_sequence_register_seqno+0x26>
    b63e:	e013      	b.n	b668 <mac_sequence_register_seqno+0x44>
mac_sequence_register_seqno(void)
{
  int i, j;

  /* Locate possible previous sequence number for this address. */
  for(i = 0; i < MAX_SEQNOS; ++i) {
    b640:	3401      	adds	r4, #1
    b642:	3509      	adds	r5, #9
    b644:	2c10      	cmp	r4, #16
    b646:	d1f2      	bne.n	b62e <mac_sequence_register_seqno+0xa>
    b648:	2310      	movs	r3, #16
    b64a:	4d0b      	ldr	r5, [pc, #44]	; (b678 <mac_sequence_register_seqno+0x54>)
    b64c:	00dc      	lsls	r4, r3, #3
    b64e:	18e4      	adds	r4, r4, r3
    b650:	3c12      	subs	r4, #18
    b652:	192c      	adds	r4, r5, r4
    b654:	3d09      	subs	r5, #9
    }
  }

  /* Keep the last sequence number for each address as per 802.15.4e. */
  for(j = i - 1; j > 0; --j) {
    memcpy(&received_seqnos[j], &received_seqnos[j - 1], sizeof(struct seqno));
    b656:	4e0b      	ldr	r6, [pc, #44]	; (b684 <mac_sequence_register_seqno+0x60>)
    b658:	1c20      	adds	r0, r4, #0
    b65a:	3009      	adds	r0, #9
    b65c:	1c21      	adds	r1, r4, #0
    b65e:	2209      	movs	r2, #9
    b660:	47b0      	blx	r6
    b662:	3c09      	subs	r4, #9
      break;
    }
  }

  /* Keep the last sequence number for each address as per 802.15.4e. */
  for(j = i - 1; j > 0; --j) {
    b664:	42ac      	cmp	r4, r5
    b666:	d1f7      	bne.n	b658 <mac_sequence_register_seqno+0x34>
    memcpy(&received_seqnos[j], &received_seqnos[j - 1], sizeof(struct seqno));
  }
  received_seqnos[0].seqno = packetbuf_attr(PACKETBUF_ATTR_PACKET_ID);
    b668:	4803      	ldr	r0, [pc, #12]	; (b678 <mac_sequence_register_seqno+0x54>)
  return 1;
}
static inline packetbuf_attr_t
packetbuf_attr(uint8_t type)
{
  return packetbuf_attrs[type].val;
    b66a:	4b07      	ldr	r3, [pc, #28]	; (b688 <mac_sequence_register_seqno+0x64>)
    b66c:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
    b66e:	7203      	strb	r3, [r0, #8]
  linkaddr_copy(&received_seqnos[0].sender,
    b670:	4902      	ldr	r1, [pc, #8]	; (b67c <mac_sequence_register_seqno+0x58>)
    b672:	4b06      	ldr	r3, [pc, #24]	; (b68c <mac_sequence_register_seqno+0x68>)
    b674:	4798      	blx	r3
                packetbuf_addr(PACKETBUF_ADDR_SENDER));
}
    b676:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    b678:	20000e0c 	.word	0x20000e0c
    b67c:	200031d8 	.word	0x200031d8
    b680:	0000ac7d 	.word	0x0000ac7d
    b684:	00010b2f 	.word	0x00010b2f
    b688:	200031f8 	.word	0x200031f8
    b68c:	0000ac6d 	.word	0x0000ac6d

0000b690 <mac_call_sent_callback>:
#endif /* DEBUG */

/*---------------------------------------------------------------------------*/
void
mac_call_sent_callback(mac_callback_t sent, void *ptr, int status, int num_tx)
{
    b690:	b510      	push	{r4, lr}
    break;
  default:
    PRINTF("mac: error %d after %d tx\n\r", status, num_tx);
  }

  if(sent) {
    b692:	2800      	cmp	r0, #0
    b694:	d004      	beq.n	b6a0 <mac_call_sent_callback+0x10>
    b696:	1c04      	adds	r4, r0, #0
    sent(ptr, status, num_tx);
    b698:	1c08      	adds	r0, r1, #0
    b69a:	1c11      	adds	r1, r2, #0
    b69c:	1c1a      	adds	r2, r3, #0
    b69e:	47a0      	blx	r4
  }
}
    b6a0:	bd10      	pop	{r4, pc}
    b6a2:	46c0      	nop			; (mov r8, r8)

0000b6a4 <on>:
  }
}
/*---------------------------------------------------------------------------*/
static int
on(void)
{
    b6a4:	b508      	push	{r3, lr}
  return NETSTACK_RADIO.on();
    b6a6:	4b02      	ldr	r3, [pc, #8]	; (b6b0 <on+0xc>)
    b6a8:	6a1b      	ldr	r3, [r3, #32]
    b6aa:	4798      	blx	r3
}
    b6ac:	bd08      	pop	{r3, pc}
    b6ae:	46c0      	nop			; (mov r8, r8)
    b6b0:	00012ed0 	.word	0x00012ed0

0000b6b4 <off>:
/*---------------------------------------------------------------------------*/
static int
off(int keep_radio_on)
{
    b6b4:	b508      	push	{r3, lr}
  if(keep_radio_on) {
    b6b6:	2800      	cmp	r0, #0
    b6b8:	d003      	beq.n	b6c2 <off+0xe>
    return NETSTACK_RADIO.on();
    b6ba:	4b04      	ldr	r3, [pc, #16]	; (b6cc <off+0x18>)
    b6bc:	6a1b      	ldr	r3, [r3, #32]
    b6be:	4798      	blx	r3
    b6c0:	e002      	b.n	b6c8 <off+0x14>
  } else {
    return NETSTACK_RADIO.off();
    b6c2:	4b02      	ldr	r3, [pc, #8]	; (b6cc <off+0x18>)
    b6c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    b6c6:	4798      	blx	r3
  }
}
    b6c8:	bd08      	pop	{r3, pc}
    b6ca:	46c0      	nop			; (mov r8, r8)
    b6cc:	00012ed0 	.word	0x00012ed0

0000b6d0 <channel_check_interval>:
/*---------------------------------------------------------------------------*/
static unsigned short
channel_check_interval(void)
{
  return 0;
}
    b6d0:	2000      	movs	r0, #0
    b6d2:	4770      	bx	lr

0000b6d4 <init>:
/*---------------------------------------------------------------------------*/
static void
init(void)
{
    b6d4:	b508      	push	{r3, lr}
  on();
    b6d6:	4b01      	ldr	r3, [pc, #4]	; (b6dc <init+0x8>)
    b6d8:	4798      	blx	r3
}
    b6da:	bd08      	pop	{r3, pc}
    b6dc:	0000b6a5 	.word	0x0000b6a5

0000b6e0 <packet_input>:
  }
}
/*---------------------------------------------------------------------------*/
static void
packet_input(void)
{
    b6e0:	b5f0      	push	{r4, r5, r6, r7, lr}
    b6e2:	b091      	sub	sp, #68	; 0x44
  int original_datalen;
  uint8_t *original_dataptr;

  original_datalen = packetbuf_datalen();
    b6e4:	4c2b      	ldr	r4, [pc, #172]	; (b794 <packet_input+0xb4>)
    b6e6:	47a0      	blx	r4
    b6e8:	1c05      	adds	r5, r0, #0
  original_dataptr = packetbuf_dataptr();
    b6ea:	4b2b      	ldr	r3, [pc, #172]	; (b798 <packet_input+0xb8>)
    b6ec:	4798      	blx	r3
    b6ee:	1c06      	adds	r6, r0, #0
#ifdef NETSTACK_DECRYPT
    NETSTACK_DECRYPT();
#endif /* NETSTACK_DECRYPT */

#if NULLRDC_802154_AUTOACK
  if(packetbuf_datalen() == ACK_LEN) {
    b6f0:	47a0      	blx	r4
    b6f2:	2803      	cmp	r0, #3
    b6f4:	d04c      	beq.n	b790 <packet_input+0xb0>
    /* Ignore ack packets */
    PRINTF("nullrdc: ignored ack\n\r"); 
  } else
#endif /* NULLRDC_802154_AUTOACK */
  if(NETSTACK_FRAMER.parse() < 0) {
    b6f6:	4b29      	ldr	r3, [pc, #164]	; (b79c <packet_input+0xbc>)
    b6f8:	685b      	ldr	r3, [r3, #4]
    b6fa:	4798      	blx	r3
    b6fc:	2800      	cmp	r0, #0
    b6fe:	db47      	blt.n	b790 <packet_input+0xb0>
    PRINTF("nullrdc: failed to parse %u\n\r", packetbuf_datalen());
#if NULLRDC_ADDRESS_FILTER
  } else if(!linkaddr_cmp(packetbuf_addr(PACKETBUF_ADDR_RECEIVER),
    b700:	4827      	ldr	r0, [pc, #156]	; (b7a0 <packet_input+0xc0>)
    b702:	4928      	ldr	r1, [pc, #160]	; (b7a4 <packet_input+0xc4>)
    b704:	4b28      	ldr	r3, [pc, #160]	; (b7a8 <packet_input+0xc8>)
    b706:	4798      	blx	r3
    b708:	2800      	cmp	r0, #0
    b70a:	d105      	bne.n	b718 <packet_input+0x38>
                                         &linkaddr_node_addr) &&
            !linkaddr_cmp(packetbuf_addr(PACKETBUF_ADDR_RECEIVER),
    b70c:	4824      	ldr	r0, [pc, #144]	; (b7a0 <packet_input+0xc0>)
    b70e:	4927      	ldr	r1, [pc, #156]	; (b7ac <packet_input+0xcc>)
    b710:	4b25      	ldr	r3, [pc, #148]	; (b7a8 <packet_input+0xc8>)
    b712:	4798      	blx	r3
#endif /* NULLRDC_802154_AUTOACK */
  if(NETSTACK_FRAMER.parse() < 0) {
    PRINTF("nullrdc: failed to parse %u\n\r", packetbuf_datalen());
#if NULLRDC_ADDRESS_FILTER
  } else if(!linkaddr_cmp(packetbuf_addr(PACKETBUF_ADDR_RECEIVER),
                                         &linkaddr_node_addr) &&
    b714:	2800      	cmp	r0, #0
    b716:	d03b      	beq.n	b790 <packet_input+0xb0>
  } else {
    int duplicate = 0;

#if NULLRDC_802154_AUTOACK || NULLRDC_802154_AUTOACK_HW
    /* Check for duplicate packet. */
    duplicate = mac_sequence_is_duplicate();
    b718:	4b25      	ldr	r3, [pc, #148]	; (b7b0 <packet_input+0xd0>)
    b71a:	4798      	blx	r3
    b71c:	1e04      	subs	r4, r0, #0
    if(duplicate) {
    b71e:	d124      	bne.n	b76a <packet_input+0x8a>
      /* Drop the packet. */
      PRINTF("nullrdc: drop duplicate link layer packet %u\n\r",
             packetbuf_attr(PACKETBUF_ATTR_PACKET_ID));
    } else {
      mac_sequence_register_seqno();
    b720:	4b24      	ldr	r3, [pc, #144]	; (b7b4 <packet_input+0xd4>)
    b722:	4798      	blx	r3
    }
#endif /* NULLRDC_802154_AUTOACK */

    if(NULLRDC_SEND_802154_ACK) {
      frame802154_t info154;
      frame802154_parse(original_dataptr, original_datalen, &info154);
    b724:	af01      	add	r7, sp, #4
    b726:	1c30      	adds	r0, r6, #0
    b728:	1c29      	adds	r1, r5, #0
    b72a:	1c3a      	adds	r2, r7, #0
    b72c:	4b22      	ldr	r3, [pc, #136]	; (b7b8 <packet_input+0xd8>)
    b72e:	4798      	blx	r3
      if(info154.fcf.frame_type == FRAME802154_DATAFRAME &&
    b730:	783b      	ldrb	r3, [r7, #0]
    b732:	2b01      	cmp	r3, #1
    b734:	d115      	bne.n	b762 <packet_input+0x82>
    b736:	e022      	b.n	b77e <packet_input+0x9e>
         info154.fcf.ack_required != 0 &&
         linkaddr_cmp((linkaddr_t *)&info154.dest_addr,
    b738:	a804      	add	r0, sp, #16
    b73a:	491a      	ldr	r1, [pc, #104]	; (b7a4 <packet_input+0xc4>)
    b73c:	4b1a      	ldr	r3, [pc, #104]	; (b7a8 <packet_input+0xc8>)
    b73e:	4798      	blx	r3

    if(NULLRDC_SEND_802154_ACK) {
      frame802154_t info154;
      frame802154_parse(original_dataptr, original_datalen, &info154);
      if(info154.fcf.frame_type == FRAME802154_DATAFRAME &&
         info154.fcf.ack_required != 0 &&
    b740:	2800      	cmp	r0, #0
    b742:	d00c      	beq.n	b75e <packet_input+0x7e>
         linkaddr_cmp((linkaddr_t *)&info154.dest_addr,
                      &linkaddr_node_addr)) {
        uint8_t ackdata[ACK_LEN] = {0, 0, 0};
    b744:	2300      	movs	r3, #0
    b746:	466a      	mov	r2, sp
    b748:	7053      	strb	r3, [r2, #1]

        ackdata[0] = FRAME802154_ACKFRAME;
    b74a:	3302      	adds	r3, #2
    b74c:	7013      	strb	r3, [r2, #0]
        ackdata[1] = 0;
        ackdata[2] = info154.seq;
    b74e:	ab01      	add	r3, sp, #4
    b750:	7a1b      	ldrb	r3, [r3, #8]
    b752:	7093      	strb	r3, [r2, #2]
        NETSTACK_RADIO.send(ackdata, ACK_LEN);
    b754:	4b19      	ldr	r3, [pc, #100]	; (b7bc <packet_input+0xdc>)
    b756:	68db      	ldr	r3, [r3, #12]
    b758:	4668      	mov	r0, sp
    b75a:	2103      	movs	r1, #3
    b75c:	4798      	blx	r3
      }
    }

    if(!duplicate) {
    b75e:	2c00      	cmp	r4, #0
    b760:	d116      	bne.n	b790 <packet_input+0xb0>
      NETSTACK_MAC.input();
    b762:	4b17      	ldr	r3, [pc, #92]	; (b7c0 <packet_input+0xe0>)
    b764:	68db      	ldr	r3, [r3, #12]
    b766:	4798      	blx	r3
    b768:	e012      	b.n	b790 <packet_input+0xb0>
    }
#endif /* NULLRDC_802154_AUTOACK */

    if(NULLRDC_SEND_802154_ACK) {
      frame802154_t info154;
      frame802154_parse(original_dataptr, original_datalen, &info154);
    b76a:	af01      	add	r7, sp, #4
    b76c:	1c30      	adds	r0, r6, #0
    b76e:	1c29      	adds	r1, r5, #0
    b770:	1c3a      	adds	r2, r7, #0
    b772:	4b11      	ldr	r3, [pc, #68]	; (b7b8 <packet_input+0xd8>)
    b774:	4798      	blx	r3
      if(info154.fcf.frame_type == FRAME802154_DATAFRAME &&
    b776:	783b      	ldrb	r3, [r7, #0]
    b778:	2b01      	cmp	r3, #1
    b77a:	d109      	bne.n	b790 <packet_input+0xb0>
    b77c:	e004      	b.n	b788 <packet_input+0xa8>
         info154.fcf.ack_required != 0 &&
    b77e:	ab01      	add	r3, sp, #4
#endif /* NULLRDC_802154_AUTOACK */

    if(NULLRDC_SEND_802154_ACK) {
      frame802154_t info154;
      frame802154_parse(original_dataptr, original_datalen, &info154);
      if(info154.fcf.frame_type == FRAME802154_DATAFRAME &&
    b780:	78db      	ldrb	r3, [r3, #3]
    b782:	2b00      	cmp	r3, #0
    b784:	d0ed      	beq.n	b762 <packet_input+0x82>
    b786:	e7d7      	b.n	b738 <packet_input+0x58>
         info154.fcf.ack_required != 0 &&
    b788:	ab01      	add	r3, sp, #4
#endif /* NULLRDC_802154_AUTOACK */

    if(NULLRDC_SEND_802154_ACK) {
      frame802154_t info154;
      frame802154_parse(original_dataptr, original_datalen, &info154);
      if(info154.fcf.frame_type == FRAME802154_DATAFRAME &&
    b78a:	78db      	ldrb	r3, [r3, #3]
    b78c:	2b00      	cmp	r3, #0
    b78e:	d1d3      	bne.n	b738 <packet_input+0x58>

    if(!duplicate) {
      NETSTACK_MAC.input();
    }
  }
}
    b790:	b011      	add	sp, #68	; 0x44
    b792:	bdf0      	pop	{r4, r5, r6, r7, pc}
    b794:	0000bf11 	.word	0x0000bf11
    b798:	0000bec5 	.word	0x0000bec5
    b79c:	00012e5c 	.word	0x00012e5c
    b7a0:	200031e0 	.word	0x200031e0
    b7a4:	200031d0 	.word	0x200031d0
    b7a8:	0000ac7d 	.word	0x0000ac7d
    b7ac:	00012e30 	.word	0x00012e30
    b7b0:	0000b5e1 	.word	0x0000b5e1
    b7b4:	0000b625 	.word	0x0000b625
    b7b8:	0000b2ad 	.word	0x0000b2ad
    b7bc:	00012ed0 	.word	0x00012ed0
    b7c0:	00012e40 	.word	0x00012e40

0000b7c4 <send_one_packet>:
#define ACK_LEN 3

/*---------------------------------------------------------------------------*/
static int
send_one_packet(mac_callback_t sent, void *ptr)
{
    b7c4:	b5f0      	push	{r4, r5, r6, r7, lr}
    b7c6:	b085      	sub	sp, #20
    b7c8:	9000      	str	r0, [sp, #0]
    b7ca:	9101      	str	r1, [sp, #4]

static inline int
packetbuf_set_addr(uint8_t type, const linkaddr_t *addr)
{
/*   packetbuf_addrs[type - PACKETBUF_ADDR_FIRST].type = type; */
  linkaddr_copy(&packetbuf_addrs[type - PACKETBUF_ADDR_FIRST].addr, addr);
    b7cc:	4848      	ldr	r0, [pc, #288]	; (b8f0 <send_one_packet+0x12c>)
    b7ce:	4949      	ldr	r1, [pc, #292]	; (b8f4 <send_one_packet+0x130>)
    b7d0:	4b49      	ldr	r3, [pc, #292]	; (b8f8 <send_one_packet+0x134>)
    b7d2:	4798      	blx	r3

static inline int
packetbuf_set_attr(uint8_t type, const packetbuf_attr_t val)
{
/*   packetbuf_attrs[type].type = type; */
  packetbuf_attrs[type].val = val;
    b7d4:	2201      	movs	r2, #1
    b7d6:	4b49      	ldr	r3, [pc, #292]	; (b8fc <send_one_packet+0x138>)
    b7d8:	831a      	strh	r2, [r3, #24]
  packetbuf_set_addr(PACKETBUF_ADDR_SENDER, &linkaddr_node_addr);
#if NULLRDC_802154_AUTOACK || NULLRDC_802154_AUTOACK_HW
  packetbuf_set_attr(PACKETBUF_ATTR_MAC_ACK, 1);
#endif /* NULLRDC_802154_AUTOACK || NULLRDC_802154_AUTOACK_HW */

  if(NETSTACK_FRAMER.create() < 0) {
    b7da:	4b49      	ldr	r3, [pc, #292]	; (b900 <send_one_packet+0x13c>)
    b7dc:	681b      	ldr	r3, [r3, #0]
    b7de:	4798      	blx	r3
    /* Failed to allocate space for headers */
    PRINTF("nullrdc: send failed, too large header\n\r");
    ret = MAC_TX_ERR_FATAL;
    b7e0:	2406      	movs	r4, #6
  packetbuf_set_addr(PACKETBUF_ADDR_SENDER, &linkaddr_node_addr);
#if NULLRDC_802154_AUTOACK || NULLRDC_802154_AUTOACK_HW
  packetbuf_set_attr(PACKETBUF_ATTR_MAC_ACK, 1);
#endif /* NULLRDC_802154_AUTOACK || NULLRDC_802154_AUTOACK_HW */

  if(NETSTACK_FRAMER.create() < 0) {
    b7e2:	2800      	cmp	r0, #0
    b7e4:	db79      	blt.n	b8da <send_one_packet+0x116>
#endif /* NETSTACK_ENCRYPT */

#if NULLRDC_802154_AUTOACK
    int is_broadcast;
    uint8_t dsn;
    dsn = ((uint8_t *)packetbuf_hdrptr())[2] & 0xff;
    b7e6:	4f47      	ldr	r7, [pc, #284]	; (b904 <send_one_packet+0x140>)
    b7e8:	47b8      	blx	r7
    b7ea:	7885      	ldrb	r5, [r0, #2]

    NETSTACK_RADIO.prepare(packetbuf_hdrptr(), packetbuf_totlen());
    b7ec:	4c46      	ldr	r4, [pc, #280]	; (b908 <send_one_packet+0x144>)
    b7ee:	6866      	ldr	r6, [r4, #4]
    b7f0:	47b8      	blx	r7
    b7f2:	1c07      	adds	r7, r0, #0
    b7f4:	4b45      	ldr	r3, [pc, #276]	; (b90c <send_one_packet+0x148>)
    b7f6:	4798      	blx	r3
    b7f8:	1c01      	adds	r1, r0, #0
    b7fa:	1c38      	adds	r0, r7, #0
    b7fc:	47b0      	blx	r6

    is_broadcast = linkaddr_cmp(packetbuf_addr(PACKETBUF_ADDR_RECEIVER),
    b7fe:	4844      	ldr	r0, [pc, #272]	; (b910 <send_one_packet+0x14c>)
    b800:	4944      	ldr	r1, [pc, #272]	; (b914 <send_one_packet+0x150>)
    b802:	4b45      	ldr	r3, [pc, #276]	; (b918 <send_one_packet+0x154>)
    b804:	4798      	blx	r3
    b806:	1c07      	adds	r7, r0, #0
                                &linkaddr_null);

    if(NETSTACK_RADIO.receiving_packet() ||
    b808:	69a6      	ldr	r6, [r4, #24]
    b80a:	47b0      	blx	r6
       (!is_broadcast && NETSTACK_RADIO.pending_packet())) {

      /* Currently receiving a packet over air or the radio has
         already received a packet that needs to be read before
         sending with auto ack. */
      ret = MAC_TX_COLLISION;
    b80c:	2401      	movs	r4, #1
    NETSTACK_RADIO.prepare(packetbuf_hdrptr(), packetbuf_totlen());

    is_broadcast = linkaddr_cmp(packetbuf_addr(PACKETBUF_ADDR_RECEIVER),
                                &linkaddr_null);

    if(NETSTACK_RADIO.receiving_packet() ||
    b80e:	2800      	cmp	r0, #0
    b810:	d163      	bne.n	b8da <send_one_packet+0x116>
    b812:	2f00      	cmp	r7, #0
    b814:	d105      	bne.n	b822 <send_one_packet+0x5e>
       (!is_broadcast && NETSTACK_RADIO.pending_packet())) {
    b816:	4b3c      	ldr	r3, [pc, #240]	; (b908 <send_one_packet+0x144>)
    b818:	69db      	ldr	r3, [r3, #28]
    b81a:	4798      	blx	r3
    b81c:	2800      	cmp	r0, #0
    b81e:	d15c      	bne.n	b8da <send_one_packet+0x116>
    b820:	e04d      	b.n	b8be <send_one_packet+0xfa>
    } else {
      if(!is_broadcast) {
        RIMESTATS_ADD(reliabletx);
      }

      switch(NETSTACK_RADIO.transmit(packetbuf_totlen())) {
    b822:	4b39      	ldr	r3, [pc, #228]	; (b908 <send_one_packet+0x144>)
    b824:	689c      	ldr	r4, [r3, #8]
    b826:	4b39      	ldr	r3, [pc, #228]	; (b90c <send_one_packet+0x148>)
    b828:	4798      	blx	r3
    b82a:	47a0      	blx	r4
    b82c:	2800      	cmp	r0, #0
    b82e:	d044      	beq.n	b8ba <send_one_packet+0xf6>
	    PRINTF("nullrdc tx noack\n\r");
	  }
        }
        break;
      case RADIO_TX_COLLISION:
        ret = MAC_TX_COLLISION;
    b830:	2401      	movs	r4, #1
    } else {
      if(!is_broadcast) {
        RIMESTATS_ADD(reliabletx);
      }

      switch(NETSTACK_RADIO.transmit(packetbuf_totlen())) {
    b832:	2802      	cmp	r0, #2
    b834:	d051      	beq.n	b8da <send_one_packet+0x116>
    b836:	e03e      	b.n	b8b6 <send_one_packet+0xf2>
          ret = MAC_TX_OK;
        } else {
          rtimer_clock_t wt;

          /* Check for ack */
          wt = RTIMER_NOW();
    b838:	4b38      	ldr	r3, [pc, #224]	; (b91c <send_one_packet+0x158>)
    b83a:	4798      	blx	r3
    b83c:	1c04      	adds	r4, r0, #0
          wdt_reset_count();//watchdog_periodic();
    b83e:	4b38      	ldr	r3, [pc, #224]	; (b920 <send_one_packet+0x15c>)
    b840:	4798      	blx	r3
          while(RTIMER_CLOCK_LT(RTIMER_NOW(), wt + ACK_WAIT_TIME)) {
    b842:	4f36      	ldr	r7, [pc, #216]	; (b91c <send_one_packet+0x158>)
    b844:	4b37      	ldr	r3, [pc, #220]	; (b924 <send_one_packet+0x160>)
    b846:	1b1c      	subs	r4, r3, r4
    b848:	47b8      	blx	r7
    b84a:	1820      	adds	r0, r4, r0
    b84c:	0403      	lsls	r3, r0, #16
    b84e:	d4fb      	bmi.n	b848 <send_one_packet+0x84>
            cooja_mt_yield();
#endif /* CONTIKI_TARGET_COOJA */
          }

          ret = MAC_TX_NOACK;
          if(NETSTACK_RADIO.receiving_packet() ||
    b850:	47b0      	blx	r6
    b852:	2800      	cmp	r0, #0
    b854:	d10a      	bne.n	b86c <send_one_packet+0xa8>
             NETSTACK_RADIO.pending_packet() ||
    b856:	4b2c      	ldr	r3, [pc, #176]	; (b908 <send_one_packet+0x144>)
    b858:	69db      	ldr	r3, [r3, #28]
    b85a:	4798      	blx	r3
            cooja_mt_yield();
#endif /* CONTIKI_TARGET_COOJA */
          }

          ret = MAC_TX_NOACK;
          if(NETSTACK_RADIO.receiving_packet() ||
    b85c:	2800      	cmp	r0, #0
    b85e:	d105      	bne.n	b86c <send_one_packet+0xa8>
             NETSTACK_RADIO.pending_packet() ||
             NETSTACK_RADIO.channel_clear() == 0) {
    b860:	4b29      	ldr	r3, [pc, #164]	; (b908 <send_one_packet+0x144>)
    b862:	695b      	ldr	r3, [r3, #20]
    b864:	4798      	blx	r3
            simProcessRunValue = 1;
            cooja_mt_yield();
#endif /* CONTIKI_TARGET_COOJA */
          }

          ret = MAC_TX_NOACK;
    b866:	2402      	movs	r4, #2
          if(NETSTACK_RADIO.receiving_packet() ||
             NETSTACK_RADIO.pending_packet() ||
    b868:	2800      	cmp	r0, #0
    b86a:	d136      	bne.n	b8da <send_one_packet+0x116>
             NETSTACK_RADIO.channel_clear() == 0) {
            int len;
            uint8_t ackbuf[ACK_LEN];

            if(AFTER_ACK_DETECTED_WAIT_TIME > 0) {
              wt = RTIMER_NOW();
    b86c:	4b2b      	ldr	r3, [pc, #172]	; (b91c <send_one_packet+0x158>)
    b86e:	4798      	blx	r3
    b870:	1c04      	adds	r4, r0, #0
              //watchdog_periodic();
			  wdt_reset_count();
    b872:	4b2b      	ldr	r3, [pc, #172]	; (b920 <send_one_packet+0x15c>)
    b874:	4798      	blx	r3
              while(RTIMER_CLOCK_LT(RTIMER_NOW(),
    b876:	4f29      	ldr	r7, [pc, #164]	; (b91c <send_one_packet+0x158>)
    b878:	2314      	movs	r3, #20
    b87a:	425b      	negs	r3, r3
    b87c:	1b1c      	subs	r4, r3, r4
    b87e:	47b8      	blx	r7
    b880:	1820      	adds	r0, r4, r0
    b882:	0403      	lsls	r3, r0, #16
    b884:	d4fb      	bmi.n	b87e <send_one_packet+0xba>
                  cooja_mt_yield();
      #endif /* CONTIKI_TARGET_COOJA */
              }
            }

            if(NETSTACK_RADIO.pending_packet()) {
    b886:	4b20      	ldr	r3, [pc, #128]	; (b908 <send_one_packet+0x144>)
    b888:	69db      	ldr	r3, [r3, #28]
    b88a:	4798      	blx	r3
            simProcessRunValue = 1;
            cooja_mt_yield();
#endif /* CONTIKI_TARGET_COOJA */
          }

          ret = MAC_TX_NOACK;
    b88c:	2402      	movs	r4, #2
                  cooja_mt_yield();
      #endif /* CONTIKI_TARGET_COOJA */
              }
            }

            if(NETSTACK_RADIO.pending_packet()) {
    b88e:	2800      	cmp	r0, #0
    b890:	d023      	beq.n	b8da <send_one_packet+0x116>
              len = NETSTACK_RADIO.read(ackbuf, ACK_LEN);
    b892:	4b1d      	ldr	r3, [pc, #116]	; (b908 <send_one_packet+0x144>)
    b894:	691b      	ldr	r3, [r3, #16]
    b896:	a803      	add	r0, sp, #12
    b898:	2103      	movs	r1, #3
    b89a:	4798      	blx	r3
                /* Ack received */
                RIMESTATS_ADD(ackrx);
                ret = MAC_TX_OK;
              } else {
                /* Not an ack or ack not for us: collision */
                ret = MAC_TX_COLLISION;
    b89c:	3c01      	subs	r4, #1
              }
            }

            if(NETSTACK_RADIO.pending_packet()) {
              len = NETSTACK_RADIO.read(ackbuf, ACK_LEN);
              if(len == ACK_LEN && ackbuf[2] == dsn) {
    b89e:	2803      	cmp	r0, #3
    b8a0:	d11b      	bne.n	b8da <send_one_packet+0x116>
    b8a2:	ab03      	add	r3, sp, #12
    b8a4:	789b      	ldrb	r3, [r3, #2]
    b8a6:	42ab      	cmp	r3, r5
    b8a8:	d117      	bne.n	b8da <send_one_packet+0x116>
                /* Ack received */
                RIMESTATS_ADD(ackrx);
    b8aa:	4a1f      	ldr	r2, [pc, #124]	; (b928 <send_one_packet+0x164>)
    b8ac:	69d3      	ldr	r3, [r2, #28]
    b8ae:	191b      	adds	r3, r3, r4
    b8b0:	61d3      	str	r3, [r2, #28]
                ret = MAC_TX_OK;
    b8b2:	2400      	movs	r4, #0
    b8b4:	e011      	b.n	b8da <send_one_packet+0x116>
        break;
      case RADIO_TX_COLLISION:
        ret = MAC_TX_COLLISION;
        break;
      default:
        ret = MAC_TX_ERR;
    b8b6:	2405      	movs	r4, #5
        break;
    b8b8:	e00f      	b.n	b8da <send_one_packet+0x116>
      }

      switch(NETSTACK_RADIO.transmit(packetbuf_totlen())) {
      case RADIO_TX_OK:
        if(is_broadcast) {
          ret = MAC_TX_OK;
    b8ba:	2400      	movs	r4, #0
    b8bc:	e00d      	b.n	b8da <send_one_packet+0x116>
         already received a packet that needs to be read before
         sending with auto ack. */
      ret = MAC_TX_COLLISION;
    } else {
      if(!is_broadcast) {
        RIMESTATS_ADD(reliabletx);
    b8be:	4a1a      	ldr	r2, [pc, #104]	; (b928 <send_one_packet+0x164>)
    b8c0:	6893      	ldr	r3, [r2, #8]
    b8c2:	3301      	adds	r3, #1
    b8c4:	6093      	str	r3, [r2, #8]
      }

      switch(NETSTACK_RADIO.transmit(packetbuf_totlen())) {
    b8c6:	4b10      	ldr	r3, [pc, #64]	; (b908 <send_one_packet+0x144>)
    b8c8:	689c      	ldr	r4, [r3, #8]
    b8ca:	4b10      	ldr	r3, [pc, #64]	; (b90c <send_one_packet+0x148>)
    b8cc:	4798      	blx	r3
    b8ce:	47a0      	blx	r4
    b8d0:	2800      	cmp	r0, #0
    b8d2:	d0b1      	beq.n	b838 <send_one_packet+0x74>
	    PRINTF("nullrdc tx noack\n\r");
	  }
        }
        break;
      case RADIO_TX_COLLISION:
        ret = MAC_TX_COLLISION;
    b8d4:	2401      	movs	r4, #1
    } else {
      if(!is_broadcast) {
        RIMESTATS_ADD(reliabletx);
      }

      switch(NETSTACK_RADIO.transmit(packetbuf_totlen())) {
    b8d6:	2802      	cmp	r0, #2
    b8d8:	d1ed      	bne.n	b8b6 <send_one_packet+0xf2>
#endif /* ! NULLRDC_802154_AUTOACK */
  }
  if(ret == MAC_TX_OK) {
    last_sent_ok = 1;
  }
  mac_call_sent_callback(sent, ptr, ret, 1);
    b8da:	9800      	ldr	r0, [sp, #0]
    b8dc:	9901      	ldr	r1, [sp, #4]
    b8de:	1c22      	adds	r2, r4, #0
    b8e0:	2301      	movs	r3, #1
    b8e2:	4d12      	ldr	r5, [pc, #72]	; (b92c <send_one_packet+0x168>)
    b8e4:	47a8      	blx	r5
      break;
    }

#endif /* ! NULLRDC_802154_AUTOACK */
  }
  if(ret == MAC_TX_OK) {
    b8e6:	4260      	negs	r0, r4
    b8e8:	4160      	adcs	r0, r4
    last_sent_ok = 1;
  }
  mac_call_sent_callback(sent, ptr, ret, 1);
  return last_sent_ok;
}
    b8ea:	b005      	add	sp, #20
    b8ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
    b8ee:	46c0      	nop			; (mov r8, r8)
    b8f0:	200031d8 	.word	0x200031d8
    b8f4:	200031d0 	.word	0x200031d0
    b8f8:	0000ac6d 	.word	0x0000ac6d
    b8fc:	200031f8 	.word	0x200031f8
    b900:	00012e5c 	.word	0x00012e5c
    b904:	0000bed9 	.word	0x0000bed9
    b908:	00012ed0 	.word	0x00012ed0
    b90c:	0000bf1d 	.word	0x0000bf1d
    b910:	200031e0 	.word	0x200031e0
    b914:	00012e30 	.word	0x00012e30
    b918:	0000ac7d 	.word	0x0000ac7d
    b91c:	0000fa29 	.word	0x0000fa29
    b920:	00002729 	.word	0x00002729
    b924:	fffff9e6 	.word	0xfffff9e6
    b928:	20003230 	.word	0x20003230
    b92c:	0000b691 	.word	0x0000b691

0000b930 <send_list>:
  send_one_packet(sent, ptr);
}
/*---------------------------------------------------------------------------*/
static void
send_list(mac_callback_t sent, void *ptr, struct rdc_buf_list *buf_list)
{
    b930:	b5f0      	push	{r4, r5, r6, r7, lr}
    b932:	b083      	sub	sp, #12
    b934:	9001      	str	r0, [sp, #4]
    b936:	1c0d      	adds	r5, r1, #0
  while(buf_list != NULL) {
    b938:	2a00      	cmp	r2, #0
    b93a:	d00b      	beq.n	b954 <send_list+0x24>
    /* We backup the next pointer, as it may be nullified by
     * mac_call_sent_callback() */
    struct rdc_buf_list *next = buf_list->next;
    int last_sent_ok;

    queuebuf_to_packetbuf(buf_list->buf);
    b93c:	4c06      	ldr	r4, [pc, #24]	; (b958 <send_list+0x28>)
    last_sent_ok = send_one_packet(sent, ptr);
    b93e:	4f07      	ldr	r7, [pc, #28]	; (b95c <send_list+0x2c>)
send_list(mac_callback_t sent, void *ptr, struct rdc_buf_list *buf_list)
{
  while(buf_list != NULL) {
    /* We backup the next pointer, as it may be nullified by
     * mac_call_sent_callback() */
    struct rdc_buf_list *next = buf_list->next;
    b940:	6816      	ldr	r6, [r2, #0]
    int last_sent_ok;

    queuebuf_to_packetbuf(buf_list->buf);
    b942:	6850      	ldr	r0, [r2, #4]
    b944:	47a0      	blx	r4
    last_sent_ok = send_one_packet(sent, ptr);
    b946:	9801      	ldr	r0, [sp, #4]
    b948:	1c29      	adds	r1, r5, #0
    b94a:	47b8      	blx	r7

    /* If packet transmission was not successful, we should back off and let
     * upper layers retransmit, rather than potentially sending out-of-order
     * packet fragments. */
    if(!last_sent_ok) {
    b94c:	2800      	cmp	r0, #0
    b94e:	d001      	beq.n	b954 <send_list+0x24>
      return;
    }
    buf_list = next;
    b950:	1e32      	subs	r2, r6, #0
}
/*---------------------------------------------------------------------------*/
static void
send_list(mac_callback_t sent, void *ptr, struct rdc_buf_list *buf_list)
{
  while(buf_list != NULL) {
    b952:	d1f5      	bne.n	b940 <send_list+0x10>
    if(!last_sent_ok) {
      return;
    }
    buf_list = next;
  }
}
    b954:	b003      	add	sp, #12
    b956:	bdf0      	pop	{r4, r5, r6, r7, pc}
    b958:	0000c185 	.word	0x0000c185
    b95c:	0000b7c5 	.word	0x0000b7c5

0000b960 <send_packet>:
  return last_sent_ok;
}
/*---------------------------------------------------------------------------*/
static void
send_packet(mac_callback_t sent, void *ptr)
{
    b960:	b508      	push	{r3, lr}
  send_one_packet(sent, ptr);
    b962:	4b01      	ldr	r3, [pc, #4]	; (b968 <send_packet+0x8>)
    b964:	4798      	blx	r3
}
    b966:	bd08      	pop	{r3, pc}
    b968:	0000b7c5 	.word	0x0000b7c5

0000b96c <item_from_index>:
/*---------------------------------------------------------------------------*/
/* Get an item from its neighbor index */
static nbr_table_item_t *
item_from_index(nbr_table_t *table, int index)
{
  return table != NULL && index != -1 ? (char *)table->data + index * table->item_size : NULL;
    b96c:	2800      	cmp	r0, #0
    b96e:	d006      	beq.n	b97e <item_from_index+0x12>
    b970:	1c4b      	adds	r3, r1, #1
    b972:	d006      	beq.n	b982 <item_from_index+0x16>
    b974:	6843      	ldr	r3, [r0, #4]
    b976:	4359      	muls	r1, r3
    b978:	68c0      	ldr	r0, [r0, #12]
    b97a:	1840      	adds	r0, r0, r1
    b97c:	e002      	b.n	b984 <item_from_index+0x18>
    b97e:	2000      	movs	r0, #0
    b980:	e000      	b.n	b984 <item_from_index+0x18>
    b982:	2000      	movs	r0, #0
}
    b984:	4770      	bx	lr
    b986:	46c0      	nop			; (mov r8, r8)

0000b988 <index_from_key>:
/*---------------------------------------------------------------------------*/
/* Get the neighbor index of an item */
static int
index_from_key(nbr_table_key_t *key)
{
  return key != NULL ? key - (nbr_table_key_t *)neighbor_addr_mem.mem : -1;
    b988:	2800      	cmp	r0, #0
    b98a:	d006      	beq.n	b99a <index_from_key+0x12>
    b98c:	4b04      	ldr	r3, [pc, #16]	; (b9a0 <index_from_key+0x18>)
    b98e:	689b      	ldr	r3, [r3, #8]
    b990:	1ac0      	subs	r0, r0, r3
    b992:	1080      	asrs	r0, r0, #2
    b994:	4b03      	ldr	r3, [pc, #12]	; (b9a4 <index_from_key+0x1c>)
    b996:	4358      	muls	r0, r3
    b998:	e001      	b.n	b99e <index_from_key+0x16>
    b99a:	2001      	movs	r0, #1
    b99c:	4240      	negs	r0, r0
}
    b99e:	4770      	bx	lr
    b9a0:	200000f4 	.word	0x200000f4
    b9a4:	aaaaaaab 	.word	0xaaaaaaab

0000b9a8 <index_from_item>:
/*---------------------------------------------------------------------------*/
/* Get the neighbor index of an item */
static int
index_from_item(nbr_table_t *table, const nbr_table_item_t *item)
{
    b9a8:	b508      	push	{r3, lr}
  return table != NULL && item != NULL ? ((int)((char *)item - (char *)table->data)) / table->item_size : -1;
    b9aa:	2800      	cmp	r0, #0
    b9ac:	d008      	beq.n	b9c0 <index_from_item+0x18>
    b9ae:	2900      	cmp	r1, #0
    b9b0:	d009      	beq.n	b9c6 <index_from_item+0x1e>
    b9b2:	1c03      	adds	r3, r0, #0
    b9b4:	68c2      	ldr	r2, [r0, #12]
    b9b6:	1a88      	subs	r0, r1, r2
    b9b8:	6859      	ldr	r1, [r3, #4]
    b9ba:	4b04      	ldr	r3, [pc, #16]	; (b9cc <index_from_item+0x24>)
    b9bc:	4798      	blx	r3
    b9be:	e004      	b.n	b9ca <index_from_item+0x22>
    b9c0:	2001      	movs	r0, #1
    b9c2:	4240      	negs	r0, r0
    b9c4:	e001      	b.n	b9ca <index_from_item+0x22>
    b9c6:	2001      	movs	r0, #1
    b9c8:	4240      	negs	r0, r0
}
    b9ca:	bd08      	pop	{r3, pc}
    b9cc:	0001088d 	.word	0x0001088d

0000b9d0 <nbr_get_bit>:
}
/*---------------------------------------------------------------------------*/
/* Get bit from "used" or "locked" bitmap */
static int
nbr_get_bit(uint8_t *bitmap, nbr_table_t *table, nbr_table_item_t *item)
{
    b9d0:	b538      	push	{r3, r4, r5, lr}
    b9d2:	1c05      	adds	r5, r0, #0
    b9d4:	1c0c      	adds	r4, r1, #0
  int item_index = index_from_item(table, item);
    b9d6:	1c08      	adds	r0, r1, #0
    b9d8:	1c11      	adds	r1, r2, #0
    b9da:	4b08      	ldr	r3, [pc, #32]	; (b9fc <nbr_get_bit+0x2c>)
    b9dc:	4798      	blx	r3
  if(table != NULL && item_index != -1) {
    b9de:	2c00      	cmp	r4, #0
    b9e0:	d008      	beq.n	b9f4 <nbr_get_bit+0x24>
    b9e2:	1c43      	adds	r3, r0, #1
    b9e4:	d008      	beq.n	b9f8 <nbr_get_bit+0x28>
    return (bitmap[item_index] & (1 << table->index)) != 0;
    b9e6:	5c2b      	ldrb	r3, [r5, r0]
    b9e8:	6820      	ldr	r0, [r4, #0]
    b9ea:	4103      	asrs	r3, r0
    b9ec:	1c18      	adds	r0, r3, #0
    b9ee:	2301      	movs	r3, #1
    b9f0:	4018      	ands	r0, r3
    b9f2:	e002      	b.n	b9fa <nbr_get_bit+0x2a>
  } else {
    return 0;
    b9f4:	2000      	movs	r0, #0
    b9f6:	e000      	b.n	b9fa <nbr_get_bit+0x2a>
    b9f8:	2000      	movs	r0, #0
  }
  return 0;
}
    b9fa:	bd38      	pop	{r3, r4, r5, pc}
    b9fc:	0000b9a9 	.word	0x0000b9a9

0000ba00 <nbr_set_bit>:
/*---------------------------------------------------------------------------*/
/* Set bit in "used" or "locked" bitmap */
static int
nbr_set_bit(uint8_t *bitmap, nbr_table_t *table, nbr_table_item_t *item, int value)
{
    ba00:	b570      	push	{r4, r5, r6, lr}
    ba02:	1c05      	adds	r5, r0, #0
    ba04:	1c0c      	adds	r4, r1, #0
    ba06:	1c1e      	adds	r6, r3, #0
  int item_index = index_from_item(table, item);
    ba08:	1c08      	adds	r0, r1, #0
    ba0a:	1c11      	adds	r1, r2, #0
    ba0c:	4b0f      	ldr	r3, [pc, #60]	; (ba4c <nbr_set_bit+0x4c>)
    ba0e:	4798      	blx	r3
  if(table != NULL && item_index != -1) {
    ba10:	2c00      	cmp	r4, #0
    ba12:	d016      	beq.n	ba42 <nbr_set_bit+0x42>
    ba14:	1c43      	adds	r3, r0, #1
    ba16:	d016      	beq.n	ba46 <nbr_set_bit+0x46>
    if(value) {
    ba18:	2e00      	cmp	r6, #0
    ba1a:	d008      	beq.n	ba2e <nbr_set_bit+0x2e>
      bitmap[item_index] |= 1 << table->index;
    ba1c:	1828      	adds	r0, r5, r0
    ba1e:	6822      	ldr	r2, [r4, #0]
    ba20:	2301      	movs	r3, #1
    ba22:	4093      	lsls	r3, r2
    ba24:	7802      	ldrb	r2, [r0, #0]
    ba26:	4313      	orrs	r3, r2
    ba28:	7003      	strb	r3, [r0, #0]
    } else {
      bitmap[item_index] &= ~(1 << table->index);
    }
    return 1;
    ba2a:	2001      	movs	r0, #1
    ba2c:	e00c      	b.n	ba48 <nbr_set_bit+0x48>
  int item_index = index_from_item(table, item);
  if(table != NULL && item_index != -1) {
    if(value) {
      bitmap[item_index] |= 1 << table->index;
    } else {
      bitmap[item_index] &= ~(1 << table->index);
    ba2e:	1828      	adds	r0, r5, r0
    ba30:	6822      	ldr	r2, [r4, #0]
    ba32:	2301      	movs	r3, #1
    ba34:	4093      	lsls	r3, r2
    ba36:	1c1a      	adds	r2, r3, #0
    ba38:	7803      	ldrb	r3, [r0, #0]
    ba3a:	4393      	bics	r3, r2
    ba3c:	7003      	strb	r3, [r0, #0]
    }
    return 1;
    ba3e:	2001      	movs	r0, #1
    ba40:	e002      	b.n	ba48 <nbr_set_bit+0x48>
  } else {
    return 0;
    ba42:	2000      	movs	r0, #0
    ba44:	e000      	b.n	ba48 <nbr_set_bit+0x48>
    ba46:	2000      	movs	r0, #0
  }
  return 0;
}
    ba48:	bd70      	pop	{r4, r5, r6, pc}
    ba4a:	46c0      	nop			; (mov r8, r8)
    ba4c:	0000b9a9 	.word	0x0000b9a9

0000ba50 <index_from_lladdr>:
}
/*---------------------------------------------------------------------------*/
/* Get the index of a neighbor from its link-layer address */
static int
index_from_lladdr(const linkaddr_t *lladdr)
{
    ba50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    ba52:	1e05      	subs	r5, r0, #0
  nbr_table_key_t *key;
  /* Allow lladdr-free insertion, useful e.g. for IPv6 ND.
   * Only one such entry is possible at a time, indexed by linkaddr_null. */
  if(lladdr == NULL) {
    ba54:	d100      	bne.n	ba58 <index_from_lladdr+0x8>
    lladdr = &linkaddr_null;
    ba56:	4d0e      	ldr	r5, [pc, #56]	; (ba90 <index_from_lladdr+0x40>)
  }
  key = list_head(nbr_table_keys);
    ba58:	480e      	ldr	r0, [pc, #56]	; (ba94 <index_from_lladdr+0x44>)
    ba5a:	4b0f      	ldr	r3, [pc, #60]	; (ba98 <index_from_lladdr+0x48>)
    ba5c:	4798      	blx	r3
    ba5e:	1e04      	subs	r4, r0, #0
  while(key != NULL) {
    ba60:	d013      	beq.n	ba8a <index_from_lladdr+0x3a>
    if(lladdr && linkaddr_cmp(lladdr, &key->lladdr)) {
    ba62:	4f0e      	ldr	r7, [pc, #56]	; (ba9c <index_from_lladdr+0x4c>)
      return index_from_key(key);
    }
    key = list_item_next(key);
    ba64:	4e0e      	ldr	r6, [pc, #56]	; (baa0 <index_from_lladdr+0x50>)
  if(lladdr == NULL) {
    lladdr = &linkaddr_null;
  }
  key = list_head(nbr_table_keys);
  while(key != NULL) {
    if(lladdr && linkaddr_cmp(lladdr, &key->lladdr)) {
    ba66:	2d00      	cmp	r5, #0
    ba68:	d008      	beq.n	ba7c <index_from_lladdr+0x2c>
    ba6a:	1d21      	adds	r1, r4, #4
    ba6c:	1c28      	adds	r0, r5, #0
    ba6e:	47b8      	blx	r7
    ba70:	2800      	cmp	r0, #0
    ba72:	d003      	beq.n	ba7c <index_from_lladdr+0x2c>
      return index_from_key(key);
    ba74:	1c20      	adds	r0, r4, #0
    ba76:	4b0b      	ldr	r3, [pc, #44]	; (baa4 <index_from_lladdr+0x54>)
    ba78:	4798      	blx	r3
    ba7a:	e008      	b.n	ba8e <index_from_lladdr+0x3e>
    }
    key = list_item_next(key);
    ba7c:	1c20      	adds	r0, r4, #0
    ba7e:	47b0      	blx	r6
    ba80:	1e04      	subs	r4, r0, #0
   * Only one such entry is possible at a time, indexed by linkaddr_null. */
  if(lladdr == NULL) {
    lladdr = &linkaddr_null;
  }
  key = list_head(nbr_table_keys);
  while(key != NULL) {
    ba82:	d1f0      	bne.n	ba66 <index_from_lladdr+0x16>
    if(lladdr && linkaddr_cmp(lladdr, &key->lladdr)) {
      return index_from_key(key);
    }
    key = list_item_next(key);
  }
  return -1;
    ba84:	2001      	movs	r0, #1
    ba86:	4240      	negs	r0, r0
    ba88:	e001      	b.n	ba8e <index_from_lladdr+0x3e>
    ba8a:	2001      	movs	r0, #1
    ba8c:	4240      	negs	r0, r0
}
    ba8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ba90:	00012e30 	.word	0x00012e30
    ba94:	20000ec4 	.word	0x20000ec4
    ba98:	00005719 	.word	0x00005719
    ba9c:	0000ac7d 	.word	0x0000ac7d
    baa0:	000057c1 	.word	0x000057c1
    baa4:	0000b989 	.word	0x0000b989

0000baa8 <nbr_table_register>:
/*---------------------------------------------------------------------------*/
/* Register a new neighbor table. To be used at initialization by modules
 * using a neighbor table */
int
nbr_table_register(nbr_table_t *table, nbr_table_callback *callback)
{
    baa8:	b510      	push	{r4, lr}
  if(num_tables < MAX_NUM_TABLES) {
    baaa:	4b08      	ldr	r3, [pc, #32]	; (bacc <nbr_table_register+0x24>)
    baac:	681b      	ldr	r3, [r3, #0]
    table->callback = callback;
    all_tables[table->index] = table;
    return 1;
  } else {
    /* Maximum number of tables exceeded */
    return 0;
    baae:	2200      	movs	r2, #0
/* Register a new neighbor table. To be used at initialization by modules
 * using a neighbor table */
int
nbr_table_register(nbr_table_t *table, nbr_table_callback *callback)
{
  if(num_tables < MAX_NUM_TABLES) {
    bab0:	2b07      	cmp	r3, #7
    bab2:	d808      	bhi.n	bac6 <nbr_table_register+0x1e>
    table->index = num_tables++;
    bab4:	1c5c      	adds	r4, r3, #1
    bab6:	4a05      	ldr	r2, [pc, #20]	; (bacc <nbr_table_register+0x24>)
    bab8:	6014      	str	r4, [r2, #0]
    baba:	6003      	str	r3, [r0, #0]
    table->callback = callback;
    babc:	6081      	str	r1, [r0, #8]
    all_tables[table->index] = table;
    babe:	009b      	lsls	r3, r3, #2
    bac0:	4a03      	ldr	r2, [pc, #12]	; (bad0 <nbr_table_register+0x28>)
    bac2:	5098      	str	r0, [r3, r2]
    return 1;
    bac4:	2201      	movs	r2, #1
  } else {
    /* Maximum number of tables exceeded */
    return 0;
  }
}
    bac6:	1c10      	adds	r0, r2, #0
    bac8:	bd10      	pop	{r4, pc}
    baca:	46c0      	nop			; (mov r8, r8)
    bacc:	20000fec 	.word	0x20000fec
    bad0:	20000fcc 	.word	0x20000fcc

0000bad4 <nbr_table_next>:
}
/*---------------------------------------------------------------------------*/
/* Iterates over the current table */
nbr_table_item_t *
nbr_table_next(nbr_table_t *table, nbr_table_item_t *item)
{
    bad4:	b5f0      	push	{r4, r5, r6, r7, lr}
    bad6:	b083      	sub	sp, #12
    bad8:	9001      	str	r0, [sp, #4]
    bada:	1c0d      	adds	r5, r1, #0
/*---------------------------------------------------------------------------*/
/* Get the key af an item */
static nbr_table_key_t *
key_from_item(nbr_table_t *table, const nbr_table_item_t *item)
{
  return key_from_index(index_from_item(table, item));
    badc:	4f11      	ldr	r7, [pc, #68]	; (bb24 <nbr_table_next+0x50>)
/*---------------------------------------------------------------------------*/
/* Get a key from a neighbor index */
static nbr_table_key_t *
key_from_index(int index)
{
  return index != -1 ? &((nbr_table_key_t *)neighbor_addr_mem.mem)[index] : NULL;
    bade:	4c12      	ldr	r4, [pc, #72]	; (bb28 <nbr_table_next+0x54>)
nbr_table_item_t *
nbr_table_next(nbr_table_t *table, nbr_table_item_t *item)
{
  do {
    void *key = key_from_item(table, item);
    key = list_item_next(key);
    bae0:	4e12      	ldr	r6, [pc, #72]	; (bb2c <nbr_table_next+0x58>)
/*---------------------------------------------------------------------------*/
/* Get the key af an item */
static nbr_table_key_t *
key_from_item(nbr_table_t *table, const nbr_table_item_t *item)
{
  return key_from_index(index_from_item(table, item));
    bae2:	9801      	ldr	r0, [sp, #4]
    bae4:	1c29      	adds	r1, r5, #0
    bae6:	47b8      	blx	r7
/*---------------------------------------------------------------------------*/
/* Get a key from a neighbor index */
static nbr_table_key_t *
key_from_index(int index)
{
  return index != -1 ? &((nbr_table_key_t *)neighbor_addr_mem.mem)[index] : NULL;
    bae8:	1c43      	adds	r3, r0, #1
    baea:	d006      	beq.n	bafa <nbr_table_next+0x26>
    baec:	0043      	lsls	r3, r0, #1
    baee:	1818      	adds	r0, r3, r0
    baf0:	0080      	lsls	r0, r0, #2
    baf2:	68a3      	ldr	r3, [r4, #8]
    baf4:	469c      	mov	ip, r3
    baf6:	4460      	add	r0, ip
    baf8:	e000      	b.n	bafc <nbr_table_next+0x28>
    bafa:	2000      	movs	r0, #0
nbr_table_item_t *
nbr_table_next(nbr_table_t *table, nbr_table_item_t *item)
{
  do {
    void *key = key_from_item(table, item);
    key = list_item_next(key);
    bafc:	47b0      	blx	r6
/*---------------------------------------------------------------------------*/
/* Get an item from its key */
static nbr_table_item_t *
item_from_key(nbr_table_t *table, nbr_table_key_t *key)
{
  return item_from_index(table, index_from_key(key));
    bafe:	4b0c      	ldr	r3, [pc, #48]	; (bb30 <nbr_table_next+0x5c>)
    bb00:	4798      	blx	r3
    bb02:	1c01      	adds	r1, r0, #0
    bb04:	9801      	ldr	r0, [sp, #4]
    bb06:	4b0b      	ldr	r3, [pc, #44]	; (bb34 <nbr_table_next+0x60>)
    bb08:	4798      	blx	r3
    bb0a:	1e05      	subs	r5, r0, #0
  do {
    void *key = key_from_item(table, item);
    key = list_item_next(key);
    /* Loop until the next item is in the current table */
    item = item_from_key(table, key);
  } while(item && !nbr_get_bit(used_map, table, item));
    bb0c:	d006      	beq.n	bb1c <nbr_table_next+0x48>
    bb0e:	480a      	ldr	r0, [pc, #40]	; (bb38 <nbr_table_next+0x64>)
    bb10:	9901      	ldr	r1, [sp, #4]
    bb12:	1c2a      	adds	r2, r5, #0
    bb14:	4b09      	ldr	r3, [pc, #36]	; (bb3c <nbr_table_next+0x68>)
    bb16:	4798      	blx	r3
    bb18:	2800      	cmp	r0, #0
    bb1a:	d0e2      	beq.n	bae2 <nbr_table_next+0xe>
  return item;
}
    bb1c:	1c28      	adds	r0, r5, #0
    bb1e:	b003      	add	sp, #12
    bb20:	bdf0      	pop	{r4, r5, r6, r7, pc}
    bb22:	46c0      	nop			; (mov r8, r8)
    bb24:	0000b9a9 	.word	0x0000b9a9
    bb28:	200000f4 	.word	0x200000f4
    bb2c:	000057c1 	.word	0x000057c1
    bb30:	0000b989 	.word	0x0000b989
    bb34:	0000b96d 	.word	0x0000b96d
    bb38:	20000fb8 	.word	0x20000fb8
    bb3c:	0000b9d1 	.word	0x0000b9d1

0000bb40 <nbr_table_head>:
}
/*---------------------------------------------------------------------------*/
/* Returns the first item of the current table */
nbr_table_item_t *
nbr_table_head(nbr_table_t *table)
{
    bb40:	b538      	push	{r3, r4, r5, lr}
    bb42:	1c05      	adds	r5, r0, #0
  /* Get item from first key */
  nbr_table_item_t *item = item_from_key(table, list_head(nbr_table_keys));
    bb44:	480b      	ldr	r0, [pc, #44]	; (bb74 <nbr_table_head+0x34>)
    bb46:	4b0c      	ldr	r3, [pc, #48]	; (bb78 <nbr_table_head+0x38>)
    bb48:	4798      	blx	r3
/*---------------------------------------------------------------------------*/
/* Get an item from its key */
static nbr_table_item_t *
item_from_key(nbr_table_t *table, nbr_table_key_t *key)
{
  return item_from_index(table, index_from_key(key));
    bb4a:	4b0c      	ldr	r3, [pc, #48]	; (bb7c <nbr_table_head+0x3c>)
    bb4c:	4798      	blx	r3
    bb4e:	1c01      	adds	r1, r0, #0
    bb50:	1c28      	adds	r0, r5, #0
    bb52:	4b0b      	ldr	r3, [pc, #44]	; (bb80 <nbr_table_head+0x40>)
    bb54:	4798      	blx	r3
    bb56:	1c04      	adds	r4, r0, #0
nbr_table_head(nbr_table_t *table)
{
  /* Get item from first key */
  nbr_table_item_t *item = item_from_key(table, list_head(nbr_table_keys));
  /* Item is the first neighbor, now check is it is in the current table */
  if(nbr_get_bit(used_map, table, item)) {
    bb58:	480a      	ldr	r0, [pc, #40]	; (bb84 <nbr_table_head+0x44>)
    bb5a:	1c29      	adds	r1, r5, #0
    bb5c:	1c22      	adds	r2, r4, #0
    bb5e:	4b0a      	ldr	r3, [pc, #40]	; (bb88 <nbr_table_head+0x48>)
    bb60:	4798      	blx	r3
    bb62:	2800      	cmp	r0, #0
    bb64:	d104      	bne.n	bb70 <nbr_table_head+0x30>
    return item;
  } else {
    return nbr_table_next(table, item);
    bb66:	1c28      	adds	r0, r5, #0
    bb68:	1c21      	adds	r1, r4, #0
    bb6a:	4b08      	ldr	r3, [pc, #32]	; (bb8c <nbr_table_head+0x4c>)
    bb6c:	4798      	blx	r3
    bb6e:	1c04      	adds	r4, r0, #0
  }
}
    bb70:	1c20      	adds	r0, r4, #0
    bb72:	bd38      	pop	{r3, r4, r5, pc}
    bb74:	20000ec4 	.word	0x20000ec4
    bb78:	00005719 	.word	0x00005719
    bb7c:	0000b989 	.word	0x0000b989
    bb80:	0000b96d 	.word	0x0000b96d
    bb84:	20000fb8 	.word	0x20000fb8
    bb88:	0000b9d1 	.word	0x0000b9d1
    bb8c:	0000bad5 	.word	0x0000bad5

0000bb90 <nbr_table_add_lladdr>:
}
/*---------------------------------------------------------------------------*/
/* Add a neighbor indexed with its link-layer address */
nbr_table_item_t *
nbr_table_add_lladdr(nbr_table_t *table, const linkaddr_t *lladdr)
{
    bb90:	b5f0      	push	{r4, r5, r6, r7, lr}
    bb92:	4657      	mov	r7, sl
    bb94:	464e      	mov	r6, r9
    bb96:	4645      	mov	r5, r8
    bb98:	b4e0      	push	{r5, r6, r7}
    bb9a:	b082      	sub	sp, #8
    bb9c:	1c04      	adds	r4, r0, #0
    bb9e:	1e0d      	subs	r5, r1, #0
  nbr_table_item_t *item;
  nbr_table_key_t *key;

  /* Allow lladdr-free insertion, useful e.g. for IPv6 ND.
   * Only one such entry is possible at a time, indexed by linkaddr_null. */
  if(lladdr == NULL) {
    bba0:	d100      	bne.n	bba4 <nbr_table_add_lladdr+0x14>
    lladdr = &linkaddr_null;
    bba2:	4d4b      	ldr	r5, [pc, #300]	; (bcd0 <nbr_table_add_lladdr+0x140>)
  }

  if((index = index_from_lladdr(lladdr)) == -1) {
    bba4:	1c28      	adds	r0, r5, #0
    bba6:	4b4b      	ldr	r3, [pc, #300]	; (bcd4 <nbr_table_add_lladdr+0x144>)
    bba8:	4798      	blx	r3
    bbaa:	1c07      	adds	r7, r0, #0
    bbac:	1c43      	adds	r3, r0, #1
    bbae:	d159      	bne.n	bc64 <nbr_table_add_lladdr+0xd4>
{
  nbr_table_key_t *key;
  int least_used_count = 0;
  nbr_table_key_t *least_used_key = NULL;

  key = memb_alloc(&neighbor_addr_mem);
    bbb0:	4849      	ldr	r0, [pc, #292]	; (bcd8 <nbr_table_add_lladdr+0x148>)
    bbb2:	4b4a      	ldr	r3, [pc, #296]	; (bcdc <nbr_table_add_lladdr+0x14c>)
    bbb4:	4798      	blx	r3
  if(key != NULL) {
    return key;
    bbb6:	1e06      	subs	r6, r0, #0
  nbr_table_key_t *key;
  int least_used_count = 0;
  nbr_table_key_t *least_used_key = NULL;

  key = memb_alloc(&neighbor_addr_mem);
  if(key != NULL) {
    bbb8:	d172      	bne.n	bca0 <nbr_table_add_lladdr+0x110>
            * (1) not locked
            * (2) used by fewest tables
            * (3) oldest (the list is ordered by insertion time)
            * */
    /* Get item from first key */
    key = list_head(nbr_table_keys);
    bbba:	4849      	ldr	r0, [pc, #292]	; (bce0 <nbr_table_add_lladdr+0x150>)
    bbbc:	4b49      	ldr	r3, [pc, #292]	; (bce4 <nbr_table_add_lladdr+0x154>)
    bbbe:	4798      	blx	r3
    bbc0:	1e07      	subs	r7, r0, #0
    while(key != NULL) {
    bbc2:	d04d      	beq.n	bc60 <nbr_table_add_lladdr+0xd0>
    bbc4:	2300      	movs	r3, #0
    bbc6:	469a      	mov	sl, r3
    bbc8:	9300      	str	r3, [sp, #0]
      int item_index = index_from_key(key);
    bbca:	4b47      	ldr	r3, [pc, #284]	; (bce8 <nbr_table_add_lladdr+0x158>)
    bbcc:	4699      	mov	r9, r3
      int locked = locked_map[item_index];
    bbce:	4e47      	ldr	r6, [pc, #284]	; (bcec <nbr_table_add_lladdr+0x15c>)
            * (3) oldest (the list is ordered by insertion time)
            * */
    /* Get item from first key */
    key = list_head(nbr_table_keys);
    while(key != NULL) {
      int item_index = index_from_key(key);
    bbd0:	1c38      	adds	r0, r7, #0
    bbd2:	47c8      	blx	r9
      int locked = locked_map[item_index];
      /* Never delete a locked item */
      if(!locked) {
    bbd4:	5c33      	ldrb	r3, [r6, r0]
    bbd6:	2b00      	cmp	r3, #0
    bbd8:	d116      	bne.n	bc08 <nbr_table_add_lladdr+0x78>
        int used = used_map[item_index];
    bbda:	4b45      	ldr	r3, [pc, #276]	; (bcf0 <nbr_table_add_lladdr+0x160>)
    bbdc:	5c1b      	ldrb	r3, [r3, r0]
        int used_count = 0;
        /* Count how many tables are using this item */
        while(used != 0) {
    bbde:	2b00      	cmp	r3, #0
    bbe0:	d06b      	beq.n	bcba <nbr_table_add_lladdr+0x12a>
    bbe2:	2200      	movs	r2, #0
          if((used & 1) == 1) {
    bbe4:	2001      	movs	r0, #1
            used_count++;
    bbe6:	1c01      	adds	r1, r0, #0
    bbe8:	4019      	ands	r1, r3
    bbea:	1852      	adds	r2, r2, r1
          }
          used >>= 1;
    bbec:	105b      	asrs	r3, r3, #1
      /* Never delete a locked item */
      if(!locked) {
        int used = used_map[item_index];
        int used_count = 0;
        /* Count how many tables are using this item */
        while(used != 0) {
    bbee:	d1fa      	bne.n	bbe6 <nbr_table_add_lladdr+0x56>
            used_count++;
          }
          used >>= 1;
        }
        /* Find least used item */
        if(least_used_key == NULL || used_count < least_used_count) {
    bbf0:	9b00      	ldr	r3, [sp, #0]
    bbf2:	2b00      	cmp	r3, #0
    bbf4:	d003      	beq.n	bbfe <nbr_table_add_lladdr+0x6e>
    bbf6:	4552      	cmp	r2, sl
    bbf8:	da06      	bge.n	bc08 <nbr_table_add_lladdr+0x78>
    bbfa:	4692      	mov	sl, r2
    bbfc:	e000      	b.n	bc00 <nbr_table_add_lladdr+0x70>
    bbfe:	4692      	mov	sl, r2
          least_used_key = key;
          least_used_count = used_count;
          if(used_count == 0) { /* We won't find any least used item */
    bc00:	4653      	mov	r3, sl
    bc02:	2b00      	cmp	r3, #0
    bc04:	d03f      	beq.n	bc86 <nbr_table_add_lladdr+0xf6>
    bc06:	9700      	str	r7, [sp, #0]
            break;
          }
        }
      }
      key = list_item_next(key);
    bc08:	1c38      	adds	r0, r7, #0
    bc0a:	4b3a      	ldr	r3, [pc, #232]	; (bcf4 <nbr_table_add_lladdr+0x164>)
    bc0c:	4798      	blx	r3
    bc0e:	1e07      	subs	r7, r0, #0
            * (2) used by fewest tables
            * (3) oldest (the list is ordered by insertion time)
            * */
    /* Get item from first key */
    key = list_head(nbr_table_keys);
    while(key != NULL) {
    bc10:	d1de      	bne.n	bbd0 <nbr_table_add_lladdr+0x40>
    bc12:	e03b      	b.n	bc8c <nbr_table_add_lladdr+0xfc>
      return NULL;
    } else {
      /* Reuse least used item */
      int i;
      for(i = 0; i<MAX_NUM_TABLES; i++) {
        if(all_tables[i] != NULL && all_tables[i]->callback != NULL) {
    bc14:	6837      	ldr	r7, [r6, #0]
    bc16:	2f00      	cmp	r7, #0
    bc18:	d013      	beq.n	bc42 <nbr_table_add_lladdr+0xb2>
    bc1a:	68bb      	ldr	r3, [r7, #8]
    bc1c:	469a      	mov	sl, r3
    bc1e:	2b00      	cmp	r3, #0
    bc20:	d00f      	beq.n	bc42 <nbr_table_add_lladdr+0xb2>
/*---------------------------------------------------------------------------*/
/* Get an item from its key */
static nbr_table_item_t *
item_from_key(nbr_table_t *table, nbr_table_key_t *key)
{
  return item_from_index(table, index_from_key(key));
    bc22:	9800      	ldr	r0, [sp, #0]
    bc24:	4b30      	ldr	r3, [pc, #192]	; (bce8 <nbr_table_add_lladdr+0x158>)
    bc26:	4798      	blx	r3
    bc28:	1c01      	adds	r1, r0, #0
    bc2a:	1c38      	adds	r0, r7, #0
    bc2c:	47c0      	blx	r8
    bc2e:	1c02      	adds	r2, r0, #0
    bc30:	9001      	str	r0, [sp, #4]
      int i;
      for(i = 0; i<MAX_NUM_TABLES; i++) {
        if(all_tables[i] != NULL && all_tables[i]->callback != NULL) {
          /* Call table callback for each table that uses this item */
          nbr_table_item_t *removed_item = item_from_key(all_tables[i], least_used_key);
          if(nbr_get_bit(used_map, all_tables[i], removed_item) == 1) {
    bc32:	482f      	ldr	r0, [pc, #188]	; (bcf0 <nbr_table_add_lladdr+0x160>)
    bc34:	1c39      	adds	r1, r7, #0
    bc36:	4b30      	ldr	r3, [pc, #192]	; (bcf8 <nbr_table_add_lladdr+0x168>)
    bc38:	4798      	blx	r3
    bc3a:	2801      	cmp	r0, #1
    bc3c:	d101      	bne.n	bc42 <nbr_table_add_lladdr+0xb2>
            all_tables[i]->callback(removed_item);
    bc3e:	9801      	ldr	r0, [sp, #4]
    bc40:	47d0      	blx	sl
    bc42:	3604      	adds	r6, #4
      /* We haven't found any unlocked item, allocation fails */
      return NULL;
    } else {
      /* Reuse least used item */
      int i;
      for(i = 0; i<MAX_NUM_TABLES; i++) {
    bc44:	454e      	cmp	r6, r9
    bc46:	d1e5      	bne.n	bc14 <nbr_table_add_lladdr+0x84>
            all_tables[i]->callback(removed_item);
          }
        }
      }
      /* Empty used map */
      used_map[index_from_key(least_used_key)] = 0;
    bc48:	9e00      	ldr	r6, [sp, #0]
    bc4a:	1c30      	adds	r0, r6, #0
    bc4c:	4b26      	ldr	r3, [pc, #152]	; (bce8 <nbr_table_add_lladdr+0x158>)
    bc4e:	4798      	blx	r3
    bc50:	2200      	movs	r2, #0
    bc52:	4b27      	ldr	r3, [pc, #156]	; (bcf0 <nbr_table_add_lladdr+0x160>)
    bc54:	541a      	strb	r2, [r3, r0]
      /* Remove neighbor from list */
      list_remove(nbr_table_keys, least_used_key);
    bc56:	4822      	ldr	r0, [pc, #136]	; (bce0 <nbr_table_add_lladdr+0x150>)
    bc58:	1c31      	adds	r1, r6, #0
    bc5a:	4b28      	ldr	r3, [pc, #160]	; (bcfc <nbr_table_add_lladdr+0x16c>)
    bc5c:	4798      	blx	r3
    bc5e:	e01f      	b.n	bca0 <nbr_table_add_lladdr+0x110>
     /* Neighbor not yet in table, let's try to allocate one */
    key = nbr_table_allocate();

    /* No space available for new entry */
    if(key == NULL) {
      return NULL;
    bc60:	2000      	movs	r0, #0
    bc62:	e02f      	b.n	bcc4 <nbr_table_add_lladdr+0x134>
    /* Set link-layer address */
    linkaddr_copy(&key->lladdr, lladdr);
  }

  /* Get item in the current table */
  item = item_from_index(table, index);
    bc64:	1c20      	adds	r0, r4, #0
    bc66:	1c39      	adds	r1, r7, #0
    bc68:	4b25      	ldr	r3, [pc, #148]	; (bd00 <nbr_table_add_lladdr+0x170>)
    bc6a:	4798      	blx	r3
    bc6c:	1c05      	adds	r5, r0, #0

  /* Initialize item data and set "used" bit */
  memset(item, 0, table->item_size);
    bc6e:	2100      	movs	r1, #0
    bc70:	6862      	ldr	r2, [r4, #4]
    bc72:	4b24      	ldr	r3, [pc, #144]	; (bd04 <nbr_table_add_lladdr+0x174>)
    bc74:	4798      	blx	r3
  nbr_set_bit(used_map, table, item, 1);
    bc76:	481e      	ldr	r0, [pc, #120]	; (bcf0 <nbr_table_add_lladdr+0x160>)
    bc78:	1c21      	adds	r1, r4, #0
    bc7a:	1c2a      	adds	r2, r5, #0
    bc7c:	2301      	movs	r3, #1
    bc7e:	4c22      	ldr	r4, [pc, #136]	; (bd08 <nbr_table_add_lladdr+0x178>)
    bc80:	47a0      	blx	r4

  return item;
    bc82:	1c28      	adds	r0, r5, #0
    bc84:	e01e      	b.n	bcc4 <nbr_table_add_lladdr+0x134>
        }
        /* Find least used item */
        if(least_used_key == NULL || used_count < least_used_count) {
          least_used_key = key;
          least_used_count = used_count;
          if(used_count == 0) { /* We won't find any least used item */
    bc86:	9700      	str	r7, [sp, #0]
    bc88:	e000      	b.n	bc8c <nbr_table_add_lladdr+0xfc>
            used_count++;
          }
          used >>= 1;
        }
        /* Find least used item */
        if(least_used_key == NULL || used_count < least_used_count) {
    bc8a:	9700      	str	r7, [sp, #0]
          }
        }
      }
      key = list_item_next(key);
    }
    if(least_used_key == NULL) {
    bc8c:	9b00      	ldr	r3, [sp, #0]
    bc8e:	2b00      	cmp	r3, #0
    bc90:	d0e6      	beq.n	bc60 <nbr_table_add_lladdr+0xd0>
    bc92:	4e1e      	ldr	r6, [pc, #120]	; (bd0c <nbr_table_add_lladdr+0x17c>)
    bc94:	2320      	movs	r3, #32
    bc96:	4699      	mov	r9, r3
    bc98:	44b1      	add	r9, r6
/*---------------------------------------------------------------------------*/
/* Get an item from its key */
static nbr_table_item_t *
item_from_key(nbr_table_t *table, nbr_table_key_t *key)
{
  return item_from_index(table, index_from_key(key));
    bc9a:	4b19      	ldr	r3, [pc, #100]	; (bd00 <nbr_table_add_lladdr+0x170>)
    bc9c:	4698      	mov	r8, r3
    bc9e:	e7b9      	b.n	bc14 <nbr_table_add_lladdr+0x84>
    if(key == NULL) {
      return NULL;
    }

    /* Add neighbor to list */
    list_add(nbr_table_keys, key);
    bca0:	480f      	ldr	r0, [pc, #60]	; (bce0 <nbr_table_add_lladdr+0x150>)
    bca2:	1c31      	adds	r1, r6, #0
    bca4:	4b1a      	ldr	r3, [pc, #104]	; (bd10 <nbr_table_add_lladdr+0x180>)
    bca6:	4798      	blx	r3

    /* Get index from newly allocated neighbor */
    index = index_from_key(key);
    bca8:	1c30      	adds	r0, r6, #0
    bcaa:	4b0f      	ldr	r3, [pc, #60]	; (bce8 <nbr_table_add_lladdr+0x158>)
    bcac:	4798      	blx	r3
    bcae:	1c07      	adds	r7, r0, #0

    /* Set link-layer address */
    linkaddr_copy(&key->lladdr, lladdr);
    bcb0:	1d30      	adds	r0, r6, #4
    bcb2:	1c29      	adds	r1, r5, #0
    bcb4:	4b17      	ldr	r3, [pc, #92]	; (bd14 <nbr_table_add_lladdr+0x184>)
    bcb6:	4798      	blx	r3
    bcb8:	e7d4      	b.n	bc64 <nbr_table_add_lladdr+0xd4>
            used_count++;
          }
          used >>= 1;
        }
        /* Find least used item */
        if(least_used_key == NULL || used_count < least_used_count) {
    bcba:	9b00      	ldr	r3, [sp, #0]
    bcbc:	2b00      	cmp	r3, #0
    bcbe:	d0e4      	beq.n	bc8a <nbr_table_add_lladdr+0xfa>
      int item_index = index_from_key(key);
      int locked = locked_map[item_index];
      /* Never delete a locked item */
      if(!locked) {
        int used = used_map[item_index];
        int used_count = 0;
    bcc0:	2200      	movs	r2, #0
    bcc2:	e798      	b.n	bbf6 <nbr_table_add_lladdr+0x66>
  /* Initialize item data and set "used" bit */
  memset(item, 0, table->item_size);
  nbr_set_bit(used_map, table, item, 1);

  return item;
}
    bcc4:	b002      	add	sp, #8
    bcc6:	bc1c      	pop	{r2, r3, r4}
    bcc8:	4690      	mov	r8, r2
    bcca:	4699      	mov	r9, r3
    bccc:	46a2      	mov	sl, r4
    bcce:	bdf0      	pop	{r4, r5, r6, r7, pc}
    bcd0:	00012e30 	.word	0x00012e30
    bcd4:	0000ba51 	.word	0x0000ba51
    bcd8:	200000f4 	.word	0x200000f4
    bcdc:	000057ed 	.word	0x000057ed
    bce0:	20000ec4 	.word	0x20000ec4
    bce4:	00005719 	.word	0x00005719
    bce8:	0000b989 	.word	0x0000b989
    bcec:	20000eb0 	.word	0x20000eb0
    bcf0:	20000fb8 	.word	0x20000fb8
    bcf4:	000057c1 	.word	0x000057c1
    bcf8:	0000b9d1 	.word	0x0000b9d1
    bcfc:	00005735 	.word	0x00005735
    bd00:	0000b96d 	.word	0x0000b96d
    bd04:	00010b69 	.word	0x00010b69
    bd08:	0000ba01 	.word	0x0000ba01
    bd0c:	20000fcc 	.word	0x20000fcc
    bd10:	00005769 	.word	0x00005769
    bd14:	0000ac6d 	.word	0x0000ac6d

0000bd18 <nbr_table_get_from_lladdr>:
/*---------------------------------------------------------------------------*/
/* Get an item from its link-layer address */
void *
nbr_table_get_from_lladdr(nbr_table_t *table, const linkaddr_t *lladdr)
{
    bd18:	b538      	push	{r3, r4, r5, lr}
    bd1a:	1c05      	adds	r5, r0, #0
  void *item = item_from_index(table, index_from_lladdr(lladdr));
    bd1c:	1c08      	adds	r0, r1, #0
    bd1e:	4b09      	ldr	r3, [pc, #36]	; (bd44 <nbr_table_get_from_lladdr+0x2c>)
    bd20:	4798      	blx	r3
    bd22:	1c01      	adds	r1, r0, #0
    bd24:	1c28      	adds	r0, r5, #0
    bd26:	4b08      	ldr	r3, [pc, #32]	; (bd48 <nbr_table_get_from_lladdr+0x30>)
    bd28:	4798      	blx	r3
    bd2a:	1c04      	adds	r4, r0, #0
  return nbr_get_bit(used_map, table, item) ? item : NULL;
    bd2c:	4807      	ldr	r0, [pc, #28]	; (bd4c <nbr_table_get_from_lladdr+0x34>)
    bd2e:	1c29      	adds	r1, r5, #0
    bd30:	1c22      	adds	r2, r4, #0
    bd32:	4b07      	ldr	r3, [pc, #28]	; (bd50 <nbr_table_get_from_lladdr+0x38>)
    bd34:	4798      	blx	r3
    bd36:	2800      	cmp	r0, #0
    bd38:	d001      	beq.n	bd3e <nbr_table_get_from_lladdr+0x26>
    bd3a:	1c20      	adds	r0, r4, #0
    bd3c:	e000      	b.n	bd40 <nbr_table_get_from_lladdr+0x28>
    bd3e:	2000      	movs	r0, #0
}
    bd40:	bd38      	pop	{r3, r4, r5, pc}
    bd42:	46c0      	nop			; (mov r8, r8)
    bd44:	0000ba51 	.word	0x0000ba51
    bd48:	0000b96d 	.word	0x0000b96d
    bd4c:	20000fb8 	.word	0x20000fb8
    bd50:	0000b9d1 	.word	0x0000b9d1

0000bd54 <nbr_table_remove>:
/*---------------------------------------------------------------------------*/
/* Removes a neighbor from the current table (unset "used" bit) */
int
nbr_table_remove(nbr_table_t *table, void *item)
{
    bd54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    bd56:	1c06      	adds	r6, r0, #0
    bd58:	1c0d      	adds	r5, r1, #0
  int ret = nbr_set_bit(used_map, table, item, 0);
    bd5a:	4807      	ldr	r0, [pc, #28]	; (bd78 <nbr_table_remove+0x24>)
    bd5c:	1c31      	adds	r1, r6, #0
    bd5e:	1c2a      	adds	r2, r5, #0
    bd60:	2300      	movs	r3, #0
    bd62:	4c06      	ldr	r4, [pc, #24]	; (bd7c <nbr_table_remove+0x28>)
    bd64:	47a0      	blx	r4
    bd66:	1c07      	adds	r7, r0, #0
  nbr_set_bit(locked_map, table, item, 0);
    bd68:	4805      	ldr	r0, [pc, #20]	; (bd80 <nbr_table_remove+0x2c>)
    bd6a:	1c31      	adds	r1, r6, #0
    bd6c:	1c2a      	adds	r2, r5, #0
    bd6e:	2300      	movs	r3, #0
    bd70:	47a0      	blx	r4
  return ret;
}
    bd72:	1c38      	adds	r0, r7, #0
    bd74:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    bd76:	46c0      	nop			; (mov r8, r8)
    bd78:	20000fb8 	.word	0x20000fb8
    bd7c:	0000ba01 	.word	0x0000ba01
    bd80:	20000eb0 	.word	0x20000eb0

0000bd84 <nbr_table_lock>:
/*---------------------------------------------------------------------------*/
/* Lock a neighbor for the current table (set "locked" bit) */
int
nbr_table_lock(nbr_table_t *table, void *item)
{
    bd84:	b510      	push	{r4, lr}
    bd86:	1c03      	adds	r3, r0, #0
    bd88:	1c0a      	adds	r2, r1, #0
  return nbr_set_bit(locked_map, table, item, 1);
    bd8a:	4803      	ldr	r0, [pc, #12]	; (bd98 <nbr_table_lock+0x14>)
    bd8c:	1c19      	adds	r1, r3, #0
    bd8e:	2301      	movs	r3, #1
    bd90:	4c02      	ldr	r4, [pc, #8]	; (bd9c <nbr_table_lock+0x18>)
    bd92:	47a0      	blx	r4
}
    bd94:	bd10      	pop	{r4, pc}
    bd96:	46c0      	nop			; (mov r8, r8)
    bd98:	20000eb0 	.word	0x20000eb0
    bd9c:	0000ba01 	.word	0x0000ba01

0000bda0 <nbr_table_unlock>:
/*---------------------------------------------------------------------------*/
/* Release the lock on a neighbor for the current table (unset "locked" bit) */
int
nbr_table_unlock(nbr_table_t *table, void *item)
{
    bda0:	b510      	push	{r4, lr}
    bda2:	1c03      	adds	r3, r0, #0
    bda4:	1c0a      	adds	r2, r1, #0
  return nbr_set_bit(locked_map, table, item, 0);
    bda6:	4803      	ldr	r0, [pc, #12]	; (bdb4 <nbr_table_unlock+0x14>)
    bda8:	1c19      	adds	r1, r3, #0
    bdaa:	2300      	movs	r3, #0
    bdac:	4c02      	ldr	r4, [pc, #8]	; (bdb8 <nbr_table_unlock+0x18>)
    bdae:	47a0      	blx	r4
}
    bdb0:	bd10      	pop	{r4, pc}
    bdb2:	46c0      	nop			; (mov r8, r8)
    bdb4:	20000eb0 	.word	0x20000eb0
    bdb8:	0000ba01 	.word	0x0000ba01

0000bdbc <nbr_table_get_lladdr>:
/*---------------------------------------------------------------------------*/
/* Get link-layer address of an item */
linkaddr_t *
nbr_table_get_lladdr(nbr_table_t *table, const void *item)
{
    bdbc:	b508      	push	{r3, lr}
/*---------------------------------------------------------------------------*/
/* Get the key af an item */
static nbr_table_key_t *
key_from_item(nbr_table_t *table, const nbr_table_item_t *item)
{
  return key_from_index(index_from_item(table, item));
    bdbe:	4b08      	ldr	r3, [pc, #32]	; (bde0 <nbr_table_get_lladdr+0x24>)
    bdc0:	4798      	blx	r3
/*---------------------------------------------------------------------------*/
/* Get a key from a neighbor index */
static nbr_table_key_t *
key_from_index(int index)
{
  return index != -1 ? &((nbr_table_key_t *)neighbor_addr_mem.mem)[index] : NULL;
    bdc2:	1c43      	adds	r3, r0, #1
    bdc4:	d00a      	beq.n	bddc <nbr_table_get_lladdr+0x20>
    bdc6:	0043      	lsls	r3, r0, #1
    bdc8:	1818      	adds	r0, r3, r0
    bdca:	0080      	lsls	r0, r0, #2
    bdcc:	4b05      	ldr	r3, [pc, #20]	; (bde4 <nbr_table_get_lladdr+0x28>)
    bdce:	689b      	ldr	r3, [r3, #8]
    bdd0:	181b      	adds	r3, r3, r0
/* Get link-layer address of an item */
linkaddr_t *
nbr_table_get_lladdr(nbr_table_t *table, const void *item)
{
  nbr_table_key_t *key = key_from_item(table, item);
  return key != NULL ? &key->lladdr : NULL;
    bdd2:	2000      	movs	r0, #0
    bdd4:	2b00      	cmp	r3, #0
    bdd6:	d002      	beq.n	bdde <nbr_table_get_lladdr+0x22>
    bdd8:	1d18      	adds	r0, r3, #4
    bdda:	e000      	b.n	bdde <nbr_table_get_lladdr+0x22>
    bddc:	2000      	movs	r0, #0
}
    bdde:	bd08      	pop	{r3, pc}
    bde0:	0000b9a9 	.word	0x0000b9a9
    bde4:	200000f4 	.word	0x200000f4

0000bde8 <netstack_init>:

#include "net/netstack.h"
/*---------------------------------------------------------------------------*/
void
netstack_init(void)
{
    bde8:	b508      	push	{r3, lr}
  NETSTACK_RADIO.init();
    bdea:	4b06      	ldr	r3, [pc, #24]	; (be04 <netstack_init+0x1c>)
    bdec:	681b      	ldr	r3, [r3, #0]
    bdee:	4798      	blx	r3
  NETSTACK_RDC.init();
    bdf0:	4b05      	ldr	r3, [pc, #20]	; (be08 <netstack_init+0x20>)
    bdf2:	685b      	ldr	r3, [r3, #4]
    bdf4:	4798      	blx	r3
  NETSTACK_MAC.init();
    bdf6:	4b05      	ldr	r3, [pc, #20]	; (be0c <netstack_init+0x24>)
    bdf8:	685b      	ldr	r3, [r3, #4]
    bdfa:	4798      	blx	r3
  NETSTACK_NETWORK.init();
    bdfc:	4b04      	ldr	r3, [pc, #16]	; (be10 <netstack_init+0x28>)
    bdfe:	685b      	ldr	r3, [r3, #4]
    be00:	4798      	blx	r3

#ifdef NETSTACK_ENCRYPTION_INIT
  NETSTACK_ENCRYPTION_INIT();
#endif /* NETSTACK_ENCRYPTION_INIT */
}
    be02:	bd08      	pop	{r3, pc}
    be04:	00012ed0 	.word	0x00012ed0
    be08:	00012e6c 	.word	0x00012e6c
    be0c:	00012e40 	.word	0x00012e40
    be10:	00012be8 	.word	0x00012be8

0000be14 <packetbuf_copyto_hdr>:
  }
}
/*---------------------------------------------------------------------------*/
int
packetbuf_copyto_hdr(uint8_t *to)
{
    be14:	b510      	push	{r4, lr}
      PRINTF("0x%02x, ", packetbuf[i]);
    }
    PRINTF("\n\r");
  }
#endif /* DEBUG_LEVEL */
  memcpy(to, packetbuf + hdrptr, PACKETBUF_HDR_SIZE - hdrptr);
    be16:	4b05      	ldr	r3, [pc, #20]	; (be2c <packetbuf_copyto_hdr+0x18>)
    be18:	781b      	ldrb	r3, [r3, #0]
    be1a:	2430      	movs	r4, #48	; 0x30
    be1c:	1ae4      	subs	r4, r4, r3
    be1e:	4904      	ldr	r1, [pc, #16]	; (be30 <packetbuf_copyto_hdr+0x1c>)
    be20:	18c9      	adds	r1, r1, r3
    be22:	1c22      	adds	r2, r4, #0
    be24:	4b03      	ldr	r3, [pc, #12]	; (be34 <packetbuf_copyto_hdr+0x20>)
    be26:	4798      	blx	r3
  return PACKETBUF_HDR_SIZE - hdrptr;
}
    be28:	1c20      	adds	r0, r4, #0
    be2a:	bd10      	pop	{r4, pc}
    be2c:	20000ff4 	.word	0x20000ff4
    be30:	20000ff8 	.word	0x20000ff8
    be34:	00010b2f 	.word	0x00010b2f

0000be38 <packetbuf_copyto>:
/*---------------------------------------------------------------------------*/
int
packetbuf_copyto(void *to)
{
    be38:	b5f0      	push	{r4, r5, r6, r7, lr}
    be3a:	b083      	sub	sp, #12
      bufferptr += sprintf(bufferptr, "0x%02x, ", packetbufptr[i]);
    }
    PRINTF("packetbuf_write: data: %s\n\r", buffer);
  }
#endif /* DEBUG_LEVEL */
  if(PACKETBUF_HDR_SIZE - hdrptr + buflen > PACKETBUF_SIZE) {
    be3c:	4b0e      	ldr	r3, [pc, #56]	; (be78 <packetbuf_copyto+0x40>)
    be3e:	781e      	ldrb	r6, [r3, #0]
    be40:	2230      	movs	r2, #48	; 0x30
    be42:	1b92      	subs	r2, r2, r6
    be44:	4b0d      	ldr	r3, [pc, #52]	; (be7c <packetbuf_copyto+0x44>)
    be46:	881f      	ldrh	r7, [r3, #0]
    be48:	19d5      	adds	r5, r2, r7
    be4a:	2d80      	cmp	r5, #128	; 0x80
    be4c:	dc0f      	bgt.n	be6e <packetbuf_copyto+0x36>
    /* Too large packet */
    return 0;
  }
  memcpy(to, packetbuf + hdrptr, PACKETBUF_HDR_SIZE - hdrptr);
    be4e:	490c      	ldr	r1, [pc, #48]	; (be80 <packetbuf_copyto+0x48>)
    be50:	1989      	adds	r1, r1, r6
    be52:	9001      	str	r0, [sp, #4]
    be54:	4c0b      	ldr	r4, [pc, #44]	; (be84 <packetbuf_copyto+0x4c>)
    be56:	47a0      	blx	r4
  memcpy((uint8_t *)to + PACKETBUF_HDR_SIZE - hdrptr, packetbufptr + bufptr,
    be58:	9b01      	ldr	r3, [sp, #4]
    be5a:	1b98      	subs	r0, r3, r6
    be5c:	3030      	adds	r0, #48	; 0x30
    be5e:	4b0a      	ldr	r3, [pc, #40]	; (be88 <packetbuf_copyto+0x50>)
    be60:	881b      	ldrh	r3, [r3, #0]
    be62:	4a0a      	ldr	r2, [pc, #40]	; (be8c <packetbuf_copyto+0x54>)
    be64:	6811      	ldr	r1, [r2, #0]
    be66:	18c9      	adds	r1, r1, r3
    be68:	1c3a      	adds	r2, r7, #0
    be6a:	47a0      	blx	r4
	 buflen);
  return PACKETBUF_HDR_SIZE - hdrptr + buflen;
    be6c:	e000      	b.n	be70 <packetbuf_copyto+0x38>
    PRINTF("packetbuf_write: data: %s\n\r", buffer);
  }
#endif /* DEBUG_LEVEL */
  if(PACKETBUF_HDR_SIZE - hdrptr + buflen > PACKETBUF_SIZE) {
    /* Too large packet */
    return 0;
    be6e:	2500      	movs	r5, #0
  }
  memcpy(to, packetbuf + hdrptr, PACKETBUF_HDR_SIZE - hdrptr);
  memcpy((uint8_t *)to + PACKETBUF_HDR_SIZE - hdrptr, packetbufptr + bufptr,
	 buflen);
  return PACKETBUF_HDR_SIZE - hdrptr + buflen;
}
    be70:	1c28      	adds	r0, r5, #0
    be72:	b003      	add	sp, #12
    be74:	bdf0      	pop	{r4, r5, r6, r7, pc}
    be76:	46c0      	nop			; (mov r8, r8)
    be78:	20000ff4 	.word	0x20000ff4
    be7c:	20000ff6 	.word	0x20000ff6
    be80:	20000ff8 	.word	0x20000ff8
    be84:	00010b2f 	.word	0x00010b2f
    be88:	200010aa 	.word	0x200010aa
    be8c:	20000ff0 	.word	0x20000ff0

0000be90 <packetbuf_hdrreduce>:
  hdrptr += size;
}
/*---------------------------------------------------------------------------*/
int
packetbuf_hdrreduce(int size)
{
    be90:	1c03      	adds	r3, r0, #0
  if(buflen < size) {
    be92:	4a07      	ldr	r2, [pc, #28]	; (beb0 <packetbuf_hdrreduce+0x20>)
    be94:	8812      	ldrh	r2, [r2, #0]
    return 0;
    be96:	2000      	movs	r0, #0
}
/*---------------------------------------------------------------------------*/
int
packetbuf_hdrreduce(int size)
{
  if(buflen < size) {
    be98:	429a      	cmp	r2, r3
    be9a:	db08      	blt.n	beae <packetbuf_hdrreduce+0x1e>
    return 0;
  }

  bufptr += size;
    be9c:	b29b      	uxth	r3, r3
    be9e:	4805      	ldr	r0, [pc, #20]	; (beb4 <packetbuf_hdrreduce+0x24>)
    bea0:	8801      	ldrh	r1, [r0, #0]
    bea2:	1859      	adds	r1, r3, r1
    bea4:	8001      	strh	r1, [r0, #0]
  buflen -= size;
    bea6:	1ad3      	subs	r3, r2, r3
    bea8:	4a01      	ldr	r2, [pc, #4]	; (beb0 <packetbuf_hdrreduce+0x20>)
    beaa:	8013      	strh	r3, [r2, #0]
  return 1;
    beac:	2001      	movs	r0, #1
}
    beae:	4770      	bx	lr
    beb0:	20000ff6 	.word	0x20000ff6
    beb4:	200010aa 	.word	0x200010aa

0000beb8 <packetbuf_set_datalen>:
/*---------------------------------------------------------------------------*/
void
packetbuf_set_datalen(uint16_t len)
{
  PRINTF("packetbuf_set_len: len %d\n\r", len);
  buflen = len;
    beb8:	4b01      	ldr	r3, [pc, #4]	; (bec0 <packetbuf_set_datalen+0x8>)
    beba:	8018      	strh	r0, [r3, #0]
}
    bebc:	4770      	bx	lr
    bebe:	46c0      	nop			; (mov r8, r8)
    bec0:	20000ff6 	.word	0x20000ff6

0000bec4 <packetbuf_dataptr>:
/*---------------------------------------------------------------------------*/
void *
packetbuf_dataptr(void)
{
  return (void *)(&packetbuf[bufptr + PACKETBUF_HDR_SIZE]);
    bec4:	4b02      	ldr	r3, [pc, #8]	; (bed0 <packetbuf_dataptr+0xc>)
    bec6:	8818      	ldrh	r0, [r3, #0]
    bec8:	3030      	adds	r0, #48	; 0x30
    beca:	4b02      	ldr	r3, [pc, #8]	; (bed4 <packetbuf_dataptr+0x10>)
    becc:	1818      	adds	r0, r3, r0
}
    bece:	4770      	bx	lr
    bed0:	200010aa 	.word	0x200010aa
    bed4:	20000ff8 	.word	0x20000ff8

0000bed8 <packetbuf_hdrptr>:
/*---------------------------------------------------------------------------*/
void *
packetbuf_hdrptr(void)
{
  return (void *)(&packetbuf[hdrptr]);
    bed8:	4b02      	ldr	r3, [pc, #8]	; (bee4 <packetbuf_hdrptr+0xc>)
    beda:	781b      	ldrb	r3, [r3, #0]
    bedc:	4802      	ldr	r0, [pc, #8]	; (bee8 <packetbuf_hdrptr+0x10>)
    bede:	18c0      	adds	r0, r0, r3
}
    bee0:	4770      	bx	lr
    bee2:	46c0      	nop			; (mov r8, r8)
    bee4:	20000ff4 	.word	0x20000ff4
    bee8:	20000ff8 	.word	0x20000ff8

0000beec <packetbuf_is_reference>:
}
/*---------------------------------------------------------------------------*/
int
packetbuf_is_reference(void)
{
  return packetbufptr != &packetbuf[PACKETBUF_HDR_SIZE];
    beec:	4b03      	ldr	r3, [pc, #12]	; (befc <packetbuf_is_reference+0x10>)
    beee:	681b      	ldr	r3, [r3, #0]
    bef0:	4803      	ldr	r0, [pc, #12]	; (bf00 <packetbuf_is_reference+0x14>)
    bef2:	3030      	adds	r0, #48	; 0x30
    bef4:	1a18      	subs	r0, r3, r0
    bef6:	1e43      	subs	r3, r0, #1
    bef8:	4198      	sbcs	r0, r3
}
    befa:	4770      	bx	lr
    befc:	20000ff0 	.word	0x20000ff0
    bf00:	20000ff8 	.word	0x20000ff8

0000bf04 <packetbuf_reference_ptr>:
/*---------------------------------------------------------------------------*/
void *
packetbuf_reference_ptr(void)
{
  return packetbufptr;
    bf04:	4b01      	ldr	r3, [pc, #4]	; (bf0c <packetbuf_reference_ptr+0x8>)
    bf06:	6818      	ldr	r0, [r3, #0]
}
    bf08:	4770      	bx	lr
    bf0a:	46c0      	nop			; (mov r8, r8)
    bf0c:	20000ff0 	.word	0x20000ff0

0000bf10 <packetbuf_datalen>:
/*---------------------------------------------------------------------------*/
uint16_t
packetbuf_datalen(void)
{
  return buflen;
    bf10:	4b01      	ldr	r3, [pc, #4]	; (bf18 <packetbuf_datalen+0x8>)
    bf12:	8818      	ldrh	r0, [r3, #0]
}
    bf14:	4770      	bx	lr
    bf16:	46c0      	nop			; (mov r8, r8)
    bf18:	20000ff6 	.word	0x20000ff6

0000bf1c <packetbuf_totlen>:
/*---------------------------------------------------------------------------*/
uint8_t
packetbuf_hdrlen(void)
{
  return PACKETBUF_HDR_SIZE - hdrptr;
    bf1c:	4b04      	ldr	r3, [pc, #16]	; (bf30 <packetbuf_totlen+0x14>)
    bf1e:	7818      	ldrb	r0, [r3, #0]
    bf20:	2330      	movs	r3, #48	; 0x30
    bf22:	1a18      	subs	r0, r3, r0
}
/*---------------------------------------------------------------------------*/
uint16_t
packetbuf_totlen(void)
{
  return packetbuf_hdrlen() + packetbuf_datalen();
    bf24:	b2c0      	uxtb	r0, r0
}
/*---------------------------------------------------------------------------*/
uint16_t
packetbuf_datalen(void)
{
  return buflen;
    bf26:	4b03      	ldr	r3, [pc, #12]	; (bf34 <packetbuf_totlen+0x18>)
}
/*---------------------------------------------------------------------------*/
uint16_t
packetbuf_totlen(void)
{
  return packetbuf_hdrlen() + packetbuf_datalen();
    bf28:	881b      	ldrh	r3, [r3, #0]
    bf2a:	18c0      	adds	r0, r0, r3
    bf2c:	b280      	uxth	r0, r0
}
    bf2e:	4770      	bx	lr
    bf30:	20000ff4 	.word	0x20000ff4
    bf34:	20000ff6 	.word	0x20000ff6

0000bf38 <packetbuf_hdralloc>:
  return PACKETBUF_HDR_SIZE - hdrptr + buflen;
}
/*---------------------------------------------------------------------------*/
int
packetbuf_hdralloc(int size)
{
    bf38:	b538      	push	{r3, r4, r5, lr}
  if(hdrptr >= size && packetbuf_totlen() + size <= PACKETBUF_SIZE) {
    bf3a:	4b09      	ldr	r3, [pc, #36]	; (bf60 <packetbuf_hdralloc+0x28>)
    bf3c:	781d      	ldrb	r5, [r3, #0]
    hdrptr -= size;
    return 1;
  }
  return 0;
    bf3e:	2300      	movs	r3, #0
}
/*---------------------------------------------------------------------------*/
int
packetbuf_hdralloc(int size)
{
  if(hdrptr >= size && packetbuf_totlen() + size <= PACKETBUF_SIZE) {
    bf40:	4285      	cmp	r5, r0
    bf42:	db0a      	blt.n	bf5a <packetbuf_hdralloc+0x22>
    bf44:	1c04      	adds	r4, r0, #0
    bf46:	4b07      	ldr	r3, [pc, #28]	; (bf64 <packetbuf_hdralloc+0x2c>)
    bf48:	4798      	blx	r3
    bf4a:	1900      	adds	r0, r0, r4
    hdrptr -= size;
    return 1;
  }
  return 0;
    bf4c:	2300      	movs	r3, #0
}
/*---------------------------------------------------------------------------*/
int
packetbuf_hdralloc(int size)
{
  if(hdrptr >= size && packetbuf_totlen() + size <= PACKETBUF_SIZE) {
    bf4e:	2880      	cmp	r0, #128	; 0x80
    bf50:	dc03      	bgt.n	bf5a <packetbuf_hdralloc+0x22>
    hdrptr -= size;
    bf52:	1b28      	subs	r0, r5, r4
    bf54:	4b02      	ldr	r3, [pc, #8]	; (bf60 <packetbuf_hdralloc+0x28>)
    bf56:	7018      	strb	r0, [r3, #0]
    return 1;
    bf58:	2301      	movs	r3, #1
  }
  return 0;
}
    bf5a:	1c18      	adds	r0, r3, #0
    bf5c:	bd38      	pop	{r3, r4, r5, pc}
    bf5e:	46c0      	nop			; (mov r8, r8)
    bf60:	20000ff4 	.word	0x20000ff4
    bf64:	0000bf1d 	.word	0x0000bf1d

0000bf68 <packetbuf_attr_clear>:
  return packetbuf_hdrlen() + packetbuf_datalen();
}
/*---------------------------------------------------------------------------*/
void
packetbuf_attr_clear(void)
{
    bf68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    bf6a:	4b09      	ldr	r3, [pc, #36]	; (bf90 <packetbuf_attr_clear+0x28>)
    bf6c:	1c19      	adds	r1, r3, #0
    bf6e:	3138      	adds	r1, #56	; 0x38
  int i;
  for(i = 0; i < PACKETBUF_NUM_ATTRS; ++i) {
    packetbuf_attrs[i].val = 0;
    bf70:	2200      	movs	r2, #0
    bf72:	801a      	strh	r2, [r3, #0]
    bf74:	3302      	adds	r3, #2
/*---------------------------------------------------------------------------*/
void
packetbuf_attr_clear(void)
{
  int i;
  for(i = 0; i < PACKETBUF_NUM_ATTRS; ++i) {
    bf76:	428b      	cmp	r3, r1
    bf78:	d1fb      	bne.n	bf72 <packetbuf_attr_clear+0xa>
    bf7a:	2400      	movs	r4, #0
    bf7c:	4f05      	ldr	r7, [pc, #20]	; (bf94 <packetbuf_attr_clear+0x2c>)
    packetbuf_attrs[i].val = 0;
  }
  for(i = 0; i < PACKETBUF_NUM_ADDRS; ++i) {
    linkaddr_copy(&packetbuf_addrs[i].addr, &linkaddr_null);
    bf7e:	4e06      	ldr	r6, [pc, #24]	; (bf98 <packetbuf_attr_clear+0x30>)
    bf80:	4d06      	ldr	r5, [pc, #24]	; (bf9c <packetbuf_attr_clear+0x34>)
    bf82:	19e0      	adds	r0, r4, r7
    bf84:	1c31      	adds	r1, r6, #0
    bf86:	47a8      	blx	r5
    bf88:	3408      	adds	r4, #8
{
  int i;
  for(i = 0; i < PACKETBUF_NUM_ATTRS; ++i) {
    packetbuf_attrs[i].val = 0;
  }
  for(i = 0; i < PACKETBUF_NUM_ADDRS; ++i) {
    bf8a:	2c20      	cmp	r4, #32
    bf8c:	d1f9      	bne.n	bf82 <packetbuf_attr_clear+0x1a>
    linkaddr_copy(&packetbuf_addrs[i].addr, &linkaddr_null);
  }
}
    bf8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    bf90:	200031f8 	.word	0x200031f8
    bf94:	200031d8 	.word	0x200031d8
    bf98:	00012e30 	.word	0x00012e30
    bf9c:	0000ac6d 	.word	0x0000ac6d

0000bfa0 <packetbuf_clear>:
#endif

/*---------------------------------------------------------------------------*/
void
packetbuf_clear(void)
{
    bfa0:	b508      	push	{r3, lr}
  buflen = bufptr = 0;
    bfa2:	2300      	movs	r3, #0
    bfa4:	4a06      	ldr	r2, [pc, #24]	; (bfc0 <packetbuf_clear+0x20>)
    bfa6:	8013      	strh	r3, [r2, #0]
    bfa8:	4a06      	ldr	r2, [pc, #24]	; (bfc4 <packetbuf_clear+0x24>)
    bfaa:	8013      	strh	r3, [r2, #0]
  hdrptr = PACKETBUF_HDR_SIZE;
    bfac:	2230      	movs	r2, #48	; 0x30
    bfae:	4b06      	ldr	r3, [pc, #24]	; (bfc8 <packetbuf_clear+0x28>)
    bfb0:	701a      	strb	r2, [r3, #0]

  packetbufptr = &packetbuf[PACKETBUF_HDR_SIZE];
    bfb2:	4b06      	ldr	r3, [pc, #24]	; (bfcc <packetbuf_clear+0x2c>)
    bfb4:	3330      	adds	r3, #48	; 0x30
    bfb6:	4a06      	ldr	r2, [pc, #24]	; (bfd0 <packetbuf_clear+0x30>)
    bfb8:	6013      	str	r3, [r2, #0]
  packetbuf_attr_clear();
    bfba:	4b06      	ldr	r3, [pc, #24]	; (bfd4 <packetbuf_clear+0x34>)
    bfbc:	4798      	blx	r3
}
    bfbe:	bd08      	pop	{r3, pc}
    bfc0:	200010aa 	.word	0x200010aa
    bfc4:	20000ff6 	.word	0x20000ff6
    bfc8:	20000ff4 	.word	0x20000ff4
    bfcc:	20000ff8 	.word	0x20000ff8
    bfd0:	20000ff0 	.word	0x20000ff0
    bfd4:	0000bf69 	.word	0x0000bf69

0000bfd8 <packetbuf_copyfrom>:
  hdrptr = PACKETBUF_HDR_SIZE;
}
/*---------------------------------------------------------------------------*/
int
packetbuf_copyfrom(const void *from, uint16_t len)
{
    bfd8:	b570      	push	{r4, r5, r6, lr}
    bfda:	1c06      	adds	r6, r0, #0
    bfdc:	1c0d      	adds	r5, r1, #0
  uint16_t l;

  packetbuf_clear();
    bfde:	4b08      	ldr	r3, [pc, #32]	; (c000 <packetbuf_copyfrom+0x28>)
    bfe0:	4798      	blx	r3
  l = len > PACKETBUF_SIZE? PACKETBUF_SIZE: len;
    bfe2:	1c2c      	adds	r4, r5, #0
    bfe4:	2d80      	cmp	r5, #128	; 0x80
    bfe6:	d900      	bls.n	bfea <packetbuf_copyfrom+0x12>
    bfe8:	2480      	movs	r4, #128	; 0x80
    bfea:	b2a5      	uxth	r5, r4
  memcpy(packetbufptr, from, l);
    bfec:	4b05      	ldr	r3, [pc, #20]	; (c004 <packetbuf_copyfrom+0x2c>)
    bfee:	6818      	ldr	r0, [r3, #0]
    bff0:	1c31      	adds	r1, r6, #0
    bff2:	1c2a      	adds	r2, r5, #0
    bff4:	4b04      	ldr	r3, [pc, #16]	; (c008 <packetbuf_copyfrom+0x30>)
    bff6:	4798      	blx	r3
  buflen = l;
    bff8:	4b04      	ldr	r3, [pc, #16]	; (c00c <packetbuf_copyfrom+0x34>)
    bffa:	801c      	strh	r4, [r3, #0]
  return l;
}
    bffc:	1c28      	adds	r0, r5, #0
    bffe:	bd70      	pop	{r4, r5, r6, pc}
    c000:	0000bfa1 	.word	0x0000bfa1
    c004:	20000ff0 	.word	0x20000ff0
    c008:	00010b2f 	.word	0x00010b2f
    c00c:	20000ff6 	.word	0x20000ff6

0000c010 <packetbuf_attr_copyto>:
}
/*---------------------------------------------------------------------------*/
void
packetbuf_attr_copyto(struct packetbuf_attr *attrs,
		    struct packetbuf_addr *addrs)
{
    c010:	b538      	push	{r3, r4, r5, lr}
    c012:	1c0d      	adds	r5, r1, #0
  memcpy(attrs, packetbuf_attrs, sizeof(packetbuf_attrs));
    c014:	4904      	ldr	r1, [pc, #16]	; (c028 <packetbuf_attr_copyto+0x18>)
    c016:	2238      	movs	r2, #56	; 0x38
    c018:	4c04      	ldr	r4, [pc, #16]	; (c02c <packetbuf_attr_copyto+0x1c>)
    c01a:	47a0      	blx	r4
  memcpy(addrs, packetbuf_addrs, sizeof(packetbuf_addrs));
    c01c:	1c28      	adds	r0, r5, #0
    c01e:	4904      	ldr	r1, [pc, #16]	; (c030 <packetbuf_attr_copyto+0x20>)
    c020:	2220      	movs	r2, #32
    c022:	47a0      	blx	r4
}
    c024:	bd38      	pop	{r3, r4, r5, pc}
    c026:	46c0      	nop			; (mov r8, r8)
    c028:	200031f8 	.word	0x200031f8
    c02c:	00010b2f 	.word	0x00010b2f
    c030:	200031d8 	.word	0x200031d8

0000c034 <packetbuf_attr_copyfrom>:
/*---------------------------------------------------------------------------*/
void
packetbuf_attr_copyfrom(struct packetbuf_attr *attrs,
		      struct packetbuf_addr *addrs)
{
    c034:	b538      	push	{r3, r4, r5, lr}
    c036:	1c03      	adds	r3, r0, #0
    c038:	1c0d      	adds	r5, r1, #0
  memcpy(packetbuf_attrs, attrs, sizeof(packetbuf_attrs));
    c03a:	4805      	ldr	r0, [pc, #20]	; (c050 <packetbuf_attr_copyfrom+0x1c>)
    c03c:	1c19      	adds	r1, r3, #0
    c03e:	2238      	movs	r2, #56	; 0x38
    c040:	4c04      	ldr	r4, [pc, #16]	; (c054 <packetbuf_attr_copyfrom+0x20>)
    c042:	47a0      	blx	r4
  memcpy(packetbuf_addrs, addrs, sizeof(packetbuf_addrs));
    c044:	4804      	ldr	r0, [pc, #16]	; (c058 <packetbuf_attr_copyfrom+0x24>)
    c046:	1c29      	adds	r1, r5, #0
    c048:	2220      	movs	r2, #32
    c04a:	47a0      	blx	r4
}
    c04c:	bd38      	pop	{r3, r4, r5, pc}
    c04e:	46c0      	nop			; (mov r8, r8)
    c050:	200031f8 	.word	0x200031f8
    c054:	00010b2f 	.word	0x00010b2f
    c058:	200031d8 	.word	0x200031d8

0000c05c <queuebuf_init>:
}
#endif /* WITH_SWAP */
/*---------------------------------------------------------------------------*/
void
queuebuf_init(void)
{
    c05c:	b510      	push	{r4, lr}
  for(i=0; i<NQBUF_FILES; i++) {
    qbuf_files[i].renewable = 1;
    qbuf_renew_file(i);
  }
#endif
  memb_init(&buframmem);
    c05e:	4804      	ldr	r0, [pc, #16]	; (c070 <queuebuf_init+0x14>)
    c060:	4c04      	ldr	r4, [pc, #16]	; (c074 <queuebuf_init+0x18>)
    c062:	47a0      	blx	r4
  memb_init(&bufmem);
    c064:	4804      	ldr	r0, [pc, #16]	; (c078 <queuebuf_init+0x1c>)
    c066:	47a0      	blx	r4
  memb_init(&refbufmem);
    c068:	4804      	ldr	r0, [pc, #16]	; (c07c <queuebuf_init+0x20>)
    c06a:	47a0      	blx	r4
#if QUEUEBUF_STATS
  queuebuf_max_len = QUEUEBUF_NUM;
#endif /* QUEUEBUF_STATS */
}
    c06c:	bd10      	pop	{r4, pc}
    c06e:	46c0      	nop			; (mov r8, r8)
    c070:	20000118 	.word	0x20000118
    c074:	000057cd 	.word	0x000057cd
    c078:	20000100 	.word	0x20000100
    c07c:	2000010c 	.word	0x2000010c

0000c080 <queuebuf_new_from_packetbuf>:
queuebuf_new_from_packetbuf_debug(const char *file, int line)
#else /* QUEUEBUF_DEBUG */
struct queuebuf *
queuebuf_new_from_packetbuf(void)
#endif /* QUEUEBUF_DEBUG */
{
    c080:	b538      	push	{r3, r4, r5, lr}
  struct queuebuf *buf;
  struct queuebuf_ref *rbuf;

  if(packetbuf_is_reference()) {
    c082:	4b1d      	ldr	r3, [pc, #116]	; (c0f8 <queuebuf_new_from_packetbuf+0x78>)
    c084:	4798      	blx	r3
    c086:	2800      	cmp	r0, #0
    c088:	d012      	beq.n	c0b0 <queuebuf_new_from_packetbuf+0x30>
    rbuf = memb_alloc(&refbufmem);
    c08a:	481c      	ldr	r0, [pc, #112]	; (c0fc <queuebuf_new_from_packetbuf+0x7c>)
    c08c:	4b1c      	ldr	r3, [pc, #112]	; (c100 <queuebuf_new_from_packetbuf+0x80>)
    c08e:	4798      	blx	r3
    c090:	1e04      	subs	r4, r0, #0
    if(rbuf != NULL) {
    c092:	d02a      	beq.n	c0ea <queuebuf_new_from_packetbuf+0x6a>
#if QUEUEBUF_STATS
      ++queuebuf_ref_len;
#endif /* QUEUEBUF_STATS */
      rbuf->len = packetbuf_datalen();
    c094:	4b1b      	ldr	r3, [pc, #108]	; (c104 <queuebuf_new_from_packetbuf+0x84>)
    c096:	4798      	blx	r3
    c098:	8020      	strh	r0, [r4, #0]
      rbuf->ref = packetbuf_reference_ptr();
    c09a:	4b1b      	ldr	r3, [pc, #108]	; (c108 <queuebuf_new_from_packetbuf+0x88>)
    c09c:	4798      	blx	r3
    c09e:	6060      	str	r0, [r4, #4]
      rbuf->hdrlen = packetbuf_copyto_hdr(rbuf->hdr);
    c0a0:	1c20      	adds	r0, r4, #0
    c0a2:	3008      	adds	r0, #8
    c0a4:	4b19      	ldr	r3, [pc, #100]	; (c10c <queuebuf_new_from_packetbuf+0x8c>)
    c0a6:	4798      	blx	r3
    c0a8:	2338      	movs	r3, #56	; 0x38
    c0aa:	54e0      	strb	r0, [r4, r3]
    } else {
      PRINTF("queuebuf_new_from_packetbuf: could not allocate a reference queuebuf\n\r");
    }
    return (struct queuebuf *)rbuf;
    c0ac:	1c20      	adds	r0, r4, #0
    c0ae:	e022      	b.n	c0f6 <queuebuf_new_from_packetbuf+0x76>
  } else {
    struct queuebuf_data *buframptr;
    buf = memb_alloc(&bufmem);
    c0b0:	4817      	ldr	r0, [pc, #92]	; (c110 <queuebuf_new_from_packetbuf+0x90>)
    c0b2:	4b13      	ldr	r3, [pc, #76]	; (c100 <queuebuf_new_from_packetbuf+0x80>)
    c0b4:	4798      	blx	r3
    c0b6:	1e04      	subs	r4, r0, #0
    if(buf != NULL) {
    c0b8:	d018      	beq.n	c0ec <queuebuf_new_from_packetbuf+0x6c>
      list_add(queuebuf_list, buf);
      buf->file = file;
      buf->line = line;
      buf->time = clock_time();
#endif /* QUEUEBUF_DEBUG */
      buf->ram_ptr = memb_alloc(&buframmem);
    c0ba:	4816      	ldr	r0, [pc, #88]	; (c114 <queuebuf_new_from_packetbuf+0x94>)
    c0bc:	4b10      	ldr	r3, [pc, #64]	; (c100 <queuebuf_new_from_packetbuf+0x80>)
    c0be:	4798      	blx	r3
    c0c0:	1e05      	subs	r5, r0, #0
    c0c2:	6020      	str	r0, [r4, #0]
        buf->swap_id = -1;
        tmpdata_qbuf = buf;
        buframptr = &tmpdata;
      }
#else
      if(buf->ram_ptr == NULL) {
    c0c4:	d105      	bne.n	c0d2 <queuebuf_new_from_packetbuf+0x52>
        PRINTF("queuebuf_new_from_packetbuf: could not queuebuf data\n\r");
        RIMESTATS_ADD(queuebuf_outofbuf);
    c0c6:	4a14      	ldr	r2, [pc, #80]	; (c118 <queuebuf_new_from_packetbuf+0x98>)
    c0c8:	6c93      	ldr	r3, [r2, #72]	; 0x48
    c0ca:	3301      	adds	r3, #1
    c0cc:	6493      	str	r3, [r2, #72]	; 0x48
        return NULL;
    c0ce:	2000      	movs	r0, #0
    c0d0:	e011      	b.n	c0f6 <queuebuf_new_from_packetbuf+0x76>
      }
      buframptr = buf->ram_ptr;
#endif

      buframptr->len = packetbuf_copyto(buframptr->data);
    c0d2:	3002      	adds	r0, #2
    c0d4:	4b11      	ldr	r3, [pc, #68]	; (c11c <queuebuf_new_from_packetbuf+0x9c>)
    c0d6:	4798      	blx	r3
    c0d8:	8028      	strh	r0, [r5, #0]
      packetbuf_attr_copyto(buframptr->attrs, buframptr->addrs);
    c0da:	1c28      	adds	r0, r5, #0
    c0dc:	3082      	adds	r0, #130	; 0x82
    c0de:	1c29      	adds	r1, r5, #0
    c0e0:	31ba      	adds	r1, #186	; 0xba
    c0e2:	4b0f      	ldr	r3, [pc, #60]	; (c120 <queuebuf_new_from_packetbuf+0xa0>)
    c0e4:	4798      	blx	r3
      PRINTF("queuebuf_new_from_packetbuf: could not allocate a queuebuf\n\r");
    }
    if(buf == NULL) {
      RIMESTATS_ADD(queuebuf_outofbuf);
    }
    return buf;
    c0e6:	1c20      	adds	r0, r4, #0
    c0e8:	e005      	b.n	c0f6 <queuebuf_new_from_packetbuf+0x76>
    c0ea:	e004      	b.n	c0f6 <queuebuf_new_from_packetbuf+0x76>

    } else {
      PRINTF("queuebuf_new_from_packetbuf: could not allocate a queuebuf\n\r");
    }
    if(buf == NULL) {
      RIMESTATS_ADD(queuebuf_outofbuf);
    c0ec:	4a0a      	ldr	r2, [pc, #40]	; (c118 <queuebuf_new_from_packetbuf+0x98>)
    c0ee:	6c93      	ldr	r3, [r2, #72]	; 0x48
    c0f0:	3301      	adds	r3, #1
    c0f2:	6493      	str	r3, [r2, #72]	; 0x48
    }
    return buf;
    c0f4:	2000      	movs	r0, #0
  }
}
    c0f6:	bd38      	pop	{r3, r4, r5, pc}
    c0f8:	0000beed 	.word	0x0000beed
    c0fc:	2000010c 	.word	0x2000010c
    c100:	000057ed 	.word	0x000057ed
    c104:	0000bf11 	.word	0x0000bf11
    c108:	0000bf05 	.word	0x0000bf05
    c10c:	0000be15 	.word	0x0000be15
    c110:	20000100 	.word	0x20000100
    c114:	20000118 	.word	0x20000118
    c118:	20003230 	.word	0x20003230
    c11c:	0000be39 	.word	0x0000be39
    c120:	0000c011 	.word	0x0000c011

0000c124 <queuebuf_update_attr_from_packetbuf>:
/*---------------------------------------------------------------------------*/
void
queuebuf_update_attr_from_packetbuf(struct queuebuf *buf)
{
    c124:	b508      	push	{r3, lr}
#else /* WITH_SWAP */
/*---------------------------------------------------------------------------*/
static struct queuebuf_data *
queuebuf_load_to_ram(struct queuebuf *b)
{
  return b->ram_ptr;
    c126:	6801      	ldr	r1, [r0, #0]
/*---------------------------------------------------------------------------*/
void
queuebuf_update_attr_from_packetbuf(struct queuebuf *buf)
{
  struct queuebuf_data *buframptr = queuebuf_load_to_ram(buf);
  packetbuf_attr_copyto(buframptr->attrs, buframptr->addrs);
    c128:	1c08      	adds	r0, r1, #0
    c12a:	3082      	adds	r0, #130	; 0x82
    c12c:	31ba      	adds	r1, #186	; 0xba
    c12e:	4b01      	ldr	r3, [pc, #4]	; (c134 <queuebuf_update_attr_from_packetbuf+0x10>)
    c130:	4798      	blx	r3
#if WITH_SWAP
  if(buf->location == IN_CFS) {
    queuebuf_flush_tmpdata();
  }
#endif
}
    c132:	bd08      	pop	{r3, pc}
    c134:	0000c011 	.word	0x0000c011

0000c138 <queuebuf_free>:
/*---------------------------------------------------------------------------*/
void
queuebuf_free(struct queuebuf *buf)
{
    c138:	b538      	push	{r3, r4, r5, lr}
    c13a:	1c04      	adds	r4, r0, #0
  if(memb_inmemb(&bufmem, buf)) {
    c13c:	480c      	ldr	r0, [pc, #48]	; (c170 <queuebuf_free+0x38>)
    c13e:	1c21      	adds	r1, r4, #0
    c140:	4b0c      	ldr	r3, [pc, #48]	; (c174 <queuebuf_free+0x3c>)
    c142:	4798      	blx	r3
    c144:	2800      	cmp	r0, #0
    c146:	d007      	beq.n	c158 <queuebuf_free+0x20>
      memb_free(&buframmem, buf->ram_ptr);
    } else {
      queuebuf_remove_from_file(buf->swap_id);
    }
#else
    memb_free(&buframmem, buf->ram_ptr);
    c148:	480b      	ldr	r0, [pc, #44]	; (c178 <queuebuf_free+0x40>)
    c14a:	6821      	ldr	r1, [r4, #0]
    c14c:	4d0b      	ldr	r5, [pc, #44]	; (c17c <queuebuf_free+0x44>)
    c14e:	47a8      	blx	r5
#endif
    memb_free(&bufmem, buf);
    c150:	4807      	ldr	r0, [pc, #28]	; (c170 <queuebuf_free+0x38>)
    c152:	1c21      	adds	r1, r4, #0
    c154:	47a8      	blx	r5
    c156:	e009      	b.n	c16c <queuebuf_free+0x34>
    printf("#A q=%d\n\r", queuebuf_len);
#endif /* QUEUEBUF_STATS */
#if QUEUEBUF_DEBUG
    list_remove(queuebuf_list, buf);
#endif /* QUEUEBUF_DEBUG */
  } else if(memb_inmemb(&refbufmem, buf)) {
    c158:	4809      	ldr	r0, [pc, #36]	; (c180 <queuebuf_free+0x48>)
    c15a:	1c21      	adds	r1, r4, #0
    c15c:	4b05      	ldr	r3, [pc, #20]	; (c174 <queuebuf_free+0x3c>)
    c15e:	4798      	blx	r3
    c160:	2800      	cmp	r0, #0
    c162:	d003      	beq.n	c16c <queuebuf_free+0x34>
    memb_free(&refbufmem, buf);
    c164:	4806      	ldr	r0, [pc, #24]	; (c180 <queuebuf_free+0x48>)
    c166:	1c21      	adds	r1, r4, #0
    c168:	4b04      	ldr	r3, [pc, #16]	; (c17c <queuebuf_free+0x44>)
    c16a:	4798      	blx	r3
#if QUEUEBUF_STATS
    --queuebuf_ref_len;
#endif /* QUEUEBUF_STATS */
  }
}
    c16c:	bd38      	pop	{r3, r4, r5, pc}
    c16e:	46c0      	nop			; (mov r8, r8)
    c170:	20000100 	.word	0x20000100
    c174:	0000587d 	.word	0x0000587d
    c178:	20000118 	.word	0x20000118
    c17c:	00005831 	.word	0x00005831
    c180:	2000010c 	.word	0x2000010c

0000c184 <queuebuf_to_packetbuf>:
/*---------------------------------------------------------------------------*/
void
queuebuf_to_packetbuf(struct queuebuf *b)
{
    c184:	b538      	push	{r3, r4, r5, lr}
    c186:	1c04      	adds	r4, r0, #0
  struct queuebuf_ref *r;
  if(memb_inmemb(&bufmem, b)) {
    c188:	4814      	ldr	r0, [pc, #80]	; (c1dc <queuebuf_to_packetbuf+0x58>)
    c18a:	1c21      	adds	r1, r4, #0
    c18c:	4b14      	ldr	r3, [pc, #80]	; (c1e0 <queuebuf_to_packetbuf+0x5c>)
    c18e:	4798      	blx	r3
    c190:	2800      	cmp	r0, #0
    c192:	d00b      	beq.n	c1ac <queuebuf_to_packetbuf+0x28>
#else /* WITH_SWAP */
/*---------------------------------------------------------------------------*/
static struct queuebuf_data *
queuebuf_load_to_ram(struct queuebuf *b)
{
  return b->ram_ptr;
    c194:	6824      	ldr	r4, [r4, #0]
queuebuf_to_packetbuf(struct queuebuf *b)
{
  struct queuebuf_ref *r;
  if(memb_inmemb(&bufmem, b)) {
    struct queuebuf_data *buframptr = queuebuf_load_to_ram(b);
    packetbuf_copyfrom(buframptr->data, buframptr->len);
    c196:	1ca0      	adds	r0, r4, #2
    c198:	8821      	ldrh	r1, [r4, #0]
    c19a:	4b12      	ldr	r3, [pc, #72]	; (c1e4 <queuebuf_to_packetbuf+0x60>)
    c19c:	4798      	blx	r3
    packetbuf_attr_copyfrom(buframptr->attrs, buframptr->addrs);
    c19e:	1c20      	adds	r0, r4, #0
    c1a0:	3082      	adds	r0, #130	; 0x82
    c1a2:	1c21      	adds	r1, r4, #0
    c1a4:	31ba      	adds	r1, #186	; 0xba
    c1a6:	4b10      	ldr	r3, [pc, #64]	; (c1e8 <queuebuf_to_packetbuf+0x64>)
    c1a8:	4798      	blx	r3
    c1aa:	e016      	b.n	c1da <queuebuf_to_packetbuf+0x56>
  } else if(memb_inmemb(&refbufmem, b)) {
    c1ac:	480f      	ldr	r0, [pc, #60]	; (c1ec <queuebuf_to_packetbuf+0x68>)
    c1ae:	1c21      	adds	r1, r4, #0
    c1b0:	4b0b      	ldr	r3, [pc, #44]	; (c1e0 <queuebuf_to_packetbuf+0x5c>)
    c1b2:	4798      	blx	r3
    c1b4:	2800      	cmp	r0, #0
    c1b6:	d010      	beq.n	c1da <queuebuf_to_packetbuf+0x56>
    r = (struct queuebuf_ref *)b;
    packetbuf_clear();
    c1b8:	4b0d      	ldr	r3, [pc, #52]	; (c1f0 <queuebuf_to_packetbuf+0x6c>)
    c1ba:	4798      	blx	r3
    packetbuf_copyfrom(r->ref, r->len);
    c1bc:	8821      	ldrh	r1, [r4, #0]
    c1be:	6860      	ldr	r0, [r4, #4]
    c1c0:	4b08      	ldr	r3, [pc, #32]	; (c1e4 <queuebuf_to_packetbuf+0x60>)
    c1c2:	4798      	blx	r3
    packetbuf_hdralloc(r->hdrlen);
    c1c4:	2538      	movs	r5, #56	; 0x38
    c1c6:	5d60      	ldrb	r0, [r4, r5]
    c1c8:	4b0a      	ldr	r3, [pc, #40]	; (c1f4 <queuebuf_to_packetbuf+0x70>)
    c1ca:	4798      	blx	r3
    memcpy(packetbuf_hdrptr(), r->hdr, r->hdrlen);
    c1cc:	4b0a      	ldr	r3, [pc, #40]	; (c1f8 <queuebuf_to_packetbuf+0x74>)
    c1ce:	4798      	blx	r3
    c1d0:	5d62      	ldrb	r2, [r4, r5]
    c1d2:	1c21      	adds	r1, r4, #0
    c1d4:	3108      	adds	r1, #8
    c1d6:	4b09      	ldr	r3, [pc, #36]	; (c1fc <queuebuf_to_packetbuf+0x78>)
    c1d8:	4798      	blx	r3
  }
}
    c1da:	bd38      	pop	{r3, r4, r5, pc}
    c1dc:	20000100 	.word	0x20000100
    c1e0:	0000587d 	.word	0x0000587d
    c1e4:	0000bfd9 	.word	0x0000bfd9
    c1e8:	0000c035 	.word	0x0000c035
    c1ec:	2000010c 	.word	0x2000010c
    c1f0:	0000bfa1 	.word	0x0000bfa1
    c1f4:	0000bf39 	.word	0x0000bf39
    c1f8:	0000bed9 	.word	0x0000bed9
    c1fc:	00010b2f 	.word	0x00010b2f

0000c200 <queuebuf_attr>:
/*---------------------------------------------------------------------------*/
packetbuf_attr_t
queuebuf_attr(struct queuebuf *b, uint8_t type)
{
  struct queuebuf_data *buframptr = queuebuf_load_to_ram(b);
  return buframptr->attrs[type].val;
    c200:	6803      	ldr	r3, [r0, #0]
    c202:	3140      	adds	r1, #64	; 0x40
    c204:	0049      	lsls	r1, r1, #1
    c206:	1859      	adds	r1, r3, r1
    c208:	8848      	ldrh	r0, [r1, #2]
}
    c20a:	4770      	bx	lr

0000c20c <lollipop_greater_than>:
/*---------------------------------------------------------------------------*/
static int
lollipop_greater_than(int a, int b)
{
  /* Check if we are comparing an initial value with an old value */
  if(a > RPL_LOLLIPOP_CIRCULAR_REGION && b <= RPL_LOLLIPOP_CIRCULAR_REGION) {
    c20c:	287f      	cmp	r0, #127	; 0x7f
    c20e:	dd09      	ble.n	c224 <lollipop_greater_than+0x18>
    c210:	297f      	cmp	r1, #127	; 0x7f
    c212:	dc07      	bgt.n	c224 <lollipop_greater_than+0x18>
    return (RPL_LOLLIPOP_MAX_VALUE + 1 + b - a) > RPL_LOLLIPOP_SEQUENCE_WINDOWS;
    c214:	3101      	adds	r1, #1
    c216:	31ff      	adds	r1, #255	; 0xff
    c218:	1a09      	subs	r1, r1, r0
    c21a:	2301      	movs	r3, #1
    c21c:	2910      	cmp	r1, #16
    c21e:	dc0f      	bgt.n	c240 <lollipop_greater_than+0x34>
    c220:	2300      	movs	r3, #0
    c222:	e00d      	b.n	c240 <lollipop_greater_than+0x34>
  }
  /* Otherwise check if a > b and comparable => ok, or
     if they have wrapped and are still comparable */
  return (a > b && (a - b) < RPL_LOLLIPOP_SEQUENCE_WINDOWS) ||
    c224:	4288      	cmp	r0, r1
    c226:	dd03      	ble.n	c230 <lollipop_greater_than+0x24>
    c228:	1a42      	subs	r2, r0, r1
    c22a:	2301      	movs	r3, #1
    c22c:	2a0f      	cmp	r2, #15
    c22e:	dd07      	ble.n	c240 <lollipop_greater_than+0x34>
    c230:	2300      	movs	r3, #0
    c232:	4288      	cmp	r0, r1
    c234:	da04      	bge.n	c240 <lollipop_greater_than+0x34>
    (a < b && (b - a) > (RPL_LOLLIPOP_CIRCULAR_REGION + 1-
    c236:	1a09      	subs	r1, r1, r0
    c238:	3301      	adds	r3, #1
    c23a:	2970      	cmp	r1, #112	; 0x70
    c23c:	dc00      	bgt.n	c240 <lollipop_greater_than+0x34>
    c23e:	2300      	movs	r3, #0
			 RPL_LOLLIPOP_SEQUENCE_WINDOWS));
}
    c240:	1c18      	adds	r0, r3, #0
    c242:	4770      	bx	lr

0000c244 <rpl_set_preferred_parent>:
  return uip_ds6_nbr_ipaddr_from_lladdr((uip_lladdr_t *)lladdr);
}
/*---------------------------------------------------------------------------*/
static void
rpl_set_preferred_parent(rpl_dag_t *dag, rpl_parent_t *p)
{
    c244:	b570      	push	{r4, r5, r6, lr}
    c246:	1c0b      	adds	r3, r1, #0
  if(dag != NULL && dag->preferred_parent != p) {
    c248:	2800      	cmp	r0, #0
    c24a:	d00d      	beq.n	c268 <rpl_set_preferred_parent+0x24>
    c24c:	6981      	ldr	r1, [r0, #24]
    c24e:	4299      	cmp	r1, r3
    c250:	d00a      	beq.n	c268 <rpl_set_preferred_parent+0x24>
    c252:	1c1d      	adds	r5, r3, #0
    c254:	1c04      	adds	r4, r0, #0
    }
    PRINTF("\n\r");

    /* Always keep the preferred parent locked, so it remains in the
     * neighbor table. */
    nbr_table_unlock(rpl_parents, dag->preferred_parent);
    c256:	4e05      	ldr	r6, [pc, #20]	; (c26c <rpl_set_preferred_parent+0x28>)
    c258:	1c30      	adds	r0, r6, #0
    c25a:	4b05      	ldr	r3, [pc, #20]	; (c270 <rpl_set_preferred_parent+0x2c>)
    c25c:	4798      	blx	r3
    nbr_table_lock(rpl_parents, p);
    c25e:	1c30      	adds	r0, r6, #0
    c260:	1c29      	adds	r1, r5, #0
    c262:	4b04      	ldr	r3, [pc, #16]	; (c274 <rpl_set_preferred_parent+0x30>)
    c264:	4798      	blx	r3
    dag->preferred_parent = p;
    c266:	61a5      	str	r5, [r4, #24]
  }
}
    c268:	bd70      	pop	{r4, r5, r6, pc}
    c26a:	46c0      	nop			; (mov r8, r8)
    c26c:	20000124 	.word	0x20000124
    c270:	0000bda1 	.word	0x0000bda1
    c274:	0000bd85 	.word	0x0000bd85

0000c278 <set_ip_from_prefix>:
  return 1;
}
/*---------------------------------------------------------------------------*/
static void
set_ip_from_prefix(uip_ipaddr_t *ipaddr, rpl_prefix_t *prefix)
{
    c278:	b538      	push	{r3, r4, r5, lr}
    c27a:	1c04      	adds	r4, r0, #0
    c27c:	1c0d      	adds	r5, r1, #0
  memset(ipaddr, 0, sizeof(uip_ipaddr_t));
    c27e:	2100      	movs	r1, #0
    c280:	2210      	movs	r2, #16
    c282:	4b07      	ldr	r3, [pc, #28]	; (c2a0 <set_ip_from_prefix+0x28>)
    c284:	4798      	blx	r3
  memcpy(ipaddr, &prefix->prefix, (prefix->length + 7) / 8);
    c286:	7d2a      	ldrb	r2, [r5, #20]
    c288:	3207      	adds	r2, #7
    c28a:	10d2      	asrs	r2, r2, #3
    c28c:	1c20      	adds	r0, r4, #0
    c28e:	1c29      	adds	r1, r5, #0
    c290:	4b04      	ldr	r3, [pc, #16]	; (c2a4 <set_ip_from_prefix+0x2c>)
    c292:	4798      	blx	r3
  uip_ds6_set_addr_iid(ipaddr, &uip_lladdr);
    c294:	1c20      	adds	r0, r4, #0
    c296:	4904      	ldr	r1, [pc, #16]	; (c2a8 <set_ip_from_prefix+0x30>)
    c298:	4b04      	ldr	r3, [pc, #16]	; (c2ac <set_ip_from_prefix+0x34>)
    c29a:	4798      	blx	r3
}
    c29c:	bd38      	pop	{r3, r4, r5, pc}
    c29e:	46c0      	nop			; (mov r8, r8)
    c2a0:	00010b69 	.word	0x00010b69
    c2a4:	00010b2f 	.word	0x00010b2f
    c2a8:	20002ccc 	.word	0x20002ccc
    c2ac:	000076a5 	.word	0x000076a5

0000c2b0 <check_prefix>:
/*---------------------------------------------------------------------------*/
static void
check_prefix(rpl_prefix_t *last_prefix, rpl_prefix_t *new_prefix)
{
    c2b0:	b530      	push	{r4, r5, lr}
    c2b2:	b085      	sub	sp, #20
    c2b4:	1c05      	adds	r5, r0, #0
    c2b6:	1c0c      	adds	r4, r1, #0
  uip_ipaddr_t ipaddr;
  uip_ds6_addr_t *rep;

  if(last_prefix != NULL && new_prefix != NULL &&
    c2b8:	2800      	cmp	r0, #0
    c2ba:	d011      	beq.n	c2e0 <check_prefix+0x30>
    c2bc:	2900      	cmp	r1, #0
    c2be:	d02a      	beq.n	c316 <check_prefix+0x66>
     last_prefix->length == new_prefix->length &&
    c2c0:	7d02      	ldrb	r2, [r0, #20]
check_prefix(rpl_prefix_t *last_prefix, rpl_prefix_t *new_prefix)
{
  uip_ipaddr_t ipaddr;
  uip_ds6_addr_t *rep;

  if(last_prefix != NULL && new_prefix != NULL &&
    c2c2:	7d0b      	ldrb	r3, [r1, #20]
    c2c4:	4293      	cmp	r3, r2
    c2c6:	d11c      	bne.n	c302 <check_prefix+0x52>
     last_prefix->length == new_prefix->length &&
     uip_ipaddr_prefixcmp(&last_prefix->prefix, &new_prefix->prefix, new_prefix->length) &&
    c2c8:	08d2      	lsrs	r2, r2, #3
    c2ca:	4b18      	ldr	r3, [pc, #96]	; (c32c <check_prefix+0x7c>)
    c2cc:	4798      	blx	r3
{
  uip_ipaddr_t ipaddr;
  uip_ds6_addr_t *rep;

  if(last_prefix != NULL && new_prefix != NULL &&
     last_prefix->length == new_prefix->length &&
    c2ce:	2800      	cmp	r0, #0
    c2d0:	d117      	bne.n	c302 <check_prefix+0x52>
     uip_ipaddr_prefixcmp(&last_prefix->prefix, &new_prefix->prefix, new_prefix->length) &&
    c2d2:	7d6a      	ldrb	r2, [r5, #21]
    c2d4:	7d63      	ldrb	r3, [r4, #21]
    c2d6:	429a      	cmp	r2, r3
    c2d8:	d113      	bne.n	c302 <check_prefix+0x52>
    c2da:	e025      	b.n	c328 <check_prefix+0x78>
    rep = uip_ds6_addr_lookup(&ipaddr);
    if(rep != NULL) {
      PRINTF("RPL: removing global IP address ");
      PRINT6ADDR(&ipaddr);
      PRINTF("\n\r");
      uip_ds6_addr_rm(rep);
    c2dc:	4b14      	ldr	r3, [pc, #80]	; (c330 <check_prefix+0x80>)
    c2de:	4798      	blx	r3
    }
  }
  
  if(new_prefix != NULL) {
    c2e0:	2c00      	cmp	r4, #0
    c2e2:	d021      	beq.n	c328 <check_prefix+0x78>
    set_ip_from_prefix(&ipaddr, new_prefix);
    c2e4:	4668      	mov	r0, sp
    c2e6:	1c21      	adds	r1, r4, #0
    c2e8:	4b12      	ldr	r3, [pc, #72]	; (c334 <check_prefix+0x84>)
    c2ea:	4798      	blx	r3
    if(uip_ds6_addr_lookup(&ipaddr) == NULL) {
    c2ec:	4668      	mov	r0, sp
    c2ee:	4b12      	ldr	r3, [pc, #72]	; (c338 <check_prefix+0x88>)
    c2f0:	4798      	blx	r3
    c2f2:	2800      	cmp	r0, #0
    c2f4:	d118      	bne.n	c328 <check_prefix+0x78>
      PRINTF("RPL: adding global IP address ");
      PRINT6ADDR(&ipaddr);
      PRINTF("\n\r");
      uip_ds6_addr_add(&ipaddr, 0, ADDR_AUTOCONF);
    c2f6:	4668      	mov	r0, sp
    c2f8:	2100      	movs	r1, #0
    c2fa:	2201      	movs	r2, #1
    c2fc:	4b0f      	ldr	r3, [pc, #60]	; (c33c <check_prefix+0x8c>)
    c2fe:	4798      	blx	r3
    c300:	e012      	b.n	c328 <check_prefix+0x78>
    /* Nothing has changed. */
    return;
  }

  if(last_prefix != NULL) {
    set_ip_from_prefix(&ipaddr, last_prefix);
    c302:	4668      	mov	r0, sp
    c304:	1c29      	adds	r1, r5, #0
    c306:	4b0b      	ldr	r3, [pc, #44]	; (c334 <check_prefix+0x84>)
    c308:	4798      	blx	r3
    rep = uip_ds6_addr_lookup(&ipaddr);
    c30a:	4668      	mov	r0, sp
    c30c:	4b0a      	ldr	r3, [pc, #40]	; (c338 <check_prefix+0x88>)
    c30e:	4798      	blx	r3
    if(rep != NULL) {
    c310:	2800      	cmp	r0, #0
    c312:	d1e3      	bne.n	c2dc <check_prefix+0x2c>
    c314:	e7e6      	b.n	c2e4 <check_prefix+0x34>
    /* Nothing has changed. */
    return;
  }

  if(last_prefix != NULL) {
    set_ip_from_prefix(&ipaddr, last_prefix);
    c316:	4668      	mov	r0, sp
    c318:	1c29      	adds	r1, r5, #0
    c31a:	4b06      	ldr	r3, [pc, #24]	; (c334 <check_prefix+0x84>)
    c31c:	4798      	blx	r3
    rep = uip_ds6_addr_lookup(&ipaddr);
    c31e:	4668      	mov	r0, sp
    c320:	4b05      	ldr	r3, [pc, #20]	; (c338 <check_prefix+0x88>)
    c322:	4798      	blx	r3
    if(rep != NULL) {
    c324:	2800      	cmp	r0, #0
    c326:	d1d9      	bne.n	c2dc <check_prefix+0x2c>
      PRINT6ADDR(&ipaddr);
      PRINTF("\n\r");
      uip_ds6_addr_add(&ipaddr, 0, ADDR_AUTOCONF);
    }
  }
}
    c328:	b005      	add	sp, #20
    c32a:	bd30      	pop	{r4, r5, pc}
    c32c:	00010b11 	.word	0x00010b11
    c330:	0000764d 	.word	0x0000764d
    c334:	0000c279 	.word	0x0000c279
    c338:	00007449 	.word	0x00007449
    c33c:	00007561 	.word	0x00007561

0000c340 <find_parent_any_dag_any_instance>:
  return p;
}
/*---------------------------------------------------------------------------*/
static rpl_parent_t *
find_parent_any_dag_any_instance(uip_ipaddr_t *addr)
{
    c340:	b508      	push	{r3, lr}
  uip_ds6_nbr_t *ds6_nbr = uip_ds6_nbr_lookup(addr);
    c342:	4b04      	ldr	r3, [pc, #16]	; (c354 <find_parent_any_dag_any_instance+0x14>)
    c344:	4798      	blx	r3
  const uip_lladdr_t *lladdr = uip_ds6_nbr_get_ll(ds6_nbr);
    c346:	4b04      	ldr	r3, [pc, #16]	; (c358 <find_parent_any_dag_any_instance+0x18>)
    c348:	4798      	blx	r3
    c34a:	1c01      	adds	r1, r0, #0
  return nbr_table_get_from_lladdr(rpl_parents, (linkaddr_t *)lladdr);
    c34c:	4803      	ldr	r0, [pc, #12]	; (c35c <find_parent_any_dag_any_instance+0x1c>)
    c34e:	4b04      	ldr	r3, [pc, #16]	; (c360 <find_parent_any_dag_any_instance+0x20>)
    c350:	4798      	blx	r3
}
    c352:	bd08      	pop	{r3, pc}
    c354:	00006b65 	.word	0x00006b65
    c358:	00006b4d 	.word	0x00006b4d
    c35c:	20000124 	.word	0x20000124
    c360:	0000bd19 	.word	0x0000bd19

0000c364 <rpl_dag_init>:
  rpl_remove_parent(ptr);
}

void
rpl_dag_init(void)
{
    c364:	b508      	push	{r3, lr}
  nbr_table_register(rpl_parents, (nbr_table_callback *)nbr_callback);
    c366:	4802      	ldr	r0, [pc, #8]	; (c370 <rpl_dag_init+0xc>)
    c368:	4902      	ldr	r1, [pc, #8]	; (c374 <rpl_dag_init+0x10>)
    c36a:	4b03      	ldr	r3, [pc, #12]	; (c378 <rpl_dag_init+0x14>)
    c36c:	4798      	blx	r3
}
    c36e:	bd08      	pop	{r3, pc}
    c370:	20000124 	.word	0x20000124
    c374:	0000c7f5 	.word	0x0000c7f5
    c378:	0000baa9 	.word	0x0000baa9

0000c37c <rpl_get_parent_ipaddr>:
  }
}
/*---------------------------------------------------------------------------*/
uip_ipaddr_t *
rpl_get_parent_ipaddr(rpl_parent_t *p)
{
    c37c:	b508      	push	{r3, lr}
    c37e:	1c01      	adds	r1, r0, #0
  linkaddr_t *lladdr = nbr_table_get_lladdr(rpl_parents, p);
    c380:	4802      	ldr	r0, [pc, #8]	; (c38c <rpl_get_parent_ipaddr+0x10>)
    c382:	4b03      	ldr	r3, [pc, #12]	; (c390 <rpl_get_parent_ipaddr+0x14>)
    c384:	4798      	blx	r3
  return uip_ds6_nbr_ipaddr_from_lladdr((uip_lladdr_t *)lladdr);
    c386:	4b03      	ldr	r3, [pc, #12]	; (c394 <rpl_get_parent_ipaddr+0x18>)
    c388:	4798      	blx	r3
}
    c38a:	bd08      	pop	{r3, pc}
    c38c:	20000124 	.word	0x20000124
    c390:	0000bdbd 	.word	0x0000bdbd
    c394:	00006bd5 	.word	0x00006bd5

0000c398 <rpl_set_prefix>:
  }
}
/*---------------------------------------------------------------------------*/
int
rpl_set_prefix(rpl_dag_t *dag, uip_ipaddr_t *prefix, unsigned len)
{
    c398:	b5f0      	push	{r4, r5, r6, r7, lr}
    c39a:	b089      	sub	sp, #36	; 0x24
    c39c:	1c04      	adds	r4, r0, #0
    c39e:	9101      	str	r1, [sp, #4]
    c3a0:	1c15      	adds	r5, r2, #0
  rpl_prefix_t last_prefix;
  uint8_t last_len = dag->prefix_info.length;
    c3a2:	2338      	movs	r3, #56	; 0x38
    c3a4:	5cc3      	ldrb	r3, [r0, r3]
  
  if(len > 128) {
    return 0;
    c3a6:	2000      	movs	r0, #0
rpl_set_prefix(rpl_dag_t *dag, uip_ipaddr_t *prefix, unsigned len)
{
  rpl_prefix_t last_prefix;
  uint8_t last_len = dag->prefix_info.length;
  
  if(len > 128) {
    c3a8:	2a80      	cmp	r2, #128	; 0x80
    c3aa:	d834      	bhi.n	c416 <rpl_set_prefix+0x7e>
    return 0;
  }
  if(dag->prefix_info.length != 0) {
    c3ac:	2b00      	cmp	r3, #0
    c3ae:	d01b      	beq.n	c3e8 <rpl_set_prefix+0x50>
    memcpy(&last_prefix, &dag->prefix_info, sizeof(rpl_prefix_t));
    c3b0:	1c27      	adds	r7, r4, #0
    c3b2:	3724      	adds	r7, #36	; 0x24
    c3b4:	a802      	add	r0, sp, #8
    c3b6:	1c39      	adds	r1, r7, #0
    c3b8:	2218      	movs	r2, #24
    c3ba:	4e18      	ldr	r6, [pc, #96]	; (c41c <rpl_set_prefix+0x84>)
    c3bc:	47b0      	blx	r6
  }
  memset(&dag->prefix_info.prefix, 0, sizeof(dag->prefix_info.prefix));
    c3be:	1c38      	adds	r0, r7, #0
    c3c0:	2100      	movs	r1, #0
    c3c2:	2210      	movs	r2, #16
    c3c4:	4b16      	ldr	r3, [pc, #88]	; (c420 <rpl_set_prefix+0x88>)
    c3c6:	4798      	blx	r3
  memcpy(&dag->prefix_info.prefix, prefix, (len + 7) / 8);
    c3c8:	1dea      	adds	r2, r5, #7
    c3ca:	08d2      	lsrs	r2, r2, #3
    c3cc:	1c38      	adds	r0, r7, #0
    c3ce:	9901      	ldr	r1, [sp, #4]
    c3d0:	47b0      	blx	r6
  dag->prefix_info.length = len;
    c3d2:	2338      	movs	r3, #56	; 0x38
    c3d4:	54e5      	strb	r5, [r4, r3]
  dag->prefix_info.flags = UIP_ND6_RA_FLAG_AUTONOMOUS;
    c3d6:	2240      	movs	r2, #64	; 0x40
    c3d8:	3301      	adds	r3, #1
    c3da:	54e2      	strb	r2, [r4, r3]
  if(last_len == 0) {
    PRINTF("rpl_set_prefix - prefix NULL\n\r");
    check_prefix(NULL, &dag->prefix_info);
  } else { 
    PRINTF("rpl_set_prefix - prefix NON-NULL\n\r");
    check_prefix(&last_prefix, &dag->prefix_info);
    c3dc:	a802      	add	r0, sp, #8
    c3de:	1c39      	adds	r1, r7, #0
    c3e0:	4b10      	ldr	r3, [pc, #64]	; (c424 <rpl_set_prefix+0x8c>)
    c3e2:	4798      	blx	r3
  }
  return 1;
    c3e4:	2001      	movs	r0, #1
    c3e6:	e016      	b.n	c416 <rpl_set_prefix+0x7e>
    return 0;
  }
  if(dag->prefix_info.length != 0) {
    memcpy(&last_prefix, &dag->prefix_info, sizeof(rpl_prefix_t));
  }
  memset(&dag->prefix_info.prefix, 0, sizeof(dag->prefix_info.prefix));
    c3e8:	1c27      	adds	r7, r4, #0
    c3ea:	3724      	adds	r7, #36	; 0x24
    c3ec:	1c38      	adds	r0, r7, #0
    c3ee:	2100      	movs	r1, #0
    c3f0:	2210      	movs	r2, #16
    c3f2:	4b0b      	ldr	r3, [pc, #44]	; (c420 <rpl_set_prefix+0x88>)
    c3f4:	4798      	blx	r3
  memcpy(&dag->prefix_info.prefix, prefix, (len + 7) / 8);
    c3f6:	1dea      	adds	r2, r5, #7
    c3f8:	08d2      	lsrs	r2, r2, #3
    c3fa:	1c38      	adds	r0, r7, #0
    c3fc:	9901      	ldr	r1, [sp, #4]
    c3fe:	4b07      	ldr	r3, [pc, #28]	; (c41c <rpl_set_prefix+0x84>)
    c400:	4798      	blx	r3
  dag->prefix_info.length = len;
    c402:	2338      	movs	r3, #56	; 0x38
    c404:	54e5      	strb	r5, [r4, r3]
  dag->prefix_info.flags = UIP_ND6_RA_FLAG_AUTONOMOUS;
    c406:	2240      	movs	r2, #64	; 0x40
    c408:	3301      	adds	r3, #1
    c40a:	54e2      	strb	r2, [r4, r3]
  PRINTF("RPL: Prefix set - will announce this in DIOs\n\r");
  /* Autoconfigure an address if this node does not already have an address
     with this prefix. Otherwise, update the prefix */
  if(last_len == 0) {
    PRINTF("rpl_set_prefix - prefix NULL\n\r");
    check_prefix(NULL, &dag->prefix_info);
    c40c:	2000      	movs	r0, #0
    c40e:	1c39      	adds	r1, r7, #0
    c410:	4b04      	ldr	r3, [pc, #16]	; (c424 <rpl_set_prefix+0x8c>)
    c412:	4798      	blx	r3
  } else { 
    PRINTF("rpl_set_prefix - prefix NON-NULL\n\r");
    check_prefix(&last_prefix, &dag->prefix_info);
  }
  return 1;
    c414:	2001      	movs	r0, #1
}
    c416:	b009      	add	sp, #36	; 0x24
    c418:	bdf0      	pop	{r4, r5, r6, r7, pc}
    c41a:	46c0      	nop			; (mov r8, r8)
    c41c:	00010b2f 	.word	0x00010b2f
    c420:	00010b69 	.word	0x00010b69
    c424:	0000c2b1 	.word	0x0000c2b1

0000c428 <rpl_set_default_route>:
/*---------------------------------------------------------------------------*/
int
rpl_set_default_route(rpl_instance_t *instance, uip_ipaddr_t *from)
{
    c428:	b538      	push	{r3, r4, r5, lr}
    c42a:	1c04      	adds	r4, r0, #0
    c42c:	1c0d      	adds	r5, r1, #0
  if(instance->def_route != NULL) {
    c42e:	2388      	movs	r3, #136	; 0x88
    c430:	58c0      	ldr	r0, [r0, r3]
    c432:	2800      	cmp	r0, #0
    c434:	d012      	beq.n	c45c <rpl_set_default_route+0x34>
    PRINTF("RPL: Removing default route through ");
    PRINT6ADDR(&instance->def_route->ipaddr);
    PRINTF("\n\r");
    uip_ds6_defrt_rm(instance->def_route);
    c436:	4b0b      	ldr	r3, [pc, #44]	; (c464 <rpl_set_default_route+0x3c>)
    c438:	4798      	blx	r3
    instance->def_route = NULL;
    c43a:	2200      	movs	r2, #0
    c43c:	2388      	movs	r3, #136	; 0x88
    c43e:	50e2      	str	r2, [r4, r3]
    c440:	e00c      	b.n	c45c <rpl_set_default_route+0x34>
  if(from != NULL) {
    PRINTF("RPL: Adding default route through ");
    PRINT6ADDR(from);
    PRINTF("\n\r");
    instance->def_route = uip_ds6_defrt_add(from,
        RPL_LIFETIME(instance,
    c442:	2393      	movs	r3, #147	; 0x93

  if(from != NULL) {
    PRINTF("RPL: Adding default route through ");
    PRINT6ADDR(from);
    PRINTF("\n\r");
    instance->def_route = uip_ds6_defrt_add(from,
    c444:	5ce1      	ldrb	r1, [r4, r3]
        RPL_LIFETIME(instance,
    c446:	3309      	adds	r3, #9
    c448:	5ae3      	ldrh	r3, [r4, r3]

  if(from != NULL) {
    PRINTF("RPL: Adding default route through ");
    PRINT6ADDR(from);
    PRINTF("\n\r");
    instance->def_route = uip_ds6_defrt_add(from,
    c44a:	4359      	muls	r1, r3
    c44c:	1c28      	adds	r0, r5, #0
    c44e:	4b06      	ldr	r3, [pc, #24]	; (c468 <rpl_set_default_route+0x40>)
    c450:	4798      	blx	r3
    c452:	2388      	movs	r3, #136	; 0x88
    c454:	50e0      	str	r0, [r4, r3]
        RPL_LIFETIME(instance,
            instance->default_lifetime));
    if(instance->def_route == NULL) {
      return 0;
    c456:	1e43      	subs	r3, r0, #1
    c458:	4198      	sbcs	r0, r3
    c45a:	e002      	b.n	c462 <rpl_set_default_route+0x3a>
    PRINTF("\n\r");
    uip_ds6_defrt_rm(instance->def_route);
    instance->def_route = NULL;
  }

  if(from != NULL) {
    c45c:	2d00      	cmp	r5, #0
    c45e:	d1f0      	bne.n	c442 <rpl_set_default_route+0x1a>
      uip_ds6_defrt_rm(instance->def_route);
    } else {
      PRINTF("RPL: Not actually removing default route, since instance had no default route\n\r");
    }
  }
  return 1;
    c460:	2001      	movs	r0, #1
}
    c462:	bd38      	pop	{r3, r4, r5, pc}
    c464:	0000712d 	.word	0x0000712d
    c468:	000071cd 	.word	0x000071cd

0000c46c <rpl_alloc_instance>:
/*---------------------------------------------------------------------------*/
rpl_instance_t *
rpl_alloc_instance(uint8_t instance_id)
{
    c46c:	b538      	push	{r3, r4, r5, lr}
    c46e:	1c05      	adds	r5, r0, #0
  rpl_instance_t *instance, *end;

  for(instance = &instance_table[0], end = instance + RPL_MAX_INSTANCES;
      instance < end; ++instance) {
    if(instance->used == 0) {
    c470:	238d      	movs	r3, #141	; 0x8d
    c472:	4a0b      	ldr	r2, [pc, #44]	; (c4a0 <rpl_alloc_instance+0x34>)
    c474:	5cd3      	ldrb	r3, [r2, r3]
      instance->def_route = NULL;
      instance->used = 1;
      return instance;
    }
  }
  return NULL;
    c476:	2000      	movs	r0, #0
{
  rpl_instance_t *instance, *end;

  for(instance = &instance_table[0], end = instance + RPL_MAX_INSTANCES;
      instance < end; ++instance) {
    if(instance->used == 0) {
    c478:	2b00      	cmp	r3, #0
    c47a:	d10f      	bne.n	c49c <rpl_alloc_instance+0x30>
      memset(instance, 0, sizeof(*instance));
    c47c:	1c14      	adds	r4, r2, #0
    c47e:	1c10      	adds	r0, r2, #0
    c480:	2100      	movs	r1, #0
    c482:	2282      	movs	r2, #130	; 0x82
    c484:	0052      	lsls	r2, r2, #1
    c486:	4b07      	ldr	r3, [pc, #28]	; (c4a4 <rpl_alloc_instance+0x38>)
    c488:	4798      	blx	r3
      instance->instance_id = instance_id;
    c48a:	238c      	movs	r3, #140	; 0x8c
    c48c:	54e5      	strb	r5, [r4, r3]
      instance->def_route = NULL;
    c48e:	2200      	movs	r2, #0
    c490:	3b04      	subs	r3, #4
    c492:	50e2      	str	r2, [r4, r3]
      instance->used = 1;
    c494:	3201      	adds	r2, #1
    c496:	3305      	adds	r3, #5
    c498:	54e2      	strb	r2, [r4, r3]
      return instance;
    c49a:	1c20      	adds	r0, r4, #0
    }
  }
  return NULL;
}
    c49c:	bd38      	pop	{r3, r4, r5, pc}
    c49e:	46c0      	nop			; (mov r8, r8)
    c4a0:	20003288 	.word	0x20003288
    c4a4:	00010b69 	.word	0x00010b69

0000c4a8 <rpl_add_parent>:
  dag->used = 0;
}
/*---------------------------------------------------------------------------*/
rpl_parent_t *
rpl_add_parent(rpl_dag_t *dag, rpl_dio_t *dio, uip_ipaddr_t *addr)
{
    c4a8:	b538      	push	{r3, r4, r5, lr}
    c4aa:	1c05      	adds	r5, r0, #0
    c4ac:	1c0c      	adds	r4, r1, #0
  rpl_parent_t *p = NULL;
  /* Is the parent known by ds6? Drop this request if not.
   * Typically, the parent is added upon receiving a DIO. */
  const uip_lladdr_t *lladdr = uip_ds6_nbr_lladdr_from_ipaddr(addr);
    c4ae:	1c10      	adds	r0, r2, #0
    c4b0:	4b09      	ldr	r3, [pc, #36]	; (c4d8 <rpl_add_parent+0x30>)
    c4b2:	4798      	blx	r3
    c4b4:	1e01      	subs	r1, r0, #0

  PRINTF("RPL: rpl_add_parent lladdr %p ", lladdr);
  PRINT6ADDR(addr);
  PRINTF("\n\r");
  if(lladdr != NULL) {
    c4b6:	d00d      	beq.n	c4d4 <rpl_add_parent+0x2c>
    /* Add parent in rpl_parents */
    p = nbr_table_add_lladdr(rpl_parents, (linkaddr_t *)lladdr);
    c4b8:	4808      	ldr	r0, [pc, #32]	; (c4dc <rpl_add_parent+0x34>)
    c4ba:	4b09      	ldr	r3, [pc, #36]	; (c4e0 <rpl_add_parent+0x38>)
    c4bc:	4798      	blx	r3
    if(p == NULL) {
    c4be:	2800      	cmp	r0, #0
    c4c0:	d009      	beq.n	c4d6 <rpl_add_parent+0x2e>
      PRINTF("RPL: rpl_add_parent p NULL\n\r");
    } else {
      p->dag = dag;
    c4c2:	6045      	str	r5, [r0, #4]
      p->rank = dio->rank;
    c4c4:	8a63      	ldrh	r3, [r4, #18]
    c4c6:	8103      	strh	r3, [r0, #8]
      p->dtsn = dio->dtsn;
    c4c8:	7e63      	ldrb	r3, [r4, #25]
    c4ca:	7303      	strb	r3, [r0, #12]
      p->link_metric = RPL_INIT_LINK_METRIC * RPL_DAG_MC_ETX_DIVISOR;
    c4cc:	23c0      	movs	r3, #192	; 0xc0
    c4ce:	009b      	lsls	r3, r3, #2
    c4d0:	8143      	strh	r3, [r0, #10]
    c4d2:	e000      	b.n	c4d6 <rpl_add_parent+0x2e>
}
/*---------------------------------------------------------------------------*/
rpl_parent_t *
rpl_add_parent(rpl_dag_t *dag, rpl_dio_t *dio, uip_ipaddr_t *addr)
{
  rpl_parent_t *p = NULL;
    c4d4:	2000      	movs	r0, #0
#endif /* RPL_DAG_MC != RPL_DAG_MC_NONE */
    }
  }

  return p;
}
    c4d6:	bd38      	pop	{r3, r4, r5, pc}
    c4d8:	00006be1 	.word	0x00006be1
    c4dc:	20000124 	.word	0x20000124
    c4e0:	0000bb91 	.word	0x0000bb91

0000c4e4 <rpl_find_parent>:
  return nbr_table_get_from_lladdr(rpl_parents, (linkaddr_t *)lladdr);
}
/*---------------------------------------------------------------------------*/
rpl_parent_t *
rpl_find_parent(rpl_dag_t *dag, uip_ipaddr_t *addr)
{
    c4e4:	b510      	push	{r4, lr}
    c4e6:	1c04      	adds	r4, r0, #0
  rpl_parent_t *p = find_parent_any_dag_any_instance(addr);
    c4e8:	1c08      	adds	r0, r1, #0
    c4ea:	4b06      	ldr	r3, [pc, #24]	; (c504 <rpl_find_parent+0x20>)
    c4ec:	4798      	blx	r3
  if(p != NULL && p->dag == dag) {
    c4ee:	2800      	cmp	r0, #0
    c4f0:	d005      	beq.n	c4fe <rpl_find_parent+0x1a>
    return p;
  } else {
    return NULL;
    c4f2:	2300      	movs	r3, #0
/*---------------------------------------------------------------------------*/
rpl_parent_t *
rpl_find_parent(rpl_dag_t *dag, uip_ipaddr_t *addr)
{
  rpl_parent_t *p = find_parent_any_dag_any_instance(addr);
  if(p != NULL && p->dag == dag) {
    c4f4:	6842      	ldr	r2, [r0, #4]
    c4f6:	42a2      	cmp	r2, r4
    c4f8:	d102      	bne.n	c500 <rpl_find_parent+0x1c>
    return p;
    c4fa:	1c03      	adds	r3, r0, #0
    c4fc:	e000      	b.n	c500 <rpl_find_parent+0x1c>
  } else {
    return NULL;
    c4fe:	2300      	movs	r3, #0
  }
}
    c500:	1c18      	adds	r0, r3, #0
    c502:	bd10      	pop	{r4, pc}
    c504:	0000c341 	.word	0x0000c341

0000c508 <rpl_find_parent_any_dag>:
  }
}
/*---------------------------------------------------------------------------*/
rpl_parent_t *
rpl_find_parent_any_dag(rpl_instance_t *instance, uip_ipaddr_t *addr)
{
    c508:	b510      	push	{r4, lr}
    c50a:	1c04      	adds	r4, r0, #0
  rpl_parent_t *p = find_parent_any_dag_any_instance(addr);
    c50c:	1c08      	adds	r0, r1, #0
    c50e:	4b09      	ldr	r3, [pc, #36]	; (c534 <rpl_find_parent_any_dag+0x2c>)
    c510:	4798      	blx	r3
  if(p && p->dag && p->dag->instance == instance) {
    c512:	2800      	cmp	r0, #0
    c514:	d008      	beq.n	c528 <rpl_find_parent_any_dag+0x20>
    c516:	6843      	ldr	r3, [r0, #4]
    c518:	2b00      	cmp	r3, #0
    c51a:	d007      	beq.n	c52c <rpl_find_parent_any_dag+0x24>
    c51c:	6a1a      	ldr	r2, [r3, #32]
    return p;
  } else {
    return NULL;
    c51e:	2300      	movs	r3, #0
/*---------------------------------------------------------------------------*/
rpl_parent_t *
rpl_find_parent_any_dag(rpl_instance_t *instance, uip_ipaddr_t *addr)
{
  rpl_parent_t *p = find_parent_any_dag_any_instance(addr);
  if(p && p->dag && p->dag->instance == instance) {
    c520:	42a2      	cmp	r2, r4
    c522:	d104      	bne.n	c52e <rpl_find_parent_any_dag+0x26>
    return p;
    c524:	1c03      	adds	r3, r0, #0
    c526:	e002      	b.n	c52e <rpl_find_parent_any_dag+0x26>
  } else {
    return NULL;
    c528:	2300      	movs	r3, #0
    c52a:	e000      	b.n	c52e <rpl_find_parent_any_dag+0x26>
    c52c:	2300      	movs	r3, #0
  }
}
    c52e:	1c18      	adds	r0, r3, #0
    c530:	bd10      	pop	{r4, pc}
    c532:	46c0      	nop			; (mov r8, r8)
    c534:	0000c341 	.word	0x0000c341

0000c538 <rpl_select_parent>:
  return best;
}
/*---------------------------------------------------------------------------*/
rpl_parent_t *
rpl_select_parent(rpl_dag_t *dag)
{
    c538:	b5f0      	push	{r4, r5, r6, r7, lr}
    c53a:	4647      	mov	r7, r8
    c53c:	b480      	push	{r7}
    c53e:	1c06      	adds	r6, r0, #0
{
  rpl_parent_t *p, *best;

  best = NULL;

  p = nbr_table_head(rpl_parents);
    c540:	4813      	ldr	r0, [pc, #76]	; (c590 <rpl_select_parent+0x58>)
    c542:	4b14      	ldr	r3, [pc, #80]	; (c594 <rpl_select_parent+0x5c>)
    c544:	4798      	blx	r3
    c546:	1e04      	subs	r4, r0, #0
  while(p != NULL) {
    c548:	d01d      	beq.n	c586 <rpl_select_parent+0x4e>
    c54a:	2500      	movs	r5, #0
    if(p->rank == INFINITE_RANK) {
    c54c:	4b12      	ldr	r3, [pc, #72]	; (c598 <rpl_select_parent+0x60>)
    c54e:	4698      	mov	r8, r3
    } else if(best == NULL) {
      best = p;
    } else {
      best = dag->instance->of->best_parent(best, p);
    }
    p = nbr_table_next(rpl_parents, p);
    c550:	4f12      	ldr	r7, [pc, #72]	; (c59c <rpl_select_parent+0x64>)

  best = NULL;

  p = nbr_table_head(rpl_parents);
  while(p != NULL) {
    if(p->rank == INFINITE_RANK) {
    c552:	8923      	ldrh	r3, [r4, #8]
    c554:	4543      	cmp	r3, r8
    c556:	d00a      	beq.n	c56e <rpl_select_parent+0x36>
      /* ignore this neighbor */
    } else if(best == NULL) {
    c558:	2d00      	cmp	r5, #0
    c55a:	d007      	beq.n	c56c <rpl_select_parent+0x34>
      best = p;
    } else {
      best = dag->instance->of->best_parent(best, p);
    c55c:	6a33      	ldr	r3, [r6, #32]
    c55e:	689b      	ldr	r3, [r3, #8]
    c560:	689b      	ldr	r3, [r3, #8]
    c562:	1c28      	adds	r0, r5, #0
    c564:	1c21      	adds	r1, r4, #0
    c566:	4798      	blx	r3
    c568:	1c05      	adds	r5, r0, #0
    c56a:	e000      	b.n	c56e <rpl_select_parent+0x36>

  p = nbr_table_head(rpl_parents);
  while(p != NULL) {
    if(p->rank == INFINITE_RANK) {
      /* ignore this neighbor */
    } else if(best == NULL) {
    c56c:	1c25      	adds	r5, r4, #0
      best = p;
    } else {
      best = dag->instance->of->best_parent(best, p);
    }
    p = nbr_table_next(rpl_parents, p);
    c56e:	4808      	ldr	r0, [pc, #32]	; (c590 <rpl_select_parent+0x58>)
    c570:	1c21      	adds	r1, r4, #0
    c572:	47b8      	blx	r7
    c574:	1e04      	subs	r4, r0, #0
  rpl_parent_t *p, *best;

  best = NULL;

  p = nbr_table_head(rpl_parents);
  while(p != NULL) {
    c576:	d1ec      	bne.n	c552 <rpl_select_parent+0x1a>
rpl_parent_t *
rpl_select_parent(rpl_dag_t *dag)
{
  rpl_parent_t *best = best_parent(dag);

  if(best != NULL) {
    c578:	2d00      	cmp	r5, #0
    c57a:	d005      	beq.n	c588 <rpl_select_parent+0x50>
    rpl_set_preferred_parent(dag, best);
    c57c:	1c30      	adds	r0, r6, #0
    c57e:	1c29      	adds	r1, r5, #0
    c580:	4b07      	ldr	r3, [pc, #28]	; (c5a0 <rpl_select_parent+0x68>)
    c582:	4798      	blx	r3
    c584:	e000      	b.n	c588 <rpl_select_parent+0x50>
static rpl_parent_t *
best_parent(rpl_dag_t *dag)
{
  rpl_parent_t *p, *best;

  best = NULL;
    c586:	1c05      	adds	r5, r0, #0
  if(best != NULL) {
    rpl_set_preferred_parent(dag, best);
  }

  return best;
}
    c588:	1c28      	adds	r0, r5, #0
    c58a:	bc04      	pop	{r2}
    c58c:	4690      	mov	r8, r2
    c58e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    c590:	20000124 	.word	0x20000124
    c594:	0000bb41 	.word	0x0000bb41
    c598:	0000ffff 	.word	0x0000ffff
    c59c:	0000bad5 	.word	0x0000bad5
    c5a0:	0000c245 	.word	0x0000c245

0000c5a4 <rpl_select_dag>:
  }
}
/*---------------------------------------------------------------------------*/
rpl_dag_t *
rpl_select_dag(rpl_instance_t *instance, rpl_parent_t *p)
{
    c5a4:	b5f0      	push	{r4, r5, r6, r7, lr}
    c5a6:	4657      	mov	r7, sl
    c5a8:	464e      	mov	r6, r9
    c5aa:	4645      	mov	r5, r8
    c5ac:	b4e0      	push	{r5, r6, r7}
    c5ae:	b082      	sub	sp, #8
    c5b0:	1c05      	adds	r5, r0, #0
    c5b2:	1c0e      	adds	r6, r1, #0
  rpl_parent_t *last_parent;
  rpl_dag_t *dag, *end, *best_dag;
  rpl_rank_t old_rank;

  old_rank = instance->current_dag->rank;
  last_parent = instance->current_dag->preferred_parent;
    c5b4:	68c4      	ldr	r4, [r0, #12]
    c5b6:	69a7      	ldr	r7, [r4, #24]

  best_dag = instance->current_dag;
  if(best_dag->rank != ROOT_RANK(instance)) {
    c5b8:	8ba2      	ldrh	r2, [r4, #28]
    c5ba:	239a      	movs	r3, #154	; 0x9a
    c5bc:	5ac3      	ldrh	r3, [r0, r3]
    c5be:	429a      	cmp	r2, r3
    c5c0:	d100      	bne.n	c5c4 <rpl_select_dag+0x20>
    c5c2:	e0b5      	b.n	c730 <rpl_select_dag+0x18c>
    if(rpl_select_parent(p->dag) != NULL) {
    c5c4:	6848      	ldr	r0, [r1, #4]
    c5c6:	4b63      	ldr	r3, [pc, #396]	; (c754 <rpl_select_dag+0x1b0>)
    c5c8:	4798      	blx	r3
    c5ca:	2800      	cmp	r0, #0
    c5cc:	d008      	beq.n	c5e0 <rpl_select_dag+0x3c>
      if(p->dag != best_dag) {
    c5ce:	6871      	ldr	r1, [r6, #4]
    c5d0:	428c      	cmp	r4, r1
    c5d2:	d02a      	beq.n	c62a <rpl_select_dag+0x86>
        best_dag = instance->of->best_dag(best_dag, p->dag);
    c5d4:	68ab      	ldr	r3, [r5, #8]
    c5d6:	68db      	ldr	r3, [r3, #12]
    c5d8:	1c20      	adds	r0, r4, #0
    c5da:	4798      	blx	r3
    c5dc:	1c04      	adds	r4, r0, #0
    c5de:	e025      	b.n	c62c <rpl_select_dag+0x88>
      }
    } else if(p->dag == best_dag) {
    c5e0:	6873      	ldr	r3, [r6, #4]
    c5e2:	429c      	cmp	r4, r3
    c5e4:	d122      	bne.n	c62c <rpl_select_dag+0x88>
      best_dag = NULL;
      for(dag = &instance->dag_table[0], end = dag + RPL_MAX_DAG_PER_INSTANCE; dag < end; ++dag) {
    c5e6:	1c2e      	adds	r6, r5, #0
    c5e8:	3610      	adds	r6, #16
    c5ea:	2388      	movs	r3, #136	; 0x88
    c5ec:	4698      	mov	r8, r3
    c5ee:	44a8      	add	r8, r5
    c5f0:	4546      	cmp	r6, r8
    c5f2:	d300      	bcc.n	c5f6 <rpl_select_dag+0x52>
    c5f4:	e094      	b.n	c720 <rpl_select_dag+0x17c>
    c5f6:	2400      	movs	r4, #0
        if(dag->used && dag->preferred_parent != NULL && dag->preferred_parent->rank != INFINITE_RANK) {
    c5f8:	4b57      	ldr	r3, [pc, #348]	; (c758 <rpl_select_dag+0x1b4>)
    c5fa:	4699      	mov	r9, r3
    c5fc:	7d73      	ldrb	r3, [r6, #21]
    c5fe:	2b00      	cmp	r3, #0
    c600:	d00f      	beq.n	c622 <rpl_select_dag+0x7e>
    c602:	69b3      	ldr	r3, [r6, #24]
    c604:	2b00      	cmp	r3, #0
    c606:	d00c      	beq.n	c622 <rpl_select_dag+0x7e>
    c608:	891b      	ldrh	r3, [r3, #8]
    c60a:	454b      	cmp	r3, r9
    c60c:	d009      	beq.n	c622 <rpl_select_dag+0x7e>
          if(best_dag == NULL) {
    c60e:	2c00      	cmp	r4, #0
    c610:	d006      	beq.n	c620 <rpl_select_dag+0x7c>
            best_dag = dag;
          } else {
            best_dag = instance->of->best_dag(best_dag, dag);
    c612:	68ab      	ldr	r3, [r5, #8]
    c614:	68db      	ldr	r3, [r3, #12]
    c616:	1c20      	adds	r0, r4, #0
    c618:	1c31      	adds	r1, r6, #0
    c61a:	4798      	blx	r3
    c61c:	1c04      	adds	r4, r0, #0
    c61e:	e000      	b.n	c622 <rpl_select_dag+0x7e>
    c620:	1c34      	adds	r4, r6, #0
      if(p->dag != best_dag) {
        best_dag = instance->of->best_dag(best_dag, p->dag);
      }
    } else if(p->dag == best_dag) {
      best_dag = NULL;
      for(dag = &instance->dag_table[0], end = dag + RPL_MAX_DAG_PER_INSTANCE; dag < end; ++dag) {
    c622:	363c      	adds	r6, #60	; 0x3c
    c624:	45b0      	cmp	r8, r6
    c626:	d8e9      	bhi.n	c5fc <rpl_select_dag+0x58>
    c628:	e000      	b.n	c62c <rpl_select_dag+0x88>
  rpl_rank_t old_rank;

  old_rank = instance->current_dag->rank;
  last_parent = instance->current_dag->preferred_parent;

  best_dag = instance->current_dag;
    c62a:	1c0c      	adds	r4, r1, #0
        }
      }
    }
  }

  if(best_dag == NULL) {
    c62c:	2c00      	cmp	r4, #0
    c62e:	d079      	beq.n	c724 <rpl_select_dag+0x180>
    /* No parent found: the calling function handle this problem. */
    return NULL;
  }

  if(instance->current_dag != best_dag) {
    c630:	68e8      	ldr	r0, [r5, #12]
    c632:	42a0      	cmp	r0, r4
    c634:	d01b      	beq.n	c66e <rpl_select_dag+0xca>
    /* Remove routes installed by DAOs. */
    rpl_remove_routes(instance->current_dag);
    c636:	4b49      	ldr	r3, [pc, #292]	; (c75c <rpl_select_dag+0x1b8>)
    c638:	4798      	blx	r3

    PRINTF("RPL: New preferred DAG: ");
    PRINT6ADDR(&best_dag->dag_id);
    PRINTF("\n\r");

    if(best_dag->prefix_info.flags & UIP_ND6_RA_FLAG_AUTONOMOUS) {
    c63a:	2339      	movs	r3, #57	; 0x39
    c63c:	5ce3      	ldrb	r3, [r4, r3]
    c63e:	065b      	lsls	r3, r3, #25
    c640:	d506      	bpl.n	c650 <rpl_select_dag+0xac>
      check_prefix(&instance->current_dag->prefix_info, &best_dag->prefix_info);
    c642:	68e8      	ldr	r0, [r5, #12]
    c644:	3024      	adds	r0, #36	; 0x24
    c646:	1c21      	adds	r1, r4, #0
    c648:	3124      	adds	r1, #36	; 0x24
    c64a:	4b45      	ldr	r3, [pc, #276]	; (c760 <rpl_select_dag+0x1bc>)
    c64c:	4798      	blx	r3
    c64e:	e008      	b.n	c662 <rpl_select_dag+0xbe>
    } else if(instance->current_dag->prefix_info.flags & UIP_ND6_RA_FLAG_AUTONOMOUS) {
    c650:	68e8      	ldr	r0, [r5, #12]
    c652:	2339      	movs	r3, #57	; 0x39
    c654:	5cc3      	ldrb	r3, [r0, r3]
    c656:	065b      	lsls	r3, r3, #25
    c658:	d503      	bpl.n	c662 <rpl_select_dag+0xbe>
      check_prefix(&instance->current_dag->prefix_info, NULL);
    c65a:	3024      	adds	r0, #36	; 0x24
    c65c:	2100      	movs	r1, #0
    c65e:	4b40      	ldr	r3, [pc, #256]	; (c760 <rpl_select_dag+0x1bc>)
    c660:	4798      	blx	r3
    }

    best_dag->joined = 1;
    c662:	2301      	movs	r3, #1
    c664:	75a3      	strb	r3, [r4, #22]
    instance->current_dag->joined = 0;
    c666:	2300      	movs	r3, #0
    c668:	68ea      	ldr	r2, [r5, #12]
    c66a:	7593      	strb	r3, [r2, #22]
    instance->current_dag = best_dag;
    c66c:	60ec      	str	r4, [r5, #12]
  }

  instance->of->update_metric_container(instance);
    c66e:	68ab      	ldr	r3, [r5, #8]
    c670:	695b      	ldr	r3, [r3, #20]
    c672:	1c28      	adds	r0, r5, #0
    c674:	4798      	blx	r3
  /* Update the DAG rank. */
  best_dag->rank = instance->of->calculate_rank(best_dag->preferred_parent, 0);
    c676:	68ab      	ldr	r3, [r5, #8]
    c678:	691b      	ldr	r3, [r3, #16]
    c67a:	69a0      	ldr	r0, [r4, #24]
    c67c:	2100      	movs	r1, #0
    c67e:	4798      	blx	r3
    c680:	83a0      	strh	r0, [r4, #28]
  if(last_parent == NULL || best_dag->rank < best_dag->min_rank) {
    c682:	2f00      	cmp	r7, #0
    c684:	d002      	beq.n	c68c <rpl_select_dag+0xe8>
    c686:	8a26      	ldrh	r6, [r4, #16]
    c688:	42b0      	cmp	r0, r6
    c68a:	d201      	bcs.n	c690 <rpl_select_dag+0xec>
    best_dag->min_rank = best_dag->rank;
    c68c:	8220      	strh	r0, [r4, #16]
    c68e:	e01e      	b.n	c6ce <rpl_select_dag+0x12a>
}
/*---------------------------------------------------------------------------*/
static int
acceptable_rank(rpl_dag_t *dag, rpl_rank_t rank)
{
  return rank != INFINITE_RANK &&
    c690:	4a31      	ldr	r2, [pc, #196]	; (c758 <rpl_select_dag+0x1b4>)
    c692:	4290      	cmp	r0, r2
    c694:	d04f      	beq.n	c736 <rpl_select_dag+0x192>
    ((dag->instance->max_rankinc == 0) ||
    c696:	6a23      	ldr	r3, [r4, #32]
    c698:	2298      	movs	r2, #152	; 0x98
    c69a:	5a9a      	ldrh	r2, [r3, r2]
    c69c:	4690      	mov	r8, r2
}
/*---------------------------------------------------------------------------*/
static int
acceptable_rank(rpl_dag_t *dag, rpl_rank_t rank)
{
  return rank != INFINITE_RANK &&
    c69e:	2a00      	cmp	r2, #0
    c6a0:	d015      	beq.n	c6ce <rpl_select_dag+0x12a>
    ((dag->instance->max_rankinc == 0) ||
     DAG_RANK(rank, dag->instance) <= DAG_RANK(dag->min_rank + dag->instance->max_rankinc, dag->instance));
    c6a2:	229a      	movs	r2, #154	; 0x9a
    c6a4:	5a9b      	ldrh	r3, [r3, r2]
    c6a6:	9301      	str	r3, [sp, #4]
    c6a8:	1c19      	adds	r1, r3, #0
    c6aa:	4b2e      	ldr	r3, [pc, #184]	; (c764 <rpl_select_dag+0x1c0>)
    c6ac:	4798      	blx	r3
    c6ae:	b282      	uxth	r2, r0
    c6b0:	4692      	mov	sl, r2
    c6b2:	1c30      	adds	r0, r6, #0
    c6b4:	4440      	add	r0, r8
    c6b6:	9901      	ldr	r1, [sp, #4]
    c6b8:	4b2b      	ldr	r3, [pc, #172]	; (c768 <rpl_select_dag+0x1c4>)
    c6ba:	4798      	blx	r3
/*---------------------------------------------------------------------------*/
static int
acceptable_rank(rpl_dag_t *dag, rpl_rank_t rank)
{
  return rank != INFINITE_RANK &&
    ((dag->instance->max_rankinc == 0) ||
    c6bc:	4582      	cmp	sl, r0
    c6be:	dc3a      	bgt.n	c736 <rpl_select_dag+0x192>
    c6c0:	e005      	b.n	c6ce <rpl_select_dag+0x12a>
  } else if(!acceptable_rank(best_dag, best_dag->rank)) {
    PRINTF("RPL: New rank unacceptable!\n\r");
    rpl_set_preferred_parent(instance->current_dag, NULL);
    if(instance->mop != RPL_MOP_NO_DOWNWARD_ROUTES && last_parent != NULL) {
      /* Send a No-Path DAO to the removed preferred parent. */
      dao_output(last_parent, RPL_ZERO_LIFETIME);
    c6c2:	1c38      	adds	r0, r7, #0
    c6c4:	2100      	movs	r1, #0
    c6c6:	4b29      	ldr	r3, [pc, #164]	; (c76c <rpl_select_dag+0x1c8>)
    c6c8:	4798      	blx	r3
    }
    return NULL;
    c6ca:	2000      	movs	r0, #0
    c6cc:	e03c      	b.n	c748 <rpl_select_dag+0x1a4>
  }

  if(best_dag->preferred_parent != last_parent) {
    c6ce:	69a0      	ldr	r0, [r4, #24]
    c6d0:	42b8      	cmp	r0, r7
    c6d2:	d029      	beq.n	c728 <rpl_select_dag+0x184>
    rpl_set_default_route(instance, rpl_get_parent_ipaddr(best_dag->preferred_parent));
    c6d4:	4b26      	ldr	r3, [pc, #152]	; (c770 <rpl_select_dag+0x1cc>)
    c6d6:	4798      	blx	r3
    c6d8:	1c01      	adds	r1, r0, #0
    c6da:	1c28      	adds	r0, r5, #0
    c6dc:	4b25      	ldr	r3, [pc, #148]	; (c774 <rpl_select_dag+0x1d0>)
    c6de:	4798      	blx	r3
    PRINTF("RPL: Changed preferred parent, rank changed from %u to %u\n\r",
  	(unsigned)old_rank, best_dag->rank);
    RPL_STAT(rpl_stats.parent_switch++);
    if(instance->mop != RPL_MOP_NO_DOWNWARD_ROUTES) {
    c6e0:	238f      	movs	r3, #143	; 0x8f
    c6e2:	5ceb      	ldrb	r3, [r5, r3]
    c6e4:	2b00      	cmp	r3, #0
    c6e6:	d016      	beq.n	c716 <rpl_select_dag+0x172>
      if(last_parent != NULL) {
    c6e8:	2f00      	cmp	r7, #0
    c6ea:	d003      	beq.n	c6f4 <rpl_select_dag+0x150>
        /* Send a No-Path DAO to the removed preferred parent. */
        dao_output(last_parent, RPL_ZERO_LIFETIME);
    c6ec:	1c38      	adds	r0, r7, #0
    c6ee:	2100      	movs	r1, #0
    c6f0:	4b1e      	ldr	r3, [pc, #120]	; (c76c <rpl_select_dag+0x1c8>)
    c6f2:	4798      	blx	r3
      }
      /* The DAO parent set changed - schedule a DAO transmission. */
      RPL_LOLLIPOP_INCREMENT(instance->dtsn_out);
    c6f4:	238e      	movs	r3, #142	; 0x8e
    c6f6:	5ceb      	ldrb	r3, [r5, r3]
    c6f8:	b25a      	sxtb	r2, r3
    c6fa:	2a00      	cmp	r2, #0
    c6fc:	da03      	bge.n	c706 <rpl_select_dag+0x162>
    c6fe:	3301      	adds	r3, #1
    c700:	228e      	movs	r2, #142	; 0x8e
    c702:	54ab      	strb	r3, [r5, r2]
    c704:	e004      	b.n	c710 <rpl_select_dag+0x16c>
    c706:	3301      	adds	r3, #1
    c708:	227f      	movs	r2, #127	; 0x7f
    c70a:	4013      	ands	r3, r2
    c70c:	320f      	adds	r2, #15
    c70e:	54ab      	strb	r3, [r5, r2]
      rpl_schedule_dao(instance);
    c710:	1c28      	adds	r0, r5, #0
    c712:	4b19      	ldr	r3, [pc, #100]	; (c778 <rpl_select_dag+0x1d4>)
    c714:	4798      	blx	r3
    }
    rpl_reset_dio_timer(instance);
    c716:	1c28      	adds	r0, r5, #0
    c718:	4b18      	ldr	r3, [pc, #96]	; (c77c <rpl_select_dag+0x1d8>)
    c71a:	4798      	blx	r3
    c71c:	1c20      	adds	r0, r4, #0
    c71e:	e013      	b.n	c748 <rpl_select_dag+0x1a4>
    }
  }

  if(best_dag == NULL) {
    /* No parent found: the calling function handle this problem. */
    return NULL;
    c720:	2000      	movs	r0, #0
    c722:	e011      	b.n	c748 <rpl_select_dag+0x1a4>
    c724:	2000      	movs	r0, #0
    c726:	e00f      	b.n	c748 <rpl_select_dag+0x1a4>
    c728:	1c20      	adds	r0, r4, #0
    c72a:	e00d      	b.n	c748 <rpl_select_dag+0x1a4>
    c72c:	2000      	movs	r0, #0
    c72e:	e00b      	b.n	c748 <rpl_select_dag+0x1a4>
        }
      }
    }
  }

  if(best_dag == NULL) {
    c730:	2c00      	cmp	r4, #0
    c732:	d19c      	bne.n	c66e <rpl_select_dag+0xca>
    c734:	e7fa      	b.n	c72c <rpl_select_dag+0x188>
  best_dag->rank = instance->of->calculate_rank(best_dag->preferred_parent, 0);
  if(last_parent == NULL || best_dag->rank < best_dag->min_rank) {
    best_dag->min_rank = best_dag->rank;
  } else if(!acceptable_rank(best_dag, best_dag->rank)) {
    PRINTF("RPL: New rank unacceptable!\n\r");
    rpl_set_preferred_parent(instance->current_dag, NULL);
    c736:	68e8      	ldr	r0, [r5, #12]
    c738:	2100      	movs	r1, #0
    c73a:	4b11      	ldr	r3, [pc, #68]	; (c780 <rpl_select_dag+0x1dc>)
    c73c:	4798      	blx	r3
    if(instance->mop != RPL_MOP_NO_DOWNWARD_ROUTES && last_parent != NULL) {
    c73e:	238f      	movs	r3, #143	; 0x8f
    c740:	5ceb      	ldrb	r3, [r5, r3]
    c742:	2b00      	cmp	r3, #0
    c744:	d1bd      	bne.n	c6c2 <rpl_select_dag+0x11e>
      /* Send a No-Path DAO to the removed preferred parent. */
      dao_output(last_parent, RPL_ZERO_LIFETIME);
    }
    return NULL;
    c746:	2000      	movs	r0, #0
  } else if(best_dag->rank != old_rank) {
    PRINTF("RPL: Preferred parent update, rank changed from %u to %u\n\r",
  	(unsigned)old_rank, best_dag->rank);
  }
  return best_dag;
}
    c748:	b002      	add	sp, #8
    c74a:	bc1c      	pop	{r2, r3, r4}
    c74c:	4690      	mov	r8, r2
    c74e:	4699      	mov	r9, r3
    c750:	46a2      	mov	sl, r4
    c752:	bdf0      	pop	{r4, r5, r6, r7, pc}
    c754:	0000c539 	.word	0x0000c539
    c758:	0000ffff 	.word	0x0000ffff
    c75c:	0000e34d 	.word	0x0000e34d
    c760:	0000c2b1 	.word	0x0000c2b1
    c764:	0001076d 	.word	0x0001076d
    c768:	0001088d 	.word	0x0001088d
    c76c:	0000db1d 	.word	0x0000db1d
    c770:	0000c37d 	.word	0x0000c37d
    c774:	0000c429 	.word	0x0000c429
    c778:	0000e2a5 	.word	0x0000e2a5
    c77c:	0000e281 	.word	0x0000e281
    c780:	0000c245 	.word	0x0000c245

0000c784 <rpl_nullify_parent>:
  nbr_table_remove(rpl_parents, parent);
}
/*---------------------------------------------------------------------------*/
void
rpl_nullify_parent(rpl_parent_t *parent)
{
    c784:	b538      	push	{r3, r4, r5, lr}
  rpl_dag_t *dag = parent->dag;
    c786:	6845      	ldr	r5, [r0, #4]
  /* This function can be called when the preferred parent is NULL, so we
     need to handle this condition in order to trigger uip_ds6_defrt_rm. */
  if(parent == dag->preferred_parent || dag->preferred_parent == NULL) {
    c788:	69ab      	ldr	r3, [r5, #24]
    c78a:	4283      	cmp	r3, r0
    c78c:	d001      	beq.n	c792 <rpl_nullify_parent+0xe>
    c78e:	2b00      	cmp	r3, #0
    c790:	d119      	bne.n	c7c6 <rpl_nullify_parent+0x42>
    c792:	1c04      	adds	r4, r0, #0
    rpl_set_preferred_parent(dag, NULL);
    c794:	1c28      	adds	r0, r5, #0
    c796:	2100      	movs	r1, #0
    c798:	4b0b      	ldr	r3, [pc, #44]	; (c7c8 <rpl_nullify_parent+0x44>)
    c79a:	4798      	blx	r3
    dag->rank = INFINITE_RANK;
    c79c:	2301      	movs	r3, #1
    c79e:	425b      	negs	r3, r3
    c7a0:	83ab      	strh	r3, [r5, #28]
    if(dag->joined) {
    c7a2:	7dab      	ldrb	r3, [r5, #22]
    c7a4:	2b00      	cmp	r3, #0
    c7a6:	d00e      	beq.n	c7c6 <rpl_nullify_parent+0x42>
      if(dag->instance->def_route != NULL) {
    c7a8:	2388      	movs	r3, #136	; 0x88
    c7aa:	6a2a      	ldr	r2, [r5, #32]
    c7ac:	58d0      	ldr	r0, [r2, r3]
    c7ae:	2800      	cmp	r0, #0
    c7b0:	d005      	beq.n	c7be <rpl_nullify_parent+0x3a>
        PRINTF("RPL: Removing default route ");
        PRINT6ADDR(rpl_get_parent_ipaddr(parent));
        PRINTF("\n\r");
        uip_ds6_defrt_rm(dag->instance->def_route);
    c7b2:	4b06      	ldr	r3, [pc, #24]	; (c7cc <rpl_nullify_parent+0x48>)
    c7b4:	4798      	blx	r3
        dag->instance->def_route = NULL;
    c7b6:	6a2a      	ldr	r2, [r5, #32]
    c7b8:	2100      	movs	r1, #0
    c7ba:	2388      	movs	r3, #136	; 0x88
    c7bc:	50d1      	str	r1, [r2, r3]
      }
      dao_output(parent, RPL_ZERO_LIFETIME);
    c7be:	1c20      	adds	r0, r4, #0
    c7c0:	2100      	movs	r1, #0
    c7c2:	4b03      	ldr	r3, [pc, #12]	; (c7d0 <rpl_nullify_parent+0x4c>)
    c7c4:	4798      	blx	r3
  }

  PRINTF("RPL: Nullifying parent ");
  PRINT6ADDR(rpl_get_parent_ipaddr(parent));
  PRINTF("\n\r");
}
    c7c6:	bd38      	pop	{r3, r4, r5, pc}
    c7c8:	0000c245 	.word	0x0000c245
    c7cc:	0000712d 	.word	0x0000712d
    c7d0:	0000db1d 	.word	0x0000db1d

0000c7d4 <rpl_remove_parent>:
  return best;
}
/*---------------------------------------------------------------------------*/
void
rpl_remove_parent(rpl_parent_t *parent)
{
    c7d4:	b510      	push	{r4, lr}
    c7d6:	1c04      	adds	r4, r0, #0
  PRINTF("RPL: Removing parent ");
  PRINT6ADDR(rpl_get_parent_ipaddr(parent));
  PRINTF("\n\r");

  rpl_nullify_parent(parent);
    c7d8:	4b03      	ldr	r3, [pc, #12]	; (c7e8 <rpl_remove_parent+0x14>)
    c7da:	4798      	blx	r3

  nbr_table_remove(rpl_parents, parent);
    c7dc:	4803      	ldr	r0, [pc, #12]	; (c7ec <rpl_remove_parent+0x18>)
    c7de:	1c21      	adds	r1, r4, #0
    c7e0:	4b03      	ldr	r3, [pc, #12]	; (c7f0 <rpl_remove_parent+0x1c>)
    c7e2:	4798      	blx	r3
}
    c7e4:	bd10      	pop	{r4, pc}
    c7e6:	46c0      	nop			; (mov r8, r8)
    c7e8:	0000c785 	.word	0x0000c785
    c7ec:	20000124 	.word	0x20000124
    c7f0:	0000bd55 	.word	0x0000bd55

0000c7f4 <nbr_callback>:
rpl_instance_t instance_table[RPL_MAX_INSTANCES];
rpl_instance_t *default_instance;
/*---------------------------------------------------------------------------*/
static void
nbr_callback(void *ptr)
{
    c7f4:	b508      	push	{r3, lr}
  rpl_remove_parent(ptr);
    c7f6:	4b01      	ldr	r3, [pc, #4]	; (c7fc <nbr_callback+0x8>)
    c7f8:	4798      	blx	r3
}
    c7fa:	bd08      	pop	{r3, pc}
    c7fc:	0000c7d5 	.word	0x0000c7d5

0000c800 <remove_parents>:
}
/*---------------------------------------------------------------------------*/
/* Remove DAG parents with a rank that is at least the same as minimum_rank. */
static void
remove_parents(rpl_dag_t *dag, rpl_rank_t minimum_rank)
{
    c800:	b5f0      	push	{r4, r5, r6, r7, lr}
    c802:	4647      	mov	r7, r8
    c804:	b480      	push	{r7}
    c806:	1c05      	adds	r5, r0, #0
    c808:	4688      	mov	r8, r1
  rpl_parent_t *p;

  PRINTF("RPL: Removing parents (minimum rank %u)\n\r",
	minimum_rank);

  p = nbr_table_head(rpl_parents);
    c80a:	480c      	ldr	r0, [pc, #48]	; (c83c <remove_parents+0x3c>)
    c80c:	4b0c      	ldr	r3, [pc, #48]	; (c840 <remove_parents+0x40>)
    c80e:	4798      	blx	r3
    c810:	1e04      	subs	r4, r0, #0
  while(p != NULL) {
    c812:	d00f      	beq.n	c834 <remove_parents+0x34>
    if(dag == p->dag && p->rank >= minimum_rank) {
      rpl_remove_parent(p);
    }
    p = nbr_table_next(rpl_parents, p);
    c814:	4f09      	ldr	r7, [pc, #36]	; (c83c <remove_parents+0x3c>)
    c816:	4e0b      	ldr	r6, [pc, #44]	; (c844 <remove_parents+0x44>)
  PRINTF("RPL: Removing parents (minimum rank %u)\n\r",
	minimum_rank);

  p = nbr_table_head(rpl_parents);
  while(p != NULL) {
    if(dag == p->dag && p->rank >= minimum_rank) {
    c818:	6863      	ldr	r3, [r4, #4]
    c81a:	42ab      	cmp	r3, r5
    c81c:	d105      	bne.n	c82a <remove_parents+0x2a>
    c81e:	8923      	ldrh	r3, [r4, #8]
    c820:	4543      	cmp	r3, r8
    c822:	d302      	bcc.n	c82a <remove_parents+0x2a>
      rpl_remove_parent(p);
    c824:	1c20      	adds	r0, r4, #0
    c826:	4b08      	ldr	r3, [pc, #32]	; (c848 <remove_parents+0x48>)
    c828:	4798      	blx	r3
    }
    p = nbr_table_next(rpl_parents, p);
    c82a:	1c38      	adds	r0, r7, #0
    c82c:	1c21      	adds	r1, r4, #0
    c82e:	47b0      	blx	r6
    c830:	1e04      	subs	r4, r0, #0

  PRINTF("RPL: Removing parents (minimum rank %u)\n\r",
	minimum_rank);

  p = nbr_table_head(rpl_parents);
  while(p != NULL) {
    c832:	d1f1      	bne.n	c818 <remove_parents+0x18>
    if(dag == p->dag && p->rank >= minimum_rank) {
      rpl_remove_parent(p);
    }
    p = nbr_table_next(rpl_parents, p);
  }
}
    c834:	bc04      	pop	{r2}
    c836:	4690      	mov	r8, r2
    c838:	bdf0      	pop	{r4, r5, r6, r7, pc}
    c83a:	46c0      	nop			; (mov r8, r8)
    c83c:	20000124 	.word	0x20000124
    c840:	0000bb41 	.word	0x0000bb41
    c844:	0000bad5 	.word	0x0000bad5
    c848:	0000c7d5 	.word	0x0000c7d5

0000c84c <rpl_free_dag>:
  instance->used = 0;
}
/*---------------------------------------------------------------------------*/
void
rpl_free_dag(rpl_dag_t *dag)
{
    c84c:	b510      	push	{r4, lr}
    c84e:	1c04      	adds	r4, r0, #0
  if(dag->joined) {
    c850:	7d83      	ldrb	r3, [r0, #22]
    c852:	2b00      	cmp	r3, #0
    c854:	d010      	beq.n	c878 <rpl_free_dag+0x2c>
    PRINTF("RPL: Leaving the DAG ");
    PRINT6ADDR(&dag->dag_id);
    PRINTF("\n\r");
    dag->joined = 0;
    c856:	2300      	movs	r3, #0
    c858:	7583      	strb	r3, [r0, #22]

    /* Remove routes installed by DAOs. */
    rpl_remove_routes(dag);
    c85a:	4b09      	ldr	r3, [pc, #36]	; (c880 <rpl_free_dag+0x34>)
    c85c:	4798      	blx	r3

   /* Remove autoconfigured address */
    if((dag->prefix_info.flags & UIP_ND6_RA_FLAG_AUTONOMOUS)) {
    c85e:	2339      	movs	r3, #57	; 0x39
    c860:	5ce3      	ldrb	r3, [r4, r3]
    c862:	065b      	lsls	r3, r3, #25
    c864:	d504      	bpl.n	c870 <rpl_free_dag+0x24>
      check_prefix(&dag->prefix_info, NULL);
    c866:	1c20      	adds	r0, r4, #0
    c868:	3024      	adds	r0, #36	; 0x24
    c86a:	2100      	movs	r1, #0
    c86c:	4b05      	ldr	r3, [pc, #20]	; (c884 <rpl_free_dag+0x38>)
    c86e:	4798      	blx	r3
    }

    remove_parents(dag, 0);
    c870:	1c20      	adds	r0, r4, #0
    c872:	2100      	movs	r1, #0
    c874:	4b04      	ldr	r3, [pc, #16]	; (c888 <rpl_free_dag+0x3c>)
    c876:	4798      	blx	r3
  }
  dag->used = 0;
    c878:	2300      	movs	r3, #0
    c87a:	7563      	strb	r3, [r4, #21]
}
    c87c:	bd10      	pop	{r4, pc}
    c87e:	46c0      	nop			; (mov r8, r8)
    c880:	0000e34d 	.word	0x0000e34d
    c884:	0000c2b1 	.word	0x0000c2b1
    c888:	0000c801 	.word	0x0000c801

0000c88c <rpl_free_instance>:
  default_instance = instance;
}
/*---------------------------------------------------------------------------*/
void
rpl_free_instance(rpl_instance_t *instance)
{
    c88c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    c88e:	1c07      	adds	r7, r0, #0
  rpl_dag_t *end;

  PRINTF("RPL: Leaving the instance %u\n\r", instance->instance_id);

  /* Remove any DAG inside this instance */
  for(dag = &instance->dag_table[0], end = dag + RPL_MAX_DAG_PER_INSTANCE; dag < end; ++dag) {
    c890:	1c04      	adds	r4, r0, #0
    c892:	3410      	adds	r4, #16
    c894:	1c05      	adds	r5, r0, #0
    c896:	3588      	adds	r5, #136	; 0x88
    c898:	42ac      	cmp	r4, r5
    c89a:	d208      	bcs.n	c8ae <rpl_free_instance+0x22>
    if(dag->used) {
      rpl_free_dag(dag);
    c89c:	4e0f      	ldr	r6, [pc, #60]	; (c8dc <rpl_free_instance+0x50>)

  PRINTF("RPL: Leaving the instance %u\n\r", instance->instance_id);

  /* Remove any DAG inside this instance */
  for(dag = &instance->dag_table[0], end = dag + RPL_MAX_DAG_PER_INSTANCE; dag < end; ++dag) {
    if(dag->used) {
    c89e:	7d63      	ldrb	r3, [r4, #21]
    c8a0:	2b00      	cmp	r3, #0
    c8a2:	d001      	beq.n	c8a8 <rpl_free_instance+0x1c>
      rpl_free_dag(dag);
    c8a4:	1c20      	adds	r0, r4, #0
    c8a6:	47b0      	blx	r6
  rpl_dag_t *end;

  PRINTF("RPL: Leaving the instance %u\n\r", instance->instance_id);

  /* Remove any DAG inside this instance */
  for(dag = &instance->dag_table[0], end = dag + RPL_MAX_DAG_PER_INSTANCE; dag < end; ++dag) {
    c8a8:	343c      	adds	r4, #60	; 0x3c
    c8aa:	42a5      	cmp	r5, r4
    c8ac:	d8f7      	bhi.n	c89e <rpl_free_instance+0x12>
    if(dag->used) {
      rpl_free_dag(dag);
    }
  }

  rpl_set_default_route(instance, NULL);
    c8ae:	1c38      	adds	r0, r7, #0
    c8b0:	2100      	movs	r1, #0
    c8b2:	4b0b      	ldr	r3, [pc, #44]	; (c8e0 <rpl_free_instance+0x54>)
    c8b4:	4798      	blx	r3

  ctimer_stop(&instance->dio_timer);
    c8b6:	1c38      	adds	r0, r7, #0
    c8b8:	30a4      	adds	r0, #164	; 0xa4
    c8ba:	4c0a      	ldr	r4, [pc, #40]	; (c8e4 <rpl_free_instance+0x58>)
    c8bc:	47a0      	blx	r4
  ctimer_stop(&instance->dao_timer);
    c8be:	1c38      	adds	r0, r7, #0
    c8c0:	30c4      	adds	r0, #196	; 0xc4
    c8c2:	47a0      	blx	r4

  if(default_instance == instance) {
    c8c4:	4b08      	ldr	r3, [pc, #32]	; (c8e8 <rpl_free_instance+0x5c>)
    c8c6:	681b      	ldr	r3, [r3, #0]
    c8c8:	42bb      	cmp	r3, r7
    c8ca:	d102      	bne.n	c8d2 <rpl_free_instance+0x46>
    default_instance = NULL;
    c8cc:	2200      	movs	r2, #0
    c8ce:	4b06      	ldr	r3, [pc, #24]	; (c8e8 <rpl_free_instance+0x5c>)
    c8d0:	601a      	str	r2, [r3, #0]
  }

  instance->used = 0;
    c8d2:	2200      	movs	r2, #0
    c8d4:	238d      	movs	r3, #141	; 0x8d
    c8d6:	54fa      	strb	r2, [r7, r3]
}
    c8d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    c8da:	46c0      	nop			; (mov r8, r8)
    c8dc:	0000c84d 	.word	0x0000c84d
    c8e0:	0000c429 	.word	0x0000c429
    c8e4:	0000e715 	.word	0x0000e715
    c8e8:	20003284 	.word	0x20003284

0000c8ec <rpl_move_parent>:
  PRINTF("\n\r");
}
/*---------------------------------------------------------------------------*/
void
rpl_move_parent(rpl_dag_t *dag_src, rpl_dag_t *dag_dst, rpl_parent_t *parent)
{
    c8ec:	b570      	push	{r4, r5, r6, lr}
    c8ee:	1c04      	adds	r4, r0, #0
    c8f0:	1c0e      	adds	r6, r1, #0
    c8f2:	1c15      	adds	r5, r2, #0
  if(parent == dag_src->preferred_parent) {
    c8f4:	6983      	ldr	r3, [r0, #24]
    c8f6:	4293      	cmp	r3, r2
    c8f8:	d114      	bne.n	c924 <rpl_move_parent+0x38>
      rpl_set_preferred_parent(dag_src, NULL);
    c8fa:	2100      	movs	r1, #0
    c8fc:	4b0f      	ldr	r3, [pc, #60]	; (c93c <rpl_move_parent+0x50>)
    c8fe:	4798      	blx	r3
      dag_src->rank = INFINITE_RANK;
    c900:	2301      	movs	r3, #1
    c902:	425b      	negs	r3, r3
    c904:	83a3      	strh	r3, [r4, #28]
    if(dag_src->joined && dag_src->instance->def_route != NULL) {
    c906:	7da3      	ldrb	r3, [r4, #22]
    c908:	2b00      	cmp	r3, #0
    c90a:	d014      	beq.n	c936 <rpl_move_parent+0x4a>
    c90c:	2388      	movs	r3, #136	; 0x88
    c90e:	6a22      	ldr	r2, [r4, #32]
    c910:	58d0      	ldr	r0, [r2, r3]
    c912:	2800      	cmp	r0, #0
    c914:	d00f      	beq.n	c936 <rpl_move_parent+0x4a>
      PRINTF("RPL: Removing default route ");
      PRINT6ADDR(rpl_get_parent_ipaddr(parent));
      PRINTF("\n\r");
      PRINTF("rpl_move_parent\n\r");
      uip_ds6_defrt_rm(dag_src->instance->def_route);
    c916:	4b0a      	ldr	r3, [pc, #40]	; (c940 <rpl_move_parent+0x54>)
    c918:	4798      	blx	r3
      dag_src->instance->def_route = NULL;
    c91a:	6a22      	ldr	r2, [r4, #32]
    c91c:	2100      	movs	r1, #0
    c91e:	2388      	movs	r3, #136	; 0x88
    c920:	50d1      	str	r1, [r2, r3]
    c922:	e008      	b.n	c936 <rpl_move_parent+0x4a>
    }
  } else if(dag_src->joined) {
    c924:	7d83      	ldrb	r3, [r0, #22]
    c926:	2b00      	cmp	r3, #0
    c928:	d005      	beq.n	c936 <rpl_move_parent+0x4a>
    /* Remove uIPv6 routes that have this parent as the next hop. */
    rpl_remove_routes_by_nexthop(rpl_get_parent_ipaddr(parent), dag_src);
    c92a:	1c10      	adds	r0, r2, #0
    c92c:	4b05      	ldr	r3, [pc, #20]	; (c944 <rpl_move_parent+0x58>)
    c92e:	4798      	blx	r3
    c930:	1c21      	adds	r1, r4, #0
    c932:	4b05      	ldr	r3, [pc, #20]	; (c948 <rpl_move_parent+0x5c>)
    c934:	4798      	blx	r3

  PRINTF("RPL: Moving parent ");
  PRINT6ADDR(rpl_get_parent_ipaddr(parent));
  PRINTF("\n\r");

  parent->dag = dag_dst;
    c936:	606e      	str	r6, [r5, #4]
}
    c938:	bd70      	pop	{r4, r5, r6, pc}
    c93a:	46c0      	nop			; (mov r8, r8)
    c93c:	0000c245 	.word	0x0000c245
    c940:	0000712d 	.word	0x0000712d
    c944:	0000c37d 	.word	0x0000c37d
    c948:	0000e381 	.word	0x0000e381

0000c94c <rpl_get_any_dag>:
rpl_get_any_dag(void)
{
  int i;

  for(i = 0; i < RPL_MAX_INSTANCES; ++i) {
    if(instance_table[i].used && instance_table[i].current_dag->joined) {
    c94c:	238d      	movs	r3, #141	; 0x8d
    c94e:	4a06      	ldr	r2, [pc, #24]	; (c968 <rpl_get_any_dag+0x1c>)
    c950:	5cd3      	ldrb	r3, [r2, r3]
      return instance_table[i].current_dag;
    }
  }
  return NULL;
    c952:	2000      	movs	r0, #0
rpl_get_any_dag(void)
{
  int i;

  for(i = 0; i < RPL_MAX_INSTANCES; ++i) {
    if(instance_table[i].used && instance_table[i].current_dag->joined) {
    c954:	2b00      	cmp	r3, #0
    c956:	d005      	beq.n	c964 <rpl_get_any_dag+0x18>
    c958:	68d0      	ldr	r0, [r2, #12]
    c95a:	7d83      	ldrb	r3, [r0, #22]
      return instance_table[i].current_dag;
    }
  }
  return NULL;
    c95c:	1e5a      	subs	r2, r3, #1
    c95e:	4193      	sbcs	r3, r2
    c960:	425b      	negs	r3, r3
    c962:	4018      	ands	r0, r3
}
    c964:	4770      	bx	lr
    c966:	46c0      	nop			; (mov r8, r8)
    c968:	20003288 	.word	0x20003288

0000c96c <rpl_get_instance>:
rpl_get_instance(uint8_t instance_id)
{
  int i;

  for(i = 0; i < RPL_MAX_INSTANCES; ++i) {
    if(instance_table[i].used && instance_table[i].instance_id == instance_id) {
    c96c:	238d      	movs	r3, #141	; 0x8d
    c96e:	4a07      	ldr	r2, [pc, #28]	; (c98c <rpl_get_instance+0x20>)
    c970:	5cd2      	ldrb	r2, [r2, r3]
      return &instance_table[i];
    }
  }
  return NULL;
    c972:	2300      	movs	r3, #0
rpl_get_instance(uint8_t instance_id)
{
  int i;

  for(i = 0; i < RPL_MAX_INSTANCES; ++i) {
    if(instance_table[i].used && instance_table[i].instance_id == instance_id) {
    c974:	2a00      	cmp	r2, #0
    c976:	d006      	beq.n	c986 <rpl_get_instance+0x1a>
    c978:	338c      	adds	r3, #140	; 0x8c
    c97a:	4a04      	ldr	r2, [pc, #16]	; (c98c <rpl_get_instance+0x20>)
    c97c:	5cd2      	ldrb	r2, [r2, r3]
      return &instance_table[i];
    }
  }
  return NULL;
    c97e:	2300      	movs	r3, #0
rpl_get_instance(uint8_t instance_id)
{
  int i;

  for(i = 0; i < RPL_MAX_INSTANCES; ++i) {
    if(instance_table[i].used && instance_table[i].instance_id == instance_id) {
    c980:	4282      	cmp	r2, r0
    c982:	d100      	bne.n	c986 <rpl_get_instance+0x1a>
      return &instance_table[i];
    c984:	4b01      	ldr	r3, [pc, #4]	; (c98c <rpl_get_instance+0x20>)
    }
  }
  return NULL;
}
    c986:	1c18      	adds	r0, r3, #0
    c988:	4770      	bx	lr
    c98a:	46c0      	nop			; (mov r8, r8)
    c98c:	20003288 	.word	0x20003288

0000c990 <get_dag>:
     DAG_RANK(rank, dag->instance) <= DAG_RANK(dag->min_rank + dag->instance->max_rankinc, dag->instance));
}
/*---------------------------------------------------------------------------*/
static rpl_dag_t *
get_dag(uint8_t instance_id, uip_ipaddr_t *dag_id)
{
    c990:	b570      	push	{r4, r5, r6, lr}
    c992:	1c0d      	adds	r5, r1, #0
  rpl_instance_t *instance;
  rpl_dag_t *dag;
  int i;

  instance = rpl_get_instance(instance_id);
    c994:	4b12      	ldr	r3, [pc, #72]	; (c9e0 <get_dag+0x50>)
    c996:	4798      	blx	r3
    c998:	1e04      	subs	r4, r0, #0
  if(instance == NULL) {
    c99a:	d01e      	beq.n	c9da <get_dag+0x4a>
    return NULL;
  }

  for(i = 0; i < RPL_MAX_DAG_PER_INSTANCE; ++i) {
    dag = &instance->dag_table[i];
    if(dag->used && uip_ipaddr_cmp(&dag->dag_id, dag_id)) {
    c99c:	2325      	movs	r3, #37	; 0x25
    c99e:	5cc3      	ldrb	r3, [r0, r3]
    c9a0:	2b00      	cmp	r3, #0
    c9a2:	d008      	beq.n	c9b6 <get_dag+0x26>
  if(instance == NULL) {
    return NULL;
  }

  for(i = 0; i < RPL_MAX_DAG_PER_INSTANCE; ++i) {
    dag = &instance->dag_table[i];
    c9a4:	1c06      	adds	r6, r0, #0
    c9a6:	3610      	adds	r6, #16
    if(dag->used && uip_ipaddr_cmp(&dag->dag_id, dag_id)) {
    c9a8:	1c30      	adds	r0, r6, #0
    c9aa:	1c29      	adds	r1, r5, #0
    c9ac:	2210      	movs	r2, #16
    c9ae:	4b0d      	ldr	r3, [pc, #52]	; (c9e4 <get_dag+0x54>)
    c9b0:	4798      	blx	r3
    c9b2:	2800      	cmp	r0, #0
    c9b4:	d00f      	beq.n	c9d6 <get_dag+0x46>
    c9b6:	2361      	movs	r3, #97	; 0x61
    c9b8:	5ce3      	ldrb	r3, [r4, r3]
      return dag;
    }
  }

  return NULL;
    c9ba:	2000      	movs	r0, #0
    return NULL;
  }

  for(i = 0; i < RPL_MAX_DAG_PER_INSTANCE; ++i) {
    dag = &instance->dag_table[i];
    if(dag->used && uip_ipaddr_cmp(&dag->dag_id, dag_id)) {
    c9bc:	2b00      	cmp	r3, #0
    c9be:	d00d      	beq.n	c9dc <get_dag+0x4c>
  if(instance == NULL) {
    return NULL;
  }

  for(i = 0; i < RPL_MAX_DAG_PER_INSTANCE; ++i) {
    dag = &instance->dag_table[i];
    c9c0:	344c      	adds	r4, #76	; 0x4c
    c9c2:	1c26      	adds	r6, r4, #0
    if(dag->used && uip_ipaddr_cmp(&dag->dag_id, dag_id)) {
    c9c4:	1c20      	adds	r0, r4, #0
    c9c6:	1c29      	adds	r1, r5, #0
    c9c8:	2210      	movs	r2, #16
    c9ca:	4b06      	ldr	r3, [pc, #24]	; (c9e4 <get_dag+0x54>)
    c9cc:	4798      	blx	r3
    c9ce:	1c03      	adds	r3, r0, #0
      return dag;
    }
  }

  return NULL;
    c9d0:	2000      	movs	r0, #0
    return NULL;
  }

  for(i = 0; i < RPL_MAX_DAG_PER_INSTANCE; ++i) {
    dag = &instance->dag_table[i];
    if(dag->used && uip_ipaddr_cmp(&dag->dag_id, dag_id)) {
    c9d2:	2b00      	cmp	r3, #0
    c9d4:	d102      	bne.n	c9dc <get_dag+0x4c>
  if(instance == NULL) {
    return NULL;
  }

  for(i = 0; i < RPL_MAX_DAG_PER_INSTANCE; ++i) {
    dag = &instance->dag_table[i];
    c9d6:	1c30      	adds	r0, r6, #0
    c9d8:	e000      	b.n	c9dc <get_dag+0x4c>
  rpl_dag_t *dag;
  int i;

  instance = rpl_get_instance(instance_id);
  if(instance == NULL) {
    return NULL;
    c9da:	2000      	movs	r0, #0
      return dag;
    }
  }

  return NULL;
}
    c9dc:	bd70      	pop	{r4, r5, r6, pc}
    c9de:	46c0      	nop			; (mov r8, r8)
    c9e0:	0000c96d 	.word	0x0000c96d
    c9e4:	00010b11 	.word	0x00010b11

0000c9e8 <rpl_repair_root>:
  return dag;
}
/*---------------------------------------------------------------------------*/
int
rpl_repair_root(uint8_t instance_id)
{
    c9e8:	b510      	push	{r4, lr}
  rpl_instance_t *instance;

  instance = rpl_get_instance(instance_id);
    c9ea:	4b15      	ldr	r3, [pc, #84]	; (ca40 <rpl_repair_root+0x58>)
    c9ec:	4798      	blx	r3
  if(instance == NULL ||
    c9ee:	2800      	cmp	r0, #0
    c9f0:	d023      	beq.n	ca3a <rpl_repair_root+0x52>
     instance->current_dag->rank != ROOT_RANK(instance)) {
    c9f2:	68c3      	ldr	r3, [r0, #12]
rpl_repair_root(uint8_t instance_id)
{
  rpl_instance_t *instance;

  instance = rpl_get_instance(instance_id);
  if(instance == NULL ||
    c9f4:	8b9c      	ldrh	r4, [r3, #28]
    c9f6:	229a      	movs	r2, #154	; 0x9a
    c9f8:	5a81      	ldrh	r1, [r0, r2]
     instance->current_dag->rank != ROOT_RANK(instance)) {
    PRINTF("RPL: rpl_repair_root triggered but not root\n\r");
    return 0;
    c9fa:	2200      	movs	r2, #0
rpl_repair_root(uint8_t instance_id)
{
  rpl_instance_t *instance;

  instance = rpl_get_instance(instance_id);
  if(instance == NULL ||
    c9fc:	428c      	cmp	r4, r1
    c9fe:	d11d      	bne.n	ca3c <rpl_repair_root+0x54>
     instance->current_dag->rank != ROOT_RANK(instance)) {
    PRINTF("RPL: rpl_repair_root triggered but not root\n\r");
    return 0;
  }

  RPL_LOLLIPOP_INCREMENT(instance->current_dag->version);
    ca00:	7c9a      	ldrb	r2, [r3, #18]
    ca02:	b251      	sxtb	r1, r2
    ca04:	2900      	cmp	r1, #0
    ca06:	da02      	bge.n	ca0e <rpl_repair_root+0x26>
    ca08:	3201      	adds	r2, #1
    ca0a:	749a      	strb	r2, [r3, #18]
    ca0c:	e003      	b.n	ca16 <rpl_repair_root+0x2e>
    ca0e:	3201      	adds	r2, #1
    ca10:	217f      	movs	r1, #127	; 0x7f
    ca12:	400a      	ands	r2, r1
    ca14:	749a      	strb	r2, [r3, #18]
  RPL_LOLLIPOP_INCREMENT(instance->dtsn_out);
    ca16:	238e      	movs	r3, #142	; 0x8e
    ca18:	5cc3      	ldrb	r3, [r0, r3]
    ca1a:	b25a      	sxtb	r2, r3
    ca1c:	2a00      	cmp	r2, #0
    ca1e:	da03      	bge.n	ca28 <rpl_repair_root+0x40>
    ca20:	3301      	adds	r3, #1
    ca22:	228e      	movs	r2, #142	; 0x8e
    ca24:	5483      	strb	r3, [r0, r2]
    ca26:	e004      	b.n	ca32 <rpl_repair_root+0x4a>
    ca28:	3301      	adds	r3, #1
    ca2a:	227f      	movs	r2, #127	; 0x7f
    ca2c:	4013      	ands	r3, r2
    ca2e:	320f      	adds	r2, #15
    ca30:	5483      	strb	r3, [r0, r2]
  PRINTF("RPL: rpl_repair_root initiating global repair with version %d\n\r", instance->current_dag->version);
  rpl_reset_dio_timer(instance);
    ca32:	4b04      	ldr	r3, [pc, #16]	; (ca44 <rpl_repair_root+0x5c>)
    ca34:	4798      	blx	r3
  return 1;
    ca36:	2201      	movs	r2, #1
    ca38:	e000      	b.n	ca3c <rpl_repair_root+0x54>

  instance = rpl_get_instance(instance_id);
  if(instance == NULL ||
     instance->current_dag->rank != ROOT_RANK(instance)) {
    PRINTF("RPL: rpl_repair_root triggered but not root\n\r");
    return 0;
    ca3a:	2200      	movs	r2, #0
  RPL_LOLLIPOP_INCREMENT(instance->current_dag->version);
  RPL_LOLLIPOP_INCREMENT(instance->dtsn_out);
  PRINTF("RPL: rpl_repair_root initiating global repair with version %d\n\r", instance->current_dag->version);
  rpl_reset_dio_timer(instance);
  return 1;
}
    ca3c:	1c10      	adds	r0, r2, #0
    ca3e:	bd10      	pop	{r4, pc}
    ca40:	0000c96d 	.word	0x0000c96d
    ca44:	0000e281 	.word	0x0000e281

0000ca48 <rpl_alloc_dag>:
  return NULL;
}
/*---------------------------------------------------------------------------*/
rpl_dag_t *
rpl_alloc_dag(uint8_t instance_id, uip_ipaddr_t *dag_id)
{
    ca48:	b538      	push	{r3, r4, r5, lr}
    ca4a:	1c04      	adds	r4, r0, #0
  rpl_dag_t *dag, *end;
  rpl_instance_t *instance;

  instance = rpl_get_instance(instance_id);
    ca4c:	4b16      	ldr	r3, [pc, #88]	; (caa8 <rpl_alloc_dag+0x60>)
    ca4e:	4798      	blx	r3
    ca50:	1e05      	subs	r5, r0, #0
  if(instance == NULL) {
    ca52:	d104      	bne.n	ca5e <rpl_alloc_dag+0x16>
    instance = rpl_alloc_instance(instance_id);
    ca54:	1c20      	adds	r0, r4, #0
    ca56:	4b15      	ldr	r3, [pc, #84]	; (caac <rpl_alloc_dag+0x64>)
    ca58:	4798      	blx	r3
    ca5a:	1e05      	subs	r5, r0, #0
    if(instance == NULL) {
    ca5c:	d022      	beq.n	caa4 <rpl_alloc_dag+0x5c>
      RPL_STAT(rpl_stats.mem_overflows++);
      return NULL;
    }
  }

  for(dag = &instance->dag_table[0], end = dag + RPL_MAX_DAG_PER_INSTANCE; dag < end; ++dag) {
    ca5e:	1c2c      	adds	r4, r5, #0
    ca60:	3410      	adds	r4, #16
    ca62:	1c2a      	adds	r2, r5, #0
    ca64:	3288      	adds	r2, #136	; 0x88
    ca66:	4294      	cmp	r4, r2
    ca68:	d217      	bcs.n	ca9a <rpl_alloc_dag+0x52>
    if(!dag->used) {
    ca6a:	2325      	movs	r3, #37	; 0x25
    ca6c:	5ceb      	ldrb	r3, [r5, r3]
    ca6e:	2b00      	cmp	r3, #0
    ca70:	d110      	bne.n	ca94 <rpl_alloc_dag+0x4c>
    ca72:	e002      	b.n	ca7a <rpl_alloc_dag+0x32>
    ca74:	7d63      	ldrb	r3, [r4, #21]
    ca76:	2b00      	cmp	r3, #0
    ca78:	d10c      	bne.n	ca94 <rpl_alloc_dag+0x4c>
      memset(dag, 0, sizeof(*dag));
    ca7a:	1c20      	adds	r0, r4, #0
    ca7c:	2100      	movs	r1, #0
    ca7e:	223c      	movs	r2, #60	; 0x3c
    ca80:	4b0b      	ldr	r3, [pc, #44]	; (cab0 <rpl_alloc_dag+0x68>)
    ca82:	4798      	blx	r3
      dag->used = 1;
    ca84:	2301      	movs	r3, #1
    ca86:	7563      	strb	r3, [r4, #21]
      dag->rank = INFINITE_RANK;
    ca88:	3b02      	subs	r3, #2
    ca8a:	83a3      	strh	r3, [r4, #28]
      dag->min_rank = INFINITE_RANK;
    ca8c:	8223      	strh	r3, [r4, #16]
      dag->instance = instance;
    ca8e:	6225      	str	r5, [r4, #32]
      return dag;
    ca90:	1c20      	adds	r0, r4, #0
    ca92:	e008      	b.n	caa6 <rpl_alloc_dag+0x5e>
      RPL_STAT(rpl_stats.mem_overflows++);
      return NULL;
    }
  }

  for(dag = &instance->dag_table[0], end = dag + RPL_MAX_DAG_PER_INSTANCE; dag < end; ++dag) {
    ca94:	343c      	adds	r4, #60	; 0x3c
    ca96:	42a2      	cmp	r2, r4
    ca98:	d8ec      	bhi.n	ca74 <rpl_alloc_dag+0x2c>
      return dag;
    }
  }

  RPL_STAT(rpl_stats.mem_overflows++);
  rpl_free_instance(instance);
    ca9a:	1c28      	adds	r0, r5, #0
    ca9c:	4b05      	ldr	r3, [pc, #20]	; (cab4 <rpl_alloc_dag+0x6c>)
    ca9e:	4798      	blx	r3
  return NULL;
    caa0:	2000      	movs	r0, #0
    caa2:	e000      	b.n	caa6 <rpl_alloc_dag+0x5e>
  instance = rpl_get_instance(instance_id);
  if(instance == NULL) {
    instance = rpl_alloc_instance(instance_id);
    if(instance == NULL) {
      RPL_STAT(rpl_stats.mem_overflows++);
      return NULL;
    caa4:	2000      	movs	r0, #0
  }

  RPL_STAT(rpl_stats.mem_overflows++);
  rpl_free_instance(instance);
  return NULL;
}
    caa6:	bd38      	pop	{r3, r4, r5, pc}
    caa8:	0000c96d 	.word	0x0000c96d
    caac:	0000c46d 	.word	0x0000c46d
    cab0:	00010b69 	.word	0x00010b69
    cab4:	0000c88d 	.word	0x0000c88d

0000cab8 <rpl_find_of>:
  unsigned int i;

  for(i = 0;
      i < sizeof(objective_functions) / sizeof(objective_functions[0]);
      i++) {
    if(objective_functions[i]->ocp == ocp) {
    cab8:	4b03      	ldr	r3, [pc, #12]	; (cac8 <rpl_find_of+0x10>)
    caba:	8b1b      	ldrh	r3, [r3, #24]
    cabc:	4283      	cmp	r3, r0
    cabe:	d001      	beq.n	cac4 <rpl_find_of+0xc>
      return objective_functions[i];
    }
  }

  return NULL;
    cac0:	2000      	movs	r0, #0
    cac2:	e000      	b.n	cac6 <rpl_find_of+0xe>

  for(i = 0;
      i < sizeof(objective_functions) / sizeof(objective_functions[0]);
      i++) {
    if(objective_functions[i]->ocp == ocp) {
      return objective_functions[i];
    cac4:	4800      	ldr	r0, [pc, #0]	; (cac8 <rpl_find_of+0x10>)
    }
  }

  return NULL;
}
    cac6:	4770      	bx	lr
    cac8:	20000168 	.word	0x20000168

0000cacc <rpl_join_instance>:
/*---------------------------------------------------------------------------*/
void
rpl_join_instance(uip_ipaddr_t *from, rpl_dio_t *dio)
{
    cacc:	b5f0      	push	{r4, r5, r6, r7, lr}
    cace:	464f      	mov	r7, r9
    cad0:	b480      	push	{r7}
    cad2:	b082      	sub	sp, #8
    cad4:	1c05      	adds	r5, r0, #0
    cad6:	9001      	str	r0, [sp, #4]
    cad8:	1c0c      	adds	r4, r1, #0
  rpl_instance_t *instance;
  rpl_dag_t *dag;
  rpl_parent_t *p;
  rpl_of_t *of;

  dag = rpl_alloc_dag(dio->instance_id, &dio->dag_id);
    cada:	7e08      	ldrb	r0, [r1, #24]
    cadc:	4b41      	ldr	r3, [pc, #260]	; (cbe4 <rpl_join_instance+0x118>)
    cade:	4798      	blx	r3
    cae0:	1e06      	subs	r6, r0, #0
  if(dag == NULL) {
    cae2:	d07a      	beq.n	cbda <rpl_join_instance+0x10e>
    PRINTF("RPL: Failed to allocate a DAG object!\n\r");
    return;
  }

  instance = dag->instance;
    cae4:	6a07      	ldr	r7, [r0, #32]

  p = rpl_add_parent(dag, dio, from);
    cae6:	1c21      	adds	r1, r4, #0
    cae8:	1c2a      	adds	r2, r5, #0
    caea:	4b3f      	ldr	r3, [pc, #252]	; (cbe8 <rpl_join_instance+0x11c>)
    caec:	4798      	blx	r3
    caee:	1e05      	subs	r5, r0, #0
  PRINTF("RPL: Adding ");
  PRINT6ADDR(from);
  PRINTF(" as a parent: ");
  if(p == NULL) {
    caf0:	d103      	bne.n	cafa <rpl_join_instance+0x2e>
    PRINTF("failed\n\r");
    instance->used = 0;
    caf2:	2200      	movs	r2, #0
    caf4:	238d      	movs	r3, #141	; 0x8d
    caf6:	54fa      	strb	r2, [r7, r3]
    return;
    caf8:	e06f      	b.n	cbda <rpl_join_instance+0x10e>
  }
  p->dtsn = dio->dtsn;
    cafa:	7e63      	ldrb	r3, [r4, #25]
    cafc:	7303      	strb	r3, [r0, #12]
  PRINTF("succeeded\n\r");

  /* Determine the objective function by using the
     objective code point of the DIO. */
  of = rpl_find_of(dio->ocp);
    cafe:	8a20      	ldrh	r0, [r4, #16]
    cb00:	4b3a      	ldr	r3, [pc, #232]	; (cbec <rpl_join_instance+0x120>)
    cb02:	4798      	blx	r3
    cb04:	4681      	mov	r9, r0
  if(of == NULL) {
    cb06:	2800      	cmp	r0, #0
    cb08:	d106      	bne.n	cb18 <rpl_join_instance+0x4c>
    PRINTF("RPL: DIO for DAG instance %u does not specify a supported OF\n\r",
        dio->instance_id);
    rpl_remove_parent(p);
    cb0a:	1c28      	adds	r0, r5, #0
    cb0c:	4b38      	ldr	r3, [pc, #224]	; (cbf0 <rpl_join_instance+0x124>)
    cb0e:	4798      	blx	r3
    instance->used = 0;
    cb10:	2200      	movs	r2, #0
    cb12:	238d      	movs	r3, #141	; 0x8d
    cb14:	54fa      	strb	r2, [r7, r3]
    return;
    cb16:	e060      	b.n	cbda <rpl_join_instance+0x10e>
  }

  /* Autoconfigure an address if this node does not already have an address
     with this prefix. */
  if(dio->prefix_info.flags & UIP_ND6_RA_FLAG_AUTONOMOUS) {
    cb18:	2351      	movs	r3, #81	; 0x51
    cb1a:	5ce3      	ldrb	r3, [r4, r3]
    cb1c:	065b      	lsls	r3, r3, #25
    cb1e:	d504      	bpl.n	cb2a <rpl_join_instance+0x5e>
    check_prefix(NULL, &dio->prefix_info);
    cb20:	1c21      	adds	r1, r4, #0
    cb22:	313c      	adds	r1, #60	; 0x3c
    cb24:	2000      	movs	r0, #0
    cb26:	4b33      	ldr	r3, [pc, #204]	; (cbf4 <rpl_join_instance+0x128>)
    cb28:	4798      	blx	r3
  }

  dag->joined = 1;
    cb2a:	2301      	movs	r3, #1
    cb2c:	75b3      	strb	r3, [r6, #22]
  dag->preference = dio->preference;
    cb2e:	7da3      	ldrb	r3, [r4, #22]
    cb30:	7533      	strb	r3, [r6, #20]
  dag->grounded = dio->grounded;
    cb32:	7d23      	ldrb	r3, [r4, #20]
    cb34:	74f3      	strb	r3, [r6, #19]
  dag->version = dio->version;
    cb36:	7de3      	ldrb	r3, [r4, #23]
    cb38:	74b3      	strb	r3, [r6, #18]

  instance->of = of;
    cb3a:	464b      	mov	r3, r9
    cb3c:	60bb      	str	r3, [r7, #8]
  instance->mop = dio->mop;
    cb3e:	7d62      	ldrb	r2, [r4, #21]
    cb40:	238f      	movs	r3, #143	; 0x8f
    cb42:	54fa      	strb	r2, [r7, r3]
  instance->current_dag = dag;
    cb44:	60fe      	str	r6, [r7, #12]
  instance->dtsn_out = RPL_LOLLIPOP_INIT;
    cb46:	22f0      	movs	r2, #240	; 0xf0
    cb48:	3b01      	subs	r3, #1
    cb4a:	54fa      	strb	r2, [r7, r3]

  instance->max_rankinc = dio->dag_max_rankinc;
    cb4c:	8c22      	ldrh	r2, [r4, #32]
    cb4e:	330a      	adds	r3, #10
    cb50:	52fa      	strh	r2, [r7, r3]
  instance->min_hoprankinc = dio->dag_min_hoprankinc;
    cb52:	8c62      	ldrh	r2, [r4, #34]	; 0x22
    cb54:	3302      	adds	r3, #2
    cb56:	52fa      	strh	r2, [r7, r3]
  instance->dio_intdoubl = dio->dag_intdoubl;
    cb58:	7ea3      	ldrb	r3, [r4, #26]
    cb5a:	2290      	movs	r2, #144	; 0x90
    cb5c:	54bb      	strb	r3, [r7, r2]
  instance->dio_intmin = dio->dag_intmin;
    cb5e:	7ee2      	ldrb	r2, [r4, #27]
    cb60:	2191      	movs	r1, #145	; 0x91
    cb62:	547a      	strb	r2, [r7, r1]
  instance->dio_intcurrent = instance->dio_intmin + instance->dio_intdoubl;
    cb64:	18d3      	adds	r3, r2, r3
    cb66:	2294      	movs	r2, #148	; 0x94
    cb68:	54bb      	strb	r3, [r7, r2]
  instance->dio_redundancy = dio->dag_redund;
    cb6a:	7f22      	ldrb	r2, [r4, #28]
    cb6c:	2392      	movs	r3, #146	; 0x92
    cb6e:	54fa      	strb	r2, [r7, r3]
  instance->default_lifetime = dio->default_lifetime;
    cb70:	7f62      	ldrb	r2, [r4, #29]
    cb72:	3301      	adds	r3, #1
    cb74:	54fa      	strb	r2, [r7, r3]
  instance->lifetime_unit = dio->lifetime_unit;
    cb76:	8be2      	ldrh	r2, [r4, #30]
    cb78:	3309      	adds	r3, #9
    cb7a:	52fa      	strh	r2, [r7, r3]

  memcpy(&dag->dag_id, &dio->dag_id, sizeof(dio->dag_id));
    cb7c:	1c30      	adds	r0, r6, #0
    cb7e:	1c21      	adds	r1, r4, #0
    cb80:	2210      	movs	r2, #16
    cb82:	4b1d      	ldr	r3, [pc, #116]	; (cbf8 <rpl_join_instance+0x12c>)
    cb84:	4699      	mov	r9, r3
    cb86:	4798      	blx	r3

  /* Copy prefix information from the DIO into the DAG object. */
  memcpy(&dag->prefix_info, &dio->prefix_info, sizeof(rpl_prefix_t));
    cb88:	1c30      	adds	r0, r6, #0
    cb8a:	3024      	adds	r0, #36	; 0x24
    cb8c:	1c21      	adds	r1, r4, #0
    cb8e:	313c      	adds	r1, #60	; 0x3c
    cb90:	2218      	movs	r2, #24
    cb92:	47c8      	blx	r9

  rpl_set_preferred_parent(dag, p);
    cb94:	1c30      	adds	r0, r6, #0
    cb96:	1c29      	adds	r1, r5, #0
    cb98:	4b18      	ldr	r3, [pc, #96]	; (cbfc <rpl_join_instance+0x130>)
    cb9a:	4798      	blx	r3
  instance->of->update_metric_container(instance);
    cb9c:	68bb      	ldr	r3, [r7, #8]
    cb9e:	695b      	ldr	r3, [r3, #20]
    cba0:	1c38      	adds	r0, r7, #0
    cba2:	4798      	blx	r3
  dag->rank = instance->of->calculate_rank(p, 0);
    cba4:	68bb      	ldr	r3, [r7, #8]
    cba6:	691b      	ldr	r3, [r3, #16]
    cba8:	1c28      	adds	r0, r5, #0
    cbaa:	2100      	movs	r1, #0
    cbac:	4798      	blx	r3
    cbae:	83b0      	strh	r0, [r6, #28]
  /* So far this is the lowest rank we are aware of. */
  dag->min_rank = dag->rank;
    cbb0:	8230      	strh	r0, [r6, #16]

  if(default_instance == NULL) {
    cbb2:	4b13      	ldr	r3, [pc, #76]	; (cc00 <rpl_join_instance+0x134>)
    cbb4:	681b      	ldr	r3, [r3, #0]
    cbb6:	2b00      	cmp	r3, #0
    cbb8:	d101      	bne.n	cbbe <rpl_join_instance+0xf2>
    default_instance = instance;
    cbba:	4b11      	ldr	r3, [pc, #68]	; (cc00 <rpl_join_instance+0x134>)
    cbbc:	601f      	str	r7, [r3, #0]
  PRINT6ADDR(&dag->dag_id);
  PRINTF("\n\r");

  ANNOTATE("#A join=%u\n\r", dag->dag_id.u8[sizeof(dag->dag_id) - 1]);

  rpl_reset_dio_timer(instance);
    cbbe:	1c38      	adds	r0, r7, #0
    cbc0:	4b10      	ldr	r3, [pc, #64]	; (cc04 <rpl_join_instance+0x138>)
    cbc2:	4798      	blx	r3
  rpl_set_default_route(instance, from);
    cbc4:	1c38      	adds	r0, r7, #0
    cbc6:	9901      	ldr	r1, [sp, #4]
    cbc8:	4b0f      	ldr	r3, [pc, #60]	; (cc08 <rpl_join_instance+0x13c>)
    cbca:	4798      	blx	r3

  if(instance->mop != RPL_MOP_NO_DOWNWARD_ROUTES) {
    cbcc:	238f      	movs	r3, #143	; 0x8f
    cbce:	5cfb      	ldrb	r3, [r7, r3]
    cbd0:	2b00      	cmp	r3, #0
    cbd2:	d002      	beq.n	cbda <rpl_join_instance+0x10e>
    rpl_schedule_dao(instance);
    cbd4:	1c38      	adds	r0, r7, #0
    cbd6:	4b0d      	ldr	r3, [pc, #52]	; (cc0c <rpl_join_instance+0x140>)
    cbd8:	4798      	blx	r3
  } else {
    PRINTF("RPL: The DIO does not meet the prerequisites for sending a DAO\n\r");
  }
}
    cbda:	b002      	add	sp, #8
    cbdc:	bc04      	pop	{r2}
    cbde:	4691      	mov	r9, r2
    cbe0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    cbe2:	46c0      	nop			; (mov r8, r8)
    cbe4:	0000ca49 	.word	0x0000ca49
    cbe8:	0000c4a9 	.word	0x0000c4a9
    cbec:	0000cab9 	.word	0x0000cab9
    cbf0:	0000c7d5 	.word	0x0000c7d5
    cbf4:	0000c2b1 	.word	0x0000c2b1
    cbf8:	00010b2f 	.word	0x00010b2f
    cbfc:	0000c245 	.word	0x0000c245
    cc00:	20003284 	.word	0x20003284
    cc04:	0000e281 	.word	0x0000e281
    cc08:	0000c429 	.word	0x0000c429
    cc0c:	0000e2a5 	.word	0x0000e2a5

0000cc10 <rpl_local_repair>:
  RPL_STAT(rpl_stats.global_repairs++);
}
/*---------------------------------------------------------------------------*/
void
rpl_local_repair(rpl_instance_t *instance)
{
    cc10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    cc12:	4657      	mov	r7, sl
    cc14:	4646      	mov	r6, r8
    cc16:	b4c0      	push	{r6, r7}
  int i;

  if(instance == NULL) {
    cc18:	2800      	cmp	r0, #0
    cc1a:	d023      	beq.n	cc64 <rpl_local_repair+0x54>
    cc1c:	4680      	mov	r8, r0
    cc1e:	1c05      	adds	r5, r0, #0
    cc20:	3510      	adds	r5, #16
    cc22:	2388      	movs	r3, #136	; 0x88
    cc24:	4443      	add	r3, r8
    cc26:	469a      	mov	sl, r3
    cc28:	1c2e      	adds	r6, r5, #0
    PRINTF("RPL: local repair requested for instance NULL\n\r");
    return;
  }
  PRINTF("RPL: Starting a local instance repair\n\r");
  for(i = 0; i < RPL_MAX_DAG_PER_INSTANCE; i++) {
    if(instance->dag_table[i].used) {
    cc2a:	7d6b      	ldrb	r3, [r5, #21]
    cc2c:	2b00      	cmp	r3, #0
    cc2e:	d013      	beq.n	cc58 <rpl_local_repair+0x48>
      instance->dag_table[i].rank = INFINITE_RANK;
    cc30:	2301      	movs	r3, #1
    cc32:	425b      	negs	r3, r3
    cc34:	83ab      	strh	r3, [r5, #28]
  rpl_parent_t *p;

  PRINTF("RPL: Nullifying parents (minimum rank %u)\n\r",
	minimum_rank);

  p = nbr_table_head(rpl_parents);
    cc36:	480d      	ldr	r0, [pc, #52]	; (cc6c <rpl_local_repair+0x5c>)
    cc38:	4b0d      	ldr	r3, [pc, #52]	; (cc70 <rpl_local_repair+0x60>)
    cc3a:	4798      	blx	r3
    cc3c:	1e04      	subs	r4, r0, #0
  while(p != NULL) {
    cc3e:	d00b      	beq.n	cc58 <rpl_local_repair+0x48>
    if(dag == p->dag && p->rank >= minimum_rank) {
      rpl_nullify_parent(p);
    }
    p = nbr_table_next(rpl_parents, p);
    cc40:	4f0c      	ldr	r7, [pc, #48]	; (cc74 <rpl_local_repair+0x64>)
  PRINTF("RPL: Nullifying parents (minimum rank %u)\n\r",
	minimum_rank);

  p = nbr_table_head(rpl_parents);
  while(p != NULL) {
    if(dag == p->dag && p->rank >= minimum_rank) {
    cc42:	6863      	ldr	r3, [r4, #4]
    cc44:	42b3      	cmp	r3, r6
    cc46:	d102      	bne.n	cc4e <rpl_local_repair+0x3e>
      rpl_nullify_parent(p);
    cc48:	1c20      	adds	r0, r4, #0
    cc4a:	4b0b      	ldr	r3, [pc, #44]	; (cc78 <rpl_local_repair+0x68>)
    cc4c:	4798      	blx	r3
    }
    p = nbr_table_next(rpl_parents, p);
    cc4e:	4807      	ldr	r0, [pc, #28]	; (cc6c <rpl_local_repair+0x5c>)
    cc50:	1c21      	adds	r1, r4, #0
    cc52:	47b8      	blx	r7
    cc54:	1e04      	subs	r4, r0, #0

  PRINTF("RPL: Nullifying parents (minimum rank %u)\n\r",
	minimum_rank);

  p = nbr_table_head(rpl_parents);
  while(p != NULL) {
    cc56:	d1f4      	bne.n	cc42 <rpl_local_repair+0x32>
    cc58:	353c      	adds	r5, #60	; 0x3c
  if(instance == NULL) {
    PRINTF("RPL: local repair requested for instance NULL\n\r");
    return;
  }
  PRINTF("RPL: Starting a local instance repair\n\r");
  for(i = 0; i < RPL_MAX_DAG_PER_INSTANCE; i++) {
    cc5a:	4555      	cmp	r5, sl
    cc5c:	d1e4      	bne.n	cc28 <rpl_local_repair+0x18>
      instance->dag_table[i].rank = INFINITE_RANK;
      nullify_parents(&instance->dag_table[i], 0);
    }
  }

  rpl_reset_dio_timer(instance);
    cc5e:	4640      	mov	r0, r8
    cc60:	4b06      	ldr	r3, [pc, #24]	; (cc7c <rpl_local_repair+0x6c>)
    cc62:	4798      	blx	r3

  RPL_STAT(rpl_stats.local_repairs++);
}
    cc64:	bc0c      	pop	{r2, r3}
    cc66:	4690      	mov	r8, r2
    cc68:	469a      	mov	sl, r3
    cc6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    cc6c:	20000124 	.word	0x20000124
    cc70:	0000bb41 	.word	0x0000bb41
    cc74:	0000bad5 	.word	0x0000bad5
    cc78:	0000c785 	.word	0x0000c785
    cc7c:	0000e281 	.word	0x0000e281

0000cc80 <rpl_process_parent_event>:
  }
}
/*---------------------------------------------------------------------------*/
int
rpl_process_parent_event(rpl_instance_t *instance, rpl_parent_t *p)
{
    cc80:	b5f0      	push	{r4, r5, r6, r7, lr}
    cc82:	464f      	mov	r7, r9
    cc84:	b480      	push	{r7}
    cc86:	b082      	sub	sp, #8
    cc88:	1c07      	adds	r7, r0, #0
    cc8a:	1c0c      	adds	r4, r1, #0
  old_rank = instance->current_dag->rank;
#endif /* DEBUG */

  return_value = 1;

  if(!acceptable_rank(p->dag, p->rank)) {
    cc8c:	684e      	ldr	r6, [r1, #4]
    cc8e:	8908      	ldrh	r0, [r1, #8]
}
/*---------------------------------------------------------------------------*/
static int
acceptable_rank(rpl_dag_t *dag, rpl_rank_t rank)
{
  return rank != INFINITE_RANK &&
    cc90:	4b19      	ldr	r3, [pc, #100]	; (ccf8 <rpl_process_parent_event+0x78>)
    cc92:	4298      	cmp	r0, r3
    cc94:	d022      	beq.n	ccdc <rpl_process_parent_event+0x5c>
    ((dag->instance->max_rankinc == 0) ||
    cc96:	6a33      	ldr	r3, [r6, #32]
    cc98:	2298      	movs	r2, #152	; 0x98
    cc9a:	5a9d      	ldrh	r5, [r3, r2]
}
/*---------------------------------------------------------------------------*/
static int
acceptable_rank(rpl_dag_t *dag, rpl_rank_t rank)
{
  return rank != INFINITE_RANK &&
    cc9c:	2d00      	cmp	r5, #0
    cc9e:	d010      	beq.n	ccc2 <rpl_process_parent_event+0x42>
    ((dag->instance->max_rankinc == 0) ||
     DAG_RANK(rank, dag->instance) <= DAG_RANK(dag->min_rank + dag->instance->max_rankinc, dag->instance));
    cca0:	3202      	adds	r2, #2
    cca2:	5a9b      	ldrh	r3, [r3, r2]
    cca4:	9301      	str	r3, [sp, #4]
    cca6:	1c19      	adds	r1, r3, #0
    cca8:	4b14      	ldr	r3, [pc, #80]	; (ccfc <rpl_process_parent_event+0x7c>)
    ccaa:	4798      	blx	r3
    ccac:	b282      	uxth	r2, r0
    ccae:	4691      	mov	r9, r2
    ccb0:	8a30      	ldrh	r0, [r6, #16]
    ccb2:	1940      	adds	r0, r0, r5
    ccb4:	9901      	ldr	r1, [sp, #4]
    ccb6:	4b12      	ldr	r3, [pc, #72]	; (cd00 <rpl_process_parent_event+0x80>)
    ccb8:	4798      	blx	r3
#if DEBUG
  rpl_rank_t old_rank;
  old_rank = instance->current_dag->rank;
#endif /* DEBUG */

  return_value = 1;
    ccba:	2501      	movs	r5, #1
/*---------------------------------------------------------------------------*/
static int
acceptable_rank(rpl_dag_t *dag, rpl_rank_t rank)
{
  return rank != INFINITE_RANK &&
    ((dag->instance->max_rankinc == 0) ||
    ccbc:	4581      	cmp	r9, r0
    ccbe:	dd01      	ble.n	ccc4 <rpl_process_parent_event+0x44>
    ccc0:	e00c      	b.n	ccdc <rpl_process_parent_event+0x5c>
#if DEBUG
  rpl_rank_t old_rank;
  old_rank = instance->current_dag->rank;
#endif /* DEBUG */

  return_value = 1;
    ccc2:	2501      	movs	r5, #1
    } else {
      return_value = 0;
    }
  }

  if(rpl_select_dag(instance, p) == NULL) {
    ccc4:	1c38      	adds	r0, r7, #0
    ccc6:	1c21      	adds	r1, r4, #0
    ccc8:	4b0e      	ldr	r3, [pc, #56]	; (cd04 <rpl_process_parent_event+0x84>)
    ccca:	4798      	blx	r3
      PRINTF("RPL: We don't have any parent");
    }
  }
#endif /* DEBUG */

  return return_value;
    cccc:	1c2b      	adds	r3, r5, #0
    } else {
      return_value = 0;
    }
  }

  if(rpl_select_dag(instance, p) == NULL) {
    ccce:	2800      	cmp	r0, #0
    ccd0:	d10d      	bne.n	ccee <rpl_process_parent_event+0x6e>
    /* No suitable parent; trigger a local repair. */
    PRINTF("RPL: No parents found in any DAG\n\r");
    rpl_local_repair(instance);
    ccd2:	1c38      	adds	r0, r7, #0
    ccd4:	4b0c      	ldr	r3, [pc, #48]	; (cd08 <rpl_process_parent_event+0x88>)
    ccd6:	4798      	blx	r3
    return 0;
    ccd8:	2300      	movs	r3, #0
    ccda:	e008      	b.n	ccee <rpl_process_parent_event+0x6e>

  if(!acceptable_rank(p->dag, p->rank)) {
    /* The candidate parent is no longer valid: the rank increase resulting
       from the choice of it as a parent would be too high. */
    PRINTF("RPL: Unacceptable rank %u\n\r", (unsigned)p->rank);
    rpl_nullify_parent(p);
    ccdc:	1c20      	adds	r0, r4, #0
    ccde:	4b0b      	ldr	r3, [pc, #44]	; (cd0c <rpl_process_parent_event+0x8c>)
    cce0:	4798      	blx	r3
    if(p != instance->current_dag->preferred_parent) {
    cce2:	68fb      	ldr	r3, [r7, #12]
    cce4:	699a      	ldr	r2, [r3, #24]
      return 0;
    cce6:	2300      	movs	r3, #0
    } else {
      return_value = 0;
    cce8:	2500      	movs	r5, #0
  if(!acceptable_rank(p->dag, p->rank)) {
    /* The candidate parent is no longer valid: the rank increase resulting
       from the choice of it as a parent would be too high. */
    PRINTF("RPL: Unacceptable rank %u\n\r", (unsigned)p->rank);
    rpl_nullify_parent(p);
    if(p != instance->current_dag->preferred_parent) {
    ccea:	42a2      	cmp	r2, r4
    ccec:	d0ea      	beq.n	ccc4 <rpl_process_parent_event+0x44>
    }
  }
#endif /* DEBUG */

  return return_value;
}
    ccee:	1c18      	adds	r0, r3, #0
    ccf0:	b002      	add	sp, #8
    ccf2:	bc04      	pop	{r2}
    ccf4:	4691      	mov	r9, r2
    ccf6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ccf8:	0000ffff 	.word	0x0000ffff
    ccfc:	0001076d 	.word	0x0001076d
    cd00:	0001088d 	.word	0x0001088d
    cd04:	0000c5a5 	.word	0x0000c5a5
    cd08:	0000cc11 	.word	0x0000cc11
    cd0c:	0000c785 	.word	0x0000c785

0000cd10 <rpl_add_dag>:
}

/*---------------------------------------------------------------------------*/
void
rpl_add_dag(uip_ipaddr_t *from, rpl_dio_t *dio)
{
    cd10:	b5f0      	push	{r4, r5, r6, r7, lr}
    cd12:	b083      	sub	sp, #12
    cd14:	1c07      	adds	r7, r0, #0
    cd16:	9001      	str	r0, [sp, #4]
    cd18:	1c0c      	adds	r4, r1, #0
  rpl_instance_t *instance;
  rpl_dag_t *dag, *previous_dag;
  rpl_parent_t *p;
  rpl_of_t *of;

  dag = rpl_alloc_dag(dio->instance_id, &dio->dag_id);
    cd1a:	7e08      	ldrb	r0, [r1, #24]
    cd1c:	4b37      	ldr	r3, [pc, #220]	; (cdfc <rpl_add_dag+0xec>)
    cd1e:	4798      	blx	r3
    cd20:	1e05      	subs	r5, r0, #0
  if(dag == NULL) {
    cd22:	d068      	beq.n	cdf6 <rpl_add_dag+0xe6>
    PRINTF("RPL: Failed to allocate a DAG object!\n\r");
    return;
  }

  instance = dag->instance;
    cd24:	6a06      	ldr	r6, [r0, #32]
}
/*---------------------------------------------------------------------------*/
static rpl_dag_t *
find_parent_dag(rpl_instance_t *instance, uip_ipaddr_t *addr)
{
  rpl_parent_t *p = find_parent_any_dag_any_instance(addr);
    cd26:	1c38      	adds	r0, r7, #0
    cd28:	4b35      	ldr	r3, [pc, #212]	; (ce00 <rpl_add_dag+0xf0>)
    cd2a:	4798      	blx	r3
  if(p != NULL) {
    cd2c:	2800      	cmp	r0, #0
    cd2e:	d002      	beq.n	cd36 <rpl_add_dag+0x26>
    return p->dag;
    cd30:	6847      	ldr	r7, [r0, #4]
  }

  instance = dag->instance;

  previous_dag = find_parent_dag(instance, from);
  if(previous_dag == NULL) {
    cd32:	2f00      	cmp	r7, #0
    cd34:	d109      	bne.n	cd4a <rpl_add_dag+0x3a>
    PRINTF("RPL: Adding ");
    PRINT6ADDR(from);
    PRINTF(" as a parent: ");
    p = rpl_add_parent(dag, dio, from);
    cd36:	1c28      	adds	r0, r5, #0
    cd38:	1c21      	adds	r1, r4, #0
    cd3a:	9a01      	ldr	r2, [sp, #4]
    cd3c:	4b31      	ldr	r3, [pc, #196]	; (ce04 <rpl_add_dag+0xf4>)
    cd3e:	4798      	blx	r3
    cd40:	9001      	str	r0, [sp, #4]
    if(p == NULL) {
    cd42:	2800      	cmp	r0, #0
    cd44:	d10d      	bne.n	cd62 <rpl_add_dag+0x52>
      PRINTF("failed\n\r");
      dag->used = 0;
    cd46:	7568      	strb	r0, [r5, #21]
      return;
    cd48:	e055      	b.n	cdf6 <rpl_add_dag+0xe6>
    }
    PRINTF("succeeded\n\r");
  } else {
    p = rpl_find_parent(previous_dag, from);
    cd4a:	1c38      	adds	r0, r7, #0
    cd4c:	9901      	ldr	r1, [sp, #4]
    cd4e:	4b2e      	ldr	r3, [pc, #184]	; (ce08 <rpl_add_dag+0xf8>)
    cd50:	4798      	blx	r3
    cd52:	1e03      	subs	r3, r0, #0
    cd54:	9001      	str	r0, [sp, #4]
    if(p != NULL) {
    cd56:	d004      	beq.n	cd62 <rpl_add_dag+0x52>
      rpl_move_parent(previous_dag, dag, p);
    cd58:	1c38      	adds	r0, r7, #0
    cd5a:	1c29      	adds	r1, r5, #0
    cd5c:	1c1a      	adds	r2, r3, #0
    cd5e:	4b2b      	ldr	r3, [pc, #172]	; (ce0c <rpl_add_dag+0xfc>)
    cd60:	4798      	blx	r3
    }
  }

  /* Determine the objective function by using the
     objective code point of the DIO. */
  of = rpl_find_of(dio->ocp);
    cd62:	8a20      	ldrh	r0, [r4, #16]
    cd64:	4b2a      	ldr	r3, [pc, #168]	; (ce10 <rpl_add_dag+0x100>)
    cd66:	4798      	blx	r3
  if(of != instance->of ||
    cd68:	68b3      	ldr	r3, [r6, #8]
    cd6a:	4283      	cmp	r3, r0
    cd6c:	d118      	bne.n	cda0 <rpl_add_dag+0x90>
     instance->mop != dio->mop ||
    cd6e:	238f      	movs	r3, #143	; 0x8f
  }

  /* Determine the objective function by using the
     objective code point of the DIO. */
  of = rpl_find_of(dio->ocp);
  if(of != instance->of ||
    cd70:	5cf2      	ldrb	r2, [r6, r3]
    cd72:	7d63      	ldrb	r3, [r4, #21]
    cd74:	429a      	cmp	r2, r3
    cd76:	d113      	bne.n	cda0 <rpl_add_dag+0x90>
     instance->mop != dio->mop ||
     instance->max_rankinc != dio->dag_max_rankinc ||
    cd78:	2398      	movs	r3, #152	; 0x98
    cd7a:	58f3      	ldr	r3, [r6, r3]
    cd7c:	6a22      	ldr	r2, [r4, #32]
    cd7e:	4293      	cmp	r3, r2
    cd80:	d10e      	bne.n	cda0 <rpl_add_dag+0x90>
     instance->min_hoprankinc != dio->dag_min_hoprankinc ||
     instance->dio_intdoubl != dio->dag_intdoubl ||
    cd82:	2390      	movs	r3, #144	; 0x90
    cd84:	5af2      	ldrh	r2, [r6, r3]
    cd86:	8b63      	ldrh	r3, [r4, #26]
    cd88:	429a      	cmp	r2, r3
    cd8a:	d109      	bne.n	cda0 <rpl_add_dag+0x90>
     instance->dio_intmin != dio->dag_intmin ||
     instance->dio_redundancy != dio->dag_redund ||
    cd8c:	2392      	movs	r3, #146	; 0x92
    cd8e:	5af2      	ldrh	r2, [r6, r3]
    cd90:	8ba3      	ldrh	r3, [r4, #28]
    cd92:	429a      	cmp	r2, r3
    cd94:	d104      	bne.n	cda0 <rpl_add_dag+0x90>
     instance->default_lifetime != dio->default_lifetime ||
     instance->lifetime_unit != dio->lifetime_unit) {
    cd96:	239c      	movs	r3, #156	; 0x9c
     instance->max_rankinc != dio->dag_max_rankinc ||
     instance->min_hoprankinc != dio->dag_min_hoprankinc ||
     instance->dio_intdoubl != dio->dag_intdoubl ||
     instance->dio_intmin != dio->dag_intmin ||
     instance->dio_redundancy != dio->dag_redund ||
     instance->default_lifetime != dio->default_lifetime ||
    cd98:	5af2      	ldrh	r2, [r6, r3]
    cd9a:	8be3      	ldrh	r3, [r4, #30]
    cd9c:	429a      	cmp	r2, r3
    cd9e:	d005      	beq.n	cdac <rpl_add_dag+0x9c>
     instance->lifetime_unit != dio->lifetime_unit) {
    PRINTF("RPL: DIO for DAG instance %u incompatible with previous DIO\n\r",
	   dio->instance_id);
    rpl_remove_parent(p);
    cda0:	9801      	ldr	r0, [sp, #4]
    cda2:	4b1c      	ldr	r3, [pc, #112]	; (ce14 <rpl_add_dag+0x104>)
    cda4:	4798      	blx	r3
    dag->used = 0;
    cda6:	2300      	movs	r3, #0
    cda8:	756b      	strb	r3, [r5, #21]
    return;
    cdaa:	e024      	b.n	cdf6 <rpl_add_dag+0xe6>
  }

  dag->used = 1;
    cdac:	2301      	movs	r3, #1
    cdae:	756b      	strb	r3, [r5, #21]
  dag->grounded = dio->grounded;
    cdb0:	7d23      	ldrb	r3, [r4, #20]
    cdb2:	74eb      	strb	r3, [r5, #19]
  dag->preference = dio->preference;
    cdb4:	7da3      	ldrb	r3, [r4, #22]
    cdb6:	752b      	strb	r3, [r5, #20]
  dag->version = dio->version;
    cdb8:	7de3      	ldrb	r3, [r4, #23]
    cdba:	74ab      	strb	r3, [r5, #18]

  memcpy(&dag->dag_id, &dio->dag_id, sizeof(dio->dag_id));
    cdbc:	1c28      	adds	r0, r5, #0
    cdbe:	1c21      	adds	r1, r4, #0
    cdc0:	2210      	movs	r2, #16
    cdc2:	4f15      	ldr	r7, [pc, #84]	; (ce18 <rpl_add_dag+0x108>)
    cdc4:	47b8      	blx	r7

  /* copy prefix information into the dag */
  memcpy(&dag->prefix_info, &dio->prefix_info, sizeof(rpl_prefix_t));
    cdc6:	1c28      	adds	r0, r5, #0
    cdc8:	3024      	adds	r0, #36	; 0x24
    cdca:	1c21      	adds	r1, r4, #0
    cdcc:	313c      	adds	r1, #60	; 0x3c
    cdce:	2218      	movs	r2, #24
    cdd0:	47b8      	blx	r7

  rpl_set_preferred_parent(dag, p);
    cdd2:	1c28      	adds	r0, r5, #0
    cdd4:	9f01      	ldr	r7, [sp, #4]
    cdd6:	1c39      	adds	r1, r7, #0
    cdd8:	4b10      	ldr	r3, [pc, #64]	; (ce1c <rpl_add_dag+0x10c>)
    cdda:	4798      	blx	r3
  dag->rank = instance->of->calculate_rank(p, 0);
    cddc:	68b3      	ldr	r3, [r6, #8]
    cdde:	691b      	ldr	r3, [r3, #16]
    cde0:	1c38      	adds	r0, r7, #0
    cde2:	2100      	movs	r1, #0
    cde4:	4798      	blx	r3
    cde6:	83a8      	strh	r0, [r5, #28]
  dag->min_rank = dag->rank; /* So far this is the lowest rank we know of. */
    cde8:	8228      	strh	r0, [r5, #16]
  PRINT6ADDR(&dag->dag_id);
  PRINTF("\n\r");

  ANNOTATE("#A join=%u\n\r", dag->dag_id.u8[sizeof(dag->dag_id) - 1]);

  rpl_process_parent_event(instance, p);
    cdea:	1c30      	adds	r0, r6, #0
    cdec:	1c39      	adds	r1, r7, #0
    cdee:	4b0c      	ldr	r3, [pc, #48]	; (ce20 <rpl_add_dag+0x110>)
    cdf0:	4798      	blx	r3
  p->dtsn = dio->dtsn;
    cdf2:	7e63      	ldrb	r3, [r4, #25]
    cdf4:	733b      	strb	r3, [r7, #12]
}
    cdf6:	b003      	add	sp, #12
    cdf8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    cdfa:	46c0      	nop			; (mov r8, r8)
    cdfc:	0000ca49 	.word	0x0000ca49
    ce00:	0000c341 	.word	0x0000c341
    ce04:	0000c4a9 	.word	0x0000c4a9
    ce08:	0000c4e5 	.word	0x0000c4e5
    ce0c:	0000c8ed 	.word	0x0000c8ed
    ce10:	0000cab9 	.word	0x0000cab9
    ce14:	0000c7d5 	.word	0x0000c7d5
    ce18:	00010b2f 	.word	0x00010b2f
    ce1c:	0000c245 	.word	0x0000c245
    ce20:	0000cc81 	.word	0x0000cc81

0000ce24 <rpl_recalculate_ranks>:
  RPL_STAT(rpl_stats.local_repairs++);
}
/*---------------------------------------------------------------------------*/
void
rpl_recalculate_ranks(void)
{
    ce24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  /*
   * We recalculate ranks when we receive feedback from the system rather
   * than RPL protocol messages. This periodical recalculation is called
   * from a timer in order to keep the stack depth reasonably low.
   */
  p = nbr_table_head(rpl_parents);
    ce26:	480e      	ldr	r0, [pc, #56]	; (ce60 <rpl_recalculate_ranks+0x3c>)
    ce28:	4b0e      	ldr	r3, [pc, #56]	; (ce64 <rpl_recalculate_ranks+0x40>)
    ce2a:	4798      	blx	r3
    ce2c:	1e04      	subs	r4, r0, #0
  while(p != NULL) {
    ce2e:	d015      	beq.n	ce5c <rpl_recalculate_ranks+0x38>
    if(p->dag != NULL && p->dag->instance && p->updated) {
      p->updated = 0;
      PRINTF("RPL: rpl_process_parent_event recalculate_ranks\n\r");
      if(!rpl_process_parent_event(p->dag->instance, p)) {
    ce30:	4e0d      	ldr	r6, [pc, #52]	; (ce68 <rpl_recalculate_ranks+0x44>)
        PRINTF("RPL: A parent was dropped\n\r");
      }
    }
    p = nbr_table_next(rpl_parents, p);
    ce32:	4d0b      	ldr	r5, [pc, #44]	; (ce60 <rpl_recalculate_ranks+0x3c>)
    ce34:	4f0d      	ldr	r7, [pc, #52]	; (ce6c <rpl_recalculate_ranks+0x48>)
   * than RPL protocol messages. This periodical recalculation is called
   * from a timer in order to keep the stack depth reasonably low.
   */
  p = nbr_table_head(rpl_parents);
  while(p != NULL) {
    if(p->dag != NULL && p->dag->instance && p->updated) {
    ce36:	6863      	ldr	r3, [r4, #4]
    ce38:	2b00      	cmp	r3, #0
    ce3a:	d00a      	beq.n	ce52 <rpl_recalculate_ranks+0x2e>
    ce3c:	6a1a      	ldr	r2, [r3, #32]
    ce3e:	2a00      	cmp	r2, #0
    ce40:	d007      	beq.n	ce52 <rpl_recalculate_ranks+0x2e>
    ce42:	7b62      	ldrb	r2, [r4, #13]
    ce44:	2a00      	cmp	r2, #0
    ce46:	d004      	beq.n	ce52 <rpl_recalculate_ranks+0x2e>
      p->updated = 0;
    ce48:	2200      	movs	r2, #0
    ce4a:	7362      	strb	r2, [r4, #13]
      PRINTF("RPL: rpl_process_parent_event recalculate_ranks\n\r");
      if(!rpl_process_parent_event(p->dag->instance, p)) {
    ce4c:	6a18      	ldr	r0, [r3, #32]
    ce4e:	1c21      	adds	r1, r4, #0
    ce50:	47b0      	blx	r6
        PRINTF("RPL: A parent was dropped\n\r");
      }
    }
    p = nbr_table_next(rpl_parents, p);
    ce52:	1c28      	adds	r0, r5, #0
    ce54:	1c21      	adds	r1, r4, #0
    ce56:	47b8      	blx	r7
    ce58:	1e04      	subs	r4, r0, #0
   * We recalculate ranks when we receive feedback from the system rather
   * than RPL protocol messages. This periodical recalculation is called
   * from a timer in order to keep the stack depth reasonably low.
   */
  p = nbr_table_head(rpl_parents);
  while(p != NULL) {
    ce5a:	d1ec      	bne.n	ce36 <rpl_recalculate_ranks+0x12>
        PRINTF("RPL: A parent was dropped\n\r");
      }
    }
    p = nbr_table_next(rpl_parents, p);
  }
}
    ce5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ce5e:	46c0      	nop			; (mov r8, r8)
    ce60:	20000124 	.word	0x20000124
    ce64:	0000bb41 	.word	0x0000bb41
    ce68:	0000cc81 	.word	0x0000cc81
    ce6c:	0000bad5 	.word	0x0000bad5

0000ce70 <rpl_process_dio>:
  return return_value;
}
/*---------------------------------------------------------------------------*/
void
rpl_process_dio(uip_ipaddr_t *from, rpl_dio_t *dio)
{
    ce70:	b5f0      	push	{r4, r5, r6, r7, lr}
    ce72:	464f      	mov	r7, r9
    ce74:	b480      	push	{r7}
    ce76:	b082      	sub	sp, #8
#if RPL_CONF_MULTICAST
  /* If the root is advertising MOP 2 but we support MOP 3 we can still join
   * In that scenario, we suppress DAOs for multicast targets */
  if(dio->mop < RPL_MOP_STORING_NO_MULTICAST) {
#else
  if(dio->mop != RPL_MOP_DEFAULT) {
    ce78:	7d4b      	ldrb	r3, [r1, #21]
    ce7a:	2b02      	cmp	r3, #2
    ce7c:	d000      	beq.n	ce80 <rpl_process_dio+0x10>
    ce7e:	e12e      	b.n	d0de <rpl_process_dio+0x26e>
    ce80:	1c0d      	adds	r5, r1, #0
    ce82:	9000      	str	r0, [sp, #0]
#endif
    PRINTF("RPL: Ignoring a DIO with an unsupported MOP: %d\n\r", dio->mop);
    return;
  }

  dag = get_dag(dio->instance_id, &dio->dag_id);
    ce84:	7e0f      	ldrb	r7, [r1, #24]
    ce86:	1c38      	adds	r0, r7, #0
    ce88:	4b97      	ldr	r3, [pc, #604]	; (d0e8 <rpl_process_dio+0x278>)
    ce8a:	4798      	blx	r3
    ce8c:	1c04      	adds	r4, r0, #0
  instance = rpl_get_instance(dio->instance_id);
    ce8e:	1c38      	adds	r0, r7, #0
    ce90:	4b96      	ldr	r3, [pc, #600]	; (d0ec <rpl_process_dio+0x27c>)
    ce92:	4798      	blx	r3
    ce94:	1c06      	adds	r6, r0, #0

  if(dag != NULL && instance != NULL) {
    ce96:	2c00      	cmp	r4, #0
    ce98:	d06e      	beq.n	cf78 <rpl_process_dio+0x108>
    ce9a:	2800      	cmp	r0, #0
    ce9c:	d06f      	beq.n	cf7e <rpl_process_dio+0x10e>
    if(lollipop_greater_than(dio->version, dag->version)) {
    ce9e:	7def      	ldrb	r7, [r5, #23]
    cea0:	7ca3      	ldrb	r3, [r4, #18]
    cea2:	9301      	str	r3, [sp, #4]
    cea4:	1c38      	adds	r0, r7, #0
    cea6:	1c19      	adds	r1, r3, #0
    cea8:	4b91      	ldr	r3, [pc, #580]	; (d0f0 <rpl_process_dio+0x280>)
    ceaa:	4798      	blx	r3
    ceac:	2800      	cmp	r0, #0
    ceae:	d054      	beq.n	cf5a <rpl_process_dio+0xea>
      if(dag->rank == ROOT_RANK(instance)) {
    ceb0:	8ba2      	ldrh	r2, [r4, #28]
    ceb2:	239a      	movs	r3, #154	; 0x9a
    ceb4:	5af3      	ldrh	r3, [r6, r3]
    ceb6:	429a      	cmp	r2, r3
    ceb8:	d10e      	bne.n	ced8 <rpl_process_dio+0x68>
	PRINTF("RPL: Root received inconsistent DIO version number\n\r");
	dag->version = dio->version;
    ceba:	74a7      	strb	r7, [r4, #18]
	RPL_LOLLIPOP_INCREMENT(dag->version);
    cebc:	b27b      	sxtb	r3, r7
    cebe:	2b00      	cmp	r3, #0
    cec0:	da02      	bge.n	cec8 <rpl_process_dio+0x58>
    cec2:	1c7b      	adds	r3, r7, #1
    cec4:	74a3      	strb	r3, [r4, #18]
    cec6:	e003      	b.n	ced0 <rpl_process_dio+0x60>
    cec8:	1c7b      	adds	r3, r7, #1
    ceca:	227f      	movs	r2, #127	; 0x7f
    cecc:	4013      	ands	r3, r2
    cece:	74a3      	strb	r3, [r4, #18]
	rpl_reset_dio_timer(instance);
    ced0:	1c30      	adds	r0, r6, #0
    ced2:	4b88      	ldr	r3, [pc, #544]	; (d0f4 <rpl_process_dio+0x284>)
    ced4:	4798      	blx	r3
    ced6:	e102      	b.n	d0de <rpl_process_dio+0x26e>
      } else {
        PRINTF("RPL: Global repair\n\r");
        if(dio->prefix_info.length != 0) {
    ced8:	2350      	movs	r3, #80	; 0x50
    ceda:	5cea      	ldrb	r2, [r5, r3]
    cedc:	2a00      	cmp	r2, #0
    cede:	d008      	beq.n	cef2 <rpl_process_dio+0x82>
          if(dio->prefix_info.flags & UIP_ND6_RA_FLAG_AUTONOMOUS) {
    cee0:	3301      	adds	r3, #1
    cee2:	5ceb      	ldrb	r3, [r5, r3]
    cee4:	065b      	lsls	r3, r3, #25
    cee6:	d504      	bpl.n	cef2 <rpl_process_dio+0x82>
            PRINTF("RPL : Prefix announced in DIO\n\r");
            rpl_set_prefix(dag, &dio->prefix_info.prefix, dio->prefix_info.length);
    cee8:	1c29      	adds	r1, r5, #0
    ceea:	313c      	adds	r1, #60	; 0x3c
    ceec:	1c20      	adds	r0, r4, #0
    ceee:	4b82      	ldr	r3, [pc, #520]	; (d0f8 <rpl_process_dio+0x288>)
    cef0:	4798      	blx	r3
static void
global_repair(uip_ipaddr_t *from, rpl_dag_t *dag, rpl_dio_t *dio)
{
  rpl_parent_t *p;

  remove_parents(dag, 0);
    cef2:	1c20      	adds	r0, r4, #0
    cef4:	2100      	movs	r1, #0
    cef6:	4b81      	ldr	r3, [pc, #516]	; (d0fc <rpl_process_dio+0x28c>)
    cef8:	4798      	blx	r3
  dag->version = dio->version;
    cefa:	7deb      	ldrb	r3, [r5, #23]
    cefc:	74a3      	strb	r3, [r4, #18]
  dag->instance->of->reset(dag);
    cefe:	6a23      	ldr	r3, [r4, #32]
    cf00:	689b      	ldr	r3, [r3, #8]
    cf02:	681b      	ldr	r3, [r3, #0]
    cf04:	1c20      	adds	r0, r4, #0
    cf06:	4798      	blx	r3
  dag->min_rank = INFINITE_RANK;
    cf08:	2301      	movs	r3, #1
    cf0a:	425b      	negs	r3, r3
    cf0c:	8223      	strh	r3, [r4, #16]
  RPL_LOLLIPOP_INCREMENT(dag->instance->dtsn_out);
    cf0e:	6a22      	ldr	r2, [r4, #32]
    cf10:	338f      	adds	r3, #143	; 0x8f
    cf12:	5cd3      	ldrb	r3, [r2, r3]
    cf14:	b259      	sxtb	r1, r3
    cf16:	2900      	cmp	r1, #0
    cf18:	da03      	bge.n	cf22 <rpl_process_dio+0xb2>
    cf1a:	3301      	adds	r3, #1
    cf1c:	218e      	movs	r1, #142	; 0x8e
    cf1e:	5453      	strb	r3, [r2, r1]
    cf20:	e004      	b.n	cf2c <rpl_process_dio+0xbc>
    cf22:	3301      	adds	r3, #1
    cf24:	217f      	movs	r1, #127	; 0x7f
    cf26:	400b      	ands	r3, r1
    cf28:	310f      	adds	r1, #15
    cf2a:	5453      	strb	r3, [r2, r1]

  p = rpl_add_parent(dag, dio, from);
    cf2c:	1c20      	adds	r0, r4, #0
    cf2e:	1c29      	adds	r1, r5, #0
    cf30:	9a00      	ldr	r2, [sp, #0]
    cf32:	4b73      	ldr	r3, [pc, #460]	; (d100 <rpl_process_dio+0x290>)
    cf34:	4798      	blx	r3
    cf36:	1e05      	subs	r5, r0, #0
  if(p == NULL) {
    cf38:	d103      	bne.n	cf42 <rpl_process_dio+0xd2>
    PRINTF("RPL: Failed to add a parent during the global repair\n\r");
    dag->rank = INFINITE_RANK;
    cf3a:	2301      	movs	r3, #1
    cf3c:	425b      	negs	r3, r3
    cf3e:	83a3      	strh	r3, [r4, #28]
    cf40:	e0cd      	b.n	d0de <rpl_process_dio+0x26e>
  } else {
    dag->rank = dag->instance->of->calculate_rank(p, 0);
    cf42:	6a23      	ldr	r3, [r4, #32]
    cf44:	689b      	ldr	r3, [r3, #8]
    cf46:	691b      	ldr	r3, [r3, #16]
    cf48:	2100      	movs	r1, #0
    cf4a:	4798      	blx	r3
    cf4c:	83a0      	strh	r0, [r4, #28]
    dag->min_rank = dag->rank;
    cf4e:	8220      	strh	r0, [r4, #16]
    PRINTF("RPL: rpl_process_parent_event global repair\n\r");
    rpl_process_parent_event(dag->instance, p);
    cf50:	6a20      	ldr	r0, [r4, #32]
    cf52:	1c29      	adds	r1, r5, #0
    cf54:	4b6b      	ldr	r3, [pc, #428]	; (d104 <rpl_process_dio+0x294>)
    cf56:	4798      	blx	r3
    cf58:	e0c1      	b.n	d0de <rpl_process_dio+0x26e>
	global_repair(from, dag, dio);
      }
      return;
    }

    if(lollipop_greater_than(dag->version, dio->version)) {
    cf5a:	9801      	ldr	r0, [sp, #4]
    cf5c:	1c39      	adds	r1, r7, #0
    cf5e:	4b64      	ldr	r3, [pc, #400]	; (d0f0 <rpl_process_dio+0x280>)
    cf60:	4798      	blx	r3
    cf62:	2800      	cmp	r0, #0
    cf64:	d100      	bne.n	cf68 <rpl_process_dio+0xf8>
    cf66:	e0b2      	b.n	d0ce <rpl_process_dio+0x25e>
      /* The DIO sender is on an older version of the DAG. */
      PRINTF("RPL: old version received => inconsistency detected\n\r");
      if(dag->joined) {
    cf68:	7da3      	ldrb	r3, [r4, #22]
    cf6a:	2b00      	cmp	r3, #0
    cf6c:	d100      	bne.n	cf70 <rpl_process_dio+0x100>
    cf6e:	e0ae      	b.n	d0ce <rpl_process_dio+0x25e>
        rpl_reset_dio_timer(instance);
    cf70:	1c30      	adds	r0, r6, #0
    cf72:	4b60      	ldr	r3, [pc, #384]	; (d0f4 <rpl_process_dio+0x284>)
    cf74:	4798      	blx	r3
        return;
    cf76:	e0b2      	b.n	d0de <rpl_process_dio+0x26e>
      }
    }
  }

  if(instance == NULL) {
    cf78:	2800      	cmp	r0, #0
    cf7a:	d000      	beq.n	cf7e <rpl_process_dio+0x10e>
    cf7c:	e09f      	b.n	d0be <rpl_process_dio+0x24e>
    PRINTF("RPL: New instance detected: Joining...\n\r");
    rpl_join_instance(from, dio);
    cf7e:	9800      	ldr	r0, [sp, #0]
    cf80:	1c29      	adds	r1, r5, #0
    cf82:	4b61      	ldr	r3, [pc, #388]	; (d108 <rpl_process_dio+0x298>)
    cf84:	4798      	blx	r3
    return;
    cf86:	e0aa      	b.n	d0de <rpl_process_dio+0x26e>
  }

  if(instance->current_dag->rank == ROOT_RANK(instance) && instance->current_dag != dag) {
    cf88:	4294      	cmp	r4, r2
    cf8a:	d000      	beq.n	cf8e <rpl_process_dio+0x11e>
    cf8c:	e0a7      	b.n	d0de <rpl_process_dio+0x26e>
    PRINTF("RPL: Root ignored DIO for different DAG\n\r");
    return;
  }

  if(dag == NULL) {
    cf8e:	2c00      	cmp	r4, #0
    cf90:	d104      	bne.n	cf9c <rpl_process_dio+0x12c>
    PRINTF("RPL: Adding new DAG to known instance.\n\r");
    rpl_add_dag(from, dio);
    cf92:	9800      	ldr	r0, [sp, #0]
    cf94:	1c29      	adds	r1, r5, #0
    cf96:	4b5d      	ldr	r3, [pc, #372]	; (d10c <rpl_process_dio+0x29c>)
    cf98:	4798      	blx	r3
    return;
    cf9a:	e0a0      	b.n	d0de <rpl_process_dio+0x26e>
  }


  if(dio->rank < ROOT_RANK(instance)) {
    cf9c:	8a6a      	ldrh	r2, [r5, #18]
    cf9e:	4293      	cmp	r3, r2
    cfa0:	d900      	bls.n	cfa4 <rpl_process_dio+0x134>
    cfa2:	e09c      	b.n	d0de <rpl_process_dio+0x26e>
    PRINTF("RPL: Ignoring DIO with too low rank: %u\n\r",
           (unsigned)dio->rank);
    return;
  } else if(dio->rank == INFINITE_RANK && dag->joined) {
    cfa4:	4b5a      	ldr	r3, [pc, #360]	; (d110 <rpl_process_dio+0x2a0>)
    cfa6:	429a      	cmp	r2, r3
    cfa8:	d105      	bne.n	cfb6 <rpl_process_dio+0x146>
    cfaa:	7da3      	ldrb	r3, [r4, #22]
    cfac:	2b00      	cmp	r3, #0
    cfae:	d002      	beq.n	cfb6 <rpl_process_dio+0x146>
    rpl_reset_dio_timer(instance);
    cfb0:	1c30      	adds	r0, r6, #0
    cfb2:	4b50      	ldr	r3, [pc, #320]	; (d0f4 <rpl_process_dio+0x284>)
    cfb4:	4798      	blx	r3
  }

  /* Prefix Information Option treated to add new prefix */
  if(dio->prefix_info.length != 0) {
    cfb6:	2350      	movs	r3, #80	; 0x50
    cfb8:	5cea      	ldrb	r2, [r5, r3]
    cfba:	2a00      	cmp	r2, #0
    cfbc:	d008      	beq.n	cfd0 <rpl_process_dio+0x160>
    if(dio->prefix_info.flags & UIP_ND6_RA_FLAG_AUTONOMOUS) {
    cfbe:	3301      	adds	r3, #1
    cfc0:	5ceb      	ldrb	r3, [r5, r3]
    cfc2:	065b      	lsls	r3, r3, #25
    cfc4:	d504      	bpl.n	cfd0 <rpl_process_dio+0x160>
      PRINTF("RPL : Prefix announced in DIO\n\r");
      rpl_set_prefix(dag, &dio->prefix_info.prefix, dio->prefix_info.length);
    cfc6:	1c29      	adds	r1, r5, #0
    cfc8:	313c      	adds	r1, #60	; 0x3c
    cfca:	1c20      	adds	r0, r4, #0
    cfcc:	4b4a      	ldr	r3, [pc, #296]	; (d0f8 <rpl_process_dio+0x288>)
    cfce:	4798      	blx	r3
    }
  }

  if(dag->rank == ROOT_RANK(instance)) {
    cfd0:	8ba2      	ldrh	r2, [r4, #28]
    cfd2:	239a      	movs	r3, #154	; 0x9a
    cfd4:	5af3      	ldrh	r3, [r6, r3]
    cfd6:	429a      	cmp	r2, r3
    cfd8:	d109      	bne.n	cfee <rpl_process_dio+0x17e>
    if(dio->rank != INFINITE_RANK) {
    cfda:	8a6a      	ldrh	r2, [r5, #18]
    cfdc:	4b4c      	ldr	r3, [pc, #304]	; (d110 <rpl_process_dio+0x2a0>)
    cfde:	429a      	cmp	r2, r3
    cfe0:	d100      	bne.n	cfe4 <rpl_process_dio+0x174>
    cfe2:	e07c      	b.n	d0de <rpl_process_dio+0x26e>
      instance->dio_counter++;
    cfe4:	2296      	movs	r2, #150	; 0x96
    cfe6:	5cb3      	ldrb	r3, [r6, r2]
    cfe8:	3301      	adds	r3, #1
    cfea:	54b3      	strb	r3, [r6, r2]
    cfec:	e077      	b.n	d0de <rpl_process_dio+0x26e>
   * we are already part of. We consider the sender of the DIO to be
   * a candidate parent, and let rpl_process_parent_event decide
   * whether to keep it in the set.
   */

  p = rpl_find_parent(dag, from);
    cfee:	1c20      	adds	r0, r4, #0
    cff0:	9900      	ldr	r1, [sp, #0]
    cff2:	4b48      	ldr	r3, [pc, #288]	; (d114 <rpl_process_dio+0x2a4>)
    cff4:	4798      	blx	r3
    cff6:	1e07      	subs	r7, r0, #0
  if(p == NULL) {
    cff8:	d11c      	bne.n	d034 <rpl_process_dio+0x1c4>
}
/*---------------------------------------------------------------------------*/
static rpl_dag_t *
find_parent_dag(rpl_instance_t *instance, uip_ipaddr_t *addr)
{
  rpl_parent_t *p = find_parent_any_dag_any_instance(addr);
    cffa:	9800      	ldr	r0, [sp, #0]
    cffc:	4b46      	ldr	r3, [pc, #280]	; (d118 <rpl_process_dio+0x2a8>)
    cffe:	4798      	blx	r3
  if(p != NULL) {
    d000:	2800      	cmp	r0, #0
    d002:	d003      	beq.n	d00c <rpl_process_dio+0x19c>
    return p->dag;
    d004:	6843      	ldr	r3, [r0, #4]
    d006:	4699      	mov	r9, r3
   */

  p = rpl_find_parent(dag, from);
  if(p == NULL) {
    previous_dag = find_parent_dag(instance, from);
    if(previous_dag == NULL) {
    d008:	2b00      	cmp	r3, #0
    d00a:	d107      	bne.n	d01c <rpl_process_dio+0x1ac>
      /* Add the DIO sender as a candidate parent. */
      p = rpl_add_parent(dag, dio, from);
    d00c:	1c20      	adds	r0, r4, #0
    d00e:	1c29      	adds	r1, r5, #0
    d010:	9a00      	ldr	r2, [sp, #0]
    d012:	4b3b      	ldr	r3, [pc, #236]	; (d100 <rpl_process_dio+0x290>)
    d014:	4798      	blx	r3
    d016:	1e07      	subs	r7, r0, #0
      if(p == NULL) {
    d018:	d119      	bne.n	d04e <rpl_process_dio+0x1de>
    d01a:	e060      	b.n	d0de <rpl_process_dio+0x26e>
      }
      PRINTF("RPL: New candidate parent with rank %u: ", (unsigned)p->rank);
      PRINT6ADDR(from);
      PRINTF("\n\r");
    } else {
      p = rpl_find_parent(previous_dag, from);
    d01c:	1c18      	adds	r0, r3, #0
    d01e:	9900      	ldr	r1, [sp, #0]
    d020:	4b3c      	ldr	r3, [pc, #240]	; (d114 <rpl_process_dio+0x2a4>)
    d022:	4798      	blx	r3
    d024:	1e07      	subs	r7, r0, #0
      if(p != NULL) {
    d026:	d012      	beq.n	d04e <rpl_process_dio+0x1de>
        rpl_move_parent(previous_dag, dag, p);
    d028:	4648      	mov	r0, r9
    d02a:	1c21      	adds	r1, r4, #0
    d02c:	1c3a      	adds	r2, r7, #0
    d02e:	4b3b      	ldr	r3, [pc, #236]	; (d11c <rpl_process_dio+0x2ac>)
    d030:	4798      	blx	r3
    d032:	e00c      	b.n	d04e <rpl_process_dio+0x1de>
      }
    }
  } else {
    if(p->rank == dio->rank) {
    d034:	8a6b      	ldrh	r3, [r5, #18]
    d036:	8902      	ldrh	r2, [r0, #8]
    d038:	429a      	cmp	r2, r3
    d03a:	d107      	bne.n	d04c <rpl_process_dio+0x1dc>
      PRINTF("RPL: Received consistent DIO\n\r");
      if(dag->joined) {
    d03c:	7da3      	ldrb	r3, [r4, #22]
    d03e:	2b00      	cmp	r3, #0
    d040:	d005      	beq.n	d04e <rpl_process_dio+0x1de>
        instance->dio_counter++;
    d042:	2296      	movs	r2, #150	; 0x96
    d044:	5cb3      	ldrb	r3, [r6, r2]
    d046:	3301      	adds	r3, #1
    d048:	54b3      	strb	r3, [r6, r2]
    d04a:	e000      	b.n	d04e <rpl_process_dio+0x1de>
      }
    } else {
      p->rank=dio->rank;
    d04c:	8103      	strh	r3, [r0, #8]
  /* We have allocated a candidate parent; process the DIO further. */

#if RPL_DAG_MC != RPL_DAG_MC_NONE
  memcpy(&p->mc, &dio->mc, sizeof(p->mc));
#endif /* RPL_DAG_MC != RPL_DAG_MC_NONE */
  if(rpl_process_parent_event(instance, p) == 0) {
    d04e:	1c30      	adds	r0, r6, #0
    d050:	1c39      	adds	r1, r7, #0
    d052:	4b2c      	ldr	r3, [pc, #176]	; (d104 <rpl_process_dio+0x294>)
    d054:	4798      	blx	r3
    d056:	2800      	cmp	r0, #0
    d058:	d041      	beq.n	d0de <rpl_process_dio+0x26e>
    PRINTF("RPL: The candidate parent is rejected\n\r");
    return;
  }

  /* We don't use route control, so we can have only one official parent. */
  if(dag->joined && p == dag->preferred_parent) {
    d05a:	7da3      	ldrb	r3, [r4, #22]
    d05c:	2b00      	cmp	r3, #0
    d05e:	d025      	beq.n	d0ac <rpl_process_dio+0x23c>
    d060:	69a3      	ldr	r3, [r4, #24]
    d062:	42bb      	cmp	r3, r7
    d064:	d122      	bne.n	d0ac <rpl_process_dio+0x23c>
/*---------------------------------------------------------------------------*/
static int
should_send_dao(rpl_instance_t *instance, rpl_dio_t *dio, rpl_parent_t *p)
{
  /* if MOP is set to no downward routes no DAO should be sent */
  if(instance->mop == RPL_MOP_NO_DOWNWARD_ROUTES) {
    d066:	228f      	movs	r2, #143	; 0x8f
    d068:	5cb2      	ldrb	r2, [r6, r2]
    d06a:	2a00      	cmp	r2, #0
    d06c:	d016      	beq.n	d09c <rpl_process_dio+0x22c>
    return 0;
  }
  /* check if the new DTSN is more recent */
  return p == instance->current_dag->preferred_parent &&
    d06e:	68f2      	ldr	r2, [r6, #12]
    d070:	6992      	ldr	r2, [r2, #24]
    d072:	4293      	cmp	r3, r2
    d074:	d112      	bne.n	d09c <rpl_process_dio+0x22c>
    (lollipop_greater_than(dio->dtsn, p->dtsn));
    d076:	7e68      	ldrb	r0, [r5, #25]
    d078:	7b19      	ldrb	r1, [r3, #12]
    d07a:	4b1d      	ldr	r3, [pc, #116]	; (d0f0 <rpl_process_dio+0x280>)
    d07c:	4798      	blx	r3
  /* if MOP is set to no downward routes no DAO should be sent */
  if(instance->mop == RPL_MOP_NO_DOWNWARD_ROUTES) {
    return 0;
  }
  /* check if the new DTSN is more recent */
  return p == instance->current_dag->preferred_parent &&
    d07e:	2800      	cmp	r0, #0
    d080:	d117      	bne.n	d0b2 <rpl_process_dio+0x242>
    d082:	e00b      	b.n	d09c <rpl_process_dio+0x22c>
  }

  /* We don't use route control, so we can have only one official parent. */
  if(dag->joined && p == dag->preferred_parent) {
    if(should_send_dao(instance, dio, p)) {
      RPL_LOLLIPOP_INCREMENT(instance->dtsn_out);
    d084:	3301      	adds	r3, #1
    d086:	228e      	movs	r2, #142	; 0x8e
    d088:	54b3      	strb	r3, [r6, r2]
    d08a:	e004      	b.n	d096 <rpl_process_dio+0x226>
    d08c:	3301      	adds	r3, #1
    d08e:	227f      	movs	r2, #127	; 0x7f
    d090:	4013      	ands	r3, r2
    d092:	320f      	adds	r2, #15
    d094:	54b3      	strb	r3, [r6, r2]
      rpl_schedule_dao(instance);
    d096:	1c30      	adds	r0, r6, #0
    d098:	4b21      	ldr	r3, [pc, #132]	; (d120 <rpl_process_dio+0x2b0>)
    d09a:	4798      	blx	r3
    }
    /* We received a new DIO from our preferred parent.
     * Call uip_ds6_defrt_add to set a fresh value for the lifetime counter */
    uip_ds6_defrt_add(from, RPL_LIFETIME(instance, instance->default_lifetime));
    d09c:	2393      	movs	r3, #147	; 0x93
    d09e:	5cf1      	ldrb	r1, [r6, r3]
    d0a0:	3309      	adds	r3, #9
    d0a2:	5af3      	ldrh	r3, [r6, r3]
    d0a4:	4359      	muls	r1, r3
    d0a6:	9800      	ldr	r0, [sp, #0]
    d0a8:	4b1e      	ldr	r3, [pc, #120]	; (d124 <rpl_process_dio+0x2b4>)
    d0aa:	4798      	blx	r3
  }
  p->dtsn = dio->dtsn;
    d0ac:	7e6b      	ldrb	r3, [r5, #25]
    d0ae:	733b      	strb	r3, [r7, #12]
    d0b0:	e015      	b.n	d0de <rpl_process_dio+0x26e>
  }

  /* We don't use route control, so we can have only one official parent. */
  if(dag->joined && p == dag->preferred_parent) {
    if(should_send_dao(instance, dio, p)) {
      RPL_LOLLIPOP_INCREMENT(instance->dtsn_out);
    d0b2:	238e      	movs	r3, #142	; 0x8e
    d0b4:	5cf3      	ldrb	r3, [r6, r3]
    d0b6:	b25a      	sxtb	r2, r3
    d0b8:	2a00      	cmp	r2, #0
    d0ba:	dae7      	bge.n	d08c <rpl_process_dio+0x21c>
    d0bc:	e7e2      	b.n	d084 <rpl_process_dio+0x214>
    PRINTF("RPL: New instance detected: Joining...\n\r");
    rpl_join_instance(from, dio);
    return;
  }

  if(instance->current_dag->rank == ROOT_RANK(instance) && instance->current_dag != dag) {
    d0be:	68c2      	ldr	r2, [r0, #12]
    d0c0:	239a      	movs	r3, #154	; 0x9a
    d0c2:	5ac3      	ldrh	r3, [r0, r3]
    d0c4:	8b91      	ldrh	r1, [r2, #28]
    d0c6:	4299      	cmp	r1, r3
    d0c8:	d000      	beq.n	d0cc <rpl_process_dio+0x25c>
    d0ca:	e762      	b.n	cf92 <rpl_process_dio+0x122>
    d0cc:	e75c      	b.n	cf88 <rpl_process_dio+0x118>
    d0ce:	68f2      	ldr	r2, [r6, #12]
    d0d0:	239a      	movs	r3, #154	; 0x9a
    d0d2:	5af3      	ldrh	r3, [r6, r3]
    d0d4:	8b91      	ldrh	r1, [r2, #28]
    d0d6:	4299      	cmp	r1, r3
    d0d8:	d000      	beq.n	d0dc <rpl_process_dio+0x26c>
    d0da:	e75f      	b.n	cf9c <rpl_process_dio+0x12c>
    d0dc:	e754      	b.n	cf88 <rpl_process_dio+0x118>
    /* We received a new DIO from our preferred parent.
     * Call uip_ds6_defrt_add to set a fresh value for the lifetime counter */
    uip_ds6_defrt_add(from, RPL_LIFETIME(instance, instance->default_lifetime));
  }
  p->dtsn = dio->dtsn;
}
    d0de:	b002      	add	sp, #8
    d0e0:	bc04      	pop	{r2}
    d0e2:	4691      	mov	r9, r2
    d0e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    d0e6:	46c0      	nop			; (mov r8, r8)
    d0e8:	0000c991 	.word	0x0000c991
    d0ec:	0000c96d 	.word	0x0000c96d
    d0f0:	0000c20d 	.word	0x0000c20d
    d0f4:	0000e281 	.word	0x0000e281
    d0f8:	0000c399 	.word	0x0000c399
    d0fc:	0000c801 	.word	0x0000c801
    d100:	0000c4a9 	.word	0x0000c4a9
    d104:	0000cc81 	.word	0x0000cc81
    d108:	0000cacd 	.word	0x0000cacd
    d10c:	0000cd11 	.word	0x0000cd11
    d110:	0000ffff 	.word	0x0000ffff
    d114:	0000c4e5 	.word	0x0000c4e5
    d118:	0000c341 	.word	0x0000c341
    d11c:	0000c8ed 	.word	0x0000c8ed
    d120:	0000e2a5 	.word	0x0000e2a5
    d124:	000071cd 	.word	0x000071cd

0000d128 <rpl_lock_parent>:
/*---------------------------------------------------------------------------*/
void
rpl_lock_parent(rpl_parent_t *p)
{
    d128:	b508      	push	{r3, lr}
    d12a:	1c01      	adds	r1, r0, #0
  nbr_table_lock(rpl_parents, p);
    d12c:	4801      	ldr	r0, [pc, #4]	; (d134 <rpl_lock_parent+0xc>)
    d12e:	4b02      	ldr	r3, [pc, #8]	; (d138 <rpl_lock_parent+0x10>)
    d130:	4798      	blx	r3
}
    d132:	bd08      	pop	{r3, pc}
    d134:	20000124 	.word	0x20000124
    d138:	0000bd85 	.word	0x0000bd85

0000d13c <rpl_verify_header>:
#define UIP_EXT_HDR_OPT_RPL_BUF   ((struct uip_ext_hdr_opt_rpl *)&uip_buf[uip_l2_l3_hdr_len + uip_ext_opt_offset])
/*---------------------------------------------------------------------------*/
#if UIP_CONF_IPV6
int
rpl_verify_header(int uip_ext_opt_offset)
{
    d13c:	b538      	push	{r3, r4, r5, lr}
  rpl_instance_t *instance;
  int down;
  uint8_t sender_closer;
  uip_ds6_route_t *route;

  if(UIP_EXT_HDR_OPT_RPL_BUF->opt_len != RPL_HDR_OPT_LEN) {
    d13e:	4b2b      	ldr	r3, [pc, #172]	; (d1ec <rpl_verify_header+0xb0>)
    d140:	781b      	ldrb	r3, [r3, #0]
    d142:	3328      	adds	r3, #40	; 0x28
    d144:	181b      	adds	r3, r3, r0
    d146:	4a2a      	ldr	r2, [pc, #168]	; (d1f0 <rpl_verify_header+0xb4>)
    d148:	189b      	adds	r3, r3, r2
    d14a:	7859      	ldrb	r1, [r3, #1]
    PRINTF("RPL: Bad header option! (wrong length)\n\r");
    return 1;
    d14c:	2201      	movs	r2, #1
  rpl_instance_t *instance;
  int down;
  uint8_t sender_closer;
  uip_ds6_route_t *route;

  if(UIP_EXT_HDR_OPT_RPL_BUF->opt_len != RPL_HDR_OPT_LEN) {
    d14e:	2904      	cmp	r1, #4
    d150:	d149      	bne.n	d1e6 <rpl_verify_header+0xaa>
    d152:	1c04      	adds	r4, r0, #0
    PRINTF("RPL: Bad header option! (wrong length)\n\r");
    return 1;
  }

  instance = rpl_get_instance(UIP_EXT_HDR_OPT_RPL_BUF->instance);
    d154:	78d8      	ldrb	r0, [r3, #3]
    d156:	4b27      	ldr	r3, [pc, #156]	; (d1f4 <rpl_verify_header+0xb8>)
    d158:	4798      	blx	r3
    d15a:	1e05      	subs	r5, r0, #0
  if(instance == NULL) {
    d15c:	d042      	beq.n	d1e4 <rpl_verify_header+0xa8>
    PRINTF("RPL: Unknown instance: %u\n\r",
           UIP_EXT_HDR_OPT_RPL_BUF->instance);
    return 1;
  }

  if(UIP_EXT_HDR_OPT_RPL_BUF->flags & RPL_HDR_OPT_FWD_ERR) {
    d15e:	4b23      	ldr	r3, [pc, #140]	; (d1ec <rpl_verify_header+0xb0>)
    d160:	781b      	ldrb	r3, [r3, #0]
    d162:	3328      	adds	r3, #40	; 0x28
    d164:	191b      	adds	r3, r3, r4
    d166:	4a22      	ldr	r2, [pc, #136]	; (d1f0 <rpl_verify_header+0xb4>)
    d168:	189b      	adds	r3, r3, r2
    d16a:	7898      	ldrb	r0, [r3, #2]
    d16c:	0682      	lsls	r2, r0, #26
    d16e:	d516      	bpl.n	d19e <rpl_verify_header+0x62>
    PRINTF("RPL: Forward error!\n\r");
    /* We should try to repair it by removing the neighbor that caused
       the packet to be forwareded in the first place. We drop any
       routes that go through the neighbor that sent the packet to
       us. */
    route = uip_ds6_route_lookup(&UIP_IP_BUF->destipaddr);
    d170:	4821      	ldr	r0, [pc, #132]	; (d1f8 <rpl_verify_header+0xbc>)
    d172:	4b22      	ldr	r3, [pc, #136]	; (d1fc <rpl_verify_header+0xc0>)
    d174:	4798      	blx	r3
    if(route != NULL) {
    d176:	2800      	cmp	r0, #0
    d178:	d005      	beq.n	d186 <rpl_verify_header+0x4a>
      uip_ds6_route_rm(route);
    d17a:	4b21      	ldr	r3, [pc, #132]	; (d200 <rpl_verify_header+0xc4>)
    d17c:	4798      	blx	r3
      /* If we are the root and just needed to remove a DAO route,
         chances are that the network needs to be repaired. The
         rpl_repair_root() function will cause a global repair if we
         happen to be the root node of the dag. */
      PRINTF("RPL: initiate global repair\n\r");
      rpl_repair_root(instance->instance_id);
    d17e:	238c      	movs	r3, #140	; 0x8c
    d180:	5ce8      	ldrb	r0, [r5, r3]
    d182:	4b20      	ldr	r3, [pc, #128]	; (d204 <rpl_verify_header+0xc8>)
    d184:	4798      	blx	r3
    }

    /* Remove the forwarding error flag and return 0 to let the packet
       be forwarded again. */
    UIP_EXT_HDR_OPT_RPL_BUF->flags &= ~RPL_HDR_OPT_FWD_ERR;
    d186:	4b19      	ldr	r3, [pc, #100]	; (d1ec <rpl_verify_header+0xb0>)
    d188:	7818      	ldrb	r0, [r3, #0]
    d18a:	3028      	adds	r0, #40	; 0x28
    d18c:	1900      	adds	r0, r0, r4
    d18e:	4c18      	ldr	r4, [pc, #96]	; (d1f0 <rpl_verify_header+0xb4>)
    d190:	1900      	adds	r0, r0, r4
    d192:	7883      	ldrb	r3, [r0, #2]
    d194:	2220      	movs	r2, #32
    d196:	4393      	bics	r3, r2
    d198:	7083      	strb	r3, [r0, #2]
    return 0;
    d19a:	2200      	movs	r2, #0
    d19c:	e023      	b.n	d1e6 <rpl_verify_header+0xaa>
  }

  if(!instance->current_dag->joined) {
    d19e:	68ec      	ldr	r4, [r5, #12]
    d1a0:	7da1      	ldrb	r1, [r4, #22]
    PRINTF("RPL: No DAG in the instance\n\r");
    return 1;
    d1a2:	2201      	movs	r2, #1
       be forwarded again. */
    UIP_EXT_HDR_OPT_RPL_BUF->flags &= ~RPL_HDR_OPT_FWD_ERR;
    return 0;
  }

  if(!instance->current_dag->joined) {
    d1a4:	2900      	cmp	r1, #0
    d1a6:	d01e      	beq.n	d1e6 <rpl_verify_header+0xaa>
  down = 0;
  if(UIP_EXT_HDR_OPT_RPL_BUF->flags & RPL_HDR_OPT_DOWN) {
    down = 1;
  }

  sender_closer = UIP_EXT_HDR_OPT_RPL_BUF->senderrank < instance->current_dag->rank;
    d1a8:	7919      	ldrb	r1, [r3, #4]
    d1aa:	795a      	ldrb	r2, [r3, #5]
    d1ac:	0212      	lsls	r2, r2, #8
    d1ae:	8ba4      	ldrh	r4, [r4, #28]
    d1b0:	430a      	orrs	r2, r1
    d1b2:	42a2      	cmp	r2, r4
    d1b4:	4192      	sbcs	r2, r2
    d1b6:	4251      	negs	r1, r2
	 sender_closer,
	 UIP_EXT_HDR_OPT_RPL_BUF->senderrank,
	 instance->current_dag->rank
	 );

  if((down && !sender_closer) || (!down && sender_closer)) {
    d1b8:	b242      	sxtb	r2, r0
    d1ba:	2a00      	cmp	r2, #0
    d1bc:	da03      	bge.n	d1c6 <rpl_verify_header+0x8a>
    return 0;
  }

  PRINTF("RPL: Rank OK\n\r");

  return 0;
    d1be:	2200      	movs	r2, #0
	 sender_closer,
	 UIP_EXT_HDR_OPT_RPL_BUF->senderrank,
	 instance->current_dag->rank
	 );

  if((down && !sender_closer) || (!down && sender_closer)) {
    d1c0:	2900      	cmp	r1, #0
    d1c2:	d110      	bne.n	d1e6 <rpl_verify_header+0xaa>
    d1c4:	e002      	b.n	d1cc <rpl_verify_header+0x90>
    return 0;
  }

  PRINTF("RPL: Rank OK\n\r");

  return 0;
    d1c6:	2200      	movs	r2, #0
	 sender_closer,
	 UIP_EXT_HDR_OPT_RPL_BUF->senderrank,
	 instance->current_dag->rank
	 );

  if((down && !sender_closer) || (!down && sender_closer)) {
    d1c8:	2900      	cmp	r1, #0
    d1ca:	d00c      	beq.n	d1e6 <rpl_verify_header+0xaa>
    PRINTF("RPL: Loop detected - senderrank: %d my-rank: %d sender_closer: %d\n\r",
	   UIP_EXT_HDR_OPT_RPL_BUF->senderrank, instance->current_dag->rank,
	   sender_closer);
    if(UIP_EXT_HDR_OPT_RPL_BUF->flags & RPL_HDR_OPT_RANK_ERR) {
    d1cc:	0642      	lsls	r2, r0, #25
    d1ce:	d504      	bpl.n	d1da <rpl_verify_header+0x9e>
      PRINTF("RPL: Rank error signalled in RPL option!\n\r");
      /* We should try to repair it, not implemented for the moment */
      rpl_reset_dio_timer(instance);
    d1d0:	1c28      	adds	r0, r5, #0
    d1d2:	4b0d      	ldr	r3, [pc, #52]	; (d208 <rpl_verify_header+0xcc>)
    d1d4:	4798      	blx	r3
      /* Forward the packet anyway. */
      return 0;
    d1d6:	2200      	movs	r2, #0
    d1d8:	e005      	b.n	d1e6 <rpl_verify_header+0xaa>
    }
    PRINTF("RPL: Single error tolerated\n\r");
    UIP_EXT_HDR_OPT_RPL_BUF->flags |= RPL_HDR_OPT_RANK_ERR;
    d1da:	2240      	movs	r2, #64	; 0x40
    d1dc:	4310      	orrs	r0, r2
    d1de:	7098      	strb	r0, [r3, #2]
    return 0;
    d1e0:	2200      	movs	r2, #0
    d1e2:	e000      	b.n	d1e6 <rpl_verify_header+0xaa>

  instance = rpl_get_instance(UIP_EXT_HDR_OPT_RPL_BUF->instance);
  if(instance == NULL) {
    PRINTF("RPL: Unknown instance: %u\n\r",
           UIP_EXT_HDR_OPT_RPL_BUF->instance);
    return 1;
    d1e4:	2201      	movs	r2, #1
  }

  PRINTF("RPL: Rank OK\n\r");

  return 0;
}
    d1e6:	1c10      	adds	r0, r2, #0
    d1e8:	bd38      	pop	{r3, r4, r5, pc}
    d1ea:	46c0      	nop			; (mov r8, r8)
    d1ec:	20000b12 	.word	0x20000b12
    d1f0:	20002cd4 	.word	0x20002cd4
    d1f4:	0000c96d 	.word	0x0000c96d
    d1f8:	20002cec 	.word	0x20002cec
    d1fc:	00006e79 	.word	0x00006e79
    d200:	00006efd 	.word	0x00006efd
    d204:	0000c9e9 	.word	0x0000c9e9
    d208:	0000e281 	.word	0x0000e281

0000d20c <rpl_update_header_empty>:
  }
}
/*---------------------------------------------------------------------------*/
void
rpl_update_header_empty(void)
{
    d20c:	b570      	push	{r4, r5, r6, lr}
  rpl_instance_t *instance;
  int uip_ext_opt_offset;
  int last_uip_ext_len;

  last_uip_ext_len = uip_ext_len;
    d20e:	4b4d      	ldr	r3, [pc, #308]	; (d344 <rpl_update_header_empty+0x138>)
    d210:	781c      	ldrb	r4, [r3, #0]
  uip_ext_len = 0;
    d212:	2200      	movs	r2, #0
    d214:	701a      	strb	r2, [r3, #0]
  uip_ext_opt_offset = 2;

  PRINTF("RPL: Verifying the presence of the RPL header option\n\r");

  switch(UIP_IP_BUF->proto) {
    d216:	4b4c      	ldr	r3, [pc, #304]	; (d348 <rpl_update_header_empty+0x13c>)
    d218:	799b      	ldrb	r3, [r3, #6]
    d21a:	2b00      	cmp	r3, #0
    d21c:	d118      	bne.n	d250 <rpl_update_header_empty+0x44>
  case UIP_PROTO_HBHO:
    if(UIP_HBHO_BUF->len != RPL_HOP_BY_HOP_LEN - 8) {
    d21e:	3329      	adds	r3, #41	; 0x29
    d220:	4a49      	ldr	r2, [pc, #292]	; (d348 <rpl_update_header_empty+0x13c>)
    d222:	5cd3      	ldrb	r3, [r2, r3]
    d224:	2b00      	cmp	r3, #0
    d226:	d002      	beq.n	d22e <rpl_update_header_empty+0x22>
      PRINTF("RPL: Non RPL Hop-by-hop options support not implemented\n\r");
      uip_ext_len = last_uip_ext_len;
    d228:	4b46      	ldr	r3, [pc, #280]	; (d344 <rpl_update_header_empty+0x138>)
    d22a:	701c      	strb	r4, [r3, #0]
      return;
    d22c:	e089      	b.n	d342 <rpl_update_header_empty+0x136>
    }
    instance = rpl_get_instance(UIP_EXT_HDR_OPT_RPL_BUF->instance);
    d22e:	232d      	movs	r3, #45	; 0x2d
    d230:	4a45      	ldr	r2, [pc, #276]	; (d348 <rpl_update_header_empty+0x13c>)
    d232:	5cd0      	ldrb	r0, [r2, r3]
    d234:	4b45      	ldr	r3, [pc, #276]	; (d34c <rpl_update_header_empty+0x140>)
    d236:	4798      	blx	r3
    if(instance == NULL || !instance->used || !instance->current_dag->joined) {
    d238:	2800      	cmp	r0, #0
    d23a:	d100      	bne.n	d23e <rpl_update_header_empty+0x32>
    d23c:	e081      	b.n	d342 <rpl_update_header_empty+0x136>
    d23e:	238d      	movs	r3, #141	; 0x8d
    d240:	5cc3      	ldrb	r3, [r0, r3]
    d242:	2b00      	cmp	r3, #0
    d244:	d07d      	beq.n	d342 <rpl_update_header_empty+0x136>
    d246:	68c1      	ldr	r1, [r0, #12]
    d248:	7d8b      	ldrb	r3, [r1, #22]
    d24a:	2b00      	cmp	r3, #0
    d24c:	d13a      	bne.n	d2c4 <rpl_update_header_empty+0xb8>
    d24e:	e078      	b.n	d342 <rpl_update_header_empty+0x136>
      return;
    }
    break;
  default:
    PRINTF("RPL: No hop-by-hop option found, creating it\n\r");
    if(uip_len + RPL_HOP_BY_HOP_LEN > UIP_BUFSIZE) {
    d250:	4b3f      	ldr	r3, [pc, #252]	; (d350 <rpl_update_header_empty+0x144>)
    d252:	881e      	ldrh	r6, [r3, #0]
    d254:	1c32      	adds	r2, r6, #0
    d256:	3208      	adds	r2, #8
    d258:	23c8      	movs	r3, #200	; 0xc8
    d25a:	005b      	lsls	r3, r3, #1
    d25c:	429a      	cmp	r2, r3
    d25e:	dd02      	ble.n	d266 <rpl_update_header_empty+0x5a>
      PRINTF("RPL: Packet too long: impossible to add hop-by-hop option\n\r");
      uip_ext_len = last_uip_ext_len;
    d260:	4b38      	ldr	r3, [pc, #224]	; (d344 <rpl_update_header_empty+0x138>)
    d262:	701c      	strb	r4, [r3, #0]
      return;
    d264:	e06d      	b.n	d342 <rpl_update_header_empty+0x136>
static void
set_rpl_opt(unsigned uip_ext_opt_offset)
{
  uint8_t temp_len;

  memmove(UIP_HBHO_NEXT_BUF, UIP_EXT_BUF, uip_len - UIP_IPH_LEN);
    d266:	4d3b      	ldr	r5, [pc, #236]	; (d354 <rpl_update_header_empty+0x148>)
    d268:	1c29      	adds	r1, r5, #0
    d26a:	3908      	subs	r1, #8
    d26c:	1c32      	adds	r2, r6, #0
    d26e:	3a28      	subs	r2, #40	; 0x28
    d270:	1c28      	adds	r0, r5, #0
    d272:	4b39      	ldr	r3, [pc, #228]	; (d358 <rpl_update_header_empty+0x14c>)
    d274:	4798      	blx	r3
  memset(UIP_HBHO_BUF, 0, RPL_HOP_BY_HOP_LEN);
    d276:	2300      	movs	r3, #0
  UIP_HBHO_BUF->next = UIP_IP_BUF->proto;
    d278:	1c28      	adds	r0, r5, #0
    d27a:	3830      	subs	r0, #48	; 0x30
    d27c:	7981      	ldrb	r1, [r0, #6]
    d27e:	2228      	movs	r2, #40	; 0x28
    d280:	5481      	strb	r1, [r0, r2]
  UIP_IP_BUF->proto = UIP_PROTO_HBHO;
    d282:	7183      	strb	r3, [r0, #6]
  UIP_HBHO_BUF->len = RPL_HOP_BY_HOP_LEN - 8;
    d284:	3201      	adds	r2, #1
    d286:	5483      	strb	r3, [r0, r2]
  UIP_EXT_HDR_OPT_RPL_BUF->opt_type = UIP_EXT_HDR_OPT_RPL;
    d288:	2163      	movs	r1, #99	; 0x63
    d28a:	3201      	adds	r2, #1
    d28c:	5481      	strb	r1, [r0, r2]
  UIP_EXT_HDR_OPT_RPL_BUF->opt_len = RPL_HDR_OPT_LEN;
    d28e:	395f      	subs	r1, #95	; 0x5f
    d290:	3201      	adds	r2, #1
    d292:	5481      	strb	r1, [r0, r2]
  UIP_EXT_HDR_OPT_RPL_BUF->flags = 0;
    d294:	3201      	adds	r2, #1
    d296:	5483      	strb	r3, [r0, r2]
  UIP_EXT_HDR_OPT_RPL_BUF->instance = 0;
    d298:	3201      	adds	r2, #1
    d29a:	5483      	strb	r3, [r0, r2]
  UIP_EXT_HDR_OPT_RPL_BUF->senderrank = 0;
    d29c:	85c3      	strh	r3, [r0, #46]	; 0x2e
  uip_len += RPL_HOP_BY_HOP_LEN;
    d29e:	1c33      	adds	r3, r6, #0
    d2a0:	3308      	adds	r3, #8
    d2a2:	4a2b      	ldr	r2, [pc, #172]	; (d350 <rpl_update_header_empty+0x144>)
    d2a4:	8013      	strh	r3, [r2, #0]
  temp_len = UIP_IP_BUF->len[1];
    d2a6:	7942      	ldrb	r2, [r0, #5]
  UIP_IP_BUF->len[1] += UIP_HBHO_BUF->len + 8;
    d2a8:	1c13      	adds	r3, r2, #0
    d2aa:	3308      	adds	r3, #8
    d2ac:	b2db      	uxtb	r3, r3
    d2ae:	7143      	strb	r3, [r0, #5]
  if(UIP_IP_BUF->len[1] < temp_len) {
    d2b0:	429a      	cmp	r2, r3
    d2b2:	d903      	bls.n	d2bc <rpl_update_header_empty+0xb0>
    UIP_IP_BUF->len[0]++;
    d2b4:	4a24      	ldr	r2, [pc, #144]	; (d348 <rpl_update_header_empty+0x13c>)
    d2b6:	7913      	ldrb	r3, [r2, #4]
    d2b8:	3301      	adds	r3, #1
    d2ba:	7113      	strb	r3, [r2, #4]
      PRINTF("RPL: Packet too long: impossible to add hop-by-hop option\n\r");
      uip_ext_len = last_uip_ext_len;
      return;
    }
    set_rpl_opt(uip_ext_opt_offset);
    uip_ext_len = last_uip_ext_len + RPL_HOP_BY_HOP_LEN;
    d2bc:	3408      	adds	r4, #8
    d2be:	4b21      	ldr	r3, [pc, #132]	; (d344 <rpl_update_header_empty+0x138>)
    d2c0:	701c      	strb	r4, [r3, #0]
    return;
    d2c2:	e03e      	b.n	d342 <rpl_update_header_empty+0x136>
  }

  switch(UIP_EXT_HDR_OPT_BUF->type) {
    d2c4:	4b1f      	ldr	r3, [pc, #124]	; (d344 <rpl_update_header_empty+0x138>)
    d2c6:	781b      	ldrb	r3, [r3, #0]
    d2c8:	332a      	adds	r3, #42	; 0x2a
    d2ca:	4a1f      	ldr	r2, [pc, #124]	; (d348 <rpl_update_header_empty+0x13c>)
    d2cc:	189b      	adds	r3, r3, r2
    d2ce:	781a      	ldrb	r2, [r3, #0]
    d2d0:	2a63      	cmp	r2, #99	; 0x63
    d2d2:	d134      	bne.n	d33e <rpl_update_header_empty+0x132>
  case UIP_EXT_HDR_OPT_RPL:
    PRINTF("RPL: Updating RPL option\n\r");
    UIP_EXT_HDR_OPT_RPL_BUF->senderrank = instance->current_dag->rank;
    d2d4:	8b8a      	ldrh	r2, [r1, #28]
    d2d6:	7f09      	ldrb	r1, [r1, #28]
    d2d8:	7119      	strb	r1, [r3, #4]
    d2da:	0a12      	lsrs	r2, r2, #8
    d2dc:	715a      	strb	r2, [r3, #5]

    /* Check the direction of the down flag, as per Section 11.2.2.3,
       which states that if a packet is going down it should in
       general not go back up again. If this happens, a
       RPL_HDR_OPT_FWD_ERR should be flagged. */
    if((UIP_EXT_HDR_OPT_RPL_BUF->flags & RPL_HDR_OPT_DOWN)) {
    d2de:	789b      	ldrb	r3, [r3, #2]
    d2e0:	2b7f      	cmp	r3, #127	; 0x7f
    d2e2:	d90f      	bls.n	d304 <rpl_update_header_empty+0xf8>
      if(uip_ds6_route_lookup(&UIP_IP_BUF->destipaddr) == NULL) {
    d2e4:	481d      	ldr	r0, [pc, #116]	; (d35c <rpl_update_header_empty+0x150>)
    d2e6:	4b1e      	ldr	r3, [pc, #120]	; (d360 <rpl_update_header_empty+0x154>)
    d2e8:	4798      	blx	r3
    d2ea:	2800      	cmp	r0, #0
    d2ec:	d124      	bne.n	d338 <rpl_update_header_empty+0x12c>
        UIP_EXT_HDR_OPT_RPL_BUF->flags |= RPL_HDR_OPT_FWD_ERR;
    d2ee:	4b15      	ldr	r3, [pc, #84]	; (d344 <rpl_update_header_empty+0x138>)
    d2f0:	781b      	ldrb	r3, [r3, #0]
    d2f2:	332a      	adds	r3, #42	; 0x2a
    d2f4:	1c1a      	adds	r2, r3, #0
    d2f6:	4b14      	ldr	r3, [pc, #80]	; (d348 <rpl_update_header_empty+0x13c>)
    d2f8:	18d3      	adds	r3, r2, r3
    d2fa:	7899      	ldrb	r1, [r3, #2]
    d2fc:	2220      	movs	r2, #32
    d2fe:	430a      	orrs	r2, r1
    d300:	709a      	strb	r2, [r3, #2]
    d302:	e019      	b.n	d338 <rpl_update_header_empty+0x12c>
      }
    } else {
      /* Set the down extension flag correctly as described in Section
         11.2 of RFC6550. If the packet progresses along a DAO route,
         the down flag should be set. */
      if(uip_ds6_route_lookup(&UIP_IP_BUF->destipaddr) == NULL) {
    d304:	4815      	ldr	r0, [pc, #84]	; (d35c <rpl_update_header_empty+0x150>)
    d306:	4b16      	ldr	r3, [pc, #88]	; (d360 <rpl_update_header_empty+0x154>)
    d308:	4798      	blx	r3
    d30a:	2800      	cmp	r0, #0
    d30c:	d10a      	bne.n	d324 <rpl_update_header_empty+0x118>
        /* No route was found, so this packet will go towards the RPL
           root. If so, we should not set the down flag. */
        UIP_EXT_HDR_OPT_RPL_BUF->flags &= ~RPL_HDR_OPT_DOWN;
    d30e:	4b0d      	ldr	r3, [pc, #52]	; (d344 <rpl_update_header_empty+0x138>)
    d310:	781b      	ldrb	r3, [r3, #0]
    d312:	332a      	adds	r3, #42	; 0x2a
    d314:	1c1a      	adds	r2, r3, #0
    d316:	4b0c      	ldr	r3, [pc, #48]	; (d348 <rpl_update_header_empty+0x13c>)
    d318:	18d3      	adds	r3, r2, r3
    d31a:	789a      	ldrb	r2, [r3, #2]
    d31c:	217f      	movs	r1, #127	; 0x7f
    d31e:	400a      	ands	r2, r1
    d320:	709a      	strb	r2, [r3, #2]
    d322:	e009      	b.n	d338 <rpl_update_header_empty+0x12c>
        PRINTF("RPL option going up\n\r");
      } else {
        /* A DAO route was found so we set the down flag. */
        UIP_EXT_HDR_OPT_RPL_BUF->flags |= RPL_HDR_OPT_DOWN;
    d324:	4b07      	ldr	r3, [pc, #28]	; (d344 <rpl_update_header_empty+0x138>)
    d326:	781b      	ldrb	r3, [r3, #0]
    d328:	332a      	adds	r3, #42	; 0x2a
    d32a:	4a07      	ldr	r2, [pc, #28]	; (d348 <rpl_update_header_empty+0x13c>)
    d32c:	189b      	adds	r3, r3, r2
    d32e:	789a      	ldrb	r2, [r3, #2]
    d330:	2180      	movs	r1, #128	; 0x80
    d332:	4249      	negs	r1, r1
    d334:	430a      	orrs	r2, r1
    d336:	709a      	strb	r2, [r3, #2]
        PRINTF("RPL option going down\n\r");
      }
    }

    uip_ext_len = last_uip_ext_len;
    d338:	4b02      	ldr	r3, [pc, #8]	; (d344 <rpl_update_header_empty+0x138>)
    d33a:	701c      	strb	r4, [r3, #0]
    return;
    d33c:	e001      	b.n	d342 <rpl_update_header_empty+0x136>
  default:
    PRINTF("RPL: Multi Hop-by-hop options not implemented\n\r");
    uip_ext_len = last_uip_ext_len;
    d33e:	4b01      	ldr	r3, [pc, #4]	; (d344 <rpl_update_header_empty+0x138>)
    d340:	701c      	strb	r4, [r3, #0]
    return;
  }
}
    d342:	bd70      	pop	{r4, r5, r6, pc}
    d344:	20000b12 	.word	0x20000b12
    d348:	20002cd4 	.word	0x20002cd4
    d34c:	0000c96d 	.word	0x0000c96d
    d350:	20002cc0 	.word	0x20002cc0
    d354:	20002d04 	.word	0x20002d04
    d358:	00010b41 	.word	0x00010b41
    d35c:	20002cec 	.word	0x20002cec
    d360:	00006e79 	.word	0x00006e79

0000d364 <rpl_update_header_final>:
/*---------------------------------------------------------------------------*/
int
rpl_update_header_final(uip_ipaddr_t *addr)
{
    d364:	b510      	push	{r4, lr}
  rpl_parent_t *parent;
  int uip_ext_opt_offset;
  int last_uip_ext_len;

  last_uip_ext_len = uip_ext_len;
    d366:	4b28      	ldr	r3, [pc, #160]	; (d408 <rpl_update_header_final+0xa4>)
    d368:	781c      	ldrb	r4, [r3, #0]
  uip_ext_len = 0;
    d36a:	2200      	movs	r2, #0
    d36c:	701a      	strb	r2, [r3, #0]
  uip_ext_opt_offset = 2;

  if(UIP_IP_BUF->proto == UIP_PROTO_HBHO) {
    d36e:	4b27      	ldr	r3, [pc, #156]	; (d40c <rpl_update_header_final+0xa8>)
    d370:	799a      	ldrb	r2, [r3, #6]
        UIP_EXT_HDR_OPT_RPL_BUF->senderrank = default_instance->current_dag->rank;
        uip_ext_len = last_uip_ext_len;
      }
    }
  }
  return 0;
    d372:	2300      	movs	r3, #0

  last_uip_ext_len = uip_ext_len;
  uip_ext_len = 0;
  uip_ext_opt_offset = 2;

  if(UIP_IP_BUF->proto == UIP_PROTO_HBHO) {
    d374:	2a00      	cmp	r2, #0
    d376:	d145      	bne.n	d404 <rpl_update_header_final+0xa0>
    if(UIP_HBHO_BUF->len != RPL_HOP_BY_HOP_LEN - 8) {
    d378:	3329      	adds	r3, #41	; 0x29
    d37a:	4a24      	ldr	r2, [pc, #144]	; (d40c <rpl_update_header_final+0xa8>)
    d37c:	5cd3      	ldrb	r3, [r2, r3]
    d37e:	2b00      	cmp	r3, #0
    d380:	d003      	beq.n	d38a <rpl_update_header_final+0x26>
      PRINTF("RPL: Non RPL Hop-by-hop options support not implemented\n\r");
      uip_ext_len = last_uip_ext_len;
    d382:	4b21      	ldr	r3, [pc, #132]	; (d408 <rpl_update_header_final+0xa4>)
    d384:	701c      	strb	r4, [r3, #0]
      return 0;
    d386:	2300      	movs	r3, #0
    d388:	e03c      	b.n	d404 <rpl_update_header_final+0xa0>
    }

    if(UIP_EXT_HDR_OPT_BUF->type == UIP_EXT_HDR_OPT_RPL) {
    d38a:	232a      	movs	r3, #42	; 0x2a
    d38c:	4a1f      	ldr	r2, [pc, #124]	; (d40c <rpl_update_header_final+0xa8>)
    d38e:	5cd2      	ldrb	r2, [r2, r3]
        UIP_EXT_HDR_OPT_RPL_BUF->senderrank = default_instance->current_dag->rank;
        uip_ext_len = last_uip_ext_len;
      }
    }
  }
  return 0;
    d390:	2300      	movs	r3, #0
      PRINTF("RPL: Non RPL Hop-by-hop options support not implemented\n\r");
      uip_ext_len = last_uip_ext_len;
      return 0;
    }

    if(UIP_EXT_HDR_OPT_BUF->type == UIP_EXT_HDR_OPT_RPL) {
    d392:	2a63      	cmp	r2, #99	; 0x63
    d394:	d136      	bne.n	d404 <rpl_update_header_final+0xa0>
      if(UIP_EXT_HDR_OPT_RPL_BUF->senderrank == 0) {
    d396:	4b1d      	ldr	r3, [pc, #116]	; (d40c <rpl_update_header_final+0xa8>)
    d398:	8dda      	ldrh	r2, [r3, #46]	; 0x2e
        UIP_EXT_HDR_OPT_RPL_BUF->senderrank = default_instance->current_dag->rank;
        uip_ext_len = last_uip_ext_len;
      }
    }
  }
  return 0;
    d39a:	2300      	movs	r3, #0
      uip_ext_len = last_uip_ext_len;
      return 0;
    }

    if(UIP_EXT_HDR_OPT_BUF->type == UIP_EXT_HDR_OPT_RPL) {
      if(UIP_EXT_HDR_OPT_RPL_BUF->senderrank == 0) {
    d39c:	2a00      	cmp	r2, #0
    d39e:	d131      	bne.n	d404 <rpl_update_header_final+0xa0>
        PRINTF("RPL: Updating RPL option\n\r");
        if(default_instance == NULL || !default_instance->used || !default_instance->current_dag->joined) {
    d3a0:	4b1b      	ldr	r3, [pc, #108]	; (d410 <rpl_update_header_final+0xac>)
    d3a2:	681a      	ldr	r2, [r3, #0]
    d3a4:	2a00      	cmp	r2, #0
    d3a6:	d02c      	beq.n	d402 <rpl_update_header_final+0x9e>
    d3a8:	238d      	movs	r3, #141	; 0x8d
    d3aa:	5cd1      	ldrb	r1, [r2, r3]
          PRINTF("RPL: Unable to add hop-by-hop extension header: incorrect default instance\n\r");
          return 1;
    d3ac:	3b8c      	subs	r3, #140	; 0x8c
    }

    if(UIP_EXT_HDR_OPT_BUF->type == UIP_EXT_HDR_OPT_RPL) {
      if(UIP_EXT_HDR_OPT_RPL_BUF->senderrank == 0) {
        PRINTF("RPL: Updating RPL option\n\r");
        if(default_instance == NULL || !default_instance->used || !default_instance->current_dag->joined) {
    d3ae:	2900      	cmp	r1, #0
    d3b0:	d028      	beq.n	d404 <rpl_update_header_final+0xa0>
    d3b2:	68d2      	ldr	r2, [r2, #12]
    d3b4:	7d91      	ldrb	r1, [r2, #22]
    d3b6:	2900      	cmp	r1, #0
    d3b8:	d024      	beq.n	d404 <rpl_update_header_final+0xa0>
    d3ba:	1c01      	adds	r1, r0, #0
          PRINTF("RPL: Unable to add hop-by-hop extension header: incorrect default instance\n\r");
          return 1;
        }
        parent = rpl_find_parent(default_instance->current_dag, addr);
    d3bc:	1c10      	adds	r0, r2, #0
    d3be:	4b15      	ldr	r3, [pc, #84]	; (d414 <rpl_update_header_final+0xb0>)
    d3c0:	4798      	blx	r3
        if(parent == NULL || parent != parent->dag->preferred_parent) {
    d3c2:	2800      	cmp	r0, #0
    d3c4:	d003      	beq.n	d3ce <rpl_update_header_final+0x6a>
    d3c6:	6843      	ldr	r3, [r0, #4]
    d3c8:	699b      	ldr	r3, [r3, #24]
    d3ca:	4283      	cmp	r3, r0
    d3cc:	d006      	beq.n	d3dc <rpl_update_header_final+0x78>
          UIP_EXT_HDR_OPT_RPL_BUF->flags = RPL_HDR_OPT_DOWN;
    d3ce:	4b0e      	ldr	r3, [pc, #56]	; (d408 <rpl_update_header_final+0xa4>)
    d3d0:	781b      	ldrb	r3, [r3, #0]
    d3d2:	332a      	adds	r3, #42	; 0x2a
    d3d4:	4a0d      	ldr	r2, [pc, #52]	; (d40c <rpl_update_header_final+0xa8>)
    d3d6:	189b      	adds	r3, r3, r2
    d3d8:	2280      	movs	r2, #128	; 0x80
    d3da:	709a      	strb	r2, [r3, #2]
        }
        UIP_EXT_HDR_OPT_RPL_BUF->instance = default_instance->instance_id;
    d3dc:	490a      	ldr	r1, [pc, #40]	; (d408 <rpl_update_header_final+0xa4>)
    d3de:	780b      	ldrb	r3, [r1, #0]
    d3e0:	332a      	adds	r3, #42	; 0x2a
    d3e2:	4a0a      	ldr	r2, [pc, #40]	; (d40c <rpl_update_header_final+0xa8>)
    d3e4:	189b      	adds	r3, r3, r2
    d3e6:	4a0a      	ldr	r2, [pc, #40]	; (d410 <rpl_update_header_final+0xac>)
    d3e8:	6812      	ldr	r2, [r2, #0]
    d3ea:	208c      	movs	r0, #140	; 0x8c
    d3ec:	5c10      	ldrb	r0, [r2, r0]
    d3ee:	70d8      	strb	r0, [r3, #3]
        UIP_EXT_HDR_OPT_RPL_BUF->senderrank = default_instance->current_dag->rank;
    d3f0:	68d0      	ldr	r0, [r2, #12]
    d3f2:	8b82      	ldrh	r2, [r0, #28]
    d3f4:	7f00      	ldrb	r0, [r0, #28]
    d3f6:	7118      	strb	r0, [r3, #4]
    d3f8:	0a12      	lsrs	r2, r2, #8
    d3fa:	715a      	strb	r2, [r3, #5]
        uip_ext_len = last_uip_ext_len;
    d3fc:	700c      	strb	r4, [r1, #0]
      }
    }
  }
  return 0;
    d3fe:	2300      	movs	r3, #0
    d400:	e000      	b.n	d404 <rpl_update_header_final+0xa0>
    if(UIP_EXT_HDR_OPT_BUF->type == UIP_EXT_HDR_OPT_RPL) {
      if(UIP_EXT_HDR_OPT_RPL_BUF->senderrank == 0) {
        PRINTF("RPL: Updating RPL option\n\r");
        if(default_instance == NULL || !default_instance->used || !default_instance->current_dag->joined) {
          PRINTF("RPL: Unable to add hop-by-hop extension header: incorrect default instance\n\r");
          return 1;
    d402:	2301      	movs	r3, #1
        uip_ext_len = last_uip_ext_len;
      }
    }
  }
  return 0;
}
    d404:	1c18      	adds	r0, r3, #0
    d406:	bd10      	pop	{r4, pc}
    d408:	20000b12 	.word	0x20000b12
    d40c:	20002cd4 	.word	0x20002cd4
    d410:	20003284 	.word	0x20003284
    d414:	0000c4e5 	.word	0x0000c4e5

0000d418 <rpl_invert_header>:
  }
}
/*---------------------------------------------------------------------------*/
uint8_t
rpl_invert_header(void)
{
    d418:	b538      	push	{r3, r4, r5, lr}
  uint8_t uip_ext_opt_offset;
  uint8_t last_uip_ext_len;

  last_uip_ext_len = uip_ext_len;
    d41a:	4b13      	ldr	r3, [pc, #76]	; (d468 <rpl_invert_header+0x50>)
    d41c:	781c      	ldrb	r4, [r3, #0]
  uip_ext_len = 0;
    d41e:	2200      	movs	r2, #0
    d420:	701a      	strb	r2, [r3, #0]
  uip_ext_opt_offset = 2;

  PRINTF("RPL: Verifying the presence of the RPL header option\n\r");
  switch(UIP_IP_BUF->proto) {
    d422:	4b12      	ldr	r3, [pc, #72]	; (d46c <rpl_invert_header+0x54>)
    d424:	7998      	ldrb	r0, [r3, #6]
    d426:	2800      	cmp	r0, #0
    d428:	d003      	beq.n	d432 <rpl_invert_header+0x1a>
  case UIP_PROTO_HBHO:
    break;
  default:
    PRINTF("RPL: No hop-by-hop Option found\n\r");
    uip_ext_len = last_uip_ext_len;
    d42a:	4b0f      	ldr	r3, [pc, #60]	; (d468 <rpl_invert_header+0x50>)
    d42c:	701c      	strb	r4, [r3, #0]
    return 0;
    d42e:	2000      	movs	r0, #0
    d430:	e019      	b.n	d466 <rpl_invert_header+0x4e>
  }

  switch (UIP_EXT_HDR_OPT_BUF->type) {
    d432:	232a      	movs	r3, #42	; 0x2a
    d434:	4a0d      	ldr	r2, [pc, #52]	; (d46c <rpl_invert_header+0x54>)
    d436:	5cd3      	ldrb	r3, [r2, r3]
    d438:	2b63      	cmp	r3, #99	; 0x63
    d43a:	d112      	bne.n	d462 <rpl_invert_header+0x4a>
  case UIP_EXT_HDR_OPT_RPL:
    PRINTF("RPL: Updating RPL option (switching direction)\n\r");
    UIP_EXT_HDR_OPT_RPL_BUF->flags &= RPL_HDR_OPT_DOWN;
    UIP_EXT_HDR_OPT_RPL_BUF->flags ^= RPL_HDR_OPT_DOWN;
    d43c:	1c15      	adds	r5, r2, #0
  }

  switch (UIP_EXT_HDR_OPT_BUF->type) {
  case UIP_EXT_HDR_OPT_RPL:
    PRINTF("RPL: Updating RPL option (switching direction)\n\r");
    UIP_EXT_HDR_OPT_RPL_BUF->flags &= RPL_HDR_OPT_DOWN;
    d43e:	222c      	movs	r2, #44	; 0x2c
    d440:	5cab      	ldrb	r3, [r5, r2]
    d442:	217f      	movs	r1, #127	; 0x7f
    d444:	438b      	bics	r3, r1
    UIP_EXT_HDR_OPT_RPL_BUF->flags ^= RPL_HDR_OPT_DOWN;
    d446:	39ff      	subs	r1, #255	; 0xff
    d448:	404b      	eors	r3, r1
    d44a:	54ab      	strb	r3, [r5, r2]
    UIP_EXT_HDR_OPT_RPL_BUF->senderrank = rpl_get_instance(UIP_EXT_HDR_OPT_RPL_BUF->instance)->current_dag->rank;
    d44c:	232d      	movs	r3, #45	; 0x2d
    d44e:	5ce8      	ldrb	r0, [r5, r3]
    d450:	4b07      	ldr	r3, [pc, #28]	; (d470 <rpl_invert_header+0x58>)
    d452:	4798      	blx	r3
    d454:	68c3      	ldr	r3, [r0, #12]
    d456:	8b9b      	ldrh	r3, [r3, #28]
    d458:	85eb      	strh	r3, [r5, #46]	; 0x2e
    uip_ext_len = last_uip_ext_len;
    d45a:	4b03      	ldr	r3, [pc, #12]	; (d468 <rpl_invert_header+0x50>)
    d45c:	701c      	strb	r4, [r3, #0]
    return RPL_HOP_BY_HOP_LEN;
    d45e:	2008      	movs	r0, #8
    d460:	e001      	b.n	d466 <rpl_invert_header+0x4e>
  default:
    PRINTF("RPL: Multi Hop-by-hop options not implemented\n\r");
    uip_ext_len = last_uip_ext_len;
    d462:	4b01      	ldr	r3, [pc, #4]	; (d468 <rpl_invert_header+0x50>)
    d464:	701c      	strb	r4, [r3, #0]
    return 0;
  }
}
    d466:	bd38      	pop	{r3, r4, r5, pc}
    d468:	20000b12 	.word	0x20000b12
    d46c:	20002cd4 	.word	0x20002cd4
    d470:	0000c96d 	.word	0x0000c96d

0000d474 <rpl_insert_header>:
/*---------------------------------------------------------------------------*/
void
rpl_insert_header(void)
{
    d474:	b508      	push	{r3, lr}
  uint8_t uip_ext_opt_offset;
  if(default_instance != NULL) {
    d476:	4b07      	ldr	r3, [pc, #28]	; (d494 <rpl_insert_header+0x20>)
    d478:	681b      	ldr	r3, [r3, #0]
    d47a:	2b00      	cmp	r3, #0
    d47c:	d008      	beq.n	d490 <rpl_insert_header+0x1c>
    uip_ext_opt_offset = 2;
    if(UIP_EXT_HDR_OPT_BUF->type == UIP_EXT_HDR_OPT_RPL) {
    d47e:	4b06      	ldr	r3, [pc, #24]	; (d498 <rpl_insert_header+0x24>)
    d480:	781b      	ldrb	r3, [r3, #0]
    d482:	332a      	adds	r3, #42	; 0x2a
    d484:	4a05      	ldr	r2, [pc, #20]	; (d49c <rpl_insert_header+0x28>)
    d486:	5cd3      	ldrb	r3, [r2, r3]
    d488:	2b63      	cmp	r3, #99	; 0x63
    d48a:	d101      	bne.n	d490 <rpl_insert_header+0x1c>
      rpl_update_header_empty();
    d48c:	4b04      	ldr	r3, [pc, #16]	; (d4a0 <rpl_insert_header+0x2c>)
    d48e:	4798      	blx	r3
    }
  }
}
    d490:	bd08      	pop	{r3, pc}
    d492:	46c0      	nop			; (mov r8, r8)
    d494:	20003284 	.word	0x20003284
    d498:	20000b12 	.word	0x20000b12
    d49c:	20002cd4 	.word	0x20002cd4
    d4a0:	0000d20d 	.word	0x0000d20d

0000d4a4 <get32>:
  return 0;
}
/*---------------------------------------------------------------------------*/
static uint32_t
get32(uint8_t *buffer, int pos)
{
    d4a4:	b510      	push	{r4, lr}
  return (uint32_t)buffer[pos] << 24 | (uint32_t)buffer[pos + 1] << 16 |
         (uint32_t)buffer[pos + 2] << 8 | buffer[pos + 3];
    d4a6:	1842      	adds	r2, r0, r1
    d4a8:	78d4      	ldrb	r4, [r2, #3]
}
/*---------------------------------------------------------------------------*/
static uint32_t
get32(uint8_t *buffer, int pos)
{
  return (uint32_t)buffer[pos] << 24 | (uint32_t)buffer[pos + 1] << 16 |
    d4aa:	5c40      	ldrb	r0, [r0, r1]
    d4ac:	0600      	lsls	r0, r0, #24
    d4ae:	4320      	orrs	r0, r4
    d4b0:	7853      	ldrb	r3, [r2, #1]
    d4b2:	041b      	lsls	r3, r3, #16
    d4b4:	4318      	orrs	r0, r3
         (uint32_t)buffer[pos + 2] << 8 | buffer[pos + 3];
    d4b6:	7893      	ldrb	r3, [r2, #2]
    d4b8:	021b      	lsls	r3, r3, #8
}
/*---------------------------------------------------------------------------*/
static uint32_t
get32(uint8_t *buffer, int pos)
{
  return (uint32_t)buffer[pos] << 24 | (uint32_t)buffer[pos + 1] << 16 |
    d4ba:	4318      	orrs	r0, r3
         (uint32_t)buffer[pos + 2] << 8 | buffer[pos + 3];
}
    d4bc:	bd10      	pop	{r4, pc}
    d4be:	46c0      	nop			; (mov r8, r8)

0000d4c0 <set32>:
/*---------------------------------------------------------------------------*/
static void
set32(uint8_t *buffer, int pos, uint32_t value)
{
  buffer[pos++] = value >> 24;
    d4c0:	0e13      	lsrs	r3, r2, #24
    d4c2:	5443      	strb	r3, [r0, r1]
  buffer[pos++] = (value >> 16) & 0xff;
    d4c4:	1841      	adds	r1, r0, r1
    d4c6:	0c13      	lsrs	r3, r2, #16
    d4c8:	704b      	strb	r3, [r1, #1]
  buffer[pos++] = (value >> 8) & 0xff;
    d4ca:	0a13      	lsrs	r3, r2, #8
    d4cc:	708b      	strb	r3, [r1, #2]
  buffer[pos++] = value & 0xff;
    d4ce:	70ca      	strb	r2, [r1, #3]
}
    d4d0:	4770      	bx	lr
    d4d2:	46c0      	nop			; (mov r8, r8)

0000d4d4 <get16>:
/*---------------------------------------------------------------------------*/
static uint16_t
get16(uint8_t *buffer, int pos)
{
  return (uint16_t)buffer[pos] << 8 | buffer[pos + 1];
    d4d4:	5c43      	ldrb	r3, [r0, r1]
    d4d6:	021b      	lsls	r3, r3, #8
    d4d8:	1841      	adds	r1, r0, r1
    d4da:	7848      	ldrb	r0, [r1, #1]
    d4dc:	4318      	orrs	r0, r3
}
    d4de:	4770      	bx	lr

0000d4e0 <set16>:
/*---------------------------------------------------------------------------*/
static void
set16(uint8_t *buffer, int pos, uint16_t value)
{
  buffer[pos++] = value >> 8;
    d4e0:	0a13      	lsrs	r3, r2, #8
    d4e2:	5443      	strb	r3, [r0, r1]
  buffer[pos++] = value & 0xff;
    d4e4:	1841      	adds	r1, r0, r1
    d4e6:	704a      	strb	r2, [r1, #1]
}
    d4e8:	4770      	bx	lr
    d4ea:	46c0      	nop			; (mov r8, r8)

0000d4ec <dao_ack_input>:
  PRINTF("RPL: Received a DAO ACK with sequence number %d and status %d from ",
    sequence, status);
  PRINT6ADDR(&UIP_IP_BUF->srcipaddr);
  PRINTF("\n\r");
#endif /* DEBUG */
  uip_len = 0;
    d4ec:	2200      	movs	r2, #0
    d4ee:	4b01      	ldr	r3, [pc, #4]	; (d4f4 <dao_ack_input+0x8>)
    d4f0:	801a      	strh	r2, [r3, #0]
}
    d4f2:	4770      	bx	lr
    d4f4:	20002cc0 	.word	0x20002cc0

0000d4f8 <dio_input>:
  uip_icmp6_send(addr, ICMP6_RPL, RPL_CODE_DIS, 2);
}
/*---------------------------------------------------------------------------*/
static void
dio_input(void)
{
    d4f8:	b5f0      	push	{r4, r5, r6, r7, lr}
    d4fa:	465f      	mov	r7, fp
    d4fc:	4656      	mov	r6, sl
    d4fe:	464d      	mov	r5, r9
    d500:	4644      	mov	r4, r8
    d502:	b4f0      	push	{r4, r5, r6, r7}
    d504:	b09f      	sub	sp, #124	; 0x7c
  int i;
  int len;
  uip_ipaddr_t from;
  uip_ds6_nbr_t *nbr;

  memset(&dio, 0, sizeof(dio));
    d506:	ac07      	add	r4, sp, #28
    d508:	1c20      	adds	r0, r4, #0
    d50a:	2100      	movs	r1, #0
    d50c:	225c      	movs	r2, #92	; 0x5c
    d50e:	4b95      	ldr	r3, [pc, #596]	; (d764 <dio_input+0x26c>)
    d510:	4798      	blx	r3

  /* Set default values in case the DIO configuration option is missing. */
  dio.dag_intdoubl = RPL_DIO_INTERVAL_DOUBLINGS;
    d512:	2308      	movs	r3, #8
    d514:	76a3      	strb	r3, [r4, #26]
  dio.dag_intmin = RPL_DIO_INTERVAL_MIN;
    d516:	3304      	adds	r3, #4
    d518:	76e3      	strb	r3, [r4, #27]
  dio.dag_redund = RPL_DIO_REDUNDANCY;
    d51a:	3b02      	subs	r3, #2
    d51c:	7723      	strb	r3, [r4, #28]
  dio.dag_min_hoprankinc = RPL_MIN_HOPRANKINC;
    d51e:	33f6      	adds	r3, #246	; 0xf6
    d520:	8463      	strh	r3, [r4, #34]	; 0x22
  dio.dag_max_rankinc = RPL_MAX_RANKINC;
    d522:	23e0      	movs	r3, #224	; 0xe0
    d524:	00db      	lsls	r3, r3, #3
    d526:	8423      	strh	r3, [r4, #32]
  dio.ocp = RPL_OF.ocp;
    d528:	4b8f      	ldr	r3, [pc, #572]	; (d768 <dio_input+0x270>)
    d52a:	8b1b      	ldrh	r3, [r3, #24]
    d52c:	8223      	strh	r3, [r4, #16]
  dio.default_lifetime = RPL_DEFAULT_LIFETIME;
    d52e:	23ff      	movs	r3, #255	; 0xff
    d530:	7763      	strb	r3, [r4, #29]
  dio.lifetime_unit = RPL_DEFAULT_LIFETIME_UNIT;
    d532:	3b01      	subs	r3, #1
    d534:	3bff      	subs	r3, #255	; 0xff
    d536:	83e3      	strh	r3, [r4, #30]

  uip_ipaddr_copy(&from, &UIP_IP_BUF->srcipaddr);
    d538:	a803      	add	r0, sp, #12
    d53a:	4b8c      	ldr	r3, [pc, #560]	; (d76c <dio_input+0x274>)
    d53c:	3308      	adds	r3, #8
    d53e:	1c02      	adds	r2, r0, #0
    d540:	cb32      	ldmia	r3!, {r1, r4, r5}
    d542:	c232      	stmia	r2!, {r1, r4, r5}
    d544:	681b      	ldr	r3, [r3, #0]
    d546:	6013      	str	r3, [r2, #0]
  /* DAG Information Object */
  PRINTF("RPL: Received a DIO from ");
  PRINT6ADDR(&from);
  PRINTF("\n\r");

  if((nbr = uip_ds6_nbr_lookup(&from)) == NULL) {
    d548:	4b89      	ldr	r3, [pc, #548]	; (d770 <dio_input+0x278>)
    d54a:	4798      	blx	r3
    d54c:	2800      	cmp	r0, #0
    d54e:	d10c      	bne.n	d56a <dio_input+0x72>
    if((nbr = uip_ds6_nbr_add(&from, (uip_lladdr_t *)
    d550:	a803      	add	r0, sp, #12
    d552:	4988      	ldr	r1, [pc, #544]	; (d774 <dio_input+0x27c>)
    d554:	2200      	movs	r2, #0
    d556:	2301      	movs	r3, #1
    d558:	4c87      	ldr	r4, [pc, #540]	; (d778 <dio_input+0x280>)
    d55a:	47a0      	blx	r4
    d55c:	2800      	cmp	r0, #0
    d55e:	d100      	bne.n	d562 <dio_input+0x6a>
    d560:	e0f9      	b.n	d756 <dio_input+0x25e>
                              packetbuf_addr(PACKETBUF_ADDR_SENDER),
                              0, NBR_REACHABLE)) != NULL) {
      /* set reachable timer */
      stimer_set(&nbr->reachable, UIP_ND6_REACHABLE_TIME / 1000);
    d562:	3010      	adds	r0, #16
    d564:	211e      	movs	r1, #30
    d566:	4b85      	ldr	r3, [pc, #532]	; (d77c <dio_input+0x284>)
    d568:	4798      	blx	r3
    }
  } else {
    PRINTF("RPL: Neighbor already in neighbor cache\n\r");
  }

  buffer_length = uip_len - uip_l3_icmp_hdr_len;
    d56a:	4b85      	ldr	r3, [pc, #532]	; (d780 <dio_input+0x288>)
    d56c:	781b      	ldrb	r3, [r3, #0]
    d56e:	4a85      	ldr	r2, [pc, #532]	; (d784 <dio_input+0x28c>)
    d570:	8812      	ldrh	r2, [r2, #0]
    d572:	1ad2      	subs	r2, r2, r3
    d574:	3a2c      	subs	r2, #44	; 0x2c
    d576:	b2d2      	uxtb	r2, r2
    d578:	4692      	mov	sl, r2

  /* Process the DIO base option. */
  i = 0;
  buffer = UIP_ICMP_PAYLOAD;
    d57a:	332c      	adds	r3, #44	; 0x2c
    d57c:	4a7b      	ldr	r2, [pc, #492]	; (d76c <dio_input+0x274>)
    d57e:	189e      	adds	r6, r3, r2

  dio.instance_id = buffer[i++];
    d580:	ac07      	add	r4, sp, #28
    d582:	5cd3      	ldrb	r3, [r2, r3]
    d584:	7623      	strb	r3, [r4, #24]
  dio.version = buffer[i++];
    d586:	7873      	ldrb	r3, [r6, #1]
    d588:	75e3      	strb	r3, [r4, #23]
  dio.rank = get16(buffer, i);
    d58a:	1c30      	adds	r0, r6, #0
    d58c:	2102      	movs	r1, #2
    d58e:	4b7e      	ldr	r3, [pc, #504]	; (d788 <dio_input+0x290>)
    d590:	4798      	blx	r3
    d592:	8260      	strh	r0, [r4, #18]
  PRINTF("RPL: Incoming DIO (id, ver, rank) = (%u,%u,%u)\n\r",
         (unsigned)dio.instance_id,
         (unsigned)dio.version, 
         (unsigned)dio.rank);

  dio.grounded = buffer[i] & RPL_DIO_GROUNDED;
    d594:	7933      	ldrb	r3, [r6, #4]
    d596:	227f      	movs	r2, #127	; 0x7f
    d598:	1c19      	adds	r1, r3, #0
    d59a:	4391      	bics	r1, r2
    d59c:	7521      	strb	r1, [r4, #20]
  dio.mop = (buffer[i]& RPL_DIO_MOP_MASK) >> RPL_DIO_MOP_SHIFT;
    d59e:	069a      	lsls	r2, r3, #26
    d5a0:	0f52      	lsrs	r2, r2, #29
    d5a2:	7562      	strb	r2, [r4, #21]
  dio.preference = buffer[i++] & RPL_DIO_PREFERENCE_MASK;
    d5a4:	2207      	movs	r2, #7
    d5a6:	4013      	ands	r3, r2
    d5a8:	75a3      	strb	r3, [r4, #22]

  dio.dtsn = buffer[i++];
    d5aa:	7973      	ldrb	r3, [r6, #5]
    d5ac:	7663      	strb	r3, [r4, #25]
  /* two reserved bytes */
  i += 2;

  memcpy(&dio.dag_id, buffer + i, sizeof(dio.dag_id));
    d5ae:	1c31      	adds	r1, r6, #0
    d5b0:	3108      	adds	r1, #8
    d5b2:	1c20      	adds	r0, r4, #0
    d5b4:	3209      	adds	r2, #9
    d5b6:	4b75      	ldr	r3, [pc, #468]	; (d78c <dio_input+0x294>)
    d5b8:	4798      	blx	r3
  i += sizeof(dio.dag_id);
    d5ba:	2418      	movs	r4, #24

      /* Path control field not yet implemented - at i + 2 */
      dio.dag_intdoubl = buffer[i + 3];
      dio.dag_intmin = buffer[i + 4];
      dio.dag_redund = buffer[i + 5];
      dio.dag_max_rankinc = get16(buffer, i + 6);
    d5bc:	4b72      	ldr	r3, [pc, #456]	; (d788 <dio_input+0x290>)
    d5be:	4699      	mov	r9, r3
  PRINTF("RPL: Incoming DIO (dag_id, pref) = (");
  PRINT6ADDR(&dio.dag_id);
  PRINTF(", %u)\n\r", dio.preference);

  /* Check if there are any DIO suboptions. */
  for(; i < buffer_length; i += len) {
    d5c0:	e0ba      	b.n	d738 <dio_input+0x240>
    subopt_type = buffer[i];
    d5c2:	9401      	str	r4, [sp, #4]
    d5c4:	5d33      	ldrb	r3, [r6, r4]
    if(subopt_type == RPL_OPTION_PAD1) {
    d5c6:	2b00      	cmp	r3, #0
    d5c8:	d100      	bne.n	d5cc <dio_input+0xd4>
    d5ca:	e0c1      	b.n	d750 <dio_input+0x258>
      len = 1;
    } else {
      /* Suboption with a two-byte header + payload */
      len = 2 + buffer[i + 1];
    d5cc:	1931      	adds	r1, r6, r4
    d5ce:	7849      	ldrb	r1, [r1, #1]
    d5d0:	1c8f      	adds	r7, r1, #2
    }

    if(len + i > buffer_length) {
    d5d2:	19e5      	adds	r5, r4, r7
    d5d4:	42aa      	cmp	r2, r5
    d5d6:	da00      	bge.n	d5da <dio_input+0xe2>
    d5d8:	e0bd      	b.n	d756 <dio_input+0x25e>
      return;
    }

    PRINTF("RPL: DIO option %u, length: %u\n\r", subopt_type, len - 2);

    switch(subopt_type) {
    d5da:	2b03      	cmp	r3, #3
    d5dc:	d043      	beq.n	d666 <dio_input+0x16e>
    d5de:	d802      	bhi.n	d5e6 <dio_input+0xee>
    d5e0:	2b02      	cmp	r3, #2
    d5e2:	d006      	beq.n	d5f2 <dio_input+0xfa>
    d5e4:	e0a7      	b.n	d736 <dio_input+0x23e>
    d5e6:	2b04      	cmp	r3, #4
    d5e8:	d065      	beq.n	d6b6 <dio_input+0x1be>
    d5ea:	2b08      	cmp	r3, #8
    d5ec:	d100      	bne.n	d5f0 <dio_input+0xf8>
    d5ee:	e088      	b.n	d702 <dio_input+0x20a>
    d5f0:	e0a1      	b.n	d736 <dio_input+0x23e>
    case RPL_OPTION_DAG_METRIC_CONTAINER:
      if(len < 6) {
    d5f2:	2f05      	cmp	r7, #5
    d5f4:	dc00      	bgt.n	d5f8 <dio_input+0x100>
    d5f6:	e0ae      	b.n	d756 <dio_input+0x25e>
        PRINTF("RPL: Invalid DAG MC, len = %d\n\r", len);
	RPL_STAT(rpl_stats.malformed_msgs++);
        return;
      }
      dio.mc.type = buffer[i + 2];
    d5f8:	9b01      	ldr	r3, [sp, #4]
    d5fa:	18f0      	adds	r0, r6, r3
    d5fc:	7883      	ldrb	r3, [r0, #2]
    d5fe:	4698      	mov	r8, r3
    d600:	ab07      	add	r3, sp, #28
    d602:	2254      	movs	r2, #84	; 0x54
    d604:	4641      	mov	r1, r8
    d606:	5499      	strb	r1, [r3, r2]
      dio.mc.flags = buffer[i + 3] << 1;
      dio.mc.flags |= buffer[i + 4] >> 7;
    d608:	7902      	ldrb	r2, [r0, #4]
    d60a:	09d1      	lsrs	r1, r2, #7
    d60c:	468c      	mov	ip, r1
        PRINTF("RPL: Invalid DAG MC, len = %d\n\r", len);
	RPL_STAT(rpl_stats.malformed_msgs++);
        return;
      }
      dio.mc.type = buffer[i + 2];
      dio.mc.flags = buffer[i + 3] << 1;
    d60e:	78c1      	ldrb	r1, [r0, #3]
    d610:	0049      	lsls	r1, r1, #1
      dio.mc.flags |= buffer[i + 4] >> 7;
    d612:	4667      	mov	r7, ip
    d614:	4339      	orrs	r1, r7
    d616:	2755      	movs	r7, #85	; 0x55
    d618:	55d9      	strb	r1, [r3, r7]
      dio.mc.aggr = (buffer[i + 4] >> 4) & 0x3;
    d61a:	0691      	lsls	r1, r2, #26
    d61c:	0f89      	lsrs	r1, r1, #30
    d61e:	3701      	adds	r7, #1
    d620:	55d9      	strb	r1, [r3, r7]
      dio.mc.prec = buffer[i + 4] & 0xf;
    d622:	210f      	movs	r1, #15
    d624:	400a      	ands	r2, r1
    d626:	3148      	adds	r1, #72	; 0x48
    d628:	545a      	strb	r2, [r3, r1]
      dio.mc.length = buffer[i + 5];
    d62a:	7941      	ldrb	r1, [r0, #5]
    d62c:	2258      	movs	r2, #88	; 0x58
    d62e:	5499      	strb	r1, [r3, r2]

      if(dio.mc.type == RPL_DAG_MC_NONE) {
    d630:	4643      	mov	r3, r8
    d632:	2b00      	cmp	r3, #0
    d634:	d07f      	beq.n	d736 <dio_input+0x23e>
        /* No metric container: do nothing */
      } else if(dio.mc.type == RPL_DAG_MC_ETX) {
    d636:	2b07      	cmp	r3, #7
    d638:	d107      	bne.n	d64a <dio_input+0x152>
        dio.mc.obj.etx = get16(buffer, i + 6);
    d63a:	1da1      	adds	r1, r4, #6
    d63c:	1c30      	adds	r0, r6, #0
    d63e:	4b52      	ldr	r3, [pc, #328]	; (d788 <dio_input+0x290>)
    d640:	4798      	blx	r3
    d642:	235a      	movs	r3, #90	; 0x5a
    d644:	aa07      	add	r2, sp, #28
    d646:	52d0      	strh	r0, [r2, r3]
    d648:	e075      	b.n	d736 <dio_input+0x23e>
	       (unsigned)dio.mc.flags, 
	       (unsigned)dio.mc.aggr, 
	       (unsigned)dio.mc.prec, 
	       (unsigned)dio.mc.length, 
	       (unsigned)dio.mc.obj.etx);
      } else if(dio.mc.type == RPL_DAG_MC_ENERGY) {
    d64a:	4643      	mov	r3, r8
    d64c:	2b02      	cmp	r3, #2
    d64e:	d000      	beq.n	d652 <dio_input+0x15a>
    d650:	e081      	b.n	d756 <dio_input+0x25e>
        dio.mc.obj.energy.flags = buffer[i + 6];
    d652:	ab07      	add	r3, sp, #28
    d654:	9a01      	ldr	r2, [sp, #4]
    d656:	18b1      	adds	r1, r6, r2
    d658:	7988      	ldrb	r0, [r1, #6]
    d65a:	225a      	movs	r2, #90	; 0x5a
    d65c:	5498      	strb	r0, [r3, r2]
        dio.mc.obj.energy.energy_est = buffer[i + 7];
    d65e:	79c9      	ldrb	r1, [r1, #7]
    d660:	3201      	adds	r2, #1
    d662:	5499      	strb	r1, [r3, r2]
    d664:	e067      	b.n	d736 <dio_input+0x23e>
       PRINTF("RPL: Unhandled DAG MC type: %u\n\r", (unsigned)dio.mc.type);
       return;
      }
      break;
    case RPL_OPTION_ROUTE_INFO:
      if(len < 9) {
    d666:	2f08      	cmp	r7, #8
    d668:	dd75      	ble.n	d756 <dio_input+0x25e>
	RPL_STAT(rpl_stats.malformed_msgs++);
        return;
      }

      /* The flags field includes the preference value. */
      dio.destination_prefix.length = buffer[i + 2];
    d66a:	9b01      	ldr	r3, [sp, #4]
    d66c:	18f3      	adds	r3, r6, r3
    d66e:	789a      	ldrb	r2, [r3, #2]
    d670:	4693      	mov	fp, r2
    d672:	2238      	movs	r2, #56	; 0x38
    d674:	a802      	add	r0, sp, #8
    d676:	2114      	movs	r1, #20
    d678:	1840      	adds	r0, r0, r1
    d67a:	4659      	mov	r1, fp
    d67c:	5481      	strb	r1, [r0, r2]
      dio.destination_prefix.flags = buffer[i + 3];
    d67e:	78da      	ldrb	r2, [r3, #3]
    d680:	2339      	movs	r3, #57	; 0x39
    d682:	a802      	add	r0, sp, #8
    d684:	2114      	movs	r1, #20
    d686:	1840      	adds	r0, r0, r1
    d688:	54c2      	strb	r2, [r0, r3]
      dio.destination_prefix.lifetime = get32(buffer, i + 4);
    d68a:	1d21      	adds	r1, r4, #4
    d68c:	1c30      	adds	r0, r6, #0
    d68e:	4a40      	ldr	r2, [pc, #256]	; (d790 <dio_input+0x298>)
    d690:	4790      	blx	r2
    d692:	9014      	str	r0, [sp, #80]	; 0x50

      if(((dio.destination_prefix.length + 7) / 8) + 8 <= len &&
    d694:	465a      	mov	r2, fp
    d696:	3207      	adds	r2, #7
    d698:	10d2      	asrs	r2, r2, #3
    d69a:	1c13      	adds	r3, r2, #0
    d69c:	3308      	adds	r3, #8
    d69e:	429f      	cmp	r7, r3
    d6a0:	db59      	blt.n	d756 <dio_input+0x25e>
    d6a2:	4658      	mov	r0, fp
    d6a4:	2880      	cmp	r0, #128	; 0x80
    d6a6:	d856      	bhi.n	d756 <dio_input+0x25e>
         dio.destination_prefix.length <= 128) {
        PRINTF("RPL: Copying destination prefix\n\r");
        memcpy(&dio.destination_prefix.prefix, &buffer[i + 8],
    d6a8:	9901      	ldr	r1, [sp, #4]
    d6aa:	3108      	adds	r1, #8
    d6ac:	1871      	adds	r1, r6, r1
    d6ae:	a810      	add	r0, sp, #64	; 0x40
    d6b0:	4b36      	ldr	r3, [pc, #216]	; (d78c <dio_input+0x294>)
    d6b2:	4798      	blx	r3
        PRINTF("RPL: Invalid route info option, len = %d\n\r", len);
	RPL_STAT(rpl_stats.malformed_msgs++);
	return;
      }

      break;
    d6b4:	e03f      	b.n	d736 <dio_input+0x23e>
    case RPL_OPTION_DAG_CONF:
      if(len != 16) {
    d6b6:	2f10      	cmp	r7, #16
    d6b8:	d14d      	bne.n	d756 <dio_input+0x25e>
	RPL_STAT(rpl_stats.malformed_msgs++);
        return;
      }

      /* Path control field not yet implemented - at i + 2 */
      dio.dag_intdoubl = buffer[i + 3];
    d6ba:	af07      	add	r7, sp, #28
    d6bc:	9b01      	ldr	r3, [sp, #4]
    d6be:	4698      	mov	r8, r3
    d6c0:	44b0      	add	r8, r6
    d6c2:	4643      	mov	r3, r8
    d6c4:	78db      	ldrb	r3, [r3, #3]
    d6c6:	76bb      	strb	r3, [r7, #26]
      dio.dag_intmin = buffer[i + 4];
    d6c8:	4643      	mov	r3, r8
    d6ca:	791b      	ldrb	r3, [r3, #4]
    d6cc:	76fb      	strb	r3, [r7, #27]
      dio.dag_redund = buffer[i + 5];
    d6ce:	4643      	mov	r3, r8
    d6d0:	795b      	ldrb	r3, [r3, #5]
    d6d2:	773b      	strb	r3, [r7, #28]
      dio.dag_max_rankinc = get16(buffer, i + 6);
    d6d4:	1da1      	adds	r1, r4, #6
    d6d6:	1c30      	adds	r0, r6, #0
    d6d8:	47c8      	blx	r9
    d6da:	8438      	strh	r0, [r7, #32]
      dio.dag_min_hoprankinc = get16(buffer, i + 8);
    d6dc:	1c21      	adds	r1, r4, #0
    d6de:	3108      	adds	r1, #8
    d6e0:	1c30      	adds	r0, r6, #0
    d6e2:	47c8      	blx	r9
    d6e4:	8478      	strh	r0, [r7, #34]	; 0x22
      dio.ocp = get16(buffer, i + 10);
    d6e6:	1c21      	adds	r1, r4, #0
    d6e8:	310a      	adds	r1, #10
    d6ea:	1c30      	adds	r0, r6, #0
    d6ec:	47c8      	blx	r9
    d6ee:	8238      	strh	r0, [r7, #16]
      /* buffer + 12 is reserved */
      dio.default_lifetime = buffer[i + 13];
    d6f0:	4643      	mov	r3, r8
    d6f2:	7b5b      	ldrb	r3, [r3, #13]
    d6f4:	777b      	strb	r3, [r7, #29]
      dio.lifetime_unit = get16(buffer, i + 14);
    d6f6:	1c21      	adds	r1, r4, #0
    d6f8:	310e      	adds	r1, #14
    d6fa:	1c30      	adds	r0, r6, #0
    d6fc:	47c8      	blx	r9
    d6fe:	83f8      	strh	r0, [r7, #30]
      PRINTF("RPL: DAG conf:dbl=%d, min=%d red=%d maxinc=%d mininc=%d ocp=%d d_l=%u l_u=%u\n\r",
             dio.dag_intdoubl, dio.dag_intmin, dio.dag_redund,
             dio.dag_max_rankinc, dio.dag_min_hoprankinc, dio.ocp,
             dio.default_lifetime, dio.lifetime_unit);
      break;
    d700:	e019      	b.n	d736 <dio_input+0x23e>
    case RPL_OPTION_PREFIX_INFO:
      if(len != 32) {
    d702:	2f20      	cmp	r7, #32
    d704:	d127      	bne.n	d756 <dio_input+0x25e>
        PRINTF("RPL: Invalid DAG prefix info, len != 32\n\r");
	RPL_STAT(rpl_stats.malformed_msgs++);
        return;
      }
      dio.prefix_info.length = buffer[i + 2];
    d706:	af07      	add	r7, sp, #28
    d708:	9b01      	ldr	r3, [sp, #4]
    d70a:	4698      	mov	r8, r3
    d70c:	44b0      	add	r8, r6
    d70e:	4643      	mov	r3, r8
    d710:	789a      	ldrb	r2, [r3, #2]
    d712:	2350      	movs	r3, #80	; 0x50
    d714:	54fa      	strb	r2, [r7, r3]
      dio.prefix_info.flags = buffer[i + 3];
    d716:	4643      	mov	r3, r8
    d718:	78da      	ldrb	r2, [r3, #3]
    d71a:	2351      	movs	r3, #81	; 0x51
    d71c:	54fa      	strb	r2, [r7, r3]
      /* valid lifetime is ingnored for now - at i + 4 */
      /* preferred lifetime stored in lifetime */
      dio.prefix_info.lifetime = get32(buffer, i + 8);
    d71e:	1c21      	adds	r1, r4, #0
    d720:	3108      	adds	r1, #8
    d722:	1c30      	adds	r0, r6, #0
    d724:	4b1a      	ldr	r3, [pc, #104]	; (d790 <dio_input+0x298>)
    d726:	4798      	blx	r3
    d728:	64f8      	str	r0, [r7, #76]	; 0x4c
      /* 32-bit reserved at i + 12 */
      PRINTF("RPL: Copying prefix information\n\r");
      memcpy(&dio.prefix_info.prefix, &buffer[i + 16], 16);
    d72a:	4641      	mov	r1, r8
    d72c:	3110      	adds	r1, #16
    d72e:	a816      	add	r0, sp, #88	; 0x58
    d730:	2210      	movs	r2, #16
    d732:	4b16      	ldr	r3, [pc, #88]	; (d78c <dio_input+0x294>)
    d734:	4798      	blx	r3
  uip_icmp6_send(addr, ICMP6_RPL, RPL_CODE_DIS, 2);
}
/*---------------------------------------------------------------------------*/
static void
dio_input(void)
{
    d736:	1c2c      	adds	r4, r5, #0
  PRINTF("RPL: Incoming DIO (dag_id, pref) = (");
  PRINT6ADDR(&dio.dag_id);
  PRINTF(", %u)\n\r", dio.preference);

  /* Check if there are any DIO suboptions. */
  for(; i < buffer_length; i += len) {
    d738:	4652      	mov	r2, sl
    d73a:	4554      	cmp	r4, sl
    d73c:	da00      	bge.n	d740 <dio_input+0x248>
    d73e:	e740      	b.n	d5c2 <dio_input+0xca>

#ifdef RPL_DEBUG_DIO_INPUT
  RPL_DEBUG_DIO_INPUT(&from, &dio);
#endif

  rpl_process_dio(&from, &dio);
    d740:	a803      	add	r0, sp, #12
    d742:	a907      	add	r1, sp, #28
    d744:	4b13      	ldr	r3, [pc, #76]	; (d794 <dio_input+0x29c>)
    d746:	4798      	blx	r3

  uip_len = 0;
    d748:	2200      	movs	r2, #0
    d74a:	4b0e      	ldr	r3, [pc, #56]	; (d784 <dio_input+0x28c>)
    d74c:	801a      	strh	r2, [r3, #0]
    d74e:	e002      	b.n	d756 <dio_input+0x25e>
    } else {
      /* Suboption with a two-byte header + payload */
      len = 2 + buffer[i + 1];
    }

    if(len + i > buffer_length) {
    d750:	1c65      	adds	r5, r4, #1
    d752:	42aa      	cmp	r2, r5
    d754:	daef      	bge.n	d736 <dio_input+0x23e>
#endif

  rpl_process_dio(&from, &dio);

  uip_len = 0;
}
    d756:	b01f      	add	sp, #124	; 0x7c
    d758:	bc3c      	pop	{r2, r3, r4, r5}
    d75a:	4690      	mov	r8, r2
    d75c:	4699      	mov	r9, r3
    d75e:	46a2      	mov	sl, r4
    d760:	46ab      	mov	fp, r5
    d762:	bdf0      	pop	{r4, r5, r6, r7, pc}
    d764:	00010b69 	.word	0x00010b69
    d768:	20000168 	.word	0x20000168
    d76c:	20002cd4 	.word	0x20002cd4
    d770:	00006b65 	.word	0x00006b65
    d774:	200031d8 	.word	0x200031d8
    d778:	00006af1 	.word	0x00006af1
    d77c:	0000ed0d 	.word	0x0000ed0d
    d780:	20000b12 	.word	0x20000b12
    d784:	20002cc0 	.word	0x20002cc0
    d788:	0000d4d5 	.word	0x0000d4d5
    d78c:	00010b2f 	.word	0x00010b2f
    d790:	0000d4a5 	.word	0x0000d4a5
    d794:	0000ce71 	.word	0x0000ce71

0000d798 <dis_output>:
  uip_len = 0;
}
/*---------------------------------------------------------------------------*/
void
dis_output(uip_ipaddr_t *addr)
{
    d798:	b510      	push	{r4, lr}
    d79a:	b084      	sub	sp, #16
   *     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   *     |     Flags     |   Reserved    |   Option(s)...
   *     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   */

  buffer = UIP_ICMP_PAYLOAD;
    d79c:	4b0f      	ldr	r3, [pc, #60]	; (d7dc <dis_output+0x44>)
    d79e:	781b      	ldrb	r3, [r3, #0]
    d7a0:	332c      	adds	r3, #44	; 0x2c
  buffer[0] = buffer[1] = 0;
    d7a2:	4a0f      	ldr	r2, [pc, #60]	; (d7e0 <dis_output+0x48>)
    d7a4:	189c      	adds	r4, r3, r2
    d7a6:	2100      	movs	r1, #0
    d7a8:	7061      	strb	r1, [r4, #1]
    d7aa:	54d1      	strb	r1, [r2, r3]

  if(addr == NULL) {
    d7ac:	2800      	cmp	r0, #0
    d7ae:	d10d      	bne.n	d7cc <dis_output+0x34>
    uip_create_linklocal_rplnodes_mcast(&tmpaddr);
    d7b0:	4b0c      	ldr	r3, [pc, #48]	; (d7e4 <dis_output+0x4c>)
    d7b2:	466a      	mov	r2, sp
    d7b4:	8013      	strh	r3, [r2, #0]
    d7b6:	2300      	movs	r3, #0
    d7b8:	8053      	strh	r3, [r2, #2]
    d7ba:	8093      	strh	r3, [r2, #4]
    d7bc:	80d3      	strh	r3, [r2, #6]
    d7be:	8113      	strh	r3, [r2, #8]
    d7c0:	8153      	strh	r3, [r2, #10]
    d7c2:	8193      	strh	r3, [r2, #12]
    d7c4:	23d0      	movs	r3, #208	; 0xd0
    d7c6:	015b      	lsls	r3, r3, #5
    d7c8:	81d3      	strh	r3, [r2, #14]
    addr = &tmpaddr;
    d7ca:	4668      	mov	r0, sp

  PRINTF("RPL: Sending a DIS to ");
  PRINT6ADDR(addr);
  PRINTF("\n\r");

  uip_icmp6_send(addr, ICMP6_RPL, RPL_CODE_DIS, 2);
    d7cc:	219b      	movs	r1, #155	; 0x9b
    d7ce:	2200      	movs	r2, #0
    d7d0:	2302      	movs	r3, #2
    d7d2:	4c05      	ldr	r4, [pc, #20]	; (d7e8 <dis_output+0x50>)
    d7d4:	47a0      	blx	r4
}
    d7d6:	b004      	add	sp, #16
    d7d8:	bd10      	pop	{r4, pc}
    d7da:	46c0      	nop			; (mov r8, r8)
    d7dc:	20000b12 	.word	0x20000b12
    d7e0:	20002cd4 	.word	0x20002cd4
    d7e4:	000002ff 	.word	0x000002ff
    d7e8:	00007ed1 	.word	0x00007ed1

0000d7ec <dio_output>:
  uip_len = 0;
}
/*---------------------------------------------------------------------------*/
void
dio_output(rpl_instance_t *instance, uip_ipaddr_t *uc_addr)
{
    d7ec:	b5f0      	push	{r4, r5, r6, r7, lr}
    d7ee:	465f      	mov	r7, fp
    d7f0:	4656      	mov	r6, sl
    d7f2:	4645      	mov	r5, r8
    d7f4:	b4e0      	push	{r5, r6, r7}
    d7f6:	b086      	sub	sp, #24
    d7f8:	1c05      	adds	r5, r0, #0
    d7fa:	9101      	str	r1, [sp, #4]
  unsigned char *buffer;
  int pos;
  rpl_dag_t *dag = instance->current_dag;
    d7fc:	68c7      	ldr	r7, [r0, #12]
#endif /* RPL_LEAF_ONLY */

  /* DAG Information Object */
  pos = 0;

  buffer = UIP_ICMP_PAYLOAD;
    d7fe:	4b77      	ldr	r3, [pc, #476]	; (d9dc <dio_output+0x1f0>)
    d800:	781b      	ldrb	r3, [r3, #0]
    d802:	332c      	adds	r3, #44	; 0x2c
    d804:	4a76      	ldr	r2, [pc, #472]	; (d9e0 <dio_output+0x1f4>)
    d806:	189c      	adds	r4, r3, r2
  buffer[pos++] = instance->instance_id;
    d808:	218c      	movs	r1, #140	; 0x8c
    d80a:	5c41      	ldrb	r1, [r0, r1]
    d80c:	54d1      	strb	r1, [r2, r3]
  buffer[pos++] = dag->version;
    d80e:	7cbb      	ldrb	r3, [r7, #18]
    d810:	7063      	strb	r3, [r4, #1]

#if RPL_LEAF_ONLY
  PRINTF("RPL: LEAF ONLY DIO rank set to INFINITE_RANK\n\r");
  set16(buffer, pos, INFINITE_RANK);
#else /* RPL_LEAF_ONLY */
  set16(buffer, pos, dag->rank);
    d812:	8bba      	ldrh	r2, [r7, #28]
    d814:	1c20      	adds	r0, r4, #0
    d816:	2102      	movs	r1, #2
    d818:	4b72      	ldr	r3, [pc, #456]	; (d9e4 <dio_output+0x1f8>)
    d81a:	4798      	blx	r3
#endif /* RPL_LEAF_ONLY */
  pos += 2;

  buffer[pos] = 0;
    d81c:	2300      	movs	r3, #0
    d81e:	7123      	strb	r3, [r4, #4]
  if(dag->grounded) {
    d820:	7cfa      	ldrb	r2, [r7, #19]
    d822:	2a00      	cmp	r2, #0
    d824:	d000      	beq.n	d828 <dio_output+0x3c>
    buffer[pos] |= RPL_DIO_GROUNDED;
    d826:	2280      	movs	r2, #128	; 0x80
    d828:	7122      	strb	r2, [r4, #4]
  }

  buffer[pos] |= instance->mop << RPL_DIO_MOP_SHIFT;
    d82a:	238f      	movs	r3, #143	; 0x8f
    d82c:	5ceb      	ldrb	r3, [r5, r3]
    d82e:	00db      	lsls	r3, r3, #3
    d830:	4313      	orrs	r3, r2
    d832:	b2db      	uxtb	r3, r3
    d834:	7123      	strb	r3, [r4, #4]
  buffer[pos] |= dag->preference & RPL_DIO_PREFERENCE_MASK;
    d836:	7d3a      	ldrb	r2, [r7, #20]
    d838:	2107      	movs	r1, #7
    d83a:	400a      	ands	r2, r1
    d83c:	4313      	orrs	r3, r2
    d83e:	7123      	strb	r3, [r4, #4]
  pos++;

  buffer[pos++] = instance->dtsn_out;
    d840:	238e      	movs	r3, #142	; 0x8e
    d842:	5cea      	ldrb	r2, [r5, r3]
    d844:	7162      	strb	r2, [r4, #5]

  /* always request new DAO to refresh route */
  RPL_LOLLIPOP_INCREMENT(instance->dtsn_out);
    d846:	5ceb      	ldrb	r3, [r5, r3]
    d848:	b25a      	sxtb	r2, r3
    d84a:	2a00      	cmp	r2, #0
    d84c:	da03      	bge.n	d856 <dio_output+0x6a>
    d84e:	3301      	adds	r3, #1
    d850:	228e      	movs	r2, #142	; 0x8e
    d852:	54ab      	strb	r3, [r5, r2]
    d854:	e004      	b.n	d860 <dio_output+0x74>
    d856:	3301      	adds	r3, #1
    d858:	227f      	movs	r2, #127	; 0x7f
    d85a:	4013      	ands	r3, r2
    d85c:	320f      	adds	r2, #15
    d85e:	54ab      	strb	r3, [r5, r2]

  /* reserved 2 bytes */
  buffer[pos++] = 0; /* flags */
    d860:	2300      	movs	r3, #0
    d862:	71a3      	strb	r3, [r4, #6]
  buffer[pos++] = 0; /* reserved */
    d864:	71e3      	strb	r3, [r4, #7]

  memcpy(buffer + pos, &dag->dag_id, sizeof(dag->dag_id));
    d866:	1c20      	adds	r0, r4, #0
    d868:	3008      	adds	r0, #8
    d86a:	1c39      	adds	r1, r7, #0
    d86c:	2210      	movs	r2, #16
    d86e:	4b5e      	ldr	r3, [pc, #376]	; (d9e8 <dio_output+0x1fc>)
    d870:	4798      	blx	r3
  pos += 16;

#if !RPL_LEAF_ONLY
  if(instance->mc.type != RPL_DAG_MC_NONE) {
    d872:	782b      	ldrb	r3, [r5, #0]
    d874:	2b00      	cmp	r3, #0
    d876:	d02b      	beq.n	d8d0 <dio_output+0xe4>
    instance->of->update_metric_container(instance);
    d878:	68ab      	ldr	r3, [r5, #8]
    d87a:	695b      	ldr	r3, [r3, #20]
    d87c:	1c28      	adds	r0, r5, #0
    d87e:	4798      	blx	r3

    buffer[pos++] = RPL_OPTION_DAG_METRIC_CONTAINER;
    d880:	2302      	movs	r3, #2
    d882:	7623      	strb	r3, [r4, #24]
    buffer[pos++] = 6;
    d884:	3304      	adds	r3, #4
    d886:	7663      	strb	r3, [r4, #25]
    buffer[pos++] = instance->mc.type;
    d888:	782b      	ldrb	r3, [r5, #0]
    d88a:	76a3      	strb	r3, [r4, #26]
    buffer[pos++] = instance->mc.flags >> 1;
    d88c:	786b      	ldrb	r3, [r5, #1]
    d88e:	085b      	lsrs	r3, r3, #1
    d890:	76e3      	strb	r3, [r4, #27]
    buffer[pos] = (instance->mc.flags & 1) << 7;
    d892:	786b      	ldrb	r3, [r5, #1]
    d894:	01da      	lsls	r2, r3, #7
    d896:	7722      	strb	r2, [r4, #28]
    buffer[pos++] |= (instance->mc.aggr << 4) | instance->mc.prec;
    d898:	78ab      	ldrb	r3, [r5, #2]
    d89a:	011b      	lsls	r3, r3, #4
    d89c:	4313      	orrs	r3, r2
    d89e:	78ea      	ldrb	r2, [r5, #3]
    d8a0:	4313      	orrs	r3, r2
    d8a2:	7723      	strb	r3, [r4, #28]
    if(instance->mc.type == RPL_DAG_MC_ETX) {
    d8a4:	782b      	ldrb	r3, [r5, #0]
    d8a6:	2b07      	cmp	r3, #7
    d8a8:	d108      	bne.n	d8bc <dio_output+0xd0>
      buffer[pos++] = 2;
    d8aa:	3b05      	subs	r3, #5
    d8ac:	7763      	strb	r3, [r4, #29]
      set16(buffer, pos, instance->mc.obj.etx);
    d8ae:	88ea      	ldrh	r2, [r5, #6]
    d8b0:	1c20      	adds	r0, r4, #0
    d8b2:	211e      	movs	r1, #30
    d8b4:	4b4b      	ldr	r3, [pc, #300]	; (d9e4 <dio_output+0x1f8>)
    d8b6:	4798      	blx	r3
      pos += 2;
    d8b8:	2620      	movs	r6, #32
    d8ba:	e00a      	b.n	d8d2 <dio_output+0xe6>
    } else if(instance->mc.type == RPL_DAG_MC_ENERGY) {
    d8bc:	2b02      	cmp	r3, #2
    d8be:	d000      	beq.n	d8c2 <dio_output+0xd6>
    d8c0:	e085      	b.n	d9ce <dio_output+0x1e2>
      buffer[pos++] = 2;
    d8c2:	7763      	strb	r3, [r4, #29]
      buffer[pos++] = instance->mc.obj.energy.flags;
    d8c4:	79ab      	ldrb	r3, [r5, #6]
    d8c6:	77a3      	strb	r3, [r4, #30]
      buffer[pos++] = instance->mc.obj.energy.energy_est;
    d8c8:	79eb      	ldrb	r3, [r5, #7]
    d8ca:	77e3      	strb	r3, [r4, #31]
    d8cc:	2620      	movs	r6, #32
    d8ce:	e000      	b.n	d8d2 <dio_output+0xe6>
  /* reserved 2 bytes */
  buffer[pos++] = 0; /* flags */
  buffer[pos++] = 0; /* reserved */

  memcpy(buffer + pos, &dag->dag_id, sizeof(dag->dag_id));
  pos += 16;
    d8d0:	2618      	movs	r6, #24
    }
  }
#endif /* !RPL_LEAF_ONLY */

  /* Always add a DAG configuration option. */
  buffer[pos++] = RPL_OPTION_DAG_CONF;
    d8d2:	2304      	movs	r3, #4
    d8d4:	55a3      	strb	r3, [r4, r6]
  buffer[pos++] = 14;
    d8d6:	19a2      	adds	r2, r4, r6
    d8d8:	330a      	adds	r3, #10
    d8da:	4690      	mov	r8, r2
    d8dc:	7053      	strb	r3, [r2, #1]
  buffer[pos++] = 0; /* No Auth, PCS = 0 */
    d8de:	2300      	movs	r3, #0
    d8e0:	469b      	mov	fp, r3
    d8e2:	1c13      	adds	r3, r2, #0
    d8e4:	465a      	mov	r2, fp
    d8e6:	709a      	strb	r2, [r3, #2]
  buffer[pos++] = instance->dio_intdoubl;
    d8e8:	2390      	movs	r3, #144	; 0x90
    d8ea:	5ceb      	ldrb	r3, [r5, r3]
    d8ec:	4642      	mov	r2, r8
    d8ee:	70d3      	strb	r3, [r2, #3]
  buffer[pos++] = instance->dio_intmin;
    d8f0:	2391      	movs	r3, #145	; 0x91
    d8f2:	5ceb      	ldrb	r3, [r5, r3]
    d8f4:	7113      	strb	r3, [r2, #4]
  buffer[pos++] = instance->dio_redundancy;
    d8f6:	2392      	movs	r3, #146	; 0x92
    d8f8:	5ceb      	ldrb	r3, [r5, r3]
    d8fa:	7153      	strb	r3, [r2, #5]
    d8fc:	1db1      	adds	r1, r6, #6
  set16(buffer, pos, instance->max_rankinc);
    d8fe:	2398      	movs	r3, #152	; 0x98
    d900:	5aea      	ldrh	r2, [r5, r3]
    d902:	1c20      	adds	r0, r4, #0
    d904:	4b37      	ldr	r3, [pc, #220]	; (d9e4 <dio_output+0x1f8>)
    d906:	469a      	mov	sl, r3
    d908:	4798      	blx	r3
  pos += 2;
    d90a:	1c31      	adds	r1, r6, #0
    d90c:	3108      	adds	r1, #8
  set16(buffer, pos, instance->min_hoprankinc);
    d90e:	239a      	movs	r3, #154	; 0x9a
    d910:	5aea      	ldrh	r2, [r5, r3]
    d912:	1c20      	adds	r0, r4, #0
    d914:	47d0      	blx	sl
  pos += 2;
  /* OCP is in the DAG_CONF option */
  set16(buffer, pos, instance->of->ocp);
    d916:	68ab      	ldr	r3, [r5, #8]
    d918:	8b1a      	ldrh	r2, [r3, #24]
    d91a:	1c20      	adds	r0, r4, #0
    d91c:	1c31      	adds	r1, r6, #0
    d91e:	310a      	adds	r1, #10
    d920:	47d0      	blx	sl
  pos += 2;
  buffer[pos++] = 0; /* reserved */
    d922:	4643      	mov	r3, r8
    d924:	465a      	mov	r2, fp
    d926:	731a      	strb	r2, [r3, #12]
  buffer[pos++] = instance->default_lifetime;
    d928:	2393      	movs	r3, #147	; 0x93
    d92a:	5ceb      	ldrb	r3, [r5, r3]
    d92c:	4642      	mov	r2, r8
    d92e:	7353      	strb	r3, [r2, #13]
  set16(buffer, pos, instance->lifetime_unit);
    d930:	239c      	movs	r3, #156	; 0x9c
    d932:	5aea      	ldrh	r2, [r5, r3]
    d934:	1c20      	adds	r0, r4, #0
    d936:	1c31      	adds	r1, r6, #0
    d938:	310e      	adds	r1, #14
    d93a:	47d0      	blx	sl
  pos += 2;
    d93c:	1c33      	adds	r3, r6, #0
    d93e:	3310      	adds	r3, #16

  /* Check if we have a prefix to send also. */
  if(dag->prefix_info.length > 0) {
    d940:	2238      	movs	r2, #56	; 0x38
    d942:	5cba      	ldrb	r2, [r7, r2]
    d944:	2a00      	cmp	r2, #0
    d946:	d027      	beq.n	d998 <dio_output+0x1ac>
    buffer[pos++] = RPL_OPTION_PREFIX_INFO;
    d948:	2208      	movs	r2, #8
    d94a:	54e2      	strb	r2, [r4, r3]
    buffer[pos++] = 30; /* always 30 bytes + 2 long */
    d94c:	4643      	mov	r3, r8
    d94e:	3216      	adds	r2, #22
    d950:	745a      	strb	r2, [r3, #17]
    buffer[pos++] = dag->prefix_info.length;
    d952:	321a      	adds	r2, #26
    d954:	5cba      	ldrb	r2, [r7, r2]
    d956:	749a      	strb	r2, [r3, #18]
    buffer[pos++] = dag->prefix_info.flags;
    d958:	2239      	movs	r2, #57	; 0x39
    d95a:	5cba      	ldrb	r2, [r7, r2]
    d95c:	74da      	strb	r2, [r3, #19]
    d95e:	1c31      	adds	r1, r6, #0
    d960:	3114      	adds	r1, #20
    set32(buffer, pos, dag->prefix_info.lifetime);
    d962:	1c20      	adds	r0, r4, #0
    d964:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    d966:	4d21      	ldr	r5, [pc, #132]	; (d9ec <dio_output+0x200>)
    d968:	47a8      	blx	r5
    pos += 4;
    d96a:	1c31      	adds	r1, r6, #0
    d96c:	3118      	adds	r1, #24
    set32(buffer, pos, dag->prefix_info.lifetime);
    d96e:	1c20      	adds	r0, r4, #0
    d970:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    d972:	47a8      	blx	r5
    pos += 4;
    d974:	1c33      	adds	r3, r6, #0
    d976:	331c      	adds	r3, #28
    memset(&buffer[pos], 0, 4);
    d978:	18e3      	adds	r3, r4, r3
    d97a:	2200      	movs	r2, #0
    d97c:	701a      	strb	r2, [r3, #0]
    d97e:	705a      	strb	r2, [r3, #1]
    d980:	709a      	strb	r2, [r3, #2]
    d982:	70da      	strb	r2, [r3, #3]
    pos += 4;
    d984:	1c30      	adds	r0, r6, #0
    d986:	3020      	adds	r0, #32
    memcpy(&buffer[pos], &dag->prefix_info.prefix, 16);
    d988:	1820      	adds	r0, r4, r0
    d98a:	1c39      	adds	r1, r7, #0
    d98c:	3124      	adds	r1, #36	; 0x24
    d98e:	3210      	adds	r2, #16
    d990:	4b15      	ldr	r3, [pc, #84]	; (d9e8 <dio_output+0x1fc>)
    d992:	4798      	blx	r3
    pos += 16;
    d994:	1c33      	adds	r3, r6, #0
    d996:	3330      	adds	r3, #48	; 0x30
  PRINT6ADDR(uc_addr);
  PRINTF("\n\r");
  uip_icmp6_send(uc_addr, ICMP6_RPL, RPL_CODE_DIO, pos);
#else /* RPL_LEAF_ONLY */
  /* Unicast requests get unicast replies! */
  if(uc_addr == NULL) {
    d998:	9a01      	ldr	r2, [sp, #4]
    d99a:	2a00      	cmp	r2, #0
    d99c:	d112      	bne.n	d9c4 <dio_output+0x1d8>
    PRINTF("RPL: Sending a multicast-DIO with rank %u\n\r",
        (unsigned)instance->current_dag->rank);
    uip_create_linklocal_rplnodes_mcast(&addr);
    d99e:	4a14      	ldr	r2, [pc, #80]	; (d9f0 <dio_output+0x204>)
    d9a0:	a902      	add	r1, sp, #8
    d9a2:	800a      	strh	r2, [r1, #0]
    d9a4:	2200      	movs	r2, #0
    d9a6:	804a      	strh	r2, [r1, #2]
    d9a8:	808a      	strh	r2, [r1, #4]
    d9aa:	80ca      	strh	r2, [r1, #6]
    d9ac:	810a      	strh	r2, [r1, #8]
    d9ae:	814a      	strh	r2, [r1, #10]
    d9b0:	818a      	strh	r2, [r1, #12]
    d9b2:	22d0      	movs	r2, #208	; 0xd0
    d9b4:	0152      	lsls	r2, r2, #5
    d9b6:	81ca      	strh	r2, [r1, #14]
    uip_icmp6_send(&addr, ICMP6_RPL, RPL_CODE_DIO, pos);
    d9b8:	1c08      	adds	r0, r1, #0
    d9ba:	219b      	movs	r1, #155	; 0x9b
    d9bc:	2201      	movs	r2, #1
    d9be:	4c0d      	ldr	r4, [pc, #52]	; (d9f4 <dio_output+0x208>)
    d9c0:	47a0      	blx	r4
    d9c2:	e004      	b.n	d9ce <dio_output+0x1e2>
  } else {
    PRINTF("RPL: Sending unicast-DIO with rank %u to ",
        (unsigned)instance->current_dag->rank);
    PRINT6ADDR(uc_addr);
    PRINTF("\n\r");
    uip_icmp6_send(uc_addr, ICMP6_RPL, RPL_CODE_DIO, pos);
    d9c4:	9801      	ldr	r0, [sp, #4]
    d9c6:	219b      	movs	r1, #155	; 0x9b
    d9c8:	2201      	movs	r2, #1
    d9ca:	4c0a      	ldr	r4, [pc, #40]	; (d9f4 <dio_output+0x208>)
    d9cc:	47a0      	blx	r4
  }
#endif /* RPL_LEAF_ONLY */
}
    d9ce:	b006      	add	sp, #24
    d9d0:	bc1c      	pop	{r2, r3, r4}
    d9d2:	4690      	mov	r8, r2
    d9d4:	469a      	mov	sl, r3
    d9d6:	46a3      	mov	fp, r4
    d9d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    d9da:	46c0      	nop			; (mov r8, r8)
    d9dc:	20000b12 	.word	0x20000b12
    d9e0:	20002cd4 	.word	0x20002cd4
    d9e4:	0000d4e1 	.word	0x0000d4e1
    d9e8:	00010b2f 	.word	0x00010b2f
    d9ec:	0000d4c1 	.word	0x0000d4c1
    d9f0:	000002ff 	.word	0x000002ff
    d9f4:	00007ed1 	.word	0x00007ed1

0000d9f8 <dis_input>:
  buffer[pos++] = value & 0xff;
}
/*---------------------------------------------------------------------------*/
static void
dis_input(void)
{
    d9f8:	b508      	push	{r3, lr}
  PRINT6ADDR(&UIP_IP_BUF->srcipaddr);
  PRINTF("\n\r");

  for(instance = &instance_table[0], end = instance + RPL_MAX_INSTANCES;
      instance < end; ++instance) {
    if(instance->used == 1) {
    d9fa:	238d      	movs	r3, #141	; 0x8d
    d9fc:	4a09      	ldr	r2, [pc, #36]	; (da24 <dis_input+0x2c>)
    d9fe:	5cd3      	ldrb	r3, [r2, r3]
    da00:	2b01      	cmp	r3, #1
    da02:	d10b      	bne.n	da1c <dis_input+0x24>
#if RPL_LEAF_ONLY
      if(!uip_is_addr_mcast(&UIP_IP_BUF->destipaddr)) {
	PRINTF("RPL: LEAF ONLY Multicast DIS will NOT reset DIO timer\n\r");
#else /* !RPL_LEAF_ONLY */
      if(uip_is_addr_mcast(&UIP_IP_BUF->destipaddr)) {
    da04:	4b08      	ldr	r3, [pc, #32]	; (da28 <dis_input+0x30>)
    da06:	7e1b      	ldrb	r3, [r3, #24]
    da08:	2bff      	cmp	r3, #255	; 0xff
    da0a:	d103      	bne.n	da14 <dis_input+0x1c>
        PRINTF("RPL: Multicast DIS => reset DIO timer\n\r");
        rpl_reset_dio_timer(instance);
    da0c:	1c10      	adds	r0, r2, #0
    da0e:	4b07      	ldr	r3, [pc, #28]	; (da2c <dis_input+0x34>)
    da10:	4798      	blx	r3
    da12:	e003      	b.n	da1c <dis_input+0x24>
      } else {
#endif /* !RPL_LEAF_ONLY */
        PRINTF("RPL: Unicast DIS, reply to sender\n\r");
        dio_output(instance, &UIP_IP_BUF->srcipaddr);
    da14:	4803      	ldr	r0, [pc, #12]	; (da24 <dis_input+0x2c>)
    da16:	4906      	ldr	r1, [pc, #24]	; (da30 <dis_input+0x38>)
    da18:	4b06      	ldr	r3, [pc, #24]	; (da34 <dis_input+0x3c>)
    da1a:	4798      	blx	r3
      }
    }
  }
  uip_len = 0;
    da1c:	2200      	movs	r2, #0
    da1e:	4b06      	ldr	r3, [pc, #24]	; (da38 <dis_input+0x40>)
    da20:	801a      	strh	r2, [r3, #0]
}
    da22:	bd08      	pop	{r3, pc}
    da24:	20003288 	.word	0x20003288
    da28:	20002cd4 	.word	0x20002cd4
    da2c:	0000e281 	.word	0x0000e281
    da30:	20002cdc 	.word	0x20002cdc
    da34:	0000d7ed 	.word	0x0000d7ed
    da38:	20002cc0 	.word	0x20002cc0

0000da3c <dao_output_target>:
  dao_output_target(parent, &prefix, lifetime);
}
/*---------------------------------------------------------------------------*/
void
dao_output_target(rpl_parent_t *parent, uip_ipaddr_t *prefix, uint8_t lifetime)
{
    da3c:	b5f0      	push	{r4, r5, r6, r7, lr}
    da3e:	b083      	sub	sp, #12
    da40:	1c05      	adds	r5, r0, #0
    da42:	1c0c      	adds	r4, r1, #0
    da44:	9100      	str	r1, [sp, #0]
    da46:	9201      	str	r2, [sp, #4]
  int pos;

  /* Destination Advertisement Object */

  /* If we are in feather mode, we should not send any DAOs */
  if(rpl_get_mode() == RPL_MODE_FEATHER) {
    da48:	4b2d      	ldr	r3, [pc, #180]	; (db00 <dao_output_target+0xc4>)
    da4a:	4798      	blx	r3
    da4c:	2801      	cmp	r0, #1
    da4e:	d054      	beq.n	dafa <dao_output_target+0xbe>
    return;
  }

  if(parent == NULL) {
    da50:	2d00      	cmp	r5, #0
    da52:	d052      	beq.n	dafa <dao_output_target+0xbe>
    PRINTF("RPL dao_output_target error parent NULL\n\r");
    return;
  }

  dag = parent->dag;
    da54:	6869      	ldr	r1, [r5, #4]
  if(dag == NULL) {
    da56:	2900      	cmp	r1, #0
    da58:	d04f      	beq.n	dafa <dao_output_target+0xbe>
    PRINTF("RPL dao_output_target error dag NULL\n\r");
    return;
  }

  instance = dag->instance;
    da5a:	6a08      	ldr	r0, [r1, #32]

  if(instance == NULL) {
    da5c:	2800      	cmp	r0, #0
    da5e:	d04c      	beq.n	dafa <dao_output_target+0xbe>
    PRINTF("RPL dao_output_target error instance NULL\n\r");
    return;
  }
  if(prefix == NULL) {
    da60:	2c00      	cmp	r4, #0
    da62:	d04a      	beq.n	dafa <dao_output_target+0xbe>
  }
#ifdef RPL_DEBUG_DAO_OUTPUT
  RPL_DEBUG_DAO_OUTPUT(parent);
#endif

  buffer = UIP_ICMP_PAYLOAD;
    da64:	4b27      	ldr	r3, [pc, #156]	; (db04 <dao_output_target+0xc8>)
    da66:	781a      	ldrb	r2, [r3, #0]
    da68:	322c      	adds	r2, #44	; 0x2c
    da6a:	4c27      	ldr	r4, [pc, #156]	; (db08 <dao_output_target+0xcc>)
    da6c:	1914      	adds	r4, r2, r4

  RPL_LOLLIPOP_INCREMENT(dao_sequence);
    da6e:	4b27      	ldr	r3, [pc, #156]	; (db0c <dao_output_target+0xd0>)
    da70:	781b      	ldrb	r3, [r3, #0]
    da72:	b25e      	sxtb	r6, r3
    da74:	2e00      	cmp	r6, #0
    da76:	da03      	bge.n	da80 <dao_output_target+0x44>
    da78:	3301      	adds	r3, #1
    da7a:	4e24      	ldr	r6, [pc, #144]	; (db0c <dao_output_target+0xd0>)
    da7c:	7033      	strb	r3, [r6, #0]
    da7e:	e004      	b.n	da8a <dao_output_target+0x4e>
    da80:	3301      	adds	r3, #1
    da82:	267f      	movs	r6, #127	; 0x7f
    da84:	4033      	ands	r3, r6
    da86:	4e21      	ldr	r6, [pc, #132]	; (db0c <dao_output_target+0xd0>)
    da88:	7033      	strb	r3, [r6, #0]
  pos = 0;

  buffer[pos++] = instance->instance_id;
    da8a:	238c      	movs	r3, #140	; 0x8c
    da8c:	5cc0      	ldrb	r0, [r0, r3]
    da8e:	4b1e      	ldr	r3, [pc, #120]	; (db08 <dao_output_target+0xcc>)
    da90:	5498      	strb	r0, [r3, r2]
  buffer[pos] = 0;
#if RPL_DAO_SPECIFY_DAG
  buffer[pos] |= RPL_DAO_D_FLAG;
    da92:	2340      	movs	r3, #64	; 0x40
    da94:	7063      	strb	r3, [r4, #1]
#endif /* RPL_DAO_SPECIFY_DAG */
#if RPL_CONF_DAO_ACK
  buffer[pos] |= RPL_DAO_K_FLAG;
#endif /* RPL_CONF_DAO_ACK */
  ++pos;
  buffer[pos++] = 0; /* reserved */
    da96:	2700      	movs	r7, #0
    da98:	70a7      	strb	r7, [r4, #2]
  buffer[pos++] = dao_sequence;
    da9a:	4b1c      	ldr	r3, [pc, #112]	; (db0c <dao_output_target+0xd0>)
    da9c:	781b      	ldrb	r3, [r3, #0]
    da9e:	70e3      	strb	r3, [r4, #3]
#if RPL_DAO_SPECIFY_DAG
  memcpy(buffer + pos, &dag->dag_id, sizeof(dag->dag_id));
    daa0:	1d20      	adds	r0, r4, #4
    daa2:	2210      	movs	r2, #16
    daa4:	4e1a      	ldr	r6, [pc, #104]	; (db10 <dao_output_target+0xd4>)
    daa6:	47b0      	blx	r6
  pos+=sizeof(dag->dag_id);
#endif /* RPL_DAO_SPECIFY_DAG */

  /* create target subopt */
  prefixlen = sizeof(*prefix) * CHAR_BIT;
  buffer[pos++] = RPL_OPTION_TARGET;
    daa8:	2305      	movs	r3, #5
    daaa:	7523      	strb	r3, [r4, #20]
  buffer[pos++] = 2 + ((prefixlen + 7) / CHAR_BIT);
    daac:	330d      	adds	r3, #13
    daae:	7563      	strb	r3, [r4, #21]
  buffer[pos++] = 0; /* reserved */
    dab0:	75a7      	strb	r7, [r4, #22]
  buffer[pos++] = prefixlen;
    dab2:	336e      	adds	r3, #110	; 0x6e
    dab4:	75e3      	strb	r3, [r4, #23]
  memcpy(buffer + pos, prefix, (prefixlen + 7) / CHAR_BIT);
    dab6:	1c20      	adds	r0, r4, #0
    dab8:	3018      	adds	r0, #24
    daba:	9900      	ldr	r1, [sp, #0]
    dabc:	2210      	movs	r2, #16
    dabe:	47b0      	blx	r6
  pos += ((prefixlen + 7) / CHAR_BIT);

  /* Create a transit information sub-option. */
  buffer[pos++] = RPL_OPTION_TRANSIT;
    dac0:	2206      	movs	r2, #6
    dac2:	2328      	movs	r3, #40	; 0x28
    dac4:	54e2      	strb	r2, [r4, r3]
  buffer[pos++] = 4;
    dac6:	3a02      	subs	r2, #2
    dac8:	3301      	adds	r3, #1
    daca:	54e2      	strb	r2, [r4, r3]
  buffer[pos++] = 0; /* flags - ignored */
    dacc:	3301      	adds	r3, #1
    dace:	54e7      	strb	r7, [r4, r3]
  buffer[pos++] = 0; /* path control - ignored */
    dad0:	3301      	adds	r3, #1
    dad2:	54e7      	strb	r7, [r4, r3]
  buffer[pos++] = 0; /* path seq - ignored */
    dad4:	3301      	adds	r3, #1
    dad6:	54e7      	strb	r7, [r4, r3]
  buffer[pos++] = lifetime;
    dad8:	3301      	adds	r3, #1
    dada:	466a      	mov	r2, sp
    dadc:	7912      	ldrb	r2, [r2, #4]
    dade:	54e2      	strb	r2, [r4, r3]
  PRINT6ADDR(prefix);
  PRINTF(" to ");
  PRINT6ADDR(rpl_get_parent_ipaddr(parent));
  PRINTF("\n\r");

  if(rpl_get_parent_ipaddr(parent) != NULL) {
    dae0:	1c28      	adds	r0, r5, #0
    dae2:	4b0c      	ldr	r3, [pc, #48]	; (db14 <dao_output_target+0xd8>)
    dae4:	4798      	blx	r3
    dae6:	2800      	cmp	r0, #0
    dae8:	d007      	beq.n	dafa <dao_output_target+0xbe>
    uip_icmp6_send(rpl_get_parent_ipaddr(parent), ICMP6_RPL, RPL_CODE_DAO, pos);
    daea:	1c28      	adds	r0, r5, #0
    daec:	4b09      	ldr	r3, [pc, #36]	; (db14 <dao_output_target+0xd8>)
    daee:	4798      	blx	r3
    daf0:	219b      	movs	r1, #155	; 0x9b
    daf2:	2202      	movs	r2, #2
    daf4:	232e      	movs	r3, #46	; 0x2e
    daf6:	4c08      	ldr	r4, [pc, #32]	; (db18 <dao_output_target+0xdc>)
    daf8:	47a0      	blx	r4
  }
}
    dafa:	b003      	add	sp, #12
    dafc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    dafe:	46c0      	nop			; (mov r8, r8)
    db00:	0000e2b5 	.word	0x0000e2b5
    db04:	20000b12 	.word	0x20000b12
    db08:	20002cd4 	.word	0x20002cd4
    db0c:	20000140 	.word	0x20000140
    db10:	00010b2f 	.word	0x00010b2f
    db14:	0000c37d 	.word	0x0000c37d
    db18:	00007ed1 	.word	0x00007ed1

0000db1c <dao_output>:
  uip_len = 0;
}
/*---------------------------------------------------------------------------*/
void
dao_output(rpl_parent_t *parent, uint8_t lifetime)
{
    db1c:	b5f0      	push	{r4, r5, r6, r7, lr}
    db1e:	b085      	sub	sp, #20
    db20:	4b12      	ldr	r3, [pc, #72]	; (db6c <dao_output+0x50>)
get_global_addr(uip_ipaddr_t *addr)
{
  int i;
  int state;

  for(i = 0; i < UIP_DS6_ADDR_NB; i++) {
    db22:	2400      	movs	r4, #0
    state = uip_ds6_if.addr_list[i].state;
    db24:	7c5e      	ldrb	r6, [r3, #17]
    if(uip_ds6_if.addr_list[i].isused &&
    db26:	781d      	ldrb	r5, [r3, #0]
    db28:	2d00      	cmp	r5, #0
    db2a:	d019      	beq.n	db60 <dao_output+0x44>
    db2c:	2e01      	cmp	r6, #1
    db2e:	d817      	bhi.n	db60 <dao_output+0x44>
       (state == ADDR_TENTATIVE || state == ADDR_PREFERRED)) {
      if(!uip_is_addr_link_local(&uip_ds6_if.addr_list[i].ipaddr)) {
    db30:	785a      	ldrb	r2, [r3, #1]
    db32:	2afe      	cmp	r2, #254	; 0xfe
    db34:	d102      	bne.n	db3c <dao_output+0x20>
    db36:	789a      	ldrb	r2, [r3, #2]
    db38:	2a80      	cmp	r2, #128	; 0x80
    db3a:	d011      	beq.n	db60 <dao_output+0x44>
    db3c:	1c0d      	adds	r5, r1, #0
    db3e:	1c06      	adds	r6, r0, #0
        memcpy(addr, &uip_ds6_if.addr_list[i].ipaddr, sizeof(uip_ipaddr_t));
    db40:	00e1      	lsls	r1, r4, #3
    db42:	1b09      	subs	r1, r1, r4
    db44:	008c      	lsls	r4, r1, #2
    db46:	490a      	ldr	r1, [pc, #40]	; (db70 <dao_output+0x54>)
    db48:	1909      	adds	r1, r1, r4
    db4a:	3119      	adds	r1, #25
    db4c:	4668      	mov	r0, sp
    db4e:	2210      	movs	r2, #16
    db50:	4b08      	ldr	r3, [pc, #32]	; (db74 <dao_output+0x58>)
    db52:	4798      	blx	r3
    PRINTF("RPL: No global address set for this node - suppressing DAO\n\r");
    return;
  }

  /* Sending a DAO with own prefix as target */
  dao_output_target(parent, &prefix, lifetime);
    db54:	1c30      	adds	r0, r6, #0
    db56:	4669      	mov	r1, sp
    db58:	1c2a      	adds	r2, r5, #0
    db5a:	4b07      	ldr	r3, [pc, #28]	; (db78 <dao_output+0x5c>)
    db5c:	4798      	blx	r3
    db5e:	e003      	b.n	db68 <dao_output+0x4c>
get_global_addr(uip_ipaddr_t *addr)
{
  int i;
  int state;

  for(i = 0; i < UIP_DS6_ADDR_NB; i++) {
    db60:	3401      	adds	r4, #1
    db62:	331c      	adds	r3, #28
    db64:	2c03      	cmp	r4, #3
    db66:	d1dd      	bne.n	db24 <dao_output+0x8>
    return;
  }

  /* Sending a DAO with own prefix as target */
  dao_output_target(parent, &prefix, lifetime);
}
    db68:	b005      	add	sp, #20
    db6a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    db6c:	20002b80 	.word	0x20002b80
    db70:	20002b68 	.word	0x20002b68
    db74:	00010b2f 	.word	0x00010b2f
    db78:	0000da3d 	.word	0x0000da3d

0000db7c <dao_ack_output>:
  uip_len = 0;
}
/*---------------------------------------------------------------------------*/
void
dao_ack_output(rpl_instance_t *instance, uip_ipaddr_t *dest, uint8_t sequence)
{
    db7c:	b570      	push	{r4, r5, r6, lr}

  PRINTF("RPL: Sending a DAO ACK with sequence number %d to ", sequence);
  PRINT6ADDR(dest);
  PRINTF("\n\r");

  buffer = UIP_ICMP_PAYLOAD;
    db7e:	4b09      	ldr	r3, [pc, #36]	; (dba4 <dao_ack_output+0x28>)
    db80:	781b      	ldrb	r3, [r3, #0]
    db82:	332c      	adds	r3, #44	; 0x2c
    db84:	4d08      	ldr	r5, [pc, #32]	; (dba8 <dao_ack_output+0x2c>)
    db86:	195c      	adds	r4, r3, r5

  buffer[0] = instance->instance_id;
    db88:	268c      	movs	r6, #140	; 0x8c
    db8a:	5d80      	ldrb	r0, [r0, r6]
    db8c:	54e8      	strb	r0, [r5, r3]
  buffer[1] = 0;
    db8e:	2300      	movs	r3, #0
    db90:	7063      	strb	r3, [r4, #1]
  buffer[2] = sequence;
    db92:	70a2      	strb	r2, [r4, #2]
  buffer[3] = 0;
    db94:	70e3      	strb	r3, [r4, #3]

  uip_icmp6_send(dest, ICMP6_RPL, RPL_CODE_DAO_ACK, 4);
    db96:	1c08      	adds	r0, r1, #0
    db98:	219b      	movs	r1, #155	; 0x9b
    db9a:	2203      	movs	r2, #3
    db9c:	3304      	adds	r3, #4
    db9e:	4c03      	ldr	r4, [pc, #12]	; (dbac <dao_ack_output+0x30>)
    dba0:	47a0      	blx	r4
}
    dba2:	bd70      	pop	{r4, r5, r6, pc}
    dba4:	20000b12 	.word	0x20000b12
    dba8:	20002cd4 	.word	0x20002cd4
    dbac:	00007ed1 	.word	0x00007ed1

0000dbb0 <dao_input>:
#endif /* RPL_LEAF_ONLY */
}
/*---------------------------------------------------------------------------*/
static void
dao_input(void)
{
    dbb0:	b5f0      	push	{r4, r5, r6, r7, lr}
    dbb2:	465f      	mov	r7, fp
    dbb4:	4656      	mov	r6, sl
    dbb6:	464d      	mov	r5, r9
    dbb8:	4644      	mov	r4, r8
    dbba:	b4f0      	push	{r4, r5, r6, r7}
    dbbc:	b08f      	sub	sp, #60	; 0x3c
  uip_ds6_nbr_t *nbr;

  prefixlen = 0;
  parent = NULL;

  uip_ipaddr_copy(&dao_sender_addr, &UIP_IP_BUF->srcipaddr);
    dbbe:	aa0a      	add	r2, sp, #40	; 0x28
    dbc0:	49a9      	ldr	r1, [pc, #676]	; (de68 <dao_input+0x2b8>)
    dbc2:	1c0b      	adds	r3, r1, #0
    dbc4:	3308      	adds	r3, #8
    dbc6:	cb31      	ldmia	r3!, {r0, r4, r5}
    dbc8:	c231      	stmia	r2!, {r0, r4, r5}
    dbca:	681b      	ldr	r3, [r3, #0]
    dbcc:	6013      	str	r3, [r2, #0]
  /* Destination Advertisement Object */
  PRINTF("RPL: Received a DAO from ");
  PRINT6ADDR(&dao_sender_addr);
  PRINTF("\n\r");

  buffer = UIP_ICMP_PAYLOAD;
    dbce:	4ba7      	ldr	r3, [pc, #668]	; (de6c <dao_input+0x2bc>)
    dbd0:	781b      	ldrb	r3, [r3, #0]
    dbd2:	9302      	str	r3, [sp, #8]
    dbd4:	332c      	adds	r3, #44	; 0x2c
    dbd6:	185d      	adds	r5, r3, r1
  buffer_length = uip_len - uip_l3_icmp_hdr_len;
    dbd8:	4aa5      	ldr	r2, [pc, #660]	; (de70 <dao_input+0x2c0>)
    dbda:	8814      	ldrh	r4, [r2, #0]

  pos = 0;
  instance_id = buffer[pos++];

  instance = rpl_get_instance(instance_id);
    dbdc:	5cc8      	ldrb	r0, [r1, r3]
    dbde:	4ba5      	ldr	r3, [pc, #660]	; (de74 <dao_input+0x2c4>)
    dbe0:	4798      	blx	r3
    dbe2:	4680      	mov	r8, r0
  if(instance == NULL) {
    dbe4:	2800      	cmp	r0, #0
    dbe6:	d100      	bne.n	dbea <dao_input+0x3a>
    dbe8:	e136      	b.n	de58 <dao_input+0x2a8>
    PRINTF("RPL: Ignoring a DAO for an unknown RPL instance(%u)\n\r",
           instance_id);
    return;
  }

  lifetime = instance->default_lifetime;
    dbea:	2393      	movs	r3, #147	; 0x93
    dbec:	5cc3      	ldrb	r3, [r0, r3]
    dbee:	4699      	mov	r9, r3

  flags = buffer[pos++];
    dbf0:	786b      	ldrb	r3, [r5, #1]
    dbf2:	469b      	mov	fp, r3
  /* reserved */
  pos++;
  sequence = buffer[pos++];
    dbf4:	78eb      	ldrb	r3, [r5, #3]
    dbf6:	9303      	str	r3, [sp, #12]

  dag = instance->current_dag;
    dbf8:	68c3      	ldr	r3, [r0, #12]
    dbfa:	9301      	str	r3, [sp, #4]
  /* Is the DAG ID present? */
  if(flags & RPL_DAO_D_FLAG) {
    dbfc:	465b      	mov	r3, fp
    dbfe:	065b      	lsls	r3, r3, #25
    dc00:	d508      	bpl.n	dc14 <dao_input+0x64>
    if(memcmp(&dag->dag_id, &buffer[pos], sizeof(dag->dag_id))) {
    dc02:	1d29      	adds	r1, r5, #4
    dc04:	9801      	ldr	r0, [sp, #4]
    dc06:	2210      	movs	r2, #16
    dc08:	4b9b      	ldr	r3, [pc, #620]	; (de78 <dao_input+0x2c8>)
    dc0a:	4798      	blx	r3
      PRINTF("RPL: Ignoring a DAO for a DAG different from ours\n\r");
      return;
    }
    pos += 16;
    dc0c:	2614      	movs	r6, #20
  sequence = buffer[pos++];

  dag = instance->current_dag;
  /* Is the DAG ID present? */
  if(flags & RPL_DAO_D_FLAG) {
    if(memcmp(&dag->dag_id, &buffer[pos], sizeof(dag->dag_id))) {
    dc0e:	2800      	cmp	r0, #0
    dc10:	d001      	beq.n	dc16 <dao_input+0x66>
    dc12:	e121      	b.n	de58 <dao_input+0x2a8>
  lifetime = instance->default_lifetime;

  flags = buffer[pos++];
  /* reserved */
  pos++;
  sequence = buffer[pos++];
    dc14:	2604      	movs	r6, #4
      return;
    }
    pos += 16;
  }

  learned_from = uip_is_addr_mcast(&dao_sender_addr) ?
    dc16:	ab0a      	add	r3, sp, #40	; 0x28
                 RPL_ROUTE_FROM_MULTICAST_DAO : RPL_ROUTE_FROM_UNICAST_DAO;
    dc18:	781b      	ldrb	r3, [r3, #0]
    dc1a:	2bff      	cmp	r3, #255	; 0xff
    dc1c:	d000      	beq.n	dc20 <dao_input+0x70>
    dc1e:	e103      	b.n	de28 <dao_input+0x278>
    dc20:	e018      	b.n	dc54 <dao_input+0xa4>
    /* Check whether this is a DAO forwarding loop. */
    parent = rpl_find_parent(dag, &dao_sender_addr);
    /* check if this is a new DAO registration with an "illegal" rank */
    /* if we already route to this node it is likely */
    if(parent != NULL &&
       DAG_RANK(parent->rank, instance) < DAG_RANK(dag->rank, instance)) {
    dc22:	239a      	movs	r3, #154	; 0x9a
    dc24:	4642      	mov	r2, r8
    dc26:	5ad3      	ldrh	r3, [r2, r3]
    dc28:	8938      	ldrh	r0, [r7, #8]
    dc2a:	4a94      	ldr	r2, [pc, #592]	; (de7c <dao_input+0x2cc>)
    dc2c:	4692      	mov	sl, r2
    dc2e:	9304      	str	r3, [sp, #16]
    dc30:	1c19      	adds	r1, r3, #0
    dc32:	4790      	blx	r2
    dc34:	9005      	str	r0, [sp, #20]
    dc36:	9a01      	ldr	r2, [sp, #4]
    dc38:	8b90      	ldrh	r0, [r2, #28]
    dc3a:	9904      	ldr	r1, [sp, #16]
    dc3c:	47d0      	blx	sl
  if(learned_from == RPL_ROUTE_FROM_UNICAST_DAO) {
    /* Check whether this is a DAO forwarding loop. */
    parent = rpl_find_parent(dag, &dao_sender_addr);
    /* check if this is a new DAO registration with an "illegal" rank */
    /* if we already route to this node it is likely */
    if(parent != NULL &&
    dc3e:	466b      	mov	r3, sp
    dc40:	8a9b      	ldrh	r3, [r3, #20]
    dc42:	b280      	uxth	r0, r0
    dc44:	4283      	cmp	r3, r0
    dc46:	d20e      	bcs.n	dc66 <dao_input+0xb6>
       DAG_RANK(parent->rank, instance) < DAG_RANK(dag->rank, instance)) {
      PRINTF("RPL: Loop detected when receiving a unicast DAO from a node with a lower rank! (%u < %u)\n\r",
          DAG_RANK(parent->rank, instance), DAG_RANK(dag->rank, instance));
      parent->rank = INFINITE_RANK;
    dc48:	2301      	movs	r3, #1
    dc4a:	425b      	negs	r3, r3
    dc4c:	813b      	strh	r3, [r7, #8]
      parent->updated = 1;
    dc4e:	3302      	adds	r3, #2
    dc50:	737b      	strb	r3, [r7, #13]
      return;
    dc52:	e101      	b.n	de58 <dao_input+0x2a8>
  PRINTF("RPL: Received a DAO from ");
  PRINT6ADDR(&dao_sender_addr);
  PRINTF("\n\r");

  buffer = UIP_ICMP_PAYLOAD;
  buffer_length = uip_len - uip_l3_icmp_hdr_len;
    dc54:	9b02      	ldr	r3, [sp, #8]
    dc56:	1ae4      	subs	r4, r4, r3
    dc58:	3c2c      	subs	r4, #44	; 0x2c
      return;
    }
  }

  /* Check if there are any RPL options present. */
  for(i = pos; i < buffer_length; i += len) {
    dc5a:	b2e4      	uxtb	r4, r4
    dc5c:	2300      	movs	r3, #0
    dc5e:	469a      	mov	sl, r3
    dc60:	42a6      	cmp	r6, r4
    dc62:	db0a      	blt.n	dc7a <dao_input+0xca>
    dc64:	e02d      	b.n	dcc2 <dao_input+0x112>
      parent->updated = 1;
      return;
    }

    /* If we get the DAO from our parent, we also have a loop. */
    if(parent != NULL && parent == dag->preferred_parent) {
    dc66:	9b01      	ldr	r3, [sp, #4]
    dc68:	699b      	ldr	r3, [r3, #24]
    dc6a:	42bb      	cmp	r3, r7
    dc6c:	d1f2      	bne.n	dc54 <dao_input+0xa4>
      PRINTF("RPL: Loop detected when receiving a unicast DAO from our parent\n\r");
      parent->rank = INFINITE_RANK;
    dc6e:	2201      	movs	r2, #1
    dc70:	4252      	negs	r2, r2
    dc72:	811a      	strh	r2, [r3, #8]
      parent->updated = 1;
    dc74:	3202      	adds	r2, #2
    dc76:	735a      	strb	r2, [r3, #13]
      return;
    dc78:	e0ee      	b.n	de58 <dao_input+0x2a8>
    }
  }

  /* Check if there are any RPL options present. */
  for(i = pos; i < buffer_length; i += len) {
    subopt_type = buffer[i];
    dc7a:	1c31      	adds	r1, r6, #0
    dc7c:	5dab      	ldrb	r3, [r5, r6]
    if(subopt_type == RPL_OPTION_PAD1) {
      len = 1;
    dc7e:	2701      	movs	r7, #1
  }

  /* Check if there are any RPL options present. */
  for(i = pos; i < buffer_length; i += len) {
    subopt_type = buffer[i];
    if(subopt_type == RPL_OPTION_PAD1) {
    dc80:	2b00      	cmp	r3, #0
    dc82:	d01b      	beq.n	dcbc <dao_input+0x10c>
      len = 1;
    } else {
      /* The option consists of a two-byte header and a payload. */
      len = 2 + buffer[i + 1];
    dc84:	19aa      	adds	r2, r5, r6
    dc86:	7857      	ldrb	r7, [r2, #1]
    dc88:	3702      	adds	r7, #2
    }

    switch(subopt_type) {
    dc8a:	2b05      	cmp	r3, #5
    dc8c:	d002      	beq.n	dc94 <dao_input+0xe4>
    dc8e:	2b06      	cmp	r3, #6
    dc90:	d011      	beq.n	dcb6 <dao_input+0x106>
    dc92:	e013      	b.n	dcbc <dao_input+0x10c>
    case RPL_OPTION_TARGET:
      /* Handle the target option. */
      prefixlen = buffer[i + 3];
    dc94:	19ab      	adds	r3, r5, r6
    dc96:	78db      	ldrb	r3, [r3, #3]
    dc98:	469a      	mov	sl, r3
      memset(&prefix, 0, sizeof(prefix));
    dc9a:	2300      	movs	r3, #0
    dc9c:	9306      	str	r3, [sp, #24]
    dc9e:	9307      	str	r3, [sp, #28]
    dca0:	9308      	str	r3, [sp, #32]
    dca2:	9309      	str	r3, [sp, #36]	; 0x24
      memcpy(&prefix, buffer + i + 4, (prefixlen + 7) / CHAR_BIT);
    dca4:	4653      	mov	r3, sl
    dca6:	1dda      	adds	r2, r3, #7
    dca8:	10d2      	asrs	r2, r2, #3
    dcaa:	3104      	adds	r1, #4
    dcac:	1869      	adds	r1, r5, r1
    dcae:	a806      	add	r0, sp, #24
    dcb0:	4b73      	ldr	r3, [pc, #460]	; (de80 <dao_input+0x2d0>)
    dcb2:	4798      	blx	r3
      break;
    dcb4:	e002      	b.n	dcbc <dao_input+0x10c>
    case RPL_OPTION_TRANSIT:
      /* The path sequence and control are ignored. */
      /*      pathcontrol = buffer[i + 3];
              pathsequence = buffer[i + 4];*/
      lifetime = buffer[i + 5];
    dcb6:	19a9      	adds	r1, r5, r6
    dcb8:	794b      	ldrb	r3, [r1, #5]
    dcba:	4699      	mov	r9, r3
      return;
    }
  }

  /* Check if there are any RPL options present. */
  for(i = pos; i < buffer_length; i += len) {
    dcbc:	19f6      	adds	r6, r6, r7
    dcbe:	42a6      	cmp	r6, r4
    dcc0:	dbdb      	blt.n	dc7a <dao_input+0xca>
    }
    goto fwd_dao;
  }
#endif

  rep = uip_ds6_route_lookup(&prefix);
    dcc2:	a806      	add	r0, sp, #24
    dcc4:	4b6f      	ldr	r3, [pc, #444]	; (de84 <dao_input+0x2d4>)
    dcc6:	4798      	blx	r3
    dcc8:	1c06      	adds	r6, r0, #0

  if(lifetime == RPL_ZERO_LIFETIME) {
    dcca:	464b      	mov	r3, r9
    dccc:	2b00      	cmp	r3, #0
    dcce:	d13e      	bne.n	dd4e <dao_input+0x19e>
    PRINTF("RPL: No-Path DAO received\n\r");
    /* No-Path DAO received; invoke the route purging routine. */
    if(rep != NULL &&
    dcd0:	2800      	cmp	r0, #0
    dcd2:	d100      	bne.n	dcd6 <dao_input+0x126>
    dcd4:	e0c0      	b.n	de58 <dao_input+0x2a8>
       rep->state.nopath_received == 0 &&
    dcd6:	3321      	adds	r3, #33	; 0x21
  rep = uip_ds6_route_lookup(&prefix);

  if(lifetime == RPL_ZERO_LIFETIME) {
    PRINTF("RPL: No-Path DAO received\n\r");
    /* No-Path DAO received; invoke the route purging routine. */
    if(rep != NULL &&
    dcd8:	5cc3      	ldrb	r3, [r0, r3]
    dcda:	2b00      	cmp	r3, #0
    dcdc:	d000      	beq.n	dce0 <dao_input+0x130>
    dcde:	e0bb      	b.n	de58 <dao_input+0x2a8>
       rep->state.nopath_received == 0 &&
       rep->length == prefixlen &&
    dce0:	3324      	adds	r3, #36	; 0x24

  if(lifetime == RPL_ZERO_LIFETIME) {
    PRINTF("RPL: No-Path DAO received\n\r");
    /* No-Path DAO received; invoke the route purging routine. */
    if(rep != NULL &&
       rep->state.nopath_received == 0 &&
    dce2:	5cc3      	ldrb	r3, [r0, r3]
    dce4:	4553      	cmp	r3, sl
    dce6:	d000      	beq.n	dcea <dao_input+0x13a>
    dce8:	e0b6      	b.n	de58 <dao_input+0x2a8>
       rep->length == prefixlen &&
       uip_ds6_route_nexthop(rep) != NULL &&
    dcea:	4b67      	ldr	r3, [pc, #412]	; (de88 <dao_input+0x2d8>)
    dcec:	4798      	blx	r3
  if(lifetime == RPL_ZERO_LIFETIME) {
    PRINTF("RPL: No-Path DAO received\n\r");
    /* No-Path DAO received; invoke the route purging routine. */
    if(rep != NULL &&
       rep->state.nopath_received == 0 &&
       rep->length == prefixlen &&
    dcee:	2800      	cmp	r0, #0
    dcf0:	d100      	bne.n	dcf4 <dao_input+0x144>
    dcf2:	e0b1      	b.n	de58 <dao_input+0x2a8>
       uip_ds6_route_nexthop(rep) != NULL &&
       uip_ipaddr_cmp(uip_ds6_route_nexthop(rep), &dao_sender_addr)) {
    dcf4:	1c30      	adds	r0, r6, #0
    dcf6:	4b64      	ldr	r3, [pc, #400]	; (de88 <dao_input+0x2d8>)
    dcf8:	4798      	blx	r3
    dcfa:	a90a      	add	r1, sp, #40	; 0x28
    dcfc:	2210      	movs	r2, #16
    dcfe:	4b5e      	ldr	r3, [pc, #376]	; (de78 <dao_input+0x2c8>)
    dd00:	4798      	blx	r3
    PRINTF("RPL: No-Path DAO received\n\r");
    /* No-Path DAO received; invoke the route purging routine. */
    if(rep != NULL &&
       rep->state.nopath_received == 0 &&
       rep->length == prefixlen &&
       uip_ds6_route_nexthop(rep) != NULL &&
    dd02:	2800      	cmp	r0, #0
    dd04:	d000      	beq.n	dd08 <dao_input+0x158>
    dd06:	e0a7      	b.n	de58 <dao_input+0x2a8>
       uip_ipaddr_cmp(uip_ds6_route_nexthop(rep), &dao_sender_addr)) {
      PRINTF("RPL: Setting expiration timer for prefix ");
      PRINT6ADDR(&prefix);
      PRINTF("\n\r");
      rep->state.nopath_received = 1;
    dd08:	2201      	movs	r2, #1
    dd0a:	2321      	movs	r3, #33	; 0x21
    dd0c:	54f2      	strb	r2, [r6, r3]
      rep->state.lifetime = DAO_EXPIRATION_TIMEOUT;
    dd0e:	331b      	adds	r3, #27
    dd10:	61b3      	str	r3, [r6, #24]

      /* We forward the incoming no-path DAO to our parent, if we have
         one. */
      if(dag->preferred_parent != NULL &&
    dd12:	9d01      	ldr	r5, [sp, #4]
    dd14:	69a8      	ldr	r0, [r5, #24]
    dd16:	2800      	cmp	r0, #0
    dd18:	d00b      	beq.n	dd32 <dao_input+0x182>
         rpl_get_parent_ipaddr(dag->preferred_parent) != NULL) {
    dd1a:	4b5c      	ldr	r3, [pc, #368]	; (de8c <dao_input+0x2dc>)
    dd1c:	4798      	blx	r3
      rep->state.nopath_received = 1;
      rep->state.lifetime = DAO_EXPIRATION_TIMEOUT;

      /* We forward the incoming no-path DAO to our parent, if we have
         one. */
      if(dag->preferred_parent != NULL &&
    dd1e:	2800      	cmp	r0, #0
    dd20:	d007      	beq.n	dd32 <dao_input+0x182>
         rpl_get_parent_ipaddr(dag->preferred_parent) != NULL) {
        PRINTF("RPL: Forwarding no-path DAO to parent ");
        PRINT6ADDR(rpl_get_parent_ipaddr(dag->preferred_parent));
        PRINTF("\n\r");
        uip_icmp6_send(rpl_get_parent_ipaddr(dag->preferred_parent),
    dd22:	69a8      	ldr	r0, [r5, #24]
    dd24:	4b59      	ldr	r3, [pc, #356]	; (de8c <dao_input+0x2dc>)
    dd26:	4798      	blx	r3
    dd28:	219b      	movs	r1, #155	; 0x9b
    dd2a:	2202      	movs	r2, #2
    dd2c:	1c23      	adds	r3, r4, #0
    dd2e:	4c58      	ldr	r4, [pc, #352]	; (de90 <dao_input+0x2e0>)
    dd30:	47a0      	blx	r4
                       ICMP6_RPL, RPL_CODE_DAO, buffer_length);
      }
      if(flags & RPL_DAO_K_FLAG) {
    dd32:	465b      	mov	r3, fp
    dd34:	466a      	mov	r2, sp
    dd36:	7113      	strb	r3, [r2, #4]
    dd38:	7913      	ldrb	r3, [r2, #4]
    dd3a:	b25b      	sxtb	r3, r3
    dd3c:	2b00      	cmp	r3, #0
    dd3e:	db00      	blt.n	dd42 <dao_input+0x192>
    dd40:	e08a      	b.n	de58 <dao_input+0x2a8>
        dao_ack_output(instance, &dao_sender_addr, sequence);
    dd42:	4640      	mov	r0, r8
    dd44:	a90a      	add	r1, sp, #40	; 0x28
    dd46:	9a03      	ldr	r2, [sp, #12]
    dd48:	4b52      	ldr	r3, [pc, #328]	; (de94 <dao_input+0x2e4>)
    dd4a:	4798      	blx	r3
    dd4c:	e084      	b.n	de58 <dao_input+0x2a8>
      }
    }
    return;
  }

  learned_from = uip_is_addr_mcast(&dao_sender_addr) ?
    dd4e:	ab0a      	add	r3, sp, #40	; 0x28
                 RPL_ROUTE_FROM_MULTICAST_DAO : RPL_ROUTE_FROM_UNICAST_DAO;
    dd50:	781b      	ldrb	r3, [r3, #0]
    dd52:	2bff      	cmp	r3, #255	; 0xff
    dd54:	d170      	bne.n	de38 <dao_input+0x288>
    dd56:	e078      	b.n	de4a <dao_input+0x29a>
  if(learned_from == RPL_ROUTE_FROM_UNICAST_DAO) {
    /* Check whether this is a DAO forwarding loop. */
    /* check if this is a new DAO registration with an "illegal" rank */
    /* if we already route to this node it is likely */
    if(parent != NULL &&
       DAG_RANK(parent->rank, instance) < DAG_RANK(dag->rank, instance)) {
    dd58:	239a      	movs	r3, #154	; 0x9a
    dd5a:	4642      	mov	r2, r8
    dd5c:	5ad6      	ldrh	r6, [r2, r3]
    dd5e:	8938      	ldrh	r0, [r7, #8]
    dd60:	4d46      	ldr	r5, [pc, #280]	; (de7c <dao_input+0x2cc>)
    dd62:	1c31      	adds	r1, r6, #0
    dd64:	47a8      	blx	r5
    dd66:	9002      	str	r0, [sp, #8]
    dd68:	9b01      	ldr	r3, [sp, #4]
    dd6a:	8b98      	ldrh	r0, [r3, #28]
    dd6c:	1c31      	adds	r1, r6, #0
    dd6e:	47a8      	blx	r5
  parent = rpl_find_parent(dag, &dao_sender_addr);
  if(learned_from == RPL_ROUTE_FROM_UNICAST_DAO) {
    /* Check whether this is a DAO forwarding loop. */
    /* check if this is a new DAO registration with an "illegal" rank */
    /* if we already route to this node it is likely */
    if(parent != NULL &&
    dd70:	466b      	mov	r3, sp
    dd72:	891e      	ldrh	r6, [r3, #8]
    dd74:	b280      	uxth	r0, r0
    dd76:	4286      	cmp	r6, r0
    dd78:	d205      	bcs.n	dd86 <dao_input+0x1d6>
       DAG_RANK(parent->rank, instance) < DAG_RANK(dag->rank, instance)) {
      PRINTF("RPL: Loop detected when receiving a unicast DAO from a node with a lower rank! (%u < %u)\n\r",
             DAG_RANK(parent->rank, instance), DAG_RANK(dag->rank, instance));
      parent->rank = INFINITE_RANK;
    dd7a:	2301      	movs	r3, #1
    dd7c:	425b      	negs	r3, r3
    dd7e:	813b      	strh	r3, [r7, #8]
      parent->updated = 1;
    dd80:	3302      	adds	r3, #2
    dd82:	737b      	strb	r3, [r7, #13]
      return;
    dd84:	e068      	b.n	de58 <dao_input+0x2a8>
    }

    /* If we get the DAO from our parent, we also have a loop. */
    if(parent != NULL && parent == dag->preferred_parent) {
    dd86:	9b01      	ldr	r3, [sp, #4]
    dd88:	699b      	ldr	r3, [r3, #24]
    }
    return;
  }

  learned_from = uip_is_addr_mcast(&dao_sender_addr) ?
                 RPL_ROUTE_FROM_MULTICAST_DAO : RPL_ROUTE_FROM_UNICAST_DAO;
    dd8a:	2601      	movs	r6, #1
      parent->updated = 1;
      return;
    }

    /* If we get the DAO from our parent, we also have a loop. */
    if(parent != NULL && parent == dag->preferred_parent) {
    dd8c:	42bb      	cmp	r3, r7
    dd8e:	d105      	bne.n	dd9c <dao_input+0x1ec>
      PRINTF("RPL: Loop detected when receiving a unicast DAO from our parent\n\r");
      parent->rank = INFINITE_RANK;
    dd90:	2201      	movs	r2, #1
    dd92:	4252      	negs	r2, r2
    dd94:	811a      	strh	r2, [r3, #8]
      parent->updated = 1;
    dd96:	3202      	adds	r2, #2
    dd98:	735a      	strb	r2, [r3, #13]
      return;
    dd9a:	e05d      	b.n	de58 <dao_input+0x2a8>
    }
  }

  PRINTF("RPL: adding DAO route\n\r");

  if((nbr = uip_ds6_nbr_lookup(&dao_sender_addr)) == NULL) {
    dd9c:	a80a      	add	r0, sp, #40	; 0x28
    dd9e:	4b3e      	ldr	r3, [pc, #248]	; (de98 <dao_input+0x2e8>)
    dda0:	4798      	blx	r3
    dda2:	2800      	cmp	r0, #0
    dda4:	d10b      	bne.n	ddbe <dao_input+0x20e>
    if((nbr = uip_ds6_nbr_add(&dao_sender_addr,
    dda6:	a80a      	add	r0, sp, #40	; 0x28
    dda8:	493c      	ldr	r1, [pc, #240]	; (de9c <dao_input+0x2ec>)
    ddaa:	2200      	movs	r2, #0
    ddac:	2301      	movs	r3, #1
    ddae:	4d3c      	ldr	r5, [pc, #240]	; (dea0 <dao_input+0x2f0>)
    ddb0:	47a8      	blx	r5
    ddb2:	2800      	cmp	r0, #0
    ddb4:	d050      	beq.n	de58 <dao_input+0x2a8>
                              (uip_lladdr_t *)packetbuf_addr(PACKETBUF_ADDR_SENDER),
                              0, NBR_REACHABLE)) != NULL) {
      /* set reachable timer */
      stimer_set(&nbr->reachable, UIP_ND6_REACHABLE_TIME / 1000);
    ddb6:	3010      	adds	r0, #16
    ddb8:	211e      	movs	r1, #30
    ddba:	4b3a      	ldr	r3, [pc, #232]	; (dea4 <dao_input+0x2f4>)
    ddbc:	4798      	blx	r3
    }
  } else {
    PRINTF("RPL: Neighbor already in neighbor cache\n\r");
  }

  rpl_lock_parent(parent);
    ddbe:	1c38      	adds	r0, r7, #0
    ddc0:	4b39      	ldr	r3, [pc, #228]	; (dea8 <dao_input+0x2f8>)
    ddc2:	4798      	blx	r3

  rep = rpl_add_route(dag, &prefix, prefixlen, &dao_sender_addr);
    ddc4:	9801      	ldr	r0, [sp, #4]
    ddc6:	a906      	add	r1, sp, #24
    ddc8:	4652      	mov	r2, sl
    ddca:	ab0a      	add	r3, sp, #40	; 0x28
    ddcc:	4d37      	ldr	r5, [pc, #220]	; (deac <dao_input+0x2fc>)
    ddce:	47a8      	blx	r5
  if(rep == NULL) {
    ddd0:	2800      	cmp	r0, #0
    ddd2:	d041      	beq.n	de58 <dao_input+0x2a8>
    RPL_STAT(rpl_stats.mem_overflows++);
    PRINTF("RPL: Could not add a route after receiving a DAO\n\r");
    return;
  }

  rep->state.lifetime = RPL_LIFETIME(instance, lifetime);
    ddd4:	239c      	movs	r3, #156	; 0x9c
    ddd6:	4642      	mov	r2, r8
    ddd8:	5ad3      	ldrh	r3, [r2, r3]
    ddda:	464a      	mov	r2, r9
    dddc:	4353      	muls	r3, r2
    ddde:	6183      	str	r3, [r0, #24]
  rep->state.learned_from = learned_from;
    dde0:	2320      	movs	r3, #32
    dde2:	54c6      	strb	r6, [r0, r3]

#if RPL_CONF_MULTICAST
fwd_dao:
#endif

  if(learned_from == RPL_ROUTE_FROM_UNICAST_DAO) {
    dde4:	2e01      	cmp	r6, #1
    dde6:	d11b      	bne.n	de20 <dao_input+0x270>
    if(dag->preferred_parent != NULL &&
    dde8:	9d01      	ldr	r5, [sp, #4]
    ddea:	69a8      	ldr	r0, [r5, #24]
    ddec:	2800      	cmp	r0, #0
    ddee:	d00b      	beq.n	de08 <dao_input+0x258>
       rpl_get_parent_ipaddr(dag->preferred_parent) != NULL) {
    ddf0:	4b26      	ldr	r3, [pc, #152]	; (de8c <dao_input+0x2dc>)
    ddf2:	4798      	blx	r3
#if RPL_CONF_MULTICAST
fwd_dao:
#endif

  if(learned_from == RPL_ROUTE_FROM_UNICAST_DAO) {
    if(dag->preferred_parent != NULL &&
    ddf4:	2800      	cmp	r0, #0
    ddf6:	d007      	beq.n	de08 <dao_input+0x258>
       rpl_get_parent_ipaddr(dag->preferred_parent) != NULL) {
      PRINTF("RPL: Forwarding DAO to parent ");
      PRINT6ADDR(rpl_get_parent_ipaddr(dag->preferred_parent));
      PRINTF("\n\r");
      uip_icmp6_send(rpl_get_parent_ipaddr(dag->preferred_parent),
    ddf8:	69a8      	ldr	r0, [r5, #24]
    ddfa:	4b24      	ldr	r3, [pc, #144]	; (de8c <dao_input+0x2dc>)
    ddfc:	4798      	blx	r3
    ddfe:	219b      	movs	r1, #155	; 0x9b
    de00:	2202      	movs	r2, #2
    de02:	1c23      	adds	r3, r4, #0
    de04:	4c22      	ldr	r4, [pc, #136]	; (de90 <dao_input+0x2e0>)
    de06:	47a0      	blx	r4
                     ICMP6_RPL, RPL_CODE_DAO, buffer_length);
    }
    if(flags & RPL_DAO_K_FLAG) {
    de08:	465b      	mov	r3, fp
    de0a:	466a      	mov	r2, sp
    de0c:	7113      	strb	r3, [r2, #4]
    de0e:	7913      	ldrb	r3, [r2, #4]
    de10:	b25b      	sxtb	r3, r3
    de12:	2b00      	cmp	r3, #0
    de14:	da04      	bge.n	de20 <dao_input+0x270>
      dao_ack_output(instance, &dao_sender_addr, sequence);
    de16:	4640      	mov	r0, r8
    de18:	a90a      	add	r1, sp, #40	; 0x28
    de1a:	9a03      	ldr	r2, [sp, #12]
    de1c:	4b1d      	ldr	r3, [pc, #116]	; (de94 <dao_input+0x2e4>)
    de1e:	4798      	blx	r3
    }
  }
  uip_len = 0;
    de20:	2200      	movs	r2, #0
    de22:	4b13      	ldr	r3, [pc, #76]	; (de70 <dao_input+0x2c0>)
    de24:	801a      	strh	r2, [r3, #0]
    de26:	e017      	b.n	de58 <dao_input+0x2a8>

  PRINTF("RPL: DAO from %s\n\r",
         learned_from == RPL_ROUTE_FROM_UNICAST_DAO? "unicast": "multicast");
  if(learned_from == RPL_ROUTE_FROM_UNICAST_DAO) {
    /* Check whether this is a DAO forwarding loop. */
    parent = rpl_find_parent(dag, &dao_sender_addr);
    de28:	9801      	ldr	r0, [sp, #4]
    de2a:	a90a      	add	r1, sp, #40	; 0x28
    de2c:	4b20      	ldr	r3, [pc, #128]	; (deb0 <dao_input+0x300>)
    de2e:	4798      	blx	r3
    de30:	1e07      	subs	r7, r0, #0
    /* check if this is a new DAO registration with an "illegal" rank */
    /* if we already route to this node it is likely */
    if(parent != NULL &&
    de32:	d000      	beq.n	de36 <dao_input+0x286>
    de34:	e6f5      	b.n	dc22 <dao_input+0x72>
    de36:	e70d      	b.n	dc54 <dao_input+0xa4>
  learned_from = uip_is_addr_mcast(&dao_sender_addr) ?
                 RPL_ROUTE_FROM_MULTICAST_DAO : RPL_ROUTE_FROM_UNICAST_DAO;

  PRINTF("RPL: DAO from %s\n\r",
         learned_from == RPL_ROUTE_FROM_UNICAST_DAO? "unicast": "multicast");
  parent = rpl_find_parent(dag, &dao_sender_addr);
    de38:	9801      	ldr	r0, [sp, #4]
    de3a:	a90a      	add	r1, sp, #40	; 0x28
    de3c:	4b1c      	ldr	r3, [pc, #112]	; (deb0 <dao_input+0x300>)
    de3e:	4798      	blx	r3
    de40:	1c07      	adds	r7, r0, #0
    }
    return;
  }

  learned_from = uip_is_addr_mcast(&dao_sender_addr) ?
                 RPL_ROUTE_FROM_MULTICAST_DAO : RPL_ROUTE_FROM_UNICAST_DAO;
    de42:	2601      	movs	r6, #1
  parent = rpl_find_parent(dag, &dao_sender_addr);
  if(learned_from == RPL_ROUTE_FROM_UNICAST_DAO) {
    /* Check whether this is a DAO forwarding loop. */
    /* check if this is a new DAO registration with an "illegal" rank */
    /* if we already route to this node it is likely */
    if(parent != NULL &&
    de44:	2800      	cmp	r0, #0
    de46:	d0a9      	beq.n	dd9c <dao_input+0x1ec>
    de48:	e786      	b.n	dd58 <dao_input+0x1a8>
  learned_from = uip_is_addr_mcast(&dao_sender_addr) ?
                 RPL_ROUTE_FROM_MULTICAST_DAO : RPL_ROUTE_FROM_UNICAST_DAO;

  PRINTF("RPL: DAO from %s\n\r",
         learned_from == RPL_ROUTE_FROM_UNICAST_DAO? "unicast": "multicast");
  parent = rpl_find_parent(dag, &dao_sender_addr);
    de4a:	9801      	ldr	r0, [sp, #4]
    de4c:	a90a      	add	r1, sp, #40	; 0x28
    de4e:	4b18      	ldr	r3, [pc, #96]	; (deb0 <dao_input+0x300>)
    de50:	4798      	blx	r3
    de52:	1c07      	adds	r7, r0, #0
    }
    return;
  }

  learned_from = uip_is_addr_mcast(&dao_sender_addr) ?
                 RPL_ROUTE_FROM_MULTICAST_DAO : RPL_ROUTE_FROM_UNICAST_DAO;
    de54:	2602      	movs	r6, #2
    de56:	e7a1      	b.n	dd9c <dao_input+0x1ec>
    if(flags & RPL_DAO_K_FLAG) {
      dao_ack_output(instance, &dao_sender_addr, sequence);
    }
  }
  uip_len = 0;
}
    de58:	b00f      	add	sp, #60	; 0x3c
    de5a:	bc3c      	pop	{r2, r3, r4, r5}
    de5c:	4690      	mov	r8, r2
    de5e:	4699      	mov	r9, r3
    de60:	46a2      	mov	sl, r4
    de62:	46ab      	mov	fp, r5
    de64:	bdf0      	pop	{r4, r5, r6, r7, pc}
    de66:	46c0      	nop			; (mov r8, r8)
    de68:	20002cd4 	.word	0x20002cd4
    de6c:	20000b12 	.word	0x20000b12
    de70:	20002cc0 	.word	0x20002cc0
    de74:	0000c96d 	.word	0x0000c96d
    de78:	00010b11 	.word	0x00010b11
    de7c:	0001076d 	.word	0x0001076d
    de80:	00010b2f 	.word	0x00010b2f
    de84:	00006e79 	.word	0x00006e79
    de88:	00006e2d 	.word	0x00006e2d
    de8c:	0000c37d 	.word	0x0000c37d
    de90:	00007ed1 	.word	0x00007ed1
    de94:	0000db7d 	.word	0x0000db7d
    de98:	00006b65 	.word	0x00006b65
    de9c:	200031d8 	.word	0x200031d8
    dea0:	00006af1 	.word	0x00006af1
    dea4:	0000ed0d 	.word	0x0000ed0d
    dea8:	0000d129 	.word	0x0000d129
    deac:	0000e3dd 	.word	0x0000e3dd
    deb0:	0000c4e5 	.word	0x0000c4e5

0000deb4 <rpl_icmp6_register_handlers>:
  uip_icmp6_send(dest, ICMP6_RPL, RPL_CODE_DAO_ACK, 4);
}
/*---------------------------------------------------------------------------*/
void
rpl_icmp6_register_handlers()
{
    deb4:	b510      	push	{r4, lr}
  uip_icmp6_register_input_handler(&dis_handler);
    deb6:	4805      	ldr	r0, [pc, #20]	; (decc <rpl_icmp6_register_handlers+0x18>)
    deb8:	4c05      	ldr	r4, [pc, #20]	; (ded0 <rpl_icmp6_register_handlers+0x1c>)
    deba:	47a0      	blx	r4
  uip_icmp6_register_input_handler(&dio_handler);
    debc:	4805      	ldr	r0, [pc, #20]	; (ded4 <rpl_icmp6_register_handlers+0x20>)
    debe:	47a0      	blx	r4
  uip_icmp6_register_input_handler(&dao_handler);
    dec0:	4805      	ldr	r0, [pc, #20]	; (ded8 <rpl_icmp6_register_handlers+0x24>)
    dec2:	47a0      	blx	r4
  uip_icmp6_register_input_handler(&dao_ack_handler);
    dec4:	4805      	ldr	r0, [pc, #20]	; (dedc <rpl_icmp6_register_handlers+0x28>)
    dec6:	47a0      	blx	r4
}
    dec8:	bd10      	pop	{r4, pc}
    deca:	46c0      	nop			; (mov r8, r8)
    decc:	20000144 	.word	0x20000144
    ded0:	00007cf9 	.word	0x00007cf9
    ded4:	2000015c 	.word	0x2000015c
    ded8:	20000150 	.word	0x20000150
    dedc:	20000134 	.word	0x20000134

0000dee0 <reset>:

static void
reset(rpl_dag_t *dag)
{
  PRINTF("RPL: Reset MRHOF\n\r");
}
    dee0:	4770      	bx	lr
    dee2:	46c0      	nop			; (mov r8, r8)

0000dee4 <neighbor_link_callback>:

static void
neighbor_link_callback(rpl_parent_t *p, int status, int numtx)
{
    dee4:	b510      	push	{r4, lr}
    dee6:	1c03      	adds	r3, r0, #0
  uint16_t recorded_etx = p->link_metric;
    dee8:	8940      	ldrh	r0, [r0, #10]
  uint16_t packet_etx = numtx * RPL_DAG_MC_ETX_DIVISOR;
  uint16_t new_etx;

  /* Do not penalize the ETX when collisions or transmission errors occur. */
  if(status == MAC_TX_OK || status == MAC_TX_NOACK) {
    deea:	2900      	cmp	r1, #0
    deec:	d102      	bne.n	def4 <neighbor_link_callback+0x10>

static void
neighbor_link_callback(rpl_parent_t *p, int status, int numtx)
{
  uint16_t recorded_etx = p->link_metric;
  uint16_t packet_etx = numtx * RPL_DAG_MC_ETX_DIVISOR;
    deee:	0212      	lsls	r2, r2, #8
    def0:	b292      	uxth	r2, r2
    def2:	e003      	b.n	defc <neighbor_link_callback+0x18>
  uint16_t new_etx;

  /* Do not penalize the ETX when collisions or transmission errors occur. */
  if(status == MAC_TX_OK || status == MAC_TX_NOACK) {
    def4:	2902      	cmp	r1, #2
    def6:	d10c      	bne.n	df12 <neighbor_link_callback+0x2e>
    if(status == MAC_TX_NOACK) {
      packet_etx = MAX_LINK_METRIC * RPL_DAG_MC_ETX_DIVISOR;
    def8:	22a0      	movs	r2, #160	; 0xa0
    defa:	0112      	lsls	r2, r2, #4
    defc:	1c1c      	adds	r4, r3, #0
    }

    new_etx = ((uint32_t)recorded_etx * ETX_ALPHA +
               (uint32_t)packet_etx * (ETX_SCALE - ETX_ALPHA)) / ETX_SCALE;
    defe:	0093      	lsls	r3, r2, #2
    df00:	189a      	adds	r2, r3, r2
    df02:	0052      	lsls	r2, r2, #1
  if(status == MAC_TX_OK || status == MAC_TX_NOACK) {
    if(status == MAC_TX_NOACK) {
      packet_etx = MAX_LINK_METRIC * RPL_DAG_MC_ETX_DIVISOR;
    }

    new_etx = ((uint32_t)recorded_etx * ETX_ALPHA +
    df04:	235a      	movs	r3, #90	; 0x5a
    df06:	4358      	muls	r0, r3
    df08:	1810      	adds	r0, r2, r0
               (uint32_t)packet_etx * (ETX_SCALE - ETX_ALPHA)) / ETX_SCALE;
    df0a:	2164      	movs	r1, #100	; 0x64
    df0c:	4b01      	ldr	r3, [pc, #4]	; (df14 <neighbor_link_callback+0x30>)
    df0e:	4798      	blx	r3

    PRINTF("RPL: ETX changed from %u to %u (packet ETX = %u)\n\r",
        (unsigned)(recorded_etx / RPL_DAG_MC_ETX_DIVISOR),
        (unsigned)(new_etx  / RPL_DAG_MC_ETX_DIVISOR),
        (unsigned)(packet_etx / RPL_DAG_MC_ETX_DIVISOR));
    p->link_metric = new_etx;
    df10:	8160      	strh	r0, [r4, #10]
  }
}
    df12:	bd10      	pop	{r4, pc}
    df14:	0001076d 	.word	0x0001076d

0000df18 <calculate_rank>:
calculate_rank(rpl_parent_t *p, rpl_rank_t base_rank)
{
  rpl_rank_t new_rank;
  rpl_rank_t rank_increase;

  if(p == NULL) {
    df18:	2800      	cmp	r0, #0
    df1a:	d104      	bne.n	df26 <calculate_rank+0xe>
    if(base_rank == 0) {
    df1c:	2900      	cmp	r1, #0
    df1e:	d00d      	beq.n	df3c <calculate_rank+0x24>
      return INFINITE_RANK;
    }
    rank_increase = RPL_INIT_LINK_METRIC * RPL_DAG_MC_ETX_DIVISOR;
    df20:	22c0      	movs	r2, #192	; 0xc0
    df22:	0092      	lsls	r2, r2, #2
    df24:	e003      	b.n	df2e <calculate_rank+0x16>
  } else {
    rank_increase = p->link_metric;
    df26:	8942      	ldrh	r2, [r0, #10]
    if(base_rank == 0) {
    df28:	2900      	cmp	r1, #0
    df2a:	d100      	bne.n	df2e <calculate_rank+0x16>
      base_rank = p->rank;
    df2c:	8901      	ldrh	r1, [r0, #8]
    }
  }

  if(INFINITE_RANK - base_rank < rank_increase) {
    df2e:	4b05      	ldr	r3, [pc, #20]	; (df44 <calculate_rank+0x2c>)
    df30:	1a5b      	subs	r3, r3, r1
    df32:	4293      	cmp	r3, r2
    df34:	db04      	blt.n	df40 <calculate_rank+0x28>
    /* Reached the maximum rank. */
    new_rank = INFINITE_RANK;
  } else {
   /* Calculate the rank based on the new rank information from DIO or
      stored otherwise. */
    new_rank = base_rank + rank_increase;
    df36:	1851      	adds	r1, r2, r1
    df38:	b288      	uxth	r0, r1
    df3a:	e002      	b.n	df42 <calculate_rank+0x2a>
  rpl_rank_t new_rank;
  rpl_rank_t rank_increase;

  if(p == NULL) {
    if(base_rank == 0) {
      return INFINITE_RANK;
    df3c:	4801      	ldr	r0, [pc, #4]	; (df44 <calculate_rank+0x2c>)
    df3e:	e000      	b.n	df42 <calculate_rank+0x2a>
    }
  }

  if(INFINITE_RANK - base_rank < rank_increase) {
    /* Reached the maximum rank. */
    new_rank = INFINITE_RANK;
    df40:	4800      	ldr	r0, [pc, #0]	; (df44 <calculate_rank+0x2c>)
      stored otherwise. */
    new_rank = base_rank + rank_increase;
  }

  return new_rank;
}
    df42:	4770      	bx	lr
    df44:	0000ffff 	.word	0x0000ffff

0000df48 <best_dag>:

static rpl_dag_t *
best_dag(rpl_dag_t *d1, rpl_dag_t *d2)
{
  if(d1->grounded != d2->grounded) {
    df48:	7cc3      	ldrb	r3, [r0, #19]
    df4a:	7cca      	ldrb	r2, [r1, #19]
    df4c:	429a      	cmp	r2, r3
    df4e:	d003      	beq.n	df58 <best_dag+0x10>
    return d1->grounded ? d1 : d2;
    df50:	2b00      	cmp	r3, #0
    df52:	d10d      	bne.n	df70 <best_dag+0x28>
    df54:	1c08      	adds	r0, r1, #0
    df56:	e00b      	b.n	df70 <best_dag+0x28>
  }

  if(d1->preference != d2->preference) {
    df58:	7d02      	ldrb	r2, [r0, #20]
    df5a:	7d0b      	ldrb	r3, [r1, #20]
    df5c:	429a      	cmp	r2, r3
    df5e:	d002      	beq.n	df66 <best_dag+0x1e>
    return d1->preference > d2->preference ? d1 : d2;
    df60:	d806      	bhi.n	df70 <best_dag+0x28>
    df62:	1c08      	adds	r0, r1, #0
    df64:	e004      	b.n	df70 <best_dag+0x28>
  }

  return d1->rank < d2->rank ? d1 : d2;
    df66:	8b82      	ldrh	r2, [r0, #28]
    df68:	8b8b      	ldrh	r3, [r1, #28]
    df6a:	429a      	cmp	r2, r3
    df6c:	d300      	bcc.n	df70 <best_dag+0x28>
    df6e:	1c08      	adds	r0, r1, #0
}
    df70:	4770      	bx	lr
    df72:	46c0      	nop			; (mov r8, r8)

0000df74 <update_metric_container>:

#if RPL_DAG_MC == RPL_DAG_MC_NONE
static void
update_metric_container(rpl_instance_t *instance)
{
  instance->mc.type = RPL_DAG_MC;
    df74:	2300      	movs	r3, #0
    df76:	7003      	strb	r3, [r0, #0]
}
    df78:	4770      	bx	lr
    df7a:	46c0      	nop			; (mov r8, r8)

0000df7c <best_parent>:
  return d1->rank < d2->rank ? d1 : d2;
}

static rpl_parent_t *
best_parent(rpl_parent_t *p1, rpl_parent_t *p2)
{
    df7c:	b570      	push	{r4, r5, r6, lr}
    df7e:	1e03      	subs	r3, r0, #0
  rpl_dag_t *dag;
  rpl_path_metric_t min_diff;
  rpl_path_metric_t p1_metric;
  rpl_path_metric_t p2_metric;

  dag = p1->dag; /* Both parents are in the same DAG. */
    df80:	6845      	ldr	r5, [r0, #4]
typedef uint16_t rpl_path_metric_t;

static rpl_path_metric_t
calculate_path_metric(rpl_parent_t *p)
{
  if(p == NULL) {
    df82:	d004      	beq.n	df8e <best_parent+0x12>
    return MAX_PATH_COST * RPL_DAG_MC_ETX_DIVISOR;
  }

#if RPL_DAG_MC == RPL_DAG_MC_NONE
  return p->rank + (uint16_t)p->link_metric;
    df84:	8940      	ldrh	r0, [r0, #10]
    df86:	891a      	ldrh	r2, [r3, #8]
    df88:	1882      	adds	r2, r0, r2
    df8a:	b292      	uxth	r2, r2
    df8c:	e001      	b.n	df92 <best_parent+0x16>

static rpl_path_metric_t
calculate_path_metric(rpl_parent_t *p)
{
  if(p == NULL) {
    return MAX_PATH_COST * RPL_DAG_MC_ETX_DIVISOR;
    df8e:	22c8      	movs	r2, #200	; 0xc8
    df90:	01d2      	lsls	r2, r2, #7
typedef uint16_t rpl_path_metric_t;

static rpl_path_metric_t
calculate_path_metric(rpl_parent_t *p)
{
  if(p == NULL) {
    df92:	2900      	cmp	r1, #0
    df94:	d004      	beq.n	dfa0 <best_parent+0x24>
    return MAX_PATH_COST * RPL_DAG_MC_ETX_DIVISOR;
  }

#if RPL_DAG_MC == RPL_DAG_MC_NONE
  return p->rank + (uint16_t)p->link_metric;
    df96:	894c      	ldrh	r4, [r1, #10]
    df98:	8908      	ldrh	r0, [r1, #8]
    df9a:	1824      	adds	r4, r4, r0
    df9c:	b2a4      	uxth	r4, r4
    df9e:	e001      	b.n	dfa4 <best_parent+0x28>

static rpl_path_metric_t
calculate_path_metric(rpl_parent_t *p)
{
  if(p == NULL) {
    return MAX_PATH_COST * RPL_DAG_MC_ETX_DIVISOR;
    dfa0:	24c8      	movs	r4, #200	; 0xc8
    dfa2:	01e4      	lsls	r4, r4, #7

  p1_metric = calculate_path_metric(p1);
  p2_metric = calculate_path_metric(p2);

  /* Maintain stability of the preferred parent in case of similar ranks. */
  if(p1 == dag->preferred_parent || p2 == dag->preferred_parent) {
    dfa4:	69a8      	ldr	r0, [r5, #24]
    dfa6:	4298      	cmp	r0, r3
    dfa8:	d001      	beq.n	dfae <best_parent+0x32>
    dfaa:	4281      	cmp	r1, r0
    dfac:	d107      	bne.n	dfbe <best_parent+0x42>
    if(p1_metric < p2_metric + min_diff &&
    dfae:	1c25      	adds	r5, r4, #0
    dfb0:	3580      	adds	r5, #128	; 0x80
    dfb2:	42aa      	cmp	r2, r5
    dfb4:	da03      	bge.n	dfbe <best_parent+0x42>
       p1_metric > p2_metric - min_diff) {
    dfb6:	3d01      	subs	r5, #1
    dfb8:	3dff      	subs	r5, #255	; 0xff
  p1_metric = calculate_path_metric(p1);
  p2_metric = calculate_path_metric(p2);

  /* Maintain stability of the preferred parent in case of similar ranks. */
  if(p1 == dag->preferred_parent || p2 == dag->preferred_parent) {
    if(p1_metric < p2_metric + min_diff &&
    dfba:	42aa      	cmp	r2, r5
    dfbc:	dc03      	bgt.n	dfc6 <best_parent+0x4a>
             p2_metric + min_diff);
      return dag->preferred_parent;
    }
  }

  return p1_metric < p2_metric ? p1 : p2;
    dfbe:	1c18      	adds	r0, r3, #0
    dfc0:	42a2      	cmp	r2, r4
    dfc2:	d300      	bcc.n	dfc6 <best_parent+0x4a>
    dfc4:	1c08      	adds	r0, r1, #0
}
    dfc6:	bd70      	pop	{r4, r5, r6, pc}

0000dfc8 <new_dio_interval>:
  ctimer_reset(&periodic_timer);
}
/*---------------------------------------------------------------------------*/
static void
new_dio_interval(rpl_instance_t *instance)
{
    dfc8:	b5f0      	push	{r4, r5, r6, r7, lr}
    dfca:	4647      	mov	r7, r8
    dfcc:	b480      	push	{r7}
    dfce:	1c04      	adds	r4, r0, #0
  uint32_t time;
  clock_time_t ticks;

  /* TODO: too small timer intervals for many cases */
  time = 1UL << instance->dio_intcurrent;
    dfd0:	2394      	movs	r3, #148	; 0x94
    dfd2:	5cc0      	ldrb	r0, [r0, r3]
    dfd4:	2701      	movs	r7, #1
    dfd6:	1c3b      	adds	r3, r7, #0
    dfd8:	4083      	lsls	r3, r0

  /* Convert from milliseconds to CLOCK_TICKS. */
  ticks = (time * CLOCK_SECOND) / 1000;
    dfda:	01d8      	lsls	r0, r3, #7
    dfdc:	4b0f      	ldr	r3, [pc, #60]	; (e01c <new_dio_interval+0x54>)
    dfde:	4698      	mov	r8, r3
    dfe0:	21fa      	movs	r1, #250	; 0xfa
    dfe2:	0089      	lsls	r1, r1, #2
    dfe4:	4798      	blx	r3
  instance->dio_next_delay = ticks;
    dfe6:	26a0      	movs	r6, #160	; 0xa0
    dfe8:	51a0      	str	r0, [r4, r6]

  /* random number between I/2 and I */
  ticks = ticks / 2 + (ticks / 2 * (uint32_t)random_rand()) / RANDOM_RAND_MAX;
    dfea:	0845      	lsrs	r5, r0, #1
    dfec:	4b0c      	ldr	r3, [pc, #48]	; (e020 <new_dio_interval+0x58>)
    dfee:	4798      	blx	r3
    dff0:	4368      	muls	r0, r5
    dff2:	490c      	ldr	r1, [pc, #48]	; (e024 <new_dio_interval+0x5c>)
    dff4:	47c0      	blx	r8
    dff6:	1941      	adds	r1, r0, r5
  /*
   * The intervals must be equally long among the nodes for Trickle to
   * operate efficiently. Therefore we need to calculate the delay between
   * the randomized time and the start time of the next interval.
   */
  instance->dio_next_delay -= ticks;
    dff8:	59a3      	ldr	r3, [r4, r6]
    dffa:	1a5b      	subs	r3, r3, r1
    dffc:	51a3      	str	r3, [r4, r6]
  instance->dio_send = 1;
    dffe:	2395      	movs	r3, #149	; 0x95
    e000:	54e7      	strb	r7, [r4, r3]
           instance->dio_totrecv,instance->dio_intcurrent,
	   instance->current_dag->rank == ROOT_RANK(instance) ? "BLUE" : "ORANGE");
#endif /* RPL_CONF_STATS */

  /* reset the redundancy counter */
  instance->dio_counter = 0;
    e002:	2200      	movs	r2, #0
    e004:	3301      	adds	r3, #1
    e006:	54e2      	strb	r2, [r4, r3]

  /* schedule the timer */
  PRINTF("RPL: Scheduling DIO timer %lu ticks in future (Interval)\n\r", ticks);
  ctimer_set(&instance->dio_timer, ticks, &handle_dio_timer, instance);
    e008:	1c20      	adds	r0, r4, #0
    e00a:	30a4      	adds	r0, #164	; 0xa4
    e00c:	4a06      	ldr	r2, [pc, #24]	; (e028 <new_dio_interval+0x60>)
    e00e:	1c23      	adds	r3, r4, #0
    e010:	4c06      	ldr	r4, [pc, #24]	; (e02c <new_dio_interval+0x64>)
    e012:	47a0      	blx	r4
}
    e014:	bc04      	pop	{r2}
    e016:	4690      	mov	r8, r2
    e018:	bdf0      	pop	{r4, r5, r6, r7, pc}
    e01a:	46c0      	nop			; (mov r8, r8)
    e01c:	0001076d 	.word	0x0001076d
    e020:	000058a5 	.word	0x000058a5
    e024:	0000ffff 	.word	0x0000ffff
    e028:	0000e081 	.word	0x0000e081
    e02c:	0000e625 	.word	0x0000e625

0000e030 <handle_periodic_timer>:
static uint8_t dio_send_ok;

/*---------------------------------------------------------------------------*/
static void
handle_periodic_timer(void *ptr)
{
    e030:	b508      	push	{r3, lr}
  rpl_purge_routes();
    e032:	4b0c      	ldr	r3, [pc, #48]	; (e064 <handle_periodic_timer+0x34>)
    e034:	4798      	blx	r3
  rpl_recalculate_ranks();
    e036:	4b0c      	ldr	r3, [pc, #48]	; (e068 <handle_periodic_timer+0x38>)
    e038:	4798      	blx	r3

  /* handle DIS */
#if RPL_DIS_SEND
  next_dis++;
    e03a:	4a0c      	ldr	r2, [pc, #48]	; (e06c <handle_periodic_timer+0x3c>)
    e03c:	8813      	ldrh	r3, [r2, #0]
    e03e:	3301      	adds	r3, #1
    e040:	8013      	strh	r3, [r2, #0]
  if(rpl_get_any_dag() == NULL && next_dis >= RPL_DIS_INTERVAL) {
    e042:	4b0b      	ldr	r3, [pc, #44]	; (e070 <handle_periodic_timer+0x40>)
    e044:	4798      	blx	r3
    e046:	2800      	cmp	r0, #0
    e048:	d108      	bne.n	e05c <handle_periodic_timer+0x2c>
    e04a:	4b08      	ldr	r3, [pc, #32]	; (e06c <handle_periodic_timer+0x3c>)
    e04c:	881b      	ldrh	r3, [r3, #0]
    e04e:	2b3b      	cmp	r3, #59	; 0x3b
    e050:	d904      	bls.n	e05c <handle_periodic_timer+0x2c>
    next_dis = 0;
    e052:	2200      	movs	r2, #0
    e054:	4b05      	ldr	r3, [pc, #20]	; (e06c <handle_periodic_timer+0x3c>)
    e056:	801a      	strh	r2, [r3, #0]
    dis_output(NULL);
    e058:	4b06      	ldr	r3, [pc, #24]	; (e074 <handle_periodic_timer+0x44>)
    e05a:	4798      	blx	r3
  }
#endif
  ctimer_reset(&periodic_timer);
    e05c:	4806      	ldr	r0, [pc, #24]	; (e078 <handle_periodic_timer+0x48>)
    e05e:	4b07      	ldr	r3, [pc, #28]	; (e07c <handle_periodic_timer+0x4c>)
    e060:	4798      	blx	r3
}
    e062:	bd08      	pop	{r3, pc}
    e064:	0000e2c1 	.word	0x0000e2c1
    e068:	0000ce25 	.word	0x0000ce25
    e06c:	20001d08 	.word	0x20001d08
    e070:	0000c94d 	.word	0x0000c94d
    e074:	0000d799 	.word	0x0000d799
    e078:	20001ce8 	.word	0x20001ce8
    e07c:	0000e67d 	.word	0x0000e67d

0000e080 <handle_dio_timer>:
  ctimer_set(&instance->dio_timer, ticks, &handle_dio_timer, instance);
}
/*---------------------------------------------------------------------------*/
static void
handle_dio_timer(void *ptr)
{
    e080:	b510      	push	{r4, lr}
    e082:	1c04      	adds	r4, r0, #0
  rpl_instance_t *instance;

  instance = (rpl_instance_t *)ptr;

  PRINTF("RPL: DIO Timer triggered\n\r");
  if(!dio_send_ok) {
    e084:	4b1f      	ldr	r3, [pc, #124]	; (e104 <handle_dio_timer+0x84>)
    e086:	781b      	ldrb	r3, [r3, #0]
    e088:	2b00      	cmp	r3, #0
    e08a:	d110      	bne.n	e0ae <handle_dio_timer+0x2e>
    if(uip_ds6_get_link_local(ADDR_PREFERRED) != NULL) {
    e08c:	2001      	movs	r0, #1
    e08e:	4b1e      	ldr	r3, [pc, #120]	; (e108 <handle_dio_timer+0x88>)
    e090:	4798      	blx	r3
    e092:	2800      	cmp	r0, #0
    e094:	d003      	beq.n	e09e <handle_dio_timer+0x1e>
      dio_send_ok = 1;
    e096:	2201      	movs	r2, #1
    e098:	4b1a      	ldr	r3, [pc, #104]	; (e104 <handle_dio_timer+0x84>)
    e09a:	701a      	strb	r2, [r3, #0]
    e09c:	e007      	b.n	e0ae <handle_dio_timer+0x2e>
    } else {
      PRINTF("RPL: Postponing DIO transmission since link local address is not ok\n\r");
      ctimer_set(&instance->dio_timer, CLOCK_SECOND, &handle_dio_timer, instance);
    e09e:	1c20      	adds	r0, r4, #0
    e0a0:	30a4      	adds	r0, #164	; 0xa4
    e0a2:	2180      	movs	r1, #128	; 0x80
    e0a4:	4a19      	ldr	r2, [pc, #100]	; (e10c <handle_dio_timer+0x8c>)
    e0a6:	1c23      	adds	r3, r4, #0
    e0a8:	4c19      	ldr	r4, [pc, #100]	; (e110 <handle_dio_timer+0x90>)
    e0aa:	47a0      	blx	r4
      return;
    e0ac:	e028      	b.n	e100 <handle_dio_timer+0x80>
    }
  }

  if(instance->dio_send) {
    e0ae:	2395      	movs	r3, #149	; 0x95
    e0b0:	5ce3      	ldrb	r3, [r4, r3]
    e0b2:	2b00      	cmp	r3, #0
    e0b4:	d015      	beq.n	e0e2 <handle_dio_timer+0x62>
    /* send DIO if counter is less than desired redundancy */
    if(instance->dio_counter < instance->dio_redundancy) {
    e0b6:	2396      	movs	r3, #150	; 0x96
    e0b8:	5ce2      	ldrb	r2, [r4, r3]
    e0ba:	3b04      	subs	r3, #4
    e0bc:	5ce3      	ldrb	r3, [r4, r3]
    e0be:	429a      	cmp	r2, r3
    e0c0:	d203      	bcs.n	e0ca <handle_dio_timer+0x4a>
#if RPL_CONF_STATS
      instance->dio_totsend++;
#endif /* RPL_CONF_STATS */
      dio_output(instance, NULL);
    e0c2:	1c20      	adds	r0, r4, #0
    e0c4:	2100      	movs	r1, #0
    e0c6:	4b13      	ldr	r3, [pc, #76]	; (e114 <handle_dio_timer+0x94>)
    e0c8:	4798      	blx	r3
    } else {
      PRINTF("RPL: Supressing DIO transmission (%d >= %d)\n\r",
             instance->dio_counter, instance->dio_redundancy);
    }
    instance->dio_send = 0;
    e0ca:	2200      	movs	r2, #0
    e0cc:	2395      	movs	r3, #149	; 0x95
    e0ce:	54e2      	strb	r2, [r4, r3]
    PRINTF("RPL: Scheduling DIO timer %lu ticks in future (sent)\n\r",
           instance->dio_next_delay);
    ctimer_set(&instance->dio_timer, instance->dio_next_delay, handle_dio_timer, instance);
    e0d0:	1c20      	adds	r0, r4, #0
    e0d2:	30a4      	adds	r0, #164	; 0xa4
    e0d4:	330b      	adds	r3, #11
    e0d6:	58e1      	ldr	r1, [r4, r3]
    e0d8:	4a0c      	ldr	r2, [pc, #48]	; (e10c <handle_dio_timer+0x8c>)
    e0da:	1c23      	adds	r3, r4, #0
    e0dc:	4c0c      	ldr	r4, [pc, #48]	; (e110 <handle_dio_timer+0x90>)
    e0de:	47a0      	blx	r4
    e0e0:	e00e      	b.n	e100 <handle_dio_timer+0x80>
  } else {
    /* check if we need to double interval */
    if(instance->dio_intcurrent < instance->dio_intmin + instance->dio_intdoubl) {
    e0e2:	2394      	movs	r3, #148	; 0x94
    e0e4:	5ce2      	ldrb	r2, [r4, r3]
    e0e6:	3b03      	subs	r3, #3
    e0e8:	5ce1      	ldrb	r1, [r4, r3]
    e0ea:	3b01      	subs	r3, #1
    e0ec:	5ce3      	ldrb	r3, [r4, r3]
    e0ee:	18cb      	adds	r3, r1, r3
    e0f0:	429a      	cmp	r2, r3
    e0f2:	da02      	bge.n	e0fa <handle_dio_timer+0x7a>
      instance->dio_intcurrent++;
    e0f4:	3201      	adds	r2, #1
    e0f6:	2394      	movs	r3, #148	; 0x94
    e0f8:	54e2      	strb	r2, [r4, r3]
      PRINTF("RPL: DIO Timer interval doubled %d\n\r", instance->dio_intcurrent);
    }
    new_dio_interval(instance);
    e0fa:	1c20      	adds	r0, r4, #0
    e0fc:	4b06      	ldr	r3, [pc, #24]	; (e118 <handle_dio_timer+0x98>)
    e0fe:	4798      	blx	r3
  }
}
    e100:	bd10      	pop	{r4, pc}
    e102:	46c0      	nop			; (mov r8, r8)
    e104:	20001d0a 	.word	0x20001d0a
    e108:	0000747d 	.word	0x0000747d
    e10c:	0000e081 	.word	0x0000e081
    e110:	0000e625 	.word	0x0000e625
    e114:	0000d7ed 	.word	0x0000d7ed
    e118:	0000dfc9 	.word	0x0000dfc9

0000e11c <set_dao_lifetime_timer>:
}
/*---------------------------------------------------------------------------*/
static void handle_dao_timer(void *ptr);
static void
set_dao_lifetime_timer(rpl_instance_t *instance)
{
    e11c:	b510      	push	{r4, lr}
    e11e:	1c04      	adds	r4, r0, #0
  if(rpl_get_mode() == RPL_MODE_FEATHER) {
    e120:	4b0a      	ldr	r3, [pc, #40]	; (e14c <set_dao_lifetime_timer+0x30>)
    e122:	4798      	blx	r3
    e124:	2801      	cmp	r0, #1
    e126:	d010      	beq.n	e14a <set_dao_lifetime_timer+0x2e>
    return;
  }

  /* Set up another DAO within half the expiration time, if such a
     time has been configured */
  if(instance->lifetime_unit != 0xffff && instance->default_lifetime != 0xff) {
    e128:	239c      	movs	r3, #156	; 0x9c
    e12a:	5ae3      	ldrh	r3, [r4, r3]
    e12c:	4a08      	ldr	r2, [pc, #32]	; (e150 <set_dao_lifetime_timer+0x34>)
    e12e:	4293      	cmp	r3, r2
    e130:	d00b      	beq.n	e14a <set_dao_lifetime_timer+0x2e>
    e132:	2293      	movs	r2, #147	; 0x93
    e134:	5ca1      	ldrb	r1, [r4, r2]
    e136:	29ff      	cmp	r1, #255	; 0xff
    e138:	d007      	beq.n	e14a <set_dao_lifetime_timer+0x2e>
    expiration_time = (clock_time_t)instance->default_lifetime *
      (clock_time_t)instance->lifetime_unit *
      CLOCK_SECOND / 2;
    PRINTF("RPL: Scheduling DAO lifetime timer %u ticks in the future\n\r",
           (unsigned)expiration_time);
    ctimer_set(&instance->dao_lifetime_timer, expiration_time,
    e13a:	1c20      	adds	r0, r4, #0
    e13c:	30e4      	adds	r0, #228	; 0xe4
  /* Set up another DAO within half the expiration time, if such a
     time has been configured */
  if(instance->lifetime_unit != 0xffff && instance->default_lifetime != 0xff) {
    clock_time_t expiration_time;
    expiration_time = (clock_time_t)instance->default_lifetime *
      (clock_time_t)instance->lifetime_unit *
    e13e:	4359      	muls	r1, r3

  /* Set up another DAO within half the expiration time, if such a
     time has been configured */
  if(instance->lifetime_unit != 0xffff && instance->default_lifetime != 0xff) {
    clock_time_t expiration_time;
    expiration_time = (clock_time_t)instance->default_lifetime *
    e140:	0189      	lsls	r1, r1, #6
      (clock_time_t)instance->lifetime_unit *
      CLOCK_SECOND / 2;
    PRINTF("RPL: Scheduling DAO lifetime timer %u ticks in the future\n\r",
           (unsigned)expiration_time);
    ctimer_set(&instance->dao_lifetime_timer, expiration_time,
    e142:	4a04      	ldr	r2, [pc, #16]	; (e154 <set_dao_lifetime_timer+0x38>)
    e144:	1c23      	adds	r3, r4, #0
    e146:	4c04      	ldr	r4, [pc, #16]	; (e158 <set_dao_lifetime_timer+0x3c>)
    e148:	47a0      	blx	r4
               handle_dao_timer, instance);
  }
}
    e14a:	bd10      	pop	{r4, pc}
    e14c:	0000e2b5 	.word	0x0000e2b5
    e150:	0000ffff 	.word	0x0000ffff
    e154:	0000e1c9 	.word	0x0000e1c9
    e158:	0000e625 	.word	0x0000e625

0000e15c <schedule_dao>:
  }
}
/*---------------------------------------------------------------------------*/
static void
schedule_dao(rpl_instance_t *instance, clock_time_t latency)
{
    e15c:	b570      	push	{r4, r5, r6, lr}
    e15e:	1c04      	adds	r4, r0, #0
    e160:	1c0d      	adds	r5, r1, #0
  clock_time_t expiration_time;

  if(rpl_get_mode() == RPL_MODE_FEATHER) {
    e162:	4b11      	ldr	r3, [pc, #68]	; (e1a8 <schedule_dao+0x4c>)
    e164:	4798      	blx	r3
    e166:	2801      	cmp	r0, #1
    e168:	d01c      	beq.n	e1a4 <schedule_dao+0x48>
    return;
  }

  expiration_time = etimer_expiration_time(&instance->dao_timer.etimer);
    e16a:	1c26      	adds	r6, r4, #0
    e16c:	36c8      	adds	r6, #200	; 0xc8
    e16e:	1c30      	adds	r0, r6, #0
    e170:	4b0e      	ldr	r3, [pc, #56]	; (e1ac <schedule_dao+0x50>)
    e172:	4798      	blx	r3

  if(!etimer_expired(&instance->dao_timer.etimer)) {
    e174:	1c30      	adds	r0, r6, #0
    e176:	4b0e      	ldr	r3, [pc, #56]	; (e1b0 <schedule_dao+0x54>)
    e178:	4798      	blx	r3
    e17a:	2800      	cmp	r0, #0
    e17c:	d012      	beq.n	e1a4 <schedule_dao+0x48>
  } else {
    if(latency != 0) {
      expiration_time = latency / 2 +
        (random_rand() % (latency));
    } else {
      expiration_time = 0;
    e17e:	2100      	movs	r1, #0
  expiration_time = etimer_expiration_time(&instance->dao_timer.etimer);

  if(!etimer_expired(&instance->dao_timer.etimer)) {
    PRINTF("RPL: DAO timer already scheduled\n\r");
  } else {
    if(latency != 0) {
    e180:	2d00      	cmp	r5, #0
    e182:	d006      	beq.n	e192 <schedule_dao+0x36>
      expiration_time = latency / 2 +
        (random_rand() % (latency));
    e184:	4b0b      	ldr	r3, [pc, #44]	; (e1b4 <schedule_dao+0x58>)
    e186:	4798      	blx	r3
    e188:	1c29      	adds	r1, r5, #0
    e18a:	4b0b      	ldr	r3, [pc, #44]	; (e1b8 <schedule_dao+0x5c>)
    e18c:	4798      	blx	r3

  if(!etimer_expired(&instance->dao_timer.etimer)) {
    PRINTF("RPL: DAO timer already scheduled\n\r");
  } else {
    if(latency != 0) {
      expiration_time = latency / 2 +
    e18e:	086d      	lsrs	r5, r5, #1
    e190:	1949      	adds	r1, r1, r5
    } else {
      expiration_time = 0;
    }
    PRINTF("RPL: Scheduling DAO timer %u ticks in the future\n\r",
           (unsigned)expiration_time);
    ctimer_set(&instance->dao_timer, expiration_time,
    e192:	1c20      	adds	r0, r4, #0
    e194:	30c4      	adds	r0, #196	; 0xc4
    e196:	4a09      	ldr	r2, [pc, #36]	; (e1bc <schedule_dao+0x60>)
    e198:	1c23      	adds	r3, r4, #0
    e19a:	4d09      	ldr	r5, [pc, #36]	; (e1c0 <schedule_dao+0x64>)
    e19c:	47a8      	blx	r5
               handle_dao_timer, instance);

    set_dao_lifetime_timer(instance);
    e19e:	1c20      	adds	r0, r4, #0
    e1a0:	4b08      	ldr	r3, [pc, #32]	; (e1c4 <schedule_dao+0x68>)
    e1a2:	4798      	blx	r3
  }
}
    e1a4:	bd70      	pop	{r4, r5, r6, pc}
    e1a6:	46c0      	nop			; (mov r8, r8)
    e1a8:	0000e2b5 	.word	0x0000e2b5
    e1ac:	0000e96d 	.word	0x0000e96d
    e1b0:	0000e965 	.word	0x0000e965
    e1b4:	000058a5 	.word	0x000058a5
    e1b8:	00010879 	.word	0x00010879
    e1bc:	0000e1c9 	.word	0x0000e1c9
    e1c0:	0000e625 	.word	0x0000e625
    e1c4:	0000e11d 	.word	0x0000e11d

0000e1c8 <handle_dao_timer>:
  }
}
/*---------------------------------------------------------------------------*/
static void
handle_dao_timer(void *ptr)
{
    e1c8:	b510      	push	{r4, lr}
    e1ca:	1c04      	adds	r4, r0, #0
  uint8_t i;
#endif

  instance = (rpl_instance_t *)ptr;

  if(!dio_send_ok && uip_ds6_get_link_local(ADDR_PREFERRED) == NULL) {
    e1cc:	4b13      	ldr	r3, [pc, #76]	; (e21c <handle_dao_timer+0x54>)
    e1ce:	781b      	ldrb	r3, [r3, #0]
    e1d0:	2b00      	cmp	r3, #0
    e1d2:	d10c      	bne.n	e1ee <handle_dao_timer+0x26>
    e1d4:	2001      	movs	r0, #1
    e1d6:	4b12      	ldr	r3, [pc, #72]	; (e220 <handle_dao_timer+0x58>)
    e1d8:	4798      	blx	r3
    e1da:	2800      	cmp	r0, #0
    e1dc:	d107      	bne.n	e1ee <handle_dao_timer+0x26>
    PRINTF("RPL: Postpone DAO transmission\n\r");
    ctimer_set(&instance->dao_timer, CLOCK_SECOND, handle_dao_timer, instance);
    e1de:	1c20      	adds	r0, r4, #0
    e1e0:	30c4      	adds	r0, #196	; 0xc4
    e1e2:	2180      	movs	r1, #128	; 0x80
    e1e4:	4a0f      	ldr	r2, [pc, #60]	; (e224 <handle_dao_timer+0x5c>)
    e1e6:	1c23      	adds	r3, r4, #0
    e1e8:	4c0f      	ldr	r4, [pc, #60]	; (e228 <handle_dao_timer+0x60>)
    e1ea:	47a0      	blx	r4
    return;
    e1ec:	e014      	b.n	e218 <handle_dao_timer+0x50>
  }

  /* Send the DAO to the DAO parent set -- the preferred parent in our case. */
  if(instance->current_dag->preferred_parent != NULL) {
    e1ee:	68e3      	ldr	r3, [r4, #12]
    e1f0:	6998      	ldr	r0, [r3, #24]
    e1f2:	2800      	cmp	r0, #0
    e1f4:	d003      	beq.n	e1fe <handle_dao_timer+0x36>
    PRINTF("RPL: handle_dao_timer - sending DAO\n\r");
    /* Set the route lifetime to the default value. */
    dao_output(instance->current_dag->preferred_parent, instance->default_lifetime);
    e1f6:	2393      	movs	r3, #147	; 0x93
    e1f8:	5ce1      	ldrb	r1, [r4, r3]
    e1fa:	4b0c      	ldr	r3, [pc, #48]	; (e22c <handle_dao_timer+0x64>)
    e1fc:	4798      	blx	r3
#endif
  } else {
    PRINTF("RPL: No suitable DAO parent\n\r");
  }

  ctimer_stop(&instance->dao_timer);
    e1fe:	1c20      	adds	r0, r4, #0
    e200:	30c4      	adds	r0, #196	; 0xc4
    e202:	4b0b      	ldr	r3, [pc, #44]	; (e230 <handle_dao_timer+0x68>)
    e204:	4798      	blx	r3

  if(etimer_expired(&instance->dao_lifetime_timer.etimer)) {
    e206:	1c20      	adds	r0, r4, #0
    e208:	30e8      	adds	r0, #232	; 0xe8
    e20a:	4b0a      	ldr	r3, [pc, #40]	; (e234 <handle_dao_timer+0x6c>)
    e20c:	4798      	blx	r3
    e20e:	2800      	cmp	r0, #0
    e210:	d002      	beq.n	e218 <handle_dao_timer+0x50>
    set_dao_lifetime_timer(instance);
    e212:	1c20      	adds	r0, r4, #0
    e214:	4b08      	ldr	r3, [pc, #32]	; (e238 <handle_dao_timer+0x70>)
    e216:	4798      	blx	r3
  }
}
    e218:	bd10      	pop	{r4, pc}
    e21a:	46c0      	nop			; (mov r8, r8)
    e21c:	20001d0a 	.word	0x20001d0a
    e220:	0000747d 	.word	0x0000747d
    e224:	0000e1c9 	.word	0x0000e1c9
    e228:	0000e625 	.word	0x0000e625
    e22c:	0000db1d 	.word	0x0000db1d
    e230:	0000e715 	.word	0x0000e715
    e234:	0000e965 	.word	0x0000e965
    e238:	0000e11d 	.word	0x0000e11d

0000e23c <rpl_reset_periodic_timer>:
  }
}
/*---------------------------------------------------------------------------*/
void
rpl_reset_periodic_timer(void)
{
    e23c:	b510      	push	{r4, lr}
  next_dis = RPL_DIS_INTERVAL / 2 +
    ((uint32_t)RPL_DIS_INTERVAL * (uint32_t)random_rand()) / RANDOM_RAND_MAX -
    e23e:	4b09      	ldr	r3, [pc, #36]	; (e264 <rpl_reset_periodic_timer+0x28>)
    e240:	4798      	blx	r3
    e242:	0103      	lsls	r3, r0, #4
    e244:	1a18      	subs	r0, r3, r0
    e246:	0080      	lsls	r0, r0, #2
    e248:	4907      	ldr	r1, [pc, #28]	; (e268 <rpl_reset_periodic_timer+0x2c>)
    e24a:	4b08      	ldr	r3, [pc, #32]	; (e26c <rpl_reset_periodic_timer+0x30>)
    e24c:	4798      	blx	r3
}
/*---------------------------------------------------------------------------*/
void
rpl_reset_periodic_timer(void)
{
  next_dis = RPL_DIS_INTERVAL / 2 +
    e24e:	3019      	adds	r0, #25
    e250:	4b07      	ldr	r3, [pc, #28]	; (e270 <rpl_reset_periodic_timer+0x34>)
    e252:	8018      	strh	r0, [r3, #0]
    ((uint32_t)RPL_DIS_INTERVAL * (uint32_t)random_rand()) / RANDOM_RAND_MAX -
    RPL_DIS_START_DELAY;
  ctimer_set(&periodic_timer, CLOCK_SECOND, handle_periodic_timer, NULL);
    e254:	4807      	ldr	r0, [pc, #28]	; (e274 <rpl_reset_periodic_timer+0x38>)
    e256:	2180      	movs	r1, #128	; 0x80
    e258:	4a07      	ldr	r2, [pc, #28]	; (e278 <rpl_reset_periodic_timer+0x3c>)
    e25a:	2300      	movs	r3, #0
    e25c:	4c07      	ldr	r4, [pc, #28]	; (e27c <rpl_reset_periodic_timer+0x40>)
    e25e:	47a0      	blx	r4
}
    e260:	bd10      	pop	{r4, pc}
    e262:	46c0      	nop			; (mov r8, r8)
    e264:	000058a5 	.word	0x000058a5
    e268:	0000ffff 	.word	0x0000ffff
    e26c:	0001076d 	.word	0x0001076d
    e270:	20001d08 	.word	0x20001d08
    e274:	20001ce8 	.word	0x20001ce8
    e278:	0000e031 	.word	0x0000e031
    e27c:	0000e625 	.word	0x0000e625

0000e280 <rpl_reset_dio_timer>:
/*---------------------------------------------------------------------------*/
/* Resets the DIO timer in the instance to its minimal interval. */
void
rpl_reset_dio_timer(rpl_instance_t *instance)
{
    e280:	b508      	push	{r3, lr}
#if !RPL_LEAF_ONLY
  /* Do not reset if we are already on the minimum interval,
     unless forced to do so. */
  if(instance->dio_intcurrent > instance->dio_intmin) {
    e282:	2391      	movs	r3, #145	; 0x91
    e284:	5cc3      	ldrb	r3, [r0, r3]
    e286:	2294      	movs	r2, #148	; 0x94
    e288:	5c82      	ldrb	r2, [r0, r2]
    e28a:	429a      	cmp	r2, r3
    e28c:	d906      	bls.n	e29c <rpl_reset_dio_timer+0x1c>
    instance->dio_counter = 0;
    e28e:	2100      	movs	r1, #0
    e290:	2296      	movs	r2, #150	; 0x96
    e292:	5481      	strb	r1, [r0, r2]
    instance->dio_intcurrent = instance->dio_intmin;
    e294:	3a02      	subs	r2, #2
    e296:	5483      	strb	r3, [r0, r2]
    new_dio_interval(instance);
    e298:	4b01      	ldr	r3, [pc, #4]	; (e2a0 <rpl_reset_dio_timer+0x20>)
    e29a:	4798      	blx	r3
  }
#if RPL_CONF_STATS
  rpl_stats.resets++;
#endif /* RPL_CONF_STATS */
#endif /* RPL_LEAF_ONLY */
}
    e29c:	bd08      	pop	{r3, pc}
    e29e:	46c0      	nop			; (mov r8, r8)
    e2a0:	0000dfc9 	.word	0x0000dfc9

0000e2a4 <rpl_schedule_dao>:
  }
}
/*---------------------------------------------------------------------------*/
void
rpl_schedule_dao(rpl_instance_t *instance)
{
    e2a4:	b508      	push	{r3, lr}
  schedule_dao(instance, RPL_DAO_LATENCY);
    e2a6:	2180      	movs	r1, #128	; 0x80
    e2a8:	0089      	lsls	r1, r1, #2
    e2aa:	4b01      	ldr	r3, [pc, #4]	; (e2b0 <rpl_schedule_dao+0xc>)
    e2ac:	4798      	blx	r3
}
    e2ae:	bd08      	pop	{r3, pc}
    e2b0:	0000e15d 	.word	0x0000e15d

0000e2b4 <rpl_get_mode>:
static enum rpl_mode mode = RPL_MODE_MESH;
/*---------------------------------------------------------------------------*/
enum rpl_mode
rpl_get_mode(void)
{
  return mode;
    e2b4:	4b01      	ldr	r3, [pc, #4]	; (e2bc <rpl_get_mode+0x8>)
    e2b6:	7818      	ldrb	r0, [r3, #0]
}
    e2b8:	4770      	bx	lr
    e2ba:	46c0      	nop			; (mov r8, r8)
    e2bc:	20001d0b 	.word	0x20001d0b

0000e2c0 <rpl_purge_routes>:
  return oldmode;
}
/*---------------------------------------------------------------------------*/
void
rpl_purge_routes(void)
{
    e2c0:	b5f0      	push	{r4, r5, r6, r7, lr}
    e2c2:	4647      	mov	r7, r8
    e2c4:	b480      	push	{r7}
    e2c6:	b084      	sub	sp, #16
#if RPL_CONF_MULTICAST
  uip_mcast6_route_t *mcast_route;
#endif

  /* First pass, decrement lifetime */
  r = uip_ds6_route_head();
    e2c8:	4b1b      	ldr	r3, [pc, #108]	; (e338 <rpl_purge_routes+0x78>)
    e2ca:	4798      	blx	r3

  while(r != NULL) {
    e2cc:	2800      	cmp	r0, #0
    e2ce:	d008      	beq.n	e2e2 <rpl_purge_routes+0x22>
       * immediate removal below. This achieves the same as the original code,
       * which would delete lifetime <= 1
       */
      r->state.lifetime--;
    }
    r = uip_ds6_route_next(r);
    e2d0:	4c1a      	ldr	r4, [pc, #104]	; (e33c <rpl_purge_routes+0x7c>)

  /* First pass, decrement lifetime */
  r = uip_ds6_route_head();

  while(r != NULL) {
    if(r->state.lifetime >= 1) {
    e2d2:	6983      	ldr	r3, [r0, #24]
    e2d4:	2b00      	cmp	r3, #0
    e2d6:	d001      	beq.n	e2dc <rpl_purge_routes+0x1c>
      /*
       * If a route is at lifetime == 1, set it to 0, scheduling it for
       * immediate removal below. This achieves the same as the original code,
       * which would delete lifetime <= 1
       */
      r->state.lifetime--;
    e2d8:	3b01      	subs	r3, #1
    e2da:	6183      	str	r3, [r0, #24]
    }
    r = uip_ds6_route_next(r);
    e2dc:	47a0      	blx	r4
#endif

  /* First pass, decrement lifetime */
  r = uip_ds6_route_head();

  while(r != NULL) {
    e2de:	2800      	cmp	r0, #0
    e2e0:	d1f7      	bne.n	e2d2 <rpl_purge_routes+0x12>
    }
    r = uip_ds6_route_next(r);
  }

  /* Second pass, remove dead routes */
  r = uip_ds6_route_head();
    e2e2:	4b15      	ldr	r3, [pc, #84]	; (e338 <rpl_purge_routes+0x78>)
    e2e4:	4798      	blx	r3

  while(r != NULL) {
    e2e6:	2800      	cmp	r0, #0
    e2e8:	d021      	beq.n	e32e <rpl_purge_routes+0x6e>
    if(r->state.lifetime < 1) {
      /* Routes with lifetime == 1 have only just been decremented from 2 to 1,
       * thus we want to keep them. Hence < and not <= */
      uip_ipaddr_copy(&prefix, &r->ipaddr);
      uip_ds6_route_rm(r);
    e2ea:	4e15      	ldr	r6, [pc, #84]	; (e340 <rpl_purge_routes+0x80>)
      r = uip_ds6_route_head();
    e2ec:	4d12      	ldr	r5, [pc, #72]	; (e338 <rpl_purge_routes+0x78>)
      PRINTF("No more routes to ");
      PRINT6ADDR(&prefix);
      dag = default_instance->current_dag;
    e2ee:	4b15      	ldr	r3, [pc, #84]	; (e344 <rpl_purge_routes+0x84>)
    e2f0:	4698      	mov	r8, r3

  /* Second pass, remove dead routes */
  r = uip_ds6_route_head();

  while(r != NULL) {
    if(r->state.lifetime < 1) {
    e2f2:	6983      	ldr	r3, [r0, #24]
    e2f4:	2b00      	cmp	r3, #0
    e2f6:	d116      	bne.n	e326 <rpl_purge_routes+0x66>
      /* Routes with lifetime == 1 have only just been decremented from 2 to 1,
       * thus we want to keep them. Hence < and not <= */
      uip_ipaddr_copy(&prefix, &r->ipaddr);
    e2f8:	466a      	mov	r2, sp
    e2fa:	1c03      	adds	r3, r0, #0
    e2fc:	3308      	adds	r3, #8
    e2fe:	cb92      	ldmia	r3!, {r1, r4, r7}
    e300:	c292      	stmia	r2!, {r1, r4, r7}
    e302:	681b      	ldr	r3, [r3, #0]
    e304:	6013      	str	r3, [r2, #0]
      uip_ds6_route_rm(r);
    e306:	47b0      	blx	r6
      r = uip_ds6_route_head();
    e308:	47a8      	blx	r5
      PRINTF("No more routes to ");
      PRINT6ADDR(&prefix);
      dag = default_instance->current_dag;
    e30a:	4643      	mov	r3, r8
    e30c:	681b      	ldr	r3, [r3, #0]
    e30e:	68da      	ldr	r2, [r3, #12]
      /* Propagate this information with a No-Path DAO to preferred parent if we are not a RPL Root */
      if(dag->rank != ROOT_RANK(default_instance)) {
    e310:	8b91      	ldrh	r1, [r2, #28]
    e312:	279a      	movs	r7, #154	; 0x9a
    e314:	5bdb      	ldrh	r3, [r3, r7]
    e316:	4299      	cmp	r1, r3
    e318:	d007      	beq.n	e32a <rpl_purge_routes+0x6a>
        PRINTF(" -> generate No-Path DAO\n\r");
        dao_output_target(dag->preferred_parent, &prefix, RPL_ZERO_LIFETIME);
    e31a:	6990      	ldr	r0, [r2, #24]
    e31c:	4669      	mov	r1, sp
    e31e:	2200      	movs	r2, #0
    e320:	4b09      	ldr	r3, [pc, #36]	; (e348 <rpl_purge_routes+0x88>)
    e322:	4798      	blx	r3
    e324:	e003      	b.n	e32e <rpl_purge_routes+0x6e>
        /* Don't schedule more than 1 No-Path DAO, let next iteration handle that */
        return;
      }
      PRINTF("\n\r");
    } else {
      r = uip_ds6_route_next(r);
    e326:	4b05      	ldr	r3, [pc, #20]	; (e33c <rpl_purge_routes+0x7c>)
    e328:	4798      	blx	r3
  }

  /* Second pass, remove dead routes */
  r = uip_ds6_route_head();

  while(r != NULL) {
    e32a:	2800      	cmp	r0, #0
    e32c:	d1e1      	bne.n	e2f2 <rpl_purge_routes+0x32>
      mcast_route->lifetime--;
      mcast_route = list_item_next(mcast_route);
    }
  }
#endif
}
    e32e:	b004      	add	sp, #16
    e330:	bc04      	pop	{r2}
    e332:	4690      	mov	r8, r2
    e334:	bdf0      	pop	{r4, r5, r6, r7, pc}
    e336:	46c0      	nop			; (mov r8, r8)
    e338:	00006e51 	.word	0x00006e51
    e33c:	00006e65 	.word	0x00006e65
    e340:	00006efd 	.word	0x00006efd
    e344:	20003284 	.word	0x20003284
    e348:	0000da3d 	.word	0x0000da3d

0000e34c <rpl_remove_routes>:
/*---------------------------------------------------------------------------*/
void
rpl_remove_routes(rpl_dag_t *dag)
{
    e34c:	b538      	push	{r3, r4, r5, lr}
    e34e:	1c04      	adds	r4, r0, #0
  uip_ds6_route_t *r;
#if RPL_CONF_MULTICAST
  uip_mcast6_route_t *mcast_route;
#endif

  r = uip_ds6_route_head();
    e350:	4b08      	ldr	r3, [pc, #32]	; (e374 <rpl_remove_routes+0x28>)
    e352:	4798      	blx	r3

  while(r != NULL) {
    e354:	2800      	cmp	r0, #0
    e356:	d00b      	beq.n	e370 <rpl_remove_routes+0x24>
    if(r->state.dag == dag) {
      uip_ds6_route_rm(r);
      r = uip_ds6_route_head();
    } else {
      r = uip_ds6_route_next(r);
    e358:	4d07      	ldr	r5, [pc, #28]	; (e378 <rpl_remove_routes+0x2c>)
#endif

  r = uip_ds6_route_head();

  while(r != NULL) {
    if(r->state.dag == dag) {
    e35a:	69c3      	ldr	r3, [r0, #28]
    e35c:	42a3      	cmp	r3, r4
    e35e:	d104      	bne.n	e36a <rpl_remove_routes+0x1e>
      uip_ds6_route_rm(r);
    e360:	4b06      	ldr	r3, [pc, #24]	; (e37c <rpl_remove_routes+0x30>)
    e362:	4798      	blx	r3
      r = uip_ds6_route_head();
    e364:	4b03      	ldr	r3, [pc, #12]	; (e374 <rpl_remove_routes+0x28>)
    e366:	4798      	blx	r3
    e368:	e000      	b.n	e36c <rpl_remove_routes+0x20>
    } else {
      r = uip_ds6_route_next(r);
    e36a:	47a8      	blx	r5
  uip_mcast6_route_t *mcast_route;
#endif

  r = uip_ds6_route_head();

  while(r != NULL) {
    e36c:	2800      	cmp	r0, #0
    e36e:	d1f4      	bne.n	e35a <rpl_remove_routes+0xe>
    } else {
      mcast_route = list_item_next(mcast_route);
    }
  }
#endif
}
    e370:	bd38      	pop	{r3, r4, r5, pc}
    e372:	46c0      	nop			; (mov r8, r8)
    e374:	00006e51 	.word	0x00006e51
    e378:	00006e65 	.word	0x00006e65
    e37c:	00006efd 	.word	0x00006efd

0000e380 <rpl_remove_routes_by_nexthop>:
/*---------------------------------------------------------------------------*/
void
rpl_remove_routes_by_nexthop(uip_ipaddr_t *nexthop, rpl_dag_t *dag)
{
    e380:	b5f0      	push	{r4, r5, r6, r7, lr}
    e382:	b083      	sub	sp, #12
    e384:	9001      	str	r0, [sp, #4]
    e386:	1c0d      	adds	r5, r1, #0
  uip_ds6_route_t *r;

  r = uip_ds6_route_head();
    e388:	4b0f      	ldr	r3, [pc, #60]	; (e3c8 <rpl_remove_routes_by_nexthop+0x48>)
    e38a:	4798      	blx	r3
    e38c:	1e04      	subs	r4, r0, #0

  while(r != NULL) {
    e38e:	d018      	beq.n	e3c2 <rpl_remove_routes_by_nexthop+0x42>
    if(uip_ipaddr_cmp(uip_ds6_route_nexthop(r), nexthop) &&
    e390:	4f0e      	ldr	r7, [pc, #56]	; (e3cc <rpl_remove_routes_by_nexthop+0x4c>)
    e392:	4e0f      	ldr	r6, [pc, #60]	; (e3d0 <rpl_remove_routes_by_nexthop+0x50>)
    e394:	1c20      	adds	r0, r4, #0
    e396:	47b8      	blx	r7
    e398:	9901      	ldr	r1, [sp, #4]
    e39a:	2210      	movs	r2, #16
    e39c:	47b0      	blx	r6
    e39e:	2800      	cmp	r0, #0
    e3a0:	d109      	bne.n	e3b6 <rpl_remove_routes_by_nexthop+0x36>
    e3a2:	69e3      	ldr	r3, [r4, #28]
    e3a4:	42ab      	cmp	r3, r5
    e3a6:	d106      	bne.n	e3b6 <rpl_remove_routes_by_nexthop+0x36>
       r->state.dag == dag) {
      uip_ds6_route_rm(r);
    e3a8:	1c20      	adds	r0, r4, #0
    e3aa:	4b0a      	ldr	r3, [pc, #40]	; (e3d4 <rpl_remove_routes_by_nexthop+0x54>)
    e3ac:	4798      	blx	r3
      r = uip_ds6_route_head();
    e3ae:	4b06      	ldr	r3, [pc, #24]	; (e3c8 <rpl_remove_routes_by_nexthop+0x48>)
    e3b0:	4798      	blx	r3
    e3b2:	1c04      	adds	r4, r0, #0
    e3b4:	e003      	b.n	e3be <rpl_remove_routes_by_nexthop+0x3e>
    } else {
      r = uip_ds6_route_next(r);
    e3b6:	1c20      	adds	r0, r4, #0
    e3b8:	4b07      	ldr	r3, [pc, #28]	; (e3d8 <rpl_remove_routes_by_nexthop+0x58>)
    e3ba:	4798      	blx	r3
    e3bc:	1c04      	adds	r4, r0, #0
{
  uip_ds6_route_t *r;

  r = uip_ds6_route_head();

  while(r != NULL) {
    e3be:	2c00      	cmp	r4, #0
    e3c0:	d1e8      	bne.n	e394 <rpl_remove_routes_by_nexthop+0x14>
    } else {
      r = uip_ds6_route_next(r);
    }
  }
  ANNOTATE("#L %u 0\n\r", nexthop->u8[sizeof(uip_ipaddr_t) - 1]);
}
    e3c2:	b003      	add	sp, #12
    e3c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    e3c6:	46c0      	nop			; (mov r8, r8)
    e3c8:	00006e51 	.word	0x00006e51
    e3cc:	00006e2d 	.word	0x00006e2d
    e3d0:	00010b11 	.word	0x00010b11
    e3d4:	00006efd 	.word	0x00006efd
    e3d8:	00006e65 	.word	0x00006e65

0000e3dc <rpl_add_route>:
/*---------------------------------------------------------------------------*/
uip_ds6_route_t *
rpl_add_route(rpl_dag_t *dag, uip_ipaddr_t *prefix, int prefix_len,
              uip_ipaddr_t *next_hop)
{
    e3dc:	b5f0      	push	{r4, r5, r6, r7, lr}
    e3de:	b083      	sub	sp, #12
    e3e0:	1c05      	adds	r5, r0, #0
    e3e2:	1c0f      	adds	r7, r1, #0
    e3e4:	1c16      	adds	r6, r2, #0
    e3e6:	9301      	str	r3, [sp, #4]
  uip_ds6_route_t *rep;

  if((rep = uip_ds6_route_add(prefix, prefix_len, next_hop)) == NULL) {
    e3e8:	b2d1      	uxtb	r1, r2
    e3ea:	1c38      	adds	r0, r7, #0
    e3ec:	1c1a      	adds	r2, r3, #0
    e3ee:	4b0f      	ldr	r3, [pc, #60]	; (e42c <rpl_add_route+0x50>)
    e3f0:	4798      	blx	r3
    e3f2:	1e04      	subs	r4, r0, #0
    e3f4:	d017      	beq.n	e426 <rpl_add_route+0x4a>
    PRINTF("RPL: No space for more route entries\n\r");
    return NULL;
  }

  rep->state.dag = dag;
    e3f6:	61c5      	str	r5, [r0, #28]
  rep->state.lifetime = RPL_LIFETIME(dag->instance, dag->instance->default_lifetime);
    e3f8:	6a2a      	ldr	r2, [r5, #32]
    e3fa:	2393      	movs	r3, #147	; 0x93
    e3fc:	5cd1      	ldrb	r1, [r2, r3]
    e3fe:	3309      	adds	r3, #9
    e400:	5ad3      	ldrh	r3, [r2, r3]
    e402:	434b      	muls	r3, r1
    e404:	6183      	str	r3, [r0, #24]
  rep->state.learned_from = RPL_ROUTE_FROM_INTERNAL;
    e406:	2200      	movs	r2, #0
    e408:	2320      	movs	r3, #32
    e40a:	54c2      	strb	r2, [r0, r3]

  printf("\r\nRPL: Added a route to ");
    e40c:	4808      	ldr	r0, [pc, #32]	; (e430 <rpl_add_route+0x54>)
    e40e:	4d09      	ldr	r5, [pc, #36]	; (e434 <rpl_add_route+0x58>)
    e410:	47a8      	blx	r5
  uip_debug_ipaddr_print(prefix);
    e412:	1c38      	adds	r0, r7, #0
    e414:	4f08      	ldr	r7, [pc, #32]	; (e438 <rpl_add_route+0x5c>)
    e416:	47b8      	blx	r7
  printf("/%d via ", prefix_len);
    e418:	4808      	ldr	r0, [pc, #32]	; (e43c <rpl_add_route+0x60>)
    e41a:	1c31      	adds	r1, r6, #0
    e41c:	47a8      	blx	r5
  uip_debug_ipaddr_print(next_hop);
    e41e:	9801      	ldr	r0, [sp, #4]
    e420:	47b8      	blx	r7
  printf("\n\r");
    e422:	4807      	ldr	r0, [pc, #28]	; (e440 <rpl_add_route+0x64>)
    e424:	47a8      	blx	r5

  return rep;
}
    e426:	1c20      	adds	r0, r4, #0
    e428:	b003      	add	sp, #12
    e42a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    e42c:	00007011 	.word	0x00007011
    e430:	00012e8c 	.word	0x00012e8c
    e434:	00010b79 	.word	0x00010b79
    e438:	0000ab09 	.word	0x0000ab09
    e43c:	00012ea8 	.word	0x00012ea8
    e440:	00013044 	.word	0x00013044

0000e444 <rpl_link_neighbor_callback>:
/*---------------------------------------------------------------------------*/
void
rpl_link_neighbor_callback(const linkaddr_t *addr, int status, int numtx)
{
    e444:	b570      	push	{r4, r5, r6, lr}
    e446:	b084      	sub	sp, #16
    e448:	1c06      	adds	r6, r0, #0
    e44a:	1c0d      	adds	r5, r1, #0
    e44c:	1c14      	adds	r4, r2, #0
  uip_ipaddr_t ipaddr;
  rpl_parent_t *parent;
  rpl_instance_t *instance;
  rpl_instance_t *end;

  uip_ip6addr(&ipaddr, 0xfe80, 0, 0, 0, 0, 0, 0, 0);
    e44e:	4b13      	ldr	r3, [pc, #76]	; (e49c <rpl_link_neighbor_callback+0x58>)
    e450:	466a      	mov	r2, sp
    e452:	8013      	strh	r3, [r2, #0]
    e454:	2300      	movs	r3, #0
    e456:	8053      	strh	r3, [r2, #2]
    e458:	8093      	strh	r3, [r2, #4]
    e45a:	80d3      	strh	r3, [r2, #6]
    e45c:	8113      	strh	r3, [r2, #8]
    e45e:	8153      	strh	r3, [r2, #10]
    e460:	8193      	strh	r3, [r2, #12]
    e462:	81d3      	strh	r3, [r2, #14]
  uip_ds6_set_addr_iid(&ipaddr, (uip_lladdr_t *)addr);
    e464:	4668      	mov	r0, sp
    e466:	1c31      	adds	r1, r6, #0
    e468:	4b0d      	ldr	r3, [pc, #52]	; (e4a0 <rpl_link_neighbor_callback+0x5c>)
    e46a:	4798      	blx	r3

  for(instance = &instance_table[0], end = instance + RPL_MAX_INSTANCES; instance < end; ++instance) {
    if(instance->used == 1 ) {
    e46c:	238d      	movs	r3, #141	; 0x8d
    e46e:	4a0d      	ldr	r2, [pc, #52]	; (e4a4 <rpl_link_neighbor_callback+0x60>)
    e470:	5cd3      	ldrb	r3, [r2, r3]
    e472:	2b01      	cmp	r3, #1
    e474:	d10f      	bne.n	e496 <rpl_link_neighbor_callback+0x52>
      parent = rpl_find_parent_any_dag(instance, &ipaddr);
    e476:	1c10      	adds	r0, r2, #0
    e478:	4669      	mov	r1, sp
    e47a:	4b0b      	ldr	r3, [pc, #44]	; (e4a8 <rpl_link_neighbor_callback+0x64>)
    e47c:	4798      	blx	r3
      if(parent != NULL) {
    e47e:	2800      	cmp	r0, #0
    e480:	d009      	beq.n	e496 <rpl_link_neighbor_callback+0x52>
        /* Trigger DAG rank recalculation. */
        PRINTF("RPL: rpl_link_neighbor_callback triggering update\n\r");
        parent->updated = 1;
    e482:	2301      	movs	r3, #1
    e484:	7343      	strb	r3, [r0, #13]
        if(instance->of->neighbor_link_callback != NULL) {
    e486:	4b07      	ldr	r3, [pc, #28]	; (e4a4 <rpl_link_neighbor_callback+0x60>)
    e488:	689b      	ldr	r3, [r3, #8]
    e48a:	685b      	ldr	r3, [r3, #4]
    e48c:	2b00      	cmp	r3, #0
    e48e:	d002      	beq.n	e496 <rpl_link_neighbor_callback+0x52>
          instance->of->neighbor_link_callback(parent, status, numtx);
    e490:	1c29      	adds	r1, r5, #0
    e492:	1c22      	adds	r2, r4, #0
    e494:	4798      	blx	r3
        }
      }
    }
  }
}
    e496:	b004      	add	sp, #16
    e498:	bd70      	pop	{r4, r5, r6, pc}
    e49a:	46c0      	nop			; (mov r8, r8)
    e49c:	ffff80fe 	.word	0xffff80fe
    e4a0:	000076a5 	.word	0x000076a5
    e4a4:	20003288 	.word	0x20003288
    e4a8:	0000c509 	.word	0x0000c509

0000e4ac <rpl_ipv6_neighbor_callback>:
/*---------------------------------------------------------------------------*/
void
rpl_ipv6_neighbor_callback(uip_ds6_nbr_t *nbr)
{
    e4ac:	b508      	push	{r3, lr}

  PRINTF("RPL: Removing neighbor ");
  PRINT6ADDR(&nbr->ipaddr);
  PRINTF("\n\r");
  for(instance = &instance_table[0], end = instance + RPL_MAX_INSTANCES; instance < end; ++instance) {
    if(instance->used == 1 ) {
    e4ae:	238d      	movs	r3, #141	; 0x8d
    e4b0:	4a07      	ldr	r2, [pc, #28]	; (e4d0 <rpl_ipv6_neighbor_callback+0x24>)
    e4b2:	5cd3      	ldrb	r3, [r2, r3]
    e4b4:	2b01      	cmp	r3, #1
    e4b6:	d10a      	bne.n	e4ce <rpl_ipv6_neighbor_callback+0x22>
    e4b8:	1c01      	adds	r1, r0, #0
      p = rpl_find_parent_any_dag(instance, &nbr->ipaddr);
    e4ba:	1c10      	adds	r0, r2, #0
    e4bc:	4b05      	ldr	r3, [pc, #20]	; (e4d4 <rpl_ipv6_neighbor_callback+0x28>)
    e4be:	4798      	blx	r3
      if(p != NULL) {
    e4c0:	2800      	cmp	r0, #0
    e4c2:	d004      	beq.n	e4ce <rpl_ipv6_neighbor_callback+0x22>
        p->rank = INFINITE_RANK;
    e4c4:	2301      	movs	r3, #1
    e4c6:	425b      	negs	r3, r3
    e4c8:	8103      	strh	r3, [r0, #8]
        /* Trigger DAG rank recalculation. */
        PRINTF("RPL: rpl_ipv6_neighbor_callback infinite rank\n\r");
        p->updated = 1;
    e4ca:	3302      	adds	r3, #2
    e4cc:	7343      	strb	r3, [r0, #13]
      }
    }
  }
}
    e4ce:	bd08      	pop	{r3, pc}
    e4d0:	20003288 	.word	0x20003288
    e4d4:	0000c509 	.word	0x0000c509

0000e4d8 <rpl_init>:
/*---------------------------------------------------------------------------*/
void
rpl_init(void)
{
    e4d8:	b510      	push	{r4, lr}
    e4da:	b084      	sub	sp, #16
  uip_ipaddr_t rplmaddr;
  PRINTF("RPL started\n\r");
  default_instance = NULL;
    e4dc:	2400      	movs	r4, #0
    e4de:	4b0e      	ldr	r3, [pc, #56]	; (e518 <rpl_init+0x40>)
    e4e0:	601c      	str	r4, [r3, #0]

  rpl_dag_init();
    e4e2:	4b0e      	ldr	r3, [pc, #56]	; (e51c <rpl_init+0x44>)
    e4e4:	4798      	blx	r3
  rpl_reset_periodic_timer();
    e4e6:	4b0e      	ldr	r3, [pc, #56]	; (e520 <rpl_init+0x48>)
    e4e8:	4798      	blx	r3
  rpl_icmp6_register_handlers();
    e4ea:	4b0e      	ldr	r3, [pc, #56]	; (e524 <rpl_init+0x4c>)
    e4ec:	4798      	blx	r3

  /* add rpl multicast address */
  uip_create_linklocal_rplnodes_mcast(&rplmaddr);
    e4ee:	4b0e      	ldr	r3, [pc, #56]	; (e528 <rpl_init+0x50>)
    e4f0:	466a      	mov	r2, sp
    e4f2:	8013      	strh	r3, [r2, #0]
    e4f4:	8054      	strh	r4, [r2, #2]
    e4f6:	8094      	strh	r4, [r2, #4]
    e4f8:	80d4      	strh	r4, [r2, #6]
    e4fa:	8114      	strh	r4, [r2, #8]
    e4fc:	8154      	strh	r4, [r2, #10]
    e4fe:	8194      	strh	r4, [r2, #12]
    e500:	23d0      	movs	r3, #208	; 0xd0
    e502:	015b      	lsls	r3, r3, #5
    e504:	81d3      	strh	r3, [r2, #14]
  uip_ds6_maddr_add(&rplmaddr);
    e506:	4668      	mov	r0, sp
    e508:	4b08      	ldr	r3, [pc, #32]	; (e52c <rpl_init+0x54>)
    e50a:	4798      	blx	r3

#if RPL_CONF_STATS
  memset(&rpl_stats, 0, sizeof(rpl_stats));
#endif

  RPL_OF.reset(NULL);
    e50c:	4b08      	ldr	r3, [pc, #32]	; (e530 <rpl_init+0x58>)
    e50e:	681b      	ldr	r3, [r3, #0]
    e510:	2000      	movs	r0, #0
    e512:	4798      	blx	r3
}
    e514:	b004      	add	sp, #16
    e516:	bd10      	pop	{r4, pc}
    e518:	20003284 	.word	0x20003284
    e51c:	0000c365 	.word	0x0000c365
    e520:	0000e23d 	.word	0x0000e23d
    e524:	0000deb5 	.word	0x0000deb5
    e528:	000002ff 	.word	0x000002ff
    e52c:	00007515 	.word	0x00007515
    e530:	20000168 	.word	0x20000168

0000e534 <autostart_start>:
#endif

/*---------------------------------------------------------------------------*/
void
autostart_start(struct process * const processes[])
{
    e534:	b538      	push	{r3, r4, r5, lr}
    e536:	1c04      	adds	r4, r0, #0
  int i;
  
  for(i = 0; processes[i] != NULL; ++i) {
    e538:	6800      	ldr	r0, [r0, #0]
    e53a:	2800      	cmp	r0, #0
    e53c:	d008      	beq.n	e550 <autostart_start+0x1c>
    e53e:	3404      	adds	r4, #4
    process_start(processes[i], NULL);
    e540:	4d04      	ldr	r5, [pc, #16]	; (e554 <autostart_start+0x20>)
    e542:	2100      	movs	r1, #0
    e544:	47a8      	blx	r5
    e546:	3404      	adds	r4, #4
    e548:	1f23      	subs	r3, r4, #4
void
autostart_start(struct process * const processes[])
{
  int i;
  
  for(i = 0; processes[i] != NULL; ++i) {
    e54a:	6818      	ldr	r0, [r3, #0]
    e54c:	2800      	cmp	r0, #0
    e54e:	d1f8      	bne.n	e542 <autostart_start+0xe>
    process_start(processes[i], NULL);
    PRINTF("autostart_start: starting process '%s'\n\r", processes[i]->name);
  }
}
    e550:	bd38      	pop	{r3, r4, r5, pc}
    e552:	46c0      	nop			; (mov r8, r8)
    e554:	0000ec79 	.word	0x0000ec79

0000e558 <process_thread_ctimer_process>:
#endif

/*---------------------------------------------------------------------------*/
PROCESS(ctimer_process, "Ctimer process");
PROCESS_THREAD(ctimer_process, ev, data)
{
    e558:	b570      	push	{r4, r5, r6, lr}
    e55a:	1c06      	adds	r6, r0, #0
    e55c:	1c15      	adds	r5, r2, #0
  struct ctimer *c;
  PROCESS_BEGIN();
    e55e:	8803      	ldrh	r3, [r0, #0]
    e560:	2b00      	cmp	r3, #0
    e562:	d002      	beq.n	e56a <process_thread_ctimer_process+0x12>
    e564:	2b4a      	cmp	r3, #74	; 0x4a
    e566:	d013      	beq.n	e590 <process_thread_ctimer_process+0x38>
    e568:	e035      	b.n	e5d6 <process_thread_ctimer_process+0x7e>

  for(c = list_head(ctimer_list); c != NULL; c = c->next) {
    e56a:	481d      	ldr	r0, [pc, #116]	; (e5e0 <process_thread_ctimer_process+0x88>)
    e56c:	4b1d      	ldr	r3, [pc, #116]	; (e5e4 <process_thread_ctimer_process+0x8c>)
    e56e:	4798      	blx	r3
    e570:	1e04      	subs	r4, r0, #0
    e572:	d006      	beq.n	e582 <process_thread_ctimer_process+0x2a>
    etimer_set(&c->etimer, c->etimer.timer.interval);
    e574:	4d1c      	ldr	r5, [pc, #112]	; (e5e8 <process_thread_ctimer_process+0x90>)
    e576:	1d20      	adds	r0, r4, #4
    e578:	68a1      	ldr	r1, [r4, #8]
    e57a:	47a8      	blx	r5
PROCESS_THREAD(ctimer_process, ev, data)
{
  struct ctimer *c;
  PROCESS_BEGIN();

  for(c = list_head(ctimer_list); c != NULL; c = c->next) {
    e57c:	6824      	ldr	r4, [r4, #0]
    e57e:	2c00      	cmp	r4, #0
    e580:	d1f9      	bne.n	e576 <process_thread_ctimer_process+0x1e>
    etimer_set(&c->etimer, c->etimer.timer.interval);
  }
  initialized = 1;
    e582:	2201      	movs	r2, #1
    e584:	4b19      	ldr	r3, [pc, #100]	; (e5ec <process_thread_ctimer_process+0x94>)
    e586:	701a      	strb	r2, [r3, #0]

  while(1) {
    PROCESS_YIELD_UNTIL(ev == PROCESS_EVENT_TIMER);
    e588:	234a      	movs	r3, #74	; 0x4a
    e58a:	8033      	strh	r3, [r6, #0]
    e58c:	2001      	movs	r0, #1
    e58e:	e025      	b.n	e5dc <process_thread_ctimer_process+0x84>
    e590:	2001      	movs	r0, #1
    e592:	2988      	cmp	r1, #136	; 0x88
    e594:	d122      	bne.n	e5dc <process_thread_ctimer_process+0x84>
    for(c = list_head(ctimer_list); c != NULL; c = c->next) {
    e596:	4812      	ldr	r0, [pc, #72]	; (e5e0 <process_thread_ctimer_process+0x88>)
    e598:	4b12      	ldr	r3, [pc, #72]	; (e5e4 <process_thread_ctimer_process+0x8c>)
    e59a:	4798      	blx	r3
    e59c:	1e04      	subs	r4, r0, #0
    e59e:	d0f3      	beq.n	e588 <process_thread_ctimer_process+0x30>
      if(&c->etimer == data) {
    e5a0:	1d03      	adds	r3, r0, #4
    e5a2:	429d      	cmp	r5, r3
    e5a4:	d113      	bne.n	e5ce <process_thread_ctimer_process+0x76>
    e5a6:	e002      	b.n	e5ae <process_thread_ctimer_process+0x56>
    e5a8:	1d23      	adds	r3, r4, #4
    e5aa:	429d      	cmp	r5, r3
    e5ac:	d10f      	bne.n	e5ce <process_thread_ctimer_process+0x76>
	list_remove(ctimer_list, c);
    e5ae:	480c      	ldr	r0, [pc, #48]	; (e5e0 <process_thread_ctimer_process+0x88>)
    e5b0:	1c21      	adds	r1, r4, #0
    e5b2:	4b0f      	ldr	r3, [pc, #60]	; (e5f0 <process_thread_ctimer_process+0x98>)
    e5b4:	4798      	blx	r3
	PROCESS_CONTEXT_BEGIN(c->p);
    e5b6:	4b0f      	ldr	r3, [pc, #60]	; (e5f4 <process_thread_ctimer_process+0x9c>)
    e5b8:	681d      	ldr	r5, [r3, #0]
    e5ba:	6962      	ldr	r2, [r4, #20]
    e5bc:	601a      	str	r2, [r3, #0]
	if(c->f != NULL) {
    e5be:	69a3      	ldr	r3, [r4, #24]
    e5c0:	2b00      	cmp	r3, #0
    e5c2:	d001      	beq.n	e5c8 <process_thread_ctimer_process+0x70>
	  c->f(c->ptr);
    e5c4:	69e0      	ldr	r0, [r4, #28]
    e5c6:	4798      	blx	r3
	}
	PROCESS_CONTEXT_END(c->p);
    e5c8:	4b0a      	ldr	r3, [pc, #40]	; (e5f4 <process_thread_ctimer_process+0x9c>)
    e5ca:	601d      	str	r5, [r3, #0]
	break;
    e5cc:	e7dc      	b.n	e588 <process_thread_ctimer_process+0x30>
  }
  initialized = 1;

  while(1) {
    PROCESS_YIELD_UNTIL(ev == PROCESS_EVENT_TIMER);
    for(c = list_head(ctimer_list); c != NULL; c = c->next) {
    e5ce:	6824      	ldr	r4, [r4, #0]
    e5d0:	2c00      	cmp	r4, #0
    e5d2:	d1e9      	bne.n	e5a8 <process_thread_ctimer_process+0x50>
    e5d4:	e7d8      	b.n	e588 <process_thread_ctimer_process+0x30>
	PROCESS_CONTEXT_END(c->p);
	break;
      }
    }
  }
  PROCESS_END();
    e5d6:	2300      	movs	r3, #0
    e5d8:	8003      	strh	r3, [r0, #0]
    e5da:	2003      	movs	r0, #3
}
    e5dc:	bd70      	pop	{r4, r5, r6, pc}
    e5de:	46c0      	nop			; (mov r8, r8)
    e5e0:	20001d0c 	.word	0x20001d0c
    e5e4:	00005719 	.word	0x00005719
    e5e8:	0000e91d 	.word	0x0000e91d
    e5ec:	20001d10 	.word	0x20001d10
    e5f0:	00005735 	.word	0x00005735
    e5f4:	20001d2c 	.word	0x20001d2c

0000e5f8 <ctimer_init>:
/*---------------------------------------------------------------------------*/
void
ctimer_init(void)
{
    e5f8:	b508      	push	{r3, lr}
  initialized = 0;
    e5fa:	2200      	movs	r2, #0
    e5fc:	4b04      	ldr	r3, [pc, #16]	; (e610 <ctimer_init+0x18>)
    e5fe:	701a      	strb	r2, [r3, #0]
  list_init(ctimer_list);
    e600:	4804      	ldr	r0, [pc, #16]	; (e614 <ctimer_init+0x1c>)
    e602:	4b05      	ldr	r3, [pc, #20]	; (e618 <ctimer_init+0x20>)
    e604:	4798      	blx	r3
  process_start(&ctimer_process, NULL);
    e606:	4805      	ldr	r0, [pc, #20]	; (e61c <ctimer_init+0x24>)
    e608:	2100      	movs	r1, #0
    e60a:	4b05      	ldr	r3, [pc, #20]	; (e620 <ctimer_init+0x28>)
    e60c:	4798      	blx	r3
}
    e60e:	bd08      	pop	{r3, pc}
    e610:	20001d10 	.word	0x20001d10
    e614:	20001d0c 	.word	0x20001d0c
    e618:	00005711 	.word	0x00005711
    e61c:	20000184 	.word	0x20000184
    e620:	0000ec79 	.word	0x0000ec79

0000e624 <ctimer_set>:
/*---------------------------------------------------------------------------*/
void
ctimer_set(struct ctimer *c, clock_time_t t,
	   void (*f)(void *), void *ptr)
{
    e624:	b570      	push	{r4, r5, r6, lr}
    e626:	1c04      	adds	r4, r0, #0
  PRINTF("ctimer_set %p %u\n\r", c, (unsigned)t);
  c->p = PROCESS_CURRENT();
    e628:	480d      	ldr	r0, [pc, #52]	; (e660 <ctimer_set+0x3c>)
    e62a:	6805      	ldr	r5, [r0, #0]
    e62c:	6165      	str	r5, [r4, #20]
  c->f = f;
    e62e:	61a2      	str	r2, [r4, #24]
  c->ptr = ptr;
    e630:	61e3      	str	r3, [r4, #28]
  if(initialized) {
    e632:	4b0c      	ldr	r3, [pc, #48]	; (e664 <ctimer_set+0x40>)
    e634:	781b      	ldrb	r3, [r3, #0]
    e636:	2b00      	cmp	r3, #0
    e638:	d007      	beq.n	e64a <ctimer_set+0x26>
    PROCESS_CONTEXT_BEGIN(&ctimer_process);
    e63a:	1c06      	adds	r6, r0, #0
    e63c:	4b0a      	ldr	r3, [pc, #40]	; (e668 <ctimer_set+0x44>)
    e63e:	6003      	str	r3, [r0, #0]
    etimer_set(&c->etimer, t);
    e640:	1d20      	adds	r0, r4, #4
    e642:	4b0a      	ldr	r3, [pc, #40]	; (e66c <ctimer_set+0x48>)
    e644:	4798      	blx	r3
    PROCESS_CONTEXT_END(&ctimer_process);
    e646:	6035      	str	r5, [r6, #0]
    e648:	e000      	b.n	e64c <ctimer_set+0x28>
  } else {
    c->etimer.timer.interval = t;
    e64a:	60a1      	str	r1, [r4, #8]
  }

  list_remove(ctimer_list, c);
    e64c:	4d08      	ldr	r5, [pc, #32]	; (e670 <ctimer_set+0x4c>)
    e64e:	1c28      	adds	r0, r5, #0
    e650:	1c21      	adds	r1, r4, #0
    e652:	4b08      	ldr	r3, [pc, #32]	; (e674 <ctimer_set+0x50>)
    e654:	4798      	blx	r3
  list_add(ctimer_list, c);
    e656:	1c28      	adds	r0, r5, #0
    e658:	1c21      	adds	r1, r4, #0
    e65a:	4b07      	ldr	r3, [pc, #28]	; (e678 <ctimer_set+0x54>)
    e65c:	4798      	blx	r3
}
    e65e:	bd70      	pop	{r4, r5, r6, pc}
    e660:	20001d2c 	.word	0x20001d2c
    e664:	20001d10 	.word	0x20001d10
    e668:	20000184 	.word	0x20000184
    e66c:	0000e91d 	.word	0x0000e91d
    e670:	20001d0c 	.word	0x20001d0c
    e674:	00005735 	.word	0x00005735
    e678:	00005769 	.word	0x00005769

0000e67c <ctimer_reset>:
/*---------------------------------------------------------------------------*/
void
ctimer_reset(struct ctimer *c)
{
    e67c:	b570      	push	{r4, r5, r6, lr}
    e67e:	1c04      	adds	r4, r0, #0
  if(initialized) {
    e680:	4b0a      	ldr	r3, [pc, #40]	; (e6ac <ctimer_reset+0x30>)
    e682:	781b      	ldrb	r3, [r3, #0]
    e684:	2b00      	cmp	r3, #0
    e686:	d007      	beq.n	e698 <ctimer_reset+0x1c>
    PROCESS_CONTEXT_BEGIN(&ctimer_process);
    e688:	4d09      	ldr	r5, [pc, #36]	; (e6b0 <ctimer_reset+0x34>)
    e68a:	682e      	ldr	r6, [r5, #0]
    e68c:	4b09      	ldr	r3, [pc, #36]	; (e6b4 <ctimer_reset+0x38>)
    e68e:	602b      	str	r3, [r5, #0]
    etimer_reset(&c->etimer);
    e690:	3004      	adds	r0, #4
    e692:	4b09      	ldr	r3, [pc, #36]	; (e6b8 <ctimer_reset+0x3c>)
    e694:	4798      	blx	r3
    PROCESS_CONTEXT_END(&ctimer_process);
    e696:	602e      	str	r6, [r5, #0]
  }

  list_remove(ctimer_list, c);
    e698:	4d08      	ldr	r5, [pc, #32]	; (e6bc <ctimer_reset+0x40>)
    e69a:	1c28      	adds	r0, r5, #0
    e69c:	1c21      	adds	r1, r4, #0
    e69e:	4b08      	ldr	r3, [pc, #32]	; (e6c0 <ctimer_reset+0x44>)
    e6a0:	4798      	blx	r3
  list_add(ctimer_list, c);
    e6a2:	1c28      	adds	r0, r5, #0
    e6a4:	1c21      	adds	r1, r4, #0
    e6a6:	4b07      	ldr	r3, [pc, #28]	; (e6c4 <ctimer_reset+0x48>)
    e6a8:	4798      	blx	r3
}
    e6aa:	bd70      	pop	{r4, r5, r6, pc}
    e6ac:	20001d10 	.word	0x20001d10
    e6b0:	20001d2c 	.word	0x20001d2c
    e6b4:	20000184 	.word	0x20000184
    e6b8:	0000e935 	.word	0x0000e935
    e6bc:	20001d0c 	.word	0x20001d0c
    e6c0:	00005735 	.word	0x00005735
    e6c4:	00005769 	.word	0x00005769

0000e6c8 <ctimer_restart>:
/*---------------------------------------------------------------------------*/
void
ctimer_restart(struct ctimer *c)
{
    e6c8:	b570      	push	{r4, r5, r6, lr}
    e6ca:	1c04      	adds	r4, r0, #0
  if(initialized) {
    e6cc:	4b0a      	ldr	r3, [pc, #40]	; (e6f8 <ctimer_restart+0x30>)
    e6ce:	781b      	ldrb	r3, [r3, #0]
    e6d0:	2b00      	cmp	r3, #0
    e6d2:	d007      	beq.n	e6e4 <ctimer_restart+0x1c>
    PROCESS_CONTEXT_BEGIN(&ctimer_process);
    e6d4:	4d09      	ldr	r5, [pc, #36]	; (e6fc <ctimer_restart+0x34>)
    e6d6:	682e      	ldr	r6, [r5, #0]
    e6d8:	4b09      	ldr	r3, [pc, #36]	; (e700 <ctimer_restart+0x38>)
    e6da:	602b      	str	r3, [r5, #0]
    etimer_restart(&c->etimer);
    e6dc:	3004      	adds	r0, #4
    e6de:	4b09      	ldr	r3, [pc, #36]	; (e704 <ctimer_restart+0x3c>)
    e6e0:	4798      	blx	r3
    PROCESS_CONTEXT_END(&ctimer_process);
    e6e2:	602e      	str	r6, [r5, #0]
  }

  list_remove(ctimer_list, c);
    e6e4:	4d08      	ldr	r5, [pc, #32]	; (e708 <ctimer_restart+0x40>)
    e6e6:	1c28      	adds	r0, r5, #0
    e6e8:	1c21      	adds	r1, r4, #0
    e6ea:	4b08      	ldr	r3, [pc, #32]	; (e70c <ctimer_restart+0x44>)
    e6ec:	4798      	blx	r3
  list_add(ctimer_list, c);
    e6ee:	1c28      	adds	r0, r5, #0
    e6f0:	1c21      	adds	r1, r4, #0
    e6f2:	4b07      	ldr	r3, [pc, #28]	; (e710 <ctimer_restart+0x48>)
    e6f4:	4798      	blx	r3
}
    e6f6:	bd70      	pop	{r4, r5, r6, pc}
    e6f8:	20001d10 	.word	0x20001d10
    e6fc:	20001d2c 	.word	0x20001d2c
    e700:	20000184 	.word	0x20000184
    e704:	0000e94d 	.word	0x0000e94d
    e708:	20001d0c 	.word	0x20001d0c
    e70c:	00005735 	.word	0x00005735
    e710:	00005769 	.word	0x00005769

0000e714 <ctimer_stop>:
/*---------------------------------------------------------------------------*/
void
ctimer_stop(struct ctimer *c)
{
    e714:	b510      	push	{r4, lr}
    e716:	1c04      	adds	r4, r0, #0
  if(initialized) {
    e718:	4b07      	ldr	r3, [pc, #28]	; (e738 <ctimer_stop+0x24>)
    e71a:	781b      	ldrb	r3, [r3, #0]
    e71c:	2b00      	cmp	r3, #0
    e71e:	d003      	beq.n	e728 <ctimer_stop+0x14>
    etimer_stop(&c->etimer);
    e720:	3004      	adds	r0, #4
    e722:	4b06      	ldr	r3, [pc, #24]	; (e73c <ctimer_stop+0x28>)
    e724:	4798      	blx	r3
    e726:	e002      	b.n	e72e <ctimer_stop+0x1a>
  } else {
    c->etimer.next = NULL;
    e728:	2300      	movs	r3, #0
    e72a:	60c3      	str	r3, [r0, #12]
    c->etimer.p = PROCESS_NONE;
    e72c:	6103      	str	r3, [r0, #16]
  }
  list_remove(ctimer_list, c);
    e72e:	4804      	ldr	r0, [pc, #16]	; (e740 <ctimer_stop+0x2c>)
    e730:	1c21      	adds	r1, r4, #0
    e732:	4b04      	ldr	r3, [pc, #16]	; (e744 <ctimer_stop+0x30>)
    e734:	4798      	blx	r3
}
    e736:	bd10      	pop	{r4, pc}
    e738:	20001d10 	.word	0x20001d10
    e73c:	0000e985 	.word	0x0000e985
    e740:	20001d0c 	.word	0x20001d0c
    e744:	00005735 	.word	0x00005735

0000e748 <energest_init>:
unsigned char energest_current_mode[ENERGEST_TYPE_MAX];

/*---------------------------------------------------------------------------*/
void
energest_init(void)
{
    e748:	b530      	push	{r4, r5, lr}
    e74a:	4907      	ldr	r1, [pc, #28]	; (e768 <energest_init+0x20>)
    e74c:	2300      	movs	r3, #0
  int i;
  for(i = 0; i < ENERGEST_TYPE_MAX; ++i) {
    energest_total_time[i].current = energest_current_time[i] = 0;
    e74e:	4d07      	ldr	r5, [pc, #28]	; (e76c <energest_init+0x24>)
    e750:	2200      	movs	r2, #0
    e752:	4c07      	ldr	r4, [pc, #28]	; (e770 <energest_init+0x28>)
    e754:	1958      	adds	r0, r3, r5
    e756:	6002      	str	r2, [r0, #0]
    e758:	1918      	adds	r0, r3, r4
    e75a:	6002      	str	r2, [r0, #0]
    energest_current_mode[i] = 0;
    e75c:	700a      	strb	r2, [r1, #0]
    e75e:	3304      	adds	r3, #4
    e760:	3101      	adds	r1, #1
/*---------------------------------------------------------------------------*/
void
energest_init(void)
{
  int i;
  for(i = 0; i < ENERGEST_TYPE_MAX; ++i) {
    e762:	2b30      	cmp	r3, #48	; 0x30
    e764:	d1f6      	bne.n	e754 <energest_init+0xc>
#ifdef ENERGEST_CONF_LEVELDEVICE_LEVELS
  for(i = 0; i < ENERGEST_CONF_LEVELDEVICE_LEVELS; ++i) {
    energest_leveldevice_current_leveltime[i].current = 0;
  }
#endif
}
    e766:	bd30      	pop	{r4, r5, pc}
    e768:	200033c0 	.word	0x200033c0
    e76c:	200033cc 	.word	0x200033cc
    e770:	2000338c 	.word	0x2000338c

0000e774 <update_time>:

PROCESS(etimer_process, "Event timer");
/*---------------------------------------------------------------------------*/
static void
update_time(void)
{
    e774:	b510      	push	{r4, lr}
  clock_time_t tdist;
  clock_time_t now;
  struct etimer *t;

  if (timerlist == NULL) {
    e776:	4b11      	ldr	r3, [pc, #68]	; (e7bc <update_time+0x48>)
    e778:	681b      	ldr	r3, [r3, #0]
    e77a:	2b00      	cmp	r3, #0
    e77c:	d103      	bne.n	e786 <update_time+0x12>
    next_expiration = 0;
    e77e:	2200      	movs	r2, #0
    e780:	4b0f      	ldr	r3, [pc, #60]	; (e7c0 <update_time+0x4c>)
    e782:	601a      	str	r2, [r3, #0]
    e784:	e019      	b.n	e7ba <update_time+0x46>
  } else {
    now = clock_time();
    e786:	4b0f      	ldr	r3, [pc, #60]	; (e7c4 <update_time+0x50>)
    e788:	4798      	blx	r3
    t = timerlist;
    e78a:	4b0c      	ldr	r3, [pc, #48]	; (e7bc <update_time+0x48>)
    e78c:	681b      	ldr	r3, [r3, #0]
    /* Must calculate distance to next time into account due to wraps */
    tdist = t->timer.start + t->timer.interval - now;
    e78e:	685a      	ldr	r2, [r3, #4]
    e790:	681c      	ldr	r4, [r3, #0]
    e792:	46a4      	mov	ip, r4
    e794:	4462      	add	r2, ip
    e796:	1a11      	subs	r1, r2, r0
    for(t = t->next; t != NULL; t = t->next) {
    e798:	689a      	ldr	r2, [r3, #8]
    e79a:	2a00      	cmp	r2, #0
    e79c:	d00a      	beq.n	e7b4 <update_time+0x40>
      if(t->timer.start + t->timer.interval - now < tdist) {
    e79e:	6853      	ldr	r3, [r2, #4]
    e7a0:	6814      	ldr	r4, [r2, #0]
    e7a2:	46a4      	mov	ip, r4
    e7a4:	4463      	add	r3, ip
    e7a6:	1a1b      	subs	r3, r3, r0
    e7a8:	4299      	cmp	r1, r3
    e7aa:	d900      	bls.n	e7ae <update_time+0x3a>
    e7ac:	1c19      	adds	r1, r3, #0
  } else {
    now = clock_time();
    t = timerlist;
    /* Must calculate distance to next time into account due to wraps */
    tdist = t->timer.start + t->timer.interval - now;
    for(t = t->next; t != NULL; t = t->next) {
    e7ae:	6892      	ldr	r2, [r2, #8]
    e7b0:	2a00      	cmp	r2, #0
    e7b2:	d1f4      	bne.n	e79e <update_time+0x2a>
      if(t->timer.start + t->timer.interval - now < tdist) {
	tdist = t->timer.start + t->timer.interval - now;
      }
    }
    next_expiration = now + tdist;
    e7b4:	1808      	adds	r0, r1, r0
    e7b6:	4b02      	ldr	r3, [pc, #8]	; (e7c0 <update_time+0x4c>)
    e7b8:	6018      	str	r0, [r3, #0]
  }
}
    e7ba:	bd10      	pop	{r4, pc}
    e7bc:	20001d14 	.word	0x20001d14
    e7c0:	20001d18 	.word	0x20001d18
    e7c4:	0000f89d 	.word	0x0000f89d

0000e7c8 <etimer_request_poll>:
  PROCESS_END();
}
/*---------------------------------------------------------------------------*/
void
etimer_request_poll(void)
{
    e7c8:	b508      	push	{r3, lr}
  process_poll(&etimer_process);
    e7ca:	4802      	ldr	r0, [pc, #8]	; (e7d4 <etimer_request_poll+0xc>)
    e7cc:	4b02      	ldr	r3, [pc, #8]	; (e7d8 <etimer_request_poll+0x10>)
    e7ce:	4798      	blx	r3
}
    e7d0:	bd08      	pop	{r3, pc}
    e7d2:	46c0      	nop			; (mov r8, r8)
    e7d4:	20000194 	.word	0x20000194
    e7d8:	0000ecb9 	.word	0x0000ecb9

0000e7dc <process_thread_etimer_process>:
    next_expiration = now + tdist;
  }
}
/*---------------------------------------------------------------------------*/
PROCESS_THREAD(etimer_process, ev, data)
{
    e7dc:	b5f0      	push	{r4, r5, r6, r7, lr}
    e7de:	4657      	mov	r7, sl
    e7e0:	b480      	push	{r7}
    e7e2:	b082      	sub	sp, #8
    e7e4:	1c07      	adds	r7, r0, #0
  struct etimer *t, *u;
	
  PROCESS_BEGIN();
    e7e6:	8803      	ldrh	r3, [r0, #0]
    e7e8:	2b00      	cmp	r3, #0
    e7ea:	d002      	beq.n	e7f2 <process_thread_etimer_process+0x16>
    e7ec:	2b59      	cmp	r3, #89	; 0x59
    e7ee:	d007      	beq.n	e800 <process_thread_etimer_process+0x24>
    e7f0:	e056      	b.n	e8a0 <process_thread_etimer_process+0xc4>

  timerlist = NULL;
    e7f2:	2200      	movs	r2, #0
    e7f4:	4b2e      	ldr	r3, [pc, #184]	; (e8b0 <process_thread_etimer_process+0xd4>)
    e7f6:	601a      	str	r2, [r3, #0]
  
  while(1) {
    PROCESS_YIELD();
    e7f8:	2359      	movs	r3, #89	; 0x59
    e7fa:	803b      	strh	r3, [r7, #0]
    e7fc:	2001      	movs	r0, #1
    e7fe:	e052      	b.n	e8a6 <process_thread_etimer_process+0xca>

    if(ev == PROCESS_EVENT_EXITED) {
    e800:	2987      	cmp	r1, #135	; 0x87
    e802:	d11e      	bne.n	e842 <process_thread_etimer_process+0x66>
      struct process *p = data;

      while(timerlist != NULL && timerlist->p == p) {
    e804:	4b2a      	ldr	r3, [pc, #168]	; (e8b0 <process_thread_etimer_process+0xd4>)
    e806:	681b      	ldr	r3, [r3, #0]
    e808:	2b00      	cmp	r3, #0
    e80a:	d0f5      	beq.n	e7f8 <process_thread_etimer_process+0x1c>
    e80c:	68d9      	ldr	r1, [r3, #12]
    e80e:	428a      	cmp	r2, r1
    e810:	d113      	bne.n	e83a <process_thread_etimer_process+0x5e>
	timerlist = timerlist->next;
    e812:	689b      	ldr	r3, [r3, #8]
    PROCESS_YIELD();

    if(ev == PROCESS_EVENT_EXITED) {
      struct process *p = data;

      while(timerlist != NULL && timerlist->p == p) {
    e814:	2b00      	cmp	r3, #0
    e816:	d103      	bne.n	e820 <process_thread_etimer_process+0x44>
    e818:	2200      	movs	r2, #0
    e81a:	4b25      	ldr	r3, [pc, #148]	; (e8b0 <process_thread_etimer_process+0xd4>)
    e81c:	601a      	str	r2, [r3, #0]
    e81e:	e7eb      	b.n	e7f8 <process_thread_etimer_process+0x1c>
    e820:	68d9      	ldr	r1, [r3, #12]
    e822:	428a      	cmp	r2, r1
    e824:	d0f5      	beq.n	e812 <process_thread_etimer_process+0x36>
    e826:	4922      	ldr	r1, [pc, #136]	; (e8b0 <process_thread_etimer_process+0xd4>)
    e828:	600b      	str	r3, [r1, #0]
	timerlist = timerlist->next;
      }

      if(timerlist != NULL) {
	t = timerlist;
	while(t->next != NULL) {
    e82a:	e006      	b.n	e83a <process_thread_etimer_process+0x5e>
	  if(t->next->p == p) {
    e82c:	68c8      	ldr	r0, [r1, #12]
    e82e:	4282      	cmp	r2, r0
    e830:	d102      	bne.n	e838 <process_thread_etimer_process+0x5c>
	    t->next = t->next->next;
    e832:	6889      	ldr	r1, [r1, #8]
    e834:	6099      	str	r1, [r3, #8]
    e836:	e000      	b.n	e83a <process_thread_etimer_process+0x5e>
	timerlist = timerlist->next;
      }

      if(timerlist != NULL) {
	t = timerlist;
	while(t->next != NULL) {
    e838:	1c0b      	adds	r3, r1, #0
    e83a:	6899      	ldr	r1, [r3, #8]
    e83c:	2900      	cmp	r1, #0
    e83e:	d1f5      	bne.n	e82c <process_thread_etimer_process+0x50>
    e840:	e7da      	b.n	e7f8 <process_thread_etimer_process+0x1c>
	  } else
	    t = t->next;
	}
      }
      continue;
    } else if(ev != PROCESS_EVENT_POLL) {
    e842:	2982      	cmp	r1, #130	; 0x82
    e844:	d1d8      	bne.n	e7f8 <process_thread_etimer_process+0x1c>

  again:
    
    u = NULL;
    
    for(t = timerlist; t != NULL; t = t->next) {
    e846:	4b1a      	ldr	r3, [pc, #104]	; (e8b0 <process_thread_etimer_process+0xd4>)
    e848:	469a      	mov	sl, r3
      if(timer_expired(&t->timer)) {
    e84a:	4d1a      	ldr	r5, [pc, #104]	; (e8b4 <process_thread_etimer_process+0xd8>)
	if(process_post(t->p, PROCESS_EVENT_TIMER, t) == PROCESS_ERR_OK) {
    e84c:	4e1a      	ldr	r6, [pc, #104]	; (e8b8 <process_thread_etimer_process+0xdc>)

  again:
    
    u = NULL;
    
    for(t = timerlist; t != NULL; t = t->next) {
    e84e:	4653      	mov	r3, sl
    e850:	681c      	ldr	r4, [r3, #0]
    e852:	2c00      	cmp	r4, #0
    e854:	d0d0      	beq.n	e7f8 <process_thread_etimer_process+0x1c>
    e856:	2300      	movs	r3, #0
    e858:	9301      	str	r3, [sp, #4]
    e85a:	e000      	b.n	e85e <process_thread_etimer_process+0x82>
    e85c:	1c1c      	adds	r4, r3, #0
      if(timer_expired(&t->timer)) {
    e85e:	1c20      	adds	r0, r4, #0
    e860:	47a8      	blx	r5
    e862:	2800      	cmp	r0, #0
    e864:	d017      	beq.n	e896 <process_thread_etimer_process+0xba>
	if(process_post(t->p, PROCESS_EVENT_TIMER, t) == PROCESS_ERR_OK) {
    e866:	68e0      	ldr	r0, [r4, #12]
    e868:	2188      	movs	r1, #136	; 0x88
    e86a:	1c22      	adds	r2, r4, #0
    e86c:	47b0      	blx	r6
    e86e:	2800      	cmp	r0, #0
    e870:	d10f      	bne.n	e892 <process_thread_etimer_process+0xb6>
	  
	  /* Reset the process ID of the event timer, to signal that the
	     etimer has expired. This is later checked in the
	     etimer_expired() function. */
	  t->p = PROCESS_NONE;
    e872:	2300      	movs	r3, #0
    e874:	60e3      	str	r3, [r4, #12]
	  if(u != NULL) {
    e876:	9b01      	ldr	r3, [sp, #4]
    e878:	2b00      	cmp	r3, #0
    e87a:	d002      	beq.n	e882 <process_thread_etimer_process+0xa6>
	    u->next = t->next;
    e87c:	68a2      	ldr	r2, [r4, #8]
    e87e:	609a      	str	r2, [r3, #8]
    e880:	e002      	b.n	e888 <process_thread_etimer_process+0xac>
	  } else {
	    timerlist = t->next;
    e882:	4b0b      	ldr	r3, [pc, #44]	; (e8b0 <process_thread_etimer_process+0xd4>)
    e884:	68a2      	ldr	r2, [r4, #8]
    e886:	601a      	str	r2, [r3, #0]
	  }
	  t->next = NULL;
    e888:	2300      	movs	r3, #0
    e88a:	60a3      	str	r3, [r4, #8]
	  update_time();
    e88c:	4b0b      	ldr	r3, [pc, #44]	; (e8bc <process_thread_etimer_process+0xe0>)
    e88e:	4798      	blx	r3
	  goto again;
    e890:	e7dd      	b.n	e84e <process_thread_etimer_process+0x72>
	} else {
	  etimer_request_poll();
    e892:	4b0b      	ldr	r3, [pc, #44]	; (e8c0 <process_thread_etimer_process+0xe4>)
    e894:	4798      	blx	r3

  again:
    
    u = NULL;
    
    for(t = timerlist; t != NULL; t = t->next) {
    e896:	68a3      	ldr	r3, [r4, #8]
    e898:	9401      	str	r4, [sp, #4]
    e89a:	2b00      	cmp	r3, #0
    e89c:	d1de      	bne.n	e85c <process_thread_etimer_process+0x80>
    e89e:	e7ab      	b.n	e7f8 <process_thread_etimer_process+0x1c>
      u = t;
    }
    
  }
  
  PROCESS_END();
    e8a0:	2300      	movs	r3, #0
    e8a2:	8003      	strh	r3, [r0, #0]
    e8a4:	2003      	movs	r0, #3
}
    e8a6:	b002      	add	sp, #8
    e8a8:	bc04      	pop	{r2}
    e8aa:	4692      	mov	sl, r2
    e8ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
    e8ae:	46c0      	nop			; (mov r8, r8)
    e8b0:	20001d14 	.word	0x20001d14
    e8b4:	0000ed9d 	.word	0x0000ed9d
    e8b8:	0000ec09 	.word	0x0000ec09
    e8bc:	0000e775 	.word	0x0000e775
    e8c0:	0000e7c9 	.word	0x0000e7c9

0000e8c4 <add_timer>:
  process_poll(&etimer_process);
}
/*---------------------------------------------------------------------------*/
static void
add_timer(struct etimer *timer)
{
    e8c4:	b510      	push	{r4, lr}
    e8c6:	1c04      	adds	r4, r0, #0
  struct etimer *t;

  etimer_request_poll();
    e8c8:	4b10      	ldr	r3, [pc, #64]	; (e90c <add_timer+0x48>)
    e8ca:	4798      	blx	r3

  if(timer->p != PROCESS_NONE) {
    e8cc:	68e3      	ldr	r3, [r4, #12]
    e8ce:	2b00      	cmp	r3, #0
    e8d0:	d011      	beq.n	e8f6 <add_timer+0x32>
    for(t = timerlist; t != NULL; t = t->next) {
    e8d2:	4b0f      	ldr	r3, [pc, #60]	; (e910 <add_timer+0x4c>)
    e8d4:	681b      	ldr	r3, [r3, #0]
    e8d6:	2b00      	cmp	r3, #0
    e8d8:	d00d      	beq.n	e8f6 <add_timer+0x32>
      if(t == timer) {
    e8da:	429c      	cmp	r4, r3
    e8dc:	d108      	bne.n	e8f0 <add_timer+0x2c>
    e8de:	e001      	b.n	e8e4 <add_timer+0x20>
    e8e0:	429c      	cmp	r4, r3
    e8e2:	d105      	bne.n	e8f0 <add_timer+0x2c>
	/* Timer already on list, bail out. */
        timer->p = PROCESS_CURRENT();
    e8e4:	4b0b      	ldr	r3, [pc, #44]	; (e914 <add_timer+0x50>)
    e8e6:	681b      	ldr	r3, [r3, #0]
    e8e8:	60e3      	str	r3, [r4, #12]
	update_time();
    e8ea:	4b0b      	ldr	r3, [pc, #44]	; (e918 <add_timer+0x54>)
    e8ec:	4798      	blx	r3
	return;
    e8ee:	e00b      	b.n	e908 <add_timer+0x44>
  struct etimer *t;

  etimer_request_poll();

  if(timer->p != PROCESS_NONE) {
    for(t = timerlist; t != NULL; t = t->next) {
    e8f0:	689b      	ldr	r3, [r3, #8]
    e8f2:	2b00      	cmp	r3, #0
    e8f4:	d1f4      	bne.n	e8e0 <add_timer+0x1c>
      }
    }
  }

  /* Timer not on list. */
  timer->p = PROCESS_CURRENT();
    e8f6:	4b07      	ldr	r3, [pc, #28]	; (e914 <add_timer+0x50>)
    e8f8:	681b      	ldr	r3, [r3, #0]
    e8fa:	60e3      	str	r3, [r4, #12]
  timer->next = timerlist;
    e8fc:	4b04      	ldr	r3, [pc, #16]	; (e910 <add_timer+0x4c>)
    e8fe:	681a      	ldr	r2, [r3, #0]
    e900:	60a2      	str	r2, [r4, #8]
  timerlist = timer;
    e902:	601c      	str	r4, [r3, #0]

  update_time();
    e904:	4b04      	ldr	r3, [pc, #16]	; (e918 <add_timer+0x54>)
    e906:	4798      	blx	r3
}
    e908:	bd10      	pop	{r4, pc}
    e90a:	46c0      	nop			; (mov r8, r8)
    e90c:	0000e7c9 	.word	0x0000e7c9
    e910:	20001d14 	.word	0x20001d14
    e914:	20001d2c 	.word	0x20001d2c
    e918:	0000e775 	.word	0x0000e775

0000e91c <etimer_set>:
/*---------------------------------------------------------------------------*/
void
etimer_set(struct etimer *et, clock_time_t interval)
{
    e91c:	b510      	push	{r4, lr}
    e91e:	1c04      	adds	r4, r0, #0
  timer_set(&et->timer, interval);
    e920:	4b02      	ldr	r3, [pc, #8]	; (e92c <etimer_set+0x10>)
    e922:	4798      	blx	r3
  add_timer(et);
    e924:	1c20      	adds	r0, r4, #0
    e926:	4b02      	ldr	r3, [pc, #8]	; (e930 <etimer_set+0x14>)
    e928:	4798      	blx	r3
}
    e92a:	bd10      	pop	{r4, pc}
    e92c:	0000ed6d 	.word	0x0000ed6d
    e930:	0000e8c5 	.word	0x0000e8c5

0000e934 <etimer_reset>:
/*---------------------------------------------------------------------------*/
void
etimer_reset(struct etimer *et)
{
    e934:	b510      	push	{r4, lr}
    e936:	1c04      	adds	r4, r0, #0
  timer_reset(&et->timer);
    e938:	4b02      	ldr	r3, [pc, #8]	; (e944 <etimer_reset+0x10>)
    e93a:	4798      	blx	r3
  add_timer(et);
    e93c:	1c20      	adds	r0, r4, #0
    e93e:	4b02      	ldr	r3, [pc, #8]	; (e948 <etimer_reset+0x14>)
    e940:	4798      	blx	r3
}
    e942:	bd10      	pop	{r4, pc}
    e944:	0000ed81 	.word	0x0000ed81
    e948:	0000e8c5 	.word	0x0000e8c5

0000e94c <etimer_restart>:
/*---------------------------------------------------------------------------*/
void
etimer_restart(struct etimer *et)
{
    e94c:	b510      	push	{r4, lr}
    e94e:	1c04      	adds	r4, r0, #0
  timer_restart(&et->timer);
    e950:	4b02      	ldr	r3, [pc, #8]	; (e95c <etimer_restart+0x10>)
    e952:	4798      	blx	r3
  add_timer(et);
    e954:	1c20      	adds	r0, r4, #0
    e956:	4b02      	ldr	r3, [pc, #8]	; (e960 <etimer_restart+0x14>)
    e958:	4798      	blx	r3
}
    e95a:	bd10      	pop	{r4, pc}
    e95c:	0000ed8d 	.word	0x0000ed8d
    e960:	0000e8c5 	.word	0x0000e8c5

0000e964 <etimer_expired>:
}
/*---------------------------------------------------------------------------*/
int
etimer_expired(struct etimer *et)
{
  return et->p == PROCESS_NONE;
    e964:	68c0      	ldr	r0, [r0, #12]
    e966:	4243      	negs	r3, r0
    e968:	4158      	adcs	r0, r3
}
    e96a:	4770      	bx	lr

0000e96c <etimer_expiration_time>:
/*---------------------------------------------------------------------------*/
clock_time_t
etimer_expiration_time(struct etimer *et)
{
  return et->timer.start + et->timer.interval;
    e96c:	6842      	ldr	r2, [r0, #4]
    e96e:	6803      	ldr	r3, [r0, #0]
    e970:	18d0      	adds	r0, r2, r3
}
    e972:	4770      	bx	lr

0000e974 <etimer_pending>:
}
/*---------------------------------------------------------------------------*/
int
etimer_pending(void)
{
  return timerlist != NULL;
    e974:	4b02      	ldr	r3, [pc, #8]	; (e980 <etimer_pending+0xc>)
    e976:	6818      	ldr	r0, [r3, #0]
    e978:	1e43      	subs	r3, r0, #1
    e97a:	4198      	sbcs	r0, r3
}
    e97c:	4770      	bx	lr
    e97e:	46c0      	nop			; (mov r8, r8)
    e980:	20001d14 	.word	0x20001d14

0000e984 <etimer_stop>:
  return etimer_pending() ? next_expiration : 0;
}
/*---------------------------------------------------------------------------*/
void
etimer_stop(struct etimer *et)
{
    e984:	b510      	push	{r4, lr}
    e986:	1e04      	subs	r4, r0, #0
  struct etimer *t;

  /* First check if et is the first event timer on the list. */
  if(et == timerlist) {
    e988:	4b0f      	ldr	r3, [pc, #60]	; (e9c8 <etimer_stop+0x44>)
    e98a:	681a      	ldr	r2, [r3, #0]
    e98c:	4294      	cmp	r4, r2
    e98e:	d104      	bne.n	e99a <etimer_stop+0x16>
    timerlist = timerlist->next;
    e990:	6882      	ldr	r2, [r0, #8]
    e992:	601a      	str	r2, [r3, #0]
    update_time();
    e994:	4b0d      	ldr	r3, [pc, #52]	; (e9cc <etimer_stop+0x48>)
    e996:	4798      	blx	r3
    e998:	e00c      	b.n	e9b4 <etimer_stop+0x30>
  } else {
    /* Else walk through the list and try to find the item before the
       et timer. */
    for(t = timerlist; t != NULL && t->next != et; t = t->next);
    e99a:	2a00      	cmp	r2, #0
    e99c:	d00a      	beq.n	e9b4 <etimer_stop+0x30>
    e99e:	6893      	ldr	r3, [r2, #8]
    e9a0:	4283      	cmp	r3, r0
    e9a2:	d105      	bne.n	e9b0 <etimer_stop+0x2c>
    e9a4:	1c13      	adds	r3, r2, #0
    e9a6:	e009      	b.n	e9bc <etimer_stop+0x38>
    e9a8:	689a      	ldr	r2, [r3, #8]
    e9aa:	42a2      	cmp	r2, r4
    e9ac:	d006      	beq.n	e9bc <etimer_stop+0x38>
    e9ae:	1c13      	adds	r3, r2, #0
    e9b0:	2b00      	cmp	r3, #0
    e9b2:	d1f9      	bne.n	e9a8 <etimer_stop+0x24>
      update_time();
    }
  }

  /* Remove the next pointer from the item to be removed. */
  et->next = NULL;
    e9b4:	2300      	movs	r3, #0
    e9b6:	60a3      	str	r3, [r4, #8]
  /* Set the timer as expired */
  et->p = PROCESS_NONE;
    e9b8:	60e3      	str	r3, [r4, #12]
    e9ba:	e004      	b.n	e9c6 <etimer_stop+0x42>

    if(t != NULL) {
      /* We've found the item before the event timer that we are about
	 to remove. We point the items next pointer to the event after
	 the removed item. */
      t->next = et->next;
    e9bc:	68a2      	ldr	r2, [r4, #8]
    e9be:	609a      	str	r2, [r3, #8]

      update_time();
    e9c0:	4b02      	ldr	r3, [pc, #8]	; (e9cc <etimer_stop+0x48>)
    e9c2:	4798      	blx	r3
    e9c4:	e7f6      	b.n	e9b4 <etimer_stop+0x30>

  /* Remove the next pointer from the item to be removed. */
  et->next = NULL;
  /* Set the timer as expired */
  et->p = PROCESS_NONE;
}
    e9c6:	bd10      	pop	{r4, pc}
    e9c8:	20001d14 	.word	0x20001d14
    e9cc:	0000e775 	.word	0x0000e775

0000e9d0 <exit_process>:
  process_post_synch(p, PROCESS_EVENT_INIT, (process_data_t)arg);
}
/*---------------------------------------------------------------------------*/
static void
exit_process(struct process *p, struct process *fromprocess)
{
    e9d0:	b5f0      	push	{r4, r5, r6, r7, lr}
    e9d2:	b083      	sub	sp, #12
  register struct process *q;
  struct process *old_current = process_current;
    e9d4:	4b26      	ldr	r3, [pc, #152]	; (ea70 <exit_process+0xa0>)
    e9d6:	681f      	ldr	r7, [r3, #0]

  PRINTF("process: exit_process '%s'\n\r", PROCESS_NAME_STRING(p));

  /* Make sure the process is in the process list before we try to
     exit it. */
  for(q = process_list; q != p && q != NULL; q = q->next);
    e9d8:	4b26      	ldr	r3, [pc, #152]	; (ea74 <exit_process+0xa4>)
    e9da:	681d      	ldr	r5, [r3, #0]
    e9dc:	4285      	cmp	r5, r0
    e9de:	d008      	beq.n	e9f2 <exit_process+0x22>
    e9e0:	2d00      	cmp	r5, #0
    e9e2:	d043      	beq.n	ea6c <exit_process+0x9c>
    e9e4:	1c2b      	adds	r3, r5, #0
    e9e6:	681b      	ldr	r3, [r3, #0]
    e9e8:	4298      	cmp	r0, r3
    e9ea:	d003      	beq.n	e9f4 <exit_process+0x24>
    e9ec:	2b00      	cmp	r3, #0
    e9ee:	d1fa      	bne.n	e9e6 <exit_process+0x16>
    e9f0:	e03c      	b.n	ea6c <exit_process+0x9c>
    e9f2:	1c03      	adds	r3, r0, #0
  if(q == NULL) {
    e9f4:	2b00      	cmp	r3, #0
    e9f6:	d039      	beq.n	ea6c <exit_process+0x9c>
    e9f8:	9101      	str	r1, [sp, #4]
    e9fa:	1c04      	adds	r4, r0, #0
    return;
  }

  if(process_is_running(p)) {
    e9fc:	7b83      	ldrb	r3, [r0, #14]
    e9fe:	2b00      	cmp	r3, #0
    ea00:	d01a      	beq.n	ea38 <exit_process+0x68>
    /* Process was running */
    p->state = PROCESS_STATE_NONE;
    ea02:	2300      	movs	r3, #0
    ea04:	7383      	strb	r3, [r0, #14]
    /*
     * Post a synchronous event to all processes to inform them that
     * this process is about to exit. This will allow services to
     * deallocate state associated with this process.
     */
    for(q = process_list; q != NULL; q = q->next) {
    ea06:	2d00      	cmp	r5, #0
    ea08:	d009      	beq.n	ea1e <exit_process+0x4e>
      if(p != q) {
	call_process(q, PROCESS_EVENT_EXITED, (process_data_t)p);
    ea0a:	4e1b      	ldr	r6, [pc, #108]	; (ea78 <exit_process+0xa8>)
     * Post a synchronous event to all processes to inform them that
     * this process is about to exit. This will allow services to
     * deallocate state associated with this process.
     */
    for(q = process_list; q != NULL; q = q->next) {
      if(p != q) {
    ea0c:	42ac      	cmp	r4, r5
    ea0e:	d003      	beq.n	ea18 <exit_process+0x48>
	call_process(q, PROCESS_EVENT_EXITED, (process_data_t)p);
    ea10:	1c28      	adds	r0, r5, #0
    ea12:	2187      	movs	r1, #135	; 0x87
    ea14:	1c22      	adds	r2, r4, #0
    ea16:	47b0      	blx	r6
    /*
     * Post a synchronous event to all processes to inform them that
     * this process is about to exit. This will allow services to
     * deallocate state associated with this process.
     */
    for(q = process_list; q != NULL; q = q->next) {
    ea18:	682d      	ldr	r5, [r5, #0]
    ea1a:	2d00      	cmp	r5, #0
    ea1c:	d1f6      	bne.n	ea0c <exit_process+0x3c>
      if(p != q) {
	call_process(q, PROCESS_EVENT_EXITED, (process_data_t)p);
      }
    }

    if(p->thread != NULL && p != fromprocess) {
    ea1e:	68a3      	ldr	r3, [r4, #8]
    ea20:	2b00      	cmp	r3, #0
    ea22:	d009      	beq.n	ea38 <exit_process+0x68>
    ea24:	9a01      	ldr	r2, [sp, #4]
    ea26:	4294      	cmp	r4, r2
    ea28:	d006      	beq.n	ea38 <exit_process+0x68>
      /* Post the exit event to the process that is about to exit. */
      process_current = p;
    ea2a:	4a11      	ldr	r2, [pc, #68]	; (ea70 <exit_process+0xa0>)
    ea2c:	6014      	str	r4, [r2, #0]
      p->thread(&p->pt, PROCESS_EVENT_EXIT, NULL);
    ea2e:	1c20      	adds	r0, r4, #0
    ea30:	300c      	adds	r0, #12
    ea32:	2183      	movs	r1, #131	; 0x83
    ea34:	2200      	movs	r2, #0
    ea36:	4798      	blx	r3
    }
  }

  if(p == process_list) {
    ea38:	4b0e      	ldr	r3, [pc, #56]	; (ea74 <exit_process+0xa4>)
    ea3a:	681a      	ldr	r2, [r3, #0]
    ea3c:	4294      	cmp	r4, r2
    ea3e:	d10d      	bne.n	ea5c <exit_process+0x8c>
    process_list = process_list->next;
    ea40:	6822      	ldr	r2, [r4, #0]
    ea42:	601a      	str	r2, [r3, #0]
    ea44:	e010      	b.n	ea68 <exit_process+0x98>
  } else {
    for(q = process_list; q != NULL; q = q->next) {
      if(q->next == p) {
    ea46:	681a      	ldr	r2, [r3, #0]
    ea48:	42a2      	cmp	r2, r4
    ea4a:	d004      	beq.n	ea56 <exit_process+0x86>
    ea4c:	1c13      	adds	r3, r2, #0
  }

  if(p == process_list) {
    process_list = process_list->next;
  } else {
    for(q = process_list; q != NULL; q = q->next) {
    ea4e:	2b00      	cmp	r3, #0
    ea50:	d1f9      	bne.n	ea46 <exit_process+0x76>
    ea52:	e009      	b.n	ea68 <exit_process+0x98>
      if(q->next == p) {
    ea54:	1c13      	adds	r3, r2, #0
	q->next = p->next;
    ea56:	6822      	ldr	r2, [r4, #0]
    ea58:	601a      	str	r2, [r3, #0]
	break;
    ea5a:	e005      	b.n	ea68 <exit_process+0x98>
  }

  if(p == process_list) {
    process_list = process_list->next;
  } else {
    for(q = process_list; q != NULL; q = q->next) {
    ea5c:	2a00      	cmp	r2, #0
    ea5e:	d003      	beq.n	ea68 <exit_process+0x98>
      if(q->next == p) {
    ea60:	6813      	ldr	r3, [r2, #0]
    ea62:	42a3      	cmp	r3, r4
    ea64:	d1f3      	bne.n	ea4e <exit_process+0x7e>
    ea66:	e7f5      	b.n	ea54 <exit_process+0x84>
	break;
      }
    }
  }

  process_current = old_current;
    ea68:	4b01      	ldr	r3, [pc, #4]	; (ea70 <exit_process+0xa0>)
    ea6a:	601f      	str	r7, [r3, #0]
}
    ea6c:	b003      	add	sp, #12
    ea6e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ea70:	20001d2c 	.word	0x20001d2c
    ea74:	20001d30 	.word	0x20001d30
    ea78:	0000ea7d 	.word	0x0000ea7d

0000ea7c <call_process>:
/*---------------------------------------------------------------------------*/
static void
call_process(struct process *p, process_event_t ev, process_data_t data)
{
    ea7c:	b538      	push	{r3, r4, r5, lr}
  if(p->state == PROCESS_STATE_CALLED) {
    printf("process: process '%s' called again with event %d\n\r", PROCESS_NAME_STRING(p), ev);
  }
#endif /* DEBUG */
  
  if((p->state & PROCESS_STATE_RUNNING) &&
    ea7e:	7b83      	ldrb	r3, [r0, #14]
    ea80:	07db      	lsls	r3, r3, #31
    ea82:	d517      	bpl.n	eab4 <call_process+0x38>
     p->thread != NULL) {
    ea84:	6883      	ldr	r3, [r0, #8]
  if(p->state == PROCESS_STATE_CALLED) {
    printf("process: process '%s' called again with event %d\n\r", PROCESS_NAME_STRING(p), ev);
  }
#endif /* DEBUG */
  
  if((p->state & PROCESS_STATE_RUNNING) &&
    ea86:	2b00      	cmp	r3, #0
    ea88:	d014      	beq.n	eab4 <call_process+0x38>
    ea8a:	1c0d      	adds	r5, r1, #0
    ea8c:	1c04      	adds	r4, r0, #0
     p->thread != NULL) {
    PRINTF("process: calling process '%s' with event %d\n\r", PROCESS_NAME_STRING(p), ev);
    process_current = p;
    ea8e:	490a      	ldr	r1, [pc, #40]	; (eab8 <call_process+0x3c>)
    ea90:	6008      	str	r0, [r1, #0]
    p->state = PROCESS_STATE_CALLED;
    ea92:	2102      	movs	r1, #2
    ea94:	7381      	strb	r1, [r0, #14]
    ret = p->thread(&p->pt, ev, data);
    ea96:	300c      	adds	r0, #12
    ea98:	1c29      	adds	r1, r5, #0
    ea9a:	4798      	blx	r3
    if(ret == PT_EXITED ||
    ea9c:	3802      	subs	r0, #2
    ea9e:	2801      	cmp	r0, #1
    eaa0:	d901      	bls.n	eaa6 <call_process+0x2a>
       ret == PT_ENDED ||
    eaa2:	2d83      	cmp	r5, #131	; 0x83
    eaa4:	d104      	bne.n	eab0 <call_process+0x34>
       ev == PROCESS_EVENT_EXIT) {
      exit_process(p, p);
    eaa6:	1c20      	adds	r0, r4, #0
    eaa8:	1c21      	adds	r1, r4, #0
    eaaa:	4b04      	ldr	r3, [pc, #16]	; (eabc <call_process+0x40>)
    eaac:	4798      	blx	r3
    eaae:	e001      	b.n	eab4 <call_process+0x38>
    } else {
      p->state = PROCESS_STATE_RUNNING;
    eab0:	2301      	movs	r3, #1
    eab2:	73a3      	strb	r3, [r4, #14]
    }
  }
}
    eab4:	bd38      	pop	{r3, r4, r5, pc}
    eab6:	46c0      	nop			; (mov r8, r8)
    eab8:	20001d2c 	.word	0x20001d2c
    eabc:	0000e9d1 	.word	0x0000e9d1

0000eac0 <do_poll>:
 * Call each process' poll handler.
 */
/*---------------------------------------------------------------------------*/
static void
do_poll(void)
{
    eac0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  struct process *p;

  poll_requested = 0;
    eac2:	2200      	movs	r2, #0
    eac4:	4b0a      	ldr	r3, [pc, #40]	; (eaf0 <do_poll+0x30>)
    eac6:	701a      	strb	r2, [r3, #0]
  /* Call the processes that needs to be polled. */
  for(p = process_list; p != NULL; p = p->next) {
    eac8:	4b0a      	ldr	r3, [pc, #40]	; (eaf4 <do_poll+0x34>)
    eaca:	681c      	ldr	r4, [r3, #0]
    eacc:	2c00      	cmp	r4, #0
    eace:	d00e      	beq.n	eaee <do_poll+0x2e>
    if(p->needspoll) {
      p->state = PROCESS_STATE_RUNNING;
    ead0:	2701      	movs	r7, #1
      p->needspoll = 0;
    ead2:	2500      	movs	r5, #0
      call_process(p, PROCESS_EVENT_POLL, NULL);
    ead4:	4e08      	ldr	r6, [pc, #32]	; (eaf8 <do_poll+0x38>)
  struct process *p;

  poll_requested = 0;
  /* Call the processes that needs to be polled. */
  for(p = process_list; p != NULL; p = p->next) {
    if(p->needspoll) {
    ead6:	7be3      	ldrb	r3, [r4, #15]
    ead8:	2b00      	cmp	r3, #0
    eada:	d005      	beq.n	eae8 <do_poll+0x28>
      p->state = PROCESS_STATE_RUNNING;
    eadc:	73a7      	strb	r7, [r4, #14]
      p->needspoll = 0;
    eade:	73e5      	strb	r5, [r4, #15]
      call_process(p, PROCESS_EVENT_POLL, NULL);
    eae0:	1c20      	adds	r0, r4, #0
    eae2:	2182      	movs	r1, #130	; 0x82
    eae4:	1c2a      	adds	r2, r5, #0
    eae6:	47b0      	blx	r6
{
  struct process *p;

  poll_requested = 0;
  /* Call the processes that needs to be polled. */
  for(p = process_list; p != NULL; p = p->next) {
    eae8:	6824      	ldr	r4, [r4, #0]
    eaea:	2c00      	cmp	r4, #0
    eaec:	d1f3      	bne.n	ead6 <do_poll+0x16>
      p->state = PROCESS_STATE_RUNNING;
      p->needspoll = 0;
      call_process(p, PROCESS_EVENT_POLL, NULL);
    }
  }
}
    eaee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    eaf0:	20001d28 	.word	0x20001d28
    eaf4:	20001d30 	.word	0x20001d30
    eaf8:	0000ea7d 	.word	0x0000ea7d

0000eafc <process_alloc_event>:

/*---------------------------------------------------------------------------*/
process_event_t
process_alloc_event(void)
{
  return lastevent++;
    eafc:	4b02      	ldr	r3, [pc, #8]	; (eb08 <process_alloc_event+0xc>)
    eafe:	7818      	ldrb	r0, [r3, #0]
    eb00:	1c42      	adds	r2, r0, #1
    eb02:	701a      	strb	r2, [r3, #0]
}
    eb04:	4770      	bx	lr
    eb06:	46c0      	nop			; (mov r8, r8)
    eb08:	20001ebc 	.word	0x20001ebc

0000eb0c <process_init>:
}
/*---------------------------------------------------------------------------*/
void
process_init(void)
{
  lastevent = PROCESS_EVENT_MAX;
    eb0c:	228a      	movs	r2, #138	; 0x8a
    eb0e:	4b07      	ldr	r3, [pc, #28]	; (eb2c <process_init+0x20>)
    eb10:	701a      	strb	r2, [r3, #0]

  nevents = fevent = 0;
    eb12:	2300      	movs	r3, #0
    eb14:	4a06      	ldr	r2, [pc, #24]	; (eb30 <process_init+0x24>)
    eb16:	7013      	strb	r3, [r2, #0]
    eb18:	4a06      	ldr	r2, [pc, #24]	; (eb34 <process_init+0x28>)
    eb1a:	7013      	strb	r3, [r2, #0]
#if PROCESS_CONF_STATS
  process_maxevents = 0;
    eb1c:	4a06      	ldr	r2, [pc, #24]	; (eb38 <process_init+0x2c>)
    eb1e:	7013      	strb	r3, [r2, #0]
#endif /* PROCESS_CONF_STATS */

  process_current = process_list = NULL;
    eb20:	4a06      	ldr	r2, [pc, #24]	; (eb3c <process_init+0x30>)
    eb22:	6013      	str	r3, [r2, #0]
    eb24:	4a06      	ldr	r2, [pc, #24]	; (eb40 <process_init+0x34>)
    eb26:	6013      	str	r3, [r2, #0]
}
    eb28:	4770      	bx	lr
    eb2a:	46c0      	nop			; (mov r8, r8)
    eb2c:	20001ebc 	.word	0x20001ebc
    eb30:	20001d20 	.word	0x20001d20
    eb34:	20001d22 	.word	0x20001d22
    eb38:	200033fc 	.word	0x200033fc
    eb3c:	20001d30 	.word	0x20001d30
    eb40:	20001d2c 	.word	0x20001d2c

0000eb44 <process_run>:
  }
}
/*---------------------------------------------------------------------------*/
int
process_run(void)
{
    eb44:	b570      	push	{r4, r5, r6, lr}
  /* Process poll events. */
  if(poll_requested) {
    eb46:	4b25      	ldr	r3, [pc, #148]	; (ebdc <process_run+0x98>)
    eb48:	781b      	ldrb	r3, [r3, #0]
    eb4a:	2b00      	cmp	r3, #0
    eb4c:	d001      	beq.n	eb52 <process_run+0xe>
    do_poll();
    eb4e:	4b24      	ldr	r3, [pc, #144]	; (ebe0 <process_run+0x9c>)
    eb50:	4798      	blx	r3
   * delivered to any of them. If so, we call the event handler
   * function for the process. We only process one event at a time and
   * call the poll handlers inbetween.
   */

  if(nevents > 0) {
    eb52:	4b24      	ldr	r3, [pc, #144]	; (ebe4 <process_run+0xa0>)
    eb54:	781d      	ldrb	r5, [r3, #0]
    eb56:	2d00      	cmp	r5, #0
    eb58:	d03a      	beq.n	ebd0 <process_run+0x8c>
    
    /* There are events that we should deliver. */
    ev = events[fevent].ev;
    eb5a:	4e23      	ldr	r6, [pc, #140]	; (ebe8 <process_run+0xa4>)
    eb5c:	7834      	ldrb	r4, [r6, #0]
    eb5e:	4b23      	ldr	r3, [pc, #140]	; (ebec <process_run+0xa8>)
    eb60:	0062      	lsls	r2, r4, #1
    eb62:	1911      	adds	r1, r2, r4
    eb64:	0089      	lsls	r1, r1, #2
    eb66:	5cc9      	ldrb	r1, [r1, r3]
    eb68:	4821      	ldr	r0, [pc, #132]	; (ebf0 <process_run+0xac>)
    eb6a:	7001      	strb	r1, [r0, #0]
    
    data = events[fevent].data;
    eb6c:	1912      	adds	r2, r2, r4
    eb6e:	0092      	lsls	r2, r2, #2
    eb70:	189b      	adds	r3, r3, r2
    eb72:	685a      	ldr	r2, [r3, #4]
    eb74:	481f      	ldr	r0, [pc, #124]	; (ebf4 <process_run+0xb0>)
    eb76:	6002      	str	r2, [r0, #0]
    receiver = events[fevent].p;
    eb78:	6898      	ldr	r0, [r3, #8]
    eb7a:	4b1f      	ldr	r3, [pc, #124]	; (ebf8 <process_run+0xb4>)
    eb7c:	6018      	str	r0, [r3, #0]

    /* Since we have seen the new event, we move pointer upwards
       and decrese the number of events. */
    fevent = (fevent + 1) % PROCESS_CONF_NUMEVENTS;
    eb7e:	3401      	adds	r4, #1
    eb80:	231f      	movs	r3, #31
    eb82:	401c      	ands	r4, r3
    eb84:	7034      	strb	r4, [r6, #0]
    --nevents;
    eb86:	3d01      	subs	r5, #1
    eb88:	4b16      	ldr	r3, [pc, #88]	; (ebe4 <process_run+0xa0>)
    eb8a:	701d      	strb	r5, [r3, #0]

    /* If this is a broadcast event, we deliver it to all events, in
       order of their priority. */
    if(receiver == PROCESS_BROADCAST) {
    eb8c:	2800      	cmp	r0, #0
    eb8e:	d119      	bne.n	ebc4 <process_run+0x80>
      for(p = process_list; p != NULL; p = p->next) {
    eb90:	4b1a      	ldr	r3, [pc, #104]	; (ebfc <process_run+0xb8>)
    eb92:	681b      	ldr	r3, [r3, #0]
    eb94:	4a1a      	ldr	r2, [pc, #104]	; (ec00 <process_run+0xbc>)
    eb96:	6013      	str	r3, [r2, #0]
    eb98:	2b00      	cmp	r3, #0
    eb9a:	d019      	beq.n	ebd0 <process_run+0x8c>

	/* If we have been requested to poll a process, we do this in
	   between processing the broadcast event. */
	if(poll_requested) {
    eb9c:	4e0f      	ldr	r6, [pc, #60]	; (ebdc <process_run+0x98>)
	  do_poll();
    eb9e:	4d10      	ldr	r5, [pc, #64]	; (ebe0 <process_run+0x9c>)
	}
	call_process(p, ev, data);
    eba0:	1c14      	adds	r4, r2, #0
    if(receiver == PROCESS_BROADCAST) {
      for(p = process_list; p != NULL; p = p->next) {

	/* If we have been requested to poll a process, we do this in
	   between processing the broadcast event. */
	if(poll_requested) {
    eba2:	7833      	ldrb	r3, [r6, #0]
    eba4:	2b00      	cmp	r3, #0
    eba6:	d000      	beq.n	ebaa <process_run+0x66>
	  do_poll();
    eba8:	47a8      	blx	r5
	}
	call_process(p, ev, data);
    ebaa:	4b11      	ldr	r3, [pc, #68]	; (ebf0 <process_run+0xac>)
    ebac:	7819      	ldrb	r1, [r3, #0]
    ebae:	4b11      	ldr	r3, [pc, #68]	; (ebf4 <process_run+0xb0>)
    ebb0:	681a      	ldr	r2, [r3, #0]
    ebb2:	6820      	ldr	r0, [r4, #0]
    ebb4:	4b13      	ldr	r3, [pc, #76]	; (ec04 <process_run+0xc0>)
    ebb6:	4798      	blx	r3
    --nevents;

    /* If this is a broadcast event, we deliver it to all events, in
       order of their priority. */
    if(receiver == PROCESS_BROADCAST) {
      for(p = process_list; p != NULL; p = p->next) {
    ebb8:	6823      	ldr	r3, [r4, #0]
    ebba:	681b      	ldr	r3, [r3, #0]
    ebbc:	6023      	str	r3, [r4, #0]
    ebbe:	2b00      	cmp	r3, #0
    ebc0:	d1ef      	bne.n	eba2 <process_run+0x5e>
    ebc2:	e005      	b.n	ebd0 <process_run+0x8c>
    } else {
      /* This is not a broadcast event, so we deliver it to the
	 specified process. */
      /* If the event was an INIT event, we should also update the
	 state of the process. */
      if(ev == PROCESS_EVENT_INIT) {
    ebc4:	2981      	cmp	r1, #129	; 0x81
    ebc6:	d101      	bne.n	ebcc <process_run+0x88>
	receiver->state = PROCESS_STATE_RUNNING;
    ebc8:	2301      	movs	r3, #1
    ebca:	7383      	strb	r3, [r0, #14]
      }

      /* Make sure that the process actually is running. */
      call_process(receiver, ev, data);
    ebcc:	4b0d      	ldr	r3, [pc, #52]	; (ec04 <process_run+0xc0>)
    ebce:	4798      	blx	r3
  }

  /* Process one event from the queue */
  do_event();

  return nevents + poll_requested;
    ebd0:	4b02      	ldr	r3, [pc, #8]	; (ebdc <process_run+0x98>)
    ebd2:	7818      	ldrb	r0, [r3, #0]
    ebd4:	4b03      	ldr	r3, [pc, #12]	; (ebe4 <process_run+0xa0>)
    ebd6:	781b      	ldrb	r3, [r3, #0]
    ebd8:	18c0      	adds	r0, r0, r3
}
    ebda:	bd70      	pop	{r4, r5, r6, pc}
    ebdc:	20001d28 	.word	0x20001d28
    ebe0:	0000eac1 	.word	0x0000eac1
    ebe4:	20001d22 	.word	0x20001d22
    ebe8:	20001d20 	.word	0x20001d20
    ebec:	20001d38 	.word	0x20001d38
    ebf0:	20001d34 	.word	0x20001d34
    ebf4:	20001d1c 	.word	0x20001d1c
    ebf8:	20001eb8 	.word	0x20001eb8
    ebfc:	20001d30 	.word	0x20001d30
    ec00:	20001d24 	.word	0x20001d24
    ec04:	0000ea7d 	.word	0x0000ea7d

0000ec08 <process_post>:
  return nevents + poll_requested;
}
/*---------------------------------------------------------------------------*/
int
process_post(struct process *p, process_event_t ev, process_data_t data)
{
    ec08:	b5f0      	push	{r4, r5, r6, r7, lr}
    PRINTF("process_post: Process '%s' posts event %d to process '%s', nevents %d\n\r",
	   PROCESS_NAME_STRING(PROCESS_CURRENT()), ev,
	   p == PROCESS_BROADCAST? "<broadcast>": PROCESS_NAME_STRING(p), nevents);
  }
  
  if(nevents == PROCESS_CONF_NUMEVENTS) {
    ec0a:	4b10      	ldr	r3, [pc, #64]	; (ec4c <process_post+0x44>)
    ec0c:	781c      	ldrb	r4, [r3, #0]
    ec0e:	2c20      	cmp	r4, #32
    ec10:	d01a      	beq.n	ec48 <process_post+0x40>
    }
#endif /* DEBUG */
    return PROCESS_ERR_FULL;
  }
  
  snum = (process_num_events_t)(fevent + nevents) % PROCESS_CONF_NUMEVENTS;
    ec12:	4b0f      	ldr	r3, [pc, #60]	; (ec50 <process_post+0x48>)
    ec14:	781b      	ldrb	r3, [r3, #0]
    ec16:	18e3      	adds	r3, r4, r3
    ec18:	251f      	movs	r5, #31
    ec1a:	402b      	ands	r3, r5
    ec1c:	4d0d      	ldr	r5, [pc, #52]	; (ec54 <process_post+0x4c>)
    ec1e:	702b      	strb	r3, [r5, #0]
  events[snum].ev = ev;
    ec20:	4d0d      	ldr	r5, [pc, #52]	; (ec58 <process_post+0x50>)
    ec22:	005e      	lsls	r6, r3, #1
    ec24:	18f7      	adds	r7, r6, r3
    ec26:	00bf      	lsls	r7, r7, #2
    ec28:	5579      	strb	r1, [r7, r5]
  events[snum].data = data;
    ec2a:	19e9      	adds	r1, r5, r7
    ec2c:	604a      	str	r2, [r1, #4]
  events[snum].p = p;
    ec2e:	6088      	str	r0, [r1, #8]
  ++nevents;
    ec30:	3401      	adds	r4, #1
    ec32:	b2e4      	uxtb	r4, r4
    ec34:	4b05      	ldr	r3, [pc, #20]	; (ec4c <process_post+0x44>)
    ec36:	701c      	strb	r4, [r3, #0]

#if PROCESS_CONF_STATS
  if(nevents > process_maxevents) {
    ec38:	4b08      	ldr	r3, [pc, #32]	; (ec5c <process_post+0x54>)
    ec3a:	781b      	ldrb	r3, [r3, #0]
    process_maxevents = nevents;
  }
#endif /* PROCESS_CONF_STATS */
  
  return PROCESS_ERR_OK;
    ec3c:	2000      	movs	r0, #0
  events[snum].data = data;
  events[snum].p = p;
  ++nevents;

#if PROCESS_CONF_STATS
  if(nevents > process_maxevents) {
    ec3e:	42a3      	cmp	r3, r4
    ec40:	d203      	bcs.n	ec4a <process_post+0x42>
    process_maxevents = nevents;
    ec42:	4b06      	ldr	r3, [pc, #24]	; (ec5c <process_post+0x54>)
    ec44:	701c      	strb	r4, [r3, #0]
    ec46:	e000      	b.n	ec4a <process_post+0x42>
      printf("soft panic: event queue is full when broadcast event %d was posted from %s\n\r", ev, PROCESS_NAME_STRING(process_current));
    } else {
      printf("soft panic: event queue is full when event %d was posted to %s frpm %s\n\r", ev, PROCESS_NAME_STRING(p), PROCESS_NAME_STRING(process_current));
    }
#endif /* DEBUG */
    return PROCESS_ERR_FULL;
    ec48:	2001      	movs	r0, #1
    process_maxevents = nevents;
  }
#endif /* PROCESS_CONF_STATS */
  
  return PROCESS_ERR_OK;
}
    ec4a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ec4c:	20001d22 	.word	0x20001d22
    ec50:	20001d20 	.word	0x20001d20
    ec54:	20001d21 	.word	0x20001d21
    ec58:	20001d38 	.word	0x20001d38
    ec5c:	200033fc 	.word	0x200033fc

0000ec60 <process_post_synch>:
/*---------------------------------------------------------------------------*/
void
process_post_synch(struct process *p, process_event_t ev, process_data_t data)
{
    ec60:	b538      	push	{r3, r4, r5, lr}
  struct process *caller = process_current;
    ec62:	4c03      	ldr	r4, [pc, #12]	; (ec70 <process_post_synch+0x10>)
    ec64:	6825      	ldr	r5, [r4, #0]

  call_process(p, ev, data);
    ec66:	4b03      	ldr	r3, [pc, #12]	; (ec74 <process_post_synch+0x14>)
    ec68:	4798      	blx	r3
  process_current = caller;
    ec6a:	6025      	str	r5, [r4, #0]
}
    ec6c:	bd38      	pop	{r3, r4, r5, pc}
    ec6e:	46c0      	nop			; (mov r8, r8)
    ec70:	20001d2c 	.word	0x20001d2c
    ec74:	0000ea7d 	.word	0x0000ea7d

0000ec78 <process_start>:
  return lastevent++;
}
/*---------------------------------------------------------------------------*/
void
process_start(struct process *p, const char *arg)
{
    ec78:	b510      	push	{r4, lr}
  struct process *q;

  /* First make sure that we don't try to start a process that is
     already running. */
  for(q = process_list; q != p && q != NULL; q = q->next);
    ec7a:	4b0d      	ldr	r3, [pc, #52]	; (ecb0 <process_start+0x38>)
    ec7c:	681c      	ldr	r4, [r3, #0]
    ec7e:	4284      	cmp	r4, r0
    ec80:	d014      	beq.n	ecac <process_start+0x34>
    ec82:	2c00      	cmp	r4, #0
    ec84:	d005      	beq.n	ec92 <process_start+0x1a>
    ec86:	1c23      	adds	r3, r4, #0
    ec88:	681b      	ldr	r3, [r3, #0]
    ec8a:	4298      	cmp	r0, r3
    ec8c:	d00e      	beq.n	ecac <process_start+0x34>
    ec8e:	2b00      	cmp	r3, #0
    ec90:	d1fa      	bne.n	ec88 <process_start+0x10>

  /* If we found the process on the process list, we bail out. */
  if(q == p) {
    ec92:	2800      	cmp	r0, #0
    ec94:	d00a      	beq.n	ecac <process_start+0x34>
    ec96:	1c0a      	adds	r2, r1, #0
    return;
  }
  /* Put on the procs list.*/
  p->next = process_list;
    ec98:	6004      	str	r4, [r0, #0]
  process_list = p;
    ec9a:	4b05      	ldr	r3, [pc, #20]	; (ecb0 <process_start+0x38>)
    ec9c:	6018      	str	r0, [r3, #0]
  p->state = PROCESS_STATE_RUNNING;
    ec9e:	2301      	movs	r3, #1
    eca0:	7383      	strb	r3, [r0, #14]
  PT_INIT(&p->pt);
    eca2:	2300      	movs	r3, #0
    eca4:	8183      	strh	r3, [r0, #12]

  PRINTF("process: starting '%s'\n\r", PROCESS_NAME_STRING(p));

  /* Post a synchronous initialization event to the process. */
  process_post_synch(p, PROCESS_EVENT_INIT, (process_data_t)arg);
    eca6:	2181      	movs	r1, #129	; 0x81
    eca8:	4b02      	ldr	r3, [pc, #8]	; (ecb4 <process_start+0x3c>)
    ecaa:	4798      	blx	r3
}
    ecac:	bd10      	pop	{r4, pc}
    ecae:	46c0      	nop			; (mov r8, r8)
    ecb0:	20001d30 	.word	0x20001d30
    ecb4:	0000ec61 	.word	0x0000ec61

0000ecb8 <process_poll>:
}
/*---------------------------------------------------------------------------*/
void
process_poll(struct process *p)
{
  if(p != NULL) {
    ecb8:	2800      	cmp	r0, #0
    ecba:	d007      	beq.n	eccc <process_poll+0x14>
    if(p->state == PROCESS_STATE_RUNNING ||
    ecbc:	7b83      	ldrb	r3, [r0, #14]
    ecbe:	3b01      	subs	r3, #1
    ecc0:	2b01      	cmp	r3, #1
    ecc2:	d803      	bhi.n	eccc <process_poll+0x14>
       p->state == PROCESS_STATE_CALLED) {
      p->needspoll = 1;
    ecc4:	2301      	movs	r3, #1
    ecc6:	73c3      	strb	r3, [r0, #15]
      poll_requested = 1;
    ecc8:	4a01      	ldr	r2, [pc, #4]	; (ecd0 <process_poll+0x18>)
    ecca:	7013      	strb	r3, [r2, #0]
    }
  }
}
    eccc:	4770      	bx	lr
    ecce:	46c0      	nop			; (mov r8, r8)
    ecd0:	20001d28 	.word	0x20001d28

0000ecd4 <rtimer_init>:
static struct rtimer *next_rtimer;

/*---------------------------------------------------------------------------*/
void
rtimer_init(void)
{
    ecd4:	b508      	push	{r3, lr}
  rtimer_arch_init();
    ecd6:	4b01      	ldr	r3, [pc, #4]	; (ecdc <rtimer_init+0x8>)
    ecd8:	4798      	blx	r3
}
    ecda:	bd08      	pop	{r3, pc}
    ecdc:	0000f959 	.word	0x0000f959

0000ece0 <rtimer_run_next>:
  return RTIMER_OK;
}
/*---------------------------------------------------------------------------*/
void
rtimer_run_next(void)
{
    ece0:	b510      	push	{r4, lr}
  struct rtimer *t;
  if(next_rtimer == NULL) {
    ece2:	4b08      	ldr	r3, [pc, #32]	; (ed04 <rtimer_run_next+0x24>)
    ece4:	6818      	ldr	r0, [r3, #0]
    ece6:	2800      	cmp	r0, #0
    ece8:	d00b      	beq.n	ed02 <rtimer_run_next+0x22>
    return;
  }
  t = next_rtimer;
  next_rtimer = NULL;
    ecea:	1c1c      	adds	r4, r3, #0
    ecec:	2300      	movs	r3, #0
    ecee:	6023      	str	r3, [r4, #0]
  t->func(t, t->ptr);
    ecf0:	6881      	ldr	r1, [r0, #8]
    ecf2:	6843      	ldr	r3, [r0, #4]
    ecf4:	4798      	blx	r3
  if(next_rtimer != NULL) {
    ecf6:	6823      	ldr	r3, [r4, #0]
    ecf8:	2b00      	cmp	r3, #0
    ecfa:	d002      	beq.n	ed02 <rtimer_run_next+0x22>
    rtimer_arch_schedule(next_rtimer->time);
    ecfc:	6818      	ldr	r0, [r3, #0]
    ecfe:	4b02      	ldr	r3, [pc, #8]	; (ed08 <rtimer_run_next+0x28>)
    ed00:	4798      	blx	r3
  }
  return;
}
    ed02:	bd10      	pop	{r4, pc}
    ed04:	20001ec0 	.word	0x20001ec0
    ed08:	0000fa3d 	.word	0x0000fa3d

0000ed0c <stimer_set>:
 * \param interval The interval before the timer expires.
 *
 */
void
stimer_set(struct stimer *t, unsigned long interval)
{
    ed0c:	b510      	push	{r4, lr}
    ed0e:	1c04      	adds	r4, r0, #0
  t->interval = interval;
    ed10:	6041      	str	r1, [r0, #4]
  t->start = clock_seconds();
    ed12:	4b02      	ldr	r3, [pc, #8]	; (ed1c <stimer_set+0x10>)
    ed14:	4798      	blx	r3
    ed16:	6020      	str	r0, [r4, #0]
}
    ed18:	bd10      	pop	{r4, pc}
    ed1a:	46c0      	nop			; (mov r8, r8)
    ed1c:	0000f8bd 	.word	0x0000f8bd

0000ed20 <stimer_expired>:
 * \return Non-zero if the timer has expired, zero otherwise.
 *
 */
int
stimer_expired(struct stimer *t)
{
    ed20:	b510      	push	{r4, lr}
    ed22:	1c04      	adds	r4, r0, #0
  return SCLOCK_GEQ(clock_seconds(), t->start + t->interval);
    ed24:	4b05      	ldr	r3, [pc, #20]	; (ed3c <stimer_expired+0x1c>)
    ed26:	4798      	blx	r3
    ed28:	6822      	ldr	r2, [r4, #0]
    ed2a:	6863      	ldr	r3, [r4, #4]
    ed2c:	18d3      	adds	r3, r2, r3
    ed2e:	1ac3      	subs	r3, r0, r3
    ed30:	2000      	movs	r0, #0
    ed32:	4a03      	ldr	r2, [pc, #12]	; (ed40 <stimer_expired+0x20>)
    ed34:	429a      	cmp	r2, r3
    ed36:	4140      	adcs	r0, r0
}
    ed38:	bd10      	pop	{r4, pc}
    ed3a:	46c0      	nop			; (mov r8, r8)
    ed3c:	0000f8bd 	.word	0x0000f8bd
    ed40:	7ffffffe 	.word	0x7ffffffe

0000ed44 <stimer_remaining>:
 * \return The time until the timer expires
 *
 */
unsigned long
stimer_remaining(struct stimer *t)
{
    ed44:	b510      	push	{r4, lr}
  return t->start + t->interval - clock_seconds();
    ed46:	6844      	ldr	r4, [r0, #4]
    ed48:	6803      	ldr	r3, [r0, #0]
    ed4a:	18e4      	adds	r4, r4, r3
    ed4c:	4b01      	ldr	r3, [pc, #4]	; (ed54 <stimer_remaining+0x10>)
    ed4e:	4798      	blx	r3
    ed50:	1a20      	subs	r0, r4, r0
}
    ed52:	bd10      	pop	{r4, pc}
    ed54:	0000f8bd 	.word	0x0000f8bd

0000ed58 <stimer_elapsed>:
 * \return The time elapsed since the last start of the timer
 *
 */
unsigned long
stimer_elapsed(struct stimer *t)
{
    ed58:	b510      	push	{r4, lr}
    ed5a:	1c04      	adds	r4, r0, #0
  return clock_seconds() - t->start;
    ed5c:	4b02      	ldr	r3, [pc, #8]	; (ed68 <stimer_elapsed+0x10>)
    ed5e:	4798      	blx	r3
    ed60:	6823      	ldr	r3, [r4, #0]
    ed62:	1ac0      	subs	r0, r0, r3
}
    ed64:	bd10      	pop	{r4, pc}
    ed66:	46c0      	nop			; (mov r8, r8)
    ed68:	0000f8bd 	.word	0x0000f8bd

0000ed6c <timer_set>:
 * \param interval The interval before the timer expires.
 *
 */
void
timer_set(struct timer *t, clock_time_t interval)
{
    ed6c:	b510      	push	{r4, lr}
    ed6e:	1c04      	adds	r4, r0, #0
  t->interval = interval;
    ed70:	6041      	str	r1, [r0, #4]
  t->start = clock_time();
    ed72:	4b02      	ldr	r3, [pc, #8]	; (ed7c <timer_set+0x10>)
    ed74:	4798      	blx	r3
    ed76:	6020      	str	r0, [r4, #0]
}
    ed78:	bd10      	pop	{r4, pc}
    ed7a:	46c0      	nop			; (mov r8, r8)
    ed7c:	0000f89d 	.word	0x0000f89d

0000ed80 <timer_reset>:
 * \sa timer_restart()
 */
void
timer_reset(struct timer *t)
{
  t->start += t->interval;
    ed80:	6803      	ldr	r3, [r0, #0]
    ed82:	6842      	ldr	r2, [r0, #4]
    ed84:	4694      	mov	ip, r2
    ed86:	4463      	add	r3, ip
    ed88:	6003      	str	r3, [r0, #0]
}
    ed8a:	4770      	bx	lr

0000ed8c <timer_restart>:
 *
 * \sa timer_reset()
 */
void
timer_restart(struct timer *t)
{
    ed8c:	b510      	push	{r4, lr}
    ed8e:	1c04      	adds	r4, r0, #0
  t->start = clock_time();
    ed90:	4b01      	ldr	r3, [pc, #4]	; (ed98 <timer_restart+0xc>)
    ed92:	4798      	blx	r3
    ed94:	6020      	str	r0, [r4, #0]
}
    ed96:	bd10      	pop	{r4, pc}
    ed98:	0000f89d 	.word	0x0000f89d

0000ed9c <timer_expired>:
 * \return Non-zero if the timer has expired, zero otherwise.
 *
 */
int
timer_expired(struct timer *t)
{
    ed9c:	b510      	push	{r4, lr}
    ed9e:	1c04      	adds	r4, r0, #0
  /* Note: Can not return diff >= t->interval so we add 1 to diff and return
     t->interval < diff - required to avoid an internal error in mspgcc. */
  clock_time_t diff = (clock_time() - t->start) + 1;
    eda0:	4b04      	ldr	r3, [pc, #16]	; (edb4 <timer_expired+0x18>)
    eda2:	4798      	blx	r3
    eda4:	6823      	ldr	r3, [r4, #0]
    eda6:	1ac0      	subs	r0, r0, r3
    eda8:	3001      	adds	r0, #1
  return t->interval < diff;
    edaa:	6863      	ldr	r3, [r4, #4]
    edac:	4283      	cmp	r3, r0
    edae:	4180      	sbcs	r0, r0
    edb0:	4240      	negs	r0, r0

}
    edb2:	bd10      	pop	{r4, pc}
    edb4:	0000f89d 	.word	0x0000f89d

0000edb8 <rf233_pending_packet>:
 */
int
rf233_pending_packet(void)
{
  PRINTF("RF233: Frame %spending\n\r", pending_frame ? "" : "not ");
  return pending_frame;
    edb8:	4b01      	ldr	r3, [pc, #4]	; (edc0 <rf233_pending_packet+0x8>)
    edba:	6818      	ldr	r0, [r3, #0]
}
    edbc:	4770      	bx	lr
    edbe:	46c0      	nop			; (mov r8, r8)
    edc0:	20001ed0 	.word	0x20001ed0

0000edc4 <rf233_interrupt_poll>:
 *             interrupt handler to poll the radio process
 * \retval 0   success
 */
int
rf233_interrupt_poll(void)
{  
    edc4:	b500      	push	{lr}
    edc6:	b083      	sub	sp, #12
	volatile uint8_t irq_source;
	 /* handle IRQ source (for what IRQs are enabled, see rf233-config.h) */
	 irq_source = trx_reg_read(RF233_REG_IRQ_STATUS);
    edc8:	200f      	movs	r0, #15
    edca:	4b17      	ldr	r3, [pc, #92]	; (ee28 <rf233_interrupt_poll+0x64>)
    edcc:	4798      	blx	r3
    edce:	466b      	mov	r3, sp
    edd0:	71d8      	strb	r0, [r3, #7]
    edd2:	3307      	adds	r3, #7
	 if(irq_source & IRQ_TRX_DONE) {
    edd4:	781b      	ldrb	r3, [r3, #0]
    edd6:	071b      	lsls	r3, r3, #28
    edd8:	d51f      	bpl.n	ee1a <rf233_interrupt_poll+0x56>
		 
		 if(flag_transmit==1)
    edda:	4b14      	ldr	r3, [pc, #80]	; (ee2c <rf233_interrupt_poll+0x68>)
    eddc:	781b      	ldrb	r3, [r3, #0]
    edde:	2b01      	cmp	r3, #1
    ede0:	d105      	bne.n	edee <rf233_interrupt_poll+0x2a>
		 {
			 flag_transmit=0;
    ede2:	2300      	movs	r3, #0
    ede4:	4a11      	ldr	r2, [pc, #68]	; (ee2c <rf233_interrupt_poll+0x68>)
    ede6:	7013      	strb	r3, [r2, #0]
			 interrupt_callback_in_progress = 0;
    ede8:	4a11      	ldr	r2, [pc, #68]	; (ee30 <rf233_interrupt_poll+0x6c>)
    edea:	6013      	str	r3, [r2, #0]
			 return 0;
    edec:	e018      	b.n	ee20 <rf233_interrupt_poll+0x5c>
		 }
  
  if( interrupt_callback_in_progress) {
    edee:	4b10      	ldr	r3, [pc, #64]	; (ee30 <rf233_interrupt_poll+0x6c>)
    edf0:	681b      	ldr	r3, [r3, #0]
    edf2:	2b00      	cmp	r3, #0
    edf4:	d006      	beq.n	ee04 <rf233_interrupt_poll+0x40>
    /* we cannot read out info from radio now, return here later (through a poll) */
    interrupt_callback_wants_poll = 1;
    edf6:	2201      	movs	r2, #1
    edf8:	4b0e      	ldr	r3, [pc, #56]	; (ee34 <rf233_interrupt_poll+0x70>)
    edfa:	601a      	str	r2, [r3, #0]
    process_poll(&rf233_radio_process);
    edfc:	480e      	ldr	r0, [pc, #56]	; (ee38 <rf233_interrupt_poll+0x74>)
    edfe:	4b0f      	ldr	r3, [pc, #60]	; (ee3c <rf233_interrupt_poll+0x78>)
    ee00:	4798      	blx	r3
    PRINTF("RF233: irq but busy, returns later.\n\r");
    return 0;
    ee02:	e00d      	b.n	ee20 <rf233_interrupt_poll+0x5c>
  }

  interrupt_callback_wants_poll = 0;
    ee04:	2200      	movs	r2, #0
    ee06:	4b0b      	ldr	r3, [pc, #44]	; (ee34 <rf233_interrupt_poll+0x70>)
    ee08:	601a      	str	r2, [r3, #0]
  interrupt_callback_in_progress = 1;
    ee0a:	2301      	movs	r3, #1
    ee0c:	4a08      	ldr	r2, [pc, #32]	; (ee30 <rf233_interrupt_poll+0x6c>)
    ee0e:	6013      	str	r3, [r2, #0]

 
    /* we have started receiving a frame, len can be read */
    pending_frame = 1;
    ee10:	4a0b      	ldr	r2, [pc, #44]	; (ee40 <rf233_interrupt_poll+0x7c>)
    ee12:	6013      	str	r3, [r2, #0]
	//delay_cycles_ms(1);
    process_poll(&rf233_radio_process);
    ee14:	4808      	ldr	r0, [pc, #32]	; (ee38 <rf233_interrupt_poll+0x74>)
    ee16:	4b09      	ldr	r3, [pc, #36]	; (ee3c <rf233_interrupt_poll+0x78>)
    ee18:	4798      	blx	r3
  if(irq_source & IRQ_PLL_LOCK) {
    /* PLL lock */
  }
#endif

  interrupt_callback_in_progress = 0;
    ee1a:	2200      	movs	r2, #0
    ee1c:	4b04      	ldr	r3, [pc, #16]	; (ee30 <rf233_interrupt_poll+0x6c>)
    ee1e:	601a      	str	r2, [r3, #0]
  return 0;
}
    ee20:	2000      	movs	r0, #0
    ee22:	b003      	add	sp, #12
    ee24:	bd00      	pop	{pc}
    ee26:	46c0      	nop			; (mov r8, r8)
    ee28:	00002bf1 	.word	0x00002bf1
    ee2c:	20001edd 	.word	0x20001edd
    ee30:	20001ed4 	.word	0x20001ed4
    ee34:	20001ed8 	.word	0x20001ed8
    ee38:	200001a4 	.word	0x200001a4
    ee3c:	0000ecb9 	.word	0x0000ecb9
    ee40:	20001ed0 	.word	0x20001ed0

0000ee44 <rf233_read>:
 * \retval -3  Failed, too large frame for buffer
 * \retval -4  Failed, CRC/FCS failed (if USE_HW_FCS_CHECK is true)
 */
int
rf233_read(void *buf, unsigned short bufsize)
{
    ee44:	b570      	push	{r4, r5, r6, lr}
    ee46:	b082      	sub	sp, #8
    ee48:	1c04      	adds	r4, r0, #0
  
  uint8_t ed;       /* frame metadata */
  uint8_t frame_len = 0;
    ee4a:	2200      	movs	r2, #0
    ee4c:	466b      	mov	r3, sp
    ee4e:	71da      	strb	r2, [r3, #7]
  int rssi;
#if DEBUG_PRINTDATA
  uint8_t tempreadlen;
#endif  /* DEBUG_PRINTDATA */

  if(pending_frame == 0) {
    ee50:	4b1c      	ldr	r3, [pc, #112]	; (eec4 <rf233_read+0x80>)
    ee52:	6818      	ldr	r0, [r3, #0]
    ee54:	2800      	cmp	r0, #0
    ee56:	d033      	beq.n	eec0 <rf233_read+0x7c>
    ee58:	1c0e      	adds	r6, r1, #0
    ee5a:	1c25      	adds	r5, r4, #0
    return 0;
  }
  pending_frame = 0;
    ee5c:	601a      	str	r2, [r3, #0]
    }
  }
*/

  /* get length of data in FIFO */
  trx_frame_read(&frame_len, 1);
    ee5e:	466b      	mov	r3, sp
    ee60:	1ddc      	adds	r4, r3, #7
    ee62:	1c20      	adds	r0, r4, #0
    ee64:	2101      	movs	r1, #1
    ee66:	4b18      	ldr	r3, [pc, #96]	; (eec8 <rf233_read+0x84>)
    ee68:	4798      	blx	r3
#if DEBUG_PRINTDATA
  tempreadlen = frame_len;
#endif  /* DEBUG_PRINTDATA */
  if(frame_len == 1) {
    ee6a:	7823      	ldrb	r3, [r4, #0]
    ee6c:	2b01      	cmp	r3, #1
    ee6e:	d024      	beq.n	eeba <rf233_read+0x76>
  }

  len = frame_len;
#if USE_HW_FCS_CHECK
  /* FCS has already been stripped */
  len = frame_len - 2;
    ee70:	1e98      	subs	r0, r3, #2
    ee72:	b2c4      	uxtb	r4, r0
#endif  /* USE_HW_FCS_CHECK */

  if(frame_len == 0) {
    ee74:	2b00      	cmp	r3, #0
    ee76:	d022      	beq.n	eebe <rf233_read+0x7a>
    return 0;
  }
  if(len > bufsize) {
    ee78:	b2a3      	uxth	r3, r4
    ee7a:	42b3      	cmp	r3, r6
    ee7c:	d909      	bls.n	ee92 <rf233_read+0x4e>
 */
static void
flush_buffer(void)
{
  /* NB: tentative untested implementation */
  uint8_t temp = 0;
    ee7e:	466b      	mov	r3, sp
    ee80:	1d98      	adds	r0, r3, #6
    ee82:	2300      	movs	r3, #0
    ee84:	7003      	strb	r3, [r0, #0]
  trx_frame_write(&temp, 1);
    ee86:	2101      	movs	r1, #1
    ee88:	4b10      	ldr	r3, [pc, #64]	; (eecc <rf233_read+0x88>)
    ee8a:	4798      	blx	r3
  }
  if(len > bufsize) {
    /* too large frame for the buffer, drop */
    PRINTF("RF233: too large frame for buffer, dropping (%u > %u).\n\r", frame_len, bufsize);
    flush_buffer();
    return -3;
    ee8c:	2003      	movs	r0, #3
    ee8e:	4240      	negs	r0, r0
    ee90:	e016      	b.n	eec0 <rf233_read+0x7c>
  }
  PRINTF("RF233 read %u B\n\r", frame_len);

  /* read out the data into the buffer, disregarding the length and metadata bytes */
  trx_sram_read(1,(uint8_t *)buf, len);
    ee92:	2001      	movs	r0, #1
    ee94:	1c29      	adds	r1, r5, #0
    ee96:	1c22      	adds	r2, r4, #0
    ee98:	4b0d      	ldr	r3, [pc, #52]	; (eed0 <rf233_read+0x8c>)
    ee9a:	4798      	blx	r3
   * resolution of 1dB and accuracy of +/- 5dB. 0xFF means invalid measurement.
   * 0x00 means <= RSSI(base_val), which is -91dBm (typ). See datasheet 12.7.
   * Ergo, real RSSI is (ed-91) dBm or less.
   */
  #define RSSI_OFFSET       (91)
  ed = trx_reg_read(RF233_REG_PHY_ED_LEVEL);
    ee9c:	2007      	movs	r0, #7
    ee9e:	4b0d      	ldr	r3, [pc, #52]	; (eed4 <rf233_read+0x90>)
    eea0:	4798      	blx	r3
  rssi = (int) ed - RSSI_OFFSET;
    eea2:	385b      	subs	r0, #91	; 0x5b
    eea4:	4b0c      	ldr	r3, [pc, #48]	; (eed8 <rf233_read+0x94>)
    eea6:	8118      	strh	r0, [r3, #8]
 */
static void
flush_buffer(void)
{
  /* NB: tentative untested implementation */
  uint8_t temp = 0;
    eea8:	466b      	mov	r3, sp
    eeaa:	1d98      	adds	r0, r3, #6
    eeac:	2300      	movs	r3, #0
    eeae:	7003      	strb	r3, [r0, #0]
  trx_frame_write(&temp, 1);
    eeb0:	2101      	movs	r1, #1
    eeb2:	4b06      	ldr	r3, [pc, #24]	; (eecc <rf233_read+0x88>)
    eeb4:	4798      	blx	r3
      return -4;
    }
  }
#endif  / * USE_HW_FCS_CHECK * /*/

  return len;
    eeb6:	1c20      	adds	r0, r4, #0
    eeb8:	e002      	b.n	eec0 <rf233_read+0x7c>
  /* FCS has already been stripped */
  len = frame_len - 2;
#endif  /* USE_HW_FCS_CHECK */

  if(frame_len == 0) {
    return 0;
    eeba:	2000      	movs	r0, #0
    eebc:	e000      	b.n	eec0 <rf233_read+0x7c>
    eebe:	2000      	movs	r0, #0
    }
  }
#endif  / * USE_HW_FCS_CHECK * /*/

  return len;
}
    eec0:	b002      	add	sp, #8
    eec2:	bd70      	pop	{r4, r5, r6, pc}
    eec4:	20001ed0 	.word	0x20001ed0
    eec8:	00002e09 	.word	0x00002e09
    eecc:	00002f45 	.word	0x00002f45
    eed0:	00003069 	.word	0x00003069
    eed4:	00002bf1 	.word	0x00002bf1
    eed8:	200031f8 	.word	0x200031f8

0000eedc <process_thread_rf233_radio_process>:
/**
 * \brief      Radio RF233 process, infinitely awaits a poll, then checks radio
 *             state and handles received data.
 */
PROCESS_THREAD(rf233_radio_process, ev, data)
{
    eedc:	b510      	push	{r4, lr}
    eede:	1c04      	adds	r4, r0, #0
  int len;
  PROCESS_BEGIN();
    eee0:	8803      	ldrh	r3, [r0, #0]
    eee2:	2b00      	cmp	r3, #0
    eee4:	d003      	beq.n	eeee <process_thread_rf233_radio_process+0x12>
    eee6:	4a12      	ldr	r2, [pc, #72]	; (ef30 <process_thread_rf233_radio_process+0x54>)
    eee8:	4293      	cmp	r3, r2
    eeea:	d004      	beq.n	eef6 <process_thread_rf233_radio_process+0x1a>
    eeec:	e01c      	b.n	ef28 <process_thread_rf233_radio_process+0x4c>
  PRINTF("RF233: started.\n\r");

  while(1) {
    PROCESS_YIELD_UNTIL(ev == PROCESS_EVENT_POLL);
    eeee:	4b10      	ldr	r3, [pc, #64]	; (ef30 <process_thread_rf233_radio_process+0x54>)
    eef0:	8023      	strh	r3, [r4, #0]
    eef2:	2001      	movs	r0, #1
    eef4:	e01b      	b.n	ef2e <process_thread_rf233_radio_process+0x52>
    eef6:	2001      	movs	r0, #1
    eef8:	2982      	cmp	r1, #130	; 0x82
    eefa:	d118      	bne.n	ef2e <process_thread_rf233_radio_process+0x52>
    PRINTF("RF233: polled.\n\r");

    if(interrupt_callback_wants_poll) {
    eefc:	4b0d      	ldr	r3, [pc, #52]	; (ef34 <process_thread_rf233_radio_process+0x58>)
    eefe:	681b      	ldr	r3, [r3, #0]
    ef00:	2b00      	cmp	r3, #0
    ef02:	d001      	beq.n	ef08 <process_thread_rf233_radio_process+0x2c>
      rf233_interrupt_poll();
    ef04:	4b0c      	ldr	r3, [pc, #48]	; (ef38 <process_thread_rf233_radio_process+0x5c>)
    ef06:	4798      	blx	r3
    }

    packetbuf_clear();
    ef08:	4b0c      	ldr	r3, [pc, #48]	; (ef3c <process_thread_rf233_radio_process+0x60>)
    ef0a:	4798      	blx	r3
    // packetbuf_set_attr(PACKETBUF_ATTR_TIMESTAMP, last_packet_timestamp);
    len = rf233_read(packetbuf_dataptr(), PACKETBUF_SIZE);
    ef0c:	4b0c      	ldr	r3, [pc, #48]	; (ef40 <process_thread_rf233_radio_process+0x64>)
    ef0e:	4798      	blx	r3
    ef10:	2180      	movs	r1, #128	; 0x80
    ef12:	4b0c      	ldr	r3, [pc, #48]	; (ef44 <process_thread_rf233_radio_process+0x68>)
    ef14:	4798      	blx	r3
    if(len > 0) {
    ef16:	2800      	cmp	r0, #0
    ef18:	dde9      	ble.n	eeee <process_thread_rf233_radio_process+0x12>
      packetbuf_set_datalen(len);
    ef1a:	b280      	uxth	r0, r0
    ef1c:	4b0a      	ldr	r3, [pc, #40]	; (ef48 <process_thread_rf233_radio_process+0x6c>)
    ef1e:	4798      	blx	r3
      NETSTACK_RDC.input();
    ef20:	4b0a      	ldr	r3, [pc, #40]	; (ef4c <process_thread_rf233_radio_process+0x70>)
    ef22:	691b      	ldr	r3, [r3, #16]
    ef24:	4798      	blx	r3
    ef26:	e7e2      	b.n	eeee <process_thread_rf233_radio_process+0x12>
    } else {
      PRINTF("RF233: error while reading: %d\n\r", len);
    }
  }
  PROCESS_END();
    ef28:	2300      	movs	r3, #0
    ef2a:	8003      	strh	r3, [r0, #0]
    ef2c:	2003      	movs	r0, #3
}
    ef2e:	bd10      	pop	{r4, pc}
    ef30:	000002a6 	.word	0x000002a6
    ef34:	20001ed8 	.word	0x20001ed8
    ef38:	0000edc5 	.word	0x0000edc5
    ef3c:	0000bfa1 	.word	0x0000bfa1
    ef40:	0000bec5 	.word	0x0000bec5
    ef44:	0000ee45 	.word	0x0000ee45
    ef48:	0000beb9 	.word	0x0000beb9
    ef4c:	00012e6c 	.word	0x00012e6c

0000ef50 <rf_get_channel>:
 * \brief      Get radio channel
 * \return     The radio channel
 */
int
rf_get_channel(void)
{
    ef50:	b508      	push	{r3, lr}
	uint8_t channel;
  channel=trx_reg_read(RF233_REG_PHY_CC_CCA) & PHY_CC_CCA_CHANNEL;
    ef52:	2008      	movs	r0, #8
    ef54:	4b02      	ldr	r3, [pc, #8]	; (ef60 <rf_get_channel+0x10>)
    ef56:	4798      	blx	r3
  //printf("rf233 channel%d\n\r",channel);
  return (int)channel;
    ef58:	231f      	movs	r3, #31
    ef5a:	4018      	ands	r0, r3
}
    ef5c:	bd08      	pop	{r3, pc}
    ef5e:	46c0      	nop			; (mov r8, r8)
    ef60:	00002bf1 	.word	0x00002bf1

0000ef64 <rf_set_channel>:
 * \retval -1  Fail: channel number out of bounds
 * \retval 0   Success
 */
int
rf_set_channel(uint8_t ch)
{
    ef64:	b510      	push	{r4, lr}
  uint8_t temp;
  PRINTF("RF233: setting channel %u\n\r", ch);
  if(ch > 26 || ch < 11) {
    ef66:	1c03      	adds	r3, r0, #0
    ef68:	3b0b      	subs	r3, #11
    ef6a:	2b0f      	cmp	r3, #15
    ef6c:	d80c      	bhi.n	ef88 <rf_set_channel+0x24>
    ef6e:	1c04      	adds	r4, r0, #0
    return -1;
  }

  /* read-modify-write to conserve other settings */
  temp = trx_reg_read(RF233_REG_PHY_CC_CCA);
    ef70:	2008      	movs	r0, #8
    ef72:	4b07      	ldr	r3, [pc, #28]	; (ef90 <rf_set_channel+0x2c>)
    ef74:	4798      	blx	r3
  temp &=~ PHY_CC_CCA_CHANNEL;
    ef76:	23e0      	movs	r3, #224	; 0xe0
    ef78:	1c01      	adds	r1, r0, #0
    ef7a:	4019      	ands	r1, r3
  temp |= ch;
  trx_reg_write(RF233_REG_PHY_CC_CCA, temp);
    ef7c:	4321      	orrs	r1, r4
    ef7e:	2008      	movs	r0, #8
    ef80:	4b04      	ldr	r3, [pc, #16]	; (ef94 <rf_set_channel+0x30>)
    ef82:	4798      	blx	r3
  return 0;
    ef84:	2000      	movs	r0, #0
    ef86:	e001      	b.n	ef8c <rf_set_channel+0x28>
rf_set_channel(uint8_t ch)
{
  uint8_t temp;
  PRINTF("RF233: setting channel %u\n\r", ch);
  if(ch > 26 || ch < 11) {
    return -1;
    ef88:	2001      	movs	r0, #1
    ef8a:	4240      	negs	r0, r0
  temp = trx_reg_read(RF233_REG_PHY_CC_CCA);
  temp &=~ PHY_CC_CCA_CHANNEL;
  temp |= ch;
  trx_reg_write(RF233_REG_PHY_CC_CCA, temp);
  return 0;
}
    ef8c:	bd10      	pop	{r4, pc}
    ef8e:	46c0      	nop			; (mov r8, r8)
    ef90:	00002bf1 	.word	0x00002bf1
    ef94:	00002ce9 	.word	0x00002ce9

0000ef98 <rf233_status>:
   */
  port_pin_set_output_level(AT86RFX_SLP_PIN, false);
}

uint8_t rf233_status()
{
    ef98:	b508      	push	{r3, lr}
	return (trx_reg_read(RF233_REG_TRX_STATUS) & TRX_STATUS);
    ef9a:	2001      	movs	r0, #1
    ef9c:	4b02      	ldr	r3, [pc, #8]	; (efa8 <rf233_status+0x10>)
    ef9e:	4798      	blx	r3
    efa0:	231f      	movs	r3, #31
    efa2:	4018      	ands	r0, r3
}
    efa4:	bd08      	pop	{r3, pc}
    efa6:	46c0      	nop			; (mov r8, r8)
    efa8:	00002bf1 	.word	0x00002bf1

0000efac <rf233_init>:
 * \return     Returns success/fail
 * \retval 0   Success
 */
int
rf233_init(void)
{
    efac:	b570      	push	{r4, r5, r6, lr}
    efae:	b082      	sub	sp, #8
  volatile uint8_t radio_state;  /* don't optimize this away, it's important */
  PRINTF("RF233: init.\n\r");

  /* init SPI and GPIOs, wake up from sleep/power up. */
  //rf233_arch_init();
  trx_spi_init();
    efb0:	4b2c      	ldr	r3, [pc, #176]	; (f064 <rf233_init+0xb8>)
    efb2:	4798      	blx	r3
	} else {
		port_base->OUTCLR.reg = pin_mask;
    efb4:	2280      	movs	r2, #128	; 0x80
    efb6:	0352      	lsls	r2, r2, #13
    efb8:	4b2b      	ldr	r3, [pc, #172]	; (f068 <rf233_init+0xbc>)
    efba:	615a      	str	r2, [r3, #20]
  port_pin_set_output_level(AT86RFX_SLP_PIN, false); /*wakeup from sleep*/

  /* before enabling interrupts, make sure we have cleared IRQ status */
  regtemp = trx_reg_read(RF233_REG_IRQ_STATUS);
    efbc:	200f      	movs	r0, #15
    efbe:	4b2b      	ldr	r3, [pc, #172]	; (f06c <rf233_init+0xc0>)
    efc0:	4798      	blx	r3
    efc2:	466b      	mov	r3, sp
    efc4:	71d8      	strb	r0, [r3, #7]
  printf("After wake from sleep\n\r");
    efc6:	482a      	ldr	r0, [pc, #168]	; (f070 <rf233_init+0xc4>)
    efc8:	4d2a      	ldr	r5, [pc, #168]	; (f074 <rf233_init+0xc8>)
    efca:	47a8      	blx	r5
  radio_state = rf233_status();
    efcc:	4b2a      	ldr	r3, [pc, #168]	; (f078 <rf233_init+0xcc>)
    efce:	4798      	blx	r3
    efd0:	466b      	mov	r3, sp
    efd2:	1d9c      	adds	r4, r3, #6
    efd4:	7198      	strb	r0, [r3, #6]
  printf("After arch read reg: state 0x%04x\n\r", radio_state);
    efd6:	7999      	ldrb	r1, [r3, #6]
    efd8:	b2c9      	uxtb	r1, r1
    efda:	4828      	ldr	r0, [pc, #160]	; (f07c <rf233_init+0xd0>)
    efdc:	47a8      	blx	r5

  if(radio_state == STATE_P_ON) {
    efde:	7823      	ldrb	r3, [r4, #0]
    efe0:	2b00      	cmp	r3, #0
    efe2:	d104      	bne.n	efee <rf233_init+0x42>
	  trx_reg_write(RF233_REG_TRX_STATE, TRXCMD_TRX_OFF);
    efe4:	2002      	movs	r0, #2
    efe6:	2108      	movs	r1, #8
    efe8:	4b25      	ldr	r3, [pc, #148]	; (f080 <rf233_init+0xd4>)
    efea:	4798      	blx	r3
    efec:	e009      	b.n	f002 <rf233_init+0x56>
    efee:	4d25      	ldr	r5, [pc, #148]	; (f084 <rf233_init+0xd8>)
    eff0:	2680      	movs	r6, #128	; 0x80
    eff2:	0236      	lsls	r6, r6, #8
    eff4:	616e      	str	r6, [r5, #20]
	  } else {
	  /* reset will put us into TRX_OFF state */
	  /* reset the radio core */
	  port_pin_set_output_level(AT86RFX_RST_PIN, false);
	  delay_cycles_ms(10);
    eff6:	200a      	movs	r0, #10
    eff8:	4c23      	ldr	r4, [pc, #140]	; (f088 <rf233_init+0xdc>)
    effa:	47a0      	blx	r4
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
    effc:	61ae      	str	r6, [r5, #24]
	  port_pin_set_output_level(AT86RFX_RST_PIN, true);
	  delay_cycles_ms(2);  /* datasheet: max 1 ms */
    effe:	2002      	movs	r0, #2
    f000:	47a0      	blx	r4
 *
 * Enables global interrupts in the device to fire any enabled interrupt handlers.
 */
static inline void system_interrupt_enable_global(void)
{
	cpu_irq_enable();
    f002:	2201      	movs	r2, #1
    f004:	4b21      	ldr	r3, [pc, #132]	; (f08c <rf233_init+0xe0>)
    f006:	701a      	strb	r2, [r3, #0]
    f008:	f3bf 8f5f 	dmb	sy
    f00c:	b662      	cpsie	i
	  /* Radio is now in state TRX_OFF */
  }
  system_interrupt_enable_global();
  printf("REB233 radio configured to use EXT%u\n\r", REB233XPRO_HEADER);
    f00e:	4820      	ldr	r0, [pc, #128]	; (f090 <rf233_init+0xe4>)
    f010:	2104      	movs	r1, #4
    f012:	4b18      	ldr	r3, [pc, #96]	; (f074 <rf233_init+0xc8>)
    f014:	4798      	blx	r3
  /* Assign regtemp to regtemp to avoid compiler warnings */
  regtemp = regtemp;
    f016:	466b      	mov	r3, sp
    f018:	1ddd      	adds	r5, r3, #7
    f01a:	79db      	ldrb	r3, [r3, #7]
    f01c:	b2db      	uxtb	r3, r3
    f01e:	702b      	strb	r3, [r5, #0]
  trx_irq_init((FUNC_PTR)rf233_interrupt_poll);
    f020:	481c      	ldr	r0, [pc, #112]	; (f094 <rf233_init+0xe8>)
    f022:	4b1d      	ldr	r3, [pc, #116]	; (f098 <rf233_init+0xec>)
    f024:	4798      	blx	r3
  /* Configure the radio using the default values except these. */
  trx_reg_write(RF233_REG_TRX_CTRL_1,      RF233_REG_TRX_CTRL_1_CONF);
    f026:	2004      	movs	r0, #4
    f028:	21a4      	movs	r1, #164	; 0xa4
    f02a:	4c15      	ldr	r4, [pc, #84]	; (f080 <rf233_init+0xd4>)
    f02c:	47a0      	blx	r4
  trx_reg_write(RF233_REG_PHY_CC_CCA,      RF233_REG_PHY_CC_CCA_CONF);
    f02e:	2008      	movs	r0, #8
    f030:	2119      	movs	r1, #25
    f032:	47a0      	blx	r4
  trx_reg_write(RF233_REG_PHY_TX_PWR, RF233_REG_PHY_TX_PWR_CONF);
    f034:	2005      	movs	r0, #5
    f036:	2107      	movs	r1, #7
    f038:	47a0      	blx	r4
  trx_reg_write(RF233_REG_TRX_CTRL_2,      RF233_REG_TRX_CTRL_2_CONF);
    f03a:	200c      	movs	r0, #12
    f03c:	2180      	movs	r1, #128	; 0x80
    f03e:	47a0      	blx	r4
  trx_reg_write(RF233_REG_IRQ_MASK,        RF233_REG_IRQ_MASK_CONF);
    f040:	200e      	movs	r0, #14
    f042:	2148      	movs	r1, #72	; 0x48
    f044:	47a0      	blx	r4
  /* 11_09_rel */
  trx_reg_write(RF233_REG_TRX_RPC,0xFF); /* Enable RPC feature by default */
    f046:	2016      	movs	r0, #22
    f048:	21ff      	movs	r1, #255	; 0xff
    f04a:	47a0      	blx	r4
  regtemp = trx_reg_read(RF233_REG_PHY_TX_PWR);
    f04c:	2005      	movs	r0, #5
    f04e:	4b07      	ldr	r3, [pc, #28]	; (f06c <rf233_init+0xc0>)
    f050:	4798      	blx	r3
    f052:	7028      	strb	r0, [r5, #0]

  /* start the radio process */
  process_start(&rf233_radio_process, NULL);
    f054:	4811      	ldr	r0, [pc, #68]	; (f09c <rf233_init+0xf0>)
    f056:	2100      	movs	r1, #0
    f058:	4b11      	ldr	r3, [pc, #68]	; (f0a0 <rf233_init+0xf4>)
    f05a:	4798      	blx	r3
  return 0;
}
    f05c:	2000      	movs	r0, #0
    f05e:	b002      	add	sp, #8
    f060:	bd70      	pop	{r4, r5, r6, pc}
    f062:	46c0      	nop			; (mov r8, r8)
    f064:	00002ae1 	.word	0x00002ae1
    f068:	41004400 	.word	0x41004400
    f06c:	00002bf1 	.word	0x00002bf1
    f070:	00012efc 	.word	0x00012efc
    f074:	00010b79 	.word	0x00010b79
    f078:	0000ef99 	.word	0x0000ef99
    f07c:	00012f14 	.word	0x00012f14
    f080:	00002ce9 	.word	0x00002ce9
    f084:	41004480 	.word	0x41004480
    f088:	00000179 	.word	0x00000179
    f08c:	20000008 	.word	0x20000008
    f090:	00012f38 	.word	0x00012f38
    f094:	0000edc5 	.word	0x0000edc5
    f098:	00002de5 	.word	0x00002de5
    f09c:	200001a4 	.word	0x200001a4
    f0a0:	0000ec79 	.word	0x0000ec79

0000f0a4 <rf233_prepare>:
 * \param payload_len     length of data to copy
 * \return     Returns success/fail, refer to radio.h for explanation
 */
int
rf233_prepare(const void *payload, unsigned short payload_len)
{
    f0a4:	b530      	push	{r4, r5, lr}
    f0a6:	b0a3      	sub	sp, #140	; 0x8c
    f0a8:	1c03      	adds	r3, r0, #0
    f0aa:	1c0d      	adds	r5, r1, #0
  uint8_t radio_status;
  uint8_t data[130];

#if USE_HW_FCS_CHECK
  /* Add length of the FCS (2 bytes) */
  templen = payload_len + 2;
    f0ac:	b2cc      	uxtb	r4, r1
    f0ae:	1ca2      	adds	r2, r4, #2
    f0b0:	b2d2      	uxtb	r2, r2
	data++;
	data =(uint8_t *)(payload + i);
	
}*/
//memcpy(data,&templen,1);
data[0] = templen;
    f0b2:	a901      	add	r1, sp, #4
    f0b4:	700a      	strb	r2, [r1, #0]
memcpy(&data[1],payload,templen);
    f0b6:	4669      	mov	r1, sp
    f0b8:	1d48      	adds	r0, r1, #5
    f0ba:	1c19      	adds	r1, r3, #0
    f0bc:	4b0a      	ldr	r3, [pc, #40]	; (f0e8 <rf233_prepare+0x44>)
    f0be:	4798      	blx	r3
#endif  /* DEBUG_PRINTDATA */
   
  PRINTF("RF233: prepare %u\n\r", payload_len);
  if(payload_len > MAX_PACKET_LEN) {
    PRINTF("RF233: error, frame too large to tx\n\r");
    return RADIO_TX_ERR;
    f0c0:	2001      	movs	r0, #1
  }
  PRINTF("\n\r");
#endif  /* DEBUG_PRINTDATA */
   
  PRINTF("RF233: prepare %u\n\r", payload_len);
  if(payload_len > MAX_PACKET_LEN) {
    f0c2:	2d7f      	cmp	r5, #127	; 0x7f
    f0c4:	d80d      	bhi.n	f0e2 <rf233_prepare+0x3e>
    PRINTF("RF233: error, frame too large to tx\n\r");
    return RADIO_TX_ERR;
  }

  /* check that the FIFO is clear to access */
  radio_status=rf233_status();
    f0c6:	4b09      	ldr	r3, [pc, #36]	; (f0ec <rf233_prepare+0x48>)
    f0c8:	4798      	blx	r3
  if(radio_status == STATE_BUSY_RX || radio_status == STATE_BUSY_TX) {
    f0ca:	3801      	subs	r0, #1
    f0cc:	b2c0      	uxtb	r0, r0
    f0ce:	2801      	cmp	r0, #1
    f0d0:	d906      	bls.n	f0e0 <rf233_prepare+0x3c>
    return RADIO_TX_ERR;
  }

  /* Write packet to TX FIFO. */
  PRINTF("RF233 len = %u\n\r", payload_len);
  trx_frame_write((uint8_t *)data, templen+1);
    f0d2:	3403      	adds	r4, #3
    f0d4:	b2e1      	uxtb	r1, r4
    f0d6:	a801      	add	r0, sp, #4
    f0d8:	4b05      	ldr	r3, [pc, #20]	; (f0f0 <rf233_prepare+0x4c>)
    f0da:	4798      	blx	r3
  return RADIO_TX_OK;
    f0dc:	2000      	movs	r0, #0
    f0de:	e000      	b.n	f0e2 <rf233_prepare+0x3e>

  /* check that the FIFO is clear to access */
  radio_status=rf233_status();
  if(radio_status == STATE_BUSY_RX || radio_status == STATE_BUSY_TX) {
    PRINTF("RF233: TRX buffer unavailable: prep when %s\n\r", radio_status == STATE_BUSY_RX ? "rx" : "tx");
    return RADIO_TX_ERR;
    f0e0:	2001      	movs	r0, #1

  /* Write packet to TX FIFO. */
  PRINTF("RF233 len = %u\n\r", payload_len);
  trx_frame_write((uint8_t *)data, templen+1);
  return RADIO_TX_OK;
}
    f0e2:	b023      	add	sp, #140	; 0x8c
    f0e4:	bd30      	pop	{r4, r5, pc}
    f0e6:	46c0      	nop			; (mov r8, r8)
    f0e8:	00010b2f 	.word	0x00010b2f
    f0ec:	0000ef99 	.word	0x0000ef99
    f0f0:	00002f45 	.word	0x00002f45

0000f0f4 <rf233_transmit>:
 * \param payload_len    Length of the frame to send
 * \return     Returns success/fail, refer to radio.h for explanation
 */
int
rf233_transmit(unsigned short payload_len)
{
    f0f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  static uint8_t status_now;
  PRINTF("RF233: tx %u\n\r", payload_len);

  /* prepare for TX */
  
  status_now = rf233_status();
    f0f6:	4b43      	ldr	r3, [pc, #268]	; (f204 <rf233_transmit+0x110>)
    f0f8:	4798      	blx	r3
    f0fa:	1c02      	adds	r2, r0, #0
    f0fc:	4b42      	ldr	r3, [pc, #264]	; (f208 <rf233_transmit+0x114>)
    f0fe:	7018      	strb	r0, [r3, #0]
   //status_now = trx_reg_read(RF233_REG_TRX_RPC);
  if(status_now == STATE_BUSY_RX || status_now == STATE_BUSY_TX) {
    f100:	3801      	subs	r0, #1
    f102:	b2c0      	uxtb	r0, r0
    f104:	2801      	cmp	r0, #1
    f106:	d97b      	bls.n	f200 <rf233_transmit+0x10c>
    PRINTF("RF233: collision, was receiving 0x%02X\n\r",status_now);
    /* NOTE: to avoid loops */
    return RADIO_TX_ERR;;
    // return RADIO_TX_COLLISION;
  }
  if(status_now != STATE_PLL_ON) {
    f108:	2a09      	cmp	r2, #9
    f10a:	d00c      	beq.n	f126 <rf233_transmit+0x32>
    /* prepare for going to state TX, should take max 80 us */
    //RF233_COMMAND(TRXCMD_PLL_ON);
	trx_reg_write(RF233_REG_TRX_STATE,0x09);
    f10c:	2002      	movs	r0, #2
    f10e:	2109      	movs	r1, #9
    f110:	4b3e      	ldr	r3, [pc, #248]	; (f20c <rf233_transmit+0x118>)
    f112:	4798      	blx	r3
   // BUSYWAIT_UNTIL(trx_reg_read(RF233_REG_TRX_STATUS) == STATE_PLL_ON, 1 * RTIMER_SECOND/1000);
   //delay_ms(10);
   //status_now = trx_reg_read(RF233_REG_TRX_STATE);
   do 
   {
	   status_now = trx_bit_read(0x01, 0x1F, 0);
    f114:	4d3e      	ldr	r5, [pc, #248]	; (f210 <rf233_transmit+0x11c>)
    f116:	4c3c      	ldr	r4, [pc, #240]	; (f208 <rf233_transmit+0x114>)
    f118:	2001      	movs	r0, #1
    f11a:	211f      	movs	r1, #31
    f11c:	2200      	movs	r2, #0
    f11e:	47a8      	blx	r5
    f120:	7020      	strb	r0, [r4, #0]
   } while (status_now == 0x1f);
    f122:	281f      	cmp	r0, #31
    f124:	d0f8      	beq.n	f118 <rf233_transmit+0x24>
  }

  if(rf233_status() != STATE_PLL_ON) {
    f126:	4b37      	ldr	r3, [pc, #220]	; (f204 <rf233_transmit+0x110>)
    f128:	4798      	blx	r3
    f12a:	2809      	cmp	r0, #9
    f12c:	d00b      	beq.n	f146 <rf233_transmit+0x52>
    /* failed moving into PLL_ON state, gracefully try to recover */
    PRINTF("RF233: failed going to PLLON\n\r");
    RF233_COMMAND(TRXCMD_PLL_ON);   /* try again */
    f12e:	2002      	movs	r0, #2
    f130:	2109      	movs	r1, #9
    f132:	4b36      	ldr	r3, [pc, #216]	; (f20c <rf233_transmit+0x118>)
    f134:	4798      	blx	r3
	static uint8_t state;
	state = rf233_status();
    f136:	4b33      	ldr	r3, [pc, #204]	; (f204 <rf233_transmit+0x110>)
    f138:	4798      	blx	r3
    f13a:	1c03      	adds	r3, r0, #0
    f13c:	4a35      	ldr	r2, [pc, #212]	; (f214 <rf233_transmit+0x120>)
    f13e:	7010      	strb	r0, [r2, #0]
    if(state != STATE_PLL_ON) {
      /* give up and signal big fail (should perhaps reset radio core instead?) */
      PRINTF("RF233: graceful recovery (in tx) failed, giving up. State: 0x%02X\n\r", rf233_status());
      return RADIO_TX_ERR;
    f140:	2001      	movs	r0, #1
    /* failed moving into PLL_ON state, gracefully try to recover */
    PRINTF("RF233: failed going to PLLON\n\r");
    RF233_COMMAND(TRXCMD_PLL_ON);   /* try again */
	static uint8_t state;
	state = rf233_status();
    if(state != STATE_PLL_ON) {
    f142:	2b09      	cmp	r3, #9
    f144:	d15d      	bne.n	f202 <rf233_transmit+0x10e>
      return RADIO_TX_ERR;
    }
  }

  /* perform transmission */
  ENERGEST_OFF(ENERGEST_TYPE_LISTEN);
    f146:	4b34      	ldr	r3, [pc, #208]	; (f218 <rf233_transmit+0x124>)
    f148:	79db      	ldrb	r3, [r3, #7]
    f14a:	2b00      	cmp	r3, #0
    f14c:	d00b      	beq.n	f166 <rf233_transmit+0x72>
    f14e:	4b33      	ldr	r3, [pc, #204]	; (f21c <rf233_transmit+0x128>)
    f150:	4798      	blx	r3
    f152:	4a33      	ldr	r2, [pc, #204]	; (f220 <rf233_transmit+0x12c>)
    f154:	4b33      	ldr	r3, [pc, #204]	; (f224 <rf233_transmit+0x130>)
    f156:	69db      	ldr	r3, [r3, #28]
    f158:	69d1      	ldr	r1, [r2, #28]
    f15a:	1acb      	subs	r3, r1, r3
    f15c:	1818      	adds	r0, r3, r0
    f15e:	61d0      	str	r0, [r2, #28]
    f160:	2200      	movs	r2, #0
    f162:	4b2d      	ldr	r3, [pc, #180]	; (f218 <rf233_transmit+0x124>)
    f164:	71da      	strb	r2, [r3, #7]
  ENERGEST_ON(ENERGEST_TYPE_TRANSMIT);
    f166:	4c2d      	ldr	r4, [pc, #180]	; (f21c <rf233_transmit+0x128>)
    f168:	47a0      	blx	r4
    f16a:	4b2e      	ldr	r3, [pc, #184]	; (f224 <rf233_transmit+0x130>)
    f16c:	6198      	str	r0, [r3, #24]
    f16e:	2501      	movs	r5, #1
    f170:	4b29      	ldr	r3, [pc, #164]	; (f218 <rf233_transmit+0x124>)
    f172:	719d      	strb	r5, [r3, #6]
  RF233_COMMAND(TRXCMD_TX_START);
    f174:	2002      	movs	r0, #2
    f176:	2102      	movs	r1, #2
    f178:	4b24      	ldr	r3, [pc, #144]	; (f20c <rf233_transmit+0x118>)
    f17a:	4798      	blx	r3
   flag_transmit=1;
    f17c:	4b2a      	ldr	r3, [pc, #168]	; (f228 <rf233_transmit+0x134>)
    f17e:	701d      	strb	r5, [r3, #0]
   //delay_ms(5);
  //printf("RTIMER value %d",RTIMER_NOW());
  BUSYWAIT_UNTIL(rf233_status() == STATE_BUSY_TX, RTIMER_SECOND/2000);
    f180:	47a0      	blx	r4
    f182:	1c07      	adds	r7, r0, #0
    f184:	4c1f      	ldr	r4, [pc, #124]	; (f204 <rf233_transmit+0x110>)
    f186:	4e25      	ldr	r6, [pc, #148]	; (f21c <rf233_transmit+0x128>)
    f188:	3d10      	subs	r5, #16
    f18a:	47a0      	blx	r4
    f18c:	2802      	cmp	r0, #2
    f18e:	d004      	beq.n	f19a <rf233_transmit+0xa6>
    f190:	47b0      	blx	r6
    f192:	1beb      	subs	r3, r5, r7
    f194:	1818      	adds	r0, r3, r0
    f196:	0403      	lsls	r3, r0, #16
    f198:	d4f7      	bmi.n	f18a <rf233_transmit+0x96>
  //printf("RTIMER value1 %d",RTIMER_NOW());
  //printf("\r\nSTATE_BUSY_TX");
  BUSYWAIT_UNTIL(rf233_status() != STATE_BUSY_TX, 10 * RTIMER_SECOND/1000);
    f19a:	4b20      	ldr	r3, [pc, #128]	; (f21c <rf233_transmit+0x128>)
    f19c:	4798      	blx	r3
    f19e:	1c07      	adds	r7, r0, #0
    f1a0:	4c18      	ldr	r4, [pc, #96]	; (f204 <rf233_transmit+0x110>)
    f1a2:	4e1e      	ldr	r6, [pc, #120]	; (f21c <rf233_transmit+0x128>)
    f1a4:	4d21      	ldr	r5, [pc, #132]	; (f22c <rf233_transmit+0x138>)
    f1a6:	47a0      	blx	r4
    f1a8:	2802      	cmp	r0, #2
    f1aa:	d104      	bne.n	f1b6 <rf233_transmit+0xc2>
    f1ac:	47b0      	blx	r6
    f1ae:	1beb      	subs	r3, r5, r7
    f1b0:	1818      	adds	r0, r3, r0
    f1b2:	0403      	lsls	r3, r0, #16
    f1b4:	d4f7      	bmi.n	f1a6 <rf233_transmit+0xb2>
  //printf("RTIMER value2 %d",RTIMER_NOW());
  ENERGEST_OFF(ENERGEST_TYPE_TRANSMIT);
    f1b6:	4b18      	ldr	r3, [pc, #96]	; (f218 <rf233_transmit+0x124>)
    f1b8:	799b      	ldrb	r3, [r3, #6]
    f1ba:	2b00      	cmp	r3, #0
    f1bc:	d00b      	beq.n	f1d6 <rf233_transmit+0xe2>
    f1be:	4b17      	ldr	r3, [pc, #92]	; (f21c <rf233_transmit+0x128>)
    f1c0:	4798      	blx	r3
    f1c2:	4a17      	ldr	r2, [pc, #92]	; (f220 <rf233_transmit+0x12c>)
    f1c4:	4b17      	ldr	r3, [pc, #92]	; (f224 <rf233_transmit+0x130>)
    f1c6:	699b      	ldr	r3, [r3, #24]
    f1c8:	6991      	ldr	r1, [r2, #24]
    f1ca:	1acb      	subs	r3, r1, r3
    f1cc:	1818      	adds	r0, r3, r0
    f1ce:	6190      	str	r0, [r2, #24]
    f1d0:	2200      	movs	r2, #0
    f1d2:	4b11      	ldr	r3, [pc, #68]	; (f218 <rf233_transmit+0x124>)
    f1d4:	719a      	strb	r2, [r3, #6]
  ENERGEST_ON(ENERGEST_TYPE_LISTEN);
    f1d6:	4b11      	ldr	r3, [pc, #68]	; (f21c <rf233_transmit+0x128>)
    f1d8:	4798      	blx	r3
    f1da:	4b12      	ldr	r3, [pc, #72]	; (f224 <rf233_transmit+0x130>)
    f1dc:	61d8      	str	r0, [r3, #28]
    f1de:	2201      	movs	r2, #1
    f1e0:	4b0d      	ldr	r3, [pc, #52]	; (f218 <rf233_transmit+0x124>)
    f1e2:	71da      	strb	r2, [r3, #7]
   if(rf233_status() != STATE_PLL_ON) {
    f1e4:	4b07      	ldr	r3, [pc, #28]	; (f204 <rf233_transmit+0x110>)
    f1e6:	4798      	blx	r3
    f1e8:	2809      	cmp	r0, #9
    f1ea:	d003      	beq.n	f1f4 <rf233_transmit+0x100>
 * Does a full reset and re-init.
 */
static void
radiocore_hard_recovery(void)
{
  rf233_init();
    f1ec:	4b10      	ldr	r3, [pc, #64]	; (f230 <rf233_transmit+0x13c>)
    f1ee:	4798      	blx	r3
  ENERGEST_ON(ENERGEST_TYPE_LISTEN);
   if(rf233_status() != STATE_PLL_ON) {
    /* something has failed */
    PRINTF("RF233: radio fatal err after tx\n\r");
    radiocore_hard_recovery();
    return RADIO_TX_ERR;
    f1f0:	2001      	movs	r0, #1
    f1f2:	e006      	b.n	f202 <rf233_transmit+0x10e>
  }

  PRINTF("RF233: tx ok\n\r");
  RF233_COMMAND(TRXCMD_RX_ON);
    f1f4:	2002      	movs	r0, #2
    f1f6:	2106      	movs	r1, #6
    f1f8:	4b04      	ldr	r3, [pc, #16]	; (f20c <rf233_transmit+0x118>)
    f1fa:	4798      	blx	r3
  return RADIO_TX_OK;
    f1fc:	2000      	movs	r0, #0
    f1fe:	e000      	b.n	f202 <rf233_transmit+0x10e>
  status_now = rf233_status();
   //status_now = trx_reg_read(RF233_REG_TRX_RPC);
  if(status_now == STATE_BUSY_RX || status_now == STATE_BUSY_TX) {
    PRINTF("RF233: collision, was receiving 0x%02X\n\r",status_now);
    /* NOTE: to avoid loops */
    return RADIO_TX_ERR;;
    f200:	2001      	movs	r0, #1
  }

  PRINTF("RF233: tx ok\n\r");
  RF233_COMMAND(TRXCMD_RX_ON);
  return RADIO_TX_OK;
}
    f202:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    f204:	0000ef99 	.word	0x0000ef99
    f208:	20001ec8 	.word	0x20001ec8
    f20c:	00002ce9 	.word	0x00002ce9
    f210:	00002df1 	.word	0x00002df1
    f214:	20001edc 	.word	0x20001edc
    f218:	200033c0 	.word	0x200033c0
    f21c:	0000fa29 	.word	0x0000fa29
    f220:	2000338c 	.word	0x2000338c
    f224:	200033cc 	.word	0x200033cc
    f228:	20001edd 	.word	0x20001edd
    f22c:	fffffec8 	.word	0xfffffec8
    f230:	0000efad 	.word	0x0000efad

0000f234 <rf233_send>:
 * \param payload_len     length of data to copy
 * \return     Returns success/fail, refer to radio.h for explanation
 */
int
rf233_send(const void *payload, unsigned short payload_len)
{
    f234:	b510      	push	{r4, lr}
    f236:	1c0c      	adds	r4, r1, #0
  PRINTF("RF233: send %u\n\r", payload_len);
  if(rf233_prepare(payload, payload_len) == RADIO_TX_ERR) {
    f238:	4b03      	ldr	r3, [pc, #12]	; (f248 <rf233_send+0x14>)
    f23a:	4798      	blx	r3
    f23c:	2801      	cmp	r0, #1
    f23e:	d002      	beq.n	f246 <rf233_send+0x12>
  return RADIO_TX_ERR;
  } 
  return rf233_transmit(payload_len);
    f240:	1c20      	adds	r0, r4, #0
    f242:	4b02      	ldr	r3, [pc, #8]	; (f24c <rf233_send+0x18>)
    f244:	4798      	blx	r3
}
    f246:	bd10      	pop	{r4, pc}
    f248:	0000f0a5 	.word	0x0000f0a5
    f24c:	0000f0f5 	.word	0x0000f0f5

0000f250 <rf233_channel_clear>:
 * \retval >0  Channel is clear
 * \retval 0   Channel is not clear
 */
int
rf233_channel_clear(void)
{
    f250:	b5f0      	push	{r4, r5, r6, r7, lr}
    f252:	4647      	mov	r7, r8
    f254:	b480      	push	{r7}
  uint8_t regsave;
  int was_off = 0;
  
  if(rf233_status() != STATE_RX_ON) {
    f256:	4b1e      	ldr	r3, [pc, #120]	; (f2d0 <rf233_channel_clear+0x80>)
    f258:	4798      	blx	r3
 */
int
rf233_channel_clear(void)
{
  uint8_t regsave;
  int was_off = 0;
    f25a:	2300      	movs	r3, #0
    f25c:	4698      	mov	r8, r3
  
  if(rf233_status() != STATE_RX_ON) {
    f25e:	2806      	cmp	r0, #6
    f260:	d005      	beq.n	f26e <rf233_channel_clear+0x1e>
    /* CCA can only be performed in RX state */
    was_off = 1;
    RF233_COMMAND(TRXCMD_RX_ON);
    f262:	2002      	movs	r0, #2
    f264:	2106      	movs	r1, #6
    f266:	4b1b      	ldr	r3, [pc, #108]	; (f2d4 <rf233_channel_clear+0x84>)
    f268:	4798      	blx	r3
  uint8_t regsave;
  int was_off = 0;
  
  if(rf233_status() != STATE_RX_ON) {
    /* CCA can only be performed in RX state */
    was_off = 1;
    f26a:	2301      	movs	r3, #1
    f26c:	4698      	mov	r8, r3
    RF233_COMMAND(TRXCMD_RX_ON);
  }
   delay_us(200);
    f26e:	20c8      	movs	r0, #200	; 0xc8
    f270:	4b19      	ldr	r3, [pc, #100]	; (f2d8 <rf233_channel_clear+0x88>)
    f272:	4798      	blx	r3
  /* request a CCA, storing the channel number (set with the same reg) */
  regsave = trx_reg_read(RF233_REG_PHY_CC_CCA);
    f274:	2008      	movs	r0, #8
    f276:	4b19      	ldr	r3, [pc, #100]	; (f2dc <rf233_channel_clear+0x8c>)
    f278:	4798      	blx	r3
  regsave |= PHY_CC_CCA_DO_CCA | PHY_CC_CCA_MODE_CS_OR_ED;
    f27a:	2180      	movs	r1, #128	; 0x80
    f27c:	4249      	negs	r1, r1
    f27e:	4308      	orrs	r0, r1
  trx_reg_write(RF233_REG_PHY_CC_CCA, regsave);
    f280:	b2c1      	uxtb	r1, r0
    f282:	2008      	movs	r0, #8
    f284:	4b13      	ldr	r3, [pc, #76]	; (f2d4 <rf233_channel_clear+0x84>)
    f286:	4798      	blx	r3
  
  BUSYWAIT_UNTIL(trx_reg_read(RF233_REG_TRX_STATUS) & TRX_CCA_DONE,
    f288:	4b15      	ldr	r3, [pc, #84]	; (f2e0 <rf233_channel_clear+0x90>)
    f28a:	4798      	blx	r3
    f28c:	1c07      	adds	r7, r0, #0
    f28e:	4c13      	ldr	r4, [pc, #76]	; (f2dc <rf233_channel_clear+0x8c>)
    f290:	4e13      	ldr	r6, [pc, #76]	; (f2e0 <rf233_channel_clear+0x90>)
    f292:	251f      	movs	r5, #31
    f294:	426d      	negs	r5, r5
    f296:	2001      	movs	r0, #1
    f298:	47a0      	blx	r4
    f29a:	0603      	lsls	r3, r0, #24
    f29c:	d404      	bmi.n	f2a8 <rf233_channel_clear+0x58>
    f29e:	47b0      	blx	r6
    f2a0:	1beb      	subs	r3, r5, r7
    f2a2:	1818      	adds	r0, r3, r0
    f2a4:	0403      	lsls	r3, r0, #16
    f2a6:	d4f6      	bmi.n	f296 <rf233_channel_clear+0x46>
      RTIMER_SECOND / 1000);
  //regsave = rf233_status();
  regsave = trx_reg_read(RF233_REG_TRX_STATUS);
    f2a8:	2001      	movs	r0, #1
    f2aa:	4b0c      	ldr	r3, [pc, #48]	; (f2dc <rf233_channel_clear+0x8c>)
    f2ac:	4798      	blx	r3
    f2ae:	1c04      	adds	r4, r0, #0
  /* return to previous state */
  if(was_off) {
    f2b0:	4643      	mov	r3, r8
    f2b2:	2b00      	cmp	r3, #0
    f2b4:	d003      	beq.n	f2be <rf233_channel_clear+0x6e>
    RF233_COMMAND(TRXCMD_TRX_OFF);
    f2b6:	2002      	movs	r0, #2
    f2b8:	2108      	movs	r1, #8
    f2ba:	4b06      	ldr	r3, [pc, #24]	; (f2d4 <rf233_channel_clear+0x84>)
    f2bc:	4798      	blx	r3
  if((regsave & TRX_CCA_DONE) && (regsave & TRX_CCA_STATUS)) {
    PRINTF("RF233: CCA 1\n\r");
    return 1;
  }
  PRINTF("RF233: CCA 0\n\r");
  return 0;
    f2be:	2000      	movs	r0, #0
  if(was_off) {
    RF233_COMMAND(TRXCMD_TRX_OFF);
  }

  /* check CCA */
  if((regsave & TRX_CCA_DONE) && (regsave & TRX_CCA_STATUS)) {
    f2c0:	0623      	lsls	r3, r4, #24
    f2c2:	d501      	bpl.n	f2c8 <rf233_channel_clear+0x78>
    f2c4:	0664      	lsls	r4, r4, #25
    f2c6:	0fe0      	lsrs	r0, r4, #31
    PRINTF("RF233: CCA 1\n\r");
    return 1;
  }
  PRINTF("RF233: CCA 0\n\r");
  return 0;
}
    f2c8:	bc04      	pop	{r2}
    f2ca:	4690      	mov	r8, r2
    f2cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    f2ce:	46c0      	nop			; (mov r8, r8)
    f2d0:	0000ef99 	.word	0x0000ef99
    f2d4:	00002ce9 	.word	0x00002ce9
    f2d8:	0000014d 	.word	0x0000014d
    f2dc:	00002bf1 	.word	0x00002bf1
    f2e0:	0000fa29 	.word	0x0000fa29

0000f2e4 <rf233_receiving_packet>:
 * \retval >0  we are currently receiving a frame 
 * \retval 0   we are not currently receiving a frame 
 */
int
rf233_receiving_packet(void)
{ 
    f2e4:	b508      	push	{r3, lr}
  uint8_t trx_state;
  trx_state=rf233_status();
    f2e6:	4b03      	ldr	r3, [pc, #12]	; (f2f4 <rf233_receiving_packet+0x10>)
    f2e8:	4798      	blx	r3
  if(trx_state == STATE_BUSY_RX) {
    f2ea:	3801      	subs	r0, #1
    f2ec:	4243      	negs	r3, r0
    f2ee:	4158      	adcs	r0, r3
    PRINTF("RF233: Receiving frame\n\r");
    return 1;
  }
  PRINTF("RF233: not Receiving frame\n\r");
  return 0;
}
    f2f0:	bd08      	pop	{r3, pc}
    f2f2:	46c0      	nop			; (mov r8, r8)
    f2f4:	0000ef99 	.word	0x0000ef99

0000f2f8 <rf233_on>:
 * \brief      switch the radio on to listen (rx) mode 
 * \retval 0   Success
 */
int
rf233_on(void)
{
    f2f8:	b510      	push	{r4, lr}
/* switch the radio on */
int
on(void)
{
  /* Check whether radio is in sleep */
  if(sleep_on)
    f2fa:	4b11      	ldr	r3, [pc, #68]	; (f340 <rf233_on+0x48>)
    f2fc:	681b      	ldr	r3, [r3, #0]
    f2fe:	2b00      	cmp	r3, #0
    f300:	d009      	beq.n	f316 <rf233_on+0x1e>
	} else {
		port_base->OUTCLR.reg = pin_mask;
    f302:	2280      	movs	r2, #128	; 0x80
    f304:	0352      	lsls	r2, r2, #13
    f306:	4b0f      	ldr	r3, [pc, #60]	; (f344 <rf233_on+0x4c>)
    f308:	615a      	str	r2, [r3, #20]
  {
     /* Wake the radio. It'll move to TRX_OFF state */
	
  	 wake_from_sleep();
	 delay_ms(1);
    f30a:	2001      	movs	r0, #1
    f30c:	4b0e      	ldr	r3, [pc, #56]	; (f348 <rf233_on+0x50>)
    f30e:	4798      	blx	r3
	 //printf("\r\nWake from sleep %d",rf233_get_channel());
	 sleep_on = 0;
    f310:	2200      	movs	r2, #0
    f312:	4b0b      	ldr	r3, [pc, #44]	; (f340 <rf233_on+0x48>)
    f314:	601a      	str	r2, [r3, #0]
  }
  uint8_t state_now = rf233_status();
    f316:	4b0d      	ldr	r3, [pc, #52]	; (f34c <rf233_on+0x54>)
    f318:	4798      	blx	r3
  if(state_now != STATE_PLL_ON && state_now != STATE_TRX_OFF) {
    f31a:	3808      	subs	r0, #8
    f31c:	b2c0      	uxtb	r0, r0
    f31e:	2801      	cmp	r0, #1
    f320:	d80c      	bhi.n	f33c <rf233_on+0x44>
    /* fail, we need the radio transceiver to be in either of those states */
    return -1;
  }

  /* go to RX_ON state */
  ENERGEST_ON(ENERGEST_TYPE_LISTEN);
    f322:	4b0b      	ldr	r3, [pc, #44]	; (f350 <rf233_on+0x58>)
    f324:	4798      	blx	r3
    f326:	4b0b      	ldr	r3, [pc, #44]	; (f354 <rf233_on+0x5c>)
    f328:	61d8      	str	r0, [r3, #28]
    f32a:	2401      	movs	r4, #1
    f32c:	4b0a      	ldr	r3, [pc, #40]	; (f358 <rf233_on+0x60>)
    f32e:	71dc      	strb	r4, [r3, #7]
  RF233_COMMAND(TRXCMD_RX_ON);
    f330:	2002      	movs	r0, #2
    f332:	2106      	movs	r1, #6
    f334:	4b09      	ldr	r3, [pc, #36]	; (f35c <rf233_on+0x64>)
    f336:	4798      	blx	r3
  radio_is_on = 1;
    f338:	4b09      	ldr	r3, [pc, #36]	; (f360 <rf233_on+0x68>)
    f33a:	601c      	str	r4, [r3, #0]
rf233_on(void)
{
  PRINTF("RF233: on\n\r");
  on();
  return 0;
}
    f33c:	2000      	movs	r0, #0
    f33e:	bd10      	pop	{r4, pc}
    f340:	20001ec4 	.word	0x20001ec4
    f344:	41004400 	.word	0x41004400
    f348:	00000179 	.word	0x00000179
    f34c:	0000ef99 	.word	0x0000ef99
    f350:	0000fa29 	.word	0x0000fa29
    f354:	200033cc 	.word	0x200033cc
    f358:	200033c0 	.word	0x200033c0
    f35c:	00002ce9 	.word	0x00002ce9
    f360:	20001ecc 	.word	0x20001ecc

0000f364 <rf233_off>:
 * \brief      switch the radio off 
 * \retval 0   Success
 */
int
rf233_off(void)
{
    f364:	b508      	push	{r3, lr}
/*---------------------------------------------------------------------------*/
/* switch the radio off */
int
off(void)
{
  if(rf233_status() != STATE_RX_ON) {
    f366:	4b0e      	ldr	r3, [pc, #56]	; (f3a0 <rf233_off+0x3c>)
    f368:	4798      	blx	r3
    f36a:	2806      	cmp	r0, #6
    f36c:	d116      	bne.n	f39c <rf233_off+0x38>
    /* fail, we need the radio transceiver to be in this state */
    return -1;
  }

  /* turn off the radio transceiver */
  ENERGEST_OFF(ENERGEST_TYPE_LISTEN);
    f36e:	4b0d      	ldr	r3, [pc, #52]	; (f3a4 <rf233_off+0x40>)
    f370:	79db      	ldrb	r3, [r3, #7]
    f372:	2b00      	cmp	r3, #0
    f374:	d00b      	beq.n	f38e <rf233_off+0x2a>
    f376:	4b0c      	ldr	r3, [pc, #48]	; (f3a8 <rf233_off+0x44>)
    f378:	4798      	blx	r3
    f37a:	4a0c      	ldr	r2, [pc, #48]	; (f3ac <rf233_off+0x48>)
    f37c:	4b0c      	ldr	r3, [pc, #48]	; (f3b0 <rf233_off+0x4c>)
    f37e:	69db      	ldr	r3, [r3, #28]
    f380:	69d1      	ldr	r1, [r2, #28]
    f382:	1acb      	subs	r3, r1, r3
    f384:	1818      	adds	r0, r3, r0
    f386:	61d0      	str	r0, [r2, #28]
    f388:	2200      	movs	r2, #0
    f38a:	4b06      	ldr	r3, [pc, #24]	; (f3a4 <rf233_off+0x40>)
    f38c:	71da      	strb	r2, [r3, #7]
  RF233_COMMAND(TRXCMD_TRX_OFF);
    f38e:	2002      	movs	r0, #2
    f390:	2108      	movs	r1, #8
    f392:	4b08      	ldr	r3, [pc, #32]	; (f3b4 <rf233_off+0x50>)
    f394:	4798      	blx	r3
  radio_is_on = 0;
    f396:	2200      	movs	r2, #0
    f398:	4b07      	ldr	r3, [pc, #28]	; (f3b8 <rf233_off+0x54>)
    f39a:	601a      	str	r2, [r3, #0]
rf233_off(void)
{
  PRINTF("RF233: off\n\r");
  off();
  return 0;
}
    f39c:	2000      	movs	r0, #0
    f39e:	bd08      	pop	{r3, pc}
    f3a0:	0000ef99 	.word	0x0000ef99
    f3a4:	200033c0 	.word	0x200033c0
    f3a8:	0000fa29 	.word	0x0000fa29
    f3ac:	2000338c 	.word	0x2000338c
    f3b0:	200033cc 	.word	0x200033cc
    f3b4:	00002ce9 	.word	0x00002ce9
    f3b8:	20001ecc 	.word	0x20001ecc

0000f3bc <rf233_sleep>:
/*---------------------------------------------------------------------------*/
/* Put the Radio in sleep mode */

int 
rf233_sleep(void)
{
    f3bc:	b508      	push	{r3, lr}
	int status;
	/* Check whether we're already sleeping */
	if (!sleep_on) {
    f3be:	4b08      	ldr	r3, [pc, #32]	; (f3e0 <rf233_sleep+0x24>)
    f3c0:	681b      	ldr	r3, [r3, #0]
    f3c2:	2b00      	cmp	r3, #0
    f3c4:	d10a      	bne.n	f3dc <rf233_sleep+0x20>
	//printf("\r\n goto sleep %d",rf233_get_channel());
	//delay_ms(1);
	sleep_on = 1;
    f3c6:	2201      	movs	r2, #1
    f3c8:	4b05      	ldr	r3, [pc, #20]	; (f3e0 <rf233_sleep+0x24>)
    f3ca:	601a      	str	r2, [r3, #0]
	/* Turn off the Radio */
	status = rf233_off();
    f3cc:	4b05      	ldr	r3, [pc, #20]	; (f3e4 <rf233_sleep+0x28>)
    f3ce:	4798      	blx	r3
	/* Set the SLP_PIN to high */
	  if(status == 0) {
    f3d0:	2800      	cmp	r0, #0
    f3d2:	d103      	bne.n	f3dc <rf233_sleep+0x20>
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
    f3d4:	2280      	movs	r2, #128	; 0x80
    f3d6:	0352      	lsls	r2, r2, #13
    f3d8:	4b03      	ldr	r3, [pc, #12]	; (f3e8 <rf233_sleep+0x2c>)
    f3da:	619a      	str	r2, [r3, #24]
	  }
	}
	
	return 0;
	
}
    f3dc:	2000      	movs	r0, #0
    f3de:	bd08      	pop	{r3, pc}
    f3e0:	20001ec4 	.word	0x20001ec4
    f3e4:	0000f365 	.word	0x0000f365
    f3e8:	41004400 	.word	0x41004400

0000f3ec <init_i2c_light>:
	i2c_master_enable(&i2c_master_instance);
	
	return init_i2c_light();
}

int init_i2c_light (void){
    f3ec:	b5f0      	push	{r4, r5, r6, r7, lr}
    f3ee:	b083      	sub	sp, #12
	
	int timeout=0;
	uint8_t testes[2];
	master_packet.address         = DIMMER_LIGHT_I2C_ADDR;
    f3f0:	4b0e      	ldr	r3, [pc, #56]	; (f42c <init_i2c_light+0x40>)
    f3f2:	221e      	movs	r2, #30
    f3f4:	801a      	strh	r2, [r3, #0]
	master_packet.data_length     = 0x02;
    f3f6:	3a1c      	subs	r2, #28
    f3f8:	805a      	strh	r2, [r3, #2]
	master_packet.data            = testes;
    f3fa:	aa01      	add	r2, sp, #4
    f3fc:	605a      	str	r2, [r3, #4]
	master_packet.ten_bit_address = false;
    f3fe:	2200      	movs	r2, #0
    f400:	721a      	strb	r2, [r3, #8]
	master_packet.high_speed      = false;
    f402:	725a      	strb	r2, [r3, #9]
	master_packet.hs_master_code  = 0x0;
    f404:	729a      	strb	r2, [r3, #10]
	
	/* Write buffer to slave until success. */
	while (i2c_master_write_packet_wait(&i2c_master_instance, &master_packet) !=
    f406:	4c0a      	ldr	r4, [pc, #40]	; (f430 <init_i2c_light+0x44>)
    f408:	4e0a      	ldr	r6, [pc, #40]	; (f434 <init_i2c_light+0x48>)
    f40a:	1c1d      	adds	r5, r3, #0
    f40c:	4f0a      	ldr	r7, [pc, #40]	; (f438 <init_i2c_light+0x4c>)
    f40e:	e002      	b.n	f416 <init_i2c_light+0x2a>
    f410:	3c01      	subs	r4, #1
	STATUS_OK) {
		/* Increment timeout counter and check if timed out. */
		if (timeout++ == TIMEOUT) {
    f412:	2c00      	cmp	r4, #0
    f414:	d005      	beq.n	f422 <init_i2c_light+0x36>
	master_packet.ten_bit_address = false;
	master_packet.high_speed      = false;
	master_packet.hs_master_code  = 0x0;
	
	/* Write buffer to slave until success. */
	while (i2c_master_write_packet_wait(&i2c_master_instance, &master_packet) !=
    f416:	1c30      	adds	r0, r6, #0
    f418:	1c29      	adds	r1, r5, #0
    f41a:	47b8      	blx	r7
    f41c:	2800      	cmp	r0, #0
    f41e:	d1f7      	bne.n	f410 <init_i2c_light+0x24>
    f420:	e001      	b.n	f426 <init_i2c_light+0x3a>
	STATUS_OK) {
		/* Increment timeout counter and check if timed out. */
		if (timeout++ == TIMEOUT) {
			return NOK;
    f422:	2001      	movs	r0, #1
    f424:	4240      	negs	r0, r0
		}
	}
	return OK;
}
    f426:	b003      	add	sp, #12
    f428:	bdf0      	pop	{r4, r5, r6, r7, pc}
    f42a:	46c0      	nop			; (mov r8, r8)
    f42c:	20003400 	.word	0x20003400
    f430:	000003e9 	.word	0x000003e9
    f434:	2000340c 	.word	0x2000340c
    f438:	00000c39 	.word	0x00000c39

0000f43c <configure_i2c_light>:


#include "LightDNA.h"

int configure_i2c_light(void)
{
    f43c:	b510      	push	{r4, lr}
    f43e:	b08c      	sub	sp, #48	; 0x30
static inline void i2c_master_get_config_defaults(
		struct i2c_master_config *const config)
{
	/*Sanity check argument. */
	Assert(config);
	config->baud_rate        = I2C_MASTER_BAUD_RATE_100KHZ;
    f440:	2364      	movs	r3, #100	; 0x64
    f442:	9300      	str	r3, [sp, #0]
#ifdef FEATURE_I2C_FAST_MODE_PLUS_AND_HIGH_SPEED
	config->baud_rate_high_speed = I2C_MASTER_BAUD_RATE_3400KHZ;
    f444:	4b1e      	ldr	r3, [pc, #120]	; (f4c0 <configure_i2c_light+0x84>)
    f446:	9301      	str	r3, [sp, #4]
	config->transfer_speed       = I2C_MASTER_SPEED_STANDARD_AND_FAST;
    f448:	2300      	movs	r3, #0
    f44a:	9302      	str	r3, [sp, #8]
#endif
	config->generator_source = GCLK_GENERATOR_0;
    f44c:	466a      	mov	r2, sp
    f44e:	7313      	strb	r3, [r2, #12]
	config->run_in_standby   = false;
    f450:	7613      	strb	r3, [r2, #24]
	config->start_hold_time  = I2C_MASTER_START_HOLD_TIME_300NS_600NS;
    f452:	2280      	movs	r2, #128	; 0x80
    f454:	0392      	lsls	r2, r2, #14
    f456:	9204      	str	r2, [sp, #16]
	config->buffer_timeout   = 65535;
	config->unknown_bus_state_timeout = 65535;
    f458:	2201      	movs	r2, #1
    f45a:	4252      	negs	r2, r2
    f45c:	4669      	mov	r1, sp
    f45e:	828a      	strh	r2, [r1, #20]
	config->pinmux_pad0      = PINMUX_DEFAULT;
	config->pinmux_pad1      = PINMUX_DEFAULT;
	config->scl_low_timeout  = false;
    f460:	3225      	adds	r2, #37	; 0x25
    f462:	548b      	strb	r3, [r1, r2]
	config->inactive_timeout = I2C_MASTER_INACTIVE_TIMEOUT_DISABLED;
    f464:	930a      	str	r3, [sp, #40]	; 0x28
#ifdef FEATURE_I2C_SCL_STRETCH_MODE
	config->scl_stretch_only_after_ack_bit = false;
    f466:	3208      	adds	r2, #8
    f468:	548b      	strb	r3, [r1, r2]
#endif
#ifdef FEATURE_I2C_SCL_EXTEND_TIMEOUT
	config->slave_scl_low_extend_timeout   = false;
    f46a:	3201      	adds	r2, #1
    f46c:	548b      	strb	r3, [r1, r2]
	config->master_scl_low_extend_timeout  = false;
    f46e:	3201      	adds	r2, #1
    f470:	548b      	strb	r3, [r1, r2]
	
	i2c_master_get_config_defaults(&config_i2c_master);
	/* Change buffer timeout to something longer. */

	/* Change pins */
	config_i2c_master.pinmux_pad0  = PINMUX_PA16C_SERCOM1_PAD0;
    f472:	4b14      	ldr	r3, [pc, #80]	; (f4c4 <configure_i2c_light+0x88>)
    f474:	9307      	str	r3, [sp, #28]
	config_i2c_master.pinmux_pad1  = PINMUX_PA17C_SERCOM1_PAD1;
    f476:	4b14      	ldr	r3, [pc, #80]	; (f4c8 <configure_i2c_light+0x8c>)
    f478:	9308      	str	r3, [sp, #32]
	

	config_i2c_master.buffer_timeout = 10000;
    f47a:	4b14      	ldr	r3, [pc, #80]	; (f4cc <configure_i2c_light+0x90>)
    f47c:	466a      	mov	r2, sp
    f47e:	82cb      	strh	r3, [r1, #22]
	/* Initialize and enable device with config. */
	i2c_master_init(&i2c_master_instance, CONF_I2C_MASTER_MODULE,
    f480:	4c13      	ldr	r4, [pc, #76]	; (f4d0 <configure_i2c_light+0x94>)
    f482:	1c20      	adds	r0, r4, #0
    f484:	4913      	ldr	r1, [pc, #76]	; (f4d4 <configure_i2c_light+0x98>)
    f486:	4b14      	ldr	r3, [pc, #80]	; (f4d8 <configure_i2c_light+0x9c>)
    f488:	4798      	blx	r3
{
	/* Sanity check of arguments. */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    f48a:	6822      	ldr	r2, [r4, #0]
	SercomI2cm *const i2c_hw = &(module->hw->I2CM);

#if defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_1)
	return (i2c_hw->STATUS.reg & SERCOM_I2CM_STATUS_SYNCBUSY);
#elif defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_2)
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
    f48c:	2107      	movs	r1, #7
    f48e:	69d3      	ldr	r3, [r2, #28]
		const struct i2c_master_module *const module)
{
	/* Sanity check. */
	Assert(module);

	while (i2c_master_is_syncing(module)) {
    f490:	4219      	tst	r1, r3
    f492:	d1fc      	bne.n	f48e <configure_i2c_light+0x52>

	/* Wait for module to sync. */
	_i2c_master_wait_for_sync(module);

	/* Enable module. */
	i2c_module->CTRLA.reg |= SERCOM_I2CM_CTRLA_ENABLE;
    f494:	6811      	ldr	r1, [r2, #0]
    f496:	2302      	movs	r3, #2
    f498:	430b      	orrs	r3, r1
    f49a:	6013      	str	r3, [r2, #0]
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
#endif
	/* Start timeout if bus state is unknown. */
	while (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(1))) {
		timeout_counter++;
		if(timeout_counter >= (module->unknown_bus_state_timeout)) {
    f49c:	4b0c      	ldr	r3, [pc, #48]	; (f4d0 <configure_i2c_light+0x94>)
    f49e:	88dc      	ldrh	r4, [r3, #6]
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);

	/* Timeout counter used to force bus state. */
	uint32_t timeout_counter = 0;
    f4a0:	2300      	movs	r3, #0
#if I2C_MASTER_CALLBACK_MODE == true
	/* Enable module interrupts */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
#endif
	/* Start timeout if bus state is unknown. */
	while (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(1))) {
    f4a2:	2010      	movs	r0, #16
    f4a4:	e005      	b.n	f4b2 <configure_i2c_light+0x76>
		timeout_counter++;
    f4a6:	3301      	adds	r3, #1
		if(timeout_counter >= (module->unknown_bus_state_timeout)) {
    f4a8:	42a3      	cmp	r3, r4
    f4aa:	d302      	bcc.n	f4b2 <configure_i2c_light+0x76>
			/* Timeout, force bus state to idle. */
			i2c_module->STATUS.reg = SERCOM_I2CM_STATUS_BUSSTATE(1);
    f4ac:	2310      	movs	r3, #16
    f4ae:	8353      	strh	r3, [r2, #26]
    f4b0:	e002      	b.n	f4b8 <configure_i2c_light+0x7c>
#if I2C_MASTER_CALLBACK_MODE == true
	/* Enable module interrupts */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
#endif
	/* Start timeout if bus state is unknown. */
	while (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(1))) {
    f4b2:	8b51      	ldrh	r1, [r2, #26]
    f4b4:	4201      	tst	r1, r0
    f4b6:	d0f6      	beq.n	f4a6 <configure_i2c_light+0x6a>
	&config_i2c_master);
	i2c_master_enable(&i2c_master_instance);
	
	return init_i2c_light();
    f4b8:	4b08      	ldr	r3, [pc, #32]	; (f4dc <configure_i2c_light+0xa0>)
    f4ba:	4798      	blx	r3
}
    f4bc:	b00c      	add	sp, #48	; 0x30
    f4be:	bd10      	pop	{r4, pc}
    f4c0:	00000d48 	.word	0x00000d48
    f4c4:	00100002 	.word	0x00100002
    f4c8:	00110002 	.word	0x00110002
    f4cc:	00002710 	.word	0x00002710
    f4d0:	2000340c 	.word	0x2000340c
    f4d4:	42000c00 	.word	0x42000c00
    f4d8:	00000765 	.word	0x00000765
    f4dc:	0000f3ed 	.word	0x0000f3ed

0000f4e0 <read_dimmer>:
		}
	}
	return OK;
}

int read_dimmer(uint8_t command){
    f4e0:	b5f0      	push	{r4, r5, r6, r7, lr}
    f4e2:	b083      	sub	sp, #12
	int result = 0;
	int timeout = 0;
	int  x = 0;
	
	uint8_t reciever_buffer[6];
	reciever_buffer[0] = 0x03;
    f4e4:	2303      	movs	r3, #3
    f4e6:	466a      	mov	r2, sp
    f4e8:	7013      	strb	r3, [r2, #0]
	master_packet.address         = DIMMER_LIGHT_I2C_ADDR;
    f4ea:	4b1c      	ldr	r3, [pc, #112]	; (f55c <read_dimmer+0x7c>)
    f4ec:	221e      	movs	r2, #30
    f4ee:	801a      	strh	r2, [r3, #0]
	master_packet.data_length     = 0x01;
    f4f0:	3a1d      	subs	r2, #29
    f4f2:	805a      	strh	r2, [r3, #2]
	master_packet.data            = reciever_buffer;
    f4f4:	466a      	mov	r2, sp
    f4f6:	605a      	str	r2, [r3, #4]
	master_packet.ten_bit_address = false;
    f4f8:	2200      	movs	r2, #0
    f4fa:	721a      	strb	r2, [r3, #8]
	master_packet.high_speed      = false;
    f4fc:	725a      	strb	r2, [r3, #9]
	master_packet.hs_master_code  = 0x0;
    f4fe:	729a      	strb	r2, [r3, #10]
	return OK;
}

int read_dimmer(uint8_t command){
	int result = 0;
	int timeout = 0;
    f500:	2400      	movs	r4, #0
	master_packet.data            = reciever_buffer;
	master_packet.ten_bit_address = false;
	master_packet.high_speed      = false;
	master_packet.hs_master_code  = 0x0;
	
	while (i2c_master_write_packet_wait(&i2c_master_instance, &master_packet) !=
    f502:	4e17      	ldr	r6, [pc, #92]	; (f560 <read_dimmer+0x80>)
    f504:	1c1d      	adds	r5, r3, #0
    f506:	4f17      	ldr	r7, [pc, #92]	; (f564 <read_dimmer+0x84>)
    f508:	e003      	b.n	f512 <read_dimmer+0x32>
	STATUS_OK) {

		/* Increment timeout counter and check if timed out. */
		if (timeout++ == TIMEOUT) {
    f50a:	3401      	adds	r4, #1
    f50c:	4b16      	ldr	r3, [pc, #88]	; (f568 <read_dimmer+0x88>)
    f50e:	429c      	cmp	r4, r3
    f510:	d004      	beq.n	f51c <read_dimmer+0x3c>
	master_packet.data            = reciever_buffer;
	master_packet.ten_bit_address = false;
	master_packet.high_speed      = false;
	master_packet.hs_master_code  = 0x0;
	
	while (i2c_master_write_packet_wait(&i2c_master_instance, &master_packet) !=
    f512:	1c30      	adds	r0, r6, #0
    f514:	1c29      	adds	r1, r5, #0
    f516:	47b8      	blx	r7
    f518:	2800      	cmp	r0, #0
    f51a:	d1f6      	bne.n	f50a <read_dimmer+0x2a>
		/* Increment timeout counter and check if timed out. */
		if (timeout++ == TIMEOUT) {
			break;
		}
	}
	master_packet.data_length     = 6;
    f51c:	4b0f      	ldr	r3, [pc, #60]	; (f55c <read_dimmer+0x7c>)
    f51e:	2206      	movs	r2, #6
    f520:	805a      	strh	r2, [r3, #2]
	master_packet.data            = reciever_buffer;
    f522:	466a      	mov	r2, sp
    f524:	605a      	str	r2, [r3, #4]
	while (i2c_master_read_packet_wait(&i2c_master_instance, &master_packet) !=
    f526:	4e0e      	ldr	r6, [pc, #56]	; (f560 <read_dimmer+0x80>)
    f528:	1c1d      	adds	r5, r3, #0
    f52a:	4f10      	ldr	r7, [pc, #64]	; (f56c <read_dimmer+0x8c>)
    f52c:	e005      	b.n	f53a <read_dimmer+0x5a>
	STATUS_OK) {
		//printf("timeout: %d || TIMEOUT \n\r",timeout);
		/* Increment timeout counter and check if timed out. */
		if (timeout++ > TIMEOUT) {
    f52e:	3401      	adds	r4, #1
    f530:	1e62      	subs	r2, r4, #1
    f532:	23fa      	movs	r3, #250	; 0xfa
    f534:	009b      	lsls	r3, r3, #2
    f536:	429a      	cmp	r2, r3
    f538:	dc04      	bgt.n	f544 <read_dimmer+0x64>
			break;
		}
	}
	master_packet.data_length     = 6;
	master_packet.data            = reciever_buffer;
	while (i2c_master_read_packet_wait(&i2c_master_instance, &master_packet) !=
    f53a:	1c30      	adds	r0, r6, #0
    f53c:	1c29      	adds	r1, r5, #0
    f53e:	47b8      	blx	r7
    f540:	2800      	cmp	r0, #0
    f542:	d1f4      	bne.n	f52e <read_dimmer+0x4e>
			
			timeout = 0;
			break;
		}
	}
	x = reciever_buffer[0]<<8;
    f544:	466b      	mov	r3, sp
    f546:	781c      	ldrb	r4, [r3, #0]
    f548:	0224      	lsls	r4, r4, #8
	x |=reciever_buffer[1];
    f54a:	785b      	ldrb	r3, [r3, #1]
    f54c:	431c      	orrs	r4, r3
	printf("x: %d\n\r",x);
    f54e:	4808      	ldr	r0, [pc, #32]	; (f570 <read_dimmer+0x90>)
    f550:	1c21      	adds	r1, r4, #0
    f552:	4b08      	ldr	r3, [pc, #32]	; (f574 <read_dimmer+0x94>)
    f554:	4798      	blx	r3
	
	return x;
    f556:	1c20      	adds	r0, r4, #0
    f558:	b003      	add	sp, #12
    f55a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    f55c:	20003400 	.word	0x20003400
    f560:	2000340c 	.word	0x2000340c
    f564:	00000c39 	.word	0x00000c39
    f568:	000003e9 	.word	0x000003e9
    f56c:	00000c29 	.word	0x00000c29
    f570:	00012f74 	.word	0x00012f74
    f574:	00010b79 	.word	0x00010b79

0000f578 <button_sensor_value>:
		const uint8_t gpio_pin)
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	return (port_base->IN.reg & pin_mask);
    f578:	4b02      	ldr	r3, [pc, #8]	; (f584 <button_sensor_value+0xc>)
    f57a:	6a18      	ldr	r0, [r3, #32]
    f57c:	00c0      	lsls	r0, r0, #3
    f57e:	0fc0      	lsrs	r0, r0, #31
static int
button_sensor_value(int type)
{
  bool PinLvl = port_pin_get_input_level(BUTTON_0_PIN);
  return PinLvl;
}
    f580:	4770      	bx	lr
    f582:	46c0      	nop			; (mov r8, r8)
    f584:	41004400 	.word	0x41004400

0000f588 <button_sensor_status>:
}
/*---------------------------------------------------------------------------*/
static int
button_sensor_status(int type)
{
  return enabled;
    f588:	4b01      	ldr	r3, [pc, #4]	; (f590 <button_sensor_status+0x8>)
    f58a:	6818      	ldr	r0, [r3, #0]
}
    f58c:	4770      	bx	lr
    f58e:	46c0      	nop			; (mov r8, r8)
    f590:	20001ee0 	.word	0x20001ee0

0000f594 <button_sensor_configure>:
}
/*---------------------------------------------------------------------------*/
static int enabled = 0;
static int
button_sensor_configure(int type, int value)
{
    f594:	b500      	push	{lr}
    f596:	b085      	sub	sp, #20
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->gpio_pin            = 0;
	config->gpio_pin_mux        = 0;
    f598:	ab01      	add	r3, sp, #4
    f59a:	2200      	movs	r2, #0
    f59c:	9202      	str	r2, [sp, #8]
	config->gpio_pin_pull       = EXTINT_PULL_UP;
    f59e:	2001      	movs	r0, #1
    f5a0:	7218      	strb	r0, [r3, #8]
	config->wake_if_sleeping    = true;
    f5a2:	7258      	strb	r0, [r3, #9]
	config->filter_input_signal = false;
    f5a4:	729a      	strb	r2, [r3, #10]
	config->detection_criteria  = EXTINT_DETECT_FALLING;
    f5a6:	3202      	adds	r2, #2
    f5a8:	72da      	strb	r2, [r3, #11]
  struct extint_chan_conf config_extint_chan;
  extint_chan_get_config_defaults(&config_extint_chan);
  config_extint_chan.gpio_pin           = BUTTON_0_EIC_PIN;
    f5aa:	231c      	movs	r3, #28
    f5ac:	9301      	str	r3, [sp, #4]
  config_extint_chan.gpio_pin_mux       = BUTTON_0_EIC_MUX;
  config_extint_chan.gpio_pin_pull      = EXTINT_PULL_UP;

  if(value == 1) {
    f5ae:	2901      	cmp	r1, #1
    f5b0:	d103      	bne.n	f5ba <button_sensor_configure+0x26>
    /* Enable the sensor */
    config_extint_chan.detection_criteria = EXTINT_DETECT_FALLING;
    //config_extint_chan.detection_criteria = EXTINT_DETECT_BOTH;
    enabled = 1;
    f5b2:	3a01      	subs	r2, #1
    f5b4:	4b07      	ldr	r3, [pc, #28]	; (f5d4 <button_sensor_configure+0x40>)
    f5b6:	601a      	str	r2, [r3, #0]
    f5b8:	e004      	b.n	f5c4 <button_sensor_configure+0x30>
  } else {
    /* Disable the sensor */
    config_extint_chan.detection_criteria = EXTINT_DETECT_NONE;
    f5ba:	2300      	movs	r3, #0
    f5bc:	aa01      	add	r2, sp, #4
    f5be:	72d3      	strb	r3, [r2, #11]
    enabled = 0;
    f5c0:	4a04      	ldr	r2, [pc, #16]	; (f5d4 <button_sensor_configure+0x40>)
    f5c2:	6013      	str	r3, [r2, #0]
  }
  extint_chan_set_config(BUTTON_0_EIC_LINE, &config_extint_chan);
    f5c4:	2008      	movs	r0, #8
    f5c6:	a901      	add	r1, sp, #4
    f5c8:	4b03      	ldr	r3, [pc, #12]	; (f5d8 <button_sensor_configure+0x44>)
    f5ca:	4798      	blx	r3

  return 0;
}
    f5cc:	2000      	movs	r0, #0
    f5ce:	b005      	add	sp, #20
    f5d0:	bd00      	pop	{pc}
    f5d2:	46c0      	nop			; (mov r8, r8)
    f5d4:	20001ee0 	.word	0x20001ee0
    f5d8:	00000369 	.word	0x00000369

0000f5dc <edbg_eui_read_eui64>:
#define LEN_EUI    256
uint8_t readbuf[LEN_EUI];

uint8_t *
edbg_eui_read_eui64(void)
{
    f5dc:	b570      	push	{r4, r5, r6, lr}
    f5de:	b090      	sub	sp, #64	; 0x40
static inline void i2c_master_get_config_defaults(
		struct i2c_master_config *const config)
{
	/*Sanity check argument. */
	Assert(config);
	config->baud_rate        = I2C_MASTER_BAUD_RATE_100KHZ;
    f5e0:	aa04      	add	r2, sp, #16
    f5e2:	2364      	movs	r3, #100	; 0x64
    f5e4:	9304      	str	r3, [sp, #16]
#ifdef FEATURE_I2C_FAST_MODE_PLUS_AND_HIGH_SPEED
	config->baud_rate_high_speed = I2C_MASTER_BAUD_RATE_3400KHZ;
    f5e6:	4b33      	ldr	r3, [pc, #204]	; (f6b4 <edbg_eui_read_eui64+0xd8>)
    f5e8:	6053      	str	r3, [r2, #4]
	config->transfer_speed       = I2C_MASTER_SPEED_STANDARD_AND_FAST;
    f5ea:	2300      	movs	r3, #0
    f5ec:	6093      	str	r3, [r2, #8]
#endif
	config->generator_source = GCLK_GENERATOR_0;
    f5ee:	7313      	strb	r3, [r2, #12]
	config->run_in_standby   = false;
    f5f0:	7613      	strb	r3, [r2, #24]
	config->start_hold_time  = I2C_MASTER_START_HOLD_TIME_300NS_600NS;
    f5f2:	2180      	movs	r1, #128	; 0x80
    f5f4:	0389      	lsls	r1, r1, #14
    f5f6:	6111      	str	r1, [r2, #16]
	config->buffer_timeout   = 65535;
    f5f8:	2101      	movs	r1, #1
    f5fa:	4249      	negs	r1, r1
    f5fc:	82d1      	strh	r1, [r2, #22]
	config->unknown_bus_state_timeout = 65535;
    f5fe:	8291      	strh	r1, [r2, #20]
	config->pinmux_pad0      = PINMUX_DEFAULT;
	config->pinmux_pad1      = PINMUX_DEFAULT;
	config->scl_low_timeout  = false;
    f600:	3125      	adds	r1, #37	; 0x25
    f602:	5453      	strb	r3, [r2, r1]
	config->inactive_timeout = I2C_MASTER_INACTIVE_TIMEOUT_DISABLED;
    f604:	6293      	str	r3, [r2, #40]	; 0x28
#ifdef FEATURE_I2C_SCL_STRETCH_MODE
	config->scl_stretch_only_after_ack_bit = false;
    f606:	3108      	adds	r1, #8
    f608:	5453      	strb	r3, [r2, r1]
#endif
#ifdef FEATURE_I2C_SCL_EXTEND_TIMEOUT
	config->slave_scl_low_extend_timeout   = false;
    f60a:	3101      	adds	r1, #1
    f60c:	5453      	strb	r3, [r2, r1]
	config->master_scl_low_extend_timeout  = false;
    f60e:	3101      	adds	r1, #1
    f610:	5453      	strb	r3, [r2, r1]
  //int i;
  int timeout = 0;

  struct i2c_master_config config_i2c_master;
  i2c_master_get_config_defaults(&config_i2c_master);
  config_i2c_master.pinmux_pad0  = EDBG_I2C_SERCOM_PINMUX_PAD0;
    f612:	4b29      	ldr	r3, [pc, #164]	; (f6b8 <edbg_eui_read_eui64+0xdc>)
    f614:	61d3      	str	r3, [r2, #28]
  config_i2c_master.pinmux_pad1  = EDBG_I2C_SERCOM_PINMUX_PAD1;
    f616:	4b29      	ldr	r3, [pc, #164]	; (f6bc <edbg_eui_read_eui64+0xe0>)
    f618:	6213      	str	r3, [r2, #32]

  i2c_master_init(&i2c_master_instance, EDBG_I2C_MODULE, &config_i2c_master);
    f61a:	4c29      	ldr	r4, [pc, #164]	; (f6c0 <edbg_eui_read_eui64+0xe4>)
    f61c:	1c20      	adds	r0, r4, #0
    f61e:	4929      	ldr	r1, [pc, #164]	; (f6c4 <edbg_eui_read_eui64+0xe8>)
    f620:	4b29      	ldr	r3, [pc, #164]	; (f6c8 <edbg_eui_read_eui64+0xec>)
    f622:	4798      	blx	r3
{
	/* Sanity check of arguments. */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    f624:	6822      	ldr	r2, [r4, #0]
	SercomI2cm *const i2c_hw = &(module->hw->I2CM);

#if defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_1)
	return (i2c_hw->STATUS.reg & SERCOM_I2CM_STATUS_SYNCBUSY);
#elif defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_2)
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
    f626:	2107      	movs	r1, #7
    f628:	69d3      	ldr	r3, [r2, #28]
		const struct i2c_master_module *const module)
{
	/* Sanity check. */
	Assert(module);

	while (i2c_master_is_syncing(module)) {
    f62a:	4219      	tst	r1, r3
    f62c:	d1fc      	bne.n	f628 <edbg_eui_read_eui64+0x4c>

	/* Wait for module to sync. */
	_i2c_master_wait_for_sync(module);

	/* Enable module. */
	i2c_module->CTRLA.reg |= SERCOM_I2CM_CTRLA_ENABLE;
    f62e:	6811      	ldr	r1, [r2, #0]
    f630:	2302      	movs	r3, #2
    f632:	430b      	orrs	r3, r1
    f634:	6013      	str	r3, [r2, #0]
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
#endif
	/* Start timeout if bus state is unknown. */
	while (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(1))) {
		timeout_counter++;
		if(timeout_counter >= (module->unknown_bus_state_timeout)) {
    f636:	4b22      	ldr	r3, [pc, #136]	; (f6c0 <edbg_eui_read_eui64+0xe4>)
    f638:	88dc      	ldrh	r4, [r3, #6]
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);

	/* Timeout counter used to force bus state. */
	uint32_t timeout_counter = 0;
    f63a:	2300      	movs	r3, #0
#if I2C_MASTER_CALLBACK_MODE == true
	/* Enable module interrupts */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
#endif
	/* Start timeout if bus state is unknown. */
	while (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(1))) {
    f63c:	2010      	movs	r0, #16
    f63e:	e005      	b.n	f64c <edbg_eui_read_eui64+0x70>
		timeout_counter++;
    f640:	3301      	adds	r3, #1
		if(timeout_counter >= (module->unknown_bus_state_timeout)) {
    f642:	42a3      	cmp	r3, r4
    f644:	d302      	bcc.n	f64c <edbg_eui_read_eui64+0x70>
			/* Timeout, force bus state to idle. */
			i2c_module->STATUS.reg = SERCOM_I2CM_STATUS_BUSSTATE(1);
    f646:	2310      	movs	r3, #16
    f648:	8353      	strh	r3, [r2, #26]
    f64a:	e002      	b.n	f652 <edbg_eui_read_eui64+0x76>
#if I2C_MASTER_CALLBACK_MODE == true
	/* Enable module interrupts */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
#endif
	/* Start timeout if bus state is unknown. */
	while (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(1))) {
    f64c:	8b51      	ldrh	r1, [r2, #26]
    f64e:	4201      	tst	r1, r0
    f650:	d0f6      	beq.n	f640 <edbg_eui_read_eui64+0x64>

  i2c_master_enable(&i2c_master_instance);

  struct i2c_master_packet packet = {
    f652:	aa01      	add	r2, sp, #4
    f654:	4b1d      	ldr	r3, [pc, #116]	; (f6cc <edbg_eui_read_eui64+0xf0>)
    f656:	cb13      	ldmia	r3!, {r0, r1, r4}
    f658:	c213      	stmia	r2!, {r0, r1, r4}

uint8_t *
edbg_eui_read_eui64(void)
{
  //int i;
  int timeout = 0;
    f65a:	2400      	movs	r4, #0
    .ten_bit_address = false,
    .high_speed      = false,
    .hs_master_code  = 0x0,
  };

  while(i2c_master_write_packet_wait_no_stop(&i2c_master_instance, &packet) !=
    f65c:	4d18      	ldr	r5, [pc, #96]	; (f6c0 <edbg_eui_read_eui64+0xe4>)
    f65e:	4e1c      	ldr	r6, [pc, #112]	; (f6d0 <edbg_eui_read_eui64+0xf4>)
    f660:	e007      	b.n	f672 <edbg_eui_read_eui64+0x96>
         STATUS_OK) {
    /* Increment timeout counter and check if timed out. */
    if(timeout++ == TIMEOUT) {
    f662:	3401      	adds	r4, #1
    f664:	4b1b      	ldr	r3, [pc, #108]	; (f6d4 <edbg_eui_read_eui64+0xf8>)
    f666:	429c      	cmp	r4, r3
    f668:	d103      	bne.n	f672 <edbg_eui_read_eui64+0x96>
      printf("Timeout 1\n\r");
    f66a:	481b      	ldr	r0, [pc, #108]	; (f6d8 <edbg_eui_read_eui64+0xfc>)
    f66c:	4b1b      	ldr	r3, [pc, #108]	; (f6dc <edbg_eui_read_eui64+0x100>)
    f66e:	4798      	blx	r3
      break;
    f670:	e004      	b.n	f67c <edbg_eui_read_eui64+0xa0>
    .ten_bit_address = false,
    .high_speed      = false,
    .hs_master_code  = 0x0,
  };

  while(i2c_master_write_packet_wait_no_stop(&i2c_master_instance, &packet) !=
    f672:	1c28      	adds	r0, r5, #0
    f674:	a901      	add	r1, sp, #4
    f676:	47b0      	blx	r6
    f678:	2800      	cmp	r0, #0
    f67a:	d1f2      	bne.n	f662 <edbg_eui_read_eui64+0x86>
      printf("Timeout 1\n\r");
      break;
    }
  }

  packet.data = readbuf;
    f67c:	ab01      	add	r3, sp, #4
    f67e:	4a18      	ldr	r2, [pc, #96]	; (f6e0 <edbg_eui_read_eui64+0x104>)
    f680:	9202      	str	r2, [sp, #8]
  packet.data_length = sizeof(readbuf);
    f682:	2280      	movs	r2, #128	; 0x80
    f684:	0052      	lsls	r2, r2, #1
    f686:	805a      	strh	r2, [r3, #2]
  while(i2c_master_read_packet_wait(&i2c_master_instance, &packet) !=
    f688:	4d0d      	ldr	r5, [pc, #52]	; (f6c0 <edbg_eui_read_eui64+0xe4>)
    f68a:	4e16      	ldr	r6, [pc, #88]	; (f6e4 <edbg_eui_read_eui64+0x108>)
    f68c:	e007      	b.n	f69e <edbg_eui_read_eui64+0xc2>
         STATUS_OK) {
    /* Increment timeout counter and check if timed out. */
    if(timeout++ == TIMEOUT) {
    f68e:	3401      	adds	r4, #1
    f690:	4b10      	ldr	r3, [pc, #64]	; (f6d4 <edbg_eui_read_eui64+0xf8>)
    f692:	429c      	cmp	r4, r3
    f694:	d103      	bne.n	f69e <edbg_eui_read_eui64+0xc2>
      printf("Timeout 2\n\r");
    f696:	4814      	ldr	r0, [pc, #80]	; (f6e8 <edbg_eui_read_eui64+0x10c>)
    f698:	4b10      	ldr	r3, [pc, #64]	; (f6dc <edbg_eui_read_eui64+0x100>)
    f69a:	4798      	blx	r3
      break;
    f69c:	e004      	b.n	f6a8 <edbg_eui_read_eui64+0xcc>
    }
  }

  packet.data = readbuf;
  packet.data_length = sizeof(readbuf);
  while(i2c_master_read_packet_wait(&i2c_master_instance, &packet) !=
    f69e:	1c28      	adds	r0, r5, #0
    f6a0:	a901      	add	r1, sp, #4
    f6a2:	47b0      	blx	r6
    f6a4:	2800      	cmp	r0, #0
    f6a6:	d1f2      	bne.n	f68e <edbg_eui_read_eui64+0xb2>
  /*  for(i = 0; i < LEN_EUI; i++) {
    printf("0x%02x ", readbuf[i]);
  }
  
  printf("\n\r");*/
  i2c_master_reset(&i2c_master_instance);
    f6a8:	4805      	ldr	r0, [pc, #20]	; (f6c0 <edbg_eui_read_eui64+0xe4>)
    f6aa:	4b10      	ldr	r3, [pc, #64]	; (f6ec <edbg_eui_read_eui64+0x110>)
    f6ac:	4798      	blx	r3
  return readbuf;
}
    f6ae:	480c      	ldr	r0, [pc, #48]	; (f6e0 <edbg_eui_read_eui64+0x104>)
    f6b0:	b010      	add	sp, #64	; 0x40
    f6b2:	bd70      	pop	{r4, r5, r6, pc}
    f6b4:	00000d48 	.word	0x00000d48
    f6b8:	00100002 	.word	0x00100002
    f6bc:	00110002 	.word	0x00110002
    f6c0:	2000340c 	.word	0x2000340c
    f6c4:	42000c00 	.word	0x42000c00
    f6c8:	00000765 	.word	0x00000765
    f6cc:	00012f9c 	.word	0x00012f9c
    f6d0:	00000c49 	.word	0x00000c49
    f6d4:	000003e9 	.word	0x000003e9
    f6d8:	00012fa8 	.word	0x00012fa8
    f6dc:	00010b79 	.word	0x00010b79
    f6e0:	20003418 	.word	0x20003418
    f6e4:	00000c29 	.word	0x00000c29
    f6e8:	00012fb4 	.word	0x00012fb4
    f6ec:	0000091d 	.word	0x0000091d

0000f6f0 <flash_init>:
#define PRINTF(...)
#endif
/*---------------------------------------------------------------------------*/
void
flash_init(void)
{
    f6f0:	b500      	push	{lr}
    f6f2:	b083      	sub	sp, #12
{
	/* Sanity check the parameters */
	Assert(config);

	/* Write the default configuration for the NVM configuration */
	config->sleep_power_mode  = NVM_SLEEP_POWER_MODE_WAKEONACCESS;
    f6f4:	2200      	movs	r2, #0
    f6f6:	466b      	mov	r3, sp
    f6f8:	701a      	strb	r2, [r3, #0]
	config->manual_page_write = false;
    f6fa:	705a      	strb	r2, [r3, #1]
	config->wait_states       = NVMCTRL->CTRLB.bit.RWS;
    f6fc:	4b06      	ldr	r3, [pc, #24]	; (f718 <flash_init+0x28>)
    f6fe:	685b      	ldr	r3, [r3, #4]
    f700:	06db      	lsls	r3, r3, #27
    f702:	0f1b      	lsrs	r3, r3, #28
    f704:	4669      	mov	r1, sp
    f706:	708b      	strb	r3, [r1, #2]
	config->disable_cache     = false;
    f708:	70ca      	strb	r2, [r1, #3]
	config->cache_readmode    = NVM_CACHE_READMODE_NO_MISS_PENALTY;
    f70a:	710a      	strb	r2, [r1, #4]
#if 1
  struct nvm_config nvm_conf;
  nvm_get_config_defaults(&nvm_conf);
  nvm_set_config(&nvm_conf);
    f70c:	4668      	mov	r0, sp
    f70e:	4b03      	ldr	r3, [pc, #12]	; (f71c <flash_init+0x2c>)
    f710:	4798      	blx	r3
#endif
}
    f712:	b003      	add	sp, #12
    f714:	bd00      	pop	{pc}
    f716:	46c0      	nop			; (mov r8, r8)
    f718:	41004000 	.word	0x41004000
    f71c:	00000495 	.word	0x00000495

0000f720 <leds_arch_init>:
#include "port.h"
//#include "samr21_xplained_pro.h"
/*---------------------------------------------------------------------------*/
void
leds_arch_init(void)
{
    f720:	b500      	push	{lr}
    f722:	b083      	sub	sp, #12
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
	config->input_pull = PORT_PIN_PULL_UP;
    f724:	a901      	add	r1, sp, #4
    f726:	2301      	movs	r3, #1
    f728:	704b      	strb	r3, [r1, #1]
	config->powersave  = false;
    f72a:	2200      	movs	r2, #0
    f72c:	708a      	strb	r2, [r1, #2]
  /* Configure pins as output, turn LED off */
  struct port_config pin_conf;
  port_get_config_defaults(&pin_conf);
  pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
    f72e:	700b      	strb	r3, [r1, #0]
  port_pin_set_config(LED_0_PIN, &pin_conf);
    f730:	2013      	movs	r0, #19
    f732:	4b04      	ldr	r3, [pc, #16]	; (f744 <leds_arch_init+0x24>)
    f734:	4798      	blx	r3
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
    f736:	2280      	movs	r2, #128	; 0x80
    f738:	0312      	lsls	r2, r2, #12
    f73a:	4b03      	ldr	r3, [pc, #12]	; (f748 <leds_arch_init+0x28>)
    f73c:	619a      	str	r2, [r3, #24]
  port_pin_set_output_level(LED_0_PIN, LED_0_INACTIVE);
}
    f73e:	b003      	add	sp, #12
    f740:	bd00      	pop	{pc}
    f742:	46c0      	nop			; (mov r8, r8)
    f744:	0000051d 	.word	0x0000051d
    f748:	41004400 	.word	0x41004400

0000f74c <leds_arch_set>:
}
/*---------------------------------------------------------------------------*/
void
leds_arch_set(unsigned char leds)
{
  if((leds & (LEDS_ALL)) != 0) {
    f74c:	0783      	lsls	r3, r0, #30
    f74e:	d004      	beq.n	f75a <leds_arch_set+0xe>
	} else {
		port_base->OUTCLR.reg = pin_mask;
    f750:	2280      	movs	r2, #128	; 0x80
    f752:	0312      	lsls	r2, r2, #12
    f754:	4b03      	ldr	r3, [pc, #12]	; (f764 <leds_arch_set+0x18>)
    f756:	615a      	str	r2, [r3, #20]
    f758:	e003      	b.n	f762 <leds_arch_set+0x16>
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
    f75a:	2280      	movs	r2, #128	; 0x80
    f75c:	0312      	lsls	r2, r2, #12
    f75e:	4b01      	ldr	r3, [pc, #4]	; (f764 <leds_arch_set+0x18>)
    f760:	619a      	str	r2, [r3, #24]
    port_pin_set_output_level(LED_0_PIN, 0);
  } else {
    /* Turn off */
    port_pin_set_output_level(LED_0_PIN, 1);
  }
}
    f762:	4770      	bx	lr
    f764:	41004400 	.word	0x41004400

0000f768 <node_id_restore>:
static const uint8_t magic_bytes[] = {0xde, 0xad, 0xbe, 0xef};
/*---------------------------------------------------------------------------*/
void
node_id_restore(void)
{
  if(node_id != 0) {
    f768:	4b11      	ldr	r3, [pc, #68]	; (f7b0 <node_id_restore+0x48>)
    f76a:	881b      	ldrh	r3, [r3, #0]
    f76c:	2b00      	cmp	r3, #0
    f76e:	d004      	beq.n	f77a <node_id_restore+0x12>
    node_mac[6] = node_id >> 8;
    f770:	4a10      	ldr	r2, [pc, #64]	; (f7b4 <node_id_restore+0x4c>)
    f772:	0a19      	lsrs	r1, r3, #8
    f774:	7191      	strb	r1, [r2, #6]
    node_mac[7] = node_id & 0xff;;
    f776:	71d3      	strb	r3, [r2, #7]
    return;
    f778:	e018      	b.n	f7ac <node_id_restore+0x44>
  }
  /* set node ID */
  node_id = node_mac[7] | (node_mac[6] << 2);
    f77a:	4b0e      	ldr	r3, [pc, #56]	; (f7b4 <node_id_restore+0x4c>)
    f77c:	799a      	ldrb	r2, [r3, #6]
    f77e:	0092      	lsls	r2, r2, #2
    f780:	79d9      	ldrb	r1, [r3, #7]
    f782:	430a      	orrs	r2, r1
    f784:	490a      	ldr	r1, [pc, #40]	; (f7b0 <node_id_restore+0x48>)
    f786:	800a      	strh	r2, [r1, #0]

  node_mac[0] = (*SAMR21_ADDR0) >> 24;
    f788:	490b      	ldr	r1, [pc, #44]	; (f7b8 <node_id_restore+0x50>)
    f78a:	2200      	movs	r2, #0
    f78c:	701a      	strb	r2, [r3, #0]
  node_mac[1] = (*SAMR21_ADDR0) >> 16;
    f78e:	705a      	strb	r2, [r3, #1]
  node_mac[2] = (*SAMR21_ADDR0) >> 8;
    f790:	880a      	ldrh	r2, [r1, #0]
    f792:	0a12      	lsrs	r2, r2, #8
    f794:	709a      	strb	r2, [r3, #2]
  node_mac[3] = (*SAMR21_ADDR0) & 0xff;
    f796:	880a      	ldrh	r2, [r1, #0]
    f798:	70da      	strb	r2, [r3, #3]
  node_mac[4] = (*SAMR21_ADDR1) >> 24;
    f79a:	4908      	ldr	r1, [pc, #32]	; (f7bc <node_id_restore+0x54>)
    f79c:	2200      	movs	r2, #0
    f79e:	711a      	strb	r2, [r3, #4]
  node_mac[5] = (*SAMR21_ADDR1) >> 16;
    f7a0:	715a      	strb	r2, [r3, #5]
  node_mac[6] = (*SAMR21_ADDR1) >> 8;
    f7a2:	880a      	ldrh	r2, [r1, #0]
    f7a4:	0a12      	lsrs	r2, r2, #8
    f7a6:	719a      	strb	r2, [r3, #6]
  node_mac[7] = (*SAMR21_ADDR1) & 0xff;
    f7a8:	880a      	ldrh	r2, [r1, #0]
    f7aa:	71da      	strb	r2, [r3, #7]
  PRINTF("Node MAC is %u.%u.%u.%u.%u.%u.%u.%u.\n\r", 
    node_mac[0], node_mac[1], node_mac[2], node_mac[3], node_mac[4], node_mac[5],
    node_mac[6], node_mac[7]);
  PRINTF("Node ID is %u\n\r", node_id);
}
    f7ac:	4770      	bx	lr
    f7ae:	46c0      	nop			; (mov r8, r8)
    f7b0:	20001ee4 	.word	0x20001ee4
    f7b4:	20003518 	.word	0x20003518
    f7b8:	0080a00c 	.word	0x0080a00c
    f7bc:	0080a040 	.word	0x0080a040

0000f7c0 <clock_irq_callback>:
void _TC3_Handler(void);
#define TC3_WAIT_BUSY() while(REG_TC3_STATUS & TC_STATUS_SYNCBUSY)//rtc
/*---------------------------------------------------------------------------*/
static void
clock_irq_callback( struct tc_module *const module_inst)
{ 
    f7c0:	b508      	push	{r3, lr}
 // ENERGEST_ON(ENERGEST_TYPE_IRQ);

  ticks++;
    f7c2:	4b09      	ldr	r3, [pc, #36]	; (f7e8 <clock_irq_callback+0x28>)
    f7c4:	681a      	ldr	r2, [r3, #0]
    f7c6:	3201      	adds	r2, #1
    f7c8:	601a      	str	r2, [r3, #0]
  //port_pin_toggle_output_level(PIN_PA23);
  if((ticks % CLOCK_SECOND) == 0) {
    f7ca:	681b      	ldr	r3, [r3, #0]
    f7cc:	065b      	lsls	r3, r3, #25
    f7ce:	d103      	bne.n	f7d8 <clock_irq_callback+0x18>
    seconds++;
    f7d0:	4a06      	ldr	r2, [pc, #24]	; (f7ec <clock_irq_callback+0x2c>)
    f7d2:	6813      	ldr	r3, [r2, #0]
    f7d4:	3301      	adds	r3, #1
    f7d6:	6013      	str	r3, [r2, #0]
   //energest_flush();
    //    printf("seconds, ticks %d\n\r", tc_get_count_value(&tc_instance));
  }
  if(etimer_pending()) {
    f7d8:	4b05      	ldr	r3, [pc, #20]	; (f7f0 <clock_irq_callback+0x30>)
    f7da:	4798      	blx	r3
    f7dc:	2800      	cmp	r0, #0
    f7de:	d001      	beq.n	f7e4 <clock_irq_callback+0x24>
    etimer_request_poll();
    f7e0:	4b04      	ldr	r3, [pc, #16]	; (f7f4 <clock_irq_callback+0x34>)
    f7e2:	4798      	blx	r3
  }

  //ENERGEST_OFF(ENERGEST_TYPE_IRQ);
  
}
    f7e4:	bd08      	pop	{r3, pc}
    f7e6:	46c0      	nop			; (mov r8, r8)
    f7e8:	20001eec 	.word	0x20001eec
    f7ec:	20001ee8 	.word	0x20001ee8
    f7f0:	0000e975 	.word	0x0000e975
    f7f4:	0000e7c9 	.word	0x0000e7c9

0000f7f8 <clock_init>:
/*---------------------------------------------------------------------------*/
void
clock_init(void)
{
    f7f8:	b510      	push	{r4, lr}
    f7fa:	b08e      	sub	sp, #56	; 0x38
	/* Sanity check arguments */
	Assert(config);

	/* Write default config to config struct */
	config->clock_source               = GCLK_GENERATOR_0;
	config->counter_size               = TC_COUNTER_SIZE_16BIT;
    f7fc:	aa01      	add	r2, sp, #4
    f7fe:	2300      	movs	r3, #0
    f800:	7093      	strb	r3, [r2, #2]
	config->clock_prescaler            = TC_CLOCK_PRESCALER_DIV1;
    f802:	2100      	movs	r1, #0
    f804:	8093      	strh	r3, [r2, #4]
	config->wave_generation            = TC_WAVE_GENERATION_NORMAL_FREQ;
    f806:	7191      	strb	r1, [r2, #6]
	config->reload_action              = TC_RELOAD_ACTION_GCLK;
    f808:	8113      	strh	r3, [r2, #8]
	config->run_in_standby             = false;
    f80a:	7051      	strb	r1, [r2, #1]

	config->waveform_invert_output     = TC_WAVEFORM_INVERT_OUTPUT_NONE;
    f80c:	7291      	strb	r1, [r2, #10]
	config->enable_capture_on_channel[TC_COMPARE_CAPTURE_CHANNEL_0] = false;
    f80e:	72d1      	strb	r1, [r2, #11]
	config->enable_capture_on_channel[TC_COMPARE_CAPTURE_CHANNEL_1] = false;
    f810:	7311      	strb	r1, [r2, #12]

	config->count_direction            = TC_COUNT_DIRECTION_UP;
    f812:	7391      	strb	r1, [r2, #14]
	config->oneshot                    = false;
    f814:	7351      	strb	r1, [r2, #13]

	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].enabled = false;
    f816:	7411      	strb	r1, [r2, #16]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].pin_out = 0;
    f818:	6153      	str	r3, [r2, #20]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].pin_mux = 0;
    f81a:	6193      	str	r3, [r2, #24]

	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].enabled = false;
    f81c:	7711      	strb	r1, [r2, #28]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].pin_out = 0;
    f81e:	6213      	str	r3, [r2, #32]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].pin_mux = 0;
    f820:	6253      	str	r3, [r2, #36]	; 0x24

	config->counter_16_bit.value                   = 0x0000;
    f822:	8513      	strh	r3, [r2, #40]	; 0x28
	config->counter_16_bit.compare_capture_channel\
		[TC_COMPARE_CAPTURE_CHANNEL_0]                        = 0x0000;
	config->counter_16_bit.compare_capture_channel\
		[TC_COMPARE_CAPTURE_CHANNEL_1]                        = 0x0000;
    f824:	8593      	strh	r3, [r2, #44]	; 0x2c
#define TIMER         TC3
  
  struct tc_config cfg;
  tc_get_config_defaults(&cfg);

  cfg.clock_source = GCLK_GENERATOR_5;
    f826:	3305      	adds	r3, #5
    f828:	7013      	strb	r3, [r2, #0]
  cfg.clock_prescaler = TC_CLOCK_PRESCALER_DIV1;
  cfg.run_in_standby = false;

  cfg.counter_16_bit.compare_capture_channel[0] = TIMER_PERIOD;
    f82a:	3b06      	subs	r3, #6
    f82c:	8553      	strh	r3, [r2, #42]	; 0x2a
  tc_init(&tc_instance, TIMER, &cfg);
    f82e:	4c13      	ldr	r4, [pc, #76]	; (f87c <clock_init+0x84>)
    f830:	1c20      	adds	r0, r4, #0
    f832:	4913      	ldr	r1, [pc, #76]	; (f880 <clock_init+0x88>)
    f834:	4b13      	ldr	r3, [pc, #76]	; (f884 <clock_init+0x8c>)
    f836:	4798      	blx	r3
  /*  tc_register_callback(&tc_instance, clock_irq_callback, TC_CALLBACK_OVERFLOW);*/
  tc_register_callback(&tc_instance, clock_irq_callback, TC_CALLBACK_CC_CHANNEL0);
    f838:	1c20      	adds	r0, r4, #0
    f83a:	4913      	ldr	r1, [pc, #76]	; (f888 <clock_init+0x90>)
    f83c:	2202      	movs	r2, #2
    f83e:	4b13      	ldr	r3, [pc, #76]	; (f88c <clock_init+0x94>)
    f840:	4798      	blx	r3
	/* Sanity check arguments */
	Assert(module);


	/* Enable interrupts for this TC module */
	system_interrupt_enable(_tc_interrupt_get_interrupt_vector(_tc_get_inst_index(module->hw)));
    f842:	6820      	ldr	r0, [r4, #0]
    f844:	4b12      	ldr	r3, [pc, #72]	; (f890 <clock_init+0x98>)
    f846:	4798      	blx	r3
	static uint8_t tc_interrupt_vectors[TC_INST_NUM] =
		{
			MRECURSION(TC_INST_NUM, _TC_INTERRUPT_VECT_NUM, TC_INST_MAX_ID)
		};

	return (enum system_interrupt_vector)tc_interrupt_vectors[inst_num];
    f848:	4b12      	ldr	r3, [pc, #72]	; (f894 <clock_init+0x9c>)
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    f84a:	5c1b      	ldrb	r3, [r3, r0]
    f84c:	221f      	movs	r2, #31
    f84e:	4013      	ands	r3, r2
    f850:	3a1e      	subs	r2, #30
    f852:	409a      	lsls	r2, r3
    f854:	1c13      	adds	r3, r2, #0
    f856:	4a10      	ldr	r2, [pc, #64]	; (f898 <clock_init+0xa0>)
    f858:	6013      	str	r3, [r2, #0]
	/* Enable interrupts for this TC module */
	system_interrupt_enable(_tc_interrupt_get_interrupt_vector(_tc_get_inst_index(module->hw)));

	/* Enable callback */
	if (callback_type == TC_CALLBACK_CC_CHANNEL0) {
		module->enable_callback_mask |= TC_INTFLAG_MC(1);
    f85a:	7e62      	ldrb	r2, [r4, #25]
    f85c:	2310      	movs	r3, #16
    f85e:	4313      	orrs	r3, r2
    f860:	7663      	strb	r3, [r4, #25]
		module->hw->COUNT8.INTENSET.reg = TC_INTFLAG_MC(1);
    f862:	6822      	ldr	r2, [r4, #0]
    f864:	2310      	movs	r3, #16
    f866:	7353      	strb	r3, [r2, #13]
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);

	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    f868:	217f      	movs	r1, #127	; 0x7f
    f86a:	7bd3      	ldrb	r3, [r2, #15]
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);

	while (tc_is_syncing(module_inst)) {
    f86c:	438b      	bics	r3, r1
    f86e:	d1fc      	bne.n	f86a <clock_init+0x72>
		/* Wait for sync */
	}

	/* Enable TC module */
	tc_module->CTRLA.reg |= TC_CTRLA_ENABLE;
    f870:	8811      	ldrh	r1, [r2, #0]
    f872:	3302      	adds	r3, #2
    f874:	430b      	orrs	r3, r1
    f876:	8013      	strh	r3, [r2, #0]
      tc_enable_callback(&tc_instance, TC_CALLBACK_ERROR);*/
  
  tc_enable(&tc_instance);

 
}
    f878:	b00e      	add	sp, #56	; 0x38
    f87a:	bd10      	pop	{r4, pc}
    f87c:	20001ef0 	.word	0x20001ef0
    f880:	42002c00 	.word	0x42002c00
    f884:	0000236d 	.word	0x0000236d
    f888:	0000f7c1 	.word	0x0000f7c1
    f88c:	00002669 	.word	0x00002669
    f890:	00002335 	.word	0x00002335
    f894:	00012fc0 	.word	0x00012fc0
    f898:	e000e100 	.word	0xe000e100

0000f89c <clock_time>:
/*---------------------------------------------------------------------------*/
clock_time_t
clock_time(void)
{
    f89c:	b510      	push	{r4, lr}
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    f89e:	4b04      	ldr	r3, [pc, #16]	; (f8b0 <clock_time+0x14>)
    f8a0:	4798      	blx	r3
  //  printf("0x%04x\n\r", tc_get_count_value(&tc_instance));
  //  printf("clock_time ticks %d\n\r", ticks);
  clock_time_t t;

  system_interrupt_enter_critical_section();
  t = ticks;
    f8a2:	4b04      	ldr	r3, [pc, #16]	; (f8b4 <clock_time+0x18>)
    f8a4:	681c      	ldr	r4, [r3, #0]
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    f8a6:	4b04      	ldr	r3, [pc, #16]	; (f8b8 <clock_time+0x1c>)
    f8a8:	4798      	blx	r3
  system_interrupt_leave_critical_section();
  return t;
}
    f8aa:	1c20      	adds	r0, r4, #0
    f8ac:	bd10      	pop	{r4, pc}
    f8ae:	46c0      	nop			; (mov r8, r8)
    f8b0:	000001a5 	.word	0x000001a5
    f8b4:	20001eec 	.word	0x20001eec
    f8b8:	000001e5 	.word	0x000001e5

0000f8bc <clock_seconds>:
/*---------------------------------------------------------------------------*/
unsigned long 
clock_seconds(void)
{
  return seconds;
    f8bc:	4b01      	ldr	r3, [pc, #4]	; (f8c4 <clock_seconds+0x8>)
    f8be:	6818      	ldr	r0, [r3, #0]
}
    f8c0:	4770      	bx	lr
    f8c2:	46c0      	nop			; (mov r8, r8)
    f8c4:	20001ee8 	.word	0x20001ee8

0000f8c8 <rtc_overflow_callback>:
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
    f8c8:	4b07      	ldr	r3, [pc, #28]	; (f8e8 <rtc_overflow_callback+0x20>)
    f8ca:	681a      	ldr	r2, [r3, #0]
 * \param[in] vector  Interrupt vector to disable
 */
static inline void system_interrupt_disable(
		const enum system_interrupt_vector vector)
{
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    f8cc:	2008      	movs	r0, #8
    f8ce:	2380      	movs	r3, #128	; 0x80
    f8d0:	4906      	ldr	r1, [pc, #24]	; (f8ec <rtc_overflow_callback+0x24>)
    f8d2:	50c8      	str	r0, [r1, r3]
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;

        if (rtc_module->MODE0.STATUS.reg & RTC_STATUS_SYNCBUSY) {
    f8d4:	7a93      	ldrb	r3, [r2, #10]

#if RTC_COUNT_ASYNC == true
	system_interrupt_disable(SYSTEM_INTERRUPT_MODULE_RTC);
#endif

	while (rtc_count_is_syncing(module)) {
    f8d6:	b25b      	sxtb	r3, r3
    f8d8:	2b00      	cmp	r3, #0
    f8da:	dbfb      	blt.n	f8d4 <rtc_overflow_callback+0xc>
		/* Wait for synchronization */
	}

	/* Disable RTC module. */
	rtc_module->MODE0.CTRL.reg &= ~RTC_MODE0_CTRL_ENABLE;
    f8dc:	8813      	ldrh	r3, [r2, #0]
    f8de:	2102      	movs	r1, #2
    f8e0:	438b      	bics	r3, r1
    f8e2:	8013      	strh	r3, [r2, #0]
	//ENERGEST_ON(ENERGEST_TYPE_IRQ);	
	rtc_count_disable(&rtc_instance);
	//ENERGEST_OFF(ENERGEST_TYPE_IRQ);
	
	//! [overflow_act]
}
    f8e4:	4770      	bx	lr
    f8e6:	46c0      	nop			; (mov r8, r8)
    f8e8:	20003524 	.word	0x20003524
    f8ec:	e000e100 	.word	0xe000e100

0000f8f0 <rtimer_irq_callback>:
	//! [en_callback]
}

static void
rtimer_irq_callback( struct tc_module *const module_inst)
{
    f8f0:	b508      	push	{r3, lr}
	//ENERGEST_ON(ENERGEST_TYPE_IRQ);
  // rtimer_expired=1;
	rtimer_run_next();
    f8f2:	4b01      	ldr	r3, [pc, #4]	; (f8f8 <rtimer_irq_callback+0x8>)
    f8f4:	4798      	blx	r3
	//ENERGEST_OFF(ENERGEST_TYPE_IRQ);
}
    f8f6:	bd08      	pop	{r3, pc}
    f8f8:	0000ece1 	.word	0x0000ece1

0000f8fc <configure_rtc_count>:
}
//! [callback]

//! [initialize_rtc]
void configure_rtc_count(void)
{
    f8fc:	b500      	push	{lr}
    f8fe:	b085      	sub	sp, #20
	config->prescaler           = RTC_COUNT_PRESCALER_DIV_1024;
	config->mode                = RTC_COUNT_MODE_32BIT;
	config->clear_on_match      = false;
	config->continuously_update = false;
	for (uint8_t i = 0; i < RTC_NUM_OF_COMP16; i++) {
		config->compare_values[i] = 0;
    f900:	2300      	movs	r3, #0
    f902:	9302      	str	r3, [sp, #8]
    f904:	9303      	str	r3, [sp, #12]
	struct rtc_count_config config_rtc_count;
	rtc_count_get_config_defaults(&config_rtc_count);
	//! [init_conf]

	//! [set_config]
	config_rtc_count.prescaler           = RTC_COUNT_PRESCALER_DIV_32;
    f906:	22a0      	movs	r2, #160	; 0xa0
    f908:	00d2      	lsls	r2, r2, #3
    f90a:	4669      	mov	r1, sp
    f90c:	800a      	strh	r2, [r1, #0]
	config_rtc_count.mode                = RTC_COUNT_MODE_16BIT;
    f90e:	466a      	mov	r2, sp
    f910:	708b      	strb	r3, [r1, #2]
	config_rtc_count.clear_on_match      = true;
    f912:	3301      	adds	r3, #1
    f914:	70cb      	strb	r3, [r1, #3]
	config_rtc_count.continuously_update = true;
    f916:	710b      	strb	r3, [r1, #4]
	//! [set_config]
	//! [init_rtc]
	rtc_count_init(&rtc_instance, RTC, &config_rtc_count);
    f918:	4802      	ldr	r0, [pc, #8]	; (f924 <configure_rtc_count+0x28>)
    f91a:	4903      	ldr	r1, [pc, #12]	; (f928 <configure_rtc_count+0x2c>)
    f91c:	4b03      	ldr	r3, [pc, #12]	; (f92c <configure_rtc_count+0x30>)
    f91e:	4798      	blx	r3
	//! [init_rtc]

	//! [enable]
	
	//! [enable]
}
    f920:	b005      	add	sp, #20
    f922:	bd00      	pop	{pc}
    f924:	20003524 	.word	0x20003524
    f928:	40001400 	.word	0x40001400
    f92c:	000005c5 	.word	0x000005c5

0000f930 <configure_rtc_callbacks>:
//! [initialize_rtc]

//! [setup_callback]
void configure_rtc_callbacks(void)
{
    f930:	b510      	push	{r4, lr}
	//! [reg_callback]
	rtc_count_register_callback(
    f932:	4c05      	ldr	r4, [pc, #20]	; (f948 <configure_rtc_callbacks+0x18>)
    f934:	1c20      	adds	r0, r4, #0
    f936:	4905      	ldr	r1, [pc, #20]	; (f94c <configure_rtc_callbacks+0x1c>)
    f938:	2202      	movs	r2, #2
    f93a:	4b05      	ldr	r3, [pc, #20]	; (f950 <configure_rtc_callbacks+0x20>)
    f93c:	4798      	blx	r3
	&rtc_instance, rtc_overflow_callback, RTC_COUNT_CALLBACK_OVERFLOW);
	//! [reg_callback]
	//! [en_callback]
	rtc_count_enable_callback(&rtc_instance, RTC_COUNT_CALLBACK_OVERFLOW);
    f93e:	1c20      	adds	r0, r4, #0
    f940:	2102      	movs	r1, #2
    f942:	4b04      	ldr	r3, [pc, #16]	; (f954 <configure_rtc_callbacks+0x24>)
    f944:	4798      	blx	r3
	//! [en_callback]
}
    f946:	bd10      	pop	{r4, pc}
    f948:	20003524 	.word	0x20003524
    f94c:	0000f8c9 	.word	0x0000f8c9
    f950:	000006a5 	.word	0x000006a5
    f954:	000006e1 	.word	0x000006e1

0000f958 <rtimer_arch_init>:

	ENERGEST_OFF(ENERGEST_TYPE_IRQ);
}
void
rtimer_arch_init(void)
{
    f958:	b5f0      	push	{r4, r5, r6, r7, lr}
    f95a:	b08f      	sub	sp, #60	; 0x3c

	/* Write default config to config struct */
	config->clock_source               = GCLK_GENERATOR_0;
	config->counter_size               = TC_COUNTER_SIZE_16BIT;
	config->clock_prescaler            = TC_CLOCK_PRESCALER_DIV1;
	config->wave_generation            = TC_WAVE_GENERATION_NORMAL_FREQ;
    f95c:	aa01      	add	r2, sp, #4
    f95e:	2300      	movs	r3, #0
    f960:	2100      	movs	r1, #0
    f962:	7193      	strb	r3, [r2, #6]
	config->reload_action              = TC_RELOAD_ACTION_GCLK;
    f964:	8113      	strh	r3, [r2, #8]
	config->run_in_standby             = false;
    f966:	2000      	movs	r0, #0
    f968:	7050      	strb	r0, [r2, #1]

	config->waveform_invert_output     = TC_WAVEFORM_INVERT_OUTPUT_NONE;
    f96a:	7291      	strb	r1, [r2, #10]
	config->enable_capture_on_channel[TC_COMPARE_CAPTURE_CHANNEL_0] = false;
    f96c:	72d1      	strb	r1, [r2, #11]
	config->enable_capture_on_channel[TC_COMPARE_CAPTURE_CHANNEL_1] = false;
    f96e:	7311      	strb	r1, [r2, #12]

	config->count_direction            = TC_COUNT_DIRECTION_UP;
    f970:	7391      	strb	r1, [r2, #14]
	config->oneshot                    = false;
    f972:	7351      	strb	r1, [r2, #13]

	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].enabled = false;
    f974:	7411      	strb	r1, [r2, #16]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].pin_out = 0;
    f976:	6153      	str	r3, [r2, #20]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].pin_mux = 0;
    f978:	6193      	str	r3, [r2, #24]

	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].enabled = false;
    f97a:	7711      	strb	r1, [r2, #28]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].pin_out = 0;
    f97c:	6213      	str	r3, [r2, #32]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].pin_mux = 0;
    f97e:	6253      	str	r3, [r2, #36]	; 0x24

	config->counter_16_bit.value                   = 0x0000;
    f980:	8513      	strh	r3, [r2, #40]	; 0x28
	config->counter_16_bit.compare_capture_channel\
		[TC_COMPARE_CAPTURE_CHANNEL_0]                        = 0x0000;
    f982:	8553      	strh	r3, [r2, #42]	; 0x2a
	config->counter_16_bit.compare_capture_channel\
		[TC_COMPARE_CAPTURE_CHANNEL_1]                        = 0x0000;
    f984:	8593      	strh	r3, [r2, #44]	; 0x2c
#define TIMER         TC4

  struct tc_config cfg;
  tc_get_config_defaults(&cfg);

  cfg.clock_source = GCLK_GENERATOR_5;
    f986:	3305      	adds	r3, #5
    f988:	7013      	strb	r3, [r2, #0]
  cfg.clock_prescaler = TC_CLOCK_PRESCALER_DIV256;
    f98a:	23c0      	movs	r3, #192	; 0xc0
    f98c:	00db      	lsls	r3, r3, #3
    f98e:	8093      	strh	r3, [r2, #4]
  cfg.run_in_standby = false;
  cfg.counter_size = TC_COUNTER_SIZE_32BIT;
    f990:	2308      	movs	r3, #8
    f992:	7093      	strb	r3, [r2, #2]

  int ret = tc_init(&tc_instance, TIMER, &cfg);
    f994:	4c19      	ldr	r4, [pc, #100]	; (f9fc <rtimer_arch_init+0xa4>)
    f996:	4d1a      	ldr	r5, [pc, #104]	; (fa00 <rtimer_arch_init+0xa8>)
    f998:	1c20      	adds	r0, r4, #0
    f99a:	1c29      	adds	r1, r5, #0
    f99c:	4b19      	ldr	r3, [pc, #100]	; (fa04 <rtimer_arch_init+0xac>)
    f99e:	4798      	blx	r3
  tc_register_callback(&tc_instance, rtimer_irq_callback, TC_CALLBACK_CC_CHANNEL0);
    f9a0:	1c20      	adds	r0, r4, #0
    f9a2:	4919      	ldr	r1, [pc, #100]	; (fa08 <rtimer_arch_init+0xb0>)
    f9a4:	2202      	movs	r2, #2
    f9a6:	4b19      	ldr	r3, [pc, #100]	; (fa0c <rtimer_arch_init+0xb4>)
    f9a8:	4798      	blx	r3
	/* Sanity check arguments */
	Assert(module);


	/* Enable interrupts for this TC module */
	system_interrupt_enable(_tc_interrupt_get_interrupt_vector(_tc_get_inst_index(module->hw)));
    f9aa:	6820      	ldr	r0, [r4, #0]
    f9ac:	4f18      	ldr	r7, [pc, #96]	; (fa10 <rtimer_arch_init+0xb8>)
    f9ae:	47b8      	blx	r7
	static uint8_t tc_interrupt_vectors[TC_INST_NUM] =
		{
			MRECURSION(TC_INST_NUM, _TC_INTERRUPT_VECT_NUM, TC_INST_MAX_ID)
		};

	return (enum system_interrupt_vector)tc_interrupt_vectors[inst_num];
    f9b0:	4e18      	ldr	r6, [pc, #96]	; (fa14 <rtimer_arch_init+0xbc>)
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    f9b2:	5c33      	ldrb	r3, [r6, r0]
    f9b4:	221f      	movs	r2, #31
    f9b6:	4013      	ands	r3, r2
    f9b8:	3a1e      	subs	r2, #30
    f9ba:	409a      	lsls	r2, r3
    f9bc:	1c13      	adds	r3, r2, #0
    f9be:	4a16      	ldr	r2, [pc, #88]	; (fa18 <rtimer_arch_init+0xc0>)
    f9c0:	6013      	str	r3, [r2, #0]
	/* Enable interrupts for this TC module */
	system_interrupt_enable(_tc_interrupt_get_interrupt_vector(_tc_get_inst_index(module->hw)));

	/* Enable callback */
	if (callback_type == TC_CALLBACK_CC_CHANNEL0) {
		module->enable_callback_mask |= TC_INTFLAG_MC(1);
    f9c2:	7e62      	ldrb	r2, [r4, #25]
    f9c4:	2310      	movs	r3, #16
    f9c6:	4313      	orrs	r3, r2
    f9c8:	7663      	strb	r3, [r4, #25]
		module->hw->COUNT8.INTENSET.reg = TC_INTFLAG_MC(1);
    f9ca:	2310      	movs	r3, #16
    f9cc:	6822      	ldr	r2, [r4, #0]
    f9ce:	7353      	strb	r3, [r2, #13]
  tc_enable_callback(&tc_instance, TC_CALLBACK_CC_CHANNEL0);
  system_interrupt_set_priority(_tc_interrupt_get_interrupt_vector(_tc_get_inst_index(TC4)),SYSTEM_INTERRUPT_PRIORITY_LEVEL_1);//tc4 priority  
    f9d0:	1c28      	adds	r0, r5, #0
    f9d2:	47b8      	blx	r7
    f9d4:	5630      	ldrsb	r0, [r6, r0]
    f9d6:	2101      	movs	r1, #1
    f9d8:	4b10      	ldr	r3, [pc, #64]	; (fa1c <rtimer_arch_init+0xc4>)
    f9da:	4798      	blx	r3
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    f9dc:	6822      	ldr	r2, [r4, #0]
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);

	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    f9de:	217f      	movs	r1, #127	; 0x7f
    f9e0:	7bd3      	ldrb	r3, [r2, #15]
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);

	while (tc_is_syncing(module_inst)) {
    f9e2:	438b      	bics	r3, r1
    f9e4:	d1fc      	bne.n	f9e0 <rtimer_arch_init+0x88>
		/* Wait for sync */
	}

	/* Enable TC module */
	tc_module->CTRLA.reg |= TC_CTRLA_ENABLE;
    f9e6:	8811      	ldrh	r1, [r2, #0]
    f9e8:	3302      	adds	r3, #2
    f9ea:	430b      	orrs	r3, r1
    f9ec:	8013      	strh	r3, [r2, #0]
  tc_enable(&tc_instance);
  /* RTC Init */
  configure_rtc_count();
    f9ee:	4b0c      	ldr	r3, [pc, #48]	; (fa20 <rtimer_arch_init+0xc8>)
    f9f0:	4798      	blx	r3
  configure_rtc_callbacks();
    f9f2:	4b0c      	ldr	r3, [pc, #48]	; (fa24 <rtimer_arch_init+0xcc>)
    f9f4:	4798      	blx	r3
  //  printf("----------------------- rtimer_arch_init ret %02x\n\r", ret);
  ret = ret;  // dummy
}
    f9f6:	b00f      	add	sp, #60	; 0x3c
    f9f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    f9fa:	46c0      	nop			; (mov r8, r8)
    f9fc:	20001f0c 	.word	0x20001f0c
    fa00:	42003000 	.word	0x42003000
    fa04:	0000236d 	.word	0x0000236d
    fa08:	0000f8f1 	.word	0x0000f8f1
    fa0c:	00002669 	.word	0x00002669
    fa10:	00002335 	.word	0x00002335
    fa14:	00012fc4 	.word	0x00012fc4
    fa18:	e000e100 	.word	0xe000e100
    fa1c:	000021dd 	.word	0x000021dd
    fa20:	0000f8fd 	.word	0x0000f8fd
    fa24:	0000f931 	.word	0x0000f931

0000fa28 <rtimer_arch_now>:
/*---------------------------------------------------------------------------*/
rtimer_clock_t
rtimer_arch_now(void)
{
    fa28:	b508      	push	{r3, lr}
  rtimer_clock_t t = tc_get_count_value(&tc_instance);
    fa2a:	4802      	ldr	r0, [pc, #8]	; (fa34 <rtimer_arch_now+0xc>)
    fa2c:	4b02      	ldr	r3, [pc, #8]	; (fa38 <rtimer_arch_now+0x10>)
    fa2e:	4798      	blx	r3
  //  printf("rtimer_arch_now: t 0x%08x\n\r", t);
  return t;
}
    fa30:	bd08      	pop	{r3, pc}
    fa32:	46c0      	nop			; (mov r8, r8)
    fa34:	20001f0c 	.word	0x20001f0c
    fa38:	000025e5 	.word	0x000025e5

0000fa3c <rtimer_arch_schedule>:
/*---------------------------------------------------------------------------*/
void
rtimer_arch_schedule(rtimer_clock_t t)
{
    fa3c:	b510      	push	{r4, lr}
	uint32_t expiry = t + RTIMER_SYNC_VALUE- RTIMER_COMPENSATION_TICKS;
    fa3e:	300a      	adds	r0, #10
    fa40:	1c04      	adds	r4, r0, #0
	
	
	if(RTIMER_CLOCK_LT(expiry, rtimer_arch_now())) {
    fa42:	4b0a      	ldr	r3, [pc, #40]	; (fa6c <rtimer_arch_schedule+0x30>)
    fa44:	4798      	blx	r3
    fa46:	1a20      	subs	r0, r4, r0
    fa48:	0403      	lsls	r3, r0, #16
    fa4a:	d509      	bpl.n	fa60 <rtimer_arch_schedule+0x24>
		/* too soon, run now instead */
		printf("rtimer: schedule too soon, executing now! %lu %lu\n\r",expiry,(uint32_t)rtimer_arch_now());
    fa4c:	4b07      	ldr	r3, [pc, #28]	; (fa6c <rtimer_arch_schedule+0x30>)
    fa4e:	4798      	blx	r3
    fa50:	1c02      	adds	r2, r0, #0
    fa52:	4807      	ldr	r0, [pc, #28]	; (fa70 <rtimer_arch_schedule+0x34>)
    fa54:	1c21      	adds	r1, r4, #0
    fa56:	4b07      	ldr	r3, [pc, #28]	; (fa74 <rtimer_arch_schedule+0x38>)
    fa58:	4798      	blx	r3
		rtimer_run_next();
    fa5a:	4b07      	ldr	r3, [pc, #28]	; (fa78 <rtimer_arch_schedule+0x3c>)
    fa5c:	4798      	blx	r3
		return;
    fa5e:	e004      	b.n	fa6a <rtimer_arch_schedule+0x2e>
	///* set compare match on time t */
	//TC45_WAIT_BUSY();
	//REG_TC4_COUNT32_CC0 = expiry;
	///* enable interrupts */
	//REG_TC4_INTENSET = TC_INT_MC0;
	tc_set_compare_value(&tc_instance,TC_COMPARE_CAPTURE_CHANNEL_0,expiry);
    fa60:	4806      	ldr	r0, [pc, #24]	; (fa7c <rtimer_arch_schedule+0x40>)
    fa62:	2100      	movs	r1, #0
    fa64:	1c22      	adds	r2, r4, #0
    fa66:	4b06      	ldr	r3, [pc, #24]	; (fa80 <rtimer_arch_schedule+0x44>)
    fa68:	4798      	blx	r3
}
    fa6a:	bd10      	pop	{r4, pc}
    fa6c:	0000fa29 	.word	0x0000fa29
    fa70:	00012fc8 	.word	0x00012fc8
    fa74:	00010b79 	.word	0x00010b79
    fa78:	0000ece1 	.word	0x0000ece1
    fa7c:	20001f0c 	.word	0x20001f0c
    fa80:	00002615 	.word	0x00002615

0000fa84 <main>:

/*---------------------------------------------------------------------------*/

int
main(int argc, char *argv[])
{
    fa84:	b5f0      	push	{r4, r5, r6, r7, lr}
    fa86:	464f      	mov	r7, r9
    fa88:	4646      	mov	r6, r8
    fa8a:	b4c0      	push	{r6, r7}
    fa8c:	b085      	sub	sp, #20
	uint8_t *eui64 = NULL;
	/* init system: clocks, board etc */

	system_init();
    fa8e:	4bb8      	ldr	r3, [pc, #736]	; (fd70 <main+0x2ec>)
    fa90:	4798      	blx	r3

	//init_serial();
	sio2host_init();
    fa92:	4bb8      	ldr	r3, [pc, #736]	; (fd74 <main+0x2f0>)
    fa94:	4798      	blx	r3

	leds_init();
    fa96:	4bb8      	ldr	r3, [pc, #736]	; (fd78 <main+0x2f4>)
    fa98:	4798      	blx	r3
	leds_on(LEDS_ALL);
    fa9a:	2003      	movs	r0, #3
    fa9c:	4bb7      	ldr	r3, [pc, #732]	; (fd7c <main+0x2f8>)
    fa9e:	4798      	blx	r3
 *
 * Enables global interrupts in the device to fire any enabled interrupt handlers.
 */
static inline void system_interrupt_enable_global(void)
{
	cpu_irq_enable();
    faa0:	2201      	movs	r2, #1
    faa2:	4bb7      	ldr	r3, [pc, #732]	; (fd80 <main+0x2fc>)
    faa4:	701a      	strb	r2, [r3, #0]
    faa6:	f3bf 8f5f 	dmb	sy
    faaa:	b662      	cpsie	i

	system_interrupt_enable_global();
	//system_set_sleepmode(SYSTEM_SLEEPMODE_IDLE_0); //sleepmode 2 for rtc
	flash_init();
    faac:	4bb5      	ldr	r3, [pc, #724]	; (fd84 <main+0x300>)
    faae:	4798      	blx	r3

	delay_init();
    fab0:	4bb5      	ldr	r3, [pc, #724]	; (fd88 <main+0x304>)
    fab2:	4798      	blx	r3
	/* Initialize Contiki and our processes. */
	
	#ifdef LOW_POWER_MODE
	configure_tc3();
	#else
	clock_init();
    fab4:	4bb5      	ldr	r3, [pc, #724]	; (fd8c <main+0x308>)
    fab6:	4798      	blx	r3
	#endif

	ctimer_init();
    fab8:	4bb5      	ldr	r3, [pc, #724]	; (fd90 <main+0x30c>)
    faba:	4798      	blx	r3
	

	rtimer_init();
    fabc:	4bb5      	ldr	r3, [pc, #724]	; (fd94 <main+0x310>)
    fabe:	4798      	blx	r3
	
	
	//printf("\r\n B4 Watchdog init");
	
	//printf("\r\n Aft Watchdog init");
	process_init();
    fac0:	4bb5      	ldr	r3, [pc, #724]	; (fd98 <main+0x314>)
    fac2:	4798      	blx	r3
	process_start(&etimer_process, NULL);
    fac4:	48b5      	ldr	r0, [pc, #724]	; (fd9c <main+0x318>)
    fac6:	2100      	movs	r1, #0
    fac8:	4bb5      	ldr	r3, [pc, #724]	; (fda0 <main+0x31c>)
    faca:	4798      	blx	r3
	node_id_burn(node_id);
	#endif /* BURN_NODEID */
	#else/* NODE_ID */
	#endif /* NODE_ID */

	node_id_restore();
    facc:	4bb5      	ldr	r3, [pc, #724]	; (fda4 <main+0x320>)
    face:	4798      	blx	r3
	printf("\r\n\n\n\n Starting the SmartConnect-6LoWPAN \r\n Platform : Atmel IoT device \r\n\r");
    fad0:	48b5      	ldr	r0, [pc, #724]	; (fda8 <main+0x324>)
    fad2:	4db6      	ldr	r5, [pc, #728]	; (fdac <main+0x328>)
    fad4:	47a8      	blx	r5
	* \return     Returns nothing
	*/
	static void
	print_reset_causes(void)
	{
		uint8_t rcause = *((uint8_t *)REG_RCAUSE);
    fad6:	4bb6      	ldr	r3, [pc, #728]	; (fdb0 <main+0x32c>)
    fad8:	781c      	ldrb	r4, [r3, #0]
		printf("Last reset cause: ");
    fada:	48b6      	ldr	r0, [pc, #728]	; (fdb4 <main+0x330>)
    fadc:	47a8      	blx	r5
		if(rcause & (1 << 6)) {
    fade:	0663      	lsls	r3, r4, #25
    fae0:	d502      	bpl.n	fae8 <main+0x64>
			printf("System Reset Request\n\r");
    fae2:	48b5      	ldr	r0, [pc, #724]	; (fdb8 <main+0x334>)
    fae4:	4bb1      	ldr	r3, [pc, #708]	; (fdac <main+0x328>)
    fae6:	4798      	blx	r3
		}
		if(rcause & (1 << 5)) {
    fae8:	06a3      	lsls	r3, r4, #26
    faea:	d502      	bpl.n	faf2 <main+0x6e>
			printf("Watchdog Reset\n\r");
    faec:	48b3      	ldr	r0, [pc, #716]	; (fdbc <main+0x338>)
    faee:	4baf      	ldr	r3, [pc, #700]	; (fdac <main+0x328>)
    faf0:	4798      	blx	r3
		}
		if(rcause & (1 << 4)) {
    faf2:	06e3      	lsls	r3, r4, #27
    faf4:	d502      	bpl.n	fafc <main+0x78>
			printf("External Reset\n\r");
    faf6:	48b2      	ldr	r0, [pc, #712]	; (fdc0 <main+0x33c>)
    faf8:	4bac      	ldr	r3, [pc, #688]	; (fdac <main+0x328>)
    fafa:	4798      	blx	r3
		}
		if(rcause & (1 << 2)) {
    fafc:	0763      	lsls	r3, r4, #29
    fafe:	d502      	bpl.n	fb06 <main+0x82>
			printf("Brown Out 33 Detector Reset\n\r");
    fb00:	48b0      	ldr	r0, [pc, #704]	; (fdc4 <main+0x340>)
    fb02:	4baa      	ldr	r3, [pc, #680]	; (fdac <main+0x328>)
    fb04:	4798      	blx	r3
		}
		if(rcause & (1 << 1)) {
    fb06:	07a3      	lsls	r3, r4, #30
    fb08:	d502      	bpl.n	fb10 <main+0x8c>
			printf("Brown Out 12 Detector Reset\n\r");
    fb0a:	48af      	ldr	r0, [pc, #700]	; (fdc8 <main+0x344>)
    fb0c:	4ba7      	ldr	r3, [pc, #668]	; (fdac <main+0x328>)
    fb0e:	4798      	blx	r3
		}
		if(rcause & (1 << 0)) {
    fb10:	07e3      	lsls	r3, r4, #31
    fb12:	d400      	bmi.n	fb16 <main+0x92>
    fb14:	e10e      	b.n	fd34 <main+0x2b0>
			printf("Power-On Reset\n\r");
    fb16:	48ad      	ldr	r0, [pc, #692]	; (fdcc <main+0x348>)
    fb18:	4ba4      	ldr	r3, [pc, #656]	; (fdac <main+0x328>)
    fb1a:	4798      	blx	r3
    fb1c:	e10a      	b.n	fd34 <main+0x2b0>
		}
		#endif  /* UIP_CONF_IPV6 */
		linkaddr_set_node_addr(&addr);
		printf("Link layer addr ");
		for(i = 0; i < sizeof(addr.u8) - 1; i++) {
			printf("%u:", addr.u8[i]);
    fb1e:	466b      	mov	r3, sp
    fb20:	5ce1      	ldrb	r1, [r4, r3]
    fb22:	1c38      	adds	r0, r7, #0
    fb24:	47b0      	blx	r6
			addr.u8[1] = node_id >> 8;
		}
		#endif  /* UIP_CONF_IPV6 */
		linkaddr_set_node_addr(&addr);
		printf("Link layer addr ");
		for(i = 0; i < sizeof(addr.u8) - 1; i++) {
    fb26:	3401      	adds	r4, #1
    fb28:	2c07      	cmp	r4, #7
    fb2a:	d1f8      	bne.n	fb1e <main+0x9a>
    fb2c:	e117      	b.n	fd5e <main+0x2da>
			printf("%u:", addr.u8[i]);
		}
		printf("%u, ", addr.u8[i]);
		for(i = 0; i < sizeof(addr.u8) - 1; i++) {
			printf("%02x:", addr.u8[i]);
    fb2e:	466b      	mov	r3, sp
    fb30:	5ce1      	ldrb	r1, [r4, r3]
    fb32:	1c38      	adds	r0, r7, #0
    fb34:	47b0      	blx	r6
		printf("Link layer addr ");
		for(i = 0; i < sizeof(addr.u8) - 1; i++) {
			printf("%u:", addr.u8[i]);
		}
		printf("%u, ", addr.u8[i]);
		for(i = 0; i < sizeof(addr.u8) - 1; i++) {
    fb36:	3401      	adds	r4, #1
    fb38:	2c07      	cmp	r4, #7
    fb3a:	d1f8      	bne.n	fb2e <main+0xaa>
			printf("%02x:", addr.u8[i]);
		}
		printf("%02x\n\r", addr.u8[i]);
    fb3c:	466b      	mov	r3, sp
    fb3e:	79d9      	ldrb	r1, [r3, #7]
    fb40:	48a3      	ldr	r0, [pc, #652]	; (fdd0 <main+0x34c>)
    fb42:	4e9a      	ldr	r6, [pc, #616]	; (fdac <main+0x328>)
    fb44:	47b0      	blx	r6
	print_reset_causes();
	#if SAMR21
	eui64 = edbg_eui_read_eui64();
	#endif
	set_link_addr(eui64);
	random_init(node_id);
    fb46:	4ca3      	ldr	r4, [pc, #652]	; (fdd4 <main+0x350>)
    fb48:	8820      	ldrh	r0, [r4, #0]
    fb4a:	4ba3      	ldr	r3, [pc, #652]	; (fdd8 <main+0x354>)
    fb4c:	4798      	blx	r3

	netstack_init();
    fb4e:	4ba3      	ldr	r3, [pc, #652]	; (fddc <main+0x358>)
    fb50:	4798      	blx	r3
	rf_set_channel(RF_CHANNEL);
    fb52:	2019      	movs	r0, #25
    fb54:	4ba2      	ldr	r3, [pc, #648]	; (fde0 <main+0x35c>)
    fb56:	4798      	blx	r3
	printf("rf channel: %d\n\r", rf_get_channel());
    fb58:	4ba2      	ldr	r3, [pc, #648]	; (fde4 <main+0x360>)
    fb5a:	4798      	blx	r3
    fb5c:	1c01      	adds	r1, r0, #0
    fb5e:	48a2      	ldr	r0, [pc, #648]	; (fde8 <main+0x364>)
    fb60:	47b0      	blx	r6
	leds_off(LEDS_ALL);
    fb62:	2003      	movs	r0, #3
    fb64:	4ba1      	ldr	r3, [pc, #644]	; (fdec <main+0x368>)
    fb66:	4798      	blx	r3
	/*  temp_sensor_init();
	voltage_sensor_init();*/
	// button_sensor_init();
	process_start(&sensors_process, NULL);
    fb68:	48a1      	ldr	r0, [pc, #644]	; (fdf0 <main+0x36c>)
    fb6a:	2100      	movs	r1, #0
    fb6c:	4b8c      	ldr	r3, [pc, #560]	; (fda0 <main+0x31c>)
    fb6e:	4798      	blx	r3
	energest_init();
    fb70:	4ba0      	ldr	r3, [pc, #640]	; (fdf4 <main+0x370>)
    fb72:	4798      	blx	r3

	ENERGEST_ON(ENERGEST_TYPE_CPU);
    fb74:	4ba0      	ldr	r3, [pc, #640]	; (fdf8 <main+0x374>)
    fb76:	4798      	blx	r3
    fb78:	4ba0      	ldr	r3, [pc, #640]	; (fdfc <main+0x378>)
    fb7a:	6018      	str	r0, [r3, #0]
    fb7c:	2201      	movs	r2, #1
    fb7e:	4ba0      	ldr	r3, [pc, #640]	; (fe00 <main+0x37c>)
    fb80:	701a      	strb	r2, [r3, #0]
	if(node_id > 0) {
    fb82:	8821      	ldrh	r1, [r4, #0]
    fb84:	2900      	cmp	r1, #0
    fb86:	d003      	beq.n	fb90 <main+0x10c>
		printf("Node id %u.\n\r", node_id);
    fb88:	489e      	ldr	r0, [pc, #632]	; (fe04 <main+0x380>)
    fb8a:	4b88      	ldr	r3, [pc, #544]	; (fdac <main+0x328>)
    fb8c:	4798      	blx	r3
    fb8e:	e002      	b.n	fb96 <main+0x112>
		} else {
		printf("Node id not set.\n\r");
    fb90:	489d      	ldr	r0, [pc, #628]	; (fe08 <main+0x384>)
    fb92:	4b86      	ldr	r3, [pc, #536]	; (fdac <main+0x328>)
    fb94:	4798      	blx	r3

	/* Setup nullmac-like MAC for 802.15.4 */
	#if SAMD
	memcpy(&uip_lladdr.addr, node_mac, sizeof(uip_lladdr.addr));
	#else
	memcpy(&uip_lladdr.addr, eui64, sizeof(uip_lladdr.addr));
    fb96:	489d      	ldr	r0, [pc, #628]	; (fe0c <main+0x388>)
    fb98:	1c29      	adds	r1, r5, #0
    fb9a:	2208      	movs	r2, #8
    fb9c:	4b9c      	ldr	r3, [pc, #624]	; (fe10 <main+0x38c>)
    fb9e:	4798      	blx	r3
	#endif
	
	queuebuf_init();
    fba0:	4b9c      	ldr	r3, [pc, #624]	; (fe14 <main+0x390>)
    fba2:	4798      	blx	r3
	printf("%s %lu %d\n\r",
    fba4:	4b9c      	ldr	r3, [pc, #624]	; (fe18 <main+0x394>)
    fba6:	681d      	ldr	r5, [r3, #0]
	NETSTACK_RDC.name,
	(uint32_t) (CLOCK_SECOND / (NETSTACK_RDC.channel_check_interval() == 0 ? 1:
    fba8:	69dc      	ldr	r4, [r3, #28]
    fbaa:	47a0      	blx	r4
	#else
	memcpy(&uip_lladdr.addr, eui64, sizeof(uip_lladdr.addr));
	#endif
	
	queuebuf_init();
	printf("%s %lu %d\n\r",
    fbac:	2280      	movs	r2, #128	; 0x80
    fbae:	2800      	cmp	r0, #0
    fbb0:	d005      	beq.n	fbbe <main+0x13a>
	NETSTACK_RDC.name,
	(uint32_t) (CLOCK_SECOND / (NETSTACK_RDC.channel_check_interval() == 0 ? 1:
	NETSTACK_RDC.channel_check_interval())),
    fbb2:	47a0      	blx	r4
    fbb4:	1c01      	adds	r1, r0, #0
	#endif
	
	queuebuf_init();
	printf("%s %lu %d\n\r",
	NETSTACK_RDC.name,
	(uint32_t) (CLOCK_SECOND / (NETSTACK_RDC.channel_check_interval() == 0 ? 1:
    fbb6:	2080      	movs	r0, #128	; 0x80
    fbb8:	4b98      	ldr	r3, [pc, #608]	; (fe1c <main+0x398>)
    fbba:	4798      	blx	r3
    fbbc:	1c02      	adds	r2, r0, #0
	#else
	memcpy(&uip_lladdr.addr, eui64, sizeof(uip_lladdr.addr));
	#endif
	
	queuebuf_init();
	printf("%s %lu %d\n\r",
    fbbe:	4898      	ldr	r0, [pc, #608]	; (fe20 <main+0x39c>)
    fbc0:	1c29      	adds	r1, r5, #0
    fbc2:	2319      	movs	r3, #25
    fbc4:	4c79      	ldr	r4, [pc, #484]	; (fdac <main+0x328>)
    fbc6:	47a0      	blx	r4
	NETSTACK_RDC.name,
	(uint32_t) (CLOCK_SECOND / (NETSTACK_RDC.channel_check_interval() == 0 ? 1:
	NETSTACK_RDC.channel_check_interval())),
	RF_CHANNEL);

	process_start(&tcpip_process, NULL);
    fbc8:	4896      	ldr	r0, [pc, #600]	; (fe24 <main+0x3a0>)
    fbca:	2100      	movs	r1, #0
    fbcc:	4b74      	ldr	r3, [pc, #464]	; (fda0 <main+0x31c>)
    fbce:	4798      	blx	r3
	printf("IPv6 ");
    fbd0:	4895      	ldr	r0, [pc, #596]	; (fe28 <main+0x3a4>)
    fbd2:	47a0      	blx	r4
	{
		uip_ds6_addr_t *lladdr;
		int i;
		lladdr = uip_ds6_get_link_local(-1);
    fbd4:	2001      	movs	r0, #1
    fbd6:	4240      	negs	r0, r0
    fbd8:	4b94      	ldr	r3, [pc, #592]	; (fe2c <main+0x3a8>)
    fbda:	4798      	blx	r3
    fbdc:	1c05      	adds	r5, r0, #0
    fbde:	1c44      	adds	r4, r0, #1
    fbe0:	230f      	movs	r3, #15
    fbe2:	4698      	mov	r8, r3
    fbe4:	4480      	add	r8, r0
		for(i = 0; i < 7; ++i) {
			printf("%02x%02x:", lladdr->ipaddr.u8[i * 2],
    fbe6:	4f92      	ldr	r7, [pc, #584]	; (fe30 <main+0x3ac>)
    fbe8:	4e70      	ldr	r6, [pc, #448]	; (fdac <main+0x328>)
    fbea:	7821      	ldrb	r1, [r4, #0]
    fbec:	7862      	ldrb	r2, [r4, #1]
    fbee:	1c38      	adds	r0, r7, #0
    fbf0:	47b0      	blx	r6
    fbf2:	3402      	adds	r4, #2
	printf("IPv6 ");
	{
		uip_ds6_addr_t *lladdr;
		int i;
		lladdr = uip_ds6_get_link_local(-1);
		for(i = 0; i < 7; ++i) {
    fbf4:	4544      	cmp	r4, r8
    fbf6:	d1f8      	bne.n	fbea <main+0x166>
			printf("%02x%02x:", lladdr->ipaddr.u8[i * 2],
			lladdr->ipaddr.u8[i * 2 + 1]);
		}
		printf("%02x%02x\n\r", lladdr->ipaddr.u8[14], lladdr->ipaddr.u8[15]);
    fbf8:	7be9      	ldrb	r1, [r5, #15]
    fbfa:	7c2a      	ldrb	r2, [r5, #16]
    fbfc:	488d      	ldr	r0, [pc, #564]	; (fe34 <main+0x3b0>)
    fbfe:	4c6b      	ldr	r4, [pc, #428]	; (fdac <main+0x328>)
    fc00:	47a0      	blx	r4
	}

	{
		uip_ipaddr_t ipaddr;
		int i;
		uip_ip6addr(&ipaddr, 0xaaaa, 0, 0, 0, 0, 0, 0, 0);
    fc02:	4b8d      	ldr	r3, [pc, #564]	; (fe38 <main+0x3b4>)
    fc04:	466a      	mov	r2, sp
    fc06:	8013      	strh	r3, [r2, #0]
    fc08:	2300      	movs	r3, #0
    fc0a:	8053      	strh	r3, [r2, #2]
    fc0c:	8093      	strh	r3, [r2, #4]
    fc0e:	80d3      	strh	r3, [r2, #6]
    fc10:	8113      	strh	r3, [r2, #8]
    fc12:	8153      	strh	r3, [r2, #10]
    fc14:	8193      	strh	r3, [r2, #12]
    fc16:	81d3      	strh	r3, [r2, #14]
		uip_ds6_set_addr_iid(&ipaddr, &uip_lladdr);
    fc18:	4668      	mov	r0, sp
    fc1a:	497c      	ldr	r1, [pc, #496]	; (fe0c <main+0x388>)
    fc1c:	4b87      	ldr	r3, [pc, #540]	; (fe3c <main+0x3b8>)
    fc1e:	4798      	blx	r3
		uip_ds6_addr_add(&ipaddr, 0, ADDR_TENTATIVE);
    fc20:	4668      	mov	r0, sp
    fc22:	2100      	movs	r1, #0
    fc24:	2200      	movs	r2, #0
    fc26:	4b86      	ldr	r3, [pc, #536]	; (fe40 <main+0x3bc>)
    fc28:	4798      	blx	r3
		printf("Tentative global IPv6 address ");
    fc2a:	4886      	ldr	r0, [pc, #536]	; (fe44 <main+0x3c0>)
    fc2c:	47a0      	blx	r4
    fc2e:	466c      	mov	r4, sp
    fc30:	270e      	movs	r7, #14
    fc32:	446f      	add	r7, sp
		for(i = 0; i < 7; ++i) {
			printf("%02x%02x:",
    fc34:	4e7e      	ldr	r6, [pc, #504]	; (fe30 <main+0x3ac>)
    fc36:	4d5d      	ldr	r5, [pc, #372]	; (fdac <main+0x328>)
    fc38:	7821      	ldrb	r1, [r4, #0]
    fc3a:	7862      	ldrb	r2, [r4, #1]
    fc3c:	1c30      	adds	r0, r6, #0
    fc3e:	47a8      	blx	r5
    fc40:	3402      	adds	r4, #2
		int i;
		uip_ip6addr(&ipaddr, 0xaaaa, 0, 0, 0, 0, 0, 0, 0);
		uip_ds6_set_addr_iid(&ipaddr, &uip_lladdr);
		uip_ds6_addr_add(&ipaddr, 0, ADDR_TENTATIVE);
		printf("Tentative global IPv6 address ");
		for(i = 0; i < 7; ++i) {
    fc42:	42bc      	cmp	r4, r7
    fc44:	d1f8      	bne.n	fc38 <main+0x1b4>
			printf("%02x%02x:",
			ipaddr.u8[i * 2], ipaddr.u8[i * 2 + 1]);
		}
		printf("%02x%02x\r\n\r",
    fc46:	466b      	mov	r3, sp
    fc48:	7b99      	ldrb	r1, [r3, #14]
    fc4a:	7bda      	ldrb	r2, [r3, #15]
    fc4c:	487e      	ldr	r0, [pc, #504]	; (fe48 <main+0x3c4>)
    fc4e:	4c57      	ldr	r4, [pc, #348]	; (fdac <main+0x328>)
    fc50:	47a0      	blx	r4
	}
	/*---------------------------------------------------------------------------*/
	static void
	print_processes(struct process * const processes[])
	{
		printf("Starting");
    fc52:	487e      	ldr	r0, [pc, #504]	; (fe4c <main+0x3c8>)
    fc54:	47a0      	blx	r4
		while(*processes != NULL) {
    fc56:	4b7e      	ldr	r3, [pc, #504]	; (fe50 <main+0x3cc>)
    fc58:	681b      	ldr	r3, [r3, #0]
    fc5a:	2b00      	cmp	r3, #0
    fc5c:	d009      	beq.n	fc72 <main+0x1ee>
    fc5e:	4c7c      	ldr	r4, [pc, #496]	; (fe50 <main+0x3cc>)
			printf(" %s", (*processes)->name);
    fc60:	4e7c      	ldr	r6, [pc, #496]	; (fe54 <main+0x3d0>)
    fc62:	4d52      	ldr	r5, [pc, #328]	; (fdac <main+0x328>)
    fc64:	6859      	ldr	r1, [r3, #4]
    fc66:	1c30      	adds	r0, r6, #0
    fc68:	47a8      	blx	r5
			processes++;
    fc6a:	3404      	adds	r4, #4
	/*---------------------------------------------------------------------------*/
	static void
	print_processes(struct process * const processes[])
	{
		printf("Starting");
		while(*processes != NULL) {
    fc6c:	6823      	ldr	r3, [r4, #0]
    fc6e:	2b00      	cmp	r3, #0
    fc70:	d1f8      	bne.n	fc64 <main+0x1e0>
			printf(" %s", (*processes)->name);
			processes++;
		}
		putchar('\n');
    fc72:	4b79      	ldr	r3, [pc, #484]	; (fe58 <main+0x3d4>)
    fc74:	6818      	ldr	r0, [r3, #0]
    fc76:	6882      	ldr	r2, [r0, #8]
    fc78:	6893      	ldr	r3, [r2, #8]
    fc7a:	3b01      	subs	r3, #1
    fc7c:	6093      	str	r3, [r2, #8]
    fc7e:	2b00      	cmp	r3, #0
    fc80:	da19      	bge.n	fcb6 <main+0x232>
    fc82:	6882      	ldr	r2, [r0, #8]
    fc84:	6893      	ldr	r3, [r2, #8]
    fc86:	6991      	ldr	r1, [r2, #24]
    fc88:	428b      	cmp	r3, r1
    fc8a:	db10      	blt.n	fcae <main+0x22a>
    fc8c:	6813      	ldr	r3, [r2, #0]
    fc8e:	220a      	movs	r2, #10
    fc90:	701a      	strb	r2, [r3, #0]
    fc92:	4b71      	ldr	r3, [pc, #452]	; (fe58 <main+0x3d4>)
    fc94:	6818      	ldr	r0, [r3, #0]
    fc96:	6882      	ldr	r2, [r0, #8]
    fc98:	6813      	ldr	r3, [r2, #0]
    fc9a:	7819      	ldrb	r1, [r3, #0]
    fc9c:	290a      	cmp	r1, #10
    fc9e:	d002      	beq.n	fca6 <main+0x222>
    fca0:	3301      	adds	r3, #1
    fca2:	6013      	str	r3, [r2, #0]
    fca4:	e011      	b.n	fcca <main+0x246>
    fca6:	210a      	movs	r1, #10
    fca8:	4b6c      	ldr	r3, [pc, #432]	; (fe5c <main+0x3d8>)
    fcaa:	4798      	blx	r3
    fcac:	e00d      	b.n	fcca <main+0x246>
    fcae:	210a      	movs	r1, #10
    fcb0:	4b6a      	ldr	r3, [pc, #424]	; (fe5c <main+0x3d8>)
    fcb2:	4798      	blx	r3
    fcb4:	e009      	b.n	fcca <main+0x246>
    fcb6:	6883      	ldr	r3, [r0, #8]
    fcb8:	681b      	ldr	r3, [r3, #0]
    fcba:	220a      	movs	r2, #10
    fcbc:	701a      	strb	r2, [r3, #0]
    fcbe:	4b66      	ldr	r3, [pc, #408]	; (fe58 <main+0x3d4>)
    fcc0:	681b      	ldr	r3, [r3, #0]
    fcc2:	689a      	ldr	r2, [r3, #8]
    fcc4:	6813      	ldr	r3, [r2, #0]
    fcc6:	3301      	adds	r3, #1
    fcc8:	6013      	str	r3, [r2, #0]
		const uint8_t key[] = NETSTACK_AES_KEY;
		netstack_aes_set_key(key);
	}
	printf("AES encryption is enabled\n\r");
	#else /* ((THSQ_CONF_NETSTACK) & THSQ_CONF_AES) */
	printf("\r\n Warning: AES encryption is disabled\n\r");
    fcca:	4865      	ldr	r0, [pc, #404]	; (fe60 <main+0x3dc>)
    fccc:	4b37      	ldr	r3, [pc, #220]	; (fdac <main+0x328>)
    fcce:	4798      	blx	r3
	#endif /* ((THSQ_CONF_NETSTACK) & THSQ_CONF_AES) */
	
	autostart_start(autostart_processes);
    fcd0:	485f      	ldr	r0, [pc, #380]	; (fe50 <main+0x3cc>)
    fcd2:	4b64      	ldr	r3, [pc, #400]	; (fe64 <main+0x3e0>)
    fcd4:	4798      	blx	r3
		serial_data_handler();
		#endif
		do {
			//printf(".");
			
			r = process_run();
    fcd6:	4c64      	ldr	r4, [pc, #400]	; (fe68 <main+0x3e4>)
			//wdt_reset_count();
			// if(r <= 0) printf("\n PRVN No process to run\n\r");
		} while(r > 0);
		/* sleep*/
		// watchdog_stop();
		ENERGEST_OFF(ENERGEST_TYPE_CPU);
    fcd8:	4b49      	ldr	r3, [pc, #292]	; (fe00 <main+0x37c>)
    fcda:	4699      	mov	r9, r3
    fcdc:	4b46      	ldr	r3, [pc, #280]	; (fdf8 <main+0x374>)
    fcde:	4698      	mov	r8, r3
		serial_data_handler();
		#endif
		do {
			//printf(".");
			
			r = process_run();
    fce0:	47a0      	blx	r4
			//wdt_reset_count();
			// if(r <= 0) printf("\n PRVN No process to run\n\r");
		} while(r > 0);
    fce2:	2800      	cmp	r0, #0
    fce4:	dcfc      	bgt.n	fce0 <main+0x25c>
		/* sleep*/
		// watchdog_stop();
		ENERGEST_OFF(ENERGEST_TYPE_CPU);
    fce6:	464b      	mov	r3, r9
    fce8:	781b      	ldrb	r3, [r3, #0]
    fcea:	2b00      	cmp	r3, #0
    fcec:	d00a      	beq.n	fd04 <main+0x280>
    fcee:	47c0      	blx	r8
    fcf0:	4a5e      	ldr	r2, [pc, #376]	; (fe6c <main+0x3e8>)
    fcf2:	4b42      	ldr	r3, [pc, #264]	; (fdfc <main+0x378>)
    fcf4:	681b      	ldr	r3, [r3, #0]
    fcf6:	6811      	ldr	r1, [r2, #0]
    fcf8:	1acb      	subs	r3, r1, r3
    fcfa:	1818      	adds	r0, r3, r0
    fcfc:	6010      	str	r0, [r2, #0]
    fcfe:	2200      	movs	r2, #0
    fd00:	4b3f      	ldr	r3, [pc, #252]	; (fe00 <main+0x37c>)
    fd02:	701a      	strb	r2, [r3, #0]
		ENERGEST_ON(ENERGEST_TYPE_LPM);
    fd04:	4e3c      	ldr	r6, [pc, #240]	; (fdf8 <main+0x374>)
    fd06:	47b0      	blx	r6
    fd08:	4f3c      	ldr	r7, [pc, #240]	; (fdfc <main+0x378>)
    fd0a:	6078      	str	r0, [r7, #4]
    fd0c:	4d3c      	ldr	r5, [pc, #240]	; (fe00 <main+0x37c>)
    fd0e:	2301      	movs	r3, #1
    fd10:	706b      	strb	r3, [r5, #1]
		//#endif
		//watchdog_start();


		/* woke up */
		ENERGEST_OFF(ENERGEST_TYPE_LPM);
    fd12:	47b0      	blx	r6
    fd14:	4a55      	ldr	r2, [pc, #340]	; (fe6c <main+0x3e8>)
    fd16:	687b      	ldr	r3, [r7, #4]
    fd18:	6851      	ldr	r1, [r2, #4]
    fd1a:	1acb      	subs	r3, r1, r3
    fd1c:	1818      	adds	r0, r3, r0
    fd1e:	6050      	str	r0, [r2, #4]
    fd20:	2300      	movs	r3, #0
    fd22:	706b      	strb	r3, [r5, #1]
		ENERGEST_ON(ENERGEST_TYPE_CPU);
    fd24:	4b34      	ldr	r3, [pc, #208]	; (fdf8 <main+0x374>)
    fd26:	4798      	blx	r3
    fd28:	4b34      	ldr	r3, [pc, #208]	; (fdfc <main+0x378>)
    fd2a:	6018      	str	r0, [r3, #0]
    fd2c:	2201      	movs	r2, #1
    fd2e:	4b34      	ldr	r3, [pc, #208]	; (fe00 <main+0x37c>)
    fd30:	701a      	strb	r2, [r3, #0]
	}
    fd32:	e7d5      	b.n	fce0 <main+0x25c>

	node_id_restore();
	printf("\r\n\n\n\n Starting the SmartConnect-6LoWPAN \r\n Platform : Atmel IoT device \r\n\r");
	print_reset_causes();
	#if SAMR21
	eui64 = edbg_eui_read_eui64();
    fd34:	4b4e      	ldr	r3, [pc, #312]	; (fe70 <main+0x3ec>)
    fd36:	4798      	blx	r3
    fd38:	1c05      	adds	r5, r0, #0
	set_link_addr(uint8_t *eui64)
	{
		linkaddr_t addr;
		int i;

		memset(&addr, 0, sizeof(linkaddr_t));
    fd3a:	2300      	movs	r3, #0
    fd3c:	9300      	str	r3, [sp, #0]
    fd3e:	9301      	str	r3, [sp, #4]
		#if UIP_CONF_IPV6
		#if SAMD
		memcpy(addr.u8, node_mac, sizeof(addr.u8));
		#else
		memcpy(addr.u8, eui64, sizeof(addr.u8));
    fd40:	4668      	mov	r0, sp
    fd42:	1c29      	adds	r1, r5, #0
    fd44:	2208      	movs	r2, #8
    fd46:	4b32      	ldr	r3, [pc, #200]	; (fe10 <main+0x38c>)
    fd48:	4798      	blx	r3
			} else {
			addr.u8[0] = node_id & 0xff;
			addr.u8[1] = node_id >> 8;
		}
		#endif  /* UIP_CONF_IPV6 */
		linkaddr_set_node_addr(&addr);
    fd4a:	4668      	mov	r0, sp
    fd4c:	4b49      	ldr	r3, [pc, #292]	; (fe74 <main+0x3f0>)
    fd4e:	4798      	blx	r3
		printf("Link layer addr ");
    fd50:	4849      	ldr	r0, [pc, #292]	; (fe78 <main+0x3f4>)
    fd52:	4b16      	ldr	r3, [pc, #88]	; (fdac <main+0x328>)
    fd54:	4798      	blx	r3
    fd56:	2400      	movs	r4, #0
		for(i = 0; i < sizeof(addr.u8) - 1; i++) {
			printf("%u:", addr.u8[i]);
    fd58:	4f48      	ldr	r7, [pc, #288]	; (fe7c <main+0x3f8>)
    fd5a:	4e14      	ldr	r6, [pc, #80]	; (fdac <main+0x328>)
    fd5c:	e6df      	b.n	fb1e <main+0x9a>
		}
		printf("%u, ", addr.u8[i]);
    fd5e:	466b      	mov	r3, sp
    fd60:	79d9      	ldrb	r1, [r3, #7]
    fd62:	4847      	ldr	r0, [pc, #284]	; (fe80 <main+0x3fc>)
    fd64:	4b11      	ldr	r3, [pc, #68]	; (fdac <main+0x328>)
    fd66:	4798      	blx	r3
    fd68:	2400      	movs	r4, #0
		for(i = 0; i < sizeof(addr.u8) - 1; i++) {
			printf("%02x:", addr.u8[i]);
    fd6a:	4f46      	ldr	r7, [pc, #280]	; (fe84 <main+0x400>)
    fd6c:	4e0f      	ldr	r6, [pc, #60]	; (fdac <main+0x328>)
    fd6e:	e6de      	b.n	fb2e <main+0xaa>
    fd70:	00002311 	.word	0x00002311
    fd74:	00002981 	.word	0x00002981
    fd78:	000056b9 	.word	0x000056b9
    fd7c:	000056d9 	.word	0x000056d9
    fd80:	20000008 	.word	0x20000008
    fd84:	0000f6f1 	.word	0x0000f6f1
    fd88:	00000111 	.word	0x00000111
    fd8c:	0000f7f9 	.word	0x0000f7f9
    fd90:	0000e5f9 	.word	0x0000e5f9
    fd94:	0000ecd5 	.word	0x0000ecd5
    fd98:	0000eb0d 	.word	0x0000eb0d
    fd9c:	20000194 	.word	0x20000194
    fda0:	0000ec79 	.word	0x0000ec79
    fda4:	0000f769 	.word	0x0000f769
    fda8:	00012ffc 	.word	0x00012ffc
    fdac:	00010b79 	.word	0x00010b79
    fdb0:	40000438 	.word	0x40000438
    fdb4:	00013048 	.word	0x00013048
    fdb8:	0001305c 	.word	0x0001305c
    fdbc:	00013074 	.word	0x00013074
    fdc0:	00013088 	.word	0x00013088
    fdc4:	0001309c 	.word	0x0001309c
    fdc8:	000130bc 	.word	0x000130bc
    fdcc:	000130dc 	.word	0x000130dc
    fdd0:	00013150 	.word	0x00013150
    fdd4:	20001ee4 	.word	0x20001ee4
    fdd8:	00005899 	.word	0x00005899
    fddc:	0000bde9 	.word	0x0000bde9
    fde0:	0000ef65 	.word	0x0000ef65
    fde4:	0000ef51 	.word	0x0000ef51
    fde8:	000130f4 	.word	0x000130f4
    fdec:	000056f5 	.word	0x000056f5
    fdf0:	2000001c 	.word	0x2000001c
    fdf4:	0000e749 	.word	0x0000e749
    fdf8:	0000fa29 	.word	0x0000fa29
    fdfc:	200033cc 	.word	0x200033cc
    fe00:	200033c0 	.word	0x200033c0
    fe04:	00013108 	.word	0x00013108
    fe08:	00013118 	.word	0x00013118
    fe0c:	20002ccc 	.word	0x20002ccc
    fe10:	00010b2f 	.word	0x00010b2f
    fe14:	0000c05d 	.word	0x0000c05d
    fe18:	00012e6c 	.word	0x00012e6c
    fe1c:	0001088d 	.word	0x0001088d
    fe20:	0001312c 	.word	0x0001312c
    fe24:	200000c0 	.word	0x200000c0
    fe28:	00013138 	.word	0x00013138
    fe2c:	0000747d 	.word	0x0000747d
    fe30:	00013140 	.word	0x00013140
    fe34:	0001314c 	.word	0x0001314c
    fe38:	ffffaaaa 	.word	0xffffaaaa
    fe3c:	000076a5 	.word	0x000076a5
    fe40:	00007561 	.word	0x00007561
    fe44:	00013158 	.word	0x00013158
    fe48:	00013178 	.word	0x00013178
    fe4c:	00013184 	.word	0x00013184
    fe50:	00013208 	.word	0x00013208
    fe54:	00013190 	.word	0x00013190
    fe58:	20000234 	.word	0x20000234
    fe5c:	00010eb5 	.word	0x00010eb5
    fe60:	00013194 	.word	0x00013194
    fe64:	0000e535 	.word	0x0000e535
    fe68:	0000eb45 	.word	0x0000eb45
    fe6c:	2000338c 	.word	0x2000338c
    fe70:	0000f5dd 	.word	0x0000f5dd
    fe74:	0000ac91 	.word	0x0000ac91
    fe78:	000131c0 	.word	0x000131c0
    fe7c:	000130f0 	.word	0x000130f0
    fe80:	000131d4 	.word	0x000131d4
    fe84:	00013144 	.word	0x00013144

0000fe88 <echo_reply_handler>:
}
/*---------------------------------------------------------------------------*/
static void
echo_reply_handler(uip_ipaddr_t *source, uint8_t ttl, uint8_t *data,
uint16_t datalen)
{
    fe88:	b510      	push	{r4, lr}
    fe8a:	1c04      	adds	r4, r0, #0
	if(uip_ip6addr_cmp(source, uip_ds6_defrt_choose())) {
    fe8c:	4b06      	ldr	r3, [pc, #24]	; (fea8 <echo_reply_handler+0x20>)
    fe8e:	4798      	blx	r3
    fe90:	1c01      	adds	r1, r0, #0
    fe92:	1c20      	adds	r0, r4, #0
    fe94:	2210      	movs	r2, #16
    fe96:	4b05      	ldr	r3, [pc, #20]	; (feac <echo_reply_handler+0x24>)
    fe98:	4798      	blx	r3
    fe9a:	2800      	cmp	r0, #0
    fe9c:	d103      	bne.n	fea6 <echo_reply_handler+0x1e>
		def_rt_rssi = sicslowpan_get_last_rssi();
    fe9e:	4b04      	ldr	r3, [pc, #16]	; (feb0 <echo_reply_handler+0x28>)
    fea0:	4798      	blx	r3
    fea2:	4b04      	ldr	r3, [pc, #16]	; (feb4 <echo_reply_handler+0x2c>)
    fea4:	6018      	str	r0, [r3, #0]
	}
}
    fea6:	bd10      	pop	{r4, pc}
    fea8:	0000725d 	.word	0x0000725d
    feac:	00010b11 	.word	0x00010b11
    feb0:	00006aa5 	.word	0x00006aa5
    feb4:	20002a7c 	.word	0x20002a7c

0000feb8 <publish_led_off>:
/*---------------------------------------------------------------------------*/
static void
publish_led_off(void *d)
{
    feb8:	b508      	push	{r3, lr}
	leds_off(STATUS_LED);
    feba:	2001      	movs	r0, #1
    febc:	4b01      	ldr	r3, [pc, #4]	; (fec4 <publish_led_off+0xc>)
    febe:	4798      	blx	r3
}
    fec0:	bd08      	pop	{r3, pc}
    fec2:	46c0      	nop			; (mov r8, r8)
    fec4:	000056f5 	.word	0x000056f5

0000fec8 <mqtt_event>:
	}
}
/*---------------------------------------------------------------------------*/
static void
mqtt_event(struct mqtt_connection *m, mqtt_event_t event, void *data)
{
    fec8:	b5f0      	push	{r4, r5, r6, r7, lr}
    feca:	4657      	mov	r7, sl
    fecc:	464e      	mov	r6, r9
    fece:	4645      	mov	r5, r8
    fed0:	b4e0      	push	{r5, r6, r7}
	switch(event) {
    fed2:	2905      	cmp	r1, #5
    fed4:	d876      	bhi.n	ffc4 <mqtt_event+0xfc>
    fed6:	0089      	lsls	r1, r1, #2
    fed8:	4b3e      	ldr	r3, [pc, #248]	; (ffd4 <mqtt_event+0x10c>)
    feda:	585b      	ldr	r3, [r3, r1]
    fedc:	469f      	mov	pc, r3
		case MQTT_EVENT_CONNECTED: {
			DBG("APP - Application has a MQTT connection\n\r");
    fede:	483e      	ldr	r0, [pc, #248]	; (ffd8 <mqtt_event+0x110>)
    fee0:	4b3e      	ldr	r3, [pc, #248]	; (ffdc <mqtt_event+0x114>)
    fee2:	4798      	blx	r3
			timer_set(&connection_life, CONNECTION_STABLE_TIME);
    fee4:	483e      	ldr	r0, [pc, #248]	; (ffe0 <mqtt_event+0x118>)
    fee6:	21a0      	movs	r1, #160	; 0xa0
    fee8:	0089      	lsls	r1, r1, #2
    feea:	4b3e      	ldr	r3, [pc, #248]	; (ffe4 <mqtt_event+0x11c>)
    feec:	4798      	blx	r3
			state = STATE_CONNECTED;
    feee:	2203      	movs	r2, #3
    fef0:	4b3d      	ldr	r3, [pc, #244]	; (ffe8 <mqtt_event+0x120>)
    fef2:	701a      	strb	r2, [r3, #0]
			break;
    fef4:	e069      	b.n	ffca <mqtt_event+0x102>
		}
		case MQTT_EVENT_DISCONNECTED: {
			DBG("APP - MQTT Disconnect. Reason %u\n\r", *((mqtt_event_t *)data));
    fef6:	7811      	ldrb	r1, [r2, #0]
    fef8:	483c      	ldr	r0, [pc, #240]	; (ffec <mqtt_event+0x124>)
    fefa:	4b38      	ldr	r3, [pc, #224]	; (ffdc <mqtt_event+0x114>)
    fefc:	4798      	blx	r3

			state = STATE_DISCONNECTED;
    fefe:	2205      	movs	r2, #5
    ff00:	4b39      	ldr	r3, [pc, #228]	; (ffe8 <mqtt_event+0x120>)
    ff02:	701a      	strb	r2, [r3, #0]
			process_poll(&mqtt_demo_process);
    ff04:	483a      	ldr	r0, [pc, #232]	; (fff0 <mqtt_event+0x128>)
    ff06:	4b3b      	ldr	r3, [pc, #236]	; (fff4 <mqtt_event+0x12c>)
    ff08:	4798      	blx	r3
			break;
    ff0a:	e05e      	b.n	ffca <mqtt_event+0x102>
		}
		case MQTT_EVENT_PUBLISH: {
			msg_ptr = data;
    ff0c:	4b3a      	ldr	r3, [pc, #232]	; (fff8 <mqtt_event+0x130>)
    ff0e:	601a      	str	r2, [r3, #0]

			/* Implement first_flag in publish message? */
			if(msg_ptr->first_chunk) {
    ff10:	234e      	movs	r3, #78	; 0x4e
    ff12:	5cd3      	ldrb	r3, [r2, r3]
    ff14:	2b00      	cmp	r3, #0
    ff16:	d008      	beq.n	ff2a <mqtt_event+0x62>
				msg_ptr->first_chunk = 0;
    ff18:	2100      	movs	r1, #0
    ff1a:	234e      	movs	r3, #78	; 0x4e
    ff1c:	54d1      	strb	r1, [r2, r3]
				DBG("APP - Application received a publish on topic '%s'. Payload "
    ff1e:	1d11      	adds	r1, r2, #4
    ff20:	3302      	adds	r3, #2
    ff22:	5ad2      	ldrh	r2, [r2, r3]
    ff24:	4835      	ldr	r0, [pc, #212]	; (fffc <mqtt_event+0x134>)
    ff26:	4b2d      	ldr	r3, [pc, #180]	; (ffdc <mqtt_event+0x114>)
    ff28:	4798      	blx	r3
				"size is %i bytes. Content:\n\n\r",
				msg_ptr->topic, msg_ptr->payload_length);
			}

			pub_handler(msg_ptr->topic, strlen(msg_ptr->topic), msg_ptr->payload_chunk,
    ff2a:	4b33      	ldr	r3, [pc, #204]	; (fff8 <mqtt_event+0x130>)
    ff2c:	681f      	ldr	r7, [r3, #0]
    ff2e:	1d3d      	adds	r5, r7, #4
    ff30:	1c28      	adds	r0, r5, #0
    ff32:	4b33      	ldr	r3, [pc, #204]	; (10000 <mqtt_event+0x138>)
    ff34:	4798      	blx	r3
    ff36:	1c06      	adds	r6, r0, #0
    ff38:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    ff3a:	4698      	mov	r8, r3
    ff3c:	2350      	movs	r3, #80	; 0x50
    ff3e:	5afb      	ldrh	r3, [r7, r3]
    ff40:	4699      	mov	r9, r3
    ff42:	0404      	lsls	r4, r0, #16
    ff44:	0c23      	lsrs	r3, r4, #16
    ff46:	469a      	mov	sl, r3
/*---------------------------------------------------------------------------*/
static void
pub_handler(const char *topic, uint16_t topic_len, const uint8_t *chunk,
uint16_t chunk_len)
{
	DBG("Pub Handler: topic='%s' (len=%u), chunk_len=%u\n\r", topic, topic_len,
    ff48:	482e      	ldr	r0, [pc, #184]	; (10004 <mqtt_event+0x13c>)
    ff4a:	1c29      	adds	r1, r5, #0
    ff4c:	1c1a      	adds	r2, r3, #0
    ff4e:	464b      	mov	r3, r9
    ff50:	4c22      	ldr	r4, [pc, #136]	; (ffdc <mqtt_event+0x114>)
    ff52:	47a0      	blx	r4
	chunk_len);

	/* If we don't like the length, ignore */
	if(topic_len != 23 || chunk_len != 1) {
    ff54:	b2b6      	uxth	r6, r6
    ff56:	2e17      	cmp	r6, #23
    ff58:	d102      	bne.n	ff60 <mqtt_event+0x98>
    ff5a:	464b      	mov	r3, r9
    ff5c:	2b01      	cmp	r3, #1
    ff5e:	d003      	beq.n	ff68 <mqtt_event+0xa0>
		printf("Incorrect topic or chunk len. Ignored\n\r");
    ff60:	4829      	ldr	r0, [pc, #164]	; (10008 <mqtt_event+0x140>)
    ff62:	4b1e      	ldr	r3, [pc, #120]	; (ffdc <mqtt_event+0x114>)
    ff64:	4798      	blx	r3
    ff66:	e030      	b.n	ffca <mqtt_event+0x102>
		return;
	}

	/* If the format != json, ignore */
	if(strncmp(&topic[topic_len - 4], "json", 4) != 0) {
    ff68:	4654      	mov	r4, sl
    ff6a:	3c04      	subs	r4, #4
    ff6c:	1928      	adds	r0, r5, r4
    ff6e:	4927      	ldr	r1, [pc, #156]	; (1000c <mqtt_event+0x144>)
    ff70:	2204      	movs	r2, #4
    ff72:	4b27      	ldr	r3, [pc, #156]	; (10010 <mqtt_event+0x148>)
    ff74:	4798      	blx	r3
    ff76:	2800      	cmp	r0, #0
    ff78:	d002      	beq.n	ff80 <mqtt_event+0xb8>
		printf("Incorrect format\n\r");
    ff7a:	4826      	ldr	r0, [pc, #152]	; (10014 <mqtt_event+0x14c>)
    ff7c:	4b17      	ldr	r3, [pc, #92]	; (ffdc <mqtt_event+0x114>)
    ff7e:	4798      	blx	r3
	}

	if(strncmp(&topic[10], "leds", 4) == 0) {
    ff80:	1c38      	adds	r0, r7, #0
    ff82:	300e      	adds	r0, #14
    ff84:	4924      	ldr	r1, [pc, #144]	; (10018 <mqtt_event+0x150>)
    ff86:	2204      	movs	r2, #4
    ff88:	4b21      	ldr	r3, [pc, #132]	; (10010 <mqtt_event+0x148>)
    ff8a:	4798      	blx	r3
    ff8c:	2800      	cmp	r0, #0
    ff8e:	d11c      	bne.n	ffca <mqtt_event+0x102>
		if(chunk[0] == '1') {
    ff90:	4643      	mov	r3, r8
    ff92:	781b      	ldrb	r3, [r3, #0]
    ff94:	2b31      	cmp	r3, #49	; 0x31
    ff96:	d103      	bne.n	ffa0 <mqtt_event+0xd8>
			leds_on(LEDS_RED);
    ff98:	3001      	adds	r0, #1
    ff9a:	4b20      	ldr	r3, [pc, #128]	; (1001c <mqtt_event+0x154>)
    ff9c:	4798      	blx	r3
    ff9e:	e014      	b.n	ffca <mqtt_event+0x102>
			} else if(chunk[0] == '0') {
    ffa0:	2b30      	cmp	r3, #48	; 0x30
    ffa2:	d112      	bne.n	ffca <mqtt_event+0x102>
			leds_off(LEDS_RED);
    ffa4:	2001      	movs	r0, #1
    ffa6:	4b1e      	ldr	r3, [pc, #120]	; (10020 <mqtt_event+0x158>)
    ffa8:	4798      	blx	r3
    ffaa:	e00e      	b.n	ffca <mqtt_event+0x102>
			pub_handler(msg_ptr->topic, strlen(msg_ptr->topic), msg_ptr->payload_chunk,
			msg_ptr->payload_length);
			break;
		}
		case MQTT_EVENT_SUBACK: {
			DBG("APP - Application is subscribed to topic successfully\n\r");
    ffac:	481d      	ldr	r0, [pc, #116]	; (10024 <mqtt_event+0x15c>)
    ffae:	4b0b      	ldr	r3, [pc, #44]	; (ffdc <mqtt_event+0x114>)
    ffb0:	4798      	blx	r3
			break;
    ffb2:	e00a      	b.n	ffca <mqtt_event+0x102>
		}
		case MQTT_EVENT_UNSUBACK: {
			DBG("APP - Application is unsubscribed to topic successfully\n\r");
    ffb4:	481c      	ldr	r0, [pc, #112]	; (10028 <mqtt_event+0x160>)
    ffb6:	4b09      	ldr	r3, [pc, #36]	; (ffdc <mqtt_event+0x114>)
    ffb8:	4798      	blx	r3
			break;
    ffba:	e006      	b.n	ffca <mqtt_event+0x102>
		}
		case MQTT_EVENT_PUBACK: {
			DBG("APP - Publishing complete.\n\r");
    ffbc:	481b      	ldr	r0, [pc, #108]	; (1002c <mqtt_event+0x164>)
    ffbe:	4b07      	ldr	r3, [pc, #28]	; (ffdc <mqtt_event+0x114>)
    ffc0:	4798      	blx	r3
			break;
    ffc2:	e002      	b.n	ffca <mqtt_event+0x102>
		}
		default:
		DBG("APP - Application got a unhandled MQTT event: %i\n\r", event);
    ffc4:	481a      	ldr	r0, [pc, #104]	; (10030 <mqtt_event+0x168>)
    ffc6:	4b05      	ldr	r3, [pc, #20]	; (ffdc <mqtt_event+0x114>)
    ffc8:	4798      	blx	r3
		break;
	}
}
    ffca:	bc1c      	pop	{r2, r3, r4}
    ffcc:	4690      	mov	r8, r2
    ffce:	4699      	mov	r9, r3
    ffd0:	46a2      	mov	sl, r4
    ffd2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ffd4:	000131f0 	.word	0x000131f0
    ffd8:	00013210 	.word	0x00013210
    ffdc:	00010b79 	.word	0x00010b79
    ffe0:	20002a34 	.word	0x20002a34
    ffe4:	0000ed6d 	.word	0x0000ed6d
    ffe8:	2000203c 	.word	0x2000203c
    ffec:	0001323c 	.word	0x0001323c
    fff0:	200001c0 	.word	0x200001c0
    fff4:	0000ecb9 	.word	0x0000ecb9
    fff8:	20002804 	.word	0x20002804
    fffc:	00013260 	.word	0x00013260
   10000:	00010e31 	.word	0x00010e31
   10004:	000132bc 	.word	0x000132bc
   10008:	000132f0 	.word	0x000132f0
   1000c:	00013318 	.word	0x00013318
   10010:	00010e8d 	.word	0x00010e8d
   10014:	00013320 	.word	0x00013320
   10018:	00013334 	.word	0x00013334
   1001c:	000056d9 	.word	0x000056d9
   10020:	000056f5 	.word	0x000056f5
   10024:	0001333c 	.word	0x0001333c
   10028:	00013374 	.word	0x00013374
   1002c:	000133b0 	.word	0x000133b0
   10030:	000133d0 	.word	0x000133d0

00010034 <ping_parent>:
	state = STATE_CONNECTING;
}
/*---------------------------------------------------------------------------*/
static void
ping_parent(void)
{
   10034:	b510      	push	{r4, lr}
	if(uip_ds6_get_global(ADDR_PREFERRED) == NULL) {
   10036:	2001      	movs	r0, #1
   10038:	4b05      	ldr	r3, [pc, #20]	; (10050 <ping_parent+0x1c>)
   1003a:	4798      	blx	r3
   1003c:	2800      	cmp	r0, #0
   1003e:	d006      	beq.n	1004e <ping_parent+0x1a>
		return;
	}

	uip_icmp6_send(uip_ds6_defrt_choose(), ICMP6_ECHO_REQUEST, 0,
   10040:	4b04      	ldr	r3, [pc, #16]	; (10054 <ping_parent+0x20>)
   10042:	4798      	blx	r3
   10044:	2180      	movs	r1, #128	; 0x80
   10046:	2200      	movs	r2, #0
   10048:	2314      	movs	r3, #20
   1004a:	4c03      	ldr	r4, [pc, #12]	; (10058 <ping_parent+0x24>)
   1004c:	47a0      	blx	r4
	ECHO_REQ_PAYLOAD_LEN);
}
   1004e:	bd10      	pop	{r4, pc}
   10050:	000074c9 	.word	0x000074c9
   10054:	0000725d 	.word	0x0000725d
   10058:	00007ed1 	.word	0x00007ed1

0001005c <ipaddr_sprintf>:
/*---------------------------------------------------------------------------*/
PROCESS(mqtt_demo_process, "MQTT Demo");
/*---------------------------------------------------------------------------*/
int
ipaddr_sprintf(char *buf, uint8_t buf_len, const uip_ipaddr_t *addr)
{
   1005c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1005e:	465f      	mov	r7, fp
   10060:	4656      	mov	r6, sl
   10062:	464d      	mov	r5, r9
   10064:	4644      	mov	r4, r8
   10066:	b4f0      	push	{r4, r5, r6, r7}
   10068:	4682      	mov	sl, r0
   1006a:	4689      	mov	r9, r1
   1006c:	1c15      	adds	r5, r2, #0
   1006e:	2300      	movs	r3, #0
   10070:	4698      	mov	r8, r3
   10072:	2700      	movs	r7, #0
   10074:	2600      	movs	r6, #0
			if(f > 0) {
				f = -1;
				} else if(i > 0) {
				len += snprintf(&buf[len], buf_len - len, ":");
			}
			len += snprintf(&buf[len], buf_len - len, "%x", a);
   10076:	4b21      	ldr	r3, [pc, #132]	; (100fc <ipaddr_sprintf+0xa0>)
   10078:	469b      	mov	fp, r3
{
	uint16_t a;
	uint8_t len = 0;
	int i, f;
	for(i = 0, f = 0; i < sizeof(uip_ipaddr_t); i += 2) {
		a = (addr->u8[i] << 8) + addr->u8[i + 1];
   1007a:	782c      	ldrb	r4, [r5, #0]
   1007c:	0224      	lsls	r4, r4, #8
   1007e:	786b      	ldrb	r3, [r5, #1]
   10080:	191c      	adds	r4, r3, r4
   10082:	b2a4      	uxth	r4, r4
		if(a == 0 && f >= 0) {
   10084:	2c00      	cmp	r4, #0
   10086:	d111      	bne.n	100ac <ipaddr_sprintf+0x50>
   10088:	4643      	mov	r3, r8
   1008a:	2b00      	cmp	r3, #0
   1008c:	db0e      	blt.n	100ac <ipaddr_sprintf+0x50>
			if(f++ == 0) {
   1008e:	1c5c      	adds	r4, r3, #1
   10090:	46a0      	mov	r8, r4
   10092:	2b00      	cmp	r3, #0
   10094:	d126      	bne.n	100e4 <ipaddr_sprintf+0x88>
				len += snprintf(&buf[len], buf_len - len, "::");
   10096:	4653      	mov	r3, sl
   10098:	1998      	adds	r0, r3, r6
   1009a:	464b      	mov	r3, r9
   1009c:	1b99      	subs	r1, r3, r6
   1009e:	4a18      	ldr	r2, [pc, #96]	; (10100 <ipaddr_sprintf+0xa4>)
   100a0:	4b16      	ldr	r3, [pc, #88]	; (100fc <ipaddr_sprintf+0xa0>)
   100a2:	4798      	blx	r3
   100a4:	1836      	adds	r6, r6, r0
   100a6:	b2f6      	uxtb	r6, r6
	uint8_t len = 0;
	int i, f;
	for(i = 0, f = 0; i < sizeof(uip_ipaddr_t); i += 2) {
		a = (addr->u8[i] << 8) + addr->u8[i + 1];
		if(a == 0 && f >= 0) {
			if(f++ == 0) {
   100a8:	46a0      	mov	r8, r4
   100aa:	e01b      	b.n	100e4 <ipaddr_sprintf+0x88>
				len += snprintf(&buf[len], buf_len - len, "::");
			}
			} else {
			if(f > 0) {
   100ac:	4643      	mov	r3, r8
   100ae:	2b00      	cmp	r3, #0
   100b0:	dc0b      	bgt.n	100ca <ipaddr_sprintf+0x6e>
				f = -1;
				} else if(i > 0) {
   100b2:	2f00      	cmp	r7, #0
   100b4:	dd0c      	ble.n	100d0 <ipaddr_sprintf+0x74>
				len += snprintf(&buf[len], buf_len - len, ":");
   100b6:	4653      	mov	r3, sl
   100b8:	1998      	adds	r0, r3, r6
   100ba:	464b      	mov	r3, r9
   100bc:	1b99      	subs	r1, r3, r6
   100be:	4a11      	ldr	r2, [pc, #68]	; (10104 <ipaddr_sprintf+0xa8>)
   100c0:	4b0e      	ldr	r3, [pc, #56]	; (100fc <ipaddr_sprintf+0xa0>)
   100c2:	4798      	blx	r3
   100c4:	1836      	adds	r6, r6, r0
   100c6:	b2f6      	uxtb	r6, r6
   100c8:	e002      	b.n	100d0 <ipaddr_sprintf+0x74>
			if(f++ == 0) {
				len += snprintf(&buf[len], buf_len - len, "::");
			}
			} else {
			if(f > 0) {
				f = -1;
   100ca:	2301      	movs	r3, #1
   100cc:	425b      	negs	r3, r3
   100ce:	4698      	mov	r8, r3
				} else if(i > 0) {
				len += snprintf(&buf[len], buf_len - len, ":");
			}
			len += snprintf(&buf[len], buf_len - len, "%x", a);
   100d0:	4653      	mov	r3, sl
   100d2:	1998      	adds	r0, r3, r6
   100d4:	464b      	mov	r3, r9
   100d6:	1b99      	subs	r1, r3, r6
   100d8:	4a0b      	ldr	r2, [pc, #44]	; (10108 <ipaddr_sprintf+0xac>)
   100da:	1c23      	adds	r3, r4, #0
   100dc:	47d8      	blx	fp
   100de:	1836      	adds	r6, r6, r0
   100e0:	b2f6      	uxtb	r6, r6
   100e2:	e7ff      	b.n	100e4 <ipaddr_sprintf+0x88>
ipaddr_sprintf(char *buf, uint8_t buf_len, const uip_ipaddr_t *addr)
{
	uint16_t a;
	uint8_t len = 0;
	int i, f;
	for(i = 0, f = 0; i < sizeof(uip_ipaddr_t); i += 2) {
   100e4:	3702      	adds	r7, #2
   100e6:	3502      	adds	r5, #2
   100e8:	2f10      	cmp	r7, #16
   100ea:	d1c6      	bne.n	1007a <ipaddr_sprintf+0x1e>
			len += snprintf(&buf[len], buf_len - len, "%x", a);
		}
	}

	return len;
}
   100ec:	1c30      	adds	r0, r6, #0
   100ee:	bc3c      	pop	{r2, r3, r4, r5}
   100f0:	4690      	mov	r8, r2
   100f2:	4699      	mov	r9, r3
   100f4:	46a2      	mov	sl, r4
   100f6:	46ab      	mov	fp, r5
   100f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   100fa:	46c0      	nop			; (mov r8, r8)
   100fc:	00010dc9 	.word	0x00010dc9
   10100:	00012e28 	.word	0x00012e28
   10104:	00013148 	.word	0x00013148
   10108:	00012e2c 	.word	0x00012e2c

0001010c <process_thread_mqtt_demo_process>:
	/* If we didn't return so far, reschedule ourselves */
	etimer_set(&publish_periodic_timer, STATE_MACHINE_PERIODIC);
}
/*---------------------------------------------------------------------------*/
PROCESS_THREAD(mqtt_demo_process, ev, data)
{
   1010c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1010e:	464f      	mov	r7, r9
   10110:	b480      	push	{r7}
   10112:	b098      	sub	sp, #96	; 0x60
   10114:	1c05      	adds	r5, r0, #0
   10116:	1c0c      	adds	r4, r1, #0
   10118:	1c16      	adds	r6, r2, #0

	PROCESS_BEGIN();
   1011a:	8803      	ldrh	r3, [r0, #0]
   1011c:	2b00      	cmp	r3, #0
   1011e:	d004      	beq.n	1012a <process_thread_mqtt_demo_process+0x1e>
   10120:	22b2      	movs	r2, #178	; 0xb2
   10122:	0092      	lsls	r2, r2, #2
   10124:	4293      	cmp	r3, r2
   10126:	d078      	beq.n	1021a <process_thread_mqtt_demo_process+0x10e>
   10128:	e2b6      	b.n	10698 <process_thread_mqtt_demo_process+0x58c>

	printf("MQTT Demo Process\n\r");
   1012a:	48d5      	ldr	r0, [pc, #852]	; (10480 <process_thread_mqtt_demo_process+0x374>)
   1012c:	4bd5      	ldr	r3, [pc, #852]	; (10484 <process_thread_mqtt_demo_process+0x378>)
   1012e:	4798      	blx	r3
/*---------------------------------------------------------------------------*/
static int
init_config()
{
	/* Populate configuration with default values */
	memset(&conf, 0, sizeof(mqtt_client_config_t));
   10130:	4cd5      	ldr	r4, [pc, #852]	; (10488 <process_thread_mqtt_demo_process+0x37c>)
   10132:	1c20      	adds	r0, r4, #0
   10134:	2100      	movs	r1, #0
   10136:	22d4      	movs	r2, #212	; 0xd4
   10138:	4bd4      	ldr	r3, [pc, #848]	; (1048c <process_thread_mqtt_demo_process+0x380>)
   1013a:	4798      	blx	r3

	memcpy(conf.org_id, DEFAULT_ORG_ID, strlen(DEFAULT_ORG_ID));
   1013c:	4bd4      	ldr	r3, [pc, #848]	; (10490 <process_thread_mqtt_demo_process+0x384>)
   1013e:	1c22      	adds	r2, r4, #0
   10140:	cb43      	ldmia	r3!, {r0, r1, r6}
   10142:	c243      	stmia	r2!, {r0, r1, r6}
	memcpy(conf.type_id, DEFAULT_TYPE_ID, strlen(DEFAULT_TYPE_ID));
   10144:	1c21      	adds	r1, r4, #0
   10146:	4bd3      	ldr	r3, [pc, #844]	; (10494 <process_thread_mqtt_demo_process+0x388>)
   10148:	681a      	ldr	r2, [r3, #0]
   1014a:	6222      	str	r2, [r4, #32]
   1014c:	889b      	ldrh	r3, [r3, #4]
   1014e:	84a3      	strh	r3, [r4, #36]	; 0x24
   10150:	3120      	adds	r1, #32
	memcpy(conf.auth_token, DEFAULT_AUTH_TOKEN, strlen(DEFAULT_AUTH_TOKEN));
   10152:	1c22      	adds	r2, r4, #0
   10154:	3240      	adds	r2, #64	; 0x40
   10156:	4bd0      	ldr	r3, [pc, #832]	; (10498 <process_thread_mqtt_demo_process+0x38c>)
   10158:	6818      	ldr	r0, [r3, #0]
   1015a:	6420      	str	r0, [r4, #64]	; 0x40
   1015c:	791b      	ldrb	r3, [r3, #4]
   1015e:	7113      	strb	r3, [r2, #4]
	memcpy(conf.event_type_id, DEFAULT_EVENT_TYPE_ID,
   10160:	1c22      	adds	r2, r4, #0
   10162:	3260      	adds	r2, #96	; 0x60
   10164:	4bcd      	ldr	r3, [pc, #820]	; (1049c <process_thread_mqtt_demo_process+0x390>)
   10166:	6818      	ldr	r0, [r3, #0]
   10168:	6620      	str	r0, [r4, #96]	; 0x60
   1016a:	889b      	ldrh	r3, [r3, #4]
   1016c:	8093      	strh	r3, [r2, #4]
	strlen(DEFAULT_EVENT_TYPE_ID));
	memcpy(conf.broker_ip, broker_ip, strlen(broker_ip));
   1016e:	1c23      	adds	r3, r4, #0
   10170:	3380      	adds	r3, #128	; 0x80
   10172:	4acb      	ldr	r2, [pc, #812]	; (104a0 <process_thread_mqtt_demo_process+0x394>)
   10174:	6810      	ldr	r0, [r2, #0]
   10176:	6018      	str	r0, [r3, #0]
   10178:	8890      	ldrh	r0, [r2, #4]
   1017a:	8098      	strh	r0, [r3, #4]
   1017c:	7992      	ldrb	r2, [r2, #6]
   1017e:	719a      	strb	r2, [r3, #6]
	memcpy(conf.cmd_type, DEFAULT_SUBSCRIBE_CMD_TYPE, 1);
   10180:	222b      	movs	r2, #43	; 0x2b
   10182:	23c0      	movs	r3, #192	; 0xc0
   10184:	54e2      	strb	r2, [r4, r3]

	conf.broker_port = DEFAULT_BROKER_PORT;
   10186:	4ac7      	ldr	r2, [pc, #796]	; (104a4 <process_thread_mqtt_demo_process+0x398>)
   10188:	3310      	adds	r3, #16
   1018a:	52e2      	strh	r2, [r4, r3]
	conf.pub_interval = DEFAULT_PUBLISH_INTERVAL;
   1018c:	3b50      	subs	r3, #80	; 0x50
   1018e:	22c8      	movs	r2, #200	; 0xc8
   10190:	50a3      	str	r3, [r4, r2]
	conf.def_rt_ping_interval = DEFAULT_RSSI_MEAS_INTERVAL;
   10192:	3204      	adds	r2, #4
   10194:	50a3      	str	r3, [r4, r2]
}
/*---------------------------------------------------------------------------*/
static int
construct_client_id(void)
{
	int len = snprintf(client_id, BUFFER_SIZE, "d:%s:%s:%02x%02x%02x%02x%02x%02x",
   10196:	9100      	str	r1, [sp, #0]
	conf.org_id, conf.type_id,
	linkaddr_node_addr.u8[0], linkaddr_node_addr.u8[1],
   10198:	4bc3      	ldr	r3, [pc, #780]	; (104a8 <process_thread_mqtt_demo_process+0x39c>)
}
/*---------------------------------------------------------------------------*/
static int
construct_client_id(void)
{
	int len = snprintf(client_id, BUFFER_SIZE, "d:%s:%s:%02x%02x%02x%02x%02x%02x",
   1019a:	781a      	ldrb	r2, [r3, #0]
   1019c:	9201      	str	r2, [sp, #4]
   1019e:	785a      	ldrb	r2, [r3, #1]
   101a0:	9202      	str	r2, [sp, #8]
   101a2:	789a      	ldrb	r2, [r3, #2]
   101a4:	9203      	str	r2, [sp, #12]
   101a6:	795a      	ldrb	r2, [r3, #5]
   101a8:	9204      	str	r2, [sp, #16]
   101aa:	799a      	ldrb	r2, [r3, #6]
   101ac:	9205      	str	r2, [sp, #20]
   101ae:	79db      	ldrb	r3, [r3, #7]
   101b0:	9306      	str	r3, [sp, #24]
   101b2:	48be      	ldr	r0, [pc, #760]	; (104ac <process_thread_mqtt_demo_process+0x3a0>)
   101b4:	2140      	movs	r1, #64	; 0x40
   101b6:	4abe      	ldr	r2, [pc, #760]	; (104b0 <process_thread_mqtt_demo_process+0x3a4>)
   101b8:	1c23      	adds	r3, r4, #0
   101ba:	4cbe      	ldr	r4, [pc, #760]	; (104b4 <process_thread_mqtt_demo_process+0x3a8>)
   101bc:	47a0      	blx	r4
   101be:	1e01      	subs	r1, r0, #0
	linkaddr_node_addr.u8[0], linkaddr_node_addr.u8[1],
	linkaddr_node_addr.u8[2], linkaddr_node_addr.u8[5],
	linkaddr_node_addr.u8[6], linkaddr_node_addr.u8[7]);

	/* len < 0: Error. Len >= BUFFER_SIZE: Buffer too small */
	if(len < 0 || len >= BUFFER_SIZE) {
   101c0:	293f      	cmp	r1, #63	; 0x3f
   101c2:	d800      	bhi.n	101c6 <process_thread_mqtt_demo_process+0xba>
   101c4:	e26c      	b.n	106a0 <process_thread_mqtt_demo_process+0x594>
		printf("Client ID: %d, Buffer %d\n\r", len, BUFFER_SIZE);
   101c6:	48bc      	ldr	r0, [pc, #752]	; (104b8 <process_thread_mqtt_demo_process+0x3ac>)
   101c8:	2240      	movs	r2, #64	; 0x40
   101ca:	4bae      	ldr	r3, [pc, #696]	; (10484 <process_thread_mqtt_demo_process+0x378>)
   101cc:	4798      	blx	r3
static void
update_config(void)
{
	if(construct_client_id() == 0) {
		/* Fatal error. Client ID larger than the buffer */
		state = STATE_CONFIG_ERROR;
   101ce:	22fe      	movs	r2, #254	; 0xfe
   101d0:	4bba      	ldr	r3, [pc, #744]	; (104bc <process_thread_mqtt_demo_process+0x3b0>)
   101d2:	701a      	strb	r2, [r3, #0]
   101d4:	e00e      	b.n	101f4 <process_thread_mqtt_demo_process+0xe8>
	int len = snprintf(sub_topic, BUFFER_SIZE, "iot-2/cmd/%s/fmt/json",
	conf.cmd_type);

	/* len < 0: Error. Len >= BUFFER_SIZE: Buffer too small */
	if(len < 0 || len >= BUFFER_SIZE) {
		printf("Sub Topic: %d, Buffer %d\n\r", len, BUFFER_SIZE);
   101d6:	48ba      	ldr	r0, [pc, #744]	; (104c0 <process_thread_mqtt_demo_process+0x3b4>)
   101d8:	2240      	movs	r2, #64	; 0x40
   101da:	4baa      	ldr	r3, [pc, #680]	; (10484 <process_thread_mqtt_demo_process+0x378>)
   101dc:	4798      	blx	r3
		return;
	}

	if(construct_sub_topic() == 0) {
		/* Fatal error. Topic larger than the buffer */
		state = STATE_CONFIG_ERROR;
   101de:	22fe      	movs	r2, #254	; 0xfe
   101e0:	4bb6      	ldr	r3, [pc, #728]	; (104bc <process_thread_mqtt_demo_process+0x3b0>)
   101e2:	701a      	strb	r2, [r3, #0]
   101e4:	e006      	b.n	101f4 <process_thread_mqtt_demo_process+0xe8>
	int len = snprintf(pub_topic, BUFFER_SIZE, "AWGES/%s/status",
	conf.event_type_id);

	/* len < 0: Error. Len >= BUFFER_SIZE: Buffer too small */
	if(len < 0 || len >= BUFFER_SIZE) {
		printf("Pub Topic: %d, Buffer %d\n\r", len, BUFFER_SIZE);
   101e6:	48b7      	ldr	r0, [pc, #732]	; (104c4 <process_thread_mqtt_demo_process+0x3b8>)
   101e8:	2240      	movs	r2, #64	; 0x40
   101ea:	4ba6      	ldr	r3, [pc, #664]	; (10484 <process_thread_mqtt_demo_process+0x378>)
   101ec:	4798      	blx	r3
		return;
	}

	if(construct_pub_topic() == 0) {
		/* Fatal error. Topic larger than the buffer */
		state = STATE_CONFIG_ERROR;
   101ee:	22fe      	movs	r2, #254	; 0xfe
   101f0:	4bb2      	ldr	r3, [pc, #712]	; (104bc <process_thread_mqtt_demo_process+0x3b0>)
   101f2:	701a      	strb	r2, [r3, #0]

	update_config();
	
	
	
	def_rt_rssi = 0x8000000;
   101f4:	2280      	movs	r2, #128	; 0x80
   101f6:	0512      	lsls	r2, r2, #20
   101f8:	4bb3      	ldr	r3, [pc, #716]	; (104c8 <process_thread_mqtt_demo_process+0x3bc>)
   101fa:	601a      	str	r2, [r3, #0]
	uip_icmp6_echo_reply_callback_add(&echo_reply_notification,
   101fc:	48b3      	ldr	r0, [pc, #716]	; (104cc <process_thread_mqtt_demo_process+0x3c0>)
   101fe:	49b4      	ldr	r1, [pc, #720]	; (104d0 <process_thread_mqtt_demo_process+0x3c4>)
   10200:	4bb4      	ldr	r3, [pc, #720]	; (104d4 <process_thread_mqtt_demo_process+0x3c8>)
   10202:	4798      	blx	r3
	echo_reply_handler);
	etimer_set(&echo_request_timer, conf.def_rt_ping_interval);
   10204:	23cc      	movs	r3, #204	; 0xcc
   10206:	4aa0      	ldr	r2, [pc, #640]	; (10488 <process_thread_mqtt_demo_process+0x37c>)
   10208:	58d1      	ldr	r1, [r2, r3]
   1020a:	48b3      	ldr	r0, [pc, #716]	; (104d8 <process_thread_mqtt_demo_process+0x3cc>)
   1020c:	4bb3      	ldr	r3, [pc, #716]	; (104dc <process_thread_mqtt_demo_process+0x3d0>)
   1020e:	4798      	blx	r3

	/* Main loop */
	while(1) {

		PROCESS_YIELD();
   10210:	23b2      	movs	r3, #178	; 0xb2
   10212:	009b      	lsls	r3, r3, #2
   10214:	802b      	strh	r3, [r5, #0]
   10216:	2001      	movs	r0, #1
   10218:	e269      	b.n	106ee <process_thread_mqtt_demo_process+0x5e2>

		if(ev == sensors_event && data == PUBLISH_TRIGGER) {
   1021a:	4bb1      	ldr	r3, [pc, #708]	; (104e0 <process_thread_mqtt_demo_process+0x3d4>)
   1021c:	781b      	ldrb	r3, [r3, #0]
   1021e:	4299      	cmp	r1, r3
   10220:	d10b      	bne.n	1023a <process_thread_mqtt_demo_process+0x12e>
   10222:	4ab0      	ldr	r2, [pc, #704]	; (104e4 <process_thread_mqtt_demo_process+0x3d8>)
   10224:	4296      	cmp	r6, r2
   10226:	d108      	bne.n	1023a <process_thread_mqtt_demo_process+0x12e>
			if(state == STATE_ERROR) {
   10228:	4aa4      	ldr	r2, [pc, #656]	; (104bc <process_thread_mqtt_demo_process+0x3b0>)
   1022a:	7812      	ldrb	r2, [r2, #0]
   1022c:	2aff      	cmp	r2, #255	; 0xff
   1022e:	d104      	bne.n	1023a <process_thread_mqtt_demo_process+0x12e>
				connect_attempt = 1;
   10230:	3afe      	subs	r2, #254	; 0xfe
   10232:	49ad      	ldr	r1, [pc, #692]	; (104e8 <process_thread_mqtt_demo_process+0x3dc>)
   10234:	700a      	strb	r2, [r1, #0]
				state = STATE_REGISTERED;
   10236:	49a1      	ldr	r1, [pc, #644]	; (104bc <process_thread_mqtt_demo_process+0x3b0>)
   10238:	700a      	strb	r2, [r1, #0]
			}
		}

		if((ev == PROCESS_EVENT_TIMER && data == &publish_periodic_timer) ||
   1023a:	2c88      	cmp	r4, #136	; 0x88
   1023c:	d104      	bne.n	10248 <process_thread_mqtt_demo_process+0x13c>
   1023e:	4aab      	ldr	r2, [pc, #684]	; (104ec <process_thread_mqtt_demo_process+0x3e0>)
   10240:	4296      	cmp	r6, r2
   10242:	d000      	beq.n	10246 <process_thread_mqtt_demo_process+0x13a>
   10244:	e250      	b.n	106e8 <process_thread_mqtt_demo_process+0x5dc>
   10246:	e007      	b.n	10258 <process_thread_mqtt_demo_process+0x14c>
   10248:	2c82      	cmp	r4, #130	; 0x82
   1024a:	d000      	beq.n	1024e <process_thread_mqtt_demo_process+0x142>
   1024c:	e248      	b.n	106e0 <process_thread_mqtt_demo_process+0x5d4>
   1024e:	e003      	b.n	10258 <process_thread_mqtt_demo_process+0x14c>
		ev == PROCESS_EVENT_POLL ||
		(ev == sensors_event && data == PUBLISH_TRIGGER)) {
   10250:	4ba4      	ldr	r3, [pc, #656]	; (104e4 <process_thread_mqtt_demo_process+0x3d8>)
   10252:	429e      	cmp	r6, r3
   10254:	d000      	beq.n	10258 <process_thread_mqtt_demo_process+0x14c>
   10256:	e20f      	b.n	10678 <process_thread_mqtt_demo_process+0x56c>
}
/*---------------------------------------------------------------------------*/
static void
state_machine(void)
{
	switch(state) {
   10258:	4b98      	ldr	r3, [pc, #608]	; (104bc <process_thread_mqtt_demo_process+0x3b0>)
   1025a:	781b      	ldrb	r3, [r3, #0]
   1025c:	2b03      	cmp	r3, #3
   1025e:	d07a      	beq.n	10356 <process_thread_mqtt_demo_process+0x24a>
   10260:	b2da      	uxtb	r2, r3
   10262:	2a03      	cmp	r2, #3
   10264:	d804      	bhi.n	10270 <process_thread_mqtt_demo_process+0x164>
   10266:	2b01      	cmp	r3, #1
   10268:	d03b      	beq.n	102e2 <process_thread_mqtt_demo_process+0x1d6>
   1026a:	2a01      	cmp	r2, #1
   1026c:	d90a      	bls.n	10284 <process_thread_mqtt_demo_process+0x178>
   1026e:	e063      	b.n	10338 <process_thread_mqtt_demo_process+0x22c>
   10270:	2b05      	cmp	r3, #5
   10272:	d100      	bne.n	10276 <process_thread_mqtt_demo_process+0x16a>
   10274:	e1d1      	b.n	1061a <process_thread_mqtt_demo_process+0x50e>
   10276:	b2da      	uxtb	r2, r3
   10278:	2a05      	cmp	r2, #5
   1027a:	d37d      	bcc.n	10378 <process_thread_mqtt_demo_process+0x26c>
   1027c:	2afe      	cmp	r2, #254	; 0xfe
   1027e:	d100      	bne.n	10282 <process_thread_mqtt_demo_process+0x176>
   10280:	e1e9      	b.n	10656 <process_thread_mqtt_demo_process+0x54a>
   10282:	e1ec      	b.n	1065e <process_thread_mqtt_demo_process+0x552>
		case STATE_INIT:
		/* If we have just been configured register MQTT connection */
		mqtt_register(&conn, &mqtt_demo_process, client_id, mqtt_event,
   10284:	2320      	movs	r3, #32
   10286:	9300      	str	r3, [sp, #0]
   10288:	4899      	ldr	r0, [pc, #612]	; (104f0 <process_thread_mqtt_demo_process+0x3e4>)
   1028a:	499a      	ldr	r1, [pc, #616]	; (104f4 <process_thread_mqtt_demo_process+0x3e8>)
   1028c:	4a87      	ldr	r2, [pc, #540]	; (104ac <process_thread_mqtt_demo_process+0x3a0>)
   1028e:	4b9a      	ldr	r3, [pc, #616]	; (104f8 <process_thread_mqtt_demo_process+0x3ec>)
   10290:	4f9a      	ldr	r7, [pc, #616]	; (104fc <process_thread_mqtt_demo_process+0x3f0>)
   10292:	47b8      	blx	r7

		/*
		* If we are not using the quickstart service (thus we are an IBM
		* registered device), we need to provide user name and password
		*/
		if(strncasecmp(conf.org_id, QUICKSTART, strlen(conf.org_id)) != 0) {
   10294:	4f7c      	ldr	r7, [pc, #496]	; (10488 <process_thread_mqtt_demo_process+0x37c>)
   10296:	1c38      	adds	r0, r7, #0
   10298:	4b99      	ldr	r3, [pc, #612]	; (10500 <process_thread_mqtt_demo_process+0x3f4>)
   1029a:	4798      	blx	r3
   1029c:	1c02      	adds	r2, r0, #0
   1029e:	1c38      	adds	r0, r7, #0
   102a0:	4998      	ldr	r1, [pc, #608]	; (10504 <process_thread_mqtt_demo_process+0x3f8>)
   102a2:	4b99      	ldr	r3, [pc, #612]	; (10508 <process_thread_mqtt_demo_process+0x3fc>)
   102a4:	4798      	blx	r3
   102a6:	2800      	cmp	r0, #0
   102a8:	d010      	beq.n	102cc <process_thread_mqtt_demo_process+0x1c0>
			if(strlen(conf.auth_token) == 0) {
   102aa:	2340      	movs	r3, #64	; 0x40
   102ac:	5cfb      	ldrb	r3, [r7, r3]
   102ae:	2b00      	cmp	r3, #0
   102b0:	d106      	bne.n	102c0 <process_thread_mqtt_demo_process+0x1b4>
				printf("User name set, but empty auth token\n\r");
   102b2:	4896      	ldr	r0, [pc, #600]	; (1050c <process_thread_mqtt_demo_process+0x400>)
   102b4:	4b73      	ldr	r3, [pc, #460]	; (10484 <process_thread_mqtt_demo_process+0x378>)
   102b6:	4798      	blx	r3
				state = STATE_ERROR;
   102b8:	22ff      	movs	r2, #255	; 0xff
   102ba:	4b80      	ldr	r3, [pc, #512]	; (104bc <process_thread_mqtt_demo_process+0x3b0>)
   102bc:	701a      	strb	r2, [r3, #0]
   102be:	e1d7      	b.n	10670 <process_thread_mqtt_demo_process+0x564>
				break;
				} else {
				mqtt_set_username_password(&conn, "use-token-auth",
   102c0:	488b      	ldr	r0, [pc, #556]	; (104f0 <process_thread_mqtt_demo_process+0x3e4>)
   102c2:	4993      	ldr	r1, [pc, #588]	; (10510 <process_thread_mqtt_demo_process+0x404>)
   102c4:	4a70      	ldr	r2, [pc, #448]	; (10488 <process_thread_mqtt_demo_process+0x37c>)
   102c6:	3240      	adds	r2, #64	; 0x40
   102c8:	4b92      	ldr	r3, [pc, #584]	; (10514 <process_thread_mqtt_demo_process+0x408>)
   102ca:	4798      	blx	r3
				conf.auth_token);
			}
		}

		/* _register() will set auto_reconnect. We don't want that. */
		conn.auto_reconnect = 0;
   102cc:	2200      	movs	r2, #0
   102ce:	4b88      	ldr	r3, [pc, #544]	; (104f0 <process_thread_mqtt_demo_process+0x3e4>)
   102d0:	755a      	strb	r2, [r3, #21]
		connect_attempt = 1;
   102d2:	2301      	movs	r3, #1
   102d4:	4a84      	ldr	r2, [pc, #528]	; (104e8 <process_thread_mqtt_demo_process+0x3dc>)
   102d6:	7013      	strb	r3, [r2, #0]

		state = STATE_REGISTERED;
   102d8:	4a78      	ldr	r2, [pc, #480]	; (104bc <process_thread_mqtt_demo_process+0x3b0>)
   102da:	7013      	strb	r3, [r2, #0]
		DBG("Init\n\r");
   102dc:	488e      	ldr	r0, [pc, #568]	; (10518 <process_thread_mqtt_demo_process+0x40c>)
   102de:	4b69      	ldr	r3, [pc, #420]	; (10484 <process_thread_mqtt_demo_process+0x378>)
   102e0:	4798      	blx	r3
		/* Continue */
		case STATE_REGISTERED:
		if(uip_ds6_get_global(ADDR_PREFERRED) != NULL) {
   102e2:	2001      	movs	r0, #1
   102e4:	4b8d      	ldr	r3, [pc, #564]	; (1051c <process_thread_mqtt_demo_process+0x410>)
   102e6:	4798      	blx	r3
   102e8:	2800      	cmp	r0, #0
   102ea:	d017      	beq.n	1031c <process_thread_mqtt_demo_process+0x210>
			/* Registered and with a public IP. Connect */
			DBG("Registered. Connect attempt %u\n\r", connect_attempt);
   102ec:	4b7e      	ldr	r3, [pc, #504]	; (104e8 <process_thread_mqtt_demo_process+0x3dc>)
   102ee:	7819      	ldrb	r1, [r3, #0]
   102f0:	488b      	ldr	r0, [pc, #556]	; (10520 <process_thread_mqtt_demo_process+0x414>)
   102f2:	4b64      	ldr	r3, [pc, #400]	; (10484 <process_thread_mqtt_demo_process+0x378>)
   102f4:	4798      	blx	r3
			ping_parent();
   102f6:	4b8b      	ldr	r3, [pc, #556]	; (10524 <process_thread_mqtt_demo_process+0x418>)
   102f8:	4798      	blx	r3
/*---------------------------------------------------------------------------*/
static void
connect_to_broker(void)
{
	/* Connect to MQTT server */
	mqtt_connect(&conn, conf.broker_ip, conf.broker_port,
   102fa:	4b63      	ldr	r3, [pc, #396]	; (10488 <process_thread_mqtt_demo_process+0x37c>)
   102fc:	1c19      	adds	r1, r3, #0
   102fe:	3180      	adds	r1, #128	; 0x80
   10300:	22d0      	movs	r2, #208	; 0xd0
   10302:	5a9a      	ldrh	r2, [r3, r2]
	conf.pub_interval * 3);
   10304:	20c8      	movs	r0, #200	; 0xc8
/*---------------------------------------------------------------------------*/
static void
connect_to_broker(void)
{
	/* Connect to MQTT server */
	mqtt_connect(&conn, conf.broker_ip, conf.broker_port,
   10306:	5818      	ldr	r0, [r3, r0]
   10308:	0043      	lsls	r3, r0, #1
   1030a:	18c3      	adds	r3, r0, r3
   1030c:	b29b      	uxth	r3, r3
   1030e:	4878      	ldr	r0, [pc, #480]	; (104f0 <process_thread_mqtt_demo_process+0x3e4>)
   10310:	4f85      	ldr	r7, [pc, #532]	; (10528 <process_thread_mqtt_demo_process+0x41c>)
   10312:	47b8      	blx	r7
	conf.pub_interval * 3);
	//DBG("broker_ip: %s \n\rbroker_port: %s\n\r",conf.broker_ip,conf.broker_port);
	state = STATE_CONNECTING;
   10314:	2202      	movs	r2, #2
   10316:	4b69      	ldr	r3, [pc, #420]	; (104bc <process_thread_mqtt_demo_process+0x3b0>)
   10318:	701a      	strb	r2, [r3, #0]
   1031a:	e008      	b.n	1032e <process_thread_mqtt_demo_process+0x222>
			/* Registered and with a public IP. Connect */
			DBG("Registered. Connect attempt %u\n\r", connect_attempt);
			ping_parent();
			connect_to_broker();
			} else {
			leds_on(STATUS_LED);
   1031c:	2001      	movs	r0, #1
   1031e:	4b83      	ldr	r3, [pc, #524]	; (1052c <process_thread_mqtt_demo_process+0x420>)
   10320:	4798      	blx	r3
			ctimer_set(&ct, NO_NET_LED_DURATION, publish_led_off, NULL);
   10322:	4883      	ldr	r0, [pc, #524]	; (10530 <process_thread_mqtt_demo_process+0x424>)
   10324:	2110      	movs	r1, #16
   10326:	4a83      	ldr	r2, [pc, #524]	; (10534 <process_thread_mqtt_demo_process+0x428>)
   10328:	2300      	movs	r3, #0
   1032a:	4f83      	ldr	r7, [pc, #524]	; (10538 <process_thread_mqtt_demo_process+0x42c>)
   1032c:	47b8      	blx	r7
		}
		//AWGES etimer_set(&publish_periodic_timer, NET_CONNECT_PERIODIC >> 1);
		etimer_set(&publish_periodic_timer, 0);
   1032e:	486f      	ldr	r0, [pc, #444]	; (104ec <process_thread_mqtt_demo_process+0x3e0>)
   10330:	2100      	movs	r1, #0
   10332:	4b6a      	ldr	r3, [pc, #424]	; (104dc <process_thread_mqtt_demo_process+0x3d0>)
   10334:	4798      	blx	r3
   10336:	e19f      	b.n	10678 <process_thread_mqtt_demo_process+0x56c>
		return;
		break;
		case STATE_CONNECTING:
		leds_on(STATUS_LED);
   10338:	2001      	movs	r0, #1
   1033a:	4b7c      	ldr	r3, [pc, #496]	; (1052c <process_thread_mqtt_demo_process+0x420>)
   1033c:	4798      	blx	r3
		ctimer_set(&ct, CONNECTING_LED_DURATION, publish_led_off, NULL);
   1033e:	487c      	ldr	r0, [pc, #496]	; (10530 <process_thread_mqtt_demo_process+0x424>)
   10340:	2120      	movs	r1, #32
   10342:	4a7c      	ldr	r2, [pc, #496]	; (10534 <process_thread_mqtt_demo_process+0x428>)
   10344:	2300      	movs	r3, #0
   10346:	4f7c      	ldr	r7, [pc, #496]	; (10538 <process_thread_mqtt_demo_process+0x42c>)
   10348:	47b8      	blx	r7
		/* Not connected yet. Wait */
		
		//yuri aqui
		DBG("Connecting (%u)\n\r", connect_attempt);
   1034a:	4b67      	ldr	r3, [pc, #412]	; (104e8 <process_thread_mqtt_demo_process+0x3dc>)
   1034c:	7819      	ldrb	r1, [r3, #0]
   1034e:	487b      	ldr	r0, [pc, #492]	; (1053c <process_thread_mqtt_demo_process+0x430>)
   10350:	4b4c      	ldr	r3, [pc, #304]	; (10484 <process_thread_mqtt_demo_process+0x378>)
   10352:	4798      	blx	r3
   10354:	e18c      	b.n	10670 <process_thread_mqtt_demo_process+0x564>
		break;
		case STATE_CONNECTED:
		/* Don't subscribe unless we are a registered device */
		if(strncasecmp(conf.org_id, QUICKSTART, strlen(conf.org_id)) == 0) {
   10356:	4f4c      	ldr	r7, [pc, #304]	; (10488 <process_thread_mqtt_demo_process+0x37c>)
   10358:	1c38      	adds	r0, r7, #0
   1035a:	4b69      	ldr	r3, [pc, #420]	; (10500 <process_thread_mqtt_demo_process+0x3f4>)
   1035c:	4798      	blx	r3
   1035e:	1c02      	adds	r2, r0, #0
   10360:	1c38      	adds	r0, r7, #0
   10362:	4968      	ldr	r1, [pc, #416]	; (10504 <process_thread_mqtt_demo_process+0x3f8>)
   10364:	4b68      	ldr	r3, [pc, #416]	; (10508 <process_thread_mqtt_demo_process+0x3fc>)
   10366:	4798      	blx	r3
   10368:	2800      	cmp	r0, #0
   1036a:	d105      	bne.n	10378 <process_thread_mqtt_demo_process+0x26c>
			DBG("Using 'quickstart': Skipping subscribe\n\r");
   1036c:	4874      	ldr	r0, [pc, #464]	; (10540 <process_thread_mqtt_demo_process+0x434>)
   1036e:	4b45      	ldr	r3, [pc, #276]	; (10484 <process_thread_mqtt_demo_process+0x378>)
   10370:	4798      	blx	r3
			//subscribe();
			state = STATE_PUBLISHING;
   10372:	2204      	movs	r2, #4
   10374:	4b51      	ldr	r3, [pc, #324]	; (104bc <process_thread_mqtt_demo_process+0x3b0>)
   10376:	701a      	strb	r2, [r3, #0]
		}
		/* Continue */
		case STATE_PUBLISHING:
		/* If the timer expired, the connection is stable. */
		if(timer_expired(&connection_life)) {
   10378:	4872      	ldr	r0, [pc, #456]	; (10544 <process_thread_mqtt_demo_process+0x438>)
   1037a:	4b73      	ldr	r3, [pc, #460]	; (10548 <process_thread_mqtt_demo_process+0x43c>)
   1037c:	4798      	blx	r3
   1037e:	2800      	cmp	r0, #0
   10380:	d002      	beq.n	10388 <process_thread_mqtt_demo_process+0x27c>
			/*
			* Intentionally using 0 here instead of 1: We want RECONNECT_ATTEMPTS
			* attempts if we disconnect after a successful connect
			*/
			connect_attempt = 0;
   10382:	2200      	movs	r2, #0
   10384:	4b58      	ldr	r3, [pc, #352]	; (104e8 <process_thread_mqtt_demo_process+0x3dc>)
   10386:	701a      	strb	r2, [r3, #0]
		}

		if(mqtt_ready(&conn) && conn.out_buffer_sent) {
   10388:	236a      	movs	r3, #106	; 0x6a
   1038a:	4a59      	ldr	r2, [pc, #356]	; (104f0 <process_thread_mqtt_demo_process+0x3e4>)
   1038c:	5cd2      	ldrb	r2, [r2, r3]
   1038e:	2a00      	cmp	r2, #0
   10390:	d000      	beq.n	10394 <process_thread_mqtt_demo_process+0x288>
   10392:	e13b      	b.n	1060c <process_thread_mqtt_demo_process+0x500>
   10394:	3b0a      	subs	r3, #10
   10396:	4956      	ldr	r1, [pc, #344]	; (104f0 <process_thread_mqtt_demo_process+0x3e4>)
   10398:	5ccb      	ldrb	r3, [r1, r3]
   1039a:	2b08      	cmp	r3, #8
   1039c:	d000      	beq.n	103a0 <process_thread_mqtt_demo_process+0x294>
   1039e:	e135      	b.n	1060c <process_thread_mqtt_demo_process+0x500>
   103a0:	239d      	movs	r3, #157	; 0x9d
   103a2:	009b      	lsls	r3, r3, #2
   103a4:	5ccb      	ldrb	r3, [r1, r3]
   103a6:	2b00      	cmp	r3, #0
   103a8:	d100      	bne.n	103ac <process_thread_mqtt_demo_process+0x2a0>
   103aa:	e12f      	b.n	1060c <process_thread_mqtt_demo_process+0x500>
			/* Connected. Publish */
			if(state == STATE_CONNECTED) {
   103ac:	4b43      	ldr	r3, [pc, #268]	; (104bc <process_thread_mqtt_demo_process+0x3b0>)
   103ae:	781b      	ldrb	r3, [r3, #0]
   103b0:	2b03      	cmp	r3, #3
   103b2:	d116      	bne.n	103e2 <process_thread_mqtt_demo_process+0x2d6>
subscribe(void)
{
	/* Publish MQTT topic in IBM quickstart format */
	mqtt_status_t status;

	status = mqtt_subscribe(&conn, NULL, sub_topic, MQTT_QOS_LEVEL_1);
   103b4:	1c08      	adds	r0, r1, #0
   103b6:	2100      	movs	r1, #0
   103b8:	4a64      	ldr	r2, [pc, #400]	; (1054c <process_thread_mqtt_demo_process+0x440>)
   103ba:	3b02      	subs	r3, #2
   103bc:	4f64      	ldr	r7, [pc, #400]	; (10550 <process_thread_mqtt_demo_process+0x444>)
   103be:	47b8      	blx	r7
   103c0:	1c07      	adds	r7, r0, #0

	DBG("APP - Subscribing!\n\r");
   103c2:	4864      	ldr	r0, [pc, #400]	; (10554 <process_thread_mqtt_demo_process+0x448>)
   103c4:	4b2f      	ldr	r3, [pc, #188]	; (10484 <process_thread_mqtt_demo_process+0x378>)
   103c6:	4798      	blx	r3
	if(status == MQTT_STATUS_OUT_QUEUE_FULL) {
   103c8:	2f01      	cmp	r7, #1
   103ca:	d102      	bne.n	103d2 <process_thread_mqtt_demo_process+0x2c6>
		DBG("APP - Tried to subscribe but command queue was full!\n\r");
   103cc:	4862      	ldr	r0, [pc, #392]	; (10558 <process_thread_mqtt_demo_process+0x44c>)
   103ce:	4b2d      	ldr	r3, [pc, #180]	; (10484 <process_thread_mqtt_demo_process+0x378>)
   103d0:	4798      	blx	r3
	}
	DBG("\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\rSubscribed on:%s \n\r", sub_topic);
   103d2:	4862      	ldr	r0, [pc, #392]	; (1055c <process_thread_mqtt_demo_process+0x450>)
   103d4:	495d      	ldr	r1, [pc, #372]	; (1054c <process_thread_mqtt_demo_process+0x440>)
   103d6:	4b2b      	ldr	r3, [pc, #172]	; (10484 <process_thread_mqtt_demo_process+0x378>)
   103d8:	4798      	blx	r3

		if(mqtt_ready(&conn) && conn.out_buffer_sent) {
			/* Connected. Publish */
			if(state == STATE_CONNECTED) {
				subscribe();
				state = STATE_PUBLISHING;
   103da:	2204      	movs	r2, #4
   103dc:	4b37      	ldr	r3, [pc, #220]	; (104bc <process_thread_mqtt_demo_process+0x3b0>)
   103de:	701a      	strb	r2, [r3, #0]
   103e0:	e10a      	b.n	105f8 <process_thread_mqtt_demo_process+0x4ec>
				} else {
				leds_on(STATUS_LED);
   103e2:	2001      	movs	r0, #1
   103e4:	4b51      	ldr	r3, [pc, #324]	; (1052c <process_thread_mqtt_demo_process+0x420>)
   103e6:	4798      	blx	r3
				ctimer_set(&ct, PUBLISH_LED_ON_DURATION, publish_led_off, NULL);
   103e8:	4851      	ldr	r0, [pc, #324]	; (10530 <process_thread_mqtt_demo_process+0x424>)
   103ea:	2180      	movs	r1, #128	; 0x80
   103ec:	4a51      	ldr	r2, [pc, #324]	; (10534 <process_thread_mqtt_demo_process+0x428>)
   103ee:	2300      	movs	r3, #0
   103f0:	4f51      	ldr	r7, [pc, #324]	; (10538 <process_thread_mqtt_demo_process+0x42c>)
   103f2:	47b8      	blx	r7
{
	/* Publish MQTT topic in IBM quickstart format */
	int len;
	int remaining = APP_BUFFER_SIZE;

	seq_nr_value++;
   103f4:	4a5a      	ldr	r2, [pc, #360]	; (10560 <process_thread_mqtt_demo_process+0x454>)
   103f6:	8813      	ldrh	r3, [r2, #0]
   103f8:	3301      	adds	r3, #1
   103fa:	8013      	strh	r3, [r2, #0]

	buf_ptr = app_buffer;
   103fc:	4a59      	ldr	r2, [pc, #356]	; (10564 <process_thread_mqtt_demo_process+0x458>)
   103fe:	4b5a      	ldr	r3, [pc, #360]	; (10568 <process_thread_mqtt_demo_process+0x45c>)
   10400:	601a      	str	r2, [r3, #0]
	if (configure_i2c_light() != OK)
   10402:	4b5a      	ldr	r3, [pc, #360]	; (1056c <process_thread_mqtt_demo_process+0x460>)
   10404:	4798      	blx	r3
   10406:	2800      	cmp	r0, #0
   10408:	d003      	beq.n	10412 <process_thread_mqtt_demo_process+0x306>
	printf("Erro ao inicializar o I2C\n\r");
   1040a:	4859      	ldr	r0, [pc, #356]	; (10570 <process_thread_mqtt_demo_process+0x464>)
   1040c:	4b1d      	ldr	r3, [pc, #116]	; (10484 <process_thread_mqtt_demo_process+0x378>)
   1040e:	4798      	blx	r3
   10410:	e002      	b.n	10418 <process_thread_mqtt_demo_process+0x30c>
	else  printf("inicializado o I2C\n\r");
   10412:	4858      	ldr	r0, [pc, #352]	; (10574 <process_thread_mqtt_demo_process+0x468>)
   10414:	4b1b      	ldr	r3, [pc, #108]	; (10484 <process_thread_mqtt_demo_process+0x378>)
   10416:	4798      	blx	r3
	//printf("x: %d\n\r", read_dimmer(0));
	len = snprintf(buf_ptr, remaining,"Accelerometer Value:%d",read_dimmer(0));
   10418:	4b53      	ldr	r3, [pc, #332]	; (10568 <process_thread_mqtt_demo_process+0x45c>)
   1041a:	681f      	ldr	r7, [r3, #0]
   1041c:	2000      	movs	r0, #0
   1041e:	4b56      	ldr	r3, [pc, #344]	; (10578 <process_thread_mqtt_demo_process+0x46c>)
   10420:	4798      	blx	r3
   10422:	1c03      	adds	r3, r0, #0
   10424:	1c38      	adds	r0, r7, #0
   10426:	2180      	movs	r1, #128	; 0x80
   10428:	0089      	lsls	r1, r1, #2
   1042a:	4a54      	ldr	r2, [pc, #336]	; (1057c <process_thread_mqtt_demo_process+0x470>)
   1042c:	4f21      	ldr	r7, [pc, #132]	; (104b4 <process_thread_mqtt_demo_process+0x3a8>)
   1042e:	47b8      	blx	r7
   10430:	1e07      	subs	r7, r0, #0

	if(len < 0 || len >= remaining) {
   10432:	4b53      	ldr	r3, [pc, #332]	; (10580 <process_thread_mqtt_demo_process+0x474>)
   10434:	429f      	cmp	r7, r3
   10436:	d906      	bls.n	10446 <process_thread_mqtt_demo_process+0x33a>
		printf("Buffer too short. Have %d, need %d + \\0\n\r", remaining, len);
   10438:	4852      	ldr	r0, [pc, #328]	; (10584 <process_thread_mqtt_demo_process+0x478>)
   1043a:	2180      	movs	r1, #128	; 0x80
   1043c:	0089      	lsls	r1, r1, #2
   1043e:	1c3a      	adds	r2, r7, #0
   10440:	4b10      	ldr	r3, [pc, #64]	; (10484 <process_thread_mqtt_demo_process+0x378>)
   10442:	4798      	blx	r3
   10444:	e0d8      	b.n	105f8 <process_thread_mqtt_demo_process+0x4ec>
		return;
	}

	remaining -= len;
   10446:	2180      	movs	r1, #128	; 0x80
   10448:	0089      	lsls	r1, r1, #2
   1044a:	1a0b      	subs	r3, r1, r0
   1044c:	4699      	mov	r9, r3
	buf_ptr += len;
   1044e:	4a46      	ldr	r2, [pc, #280]	; (10568 <process_thread_mqtt_demo_process+0x45c>)
   10450:	6813      	ldr	r3, [r2, #0]
   10452:	181b      	adds	r3, r3, r0
   10454:	6013      	str	r3, [r2, #0]

	/* Put our Default route's string representation in a buffer */
	char def_rt_str[64];
	memset(def_rt_str, 0, sizeof(def_rt_str));
   10456:	a808      	add	r0, sp, #32
   10458:	2100      	movs	r1, #0
   1045a:	2240      	movs	r2, #64	; 0x40
   1045c:	4b0b      	ldr	r3, [pc, #44]	; (1048c <process_thread_mqtt_demo_process+0x380>)
   1045e:	4798      	blx	r3
	ipaddr_sprintf(def_rt_str, sizeof(def_rt_str), uip_ds6_defrt_choose());
   10460:	4b49      	ldr	r3, [pc, #292]	; (10588 <process_thread_mqtt_demo_process+0x47c>)
   10462:	4798      	blx	r3
   10464:	1c02      	adds	r2, r0, #0
   10466:	a808      	add	r0, sp, #32
   10468:	2140      	movs	r1, #64	; 0x40
   1046a:	4b48      	ldr	r3, [pc, #288]	; (1058c <process_thread_mqtt_demo_process+0x480>)
   1046c:	4798      	blx	r3

	//len = snprintf(buf_ptr, remaining, ",\"Def Route\":\"%s\",\"RSSI (dBm)\":%d",
	//             def_rt_str, def_rt_rssi);

	if(len < 0 || len >= remaining) {
   1046e:	454f      	cmp	r7, r9
   10470:	da00      	bge.n	10474 <process_thread_mqtt_demo_process+0x368>
   10472:	e08d      	b.n	10590 <process_thread_mqtt_demo_process+0x484>
		printf("Buffer too short. Have %d, need %d + \\0\n\r", remaining, len);
   10474:	4843      	ldr	r0, [pc, #268]	; (10584 <process_thread_mqtt_demo_process+0x478>)
   10476:	4649      	mov	r1, r9
   10478:	1c3a      	adds	r2, r7, #0
   1047a:	4b02      	ldr	r3, [pc, #8]	; (10484 <process_thread_mqtt_demo_process+0x378>)
   1047c:	4798      	blx	r3
   1047e:	e0bb      	b.n	105f8 <process_thread_mqtt_demo_process+0x4ec>
   10480:	00013404 	.word	0x00013404
   10484:	00010b79 	.word	0x00010b79
   10488:	20001f28 	.word	0x20001f28
   1048c:	00010b69 	.word	0x00010b69
   10490:	00013418 	.word	0x00013418
   10494:	00013428 	.word	0x00013428
   10498:	00013430 	.word	0x00013430
   1049c:	00013438 	.word	0x00013438
   104a0:	00013440 	.word	0x00013440
   104a4:	0000075b 	.word	0x0000075b
   104a8:	200031d0 	.word	0x200031d0
   104ac:	20002a3c 	.word	0x20002a3c
   104b0:	00013448 	.word	0x00013448
   104b4:	00010dc9 	.word	0x00010dc9
   104b8:	0001346c 	.word	0x0001346c
   104bc:	2000203c 	.word	0x2000203c
   104c0:	00013488 	.word	0x00013488
   104c4:	000134a4 	.word	0x000134a4
   104c8:	20002a7c 	.word	0x20002a7c
   104cc:	20002a2c 	.word	0x20002a2c
   104d0:	0000fe89 	.word	0x0000fe89
   104d4:	00007f71 	.word	0x00007f71
   104d8:	200027f4 	.word	0x200027f4
   104dc:	0000e91d 	.word	0x0000e91d
   104e0:	20002b55 	.word	0x20002b55
   104e4:	00012f7c 	.word	0x00012f7c
   104e8:	20002828 	.word	0x20002828
   104ec:	200027a0 	.word	0x200027a0
   104f0:	20002040 	.word	0x20002040
   104f4:	200001c0 	.word	0x200001c0
   104f8:	0000fec9 	.word	0x0000fec9
   104fc:	00003c39 	.word	0x00003c39
   10500:	00010e31 	.word	0x00010e31
   10504:	000134c0 	.word	0x000134c0
   10508:	00010e41 	.word	0x00010e41
   1050c:	000134cc 	.word	0x000134cc
   10510:	000134f4 	.word	0x000134f4
   10514:	00005561 	.word	0x00005561
   10518:	00013504 	.word	0x00013504
   1051c:	000074c9 	.word	0x000074c9
   10520:	0001350c 	.word	0x0001350c
   10524:	00010035 	.word	0x00010035
   10528:	00003cd1 	.word	0x00003cd1
   1052c:	000056d9 	.word	0x000056d9
   10530:	20002808 	.word	0x20002808
   10534:	0000feb9 	.word	0x0000feb9
   10538:	0000e625 	.word	0x0000e625
   1053c:	00013530 	.word	0x00013530
   10540:	00013544 	.word	0x00013544
   10544:	20002a34 	.word	0x20002a34
   10548:	0000ed9d 	.word	0x0000ed9d
   1054c:	200027b0 	.word	0x200027b0
   10550:	00005411 	.word	0x00005411
   10554:	00013570 	.word	0x00013570
   10558:	00013588 	.word	0x00013588
   1055c:	000135c0 	.word	0x000135c0
   10560:	2000203e 	.word	0x2000203e
   10564:	2000282c 	.word	0x2000282c
   10568:	200027f0 	.word	0x200027f0
   1056c:	0000f43d 	.word	0x0000f43d
   10570:	000135f0 	.word	0x000135f0
   10574:	0001360c 	.word	0x0001360c
   10578:	0000f4e1 	.word	0x0000f4e1
   1057c:	00013624 	.word	0x00013624
   10580:	000001ff 	.word	0x000001ff
   10584:	0001363c 	.word	0x0001363c
   10588:	0000725d 	.word	0x0000725d
   1058c:	0001005d 	.word	0x0001005d
		return;
	}
	remaining -= len;
   10590:	464b      	mov	r3, r9
   10592:	1bd9      	subs	r1, r3, r7
	buf_ptr += len;
   10594:	4a58      	ldr	r2, [pc, #352]	; (106f8 <process_thread_mqtt_demo_process+0x5ec>)
   10596:	6813      	ldr	r3, [r2, #0]
   10598:	19db      	adds	r3, r3, r7
   1059a:	6013      	str	r3, [r2, #0]

	//len = snprintf(buf_ptr, remaining, ",\"On-Chip Temp (mC)\":%d",
	//               777);

	if(len < 0 || len >= remaining) {
   1059c:	428f      	cmp	r7, r1
   1059e:	db04      	blt.n	105aa <process_thread_mqtt_demo_process+0x49e>
		printf("Buffer too short. Have %d, need %d + \\0\n\r", remaining, len);
   105a0:	4856      	ldr	r0, [pc, #344]	; (106fc <process_thread_mqtt_demo_process+0x5f0>)
   105a2:	1c3a      	adds	r2, r7, #0
   105a4:	4b56      	ldr	r3, [pc, #344]	; (10700 <process_thread_mqtt_demo_process+0x5f4>)
   105a6:	4798      	blx	r3
   105a8:	e026      	b.n	105f8 <process_thread_mqtt_demo_process+0x4ec>
		return;
	}
	remaining -= len;
   105aa:	1bc9      	subs	r1, r1, r7
	buf_ptr += len;
   105ac:	19db      	adds	r3, r3, r7
   105ae:	4a52      	ldr	r2, [pc, #328]	; (106f8 <process_thread_mqtt_demo_process+0x5ec>)
   105b0:	6013      	str	r3, [r2, #0]

	//len = snprintf(buf_ptr, remaining, ",\"VDD3 (mV)\":%d",
	//               777);

	if(len < 0 || len >= remaining) {
   105b2:	428f      	cmp	r7, r1
   105b4:	db04      	blt.n	105c0 <process_thread_mqtt_demo_process+0x4b4>
		printf("Buffer too short. Have %d, need %d + \\0\n\r", remaining, len);
   105b6:	4851      	ldr	r0, [pc, #324]	; (106fc <process_thread_mqtt_demo_process+0x5f0>)
   105b8:	1c3a      	adds	r2, r7, #0
   105ba:	4b51      	ldr	r3, [pc, #324]	; (10700 <process_thread_mqtt_demo_process+0x5f4>)
   105bc:	4798      	blx	r3
   105be:	e01b      	b.n	105f8 <process_thread_mqtt_demo_process+0x4ec>
		return;
	}
	remaining -= len;
   105c0:	1bc9      	subs	r1, r1, r7
	buf_ptr += len;
   105c2:	19db      	adds	r3, r3, r7
   105c4:	4a4c      	ldr	r2, [pc, #304]	; (106f8 <process_thread_mqtt_demo_process+0x5ec>)
   105c6:	6013      	str	r3, [r2, #0]

	//len = snprintf(buf_ptr, remaining, "}}");

	if(len < 0 || len >= remaining) {
   105c8:	428f      	cmp	r7, r1
   105ca:	db04      	blt.n	105d6 <process_thread_mqtt_demo_process+0x4ca>
		printf("Buffer too short. Have %d, need %d + \\0\n\r", remaining, len);
   105cc:	484b      	ldr	r0, [pc, #300]	; (106fc <process_thread_mqtt_demo_process+0x5f0>)
   105ce:	1c3a      	adds	r2, r7, #0
   105d0:	4b4b      	ldr	r3, [pc, #300]	; (10700 <process_thread_mqtt_demo_process+0x5f4>)
   105d2:	4798      	blx	r3
   105d4:	e010      	b.n	105f8 <process_thread_mqtt_demo_process+0x4ec>
		return;
	}

	mqtt_publish(&conn, NULL, pub_topic, (uint8_t *)app_buffer,
	strlen(app_buffer), MQTT_QOS_LEVEL_1, MQTT_RETAIN_OFF);
   105d6:	4f4b      	ldr	r7, [pc, #300]	; (10704 <process_thread_mqtt_demo_process+0x5f8>)
   105d8:	1c38      	adds	r0, r7, #0
   105da:	4b4b      	ldr	r3, [pc, #300]	; (10708 <process_thread_mqtt_demo_process+0x5fc>)
   105dc:	4798      	blx	r3
	if(len < 0 || len >= remaining) {
		printf("Buffer too short. Have %d, need %d + \\0\n\r", remaining, len);
		return;
	}

	mqtt_publish(&conn, NULL, pub_topic, (uint8_t *)app_buffer,
   105de:	9000      	str	r0, [sp, #0]
   105e0:	2301      	movs	r3, #1
   105e2:	9301      	str	r3, [sp, #4]
   105e4:	2100      	movs	r1, #0
   105e6:	9102      	str	r1, [sp, #8]
   105e8:	4848      	ldr	r0, [pc, #288]	; (1070c <process_thread_mqtt_demo_process+0x600>)
   105ea:	4a49      	ldr	r2, [pc, #292]	; (10710 <process_thread_mqtt_demo_process+0x604>)
   105ec:	1c3b      	adds	r3, r7, #0
   105ee:	4f49      	ldr	r7, [pc, #292]	; (10714 <process_thread_mqtt_demo_process+0x608>)
   105f0:	47b8      	blx	r7
	strlen(app_buffer), MQTT_QOS_LEVEL_1, MQTT_RETAIN_OFF);

	DBG("APP - Publish!\n\r");
   105f2:	4849      	ldr	r0, [pc, #292]	; (10718 <process_thread_mqtt_demo_process+0x60c>)
   105f4:	4b42      	ldr	r3, [pc, #264]	; (10700 <process_thread_mqtt_demo_process+0x5f4>)
   105f6:	4798      	blx	r3
				} else {
				leds_on(STATUS_LED);
				ctimer_set(&ct, PUBLISH_LED_ON_DURATION, publish_led_off, NULL);
				publish();
			}
			etimer_set(&publish_periodic_timer, conf.pub_interval);
   105f8:	23c8      	movs	r3, #200	; 0xc8
   105fa:	4a48      	ldr	r2, [pc, #288]	; (1071c <process_thread_mqtt_demo_process+0x610>)
   105fc:	58d1      	ldr	r1, [r2, r3]
   105fe:	4848      	ldr	r0, [pc, #288]	; (10720 <process_thread_mqtt_demo_process+0x614>)
   10600:	4b48      	ldr	r3, [pc, #288]	; (10724 <process_thread_mqtt_demo_process+0x618>)
   10602:	4798      	blx	r3

			DBG("Publishing\n\r");
   10604:	4848      	ldr	r0, [pc, #288]	; (10728 <process_thread_mqtt_demo_process+0x61c>)
   10606:	4b3e      	ldr	r3, [pc, #248]	; (10700 <process_thread_mqtt_demo_process+0x5f4>)
   10608:	4798      	blx	r3
   1060a:	e035      	b.n	10678 <process_thread_mqtt_demo_process+0x56c>
			* This can mean that we have lost connectivity to our broker or that
			* simply there is some network delay. In both cases, we refuse to
			* trigger a new message and we wait for TCP to either ACK the entire
			* packet after retries, or to timeout and notify us.
			*/
			DBG("Publishing... (MQTT state=%d, q=%u)\n\r", conn.state,
   1060c:	2360      	movs	r3, #96	; 0x60
   1060e:	493f      	ldr	r1, [pc, #252]	; (1070c <process_thread_mqtt_demo_process+0x600>)
   10610:	5cc9      	ldrb	r1, [r1, r3]
   10612:	4846      	ldr	r0, [pc, #280]	; (1072c <process_thread_mqtt_demo_process+0x620>)
   10614:	4b3a      	ldr	r3, [pc, #232]	; (10700 <process_thread_mqtt_demo_process+0x5f4>)
   10616:	4798      	blx	r3
   10618:	e02a      	b.n	10670 <process_thread_mqtt_demo_process+0x564>
			conn.out_queue_full);
		}
		break;
		case STATE_DISCONNECTED:
		DBG("Disconnected\n\r");
   1061a:	4845      	ldr	r0, [pc, #276]	; (10730 <process_thread_mqtt_demo_process+0x624>)
   1061c:	4b38      	ldr	r3, [pc, #224]	; (10700 <process_thread_mqtt_demo_process+0x5f4>)
   1061e:	4798      	blx	r3
		if(connect_attempt < RECONNECT_ATTEMPTS ||
		RECONNECT_ATTEMPTS == RETRY_FOREVER) {
			/* Disconnect and backoff */
			clock_time_t interval;
			mqtt_disconnect(&conn);
   10620:	483a      	ldr	r0, [pc, #232]	; (1070c <process_thread_mqtt_demo_process+0x600>)
   10622:	4b44      	ldr	r3, [pc, #272]	; (10734 <process_thread_mqtt_demo_process+0x628>)
   10624:	4798      	blx	r3
			connect_attempt++;
   10626:	4b44      	ldr	r3, [pc, #272]	; (10738 <process_thread_mqtt_demo_process+0x62c>)
   10628:	7819      	ldrb	r1, [r3, #0]
   1062a:	3101      	adds	r1, #1
   1062c:	b2c9      	uxtb	r1, r1
   1062e:	7019      	strb	r1, [r3, #0]

			interval = connect_attempt < 3 ? RECONNECT_INTERVAL << connect_attempt :
   10630:	2902      	cmp	r1, #2
   10632:	d803      	bhi.n	1063c <process_thread_mqtt_demo_process+0x530>
   10634:	2280      	movs	r2, #128	; 0x80
   10636:	0052      	lsls	r2, r2, #1
   10638:	408a      	lsls	r2, r1
   1063a:	e001      	b.n	10640 <process_thread_mqtt_demo_process+0x534>
   1063c:	2280      	movs	r2, #128	; 0x80
   1063e:	0112      	lsls	r2, r2, #4
			RECONNECT_INTERVAL << 3;

			DBG("Disconnected. Attempt %u in %lu ticks\n\r", connect_attempt, interval);
   10640:	483e      	ldr	r0, [pc, #248]	; (1073c <process_thread_mqtt_demo_process+0x630>)
   10642:	4b2f      	ldr	r3, [pc, #188]	; (10700 <process_thread_mqtt_demo_process+0x5f4>)
   10644:	4798      	blx	r3

			//etimer_set(&publish_periodic_timer, interval);
			etimer_set(&publish_periodic_timer, CLOCK_SECOND);
   10646:	4836      	ldr	r0, [pc, #216]	; (10720 <process_thread_mqtt_demo_process+0x614>)
   10648:	2180      	movs	r1, #128	; 0x80
   1064a:	4b36      	ldr	r3, [pc, #216]	; (10724 <process_thread_mqtt_demo_process+0x618>)
   1064c:	4798      	blx	r3

			state = STATE_REGISTERED;
   1064e:	2201      	movs	r2, #1
   10650:	4b3b      	ldr	r3, [pc, #236]	; (10740 <process_thread_mqtt_demo_process+0x634>)
   10652:	701a      	strb	r2, [r3, #0]
   10654:	e010      	b.n	10678 <process_thread_mqtt_demo_process+0x56c>
			DBG("Aborting connection after %u attempts\n\r", connect_attempt - 1);
		}
		break;
		case STATE_CONFIG_ERROR:
		/* Idle away. The only way out is a new config */
		printf("Bad configuration.\n\r");
   10656:	483b      	ldr	r0, [pc, #236]	; (10744 <process_thread_mqtt_demo_process+0x638>)
   10658:	4b29      	ldr	r3, [pc, #164]	; (10700 <process_thread_mqtt_demo_process+0x5f4>)
   1065a:	4798      	blx	r3
   1065c:	e00c      	b.n	10678 <process_thread_mqtt_demo_process+0x56c>
		return;
		case STATE_ERROR:
		default:
		leds_on(STATUS_LED);
   1065e:	2001      	movs	r0, #1
   10660:	4b39      	ldr	r3, [pc, #228]	; (10748 <process_thread_mqtt_demo_process+0x63c>)
   10662:	4798      	blx	r3
		* 'default' should never happen.
		*
		* If we enter here it's because of some error. Stop timers. The only thing
		* that can bring us out is a new config event
		*/
		printf("Default case: State=0x%02x\n\r", state);
   10664:	4b36      	ldr	r3, [pc, #216]	; (10740 <process_thread_mqtt_demo_process+0x634>)
   10666:	7819      	ldrb	r1, [r3, #0]
   10668:	4838      	ldr	r0, [pc, #224]	; (1074c <process_thread_mqtt_demo_process+0x640>)
   1066a:	4b25      	ldr	r3, [pc, #148]	; (10700 <process_thread_mqtt_demo_process+0x5f4>)
   1066c:	4798      	blx	r3
   1066e:	e003      	b.n	10678 <process_thread_mqtt_demo_process+0x56c>
		return;
	}

	/* If we didn't return so far, reschedule ourselves */
	etimer_set(&publish_periodic_timer, STATE_MACHINE_PERIODIC);
   10670:	482b      	ldr	r0, [pc, #172]	; (10720 <process_thread_mqtt_demo_process+0x614>)
   10672:	2140      	movs	r1, #64	; 0x40
   10674:	4b2b      	ldr	r3, [pc, #172]	; (10724 <process_thread_mqtt_demo_process+0x618>)
   10676:	4798      	blx	r3
		ev == PROCESS_EVENT_POLL ||
		(ev == sensors_event && data == PUBLISH_TRIGGER)) {
			state_machine();
		}

		if(ev == PROCESS_EVENT_TIMER && data == &echo_request_timer) {
   10678:	2c88      	cmp	r4, #136	; 0x88
   1067a:	d000      	beq.n	1067e <process_thread_mqtt_demo_process+0x572>
   1067c:	e5c8      	b.n	10210 <process_thread_mqtt_demo_process+0x104>
   1067e:	4b34      	ldr	r3, [pc, #208]	; (10750 <process_thread_mqtt_demo_process+0x644>)
   10680:	429e      	cmp	r6, r3
   10682:	d000      	beq.n	10686 <process_thread_mqtt_demo_process+0x57a>
   10684:	e5c4      	b.n	10210 <process_thread_mqtt_demo_process+0x104>
			ping_parent();
   10686:	4b33      	ldr	r3, [pc, #204]	; (10754 <process_thread_mqtt_demo_process+0x648>)
   10688:	4798      	blx	r3
			etimer_set(&echo_request_timer, conf.def_rt_ping_interval);
   1068a:	23cc      	movs	r3, #204	; 0xcc
   1068c:	4a23      	ldr	r2, [pc, #140]	; (1071c <process_thread_mqtt_demo_process+0x610>)
   1068e:	58d1      	ldr	r1, [r2, r3]
   10690:	482f      	ldr	r0, [pc, #188]	; (10750 <process_thread_mqtt_demo_process+0x644>)
   10692:	4b24      	ldr	r3, [pc, #144]	; (10724 <process_thread_mqtt_demo_process+0x618>)
   10694:	4798      	blx	r3
   10696:	e5bb      	b.n	10210 <process_thread_mqtt_demo_process+0x104>
		}
	}

	PROCESS_END();
   10698:	2300      	movs	r3, #0
   1069a:	8003      	strh	r3, [r0, #0]
   1069c:	2003      	movs	r0, #3
   1069e:	e026      	b.n	106ee <process_thread_mqtt_demo_process+0x5e2>
}
/*---------------------------------------------------------------------------*/
static int
construct_sub_topic(void)
{
	int len = snprintf(sub_topic, BUFFER_SIZE, "iot-2/cmd/%s/fmt/json",
   106a0:	482d      	ldr	r0, [pc, #180]	; (10758 <process_thread_mqtt_demo_process+0x64c>)
   106a2:	2140      	movs	r1, #64	; 0x40
   106a4:	4a2d      	ldr	r2, [pc, #180]	; (1075c <process_thread_mqtt_demo_process+0x650>)
   106a6:	4b1d      	ldr	r3, [pc, #116]	; (1071c <process_thread_mqtt_demo_process+0x610>)
   106a8:	33c0      	adds	r3, #192	; 0xc0
   106aa:	4c2d      	ldr	r4, [pc, #180]	; (10760 <process_thread_mqtt_demo_process+0x654>)
   106ac:	47a0      	blx	r4
   106ae:	1e01      	subs	r1, r0, #0
	conf.cmd_type);

	/* len < 0: Error. Len >= BUFFER_SIZE: Buffer too small */
	if(len < 0 || len >= BUFFER_SIZE) {
   106b0:	293f      	cmp	r1, #63	; 0x3f
   106b2:	d900      	bls.n	106b6 <process_thread_mqtt_demo_process+0x5aa>
   106b4:	e58f      	b.n	101d6 <process_thread_mqtt_demo_process+0xca>
/*---------------------------------------------------------------------------*/
static int
construct_pub_topic(void)
{
	
	int len = snprintf(pub_topic, BUFFER_SIZE, "AWGES/%s/status",
   106b6:	4816      	ldr	r0, [pc, #88]	; (10710 <process_thread_mqtt_demo_process+0x604>)
   106b8:	2140      	movs	r1, #64	; 0x40
   106ba:	4a2a      	ldr	r2, [pc, #168]	; (10764 <process_thread_mqtt_demo_process+0x658>)
   106bc:	4b17      	ldr	r3, [pc, #92]	; (1071c <process_thread_mqtt_demo_process+0x610>)
   106be:	3360      	adds	r3, #96	; 0x60
   106c0:	4c27      	ldr	r4, [pc, #156]	; (10760 <process_thread_mqtt_demo_process+0x654>)
   106c2:	47a0      	blx	r4
   106c4:	1e01      	subs	r1, r0, #0
	conf.event_type_id);

	/* len < 0: Error. Len >= BUFFER_SIZE: Buffer too small */
	if(len < 0 || len >= BUFFER_SIZE) {
   106c6:	293f      	cmp	r1, #63	; 0x3f
   106c8:	d900      	bls.n	106cc <process_thread_mqtt_demo_process+0x5c0>
   106ca:	e58c      	b.n	101e6 <process_thread_mqtt_demo_process+0xda>
		state = STATE_CONFIG_ERROR;
		return;
	}

	/* Reset the counter */
	seq_nr_value = 0;
   106cc:	2200      	movs	r2, #0
   106ce:	4b26      	ldr	r3, [pc, #152]	; (10768 <process_thread_mqtt_demo_process+0x65c>)
   106d0:	801a      	strh	r2, [r3, #0]

	state = STATE_INIT;
   106d2:	4b1b      	ldr	r3, [pc, #108]	; (10740 <process_thread_mqtt_demo_process+0x634>)
   106d4:	701a      	strb	r2, [r3, #0]
	* If we entered an error state then we won't do anything when it fires.
	*
	* Since the error at this stage is a config error, we will only exit this
	* error state if we get a new config.
	*/
	etimer_set(&publish_periodic_timer, 0);
   106d6:	4812      	ldr	r0, [pc, #72]	; (10720 <process_thread_mqtt_demo_process+0x614>)
   106d8:	2100      	movs	r1, #0
   106da:	4b12      	ldr	r3, [pc, #72]	; (10724 <process_thread_mqtt_demo_process+0x618>)
   106dc:	4798      	blx	r3
   106de:	e589      	b.n	101f4 <process_thread_mqtt_demo_process+0xe8>
				state = STATE_REGISTERED;
			}
		}

		if((ev == PROCESS_EVENT_TIMER && data == &publish_periodic_timer) ||
		ev == PROCESS_EVENT_POLL ||
   106e0:	42a3      	cmp	r3, r4
   106e2:	d000      	beq.n	106e6 <process_thread_mqtt_demo_process+0x5da>
   106e4:	e594      	b.n	10210 <process_thread_mqtt_demo_process+0x104>
   106e6:	e5b3      	b.n	10250 <process_thread_mqtt_demo_process+0x144>
   106e8:	42a3      	cmp	r3, r4
   106ea:	d1c8      	bne.n	1067e <process_thread_mqtt_demo_process+0x572>
   106ec:	e5b0      	b.n	10250 <process_thread_mqtt_demo_process+0x144>
			etimer_set(&echo_request_timer, conf.def_rt_ping_interval);
		}
	}

	PROCESS_END();
}
   106ee:	b018      	add	sp, #96	; 0x60
   106f0:	bc04      	pop	{r2}
   106f2:	4691      	mov	r9, r2
   106f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
   106f6:	46c0      	nop			; (mov r8, r8)
   106f8:	200027f0 	.word	0x200027f0
   106fc:	0001363c 	.word	0x0001363c
   10700:	00010b79 	.word	0x00010b79
   10704:	2000282c 	.word	0x2000282c
   10708:	00010e31 	.word	0x00010e31
   1070c:	20002040 	.word	0x20002040
   10710:	20001ffc 	.word	0x20001ffc
   10714:	000054a9 	.word	0x000054a9
   10718:	00013668 	.word	0x00013668
   1071c:	20001f28 	.word	0x20001f28
   10720:	200027a0 	.word	0x200027a0
   10724:	0000e91d 	.word	0x0000e91d
   10728:	0001367c 	.word	0x0001367c
   1072c:	0001368c 	.word	0x0001368c
   10730:	000136b4 	.word	0x000136b4
   10734:	00003d41 	.word	0x00003d41
   10738:	20002828 	.word	0x20002828
   1073c:	000136c4 	.word	0x000136c4
   10740:	2000203c 	.word	0x2000203c
   10744:	000136ec 	.word	0x000136ec
   10748:	000056d9 	.word	0x000056d9
   1074c:	00013704 	.word	0x00013704
   10750:	200027f4 	.word	0x200027f4
   10754:	00010035 	.word	0x00010035
   10758:	200027b0 	.word	0x200027b0
   1075c:	00013724 	.word	0x00013724
   10760:	00010dc9 	.word	0x00010dc9
   10764:	0001373c 	.word	0x0001373c
   10768:	2000203e 	.word	0x2000203e

0001076c <__aeabi_uidiv>:
   1076c:	2200      	movs	r2, #0
   1076e:	0843      	lsrs	r3, r0, #1
   10770:	428b      	cmp	r3, r1
   10772:	d374      	bcc.n	1085e <__aeabi_uidiv+0xf2>
   10774:	0903      	lsrs	r3, r0, #4
   10776:	428b      	cmp	r3, r1
   10778:	d35f      	bcc.n	1083a <__aeabi_uidiv+0xce>
   1077a:	0a03      	lsrs	r3, r0, #8
   1077c:	428b      	cmp	r3, r1
   1077e:	d344      	bcc.n	1080a <__aeabi_uidiv+0x9e>
   10780:	0b03      	lsrs	r3, r0, #12
   10782:	428b      	cmp	r3, r1
   10784:	d328      	bcc.n	107d8 <__aeabi_uidiv+0x6c>
   10786:	0c03      	lsrs	r3, r0, #16
   10788:	428b      	cmp	r3, r1
   1078a:	d30d      	bcc.n	107a8 <__aeabi_uidiv+0x3c>
   1078c:	22ff      	movs	r2, #255	; 0xff
   1078e:	0209      	lsls	r1, r1, #8
   10790:	ba12      	rev	r2, r2
   10792:	0c03      	lsrs	r3, r0, #16
   10794:	428b      	cmp	r3, r1
   10796:	d302      	bcc.n	1079e <__aeabi_uidiv+0x32>
   10798:	1212      	asrs	r2, r2, #8
   1079a:	0209      	lsls	r1, r1, #8
   1079c:	d065      	beq.n	1086a <__aeabi_uidiv+0xfe>
   1079e:	0b03      	lsrs	r3, r0, #12
   107a0:	428b      	cmp	r3, r1
   107a2:	d319      	bcc.n	107d8 <__aeabi_uidiv+0x6c>
   107a4:	e000      	b.n	107a8 <__aeabi_uidiv+0x3c>
   107a6:	0a09      	lsrs	r1, r1, #8
   107a8:	0bc3      	lsrs	r3, r0, #15
   107aa:	428b      	cmp	r3, r1
   107ac:	d301      	bcc.n	107b2 <__aeabi_uidiv+0x46>
   107ae:	03cb      	lsls	r3, r1, #15
   107b0:	1ac0      	subs	r0, r0, r3
   107b2:	4152      	adcs	r2, r2
   107b4:	0b83      	lsrs	r3, r0, #14
   107b6:	428b      	cmp	r3, r1
   107b8:	d301      	bcc.n	107be <__aeabi_uidiv+0x52>
   107ba:	038b      	lsls	r3, r1, #14
   107bc:	1ac0      	subs	r0, r0, r3
   107be:	4152      	adcs	r2, r2
   107c0:	0b43      	lsrs	r3, r0, #13
   107c2:	428b      	cmp	r3, r1
   107c4:	d301      	bcc.n	107ca <__aeabi_uidiv+0x5e>
   107c6:	034b      	lsls	r3, r1, #13
   107c8:	1ac0      	subs	r0, r0, r3
   107ca:	4152      	adcs	r2, r2
   107cc:	0b03      	lsrs	r3, r0, #12
   107ce:	428b      	cmp	r3, r1
   107d0:	d301      	bcc.n	107d6 <__aeabi_uidiv+0x6a>
   107d2:	030b      	lsls	r3, r1, #12
   107d4:	1ac0      	subs	r0, r0, r3
   107d6:	4152      	adcs	r2, r2
   107d8:	0ac3      	lsrs	r3, r0, #11
   107da:	428b      	cmp	r3, r1
   107dc:	d301      	bcc.n	107e2 <__aeabi_uidiv+0x76>
   107de:	02cb      	lsls	r3, r1, #11
   107e0:	1ac0      	subs	r0, r0, r3
   107e2:	4152      	adcs	r2, r2
   107e4:	0a83      	lsrs	r3, r0, #10
   107e6:	428b      	cmp	r3, r1
   107e8:	d301      	bcc.n	107ee <__aeabi_uidiv+0x82>
   107ea:	028b      	lsls	r3, r1, #10
   107ec:	1ac0      	subs	r0, r0, r3
   107ee:	4152      	adcs	r2, r2
   107f0:	0a43      	lsrs	r3, r0, #9
   107f2:	428b      	cmp	r3, r1
   107f4:	d301      	bcc.n	107fa <__aeabi_uidiv+0x8e>
   107f6:	024b      	lsls	r3, r1, #9
   107f8:	1ac0      	subs	r0, r0, r3
   107fa:	4152      	adcs	r2, r2
   107fc:	0a03      	lsrs	r3, r0, #8
   107fe:	428b      	cmp	r3, r1
   10800:	d301      	bcc.n	10806 <__aeabi_uidiv+0x9a>
   10802:	020b      	lsls	r3, r1, #8
   10804:	1ac0      	subs	r0, r0, r3
   10806:	4152      	adcs	r2, r2
   10808:	d2cd      	bcs.n	107a6 <__aeabi_uidiv+0x3a>
   1080a:	09c3      	lsrs	r3, r0, #7
   1080c:	428b      	cmp	r3, r1
   1080e:	d301      	bcc.n	10814 <__aeabi_uidiv+0xa8>
   10810:	01cb      	lsls	r3, r1, #7
   10812:	1ac0      	subs	r0, r0, r3
   10814:	4152      	adcs	r2, r2
   10816:	0983      	lsrs	r3, r0, #6
   10818:	428b      	cmp	r3, r1
   1081a:	d301      	bcc.n	10820 <__aeabi_uidiv+0xb4>
   1081c:	018b      	lsls	r3, r1, #6
   1081e:	1ac0      	subs	r0, r0, r3
   10820:	4152      	adcs	r2, r2
   10822:	0943      	lsrs	r3, r0, #5
   10824:	428b      	cmp	r3, r1
   10826:	d301      	bcc.n	1082c <__aeabi_uidiv+0xc0>
   10828:	014b      	lsls	r3, r1, #5
   1082a:	1ac0      	subs	r0, r0, r3
   1082c:	4152      	adcs	r2, r2
   1082e:	0903      	lsrs	r3, r0, #4
   10830:	428b      	cmp	r3, r1
   10832:	d301      	bcc.n	10838 <__aeabi_uidiv+0xcc>
   10834:	010b      	lsls	r3, r1, #4
   10836:	1ac0      	subs	r0, r0, r3
   10838:	4152      	adcs	r2, r2
   1083a:	08c3      	lsrs	r3, r0, #3
   1083c:	428b      	cmp	r3, r1
   1083e:	d301      	bcc.n	10844 <__aeabi_uidiv+0xd8>
   10840:	00cb      	lsls	r3, r1, #3
   10842:	1ac0      	subs	r0, r0, r3
   10844:	4152      	adcs	r2, r2
   10846:	0883      	lsrs	r3, r0, #2
   10848:	428b      	cmp	r3, r1
   1084a:	d301      	bcc.n	10850 <__aeabi_uidiv+0xe4>
   1084c:	008b      	lsls	r3, r1, #2
   1084e:	1ac0      	subs	r0, r0, r3
   10850:	4152      	adcs	r2, r2
   10852:	0843      	lsrs	r3, r0, #1
   10854:	428b      	cmp	r3, r1
   10856:	d301      	bcc.n	1085c <__aeabi_uidiv+0xf0>
   10858:	004b      	lsls	r3, r1, #1
   1085a:	1ac0      	subs	r0, r0, r3
   1085c:	4152      	adcs	r2, r2
   1085e:	1a41      	subs	r1, r0, r1
   10860:	d200      	bcs.n	10864 <__aeabi_uidiv+0xf8>
   10862:	4601      	mov	r1, r0
   10864:	4152      	adcs	r2, r2
   10866:	4610      	mov	r0, r2
   10868:	4770      	bx	lr
   1086a:	e7ff      	b.n	1086c <__aeabi_uidiv+0x100>
   1086c:	b501      	push	{r0, lr}
   1086e:	2000      	movs	r0, #0
   10870:	f000 f8fc 	bl	10a6c <__aeabi_idiv0>
   10874:	bd02      	pop	{r1, pc}
   10876:	46c0      	nop			; (mov r8, r8)

00010878 <__aeabi_uidivmod>:
   10878:	2900      	cmp	r1, #0
   1087a:	d0f7      	beq.n	1086c <__aeabi_uidiv+0x100>
   1087c:	b503      	push	{r0, r1, lr}
   1087e:	f7ff ff75 	bl	1076c <__aeabi_uidiv>
   10882:	bc0e      	pop	{r1, r2, r3}
   10884:	4342      	muls	r2, r0
   10886:	1a89      	subs	r1, r1, r2
   10888:	4718      	bx	r3
   1088a:	46c0      	nop			; (mov r8, r8)

0001088c <__aeabi_idiv>:
   1088c:	4603      	mov	r3, r0
   1088e:	430b      	orrs	r3, r1
   10890:	d47f      	bmi.n	10992 <__aeabi_idiv+0x106>
   10892:	2200      	movs	r2, #0
   10894:	0843      	lsrs	r3, r0, #1
   10896:	428b      	cmp	r3, r1
   10898:	d374      	bcc.n	10984 <__aeabi_idiv+0xf8>
   1089a:	0903      	lsrs	r3, r0, #4
   1089c:	428b      	cmp	r3, r1
   1089e:	d35f      	bcc.n	10960 <__aeabi_idiv+0xd4>
   108a0:	0a03      	lsrs	r3, r0, #8
   108a2:	428b      	cmp	r3, r1
   108a4:	d344      	bcc.n	10930 <__aeabi_idiv+0xa4>
   108a6:	0b03      	lsrs	r3, r0, #12
   108a8:	428b      	cmp	r3, r1
   108aa:	d328      	bcc.n	108fe <__aeabi_idiv+0x72>
   108ac:	0c03      	lsrs	r3, r0, #16
   108ae:	428b      	cmp	r3, r1
   108b0:	d30d      	bcc.n	108ce <__aeabi_idiv+0x42>
   108b2:	22ff      	movs	r2, #255	; 0xff
   108b4:	0209      	lsls	r1, r1, #8
   108b6:	ba12      	rev	r2, r2
   108b8:	0c03      	lsrs	r3, r0, #16
   108ba:	428b      	cmp	r3, r1
   108bc:	d302      	bcc.n	108c4 <__aeabi_idiv+0x38>
   108be:	1212      	asrs	r2, r2, #8
   108c0:	0209      	lsls	r1, r1, #8
   108c2:	d065      	beq.n	10990 <__aeabi_idiv+0x104>
   108c4:	0b03      	lsrs	r3, r0, #12
   108c6:	428b      	cmp	r3, r1
   108c8:	d319      	bcc.n	108fe <__aeabi_idiv+0x72>
   108ca:	e000      	b.n	108ce <__aeabi_idiv+0x42>
   108cc:	0a09      	lsrs	r1, r1, #8
   108ce:	0bc3      	lsrs	r3, r0, #15
   108d0:	428b      	cmp	r3, r1
   108d2:	d301      	bcc.n	108d8 <__aeabi_idiv+0x4c>
   108d4:	03cb      	lsls	r3, r1, #15
   108d6:	1ac0      	subs	r0, r0, r3
   108d8:	4152      	adcs	r2, r2
   108da:	0b83      	lsrs	r3, r0, #14
   108dc:	428b      	cmp	r3, r1
   108de:	d301      	bcc.n	108e4 <__aeabi_idiv+0x58>
   108e0:	038b      	lsls	r3, r1, #14
   108e2:	1ac0      	subs	r0, r0, r3
   108e4:	4152      	adcs	r2, r2
   108e6:	0b43      	lsrs	r3, r0, #13
   108e8:	428b      	cmp	r3, r1
   108ea:	d301      	bcc.n	108f0 <__aeabi_idiv+0x64>
   108ec:	034b      	lsls	r3, r1, #13
   108ee:	1ac0      	subs	r0, r0, r3
   108f0:	4152      	adcs	r2, r2
   108f2:	0b03      	lsrs	r3, r0, #12
   108f4:	428b      	cmp	r3, r1
   108f6:	d301      	bcc.n	108fc <__aeabi_idiv+0x70>
   108f8:	030b      	lsls	r3, r1, #12
   108fa:	1ac0      	subs	r0, r0, r3
   108fc:	4152      	adcs	r2, r2
   108fe:	0ac3      	lsrs	r3, r0, #11
   10900:	428b      	cmp	r3, r1
   10902:	d301      	bcc.n	10908 <__aeabi_idiv+0x7c>
   10904:	02cb      	lsls	r3, r1, #11
   10906:	1ac0      	subs	r0, r0, r3
   10908:	4152      	adcs	r2, r2
   1090a:	0a83      	lsrs	r3, r0, #10
   1090c:	428b      	cmp	r3, r1
   1090e:	d301      	bcc.n	10914 <__aeabi_idiv+0x88>
   10910:	028b      	lsls	r3, r1, #10
   10912:	1ac0      	subs	r0, r0, r3
   10914:	4152      	adcs	r2, r2
   10916:	0a43      	lsrs	r3, r0, #9
   10918:	428b      	cmp	r3, r1
   1091a:	d301      	bcc.n	10920 <__aeabi_idiv+0x94>
   1091c:	024b      	lsls	r3, r1, #9
   1091e:	1ac0      	subs	r0, r0, r3
   10920:	4152      	adcs	r2, r2
   10922:	0a03      	lsrs	r3, r0, #8
   10924:	428b      	cmp	r3, r1
   10926:	d301      	bcc.n	1092c <__aeabi_idiv+0xa0>
   10928:	020b      	lsls	r3, r1, #8
   1092a:	1ac0      	subs	r0, r0, r3
   1092c:	4152      	adcs	r2, r2
   1092e:	d2cd      	bcs.n	108cc <__aeabi_idiv+0x40>
   10930:	09c3      	lsrs	r3, r0, #7
   10932:	428b      	cmp	r3, r1
   10934:	d301      	bcc.n	1093a <__aeabi_idiv+0xae>
   10936:	01cb      	lsls	r3, r1, #7
   10938:	1ac0      	subs	r0, r0, r3
   1093a:	4152      	adcs	r2, r2
   1093c:	0983      	lsrs	r3, r0, #6
   1093e:	428b      	cmp	r3, r1
   10940:	d301      	bcc.n	10946 <__aeabi_idiv+0xba>
   10942:	018b      	lsls	r3, r1, #6
   10944:	1ac0      	subs	r0, r0, r3
   10946:	4152      	adcs	r2, r2
   10948:	0943      	lsrs	r3, r0, #5
   1094a:	428b      	cmp	r3, r1
   1094c:	d301      	bcc.n	10952 <__aeabi_idiv+0xc6>
   1094e:	014b      	lsls	r3, r1, #5
   10950:	1ac0      	subs	r0, r0, r3
   10952:	4152      	adcs	r2, r2
   10954:	0903      	lsrs	r3, r0, #4
   10956:	428b      	cmp	r3, r1
   10958:	d301      	bcc.n	1095e <__aeabi_idiv+0xd2>
   1095a:	010b      	lsls	r3, r1, #4
   1095c:	1ac0      	subs	r0, r0, r3
   1095e:	4152      	adcs	r2, r2
   10960:	08c3      	lsrs	r3, r0, #3
   10962:	428b      	cmp	r3, r1
   10964:	d301      	bcc.n	1096a <__aeabi_idiv+0xde>
   10966:	00cb      	lsls	r3, r1, #3
   10968:	1ac0      	subs	r0, r0, r3
   1096a:	4152      	adcs	r2, r2
   1096c:	0883      	lsrs	r3, r0, #2
   1096e:	428b      	cmp	r3, r1
   10970:	d301      	bcc.n	10976 <__aeabi_idiv+0xea>
   10972:	008b      	lsls	r3, r1, #2
   10974:	1ac0      	subs	r0, r0, r3
   10976:	4152      	adcs	r2, r2
   10978:	0843      	lsrs	r3, r0, #1
   1097a:	428b      	cmp	r3, r1
   1097c:	d301      	bcc.n	10982 <__aeabi_idiv+0xf6>
   1097e:	004b      	lsls	r3, r1, #1
   10980:	1ac0      	subs	r0, r0, r3
   10982:	4152      	adcs	r2, r2
   10984:	1a41      	subs	r1, r0, r1
   10986:	d200      	bcs.n	1098a <__aeabi_idiv+0xfe>
   10988:	4601      	mov	r1, r0
   1098a:	4152      	adcs	r2, r2
   1098c:	4610      	mov	r0, r2
   1098e:	4770      	bx	lr
   10990:	e05d      	b.n	10a4e <__aeabi_idiv+0x1c2>
   10992:	0fca      	lsrs	r2, r1, #31
   10994:	d000      	beq.n	10998 <__aeabi_idiv+0x10c>
   10996:	4249      	negs	r1, r1
   10998:	1003      	asrs	r3, r0, #32
   1099a:	d300      	bcc.n	1099e <__aeabi_idiv+0x112>
   1099c:	4240      	negs	r0, r0
   1099e:	4053      	eors	r3, r2
   109a0:	2200      	movs	r2, #0
   109a2:	469c      	mov	ip, r3
   109a4:	0903      	lsrs	r3, r0, #4
   109a6:	428b      	cmp	r3, r1
   109a8:	d32d      	bcc.n	10a06 <__aeabi_idiv+0x17a>
   109aa:	0a03      	lsrs	r3, r0, #8
   109ac:	428b      	cmp	r3, r1
   109ae:	d312      	bcc.n	109d6 <__aeabi_idiv+0x14a>
   109b0:	22fc      	movs	r2, #252	; 0xfc
   109b2:	0189      	lsls	r1, r1, #6
   109b4:	ba12      	rev	r2, r2
   109b6:	0a03      	lsrs	r3, r0, #8
   109b8:	428b      	cmp	r3, r1
   109ba:	d30c      	bcc.n	109d6 <__aeabi_idiv+0x14a>
   109bc:	0189      	lsls	r1, r1, #6
   109be:	1192      	asrs	r2, r2, #6
   109c0:	428b      	cmp	r3, r1
   109c2:	d308      	bcc.n	109d6 <__aeabi_idiv+0x14a>
   109c4:	0189      	lsls	r1, r1, #6
   109c6:	1192      	asrs	r2, r2, #6
   109c8:	428b      	cmp	r3, r1
   109ca:	d304      	bcc.n	109d6 <__aeabi_idiv+0x14a>
   109cc:	0189      	lsls	r1, r1, #6
   109ce:	d03a      	beq.n	10a46 <__aeabi_idiv+0x1ba>
   109d0:	1192      	asrs	r2, r2, #6
   109d2:	e000      	b.n	109d6 <__aeabi_idiv+0x14a>
   109d4:	0989      	lsrs	r1, r1, #6
   109d6:	09c3      	lsrs	r3, r0, #7
   109d8:	428b      	cmp	r3, r1
   109da:	d301      	bcc.n	109e0 <__aeabi_idiv+0x154>
   109dc:	01cb      	lsls	r3, r1, #7
   109de:	1ac0      	subs	r0, r0, r3
   109e0:	4152      	adcs	r2, r2
   109e2:	0983      	lsrs	r3, r0, #6
   109e4:	428b      	cmp	r3, r1
   109e6:	d301      	bcc.n	109ec <__aeabi_idiv+0x160>
   109e8:	018b      	lsls	r3, r1, #6
   109ea:	1ac0      	subs	r0, r0, r3
   109ec:	4152      	adcs	r2, r2
   109ee:	0943      	lsrs	r3, r0, #5
   109f0:	428b      	cmp	r3, r1
   109f2:	d301      	bcc.n	109f8 <__aeabi_idiv+0x16c>
   109f4:	014b      	lsls	r3, r1, #5
   109f6:	1ac0      	subs	r0, r0, r3
   109f8:	4152      	adcs	r2, r2
   109fa:	0903      	lsrs	r3, r0, #4
   109fc:	428b      	cmp	r3, r1
   109fe:	d301      	bcc.n	10a04 <__aeabi_idiv+0x178>
   10a00:	010b      	lsls	r3, r1, #4
   10a02:	1ac0      	subs	r0, r0, r3
   10a04:	4152      	adcs	r2, r2
   10a06:	08c3      	lsrs	r3, r0, #3
   10a08:	428b      	cmp	r3, r1
   10a0a:	d301      	bcc.n	10a10 <__aeabi_idiv+0x184>
   10a0c:	00cb      	lsls	r3, r1, #3
   10a0e:	1ac0      	subs	r0, r0, r3
   10a10:	4152      	adcs	r2, r2
   10a12:	0883      	lsrs	r3, r0, #2
   10a14:	428b      	cmp	r3, r1
   10a16:	d301      	bcc.n	10a1c <__aeabi_idiv+0x190>
   10a18:	008b      	lsls	r3, r1, #2
   10a1a:	1ac0      	subs	r0, r0, r3
   10a1c:	4152      	adcs	r2, r2
   10a1e:	d2d9      	bcs.n	109d4 <__aeabi_idiv+0x148>
   10a20:	0843      	lsrs	r3, r0, #1
   10a22:	428b      	cmp	r3, r1
   10a24:	d301      	bcc.n	10a2a <__aeabi_idiv+0x19e>
   10a26:	004b      	lsls	r3, r1, #1
   10a28:	1ac0      	subs	r0, r0, r3
   10a2a:	4152      	adcs	r2, r2
   10a2c:	1a41      	subs	r1, r0, r1
   10a2e:	d200      	bcs.n	10a32 <__aeabi_idiv+0x1a6>
   10a30:	4601      	mov	r1, r0
   10a32:	4663      	mov	r3, ip
   10a34:	4152      	adcs	r2, r2
   10a36:	105b      	asrs	r3, r3, #1
   10a38:	4610      	mov	r0, r2
   10a3a:	d301      	bcc.n	10a40 <__aeabi_idiv+0x1b4>
   10a3c:	4240      	negs	r0, r0
   10a3e:	2b00      	cmp	r3, #0
   10a40:	d500      	bpl.n	10a44 <__aeabi_idiv+0x1b8>
   10a42:	4249      	negs	r1, r1
   10a44:	4770      	bx	lr
   10a46:	4663      	mov	r3, ip
   10a48:	105b      	asrs	r3, r3, #1
   10a4a:	d300      	bcc.n	10a4e <__aeabi_idiv+0x1c2>
   10a4c:	4240      	negs	r0, r0
   10a4e:	b501      	push	{r0, lr}
   10a50:	2000      	movs	r0, #0
   10a52:	f000 f80b 	bl	10a6c <__aeabi_idiv0>
   10a56:	bd02      	pop	{r1, pc}

00010a58 <__aeabi_idivmod>:
   10a58:	2900      	cmp	r1, #0
   10a5a:	d0f8      	beq.n	10a4e <__aeabi_idiv+0x1c2>
   10a5c:	b503      	push	{r0, r1, lr}
   10a5e:	f7ff ff15 	bl	1088c <__aeabi_idiv>
   10a62:	bc0e      	pop	{r1, r2, r3}
   10a64:	4342      	muls	r2, r0
   10a66:	1a89      	subs	r1, r1, r2
   10a68:	4718      	bx	r3
   10a6a:	46c0      	nop			; (mov r8, r8)

00010a6c <__aeabi_idiv0>:
   10a6c:	4770      	bx	lr
   10a6e:	46c0      	nop			; (mov r8, r8)

00010a70 <__aeabi_lmul>:
   10a70:	b5f0      	push	{r4, r5, r6, r7, lr}
   10a72:	464f      	mov	r7, r9
   10a74:	4646      	mov	r6, r8
   10a76:	0405      	lsls	r5, r0, #16
   10a78:	0c2d      	lsrs	r5, r5, #16
   10a7a:	1c2c      	adds	r4, r5, #0
   10a7c:	b4c0      	push	{r6, r7}
   10a7e:	0417      	lsls	r7, r2, #16
   10a80:	0c16      	lsrs	r6, r2, #16
   10a82:	0c3f      	lsrs	r7, r7, #16
   10a84:	4699      	mov	r9, r3
   10a86:	0c03      	lsrs	r3, r0, #16
   10a88:	437c      	muls	r4, r7
   10a8a:	4375      	muls	r5, r6
   10a8c:	435f      	muls	r7, r3
   10a8e:	4373      	muls	r3, r6
   10a90:	197d      	adds	r5, r7, r5
   10a92:	0c26      	lsrs	r6, r4, #16
   10a94:	19ad      	adds	r5, r5, r6
   10a96:	469c      	mov	ip, r3
   10a98:	42af      	cmp	r7, r5
   10a9a:	d903      	bls.n	10aa4 <__aeabi_lmul+0x34>
   10a9c:	2380      	movs	r3, #128	; 0x80
   10a9e:	025b      	lsls	r3, r3, #9
   10aa0:	4698      	mov	r8, r3
   10aa2:	44c4      	add	ip, r8
   10aa4:	464b      	mov	r3, r9
   10aa6:	4351      	muls	r1, r2
   10aa8:	4343      	muls	r3, r0
   10aaa:	0424      	lsls	r4, r4, #16
   10aac:	0c2e      	lsrs	r6, r5, #16
   10aae:	0c24      	lsrs	r4, r4, #16
   10ab0:	042d      	lsls	r5, r5, #16
   10ab2:	4466      	add	r6, ip
   10ab4:	192c      	adds	r4, r5, r4
   10ab6:	1859      	adds	r1, r3, r1
   10ab8:	1989      	adds	r1, r1, r6
   10aba:	1c20      	adds	r0, r4, #0
   10abc:	bc0c      	pop	{r2, r3}
   10abe:	4690      	mov	r8, r2
   10ac0:	4699      	mov	r9, r3
   10ac2:	bdf0      	pop	{r4, r5, r6, r7, pc}

00010ac4 <__libc_init_array>:
   10ac4:	4b0e      	ldr	r3, [pc, #56]	; (10b00 <__libc_init_array+0x3c>)
   10ac6:	b570      	push	{r4, r5, r6, lr}
   10ac8:	2500      	movs	r5, #0
   10aca:	1c1e      	adds	r6, r3, #0
   10acc:	4c0d      	ldr	r4, [pc, #52]	; (10b04 <__libc_init_array+0x40>)
   10ace:	1ae4      	subs	r4, r4, r3
   10ad0:	10a4      	asrs	r4, r4, #2
   10ad2:	42a5      	cmp	r5, r4
   10ad4:	d004      	beq.n	10ae0 <__libc_init_array+0x1c>
   10ad6:	00ab      	lsls	r3, r5, #2
   10ad8:	58f3      	ldr	r3, [r6, r3]
   10ada:	4798      	blx	r3
   10adc:	3501      	adds	r5, #1
   10ade:	e7f8      	b.n	10ad2 <__libc_init_array+0xe>
   10ae0:	f002 ff08 	bl	138f4 <_init>
   10ae4:	4b08      	ldr	r3, [pc, #32]	; (10b08 <__libc_init_array+0x44>)
   10ae6:	2500      	movs	r5, #0
   10ae8:	1c1e      	adds	r6, r3, #0
   10aea:	4c08      	ldr	r4, [pc, #32]	; (10b0c <__libc_init_array+0x48>)
   10aec:	1ae4      	subs	r4, r4, r3
   10aee:	10a4      	asrs	r4, r4, #2
   10af0:	42a5      	cmp	r5, r4
   10af2:	d004      	beq.n	10afe <__libc_init_array+0x3a>
   10af4:	00ab      	lsls	r3, r5, #2
   10af6:	58f3      	ldr	r3, [r6, r3]
   10af8:	4798      	blx	r3
   10afa:	3501      	adds	r5, #1
   10afc:	e7f8      	b.n	10af0 <__libc_init_array+0x2c>
   10afe:	bd70      	pop	{r4, r5, r6, pc}
   10b00:	00013900 	.word	0x00013900
   10b04:	00013900 	.word	0x00013900
   10b08:	00013900 	.word	0x00013900
   10b0c:	00013904 	.word	0x00013904

00010b10 <memcmp>:
   10b10:	b530      	push	{r4, r5, lr}
   10b12:	2400      	movs	r4, #0
   10b14:	4294      	cmp	r4, r2
   10b16:	d008      	beq.n	10b2a <memcmp+0x1a>
   10b18:	5d03      	ldrb	r3, [r0, r4]
   10b1a:	1c65      	adds	r5, r4, #1
   10b1c:	5d0c      	ldrb	r4, [r1, r4]
   10b1e:	42a3      	cmp	r3, r4
   10b20:	d001      	beq.n	10b26 <memcmp+0x16>
   10b22:	1b18      	subs	r0, r3, r4
   10b24:	e002      	b.n	10b2c <memcmp+0x1c>
   10b26:	1c2c      	adds	r4, r5, #0
   10b28:	e7f4      	b.n	10b14 <memcmp+0x4>
   10b2a:	2000      	movs	r0, #0
   10b2c:	bd30      	pop	{r4, r5, pc}

00010b2e <memcpy>:
   10b2e:	2300      	movs	r3, #0
   10b30:	b510      	push	{r4, lr}
   10b32:	4293      	cmp	r3, r2
   10b34:	d003      	beq.n	10b3e <memcpy+0x10>
   10b36:	5ccc      	ldrb	r4, [r1, r3]
   10b38:	54c4      	strb	r4, [r0, r3]
   10b3a:	3301      	adds	r3, #1
   10b3c:	e7f9      	b.n	10b32 <memcpy+0x4>
   10b3e:	bd10      	pop	{r4, pc}

00010b40 <memmove>:
   10b40:	b510      	push	{r4, lr}
   10b42:	4281      	cmp	r1, r0
   10b44:	d208      	bcs.n	10b58 <memmove+0x18>
   10b46:	188b      	adds	r3, r1, r2
   10b48:	4298      	cmp	r0, r3
   10b4a:	d205      	bcs.n	10b58 <memmove+0x18>
   10b4c:	1a9b      	subs	r3, r3, r2
   10b4e:	3a01      	subs	r2, #1
   10b50:	d309      	bcc.n	10b66 <memmove+0x26>
   10b52:	5c99      	ldrb	r1, [r3, r2]
   10b54:	5481      	strb	r1, [r0, r2]
   10b56:	e7fa      	b.n	10b4e <memmove+0xe>
   10b58:	2300      	movs	r3, #0
   10b5a:	4293      	cmp	r3, r2
   10b5c:	d003      	beq.n	10b66 <memmove+0x26>
   10b5e:	5ccc      	ldrb	r4, [r1, r3]
   10b60:	54c4      	strb	r4, [r0, r3]
   10b62:	3301      	adds	r3, #1
   10b64:	e7f9      	b.n	10b5a <memmove+0x1a>
   10b66:	bd10      	pop	{r4, pc}

00010b68 <memset>:
   10b68:	1c03      	adds	r3, r0, #0
   10b6a:	1882      	adds	r2, r0, r2
   10b6c:	4293      	cmp	r3, r2
   10b6e:	d002      	beq.n	10b76 <memset+0xe>
   10b70:	7019      	strb	r1, [r3, #0]
   10b72:	3301      	adds	r3, #1
   10b74:	e7fa      	b.n	10b6c <memset+0x4>
   10b76:	4770      	bx	lr

00010b78 <iprintf>:
   10b78:	b40f      	push	{r0, r1, r2, r3}
   10b7a:	4b0b      	ldr	r3, [pc, #44]	; (10ba8 <iprintf+0x30>)
   10b7c:	b513      	push	{r0, r1, r4, lr}
   10b7e:	681c      	ldr	r4, [r3, #0]
   10b80:	2c00      	cmp	r4, #0
   10b82:	d005      	beq.n	10b90 <iprintf+0x18>
   10b84:	69a3      	ldr	r3, [r4, #24]
   10b86:	2b00      	cmp	r3, #0
   10b88:	d102      	bne.n	10b90 <iprintf+0x18>
   10b8a:	1c20      	adds	r0, r4, #0
   10b8c:	f000 fb56 	bl	1123c <__sinit>
   10b90:	ab05      	add	r3, sp, #20
   10b92:	1c20      	adds	r0, r4, #0
   10b94:	68a1      	ldr	r1, [r4, #8]
   10b96:	9a04      	ldr	r2, [sp, #16]
   10b98:	9301      	str	r3, [sp, #4]
   10b9a:	f000 fe5f 	bl	1185c <_vfiprintf_r>
   10b9e:	bc16      	pop	{r1, r2, r4}
   10ba0:	bc08      	pop	{r3}
   10ba2:	b004      	add	sp, #16
   10ba4:	4718      	bx	r3
   10ba6:	46c0      	nop			; (mov r8, r8)
   10ba8:	20000234 	.word	0x20000234

00010bac <putchar>:
   10bac:	b538      	push	{r3, r4, r5, lr}
   10bae:	4b08      	ldr	r3, [pc, #32]	; (10bd0 <putchar+0x24>)
   10bb0:	1c05      	adds	r5, r0, #0
   10bb2:	681c      	ldr	r4, [r3, #0]
   10bb4:	2c00      	cmp	r4, #0
   10bb6:	d005      	beq.n	10bc4 <putchar+0x18>
   10bb8:	69a3      	ldr	r3, [r4, #24]
   10bba:	2b00      	cmp	r3, #0
   10bbc:	d102      	bne.n	10bc4 <putchar+0x18>
   10bbe:	1c20      	adds	r0, r4, #0
   10bc0:	f000 fb3c 	bl	1123c <__sinit>
   10bc4:	1c29      	adds	r1, r5, #0
   10bc6:	1c20      	adds	r0, r4, #0
   10bc8:	68a2      	ldr	r2, [r4, #8]
   10bca:	f001 f8dd 	bl	11d88 <_putc_r>
   10bce:	bd38      	pop	{r3, r4, r5, pc}
   10bd0:	20000234 	.word	0x20000234

00010bd4 <srand>:
   10bd4:	b538      	push	{r3, r4, r5, lr}
   10bd6:	4b10      	ldr	r3, [pc, #64]	; (10c18 <srand+0x44>)
   10bd8:	1c05      	adds	r5, r0, #0
   10bda:	681c      	ldr	r4, [r3, #0]
   10bdc:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   10bde:	2b00      	cmp	r3, #0
   10be0:	d115      	bne.n	10c0e <srand+0x3a>
   10be2:	2018      	movs	r0, #24
   10be4:	f000 fc14 	bl	11410 <malloc>
   10be8:	4b0c      	ldr	r3, [pc, #48]	; (10c1c <srand+0x48>)
   10bea:	63a0      	str	r0, [r4, #56]	; 0x38
   10bec:	8003      	strh	r3, [r0, #0]
   10bee:	4b0c      	ldr	r3, [pc, #48]	; (10c20 <srand+0x4c>)
   10bf0:	2201      	movs	r2, #1
   10bf2:	8043      	strh	r3, [r0, #2]
   10bf4:	4b0b      	ldr	r3, [pc, #44]	; (10c24 <srand+0x50>)
   10bf6:	8083      	strh	r3, [r0, #4]
   10bf8:	4b0b      	ldr	r3, [pc, #44]	; (10c28 <srand+0x54>)
   10bfa:	80c3      	strh	r3, [r0, #6]
   10bfc:	4b0b      	ldr	r3, [pc, #44]	; (10c2c <srand+0x58>)
   10bfe:	8103      	strh	r3, [r0, #8]
   10c00:	2305      	movs	r3, #5
   10c02:	8143      	strh	r3, [r0, #10]
   10c04:	3306      	adds	r3, #6
   10c06:	8183      	strh	r3, [r0, #12]
   10c08:	2300      	movs	r3, #0
   10c0a:	6102      	str	r2, [r0, #16]
   10c0c:	6143      	str	r3, [r0, #20]
   10c0e:	2200      	movs	r2, #0
   10c10:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   10c12:	611d      	str	r5, [r3, #16]
   10c14:	615a      	str	r2, [r3, #20]
   10c16:	bd38      	pop	{r3, r4, r5, pc}
   10c18:	20000234 	.word	0x20000234
   10c1c:	0000330e 	.word	0x0000330e
   10c20:	ffffabcd 	.word	0xffffabcd
   10c24:	00001234 	.word	0x00001234
   10c28:	ffffe66d 	.word	0xffffe66d
   10c2c:	ffffdeec 	.word	0xffffdeec

00010c30 <rand>:
   10c30:	4b15      	ldr	r3, [pc, #84]	; (10c88 <rand+0x58>)
   10c32:	b510      	push	{r4, lr}
   10c34:	681c      	ldr	r4, [r3, #0]
   10c36:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   10c38:	2b00      	cmp	r3, #0
   10c3a:	d115      	bne.n	10c68 <rand+0x38>
   10c3c:	2018      	movs	r0, #24
   10c3e:	f000 fbe7 	bl	11410 <malloc>
   10c42:	4b12      	ldr	r3, [pc, #72]	; (10c8c <rand+0x5c>)
   10c44:	63a0      	str	r0, [r4, #56]	; 0x38
   10c46:	8003      	strh	r3, [r0, #0]
   10c48:	4b11      	ldr	r3, [pc, #68]	; (10c90 <rand+0x60>)
   10c4a:	2201      	movs	r2, #1
   10c4c:	8043      	strh	r3, [r0, #2]
   10c4e:	4b11      	ldr	r3, [pc, #68]	; (10c94 <rand+0x64>)
   10c50:	8083      	strh	r3, [r0, #4]
   10c52:	4b11      	ldr	r3, [pc, #68]	; (10c98 <rand+0x68>)
   10c54:	80c3      	strh	r3, [r0, #6]
   10c56:	4b11      	ldr	r3, [pc, #68]	; (10c9c <rand+0x6c>)
   10c58:	8103      	strh	r3, [r0, #8]
   10c5a:	2305      	movs	r3, #5
   10c5c:	8143      	strh	r3, [r0, #10]
   10c5e:	3306      	adds	r3, #6
   10c60:	8183      	strh	r3, [r0, #12]
   10c62:	2300      	movs	r3, #0
   10c64:	6102      	str	r2, [r0, #16]
   10c66:	6143      	str	r3, [r0, #20]
   10c68:	6ba4      	ldr	r4, [r4, #56]	; 0x38
   10c6a:	4a0d      	ldr	r2, [pc, #52]	; (10ca0 <rand+0x70>)
   10c6c:	6920      	ldr	r0, [r4, #16]
   10c6e:	6961      	ldr	r1, [r4, #20]
   10c70:	4b0c      	ldr	r3, [pc, #48]	; (10ca4 <rand+0x74>)
   10c72:	f7ff fefd 	bl	10a70 <__aeabi_lmul>
   10c76:	2201      	movs	r2, #1
   10c78:	2300      	movs	r3, #0
   10c7a:	1880      	adds	r0, r0, r2
   10c7c:	4159      	adcs	r1, r3
   10c7e:	6120      	str	r0, [r4, #16]
   10c80:	6161      	str	r1, [r4, #20]
   10c82:	0048      	lsls	r0, r1, #1
   10c84:	0840      	lsrs	r0, r0, #1
   10c86:	bd10      	pop	{r4, pc}
   10c88:	20000234 	.word	0x20000234
   10c8c:	0000330e 	.word	0x0000330e
   10c90:	ffffabcd 	.word	0xffffabcd
   10c94:	00001234 	.word	0x00001234
   10c98:	ffffe66d 	.word	0xffffe66d
   10c9c:	ffffdeec 	.word	0xffffdeec
   10ca0:	4c957f2d 	.word	0x4c957f2d
   10ca4:	5851f42d 	.word	0x5851f42d

00010ca8 <setbuf>:
   10ca8:	b508      	push	{r3, lr}
   10caa:	424a      	negs	r2, r1
   10cac:	414a      	adcs	r2, r1
   10cae:	2380      	movs	r3, #128	; 0x80
   10cb0:	0052      	lsls	r2, r2, #1
   10cb2:	00db      	lsls	r3, r3, #3
   10cb4:	f000 f802 	bl	10cbc <setvbuf>
   10cb8:	bd08      	pop	{r3, pc}
	...

00010cbc <setvbuf>:
   10cbc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   10cbe:	1c1e      	adds	r6, r3, #0
   10cc0:	4b3c      	ldr	r3, [pc, #240]	; (10db4 <setvbuf+0xf8>)
   10cc2:	1c04      	adds	r4, r0, #0
   10cc4:	681d      	ldr	r5, [r3, #0]
   10cc6:	1c0f      	adds	r7, r1, #0
   10cc8:	9201      	str	r2, [sp, #4]
   10cca:	2d00      	cmp	r5, #0
   10ccc:	d005      	beq.n	10cda <setvbuf+0x1e>
   10cce:	69ab      	ldr	r3, [r5, #24]
   10cd0:	2b00      	cmp	r3, #0
   10cd2:	d102      	bne.n	10cda <setvbuf+0x1e>
   10cd4:	1c28      	adds	r0, r5, #0
   10cd6:	f000 fab1 	bl	1123c <__sinit>
   10cda:	4b37      	ldr	r3, [pc, #220]	; (10db8 <setvbuf+0xfc>)
   10cdc:	429c      	cmp	r4, r3
   10cde:	d101      	bne.n	10ce4 <setvbuf+0x28>
   10ce0:	686c      	ldr	r4, [r5, #4]
   10ce2:	e008      	b.n	10cf6 <setvbuf+0x3a>
   10ce4:	4b35      	ldr	r3, [pc, #212]	; (10dbc <setvbuf+0x100>)
   10ce6:	429c      	cmp	r4, r3
   10ce8:	d101      	bne.n	10cee <setvbuf+0x32>
   10cea:	68ac      	ldr	r4, [r5, #8]
   10cec:	e003      	b.n	10cf6 <setvbuf+0x3a>
   10cee:	4b34      	ldr	r3, [pc, #208]	; (10dc0 <setvbuf+0x104>)
   10cf0:	429c      	cmp	r4, r3
   10cf2:	d100      	bne.n	10cf6 <setvbuf+0x3a>
   10cf4:	68ec      	ldr	r4, [r5, #12]
   10cf6:	9b01      	ldr	r3, [sp, #4]
   10cf8:	2b02      	cmp	r3, #2
   10cfa:	d858      	bhi.n	10dae <setvbuf+0xf2>
   10cfc:	2e00      	cmp	r6, #0
   10cfe:	db56      	blt.n	10dae <setvbuf+0xf2>
   10d00:	1c28      	adds	r0, r5, #0
   10d02:	1c21      	adds	r1, r4, #0
   10d04:	f000 fa2c 	bl	11160 <_fflush_r>
   10d08:	2300      	movs	r3, #0
   10d0a:	6063      	str	r3, [r4, #4]
   10d0c:	61a3      	str	r3, [r4, #24]
   10d0e:	89a3      	ldrh	r3, [r4, #12]
   10d10:	061b      	lsls	r3, r3, #24
   10d12:	d503      	bpl.n	10d1c <setvbuf+0x60>
   10d14:	1c28      	adds	r0, r5, #0
   10d16:	6921      	ldr	r1, [r4, #16]
   10d18:	f000 fb84 	bl	11424 <_free_r>
   10d1c:	2283      	movs	r2, #131	; 0x83
   10d1e:	89a3      	ldrh	r3, [r4, #12]
   10d20:	4393      	bics	r3, r2
   10d22:	81a3      	strh	r3, [r4, #12]
   10d24:	9b01      	ldr	r3, [sp, #4]
   10d26:	2b02      	cmp	r3, #2
   10d28:	d013      	beq.n	10d52 <setvbuf+0x96>
   10d2a:	2f00      	cmp	r7, #0
   10d2c:	d125      	bne.n	10d7a <setvbuf+0xbe>
   10d2e:	2e00      	cmp	r6, #0
   10d30:	d101      	bne.n	10d36 <setvbuf+0x7a>
   10d32:	2680      	movs	r6, #128	; 0x80
   10d34:	00f6      	lsls	r6, r6, #3
   10d36:	1c30      	adds	r0, r6, #0
   10d38:	f000 fb6a 	bl	11410 <malloc>
   10d3c:	1e07      	subs	r7, r0, #0
   10d3e:	d118      	bne.n	10d72 <setvbuf+0xb6>
   10d40:	2080      	movs	r0, #128	; 0x80
   10d42:	00c0      	lsls	r0, r0, #3
   10d44:	f000 fb64 	bl	11410 <malloc>
   10d48:	1e07      	subs	r7, r0, #0
   10d4a:	d110      	bne.n	10d6e <setvbuf+0xb2>
   10d4c:	2001      	movs	r0, #1
   10d4e:	4240      	negs	r0, r0
   10d50:	e000      	b.n	10d54 <setvbuf+0x98>
   10d52:	2000      	movs	r0, #0
   10d54:	2202      	movs	r2, #2
   10d56:	89a3      	ldrh	r3, [r4, #12]
   10d58:	4313      	orrs	r3, r2
   10d5a:	81a3      	strh	r3, [r4, #12]
   10d5c:	2300      	movs	r3, #0
   10d5e:	60a3      	str	r3, [r4, #8]
   10d60:	1c23      	adds	r3, r4, #0
   10d62:	3347      	adds	r3, #71	; 0x47
   10d64:	6023      	str	r3, [r4, #0]
   10d66:	6123      	str	r3, [r4, #16]
   10d68:	2301      	movs	r3, #1
   10d6a:	6163      	str	r3, [r4, #20]
   10d6c:	e021      	b.n	10db2 <setvbuf+0xf6>
   10d6e:	2680      	movs	r6, #128	; 0x80
   10d70:	00f6      	lsls	r6, r6, #3
   10d72:	2280      	movs	r2, #128	; 0x80
   10d74:	89a3      	ldrh	r3, [r4, #12]
   10d76:	4313      	orrs	r3, r2
   10d78:	81a3      	strh	r3, [r4, #12]
   10d7a:	9b01      	ldr	r3, [sp, #4]
   10d7c:	2b01      	cmp	r3, #1
   10d7e:	d105      	bne.n	10d8c <setvbuf+0xd0>
   10d80:	89a3      	ldrh	r3, [r4, #12]
   10d82:	9a01      	ldr	r2, [sp, #4]
   10d84:	431a      	orrs	r2, r3
   10d86:	4273      	negs	r3, r6
   10d88:	81a2      	strh	r2, [r4, #12]
   10d8a:	61a3      	str	r3, [r4, #24]
   10d8c:	4b0d      	ldr	r3, [pc, #52]	; (10dc4 <setvbuf+0x108>)
   10d8e:	2000      	movs	r0, #0
   10d90:	62ab      	str	r3, [r5, #40]	; 0x28
   10d92:	89a2      	ldrh	r2, [r4, #12]
   10d94:	6027      	str	r7, [r4, #0]
   10d96:	6127      	str	r7, [r4, #16]
   10d98:	6166      	str	r6, [r4, #20]
   10d9a:	0713      	lsls	r3, r2, #28
   10d9c:	d509      	bpl.n	10db2 <setvbuf+0xf6>
   10d9e:	2303      	movs	r3, #3
   10da0:	401a      	ands	r2, r3
   10da2:	4253      	negs	r3, r2
   10da4:	4153      	adcs	r3, r2
   10da6:	425b      	negs	r3, r3
   10da8:	401e      	ands	r6, r3
   10daa:	60a6      	str	r6, [r4, #8]
   10dac:	e001      	b.n	10db2 <setvbuf+0xf6>
   10dae:	2001      	movs	r0, #1
   10db0:	4240      	negs	r0, r0
   10db2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
   10db4:	20000234 	.word	0x20000234
   10db8:	00013860 	.word	0x00013860
   10dbc:	00013880 	.word	0x00013880
   10dc0:	000138a0 	.word	0x000138a0
   10dc4:	000111b9 	.word	0x000111b9

00010dc8 <sniprintf>:
   10dc8:	b40c      	push	{r2, r3}
   10dca:	b530      	push	{r4, r5, lr}
   10dcc:	4b17      	ldr	r3, [pc, #92]	; (10e2c <sniprintf+0x64>)
   10dce:	b09d      	sub	sp, #116	; 0x74
   10dd0:	681d      	ldr	r5, [r3, #0]
   10dd2:	2900      	cmp	r1, #0
   10dd4:	da04      	bge.n	10de0 <sniprintf+0x18>
   10dd6:	238b      	movs	r3, #139	; 0x8b
   10dd8:	2001      	movs	r0, #1
   10dda:	602b      	str	r3, [r5, #0]
   10ddc:	4240      	negs	r0, r0
   10dde:	e01f      	b.n	10e20 <sniprintf+0x58>
   10de0:	2382      	movs	r3, #130	; 0x82
   10de2:	aa02      	add	r2, sp, #8
   10de4:	009b      	lsls	r3, r3, #2
   10de6:	8193      	strh	r3, [r2, #12]
   10de8:	2300      	movs	r3, #0
   10dea:	9002      	str	r0, [sp, #8]
   10dec:	6110      	str	r0, [r2, #16]
   10dee:	4299      	cmp	r1, r3
   10df0:	d000      	beq.n	10df4 <sniprintf+0x2c>
   10df2:	1e4b      	subs	r3, r1, #1
   10df4:	6093      	str	r3, [r2, #8]
   10df6:	6153      	str	r3, [r2, #20]
   10df8:	2301      	movs	r3, #1
   10dfa:	425b      	negs	r3, r3
   10dfc:	81d3      	strh	r3, [r2, #14]
   10dfe:	1c0c      	adds	r4, r1, #0
   10e00:	ab21      	add	r3, sp, #132	; 0x84
   10e02:	1c11      	adds	r1, r2, #0
   10e04:	1c28      	adds	r0, r5, #0
   10e06:	9a20      	ldr	r2, [sp, #128]	; 0x80
   10e08:	9301      	str	r3, [sp, #4]
   10e0a:	f000 fc09 	bl	11620 <_svfiprintf_r>
   10e0e:	1c43      	adds	r3, r0, #1
   10e10:	da01      	bge.n	10e16 <sniprintf+0x4e>
   10e12:	238b      	movs	r3, #139	; 0x8b
   10e14:	602b      	str	r3, [r5, #0]
   10e16:	2c00      	cmp	r4, #0
   10e18:	d002      	beq.n	10e20 <sniprintf+0x58>
   10e1a:	2300      	movs	r3, #0
   10e1c:	9a02      	ldr	r2, [sp, #8]
   10e1e:	7013      	strb	r3, [r2, #0]
   10e20:	b01d      	add	sp, #116	; 0x74
   10e22:	bc30      	pop	{r4, r5}
   10e24:	bc08      	pop	{r3}
   10e26:	b002      	add	sp, #8
   10e28:	4718      	bx	r3
   10e2a:	46c0      	nop			; (mov r8, r8)
   10e2c:	20000234 	.word	0x20000234

00010e30 <strlen>:
   10e30:	2300      	movs	r3, #0
   10e32:	5cc2      	ldrb	r2, [r0, r3]
   10e34:	3301      	adds	r3, #1
   10e36:	2a00      	cmp	r2, #0
   10e38:	d1fb      	bne.n	10e32 <strlen+0x2>
   10e3a:	1e58      	subs	r0, r3, #1
   10e3c:	4770      	bx	lr
	...

00010e40 <strncasecmp>:
   10e40:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   10e42:	2500      	movs	r5, #0
   10e44:	4b10      	ldr	r3, [pc, #64]	; (10e88 <strncasecmp+0x48>)
   10e46:	9201      	str	r2, [sp, #4]
   10e48:	681e      	ldr	r6, [r3, #0]
   10e4a:	9b01      	ldr	r3, [sp, #4]
   10e4c:	429d      	cmp	r5, r3
   10e4e:	d017      	beq.n	10e80 <strncasecmp+0x40>
   10e50:	5d43      	ldrb	r3, [r0, r5]
   10e52:	18f4      	adds	r4, r6, r3
   10e54:	7867      	ldrb	r7, [r4, #1]
   10e56:	2403      	movs	r4, #3
   10e58:	403c      	ands	r4, r7
   10e5a:	2c01      	cmp	r4, #1
   10e5c:	d100      	bne.n	10e60 <strncasecmp+0x20>
   10e5e:	3320      	adds	r3, #32
   10e60:	5d4c      	ldrb	r4, [r1, r5]
   10e62:	1937      	adds	r7, r6, r4
   10e64:	787f      	ldrb	r7, [r7, #1]
   10e66:	46bc      	mov	ip, r7
   10e68:	2703      	movs	r7, #3
   10e6a:	4662      	mov	r2, ip
   10e6c:	4017      	ands	r7, r2
   10e6e:	2f01      	cmp	r7, #1
   10e70:	d100      	bne.n	10e74 <strncasecmp+0x34>
   10e72:	3420      	adds	r4, #32
   10e74:	1b1b      	subs	r3, r3, r4
   10e76:	d104      	bne.n	10e82 <strncasecmp+0x42>
   10e78:	3501      	adds	r5, #1
   10e7a:	2c00      	cmp	r4, #0
   10e7c:	d1e5      	bne.n	10e4a <strncasecmp+0xa>
   10e7e:	e000      	b.n	10e82 <strncasecmp+0x42>
   10e80:	2300      	movs	r3, #0
   10e82:	1c18      	adds	r0, r3, #0
   10e84:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
   10e86:	46c0      	nop			; (mov r8, r8)
   10e88:	200001d0 	.word	0x200001d0

00010e8c <strncmp>:
   10e8c:	2300      	movs	r3, #0
   10e8e:	b530      	push	{r4, r5, lr}
   10e90:	429a      	cmp	r2, r3
   10e92:	d00d      	beq.n	10eb0 <strncmp+0x24>
   10e94:	3a01      	subs	r2, #1
   10e96:	5cc4      	ldrb	r4, [r0, r3]
   10e98:	5ccd      	ldrb	r5, [r1, r3]
   10e9a:	42ac      	cmp	r4, r5
   10e9c:	d102      	bne.n	10ea4 <strncmp+0x18>
   10e9e:	4293      	cmp	r3, r2
   10ea0:	d102      	bne.n	10ea8 <strncmp+0x1c>
   10ea2:	1c25      	adds	r5, r4, #0
   10ea4:	1b63      	subs	r3, r4, r5
   10ea6:	e003      	b.n	10eb0 <strncmp+0x24>
   10ea8:	3301      	adds	r3, #1
   10eaa:	2c00      	cmp	r4, #0
   10eac:	d1f3      	bne.n	10e96 <strncmp+0xa>
   10eae:	e7f8      	b.n	10ea2 <strncmp+0x16>
   10eb0:	1c18      	adds	r0, r3, #0
   10eb2:	bd30      	pop	{r4, r5, pc}

00010eb4 <__swbuf_r>:
   10eb4:	b570      	push	{r4, r5, r6, lr}
   10eb6:	1c05      	adds	r5, r0, #0
   10eb8:	1c0e      	adds	r6, r1, #0
   10eba:	1c14      	adds	r4, r2, #0
   10ebc:	2800      	cmp	r0, #0
   10ebe:	d004      	beq.n	10eca <__swbuf_r+0x16>
   10ec0:	6983      	ldr	r3, [r0, #24]
   10ec2:	2b00      	cmp	r3, #0
   10ec4:	d101      	bne.n	10eca <__swbuf_r+0x16>
   10ec6:	f000 f9b9 	bl	1123c <__sinit>
   10eca:	4b23      	ldr	r3, [pc, #140]	; (10f58 <__swbuf_r+0xa4>)
   10ecc:	429c      	cmp	r4, r3
   10ece:	d101      	bne.n	10ed4 <__swbuf_r+0x20>
   10ed0:	686c      	ldr	r4, [r5, #4]
   10ed2:	e008      	b.n	10ee6 <__swbuf_r+0x32>
   10ed4:	4b21      	ldr	r3, [pc, #132]	; (10f5c <__swbuf_r+0xa8>)
   10ed6:	429c      	cmp	r4, r3
   10ed8:	d101      	bne.n	10ede <__swbuf_r+0x2a>
   10eda:	68ac      	ldr	r4, [r5, #8]
   10edc:	e003      	b.n	10ee6 <__swbuf_r+0x32>
   10ede:	4b20      	ldr	r3, [pc, #128]	; (10f60 <__swbuf_r+0xac>)
   10ee0:	429c      	cmp	r4, r3
   10ee2:	d100      	bne.n	10ee6 <__swbuf_r+0x32>
   10ee4:	68ec      	ldr	r4, [r5, #12]
   10ee6:	69a3      	ldr	r3, [r4, #24]
   10ee8:	60a3      	str	r3, [r4, #8]
   10eea:	89a3      	ldrh	r3, [r4, #12]
   10eec:	071b      	lsls	r3, r3, #28
   10eee:	d50a      	bpl.n	10f06 <__swbuf_r+0x52>
   10ef0:	6923      	ldr	r3, [r4, #16]
   10ef2:	2b00      	cmp	r3, #0
   10ef4:	d007      	beq.n	10f06 <__swbuf_r+0x52>
   10ef6:	6823      	ldr	r3, [r4, #0]
   10ef8:	6922      	ldr	r2, [r4, #16]
   10efa:	b2f6      	uxtb	r6, r6
   10efc:	1a98      	subs	r0, r3, r2
   10efe:	6963      	ldr	r3, [r4, #20]
   10f00:	4298      	cmp	r0, r3
   10f02:	db0f      	blt.n	10f24 <__swbuf_r+0x70>
   10f04:	e008      	b.n	10f18 <__swbuf_r+0x64>
   10f06:	1c28      	adds	r0, r5, #0
   10f08:	1c21      	adds	r1, r4, #0
   10f0a:	f000 f82b 	bl	10f64 <__swsetup_r>
   10f0e:	2800      	cmp	r0, #0
   10f10:	d0f1      	beq.n	10ef6 <__swbuf_r+0x42>
   10f12:	2001      	movs	r0, #1
   10f14:	4240      	negs	r0, r0
   10f16:	e01d      	b.n	10f54 <__swbuf_r+0xa0>
   10f18:	1c28      	adds	r0, r5, #0
   10f1a:	1c21      	adds	r1, r4, #0
   10f1c:	f000 f920 	bl	11160 <_fflush_r>
   10f20:	2800      	cmp	r0, #0
   10f22:	d1f6      	bne.n	10f12 <__swbuf_r+0x5e>
   10f24:	68a3      	ldr	r3, [r4, #8]
   10f26:	3001      	adds	r0, #1
   10f28:	3b01      	subs	r3, #1
   10f2a:	60a3      	str	r3, [r4, #8]
   10f2c:	6823      	ldr	r3, [r4, #0]
   10f2e:	1c5a      	adds	r2, r3, #1
   10f30:	6022      	str	r2, [r4, #0]
   10f32:	701e      	strb	r6, [r3, #0]
   10f34:	6963      	ldr	r3, [r4, #20]
   10f36:	4298      	cmp	r0, r3
   10f38:	d005      	beq.n	10f46 <__swbuf_r+0x92>
   10f3a:	89a3      	ldrh	r3, [r4, #12]
   10f3c:	1c30      	adds	r0, r6, #0
   10f3e:	07db      	lsls	r3, r3, #31
   10f40:	d508      	bpl.n	10f54 <__swbuf_r+0xa0>
   10f42:	2e0a      	cmp	r6, #10
   10f44:	d106      	bne.n	10f54 <__swbuf_r+0xa0>
   10f46:	1c28      	adds	r0, r5, #0
   10f48:	1c21      	adds	r1, r4, #0
   10f4a:	f000 f909 	bl	11160 <_fflush_r>
   10f4e:	2800      	cmp	r0, #0
   10f50:	d1df      	bne.n	10f12 <__swbuf_r+0x5e>
   10f52:	1c30      	adds	r0, r6, #0
   10f54:	bd70      	pop	{r4, r5, r6, pc}
   10f56:	46c0      	nop			; (mov r8, r8)
   10f58:	00013860 	.word	0x00013860
   10f5c:	00013880 	.word	0x00013880
   10f60:	000138a0 	.word	0x000138a0

00010f64 <__swsetup_r>:
   10f64:	4b35      	ldr	r3, [pc, #212]	; (1103c <__swsetup_r+0xd8>)
   10f66:	b570      	push	{r4, r5, r6, lr}
   10f68:	681d      	ldr	r5, [r3, #0]
   10f6a:	1c06      	adds	r6, r0, #0
   10f6c:	1c0c      	adds	r4, r1, #0
   10f6e:	2d00      	cmp	r5, #0
   10f70:	d005      	beq.n	10f7e <__swsetup_r+0x1a>
   10f72:	69ab      	ldr	r3, [r5, #24]
   10f74:	2b00      	cmp	r3, #0
   10f76:	d102      	bne.n	10f7e <__swsetup_r+0x1a>
   10f78:	1c28      	adds	r0, r5, #0
   10f7a:	f000 f95f 	bl	1123c <__sinit>
   10f7e:	4b30      	ldr	r3, [pc, #192]	; (11040 <__swsetup_r+0xdc>)
   10f80:	429c      	cmp	r4, r3
   10f82:	d101      	bne.n	10f88 <__swsetup_r+0x24>
   10f84:	686c      	ldr	r4, [r5, #4]
   10f86:	e008      	b.n	10f9a <__swsetup_r+0x36>
   10f88:	4b2e      	ldr	r3, [pc, #184]	; (11044 <__swsetup_r+0xe0>)
   10f8a:	429c      	cmp	r4, r3
   10f8c:	d101      	bne.n	10f92 <__swsetup_r+0x2e>
   10f8e:	68ac      	ldr	r4, [r5, #8]
   10f90:	e003      	b.n	10f9a <__swsetup_r+0x36>
   10f92:	4b2d      	ldr	r3, [pc, #180]	; (11048 <__swsetup_r+0xe4>)
   10f94:	429c      	cmp	r4, r3
   10f96:	d100      	bne.n	10f9a <__swsetup_r+0x36>
   10f98:	68ec      	ldr	r4, [r5, #12]
   10f9a:	89a3      	ldrh	r3, [r4, #12]
   10f9c:	b29a      	uxth	r2, r3
   10f9e:	0711      	lsls	r1, r2, #28
   10fa0:	d423      	bmi.n	10fea <__swsetup_r+0x86>
   10fa2:	06d1      	lsls	r1, r2, #27
   10fa4:	d407      	bmi.n	10fb6 <__swsetup_r+0x52>
   10fa6:	2209      	movs	r2, #9
   10fa8:	2001      	movs	r0, #1
   10faa:	6032      	str	r2, [r6, #0]
   10fac:	3237      	adds	r2, #55	; 0x37
   10fae:	4313      	orrs	r3, r2
   10fb0:	81a3      	strh	r3, [r4, #12]
   10fb2:	4240      	negs	r0, r0
   10fb4:	e040      	b.n	11038 <__swsetup_r+0xd4>
   10fb6:	0753      	lsls	r3, r2, #29
   10fb8:	d513      	bpl.n	10fe2 <__swsetup_r+0x7e>
   10fba:	6b61      	ldr	r1, [r4, #52]	; 0x34
   10fbc:	2900      	cmp	r1, #0
   10fbe:	d008      	beq.n	10fd2 <__swsetup_r+0x6e>
   10fc0:	1c23      	adds	r3, r4, #0
   10fc2:	3344      	adds	r3, #68	; 0x44
   10fc4:	4299      	cmp	r1, r3
   10fc6:	d002      	beq.n	10fce <__swsetup_r+0x6a>
   10fc8:	1c30      	adds	r0, r6, #0
   10fca:	f000 fa2b 	bl	11424 <_free_r>
   10fce:	2300      	movs	r3, #0
   10fd0:	6363      	str	r3, [r4, #52]	; 0x34
   10fd2:	2224      	movs	r2, #36	; 0x24
   10fd4:	89a3      	ldrh	r3, [r4, #12]
   10fd6:	4393      	bics	r3, r2
   10fd8:	81a3      	strh	r3, [r4, #12]
   10fda:	2300      	movs	r3, #0
   10fdc:	6063      	str	r3, [r4, #4]
   10fde:	6923      	ldr	r3, [r4, #16]
   10fe0:	6023      	str	r3, [r4, #0]
   10fe2:	2208      	movs	r2, #8
   10fe4:	89a3      	ldrh	r3, [r4, #12]
   10fe6:	4313      	orrs	r3, r2
   10fe8:	81a3      	strh	r3, [r4, #12]
   10fea:	6923      	ldr	r3, [r4, #16]
   10fec:	2b00      	cmp	r3, #0
   10fee:	d10b      	bne.n	11008 <__swsetup_r+0xa4>
   10ff0:	23a0      	movs	r3, #160	; 0xa0
   10ff2:	89a2      	ldrh	r2, [r4, #12]
   10ff4:	009b      	lsls	r3, r3, #2
   10ff6:	4013      	ands	r3, r2
   10ff8:	2280      	movs	r2, #128	; 0x80
   10ffa:	0092      	lsls	r2, r2, #2
   10ffc:	4293      	cmp	r3, r2
   10ffe:	d003      	beq.n	11008 <__swsetup_r+0xa4>
   11000:	1c30      	adds	r0, r6, #0
   11002:	1c21      	adds	r1, r4, #0
   11004:	f000 f9ac 	bl	11360 <__smakebuf_r>
   11008:	2301      	movs	r3, #1
   1100a:	89a2      	ldrh	r2, [r4, #12]
   1100c:	4013      	ands	r3, r2
   1100e:	d005      	beq.n	1101c <__swsetup_r+0xb8>
   11010:	2300      	movs	r3, #0
   11012:	60a3      	str	r3, [r4, #8]
   11014:	6963      	ldr	r3, [r4, #20]
   11016:	425b      	negs	r3, r3
   11018:	61a3      	str	r3, [r4, #24]
   1101a:	e003      	b.n	11024 <__swsetup_r+0xc0>
   1101c:	0791      	lsls	r1, r2, #30
   1101e:	d400      	bmi.n	11022 <__swsetup_r+0xbe>
   11020:	6963      	ldr	r3, [r4, #20]
   11022:	60a3      	str	r3, [r4, #8]
   11024:	2000      	movs	r0, #0
   11026:	6923      	ldr	r3, [r4, #16]
   11028:	4283      	cmp	r3, r0
   1102a:	d105      	bne.n	11038 <__swsetup_r+0xd4>
   1102c:	0613      	lsls	r3, r2, #24
   1102e:	d503      	bpl.n	11038 <__swsetup_r+0xd4>
   11030:	2340      	movs	r3, #64	; 0x40
   11032:	431a      	orrs	r2, r3
   11034:	81a2      	strh	r2, [r4, #12]
   11036:	3801      	subs	r0, #1
   11038:	bd70      	pop	{r4, r5, r6, pc}
   1103a:	46c0      	nop			; (mov r8, r8)
   1103c:	20000234 	.word	0x20000234
   11040:	00013860 	.word	0x00013860
   11044:	00013880 	.word	0x00013880
   11048:	000138a0 	.word	0x000138a0

0001104c <__sflush_r>:
   1104c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1104e:	898a      	ldrh	r2, [r1, #12]
   11050:	1c05      	adds	r5, r0, #0
   11052:	1c0c      	adds	r4, r1, #0
   11054:	0713      	lsls	r3, r2, #28
   11056:	d45e      	bmi.n	11116 <__sflush_r+0xca>
   11058:	684b      	ldr	r3, [r1, #4]
   1105a:	2b00      	cmp	r3, #0
   1105c:	dc02      	bgt.n	11064 <__sflush_r+0x18>
   1105e:	6c0b      	ldr	r3, [r1, #64]	; 0x40
   11060:	2b00      	cmp	r3, #0
   11062:	dd1a      	ble.n	1109a <__sflush_r+0x4e>
   11064:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
   11066:	2f00      	cmp	r7, #0
   11068:	d017      	beq.n	1109a <__sflush_r+0x4e>
   1106a:	2300      	movs	r3, #0
   1106c:	682e      	ldr	r6, [r5, #0]
   1106e:	602b      	str	r3, [r5, #0]
   11070:	2380      	movs	r3, #128	; 0x80
   11072:	015b      	lsls	r3, r3, #5
   11074:	401a      	ands	r2, r3
   11076:	d001      	beq.n	1107c <__sflush_r+0x30>
   11078:	6d62      	ldr	r2, [r4, #84]	; 0x54
   1107a:	e015      	b.n	110a8 <__sflush_r+0x5c>
   1107c:	1c28      	adds	r0, r5, #0
   1107e:	6a21      	ldr	r1, [r4, #32]
   11080:	2301      	movs	r3, #1
   11082:	47b8      	blx	r7
   11084:	1c02      	adds	r2, r0, #0
   11086:	1c43      	adds	r3, r0, #1
   11088:	d10e      	bne.n	110a8 <__sflush_r+0x5c>
   1108a:	682b      	ldr	r3, [r5, #0]
   1108c:	2b00      	cmp	r3, #0
   1108e:	d00b      	beq.n	110a8 <__sflush_r+0x5c>
   11090:	2b1d      	cmp	r3, #29
   11092:	d001      	beq.n	11098 <__sflush_r+0x4c>
   11094:	2b16      	cmp	r3, #22
   11096:	d102      	bne.n	1109e <__sflush_r+0x52>
   11098:	602e      	str	r6, [r5, #0]
   1109a:	2000      	movs	r0, #0
   1109c:	e05e      	b.n	1115c <__sflush_r+0x110>
   1109e:	2140      	movs	r1, #64	; 0x40
   110a0:	89a3      	ldrh	r3, [r4, #12]
   110a2:	430b      	orrs	r3, r1
   110a4:	81a3      	strh	r3, [r4, #12]
   110a6:	e059      	b.n	1115c <__sflush_r+0x110>
   110a8:	89a3      	ldrh	r3, [r4, #12]
   110aa:	075b      	lsls	r3, r3, #29
   110ac:	d506      	bpl.n	110bc <__sflush_r+0x70>
   110ae:	6863      	ldr	r3, [r4, #4]
   110b0:	1ad2      	subs	r2, r2, r3
   110b2:	6b63      	ldr	r3, [r4, #52]	; 0x34
   110b4:	2b00      	cmp	r3, #0
   110b6:	d001      	beq.n	110bc <__sflush_r+0x70>
   110b8:	6c23      	ldr	r3, [r4, #64]	; 0x40
   110ba:	1ad2      	subs	r2, r2, r3
   110bc:	2300      	movs	r3, #0
   110be:	1c28      	adds	r0, r5, #0
   110c0:	6a21      	ldr	r1, [r4, #32]
   110c2:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
   110c4:	47b8      	blx	r7
   110c6:	89a3      	ldrh	r3, [r4, #12]
   110c8:	1c42      	adds	r2, r0, #1
   110ca:	d106      	bne.n	110da <__sflush_r+0x8e>
   110cc:	682a      	ldr	r2, [r5, #0]
   110ce:	2a00      	cmp	r2, #0
   110d0:	d003      	beq.n	110da <__sflush_r+0x8e>
   110d2:	2a1d      	cmp	r2, #29
   110d4:	d001      	beq.n	110da <__sflush_r+0x8e>
   110d6:	2a16      	cmp	r2, #22
   110d8:	d119      	bne.n	1110e <__sflush_r+0xc2>
   110da:	2200      	movs	r2, #0
   110dc:	6062      	str	r2, [r4, #4]
   110de:	6922      	ldr	r2, [r4, #16]
   110e0:	6022      	str	r2, [r4, #0]
   110e2:	04db      	lsls	r3, r3, #19
   110e4:	d505      	bpl.n	110f2 <__sflush_r+0xa6>
   110e6:	1c43      	adds	r3, r0, #1
   110e8:	d102      	bne.n	110f0 <__sflush_r+0xa4>
   110ea:	682b      	ldr	r3, [r5, #0]
   110ec:	2b00      	cmp	r3, #0
   110ee:	d100      	bne.n	110f2 <__sflush_r+0xa6>
   110f0:	6560      	str	r0, [r4, #84]	; 0x54
   110f2:	6b61      	ldr	r1, [r4, #52]	; 0x34
   110f4:	602e      	str	r6, [r5, #0]
   110f6:	2900      	cmp	r1, #0
   110f8:	d0cf      	beq.n	1109a <__sflush_r+0x4e>
   110fa:	1c23      	adds	r3, r4, #0
   110fc:	3344      	adds	r3, #68	; 0x44
   110fe:	4299      	cmp	r1, r3
   11100:	d002      	beq.n	11108 <__sflush_r+0xbc>
   11102:	1c28      	adds	r0, r5, #0
   11104:	f000 f98e 	bl	11424 <_free_r>
   11108:	2000      	movs	r0, #0
   1110a:	6360      	str	r0, [r4, #52]	; 0x34
   1110c:	e026      	b.n	1115c <__sflush_r+0x110>
   1110e:	2240      	movs	r2, #64	; 0x40
   11110:	4313      	orrs	r3, r2
   11112:	81a3      	strh	r3, [r4, #12]
   11114:	e022      	b.n	1115c <__sflush_r+0x110>
   11116:	690f      	ldr	r7, [r1, #16]
   11118:	2f00      	cmp	r7, #0
   1111a:	d0be      	beq.n	1109a <__sflush_r+0x4e>
   1111c:	680b      	ldr	r3, [r1, #0]
   1111e:	600f      	str	r7, [r1, #0]
   11120:	1bdb      	subs	r3, r3, r7
   11122:	9301      	str	r3, [sp, #4]
   11124:	2300      	movs	r3, #0
   11126:	0792      	lsls	r2, r2, #30
   11128:	d100      	bne.n	1112c <__sflush_r+0xe0>
   1112a:	694b      	ldr	r3, [r1, #20]
   1112c:	60a3      	str	r3, [r4, #8]
   1112e:	9b01      	ldr	r3, [sp, #4]
   11130:	2b00      	cmp	r3, #0
   11132:	ddb2      	ble.n	1109a <__sflush_r+0x4e>
   11134:	1c28      	adds	r0, r5, #0
   11136:	6a21      	ldr	r1, [r4, #32]
   11138:	1c3a      	adds	r2, r7, #0
   1113a:	9b01      	ldr	r3, [sp, #4]
   1113c:	6aa6      	ldr	r6, [r4, #40]	; 0x28
   1113e:	47b0      	blx	r6
   11140:	2800      	cmp	r0, #0
   11142:	dc06      	bgt.n	11152 <__sflush_r+0x106>
   11144:	2240      	movs	r2, #64	; 0x40
   11146:	2001      	movs	r0, #1
   11148:	89a3      	ldrh	r3, [r4, #12]
   1114a:	4240      	negs	r0, r0
   1114c:	4313      	orrs	r3, r2
   1114e:	81a3      	strh	r3, [r4, #12]
   11150:	e004      	b.n	1115c <__sflush_r+0x110>
   11152:	9b01      	ldr	r3, [sp, #4]
   11154:	183f      	adds	r7, r7, r0
   11156:	1a1b      	subs	r3, r3, r0
   11158:	9301      	str	r3, [sp, #4]
   1115a:	e7e8      	b.n	1112e <__sflush_r+0xe2>
   1115c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
	...

00011160 <_fflush_r>:
   11160:	b538      	push	{r3, r4, r5, lr}
   11162:	690b      	ldr	r3, [r1, #16]
   11164:	1c05      	adds	r5, r0, #0
   11166:	1c0c      	adds	r4, r1, #0
   11168:	2b00      	cmp	r3, #0
   1116a:	d101      	bne.n	11170 <_fflush_r+0x10>
   1116c:	2000      	movs	r0, #0
   1116e:	e01c      	b.n	111aa <_fflush_r+0x4a>
   11170:	2800      	cmp	r0, #0
   11172:	d004      	beq.n	1117e <_fflush_r+0x1e>
   11174:	6983      	ldr	r3, [r0, #24]
   11176:	2b00      	cmp	r3, #0
   11178:	d101      	bne.n	1117e <_fflush_r+0x1e>
   1117a:	f000 f85f 	bl	1123c <__sinit>
   1117e:	4b0b      	ldr	r3, [pc, #44]	; (111ac <_fflush_r+0x4c>)
   11180:	429c      	cmp	r4, r3
   11182:	d101      	bne.n	11188 <_fflush_r+0x28>
   11184:	686c      	ldr	r4, [r5, #4]
   11186:	e008      	b.n	1119a <_fflush_r+0x3a>
   11188:	4b09      	ldr	r3, [pc, #36]	; (111b0 <_fflush_r+0x50>)
   1118a:	429c      	cmp	r4, r3
   1118c:	d101      	bne.n	11192 <_fflush_r+0x32>
   1118e:	68ac      	ldr	r4, [r5, #8]
   11190:	e003      	b.n	1119a <_fflush_r+0x3a>
   11192:	4b08      	ldr	r3, [pc, #32]	; (111b4 <_fflush_r+0x54>)
   11194:	429c      	cmp	r4, r3
   11196:	d100      	bne.n	1119a <_fflush_r+0x3a>
   11198:	68ec      	ldr	r4, [r5, #12]
   1119a:	220c      	movs	r2, #12
   1119c:	5ea3      	ldrsh	r3, [r4, r2]
   1119e:	2b00      	cmp	r3, #0
   111a0:	d0e4      	beq.n	1116c <_fflush_r+0xc>
   111a2:	1c28      	adds	r0, r5, #0
   111a4:	1c21      	adds	r1, r4, #0
   111a6:	f7ff ff51 	bl	1104c <__sflush_r>
   111aa:	bd38      	pop	{r3, r4, r5, pc}
   111ac:	00013860 	.word	0x00013860
   111b0:	00013880 	.word	0x00013880
   111b4:	000138a0 	.word	0x000138a0

000111b8 <_cleanup_r>:
   111b8:	b508      	push	{r3, lr}
   111ba:	4902      	ldr	r1, [pc, #8]	; (111c4 <_cleanup_r+0xc>)
   111bc:	f000 f8ae 	bl	1131c <_fwalk_reent>
   111c0:	bd08      	pop	{r3, pc}
   111c2:	46c0      	nop			; (mov r8, r8)
   111c4:	00011161 	.word	0x00011161

000111c8 <std.isra.0>:
   111c8:	2300      	movs	r3, #0
   111ca:	b510      	push	{r4, lr}
   111cc:	1c04      	adds	r4, r0, #0
   111ce:	6003      	str	r3, [r0, #0]
   111d0:	6043      	str	r3, [r0, #4]
   111d2:	6083      	str	r3, [r0, #8]
   111d4:	8181      	strh	r1, [r0, #12]
   111d6:	6643      	str	r3, [r0, #100]	; 0x64
   111d8:	81c2      	strh	r2, [r0, #14]
   111da:	6103      	str	r3, [r0, #16]
   111dc:	6143      	str	r3, [r0, #20]
   111de:	6183      	str	r3, [r0, #24]
   111e0:	1c19      	adds	r1, r3, #0
   111e2:	2208      	movs	r2, #8
   111e4:	305c      	adds	r0, #92	; 0x5c
   111e6:	f7ff fcbf 	bl	10b68 <memset>
   111ea:	4b05      	ldr	r3, [pc, #20]	; (11200 <std.isra.0+0x38>)
   111ec:	6224      	str	r4, [r4, #32]
   111ee:	6263      	str	r3, [r4, #36]	; 0x24
   111f0:	4b04      	ldr	r3, [pc, #16]	; (11204 <std.isra.0+0x3c>)
   111f2:	62a3      	str	r3, [r4, #40]	; 0x28
   111f4:	4b04      	ldr	r3, [pc, #16]	; (11208 <std.isra.0+0x40>)
   111f6:	62e3      	str	r3, [r4, #44]	; 0x2c
   111f8:	4b04      	ldr	r3, [pc, #16]	; (1120c <std.isra.0+0x44>)
   111fa:	6323      	str	r3, [r4, #48]	; 0x30
   111fc:	bd10      	pop	{r4, pc}
   111fe:	46c0      	nop			; (mov r8, r8)
   11200:	00011e25 	.word	0x00011e25
   11204:	00011e4d 	.word	0x00011e4d
   11208:	00011e85 	.word	0x00011e85
   1120c:	00011eb1 	.word	0x00011eb1

00011210 <__sfmoreglue>:
   11210:	b570      	push	{r4, r5, r6, lr}
   11212:	2568      	movs	r5, #104	; 0x68
   11214:	1e4b      	subs	r3, r1, #1
   11216:	435d      	muls	r5, r3
   11218:	1c0e      	adds	r6, r1, #0
   1121a:	1c29      	adds	r1, r5, #0
   1121c:	3174      	adds	r1, #116	; 0x74
   1121e:	f000 f947 	bl	114b0 <_malloc_r>
   11222:	1e04      	subs	r4, r0, #0
   11224:	d008      	beq.n	11238 <__sfmoreglue+0x28>
   11226:	2100      	movs	r1, #0
   11228:	1c2a      	adds	r2, r5, #0
   1122a:	6001      	str	r1, [r0, #0]
   1122c:	6046      	str	r6, [r0, #4]
   1122e:	300c      	adds	r0, #12
   11230:	60a0      	str	r0, [r4, #8]
   11232:	3268      	adds	r2, #104	; 0x68
   11234:	f7ff fc98 	bl	10b68 <memset>
   11238:	1c20      	adds	r0, r4, #0
   1123a:	bd70      	pop	{r4, r5, r6, pc}

0001123c <__sinit>:
   1123c:	6983      	ldr	r3, [r0, #24]
   1123e:	b513      	push	{r0, r1, r4, lr}
   11240:	2b00      	cmp	r3, #0
   11242:	d128      	bne.n	11296 <__sinit+0x5a>
   11244:	6483      	str	r3, [r0, #72]	; 0x48
   11246:	64c3      	str	r3, [r0, #76]	; 0x4c
   11248:	6503      	str	r3, [r0, #80]	; 0x50
   1124a:	4b13      	ldr	r3, [pc, #76]	; (11298 <__sinit+0x5c>)
   1124c:	4a13      	ldr	r2, [pc, #76]	; (1129c <__sinit+0x60>)
   1124e:	681b      	ldr	r3, [r3, #0]
   11250:	6282      	str	r2, [r0, #40]	; 0x28
   11252:	9301      	str	r3, [sp, #4]
   11254:	4298      	cmp	r0, r3
   11256:	d101      	bne.n	1125c <__sinit+0x20>
   11258:	2301      	movs	r3, #1
   1125a:	6183      	str	r3, [r0, #24]
   1125c:	1c04      	adds	r4, r0, #0
   1125e:	f000 f81f 	bl	112a0 <__sfp>
   11262:	6060      	str	r0, [r4, #4]
   11264:	1c20      	adds	r0, r4, #0
   11266:	f000 f81b 	bl	112a0 <__sfp>
   1126a:	60a0      	str	r0, [r4, #8]
   1126c:	1c20      	adds	r0, r4, #0
   1126e:	f000 f817 	bl	112a0 <__sfp>
   11272:	2104      	movs	r1, #4
   11274:	60e0      	str	r0, [r4, #12]
   11276:	2200      	movs	r2, #0
   11278:	6860      	ldr	r0, [r4, #4]
   1127a:	f7ff ffa5 	bl	111c8 <std.isra.0>
   1127e:	68a0      	ldr	r0, [r4, #8]
   11280:	2109      	movs	r1, #9
   11282:	2201      	movs	r2, #1
   11284:	f7ff ffa0 	bl	111c8 <std.isra.0>
   11288:	68e0      	ldr	r0, [r4, #12]
   1128a:	2112      	movs	r1, #18
   1128c:	2202      	movs	r2, #2
   1128e:	f7ff ff9b 	bl	111c8 <std.isra.0>
   11292:	2301      	movs	r3, #1
   11294:	61a3      	str	r3, [r4, #24]
   11296:	bd13      	pop	{r0, r1, r4, pc}
   11298:	0001385c 	.word	0x0001385c
   1129c:	000111b9 	.word	0x000111b9

000112a0 <__sfp>:
   112a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   112a2:	4b1d      	ldr	r3, [pc, #116]	; (11318 <__sfp+0x78>)
   112a4:	1c06      	adds	r6, r0, #0
   112a6:	681d      	ldr	r5, [r3, #0]
   112a8:	69ab      	ldr	r3, [r5, #24]
   112aa:	2b00      	cmp	r3, #0
   112ac:	d102      	bne.n	112b4 <__sfp+0x14>
   112ae:	1c28      	adds	r0, r5, #0
   112b0:	f7ff ffc4 	bl	1123c <__sinit>
   112b4:	3548      	adds	r5, #72	; 0x48
   112b6:	68ac      	ldr	r4, [r5, #8]
   112b8:	686b      	ldr	r3, [r5, #4]
   112ba:	3b01      	subs	r3, #1
   112bc:	d405      	bmi.n	112ca <__sfp+0x2a>
   112be:	220c      	movs	r2, #12
   112c0:	5ea7      	ldrsh	r7, [r4, r2]
   112c2:	2f00      	cmp	r7, #0
   112c4:	d010      	beq.n	112e8 <__sfp+0x48>
   112c6:	3468      	adds	r4, #104	; 0x68
   112c8:	e7f7      	b.n	112ba <__sfp+0x1a>
   112ca:	682b      	ldr	r3, [r5, #0]
   112cc:	2b00      	cmp	r3, #0
   112ce:	d106      	bne.n	112de <__sfp+0x3e>
   112d0:	1c30      	adds	r0, r6, #0
   112d2:	2104      	movs	r1, #4
   112d4:	f7ff ff9c 	bl	11210 <__sfmoreglue>
   112d8:	6028      	str	r0, [r5, #0]
   112da:	2800      	cmp	r0, #0
   112dc:	d001      	beq.n	112e2 <__sfp+0x42>
   112de:	682d      	ldr	r5, [r5, #0]
   112e0:	e7e9      	b.n	112b6 <__sfp+0x16>
   112e2:	230c      	movs	r3, #12
   112e4:	6033      	str	r3, [r6, #0]
   112e6:	e016      	b.n	11316 <__sfp+0x76>
   112e8:	2301      	movs	r3, #1
   112ea:	1c20      	adds	r0, r4, #0
   112ec:	425b      	negs	r3, r3
   112ee:	81e3      	strh	r3, [r4, #14]
   112f0:	3302      	adds	r3, #2
   112f2:	81a3      	strh	r3, [r4, #12]
   112f4:	6667      	str	r7, [r4, #100]	; 0x64
   112f6:	6027      	str	r7, [r4, #0]
   112f8:	60a7      	str	r7, [r4, #8]
   112fa:	6067      	str	r7, [r4, #4]
   112fc:	6127      	str	r7, [r4, #16]
   112fe:	6167      	str	r7, [r4, #20]
   11300:	61a7      	str	r7, [r4, #24]
   11302:	305c      	adds	r0, #92	; 0x5c
   11304:	1c39      	adds	r1, r7, #0
   11306:	2208      	movs	r2, #8
   11308:	f7ff fc2e 	bl	10b68 <memset>
   1130c:	1c20      	adds	r0, r4, #0
   1130e:	6367      	str	r7, [r4, #52]	; 0x34
   11310:	63a7      	str	r7, [r4, #56]	; 0x38
   11312:	64a7      	str	r7, [r4, #72]	; 0x48
   11314:	64e7      	str	r7, [r4, #76]	; 0x4c
   11316:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   11318:	0001385c 	.word	0x0001385c

0001131c <_fwalk_reent>:
   1131c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1131e:	1c04      	adds	r4, r0, #0
   11320:	1c07      	adds	r7, r0, #0
   11322:	2600      	movs	r6, #0
   11324:	9101      	str	r1, [sp, #4]
   11326:	3448      	adds	r4, #72	; 0x48
   11328:	2c00      	cmp	r4, #0
   1132a:	d016      	beq.n	1135a <_fwalk_reent+0x3e>
   1132c:	6863      	ldr	r3, [r4, #4]
   1132e:	68a5      	ldr	r5, [r4, #8]
   11330:	9300      	str	r3, [sp, #0]
   11332:	9b00      	ldr	r3, [sp, #0]
   11334:	3b01      	subs	r3, #1
   11336:	9300      	str	r3, [sp, #0]
   11338:	d40d      	bmi.n	11356 <_fwalk_reent+0x3a>
   1133a:	89ab      	ldrh	r3, [r5, #12]
   1133c:	2b01      	cmp	r3, #1
   1133e:	d908      	bls.n	11352 <_fwalk_reent+0x36>
   11340:	220e      	movs	r2, #14
   11342:	5eab      	ldrsh	r3, [r5, r2]
   11344:	3301      	adds	r3, #1
   11346:	d004      	beq.n	11352 <_fwalk_reent+0x36>
   11348:	1c38      	adds	r0, r7, #0
   1134a:	1c29      	adds	r1, r5, #0
   1134c:	9b01      	ldr	r3, [sp, #4]
   1134e:	4798      	blx	r3
   11350:	4306      	orrs	r6, r0
   11352:	3568      	adds	r5, #104	; 0x68
   11354:	e7ed      	b.n	11332 <_fwalk_reent+0x16>
   11356:	6824      	ldr	r4, [r4, #0]
   11358:	e7e6      	b.n	11328 <_fwalk_reent+0xc>
   1135a:	1c30      	adds	r0, r6, #0
   1135c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
	...

00011360 <__smakebuf_r>:
   11360:	b5f0      	push	{r4, r5, r6, r7, lr}
   11362:	898b      	ldrh	r3, [r1, #12]
   11364:	b091      	sub	sp, #68	; 0x44
   11366:	079b      	lsls	r3, r3, #30
   11368:	d506      	bpl.n	11378 <__smakebuf_r+0x18>
   1136a:	1c0b      	adds	r3, r1, #0
   1136c:	3347      	adds	r3, #71	; 0x47
   1136e:	600b      	str	r3, [r1, #0]
   11370:	610b      	str	r3, [r1, #16]
   11372:	2301      	movs	r3, #1
   11374:	614b      	str	r3, [r1, #20]
   11376:	e045      	b.n	11404 <__smakebuf_r+0xa4>
   11378:	1c0c      	adds	r4, r1, #0
   1137a:	230e      	movs	r3, #14
   1137c:	5ec9      	ldrsh	r1, [r1, r3]
   1137e:	1c06      	adds	r6, r0, #0
   11380:	2900      	cmp	r1, #0
   11382:	da04      	bge.n	1138e <__smakebuf_r+0x2e>
   11384:	2380      	movs	r3, #128	; 0x80
   11386:	89a5      	ldrh	r5, [r4, #12]
   11388:	401d      	ands	r5, r3
   1138a:	d110      	bne.n	113ae <__smakebuf_r+0x4e>
   1138c:	e00c      	b.n	113a8 <__smakebuf_r+0x48>
   1138e:	aa01      	add	r2, sp, #4
   11390:	f000 fdba 	bl	11f08 <_fstat_r>
   11394:	2800      	cmp	r0, #0
   11396:	dbf5      	blt.n	11384 <__smakebuf_r+0x24>
   11398:	23f0      	movs	r3, #240	; 0xf0
   1139a:	9d02      	ldr	r5, [sp, #8]
   1139c:	021b      	lsls	r3, r3, #8
   1139e:	401d      	ands	r5, r3
   113a0:	4b19      	ldr	r3, [pc, #100]	; (11408 <__smakebuf_r+0xa8>)
   113a2:	18ed      	adds	r5, r5, r3
   113a4:	426b      	negs	r3, r5
   113a6:	415d      	adcs	r5, r3
   113a8:	2780      	movs	r7, #128	; 0x80
   113aa:	00ff      	lsls	r7, r7, #3
   113ac:	e001      	b.n	113b2 <__smakebuf_r+0x52>
   113ae:	2500      	movs	r5, #0
   113b0:	2740      	movs	r7, #64	; 0x40
   113b2:	1c30      	adds	r0, r6, #0
   113b4:	1c39      	adds	r1, r7, #0
   113b6:	f000 f87b 	bl	114b0 <_malloc_r>
   113ba:	2800      	cmp	r0, #0
   113bc:	d10c      	bne.n	113d8 <__smakebuf_r+0x78>
   113be:	89a3      	ldrh	r3, [r4, #12]
   113c0:	059a      	lsls	r2, r3, #22
   113c2:	d41f      	bmi.n	11404 <__smakebuf_r+0xa4>
   113c4:	2202      	movs	r2, #2
   113c6:	4313      	orrs	r3, r2
   113c8:	81a3      	strh	r3, [r4, #12]
   113ca:	1c23      	adds	r3, r4, #0
   113cc:	3347      	adds	r3, #71	; 0x47
   113ce:	6023      	str	r3, [r4, #0]
   113d0:	6123      	str	r3, [r4, #16]
   113d2:	2301      	movs	r3, #1
   113d4:	6163      	str	r3, [r4, #20]
   113d6:	e015      	b.n	11404 <__smakebuf_r+0xa4>
   113d8:	2280      	movs	r2, #128	; 0x80
   113da:	4b0c      	ldr	r3, [pc, #48]	; (1140c <__smakebuf_r+0xac>)
   113dc:	62b3      	str	r3, [r6, #40]	; 0x28
   113de:	89a3      	ldrh	r3, [r4, #12]
   113e0:	6020      	str	r0, [r4, #0]
   113e2:	4313      	orrs	r3, r2
   113e4:	81a3      	strh	r3, [r4, #12]
   113e6:	6120      	str	r0, [r4, #16]
   113e8:	6167      	str	r7, [r4, #20]
   113ea:	2d00      	cmp	r5, #0
   113ec:	d00a      	beq.n	11404 <__smakebuf_r+0xa4>
   113ee:	230e      	movs	r3, #14
   113f0:	5ee1      	ldrsh	r1, [r4, r3]
   113f2:	1c30      	adds	r0, r6, #0
   113f4:	f000 fd9a 	bl	11f2c <_isatty_r>
   113f8:	2800      	cmp	r0, #0
   113fa:	d003      	beq.n	11404 <__smakebuf_r+0xa4>
   113fc:	2201      	movs	r2, #1
   113fe:	89a3      	ldrh	r3, [r4, #12]
   11400:	4313      	orrs	r3, r2
   11402:	81a3      	strh	r3, [r4, #12]
   11404:	b011      	add	sp, #68	; 0x44
   11406:	bdf0      	pop	{r4, r5, r6, r7, pc}
   11408:	ffffe000 	.word	0xffffe000
   1140c:	000111b9 	.word	0x000111b9

00011410 <malloc>:
   11410:	b508      	push	{r3, lr}
   11412:	4b03      	ldr	r3, [pc, #12]	; (11420 <malloc+0x10>)
   11414:	1c01      	adds	r1, r0, #0
   11416:	6818      	ldr	r0, [r3, #0]
   11418:	f000 f84a 	bl	114b0 <_malloc_r>
   1141c:	bd08      	pop	{r3, pc}
   1141e:	46c0      	nop			; (mov r8, r8)
   11420:	20000234 	.word	0x20000234

00011424 <_free_r>:
   11424:	b530      	push	{r4, r5, lr}
   11426:	2900      	cmp	r1, #0
   11428:	d03e      	beq.n	114a8 <_free_r+0x84>
   1142a:	3904      	subs	r1, #4
   1142c:	680b      	ldr	r3, [r1, #0]
   1142e:	2b00      	cmp	r3, #0
   11430:	da00      	bge.n	11434 <_free_r+0x10>
   11432:	18c9      	adds	r1, r1, r3
   11434:	4a1d      	ldr	r2, [pc, #116]	; (114ac <_free_r+0x88>)
   11436:	6813      	ldr	r3, [r2, #0]
   11438:	1c14      	adds	r4, r2, #0
   1143a:	2b00      	cmp	r3, #0
   1143c:	d102      	bne.n	11444 <_free_r+0x20>
   1143e:	604b      	str	r3, [r1, #4]
   11440:	6011      	str	r1, [r2, #0]
   11442:	e031      	b.n	114a8 <_free_r+0x84>
   11444:	4299      	cmp	r1, r3
   11446:	d20d      	bcs.n	11464 <_free_r+0x40>
   11448:	6808      	ldr	r0, [r1, #0]
   1144a:	180a      	adds	r2, r1, r0
   1144c:	429a      	cmp	r2, r3
   1144e:	d103      	bne.n	11458 <_free_r+0x34>
   11450:	6813      	ldr	r3, [r2, #0]
   11452:	18c3      	adds	r3, r0, r3
   11454:	600b      	str	r3, [r1, #0]
   11456:	6853      	ldr	r3, [r2, #4]
   11458:	604b      	str	r3, [r1, #4]
   1145a:	6021      	str	r1, [r4, #0]
   1145c:	e024      	b.n	114a8 <_free_r+0x84>
   1145e:	428a      	cmp	r2, r1
   11460:	d803      	bhi.n	1146a <_free_r+0x46>
   11462:	1c13      	adds	r3, r2, #0
   11464:	685a      	ldr	r2, [r3, #4]
   11466:	2a00      	cmp	r2, #0
   11468:	d1f9      	bne.n	1145e <_free_r+0x3a>
   1146a:	681d      	ldr	r5, [r3, #0]
   1146c:	195c      	adds	r4, r3, r5
   1146e:	428c      	cmp	r4, r1
   11470:	d10b      	bne.n	1148a <_free_r+0x66>
   11472:	6809      	ldr	r1, [r1, #0]
   11474:	1869      	adds	r1, r5, r1
   11476:	1858      	adds	r0, r3, r1
   11478:	6019      	str	r1, [r3, #0]
   1147a:	4290      	cmp	r0, r2
   1147c:	d114      	bne.n	114a8 <_free_r+0x84>
   1147e:	6810      	ldr	r0, [r2, #0]
   11480:	6852      	ldr	r2, [r2, #4]
   11482:	1809      	adds	r1, r1, r0
   11484:	6019      	str	r1, [r3, #0]
   11486:	605a      	str	r2, [r3, #4]
   11488:	e00e      	b.n	114a8 <_free_r+0x84>
   1148a:	428c      	cmp	r4, r1
   1148c:	d902      	bls.n	11494 <_free_r+0x70>
   1148e:	230c      	movs	r3, #12
   11490:	6003      	str	r3, [r0, #0]
   11492:	e009      	b.n	114a8 <_free_r+0x84>
   11494:	6808      	ldr	r0, [r1, #0]
   11496:	180c      	adds	r4, r1, r0
   11498:	4294      	cmp	r4, r2
   1149a:	d103      	bne.n	114a4 <_free_r+0x80>
   1149c:	6814      	ldr	r4, [r2, #0]
   1149e:	6852      	ldr	r2, [r2, #4]
   114a0:	1900      	adds	r0, r0, r4
   114a2:	6008      	str	r0, [r1, #0]
   114a4:	604a      	str	r2, [r1, #4]
   114a6:	6059      	str	r1, [r3, #4]
   114a8:	bd30      	pop	{r4, r5, pc}
   114aa:	46c0      	nop			; (mov r8, r8)
   114ac:	20002a84 	.word	0x20002a84

000114b0 <_malloc_r>:
   114b0:	2303      	movs	r3, #3
   114b2:	b570      	push	{r4, r5, r6, lr}
   114b4:	1ccc      	adds	r4, r1, #3
   114b6:	439c      	bics	r4, r3
   114b8:	3408      	adds	r4, #8
   114ba:	1c05      	adds	r5, r0, #0
   114bc:	2c0c      	cmp	r4, #12
   114be:	d201      	bcs.n	114c4 <_malloc_r+0x14>
   114c0:	240c      	movs	r4, #12
   114c2:	e005      	b.n	114d0 <_malloc_r+0x20>
   114c4:	2c00      	cmp	r4, #0
   114c6:	da03      	bge.n	114d0 <_malloc_r+0x20>
   114c8:	230c      	movs	r3, #12
   114ca:	2000      	movs	r0, #0
   114cc:	602b      	str	r3, [r5, #0]
   114ce:	e042      	b.n	11556 <_malloc_r+0xa6>
   114d0:	428c      	cmp	r4, r1
   114d2:	d3f9      	bcc.n	114c8 <_malloc_r+0x18>
   114d4:	4a20      	ldr	r2, [pc, #128]	; (11558 <_malloc_r+0xa8>)
   114d6:	6813      	ldr	r3, [r2, #0]
   114d8:	1c10      	adds	r0, r2, #0
   114da:	1c19      	adds	r1, r3, #0
   114dc:	2900      	cmp	r1, #0
   114de:	d013      	beq.n	11508 <_malloc_r+0x58>
   114e0:	680a      	ldr	r2, [r1, #0]
   114e2:	1b12      	subs	r2, r2, r4
   114e4:	d40d      	bmi.n	11502 <_malloc_r+0x52>
   114e6:	2a0b      	cmp	r2, #11
   114e8:	d902      	bls.n	114f0 <_malloc_r+0x40>
   114ea:	600a      	str	r2, [r1, #0]
   114ec:	188b      	adds	r3, r1, r2
   114ee:	e01f      	b.n	11530 <_malloc_r+0x80>
   114f0:	428b      	cmp	r3, r1
   114f2:	d102      	bne.n	114fa <_malloc_r+0x4a>
   114f4:	685a      	ldr	r2, [r3, #4]
   114f6:	6002      	str	r2, [r0, #0]
   114f8:	e01b      	b.n	11532 <_malloc_r+0x82>
   114fa:	684a      	ldr	r2, [r1, #4]
   114fc:	605a      	str	r2, [r3, #4]
   114fe:	1c0b      	adds	r3, r1, #0
   11500:	e017      	b.n	11532 <_malloc_r+0x82>
   11502:	1c0b      	adds	r3, r1, #0
   11504:	6849      	ldr	r1, [r1, #4]
   11506:	e7e9      	b.n	114dc <_malloc_r+0x2c>
   11508:	4e14      	ldr	r6, [pc, #80]	; (1155c <_malloc_r+0xac>)
   1150a:	6833      	ldr	r3, [r6, #0]
   1150c:	2b00      	cmp	r3, #0
   1150e:	d103      	bne.n	11518 <_malloc_r+0x68>
   11510:	1c28      	adds	r0, r5, #0
   11512:	f000 fc75 	bl	11e00 <_sbrk_r>
   11516:	6030      	str	r0, [r6, #0]
   11518:	1c28      	adds	r0, r5, #0
   1151a:	1c21      	adds	r1, r4, #0
   1151c:	f000 fc70 	bl	11e00 <_sbrk_r>
   11520:	1c03      	adds	r3, r0, #0
   11522:	1c42      	adds	r2, r0, #1
   11524:	d0d0      	beq.n	114c8 <_malloc_r+0x18>
   11526:	2203      	movs	r2, #3
   11528:	1cc6      	adds	r6, r0, #3
   1152a:	4396      	bics	r6, r2
   1152c:	4286      	cmp	r6, r0
   1152e:	d10a      	bne.n	11546 <_malloc_r+0x96>
   11530:	601c      	str	r4, [r3, #0]
   11532:	1c18      	adds	r0, r3, #0
   11534:	2107      	movs	r1, #7
   11536:	300b      	adds	r0, #11
   11538:	1d1a      	adds	r2, r3, #4
   1153a:	4388      	bics	r0, r1
   1153c:	1a82      	subs	r2, r0, r2
   1153e:	d00a      	beq.n	11556 <_malloc_r+0xa6>
   11540:	4251      	negs	r1, r2
   11542:	5099      	str	r1, [r3, r2]
   11544:	e007      	b.n	11556 <_malloc_r+0xa6>
   11546:	1a31      	subs	r1, r6, r0
   11548:	1c28      	adds	r0, r5, #0
   1154a:	f000 fc59 	bl	11e00 <_sbrk_r>
   1154e:	1c43      	adds	r3, r0, #1
   11550:	d0ba      	beq.n	114c8 <_malloc_r+0x18>
   11552:	1c33      	adds	r3, r6, #0
   11554:	e7ec      	b.n	11530 <_malloc_r+0x80>
   11556:	bd70      	pop	{r4, r5, r6, pc}
   11558:	20002a84 	.word	0x20002a84
   1155c:	20002a80 	.word	0x20002a80

00011560 <__ssputs_r>:
   11560:	b5f0      	push	{r4, r5, r6, r7, lr}
   11562:	688e      	ldr	r6, [r1, #8]
   11564:	b085      	sub	sp, #20
   11566:	1c07      	adds	r7, r0, #0
   11568:	1c0c      	adds	r4, r1, #0
   1156a:	9203      	str	r2, [sp, #12]
   1156c:	9301      	str	r3, [sp, #4]
   1156e:	42b3      	cmp	r3, r6
   11570:	d345      	bcc.n	115fe <__ssputs_r+0x9e>
   11572:	2390      	movs	r3, #144	; 0x90
   11574:	898a      	ldrh	r2, [r1, #12]
   11576:	00db      	lsls	r3, r3, #3
   11578:	421a      	tst	r2, r3
   1157a:	d03d      	beq.n	115f8 <__ssputs_r+0x98>
   1157c:	2503      	movs	r5, #3
   1157e:	6909      	ldr	r1, [r1, #16]
   11580:	6823      	ldr	r3, [r4, #0]
   11582:	9801      	ldr	r0, [sp, #4]
   11584:	1a5b      	subs	r3, r3, r1
   11586:	9302      	str	r3, [sp, #8]
   11588:	6963      	ldr	r3, [r4, #20]
   1158a:	435d      	muls	r5, r3
   1158c:	0feb      	lsrs	r3, r5, #31
   1158e:	195d      	adds	r5, r3, r5
   11590:	9b02      	ldr	r3, [sp, #8]
   11592:	106d      	asrs	r5, r5, #1
   11594:	3301      	adds	r3, #1
   11596:	181b      	adds	r3, r3, r0
   11598:	429d      	cmp	r5, r3
   1159a:	d200      	bcs.n	1159e <__ssputs_r+0x3e>
   1159c:	1c1d      	adds	r5, r3, #0
   1159e:	1c38      	adds	r0, r7, #0
   115a0:	0553      	lsls	r3, r2, #21
   115a2:	d50f      	bpl.n	115c4 <__ssputs_r+0x64>
   115a4:	1c29      	adds	r1, r5, #0
   115a6:	f7ff ff83 	bl	114b0 <_malloc_r>
   115aa:	1e06      	subs	r6, r0, #0
   115ac:	d013      	beq.n	115d6 <__ssputs_r+0x76>
   115ae:	9a02      	ldr	r2, [sp, #8]
   115b0:	6921      	ldr	r1, [r4, #16]
   115b2:	f7ff fabc 	bl	10b2e <memcpy>
   115b6:	89a2      	ldrh	r2, [r4, #12]
   115b8:	4b18      	ldr	r3, [pc, #96]	; (1161c <__ssputs_r+0xbc>)
   115ba:	4013      	ands	r3, r2
   115bc:	2280      	movs	r2, #128	; 0x80
   115be:	4313      	orrs	r3, r2
   115c0:	81a3      	strh	r3, [r4, #12]
   115c2:	e011      	b.n	115e8 <__ssputs_r+0x88>
   115c4:	1c2a      	adds	r2, r5, #0
   115c6:	f000 fce2 	bl	11f8e <_realloc_r>
   115ca:	1e06      	subs	r6, r0, #0
   115cc:	d10c      	bne.n	115e8 <__ssputs_r+0x88>
   115ce:	1c38      	adds	r0, r7, #0
   115d0:	6921      	ldr	r1, [r4, #16]
   115d2:	f7ff ff27 	bl	11424 <_free_r>
   115d6:	230c      	movs	r3, #12
   115d8:	2240      	movs	r2, #64	; 0x40
   115da:	2001      	movs	r0, #1
   115dc:	603b      	str	r3, [r7, #0]
   115de:	89a3      	ldrh	r3, [r4, #12]
   115e0:	4240      	negs	r0, r0
   115e2:	4313      	orrs	r3, r2
   115e4:	81a3      	strh	r3, [r4, #12]
   115e6:	e017      	b.n	11618 <__ssputs_r+0xb8>
   115e8:	9b02      	ldr	r3, [sp, #8]
   115ea:	6126      	str	r6, [r4, #16]
   115ec:	18f6      	adds	r6, r6, r3
   115ee:	6026      	str	r6, [r4, #0]
   115f0:	6165      	str	r5, [r4, #20]
   115f2:	9e01      	ldr	r6, [sp, #4]
   115f4:	1aed      	subs	r5, r5, r3
   115f6:	60a5      	str	r5, [r4, #8]
   115f8:	9b01      	ldr	r3, [sp, #4]
   115fa:	42b3      	cmp	r3, r6
   115fc:	d200      	bcs.n	11600 <__ssputs_r+0xa0>
   115fe:	9e01      	ldr	r6, [sp, #4]
   11600:	1c32      	adds	r2, r6, #0
   11602:	6820      	ldr	r0, [r4, #0]
   11604:	9903      	ldr	r1, [sp, #12]
   11606:	f7ff fa9b 	bl	10b40 <memmove>
   1160a:	2000      	movs	r0, #0
   1160c:	68a3      	ldr	r3, [r4, #8]
   1160e:	1b9b      	subs	r3, r3, r6
   11610:	60a3      	str	r3, [r4, #8]
   11612:	6823      	ldr	r3, [r4, #0]
   11614:	199e      	adds	r6, r3, r6
   11616:	6026      	str	r6, [r4, #0]
   11618:	b005      	add	sp, #20
   1161a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1161c:	fffffb7f 	.word	0xfffffb7f

00011620 <_svfiprintf_r>:
   11620:	b5f0      	push	{r4, r5, r6, r7, lr}
   11622:	b09f      	sub	sp, #124	; 0x7c
   11624:	9002      	str	r0, [sp, #8]
   11626:	9305      	str	r3, [sp, #20]
   11628:	898b      	ldrh	r3, [r1, #12]
   1162a:	1c0e      	adds	r6, r1, #0
   1162c:	1c17      	adds	r7, r2, #0
   1162e:	061b      	lsls	r3, r3, #24
   11630:	d510      	bpl.n	11654 <_svfiprintf_r+0x34>
   11632:	690b      	ldr	r3, [r1, #16]
   11634:	2b00      	cmp	r3, #0
   11636:	d10d      	bne.n	11654 <_svfiprintf_r+0x34>
   11638:	2140      	movs	r1, #64	; 0x40
   1163a:	f7ff ff39 	bl	114b0 <_malloc_r>
   1163e:	6030      	str	r0, [r6, #0]
   11640:	6130      	str	r0, [r6, #16]
   11642:	2800      	cmp	r0, #0
   11644:	d104      	bne.n	11650 <_svfiprintf_r+0x30>
   11646:	230c      	movs	r3, #12
   11648:	9a02      	ldr	r2, [sp, #8]
   1164a:	3801      	subs	r0, #1
   1164c:	6013      	str	r3, [r2, #0]
   1164e:	e0d0      	b.n	117f2 <_svfiprintf_r+0x1d2>
   11650:	2340      	movs	r3, #64	; 0x40
   11652:	6173      	str	r3, [r6, #20]
   11654:	2300      	movs	r3, #0
   11656:	ad06      	add	r5, sp, #24
   11658:	616b      	str	r3, [r5, #20]
   1165a:	3320      	adds	r3, #32
   1165c:	766b      	strb	r3, [r5, #25]
   1165e:	3310      	adds	r3, #16
   11660:	76ab      	strb	r3, [r5, #26]
   11662:	1c3c      	adds	r4, r7, #0
   11664:	7823      	ldrb	r3, [r4, #0]
   11666:	2b00      	cmp	r3, #0
   11668:	d103      	bne.n	11672 <_svfiprintf_r+0x52>
   1166a:	1be3      	subs	r3, r4, r7
   1166c:	9304      	str	r3, [sp, #16]
   1166e:	d012      	beq.n	11696 <_svfiprintf_r+0x76>
   11670:	e003      	b.n	1167a <_svfiprintf_r+0x5a>
   11672:	2b25      	cmp	r3, #37	; 0x25
   11674:	d0f9      	beq.n	1166a <_svfiprintf_r+0x4a>
   11676:	3401      	adds	r4, #1
   11678:	e7f4      	b.n	11664 <_svfiprintf_r+0x44>
   1167a:	9b04      	ldr	r3, [sp, #16]
   1167c:	9802      	ldr	r0, [sp, #8]
   1167e:	1c31      	adds	r1, r6, #0
   11680:	1c3a      	adds	r2, r7, #0
   11682:	f7ff ff6d 	bl	11560 <__ssputs_r>
   11686:	1c43      	adds	r3, r0, #1
   11688:	d100      	bne.n	1168c <_svfiprintf_r+0x6c>
   1168a:	e0ac      	b.n	117e6 <_svfiprintf_r+0x1c6>
   1168c:	696a      	ldr	r2, [r5, #20]
   1168e:	9b04      	ldr	r3, [sp, #16]
   11690:	4694      	mov	ip, r2
   11692:	4463      	add	r3, ip
   11694:	616b      	str	r3, [r5, #20]
   11696:	7823      	ldrb	r3, [r4, #0]
   11698:	2b00      	cmp	r3, #0
   1169a:	d100      	bne.n	1169e <_svfiprintf_r+0x7e>
   1169c:	e0a3      	b.n	117e6 <_svfiprintf_r+0x1c6>
   1169e:	2201      	movs	r2, #1
   116a0:	2300      	movs	r3, #0
   116a2:	4252      	negs	r2, r2
   116a4:	606a      	str	r2, [r5, #4]
   116a6:	a902      	add	r1, sp, #8
   116a8:	3254      	adds	r2, #84	; 0x54
   116aa:	1852      	adds	r2, r2, r1
   116ac:	3401      	adds	r4, #1
   116ae:	602b      	str	r3, [r5, #0]
   116b0:	60eb      	str	r3, [r5, #12]
   116b2:	60ab      	str	r3, [r5, #8]
   116b4:	7013      	strb	r3, [r2, #0]
   116b6:	65ab      	str	r3, [r5, #88]	; 0x58
   116b8:	4f4f      	ldr	r7, [pc, #316]	; (117f8 <_svfiprintf_r+0x1d8>)
   116ba:	7821      	ldrb	r1, [r4, #0]
   116bc:	1c38      	adds	r0, r7, #0
   116be:	2205      	movs	r2, #5
   116c0:	f000 fc5a 	bl	11f78 <memchr>
   116c4:	2800      	cmp	r0, #0
   116c6:	d008      	beq.n	116da <_svfiprintf_r+0xba>
   116c8:	1bc0      	subs	r0, r0, r7
   116ca:	2701      	movs	r7, #1
   116cc:	4087      	lsls	r7, r0
   116ce:	1c38      	adds	r0, r7, #0
   116d0:	682b      	ldr	r3, [r5, #0]
   116d2:	3401      	adds	r4, #1
   116d4:	4318      	orrs	r0, r3
   116d6:	6028      	str	r0, [r5, #0]
   116d8:	e7ee      	b.n	116b8 <_svfiprintf_r+0x98>
   116da:	682b      	ldr	r3, [r5, #0]
   116dc:	06da      	lsls	r2, r3, #27
   116de:	d504      	bpl.n	116ea <_svfiprintf_r+0xca>
   116e0:	2253      	movs	r2, #83	; 0x53
   116e2:	2120      	movs	r1, #32
   116e4:	a802      	add	r0, sp, #8
   116e6:	1812      	adds	r2, r2, r0
   116e8:	7011      	strb	r1, [r2, #0]
   116ea:	071a      	lsls	r2, r3, #28
   116ec:	d504      	bpl.n	116f8 <_svfiprintf_r+0xd8>
   116ee:	2253      	movs	r2, #83	; 0x53
   116f0:	212b      	movs	r1, #43	; 0x2b
   116f2:	a802      	add	r0, sp, #8
   116f4:	1812      	adds	r2, r2, r0
   116f6:	7011      	strb	r1, [r2, #0]
   116f8:	7822      	ldrb	r2, [r4, #0]
   116fa:	2a2a      	cmp	r2, #42	; 0x2a
   116fc:	d001      	beq.n	11702 <_svfiprintf_r+0xe2>
   116fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
   11700:	e00e      	b.n	11720 <_svfiprintf_r+0x100>
   11702:	9a05      	ldr	r2, [sp, #20]
   11704:	1d11      	adds	r1, r2, #4
   11706:	6812      	ldr	r2, [r2, #0]
   11708:	9105      	str	r1, [sp, #20]
   1170a:	2a00      	cmp	r2, #0
   1170c:	db01      	blt.n	11712 <_svfiprintf_r+0xf2>
   1170e:	9209      	str	r2, [sp, #36]	; 0x24
   11710:	e004      	b.n	1171c <_svfiprintf_r+0xfc>
   11712:	4252      	negs	r2, r2
   11714:	60ea      	str	r2, [r5, #12]
   11716:	2202      	movs	r2, #2
   11718:	4313      	orrs	r3, r2
   1171a:	602b      	str	r3, [r5, #0]
   1171c:	3401      	adds	r4, #1
   1171e:	e009      	b.n	11734 <_svfiprintf_r+0x114>
   11720:	7822      	ldrb	r2, [r4, #0]
   11722:	3a30      	subs	r2, #48	; 0x30
   11724:	2a09      	cmp	r2, #9
   11726:	d804      	bhi.n	11732 <_svfiprintf_r+0x112>
   11728:	210a      	movs	r1, #10
   1172a:	434b      	muls	r3, r1
   1172c:	3401      	adds	r4, #1
   1172e:	189b      	adds	r3, r3, r2
   11730:	e7f6      	b.n	11720 <_svfiprintf_r+0x100>
   11732:	9309      	str	r3, [sp, #36]	; 0x24
   11734:	7823      	ldrb	r3, [r4, #0]
   11736:	2b2e      	cmp	r3, #46	; 0x2e
   11738:	d118      	bne.n	1176c <_svfiprintf_r+0x14c>
   1173a:	7863      	ldrb	r3, [r4, #1]
   1173c:	2b2a      	cmp	r3, #42	; 0x2a
   1173e:	d109      	bne.n	11754 <_svfiprintf_r+0x134>
   11740:	9b05      	ldr	r3, [sp, #20]
   11742:	3402      	adds	r4, #2
   11744:	1d1a      	adds	r2, r3, #4
   11746:	681b      	ldr	r3, [r3, #0]
   11748:	9205      	str	r2, [sp, #20]
   1174a:	2b00      	cmp	r3, #0
   1174c:	da0d      	bge.n	1176a <_svfiprintf_r+0x14a>
   1174e:	2301      	movs	r3, #1
   11750:	425b      	negs	r3, r3
   11752:	e00a      	b.n	1176a <_svfiprintf_r+0x14a>
   11754:	2300      	movs	r3, #0
   11756:	3401      	adds	r4, #1
   11758:	7822      	ldrb	r2, [r4, #0]
   1175a:	3a30      	subs	r2, #48	; 0x30
   1175c:	2a09      	cmp	r2, #9
   1175e:	d804      	bhi.n	1176a <_svfiprintf_r+0x14a>
   11760:	210a      	movs	r1, #10
   11762:	434b      	muls	r3, r1
   11764:	3401      	adds	r4, #1
   11766:	189b      	adds	r3, r3, r2
   11768:	e7f6      	b.n	11758 <_svfiprintf_r+0x138>
   1176a:	9307      	str	r3, [sp, #28]
   1176c:	4f23      	ldr	r7, [pc, #140]	; (117fc <_svfiprintf_r+0x1dc>)
   1176e:	7821      	ldrb	r1, [r4, #0]
   11770:	1c38      	adds	r0, r7, #0
   11772:	2203      	movs	r2, #3
   11774:	f000 fc00 	bl	11f78 <memchr>
   11778:	2800      	cmp	r0, #0
   1177a:	d007      	beq.n	1178c <_svfiprintf_r+0x16c>
   1177c:	1bc0      	subs	r0, r0, r7
   1177e:	2740      	movs	r7, #64	; 0x40
   11780:	4087      	lsls	r7, r0
   11782:	1c38      	adds	r0, r7, #0
   11784:	682b      	ldr	r3, [r5, #0]
   11786:	3401      	adds	r4, #1
   11788:	4318      	orrs	r0, r3
   1178a:	6028      	str	r0, [r5, #0]
   1178c:	7821      	ldrb	r1, [r4, #0]
   1178e:	481c      	ldr	r0, [pc, #112]	; (11800 <_svfiprintf_r+0x1e0>)
   11790:	2206      	movs	r2, #6
   11792:	1c67      	adds	r7, r4, #1
   11794:	7629      	strb	r1, [r5, #24]
   11796:	f000 fbef 	bl	11f78 <memchr>
   1179a:	2800      	cmp	r0, #0
   1179c:	d012      	beq.n	117c4 <_svfiprintf_r+0x1a4>
   1179e:	4b19      	ldr	r3, [pc, #100]	; (11804 <_svfiprintf_r+0x1e4>)
   117a0:	2b00      	cmp	r3, #0
   117a2:	d106      	bne.n	117b2 <_svfiprintf_r+0x192>
   117a4:	2207      	movs	r2, #7
   117a6:	9b05      	ldr	r3, [sp, #20]
   117a8:	3307      	adds	r3, #7
   117aa:	4393      	bics	r3, r2
   117ac:	3308      	adds	r3, #8
   117ae:	9305      	str	r3, [sp, #20]
   117b0:	e014      	b.n	117dc <_svfiprintf_r+0x1bc>
   117b2:	ab05      	add	r3, sp, #20
   117b4:	9300      	str	r3, [sp, #0]
   117b6:	9802      	ldr	r0, [sp, #8]
   117b8:	1c29      	adds	r1, r5, #0
   117ba:	1c32      	adds	r2, r6, #0
   117bc:	4b12      	ldr	r3, [pc, #72]	; (11808 <_svfiprintf_r+0x1e8>)
   117be:	e000      	b.n	117c2 <_svfiprintf_r+0x1a2>
   117c0:	bf00      	nop
   117c2:	e007      	b.n	117d4 <_svfiprintf_r+0x1b4>
   117c4:	ab05      	add	r3, sp, #20
   117c6:	9300      	str	r3, [sp, #0]
   117c8:	9802      	ldr	r0, [sp, #8]
   117ca:	1c29      	adds	r1, r5, #0
   117cc:	1c32      	adds	r2, r6, #0
   117ce:	4b0e      	ldr	r3, [pc, #56]	; (11808 <_svfiprintf_r+0x1e8>)
   117d0:	f000 f9c2 	bl	11b58 <_printf_i>
   117d4:	9003      	str	r0, [sp, #12]
   117d6:	9b03      	ldr	r3, [sp, #12]
   117d8:	3301      	adds	r3, #1
   117da:	d004      	beq.n	117e6 <_svfiprintf_r+0x1c6>
   117dc:	696b      	ldr	r3, [r5, #20]
   117de:	9a03      	ldr	r2, [sp, #12]
   117e0:	189b      	adds	r3, r3, r2
   117e2:	616b      	str	r3, [r5, #20]
   117e4:	e73d      	b.n	11662 <_svfiprintf_r+0x42>
   117e6:	89b3      	ldrh	r3, [r6, #12]
   117e8:	980b      	ldr	r0, [sp, #44]	; 0x2c
   117ea:	065b      	lsls	r3, r3, #25
   117ec:	d501      	bpl.n	117f2 <_svfiprintf_r+0x1d2>
   117ee:	2001      	movs	r0, #1
   117f0:	4240      	negs	r0, r0
   117f2:	b01f      	add	sp, #124	; 0x7c
   117f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
   117f6:	46c0      	nop			; (mov r8, r8)
   117f8:	000138c0 	.word	0x000138c0
   117fc:	000138c6 	.word	0x000138c6
   11800:	000138ca 	.word	0x000138ca
   11804:	00000000 	.word	0x00000000
   11808:	00011561 	.word	0x00011561

0001180c <__sfputc_r>:
   1180c:	6893      	ldr	r3, [r2, #8]
   1180e:	b510      	push	{r4, lr}
   11810:	3b01      	subs	r3, #1
   11812:	6093      	str	r3, [r2, #8]
   11814:	2b00      	cmp	r3, #0
   11816:	da05      	bge.n	11824 <__sfputc_r+0x18>
   11818:	6994      	ldr	r4, [r2, #24]
   1181a:	42a3      	cmp	r3, r4
   1181c:	db08      	blt.n	11830 <__sfputc_r+0x24>
   1181e:	b2cb      	uxtb	r3, r1
   11820:	2b0a      	cmp	r3, #10
   11822:	d005      	beq.n	11830 <__sfputc_r+0x24>
   11824:	6813      	ldr	r3, [r2, #0]
   11826:	1c58      	adds	r0, r3, #1
   11828:	6010      	str	r0, [r2, #0]
   1182a:	7019      	strb	r1, [r3, #0]
   1182c:	b2c8      	uxtb	r0, r1
   1182e:	e001      	b.n	11834 <__sfputc_r+0x28>
   11830:	f7ff fb40 	bl	10eb4 <__swbuf_r>
   11834:	bd10      	pop	{r4, pc}

00011836 <__sfputs_r>:
   11836:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   11838:	1c06      	adds	r6, r0, #0
   1183a:	1c0f      	adds	r7, r1, #0
   1183c:	1c14      	adds	r4, r2, #0
   1183e:	18d5      	adds	r5, r2, r3
   11840:	42ac      	cmp	r4, r5
   11842:	d008      	beq.n	11856 <__sfputs_r+0x20>
   11844:	7821      	ldrb	r1, [r4, #0]
   11846:	1c30      	adds	r0, r6, #0
   11848:	1c3a      	adds	r2, r7, #0
   1184a:	f7ff ffdf 	bl	1180c <__sfputc_r>
   1184e:	3401      	adds	r4, #1
   11850:	1c43      	adds	r3, r0, #1
   11852:	d1f5      	bne.n	11840 <__sfputs_r+0xa>
   11854:	e000      	b.n	11858 <__sfputs_r+0x22>
   11856:	2000      	movs	r0, #0
   11858:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0001185c <_vfiprintf_r>:
   1185c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1185e:	b09f      	sub	sp, #124	; 0x7c
   11860:	1c06      	adds	r6, r0, #0
   11862:	1c0f      	adds	r7, r1, #0
   11864:	9202      	str	r2, [sp, #8]
   11866:	9305      	str	r3, [sp, #20]
   11868:	2800      	cmp	r0, #0
   1186a:	d004      	beq.n	11876 <_vfiprintf_r+0x1a>
   1186c:	6983      	ldr	r3, [r0, #24]
   1186e:	2b00      	cmp	r3, #0
   11870:	d101      	bne.n	11876 <_vfiprintf_r+0x1a>
   11872:	f7ff fce3 	bl	1123c <__sinit>
   11876:	4b79      	ldr	r3, [pc, #484]	; (11a5c <_vfiprintf_r+0x200>)
   11878:	429f      	cmp	r7, r3
   1187a:	d101      	bne.n	11880 <_vfiprintf_r+0x24>
   1187c:	6877      	ldr	r7, [r6, #4]
   1187e:	e008      	b.n	11892 <_vfiprintf_r+0x36>
   11880:	4b77      	ldr	r3, [pc, #476]	; (11a60 <_vfiprintf_r+0x204>)
   11882:	429f      	cmp	r7, r3
   11884:	d101      	bne.n	1188a <_vfiprintf_r+0x2e>
   11886:	68b7      	ldr	r7, [r6, #8]
   11888:	e003      	b.n	11892 <_vfiprintf_r+0x36>
   1188a:	4b76      	ldr	r3, [pc, #472]	; (11a64 <_vfiprintf_r+0x208>)
   1188c:	429f      	cmp	r7, r3
   1188e:	d100      	bne.n	11892 <_vfiprintf_r+0x36>
   11890:	68f7      	ldr	r7, [r6, #12]
   11892:	89bb      	ldrh	r3, [r7, #12]
   11894:	071b      	lsls	r3, r3, #28
   11896:	d50a      	bpl.n	118ae <_vfiprintf_r+0x52>
   11898:	693b      	ldr	r3, [r7, #16]
   1189a:	2b00      	cmp	r3, #0
   1189c:	d007      	beq.n	118ae <_vfiprintf_r+0x52>
   1189e:	2300      	movs	r3, #0
   118a0:	ad06      	add	r5, sp, #24
   118a2:	616b      	str	r3, [r5, #20]
   118a4:	3320      	adds	r3, #32
   118a6:	766b      	strb	r3, [r5, #25]
   118a8:	3310      	adds	r3, #16
   118aa:	76ab      	strb	r3, [r5, #26]
   118ac:	e03d      	b.n	1192a <_vfiprintf_r+0xce>
   118ae:	1c30      	adds	r0, r6, #0
   118b0:	1c39      	adds	r1, r7, #0
   118b2:	f7ff fb57 	bl	10f64 <__swsetup_r>
   118b6:	2800      	cmp	r0, #0
   118b8:	d0f1      	beq.n	1189e <_vfiprintf_r+0x42>
   118ba:	2001      	movs	r0, #1
   118bc:	4240      	negs	r0, r0
   118be:	e0ca      	b.n	11a56 <_vfiprintf_r+0x1fa>
   118c0:	9a05      	ldr	r2, [sp, #20]
   118c2:	1d11      	adds	r1, r2, #4
   118c4:	6812      	ldr	r2, [r2, #0]
   118c6:	9105      	str	r1, [sp, #20]
   118c8:	2a00      	cmp	r2, #0
   118ca:	db7e      	blt.n	119ca <_vfiprintf_r+0x16e>
   118cc:	9209      	str	r2, [sp, #36]	; 0x24
   118ce:	3401      	adds	r4, #1
   118d0:	7823      	ldrb	r3, [r4, #0]
   118d2:	2b2e      	cmp	r3, #46	; 0x2e
   118d4:	d100      	bne.n	118d8 <_vfiprintf_r+0x7c>
   118d6:	e089      	b.n	119ec <_vfiprintf_r+0x190>
   118d8:	7821      	ldrb	r1, [r4, #0]
   118da:	4863      	ldr	r0, [pc, #396]	; (11a68 <_vfiprintf_r+0x20c>)
   118dc:	2203      	movs	r2, #3
   118de:	f000 fb4b 	bl	11f78 <memchr>
   118e2:	2800      	cmp	r0, #0
   118e4:	d008      	beq.n	118f8 <_vfiprintf_r+0x9c>
   118e6:	4b60      	ldr	r3, [pc, #384]	; (11a68 <_vfiprintf_r+0x20c>)
   118e8:	3401      	adds	r4, #1
   118ea:	1ac0      	subs	r0, r0, r3
   118ec:	2340      	movs	r3, #64	; 0x40
   118ee:	4083      	lsls	r3, r0
   118f0:	1c18      	adds	r0, r3, #0
   118f2:	682b      	ldr	r3, [r5, #0]
   118f4:	4318      	orrs	r0, r3
   118f6:	6028      	str	r0, [r5, #0]
   118f8:	7821      	ldrb	r1, [r4, #0]
   118fa:	1c63      	adds	r3, r4, #1
   118fc:	485b      	ldr	r0, [pc, #364]	; (11a6c <_vfiprintf_r+0x210>)
   118fe:	2206      	movs	r2, #6
   11900:	9302      	str	r3, [sp, #8]
   11902:	7629      	strb	r1, [r5, #24]
   11904:	f000 fb38 	bl	11f78 <memchr>
   11908:	2800      	cmp	r0, #0
   1190a:	d100      	bne.n	1190e <_vfiprintf_r+0xb2>
   1190c:	e091      	b.n	11a32 <_vfiprintf_r+0x1d6>
   1190e:	4b58      	ldr	r3, [pc, #352]	; (11a70 <_vfiprintf_r+0x214>)
   11910:	2b00      	cmp	r3, #0
   11912:	d000      	beq.n	11916 <_vfiprintf_r+0xba>
   11914:	e084      	b.n	11a20 <_vfiprintf_r+0x1c4>
   11916:	2207      	movs	r2, #7
   11918:	9b05      	ldr	r3, [sp, #20]
   1191a:	3307      	adds	r3, #7
   1191c:	4393      	bics	r3, r2
   1191e:	3308      	adds	r3, #8
   11920:	9305      	str	r3, [sp, #20]
   11922:	696b      	ldr	r3, [r5, #20]
   11924:	9a03      	ldr	r2, [sp, #12]
   11926:	189b      	adds	r3, r3, r2
   11928:	616b      	str	r3, [r5, #20]
   1192a:	9c02      	ldr	r4, [sp, #8]
   1192c:	7823      	ldrb	r3, [r4, #0]
   1192e:	2b00      	cmp	r3, #0
   11930:	d104      	bne.n	1193c <_vfiprintf_r+0xe0>
   11932:	9b02      	ldr	r3, [sp, #8]
   11934:	1ae3      	subs	r3, r4, r3
   11936:	9304      	str	r3, [sp, #16]
   11938:	d011      	beq.n	1195e <_vfiprintf_r+0x102>
   1193a:	e003      	b.n	11944 <_vfiprintf_r+0xe8>
   1193c:	2b25      	cmp	r3, #37	; 0x25
   1193e:	d0f8      	beq.n	11932 <_vfiprintf_r+0xd6>
   11940:	3401      	adds	r4, #1
   11942:	e7f3      	b.n	1192c <_vfiprintf_r+0xd0>
   11944:	9b04      	ldr	r3, [sp, #16]
   11946:	1c30      	adds	r0, r6, #0
   11948:	1c39      	adds	r1, r7, #0
   1194a:	9a02      	ldr	r2, [sp, #8]
   1194c:	f7ff ff73 	bl	11836 <__sfputs_r>
   11950:	1c43      	adds	r3, r0, #1
   11952:	d07b      	beq.n	11a4c <_vfiprintf_r+0x1f0>
   11954:	696a      	ldr	r2, [r5, #20]
   11956:	9b04      	ldr	r3, [sp, #16]
   11958:	4694      	mov	ip, r2
   1195a:	4463      	add	r3, ip
   1195c:	616b      	str	r3, [r5, #20]
   1195e:	7823      	ldrb	r3, [r4, #0]
   11960:	2b00      	cmp	r3, #0
   11962:	d073      	beq.n	11a4c <_vfiprintf_r+0x1f0>
   11964:	2201      	movs	r2, #1
   11966:	2300      	movs	r3, #0
   11968:	4252      	negs	r2, r2
   1196a:	606a      	str	r2, [r5, #4]
   1196c:	a902      	add	r1, sp, #8
   1196e:	3254      	adds	r2, #84	; 0x54
   11970:	1852      	adds	r2, r2, r1
   11972:	3401      	adds	r4, #1
   11974:	602b      	str	r3, [r5, #0]
   11976:	60eb      	str	r3, [r5, #12]
   11978:	60ab      	str	r3, [r5, #8]
   1197a:	7013      	strb	r3, [r2, #0]
   1197c:	65ab      	str	r3, [r5, #88]	; 0x58
   1197e:	7821      	ldrb	r1, [r4, #0]
   11980:	483c      	ldr	r0, [pc, #240]	; (11a74 <_vfiprintf_r+0x218>)
   11982:	2205      	movs	r2, #5
   11984:	f000 faf8 	bl	11f78 <memchr>
   11988:	2800      	cmp	r0, #0
   1198a:	d009      	beq.n	119a0 <_vfiprintf_r+0x144>
   1198c:	4b39      	ldr	r3, [pc, #228]	; (11a74 <_vfiprintf_r+0x218>)
   1198e:	3401      	adds	r4, #1
   11990:	1ac0      	subs	r0, r0, r3
   11992:	2301      	movs	r3, #1
   11994:	4083      	lsls	r3, r0
   11996:	1c18      	adds	r0, r3, #0
   11998:	682b      	ldr	r3, [r5, #0]
   1199a:	4318      	orrs	r0, r3
   1199c:	6028      	str	r0, [r5, #0]
   1199e:	e7ee      	b.n	1197e <_vfiprintf_r+0x122>
   119a0:	682b      	ldr	r3, [r5, #0]
   119a2:	06da      	lsls	r2, r3, #27
   119a4:	d504      	bpl.n	119b0 <_vfiprintf_r+0x154>
   119a6:	2253      	movs	r2, #83	; 0x53
   119a8:	2120      	movs	r1, #32
   119aa:	a802      	add	r0, sp, #8
   119ac:	1812      	adds	r2, r2, r0
   119ae:	7011      	strb	r1, [r2, #0]
   119b0:	071a      	lsls	r2, r3, #28
   119b2:	d504      	bpl.n	119be <_vfiprintf_r+0x162>
   119b4:	2253      	movs	r2, #83	; 0x53
   119b6:	212b      	movs	r1, #43	; 0x2b
   119b8:	a802      	add	r0, sp, #8
   119ba:	1812      	adds	r2, r2, r0
   119bc:	7011      	strb	r1, [r2, #0]
   119be:	7822      	ldrb	r2, [r4, #0]
   119c0:	2a2a      	cmp	r2, #42	; 0x2a
   119c2:	d100      	bne.n	119c6 <_vfiprintf_r+0x16a>
   119c4:	e77c      	b.n	118c0 <_vfiprintf_r+0x64>
   119c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
   119c8:	e005      	b.n	119d6 <_vfiprintf_r+0x17a>
   119ca:	4252      	negs	r2, r2
   119cc:	60ea      	str	r2, [r5, #12]
   119ce:	2202      	movs	r2, #2
   119d0:	4313      	orrs	r3, r2
   119d2:	602b      	str	r3, [r5, #0]
   119d4:	e77b      	b.n	118ce <_vfiprintf_r+0x72>
   119d6:	7822      	ldrb	r2, [r4, #0]
   119d8:	3a30      	subs	r2, #48	; 0x30
   119da:	2a09      	cmp	r2, #9
   119dc:	d804      	bhi.n	119e8 <_vfiprintf_r+0x18c>
   119de:	210a      	movs	r1, #10
   119e0:	434b      	muls	r3, r1
   119e2:	3401      	adds	r4, #1
   119e4:	189b      	adds	r3, r3, r2
   119e6:	e7f6      	b.n	119d6 <_vfiprintf_r+0x17a>
   119e8:	9309      	str	r3, [sp, #36]	; 0x24
   119ea:	e771      	b.n	118d0 <_vfiprintf_r+0x74>
   119ec:	7863      	ldrb	r3, [r4, #1]
   119ee:	2b2a      	cmp	r3, #42	; 0x2a
   119f0:	d109      	bne.n	11a06 <_vfiprintf_r+0x1aa>
   119f2:	9b05      	ldr	r3, [sp, #20]
   119f4:	3402      	adds	r4, #2
   119f6:	1d1a      	adds	r2, r3, #4
   119f8:	681b      	ldr	r3, [r3, #0]
   119fa:	9205      	str	r2, [sp, #20]
   119fc:	2b00      	cmp	r3, #0
   119fe:	da0d      	bge.n	11a1c <_vfiprintf_r+0x1c0>
   11a00:	2301      	movs	r3, #1
   11a02:	425b      	negs	r3, r3
   11a04:	e00a      	b.n	11a1c <_vfiprintf_r+0x1c0>
   11a06:	2300      	movs	r3, #0
   11a08:	3401      	adds	r4, #1
   11a0a:	7822      	ldrb	r2, [r4, #0]
   11a0c:	3a30      	subs	r2, #48	; 0x30
   11a0e:	2a09      	cmp	r2, #9
   11a10:	d804      	bhi.n	11a1c <_vfiprintf_r+0x1c0>
   11a12:	210a      	movs	r1, #10
   11a14:	434b      	muls	r3, r1
   11a16:	3401      	adds	r4, #1
   11a18:	189b      	adds	r3, r3, r2
   11a1a:	e7f6      	b.n	11a0a <_vfiprintf_r+0x1ae>
   11a1c:	9307      	str	r3, [sp, #28]
   11a1e:	e75b      	b.n	118d8 <_vfiprintf_r+0x7c>
   11a20:	ab05      	add	r3, sp, #20
   11a22:	9300      	str	r3, [sp, #0]
   11a24:	1c30      	adds	r0, r6, #0
   11a26:	1c29      	adds	r1, r5, #0
   11a28:	1c3a      	adds	r2, r7, #0
   11a2a:	4b13      	ldr	r3, [pc, #76]	; (11a78 <_vfiprintf_r+0x21c>)
   11a2c:	e000      	b.n	11a30 <_vfiprintf_r+0x1d4>
   11a2e:	bf00      	nop
   11a30:	e007      	b.n	11a42 <_vfiprintf_r+0x1e6>
   11a32:	ab05      	add	r3, sp, #20
   11a34:	9300      	str	r3, [sp, #0]
   11a36:	1c30      	adds	r0, r6, #0
   11a38:	1c29      	adds	r1, r5, #0
   11a3a:	1c3a      	adds	r2, r7, #0
   11a3c:	4b0e      	ldr	r3, [pc, #56]	; (11a78 <_vfiprintf_r+0x21c>)
   11a3e:	f000 f88b 	bl	11b58 <_printf_i>
   11a42:	9003      	str	r0, [sp, #12]
   11a44:	9b03      	ldr	r3, [sp, #12]
   11a46:	3301      	adds	r3, #1
   11a48:	d000      	beq.n	11a4c <_vfiprintf_r+0x1f0>
   11a4a:	e76a      	b.n	11922 <_vfiprintf_r+0xc6>
   11a4c:	89bb      	ldrh	r3, [r7, #12]
   11a4e:	065b      	lsls	r3, r3, #25
   11a50:	d500      	bpl.n	11a54 <_vfiprintf_r+0x1f8>
   11a52:	e732      	b.n	118ba <_vfiprintf_r+0x5e>
   11a54:	980b      	ldr	r0, [sp, #44]	; 0x2c
   11a56:	b01f      	add	sp, #124	; 0x7c
   11a58:	bdf0      	pop	{r4, r5, r6, r7, pc}
   11a5a:	46c0      	nop			; (mov r8, r8)
   11a5c:	00013860 	.word	0x00013860
   11a60:	00013880 	.word	0x00013880
   11a64:	000138a0 	.word	0x000138a0
   11a68:	000138c6 	.word	0x000138c6
   11a6c:	000138ca 	.word	0x000138ca
   11a70:	00000000 	.word	0x00000000
   11a74:	000138c0 	.word	0x000138c0
   11a78:	00011837 	.word	0x00011837

00011a7c <_printf_common>:
   11a7c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   11a7e:	1c17      	adds	r7, r2, #0
   11a80:	9301      	str	r3, [sp, #4]
   11a82:	690a      	ldr	r2, [r1, #16]
   11a84:	688b      	ldr	r3, [r1, #8]
   11a86:	9000      	str	r0, [sp, #0]
   11a88:	1c0c      	adds	r4, r1, #0
   11a8a:	4293      	cmp	r3, r2
   11a8c:	da00      	bge.n	11a90 <_printf_common+0x14>
   11a8e:	1c13      	adds	r3, r2, #0
   11a90:	1c22      	adds	r2, r4, #0
   11a92:	603b      	str	r3, [r7, #0]
   11a94:	3243      	adds	r2, #67	; 0x43
   11a96:	7812      	ldrb	r2, [r2, #0]
   11a98:	2a00      	cmp	r2, #0
   11a9a:	d001      	beq.n	11aa0 <_printf_common+0x24>
   11a9c:	3301      	adds	r3, #1
   11a9e:	603b      	str	r3, [r7, #0]
   11aa0:	6823      	ldr	r3, [r4, #0]
   11aa2:	069b      	lsls	r3, r3, #26
   11aa4:	d502      	bpl.n	11aac <_printf_common+0x30>
   11aa6:	683b      	ldr	r3, [r7, #0]
   11aa8:	3302      	adds	r3, #2
   11aaa:	603b      	str	r3, [r7, #0]
   11aac:	2506      	movs	r5, #6
   11aae:	6823      	ldr	r3, [r4, #0]
   11ab0:	401d      	ands	r5, r3
   11ab2:	d01e      	beq.n	11af2 <_printf_common+0x76>
   11ab4:	1c23      	adds	r3, r4, #0
   11ab6:	3343      	adds	r3, #67	; 0x43
   11ab8:	781b      	ldrb	r3, [r3, #0]
   11aba:	1e5a      	subs	r2, r3, #1
   11abc:	4193      	sbcs	r3, r2
   11abe:	6822      	ldr	r2, [r4, #0]
   11ac0:	0692      	lsls	r2, r2, #26
   11ac2:	d51c      	bpl.n	11afe <_printf_common+0x82>
   11ac4:	2030      	movs	r0, #48	; 0x30
   11ac6:	18e1      	adds	r1, r4, r3
   11ac8:	3140      	adds	r1, #64	; 0x40
   11aca:	70c8      	strb	r0, [r1, #3]
   11acc:	1c21      	adds	r1, r4, #0
   11ace:	1c5a      	adds	r2, r3, #1
   11ad0:	3145      	adds	r1, #69	; 0x45
   11ad2:	7809      	ldrb	r1, [r1, #0]
   11ad4:	18a2      	adds	r2, r4, r2
   11ad6:	3240      	adds	r2, #64	; 0x40
   11ad8:	3302      	adds	r3, #2
   11ada:	70d1      	strb	r1, [r2, #3]
   11adc:	e00f      	b.n	11afe <_printf_common+0x82>
   11ade:	1c22      	adds	r2, r4, #0
   11ae0:	2301      	movs	r3, #1
   11ae2:	9800      	ldr	r0, [sp, #0]
   11ae4:	9901      	ldr	r1, [sp, #4]
   11ae6:	3219      	adds	r2, #25
   11ae8:	9e08      	ldr	r6, [sp, #32]
   11aea:	47b0      	blx	r6
   11aec:	1c43      	adds	r3, r0, #1
   11aee:	d00e      	beq.n	11b0e <_printf_common+0x92>
   11af0:	3501      	adds	r5, #1
   11af2:	68e3      	ldr	r3, [r4, #12]
   11af4:	683a      	ldr	r2, [r7, #0]
   11af6:	1a9b      	subs	r3, r3, r2
   11af8:	429d      	cmp	r5, r3
   11afa:	dbf0      	blt.n	11ade <_printf_common+0x62>
   11afc:	e7da      	b.n	11ab4 <_printf_common+0x38>
   11afe:	1c22      	adds	r2, r4, #0
   11b00:	9800      	ldr	r0, [sp, #0]
   11b02:	9901      	ldr	r1, [sp, #4]
   11b04:	3243      	adds	r2, #67	; 0x43
   11b06:	9d08      	ldr	r5, [sp, #32]
   11b08:	47a8      	blx	r5
   11b0a:	1c43      	adds	r3, r0, #1
   11b0c:	d102      	bne.n	11b14 <_printf_common+0x98>
   11b0e:	2001      	movs	r0, #1
   11b10:	4240      	negs	r0, r0
   11b12:	e020      	b.n	11b56 <_printf_common+0xda>
   11b14:	2306      	movs	r3, #6
   11b16:	6820      	ldr	r0, [r4, #0]
   11b18:	68e1      	ldr	r1, [r4, #12]
   11b1a:	683a      	ldr	r2, [r7, #0]
   11b1c:	4003      	ands	r3, r0
   11b1e:	2500      	movs	r5, #0
   11b20:	2b04      	cmp	r3, #4
   11b22:	d103      	bne.n	11b2c <_printf_common+0xb0>
   11b24:	1a8d      	subs	r5, r1, r2
   11b26:	43eb      	mvns	r3, r5
   11b28:	17db      	asrs	r3, r3, #31
   11b2a:	401d      	ands	r5, r3
   11b2c:	68a3      	ldr	r3, [r4, #8]
   11b2e:	6922      	ldr	r2, [r4, #16]
   11b30:	4293      	cmp	r3, r2
   11b32:	dd01      	ble.n	11b38 <_printf_common+0xbc>
   11b34:	1a9b      	subs	r3, r3, r2
   11b36:	18ed      	adds	r5, r5, r3
   11b38:	2700      	movs	r7, #0
   11b3a:	42af      	cmp	r7, r5
   11b3c:	da0a      	bge.n	11b54 <_printf_common+0xd8>
   11b3e:	1c22      	adds	r2, r4, #0
   11b40:	2301      	movs	r3, #1
   11b42:	9800      	ldr	r0, [sp, #0]
   11b44:	9901      	ldr	r1, [sp, #4]
   11b46:	321a      	adds	r2, #26
   11b48:	9e08      	ldr	r6, [sp, #32]
   11b4a:	47b0      	blx	r6
   11b4c:	1c43      	adds	r3, r0, #1
   11b4e:	d0de      	beq.n	11b0e <_printf_common+0x92>
   11b50:	3701      	adds	r7, #1
   11b52:	e7f2      	b.n	11b3a <_printf_common+0xbe>
   11b54:	2000      	movs	r0, #0
   11b56:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

00011b58 <_printf_i>:
   11b58:	b5f0      	push	{r4, r5, r6, r7, lr}
   11b5a:	b08b      	sub	sp, #44	; 0x2c
   11b5c:	9206      	str	r2, [sp, #24]
   11b5e:	1c0a      	adds	r2, r1, #0
   11b60:	3243      	adds	r2, #67	; 0x43
   11b62:	9307      	str	r3, [sp, #28]
   11b64:	9005      	str	r0, [sp, #20]
   11b66:	9204      	str	r2, [sp, #16]
   11b68:	7e0a      	ldrb	r2, [r1, #24]
   11b6a:	1c0c      	adds	r4, r1, #0
   11b6c:	9b10      	ldr	r3, [sp, #64]	; 0x40
   11b6e:	2a6e      	cmp	r2, #110	; 0x6e
   11b70:	d100      	bne.n	11b74 <_printf_i+0x1c>
   11b72:	e0a8      	b.n	11cc6 <_printf_i+0x16e>
   11b74:	d811      	bhi.n	11b9a <_printf_i+0x42>
   11b76:	2a63      	cmp	r2, #99	; 0x63
   11b78:	d022      	beq.n	11bc0 <_printf_i+0x68>
   11b7a:	d809      	bhi.n	11b90 <_printf_i+0x38>
   11b7c:	2a00      	cmp	r2, #0
   11b7e:	d100      	bne.n	11b82 <_printf_i+0x2a>
   11b80:	e0b2      	b.n	11ce8 <_printf_i+0x190>
   11b82:	2a58      	cmp	r2, #88	; 0x58
   11b84:	d000      	beq.n	11b88 <_printf_i+0x30>
   11b86:	e0c2      	b.n	11d0e <_printf_i+0x1b6>
   11b88:	3145      	adds	r1, #69	; 0x45
   11b8a:	700a      	strb	r2, [r1, #0]
   11b8c:	4a7c      	ldr	r2, [pc, #496]	; (11d80 <_printf_i+0x228>)
   11b8e:	e04f      	b.n	11c30 <_printf_i+0xd8>
   11b90:	2a64      	cmp	r2, #100	; 0x64
   11b92:	d01d      	beq.n	11bd0 <_printf_i+0x78>
   11b94:	2a69      	cmp	r2, #105	; 0x69
   11b96:	d01b      	beq.n	11bd0 <_printf_i+0x78>
   11b98:	e0b9      	b.n	11d0e <_printf_i+0x1b6>
   11b9a:	2a73      	cmp	r2, #115	; 0x73
   11b9c:	d100      	bne.n	11ba0 <_printf_i+0x48>
   11b9e:	e0a7      	b.n	11cf0 <_printf_i+0x198>
   11ba0:	d809      	bhi.n	11bb6 <_printf_i+0x5e>
   11ba2:	2a6f      	cmp	r2, #111	; 0x6f
   11ba4:	d029      	beq.n	11bfa <_printf_i+0xa2>
   11ba6:	2a70      	cmp	r2, #112	; 0x70
   11ba8:	d000      	beq.n	11bac <_printf_i+0x54>
   11baa:	e0b0      	b.n	11d0e <_printf_i+0x1b6>
   11bac:	2220      	movs	r2, #32
   11bae:	6809      	ldr	r1, [r1, #0]
   11bb0:	430a      	orrs	r2, r1
   11bb2:	6022      	str	r2, [r4, #0]
   11bb4:	e037      	b.n	11c26 <_printf_i+0xce>
   11bb6:	2a75      	cmp	r2, #117	; 0x75
   11bb8:	d01f      	beq.n	11bfa <_printf_i+0xa2>
   11bba:	2a78      	cmp	r2, #120	; 0x78
   11bbc:	d033      	beq.n	11c26 <_printf_i+0xce>
   11bbe:	e0a6      	b.n	11d0e <_printf_i+0x1b6>
   11bc0:	1c0e      	adds	r6, r1, #0
   11bc2:	681a      	ldr	r2, [r3, #0]
   11bc4:	3642      	adds	r6, #66	; 0x42
   11bc6:	1d11      	adds	r1, r2, #4
   11bc8:	6019      	str	r1, [r3, #0]
   11bca:	6813      	ldr	r3, [r2, #0]
   11bcc:	7033      	strb	r3, [r6, #0]
   11bce:	e0a1      	b.n	11d14 <_printf_i+0x1bc>
   11bd0:	6821      	ldr	r1, [r4, #0]
   11bd2:	681a      	ldr	r2, [r3, #0]
   11bd4:	0608      	lsls	r0, r1, #24
   11bd6:	d406      	bmi.n	11be6 <_printf_i+0x8e>
   11bd8:	0649      	lsls	r1, r1, #25
   11bda:	d504      	bpl.n	11be6 <_printf_i+0x8e>
   11bdc:	1d11      	adds	r1, r2, #4
   11bde:	6019      	str	r1, [r3, #0]
   11be0:	2300      	movs	r3, #0
   11be2:	5ed5      	ldrsh	r5, [r2, r3]
   11be4:	e002      	b.n	11bec <_printf_i+0x94>
   11be6:	1d11      	adds	r1, r2, #4
   11be8:	6019      	str	r1, [r3, #0]
   11bea:	6815      	ldr	r5, [r2, #0]
   11bec:	2d00      	cmp	r5, #0
   11bee:	da3b      	bge.n	11c68 <_printf_i+0x110>
   11bf0:	232d      	movs	r3, #45	; 0x2d
   11bf2:	9a04      	ldr	r2, [sp, #16]
   11bf4:	426d      	negs	r5, r5
   11bf6:	7013      	strb	r3, [r2, #0]
   11bf8:	e036      	b.n	11c68 <_printf_i+0x110>
   11bfa:	6821      	ldr	r1, [r4, #0]
   11bfc:	681a      	ldr	r2, [r3, #0]
   11bfe:	0608      	lsls	r0, r1, #24
   11c00:	d406      	bmi.n	11c10 <_printf_i+0xb8>
   11c02:	0649      	lsls	r1, r1, #25
   11c04:	d504      	bpl.n	11c10 <_printf_i+0xb8>
   11c06:	6815      	ldr	r5, [r2, #0]
   11c08:	1d11      	adds	r1, r2, #4
   11c0a:	6019      	str	r1, [r3, #0]
   11c0c:	b2ad      	uxth	r5, r5
   11c0e:	e002      	b.n	11c16 <_printf_i+0xbe>
   11c10:	1d11      	adds	r1, r2, #4
   11c12:	6019      	str	r1, [r3, #0]
   11c14:	6815      	ldr	r5, [r2, #0]
   11c16:	4b5a      	ldr	r3, [pc, #360]	; (11d80 <_printf_i+0x228>)
   11c18:	7e22      	ldrb	r2, [r4, #24]
   11c1a:	9303      	str	r3, [sp, #12]
   11c1c:	270a      	movs	r7, #10
   11c1e:	2a6f      	cmp	r2, #111	; 0x6f
   11c20:	d11d      	bne.n	11c5e <_printf_i+0x106>
   11c22:	2708      	movs	r7, #8
   11c24:	e01b      	b.n	11c5e <_printf_i+0x106>
   11c26:	1c22      	adds	r2, r4, #0
   11c28:	2178      	movs	r1, #120	; 0x78
   11c2a:	3245      	adds	r2, #69	; 0x45
   11c2c:	7011      	strb	r1, [r2, #0]
   11c2e:	4a55      	ldr	r2, [pc, #340]	; (11d84 <_printf_i+0x22c>)
   11c30:	6819      	ldr	r1, [r3, #0]
   11c32:	9203      	str	r2, [sp, #12]
   11c34:	1d08      	adds	r0, r1, #4
   11c36:	6822      	ldr	r2, [r4, #0]
   11c38:	6018      	str	r0, [r3, #0]
   11c3a:	680d      	ldr	r5, [r1, #0]
   11c3c:	0610      	lsls	r0, r2, #24
   11c3e:	d402      	bmi.n	11c46 <_printf_i+0xee>
   11c40:	0650      	lsls	r0, r2, #25
   11c42:	d500      	bpl.n	11c46 <_printf_i+0xee>
   11c44:	b2ad      	uxth	r5, r5
   11c46:	07d3      	lsls	r3, r2, #31
   11c48:	d502      	bpl.n	11c50 <_printf_i+0xf8>
   11c4a:	2320      	movs	r3, #32
   11c4c:	431a      	orrs	r2, r3
   11c4e:	6022      	str	r2, [r4, #0]
   11c50:	2710      	movs	r7, #16
   11c52:	2d00      	cmp	r5, #0
   11c54:	d103      	bne.n	11c5e <_printf_i+0x106>
   11c56:	2320      	movs	r3, #32
   11c58:	6822      	ldr	r2, [r4, #0]
   11c5a:	439a      	bics	r2, r3
   11c5c:	6022      	str	r2, [r4, #0]
   11c5e:	1c23      	adds	r3, r4, #0
   11c60:	2200      	movs	r2, #0
   11c62:	3343      	adds	r3, #67	; 0x43
   11c64:	701a      	strb	r2, [r3, #0]
   11c66:	e002      	b.n	11c6e <_printf_i+0x116>
   11c68:	270a      	movs	r7, #10
   11c6a:	4b45      	ldr	r3, [pc, #276]	; (11d80 <_printf_i+0x228>)
   11c6c:	9303      	str	r3, [sp, #12]
   11c6e:	6863      	ldr	r3, [r4, #4]
   11c70:	60a3      	str	r3, [r4, #8]
   11c72:	2b00      	cmp	r3, #0
   11c74:	db03      	blt.n	11c7e <_printf_i+0x126>
   11c76:	2204      	movs	r2, #4
   11c78:	6821      	ldr	r1, [r4, #0]
   11c7a:	4391      	bics	r1, r2
   11c7c:	6021      	str	r1, [r4, #0]
   11c7e:	2d00      	cmp	r5, #0
   11c80:	d102      	bne.n	11c88 <_printf_i+0x130>
   11c82:	9e04      	ldr	r6, [sp, #16]
   11c84:	2b00      	cmp	r3, #0
   11c86:	d00e      	beq.n	11ca6 <_printf_i+0x14e>
   11c88:	9e04      	ldr	r6, [sp, #16]
   11c8a:	1c28      	adds	r0, r5, #0
   11c8c:	1c39      	adds	r1, r7, #0
   11c8e:	f7fe fdf3 	bl	10878 <__aeabi_uidivmod>
   11c92:	9b03      	ldr	r3, [sp, #12]
   11c94:	3e01      	subs	r6, #1
   11c96:	5c5b      	ldrb	r3, [r3, r1]
   11c98:	1c28      	adds	r0, r5, #0
   11c9a:	7033      	strb	r3, [r6, #0]
   11c9c:	1c39      	adds	r1, r7, #0
   11c9e:	f7fe fd65 	bl	1076c <__aeabi_uidiv>
   11ca2:	1e05      	subs	r5, r0, #0
   11ca4:	d1f1      	bne.n	11c8a <_printf_i+0x132>
   11ca6:	2f08      	cmp	r7, #8
   11ca8:	d109      	bne.n	11cbe <_printf_i+0x166>
   11caa:	6823      	ldr	r3, [r4, #0]
   11cac:	07db      	lsls	r3, r3, #31
   11cae:	d506      	bpl.n	11cbe <_printf_i+0x166>
   11cb0:	6863      	ldr	r3, [r4, #4]
   11cb2:	6922      	ldr	r2, [r4, #16]
   11cb4:	4293      	cmp	r3, r2
   11cb6:	dc02      	bgt.n	11cbe <_printf_i+0x166>
   11cb8:	2330      	movs	r3, #48	; 0x30
   11cba:	3e01      	subs	r6, #1
   11cbc:	7033      	strb	r3, [r6, #0]
   11cbe:	9b04      	ldr	r3, [sp, #16]
   11cc0:	1b9b      	subs	r3, r3, r6
   11cc2:	6123      	str	r3, [r4, #16]
   11cc4:	e02b      	b.n	11d1e <_printf_i+0x1c6>
   11cc6:	6809      	ldr	r1, [r1, #0]
   11cc8:	681a      	ldr	r2, [r3, #0]
   11cca:	0608      	lsls	r0, r1, #24
   11ccc:	d407      	bmi.n	11cde <_printf_i+0x186>
   11cce:	0649      	lsls	r1, r1, #25
   11cd0:	d505      	bpl.n	11cde <_printf_i+0x186>
   11cd2:	1d11      	adds	r1, r2, #4
   11cd4:	6019      	str	r1, [r3, #0]
   11cd6:	6813      	ldr	r3, [r2, #0]
   11cd8:	8aa2      	ldrh	r2, [r4, #20]
   11cda:	801a      	strh	r2, [r3, #0]
   11cdc:	e004      	b.n	11ce8 <_printf_i+0x190>
   11cde:	1d11      	adds	r1, r2, #4
   11ce0:	6019      	str	r1, [r3, #0]
   11ce2:	6813      	ldr	r3, [r2, #0]
   11ce4:	6962      	ldr	r2, [r4, #20]
   11ce6:	601a      	str	r2, [r3, #0]
   11ce8:	2300      	movs	r3, #0
   11cea:	9e04      	ldr	r6, [sp, #16]
   11cec:	6123      	str	r3, [r4, #16]
   11cee:	e016      	b.n	11d1e <_printf_i+0x1c6>
   11cf0:	681a      	ldr	r2, [r3, #0]
   11cf2:	1d11      	adds	r1, r2, #4
   11cf4:	6019      	str	r1, [r3, #0]
   11cf6:	6816      	ldr	r6, [r2, #0]
   11cf8:	2100      	movs	r1, #0
   11cfa:	1c30      	adds	r0, r6, #0
   11cfc:	6862      	ldr	r2, [r4, #4]
   11cfe:	f000 f93b 	bl	11f78 <memchr>
   11d02:	2800      	cmp	r0, #0
   11d04:	d001      	beq.n	11d0a <_printf_i+0x1b2>
   11d06:	1b80      	subs	r0, r0, r6
   11d08:	6060      	str	r0, [r4, #4]
   11d0a:	6863      	ldr	r3, [r4, #4]
   11d0c:	e003      	b.n	11d16 <_printf_i+0x1be>
   11d0e:	1c26      	adds	r6, r4, #0
   11d10:	3642      	adds	r6, #66	; 0x42
   11d12:	7032      	strb	r2, [r6, #0]
   11d14:	2301      	movs	r3, #1
   11d16:	6123      	str	r3, [r4, #16]
   11d18:	2300      	movs	r3, #0
   11d1a:	9a04      	ldr	r2, [sp, #16]
   11d1c:	7013      	strb	r3, [r2, #0]
   11d1e:	9b07      	ldr	r3, [sp, #28]
   11d20:	9805      	ldr	r0, [sp, #20]
   11d22:	9300      	str	r3, [sp, #0]
   11d24:	1c21      	adds	r1, r4, #0
   11d26:	9b06      	ldr	r3, [sp, #24]
   11d28:	aa09      	add	r2, sp, #36	; 0x24
   11d2a:	f7ff fea7 	bl	11a7c <_printf_common>
   11d2e:	1c43      	adds	r3, r0, #1
   11d30:	d102      	bne.n	11d38 <_printf_i+0x1e0>
   11d32:	2001      	movs	r0, #1
   11d34:	4240      	negs	r0, r0
   11d36:	e021      	b.n	11d7c <_printf_i+0x224>
   11d38:	6923      	ldr	r3, [r4, #16]
   11d3a:	9805      	ldr	r0, [sp, #20]
   11d3c:	9906      	ldr	r1, [sp, #24]
   11d3e:	1c32      	adds	r2, r6, #0
   11d40:	9d07      	ldr	r5, [sp, #28]
   11d42:	47a8      	blx	r5
   11d44:	1c43      	adds	r3, r0, #1
   11d46:	d0f4      	beq.n	11d32 <_printf_i+0x1da>
   11d48:	6823      	ldr	r3, [r4, #0]
   11d4a:	079b      	lsls	r3, r3, #30
   11d4c:	d405      	bmi.n	11d5a <_printf_i+0x202>
   11d4e:	9b09      	ldr	r3, [sp, #36]	; 0x24
   11d50:	68e0      	ldr	r0, [r4, #12]
   11d52:	4298      	cmp	r0, r3
   11d54:	da12      	bge.n	11d7c <_printf_i+0x224>
   11d56:	1c18      	adds	r0, r3, #0
   11d58:	e010      	b.n	11d7c <_printf_i+0x224>
   11d5a:	2500      	movs	r5, #0
   11d5c:	68e3      	ldr	r3, [r4, #12]
   11d5e:	9a09      	ldr	r2, [sp, #36]	; 0x24
   11d60:	1a9b      	subs	r3, r3, r2
   11d62:	429d      	cmp	r5, r3
   11d64:	daf3      	bge.n	11d4e <_printf_i+0x1f6>
   11d66:	1c22      	adds	r2, r4, #0
   11d68:	2301      	movs	r3, #1
   11d6a:	9805      	ldr	r0, [sp, #20]
   11d6c:	9906      	ldr	r1, [sp, #24]
   11d6e:	3219      	adds	r2, #25
   11d70:	9e07      	ldr	r6, [sp, #28]
   11d72:	47b0      	blx	r6
   11d74:	1c43      	adds	r3, r0, #1
   11d76:	d0dc      	beq.n	11d32 <_printf_i+0x1da>
   11d78:	3501      	adds	r5, #1
   11d7a:	e7ef      	b.n	11d5c <_printf_i+0x204>
   11d7c:	b00b      	add	sp, #44	; 0x2c
   11d7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   11d80:	000138d1 	.word	0x000138d1
   11d84:	000138e2 	.word	0x000138e2

00011d88 <_putc_r>:
   11d88:	b570      	push	{r4, r5, r6, lr}
   11d8a:	1c05      	adds	r5, r0, #0
   11d8c:	1c0e      	adds	r6, r1, #0
   11d8e:	1c14      	adds	r4, r2, #0
   11d90:	2800      	cmp	r0, #0
   11d92:	d004      	beq.n	11d9e <_putc_r+0x16>
   11d94:	6983      	ldr	r3, [r0, #24]
   11d96:	2b00      	cmp	r3, #0
   11d98:	d101      	bne.n	11d9e <_putc_r+0x16>
   11d9a:	f7ff fa4f 	bl	1123c <__sinit>
   11d9e:	4b15      	ldr	r3, [pc, #84]	; (11df4 <_putc_r+0x6c>)
   11da0:	429c      	cmp	r4, r3
   11da2:	d101      	bne.n	11da8 <_putc_r+0x20>
   11da4:	686c      	ldr	r4, [r5, #4]
   11da6:	e008      	b.n	11dba <_putc_r+0x32>
   11da8:	4b13      	ldr	r3, [pc, #76]	; (11df8 <_putc_r+0x70>)
   11daa:	429c      	cmp	r4, r3
   11dac:	d101      	bne.n	11db2 <_putc_r+0x2a>
   11dae:	68ac      	ldr	r4, [r5, #8]
   11db0:	e003      	b.n	11dba <_putc_r+0x32>
   11db2:	4b12      	ldr	r3, [pc, #72]	; (11dfc <_putc_r+0x74>)
   11db4:	429c      	cmp	r4, r3
   11db6:	d100      	bne.n	11dba <_putc_r+0x32>
   11db8:	68ec      	ldr	r4, [r5, #12]
   11dba:	68a3      	ldr	r3, [r4, #8]
   11dbc:	3b01      	subs	r3, #1
   11dbe:	60a3      	str	r3, [r4, #8]
   11dc0:	2b00      	cmp	r3, #0
   11dc2:	da10      	bge.n	11de6 <_putc_r+0x5e>
   11dc4:	69a2      	ldr	r2, [r4, #24]
   11dc6:	4293      	cmp	r3, r2
   11dc8:	db07      	blt.n	11dda <_putc_r+0x52>
   11dca:	6823      	ldr	r3, [r4, #0]
   11dcc:	701e      	strb	r6, [r3, #0]
   11dce:	6823      	ldr	r3, [r4, #0]
   11dd0:	7819      	ldrb	r1, [r3, #0]
   11dd2:	290a      	cmp	r1, #10
   11dd4:	d10a      	bne.n	11dec <_putc_r+0x64>
   11dd6:	1c28      	adds	r0, r5, #0
   11dd8:	e001      	b.n	11dde <_putc_r+0x56>
   11dda:	1c28      	adds	r0, r5, #0
   11ddc:	1c31      	adds	r1, r6, #0
   11dde:	1c22      	adds	r2, r4, #0
   11de0:	f7ff f868 	bl	10eb4 <__swbuf_r>
   11de4:	e005      	b.n	11df2 <_putc_r+0x6a>
   11de6:	6823      	ldr	r3, [r4, #0]
   11de8:	701e      	strb	r6, [r3, #0]
   11dea:	6823      	ldr	r3, [r4, #0]
   11dec:	1c5a      	adds	r2, r3, #1
   11dee:	6022      	str	r2, [r4, #0]
   11df0:	7818      	ldrb	r0, [r3, #0]
   11df2:	bd70      	pop	{r4, r5, r6, pc}
   11df4:	00013860 	.word	0x00013860
   11df8:	00013880 	.word	0x00013880
   11dfc:	000138a0 	.word	0x000138a0

00011e00 <_sbrk_r>:
   11e00:	b538      	push	{r3, r4, r5, lr}
   11e02:	2300      	movs	r3, #0
   11e04:	4c06      	ldr	r4, [pc, #24]	; (11e20 <_sbrk_r+0x20>)
   11e06:	1c05      	adds	r5, r0, #0
   11e08:	1c08      	adds	r0, r1, #0
   11e0a:	6023      	str	r3, [r4, #0]
   11e0c:	f7f0 fd40 	bl	2890 <_sbrk>
   11e10:	1c43      	adds	r3, r0, #1
   11e12:	d103      	bne.n	11e1c <_sbrk_r+0x1c>
   11e14:	6823      	ldr	r3, [r4, #0]
   11e16:	2b00      	cmp	r3, #0
   11e18:	d000      	beq.n	11e1c <_sbrk_r+0x1c>
   11e1a:	602b      	str	r3, [r5, #0]
   11e1c:	bd38      	pop	{r3, r4, r5, pc}
   11e1e:	46c0      	nop			; (mov r8, r8)
   11e20:	20003540 	.word	0x20003540

00011e24 <__sread>:
   11e24:	b538      	push	{r3, r4, r5, lr}
   11e26:	1c0c      	adds	r4, r1, #0
   11e28:	250e      	movs	r5, #14
   11e2a:	5f49      	ldrsh	r1, [r1, r5]
   11e2c:	f000 f8d6 	bl	11fdc <_read_r>
   11e30:	2800      	cmp	r0, #0
   11e32:	db03      	blt.n	11e3c <__sread+0x18>
   11e34:	6d63      	ldr	r3, [r4, #84]	; 0x54
   11e36:	181b      	adds	r3, r3, r0
   11e38:	6563      	str	r3, [r4, #84]	; 0x54
   11e3a:	e003      	b.n	11e44 <__sread+0x20>
   11e3c:	89a2      	ldrh	r2, [r4, #12]
   11e3e:	4b02      	ldr	r3, [pc, #8]	; (11e48 <__sread+0x24>)
   11e40:	4013      	ands	r3, r2
   11e42:	81a3      	strh	r3, [r4, #12]
   11e44:	bd38      	pop	{r3, r4, r5, pc}
   11e46:	46c0      	nop			; (mov r8, r8)
   11e48:	ffffefff 	.word	0xffffefff

00011e4c <__swrite>:
   11e4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   11e4e:	1c1e      	adds	r6, r3, #0
   11e50:	898b      	ldrh	r3, [r1, #12]
   11e52:	1c05      	adds	r5, r0, #0
   11e54:	1c0c      	adds	r4, r1, #0
   11e56:	1c17      	adds	r7, r2, #0
   11e58:	05db      	lsls	r3, r3, #23
   11e5a:	d505      	bpl.n	11e68 <__swrite+0x1c>
   11e5c:	230e      	movs	r3, #14
   11e5e:	5ec9      	ldrsh	r1, [r1, r3]
   11e60:	2200      	movs	r2, #0
   11e62:	2302      	movs	r3, #2
   11e64:	f000 f874 	bl	11f50 <_lseek_r>
   11e68:	89a2      	ldrh	r2, [r4, #12]
   11e6a:	4b05      	ldr	r3, [pc, #20]	; (11e80 <__swrite+0x34>)
   11e6c:	1c28      	adds	r0, r5, #0
   11e6e:	4013      	ands	r3, r2
   11e70:	81a3      	strh	r3, [r4, #12]
   11e72:	1c3a      	adds	r2, r7, #0
   11e74:	230e      	movs	r3, #14
   11e76:	5ee1      	ldrsh	r1, [r4, r3]
   11e78:	1c33      	adds	r3, r6, #0
   11e7a:	f000 f81f 	bl	11ebc <_write_r>
   11e7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   11e80:	ffffefff 	.word	0xffffefff

00011e84 <__sseek>:
   11e84:	b538      	push	{r3, r4, r5, lr}
   11e86:	1c0c      	adds	r4, r1, #0
   11e88:	250e      	movs	r5, #14
   11e8a:	5f49      	ldrsh	r1, [r1, r5]
   11e8c:	f000 f860 	bl	11f50 <_lseek_r>
   11e90:	89a3      	ldrh	r3, [r4, #12]
   11e92:	1c42      	adds	r2, r0, #1
   11e94:	d103      	bne.n	11e9e <__sseek+0x1a>
   11e96:	4a05      	ldr	r2, [pc, #20]	; (11eac <__sseek+0x28>)
   11e98:	4013      	ands	r3, r2
   11e9a:	81a3      	strh	r3, [r4, #12]
   11e9c:	e004      	b.n	11ea8 <__sseek+0x24>
   11e9e:	2280      	movs	r2, #128	; 0x80
   11ea0:	0152      	lsls	r2, r2, #5
   11ea2:	4313      	orrs	r3, r2
   11ea4:	81a3      	strh	r3, [r4, #12]
   11ea6:	6560      	str	r0, [r4, #84]	; 0x54
   11ea8:	bd38      	pop	{r3, r4, r5, pc}
   11eaa:	46c0      	nop			; (mov r8, r8)
   11eac:	ffffefff 	.word	0xffffefff

00011eb0 <__sclose>:
   11eb0:	b508      	push	{r3, lr}
   11eb2:	230e      	movs	r3, #14
   11eb4:	5ec9      	ldrsh	r1, [r1, r3]
   11eb6:	f000 f815 	bl	11ee4 <_close_r>
   11eba:	bd08      	pop	{r3, pc}

00011ebc <_write_r>:
   11ebc:	b538      	push	{r3, r4, r5, lr}
   11ebe:	1c05      	adds	r5, r0, #0
   11ec0:	2000      	movs	r0, #0
   11ec2:	4c07      	ldr	r4, [pc, #28]	; (11ee0 <_write_r+0x24>)
   11ec4:	6020      	str	r0, [r4, #0]
   11ec6:	1c08      	adds	r0, r1, #0
   11ec8:	1c11      	adds	r1, r2, #0
   11eca:	1c1a      	adds	r2, r3, #0
   11ecc:	f7f0 fcb8 	bl	2840 <_write>
   11ed0:	1c43      	adds	r3, r0, #1
   11ed2:	d103      	bne.n	11edc <_write_r+0x20>
   11ed4:	6823      	ldr	r3, [r4, #0]
   11ed6:	2b00      	cmp	r3, #0
   11ed8:	d000      	beq.n	11edc <_write_r+0x20>
   11eda:	602b      	str	r3, [r5, #0]
   11edc:	bd38      	pop	{r3, r4, r5, pc}
   11ede:	46c0      	nop			; (mov r8, r8)
   11ee0:	20003540 	.word	0x20003540

00011ee4 <_close_r>:
   11ee4:	b538      	push	{r3, r4, r5, lr}
   11ee6:	2300      	movs	r3, #0
   11ee8:	4c06      	ldr	r4, [pc, #24]	; (11f04 <_close_r+0x20>)
   11eea:	1c05      	adds	r5, r0, #0
   11eec:	1c08      	adds	r0, r1, #0
   11eee:	6023      	str	r3, [r4, #0]
   11ef0:	f7f0 fce0 	bl	28b4 <_close>
   11ef4:	1c43      	adds	r3, r0, #1
   11ef6:	d103      	bne.n	11f00 <_close_r+0x1c>
   11ef8:	6823      	ldr	r3, [r4, #0]
   11efa:	2b00      	cmp	r3, #0
   11efc:	d000      	beq.n	11f00 <_close_r+0x1c>
   11efe:	602b      	str	r3, [r5, #0]
   11f00:	bd38      	pop	{r3, r4, r5, pc}
   11f02:	46c0      	nop			; (mov r8, r8)
   11f04:	20003540 	.word	0x20003540

00011f08 <_fstat_r>:
   11f08:	b538      	push	{r3, r4, r5, lr}
   11f0a:	2300      	movs	r3, #0
   11f0c:	4c06      	ldr	r4, [pc, #24]	; (11f28 <_fstat_r+0x20>)
   11f0e:	1c05      	adds	r5, r0, #0
   11f10:	1c08      	adds	r0, r1, #0
   11f12:	1c11      	adds	r1, r2, #0
   11f14:	6023      	str	r3, [r4, #0]
   11f16:	f7f0 fcd1 	bl	28bc <_fstat>
   11f1a:	1c43      	adds	r3, r0, #1
   11f1c:	d103      	bne.n	11f26 <_fstat_r+0x1e>
   11f1e:	6823      	ldr	r3, [r4, #0]
   11f20:	2b00      	cmp	r3, #0
   11f22:	d000      	beq.n	11f26 <_fstat_r+0x1e>
   11f24:	602b      	str	r3, [r5, #0]
   11f26:	bd38      	pop	{r3, r4, r5, pc}
   11f28:	20003540 	.word	0x20003540

00011f2c <_isatty_r>:
   11f2c:	b538      	push	{r3, r4, r5, lr}
   11f2e:	2300      	movs	r3, #0
   11f30:	4c06      	ldr	r4, [pc, #24]	; (11f4c <_isatty_r+0x20>)
   11f32:	1c05      	adds	r5, r0, #0
   11f34:	1c08      	adds	r0, r1, #0
   11f36:	6023      	str	r3, [r4, #0]
   11f38:	f7f0 fcc6 	bl	28c8 <_isatty>
   11f3c:	1c43      	adds	r3, r0, #1
   11f3e:	d103      	bne.n	11f48 <_isatty_r+0x1c>
   11f40:	6823      	ldr	r3, [r4, #0]
   11f42:	2b00      	cmp	r3, #0
   11f44:	d000      	beq.n	11f48 <_isatty_r+0x1c>
   11f46:	602b      	str	r3, [r5, #0]
   11f48:	bd38      	pop	{r3, r4, r5, pc}
   11f4a:	46c0      	nop			; (mov r8, r8)
   11f4c:	20003540 	.word	0x20003540

00011f50 <_lseek_r>:
   11f50:	b538      	push	{r3, r4, r5, lr}
   11f52:	1c05      	adds	r5, r0, #0
   11f54:	2000      	movs	r0, #0
   11f56:	4c07      	ldr	r4, [pc, #28]	; (11f74 <_lseek_r+0x24>)
   11f58:	6020      	str	r0, [r4, #0]
   11f5a:	1c08      	adds	r0, r1, #0
   11f5c:	1c11      	adds	r1, r2, #0
   11f5e:	1c1a      	adds	r2, r3, #0
   11f60:	f7f0 fcb4 	bl	28cc <_lseek>
   11f64:	1c43      	adds	r3, r0, #1
   11f66:	d103      	bne.n	11f70 <_lseek_r+0x20>
   11f68:	6823      	ldr	r3, [r4, #0]
   11f6a:	2b00      	cmp	r3, #0
   11f6c:	d000      	beq.n	11f70 <_lseek_r+0x20>
   11f6e:	602b      	str	r3, [r5, #0]
   11f70:	bd38      	pop	{r3, r4, r5, pc}
   11f72:	46c0      	nop			; (mov r8, r8)
   11f74:	20003540 	.word	0x20003540

00011f78 <memchr>:
   11f78:	b2c9      	uxtb	r1, r1
   11f7a:	1882      	adds	r2, r0, r2
   11f7c:	4290      	cmp	r0, r2
   11f7e:	d004      	beq.n	11f8a <memchr+0x12>
   11f80:	7803      	ldrb	r3, [r0, #0]
   11f82:	428b      	cmp	r3, r1
   11f84:	d002      	beq.n	11f8c <memchr+0x14>
   11f86:	3001      	adds	r0, #1
   11f88:	e7f8      	b.n	11f7c <memchr+0x4>
   11f8a:	2000      	movs	r0, #0
   11f8c:	4770      	bx	lr

00011f8e <_realloc_r>:
   11f8e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   11f90:	1c06      	adds	r6, r0, #0
   11f92:	1c0c      	adds	r4, r1, #0
   11f94:	1c15      	adds	r5, r2, #0
   11f96:	2900      	cmp	r1, #0
   11f98:	d104      	bne.n	11fa4 <_realloc_r+0x16>
   11f9a:	1c11      	adds	r1, r2, #0
   11f9c:	f7ff fa88 	bl	114b0 <_malloc_r>
   11fa0:	1c04      	adds	r4, r0, #0
   11fa2:	e018      	b.n	11fd6 <_realloc_r+0x48>
   11fa4:	2a00      	cmp	r2, #0
   11fa6:	d103      	bne.n	11fb0 <_realloc_r+0x22>
   11fa8:	f7ff fa3c 	bl	11424 <_free_r>
   11fac:	1c2c      	adds	r4, r5, #0
   11fae:	e012      	b.n	11fd6 <_realloc_r+0x48>
   11fb0:	f000 f828 	bl	12004 <_malloc_usable_size_r>
   11fb4:	42a8      	cmp	r0, r5
   11fb6:	d20e      	bcs.n	11fd6 <_realloc_r+0x48>
   11fb8:	1c30      	adds	r0, r6, #0
   11fba:	1c29      	adds	r1, r5, #0
   11fbc:	f7ff fa78 	bl	114b0 <_malloc_r>
   11fc0:	1e07      	subs	r7, r0, #0
   11fc2:	d007      	beq.n	11fd4 <_realloc_r+0x46>
   11fc4:	1c21      	adds	r1, r4, #0
   11fc6:	1c2a      	adds	r2, r5, #0
   11fc8:	f7fe fdb1 	bl	10b2e <memcpy>
   11fcc:	1c30      	adds	r0, r6, #0
   11fce:	1c21      	adds	r1, r4, #0
   11fd0:	f7ff fa28 	bl	11424 <_free_r>
   11fd4:	1c3c      	adds	r4, r7, #0
   11fd6:	1c20      	adds	r0, r4, #0
   11fd8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

00011fdc <_read_r>:
   11fdc:	b538      	push	{r3, r4, r5, lr}
   11fde:	1c05      	adds	r5, r0, #0
   11fe0:	2000      	movs	r0, #0
   11fe2:	4c07      	ldr	r4, [pc, #28]	; (12000 <_read_r+0x24>)
   11fe4:	6020      	str	r0, [r4, #0]
   11fe6:	1c08      	adds	r0, r1, #0
   11fe8:	1c11      	adds	r1, r2, #0
   11fea:	1c1a      	adds	r2, r3, #0
   11fec:	f7f0 fc06 	bl	27fc <_read>
   11ff0:	1c43      	adds	r3, r0, #1
   11ff2:	d103      	bne.n	11ffc <_read_r+0x20>
   11ff4:	6823      	ldr	r3, [r4, #0]
   11ff6:	2b00      	cmp	r3, #0
   11ff8:	d000      	beq.n	11ffc <_read_r+0x20>
   11ffa:	602b      	str	r3, [r5, #0]
   11ffc:	bd38      	pop	{r3, r4, r5, pc}
   11ffe:	46c0      	nop			; (mov r8, r8)
   12000:	20003540 	.word	0x20003540

00012004 <_malloc_usable_size_r>:
   12004:	1f0b      	subs	r3, r1, #4
   12006:	681a      	ldr	r2, [r3, #0]
   12008:	1f10      	subs	r0, r2, #4
   1200a:	2a00      	cmp	r2, #0
   1200c:	da04      	bge.n	12018 <_malloc_usable_size_r+0x14>
   1200e:	1889      	adds	r1, r1, r2
   12010:	3904      	subs	r1, #4
   12012:	680b      	ldr	r3, [r1, #0]
   12014:	18d0      	adds	r0, r2, r3
   12016:	3804      	subs	r0, #4
   12018:	4770      	bx	lr
   1201a:	0000      	movs	r0, r0
   1201c:	42000800 	.word	0x42000800
   12020:	42000c00 	.word	0x42000c00
   12024:	42001000 	.word	0x42001000
   12028:	42001400 	.word	0x42001400
   1202c:	42001800 	.word	0x42001800
   12030:	42001c00 	.word	0x42001c00
   12034:	0c0b0a09 	.word	0x0c0b0a09
   12038:	00000e0d 	.word	0x00000e0d
   1203c:	00001b06 	.word	0x00001b06
   12040:	00001b02 	.word	0x00001b02
   12044:	00001b02 	.word	0x00001b02
   12048:	00001b62 	.word	0x00001b62
   1204c:	00001b62 	.word	0x00001b62
   12050:	00001b1c 	.word	0x00001b1c
   12054:	00001b0c 	.word	0x00001b0c
   12058:	00001b22 	.word	0x00001b22
   1205c:	00001b50 	.word	0x00001b50
   12060:	00001d34 	.word	0x00001d34
   12064:	00001d14 	.word	0x00001d14
   12068:	00001d14 	.word	0x00001d14
   1206c:	00001d94 	.word	0x00001d94
   12070:	00001d26 	.word	0x00001d26
   12074:	00001d42 	.word	0x00001d42
   12078:	00001d18 	.word	0x00001d18
   1207c:	00001d50 	.word	0x00001d50
   12080:	00001d84 	.word	0x00001d84
   12084:	42002c00 	.word	0x42002c00
   12088:	42003000 	.word	0x42003000
   1208c:	42003400 	.word	0x42003400
   12090:	001c1c1b 	.word	0x001c1c1b
   12094:	10000800 	.word	0x10000800
   12098:	00002000 	.word	0x00002000
   1209c:	5454514d 	.word	0x5454514d
   120a0:	45202d20 	.word	0x45202d20
   120a4:	646f636e 	.word	0x646f636e
   120a8:	20676e69 	.word	0x20676e69
   120ac:	676e656c 	.word	0x676e656c
   120b0:	25206874 	.word	0x25206874
   120b4:	0d0a756c 	.word	0x0d0a756c
   120b8:	00000000 	.word	0x00000000
   120bc:	5454514d 	.word	0x5454514d
   120c0:	45202d20 	.word	0x45202d20
   120c4:	646f636e 	.word	0x646f636e
   120c8:	656c2065 	.word	0x656c2065
   120cc:	6964206e 	.word	0x6964206e
   120d0:	20746967 	.word	0x20746967
   120d4:	27752527 	.word	0x27752527
   120d8:	6e656c20 	.word	0x6e656c20
   120dc:	20687467 	.word	0x20687467
   120e0:	756c2527 	.word	0x756c2527
   120e4:	000d0a27 	.word	0x000d0a27
   120e8:	5454514d 	.word	0x5454514d
   120ec:	72202d20 	.word	0x72202d20
   120f0:	69616d65 	.word	0x69616d65
   120f4:	676e696e 	.word	0x676e696e
   120f8:	6e656c5f 	.word	0x6e656c5f
   120fc:	5f687467 	.word	0x5f687467
   12100:	65747962 	.word	0x65747962
   12104:	75252073 	.word	0x75252073
   12108:	00000d0a 	.word	0x00000d0a
   1210c:	5454514d 	.word	0x5454514d
   12110:	47202d20 	.word	0x47202d20
   12114:	5020746f 	.word	0x5020746f
   12118:	494c4255 	.word	0x494c4255
   1211c:	202c4853 	.word	0x202c4853
   12120:	6c6c6163 	.word	0x6c6c6163
   12124:	6f206465 	.word	0x6f206465
   12128:	2065636e 	.word	0x2065636e
   1212c:	20726570 	.word	0x20726570
   12130:	616e616d 	.word	0x616e616d
   12134:	62616567 	.word	0x62616567
   12138:	6320656c 	.word	0x6320656c
   1213c:	6b6e7568 	.word	0x6b6e7568
   12140:	20666f20 	.word	0x20666f20
   12144:	7373656d 	.word	0x7373656d
   12148:	2e656761 	.word	0x2e656761
   1214c:	00000d0a 	.word	0x00000d0a
   12150:	5454514d 	.word	0x5454514d
   12154:	48202d20 	.word	0x48202d20
   12158:	6c646e61 	.word	0x6c646e61
   1215c:	20676e69 	.word	0x20676e69
   12160:	6c627570 	.word	0x6c627570
   12164:	20687369 	.word	0x20687369
   12168:	74206e6f 	.word	0x74206e6f
   1216c:	6369706f 	.word	0x6369706f
   12170:	73252720 	.word	0x73252720
   12174:	000d0a27 	.word	0x000d0a27
   12178:	5454514d 	.word	0x5454514d
   1217c:	54202d20 	.word	0x54202d20
   12180:	20736968 	.word	0x20736968
   12184:	6e756863 	.word	0x6e756863
   12188:	7369206b 	.word	0x7369206b
   1218c:	20692520 	.word	0x20692520
   12190:	65747962 	.word	0x65747962
   12194:	000d0a73 	.word	0x000d0a73
   12198:	5454514d 	.word	0x5454514d
   1219c:	28202d20 	.word	0x28202d20
   121a0:	646e6168 	.word	0x646e6168
   121a4:	705f656c 	.word	0x705f656c
   121a8:	696c6275 	.word	0x696c6275
   121ac:	20296873 	.word	0x20296873
   121b0:	65736572 	.word	0x65736572
   121b4:	6e697474 	.word	0x6e697474
   121b8:	61702067 	.word	0x61702067
   121bc:	74656b63 	.word	0x74656b63
   121c0:	000d0a2e 	.word	0x000d0a2e
   121c4:	5f706374 	.word	0x5f706374
   121c8:	75706e69 	.word	0x75706e69
   121cc:	69772074 	.word	0x69772074
   121d0:	25206874 	.word	0x25206874
   121d4:	79622069 	.word	0x79622069
   121d8:	20736574 	.word	0x20736574
   121dc:	6420666f 	.word	0x6420666f
   121e0:	3a617461 	.word	0x3a617461
   121e4:	00000d0a 	.word	0x00000d0a
   121e8:	5454514d 	.word	0x5454514d
   121ec:	52202d20 	.word	0x52202d20
   121f0:	20646165 	.word	0x20646165
   121f4:	52444856 	.word	0x52444856
   121f8:	30252720 	.word	0x30252720
   121fc:	0a275832 	.word	0x0a275832
   12200:	0000000d 	.word	0x0000000d
   12204:	5454514d 	.word	0x5454514d
   12208:	52202d20 	.word	0x52202d20
   1220c:	20646165 	.word	0x20646165
   12210:	616d6552 	.word	0x616d6552
   12214:	6e696e69 	.word	0x6e696e69
   12218:	654c2067 	.word	0x654c2067
   1221c:	6874676e 	.word	0x6874676e
   12220:	74796220 	.word	0x74796220
   12224:	000d0a65 	.word	0x000d0a65
   12228:	65636552 	.word	0x65636552
   1222c:	64657669 	.word	0x64657669
   12230:	726f6d20 	.word	0x726f6d20
   12234:	68742065 	.word	0x68742065
   12238:	34206e65 	.word	0x34206e65
   1223c:	74796220 	.word	0x74796220
   12240:	72272065 	.word	0x72272065
   12244:	69616d65 	.word	0x69616d65
   12248:	676e696e 	.word	0x676e696e
   1224c:	6e656c20 	.word	0x6e656c20
   12250:	27746867 	.word	0x27746867
   12254:	0000002e 	.word	0x0000002e
   12258:	5454514d 	.word	0x5454514d
   1225c:	46202d20 	.word	0x46202d20
   12260:	73696e69 	.word	0x73696e69
   12264:	20646568 	.word	0x20646568
   12268:	64616572 	.word	0x64616572
   1226c:	20676e69 	.word	0x20676e69
   12270:	616d6572 	.word	0x616d6572
   12274:	6e696e69 	.word	0x6e696e69
   12278:	656c2067 	.word	0x656c2067
   1227c:	6874676e 	.word	0x6874676e
   12280:	74796220 	.word	0x74796220
   12284:	000d0a65 	.word	0x000d0a65
   12288:	5454514d 	.word	0x5454514d
   1228c:	52202d20 	.word	0x52202d20
   12290:	20646165 	.word	0x20646165
   12294:	4c425550 	.word	0x4c425550
   12298:	20485349 	.word	0x20485349
   1229c:	69706f74 	.word	0x69706f74
   122a0:	656c2063 	.word	0x656c2063
   122a4:	6925206e 	.word	0x6925206e
   122a8:	00000d0a 	.word	0x00000d0a
   122ac:	5454514d 	.word	0x5454514d
   122b0:	74202d20 	.word	0x74202d20
   122b4:	6369706f 	.word	0x6369706f
   122b8:	736f705f 	.word	0x736f705f
   122bc:	6925203a 	.word	0x6925203a
   122c0:	706f6320 	.word	0x706f6320
   122c4:	79625f79 	.word	0x79625f79
   122c8:	3a736574 	.word	0x3a736574
   122cc:	00692520 	.word	0x00692520
   122d0:	5454514d 	.word	0x5454514d
   122d4:	47202d20 	.word	0x47202d20
   122d8:	7420746f 	.word	0x7420746f
   122dc:	6369706f 	.word	0x6369706f
   122e0:	73252720 	.word	0x73252720
   122e4:	00000027 	.word	0x00000027
   122e8:	6f43202d 	.word	0x6f43202d
   122ec:	64656970 	.word	0x64656970
   122f0:	756c2520 	.word	0x756c2520
   122f4:	79617020 	.word	0x79617020
   122f8:	64616f6c 	.word	0x64616f6c
   122fc:	74796220 	.word	0x74796220
   12300:	0d0a7365 	.word	0x0d0a7365
   12304:	00000000 	.word	0x00000000
   12308:	5454514d 	.word	0x5454514d
   1230c:	43202d20 	.word	0x43202d20
   12310:	6569706f 	.word	0x6569706f
   12314:	79622064 	.word	0x79622064
   12318:	3a736574 	.word	0x3a736574
   1231c:	000d0a20 	.word	0x000d0a20
   12320:	58323025 	.word	0x58323025
   12324:	00000020 	.word	0x00000020
   12328:	5454514d 	.word	0x5454514d
   1232c:	46202d20 	.word	0x46202d20
   12330:	73696e69 	.word	0x73696e69
   12334:	20646568 	.word	0x20646568
   12338:	64616572 	.word	0x64616572
   1233c:	20676e69 	.word	0x20676e69
   12340:	6b636170 	.word	0x6b636170
   12344:	0a217465 	.word	0x0a217465
   12348:	0000000d 	.word	0x0000000d
   1234c:	5454514d 	.word	0x5454514d
   12350:	74202d20 	.word	0x74202d20
   12354:	6c61746f 	.word	0x6c61746f
   12358:	74616420 	.word	0x74616420
   1235c:	61772061 	.word	0x61772061
   12360:	69252073 	.word	0x69252073
   12364:	74796220 	.word	0x74796220
   12368:	6f207365 	.word	0x6f207365
   1236c:	61642066 	.word	0x61642066
   12370:	202e6174 	.word	0x202e6174
   12374:	00000d0a 	.word	0x00000d0a
   12378:	5454514d 	.word	0x5454514d
   1237c:	47202d20 	.word	0x47202d20
   12380:	4320746f 	.word	0x4320746f
   12384:	414e4e4f 	.word	0x414e4e4f
   12388:	0d0a4b43 	.word	0x0d0a4b43
   1238c:	00000000 	.word	0x00000000
   12390:	5454514d 	.word	0x5454514d
   12394:	47202d20 	.word	0x47202d20
   12398:	5020746f 	.word	0x5020746f
   1239c:	43414255 	.word	0x43414255
   123a0:	000d0a4b 	.word	0x000d0a4b
   123a4:	5454514d 	.word	0x5454514d
   123a8:	47202d20 	.word	0x47202d20
   123ac:	5320746f 	.word	0x5320746f
   123b0:	43414255 	.word	0x43414255
   123b4:	000d0a4b 	.word	0x000d0a4b
   123b8:	5454514d 	.word	0x5454514d
   123bc:	45202d20 	.word	0x45202d20
   123c0:	726f7272 	.word	0x726f7272
   123c4:	5553202c 	.word	0x5553202c
   123c8:	4b434142 	.word	0x4b434142
   123cc:	74697720 	.word	0x74697720
   123d0:	203e2068 	.word	0x203e2068
   123d4:	6f742031 	.word	0x6f742031
   123d8:	2c636970 	.word	0x2c636970
   123dc:	746f6e20 	.word	0x746f6e20
   123e0:	70757320 	.word	0x70757320
   123e4:	74726f70 	.word	0x74726f70
   123e8:	0a2e6465 	.word	0x0a2e6465
   123ec:	0000000d 	.word	0x0000000d
   123f0:	5454514d 	.word	0x5454514d
   123f4:	57202d20 	.word	0x57202d20
   123f8:	696e7261 	.word	0x696e7261
   123fc:	202c676e 	.word	0x202c676e
   12400:	20746f67 	.word	0x20746f67
   12404:	41425553 	.word	0x41425553
   12408:	77204b43 	.word	0x77204b43
   1240c:	20687469 	.word	0x20687469
   12410:	656e6f6e 	.word	0x656e6f6e
   12414:	74616d20 	.word	0x74616d20
   12418:	6e696863 	.word	0x6e696863
   1241c:	494d2067 	.word	0x494d2067
   12420:	43202e44 	.word	0x43202e44
   12424:	65727275 	.word	0x65727275
   12428:	796c746e 	.word	0x796c746e
   1242c:	65687420 	.word	0x65687420
   12430:	69206572 	.word	0x69206572
   12434:	206f6e73 	.word	0x206f6e73
   12438:	70707573 	.word	0x70707573
   1243c:	2074726f 	.word	0x2074726f
   12440:	20726f66 	.word	0x20726f66
   12444:	65766573 	.word	0x65766573
   12448:	206c6172 	.word	0x206c6172
   1244c:	636e6f63 	.word	0x636e6f63
   12450:	65727275 	.word	0x65727275
   12454:	5320746e 	.word	0x5320746e
   12458:	43534255 	.word	0x43534255
   1245c:	45424952 	.word	0x45424952
   12460:	73656d20 	.word	0x73656d20
   12464:	65676173 	.word	0x65676173
   12468:	0d0a2e73 	.word	0x0d0a2e73
   1246c:	00000000 	.word	0x00000000
   12470:	5454514d 	.word	0x5454514d
   12474:	47202d20 	.word	0x47202d20
   12478:	5520746f 	.word	0x5520746f
   1247c:	4255534e 	.word	0x4255534e
   12480:	0a4b4341 	.word	0x0a4b4341
   12484:	0000000d 	.word	0x0000000d
   12488:	5454514d 	.word	0x5454514d
   1248c:	57202d20 	.word	0x57202d20
   12490:	696e7261 	.word	0x696e7261
   12494:	202c676e 	.word	0x202c676e
   12498:	20746f67 	.word	0x20746f67
   1249c:	55534e55 	.word	0x55534e55
   124a0:	4b434142 	.word	0x4b434142
   124a4:	74697720 	.word	0x74697720
   124a8:	6f6e2068 	.word	0x6f6e2068
   124ac:	6d20656e 	.word	0x6d20656e
   124b0:	68637461 	.word	0x68637461
   124b4:	20676e69 	.word	0x20676e69
   124b8:	2e44494d 	.word	0x2e44494d
   124bc:	72754320 	.word	0x72754320
   124c0:	746e6572 	.word	0x746e6572
   124c4:	7420796c 	.word	0x7420796c
   124c8:	65726568 	.word	0x65726568
   124cc:	6e736920 	.word	0x6e736920
   124d0:	7573206f 	.word	0x7573206f
   124d4:	726f7070 	.word	0x726f7070
   124d8:	6f662074 	.word	0x6f662074
   124dc:	65732072 	.word	0x65732072
   124e0:	61726576 	.word	0x61726576
   124e4:	6f63206c 	.word	0x6f63206c
   124e8:	7275636e 	.word	0x7275636e
   124ec:	746e6572 	.word	0x746e6572
   124f0:	534e5520 	.word	0x534e5520
   124f4:	43534255 	.word	0x43534255
   124f8:	45424952 	.word	0x45424952
   124fc:	73656d20 	.word	0x73656d20
   12500:	65676173 	.word	0x65676173
   12504:	0d0a2e73 	.word	0x0d0a2e73
   12508:	00000000 	.word	0x00000000
   1250c:	5454514d 	.word	0x5454514d
   12510:	47202d20 	.word	0x47202d20
   12514:	5220746f 	.word	0x5220746f
   12518:	52474e49 	.word	0x52474e49
   1251c:	0a505345 	.word	0x0a505345
   12520:	0000000d 	.word	0x0000000d
   12524:	5454514d 	.word	0x5454514d
   12528:	28202d20 	.word	0x28202d20
   1252c:	7065656b 	.word	0x7065656b
   12530:	696c615f 	.word	0x696c615f
   12534:	635f6576 	.word	0x635f6576
   12538:	626c6c61 	.word	0x626c6c61
   1253c:	296b6361 	.word	0x296b6361
   12540:	6c614320 	.word	0x6c614320
   12544:	2164656c 	.word	0x2164656c
   12548:	00000d0a 	.word	0x00000d0a
   1254c:	5454514d 	.word	0x5454514d
   12550:	44202d20 	.word	0x44202d20
   12554:	6f637369 	.word	0x6f637369
   12558:	63656e6e 	.word	0x63656e6e
   1255c:	20646574 	.word	0x20646574
   12560:	74207962 	.word	0x74207962
   12564:	65207063 	.word	0x65207063
   12568:	746e6576 	.word	0x746e6576
   1256c:	0a642520 	.word	0x0a642520
   12570:	0000000d 	.word	0x0000000d
   12574:	5454514d 	.word	0x5454514d
   12578:	47202d20 	.word	0x47202d20
   1257c:	5420746f 	.word	0x5420746f
   12580:	445f5043 	.word	0x445f5043
   12584:	5f415441 	.word	0x5f415441
   12588:	544e4553 	.word	0x544e4553
   1258c:	00000d0a 	.word	0x00000d0a
   12590:	5454514d 	.word	0x5454514d
   12594:	54202d20 	.word	0x54202d20
   12598:	45205043 	.word	0x45205043
   1259c:	746e6576 	.word	0x746e6576
   125a0:	20642520 	.word	0x20642520
   125a4:	63207369 	.word	0x63207369
   125a8:	65727275 	.word	0x65727275
   125ac:	796c746e 	.word	0x796c746e
   125b0:	746f6e20 	.word	0x746f6e20
   125b4:	6e616d20 	.word	0x6e616d20
   125b8:	64656761 	.word	0x64656761
   125bc:	20796220 	.word	0x20796220
   125c0:	20656874 	.word	0x20656874
   125c4:	20706374 	.word	0x20706374
   125c8:	6e657665 	.word	0x6e657665
   125cc:	61632074 	.word	0x61632074
   125d0:	61626c6c 	.word	0x61626c6c
   125d4:	0d0a6b63 	.word	0x0d0a6b63
   125d8:	00000000 	.word	0x00000000
   125dc:	5454514d 	.word	0x5454514d
   125e0:	28202d20 	.word	0x28202d20
   125e4:	646e6573 	.word	0x646e6573
   125e8:	74756f5f 	.word	0x74756f5f
   125ec:	6675625f 	.word	0x6675625f
   125f0:	29726566 	.word	0x29726566
   125f4:	61705320 	.word	0x61705320
   125f8:	75206563 	.word	0x75206563
   125fc:	20646573 	.word	0x20646573
   12600:	62206e69 	.word	0x62206e69
   12604:	65666675 	.word	0x65666675
   12608:	25203a72 	.word	0x25203a72
   1260c:	000d0a69 	.word	0x000d0a69
   12610:	5454514d 	.word	0x5454514d
   12614:	28202d20 	.word	0x28202d20
   12618:	74697277 	.word	0x74697277
   1261c:	79625f65 	.word	0x79625f65
   12620:	20296574 	.word	0x20296574
   12624:	66667562 	.word	0x66667562
   12628:	7a69735f 	.word	0x7a69735f
   1262c:	25203a65 	.word	0x25203a65
   12630:	72772069 	.word	0x72772069
   12634:	3a657469 	.word	0x3a657469
   12638:	30252720 	.word	0x30252720
   1263c:	0a275832 	.word	0x0a275832
   12640:	0000000d 	.word	0x0000000d
   12644:	5454514d 	.word	0x5454514d
   12648:	28202d20 	.word	0x28202d20
   1264c:	74697277 	.word	0x74697277
   12650:	79625f65 	.word	0x79625f65
   12654:	29736574 	.word	0x29736574
   12658:	6e656c20 	.word	0x6e656c20
   1265c:	7525203a 	.word	0x7525203a
   12660:	69727720 	.word	0x69727720
   12664:	705f6574 	.word	0x705f6574
   12668:	203a736f 	.word	0x203a736f
   1266c:	0a756c25 	.word	0x0a756c25
   12670:	0000000d 	.word	0x0000000d
   12674:	5454514d 	.word	0x5454514d
   12678:	52202d20 	.word	0x52202d20
   1267c:	73696765 	.word	0x73696765
   12680:	65726574 	.word	0x65726574
   12684:	75732064 	.word	0x75732064
   12688:	73656363 	.word	0x73656363
   1268c:	6c756673 	.word	0x6c756673
   12690:	0d0a796c 	.word	0x0d0a796c
   12694:	00000000 	.word	0x00000000
   12698:	5454514d 	.word	0x5454514d
   1269c:	41202d20 	.word	0x41202d20
   126a0:	74726f62 	.word	0x74726f62
   126a4:	00000d0a 	.word	0x00000d0a
   126a8:	5454514d 	.word	0x5454514d
   126ac:	47202d20 	.word	0x47202d20
   126b0:	6d20746f 	.word	0x6d20746f
   126b4:	5f747471 	.word	0x5f747471
   126b8:	635f6f64 	.word	0x635f6f64
   126bc:	656e6e6f 	.word	0x656e6e6f
   126c0:	745f7463 	.word	0x745f7463
   126c4:	655f7063 	.word	0x655f7063
   126c8:	746e6576 	.word	0x746e6576
   126cc:	000d0a21 	.word	0x000d0a21
   126d0:	5454514d 	.word	0x5454514d
   126d4:	47202d20 	.word	0x47202d20
   126d8:	6d20746f 	.word	0x6d20746f
   126dc:	5f747471 	.word	0x5f747471
   126e0:	635f6f64 	.word	0x635f6f64
   126e4:	656e6e6f 	.word	0x656e6e6f
   126e8:	6d5f7463 	.word	0x6d5f7463
   126ec:	5f747471 	.word	0x5f747471
   126f0:	6e657665 	.word	0x6e657665
   126f4:	0d0a2174 	.word	0x0d0a2174
   126f8:	00000000 	.word	0x00000000
   126fc:	5454514d 	.word	0x5454514d
   12700:	53202d20 	.word	0x53202d20
   12704:	69646e65 	.word	0x69646e65
   12708:	4320676e 	.word	0x4320676e
   1270c:	454e4e4f 	.word	0x454e4e4f
   12710:	6d205443 	.word	0x6d205443
   12714:	61737365 	.word	0x61737365
   12718:	2e2e6567 	.word	0x2e2e6567
   1271c:	000d0a2e 	.word	0x000d0a2e
   12720:	7349514d 	.word	0x7349514d
   12724:	00007064 	.word	0x00007064
   12728:	5454514d 	.word	0x5454514d
   1272c:	53202d20 	.word	0x53202d20
   12730:	69747465 	.word	0x69747465
   12734:	7720676e 	.word	0x7720676e
   12738:	206c6c69 	.word	0x206c6c69
   1273c:	69706f74 	.word	0x69706f74
   12740:	6f742063 	.word	0x6f742063
   12744:	73252720 	.word	0x73252720
   12748:	75252027 	.word	0x75252027
   1274c:	74796220 	.word	0x74796220
   12750:	61207365 	.word	0x61207365
   12754:	6d20646e 	.word	0x6d20646e
   12758:	61737365 	.word	0x61737365
   1275c:	74206567 	.word	0x74206567
   12760:	2527206f 	.word	0x2527206f
   12764:	25202773 	.word	0x25202773
   12768:	79622075 	.word	0x79622075
   1276c:	0a736574 	.word	0x0a736574
   12770:	0000000d 	.word	0x0000000d
   12774:	656d6954 	.word	0x656d6954
   12778:	2074756f 	.word	0x2074756f
   1277c:	74696177 	.word	0x74696177
   12780:	20676e69 	.word	0x20676e69
   12784:	20726f66 	.word	0x20726f66
   12788:	4e4e4f43 	.word	0x4e4e4f43
   1278c:	0a4b4341 	.word	0x0a4b4341
   12790:	0000000d 	.word	0x0000000d
   12794:	5454514d 	.word	0x5454514d
   12798:	44202d20 	.word	0x44202d20
   1279c:	20656e6f 	.word	0x20656e6f
   127a0:	646e6573 	.word	0x646e6573
   127a4:	20676e69 	.word	0x20676e69
   127a8:	4e4e4f43 	.word	0x4e4e4f43
   127ac:	0a544345 	.word	0x0a544345
   127b0:	0000000d 	.word	0x0000000d
   127b4:	5454514d 	.word	0x5454514d
   127b8:	43202d20 	.word	0x43202d20
   127bc:	454e4e4f 	.word	0x454e4e4f
   127c0:	6d205443 	.word	0x6d205443
   127c4:	61737365 	.word	0x61737365
   127c8:	73206567 	.word	0x73206567
   127cc:	3a746e65 	.word	0x3a746e65
   127d0:	000d0a20 	.word	0x000d0a20
   127d4:	5454514d 	.word	0x5454514d
   127d8:	47202d20 	.word	0x47202d20
   127dc:	6d20746f 	.word	0x6d20746f
   127e0:	5f747471 	.word	0x5f747471
   127e4:	645f6f64 	.word	0x645f6f64
   127e8:	6f637369 	.word	0x6f637369
   127ec:	63656e6e 	.word	0x63656e6e
   127f0:	716d5f74 	.word	0x716d5f74
   127f4:	655f7474 	.word	0x655f7474
   127f8:	746e6576 	.word	0x746e6576
   127fc:	000d0a21 	.word	0x000d0a21
   12800:	5454514d 	.word	0x5454514d
   12804:	47202d20 	.word	0x47202d20
   12808:	6d20746f 	.word	0x6d20746f
   1280c:	5f747471 	.word	0x5f747471
   12810:	705f6f64 	.word	0x705f6f64
   12814:	72676e69 	.word	0x72676e69
   12818:	655f7165 	.word	0x655f7165
   1281c:	746e6576 	.word	0x746e6576
   12820:	000d0a21 	.word	0x000d0a21
   12824:	5454514d 	.word	0x5454514d
   12828:	53202d20 	.word	0x53202d20
   1282c:	69646e65 	.word	0x69646e65
   12830:	5020676e 	.word	0x5020676e
   12834:	52474e49 	.word	0x52474e49
   12838:	0d0a5145 	.word	0x0d0a5145
   1283c:	00000000 	.word	0x00000000
   12840:	5454514d 	.word	0x5454514d
   12844:	47202d20 	.word	0x47202d20
   12848:	6d20746f 	.word	0x6d20746f
   1284c:	5f747471 	.word	0x5f747471
   12850:	735f6f64 	.word	0x735f6f64
   12854:	63736275 	.word	0x63736275
   12858:	65626972 	.word	0x65626972
   1285c:	74716d5f 	.word	0x74716d5f
   12860:	76655f74 	.word	0x76655f74
   12864:	21746e65 	.word	0x21746e65
   12868:	00000d0a 	.word	0x00000d0a
   1286c:	5454514d 	.word	0x5454514d
   12870:	53202d20 	.word	0x53202d20
   12874:	69646e65 	.word	0x69646e65
   12878:	7320676e 	.word	0x7320676e
   1287c:	63736275 	.word	0x63736275
   12880:	65626972 	.word	0x65626972
   12884:	73656d20 	.word	0x73656d20
   12888:	65676173 	.word	0x65676173
   1288c:	6f742021 	.word	0x6f742021
   12890:	20636970 	.word	0x20636970
   12894:	74207325 	.word	0x74207325
   12898:	6369706f 	.word	0x6369706f
   1289c:	6e656c5f 	.word	0x6e656c5f
   128a0:	20687467 	.word	0x20687467
   128a4:	0d0a6925 	.word	0x0d0a6925
   128a8:	00000000 	.word	0x00000000
   128ac:	5454514d 	.word	0x5454514d
   128b0:	42202d20 	.word	0x42202d20
   128b4:	65666675 	.word	0x65666675
   128b8:	70732072 	.word	0x70732072
   128bc:	20656361 	.word	0x20656361
   128c0:	25207369 	.word	0x25207369
   128c4:	0d0a2069 	.word	0x0d0a2069
   128c8:	00000000 	.word	0x00000000
   128cc:	656d6954 	.word	0x656d6954
   128d0:	2074756f 	.word	0x2074756f
   128d4:	74696177 	.word	0x74696177
   128d8:	20676e69 	.word	0x20676e69
   128dc:	20726f66 	.word	0x20726f66
   128e0:	41425553 	.word	0x41425553
   128e4:	0d0a4b43 	.word	0x0d0a4b43
   128e8:	00000000 	.word	0x00000000
   128ec:	5454514d 	.word	0x5454514d
   128f0:	44202d20 	.word	0x44202d20
   128f4:	20656e6f 	.word	0x20656e6f
   128f8:	73206e69 	.word	0x73206e69
   128fc:	5f646e65 	.word	0x5f646e65
   12900:	73627573 	.word	0x73627573
   12904:	62697263 	.word	0x62697263
   12908:	0d0a2165 	.word	0x0d0a2165
   1290c:	00000000 	.word	0x00000000
   12910:	5454514d 	.word	0x5454514d
   12914:	47202d20 	.word	0x47202d20
   12918:	6d20746f 	.word	0x6d20746f
   1291c:	5f747471 	.word	0x5f747471
   12920:	755f6f64 	.word	0x755f6f64
   12924:	6275736e 	.word	0x6275736e
   12928:	69726373 	.word	0x69726373
   1292c:	6d5f6562 	.word	0x6d5f6562
   12930:	5f747471 	.word	0x5f747471
   12934:	6e657665 	.word	0x6e657665
   12938:	0d0a2174 	.word	0x0d0a2174
   1293c:	00000000 	.word	0x00000000
   12940:	5454514d 	.word	0x5454514d
   12944:	53202d20 	.word	0x53202d20
   12948:	69646e65 	.word	0x69646e65
   1294c:	7520676e 	.word	0x7520676e
   12950:	6275736e 	.word	0x6275736e
   12954:	69726373 	.word	0x69726373
   12958:	6d206562 	.word	0x6d206562
   1295c:	61737365 	.word	0x61737365
   12960:	6f206567 	.word	0x6f206567
   12964:	6f74206e 	.word	0x6f74206e
   12968:	20636970 	.word	0x20636970
   1296c:	74207325 	.word	0x74207325
   12970:	6369706f 	.word	0x6369706f
   12974:	6e656c5f 	.word	0x6e656c5f
   12978:	20687467 	.word	0x20687467
   1297c:	0d0a6925 	.word	0x0d0a6925
   12980:	00000000 	.word	0x00000000
   12984:	656d6954 	.word	0x656d6954
   12988:	2074756f 	.word	0x2074756f
   1298c:	74696177 	.word	0x74696177
   12990:	20676e69 	.word	0x20676e69
   12994:	20726f66 	.word	0x20726f66
   12998:	55534e55 	.word	0x55534e55
   1299c:	4b434142 	.word	0x4b434142
   129a0:	00000d0a 	.word	0x00000d0a
   129a4:	5454514d 	.word	0x5454514d
   129a8:	44202d20 	.word	0x44202d20
   129ac:	20656e6f 	.word	0x20656e6f
   129b0:	74697277 	.word	0x74697277
   129b4:	20676e69 	.word	0x20676e69
   129b8:	73627573 	.word	0x73627573
   129bc:	62697263 	.word	0x62697263
   129c0:	656d2065 	.word	0x656d2065
   129c4:	67617373 	.word	0x67617373
   129c8:	6f742065 	.word	0x6f742065
   129cc:	74756f20 	.word	0x74756f20
   129d0:	66756220 	.word	0x66756220
   129d4:	21726566 	.word	0x21726566
   129d8:	00000d0a 	.word	0x00000d0a
   129dc:	5454514d 	.word	0x5454514d
   129e0:	47202d20 	.word	0x47202d20
   129e4:	6d20746f 	.word	0x6d20746f
   129e8:	5f747471 	.word	0x5f747471
   129ec:	705f6f64 	.word	0x705f6f64
   129f0:	696c6275 	.word	0x696c6275
   129f4:	6d5f6873 	.word	0x6d5f6873
   129f8:	5f747471 	.word	0x5f747471
   129fc:	6e657665 	.word	0x6e657665
   12a00:	0d0a2174 	.word	0x0d0a2174
   12a04:	00000000 	.word	0x00000000
   12a08:	5454514d 	.word	0x5454514d
   12a0c:	53202d20 	.word	0x53202d20
   12a10:	69646e65 	.word	0x69646e65
   12a14:	7020676e 	.word	0x7020676e
   12a18:	696c6275 	.word	0x696c6275
   12a1c:	6d206873 	.word	0x6d206873
   12a20:	61737365 	.word	0x61737365
   12a24:	20216567 	.word	0x20216567
   12a28:	69706f74 	.word	0x69706f74
   12a2c:	73252063 	.word	0x73252063
   12a30:	706f7420 	.word	0x706f7420
   12a34:	6c5f6369 	.word	0x6c5f6369
   12a38:	74676e65 	.word	0x74676e65
   12a3c:	69252068 	.word	0x69252068
   12a40:	00000d0a 	.word	0x00000d0a
   12a44:	656d6954 	.word	0x656d6954
   12a48:	2074756f 	.word	0x2074756f
   12a4c:	74696177 	.word	0x74696177
   12a50:	20676e69 	.word	0x20676e69
   12a54:	20726f66 	.word	0x20726f66
   12a58:	41425550 	.word	0x41425550
   12a5c:	0d0a4b43 	.word	0x0d0a4b43
   12a60:	00000000 	.word	0x00000000
   12a64:	5454514d 	.word	0x5454514d
   12a68:	57202d20 	.word	0x57202d20
   12a6c:	696e7261 	.word	0x696e7261
   12a70:	202c676e 	.word	0x202c676e
   12a74:	20746f67 	.word	0x20746f67
   12a78:	41425550 	.word	0x41425550
   12a7c:	77204b43 	.word	0x77204b43
   12a80:	20687469 	.word	0x20687469
   12a84:	656e6f6e 	.word	0x656e6f6e
   12a88:	74616d20 	.word	0x74616d20
   12a8c:	6e696863 	.word	0x6e696863
   12a90:	494d2067 	.word	0x494d2067
   12a94:	43202e44 	.word	0x43202e44
   12a98:	65727275 	.word	0x65727275
   12a9c:	796c746e 	.word	0x796c746e
   12aa0:	65687420 	.word	0x65687420
   12aa4:	69206572 	.word	0x69206572
   12aa8:	6f6e2073 	.word	0x6f6e2073
   12aac:	70757320 	.word	0x70757320
   12ab0:	74726f70 	.word	0x74726f70
   12ab4:	726f6620 	.word	0x726f6620
   12ab8:	76657320 	.word	0x76657320
   12abc:	6c617265 	.word	0x6c617265
   12ac0:	6e6f6320 	.word	0x6e6f6320
   12ac4:	72727563 	.word	0x72727563
   12ac8:	20746e65 	.word	0x20746e65
   12acc:	4c425550 	.word	0x4c425550
   12ad0:	20485349 	.word	0x20485349
   12ad4:	7373656d 	.word	0x7373656d
   12ad8:	73656761 	.word	0x73656761
   12adc:	000d0a2e 	.word	0x000d0a2e
   12ae0:	5454514d 	.word	0x5454514d
   12ae4:	51202d20 	.word	0x51202d20
   12ae8:	6e20536f 	.word	0x6e20536f
   12aec:	6920746f 	.word	0x6920746f
   12af0:	656c706d 	.word	0x656c706d
   12af4:	746e656d 	.word	0x746e656d
   12af8:	79206465 	.word	0x79206465
   12afc:	0a2e7465 	.word	0x0a2e7465
   12b00:	0000000d 	.word	0x0000000d
   12b04:	5454514d 	.word	0x5454514d
   12b08:	50202d20 	.word	0x50202d20
   12b0c:	696c6275 	.word	0x696c6275
   12b10:	45206873 	.word	0x45206873
   12b14:	6575716e 	.word	0x6575716e
   12b18:	0a646575 	.word	0x0a646575
   12b1c:	0000000d 	.word	0x0000000d
   12b20:	5454514d 	.word	0x5454514d
   12b24:	43202d20 	.word	0x43202d20
   12b28:	206c6c61 	.word	0x206c6c61
   12b2c:	6d206f74 	.word	0x6d206f74
   12b30:	5f747471 	.word	0x5f747471
   12b34:	73627573 	.word	0x73627573
   12b38:	62697263 	.word	0x62697263
   12b3c:	2e2e2e65 	.word	0x2e2e2e65
   12b40:	00000d0a 	.word	0x00000d0a
   12b44:	5454514d 	.word	0x5454514d
   12b48:	4e202d20 	.word	0x4e202d20
   12b4c:	6120746f 	.word	0x6120746f
   12b50:	70656363 	.word	0x70656363
   12b54:	21646574 	.word	0x21646574
   12b58:	00000d0a 	.word	0x00000d0a
   12b5c:	5454514d 	.word	0x5454514d
   12b60:	41202d20 	.word	0x41202d20
   12b64:	70656363 	.word	0x70656363
   12b68:	21646574 	.word	0x21646574
   12b6c:	00000d0a 	.word	0x00000d0a
   12b70:	5454514d 	.word	0x5454514d
   12b74:	43202d20 	.word	0x43202d20
   12b78:	206c6c61 	.word	0x206c6c61
   12b7c:	6d206f74 	.word	0x6d206f74
   12b80:	5f747471 	.word	0x5f747471
   12b84:	75736e75 	.word	0x75736e75
   12b88:	72637362 	.word	0x72637362
   12b8c:	2e656269 	.word	0x2e656269
   12b90:	0d0a2e2e 	.word	0x0d0a2e2e
   12b94:	00000000 	.word	0x00000000
   12b98:	5454514d 	.word	0x5454514d
   12b9c:	43202d20 	.word	0x43202d20
   12ba0:	206c6c61 	.word	0x206c6c61
   12ba4:	6d206f74 	.word	0x6d206f74
   12ba8:	5f747471 	.word	0x5f747471
   12bac:	6c627570 	.word	0x6c627570
   12bb0:	2e687369 	.word	0x2e687369
   12bb4:	0d0a2e2e 	.word	0x0d0a2e2e
   12bb8:	00000000 	.word	0x00000000
   12bbc:	5454514d 	.word	0x5454514d
   12bc0:	6f727020 	.word	0x6f727020
   12bc4:	73736563 	.word	0x73736563
   12bc8:	00000000 	.word	0x00000000
   12bcc:	736e6553 	.word	0x736e6553
   12bd0:	0073726f 	.word	0x0073726f
   12bd4:	000002ff 	.word	0x000002ff

00012bd8 <unc_llconf>:
   12bd8:	2022280f                                .(" 

00012bdc <unc_ctxconf>:
   12bdc:	80828800                                ....

00012be0 <unc_mxconf>:
   12be0:	2123250f                                .%#!

00012be4 <llprefix>:
   12be4:	000080fe                                ....

00012be8 <sicslowpan_driver>:
   12be8:	00012c20 000059f5 00006379               ,...Y..yc..

00012bf4 <ttl_values>:
   12bf4:	ff400100 67617266 20642520 0d0a6425     ..@.frag %d %d..
   12c04:	00000000 706f7264 636e6920 6e696d6f     ....drop incomin
   12c14:	72662067 0d0a6761 00000000 73636973     g frag......sics
   12c24:	70776f6c 00006e61 00000154 00009f74     lowpan..T...t...
   12c34:	000098d0 00008fa0 00008fac 00009c60     ............`...
   12c44:	00009f74 00009c60 00009f74 00009c60     t...`...t...`...
   12c54:	000092da 000093be 000093be 000093be     ................
   12c64:	000093be 000093be 000095a8 000093be     ................
   12c74:	000093be 000093be 000093be 000093be     ................
   12c84:	000093be 000093be 000093be 000093be     ................
   12c94:	000093be 00009410 000093be 000093be     ................
   12ca4:	000093be 000093be 000093be 000093be     ................
   12cb4:	000093be 000093be 000093be 000093be     ................
   12cc4:	000093be 000093be 000093be 000093be     ................
   12cd4:	000093be 000093be 000093be 000093be     ................
   12ce4:	000093be 000093be 000093be 000093be     ................
   12cf4:	000093be 000093be 000093be 00009378     ............x...
   12d04:	00009f74 000093be 000093be 000093be     t...............
   12d14:	000093be 000093be 000093be 000093be     ................
   12d24:	000093be 000093be 000093be 000093be     ................
   12d34:	000093be 000093be 000093ce 00009f74     ............t...
   12d44:	00009322 00009a76 00009abe 00009c14     "...v...........
   12d54:	00009db8 00009e1c 00009e5c 00009e74     ........\...t...
   12d64:	00009d9c 3a706374 77656e20 61746164     ....tcp: newdata
   12d74:	7962202c 6c736574 20746665 2030203e     , bytesleft > 0 
   12d84:	29642528 746f6e20 706d6920 656d656c     (%d) not impleme
   12d94:	6465746e 00000d0a 3a706374 6b636120     nted....tcp: ack
   12da4:	61206465 72657373 6e6f6974 69616620     ed assertion fai
   12db4:	2064656c 6f3e2d73 75707475 61645f74     led s->output_da
   12dc4:	6c5f6174 28206e65 20296425 2d73203c     ta_len (%d) < s-
   12dd4:	74756f3e 5f747570 61746164 6e65735f     >output_data_sen
   12de4:	786e5f64 25282074 0d0a2964 00000000     d_nxt (%d)......
   12df4:	20504354 6b636f73 70207465 65636f72     TCP socket proce
   12e04:	00007373 2f504354 73205049 6b636174     ss..TCP/IP stack
   12e14:	00000000 4c554e28 5049204c 64646120     ....(NULL IP add
   12e24:	00002972 00003a3a 00007825              r)..::..%x..

00012e30 <linkaddr_null>:
	...
   12e38:	414d5343 00000000                       CSMA....

00012e40 <csma_driver>:
   12e40:	00012e38 0000af61 0000adbd 0000aca5     8...a...........
   12e50:	0000acb5 0000acc5 0000acd5              ............

00012e5c <framer_802154>:
   12e5c:	0000b4ad 0000b3ed 6c6c756e 00636472     ........nullrdc.

00012e6c <nullrdc_driver>:
   12e6c:	00012e64 0000b6d5 0000b961 0000b931     d.......a...1...
   12e7c:	0000b6e1 0000b6a5 0000b6b5 0000b6d1     ................
   12e8c:	50520a0d 41203a4c 64656464 72206120     ..RPL: Added a r
   12e9c:	6574756f 206f7420 00000000 2064252f     oute to ..../%d 
   12eac:	20616976 00000000 6d697443 70207265     via ....Ctimer p
   12ebc:	65636f72 00007373 6e657645 69742074     rocess..Event ti
   12ecc:	0072656d                                mer.

00012ed0 <rf233_radio_driver>:
   12ed0:	0000efad 0000f0a5 0000f0f5 0000f235     ............5...
   12ee0:	0000ee45 0000f251 0000f2e5 0000edb9     E...Q...........
   12ef0:	0000f2f9 0000f365 0000f3bd 65746641     ....e.......Afte
   12f00:	61772072 6620656b 206d6f72 65656c73     r wake from slee
   12f10:	000d0a70 65746641 72612072 72206863     p...After arch r
   12f20:	20646165 3a676572 61747320 30206574     ead reg: state 0
   12f30:	34302578 000d0a78 32424552 72203333     x%04x...REB233 r
   12f40:	6f696461 6e6f6320 75676966 20646572     adio configured 
   12f50:	75206f74 45206573 75255458 00000d0a     to use EXT%u....
   12f60:	33324652 61722033 206f6964 76697264     RF233 radio driv
   12f70:	00007265 25203a78 000d0a64              er..x: %d...

00012f7c <button_sensor>:
   12f7c:	00012f8c 0000f579 0000f595 0000f589     ./..y...........
   12f8c:	74747542 73206e6f 6f736e65 00000072     Button sensor...
   12f9c:	00020028 200001b4 00000000 656d6954     (...... ....Time
   12fac:	2074756f 000d0a31 656d6954 2074756f     out 1...Timeout 
   12fbc:	000d0a32                                2...

00012fc0 <tc_interrupt_vectors.13544>:
   12fc0:	00141312                                ....

00012fc4 <tc_interrupt_vectors.13564>:
   12fc4:	00141312 6d697472 203a7265 65686373     ....rtimer: sche
   12fd4:	656c7564 6f6f7420 6f6f7320 65202c6e     dule too soon, e
   12fe4:	75636578 676e6974 776f6e20 6c252021     xecuting now! %l
   12ff4:	6c252075 000d0a75 0a0a0a0d 7453200a     u %lu........ St
   13004:	69747261 7420676e 53206568 7472616d     arting the Smart
   13014:	6e6e6f43 2d746365 576f4c36 204e4150     Connect-6LoWPAN 
   13024:	50200a0d 6674616c 206d726f 7441203a     .. Platform : At
   13034:	206c656d 20546f49 69766564 0d206563     mel IoT device .
   13044:	00000d0a 7473614c 73657220 63207465     ....Last reset c
   13054:	65737561 0000203a 74737953 52206d65     ause: ..System R
   13064:	74657365 71655220 74736575 00000d0a     eset Request....
   13074:	63746157 676f6468 73655220 0d0a7465     Watchdog Reset..
   13084:	00000000 65747845 6c616e72 73655220     ....External Res
   13094:	0d0a7465 00000000 776f7242 754f206e     et......Brown Ou
   130a4:	33332074 74654420 6f746365 65522072     t 33 Detector Re
   130b4:	0a746573 0000000d 776f7242 754f206e     set.....Brown Ou
   130c4:	32312074 74654420 6f746365 65522072     t 12 Detector Re
   130d4:	0a746573 0000000d 65776f50 6e4f2d72     set.....Power-On
   130e4:	73655220 0d0a7465 00000000 003a7525      Reset......%u:.
   130f4:	63206672 6e6e6168 203a6c65 0d0a6425     rf channel: %d..
   13104:	00000000 65646f4e 20646920 0a2e7525     ....Node id %u..
   13114:	0000000d 65646f4e 20646920 20746f6e     ....Node id not 
   13124:	2e746573 00000d0a 25207325 2520756c     set.....%s %lu %
   13134:	000d0a64 36765049 00000020 78323025     d...IPv6 ...%02x
   13144:	78323025 0000003a 78323025 78323025     %02x:...%02x%02x
   13154:	00000d0a 746e6554 76697461 6c672065     ....Tentative gl
   13164:	6c61626f 76504920 64612036 73657264     obal IPv6 addres
   13174:	00002073 78323025 78323025 000d0a0d     s ..%02x%02x....
   13184:	72617453 676e6974 00000000 00732520     Starting.... %s.
   13194:	57200a0d 696e7261 203a676e 20534541     .. Warning: AES 
   131a4:	72636e65 69747079 69206e6f 69642073     encryption is di
   131b4:	6c626173 0d0a6465 00000000 6b6e694c     sabled......Link
   131c4:	79616c20 61207265 20726464 00000000      layer addr ....
   131d4:	202c7525 00000000 6e726177 5f676e69     %u, ....warning_
   131e4:	6c6c6163 6b636162 00000d0a 0000fede     callback........
   131f4:	0000fef6 0000ffac 0000ffb4 0000ff0c     ................
   13204:	0000ffbc                                ....

00013208 <autostart_processes>:
   13208:	200001c0 00000000 20505041 7041202d     ... ....APP - Ap
   13218:	63696c70 6f697461 6168206e 20612073     plication has a 
   13228:	5454514d 6e6f6320 7463656e 0a6e6f69     MQTT connection.
   13238:	0000000d 20505041 514d202d 44205454     ....APP - MQTT D
   13248:	6f637369 63656e6e 52202e74 6f736165     isconnect. Reaso
   13258:	7525206e 00000d0a 20505041 7041202d     n %u....APP - Ap
   13268:	63696c70 6f697461 6572206e 76696563     plication receiv
   13278:	61206465 62757020 6873696c 206e6f20     ed a publish on 
   13288:	69706f74 25272063 202e2773 6c796150     topic '%s'. Payl
   13298:	2064616f 657a6973 20736920 62206925     oad size is %i b
   132a8:	73657479 6f43202e 6e65746e 0a0a3a74     ytes. Content:..
   132b8:	0000000d 20627550 646e6148 3a72656c     ....Pub Handler:
   132c8:	706f7420 273d6369 20277325 6e656c28      topic='%s' (len
   132d8:	2975253d 6863202c 5f6b6e75 3d6e656c     =%u), chunk_len=
   132e8:	0d0a7525 00000000 6f636e49 63657272     %u......Incorrec
   132f8:	6f742074 20636970 6320726f 6b6e7568     t topic or chunk
   13308:	6e656c20 6749202e 65726f6e 000d0a64      len. Ignored...
   13318:	6e6f736a 00000000 6f636e49 63657272     json....Incorrec
   13328:	6f662074 74616d72 00000d0a 7364656c     t format....leds
   13338:	00000000 20505041 7041202d 63696c70     ....APP - Applic
   13348:	6f697461 7369206e 62757320 69726373     ation is subscri
   13358:	20646562 74206f74 6369706f 63757320     bed to topic suc
   13368:	73736563 6c6c7566 000d0a79 20505041     cessfully...APP 
   13378:	7041202d 63696c70 6f697461 7369206e     - Application is
   13388:	736e7520 63736275 65626972 6f742064      unsubscribed to
   13398:	706f7420 73206369 65636375 75667373      topic successfu
   133a8:	0a796c6c 0000000d 20505041 7550202d     lly.....APP - Pu
   133b8:	73696c62 676e6968 6d6f6320 74656c70     blishing complet
   133c8:	0d0a2e65 00000000 20505041 7041202d     e.......APP - Ap
   133d8:	63696c70 6f697461 6f67206e 20612074     plication got a 
   133e8:	61686e75 656c646e 514d2064 65205454     unhandled MQTT e
   133f8:	746e6576 6925203a 00000d0a 5454514d     vent: %i....MQTT
   13408:	6d654420 7250206f 7365636f 000d0a73      Demo Process...
   13418:	45475741 4f422d53 32445241 00000000     AWGES-BOARD2....
   13428:	69727559 00004449 48545541 0000005a     YuriID..AUTHZ...
   13438:	74617473 00007375 61616161 00313a3a     status..aaaa::1.
   13448:	73253a64 3a73253a 78323025 78323025     d:%s:%s:%02x%02x
   13458:	78323025 78323025 78323025 78323025     %02x%02x%02x%02x
   13468:	00000000 65696c43 4920746e 25203a44     ....Client ID: %
   13478:	42202c64 65666675 64252072 00000d0a     d, Buffer %d....
   13488:	20627553 69706f54 25203a63 42202c64     Sub Topic: %d, B
   13498:	65666675 64252072 00000d0a 20627550     uffer %d....Pub 
   134a8:	69706f54 25203a63 42202c64 65666675     Topic: %d, Buffe
   134b8:	64252072 00000d0a 63697571 6174736b     r %d....quicksta
   134c8:	00007472 72657355 6d616e20 65732065     rt..User name se
   134d8:	62202c74 65207475 7974706d 74756120     t, but empty aut
   134e8:	6f742068 0a6e656b 0000000d 2d657375     h token.....use-
   134f8:	656b6f74 75612d6e 00006874 74696e49     token-auth..Init
   13508:	00000d0a 69676552 72657473 202e6465     ....Registered. 
   13518:	6e6e6f43 20746365 65747461 2074706d     Connect attempt 
   13528:	0d0a7525 00000000 6e6e6f43 69746365     %u......Connecti
   13538:	2820676e 0a297525 0000000d 6e697355     ng (%u).....Usin
   13548:	71272067 6b636975 72617473 203a2774     g 'quickstart': 
   13558:	70696b53 676e6970 62757320 69726373     Skipping subscri
   13568:	0d0a6562 00000000 20505041 7553202d     be......APP - Su
   13578:	72637362 6e696269 0d0a2167 00000000     bscribing!......
   13588:	20505041 7254202d 20646569 73206f74     APP - Tried to s
   13598:	63736275 65626972 74756220 6d6f6320     ubscribe but com
   135a8:	646e616d 65757120 77206575 66207361     mand queue was f
   135b8:	216c6c75 00000d0a 0a0a0a0a 0a0a0a0a     ull!............
   135c8:	0a0a0a0a 0a0a0a0a 0a0a0a0a 0a0a0a0a     ................
   135d8:	75530d0a 72637362 64656269 3a6e6f20     ..Subscribed on:
   135e8:	0a207325 0000000d 6f727245 206f6120     %s .....Erro ao 
   135f8:	63696e69 696c6169 2072617a 3249206f     inicializar o I2
   13608:	000d0a43 63696e69 696c6169 6f64617a     C...inicializado
   13618:	49206f20 0d0a4332 00000000 65636341      o I2C......Acce
   13628:	6f72656c 6574656d 61562072 3a65756c     lerometer Value:
   13638:	00006425 66667542 74207265 73206f6f     %d..Buffer too s
   13648:	74726f68 6148202e 25206576 6e202c64     hort. Have %d, n
   13658:	20646565 2b206425 0a305c20 0000000d     eed %d + \0.....
   13668:	20505041 7550202d 73696c62 0d0a2168     APP - Publish!..
   13678:	00000000 6c627550 69687369 0d0a676e     ....Publishing..
   13688:	00000000 6c627550 69687369 2e2e676e     ....Publishing..
   13698:	4d28202e 20545451 74617473 64253d65     . (MQTT state=%d
   136a8:	3d71202c 0a297525 0000000d 63736944     , q=%u).....Disc
   136b8:	656e6e6f 64657463 00000d0a 63736944     onnected....Disc
   136c8:	656e6e6f 64657463 7441202e 706d6574     onnected. Attemp
   136d8:	75252074 206e6920 20756c25 6b636974     t %u in %lu tick
   136e8:	000d0a73 20646142 666e6f63 72756769     s...Bad configur
   136f8:	6f697461 0d0a2e6e 00000000 61666544     ation.......Defa
   13708:	20746c75 65736163 7453203a 3d657461     ult case: State=
   13718:	30257830 0d0a7832 00000000 2d746f69     0x%02x......iot-
   13728:	6d632f32 73252f64 746d662f 6f736a2f     2/cmd/%s/fmt/jso
   13738:	0000006e 45475741 73252f53 6174732f     n...AWGES/%s/sta
   13748:	00737574 5454514d 6d654420 0000006f     tus.MQTT Demo...

00013758 <_ctype_>:
   13758:	20202000 20202020 28282020 20282828     .         ((((( 
   13768:	20202020 20202020 20202020 20202020                     
   13778:	10108820 10101010 10101010 10101010      ...............
   13788:	04040410 04040404 10040404 10101010     ................
   13798:	41411010 41414141 01010101 01010101     ..AAAAAA........
   137a8:	01010101 01010101 01010101 10101010     ................
   137b8:	42421010 42424242 02020202 02020202     ..BBBBBB........
   137c8:	02020202 02020202 02020202 10101010     ................
   137d8:	00000020 00000000 00000000 00000000      ...............
	...
   13858:	00004300                                .C..

0001385c <_global_impure_ptr>:
   1385c:	200001d4                                ... 

00013860 <__sf_fake_stdin>:
	...

00013880 <__sf_fake_stdout>:
	...

000138a0 <__sf_fake_stderr>:
	...
   138c0:	2b302d23 6c680020 6665004c 47464567     #-0+ .hlL.efgEFG
   138d0:	32313000 36353433 41393837 45444342     .0123456789ABCDE
   138e0:	31300046 35343332 39383736 64636261     F.0123456789abcd
   138f0:	00006665                                ef..

000138f4 <_init>:
   138f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   138f6:	46c0      	nop			; (mov r8, r8)
   138f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
   138fa:	bc08      	pop	{r3}
   138fc:	469e      	mov	lr, r3
   138fe:	4770      	bx	lr

00013900 <__init_array_start>:
   13900:	000000d9 	.word	0x000000d9

00013904 <_fini>:
   13904:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   13906:	46c0      	nop			; (mov r8, r8)
   13908:	bcf8      	pop	{r3, r4, r5, r6, r7}
   1390a:	bc08      	pop	{r3}
   1390c:	469e      	mov	lr, r3
   1390e:	4770      	bx	lr

00013910 <__fini_array_start>:
   13910:	000000b1 	.word	0x000000b1
