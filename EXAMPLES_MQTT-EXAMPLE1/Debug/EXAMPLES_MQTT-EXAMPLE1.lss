
EXAMPLES_MQTT-EXAMPLE1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00013664  00000000  00000000  00008000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000238  20000000  00013664  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00003300  20000238  0001389c  00020238  2**2
                  ALLOC
  3 .stack        00002000  20003538  00016b9c  00020238  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  00020238  2**0
                  CONTENTS, READONLY
  5 .comment      0000005b  00000000  00000000  00020260  2**0
                  CONTENTS, READONLY
  6 .debug_info   00066f30  00000000  00000000  000202bb  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000dd02  00000000  00000000  000871eb  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    0001c668  00000000  00000000  00094eed  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00001c90  00000000  00000000  000b1555  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 000020e8  00000000  00000000  000b31e5  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  0003377f  00000000  00000000  000b52cd  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00045d21  00000000  00000000  000e8a4c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00094a18  00000000  00000000  0012e76d  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00005230  00000000  00000000  001c3188  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <_sfixed>:
    config_adc.positive_input = SAMD20_SENSOR_ADC_TEMP;
    adc_init(&adc_instance, ADC, &config_adc);
    first_init = 1;
  }
#endif
}
       0:	20005538 	.word	0x20005538
       4:	00002751 	.word	0x00002751
       8:	0000274d 	.word	0x0000274d
       c:	0000274d 	.word	0x0000274d
	...
      2c:	0000274d 	.word	0x0000274d
	...
      38:	0000274d 	.word	0x0000274d
      3c:	0000274d 	.word	0x0000274d
      40:	0000274d 	.word	0x0000274d
      44:	0000274d 	.word	0x0000274d
      48:	00002731 	.word	0x00002731
      4c:	00000709 	.word	0x00000709
      50:	0000042d 	.word	0x0000042d
      54:	0000274d 	.word	0x0000274d
      58:	0000274d 	.word	0x0000274d
      5c:	0000274d 	.word	0x0000274d
      60:	0000274d 	.word	0x0000274d
      64:	000010b5 	.word	0x000010b5
      68:	000010c5 	.word	0x000010c5
      6c:	000010d5 	.word	0x000010d5
      70:	000010e5 	.word	0x000010e5
      74:	000010f5 	.word	0x000010f5
      78:	00001105 	.word	0x00001105
      7c:	0000274d 	.word	0x0000274d
      80:	0000274d 	.word	0x0000274d
      84:	0000274d 	.word	0x0000274d
      88:	000026e9 	.word	0x000026e9
      8c:	000026f9 	.word	0x000026f9
      90:	00002709 	.word	0x00002709
      94:	0000274d 	.word	0x0000274d
      98:	0000274d 	.word	0x0000274d
      9c:	0000274d 	.word	0x0000274d
      a0:	0000274d 	.word	0x0000274d
      a4:	0000274d 	.word	0x0000274d
      a8:	0000274d 	.word	0x0000274d
      ac:	0000274d 	.word	0x0000274d

000000b0 <__do_global_dtors_aux>:
      b0:	b510      	push	{r4, lr}
      b2:	4c06      	ldr	r4, [pc, #24]	; (cc <__do_global_dtors_aux+0x1c>)
      b4:	7823      	ldrb	r3, [r4, #0]
      b6:	2b00      	cmp	r3, #0
      b8:	d107      	bne.n	ca <__do_global_dtors_aux+0x1a>
      ba:	4b05      	ldr	r3, [pc, #20]	; (d0 <__do_global_dtors_aux+0x20>)
      bc:	2b00      	cmp	r3, #0
      be:	d002      	beq.n	c6 <__do_global_dtors_aux+0x16>
      c0:	4804      	ldr	r0, [pc, #16]	; (d4 <__do_global_dtors_aux+0x24>)
      c2:	e000      	b.n	c6 <__do_global_dtors_aux+0x16>
      c4:	bf00      	nop
      c6:	2301      	movs	r3, #1
      c8:	7023      	strb	r3, [r4, #0]
      ca:	bd10      	pop	{r4, pc}
      cc:	20000238 	.word	0x20000238
      d0:	00000000 	.word	0x00000000
      d4:	00013664 	.word	0x00013664

000000d8 <frame_dummy>:
      d8:	b508      	push	{r3, lr}
      da:	4b08      	ldr	r3, [pc, #32]	; (fc <frame_dummy+0x24>)
      dc:	2b00      	cmp	r3, #0
      de:	d003      	beq.n	e8 <frame_dummy+0x10>
      e0:	4807      	ldr	r0, [pc, #28]	; (100 <frame_dummy+0x28>)
      e2:	4908      	ldr	r1, [pc, #32]	; (104 <frame_dummy+0x2c>)
      e4:	e000      	b.n	e8 <frame_dummy+0x10>
      e6:	bf00      	nop
      e8:	4807      	ldr	r0, [pc, #28]	; (108 <frame_dummy+0x30>)
      ea:	6803      	ldr	r3, [r0, #0]
      ec:	2b00      	cmp	r3, #0
      ee:	d100      	bne.n	f2 <frame_dummy+0x1a>
      f0:	bd08      	pop	{r3, pc}
      f2:	4b06      	ldr	r3, [pc, #24]	; (10c <frame_dummy+0x34>)
      f4:	2b00      	cmp	r3, #0
      f6:	d0fb      	beq.n	f0 <frame_dummy+0x18>
      f8:	4798      	blx	r3
      fa:	e7f9      	b.n	f0 <frame_dummy+0x18>
      fc:	00000000 	.word	0x00000000
     100:	00013664 	.word	0x00013664
     104:	2000023c 	.word	0x2000023c
     108:	00013664 	.word	0x00013664
     10c:	00000000 	.word	0x00000000

00000110 <delay_init>:
 *
 * This must be called during start up to initialize the delay routine with
 * the current used main clock. It must run any time the main CPU clock is changed.
 */
void delay_init(void)
{
     110:	b510      	push	{r4, lr}
	cycles_per_ms = system_gclk_gen_get_hz(0);
     112:	2000      	movs	r0, #0
     114:	4b08      	ldr	r3, [pc, #32]	; (138 <delay_init+0x28>)
     116:	4798      	blx	r3
	cycles_per_ms /= 1000;
     118:	4c08      	ldr	r4, [pc, #32]	; (13c <delay_init+0x2c>)
     11a:	21fa      	movs	r1, #250	; 0xfa
     11c:	0089      	lsls	r1, r1, #2
     11e:	47a0      	blx	r4
     120:	4b07      	ldr	r3, [pc, #28]	; (140 <delay_init+0x30>)
     122:	6018      	str	r0, [r3, #0]
	cycles_per_us = cycles_per_ms / 1000;
     124:	21fa      	movs	r1, #250	; 0xfa
     126:	0089      	lsls	r1, r1, #2
     128:	47a0      	blx	r4
     12a:	4b06      	ldr	r3, [pc, #24]	; (144 <delay_init+0x34>)
     12c:	6018      	str	r0, [r3, #0]

	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
     12e:	2205      	movs	r2, #5
     130:	4b05      	ldr	r3, [pc, #20]	; (148 <delay_init+0x38>)
     132:	601a      	str	r2, [r3, #0]
}
     134:	bd10      	pop	{r4, pc}
     136:	46c0      	nop			; (mov r8, r8)
     138:	00002065 	.word	0x00002065
     13c:	00010525 	.word	0x00010525
     140:	20000004 	.word	0x20000004
     144:	20000000 	.word	0x20000000
     148:	e000e010 	.word	0xe000e010

0000014c <delay_cycles_us>:
 *
 * \param n  Number of microseconds to wait
 */
void delay_cycles_us(
		uint32_t n)
{
     14c:	b530      	push	{r4, r5, lr}
	while (n--) {
		/* Devide up to blocks of 10u */
		delay_cycles(cycles_per_us);
     14e:	4b08      	ldr	r3, [pc, #32]	; (170 <delay_cycles_us+0x24>)
     150:	681c      	ldr	r4, [r3, #0]
 */
static inline void delay_cycles(
		const uint32_t n)
{
	if (n > 0) {
		SysTick->LOAD = n;
     152:	4a08      	ldr	r2, [pc, #32]	; (174 <delay_cycles_us+0x28>)
		SysTick->VAL = 0;
     154:	2500      	movs	r5, #0

		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     156:	2180      	movs	r1, #128	; 0x80
     158:	0249      	lsls	r1, r1, #9
 * \param n  Number of microseconds to wait
 */
void delay_cycles_us(
		uint32_t n)
{
	while (n--) {
     15a:	e006      	b.n	16a <delay_cycles_us+0x1e>
 * \param n  Number of cycles to delay
 */
static inline void delay_cycles(
		const uint32_t n)
{
	if (n > 0) {
     15c:	2c00      	cmp	r4, #0
     15e:	d004      	beq.n	16a <delay_cycles_us+0x1e>
		SysTick->LOAD = n;
     160:	6054      	str	r4, [r2, #4]
		SysTick->VAL = 0;
     162:	6095      	str	r5, [r2, #8]

		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     164:	6813      	ldr	r3, [r2, #0]
     166:	420b      	tst	r3, r1
     168:	d0fc      	beq.n	164 <delay_cycles_us+0x18>
     16a:	3801      	subs	r0, #1
     16c:	d2f6      	bcs.n	15c <delay_cycles_us+0x10>
		/* Devide up to blocks of 10u */
		delay_cycles(cycles_per_us);
	}
}
     16e:	bd30      	pop	{r4, r5, pc}
     170:	20000000 	.word	0x20000000
     174:	e000e010 	.word	0xe000e010

00000178 <delay_cycles_ms>:
 *
 * \param n  Number of milliseconds to wait
 */
void delay_cycles_ms(
		uint32_t n)
{
     178:	b530      	push	{r4, r5, lr}
	while (n--) {
		/* Devide up to blocks of 1ms */
		delay_cycles(cycles_per_ms);
     17a:	4b08      	ldr	r3, [pc, #32]	; (19c <delay_cycles_ms+0x24>)
     17c:	681c      	ldr	r4, [r3, #0]
 */
static inline void delay_cycles(
		const uint32_t n)
{
	if (n > 0) {
		SysTick->LOAD = n;
     17e:	4a08      	ldr	r2, [pc, #32]	; (1a0 <delay_cycles_ms+0x28>)
		SysTick->VAL = 0;
     180:	2500      	movs	r5, #0

		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     182:	2180      	movs	r1, #128	; 0x80
     184:	0249      	lsls	r1, r1, #9
 * \param n  Number of milliseconds to wait
 */
void delay_cycles_ms(
		uint32_t n)
{
	while (n--) {
     186:	e006      	b.n	196 <delay_cycles_ms+0x1e>
 * \param n  Number of cycles to delay
 */
static inline void delay_cycles(
		const uint32_t n)
{
	if (n > 0) {
     188:	2c00      	cmp	r4, #0
     18a:	d004      	beq.n	196 <delay_cycles_ms+0x1e>
		SysTick->LOAD = n;
     18c:	6054      	str	r4, [r2, #4]
		SysTick->VAL = 0;
     18e:	6095      	str	r5, [r2, #8]

		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     190:	6813      	ldr	r3, [r2, #0]
     192:	420b      	tst	r3, r1
     194:	d0fc      	beq.n	190 <delay_cycles_ms+0x18>
     196:	3801      	subs	r0, #1
     198:	d2f6      	bcs.n	188 <delay_cycles_ms+0x10>
		/* Devide up to blocks of 1ms */
		delay_cycles(cycles_per_ms);
	}
}
     19a:	bd30      	pop	{r4, r5, pc}
     19c:	20000004 	.word	0x20000004
     1a0:	e000e010 	.word	0xe000e010

000001a4 <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
     1a4:	4b0c      	ldr	r3, [pc, #48]	; (1d8 <cpu_irq_enter_critical+0x34>)
     1a6:	681b      	ldr	r3, [r3, #0]
     1a8:	2b00      	cmp	r3, #0
     1aa:	d110      	bne.n	1ce <cpu_irq_enter_critical+0x2a>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
     1ac:	f3ef 8310 	mrs	r3, PRIMASK
		if (cpu_irq_is_enabled()) {
     1b0:	2b00      	cmp	r3, #0
     1b2:	d109      	bne.n	1c8 <cpu_irq_enter_critical+0x24>
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
     1b4:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
     1b6:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
     1ba:	2200      	movs	r2, #0
     1bc:	4b07      	ldr	r3, [pc, #28]	; (1dc <cpu_irq_enter_critical+0x38>)
     1be:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
     1c0:	3201      	adds	r2, #1
     1c2:	4b07      	ldr	r3, [pc, #28]	; (1e0 <cpu_irq_enter_critical+0x3c>)
     1c4:	701a      	strb	r2, [r3, #0]
     1c6:	e002      	b.n	1ce <cpu_irq_enter_critical+0x2a>
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
     1c8:	2200      	movs	r2, #0
     1ca:	4b05      	ldr	r3, [pc, #20]	; (1e0 <cpu_irq_enter_critical+0x3c>)
     1cc:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
     1ce:	4a02      	ldr	r2, [pc, #8]	; (1d8 <cpu_irq_enter_critical+0x34>)
     1d0:	6813      	ldr	r3, [r2, #0]
     1d2:	3301      	adds	r3, #1
     1d4:	6013      	str	r3, [r2, #0]
}
     1d6:	4770      	bx	lr
     1d8:	20000254 	.word	0x20000254
     1dc:	20000008 	.word	0x20000008
     1e0:	20000258 	.word	0x20000258

000001e4 <cpu_irq_leave_critical>:
void cpu_irq_leave_critical(void)
{
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
     1e4:	4b08      	ldr	r3, [pc, #32]	; (208 <cpu_irq_leave_critical+0x24>)
     1e6:	681a      	ldr	r2, [r3, #0]
     1e8:	3a01      	subs	r2, #1
     1ea:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
     1ec:	681b      	ldr	r3, [r3, #0]
     1ee:	2b00      	cmp	r3, #0
     1f0:	d109      	bne.n	206 <cpu_irq_leave_critical+0x22>
     1f2:	4b06      	ldr	r3, [pc, #24]	; (20c <cpu_irq_leave_critical+0x28>)
     1f4:	781b      	ldrb	r3, [r3, #0]
     1f6:	2b00      	cmp	r3, #0
     1f8:	d005      	beq.n	206 <cpu_irq_leave_critical+0x22>
		cpu_irq_enable();
     1fa:	2201      	movs	r2, #1
     1fc:	4b04      	ldr	r3, [pc, #16]	; (210 <cpu_irq_leave_critical+0x2c>)
     1fe:	701a      	strb	r2, [r3, #0]
     200:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
     204:	b662      	cpsie	i
	}
}
     206:	4770      	bx	lr
     208:	20000254 	.word	0x20000254
     20c:	20000258 	.word	0x20000258
     210:	20000008 	.word	0x20000008

00000214 <system_board_init>:




void system_board_init(void)
{
     214:	b5f0      	push	{r4, r5, r6, r7, lr}
     216:	4647      	mov	r7, r8
     218:	b480      	push	{r7}
     21a:	b082      	sub	sp, #8
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
	config->input_pull = PORT_PIN_PULL_UP;
     21c:	ac01      	add	r4, sp, #4
     21e:	2601      	movs	r6, #1
     220:	7066      	strb	r6, [r4, #1]
	config->powersave  = false;
     222:	2700      	movs	r7, #0
     224:	70a7      	strb	r7, [r4, #2]
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);

	/* Configure LEDs as outputs, turn them off */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
     226:	7026      	strb	r6, [r4, #0]
	port_pin_set_config(LED_0_PIN, &pin_conf);
     228:	2013      	movs	r0, #19
     22a:	1c21      	adds	r1, r4, #0
     22c:	4d27      	ldr	r5, [pc, #156]	; (2cc <system_board_init+0xb8>)
     22e:	47a8      	blx	r5
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
     230:	4b27      	ldr	r3, [pc, #156]	; (2d0 <system_board_init+0xbc>)
     232:	4698      	mov	r8, r3
     234:	2380      	movs	r3, #128	; 0x80
     236:	031b      	lsls	r3, r3, #12
     238:	4642      	mov	r2, r8
     23a:	6193      	str	r3, [r2, #24]
	port_pin_set_output_level(LED_0_PIN, LED_0_INACTIVE);

	/* Set buttons as inputs */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
     23c:	7027      	strb	r7, [r4, #0]
	pin_conf.input_pull = PORT_PIN_PULL_UP;
     23e:	7066      	strb	r6, [r4, #1]
	port_pin_set_config(BUTTON_0_PIN, &pin_conf);
     240:	201c      	movs	r0, #28
     242:	1c21      	adds	r1, r4, #0
     244:	47a8      	blx	r5
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
	config->input_pull = PORT_PIN_PULL_UP;
     246:	7066      	strb	r6, [r4, #1]
	config->powersave  = false;
     248:	70a7      	strb	r7, [r4, #2]
	
#ifdef CONF_BOARD_AT86RFX	

	port_get_config_defaults(&pin_conf);
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
     24a:	7026      	strb	r6, [r4, #0]
	port_pin_set_config(AT86RFX_SPI_SCK, &pin_conf);
     24c:	2052      	movs	r0, #82	; 0x52
     24e:	1c21      	adds	r1, r4, #0
     250:	47a8      	blx	r5
	port_pin_set_config(AT86RFX_SPI_MOSI, &pin_conf);
     252:	203e      	movs	r0, #62	; 0x3e
     254:	1c21      	adds	r1, r4, #0
     256:	47a8      	blx	r5
	port_pin_set_config(AT86RFX_SPI_CS, &pin_conf);
     258:	203f      	movs	r0, #63	; 0x3f
     25a:	1c21      	adds	r1, r4, #0
     25c:	47a8      	blx	r5
	port_pin_set_config(AT86RFX_RST_PIN, &pin_conf);
     25e:	202f      	movs	r0, #47	; 0x2f
     260:	1c21      	adds	r1, r4, #0
     262:	47a8      	blx	r5
	port_pin_set_config(AT86RFX_SLP_PIN, &pin_conf);
     264:	2014      	movs	r0, #20
     266:	1c21      	adds	r1, r4, #0
     268:	47a8      	blx	r5
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
     26a:	2280      	movs	r2, #128	; 0x80
     26c:	02d2      	lsls	r2, r2, #11
     26e:	4b19      	ldr	r3, [pc, #100]	; (2d4 <system_board_init+0xc0>)
     270:	619a      	str	r2, [r3, #24]
     272:	3b80      	subs	r3, #128	; 0x80
     274:	2280      	movs	r2, #128	; 0x80
     276:	05d2      	lsls	r2, r2, #23
     278:	619a      	str	r2, [r3, #24]
     27a:	2280      	movs	r2, #128	; 0x80
     27c:	0612      	lsls	r2, r2, #24
     27e:	619a      	str	r2, [r3, #24]
     280:	2280      	movs	r2, #128	; 0x80
     282:	0212      	lsls	r2, r2, #8
     284:	619a      	str	r2, [r3, #24]
     286:	2380      	movs	r3, #128	; 0x80
     288:	035b      	lsls	r3, r3, #13
     28a:	4642      	mov	r2, r8
     28c:	6193      	str	r3, [r2, #24]
	port_pin_set_output_level(AT86RFX_SPI_MOSI, true);
	port_pin_set_output_level(AT86RFX_SPI_CS, true);
	port_pin_set_output_level(AT86RFX_RST_PIN, true);
	port_pin_set_output_level(AT86RFX_SLP_PIN, true);

	pin_conf.direction  = PORT_PIN_DIR_INPUT;
     28e:	7027      	strb	r7, [r4, #0]
	port_pin_set_config(AT86RFX_SPI_MISO, &pin_conf);
     290:	2053      	movs	r0, #83	; 0x53
     292:	1c21      	adds	r1, r4, #0
     294:	47a8      	blx	r5
	PM->APBCMASK.reg |= (1<<PM_APBCMASK_RFCTRL_Pos);
     296:	4a10      	ldr	r2, [pc, #64]	; (2d8 <system_board_init+0xc4>)
     298:	6a13      	ldr	r3, [r2, #32]
     29a:	2180      	movs	r1, #128	; 0x80
     29c:	0389      	lsls	r1, r1, #14
     29e:	430b      	orrs	r3, r1
     2a0:	6213      	str	r3, [r2, #32]
	REG_RFCTRL_FECFG = RFCTRL_CFG_ANT_DIV;
     2a2:	2204      	movs	r2, #4
     2a4:	4b0d      	ldr	r3, [pc, #52]	; (2dc <system_board_init+0xc8>)
     2a6:	801a      	strh	r2, [r3, #0]
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
     2a8:	466b      	mov	r3, sp
     2aa:	709e      	strb	r6, [r3, #2]
	config->powersave    = false;
     2ac:	70df      	strb	r7, [r3, #3]
	struct system_pinmux_config config_pinmux;
	system_pinmux_get_config_defaults(&config_pinmux);
	config_pinmux.mux_position = MUX_PA09F_RFCTRL_FECTRL1 ;
     2ae:	2305      	movs	r3, #5
     2b0:	466a      	mov	r2, sp
     2b2:	7013      	strb	r3, [r2, #0]
	config_pinmux.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
     2b4:	7056      	strb	r6, [r2, #1]
	system_pinmux_pin_set_config(PIN_RFCTRL1, &config_pinmux);
     2b6:	2009      	movs	r0, #9
     2b8:	4669      	mov	r1, sp
     2ba:	4c09      	ldr	r4, [pc, #36]	; (2e0 <system_board_init+0xcc>)
     2bc:	47a0      	blx	r4
	system_pinmux_pin_set_config(PIN_RFCTRL2, &config_pinmux);
     2be:	200c      	movs	r0, #12
     2c0:	4669      	mov	r1, sp
     2c2:	47a0      	blx	r4
#endif

}
     2c4:	b002      	add	sp, #8
     2c6:	bc04      	pop	{r2}
     2c8:	4690      	mov	r8, r2
     2ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
     2cc:	0000051d 	.word	0x0000051d
     2d0:	41004400 	.word	0x41004400
     2d4:	41004500 	.word	0x41004500
     2d8:	40000400 	.word	0x40000400
     2dc:	42005400 	.word	0x42005400
     2e0:	000022cd 	.word	0x000022cd

000002e4 <_extint_enable>:
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	/* Enable all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		eics[i]->CTRL.reg |= EIC_CTRL_ENABLE;
     2e4:	4a04      	ldr	r2, [pc, #16]	; (2f8 <_extint_enable+0x14>)
     2e6:	7811      	ldrb	r1, [r2, #0]
     2e8:	2302      	movs	r3, #2
     2ea:	430b      	orrs	r3, r1
     2ec:	7013      	strb	r3, [r2, #0]
static inline bool extint_is_syncing(void)
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
     2ee:	7853      	ldrb	r3, [r2, #1]
     2f0:	b25b      	sxtb	r3, r3
     2f2:	2b00      	cmp	r3, #0
     2f4:	dbfb      	blt.n	2ee <_extint_enable+0xa>
	}

	while (extint_is_syncing()) {
		/* Wait for all hardware modules to complete synchronization */
	}
}
     2f6:	4770      	bx	lr
     2f8:	40001800 	.word	0x40001800

000002fc <_system_extint_init>:
 * \note When SYSTEM module is used, this function will be invoked by
 * \ref system_init() automatically if the module is included.
 */
void _system_extint_init(void);
void _system_extint_init(void)
{
     2fc:	b500      	push	{lr}
     2fe:	b083      	sub	sp, #12
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
	switch (bus) {
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
     300:	4a12      	ldr	r2, [pc, #72]	; (34c <_system_extint_init+0x50>)
     302:	6991      	ldr	r1, [r2, #24]
     304:	2340      	movs	r3, #64	; 0x40
     306:	430b      	orrs	r3, r1
     308:	6193      	str	r3, [r2, #24]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
     30a:	a901      	add	r1, sp, #4
     30c:	2300      	movs	r3, #0
     30e:	700b      	strb	r3, [r1, #0]

	/* Configure the generic clock for the module and enable it */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
	gclk_chan_conf.source_generator = EXTINT_CLOCK_SOURCE;
	system_gclk_chan_set_config(EIC_GCLK_ID, &gclk_chan_conf);
     310:	2005      	movs	r0, #5
     312:	4b0f      	ldr	r3, [pc, #60]	; (350 <_system_extint_init+0x54>)
     314:	4798      	blx	r3

	/* Enable the clock anyway, since when needed it will be requested
	 * by External Interrupt driver */
	system_gclk_chan_enable(EIC_GCLK_ID);
     316:	2005      	movs	r0, #5
     318:	4b0e      	ldr	r3, [pc, #56]	; (354 <_system_extint_init+0x58>)
     31a:	4798      	blx	r3

	/* Reset all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		eics[i]->CTRL.reg |= EIC_CTRL_SWRST;
     31c:	4a0e      	ldr	r2, [pc, #56]	; (358 <_system_extint_init+0x5c>)
     31e:	7811      	ldrb	r1, [r2, #0]
     320:	2301      	movs	r3, #1
     322:	430b      	orrs	r3, r1
     324:	7013      	strb	r3, [r2, #0]
     326:	7853      	ldrb	r3, [r2, #1]
     328:	b25b      	sxtb	r3, r3
     32a:	2b00      	cmp	r3, #0
     32c:	dbfb      	blt.n	326 <_system_extint_init+0x2a>
     32e:	4b0b      	ldr	r3, [pc, #44]	; (35c <_system_extint_init+0x60>)
     330:	1c19      	adds	r1, r3, #0
     332:	3140      	adds	r1, #64	; 0x40

	/* Reset the software module */
#if EXTINT_CALLBACK_MODE == true
	/* Clear callback registration table */
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
		_extint_dev.callbacks[j] = NULL;
     334:	2200      	movs	r2, #0
     336:	c304      	stmia	r3!, {r2}
	}

	/* Reset the software module */
#if EXTINT_CALLBACK_MODE == true
	/* Clear callback registration table */
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
     338:	428b      	cmp	r3, r1
     33a:	d1fc      	bne.n	336 <_system_extint_init+0x3a>
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
     33c:	2210      	movs	r2, #16
     33e:	4b08      	ldr	r3, [pc, #32]	; (360 <_system_extint_init+0x64>)
     340:	601a      	str	r2, [r3, #0]
	}
	system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_EIC);
#endif

	/* Enables the driver for further use */
	_extint_enable();
     342:	4b08      	ldr	r3, [pc, #32]	; (364 <_system_extint_init+0x68>)
     344:	4798      	blx	r3
}
     346:	b003      	add	sp, #12
     348:	bd00      	pop	{pc}
     34a:	46c0      	nop			; (mov r8, r8)
     34c:	40000400 	.word	0x40000400
     350:	0000217d 	.word	0x0000217d
     354:	000020f1 	.word	0x000020f1
     358:	40001800 	.word	0x40001800
     35c:	20002a88 	.word	0x20002a88
     360:	e000e100 	.word	0xe000e100
     364:	000002e5 	.word	0x000002e5

00000368 <extint_chan_set_config>:

 */
void extint_chan_set_config(
		const uint8_t channel,
		const struct extint_chan_conf *const config)
{
     368:	b5f0      	push	{r4, r5, r6, r7, lr}
     36a:	b083      	sub	sp, #12
     36c:	1c05      	adds	r5, r0, #0
     36e:	1c0c      	adds	r4, r1, #0
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     370:	a901      	add	r1, sp, #4
     372:	2300      	movs	r3, #0
     374:	704b      	strb	r3, [r1, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
	config->powersave    = false;
     376:	70cb      	strb	r3, [r1, #3]
			config->detection_criteria)));

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = config->gpio_pin_mux;
     378:	7923      	ldrb	r3, [r4, #4]
     37a:	700b      	strb	r3, [r1, #0]
	pinmux_config.direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->gpio_pin_pull;
     37c:	7a23      	ldrb	r3, [r4, #8]
     37e:	708b      	strb	r3, [r1, #2]
	system_pinmux_pin_set_config(config->gpio_pin, &pinmux_config);
     380:	7820      	ldrb	r0, [r4, #0]
     382:	4b15      	ldr	r3, [pc, #84]	; (3d8 <extint_chan_set_config+0x70>)
     384:	4798      	blx	r3
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

		return eics[eic_index];
	} else {
		Assert(false);
		return NULL;
     386:	2600      	movs	r6, #0
static inline Eic * _extint_get_eic_from_channel(
		const uint8_t channel)
{
	uint8_t eic_index = (channel / 32);

	if (eic_index < EIC_INST_NUM) {
     388:	2d1f      	cmp	r5, #31
     38a:	d800      	bhi.n	38e <extint_chan_set_config+0x26>
		/* Array of available EICs. */
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

		return eics[eic_index];
     38c:	4e13      	ldr	r6, [pc, #76]	; (3dc <extint_chan_set_config+0x74>)

	/* Get a pointer to the module hardware instance */
	Eic *const EIC_module = _extint_get_eic_from_channel(channel);

	uint32_t config_pos = (4 * (channel % 8));
     38e:	2207      	movs	r2, #7
     390:	402a      	ands	r2, r5
     392:	0092      	lsls	r2, r2, #2
	uint32_t new_config;

	/* Determine the channel's new edge detection configuration */
	new_config = (config->detection_criteria << EIC_CONFIG_SENSE0_Pos);
     394:	7ae0      	ldrb	r0, [r4, #11]

	/* Enable the hardware signal filter if requested in the config */
	if (config->filter_input_signal) {
     396:	7aa3      	ldrb	r3, [r4, #10]
     398:	2b00      	cmp	r3, #0
     39a:	d001      	beq.n	3a0 <extint_chan_set_config+0x38>
		new_config |= EIC_CONFIG_FILTEN0;
     39c:	2308      	movs	r3, #8
     39e:	4318      	orrs	r0, r3
     3a0:	08eb      	lsrs	r3, r5, #3
     3a2:	009b      	lsls	r3, r3, #2
     3a4:	18f3      	adds	r3, r6, r3
	}

	/* Clear the existing and set the new channel configuration */
	EIC_module->CONFIG[channel / 8].reg
		= (EIC_module->CONFIG[channel / 8].reg &
     3a6:	6999      	ldr	r1, [r3, #24]
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
			(new_config << config_pos);
     3a8:	4090      	lsls	r0, r2
	}

	/* Clear the existing and set the new channel configuration */
	EIC_module->CONFIG[channel / 8].reg
		= (EIC_module->CONFIG[channel / 8].reg &
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
     3aa:	270f      	movs	r7, #15
     3ac:	4097      	lsls	r7, r2
		new_config |= EIC_CONFIG_FILTEN0;
	}

	/* Clear the existing and set the new channel configuration */
	EIC_module->CONFIG[channel / 8].reg
		= (EIC_module->CONFIG[channel / 8].reg &
     3ae:	43b9      	bics	r1, r7
     3b0:	1c0a      	adds	r2, r1, #0
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
     3b2:	4302      	orrs	r2, r0
		new_config |= EIC_CONFIG_FILTEN0;
	}

	/* Clear the existing and set the new channel configuration */
	EIC_module->CONFIG[channel / 8].reg
		= (EIC_module->CONFIG[channel / 8].reg &
     3b4:	619a      	str	r2, [r3, #24]
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
			(new_config << config_pos);

	/* Set the channel's new wake up mode setting */
	if (config->wake_if_sleeping) {
     3b6:	7a63      	ldrb	r3, [r4, #9]
     3b8:	2b00      	cmp	r3, #0
     3ba:	d006      	beq.n	3ca <extint_chan_set_config+0x62>
		EIC_module->WAKEUP.reg |=  (1UL << channel);
     3bc:	6973      	ldr	r3, [r6, #20]
     3be:	2201      	movs	r2, #1
     3c0:	40aa      	lsls	r2, r5
     3c2:	1c15      	adds	r5, r2, #0
     3c4:	431d      	orrs	r5, r3
     3c6:	6175      	str	r5, [r6, #20]
     3c8:	e004      	b.n	3d4 <extint_chan_set_config+0x6c>
	} else {
		EIC_module->WAKEUP.reg &= ~(1UL << channel);
     3ca:	6973      	ldr	r3, [r6, #20]
     3cc:	2201      	movs	r2, #1
     3ce:	40aa      	lsls	r2, r5
     3d0:	4393      	bics	r3, r2
     3d2:	6173      	str	r3, [r6, #20]
	}
}
     3d4:	b003      	add	sp, #12
     3d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
     3d8:	000022cd 	.word	0x000022cd
     3dc:	40001800 	.word	0x40001800

000003e0 <extint_register_callback>:
	/* Sanity check arguments */
	Assert(callback);

	if (type != EXTINT_CALLBACK_TYPE_DETECT) {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
     3e0:	2317      	movs	r3, #23
	const enum extint_callback_type type)
{
	/* Sanity check arguments */
	Assert(callback);

	if (type != EXTINT_CALLBACK_TYPE_DETECT) {
     3e2:	2a00      	cmp	r2, #0
     3e4:	d10d      	bne.n	402 <extint_register_callback+0x22>
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	if (_extint_dev.callbacks[channel] == NULL) {
     3e6:	008b      	lsls	r3, r1, #2
     3e8:	4a07      	ldr	r2, [pc, #28]	; (408 <extint_register_callback+0x28>)
     3ea:	589b      	ldr	r3, [r3, r2]
     3ec:	2b00      	cmp	r3, #0
     3ee:	d103      	bne.n	3f8 <extint_register_callback+0x18>
		_extint_dev.callbacks[channel] = callback;
     3f0:	0089      	lsls	r1, r1, #2
     3f2:	5088      	str	r0, [r1, r2]
		return STATUS_OK;
     3f4:	2300      	movs	r3, #0
     3f6:	e004      	b.n	402 <extint_register_callback+0x22>
	} else if (_extint_dev.callbacks[channel] == callback) {
     3f8:	4283      	cmp	r3, r0
     3fa:	d001      	beq.n	400 <extint_register_callback+0x20>
		return STATUS_OK;
	}

	return STATUS_ERR_ALREADY_INITIALIZED;
     3fc:	231d      	movs	r3, #29
     3fe:	e000      	b.n	402 <extint_register_callback+0x22>

	if (_extint_dev.callbacks[channel] == NULL) {
		_extint_dev.callbacks[channel] = callback;
		return STATUS_OK;
	} else if (_extint_dev.callbacks[channel] == callback) {
		return STATUS_OK;
     400:	2300      	movs	r3, #0
	}

	return STATUS_ERR_ALREADY_INITIALIZED;
}
     402:	1c18      	adds	r0, r3, #0
     404:	4770      	bx	lr
     406:	46c0      	nop			; (mov r8, r8)
     408:	20002a88 	.word	0x20002a88

0000040c <extint_chan_enable_callback>:

		eic->INTENSET.reg = (1UL << channel);
	}
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
     40c:	2317      	movs	r3, #23
 */
enum status_code extint_chan_enable_callback(
	const uint8_t channel,
	const enum extint_callback_type type)
{
	if (type == EXTINT_CALLBACK_TYPE_DETECT) {
     40e:	2900      	cmp	r1, #0
     410:	d107      	bne.n	422 <extint_chan_enable_callback+0x16>
	} else {
		Assert(false);
		return NULL;
     412:	2200      	movs	r2, #0
static inline Eic * _extint_get_eic_from_channel(
		const uint8_t channel)
{
	uint8_t eic_index = (channel / 32);

	if (eic_index < EIC_INST_NUM) {
     414:	281f      	cmp	r0, #31
     416:	d800      	bhi.n	41a <extint_chan_enable_callback+0xe>
		/* Array of available EICs. */
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

		return eics[eic_index];
     418:	4a03      	ldr	r2, [pc, #12]	; (428 <extint_chan_enable_callback+0x1c>)
		Eic *const eic = _extint_get_eic_from_channel(channel);

		eic->INTENSET.reg = (1UL << channel);
     41a:	2301      	movs	r3, #1
     41c:	4083      	lsls	r3, r0
     41e:	60d3      	str	r3, [r2, #12]
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
     420:	2300      	movs	r3, #0
}
     422:	1c18      	adds	r0, r3, #0
     424:	4770      	bx	lr
     426:	46c0      	nop			; (mov r8, r8)
     428:	40001800 	.word	0x40001800

0000042c <EIC_Handler>:
	return _current_channel;
}

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
     42c:	b570      	push	{r4, r5, r6, lr}
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
     42e:	2200      	movs	r2, #0
     430:	4b15      	ldr	r3, [pc, #84]	; (488 <EIC_Handler+0x5c>)
     432:	701a      	strb	r2, [r3, #0]
     434:	2300      	movs	r3, #0
 */
static inline bool extint_chan_is_detected(
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));
     436:	251f      	movs	r5, #31
		if (extint_chan_is_detected(_current_channel)) {
			/* Clear flag */
			extint_chan_clear_detected(_current_channel);
			/* Find any associated callback entries in the callback table */
			if (_extint_dev.callbacks[_current_channel] != NULL) {
     438:	4e14      	ldr	r6, [pc, #80]	; (48c <EIC_Handler+0x60>)

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
     43a:	4c13      	ldr	r4, [pc, #76]	; (488 <EIC_Handler+0x5c>)
static inline Eic * _extint_get_eic_from_channel(
		const uint8_t channel)
{
	uint8_t eic_index = (channel / 32);

	if (eic_index < EIC_INST_NUM) {
     43c:	2b1f      	cmp	r3, #31
     43e:	d919      	bls.n	474 <EIC_Handler+0x48>
     440:	e00f      	b.n	462 <EIC_Handler+0x36>
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

		return eics[eic_index];
	} else {
		Assert(false);
		return NULL;
     442:	2100      	movs	r1, #0
     444:	e000      	b.n	448 <EIC_Handler+0x1c>

	if (eic_index < EIC_INST_NUM) {
		/* Array of available EICs. */
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

		return eics[eic_index];
     446:	4912      	ldr	r1, [pc, #72]	; (490 <EIC_Handler+0x64>)
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));

	eic_module->INTFLAG.reg = eic_mask;
     448:	610a      	str	r2, [r1, #16]
		if (extint_chan_is_detected(_current_channel)) {
			/* Clear flag */
			extint_chan_clear_detected(_current_channel);
			/* Find any associated callback entries in the callback table */
			if (_extint_dev.callbacks[_current_channel] != NULL) {
     44a:	009b      	lsls	r3, r3, #2
     44c:	599b      	ldr	r3, [r3, r6]
     44e:	2b00      	cmp	r3, #0
     450:	d000      	beq.n	454 <EIC_Handler+0x28>
				/* Run the registered callback */
				_extint_dev.callbacks[_current_channel]();
     452:	4798      	blx	r3

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
     454:	7823      	ldrb	r3, [r4, #0]
     456:	3301      	adds	r3, #1
     458:	b2db      	uxtb	r3, r3
     45a:	7023      	strb	r3, [r4, #0]
     45c:	2b0f      	cmp	r3, #15
     45e:	d9ed      	bls.n	43c <EIC_Handler+0x10>
     460:	e011      	b.n	486 <EIC_Handler+0x5a>
 */
static inline bool extint_chan_is_detected(
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));
     462:	1c29      	adds	r1, r5, #0
     464:	4019      	ands	r1, r3
     466:	2201      	movs	r2, #1
     468:	408a      	lsls	r2, r1

	return (eic_module->INTFLAG.reg & eic_mask);
     46a:	2100      	movs	r1, #0
     46c:	6909      	ldr	r1, [r1, #16]
		if (extint_chan_is_detected(_current_channel)) {
     46e:	4211      	tst	r1, r2
     470:	d1e7      	bne.n	442 <EIC_Handler+0x16>
     472:	e7ef      	b.n	454 <EIC_Handler+0x28>
 */
static inline bool extint_chan_is_detected(
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));
     474:	1c29      	adds	r1, r5, #0
     476:	4019      	ands	r1, r3
     478:	2201      	movs	r2, #1
     47a:	408a      	lsls	r2, r1

	return (eic_module->INTFLAG.reg & eic_mask);
     47c:	4904      	ldr	r1, [pc, #16]	; (490 <EIC_Handler+0x64>)
     47e:	6909      	ldr	r1, [r1, #16]
     480:	4211      	tst	r1, r2
     482:	d1e0      	bne.n	446 <EIC_Handler+0x1a>
     484:	e7e6      	b.n	454 <EIC_Handler+0x28>
				/* Run the registered callback */
				_extint_dev.callbacks[_current_channel]();
			}
		}
	}
}
     486:	bd70      	pop	{r4, r5, r6, pc}
     488:	20002ac8 	.word	0x20002ac8
     48c:	20002a88 	.word	0x20002a88
     490:	40001800 	.word	0x40001800

00000494 <nvm_set_config>:
 *                        EEPROM and/or auxiliary space configuration from being
 *                        altered
 */
enum status_code nvm_set_config(
		const struct nvm_config *const config)
{
     494:	b510      	push	{r4, lr}
			break;

		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
     496:	4a1e      	ldr	r2, [pc, #120]	; (510 <nvm_set_config+0x7c>)
     498:	69d1      	ldr	r1, [r2, #28]
     49a:	2304      	movs	r3, #4
     49c:	430b      	orrs	r3, r1
     49e:	61d3      	str	r3, [r2, #28]

	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBB, PM_APBBMASK_NVMCTRL);

	/* Clear error flags */
	nvm_module->STATUS.reg |= NVMCTRL_STATUS_MASK;
     4a0:	4b1c      	ldr	r3, [pc, #112]	; (514 <nvm_set_config+0x80>)
     4a2:	8b19      	ldrh	r1, [r3, #24]
     4a4:	2220      	movs	r2, #32
     4a6:	32ff      	adds	r2, #255	; 0xff
     4a8:	430a      	orrs	r2, r1
     4aa:	831a      	strh	r2, [r3, #24]
static inline bool nvm_is_ready(void)
{
	/* Get a pointer to the module hardware instance */
	Nvmctrl *const nvm_module = NVMCTRL;

	return nvm_module->INTFLAG.reg & NVMCTRL_INTFLAG_READY;
     4ac:	7d1a      	ldrb	r2, [r3, #20]

	/* Check if the module is busy */
	if (!nvm_is_ready()) {
		return STATUS_BUSY;
     4ae:	2305      	movs	r3, #5

	/* Clear error flags */
	nvm_module->STATUS.reg |= NVMCTRL_STATUS_MASK;

	/* Check if the module is busy */
	if (!nvm_is_ready()) {
     4b0:	07d2      	lsls	r2, r2, #31
     4b2:	d52b      	bpl.n	50c <nvm_set_config+0x78>
		return STATUS_BUSY;
	}

	/* Writing configuration to the CTRLB register */
	nvm_module->CTRLB.reg =
			NVMCTRL_CTRLB_SLEEPPRM(config->sleep_power_mode) |
     4b4:	7802      	ldrb	r2, [r0, #0]
     4b6:	0212      	lsls	r2, r2, #8
     4b8:	21c0      	movs	r1, #192	; 0xc0
     4ba:	0089      	lsls	r1, r1, #2
     4bc:	400a      	ands	r2, r1
     4be:	1c14      	adds	r4, r2, #0
			((config->manual_page_write & 0x01) << NVMCTRL_CTRLB_MANW_Pos) |
     4c0:	7841      	ldrb	r1, [r0, #1]
     4c2:	01c9      	lsls	r1, r1, #7
		return STATUS_BUSY;
	}

	/* Writing configuration to the CTRLB register */
	nvm_module->CTRLB.reg =
			NVMCTRL_CTRLB_SLEEPPRM(config->sleep_power_mode) |
     4c4:	22ff      	movs	r2, #255	; 0xff
     4c6:	1c13      	adds	r3, r2, #0
     4c8:	400b      	ands	r3, r1
     4ca:	1c22      	adds	r2, r4, #0
     4cc:	431a      	orrs	r2, r3
			((config->manual_page_write & 0x01) << NVMCTRL_CTRLB_MANW_Pos) |
			NVMCTRL_CTRLB_RWS(config->wait_states) |
			((config->disable_cache & 0x01) << NVMCTRL_CTRLB_CACHEDIS_Pos) |
     4ce:	78c3      	ldrb	r3, [r0, #3]
     4d0:	049b      	lsls	r3, r3, #18
     4d2:	4313      	orrs	r3, r2

	/* Writing configuration to the CTRLB register */
	nvm_module->CTRLB.reg =
			NVMCTRL_CTRLB_SLEEPPRM(config->sleep_power_mode) |
			((config->manual_page_write & 0x01) << NVMCTRL_CTRLB_MANW_Pos) |
			NVMCTRL_CTRLB_RWS(config->wait_states) |
     4d4:	7882      	ldrb	r2, [r0, #2]
     4d6:	0052      	lsls	r2, r2, #1
     4d8:	211e      	movs	r1, #30
     4da:	400a      	ands	r2, r1
     4dc:	4313      	orrs	r3, r2
			((config->disable_cache & 0x01) << NVMCTRL_CTRLB_CACHEDIS_Pos) |
			NVMCTRL_CTRLB_READMODE(config->cache_readmode);
     4de:	7902      	ldrb	r2, [r0, #4]
     4e0:	0412      	lsls	r2, r2, #16
     4e2:	21c0      	movs	r1, #192	; 0xc0
     4e4:	0289      	lsls	r1, r1, #10
     4e6:	400a      	ands	r2, r1
	/* Writing configuration to the CTRLB register */
	nvm_module->CTRLB.reg =
			NVMCTRL_CTRLB_SLEEPPRM(config->sleep_power_mode) |
			((config->manual_page_write & 0x01) << NVMCTRL_CTRLB_MANW_Pos) |
			NVMCTRL_CTRLB_RWS(config->wait_states) |
			((config->disable_cache & 0x01) << NVMCTRL_CTRLB_CACHEDIS_Pos) |
     4e8:	4313      	orrs	r3, r2
	if (!nvm_is_ready()) {
		return STATUS_BUSY;
	}

	/* Writing configuration to the CTRLB register */
	nvm_module->CTRLB.reg =
     4ea:	4a0a      	ldr	r2, [pc, #40]	; (514 <nvm_set_config+0x80>)
     4ec:	6053      	str	r3, [r2, #4]
			((config->disable_cache & 0x01) << NVMCTRL_CTRLB_CACHEDIS_Pos) |
			NVMCTRL_CTRLB_READMODE(config->cache_readmode);


	/* Initialize the internal device struct */
	_nvm_dev.page_size         = (8 << nvm_module->PARAM.bit.PSZ);
     4ee:	6893      	ldr	r3, [r2, #8]
     4f0:	035b      	lsls	r3, r3, #13
     4f2:	0f5b      	lsrs	r3, r3, #29
     4f4:	4908      	ldr	r1, [pc, #32]	; (518 <nvm_set_config+0x84>)
     4f6:	2408      	movs	r4, #8
     4f8:	409c      	lsls	r4, r3
     4fa:	800c      	strh	r4, [r1, #0]
	_nvm_dev.number_of_pages   = nvm_module->PARAM.bit.NVMP;
     4fc:	6893      	ldr	r3, [r2, #8]
     4fe:	804b      	strh	r3, [r1, #2]
	_nvm_dev.manual_page_write = config->manual_page_write;
     500:	7843      	ldrb	r3, [r0, #1]
     502:	710b      	strb	r3, [r1, #4]

	/* If the security bit is set, the auxiliary space cannot be written */
	if (nvm_module->STATUS.reg & NVMCTRL_STATUS_SB) {
     504:	8b13      	ldrh	r3, [r2, #24]
     506:	05db      	lsls	r3, r3, #23
		return STATUS_ERR_IO;
	}

	return STATUS_OK;
     508:	0fdb      	lsrs	r3, r3, #31
     50a:	011b      	lsls	r3, r3, #4
}
     50c:	1c18      	adds	r0, r3, #0
     50e:	bd10      	pop	{r4, pc}
     510:	40000400 	.word	0x40000400
     514:	41004000 	.word	0x41004000
     518:	2000025c 	.word	0x2000025c

0000051c <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin.
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
     51c:	b500      	push	{lr}
     51e:	b083      	sub	sp, #12
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
     520:	ab01      	add	r3, sp, #4
     522:	2280      	movs	r2, #128	; 0x80
     524:	701a      	strb	r2, [r3, #0]

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
     526:	780a      	ldrb	r2, [r1, #0]
     528:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
     52a:	784a      	ldrb	r2, [r1, #1]
     52c:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
     52e:	788a      	ldrb	r2, [r1, #2]
     530:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
     532:	1c19      	adds	r1, r3, #0
     534:	4b01      	ldr	r3, [pc, #4]	; (53c <port_pin_set_config+0x20>)
     536:	4798      	blx	r3
}
     538:	b003      	add	sp, #12
     53a:	bd00      	pop	{pc}
     53c:	000022cd 	.word	0x000022cd

00000540 <rtc_count_reset>:
 * Resets the RTC to hardware defaults.
 *
 * \param[in,out]  module  Pointer to the software instance struct
 */
void rtc_count_reset(struct rtc_module *const module)
{
     540:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
     542:	6802      	ldr	r2, [r0, #0]
 * \param[in] vector  Interrupt vector to disable
 */
static inline void system_interrupt_disable(
		const enum system_interrupt_vector vector)
{
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
     544:	2408      	movs	r4, #8
     546:	2380      	movs	r3, #128	; 0x80
     548:	490b      	ldr	r1, [pc, #44]	; (578 <rtc_count_reset+0x38>)
     54a:	50cc      	str	r4, [r1, r3]
{
 	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
     54c:	6801      	ldr	r1, [r0, #0]

        if (rtc_module->MODE0.STATUS.reg & RTC_STATUS_SYNCBUSY) {
     54e:	7a8b      	ldrb	r3, [r1, #10]

#if RTC_COUNT_ASYNC == true
	system_interrupt_disable(SYSTEM_INTERRUPT_MODULE_RTC);
#endif

	while (rtc_count_is_syncing(module)) {
     550:	b25b      	sxtb	r3, r3
     552:	2b00      	cmp	r3, #0
     554:	dbfb      	blt.n	54e <rtc_count_reset+0xe>
		/* Wait for synchronization */
	}

	/* Disable RTC module. */
	rtc_module->MODE0.CTRL.reg &= ~RTC_MODE0_CTRL_ENABLE;
     556:	8813      	ldrh	r3, [r2, #0]
     558:	2102      	movs	r1, #2
     55a:	438b      	bics	r3, r1
     55c:	8013      	strh	r3, [r2, #0]

	/* Disable module before reset. */
	rtc_count_disable(module);

#if RTC_COUNT_ASYNC == true
	module->registered_callback = 0;
     55e:	2300      	movs	r3, #0
     560:	7503      	strb	r3, [r0, #20]
	module->enabled_callback    = 0;
     562:	7543      	strb	r3, [r0, #21]
{
 	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
     564:	6801      	ldr	r1, [r0, #0]

        if (rtc_module->MODE0.STATUS.reg & RTC_STATUS_SYNCBUSY) {
     566:	7a8b      	ldrb	r3, [r1, #10]
#endif

	while (rtc_count_is_syncing(module)) {
     568:	b25b      	sxtb	r3, r3
     56a:	2b00      	cmp	r3, #0
     56c:	dbfb      	blt.n	566 <rtc_count_reset+0x26>
		/* Wait for synchronization */
	}

	/* Initiate software reset. */
	rtc_module->MODE0.CTRL.reg |= RTC_MODE0_CTRL_SWRST;
     56e:	8811      	ldrh	r1, [r2, #0]
     570:	2301      	movs	r3, #1
     572:	430b      	orrs	r3, r1
     574:	8013      	strh	r3, [r2, #0]
}
     576:	bd10      	pop	{r4, pc}
     578:	e000e100 	.word	0xe000e100

0000057c <rtc_count_set_compare>:
 */
enum status_code rtc_count_set_compare(
		struct rtc_module *const module,
		const uint32_t comp_value,
		const enum rtc_count_compare comp_index)
{
     57c:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
     57e:	6804      	ldr	r4, [r0, #0]
     580:	7aa3      	ldrb	r3, [r4, #10]

	while (rtc_count_is_syncing(module)) {
     582:	b25b      	sxtb	r3, r3
     584:	2b00      	cmp	r3, #0
     586:	dbfb      	blt.n	580 <rtc_count_set_compare+0x4>
		/* Wait for synchronization */
	}

	/* Set compare values based on operation mode. */
	switch (module->mode) {
     588:	7903      	ldrb	r3, [r0, #4]
     58a:	2b00      	cmp	r3, #0
     58c:	d00a      	beq.n	5a4 <rtc_count_set_compare+0x28>

			break;

		default:
			Assert(false);
			return STATUS_ERR_BAD_FORMAT;
     58e:	201a      	movs	r0, #26
	while (rtc_count_is_syncing(module)) {
		/* Wait for synchronization */
	}

	/* Set compare values based on operation mode. */
	switch (module->mode) {
     590:	2b01      	cmp	r3, #1
     592:	d113      	bne.n	5bc <rtc_count_set_compare+0x40>
		case RTC_COUNT_MODE_32BIT:
			/* Check sanity of comp_index. */
			if ((uint32_t)comp_index > RTC_NUM_OF_COMP32) {
				return STATUS_ERR_INVALID_ARG;
     594:	2017      	movs	r0, #23

	/* Set compare values based on operation mode. */
	switch (module->mode) {
		case RTC_COUNT_MODE_32BIT:
			/* Check sanity of comp_index. */
			if ((uint32_t)comp_index > RTC_NUM_OF_COMP32) {
     596:	2a01      	cmp	r2, #1
     598:	d810      	bhi.n	5bc <rtc_count_set_compare+0x40>
				return STATUS_ERR_INVALID_ARG;
			}

			/* Set compare value for COMP. */
			rtc_module->MODE0.COMP[comp_index].reg = comp_value;
     59a:	3206      	adds	r2, #6
     59c:	0092      	lsls	r2, r2, #2
     59e:	5111      	str	r1, [r2, r4]
			Assert(false);
			return STATUS_ERR_BAD_FORMAT;
	}

	/* Return status if everything is OK. */
	return STATUS_OK;
     5a0:	2000      	movs	r0, #0
			}

			/* Set compare value for COMP. */
			rtc_module->MODE0.COMP[comp_index].reg = comp_value;

			break;
     5a2:	e00b      	b.n	5bc <rtc_count_set_compare+0x40>

		case RTC_COUNT_MODE_16BIT:
			/* Check sanity of comp_index. */
			if ((uint32_t)comp_index > RTC_NUM_OF_COMP16) {
				return STATUS_ERR_INVALID_ARG;
     5a4:	2017      	movs	r0, #23

			break;

		case RTC_COUNT_MODE_16BIT:
			/* Check sanity of comp_index. */
			if ((uint32_t)comp_index > RTC_NUM_OF_COMP16) {
     5a6:	2a02      	cmp	r2, #2
     5a8:	d808      	bhi.n	5bc <rtc_count_set_compare+0x40>
				return STATUS_ERR_INVALID_ARG;
			}

			/* Check that 16-bit value is provided. */
			if (comp_value > 0xffff) {
     5aa:	4b05      	ldr	r3, [pc, #20]	; (5c0 <rtc_count_set_compare+0x44>)
     5ac:	4299      	cmp	r1, r3
     5ae:	d805      	bhi.n	5bc <rtc_count_set_compare+0x40>
				Assert(false);
				return STATUS_ERR_INVALID_ARG;
			}

			/* Set compare value for COMP. */
			rtc_module->MODE1.COMP[comp_index].reg = comp_value & 0xffff;
     5b0:	b289      	uxth	r1, r1
     5b2:	320c      	adds	r2, #12
     5b4:	0052      	lsls	r2, r2, #1
     5b6:	5311      	strh	r1, [r2, r4]
			Assert(false);
			return STATUS_ERR_BAD_FORMAT;
	}

	/* Return status if everything is OK. */
	return STATUS_OK;
     5b8:	2000      	movs	r0, #0
			}

			/* Set compare value for COMP. */
			rtc_module->MODE1.COMP[comp_index].reg = comp_value & 0xffff;

			break;
     5ba:	e7ff      	b.n	5bc <rtc_count_set_compare+0x40>
			return STATUS_ERR_BAD_FORMAT;
	}

	/* Return status if everything is OK. */
	return STATUS_OK;
}
     5bc:	bd10      	pop	{r4, pc}
     5be:	46c0      	nop			; (mov r8, r8)
     5c0:	0000ffff 	.word	0x0000ffff

000005c4 <rtc_count_init>:
 */
enum status_code rtc_count_init(
		struct rtc_module *const module,
		Rtc *const hw,
		const struct rtc_count_config *const config)
{
     5c4:	b570      	push	{r4, r5, r6, lr}
     5c6:	b082      	sub	sp, #8
     5c8:	1c04      	adds	r4, r0, #0
     5ca:	1c15      	adds	r5, r2, #0
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize device instance */
	module->hw = hw;
     5cc:	6001      	str	r1, [r0, #0]
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
	switch (bus) {
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
     5ce:	4a2f      	ldr	r2, [pc, #188]	; (68c <rtc_count_init+0xc8>)
     5d0:	6991      	ldr	r1, [r2, #24]
     5d2:	2320      	movs	r3, #32
     5d4:	430b      	orrs	r3, r1
     5d6:	6193      	str	r3, [r2, #24]
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_RTC);

	/* Set up GCLK */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
	gclk_chan_conf.source_generator = GCLK_GENERATOR_2;
     5d8:	a901      	add	r1, sp, #4
     5da:	2302      	movs	r3, #2
     5dc:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(RTC_GCLK_ID, &gclk_chan_conf);
     5de:	2004      	movs	r0, #4
     5e0:	4b2b      	ldr	r3, [pc, #172]	; (690 <rtc_count_init+0xcc>)
     5e2:	4798      	blx	r3
	system_gclk_chan_enable(RTC_GCLK_ID);
     5e4:	2004      	movs	r0, #4
     5e6:	4b2b      	ldr	r3, [pc, #172]	; (694 <rtc_count_init+0xd0>)
     5e8:	4798      	blx	r3

	/* Reset module to hardware defaults. */
	rtc_count_reset(module);
     5ea:	1c20      	adds	r0, r4, #0
     5ec:	4b2a      	ldr	r3, [pc, #168]	; (698 <rtc_count_init+0xd4>)
     5ee:	4798      	blx	r3

	/* Save conf_struct internally for continued use. */
	module->mode                = config->mode;
     5f0:	78ab      	ldrb	r3, [r5, #2]
     5f2:	7123      	strb	r3, [r4, #4]
	module->continuously_update = config->continuously_update;
     5f4:	792b      	ldrb	r3, [r5, #4]
     5f6:	7163      	strb	r3, [r4, #5]

#  if (RTC_INST_NUM == 1)
	_rtc_instance[0] = module;
     5f8:	4b28      	ldr	r3, [pc, #160]	; (69c <rtc_count_init+0xd8>)
     5fa:	601c      	str	r4, [r3, #0]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
     5fc:	6826      	ldr	r6, [r4, #0]

	rtc_module->MODE0.CTRL.reg = RTC_MODE0_CTRL_MODE(0) | config->prescaler;
     5fe:	882b      	ldrh	r3, [r5, #0]
     600:	8033      	strh	r3, [r6, #0]

	/* Set mode and clear on match if applicable. */
	switch (config->mode) {
     602:	78ab      	ldrb	r3, [r5, #2]
     604:	2b00      	cmp	r3, #0
     606:	d017      	beq.n	638 <rtc_count_init+0x74>
						(enum rtc_count_compare)i);
			}
			break;
		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
     608:	2017      	movs	r0, #23
	Rtc *const rtc_module = module->hw;

	rtc_module->MODE0.CTRL.reg = RTC_MODE0_CTRL_MODE(0) | config->prescaler;

	/* Set mode and clear on match if applicable. */
	switch (config->mode) {
     60a:	2b01      	cmp	r3, #1
     60c:	d13c      	bne.n	688 <rtc_count_init+0xc4>
		case RTC_COUNT_MODE_32BIT:
			/* Set 32bit mode and clear on match if applicable. */
			rtc_module->MODE0.CTRL.reg |= RTC_MODE0_CTRL_MODE(0);
     60e:	8833      	ldrh	r3, [r6, #0]
     610:	b29b      	uxth	r3, r3
     612:	8033      	strh	r3, [r6, #0]

			/* Check if clear on compare match should be set. */
			if (config->clear_on_match) {
     614:	78eb      	ldrb	r3, [r5, #3]
     616:	2b00      	cmp	r3, #0
     618:	d034      	beq.n	684 <rtc_count_init+0xc0>
				/* Set clear on match. */
				rtc_module->MODE0.CTRL.reg |= RTC_MODE0_CTRL_MATCHCLR;
     61a:	8832      	ldrh	r2, [r6, #0]
     61c:	2380      	movs	r3, #128	; 0x80
     61e:	4313      	orrs	r3, r2
     620:	8033      	strh	r3, [r6, #0]
     622:	e02f      	b.n	684 <rtc_count_init+0xc0>
     624:	7a93      	ldrb	r3, [r2, #10]
			}
			/* Set compare values. */
			for (uint8_t i = 0; i < RTC_NUM_OF_COMP32; i++) {
				while (rtc_count_is_syncing(module)) {
     626:	b25b      	sxtb	r3, r3
     628:	2b00      	cmp	r3, #0
     62a:	dbfb      	blt.n	624 <rtc_count_init+0x60>
					/* Wait for synchronization */
				}

				rtc_count_set_compare(module, config->compare_values[i],
     62c:	1c20      	adds	r0, r4, #0
     62e:	68a9      	ldr	r1, [r5, #8]
     630:	2200      	movs	r2, #0
     632:	4b1b      	ldr	r3, [pc, #108]	; (6a0 <rtc_count_init+0xdc>)
     634:	4798      	blx	r3
     636:	e01b      	b.n	670 <rtc_count_init+0xac>
			}
			break;

		case RTC_COUNT_MODE_16BIT:
			/* Set 16bit mode. */
			rtc_module->MODE1.CTRL.reg |= RTC_MODE1_CTRL_MODE(1);
     638:	8832      	ldrh	r2, [r6, #0]
     63a:	2304      	movs	r3, #4
     63c:	4313      	orrs	r3, r2
     63e:	8033      	strh	r3, [r6, #0]

			/* Check if match on clear is set, and return invalid
			 * argument if set. */
			if (config->clear_on_match) {
     640:	78eb      	ldrb	r3, [r5, #3]
				Assert(false);
				return STATUS_ERR_INVALID_ARG;
     642:	2017      	movs	r0, #23
			/* Set 16bit mode. */
			rtc_module->MODE1.CTRL.reg |= RTC_MODE1_CTRL_MODE(1);

			/* Check if match on clear is set, and return invalid
			 * argument if set. */
			if (config->clear_on_match) {
     644:	2b00      	cmp	r3, #0
     646:	d11f      	bne.n	688 <rtc_count_init+0xc4>
{
 	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
     648:	6822      	ldr	r2, [r4, #0]

        if (rtc_module->MODE0.STATUS.reg & RTC_STATUS_SYNCBUSY) {
     64a:	7a93      	ldrb	r3, [r2, #10]
				Assert(false);
				return STATUS_ERR_INVALID_ARG;
			}
			/* Set compare values. */
			for (uint8_t i = 0; i < RTC_NUM_OF_COMP16; i++) {
				while (rtc_count_is_syncing(module)) {
     64c:	b25b      	sxtb	r3, r3
     64e:	2b00      	cmp	r3, #0
     650:	dbfb      	blt.n	64a <rtc_count_init+0x86>
					/* Wait for synchronization */
				}

				rtc_count_set_compare(module, config->compare_values[i],
     652:	1c20      	adds	r0, r4, #0
     654:	68a9      	ldr	r1, [r5, #8]
     656:	2200      	movs	r2, #0
     658:	4b11      	ldr	r3, [pc, #68]	; (6a0 <rtc_count_init+0xdc>)
     65a:	4798      	blx	r3
{
 	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
     65c:	6822      	ldr	r2, [r4, #0]

        if (rtc_module->MODE0.STATUS.reg & RTC_STATUS_SYNCBUSY) {
     65e:	7a93      	ldrb	r3, [r2, #10]
				Assert(false);
				return STATUS_ERR_INVALID_ARG;
			}
			/* Set compare values. */
			for (uint8_t i = 0; i < RTC_NUM_OF_COMP16; i++) {
				while (rtc_count_is_syncing(module)) {
     660:	b25b      	sxtb	r3, r3
     662:	2b00      	cmp	r3, #0
     664:	dbfb      	blt.n	65e <rtc_count_init+0x9a>
					/* Wait for synchronization */
				}

				rtc_count_set_compare(module, config->compare_values[i],
     666:	1c20      	adds	r0, r4, #0
     668:	68e9      	ldr	r1, [r5, #12]
     66a:	2201      	movs	r2, #1
     66c:	4b0c      	ldr	r3, [pc, #48]	; (6a0 <rtc_count_init+0xdc>)
     66e:	4798      	blx	r3
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
	}

	/* Check to set continuously clock read update mode. */
	if (config->continuously_update) {
     670:	792b      	ldrb	r3, [r5, #4]
		/* Set continuously mode. */
		rtc_module->MODE0.READREQ.reg |= RTC_READREQ_RCONT;
	}

	/* Return status OK if everything was configured. */
	return STATUS_OK;
     672:	2000      	movs	r0, #0
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
	}

	/* Check to set continuously clock read update mode. */
	if (config->continuously_update) {
     674:	2b00      	cmp	r3, #0
     676:	d007      	beq.n	688 <rtc_count_init+0xc4>
		/* Set continuously mode. */
		rtc_module->MODE0.READREQ.reg |= RTC_READREQ_RCONT;
     678:	8872      	ldrh	r2, [r6, #2]
     67a:	2380      	movs	r3, #128	; 0x80
     67c:	01db      	lsls	r3, r3, #7
     67e:	4313      	orrs	r3, r2
     680:	8073      	strh	r3, [r6, #2]
     682:	e001      	b.n	688 <rtc_count_init+0xc4>
{
 	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
     684:	6822      	ldr	r2, [r4, #0]
     686:	e7cd      	b.n	624 <rtc_count_init+0x60>
	_rtc_instance[_rtc_get_inst_index(hw)] = module;
#  endif

	/* Set config and return status. */
	return _rtc_count_set_config(module, config);
}
     688:	b002      	add	sp, #8
     68a:	bd70      	pop	{r4, r5, r6, pc}
     68c:	40000400 	.word	0x40000400
     690:	0000217d 	.word	0x0000217d
     694:	000020f1 	.word	0x000020f1
     698:	00000541 	.word	0x00000541
     69c:	20002acc 	.word	0x20002acc
     6a0:	0000057d 	.word	0x0000057d

000006a4 <rtc_count_register_callback>:
{

	enum status_code status = STATUS_OK;

	/* Overflow callback */
	if (callback_type == RTC_COUNT_CALLBACK_OVERFLOW) {
     6a4:	2a02      	cmp	r2, #2
     6a6:	d00b      	beq.n	6c0 <rtc_count_register_callback+0x1c>
		status = STATUS_OK;
	} else {
		/* Make sure callback type can be registered */
		switch (module->mode) {
     6a8:	7903      	ldrb	r3, [r0, #4]
     6aa:	2b00      	cmp	r3, #0
     6ac:	d005      	beq.n	6ba <rtc_count_register_callback+0x16>
     6ae:	2b01      	cmp	r3, #1
     6b0:	d112      	bne.n	6d8 <rtc_count_register_callback+0x34>
     6b2:	3316      	adds	r3, #22
		case RTC_COUNT_MODE_32BIT:
			/* Check sanity for 32-bit mode. */
			if (callback_type > RTC_NUM_OF_COMP32) {
     6b4:	2a01      	cmp	r2, #1
     6b6:	d810      	bhi.n	6da <rtc_count_register_callback+0x36>
     6b8:	e002      	b.n	6c0 <rtc_count_register_callback+0x1c>
     6ba:	2317      	movs	r3, #23
			}

			break;
		case RTC_COUNT_MODE_16BIT:
			/* Check sanity for 16-bit mode. */
			if (callback_type > RTC_NUM_OF_COMP16) {
     6bc:	2a02      	cmp	r2, #2
     6be:	d80c      	bhi.n	6da <rtc_count_register_callback+0x36>
		}
	}

	if (status == STATUS_OK) {
		/* Register callback */
		module->callbacks[callback_type] = callback;
     6c0:	1c93      	adds	r3, r2, #2
     6c2:	009b      	lsls	r3, r3, #2
     6c4:	5019      	str	r1, [r3, r0]
		/* Set corresponding bit to set callback as registered */
		module->registered_callback |= (1 << callback_type);
     6c6:	7d01      	ldrb	r1, [r0, #20]
     6c8:	2301      	movs	r3, #1
     6ca:	4093      	lsls	r3, r2
     6cc:	1c1a      	adds	r2, r3, #0
     6ce:	430a      	orrs	r2, r1
     6d0:	b2d2      	uxtb	r2, r2
     6d2:	7502      	strb	r2, [r0, #20]
     6d4:	2300      	movs	r3, #0
     6d6:	e000      	b.n	6da <rtc_count_register_callback+0x36>
			if (callback_type > RTC_NUM_OF_COMP16) {
				status = STATUS_ERR_INVALID_ARG;
			}
			break;
		default:
			status = STATUS_ERR_INVALID_ARG;
     6d8:	2317      	movs	r3, #23
		/* Set corresponding bit to set callback as registered */
		module->registered_callback |= (1 << callback_type);
	}

	return status;
}
     6da:	1c18      	adds	r0, r3, #0
     6dc:	4770      	bx	lr
     6de:	46c0      	nop			; (mov r8, r8)

000006e0 <rtc_count_enable_callback>:
 * \param[in]     callback_type Callback type to enable
 */
void rtc_count_enable_callback(
		struct rtc_module *const module,
		enum rtc_count_callback callback_type)
{
     6e0:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
     6e2:	6802      	ldr	r2, [r0, #0]

	if (callback_type == RTC_COUNT_CALLBACK_OVERFLOW) {
     6e4:	2902      	cmp	r1, #2
     6e6:	d102      	bne.n	6ee <rtc_count_enable_callback+0xe>
		rtc_module->MODE0.INTENSET.reg = RTC_MODE0_INTFLAG_OVF;
     6e8:	2380      	movs	r3, #128	; 0x80
     6ea:	71d3      	strb	r3, [r2, #7]
     6ec:	e004      	b.n	6f8 <rtc_count_enable_callback+0x18>
	} else {
		rtc_module->MODE0.INTENSET.reg = RTC_MODE1_INTFLAG_CMP(1 << callback_type);
     6ee:	2301      	movs	r3, #1
     6f0:	408b      	lsls	r3, r1
     6f2:	2403      	movs	r4, #3
     6f4:	4023      	ands	r3, r4
     6f6:	71d3      	strb	r3, [r2, #7]
	}
	/* Mark callback as enabled. */
	module->enabled_callback |= (1 << callback_type);
     6f8:	7d42      	ldrb	r2, [r0, #21]
     6fa:	2301      	movs	r3, #1
     6fc:	408b      	lsls	r3, r1
     6fe:	1c19      	adds	r1, r3, #0
     700:	4311      	orrs	r1, r2
     702:	b2c9      	uxtb	r1, r1
     704:	7541      	strb	r1, [r0, #21]
}
     706:	bd10      	pop	{r4, pc}

00000708 <RTC_Handler>:
/**
 * \internal ISR handler for RTC
 */
#if (RTC_INST_NUM == 1)
void RTC_Handler(void)
{
     708:	b510      	push	{r4, lr}
 *
 * \param [in] instance_index  Default value 0
 */
static void _rtc_interrupt_handler(const uint32_t instance_index)
{
	struct rtc_module *module = _rtc_instance[instance_index];
     70a:	4b12      	ldr	r3, [pc, #72]	; (754 <RTC_Handler+0x4c>)
     70c:	681a      	ldr	r2, [r3, #0]

	Rtc *const rtc_module = module->hw;
     70e:	6814      	ldr	r4, [r2, #0]

	/* Combine callback registered and enabled masks */
	uint8_t callback_mask = module->enabled_callback;
     710:	7d53      	ldrb	r3, [r2, #21]
	callback_mask &= module->registered_callback;
     712:	7d11      	ldrb	r1, [r2, #20]
     714:	4019      	ands	r1, r3

	/* Read and mask interrupt flag register */
	uint16_t interrupt_status = rtc_module->MODE0.INTFLAG.reg;
     716:	7a23      	ldrb	r3, [r4, #8]
	interrupt_status &= rtc_module->MODE0.INTENSET.reg;
     718:	79e0      	ldrb	r0, [r4, #7]
     71a:	4003      	ands	r3, r0

	if (interrupt_status & RTC_MODE0_INTFLAG_OVF) {
     71c:	09d8      	lsrs	r0, r3, #7
     71e:	d006      	beq.n	72e <RTC_Handler+0x26>
		/* Overflow interrupt */
		if (callback_mask & (1 << RTC_COUNT_CALLBACK_OVERFLOW)) {
     720:	074b      	lsls	r3, r1, #29
     722:	d501      	bpl.n	728 <RTC_Handler+0x20>
			module->callbacks[RTC_COUNT_CALLBACK_OVERFLOW]();
     724:	6913      	ldr	r3, [r2, #16]
     726:	4798      	blx	r3
		}

		/* Clear interrupt flag */
		rtc_module->MODE0.INTFLAG.reg = RTC_MODE0_INTFLAG_OVF;
     728:	2380      	movs	r3, #128	; 0x80
     72a:	7223      	strb	r3, [r4, #8]
     72c:	e010      	b.n	750 <RTC_Handler+0x48>

	} else if (interrupt_status & RTC_MODE1_INTFLAG_CMP(1 << 0)) {
     72e:	07d8      	lsls	r0, r3, #31
     730:	d506      	bpl.n	740 <RTC_Handler+0x38>
		/* Compare 0 interrupt */
		if (callback_mask & (1 << RTC_COUNT_CALLBACK_COMPARE_0)) {
     732:	07cb      	lsls	r3, r1, #31
     734:	d501      	bpl.n	73a <RTC_Handler+0x32>
			module->callbacks[RTC_COUNT_CALLBACK_COMPARE_0]();
     736:	6893      	ldr	r3, [r2, #8]
     738:	4798      	blx	r3
		}
		/* Clear interrupt flag */
		rtc_module->MODE0.INTFLAG.reg = RTC_MODE1_INTFLAG_CMP(1 << 0);
     73a:	2301      	movs	r3, #1
     73c:	7223      	strb	r3, [r4, #8]
     73e:	e007      	b.n	750 <RTC_Handler+0x48>

	} else if (interrupt_status & RTC_MODE1_INTFLAG_CMP(1 << 1)) {
     740:	079b      	lsls	r3, r3, #30
     742:	d505      	bpl.n	750 <RTC_Handler+0x48>
		#if (RTC_NUM_OF_COMP16 > 1) || defined(__DOXYGEN__)
		/* Compare 1 interrupt */
		if (callback_mask & (1 << RTC_COUNT_CALLBACK_COMPARE_1)) {
     744:	078b      	lsls	r3, r1, #30
     746:	d501      	bpl.n	74c <RTC_Handler+0x44>
			module->callbacks[RTC_COUNT_CALLBACK_COMPARE_1]();
     748:	68d3      	ldr	r3, [r2, #12]
     74a:	4798      	blx	r3
		}
		/* Clear interrupt flag */
		rtc_module->MODE0.INTFLAG.reg = RTC_MODE1_INTFLAG_CMP(1 << 1);
     74c:	2302      	movs	r3, #2
     74e:	7223      	strb	r3, [r4, #8]
 */
#if (RTC_INST_NUM == 1)
void RTC_Handler(void)
{
	_rtc_interrupt_handler(0);
}
     750:	bd10      	pop	{r4, pc}
     752:	46c0      	nop			; (mov r8, r8)
     754:	20002acc 	.word	0x20002acc

00000758 <_i2c_master_wait_for_sync>:
{
	/* Sanity check. */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_hw = &(module->hw->I2CM);
     758:	6801      	ldr	r1, [r0, #0]

#if defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_1)
	return (i2c_hw->STATUS.reg & SERCOM_I2CM_STATUS_SYNCBUSY);
#elif defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_2)
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
     75a:	2207      	movs	r2, #7
     75c:	69cb      	ldr	r3, [r1, #28]
		const struct i2c_master_module *const module)
{
	/* Sanity check. */
	Assert(module);

	while (i2c_master_is_syncing(module)) {
     75e:	421a      	tst	r2, r3
     760:	d1fc      	bne.n	75c <_i2c_master_wait_for_sync+0x4>
		/* Wait for I2C module to sync. */
	}
}
     762:	4770      	bx	lr

00000764 <i2c_master_init>:
 */
enum status_code i2c_master_init(
		struct i2c_master_module *const module,
		Sercom *const hw,
		const struct i2c_master_config *const config)
{
     764:	b5f0      	push	{r4, r5, r6, r7, lr}
     766:	4647      	mov	r7, r8
     768:	b480      	push	{r7}
     76a:	b082      	sub	sp, #8
     76c:	1c07      	adds	r7, r0, #0
     76e:	1c0d      	adds	r5, r1, #0
     770:	1c16      	adds	r6, r2, #0
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize software module */
	module->hw = hw;
     772:	6039      	str	r1, [r7, #0]

	SercomI2cm *const i2c_module = &(module->hw->I2CM);

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
     774:	1c08      	adds	r0, r1, #0
     776:	4b5f      	ldr	r3, [pc, #380]	; (8f4 <i2c_master_init+0x190>)
     778:	4798      	blx	r3
		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
			break;

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
     77a:	495f      	ldr	r1, [pc, #380]	; (8f8 <i2c_master_init+0x194>)
     77c:	6a0a      	ldr	r2, [r1, #32]
	uint32_t pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
     77e:	1c84      	adds	r4, r0, #2
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;

	/* Turn on module in PM */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
     780:	2301      	movs	r3, #1
     782:	40a3      	lsls	r3, r4
     784:	4313      	orrs	r3, r2
     786:	620b      	str	r3, [r1, #32]

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
	gclk_chan_conf.source_generator = config->generator_source;
     788:	a901      	add	r1, sp, #4
     78a:	7b33      	ldrb	r3, [r6, #12]
     78c:	700b      	strb	r3, [r1, #0]

	SercomI2cm *const i2c_module = &(module->hw->I2CM);

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
	uint32_t pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
     78e:	3014      	adds	r0, #20

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
	gclk_chan_conf.source_generator = config->generator_source;
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
     790:	b2c4      	uxtb	r4, r0
     792:	1c20      	adds	r0, r4, #0
     794:	4b59      	ldr	r3, [pc, #356]	; (8fc <i2c_master_init+0x198>)
     796:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
     798:	1c20      	adds	r0, r4, #0
     79a:	4b59      	ldr	r3, [pc, #356]	; (900 <i2c_master_init+0x19c>)
     79c:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
     79e:	7b30      	ldrb	r0, [r6, #12]
     7a0:	2100      	movs	r1, #0
     7a2:	4b58      	ldr	r3, [pc, #352]	; (904 <i2c_master_init+0x1a0>)
     7a4:	4798      	blx	r3

	/* Check if module is enabled. */
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_ENABLE) {
     7a6:	682b      	ldr	r3, [r5, #0]
		return STATUS_ERR_DENIED;
     7a8:	201c      	movs	r0, #28
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
	system_gclk_chan_enable(gclk_index);
	sercom_set_gclk_generator(config->generator_source, false);

	/* Check if module is enabled. */
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_ENABLE) {
     7aa:	079b      	lsls	r3, r3, #30
     7ac:	d500      	bpl.n	7b0 <i2c_master_init+0x4c>
     7ae:	e09d      	b.n	8ec <i2c_master_init+0x188>
		return STATUS_ERR_DENIED;
	}

	/* Check if reset is in progress. */
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_SWRST) {
     7b0:	682b      	ldr	r3, [r5, #0]
		return STATUS_BUSY;
     7b2:	3817      	subs	r0, #23
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_ENABLE) {
		return STATUS_ERR_DENIED;
	}

	/* Check if reset is in progress. */
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_SWRST) {
     7b4:	07db      	lsls	r3, r3, #31
     7b6:	d500      	bpl.n	7ba <i2c_master_init+0x56>
     7b8:	e098      	b.n	8ec <i2c_master_init+0x188>
	module->status = STATUS_OK;
	module->buffer = NULL;
#endif

	/* Set sercom module to operate in I2C master mode. */
	i2c_module->CTRLA.reg = SERCOM_I2CM_CTRLA_MODE_I2C_MASTER;
     7ba:	2314      	movs	r3, #20
     7bc:	602b      	str	r3, [r5, #0]
	uint32_t tmp_ctrla;
	int32_t tmp_baud;
	int32_t tmp_baud_hs;
	enum status_code tmp_status_code = STATUS_OK;

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     7be:	683b      	ldr	r3, [r7, #0]
     7c0:	4698      	mov	r8, r3
	Sercom *const sercom_hw = module->hw;

	uint8_t sercom_index = _sercom_get_sercom_inst_index(sercom_hw);
     7c2:	1c18      	adds	r0, r3, #0
     7c4:	4b4b      	ldr	r3, [pc, #300]	; (8f4 <i2c_master_init+0x190>)
     7c6:	4798      	blx	r3
     7c8:	1c05      	adds	r5, r0, #0
     7ca:	2380      	movs	r3, #128	; 0x80
     7cc:	466a      	mov	r2, sp
     7ce:	7013      	strb	r3, [r2, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     7d0:	2300      	movs	r3, #0
     7d2:	7053      	strb	r3, [r2, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
     7d4:	2201      	movs	r2, #1
     7d6:	4669      	mov	r1, sp
     7d8:	708a      	strb	r2, [r1, #2]
	config->powersave    = false;
     7da:	70cb      	strb	r3, [r1, #3]

	/* Pin configuration */
	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);

	uint32_t pad0 = config->pinmux_pad0;
     7dc:	69f0      	ldr	r0, [r6, #28]
	uint32_t pad1 = config->pinmux_pad1;
     7de:	6a34      	ldr	r4, [r6, #32]

	/* SERCOM PAD0 - SDA */
	if (pad0 == PINMUX_DEFAULT) {
     7e0:	2800      	cmp	r0, #0
     7e2:	d103      	bne.n	7ec <i2c_master_init+0x88>
		pad0 = _sercom_get_default_pad(sercom_hw, 0);
     7e4:	4640      	mov	r0, r8
     7e6:	2100      	movs	r1, #0
     7e8:	4b47      	ldr	r3, [pc, #284]	; (908 <i2c_master_init+0x1a4>)
     7ea:	4798      	blx	r3
	}
	pin_conf.mux_position = pad0 & 0xFFFF;
     7ec:	466b      	mov	r3, sp
     7ee:	7018      	strb	r0, [r3, #0]
	pin_conf.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK;
     7f0:	2302      	movs	r3, #2
     7f2:	466a      	mov	r2, sp
     7f4:	7053      	strb	r3, [r2, #1]
	system_pinmux_pin_set_config(pad0 >> 16, &pin_conf);
     7f6:	0c00      	lsrs	r0, r0, #16
     7f8:	b2c0      	uxtb	r0, r0
     7fa:	4669      	mov	r1, sp
     7fc:	4b43      	ldr	r3, [pc, #268]	; (90c <i2c_master_init+0x1a8>)
     7fe:	4798      	blx	r3

	/* SERCOM PAD1 - SCL */
	if (pad1 == PINMUX_DEFAULT) {
     800:	2c00      	cmp	r4, #0
     802:	d104      	bne.n	80e <i2c_master_init+0xaa>
		pad1 = _sercom_get_default_pad(sercom_hw, 1);
     804:	4640      	mov	r0, r8
     806:	2101      	movs	r1, #1
     808:	4b3f      	ldr	r3, [pc, #252]	; (908 <i2c_master_init+0x1a4>)
     80a:	4798      	blx	r3
     80c:	1c04      	adds	r4, r0, #0
	}
	pin_conf.mux_position = pad1 & 0xFFFF;
     80e:	466b      	mov	r3, sp
     810:	701c      	strb	r4, [r3, #0]
	pin_conf.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK;
     812:	2302      	movs	r3, #2
     814:	466a      	mov	r2, sp
     816:	7053      	strb	r3, [r2, #1]
	system_pinmux_pin_set_config(pad1 >> 16, &pin_conf);
     818:	0c24      	lsrs	r4, r4, #16
     81a:	b2e0      	uxtb	r0, r4
     81c:	4669      	mov	r1, sp
     81e:	4b3b      	ldr	r3, [pc, #236]	; (90c <i2c_master_init+0x1a8>)
     820:	4798      	blx	r3

	/* Save timeout on unknown bus state in software module. */
	module->unknown_bus_state_timeout = config->unknown_bus_state_timeout;
     822:	8ab3      	ldrh	r3, [r6, #20]
     824:	80fb      	strh	r3, [r7, #6]

	/* Save timeout on buffer write. */
	module->buffer_timeout = config->buffer_timeout;
     826:	8af3      	ldrh	r3, [r6, #22]
     828:	813b      	strh	r3, [r7, #8]

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
     82a:	7e32      	ldrb	r2, [r6, #24]
		tmp_ctrla = SERCOM_I2CM_CTRLA_RUNSTDBY;
     82c:	2380      	movs	r3, #128	; 0x80

	/* Save timeout on buffer write. */
	module->buffer_timeout = config->buffer_timeout;

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
     82e:	2a00      	cmp	r2, #0
     830:	d104      	bne.n	83c <i2c_master_init+0xd8>
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
     832:	4b37      	ldr	r3, [pc, #220]	; (910 <i2c_master_init+0x1ac>)
     834:	789b      	ldrb	r3, [r3, #2]
     836:	079b      	lsls	r3, r3, #30
		tmp_ctrla = SERCOM_I2CM_CTRLA_RUNSTDBY;
     838:	0fdb      	lsrs	r3, r3, #31
     83a:	01db      	lsls	r3, r3, #7
	} else {
		tmp_ctrla = 0;
	}

	/* Check and set start data hold timeout. */
	if (config->start_hold_time != I2C_MASTER_START_HOLD_TIME_DISABLED) {
     83c:	6932      	ldr	r2, [r6, #16]
     83e:	2a00      	cmp	r2, #0
     840:	d000      	beq.n	844 <i2c_master_init+0xe0>
		tmp_ctrla |= config->start_hold_time;
     842:	4313      	orrs	r3, r2
	}

	/* Check and set transfer speed */
	tmp_ctrla |= config->transfer_speed;
     844:	68b2      	ldr	r2, [r6, #8]
     846:	4313      	orrs	r3, r2

	/* Check and set SCL low timeout. */
	if (config->scl_low_timeout) {
     848:	2224      	movs	r2, #36	; 0x24
     84a:	5cb2      	ldrb	r2, [r6, r2]
     84c:	2a00      	cmp	r2, #0
     84e:	d002      	beq.n	856 <i2c_master_init+0xf2>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_LOWTOUTEN;
     850:	2280      	movs	r2, #128	; 0x80
     852:	05d2      	lsls	r2, r2, #23
     854:	4313      	orrs	r3, r2
	}

	/* Check and set inactive bus timeout. */
	if (config->inactive_timeout != I2C_MASTER_INACTIVE_TIMEOUT_DISABLED) {
     856:	6ab2      	ldr	r2, [r6, #40]	; 0x28
     858:	2a00      	cmp	r2, #0
     85a:	d000      	beq.n	85e <i2c_master_init+0xfa>
		tmp_ctrla |= config->inactive_timeout;
     85c:	4313      	orrs	r3, r2
	}

	/* Check and set SCL clock stretch mode. */
	if (config->scl_stretch_only_after_ack_bit) {
     85e:	222c      	movs	r2, #44	; 0x2c
     860:	5cb2      	ldrb	r2, [r6, r2]
     862:	2a00      	cmp	r2, #0
     864:	d002      	beq.n	86c <i2c_master_init+0x108>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_SCLSM;
     866:	2280      	movs	r2, #128	; 0x80
     868:	0512      	lsls	r2, r2, #20
     86a:	4313      	orrs	r3, r2
	}

	/* Check and set slave SCL low extend timeout. */
	if (config->slave_scl_low_extend_timeout) {
     86c:	222d      	movs	r2, #45	; 0x2d
     86e:	5cb2      	ldrb	r2, [r6, r2]
     870:	2a00      	cmp	r2, #0
     872:	d002      	beq.n	87a <i2c_master_init+0x116>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_SEXTTOEN;
     874:	2280      	movs	r2, #128	; 0x80
     876:	0412      	lsls	r2, r2, #16
     878:	4313      	orrs	r3, r2
	}

	/* Check and set master SCL low extend timeout. */
	if (config->master_scl_low_extend_timeout) {
     87a:	222e      	movs	r2, #46	; 0x2e
     87c:	5cb2      	ldrb	r2, [r6, r2]
     87e:	2a00      	cmp	r2, #0
     880:	d002      	beq.n	888 <i2c_master_init+0x124>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_MEXTTOEN;
     882:	2280      	movs	r2, #128	; 0x80
     884:	03d2      	lsls	r2, r2, #15
     886:	4313      	orrs	r3, r2
	}

	/* Write config to register CTRLA. */
	i2c_module->CTRLA.reg |= tmp_ctrla;
     888:	4642      	mov	r2, r8
     88a:	6812      	ldr	r2, [r2, #0]
     88c:	4313      	orrs	r3, r2
     88e:	4642      	mov	r2, r8
     890:	6013      	str	r3, [r2, #0]

	/* Set configurations in CTRLB. */
	i2c_module->CTRLB.reg = SERCOM_I2CM_CTRLB_SMEN;
     892:	2380      	movs	r3, #128	; 0x80
     894:	005b      	lsls	r3, r3, #1
     896:	6053      	str	r3, [r2, #4]

	/* Find and set baudrate. */
	tmp_baud = (int32_t)(div_ceil(
     898:	3514      	adds	r5, #20
     89a:	b2ed      	uxtb	r5, r5
     89c:	1c28      	adds	r0, r5, #0
     89e:	4b1d      	ldr	r3, [pc, #116]	; (914 <i2c_master_init+0x1b0>)
     8a0:	4798      	blx	r3
     8a2:	21fa      	movs	r1, #250	; 0xfa
     8a4:	00c9      	lsls	r1, r1, #3
     8a6:	6833      	ldr	r3, [r6, #0]
     8a8:	4359      	muls	r1, r3
     8aa:	1e4b      	subs	r3, r1, #1
     8ac:	1818      	adds	r0, r3, r0
     8ae:	4b1a      	ldr	r3, [pc, #104]	; (918 <i2c_master_init+0x1b4>)
     8b0:	4798      	blx	r3
				system_gclk_chan_get_hz(SERCOM0_GCLK_ID_CORE + sercom_index),
				(2000*(config->baud_rate))) - 5);
     8b2:	1f44      	subs	r4, r0, #5

	/* Check that baudrate is supported at current speed. */
	if (tmp_baud > 255 || tmp_baud < 0) {
     8b4:	2cff      	cmp	r4, #255	; 0xff
     8b6:	d80d      	bhi.n	8d4 <i2c_master_init+0x170>
		/* Baud rate not supported. */
		tmp_status_code = STATUS_ERR_BAUDRATE_UNAVAILABLE;
	} else {
		/* Find baudrate for high speed */
		tmp_baud_hs = (int32_t)(div_ceil(
     8b8:	1c28      	adds	r0, r5, #0
     8ba:	4b16      	ldr	r3, [pc, #88]	; (914 <i2c_master_init+0x1b0>)
     8bc:	4798      	blx	r3
     8be:	6871      	ldr	r1, [r6, #4]
     8c0:	23fa      	movs	r3, #250	; 0xfa
     8c2:	00db      	lsls	r3, r3, #3
     8c4:	4359      	muls	r1, r3
     8c6:	1e4b      	subs	r3, r1, #1
     8c8:	1818      	adds	r0, r3, r0
     8ca:	4b13      	ldr	r3, [pc, #76]	; (918 <i2c_master_init+0x1b4>)
     8cc:	4798      	blx	r3
				system_gclk_chan_get_hz(SERCOM0_GCLK_ID_CORE + sercom_index),
				(2000*(config->baud_rate_high_speed))) - 1);
     8ce:	3801      	subs	r0, #1

		/* Check that baudrate is supported at current speed. */
		if (tmp_baud_hs > 255 || tmp_baud_hs < 0) {
     8d0:	28ff      	cmp	r0, #255	; 0xff
     8d2:	d901      	bls.n	8d8 <i2c_master_init+0x174>
	/* Save timeout on buffer write. */
	module->buffer_timeout = config->buffer_timeout;

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
		tmp_ctrla = SERCOM_I2CM_CTRLA_RUNSTDBY;
     8d4:	2040      	movs	r0, #64	; 0x40
     8d6:	e009      	b.n	8ec <i2c_master_init+0x188>
		}
	}
	if (tmp_status_code != STATUS_ERR_BAUDRATE_UNAVAILABLE) {
		/* Baud rate acceptable. */
		i2c_module->BAUD.reg = SERCOM_I2CM_BAUD_BAUD(tmp_baud) |
			SERCOM_I2CM_BAUD_HSBAUD(tmp_baud_hs);
     8d8:	0400      	lsls	r0, r0, #16
     8da:	23ff      	movs	r3, #255	; 0xff
     8dc:	041b      	lsls	r3, r3, #16
     8de:	4018      	ands	r0, r3
			tmp_status_code = STATUS_ERR_BAUDRATE_UNAVAILABLE;
		}
	}
	if (tmp_status_code != STATUS_ERR_BAUDRATE_UNAVAILABLE) {
		/* Baud rate acceptable. */
		i2c_module->BAUD.reg = SERCOM_I2CM_BAUD_BAUD(tmp_baud) |
     8e0:	23ff      	movs	r3, #255	; 0xff
     8e2:	401c      	ands	r4, r3
     8e4:	4304      	orrs	r4, r0
     8e6:	4643      	mov	r3, r8
     8e8:	60dc      	str	r4, [r3, #12]

	/* Temporary variables. */
	uint32_t tmp_ctrla;
	int32_t tmp_baud;
	int32_t tmp_baud_hs;
	enum status_code tmp_status_code = STATUS_OK;
     8ea:	2000      	movs	r0, #0
	/* Set sercom module to operate in I2C master mode. */
	i2c_module->CTRLA.reg = SERCOM_I2CM_CTRLA_MODE_I2C_MASTER;

	/* Set config and return status. */
	return _i2c_master_set_config(module, config);
}
     8ec:	b002      	add	sp, #8
     8ee:	bc04      	pop	{r2}
     8f0:	4690      	mov	r8, r2
     8f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
     8f4:	0000100d 	.word	0x0000100d
     8f8:	40000400 	.word	0x40000400
     8fc:	0000217d 	.word	0x0000217d
     900:	000020f1 	.word	0x000020f1
     904:	00000e39 	.word	0x00000e39
     908:	00000e85 	.word	0x00000e85
     90c:	000022cd 	.word	0x000022cd
     910:	41002000 	.word	0x41002000
     914:	00002199 	.word	0x00002199
     918:	00010525 	.word	0x00010525

0000091c <i2c_master_reset>:
 * Reset the module to hardware defaults.
 *
 * \param[in,out] module Pointer to software module structure
 */
void i2c_master_reset(struct i2c_master_module *const module)
{
     91c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     91e:	1c04      	adds	r4, r0, #0
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     920:	6807      	ldr	r7, [r0, #0]

	/* Wait for sync */
	_i2c_master_wait_for_sync(module);
     922:	4d07      	ldr	r5, [pc, #28]	; (940 <i2c_master_reset+0x24>)
     924:	47a8      	blx	r5
{
	/* Sanity check of arguments. */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     926:	6826      	ldr	r6, [r4, #0]

	/* Wait for module to sync. */
	_i2c_master_wait_for_sync(module);
     928:	1c20      	adds	r0, r4, #0
     92a:	47a8      	blx	r5

	/* Disable module. */
	i2c_module->CTRLA.reg &= ~SERCOM_I2CM_CTRLA_ENABLE;
     92c:	6833      	ldr	r3, [r6, #0]
     92e:	2202      	movs	r2, #2
     930:	4393      	bics	r3, r2
     932:	6033      	str	r3, [r6, #0]
	system_interrupt_clear_pending(_sercom_get_interrupt_vector(module->hw));
	system_interrupt_leave_critical_section();
#endif

	/* Wait for sync */
	_i2c_master_wait_for_sync(module);
     934:	1c20      	adds	r0, r4, #0
     936:	47a8      	blx	r5

	/* Reset module */
	i2c_module->CTRLA.reg = SERCOM_I2CM_CTRLA_SWRST;
     938:	2301      	movs	r3, #1
     93a:	603b      	str	r3, [r7, #0]
}
     93c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     93e:	46c0      	nop			; (mov r8, r8)
     940:	00000759 	.word	0x00000759

00000944 <_i2c_master_address_response>:
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     944:	6803      	ldr	r3, [r0, #0]

	/* Check for error and ignore bus-error; workaround for BUSSTATE stuck in
	 * BUSY */
	if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB) {
     946:	7e1a      	ldrb	r2, [r3, #24]
     948:	0792      	lsls	r2, r2, #30
     94a:	d507      	bpl.n	95c <_i2c_master_address_response+0x18>

		/* Clear write interrupt flag */
		i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
     94c:	2202      	movs	r2, #2
     94e:	761a      	strb	r2, [r3, #24]

		/* Check arbitration. */
		if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_ARBLOST) {
     950:	8b5b      	ldrh	r3, [r3, #26]
     952:	079b      	lsls	r3, r3, #30
			/* Return packet collision. */
			return STATUS_ERR_PACKET_COLLISION;
     954:	2041      	movs	r0, #65	; 0x41

		/* Return bad address value. */
		return STATUS_ERR_BAD_ADDRESS;
	}

	return STATUS_OK;
     956:	17db      	asrs	r3, r3, #31
     958:	4018      	ands	r0, r3
     95a:	e00a      	b.n	972 <_i2c_master_address_response+0x2e>
		if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_ARBLOST) {
			/* Return packet collision. */
			return STATUS_ERR_PACKET_COLLISION;
		}
	/* Check that slave responded with ack. */
	} else if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
     95c:	8b5a      	ldrh	r2, [r3, #26]
     95e:	0752      	lsls	r2, r2, #29
     960:	d506      	bpl.n	970 <_i2c_master_address_response+0x2c>
		/* Slave busy. Issue ack and stop command. */
		i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
     962:	685a      	ldr	r2, [r3, #4]
     964:	21c0      	movs	r1, #192	; 0xc0
     966:	0289      	lsls	r1, r1, #10
     968:	430a      	orrs	r2, r1
     96a:	605a      	str	r2, [r3, #4]

		/* Return bad address value. */
		return STATUS_ERR_BAD_ADDRESS;
     96c:	2018      	movs	r0, #24
     96e:	e000      	b.n	972 <_i2c_master_address_response+0x2e>
	}

	return STATUS_OK;
     970:	2000      	movs	r0, #0
}
     972:	4770      	bx	lr

00000974 <_i2c_master_wait_for_bus>:
 * \retval STATUS_ERR_TIMEOUT  If no response was given within specified timeout
 *                             period
 */
enum status_code _i2c_master_wait_for_bus(
		struct i2c_master_module *const module)
{
     974:	b530      	push	{r4, r5, lr}
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     976:	6802      	ldr	r2, [r0, #0]

	/* Wait for reply. */
	uint16_t timeout_counter = 0;
     978:	2300      	movs	r3, #0
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
     97a:	2401      	movs	r4, #1
			!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB)) {
     97c:	2502      	movs	r5, #2

	SercomI2cm *const i2c_module = &(module->hw->I2CM);

	/* Wait for reply. */
	uint16_t timeout_counter = 0;
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
     97e:	e004      	b.n	98a <_i2c_master_wait_for_bus+0x16>
			!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB)) {

		/* Check timeout condition. */
		if (++timeout_counter >= module->buffer_timeout) {
     980:	3301      	adds	r3, #1
     982:	b29b      	uxth	r3, r3
     984:	8901      	ldrh	r1, [r0, #8]
     986:	4299      	cmp	r1, r3
     988:	d907      	bls.n	99a <_i2c_master_wait_for_bus+0x26>

	SercomI2cm *const i2c_module = &(module->hw->I2CM);

	/* Wait for reply. */
	uint16_t timeout_counter = 0;
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
     98a:	7e11      	ldrb	r1, [r2, #24]
     98c:	4221      	tst	r1, r4
     98e:	d106      	bne.n	99e <_i2c_master_wait_for_bus+0x2a>
			!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB)) {
     990:	7e11      	ldrb	r1, [r2, #24]

	SercomI2cm *const i2c_module = &(module->hw->I2CM);

	/* Wait for reply. */
	uint16_t timeout_counter = 0;
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
     992:	4229      	tst	r1, r5
     994:	d0f4      	beq.n	980 <_i2c_master_wait_for_bus+0xc>
		/* Check timeout condition. */
		if (++timeout_counter >= module->buffer_timeout) {
			return STATUS_ERR_TIMEOUT;
		}
	}
	return STATUS_OK;
     996:	2000      	movs	r0, #0
     998:	e002      	b.n	9a0 <_i2c_master_wait_for_bus+0x2c>
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
			!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB)) {

		/* Check timeout condition. */
		if (++timeout_counter >= module->buffer_timeout) {
			return STATUS_ERR_TIMEOUT;
     99a:	2012      	movs	r0, #18
     99c:	e000      	b.n	9a0 <_i2c_master_wait_for_bus+0x2c>
		}
	}
	return STATUS_OK;
     99e:	2000      	movs	r0, #0
}
     9a0:	bd30      	pop	{r4, r5, pc}
     9a2:	46c0      	nop			; (mov r8, r8)

000009a4 <_i2c_master_send_hs_master_code>:
 * \retval STATUS_OK           No error happen.
 */
enum status_code _i2c_master_send_hs_master_code(
		struct i2c_master_module *const module,
		uint8_t hs_master_code)
{
     9a4:	b510      	push	{r4, lr}
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     9a6:	6804      	ldr	r4, [r0, #0]
	/* Return value. */
	enum status_code tmp_status;

	/* Set NACK for high speed code */
	i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
     9a8:	6863      	ldr	r3, [r4, #4]
     9aa:	2280      	movs	r2, #128	; 0x80
     9ac:	02d2      	lsls	r2, r2, #11
     9ae:	4313      	orrs	r3, r2
     9b0:	6063      	str	r3, [r4, #4]
	/* Send high speed code */
	i2c_module->ADDR.reg = hs_master_code;
     9b2:	6261      	str	r1, [r4, #36]	; 0x24
	/* Wait for response on bus. */
	tmp_status = _i2c_master_wait_for_bus(module);
     9b4:	4b02      	ldr	r3, [pc, #8]	; (9c0 <_i2c_master_send_hs_master_code+0x1c>)
     9b6:	4798      	blx	r3
	/* Clear write interrupt flag */
	i2c_module->INTFLAG.reg = SERCOM_I2CM_INTENCLR_MB;
     9b8:	2301      	movs	r3, #1
     9ba:	7623      	strb	r3, [r4, #24]

	return tmp_status;
}
     9bc:	bd10      	pop	{r4, pc}
     9be:	46c0      	nop			; (mov r8, r8)
     9c0:	00000975 	.word	0x00000975

000009c4 <_i2c_master_read_packet>:
 *
 */
static enum status_code _i2c_master_read_packet(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
     9c4:	b5f0      	push	{r4, r5, r6, r7, lr}
     9c6:	465f      	mov	r7, fp
     9c8:	4656      	mov	r6, sl
     9ca:	464d      	mov	r5, r9
     9cc:	4644      	mov	r4, r8
     9ce:	b4f0      	push	{r4, r5, r6, r7}
     9d0:	b083      	sub	sp, #12
     9d2:	9000      	str	r0, [sp, #0]
     9d4:	4688      	mov	r8, r1
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     9d6:	6805      	ldr	r5, [r0, #0]

	/* Return value. */
	enum status_code tmp_status;
	uint16_t tmp_data_length = packet->data_length;
     9d8:	884c      	ldrh	r4, [r1, #2]

	/* Written buffer counter. */
	uint16_t counter = 0;

	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
     9da:	682b      	ldr	r3, [r5, #0]
     9dc:	011b      	lsls	r3, r3, #4
     9de:	0fdb      	lsrs	r3, r3, #31
     9e0:	4699      	mov	r9, r3

	/* Switch to high speed mode */
	if (packet->high_speed) {
     9e2:	7a4b      	ldrb	r3, [r1, #9]
     9e4:	2b00      	cmp	r3, #0
     9e6:	d002      	beq.n	9ee <_i2c_master_read_packet+0x2a>
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
     9e8:	7a89      	ldrb	r1, [r1, #10]
     9ea:	4b4d      	ldr	r3, [pc, #308]	; (b20 <_i2c_master_read_packet+0x15c>)
     9ec:	4798      	blx	r3
	}

	/* Set action to ACK. */
	i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
     9ee:	686a      	ldr	r2, [r5, #4]
     9f0:	4b4c      	ldr	r3, [pc, #304]	; (b24 <_i2c_master_read_packet+0x160>)
     9f2:	4013      	ands	r3, r2
     9f4:	606b      	str	r3, [r5, #4]

	/* Set address and direction bit. Will send start command on bus. */
	if (packet->ten_bit_address) {
     9f6:	4643      	mov	r3, r8
     9f8:	7a1b      	ldrb	r3, [r3, #8]
     9fa:	2b00      	cmp	r3, #0
     9fc:	d026      	beq.n	a4c <_i2c_master_read_packet+0x88>
		/*
		 * Write ADDR.ADDR[10:1] with the 10-bit address. ADDR.TENBITEN must
		 * be set and read/write bit (ADDR.ADDR[0]) equal to 0.
		 */
		i2c_module->ADDR.reg = (packet->address << 1) |
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
     9fe:	4643      	mov	r3, r8
     a00:	7a5b      	ldrb	r3, [r3, #9]
     a02:	039a      	lsls	r2, r3, #14
	if (packet->ten_bit_address) {
		/*
		 * Write ADDR.ADDR[10:1] with the 10-bit address. ADDR.TENBITEN must
		 * be set and read/write bit (ADDR.ADDR[0]) equal to 0.
		 */
		i2c_module->ADDR.reg = (packet->address << 1) |
     a04:	4643      	mov	r3, r8
     a06:	881b      	ldrh	r3, [r3, #0]
     a08:	005b      	lsls	r3, r3, #1
     a0a:	4313      	orrs	r3, r2
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
     a0c:	2280      	movs	r2, #128	; 0x80
     a0e:	0212      	lsls	r2, r2, #8
     a10:	4313      	orrs	r3, r2
	if (packet->ten_bit_address) {
		/*
		 * Write ADDR.ADDR[10:1] with the 10-bit address. ADDR.TENBITEN must
		 * be set and read/write bit (ADDR.ADDR[0]) equal to 0.
		 */
		i2c_module->ADDR.reg = (packet->address << 1) |
     a12:	626b      	str	r3, [r5, #36]	; 0x24
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
			SERCOM_I2CM_ADDR_TENBITEN;

		/* Wait for response on bus. */
		tmp_status = _i2c_master_wait_for_bus(module);
     a14:	9800      	ldr	r0, [sp, #0]
     a16:	4b44      	ldr	r3, [pc, #272]	; (b28 <_i2c_master_read_packet+0x164>)
     a18:	4798      	blx	r3

		/* Set action to ack. */
		i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
     a1a:	686a      	ldr	r2, [r5, #4]
     a1c:	4b41      	ldr	r3, [pc, #260]	; (b24 <_i2c_master_read_packet+0x160>)
     a1e:	4013      	ands	r3, r2
     a20:	606b      	str	r3, [r5, #4]
		i2c_module->ADDR.reg = (packet->address << 1) |
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
			SERCOM_I2CM_ADDR_TENBITEN;

		/* Wait for response on bus. */
		tmp_status = _i2c_master_wait_for_bus(module);
     a22:	1e03      	subs	r3, r0, #0
		/* Set action to ack. */
		i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;

		/* Check for address response error unless previous error is
		 * detected. */
		if (tmp_status == STATUS_OK) {
     a24:	d173      	bne.n	b0e <_i2c_master_read_packet+0x14a>
			tmp_status = _i2c_master_address_response(module);
     a26:	9800      	ldr	r0, [sp, #0]
     a28:	4b40      	ldr	r3, [pc, #256]	; (b2c <_i2c_master_read_packet+0x168>)
     a2a:	4798      	blx	r3
     a2c:	1e03      	subs	r3, r0, #0
		}

		if (tmp_status == STATUS_OK) {
     a2e:	d16e      	bne.n	b0e <_i2c_master_read_packet+0x14a>
			/*
			 * Write ADDR[7:0] register to “11110 address[9:8] 1”.
			 * ADDR.TENBITEN must be cleared
			 */
			i2c_module->ADDR.reg = (((packet->address >> 8) | 0x78) << 1) |
				(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
     a30:	4643      	mov	r3, r8
     a32:	7a5b      	ldrb	r3, [r3, #9]
     a34:	039b      	lsls	r3, r3, #14
     a36:	2201      	movs	r2, #1
     a38:	4313      	orrs	r3, r2
		if (tmp_status == STATUS_OK) {
			/*
			 * Write ADDR[7:0] register to “11110 address[9:8] 1”.
			 * ADDR.TENBITEN must be cleared
			 */
			i2c_module->ADDR.reg = (((packet->address >> 8) | 0x78) << 1) |
     a3a:	4642      	mov	r2, r8
     a3c:	8812      	ldrh	r2, [r2, #0]
     a3e:	0a12      	lsrs	r2, r2, #8
     a40:	2178      	movs	r1, #120	; 0x78
     a42:	430a      	orrs	r2, r1
     a44:	0052      	lsls	r2, r2, #1
				(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
     a46:	4313      	orrs	r3, r2
		if (tmp_status == STATUS_OK) {
			/*
			 * Write ADDR[7:0] register to “11110 address[9:8] 1”.
			 * ADDR.TENBITEN must be cleared
			 */
			i2c_module->ADDR.reg = (((packet->address >> 8) | 0x78) << 1) |
     a48:	626b      	str	r3, [r5, #36]	; 0x24
     a4a:	e009      	b.n	a60 <_i2c_master_read_packet+0x9c>
				I2C_TRANSFER_READ;
		} else {
			return tmp_status;
		}
	} else {
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_READ |
     a4c:	4643      	mov	r3, r8
     a4e:	881b      	ldrh	r3, [r3, #0]
     a50:	005a      	lsls	r2, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
     a52:	4643      	mov	r3, r8
     a54:	7a5b      	ldrb	r3, [r3, #9]
     a56:	039b      	lsls	r3, r3, #14
     a58:	4313      	orrs	r3, r2
				I2C_TRANSFER_READ;
		} else {
			return tmp_status;
		}
	} else {
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_READ |
     a5a:	2201      	movs	r2, #1
     a5c:	4313      	orrs	r3, r2
     a5e:	626b      	str	r3, [r5, #36]	; 0x24
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
	}

	/* Wait for response on bus. */
	tmp_status = _i2c_master_wait_for_bus(module);
     a60:	9800      	ldr	r0, [sp, #0]
     a62:	4b31      	ldr	r3, [pc, #196]	; (b28 <_i2c_master_read_packet+0x164>)
     a64:	4798      	blx	r3

	/* Set action to ack. */
	i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
     a66:	686a      	ldr	r2, [r5, #4]
     a68:	4b2e      	ldr	r3, [pc, #184]	; (b24 <_i2c_master_read_packet+0x160>)
     a6a:	4013      	ands	r3, r2
     a6c:	606b      	str	r3, [r5, #4]
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_READ |
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
	}

	/* Wait for response on bus. */
	tmp_status = _i2c_master_wait_for_bus(module);
     a6e:	1e03      	subs	r3, r0, #0
	/* Set action to ack. */
	i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;

	/* Check for address response error unless previous error is
	 * detected. */
	if (tmp_status == STATUS_OK) {
     a70:	d14d      	bne.n	b0e <_i2c_master_read_packet+0x14a>
		tmp_status = _i2c_master_address_response(module);
     a72:	9800      	ldr	r0, [sp, #0]
     a74:	4b2d      	ldr	r3, [pc, #180]	; (b2c <_i2c_master_read_packet+0x168>)
     a76:	4798      	blx	r3
     a78:	9001      	str	r0, [sp, #4]
     a7a:	1e03      	subs	r3, r0, #0
	}

	/* Check that no error has occurred. */
	if (tmp_status == STATUS_OK) {
     a7c:	d147      	bne.n	b0e <_i2c_master_read_packet+0x14a>
     a7e:	3c01      	subs	r4, #1
     a80:	b2a4      	uxth	r4, r4
     a82:	2700      	movs	r7, #0
		/* Read data buffer. */
		while (tmp_data_length--) {
     a84:	4b2a      	ldr	r3, [pc, #168]	; (b30 <_i2c_master_read_packet+0x16c>)
     a86:	469b      	mov	fp, r3
			} else {
				/* Save data to buffer. */
				_i2c_master_wait_for_sync(module);
				packet->data[counter++] = i2c_module->DATA.reg;
				/* Wait for response. */
				tmp_status = _i2c_master_wait_for_bus(module);
     a88:	4b27      	ldr	r3, [pc, #156]	; (b28 <_i2c_master_read_packet+0x164>)
     a8a:	469a      	mov	sl, r3
     a8c:	e023      	b.n	ad6 <_i2c_master_read_packet+0x112>
	/* Check that no error has occurred. */
	if (tmp_status == STATUS_OK) {
		/* Read data buffer. */
		while (tmp_data_length--) {
			/* Check that bus ownership is not lost. */
			if (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) {
     a8e:	8b6b      	ldrh	r3, [r5, #26]
     a90:	069b      	lsls	r3, r3, #26
     a92:	d53b      	bpl.n	b0c <_i2c_master_read_packet+0x148>
				return STATUS_ERR_PACKET_COLLISION;
			}

			if (((!sclsm_flag) && (tmp_data_length == 0)) ||
     a94:	464b      	mov	r3, r9
     a96:	2b00      	cmp	r3, #0
     a98:	d102      	bne.n	aa0 <_i2c_master_read_packet+0xdc>
     a9a:	2c00      	cmp	r4, #0
     a9c:	d002      	beq.n	aa4 <_i2c_master_read_packet+0xe0>
     a9e:	e009      	b.n	ab4 <_i2c_master_read_packet+0xf0>
					((sclsm_flag) && (tmp_data_length == 1))) {
     aa0:	2c01      	cmp	r4, #1
     aa2:	d107      	bne.n	ab4 <_i2c_master_read_packet+0xf0>
				/* Set action to NACK */
				i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
     aa4:	686b      	ldr	r3, [r5, #4]
     aa6:	2280      	movs	r2, #128	; 0x80
     aa8:	02d2      	lsls	r2, r2, #11
     aaa:	4313      	orrs	r3, r2
     aac:	606b      	str	r3, [r5, #4]
     aae:	3c01      	subs	r4, #1
     ab0:	b2a4      	uxth	r4, r4
     ab2:	e010      	b.n	ad6 <_i2c_master_read_packet+0x112>
			} else {
				/* Save data to buffer. */
				_i2c_master_wait_for_sync(module);
     ab4:	9800      	ldr	r0, [sp, #0]
     ab6:	4b1f      	ldr	r3, [pc, #124]	; (b34 <_i2c_master_read_packet+0x170>)
     ab8:	4798      	blx	r3
				packet->data[counter++] = i2c_module->DATA.reg;
     aba:	1c7e      	adds	r6, r7, #1
     abc:	b2b6      	uxth	r6, r6
     abe:	2328      	movs	r3, #40	; 0x28
     ac0:	5ceb      	ldrb	r3, [r5, r3]
     ac2:	4642      	mov	r2, r8
     ac4:	6852      	ldr	r2, [r2, #4]
     ac6:	55d3      	strb	r3, [r2, r7]
				/* Wait for response. */
				tmp_status = _i2c_master_wait_for_bus(module);
     ac8:	9800      	ldr	r0, [sp, #0]
     aca:	47d0      	blx	sl
     acc:	3c01      	subs	r4, #1
     ace:	b2a4      	uxth	r4, r4
			}

			/* Check for error. */
			if (tmp_status != STATUS_OK) {
     ad0:	2800      	cmp	r0, #0
     ad2:	d103      	bne.n	adc <_i2c_master_read_packet+0x118>
				/* Set action to NACK */
				i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
			} else {
				/* Save data to buffer. */
				_i2c_master_wait_for_sync(module);
				packet->data[counter++] = i2c_module->DATA.reg;
     ad4:	1c37      	adds	r7, r6, #0
	}

	/* Check that no error has occurred. */
	if (tmp_status == STATUS_OK) {
		/* Read data buffer. */
		while (tmp_data_length--) {
     ad6:	455c      	cmp	r4, fp
     ad8:	d1d9      	bne.n	a8e <_i2c_master_read_packet+0xca>
     ada:	e001      	b.n	ae0 <_i2c_master_read_packet+0x11c>
				/* Set action to NACK */
				i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
			} else {
				/* Save data to buffer. */
				_i2c_master_wait_for_sync(module);
				packet->data[counter++] = i2c_module->DATA.reg;
     adc:	1c37      	adds	r7, r6, #0
				/* Wait for response. */
				tmp_status = _i2c_master_wait_for_bus(module);
     ade:	9001      	str	r0, [sp, #4]
			if (tmp_status != STATUS_OK) {
				break;
			}
		}

		if (module->send_stop) {
     ae0:	9b00      	ldr	r3, [sp, #0]
     ae2:	7a9b      	ldrb	r3, [r3, #10]
     ae4:	2b00      	cmp	r3, #0
     ae6:	d007      	beq.n	af8 <_i2c_master_read_packet+0x134>
			/* Send stop command unless arbitration is lost. */
			_i2c_master_wait_for_sync(module);
     ae8:	9800      	ldr	r0, [sp, #0]
     aea:	4b12      	ldr	r3, [pc, #72]	; (b34 <_i2c_master_read_packet+0x170>)
     aec:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
     aee:	686b      	ldr	r3, [r5, #4]
     af0:	22c0      	movs	r2, #192	; 0xc0
     af2:	0292      	lsls	r2, r2, #10
     af4:	4313      	orrs	r3, r2
     af6:	606b      	str	r3, [r5, #4]
		}

		/* Save last data to buffer. */
		_i2c_master_wait_for_sync(module);
     af8:	9800      	ldr	r0, [sp, #0]
     afa:	4b0e      	ldr	r3, [pc, #56]	; (b34 <_i2c_master_read_packet+0x170>)
     afc:	4798      	blx	r3
		packet->data[counter] = i2c_module->DATA.reg;
     afe:	2328      	movs	r3, #40	; 0x28
     b00:	5cea      	ldrb	r2, [r5, r3]
     b02:	4643      	mov	r3, r8
     b04:	685b      	ldr	r3, [r3, #4]
     b06:	55da      	strb	r2, [r3, r7]
     b08:	9b01      	ldr	r3, [sp, #4]
     b0a:	e000      	b.n	b0e <_i2c_master_read_packet+0x14a>
	if (tmp_status == STATUS_OK) {
		/* Read data buffer. */
		while (tmp_data_length--) {
			/* Check that bus ownership is not lost. */
			if (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) {
				return STATUS_ERR_PACKET_COLLISION;
     b0c:	2341      	movs	r3, #65	; 0x41
		_i2c_master_wait_for_sync(module);
		packet->data[counter] = i2c_module->DATA.reg;
	}

	return tmp_status;
}
     b0e:	1c18      	adds	r0, r3, #0
     b10:	b003      	add	sp, #12
     b12:	bc3c      	pop	{r2, r3, r4, r5}
     b14:	4690      	mov	r8, r2
     b16:	4699      	mov	r9, r3
     b18:	46a2      	mov	sl, r4
     b1a:	46ab      	mov	fp, r5
     b1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
     b1e:	46c0      	nop			; (mov r8, r8)
     b20:	000009a5 	.word	0x000009a5
     b24:	fffbffff 	.word	0xfffbffff
     b28:	00000975 	.word	0x00000975
     b2c:	00000945 	.word	0x00000945
     b30:	0000ffff 	.word	0x0000ffff
     b34:	00000759 	.word	0x00000759

00000b38 <_i2c_master_write_packet>:
 *                                      acknowledged the address
 */
static enum status_code _i2c_master_write_packet(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
     b38:	b5f0      	push	{r4, r5, r6, r7, lr}
     b3a:	465f      	mov	r7, fp
     b3c:	4656      	mov	r6, sl
     b3e:	464d      	mov	r5, r9
     b40:	4644      	mov	r4, r8
     b42:	b4f0      	push	{r4, r5, r6, r7}
     b44:	b083      	sub	sp, #12
     b46:	1c06      	adds	r6, r0, #0
     b48:	1c0f      	adds	r7, r1, #0
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     b4a:	6805      	ldr	r5, [r0, #0]

	/* Return value. */
	enum status_code tmp_status;
	uint16_t tmp_data_length = packet->data_length;
     b4c:	884c      	ldrh	r4, [r1, #2]

	_i2c_master_wait_for_sync(module);
     b4e:	4b31      	ldr	r3, [pc, #196]	; (c14 <_i2c_master_write_packet+0xdc>)
     b50:	4798      	blx	r3

	/* Switch to high speed mode */
	if (packet->high_speed) {
     b52:	7a7b      	ldrb	r3, [r7, #9]
     b54:	2b00      	cmp	r3, #0
     b56:	d003      	beq.n	b60 <_i2c_master_write_packet+0x28>
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
     b58:	7ab9      	ldrb	r1, [r7, #10]
     b5a:	1c30      	adds	r0, r6, #0
     b5c:	4b2e      	ldr	r3, [pc, #184]	; (c18 <_i2c_master_write_packet+0xe0>)
     b5e:	4798      	blx	r3
	}

	/* Set action to ACK. */
	i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
     b60:	686a      	ldr	r2, [r5, #4]
     b62:	4b2e      	ldr	r3, [pc, #184]	; (c1c <_i2c_master_write_packet+0xe4>)
     b64:	4013      	ands	r3, r2
     b66:	606b      	str	r3, [r5, #4]

	/* Set address and direction bit. Will send start command on bus. */
	if (packet->ten_bit_address) {
     b68:	7a3b      	ldrb	r3, [r7, #8]
     b6a:	2b00      	cmp	r3, #0
     b6c:	d009      	beq.n	b82 <_i2c_master_write_packet+0x4a>
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
     b6e:	7a7b      	ldrb	r3, [r7, #9]
     b70:	039a      	lsls	r2, r3, #14
	/* Set action to ACK. */
	i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;

	/* Set address and direction bit. Will send start command on bus. */
	if (packet->ten_bit_address) {
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
     b72:	883b      	ldrh	r3, [r7, #0]
     b74:	005b      	lsls	r3, r3, #1
     b76:	4313      	orrs	r3, r2
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
     b78:	2280      	movs	r2, #128	; 0x80
     b7a:	0212      	lsls	r2, r2, #8
     b7c:	4313      	orrs	r3, r2
	/* Set action to ACK. */
	i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;

	/* Set address and direction bit. Will send start command on bus. */
	if (packet->ten_bit_address) {
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
     b7e:	626b      	str	r3, [r5, #36]	; 0x24
     b80:	e005      	b.n	b8e <_i2c_master_write_packet+0x56>
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
			SERCOM_I2CM_ADDR_TENBITEN;
	} else {
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
     b82:	7a7b      	ldrb	r3, [r7, #9]
     b84:	039a      	lsls	r2, r3, #14
	if (packet->ten_bit_address) {
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
			SERCOM_I2CM_ADDR_TENBITEN;
	} else {
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
     b86:	883b      	ldrh	r3, [r7, #0]
     b88:	005b      	lsls	r3, r3, #1
     b8a:	4313      	orrs	r3, r2
     b8c:	626b      	str	r3, [r5, #36]	; 0x24
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
	}
	/* Wait for response on bus. */
	tmp_status = _i2c_master_wait_for_bus(module);
     b8e:	1c30      	adds	r0, r6, #0
     b90:	4b23      	ldr	r3, [pc, #140]	; (c20 <_i2c_master_write_packet+0xe8>)
     b92:	4798      	blx	r3
     b94:	1e03      	subs	r3, r0, #0

	/* Check for address response error unless previous error is
	 * detected. */
	if (tmp_status == STATUS_OK) {
     b96:	d136      	bne.n	c06 <_i2c_master_write_packet+0xce>
		tmp_status = _i2c_master_address_response(module);
     b98:	1c30      	adds	r0, r6, #0
     b9a:	4b22      	ldr	r3, [pc, #136]	; (c24 <_i2c_master_write_packet+0xec>)
     b9c:	4798      	blx	r3
     b9e:	1e03      	subs	r3, r0, #0
     ba0:	9001      	str	r0, [sp, #4]
	}

	/* Check that no error has occurred. */
	if (tmp_status == STATUS_OK) {
     ba2:	d130      	bne.n	c06 <_i2c_master_write_packet+0xce>
     ba4:	46a0      	mov	r8, r4
     ba6:	2400      	movs	r4, #0
		uint16_t buffer_counter = 0;

		/* Write data buffer. */
		while (tmp_data_length--) {
			/* Check that bus ownership is not lost. */
			if (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) {
     ba8:	3320      	adds	r3, #32
     baa:	4699      	mov	r9, r3
				return STATUS_ERR_PACKET_COLLISION;
			}

			/* Write byte to slave. */
			_i2c_master_wait_for_sync(module);
     bac:	4b19      	ldr	r3, [pc, #100]	; (c14 <_i2c_master_write_packet+0xdc>)
     bae:	469b      	mov	fp, r3
			i2c_module->DATA.reg = packet->data[buffer_counter++];

			/* Wait for response. */
			tmp_status = _i2c_master_wait_for_bus(module);
     bb0:	4b1b      	ldr	r3, [pc, #108]	; (c20 <_i2c_master_write_packet+0xe8>)
     bb2:	469a      	mov	sl, r3
     bb4:	e011      	b.n	bda <_i2c_master_write_packet+0xa2>
		uint16_t buffer_counter = 0;

		/* Write data buffer. */
		while (tmp_data_length--) {
			/* Check that bus ownership is not lost. */
			if (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) {
     bb6:	8b6b      	ldrh	r3, [r5, #26]
     bb8:	464a      	mov	r2, r9
     bba:	4213      	tst	r3, r2
     bbc:	d022      	beq.n	c04 <_i2c_master_write_packet+0xcc>
				return STATUS_ERR_PACKET_COLLISION;
			}

			/* Write byte to slave. */
			_i2c_master_wait_for_sync(module);
     bbe:	1c30      	adds	r0, r6, #0
     bc0:	47d8      	blx	fp
			i2c_module->DATA.reg = packet->data[buffer_counter++];
     bc2:	687b      	ldr	r3, [r7, #4]
     bc4:	5d1a      	ldrb	r2, [r3, r4]
     bc6:	2328      	movs	r3, #40	; 0x28
     bc8:	54ea      	strb	r2, [r5, r3]

			/* Wait for response. */
			tmp_status = _i2c_master_wait_for_bus(module);
     bca:	1c30      	adds	r0, r6, #0
     bcc:	47d0      	blx	sl

			/* Check for error. */
			if (tmp_status != STATUS_OK) {
     bce:	2800      	cmp	r0, #0
     bd0:	d106      	bne.n	be0 <_i2c_master_write_packet+0xa8>
				break;
			}

			/* Check for NACK from slave. */
			if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
     bd2:	8b6b      	ldrh	r3, [r5, #26]
     bd4:	3401      	adds	r4, #1
     bd6:	075b      	lsls	r3, r3, #29
     bd8:	d404      	bmi.n	be4 <_i2c_master_write_packet+0xac>
	if (tmp_status == STATUS_OK) {
		/* Buffer counter. */
		uint16_t buffer_counter = 0;

		/* Write data buffer. */
		while (tmp_data_length--) {
     bda:	4544      	cmp	r4, r8
     bdc:	d1eb      	bne.n	bb6 <_i2c_master_write_packet+0x7e>
     bde:	e003      	b.n	be8 <_i2c_master_write_packet+0xb0>
			/* Write byte to slave. */
			_i2c_master_wait_for_sync(module);
			i2c_module->DATA.reg = packet->data[buffer_counter++];

			/* Wait for response. */
			tmp_status = _i2c_master_wait_for_bus(module);
     be0:	9001      	str	r0, [sp, #4]
     be2:	e001      	b.n	be8 <_i2c_master_write_packet+0xb0>
			}

			/* Check for NACK from slave. */
			if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
				/* Return bad data value. */
				tmp_status = STATUS_ERR_OVERFLOW;
     be4:	231e      	movs	r3, #30
     be6:	9301      	str	r3, [sp, #4]
				break;
			}
		}

		if (module->send_stop) {
     be8:	7ab3      	ldrb	r3, [r6, #10]
     bea:	9801      	ldr	r0, [sp, #4]
     bec:	2b00      	cmp	r3, #0
     bee:	d00a      	beq.n	c06 <_i2c_master_write_packet+0xce>
			/* Stop command */
			_i2c_master_wait_for_sync(module);
     bf0:	1c30      	adds	r0, r6, #0
     bf2:	4b08      	ldr	r3, [pc, #32]	; (c14 <_i2c_master_write_packet+0xdc>)
     bf4:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
     bf6:	686b      	ldr	r3, [r5, #4]
     bf8:	22c0      	movs	r2, #192	; 0xc0
     bfa:	0292      	lsls	r2, r2, #10
     bfc:	4313      	orrs	r3, r2
     bfe:	606b      	str	r3, [r5, #4]
     c00:	9801      	ldr	r0, [sp, #4]
     c02:	e000      	b.n	c06 <_i2c_master_write_packet+0xce>

		/* Write data buffer. */
		while (tmp_data_length--) {
			/* Check that bus ownership is not lost. */
			if (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) {
				return STATUS_ERR_PACKET_COLLISION;
     c04:	2041      	movs	r0, #65	; 0x41
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
		}
	}

	return tmp_status;
}
     c06:	b003      	add	sp, #12
     c08:	bc3c      	pop	{r2, r3, r4, r5}
     c0a:	4690      	mov	r8, r2
     c0c:	4699      	mov	r9, r3
     c0e:	46a2      	mov	sl, r4
     c10:	46ab      	mov	fp, r5
     c12:	bdf0      	pop	{r4, r5, r6, r7, pc}
     c14:	00000759 	.word	0x00000759
     c18:	000009a5 	.word	0x000009a5
     c1c:	fffbffff 	.word	0xfffbffff
     c20:	00000975 	.word	0x00000975
     c24:	00000945 	.word	0x00000945

00000c28 <i2c_master_read_packet_wait>:
 *                                      acknowledged the address
 */
enum status_code i2c_master_read_packet_wait(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
     c28:	b508      	push	{r3, lr}
	if (module->buffer_remaining > 0) {
		return STATUS_BUSY;
	}
#endif

	module->send_stop = true;
     c2a:	2301      	movs	r3, #1
     c2c:	7283      	strb	r3, [r0, #10]

	return _i2c_master_read_packet(module, packet);
     c2e:	4b01      	ldr	r3, [pc, #4]	; (c34 <i2c_master_read_packet_wait+0xc>)
     c30:	4798      	blx	r3
}
     c32:	bd08      	pop	{r3, pc}
     c34:	000009c5 	.word	0x000009c5

00000c38 <i2c_master_write_packet_wait_no_stop>:
 *                                      more data
 */
enum status_code i2c_master_write_packet_wait_no_stop(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
     c38:	b508      	push	{r3, lr}
	if (module->buffer_remaining > 0) {
		return STATUS_BUSY;
	}
#endif

	module->send_stop = false;
     c3a:	2300      	movs	r3, #0
     c3c:	7283      	strb	r3, [r0, #10]

	return _i2c_master_write_packet(module, packet);
     c3e:	4b01      	ldr	r3, [pc, #4]	; (c44 <i2c_master_write_packet_wait_no_stop+0xc>)
     c40:	4798      	blx	r3
}
     c42:	bd08      	pop	{r3, pc}
     c44:	00000b39 	.word	0x00000b39

00000c48 <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
     c48:	b510      	push	{r4, lr}
	uint16_t baud_calculated = 0;
	uint32_t clock_value = external_clock;


	/* Check if baudrate is outside of valid range. */
	if (baudrate > (external_clock / 2)) {
     c4a:	0849      	lsrs	r1, r1, #1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     c4c:	2440      	movs	r4, #64	; 0x40
	uint16_t baud_calculated = 0;
	uint32_t clock_value = external_clock;


	/* Check if baudrate is outside of valid range. */
	if (baudrate > (external_clock / 2)) {
     c4e:	4281      	cmp	r1, r0
     c50:	d30c      	bcc.n	c6c <_sercom_get_sync_baud_val+0x24>
     c52:	2300      	movs	r3, #0
	}

	/* Calculate BAUD value from clock frequency and baudrate */
	clock_value = external_clock / 2;
	while (clock_value >= baudrate) {
		clock_value = clock_value - baudrate;
     c54:	1a09      	subs	r1, r1, r0
		baud_calculated++;
     c56:	3301      	adds	r3, #1
     c58:	b29b      	uxth	r3, r3
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	}

	/* Calculate BAUD value from clock frequency and baudrate */
	clock_value = external_clock / 2;
	while (clock_value >= baudrate) {
     c5a:	4288      	cmp	r0, r1
     c5c:	d9fa      	bls.n	c54 <_sercom_get_sync_baud_val+0xc>
		clock_value = clock_value - baudrate;
		baud_calculated++;
	}
	baud_calculated = baud_calculated - 1;
     c5e:	3b01      	subs	r3, #1
     c60:	b29b      	uxth	r3, r3

	/* Check if BAUD value is more than 255, which is maximum
	 * for synchronous mode */
	if (baud_calculated > 0xFF) {
		/* Return with an error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     c62:	2440      	movs	r4, #64	; 0x40
	}
	baud_calculated = baud_calculated - 1;

	/* Check if BAUD value is more than 255, which is maximum
	 * for synchronous mode */
	if (baud_calculated > 0xFF) {
     c64:	2bff      	cmp	r3, #255	; 0xff
     c66:	d801      	bhi.n	c6c <_sercom_get_sync_baud_val+0x24>
		/* Return with an error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	} else {
		*baudvalue = baud_calculated;
     c68:	8013      	strh	r3, [r2, #0]
		return STATUS_OK;
     c6a:	2400      	movs	r4, #0
	}
}
     c6c:	1c20      	adds	r0, r4, #0
     c6e:	bd10      	pop	{r4, pc}

00000c70 <_sercom_get_async_baud_val>:
		const uint32_t baudrate,
		const uint32_t peripheral_clock,
		uint16_t *const baudval,
		enum sercom_asynchronous_operation_mode mode,
		enum sercom_asynchronous_sample_num sample_num)
{
     c70:	b5f0      	push	{r4, r5, r6, r7, lr}
     c72:	465f      	mov	r7, fp
     c74:	4656      	mov	r6, sl
     c76:	464d      	mov	r5, r9
     c78:	4644      	mov	r4, r8
     c7a:	b4f0      	push	{r4, r5, r6, r7}
     c7c:	b089      	sub	sp, #36	; 0x24
     c7e:	1c1c      	adds	r4, r3, #0
     c80:	ab12      	add	r3, sp, #72	; 0x48
     c82:	781b      	ldrb	r3, [r3, #0]
	uint8_t baud_fp;
	uint32_t baud_int = 0;
	uint64_t temp1, temp2;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
     c84:	1c06      	adds	r6, r0, #0
     c86:	435e      	muls	r6, r3
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     c88:	2540      	movs	r5, #64	; 0x40
	uint8_t baud_fp;
	uint32_t baud_int = 0;
	uint64_t temp1, temp2;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
     c8a:	428e      	cmp	r6, r1
     c8c:	d900      	bls.n	c90 <_sercom_get_async_baud_val+0x20>
     c8e:	e0c7      	b.n	e20 <_sercom_get_async_baud_val+0x1b0>
     c90:	1c25      	adds	r5, r4, #0
     c92:	9207      	str	r2, [sp, #28]
     c94:	1c0c      	adds	r4, r1, #0
     c96:	1c02      	adds	r2, r0, #0
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	}

	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
     c98:	2d00      	cmp	r5, #0
     c9a:	d151      	bne.n	d40 <_sercom_get_async_baud_val+0xd0>
		/* Calculate the BAUD value */
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
     c9c:	1c18      	adds	r0, r3, #0
     c9e:	2100      	movs	r1, #0
     ca0:	2300      	movs	r3, #0
     ca2:	4d63      	ldr	r5, [pc, #396]	; (e30 <_sercom_get_async_baud_val+0x1c0>)
     ca4:	47a8      	blx	r5
     ca6:	4683      	mov	fp, r0
		ratio = long_division(temp1, peripheral_clock);
     ca8:	1c26      	adds	r6, r4, #0
     caa:	2700      	movs	r7, #0
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
     cac:	2300      	movs	r3, #0
     cae:	2400      	movs	r4, #0
     cb0:	9302      	str	r3, [sp, #8]
     cb2:	9403      	str	r4, [sp, #12]
     cb4:	2200      	movs	r2, #0
     cb6:	2300      	movs	r3, #0
	for (i = 63; i >= 0; i--) {
     cb8:	203f      	movs	r0, #63	; 0x3f
		bit_shift = (uint64_t)1 << i;
     cba:	2120      	movs	r1, #32
     cbc:	468c      	mov	ip, r1
     cbe:	391f      	subs	r1, #31
     cc0:	9600      	str	r6, [sp, #0]
     cc2:	9701      	str	r7, [sp, #4]
     cc4:	2420      	movs	r4, #32
     cc6:	4264      	negs	r4, r4
     cc8:	1904      	adds	r4, r0, r4
     cca:	d403      	bmi.n	cd4 <_sercom_get_async_baud_val+0x64>
     ccc:	1c0d      	adds	r5, r1, #0
     cce:	40a5      	lsls	r5, r4
     cd0:	46a8      	mov	r8, r5
     cd2:	e004      	b.n	cde <_sercom_get_async_baud_val+0x6e>
     cd4:	4664      	mov	r4, ip
     cd6:	1a24      	subs	r4, r4, r0
     cd8:	1c0d      	adds	r5, r1, #0
     cda:	40e5      	lsrs	r5, r4
     cdc:	46a8      	mov	r8, r5
     cde:	1c0c      	adds	r4, r1, #0
     ce0:	4084      	lsls	r4, r0
     ce2:	46a1      	mov	r9, r4

		r = r << 1;
     ce4:	1c14      	adds	r4, r2, #0
     ce6:	1c1d      	adds	r5, r3, #0
     ce8:	18a4      	adds	r4, r4, r2
     cea:	415d      	adcs	r5, r3
     cec:	1c22      	adds	r2, r4, #0
     cee:	1c2b      	adds	r3, r5, #0

		if (n & bit_shift) {
     cf0:	465e      	mov	r6, fp
     cf2:	4647      	mov	r7, r8
     cf4:	423e      	tst	r6, r7
     cf6:	d003      	beq.n	d00 <_sercom_get_async_baud_val+0x90>
			r |= 0x01;
     cf8:	1c0e      	adds	r6, r1, #0
     cfa:	4326      	orrs	r6, r4
     cfc:	1c32      	adds	r2, r6, #0
     cfe:	1c2b      	adds	r3, r5, #0
		}

		if (r >= d) {
     d00:	9c01      	ldr	r4, [sp, #4]
     d02:	429c      	cmp	r4, r3
     d04:	d810      	bhi.n	d28 <_sercom_get_async_baud_val+0xb8>
     d06:	d102      	bne.n	d0e <_sercom_get_async_baud_val+0x9e>
     d08:	9c00      	ldr	r4, [sp, #0]
     d0a:	4294      	cmp	r4, r2
     d0c:	d80c      	bhi.n	d28 <_sercom_get_async_baud_val+0xb8>
			r = r - d;
     d0e:	9c00      	ldr	r4, [sp, #0]
     d10:	9d01      	ldr	r5, [sp, #4]
     d12:	1b12      	subs	r2, r2, r4
     d14:	41ab      	sbcs	r3, r5
			q |= bit_shift;
     d16:	464d      	mov	r5, r9
     d18:	9e02      	ldr	r6, [sp, #8]
     d1a:	9f03      	ldr	r7, [sp, #12]
     d1c:	4335      	orrs	r5, r6
     d1e:	1c3c      	adds	r4, r7, #0
     d20:	4646      	mov	r6, r8
     d22:	4334      	orrs	r4, r6
     d24:	9502      	str	r5, [sp, #8]
     d26:	9403      	str	r4, [sp, #12]
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
	for (i = 63; i >= 0; i--) {
     d28:	3801      	subs	r0, #1
     d2a:	d2cb      	bcs.n	cc4 <_sercom_get_async_baud_val+0x54>

	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
		/* Calculate the BAUD value */
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
		ratio = long_division(temp1, peripheral_clock);
		scale = ((uint64_t)1 << SHIFT) - ratio;
     d2c:	2200      	movs	r2, #0
     d2e:	2301      	movs	r3, #1
     d30:	9802      	ldr	r0, [sp, #8]
     d32:	9903      	ldr	r1, [sp, #12]
     d34:	1a12      	subs	r2, r2, r0
     d36:	418b      	sbcs	r3, r1
		baud_calculated = (65536 * scale) >> SHIFT;
     d38:	0c11      	lsrs	r1, r2, #16
     d3a:	041b      	lsls	r3, r3, #16
     d3c:	4319      	orrs	r1, r3
     d3e:	e06c      	b.n	e1a <_sercom_get_async_baud_val+0x1aa>
		enum sercom_asynchronous_sample_num sample_num)
{
	/* Temporary variables  */
	uint64_t ratio = 0;
	uint64_t scale = 0;
	uint64_t baud_calculated = 0;
     d40:	2100      	movs	r1, #0
		/* Calculate the BAUD value */
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
		ratio = long_division(temp1, peripheral_clock);
		scale = ((uint64_t)1 << SHIFT) - ratio;
		baud_calculated = (65536 * scale) >> SHIFT;
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
     d42:	2d01      	cmp	r5, #1
     d44:	d169      	bne.n	e1a <_sercom_get_async_baud_val+0x1aa>
		for(baud_fp = 0; baud_fp < BAUD_FP_MAX; baud_fp++) {
			temp1 = BAUD_FP_MAX * (uint64_t)peripheral_clock;
     d46:	0f61      	lsrs	r1, r4, #29
     d48:	1c0f      	adds	r7, r1, #0
     d4a:	00e1      	lsls	r1, r4, #3
     d4c:	4688      	mov	r8, r1
			temp2 = ((uint64_t)baudrate * sample_num);
     d4e:	1c18      	adds	r0, r3, #0
     d50:	2100      	movs	r1, #0
     d52:	2300      	movs	r3, #0
     d54:	4c36      	ldr	r4, [pc, #216]	; (e30 <_sercom_get_async_baud_val+0x1c0>)
     d56:	47a0      	blx	r4
     d58:	1c04      	adds	r4, r0, #0
     d5a:	1c0d      	adds	r5, r1, #0
     d5c:	2300      	movs	r3, #0
     d5e:	469c      	mov	ip, r3
static uint64_t long_division(uint64_t n, uint64_t d)
{
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
	for (i = 63; i >= 0; i--) {
		bit_shift = (uint64_t)1 << i;
     d60:	3320      	adds	r3, #32
     d62:	469b      	mov	fp, r3
     d64:	2601      	movs	r6, #1
			temp1 = BAUD_FP_MAX * (uint64_t)peripheral_clock;
			temp2 = ((uint64_t)baudrate * sample_num);
			baud_int = long_division(temp1, temp2);
			baud_int -= baud_fp;
			baud_int = baud_int / BAUD_FP_MAX;
			if(baud_int < BAUD_INT_MAX) {
     d66:	4663      	mov	r3, ip
     d68:	9305      	str	r3, [sp, #20]
     d6a:	46b9      	mov	r9, r7
     d6c:	466b      	mov	r3, sp
     d6e:	7d1b      	ldrb	r3, [r3, #20]
     d70:	9306      	str	r3, [sp, #24]
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
     d72:	2300      	movs	r3, #0
     d74:	469c      	mov	ip, r3
     d76:	2000      	movs	r0, #0
     d78:	2100      	movs	r1, #0
	for (i = 63; i >= 0; i--) {
     d7a:	223f      	movs	r2, #63	; 0x3f
     d7c:	9400      	str	r4, [sp, #0]
     d7e:	9501      	str	r5, [sp, #4]
		bit_shift = (uint64_t)1 << i;
     d80:	2320      	movs	r3, #32
     d82:	425b      	negs	r3, r3
     d84:	18d3      	adds	r3, r2, r3
     d86:	d403      	bmi.n	d90 <_sercom_get_async_baud_val+0x120>
     d88:	1c34      	adds	r4, r6, #0
     d8a:	409c      	lsls	r4, r3
     d8c:	1c23      	adds	r3, r4, #0
     d8e:	e004      	b.n	d9a <_sercom_get_async_baud_val+0x12a>
     d90:	465b      	mov	r3, fp
     d92:	1a9b      	subs	r3, r3, r2
     d94:	1c34      	adds	r4, r6, #0
     d96:	40dc      	lsrs	r4, r3
     d98:	1c23      	adds	r3, r4, #0
     d9a:	1c37      	adds	r7, r6, #0
     d9c:	4097      	lsls	r7, r2

		r = r << 1;
     d9e:	1c04      	adds	r4, r0, #0
     da0:	1c0d      	adds	r5, r1, #0
     da2:	1824      	adds	r4, r4, r0
     da4:	414d      	adcs	r5, r1
     da6:	1c20      	adds	r0, r4, #0
     da8:	1c29      	adds	r1, r5, #0
     daa:	9002      	str	r0, [sp, #8]
     dac:	9103      	str	r1, [sp, #12]

		if (n & bit_shift) {
     dae:	4644      	mov	r4, r8
     db0:	403c      	ands	r4, r7
     db2:	46a2      	mov	sl, r4
     db4:	464c      	mov	r4, r9
     db6:	4023      	ands	r3, r4
     db8:	4654      	mov	r4, sl
     dba:	4323      	orrs	r3, r4
     dbc:	d005      	beq.n	dca <_sercom_get_async_baud_val+0x15a>
			r |= 0x01;
     dbe:	9b02      	ldr	r3, [sp, #8]
     dc0:	9c03      	ldr	r4, [sp, #12]
     dc2:	1c1d      	adds	r5, r3, #0
     dc4:	4335      	orrs	r5, r6
     dc6:	1c28      	adds	r0, r5, #0
     dc8:	1c21      	adds	r1, r4, #0
		}

		if (r >= d) {
     dca:	9b01      	ldr	r3, [sp, #4]
     dcc:	428b      	cmp	r3, r1
     dce:	d80a      	bhi.n	de6 <_sercom_get_async_baud_val+0x176>
     dd0:	d102      	bne.n	dd8 <_sercom_get_async_baud_val+0x168>
     dd2:	9b00      	ldr	r3, [sp, #0]
     dd4:	4283      	cmp	r3, r0
     dd6:	d806      	bhi.n	de6 <_sercom_get_async_baud_val+0x176>
			r = r - d;
     dd8:	9b00      	ldr	r3, [sp, #0]
     dda:	9c01      	ldr	r4, [sp, #4]
     ddc:	1ac0      	subs	r0, r0, r3
     dde:	41a1      	sbcs	r1, r4
			q |= bit_shift;
     de0:	4663      	mov	r3, ip
     de2:	433b      	orrs	r3, r7
     de4:	469c      	mov	ip, r3
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
	for (i = 63; i >= 0; i--) {
     de6:	3a01      	subs	r2, #1
     de8:	d2ca      	bcs.n	d80 <_sercom_get_async_baud_val+0x110>
     dea:	9c00      	ldr	r4, [sp, #0]
     dec:	9d01      	ldr	r5, [sp, #4]
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
		for(baud_fp = 0; baud_fp < BAUD_FP_MAX; baud_fp++) {
			temp1 = BAUD_FP_MAX * (uint64_t)peripheral_clock;
			temp2 = ((uint64_t)baudrate * sample_num);
			baud_int = long_division(temp1, temp2);
			baud_int -= baud_fp;
     dee:	4662      	mov	r2, ip
     df0:	9905      	ldr	r1, [sp, #20]
     df2:	1a53      	subs	r3, r2, r1
			baud_int = baud_int / BAUD_FP_MAX;
     df4:	08db      	lsrs	r3, r3, #3
			if(baud_int < BAUD_INT_MAX) {
     df6:	4a0f      	ldr	r2, [pc, #60]	; (e34 <_sercom_get_async_baud_val+0x1c4>)
     df8:	4293      	cmp	r3, r2
     dfa:	d908      	bls.n	e0e <_sercom_get_async_baud_val+0x19e>
     dfc:	9a06      	ldr	r2, [sp, #24]
     dfe:	3201      	adds	r2, #1
     e00:	b2d2      	uxtb	r2, r2
     e02:	9206      	str	r2, [sp, #24]
     e04:	1c0a      	adds	r2, r1, #0
     e06:	3201      	adds	r2, #1
     e08:	9205      	str	r2, [sp, #20]
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
		ratio = long_division(temp1, peripheral_clock);
		scale = ((uint64_t)1 << SHIFT) - ratio;
		baud_calculated = (65536 * scale) >> SHIFT;
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
		for(baud_fp = 0; baud_fp < BAUD_FP_MAX; baud_fp++) {
     e0a:	2a08      	cmp	r2, #8
     e0c:	d1ae      	bne.n	d6c <_sercom_get_async_baud_val+0xfc>
			if(baud_int < BAUD_INT_MAX) {
				break;
			}
		}
		if(baud_fp == BAUD_FP_MAX) {
			return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     e0e:	2540      	movs	r5, #64	; 0x40
			baud_int = baud_int / BAUD_FP_MAX;
			if(baud_int < BAUD_INT_MAX) {
				break;
			}
		}
		if(baud_fp == BAUD_FP_MAX) {
     e10:	9a06      	ldr	r2, [sp, #24]
     e12:	2a08      	cmp	r2, #8
     e14:	d004      	beq.n	e20 <_sercom_get_async_baud_val+0x1b0>
			return STATUS_ERR_BAUDRATE_UNAVAILABLE;
		}
		baud_calculated = baud_int | (baud_fp << 13);
     e16:	0351      	lsls	r1, r2, #13
     e18:	4319      	orrs	r1, r3
	}

	*baudval = baud_calculated;
     e1a:	9b07      	ldr	r3, [sp, #28]
     e1c:	8019      	strh	r1, [r3, #0]
	return STATUS_OK;
     e1e:	2500      	movs	r5, #0
}
     e20:	1c28      	adds	r0, r5, #0
     e22:	b009      	add	sp, #36	; 0x24
     e24:	bc3c      	pop	{r2, r3, r4, r5}
     e26:	4690      	mov	r8, r2
     e28:	4699      	mov	r9, r3
     e2a:	46a2      	mov	sl, r4
     e2c:	46ab      	mov	fp, r5
     e2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
     e30:	00010829 	.word	0x00010829
     e34:	00001fff 	.word	0x00001fff

00000e38 <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
     e38:	b510      	push	{r4, lr}
     e3a:	b082      	sub	sp, #8
     e3c:	1c04      	adds	r4, r0, #0
	/* Check if valid option. */
	if (!_sercom_config.generator_is_set || force_change) {
     e3e:	4b0e      	ldr	r3, [pc, #56]	; (e78 <sercom_set_gclk_generator+0x40>)
     e40:	781b      	ldrb	r3, [r3, #0]
     e42:	2b00      	cmp	r3, #0
     e44:	d001      	beq.n	e4a <sercom_set_gclk_generator+0x12>
     e46:	2900      	cmp	r1, #0
     e48:	d00d      	beq.n	e66 <sercom_set_gclk_generator+0x2e>
		/* Create and fill a GCLK configuration structure for the new config. */
		struct system_gclk_chan_config gclk_chan_conf;
		system_gclk_chan_get_config_defaults(&gclk_chan_conf);
		gclk_chan_conf.source_generator = generator_source;
     e4a:	a901      	add	r1, sp, #4
     e4c:	700c      	strb	r4, [r1, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
     e4e:	2013      	movs	r0, #19
     e50:	4b0a      	ldr	r3, [pc, #40]	; (e7c <sercom_set_gclk_generator+0x44>)
     e52:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
     e54:	2013      	movs	r0, #19
     e56:	4b0a      	ldr	r3, [pc, #40]	; (e80 <sercom_set_gclk_generator+0x48>)
     e58:	4798      	blx	r3

		/* Save config. */
		_sercom_config.generator_source = generator_source;
     e5a:	4b07      	ldr	r3, [pc, #28]	; (e78 <sercom_set_gclk_generator+0x40>)
     e5c:	705c      	strb	r4, [r3, #1]
		_sercom_config.generator_is_set = true;
     e5e:	2201      	movs	r2, #1
     e60:	701a      	strb	r2, [r3, #0]

		return STATUS_OK;
     e62:	2000      	movs	r0, #0
     e64:	e006      	b.n	e74 <sercom_set_gclk_generator+0x3c>
	} else if (generator_source == _sercom_config.generator_source) {
     e66:	4b04      	ldr	r3, [pc, #16]	; (e78 <sercom_set_gclk_generator+0x40>)
     e68:	785b      	ldrb	r3, [r3, #1]
     e6a:	4283      	cmp	r3, r0
     e6c:	d001      	beq.n	e72 <sercom_set_gclk_generator+0x3a>
		/* Return status OK if same config. */
		return STATUS_OK;
	}

	/* Return invalid config to already initialized GCLK. */
	return STATUS_ERR_ALREADY_INITIALIZED;
     e6e:	201d      	movs	r0, #29
     e70:	e000      	b.n	e74 <sercom_set_gclk_generator+0x3c>
		_sercom_config.generator_is_set = true;

		return STATUS_OK;
	} else if (generator_source == _sercom_config.generator_source) {
		/* Return status OK if same config. */
		return STATUS_OK;
     e72:	2000      	movs	r0, #0
	}

	/* Return invalid config to already initialized GCLK. */
	return STATUS_ERR_ALREADY_INITIALIZED;
}
     e74:	b002      	add	sp, #8
     e76:	bd10      	pop	{r4, pc}
     e78:	20000264 	.word	0x20000264
     e7c:	0000217d 	.word	0x0000217d
     e80:	000020f1 	.word	0x000020f1

00000e84 <_sercom_get_default_pad>:
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
     e84:	4b44      	ldr	r3, [pc, #272]	; (f98 <_sercom_get_default_pad+0x114>)
     e86:	4298      	cmp	r0, r3
     e88:	d033      	beq.n	ef2 <_sercom_get_default_pad+0x6e>
     e8a:	d806      	bhi.n	e9a <_sercom_get_default_pad+0x16>
     e8c:	4b43      	ldr	r3, [pc, #268]	; (f9c <_sercom_get_default_pad+0x118>)
     e8e:	4298      	cmp	r0, r3
     e90:	d00d      	beq.n	eae <_sercom_get_default_pad+0x2a>
     e92:	4b43      	ldr	r3, [pc, #268]	; (fa0 <_sercom_get_default_pad+0x11c>)
     e94:	4298      	cmp	r0, r3
     e96:	d01b      	beq.n	ed0 <_sercom_get_default_pad+0x4c>
     e98:	e06f      	b.n	f7a <_sercom_get_default_pad+0xf6>
     e9a:	4b42      	ldr	r3, [pc, #264]	; (fa4 <_sercom_get_default_pad+0x120>)
     e9c:	4298      	cmp	r0, r3
     e9e:	d04a      	beq.n	f36 <_sercom_get_default_pad+0xb2>
     ea0:	4b41      	ldr	r3, [pc, #260]	; (fa8 <_sercom_get_default_pad+0x124>)
     ea2:	4298      	cmp	r0, r3
     ea4:	d058      	beq.n	f58 <_sercom_get_default_pad+0xd4>
     ea6:	4b41      	ldr	r3, [pc, #260]	; (fac <_sercom_get_default_pad+0x128>)
     ea8:	4298      	cmp	r0, r3
     eaa:	d166      	bne.n	f7a <_sercom_get_default_pad+0xf6>
     eac:	e032      	b.n	f14 <_sercom_get_default_pad+0x90>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     eae:	2901      	cmp	r1, #1
     eb0:	d006      	beq.n	ec0 <_sercom_get_default_pad+0x3c>
     eb2:	2900      	cmp	r1, #0
     eb4:	d063      	beq.n	f7e <_sercom_get_default_pad+0xfa>
     eb6:	2902      	cmp	r1, #2
     eb8:	d006      	beq.n	ec8 <_sercom_get_default_pad+0x44>
     eba:	2903      	cmp	r1, #3
     ebc:	d006      	beq.n	ecc <_sercom_get_default_pad+0x48>
     ebe:	e001      	b.n	ec4 <_sercom_get_default_pad+0x40>
     ec0:	483b      	ldr	r0, [pc, #236]	; (fb0 <_sercom_get_default_pad+0x12c>)
     ec2:	e067      	b.n	f94 <_sercom_get_default_pad+0x110>
	}

	Assert(false);
	return 0;
     ec4:	2000      	movs	r0, #0
     ec6:	e065      	b.n	f94 <_sercom_get_default_pad+0x110>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     ec8:	483a      	ldr	r0, [pc, #232]	; (fb4 <_sercom_get_default_pad+0x130>)
     eca:	e063      	b.n	f94 <_sercom_get_default_pad+0x110>
     ecc:	483a      	ldr	r0, [pc, #232]	; (fb8 <_sercom_get_default_pad+0x134>)
     ece:	e061      	b.n	f94 <_sercom_get_default_pad+0x110>
     ed0:	2901      	cmp	r1, #1
     ed2:	d006      	beq.n	ee2 <_sercom_get_default_pad+0x5e>
     ed4:	2900      	cmp	r1, #0
     ed6:	d054      	beq.n	f82 <_sercom_get_default_pad+0xfe>
     ed8:	2902      	cmp	r1, #2
     eda:	d006      	beq.n	eea <_sercom_get_default_pad+0x66>
     edc:	2903      	cmp	r1, #3
     ede:	d006      	beq.n	eee <_sercom_get_default_pad+0x6a>
     ee0:	e001      	b.n	ee6 <_sercom_get_default_pad+0x62>
     ee2:	4836      	ldr	r0, [pc, #216]	; (fbc <_sercom_get_default_pad+0x138>)
     ee4:	e056      	b.n	f94 <_sercom_get_default_pad+0x110>
	}

	Assert(false);
	return 0;
     ee6:	2000      	movs	r0, #0
     ee8:	e054      	b.n	f94 <_sercom_get_default_pad+0x110>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     eea:	4835      	ldr	r0, [pc, #212]	; (fc0 <_sercom_get_default_pad+0x13c>)
     eec:	e052      	b.n	f94 <_sercom_get_default_pad+0x110>
     eee:	4835      	ldr	r0, [pc, #212]	; (fc4 <_sercom_get_default_pad+0x140>)
     ef0:	e050      	b.n	f94 <_sercom_get_default_pad+0x110>
     ef2:	2901      	cmp	r1, #1
     ef4:	d006      	beq.n	f04 <_sercom_get_default_pad+0x80>
     ef6:	2900      	cmp	r1, #0
     ef8:	d045      	beq.n	f86 <_sercom_get_default_pad+0x102>
     efa:	2902      	cmp	r1, #2
     efc:	d006      	beq.n	f0c <_sercom_get_default_pad+0x88>
     efe:	2903      	cmp	r1, #3
     f00:	d006      	beq.n	f10 <_sercom_get_default_pad+0x8c>
     f02:	e001      	b.n	f08 <_sercom_get_default_pad+0x84>
     f04:	4830      	ldr	r0, [pc, #192]	; (fc8 <_sercom_get_default_pad+0x144>)
     f06:	e045      	b.n	f94 <_sercom_get_default_pad+0x110>
	}

	Assert(false);
	return 0;
     f08:	2000      	movs	r0, #0
     f0a:	e043      	b.n	f94 <_sercom_get_default_pad+0x110>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     f0c:	482f      	ldr	r0, [pc, #188]	; (fcc <_sercom_get_default_pad+0x148>)
     f0e:	e041      	b.n	f94 <_sercom_get_default_pad+0x110>
     f10:	482f      	ldr	r0, [pc, #188]	; (fd0 <_sercom_get_default_pad+0x14c>)
     f12:	e03f      	b.n	f94 <_sercom_get_default_pad+0x110>
     f14:	2901      	cmp	r1, #1
     f16:	d006      	beq.n	f26 <_sercom_get_default_pad+0xa2>
     f18:	2900      	cmp	r1, #0
     f1a:	d036      	beq.n	f8a <_sercom_get_default_pad+0x106>
     f1c:	2902      	cmp	r1, #2
     f1e:	d006      	beq.n	f2e <_sercom_get_default_pad+0xaa>
     f20:	2903      	cmp	r1, #3
     f22:	d006      	beq.n	f32 <_sercom_get_default_pad+0xae>
     f24:	e001      	b.n	f2a <_sercom_get_default_pad+0xa6>
     f26:	482b      	ldr	r0, [pc, #172]	; (fd4 <_sercom_get_default_pad+0x150>)
     f28:	e034      	b.n	f94 <_sercom_get_default_pad+0x110>
	}

	Assert(false);
	return 0;
     f2a:	2000      	movs	r0, #0
     f2c:	e032      	b.n	f94 <_sercom_get_default_pad+0x110>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     f2e:	482a      	ldr	r0, [pc, #168]	; (fd8 <_sercom_get_default_pad+0x154>)
     f30:	e030      	b.n	f94 <_sercom_get_default_pad+0x110>
     f32:	482a      	ldr	r0, [pc, #168]	; (fdc <_sercom_get_default_pad+0x158>)
     f34:	e02e      	b.n	f94 <_sercom_get_default_pad+0x110>
     f36:	2901      	cmp	r1, #1
     f38:	d006      	beq.n	f48 <_sercom_get_default_pad+0xc4>
     f3a:	2900      	cmp	r1, #0
     f3c:	d027      	beq.n	f8e <_sercom_get_default_pad+0x10a>
     f3e:	2902      	cmp	r1, #2
     f40:	d006      	beq.n	f50 <_sercom_get_default_pad+0xcc>
     f42:	2903      	cmp	r1, #3
     f44:	d006      	beq.n	f54 <_sercom_get_default_pad+0xd0>
     f46:	e001      	b.n	f4c <_sercom_get_default_pad+0xc8>
     f48:	4825      	ldr	r0, [pc, #148]	; (fe0 <_sercom_get_default_pad+0x15c>)
     f4a:	e023      	b.n	f94 <_sercom_get_default_pad+0x110>
	}

	Assert(false);
	return 0;
     f4c:	2000      	movs	r0, #0
     f4e:	e021      	b.n	f94 <_sercom_get_default_pad+0x110>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     f50:	4824      	ldr	r0, [pc, #144]	; (fe4 <_sercom_get_default_pad+0x160>)
     f52:	e01f      	b.n	f94 <_sercom_get_default_pad+0x110>
     f54:	4824      	ldr	r0, [pc, #144]	; (fe8 <_sercom_get_default_pad+0x164>)
     f56:	e01d      	b.n	f94 <_sercom_get_default_pad+0x110>
     f58:	2901      	cmp	r1, #1
     f5a:	d006      	beq.n	f6a <_sercom_get_default_pad+0xe6>
     f5c:	2900      	cmp	r1, #0
     f5e:	d018      	beq.n	f92 <_sercom_get_default_pad+0x10e>
     f60:	2902      	cmp	r1, #2
     f62:	d006      	beq.n	f72 <_sercom_get_default_pad+0xee>
     f64:	2903      	cmp	r1, #3
     f66:	d006      	beq.n	f76 <_sercom_get_default_pad+0xf2>
     f68:	e001      	b.n	f6e <_sercom_get_default_pad+0xea>
     f6a:	4820      	ldr	r0, [pc, #128]	; (fec <_sercom_get_default_pad+0x168>)
     f6c:	e012      	b.n	f94 <_sercom_get_default_pad+0x110>
	}

	Assert(false);
	return 0;
     f6e:	2000      	movs	r0, #0
     f70:	e010      	b.n	f94 <_sercom_get_default_pad+0x110>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     f72:	481f      	ldr	r0, [pc, #124]	; (ff0 <_sercom_get_default_pad+0x16c>)
     f74:	e00e      	b.n	f94 <_sercom_get_default_pad+0x110>
     f76:	481f      	ldr	r0, [pc, #124]	; (ff4 <_sercom_get_default_pad+0x170>)
     f78:	e00c      	b.n	f94 <_sercom_get_default_pad+0x110>
	}

	Assert(false);
	return 0;
     f7a:	2000      	movs	r0, #0
     f7c:	e00a      	b.n	f94 <_sercom_get_default_pad+0x110>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     f7e:	481e      	ldr	r0, [pc, #120]	; (ff8 <_sercom_get_default_pad+0x174>)
     f80:	e008      	b.n	f94 <_sercom_get_default_pad+0x110>
     f82:	2003      	movs	r0, #3
     f84:	e006      	b.n	f94 <_sercom_get_default_pad+0x110>
     f86:	481d      	ldr	r0, [pc, #116]	; (ffc <_sercom_get_default_pad+0x178>)
     f88:	e004      	b.n	f94 <_sercom_get_default_pad+0x110>
     f8a:	481d      	ldr	r0, [pc, #116]	; (1000 <_sercom_get_default_pad+0x17c>)
     f8c:	e002      	b.n	f94 <_sercom_get_default_pad+0x110>
     f8e:	481d      	ldr	r0, [pc, #116]	; (1004 <_sercom_get_default_pad+0x180>)
     f90:	e000      	b.n	f94 <_sercom_get_default_pad+0x110>
     f92:	481d      	ldr	r0, [pc, #116]	; (1008 <_sercom_get_default_pad+0x184>)
	}

	Assert(false);
	return 0;
}
     f94:	4770      	bx	lr
     f96:	46c0      	nop			; (mov r8, r8)
     f98:	42001000 	.word	0x42001000
     f9c:	42000800 	.word	0x42000800
     fa0:	42000c00 	.word	0x42000c00
     fa4:	42001800 	.word	0x42001800
     fa8:	42001c00 	.word	0x42001c00
     fac:	42001400 	.word	0x42001400
     fb0:	00050003 	.word	0x00050003
     fb4:	00060003 	.word	0x00060003
     fb8:	00070003 	.word	0x00070003
     fbc:	00010003 	.word	0x00010003
     fc0:	001e0003 	.word	0x001e0003
     fc4:	001f0003 	.word	0x001f0003
     fc8:	000d0002 	.word	0x000d0002
     fcc:	000e0002 	.word	0x000e0002
     fd0:	000f0002 	.word	0x000f0002
     fd4:	00110003 	.word	0x00110003
     fd8:	00120003 	.word	0x00120003
     fdc:	00130003 	.word	0x00130003
     fe0:	003f0005 	.word	0x003f0005
     fe4:	003e0005 	.word	0x003e0005
     fe8:	00520005 	.word	0x00520005
     fec:	00170003 	.word	0x00170003
     ff0:	00180003 	.word	0x00180003
     ff4:	00190003 	.word	0x00190003
     ff8:	00040003 	.word	0x00040003
     ffc:	000c0002 	.word	0x000c0002
    1000:	00100003 	.word	0x00100003
    1004:	00530005 	.word	0x00530005
    1008:	00160003 	.word	0x00160003

0000100c <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
    100c:	b530      	push	{r4, r5, lr}
    100e:	b087      	sub	sp, #28
	/* Save all available SERCOM instances for compare. */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
    1010:	4b0c      	ldr	r3, [pc, #48]	; (1044 <_sercom_get_sercom_inst_index+0x38>)
    1012:	466a      	mov	r2, sp
    1014:	cb32      	ldmia	r3!, {r1, r4, r5}
    1016:	c232      	stmia	r2!, {r1, r4, r5}
    1018:	cb32      	ldmia	r3!, {r1, r4, r5}
    101a:	c232      	stmia	r2!, {r1, r4, r5}

	/* Find index for sercom instance. */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
    101c:	9b00      	ldr	r3, [sp, #0]
    101e:	4283      	cmp	r3, r0
    1020:	d006      	beq.n	1030 <_sercom_get_sercom_inst_index+0x24>
    1022:	2301      	movs	r3, #1
    1024:	009a      	lsls	r2, r3, #2
    1026:	4669      	mov	r1, sp
    1028:	5852      	ldr	r2, [r2, r1]
    102a:	4282      	cmp	r2, r0
    102c:	d103      	bne.n	1036 <_sercom_get_sercom_inst_index+0x2a>
    102e:	e000      	b.n	1032 <_sercom_get_sercom_inst_index+0x26>
{
	/* Save all available SERCOM instances for compare. */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;

	/* Find index for sercom instance. */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    1030:	2300      	movs	r3, #0
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
			return i;
    1032:	b2d8      	uxtb	r0, r3
    1034:	e003      	b.n	103e <_sercom_get_sercom_inst_index+0x32>
{
	/* Save all available SERCOM instances for compare. */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;

	/* Find index for sercom instance. */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    1036:	3301      	adds	r3, #1
    1038:	2b06      	cmp	r3, #6
    103a:	d1f3      	bne.n	1024 <_sercom_get_sercom_inst_index+0x18>
		}
	}

	/* Invalid data given. */
	Assert(false);
	return 0;
    103c:	2000      	movs	r0, #0
}
    103e:	b007      	add	sp, #28
    1040:	bd30      	pop	{r4, r5, pc}
    1042:	46c0      	nop			; (mov r8, r8)
    1044:	00011dd4 	.word	0x00011dd4

00001048 <_sercom_default_handler>:
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
	Assert(false);
}
    1048:	4770      	bx	lr
    104a:	46c0      	nop			; (mov r8, r8)

0000104c <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
    104c:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* Initialize handlers with default handler and device instances with 0. */
	if (_handler_table_initialized == false) {
    104e:	4b0a      	ldr	r3, [pc, #40]	; (1078 <_sercom_set_handler+0x2c>)
    1050:	781b      	ldrb	r3, [r3, #0]
    1052:	2b00      	cmp	r3, #0
    1054:	d10c      	bne.n	1070 <_sercom_set_handler+0x24>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    1056:	4f09      	ldr	r7, [pc, #36]	; (107c <_sercom_set_handler+0x30>)
    1058:	4e09      	ldr	r6, [pc, #36]	; (1080 <_sercom_set_handler+0x34>)
			_sercom_instances[i] = NULL;
    105a:	4d0a      	ldr	r5, [pc, #40]	; (1084 <_sercom_set_handler+0x38>)
    105c:	2400      	movs	r4, #0
		const sercom_handler_t interrupt_handler)
{
	/* Initialize handlers with default handler and device instances with 0. */
	if (_handler_table_initialized == false) {
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    105e:	51de      	str	r6, [r3, r7]
			_sercom_instances[i] = NULL;
    1060:	195a      	adds	r2, r3, r5
    1062:	6014      	str	r4, [r2, #0]
    1064:	3304      	adds	r3, #4
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
	/* Initialize handlers with default handler and device instances with 0. */
	if (_handler_table_initialized == false) {
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    1066:	2b18      	cmp	r3, #24
    1068:	d1f9      	bne.n	105e <_sercom_set_handler+0x12>
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
			_sercom_instances[i] = NULL;
		}

		_handler_table_initialized = true;
    106a:	2201      	movs	r2, #1
    106c:	4b02      	ldr	r3, [pc, #8]	; (1078 <_sercom_set_handler+0x2c>)
    106e:	701a      	strb	r2, [r3, #0]
	}

	/* Save interrupt handler. */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
    1070:	0080      	lsls	r0, r0, #2
    1072:	4b02      	ldr	r3, [pc, #8]	; (107c <_sercom_set_handler+0x30>)
    1074:	50c1      	str	r1, [r0, r3]
}
    1076:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1078:	20000266 	.word	0x20000266
    107c:	20000268 	.word	0x20000268
    1080:	00001049 	.word	0x00001049
    1084:	20002ad0 	.word	0x20002ad0

00001088 <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
    1088:	b510      	push	{r4, lr}
    108a:	b082      	sub	sp, #8
    108c:	1c04      	adds	r4, r0, #0
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
    108e:	4668      	mov	r0, sp
    1090:	4905      	ldr	r1, [pc, #20]	; (10a8 <_sercom_get_interrupt_vector+0x20>)
    1092:	2206      	movs	r2, #6
    1094:	4b05      	ldr	r3, [pc, #20]	; (10ac <_sercom_get_interrupt_vector+0x24>)
    1096:	4798      	blx	r3
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
    1098:	1c20      	adds	r0, r4, #0
    109a:	4b05      	ldr	r3, [pc, #20]	; (10b0 <_sercom_get_interrupt_vector+0x28>)
    109c:	4798      	blx	r3

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
    109e:	466b      	mov	r3, sp
    10a0:	5618      	ldrsb	r0, [r3, r0]
}
    10a2:	b002      	add	sp, #8
    10a4:	bd10      	pop	{r4, pc}
    10a6:	46c0      	nop			; (mov r8, r8)
    10a8:	00011dec 	.word	0x00011dec
    10ac:	000108e7 	.word	0x000108e7
    10b0:	0000100d 	.word	0x0000100d

000010b4 <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
    10b4:	b508      	push	{r3, lr}
    10b6:	4b02      	ldr	r3, [pc, #8]	; (10c0 <SERCOM0_Handler+0xc>)
    10b8:	681b      	ldr	r3, [r3, #0]
    10ba:	2000      	movs	r0, #0
    10bc:	4798      	blx	r3
    10be:	bd08      	pop	{r3, pc}
    10c0:	20000268 	.word	0x20000268

000010c4 <SERCOM1_Handler>:
    10c4:	b508      	push	{r3, lr}
    10c6:	4b02      	ldr	r3, [pc, #8]	; (10d0 <SERCOM1_Handler+0xc>)
    10c8:	685b      	ldr	r3, [r3, #4]
    10ca:	2001      	movs	r0, #1
    10cc:	4798      	blx	r3
    10ce:	bd08      	pop	{r3, pc}
    10d0:	20000268 	.word	0x20000268

000010d4 <SERCOM2_Handler>:
    10d4:	b508      	push	{r3, lr}
    10d6:	4b02      	ldr	r3, [pc, #8]	; (10e0 <SERCOM2_Handler+0xc>)
    10d8:	689b      	ldr	r3, [r3, #8]
    10da:	2002      	movs	r0, #2
    10dc:	4798      	blx	r3
    10de:	bd08      	pop	{r3, pc}
    10e0:	20000268 	.word	0x20000268

000010e4 <SERCOM3_Handler>:
    10e4:	b508      	push	{r3, lr}
    10e6:	4b02      	ldr	r3, [pc, #8]	; (10f0 <SERCOM3_Handler+0xc>)
    10e8:	68db      	ldr	r3, [r3, #12]
    10ea:	2003      	movs	r0, #3
    10ec:	4798      	blx	r3
    10ee:	bd08      	pop	{r3, pc}
    10f0:	20000268 	.word	0x20000268

000010f4 <SERCOM4_Handler>:
    10f4:	b508      	push	{r3, lr}
    10f6:	4b02      	ldr	r3, [pc, #8]	; (1100 <SERCOM4_Handler+0xc>)
    10f8:	691b      	ldr	r3, [r3, #16]
    10fa:	2004      	movs	r0, #4
    10fc:	4798      	blx	r3
    10fe:	bd08      	pop	{r3, pc}
    1100:	20000268 	.word	0x20000268

00001104 <SERCOM5_Handler>:
    1104:	b508      	push	{r3, lr}
    1106:	4b02      	ldr	r3, [pc, #8]	; (1110 <SERCOM5_Handler+0xc>)
    1108:	695b      	ldr	r3, [r3, #20]
    110a:	2005      	movs	r0, #5
    110c:	4798      	blx	r3
    110e:	bd08      	pop	{r3, pc}
    1110:	20000268 	.word	0x20000268

00001114 <spi_init>:
 */
enum status_code spi_init(
		struct spi_module *const module,
		Sercom *const hw,
		const struct spi_config *const config)
{
    1114:	b5f0      	push	{r4, r5, r6, r7, lr}
    1116:	4657      	mov	r7, sl
    1118:	464e      	mov	r6, r9
    111a:	4645      	mov	r5, r8
    111c:	b4e0      	push	{r5, r6, r7}
    111e:	b08a      	sub	sp, #40	; 0x28
    1120:	1c05      	adds	r5, r0, #0
    1122:	1c0e      	adds	r6, r1, #0
    1124:	1c14      	adds	r4, r2, #0
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize device instance */
	module->hw = hw;
    1126:	6029      	str	r1, [r5, #0]

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if module is enabled. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_ENABLE) {
    1128:	680b      	ldr	r3, [r1, #0]
    112a:	079b      	lsls	r3, r3, #30
    112c:	d400      	bmi.n	1130 <spi_init+0x1c>
    112e:	e08e      	b.n	124e <spi_init+0x13a>
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
	Sercom *const hw = module->hw;

	uint32_t pad_pinmuxes[] = {
    1130:	6a93      	ldr	r3, [r2, #40]	; 0x28
    1132:	9305      	str	r3, [sp, #20]
    1134:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
    1136:	9306      	str	r3, [sp, #24]
    1138:	6b13      	ldr	r3, [r2, #48]	; 0x30
    113a:	9307      	str	r3, [sp, #28]
    113c:	6b53      	ldr	r3, [r2, #52]	; 0x34
    113e:	9308      	str	r3, [sp, #32]
    1140:	2700      	movs	r7, #0
 */
static inline uint8_t system_pinmux_pin_get_mux_position(
		const uint8_t gpio_pin)
{
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_index = (gpio_pin % 32);
    1142:	231f      	movs	r3, #31
    1144:	4699      	mov	r9, r3
    1146:	b2f9      	uxtb	r1, r7
    1148:	00bb      	lsls	r3, r7, #2
		config->pinmux_pad2, config->pinmux_pad3
	};

	/* Compare the current SERCOM pins against the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
		uint32_t current_pinmux = pad_pinmuxes[pad];
    114a:	aa05      	add	r2, sp, #20
    114c:	5898      	ldr	r0, [r3, r2]

		if (current_pinmux == PINMUX_DEFAULT) {
    114e:	2800      	cmp	r0, #0
    1150:	d102      	bne.n	1158 <spi_init+0x44>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    1152:	1c30      	adds	r0, r6, #0
    1154:	4b90      	ldr	r3, [pc, #576]	; (1398 <spi_init+0x284>)
    1156:	4798      	blx	r3
		}

		if (current_pinmux == PINMUX_UNUSED) {
    1158:	1c43      	adds	r3, r0, #1
    115a:	d02b      	beq.n	11b4 <spi_init+0xa0>
			continue;
		}

		if ((current_pinmux & 0xFFFF) !=
    115c:	0401      	lsls	r1, r0, #16
    115e:	0c0b      	lsrs	r3, r1, #16
    1160:	4698      	mov	r8, r3
				system_pinmux_pin_get_mux_position(current_pinmux >> 16)) {
    1162:	0c00      	lsrs	r0, r0, #16
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports. */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    1164:	b2c3      	uxtb	r3, r0
    1166:	469c      	mov	ip, r3
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
    1168:	2300      	movs	r3, #0
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports. */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    116a:	0602      	lsls	r2, r0, #24
    116c:	d405      	bmi.n	117a <spi_init+0x66>
		return &(ports[port_index]->Group[group_index]);
    116e:	4663      	mov	r3, ip
    1170:	095b      	lsrs	r3, r3, #5
    1172:	01db      	lsls	r3, r3, #7
    1174:	4a89      	ldr	r2, [pc, #548]	; (139c <spi_init+0x288>)
    1176:	4692      	mov	sl, r2
    1178:	4453      	add	r3, sl
 */
static inline uint8_t system_pinmux_pin_get_mux_position(
		const uint8_t gpio_pin)
{
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_index = (gpio_pin % 32);
    117a:	464a      	mov	r2, r9
    117c:	4660      	mov	r0, ip
    117e:	4002      	ands	r2, r0

	if (!(port->PINCFG[pin_index].reg & PORT_PINCFG_PMUXEN)) {
    1180:	1898      	adds	r0, r3, r2
    1182:	3040      	adds	r0, #64	; 0x40
    1184:	7800      	ldrb	r0, [r0, #0]
    1186:	4682      	mov	sl, r0
		return SYSTEM_PINMUX_GPIO;
    1188:	2080      	movs	r0, #128	; 0x80
		const uint8_t gpio_pin)
{
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_index = (gpio_pin % 32);

	if (!(port->PINCFG[pin_index].reg & PORT_PINCFG_PMUXEN)) {
    118a:	4651      	mov	r1, sl
    118c:	07c9      	lsls	r1, r1, #31
    118e:	d50b      	bpl.n	11a8 <spi_init+0x94>
		return SYSTEM_PINMUX_GPIO;
	}

	uint32_t pmux_reg = port->PMUX[pin_index / 2].reg;
    1190:	0852      	lsrs	r2, r2, #1
    1192:	189b      	adds	r3, r3, r2
    1194:	3330      	adds	r3, #48	; 0x30
    1196:	7818      	ldrb	r0, [r3, #0]
    1198:	b2c0      	uxtb	r0, r0

	if (pin_index & 1) {
    119a:	4663      	mov	r3, ip
    119c:	07db      	lsls	r3, r3, #31
    119e:	d501      	bpl.n	11a4 <spi_init+0x90>
		return (pmux_reg & PORT_PMUX_PMUXO_Msk) >> PORT_PMUX_PMUXO_Pos;
    11a0:	0900      	lsrs	r0, r0, #4
    11a2:	e001      	b.n	11a8 <spi_init+0x94>
	}
	else {
		return (pmux_reg & PORT_PMUX_PMUXE_Msk) >> PORT_PMUX_PMUXE_Pos;
    11a4:	230f      	movs	r3, #15
    11a6:	4018      	ands	r0, r3

		if (current_pinmux == PINMUX_UNUSED) {
			continue;
		}

		if ((current_pinmux & 0xFFFF) !=
    11a8:	4580      	cmp	r8, r0
    11aa:	d003      	beq.n	11b4 <spi_init+0xa0>
				system_pinmux_pin_get_mux_position(current_pinmux >> 16)) {
			module->hw = NULL;
    11ac:	2300      	movs	r3, #0
    11ae:	602b      	str	r3, [r5, #0]
			return STATUS_ERR_DENIED;
    11b0:	201c      	movs	r0, #28
    11b2:	e0ea      	b.n	138a <spi_init+0x276>
    11b4:	3701      	adds	r7, #1
		config->pinmux_pad0, config->pinmux_pad1,
		config->pinmux_pad2, config->pinmux_pad3
	};

	/* Compare the current SERCOM pins against the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
    11b6:	2f04      	cmp	r7, #4
    11b8:	d1c5      	bne.n	1146 <spi_init+0x32>
	}

#  if CONF_SPI_MASTER_ENABLE == true
	/* Value to read BAUD register */
	uint16_t baud;
	uint32_t external_clock = system_gclk_chan_get_hz(SERCOM_GCLK_ID);
    11ba:	2013      	movs	r0, #19
    11bc:	4b78      	ldr	r3, [pc, #480]	; (13a0 <spi_init+0x28c>)
    11be:	4798      	blx	r3
    11c0:	1c01      	adds	r1, r0, #0
	uint32_t addr = 0;
#  endif

#  if CONF_SPI_MASTER_ENABLE == true
	/* Find baud value and compare it */
	if (config->mode == SPI_MODE_MASTER) {
    11c2:	7822      	ldrb	r2, [r4, #0]
	/* Value to read BAUD register */
	uint16_t baud;
	uint32_t external_clock = system_gclk_chan_get_hz(SERCOM_GCLK_ID);
#  endif
	/* Value to read CTRLA, CTRLB and ADDR register */
	uint32_t ctrla = 0;
    11c4:	2000      	movs	r0, #0
	uint32_t addr = 0;
#  endif

#  if CONF_SPI_MASTER_ENABLE == true
	/* Find baud value and compare it */
	if (config->mode == SPI_MODE_MASTER) {
    11c6:	2a01      	cmp	r2, #1
    11c8:	d111      	bne.n	11ee <spi_init+0xda>
		enum status_code error_code = _sercom_get_sync_baud_val(
    11ca:	69a0      	ldr	r0, [r4, #24]
    11cc:	aa04      	add	r2, sp, #16
    11ce:	4b75      	ldr	r3, [pc, #468]	; (13a4 <spi_init+0x290>)
    11d0:	4798      	blx	r3
    11d2:	1c03      	adds	r3, r0, #0
				config->mode_specific.master.baudrate,
				external_clock, &baud);

		if (error_code != STATUS_OK) {
			/* Baud rate calculation error, return status code */
			return STATUS_ERR_INVALID_ARG;
    11d4:	2017      	movs	r0, #23
	if (config->mode == SPI_MODE_MASTER) {
		enum status_code error_code = _sercom_get_sync_baud_val(
				config->mode_specific.master.baudrate,
				external_clock, &baud);

		if (error_code != STATUS_OK) {
    11d6:	2b00      	cmp	r3, #0
    11d8:	d000      	beq.n	11dc <spi_init+0xc8>
    11da:	e0d6      	b.n	138a <spi_init+0x276>
			/* Baud rate calculation error, return status code */
			return STATUS_ERR_INVALID_ARG;
		}

		if (spi_module->BAUD.reg !=  (uint8_t)baud) {
    11dc:	7b33      	ldrb	r3, [r6, #12]
    11de:	b2db      	uxtb	r3, r3
    11e0:	aa04      	add	r2, sp, #16
    11e2:	7812      	ldrb	r2, [r2, #0]
			return STATUS_ERR_DENIED;
    11e4:	3005      	adds	r0, #5
		if (error_code != STATUS_OK) {
			/* Baud rate calculation error, return status code */
			return STATUS_ERR_INVALID_ARG;
		}

		if (spi_module->BAUD.reg !=  (uint8_t)baud) {
    11e6:	429a      	cmp	r2, r3
    11e8:	d000      	beq.n	11ec <spi_init+0xd8>
    11ea:	e0ce      	b.n	138a <spi_init+0x276>
			return STATUS_ERR_DENIED;
		}

		ctrla |= SERCOM_SPI_CTRLA_MODE_SPI_MASTER;
    11ec:	3810      	subs	r0, #16
    11ee:	68a3      	ldr	r3, [r4, #8]
    11f0:	6862      	ldr	r2, [r4, #4]
    11f2:	4313      	orrs	r3, r2
    11f4:	68e2      	ldr	r2, [r4, #12]
    11f6:	4313      	orrs	r3, r2

	/* Set clock polarity and clock phase */
	ctrla |= config->transfer_mode;

	/* Set MUX setting */
	ctrla |= config->mux_setting;
    11f8:	4303      	orrs	r3, r0

	/* Set SPI character size */
	ctrlb |= config->character_size;
    11fa:	7c21      	ldrb	r1, [r4, #16]

	if (config->run_in_standby) {
    11fc:	7c62      	ldrb	r2, [r4, #17]
    11fe:	2a00      	cmp	r2, #0
    1200:	d001      	beq.n	1206 <spi_init+0xf2>
		/* Enable in sleep mode */
		ctrla |= SERCOM_SPI_CTRLA_RUNSTDBY;
    1202:	2280      	movs	r2, #128	; 0x80
    1204:	4313      	orrs	r3, r2
	}

	if (config->receiver_enable) {
    1206:	7ca2      	ldrb	r2, [r4, #18]
    1208:	2a00      	cmp	r2, #0
    120a:	d002      	beq.n	1212 <spi_init+0xfe>
		/* Enable receiver */
		ctrlb |= SERCOM_SPI_CTRLB_RXEN;
    120c:	2280      	movs	r2, #128	; 0x80
    120e:	0292      	lsls	r2, r2, #10
    1210:	4311      	orrs	r1, r2
	}

#  ifdef FEATURE_SPI_SLAVE_SELECT_LOW_DETECT
	if (config->select_slave_low_detect_enable) {
    1212:	7ce2      	ldrb	r2, [r4, #19]
    1214:	2a00      	cmp	r2, #0
    1216:	d002      	beq.n	121e <spi_init+0x10a>
		/* Enable Slave Select Low Detect */
		ctrlb |= SERCOM_SPI_CTRLB_SSDE;
    1218:	2280      	movs	r2, #128	; 0x80
    121a:	0092      	lsls	r2, r2, #2
    121c:	4311      	orrs	r1, r2
	}
#  endif
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	if (config->master_slave_select_enable) {
    121e:	7d22      	ldrb	r2, [r4, #20]
    1220:	2a00      	cmp	r2, #0
    1222:	d002      	beq.n	122a <spi_init+0x116>
		/* Enable Master Slave Select */
		ctrlb |= SERCOM_SPI_CTRLB_MSSEN;
    1224:	2280      	movs	r2, #128	; 0x80
    1226:	0192      	lsls	r2, r2, #6
    1228:	4311      	orrs	r1, r2
#  endif

	ctrla |= SERCOM_SPI_CTRLA_ENABLE;

	/* Check that same config is set */
	if (spi_module->CTRLA.reg == ctrla &&
    122a:	6830      	ldr	r0, [r6, #0]
		/* Enable Master Slave Select */
		ctrlb |= SERCOM_SPI_CTRLB_MSSEN;
	}
#  endif

	ctrla |= SERCOM_SPI_CTRLA_ENABLE;
    122c:	2202      	movs	r2, #2
    122e:	4313      	orrs	r3, r2

	/* Check that same config is set */
	if (spi_module->CTRLA.reg == ctrla &&
    1230:	4283      	cmp	r3, r0
    1232:	d108      	bne.n	1246 <spi_init+0x132>
			spi_module->CTRLB.reg == ctrlb) {
    1234:	6873      	ldr	r3, [r6, #4]
#  endif

	ctrla |= SERCOM_SPI_CTRLA_ENABLE;

	/* Check that same config is set */
	if (spi_module->CTRLA.reg == ctrla &&
    1236:	428b      	cmp	r3, r1
    1238:	d105      	bne.n	1246 <spi_init+0x132>
			spi_module->CTRLB.reg == ctrlb) {
		module->mode           = config->mode;
    123a:	7823      	ldrb	r3, [r4, #0]
    123c:	716b      	strb	r3, [r5, #5]
		module->character_size = config->character_size;
    123e:	7c23      	ldrb	r3, [r4, #16]
    1240:	71ab      	strb	r3, [r5, #6]
		return STATUS_OK;
    1242:	2000      	movs	r0, #0
    1244:	e0a1      	b.n	138a <spi_init+0x276>
	}

	/* Not same config, wipe module pointer and return */
	module->hw = NULL;
    1246:	2300      	movs	r3, #0
    1248:	602b      	str	r3, [r5, #0]

	return STATUS_ERR_DENIED;
    124a:	201c      	movs	r0, #28
    124c:	e09d      	b.n	138a <spi_init+0x276>
		return STATUS_ERR_DENIED;
#  endif
	}

	/* Check if reset is in progress. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
    124e:	680b      	ldr	r3, [r1, #0]
		return STATUS_BUSY;
    1250:	2005      	movs	r0, #5
		return STATUS_ERR_DENIED;
#  endif
	}

	/* Check if reset is in progress. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
    1252:	07db      	lsls	r3, r3, #31
    1254:	d500      	bpl.n	1258 <spi_init+0x144>
    1256:	e098      	b.n	138a <spi_init+0x276>
		return STATUS_BUSY;
	}

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    1258:	1c08      	adds	r0, r1, #0
    125a:	4b53      	ldr	r3, [pc, #332]	; (13a8 <spi_init+0x294>)
    125c:	4798      	blx	r3
    125e:	4953      	ldr	r1, [pc, #332]	; (13ac <spi_init+0x298>)
    1260:	6a0a      	ldr	r2, [r1, #32]
	uint32_t pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
    1262:	1c87      	adds	r7, r0, #2
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;

	/* Turn on module in PM */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    1264:	2301      	movs	r3, #1
    1266:	40bb      	lsls	r3, r7
    1268:	4313      	orrs	r3, r2
    126a:	620b      	str	r3, [r1, #32]

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
	gclk_chan_conf.source_generator = config->generator_source;
    126c:	a909      	add	r1, sp, #36	; 0x24
    126e:	2724      	movs	r7, #36	; 0x24
    1270:	5de3      	ldrb	r3, [r4, r7]
    1272:	700b      	strb	r3, [r1, #0]
		return STATUS_BUSY;
	}

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
	uint32_t pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    1274:	3014      	adds	r0, #20

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
	gclk_chan_conf.source_generator = config->generator_source;
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    1276:	b2c3      	uxtb	r3, r0
    1278:	9301      	str	r3, [sp, #4]
    127a:	1c18      	adds	r0, r3, #0
    127c:	4b4c      	ldr	r3, [pc, #304]	; (13b0 <spi_init+0x29c>)
    127e:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    1280:	9801      	ldr	r0, [sp, #4]
    1282:	4b4c      	ldr	r3, [pc, #304]	; (13b4 <spi_init+0x2a0>)
    1284:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    1286:	5de0      	ldrb	r0, [r4, r7]
    1288:	2100      	movs	r1, #0
    128a:	4b4b      	ldr	r3, [pc, #300]	; (13b8 <spi_init+0x2a4>)
    128c:	4798      	blx	r3

#  if CONF_SPI_MASTER_ENABLE == true
	if (config->mode == SPI_MODE_MASTER) {
    128e:	7823      	ldrb	r3, [r4, #0]
    1290:	2b01      	cmp	r3, #1
    1292:	d103      	bne.n	129c <spi_init+0x188>
		/* Set the SERCOM in SPI master mode */
		spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_MODE_SPI_MASTER;
    1294:	6832      	ldr	r2, [r6, #0]
    1296:	330b      	adds	r3, #11
    1298:	4313      	orrs	r3, r2
    129a:	6033      	str	r3, [r6, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(config);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    129c:	682e      	ldr	r6, [r5, #0]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
    129e:	ab04      	add	r3, sp, #16
    12a0:	2280      	movs	r2, #128	; 0x80
    12a2:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    12a4:	2200      	movs	r2, #0
    12a6:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    12a8:	2101      	movs	r1, #1
    12aa:	7099      	strb	r1, [r3, #2]
	config->powersave    = false;
    12ac:	70da      	strb	r2, [r3, #3]
	Sercom *const hw = module->hw;

	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
	if(config->mode == SPI_MODE_SLAVE) {
    12ae:	7823      	ldrb	r3, [r4, #0]
    12b0:	2b00      	cmp	r3, #0
    12b2:	d101      	bne.n	12b8 <spi_init+0x1a4>
		pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    12b4:	ab04      	add	r3, sp, #16
    12b6:	709a      	strb	r2, [r3, #2]
	}

	uint32_t pad_pinmuxes[] = {
    12b8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    12ba:	9305      	str	r3, [sp, #20]
    12bc:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    12be:	9306      	str	r3, [sp, #24]
    12c0:	6b23      	ldr	r3, [r4, #48]	; 0x30
    12c2:	9307      	str	r3, [sp, #28]
    12c4:	6b63      	ldr	r3, [r4, #52]	; 0x34
    12c6:	9308      	str	r3, [sp, #32]
    12c8:	2700      	movs	r7, #0
    12ca:	b2f9      	uxtb	r1, r7
    12cc:	00bb      	lsls	r3, r7, #2
			config->pinmux_pad2, config->pinmux_pad3
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
		uint32_t current_pinmux = pad_pinmuxes[pad];
    12ce:	aa05      	add	r2, sp, #20
    12d0:	5898      	ldr	r0, [r3, r2]

		if (current_pinmux == PINMUX_DEFAULT) {
    12d2:	2800      	cmp	r0, #0
    12d4:	d102      	bne.n	12dc <spi_init+0x1c8>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    12d6:	1c30      	adds	r0, r6, #0
    12d8:	4b2f      	ldr	r3, [pc, #188]	; (1398 <spi_init+0x284>)
    12da:	4798      	blx	r3
		}

		if (current_pinmux != PINMUX_UNUSED) {
    12dc:	1c43      	adds	r3, r0, #1
    12de:	d006      	beq.n	12ee <spi_init+0x1da>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    12e0:	ab02      	add	r3, sp, #8
    12e2:	7218      	strb	r0, [r3, #8]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    12e4:	0c00      	lsrs	r0, r0, #16
    12e6:	b2c0      	uxtb	r0, r0
    12e8:	a904      	add	r1, sp, #16
    12ea:	4b34      	ldr	r3, [pc, #208]	; (13bc <spi_init+0x2a8>)
    12ec:	4798      	blx	r3
    12ee:	3701      	adds	r7, #1
			config->pinmux_pad0, config->pinmux_pad1,
			config->pinmux_pad2, config->pinmux_pad3
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
    12f0:	2f04      	cmp	r7, #4
    12f2:	d1ea      	bne.n	12ca <spi_init+0x1b6>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
		}
	}

	module->mode             = config->mode;
    12f4:	7823      	ldrb	r3, [r4, #0]
    12f6:	716b      	strb	r3, [r5, #5]
	module->character_size   = config->character_size;
    12f8:	7c23      	ldrb	r3, [r4, #16]
    12fa:	71ab      	strb	r3, [r5, #6]
	module->receiver_enabled = config->receiver_enable;
    12fc:	7ca3      	ldrb	r3, [r4, #18]
    12fe:	71eb      	strb	r3, [r5, #7]
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	module->master_slave_select_enable = config->master_slave_select_enable;
    1300:	7d23      	ldrb	r3, [r4, #20]
    1302:	722b      	strb	r3, [r5, #8]
#  endif

#  if CONF_SPI_MASTER_ENABLE == true
	/* Value to write to BAUD register */
	uint16_t baud = 0;
    1304:	2200      	movs	r2, #0
    1306:	ab02      	add	r3, sp, #8
    1308:	80da      	strh	r2, [r3, #6]
	/* Value to write to CTRLB register */
	uint32_t ctrlb = 0;

# if CONF_SPI_MASTER_ENABLE == true
	/* Find baud value and write it */
	if (config->mode == SPI_MODE_MASTER) {
    130a:	7823      	ldrb	r3, [r4, #0]
    130c:	2b01      	cmp	r3, #1
    130e:	d114      	bne.n	133a <spi_init+0x226>
		/* Find frequency of the internal SERCOMi_GCLK_ID_CORE */
		uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    1310:	6828      	ldr	r0, [r5, #0]
    1312:	4b25      	ldr	r3, [pc, #148]	; (13a8 <spi_init+0x294>)
    1314:	4798      	blx	r3
		uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    1316:	3014      	adds	r0, #20
		uint32_t internal_clock = system_gclk_chan_get_hz(gclk_index);
    1318:	b2c0      	uxtb	r0, r0
    131a:	4b21      	ldr	r3, [pc, #132]	; (13a0 <spi_init+0x28c>)
    131c:	4798      	blx	r3
    131e:	1c01      	adds	r1, r0, #0

		/* Get baud value, based on baudrate and the internal clock frequency */
		enum status_code error_code = _sercom_get_sync_baud_val(
    1320:	69a0      	ldr	r0, [r4, #24]
    1322:	ab02      	add	r3, sp, #8
    1324:	1d9a      	adds	r2, r3, #6
    1326:	4b1f      	ldr	r3, [pc, #124]	; (13a4 <spi_init+0x290>)
    1328:	4798      	blx	r3
    132a:	1c03      	adds	r3, r0, #0
				config->mode_specific.master.baudrate,
				internal_clock, &baud);

		if (error_code != STATUS_OK) {
			/* Baud rate calculation error, return status code */
			return STATUS_ERR_INVALID_ARG;
    132c:	2017      	movs	r0, #23
		/* Get baud value, based on baudrate and the internal clock frequency */
		enum status_code error_code = _sercom_get_sync_baud_val(
				config->mode_specific.master.baudrate,
				internal_clock, &baud);

		if (error_code != STATUS_OK) {
    132e:	2b00      	cmp	r3, #0
    1330:	d12b      	bne.n	138a <spi_init+0x276>
			/* Baud rate calculation error, return status code */
			return STATUS_ERR_INVALID_ARG;
		}

		spi_module->BAUD.reg = (uint8_t)baud;
    1332:	ab02      	add	r3, sp, #8
    1334:	3306      	adds	r3, #6
    1336:	781b      	ldrb	r3, [r3, #0]
    1338:	7333      	strb	r3, [r6, #12]
# endif
	/* Set data order */
	ctrla |= config->data_order;

	/* Set clock polarity and clock phase */
	ctrla |= config->transfer_mode;
    133a:	68a3      	ldr	r3, [r4, #8]
    133c:	6862      	ldr	r2, [r4, #4]
    133e:	4313      	orrs	r3, r2

	/* Set MUX setting */
	ctrla |= config->mux_setting;
    1340:	68e2      	ldr	r2, [r4, #12]
    1342:	4313      	orrs	r3, r2

	/* Set SPI character size */
	ctrlb |= config->character_size;
    1344:	7c22      	ldrb	r2, [r4, #16]

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
    1346:	7c61      	ldrb	r1, [r4, #17]
    1348:	2900      	cmp	r1, #0
    134a:	d103      	bne.n	1354 <spi_init+0x240>
    134c:	491c      	ldr	r1, [pc, #112]	; (13c0 <spi_init+0x2ac>)
    134e:	7889      	ldrb	r1, [r1, #2]
    1350:	0789      	lsls	r1, r1, #30
    1352:	d501      	bpl.n	1358 <spi_init+0x244>
		ctrla |= SERCOM_SPI_CTRLA_RUNSTDBY;
    1354:	2180      	movs	r1, #128	; 0x80
    1356:	430b      	orrs	r3, r1
	}

	if (config->receiver_enable) {
    1358:	7ca1      	ldrb	r1, [r4, #18]
    135a:	2900      	cmp	r1, #0
    135c:	d002      	beq.n	1364 <spi_init+0x250>
		/* Enable receiver */
		ctrlb |= SERCOM_SPI_CTRLB_RXEN;
    135e:	2180      	movs	r1, #128	; 0x80
    1360:	0289      	lsls	r1, r1, #10
    1362:	430a      	orrs	r2, r1
	}
#  ifdef FEATURE_SPI_SLAVE_SELECT_LOW_DETECT
	if (config->select_slave_low_detect_enable) {
    1364:	7ce1      	ldrb	r1, [r4, #19]
    1366:	2900      	cmp	r1, #0
    1368:	d002      	beq.n	1370 <spi_init+0x25c>
		/* Enable Slave Select Low Detect */
		ctrlb |= SERCOM_SPI_CTRLB_SSDE;
    136a:	2180      	movs	r1, #128	; 0x80
    136c:	0089      	lsls	r1, r1, #2
    136e:	430a      	orrs	r2, r1
	}
#  endif
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	if (config->master_slave_select_enable) {
    1370:	7d21      	ldrb	r1, [r4, #20]
    1372:	2900      	cmp	r1, #0
    1374:	d002      	beq.n	137c <spi_init+0x268>
		/* Enable Master Slave Select */
		ctrlb |= SERCOM_SPI_CTRLB_MSSEN;
    1376:	2180      	movs	r1, #128	; 0x80
    1378:	0189      	lsls	r1, r1, #6
    137a:	430a      	orrs	r2, r1
	}
#  endif
	/* Write CTRLA register */
	spi_module->CTRLA.reg |= ctrla;
    137c:	6831      	ldr	r1, [r6, #0]
    137e:	430b      	orrs	r3, r1
    1380:	6033      	str	r3, [r6, #0]

	/* Write CTRLB register */
	spi_module->CTRLB.reg |= ctrlb;
    1382:	6873      	ldr	r3, [r6, #4]
    1384:	431a      	orrs	r2, r3
    1386:	6072      	str	r2, [r6, #4]

	return STATUS_OK;
    1388:	2000      	movs	r0, #0
	_sercom_instances[instance_index] = module;
#endif

	/* Write configuration to module and return status code */
	return _spi_set_config(module, config);
}
    138a:	b00a      	add	sp, #40	; 0x28
    138c:	bc1c      	pop	{r2, r3, r4}
    138e:	4690      	mov	r8, r2
    1390:	4699      	mov	r9, r3
    1392:	46a2      	mov	sl, r4
    1394:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1396:	46c0      	nop			; (mov r8, r8)
    1398:	00000e85 	.word	0x00000e85
    139c:	41004400 	.word	0x41004400
    13a0:	00002199 	.word	0x00002199
    13a4:	00000c49 	.word	0x00000c49
    13a8:	0000100d 	.word	0x0000100d
    13ac:	40000400 	.word	0x40000400
    13b0:	0000217d 	.word	0x0000217d
    13b4:	000020f1 	.word	0x000020f1
    13b8:	00000e39 	.word	0x00000e39
    13bc:	000022cd 	.word	0x000022cd
    13c0:	41002000 	.word	0x41002000

000013c4 <spi_select_slave>:
 */
enum status_code spi_select_slave(
		struct spi_module *const module,
		struct spi_slave_inst *const slave,
		const bool select)
{
    13c4:	b510      	push	{r4, lr}
	Assert(module);
	Assert(module->hw);
	Assert(slave);

	/* Check that the SPI module is operating in master mode */
	if (module->mode != SPI_MODE_MASTER) {
    13c6:	7944      	ldrb	r4, [r0, #5]
		return STATUS_ERR_UNSUPPORTED_DEV;
    13c8:	2315      	movs	r3, #21
	Assert(module);
	Assert(module->hw);
	Assert(slave);

	/* Check that the SPI module is operating in master mode */
	if (module->mode != SPI_MODE_MASTER) {
    13ca:	2c01      	cmp	r4, #1
    13cc:	d170      	bne.n	14b0 <spi_select_slave+0xec>
		return STATUS_ERR_UNSUPPORTED_DEV;
	}
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	if(!(module->master_slave_select_enable))
    13ce:	7a04      	ldrb	r4, [r0, #8]
		} else {
			/* Drive Slave Select high */
			port_pin_set_output_level(slave->ss_pin, true);
		}
	}
	return STATUS_OK;
    13d0:	2300      	movs	r3, #0
	/* Check that the SPI module is operating in master mode */
	if (module->mode != SPI_MODE_MASTER) {
		return STATUS_ERR_UNSUPPORTED_DEV;
	}
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	if(!(module->master_slave_select_enable))
    13d2:	2c00      	cmp	r4, #0
    13d4:	d16c      	bne.n	14b0 <spi_select_slave+0xec>
#  endif
	{
		if (select) {
    13d6:	2a00      	cmp	r2, #0
    13d8:	d05a      	beq.n	1490 <spi_select_slave+0xcc>
			/* Check if address recognition is enabled */
			if (slave->address_enabled) {
    13da:	784b      	ldrb	r3, [r1, #1]
    13dc:	2b00      	cmp	r3, #0
    13de:	d046      	beq.n	146e <spi_select_slave+0xaa>
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    13e0:	6803      	ldr	r3, [r0, #0]
    13e2:	7e1b      	ldrb	r3, [r3, #24]
				/* Check if the module is ready to write the address */
				if (!spi_is_ready_to_write(module)) {
    13e4:	07db      	lsls	r3, r3, #31
    13e6:	d410      	bmi.n	140a <spi_select_slave+0x46>
					/* Not ready, do not select slave and return */
					port_pin_set_output_level(slave->ss_pin, true);
    13e8:	780b      	ldrb	r3, [r1, #0]
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports. */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    13ea:	09d9      	lsrs	r1, r3, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
    13ec:	2200      	movs	r2, #0
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports. */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    13ee:	2900      	cmp	r1, #0
    13f0:	d104      	bne.n	13fc <spi_select_slave+0x38>
		return &(ports[port_index]->Group[group_index]);
    13f2:	095a      	lsrs	r2, r3, #5
    13f4:	01d2      	lsls	r2, r2, #7
    13f6:	492f      	ldr	r1, [pc, #188]	; (14b4 <spi_select_slave+0xf0>)
    13f8:	468c      	mov	ip, r1
    13fa:	4462      	add	r2, ip
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    13fc:	211f      	movs	r1, #31
    13fe:	400b      	ands	r3, r1
    1400:	391e      	subs	r1, #30
    1402:	4099      	lsls	r1, r3

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
    1404:	6191      	str	r1, [r2, #24]
					return STATUS_BUSY;
    1406:	2305      	movs	r3, #5
    1408:	e052      	b.n	14b0 <spi_select_slave+0xec>
				}

				/* Drive Slave Select low */
				port_pin_set_output_level(slave->ss_pin, false);
    140a:	780b      	ldrb	r3, [r1, #0]
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports. */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    140c:	09dc      	lsrs	r4, r3, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
    140e:	2200      	movs	r2, #0
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports. */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    1410:	2c00      	cmp	r4, #0
    1412:	d104      	bne.n	141e <spi_select_slave+0x5a>
		return &(ports[port_index]->Group[group_index]);
    1414:	095a      	lsrs	r2, r3, #5
    1416:	01d2      	lsls	r2, r2, #7
    1418:	4c26      	ldr	r4, [pc, #152]	; (14b4 <spi_select_slave+0xf0>)
    141a:	46a4      	mov	ip, r4
    141c:	4462      	add	r2, ip
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    141e:	241f      	movs	r4, #31
    1420:	4023      	ands	r3, r4
    1422:	3c1e      	subs	r4, #30
    1424:	409c      	lsls	r4, r3

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
	} else {
		port_base->OUTCLR.reg = pin_mask;
    1426:	6154      	str	r4, [r2, #20]

				/* Write address to slave */
				spi_write(module, slave->address);
    1428:	788a      	ldrb	r2, [r1, #2]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    142a:	6803      	ldr	r3, [r0, #0]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    142c:	7e19      	ldrb	r1, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
    142e:	07c9      	lsls	r1, r1, #31
    1430:	d500      	bpl.n	1434 <spi_select_slave+0x70>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    1432:	629a      	str	r2, [r3, #40]	; 0x28

				if (!(module->receiver_enabled)) {
    1434:	79c2      	ldrb	r2, [r0, #7]
		} else {
			/* Drive Slave Select high */
			port_pin_set_output_level(slave->ss_pin, true);
		}
	}
	return STATUS_OK;
    1436:	2300      	movs	r3, #0
				port_pin_set_output_level(slave->ss_pin, false);

				/* Write address to slave */
				spi_write(module, slave->address);

				if (!(module->receiver_enabled)) {
    1438:	2a00      	cmp	r2, #0
    143a:	d139      	bne.n	14b0 <spi_select_slave+0xec>
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    143c:	6802      	ldr	r2, [r0, #0]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    143e:	2104      	movs	r1, #4
    1440:	7e13      	ldrb	r3, [r2, #24]
					/* Flush contents of shift register shifted back from slave */
					while (!spi_is_ready_to_read(module)) {
    1442:	420b      	tst	r3, r1
    1444:	d0fc      	beq.n	1440 <spi_select_slave+0x7c>
    1446:	7e11      	ldrb	r1, [r2, #24]
		} else {
			/* Drive Slave Select high */
			port_pin_set_output_level(slave->ss_pin, true);
		}
	}
	return STATUS_OK;
    1448:	2300      	movs	r3, #0
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
    144a:	0749      	lsls	r1, r1, #29
    144c:	d530      	bpl.n	14b0 <spi_select_slave+0xec>

	/* Return value */
	enum status_code retval = STATUS_OK;

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    144e:	8b53      	ldrh	r3, [r2, #26]
    1450:	075b      	lsls	r3, r3, #29
    1452:	d503      	bpl.n	145c <spi_select_slave+0x98>
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg |= SERCOM_SPI_STATUS_BUFOVF;
    1454:	8b51      	ldrh	r1, [r2, #26]
    1456:	2304      	movs	r3, #4
    1458:	430b      	orrs	r3, r1
    145a:	8353      	strh	r3, [r2, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    145c:	7983      	ldrb	r3, [r0, #6]
    145e:	2b01      	cmp	r3, #1
    1460:	d102      	bne.n	1468 <spi_select_slave+0xa4>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    1462:	6a93      	ldr	r3, [r2, #40]	; 0x28
    1464:	2300      	movs	r3, #0
    1466:	e023      	b.n	14b0 <spi_select_slave+0xec>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    1468:	6a93      	ldr	r3, [r2, #40]	; 0x28
    146a:	2300      	movs	r3, #0
    146c:	e020      	b.n	14b0 <spi_select_slave+0xec>
					uint16_t flush = 0;
					spi_read(module, &flush);
				}
			} else {
				/* Drive Slave Select low */
				port_pin_set_output_level(slave->ss_pin, false);
    146e:	780b      	ldrb	r3, [r1, #0]
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports. */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    1470:	09d9      	lsrs	r1, r3, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
    1472:	2200      	movs	r2, #0
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports. */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    1474:	2900      	cmp	r1, #0
    1476:	d104      	bne.n	1482 <spi_select_slave+0xbe>
		return &(ports[port_index]->Group[group_index]);
    1478:	095a      	lsrs	r2, r3, #5
    147a:	01d2      	lsls	r2, r2, #7
    147c:	490d      	ldr	r1, [pc, #52]	; (14b4 <spi_select_slave+0xf0>)
    147e:	468c      	mov	ip, r1
    1480:	4462      	add	r2, ip
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    1482:	211f      	movs	r1, #31
    1484:	400b      	ands	r3, r1
    1486:	391e      	subs	r1, #30
    1488:	4099      	lsls	r1, r3

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
	} else {
		port_base->OUTCLR.reg = pin_mask;
    148a:	6151      	str	r1, [r2, #20]
		} else {
			/* Drive Slave Select high */
			port_pin_set_output_level(slave->ss_pin, true);
		}
	}
	return STATUS_OK;
    148c:	2300      	movs	r3, #0
    148e:	e00f      	b.n	14b0 <spi_select_slave+0xec>
				/* Drive Slave Select low */
				port_pin_set_output_level(slave->ss_pin, false);
			}
		} else {
			/* Drive Slave Select high */
			port_pin_set_output_level(slave->ss_pin, true);
    1490:	780b      	ldrb	r3, [r1, #0]
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports. */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    1492:	09d9      	lsrs	r1, r3, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
    1494:	2200      	movs	r2, #0
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports. */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    1496:	2900      	cmp	r1, #0
    1498:	d104      	bne.n	14a4 <spi_select_slave+0xe0>
		return &(ports[port_index]->Group[group_index]);
    149a:	095a      	lsrs	r2, r3, #5
    149c:	01d2      	lsls	r2, r2, #7
    149e:	4905      	ldr	r1, [pc, #20]	; (14b4 <spi_select_slave+0xf0>)
    14a0:	468c      	mov	ip, r1
    14a2:	4462      	add	r2, ip
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    14a4:	211f      	movs	r1, #31
    14a6:	400b      	ands	r3, r1
    14a8:	391e      	subs	r1, #30
    14aa:	4099      	lsls	r1, r3

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
    14ac:	6191      	str	r1, [r2, #24]
		}
	}
	return STATUS_OK;
    14ae:	2300      	movs	r3, #0
}
    14b0:	1c18      	adds	r0, r3, #0
    14b2:	bd10      	pop	{r4, pc}
    14b4:	41004400 	.word	0x41004400

000014b8 <usart_init>:
 */
enum status_code usart_init(
		struct usart_module *const module,
		Sercom *const hw,
		const struct usart_config *const config)
{
    14b8:	b5f0      	push	{r4, r5, r6, r7, lr}
    14ba:	465f      	mov	r7, fp
    14bc:	4656      	mov	r6, sl
    14be:	464d      	mov	r5, r9
    14c0:	4644      	mov	r4, r8
    14c2:	b4f0      	push	{r4, r5, r6, r7}
    14c4:	b091      	sub	sp, #68	; 0x44
    14c6:	1c05      	adds	r5, r0, #0
    14c8:	1c0c      	adds	r4, r1, #0
    14ca:	1c16      	adds	r6, r2, #0
	Assert(config);

	enum status_code status_code = STATUS_OK;

	/* Assign module pointer to software instance struct */
	module->hw = hw;
    14cc:	6029      	str	r1, [r5, #0]

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    14ce:	1c08      	adds	r0, r1, #0
    14d0:	4bbd      	ldr	r3, [pc, #756]	; (17c8 <usart_init+0x310>)
    14d2:	4798      	blx	r3
	uint32_t pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
    14d4:	6822      	ldr	r2, [r4, #0]
		/* The module is busy resetting itself */
		return STATUS_BUSY;
    14d6:	2305      	movs	r3, #5

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
	uint32_t pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
    14d8:	07d2      	lsls	r2, r2, #31
    14da:	d500      	bpl.n	14de <usart_init+0x26>
    14dc:	e16b      	b.n	17b6 <usart_init+0x2fe>
		/* The module is busy resetting itself */
		return STATUS_BUSY;
	}

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
    14de:	6822      	ldr	r2, [r4, #0]
		/* Check the module is enabled */
		return STATUS_ERR_DENIED;
    14e0:	3317      	adds	r3, #23
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
		/* The module is busy resetting itself */
		return STATUS_BUSY;
	}

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
    14e2:	0792      	lsls	r2, r2, #30
    14e4:	d500      	bpl.n	14e8 <usart_init+0x30>
    14e6:	e166      	b.n	17b6 <usart_init+0x2fe>
    14e8:	49b8      	ldr	r1, [pc, #736]	; (17cc <usart_init+0x314>)
    14ea:	6a0a      	ldr	r2, [r1, #32]

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
	uint32_t pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
    14ec:	1c87      	adds	r7, r0, #2
		/* Check the module is enabled */
		return STATUS_ERR_DENIED;
	}

	/* Turn on module in PM */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    14ee:	3b1b      	subs	r3, #27
    14f0:	40bb      	lsls	r3, r7
    14f2:	4313      	orrs	r3, r2
    14f4:	620b      	str	r3, [r1, #32]

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
	gclk_chan_conf.source_generator = config->generator_source;
    14f6:	a90f      	add	r1, sp, #60	; 0x3c
    14f8:	272d      	movs	r7, #45	; 0x2d
    14fa:	5df3      	ldrb	r3, [r6, r7]
    14fc:	700b      	strb	r3, [r1, #0]
	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
	uint32_t pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    14fe:	3014      	adds	r0, #20

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
	gclk_chan_conf.source_generator = config->generator_source;
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    1500:	b2c3      	uxtb	r3, r0
    1502:	9303      	str	r3, [sp, #12]
    1504:	1c18      	adds	r0, r3, #0
    1506:	4bb2      	ldr	r3, [pc, #712]	; (17d0 <usart_init+0x318>)
    1508:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    150a:	9803      	ldr	r0, [sp, #12]
    150c:	4bb1      	ldr	r3, [pc, #708]	; (17d4 <usart_init+0x31c>)
    150e:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    1510:	5df0      	ldrb	r0, [r6, r7]
    1512:	2100      	movs	r1, #0
    1514:	4bb0      	ldr	r3, [pc, #704]	; (17d8 <usart_init+0x320>)
    1516:	4798      	blx	r3

	/* Set character size */
	module->character_size = config->character_size;
    1518:	7af3      	ldrb	r3, [r6, #11]
    151a:	716b      	strb	r3, [r5, #5]

	/* Set transmitter and receiver status */
	module->receiver_enabled = config->receiver_enable;
    151c:	2324      	movs	r3, #36	; 0x24
    151e:	5cf3      	ldrb	r3, [r6, r3]
    1520:	71ab      	strb	r3, [r5, #6]
	module->transmitter_enabled = config->transmitter_enable;
    1522:	2325      	movs	r3, #37	; 0x25
    1524:	5cf3      	ldrb	r3, [r6, r3]
    1526:	71eb      	strb	r3, [r5, #7]

#ifdef FEATURE_USART_LIN_SLAVE
	module->lin_slave_enabled = config->lin_slave_enable;
    1528:	7ef3      	ldrb	r3, [r6, #27]
    152a:	722b      	strb	r3, [r5, #8]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	module->start_frame_detection_enabled = config->start_frame_detection_enable;
    152c:	7f33      	ldrb	r3, [r6, #28]
    152e:	726b      	strb	r3, [r5, #9]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    1530:	682b      	ldr	r3, [r5, #0]
    1532:	469a      	mov	sl, r3

	/* Index for generic clock */
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    1534:	1c18      	adds	r0, r3, #0
    1536:	4ba4      	ldr	r3, [pc, #656]	; (17c8 <usart_init+0x310>)
    1538:	4798      	blx	r3
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    153a:	3014      	adds	r0, #20

	/* Cache new register values to minimize the number of register writes */
	uint32_t ctrla = 0;
	uint32_t ctrlb = 0;
	uint16_t baud  = 0;
    153c:	2200      	movs	r2, #0
    153e:	230e      	movs	r3, #14
    1540:	a906      	add	r1, sp, #24
    1542:	468c      	mov	ip, r1
    1544:	4463      	add	r3, ip
    1546:	801a      	strh	r2, [r3, #0]

	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;

#ifdef FEATURE_USART_OVER_SAMPLE
	switch (config->sample_rate) {
    1548:	8a33      	ldrh	r3, [r6, #16]
    154a:	4699      	mov	r9, r3
    154c:	2380      	movs	r3, #128	; 0x80
    154e:	01db      	lsls	r3, r3, #7
    1550:	4599      	cmp	r9, r3
    1552:	d019      	beq.n	1588 <usart_init+0xd0>
    1554:	d804      	bhi.n	1560 <usart_init+0xa8>
    1556:	2380      	movs	r3, #128	; 0x80
    1558:	019b      	lsls	r3, r3, #6
    155a:	4599      	cmp	r9, r3
    155c:	d00a      	beq.n	1574 <usart_init+0xbc>
    155e:	e10c      	b.n	177a <usart_init+0x2c2>
    1560:	23c0      	movs	r3, #192	; 0xc0
    1562:	01db      	lsls	r3, r3, #7
    1564:	4599      	cmp	r9, r3
    1566:	d00a      	beq.n	157e <usart_init+0xc6>
    1568:	2380      	movs	r3, #128	; 0x80
    156a:	021b      	lsls	r3, r3, #8
    156c:	4599      	cmp	r9, r3
    156e:	d100      	bne.n	1572 <usart_init+0xba>
    1570:	e108      	b.n	1784 <usart_init+0x2cc>
    1572:	e102      	b.n	177a <usart_init+0x2c2>
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
			break;
		case USART_SAMPLE_RATE_16X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    1574:	2310      	movs	r3, #16
    1576:	9306      	str	r3, [sp, #24]
		case USART_SAMPLE_RATE_3X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
			break;
		case USART_SAMPLE_RATE_16X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    1578:	3b0f      	subs	r3, #15
    157a:	9307      	str	r3, [sp, #28]
    157c:	e106      	b.n	178c <usart_init+0x2d4>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
			break;
		case USART_SAMPLE_RATE_8X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    157e:	2308      	movs	r3, #8
    1580:	9306      	str	r3, [sp, #24]
		case USART_SAMPLE_RATE_16X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
			break;
		case USART_SAMPLE_RATE_8X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    1582:	3b07      	subs	r3, #7
    1584:	9307      	str	r3, [sp, #28]
    1586:	e101      	b.n	178c <usart_init+0x2d4>
			break;
	}
#endif

	/* Set data order, internal muxing, and clock polarity */
	ctrla = (uint32_t)config->data_order |
    1588:	6833      	ldr	r3, [r6, #0]
    158a:	469b      	mov	fp, r3
		(uint32_t)config->mux_setting |
    158c:	68f3      	ldr	r3, [r6, #12]
    158e:	9303      	str	r3, [sp, #12]
	#ifdef FEATURE_USART_OVER_SAMPLE
		config->sample_adjustment |
    1590:	6973      	ldr	r3, [r6, #20]
    1592:	9304      	str	r3, [sp, #16]
		config->sample_rate |
	#endif
	#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    1594:	7e33      	ldrb	r3, [r6, #24]
    1596:	4698      	mov	r8, r3
	#endif
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    1598:	2326      	movs	r3, #38	; 0x26
    159a:	5cf3      	ldrb	r3, [r6, r3]
    159c:	9305      	str	r3, [sp, #20]

	enum status_code status_code = STATUS_OK;

	/* Get baud value from mode and clock */
	switch (config->transfer_mode)
    159e:	6873      	ldr	r3, [r6, #4]
    15a0:	2b00      	cmp	r3, #0
    15a2:	d015      	beq.n	15d0 <usart_init+0x118>
    15a4:	2280      	movs	r2, #128	; 0x80
    15a6:	0552      	lsls	r2, r2, #21
    15a8:	4293      	cmp	r3, r2
    15aa:	d136      	bne.n	161a <usart_init+0x162>
	{
		case USART_TRANSFER_SYNCHRONOUSLY:
			if (!config->use_external_clock) {
    15ac:	2327      	movs	r3, #39	; 0x27
    15ae:	5cf3      	ldrb	r3, [r6, r3]
    15b0:	2b00      	cmp	r3, #0
    15b2:	d136      	bne.n	1622 <usart_init+0x16a>
				status_code = _sercom_get_sync_baud_val(config->baudrate,
    15b4:	6a33      	ldr	r3, [r6, #32]
    15b6:	1c1f      	adds	r7, r3, #0
    15b8:	b2c0      	uxtb	r0, r0
    15ba:	4b88      	ldr	r3, [pc, #544]	; (17dc <usart_init+0x324>)
    15bc:	4798      	blx	r3
    15be:	1c01      	adds	r1, r0, #0
    15c0:	1c38      	adds	r0, r7, #0
    15c2:	220e      	movs	r2, #14
    15c4:	ab06      	add	r3, sp, #24
    15c6:	469c      	mov	ip, r3
    15c8:	4462      	add	r2, ip
    15ca:	4b85      	ldr	r3, [pc, #532]	; (17e0 <usart_init+0x328>)
    15cc:	4798      	blx	r3
    15ce:	e025      	b.n	161c <usart_init+0x164>
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
			break;
		case USART_SAMPLE_RATE_8X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    15d0:	2308      	movs	r3, #8
    15d2:	9306      	str	r3, [sp, #24]
		case USART_SAMPLE_RATE_16X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
			break;
		case USART_SAMPLE_RATE_8X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    15d4:	2300      	movs	r3, #0
    15d6:	9307      	str	r3, [sp, #28]
			}

			break;

		case USART_TRANSFER_ASYNCHRONOUSLY:
			if (config->use_external_clock) {
    15d8:	2327      	movs	r3, #39	; 0x27
    15da:	5cf3      	ldrb	r3, [r6, r3]
    15dc:	2b00      	cmp	r3, #0
    15de:	d00b      	beq.n	15f8 <usart_init+0x140>
				status_code =
    15e0:	9b06      	ldr	r3, [sp, #24]
    15e2:	9300      	str	r3, [sp, #0]
    15e4:	6a30      	ldr	r0, [r6, #32]
    15e6:	6ab1      	ldr	r1, [r6, #40]	; 0x28
    15e8:	220e      	movs	r2, #14
    15ea:	ab06      	add	r3, sp, #24
    15ec:	469c      	mov	ip, r3
    15ee:	4462      	add	r2, ip
    15f0:	9b07      	ldr	r3, [sp, #28]
    15f2:	4f7c      	ldr	r7, [pc, #496]	; (17e4 <usart_init+0x32c>)
    15f4:	47b8      	blx	r7
    15f6:	e011      	b.n	161c <usart_init+0x164>
						_sercom_get_async_baud_val(config->baudrate,
							config->ext_clock_freq, &baud, mode, sample_num);
			} else {
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
    15f8:	6a33      	ldr	r3, [r6, #32]
    15fa:	1c1f      	adds	r7, r3, #0
    15fc:	b2c0      	uxtb	r0, r0
    15fe:	4b77      	ldr	r3, [pc, #476]	; (17dc <usart_init+0x324>)
    1600:	4798      	blx	r3
    1602:	1c01      	adds	r1, r0, #0
			if (config->use_external_clock) {
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
							config->ext_clock_freq, &baud, mode, sample_num);
			} else {
				status_code =
    1604:	9b06      	ldr	r3, [sp, #24]
    1606:	9300      	str	r3, [sp, #0]
    1608:	1c38      	adds	r0, r7, #0
    160a:	220e      	movs	r2, #14
    160c:	ab06      	add	r3, sp, #24
    160e:	469c      	mov	ip, r3
    1610:	4462      	add	r2, ip
    1612:	9b07      	ldr	r3, [sp, #28]
    1614:	4f73      	ldr	r7, [pc, #460]	; (17e4 <usart_init+0x32c>)
    1616:	47b8      	blx	r7
    1618:	e000      	b.n	161c <usart_init+0x164>
	#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
	#endif
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);

	enum status_code status_code = STATUS_OK;
    161a:	2000      	movs	r0, #0
    161c:	1e03      	subs	r3, r0, #0

			break;
	}

	/* Check if calculating the baudrate failed */
	if (status_code != STATUS_OK) {
    161e:	d000      	beq.n	1622 <usart_init+0x16a>
    1620:	e0c9      	b.n	17b6 <usart_init+0x2fe>
		/* Abort */
		return status_code;
	}

#ifdef FEATURE_USART_IRDA
	if(config->encoding_format_enable) {
    1622:	7e73      	ldrb	r3, [r6, #25]
    1624:	2b00      	cmp	r3, #0
    1626:	d002      	beq.n	162e <usart_init+0x176>
		usart_hw->RXPL.reg = config->receive_pulse_length;
    1628:	7eb3      	ldrb	r3, [r6, #26]
    162a:	4652      	mov	r2, sl
    162c:	7393      	strb	r3, [r2, #14]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
    162e:	682a      	ldr	r2, [r5, #0]
    1630:	9f05      	ldr	r7, [sp, #20]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    1632:	69d3      	ldr	r3, [r2, #28]
		const struct usart_module *const module)
{
	/* Sanity check. */
	Assert(module);

	while (usart_is_syncing(module)) {
    1634:	2b00      	cmp	r3, #0
    1636:	d1fc      	bne.n	1632 <usart_init+0x17a>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/*Set baud val */
	usart_hw->BAUD.reg = baud;
    1638:	330e      	adds	r3, #14
    163a:	aa06      	add	r2, sp, #24
    163c:	4694      	mov	ip, r2
    163e:	4463      	add	r3, ip
    1640:	881b      	ldrh	r3, [r3, #0]
    1642:	4652      	mov	r2, sl
    1644:	8193      	strh	r3, [r2, #12]
    1646:	9b03      	ldr	r3, [sp, #12]
    1648:	465a      	mov	r2, fp
    164a:	4313      	orrs	r3, r2
    164c:	9a04      	ldr	r2, [sp, #16]
    164e:	4313      	orrs	r3, r2
    1650:	6872      	ldr	r2, [r6, #4]
    1652:	4313      	orrs	r3, r2
    1654:	464a      	mov	r2, r9
    1656:	4313      	orrs	r3, r2
	#ifdef FEATURE_USART_OVER_SAMPLE
		config->sample_adjustment |
		config->sample_rate |
	#endif
	#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    1658:	4642      	mov	r2, r8
    165a:	0212      	lsls	r2, r2, #8
    165c:	4313      	orrs	r3, r2
	#endif
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    165e:	077f      	lsls	r7, r7, #29

	/*Set baud val */
	usart_hw->BAUD.reg = baud;

	/* Set sample mode */
	ctrla |= config->transfer_mode;
    1660:	431f      	orrs	r7, r3

	if (config->use_external_clock == false) {
    1662:	2327      	movs	r3, #39	; 0x27
    1664:	5cf3      	ldrb	r3, [r6, r3]
    1666:	2b00      	cmp	r3, #0
    1668:	d101      	bne.n	166e <usart_init+0x1b6>
		ctrla |= SERCOM_USART_CTRLA_MODE_USART_INT_CLK;
    166a:	3304      	adds	r3, #4
    166c:	431f      	orrs	r7, r3
	}

	/* Set stopbits, character size and enable transceivers */
	ctrlb = (uint32_t)config->stopbits | (uint32_t)config->character_size |
		#ifdef FEATURE_USART_IRDA
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    166e:	7e71      	ldrb	r1, [r6, #25]
    1670:	0289      	lsls	r1, r1, #10
		#endif
		#ifdef FEATURE_USART_START_FRAME_DECTION
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    1672:	7f33      	ldrb	r3, [r6, #28]
    1674:	025b      	lsls	r3, r3, #9
    1676:	4319      	orrs	r1, r3
	else {
		ctrla |= SERCOM_USART_CTRLA_MODE_USART_EXT_CLK;
	}

	/* Set stopbits, character size and enable transceivers */
	ctrlb = (uint32_t)config->stopbits | (uint32_t)config->character_size |
    1678:	7af3      	ldrb	r3, [r6, #11]
    167a:	7ab2      	ldrb	r2, [r6, #10]
    167c:	4313      	orrs	r3, r2
		#ifdef FEATURE_USART_IRDA
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    167e:	4319      	orrs	r1, r3
		#endif
		#ifdef FEATURE_USART_START_FRAME_DECTION
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
		#endif
		#ifdef FEATURE_USART_COLLISION_DECTION
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    1680:	7f72      	ldrb	r2, [r6, #29]
    1682:	0212      	lsls	r2, r2, #8
	ctrlb = (uint32_t)config->stopbits | (uint32_t)config->character_size |
		#ifdef FEATURE_USART_IRDA
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
		#endif
		#ifdef FEATURE_USART_START_FRAME_DECTION
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    1684:	4311      	orrs	r1, r2
		#endif
		#ifdef FEATURE_USART_COLLISION_DECTION
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
		#endif
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    1686:	2324      	movs	r3, #36	; 0x24
    1688:	5cf2      	ldrb	r2, [r6, r3]
    168a:	0452      	lsls	r2, r2, #17
		#endif
		#ifdef FEATURE_USART_START_FRAME_DECTION
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
		#endif
		#ifdef FEATURE_USART_COLLISION_DECTION
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    168c:	1c0b      	adds	r3, r1, #0
    168e:	4313      	orrs	r3, r2
		#endif
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);
    1690:	2225      	movs	r2, #37	; 0x25
    1692:	5cb1      	ldrb	r1, [r6, r2]
    1694:	0409      	lsls	r1, r1, #16
	else {
		ctrla |= SERCOM_USART_CTRLA_MODE_USART_EXT_CLK;
	}

	/* Set stopbits, character size and enable transceivers */
	ctrlb = (uint32_t)config->stopbits | (uint32_t)config->character_size |
    1696:	4319      	orrs	r1, r3
		#endif
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);

	/* Check parity mode bits */
	if (config->parity != USART_PARITY_NONE) {
    1698:	8933      	ldrh	r3, [r6, #8]
    169a:	2bff      	cmp	r3, #255	; 0xff
    169c:	d00b      	beq.n	16b6 <usart_init+0x1fe>
#ifdef FEATURE_USART_LIN_SLAVE
		if(config->lin_slave_enable) {
    169e:	7ef2      	ldrb	r2, [r6, #27]
    16a0:	2a00      	cmp	r2, #0
    16a2:	d003      	beq.n	16ac <usart_init+0x1f4>
			ctrla |= SERCOM_USART_CTRLA_FORM(0x5);
    16a4:	22a0      	movs	r2, #160	; 0xa0
    16a6:	04d2      	lsls	r2, r2, #19
    16a8:	4317      	orrs	r7, r2
    16aa:	e002      	b.n	16b2 <usart_init+0x1fa>
		} else {
			ctrla |= SERCOM_USART_CTRLA_FORM(1);
    16ac:	2280      	movs	r2, #128	; 0x80
    16ae:	0452      	lsls	r2, r2, #17
    16b0:	4317      	orrs	r7, r2
		}
#else
		ctrla |= SERCOM_USART_CTRLA_FORM(1);
#endif
		ctrlb |= config->parity;
    16b2:	4319      	orrs	r1, r3
    16b4:	e005      	b.n	16c2 <usart_init+0x20a>
	} else {
#ifdef FEATURE_USART_LIN_SLAVE
		if(config->lin_slave_enable) {
    16b6:	7ef3      	ldrb	r3, [r6, #27]
    16b8:	2b00      	cmp	r3, #0
    16ba:	d002      	beq.n	16c2 <usart_init+0x20a>
			ctrla |= SERCOM_USART_CTRLA_FORM(0x4);
    16bc:	2380      	movs	r3, #128	; 0x80
    16be:	04db      	lsls	r3, r3, #19
    16c0:	431f      	orrs	r7, r3
		ctrla |= SERCOM_USART_CTRLA_FORM(0);
#endif
	}

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
    16c2:	232c      	movs	r3, #44	; 0x2c
    16c4:	5cf3      	ldrb	r3, [r6, r3]
    16c6:	2b00      	cmp	r3, #0
    16c8:	d103      	bne.n	16d2 <usart_init+0x21a>
    16ca:	4b47      	ldr	r3, [pc, #284]	; (17e8 <usart_init+0x330>)
    16cc:	789b      	ldrb	r3, [r3, #2]
    16ce:	079b      	lsls	r3, r3, #30
    16d0:	d501      	bpl.n	16d6 <usart_init+0x21e>
		ctrla |= SERCOM_USART_CTRLA_RUNSTDBY;
    16d2:	2380      	movs	r3, #128	; 0x80
    16d4:	431f      	orrs	r7, r3
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
    16d6:	682a      	ldr	r2, [r5, #0]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    16d8:	69d3      	ldr	r3, [r2, #28]
		const struct usart_module *const module)
{
	/* Sanity check. */
	Assert(module);

	while (usart_is_syncing(module)) {
    16da:	2b00      	cmp	r3, #0
    16dc:	d1fc      	bne.n	16d8 <usart_init+0x220>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Write configuration to CTRLB */
	usart_hw->CTRLB.reg = ctrlb;
    16de:	4653      	mov	r3, sl
    16e0:	6059      	str	r1, [r3, #4]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
    16e2:	682a      	ldr	r2, [r5, #0]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    16e4:	69d3      	ldr	r3, [r2, #28]
		const struct usart_module *const module)
{
	/* Sanity check. */
	Assert(module);

	while (usart_is_syncing(module)) {
    16e6:	2b00      	cmp	r3, #0
    16e8:	d1fc      	bne.n	16e4 <usart_init+0x22c>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Write configuration to CTRLA */
	usart_hw->CTRLA.reg = ctrla;
    16ea:	4653      	mov	r3, sl
    16ec:	601f      	str	r7, [r3, #0]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
    16ee:	ab0e      	add	r3, sp, #56	; 0x38
    16f0:	2280      	movs	r2, #128	; 0x80
    16f2:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    16f4:	2200      	movs	r2, #0
    16f6:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
	config->powersave    = false;
    16f8:	70da      	strb	r2, [r3, #3]
	}

	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    16fa:	709a      	strb	r2, [r3, #2]

	uint32_t pad_pinmuxes[] = {
    16fc:	6b33      	ldr	r3, [r6, #48]	; 0x30
    16fe:	930a      	str	r3, [sp, #40]	; 0x28
    1700:	6b73      	ldr	r3, [r6, #52]	; 0x34
    1702:	930b      	str	r3, [sp, #44]	; 0x2c
    1704:	6bb3      	ldr	r3, [r6, #56]	; 0x38
    1706:	930c      	str	r3, [sp, #48]	; 0x30
    1708:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
    170a:	9303      	str	r3, [sp, #12]
    170c:	930d      	str	r3, [sp, #52]	; 0x34
    170e:	2700      	movs	r7, #0
		if (current_pinmux == PINMUX_DEFAULT) {
			current_pinmux = _sercom_get_default_pad(hw, pad);
		}

		if (current_pinmux != PINMUX_UNUSED) {
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    1710:	ae0e      	add	r6, sp, #56	; 0x38
    1712:	b2f9      	uxtb	r1, r7
    1714:	00bb      	lsls	r3, r7, #2
			config->pinmux_pad2, config->pinmux_pad3
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
		uint32_t current_pinmux = pad_pinmuxes[pad];
    1716:	aa0a      	add	r2, sp, #40	; 0x28
    1718:	5898      	ldr	r0, [r3, r2]

		if (current_pinmux == PINMUX_DEFAULT) {
    171a:	2800      	cmp	r0, #0
    171c:	d102      	bne.n	1724 <usart_init+0x26c>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    171e:	1c20      	adds	r0, r4, #0
    1720:	4b32      	ldr	r3, [pc, #200]	; (17ec <usart_init+0x334>)
    1722:	4798      	blx	r3
		}

		if (current_pinmux != PINMUX_UNUSED) {
    1724:	1c43      	adds	r3, r0, #1
    1726:	d005      	beq.n	1734 <usart_init+0x27c>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    1728:	7030      	strb	r0, [r6, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    172a:	0c00      	lsrs	r0, r0, #16
    172c:	b2c0      	uxtb	r0, r0
    172e:	1c31      	adds	r1, r6, #0
    1730:	4b2f      	ldr	r3, [pc, #188]	; (17f0 <usart_init+0x338>)
    1732:	4798      	blx	r3
    1734:	3701      	adds	r7, #1
			config->pinmux_pad0, config->pinmux_pad1,
			config->pinmux_pad2, config->pinmux_pad3
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
    1736:	2f04      	cmp	r7, #4
    1738:	d1eb      	bne.n	1712 <usart_init+0x25a>
	}

#if USART_CALLBACK_MODE == true
	/* Initialize parameters */
	for (uint32_t i = 0; i < USART_CALLBACK_N; i++) {
		module->callback[i]            = NULL;
    173a:	2300      	movs	r3, #0
    173c:	60eb      	str	r3, [r5, #12]
    173e:	612b      	str	r3, [r5, #16]
    1740:	616b      	str	r3, [r5, #20]
    1742:	61ab      	str	r3, [r5, #24]
    1744:	61eb      	str	r3, [r5, #28]
    1746:	622b      	str	r3, [r5, #32]
	}

	module->tx_buffer_ptr              = NULL;
    1748:	62ab      	str	r3, [r5, #40]	; 0x28
	module->rx_buffer_ptr              = NULL;
    174a:	626b      	str	r3, [r5, #36]	; 0x24
	module->remaining_tx_buffer_length = 0x0000;
    174c:	2200      	movs	r2, #0
    174e:	85eb      	strh	r3, [r5, #46]	; 0x2e
	module->remaining_rx_buffer_length = 0x0000;
    1750:	85ab      	strh	r3, [r5, #44]	; 0x2c
	module->callback_reg_mask          = 0x00;
    1752:	3330      	adds	r3, #48	; 0x30
    1754:	54ea      	strb	r2, [r5, r3]
	module->callback_enable_mask       = 0x00;
    1756:	3301      	adds	r3, #1
    1758:	54ea      	strb	r2, [r5, r3]
	module->rx_status                  = STATUS_OK;
    175a:	3301      	adds	r3, #1
    175c:	54ea      	strb	r2, [r5, r3]
	module->tx_status                  = STATUS_OK;
    175e:	3301      	adds	r3, #1
    1760:	54ea      	strb	r2, [r5, r3]

	/* Set interrupt handler and register USART software module struct in
	 * look-up table */
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
    1762:	6828      	ldr	r0, [r5, #0]
    1764:	4b18      	ldr	r3, [pc, #96]	; (17c8 <usart_init+0x310>)
    1766:	4798      	blx	r3
    1768:	1c04      	adds	r4, r0, #0
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
    176a:	4922      	ldr	r1, [pc, #136]	; (17f4 <usart_init+0x33c>)
    176c:	4b22      	ldr	r3, [pc, #136]	; (17f8 <usart_init+0x340>)
    176e:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
    1770:	00a4      	lsls	r4, r4, #2
    1772:	4b22      	ldr	r3, [pc, #136]	; (17fc <usart_init+0x344>)
    1774:	50e5      	str	r5, [r4, r3]
#endif

	return status_code;
    1776:	2300      	movs	r3, #0
    1778:	e01d      	b.n	17b6 <usart_init+0x2fe>
	uint32_t ctrla = 0;
	uint32_t ctrlb = 0;
	uint16_t baud  = 0;

	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    177a:	2310      	movs	r3, #16
    177c:	9306      	str	r3, [sp, #24]
	/* Cache new register values to minimize the number of register writes */
	uint32_t ctrla = 0;
	uint32_t ctrlb = 0;
	uint16_t baud  = 0;

	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    177e:	2300      	movs	r3, #0
    1780:	9307      	str	r3, [sp, #28]
    1782:	e003      	b.n	178c <usart_init+0x2d4>
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
			break;
		case USART_SAMPLE_RATE_3X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
    1784:	2303      	movs	r3, #3
    1786:	9306      	str	r3, [sp, #24]
		case USART_SAMPLE_RATE_8X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
			break;
		case USART_SAMPLE_RATE_3X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    1788:	2300      	movs	r3, #0
    178a:	9307      	str	r3, [sp, #28]
			break;
	}
#endif

	/* Set data order, internal muxing, and clock polarity */
	ctrla = (uint32_t)config->data_order |
    178c:	6833      	ldr	r3, [r6, #0]
    178e:	469b      	mov	fp, r3
		(uint32_t)config->mux_setting |
    1790:	68f3      	ldr	r3, [r6, #12]
    1792:	9303      	str	r3, [sp, #12]
	#ifdef FEATURE_USART_OVER_SAMPLE
		config->sample_adjustment |
    1794:	6973      	ldr	r3, [r6, #20]
    1796:	9304      	str	r3, [sp, #16]
		config->sample_rate |
	#endif
	#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    1798:	7e33      	ldrb	r3, [r6, #24]
    179a:	4698      	mov	r8, r3
	#endif
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    179c:	2326      	movs	r3, #38	; 0x26
    179e:	5cf3      	ldrb	r3, [r6, r3]
    17a0:	9305      	str	r3, [sp, #20]

	enum status_code status_code = STATUS_OK;

	/* Get baud value from mode and clock */
	switch (config->transfer_mode)
    17a2:	6873      	ldr	r3, [r6, #4]
    17a4:	2b00      	cmp	r3, #0
    17a6:	d100      	bne.n	17aa <usart_init+0x2f2>
    17a8:	e716      	b.n	15d8 <usart_init+0x120>
    17aa:	2280      	movs	r2, #128	; 0x80
    17ac:	0552      	lsls	r2, r2, #21
    17ae:	4293      	cmp	r3, r2
    17b0:	d100      	bne.n	17b4 <usart_init+0x2fc>
    17b2:	e6fb      	b.n	15ac <usart_init+0xf4>
    17b4:	e735      	b.n	1622 <usart_init+0x16a>
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
	_sercom_instances[instance_index] = module;
#endif

	return status_code;
}
    17b6:	1c18      	adds	r0, r3, #0
    17b8:	b011      	add	sp, #68	; 0x44
    17ba:	bc3c      	pop	{r2, r3, r4, r5}
    17bc:	4690      	mov	r8, r2
    17be:	4699      	mov	r9, r3
    17c0:	46a2      	mov	sl, r4
    17c2:	46ab      	mov	fp, r5
    17c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    17c6:	46c0      	nop			; (mov r8, r8)
    17c8:	0000100d 	.word	0x0000100d
    17cc:	40000400 	.word	0x40000400
    17d0:	0000217d 	.word	0x0000217d
    17d4:	000020f1 	.word	0x000020f1
    17d8:	00000e39 	.word	0x00000e39
    17dc:	00002199 	.word	0x00002199
    17e0:	00000c49 	.word	0x00000c49
    17e4:	00000c71 	.word	0x00000c71
    17e8:	41002000 	.word	0x41002000
    17ec:	00000e85 	.word	0x00000e85
    17f0:	000022cd 	.word	0x000022cd
    17f4:	00001945 	.word	0x00001945
    17f8:	0000104d 	.word	0x0000104d
    17fc:	20002ad0 	.word	0x20002ad0

00001800 <usart_write_wait>:
 * \retval STATUS_ERR_DENIED If the transmitter is not enabled
 */
enum status_code usart_write_wait(
		struct usart_module *const module,
		const uint16_t tx_data)
{
    1800:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    1802:	6803      	ldr	r3, [r0, #0]

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
    1804:	79c4      	ldrb	r4, [r0, #7]
		return STATUS_ERR_DENIED;
    1806:	221c      	movs	r2, #28

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
    1808:	2c00      	cmp	r4, #0
    180a:	d00d      	beq.n	1828 <usart_write_wait+0x28>
		return STATUS_ERR_DENIED;
	}

#if USART_CALLBACK_MODE == true
	/* Check if the USART is busy doing asynchronous operation. */
	if (module->remaining_tx_buffer_length > 0) {
    180c:	8dc0      	ldrh	r0, [r0, #46]	; 0x2e
    180e:	b280      	uxth	r0, r0
		return STATUS_BUSY;
    1810:	3a17      	subs	r2, #23
		return STATUS_ERR_DENIED;
	}

#if USART_CALLBACK_MODE == true
	/* Check if the USART is busy doing asynchronous operation. */
	if (module->remaining_tx_buffer_length > 0) {
    1812:	2800      	cmp	r0, #0
    1814:	d108      	bne.n	1828 <usart_write_wait+0x28>
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    1816:	69da      	ldr	r2, [r3, #28]
		const struct usart_module *const module)
{
	/* Sanity check. */
	Assert(module);

	while (usart_is_syncing(module)) {
    1818:	2a00      	cmp	r2, #0
    181a:	d1fc      	bne.n	1816 <usart_write_wait+0x16>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Write data to USART module */
	usart_hw->DATA.reg = tx_data;
    181c:	8519      	strh	r1, [r3, #40]	; 0x28

	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
    181e:	2102      	movs	r1, #2
    1820:	7e1a      	ldrb	r2, [r3, #24]
    1822:	420a      	tst	r2, r1
    1824:	d0fc      	beq.n	1820 <usart_write_wait+0x20>
		/* Wait until data is sent */
	}

	return STATUS_OK;
    1826:	2200      	movs	r2, #0
}
    1828:	1c10      	adds	r0, r2, #0
    182a:	bd10      	pop	{r4, pc}

0000182c <usart_read_wait>:
 * \retval STATUS_ERR_DENIED        If the receiver is not enabled
 */
enum status_code usart_read_wait(
		struct usart_module *const module,
		uint16_t *const rx_data)
{
    182c:	b510      	push	{r4, lr}

	/* Error variable */
	uint8_t error_code;

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    182e:	6804      	ldr	r4, [r0, #0]

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
    1830:	7982      	ldrb	r2, [r0, #6]
		return STATUS_ERR_DENIED;
    1832:	231c      	movs	r3, #28

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
    1834:	2a00      	cmp	r2, #0
    1836:	d033      	beq.n	18a0 <usart_read_wait+0x74>
		return STATUS_ERR_DENIED;
	}

#if USART_CALLBACK_MODE == true
	/* Check if the USART is busy doing asynchronous operation. */
	if (module->remaining_rx_buffer_length > 0) {
    1838:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
    183a:	b292      	uxth	r2, r2
		return STATUS_BUSY;
    183c:	3b17      	subs	r3, #23
		return STATUS_ERR_DENIED;
	}

#if USART_CALLBACK_MODE == true
	/* Check if the USART is busy doing asynchronous operation. */
	if (module->remaining_rx_buffer_length > 0) {
    183e:	2a00      	cmp	r2, #0
    1840:	d12e      	bne.n	18a0 <usart_read_wait+0x74>
		return STATUS_BUSY;
	}
#endif

	/* Check if USART has new data */
	if (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_RXC)) {
    1842:	7e22      	ldrb	r2, [r4, #24]
    1844:	0752      	lsls	r2, r2, #29
    1846:	d52b      	bpl.n	18a0 <usart_read_wait+0x74>
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    1848:	69e3      	ldr	r3, [r4, #28]
		const struct usart_module *const module)
{
	/* Sanity check. */
	Assert(module);

	while (usart_is_syncing(module)) {
    184a:	2b00      	cmp	r3, #0
    184c:	d1fc      	bne.n	1848 <usart_read_wait+0x1c>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Read out the status code and mask away all but the 3 LSBs*/
	error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    184e:	8b63      	ldrh	r3, [r4, #26]
    1850:	b2db      	uxtb	r3, r3

	/* Check if an error has occurred during the receiving */
	if (error_code) {
    1852:	069a      	lsls	r2, r3, #26
    1854:	d021      	beq.n	189a <usart_read_wait+0x6e>
		/* Check which error occurred */
		if (error_code & SERCOM_USART_STATUS_FERR) {
    1856:	079a      	lsls	r2, r3, #30
    1858:	d503      	bpl.n	1862 <usart_read_wait+0x36>
			/* Clear flag by writing a 1 to it and
			 * return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    185a:	2302      	movs	r3, #2
    185c:	8363      	strh	r3, [r4, #26]

			return STATUS_ERR_BAD_FORMAT;
    185e:	3318      	adds	r3, #24
    1860:	e01e      	b.n	18a0 <usart_read_wait+0x74>
		} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    1862:	075a      	lsls	r2, r3, #29
    1864:	d503      	bpl.n	186e <usart_read_wait+0x42>
			/* Clear flag by writing a 1 to it and
			 * return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    1866:	2304      	movs	r3, #4
    1868:	8363      	strh	r3, [r4, #26]

			return STATUS_ERR_OVERFLOW;
    186a:	331a      	adds	r3, #26
    186c:	e018      	b.n	18a0 <usart_read_wait+0x74>
		} else if (error_code & SERCOM_USART_STATUS_PERR) {
    186e:	07da      	lsls	r2, r3, #31
    1870:	d503      	bpl.n	187a <usart_read_wait+0x4e>
			/* Clear flag by writing a 1 to it and
			 * return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    1872:	2301      	movs	r3, #1
    1874:	8363      	strh	r3, [r4, #26]

			return STATUS_ERR_BAD_DATA;
    1876:	3312      	adds	r3, #18
    1878:	e012      	b.n	18a0 <usart_read_wait+0x74>
		}
#ifdef FEATURE_USART_LIN_SLAVE
		else if (error_code & SERCOM_USART_STATUS_ISF) {
    187a:	06da      	lsls	r2, r3, #27
    187c:	d505      	bpl.n	188a <usart_read_wait+0x5e>
			/* Clear flag by writing 1 to it  and
			 *  return with an error code */
			usart_hw->STATUS.reg |= SERCOM_USART_STATUS_ISF;
    187e:	8b62      	ldrh	r2, [r4, #26]
    1880:	2310      	movs	r3, #16
    1882:	4313      	orrs	r3, r2
    1884:	8363      	strh	r3, [r4, #26]

			return STATUS_ERR_PROTOCOL;
    1886:	2342      	movs	r3, #66	; 0x42
    1888:	e00a      	b.n	18a0 <usart_read_wait+0x74>
		}
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
		else if (error_code & SERCOM_USART_STATUS_COLL) {
    188a:	069b      	lsls	r3, r3, #26
    188c:	d505      	bpl.n	189a <usart_read_wait+0x6e>
			/* Clear flag by writing 1 to it
			 *  return with an error code */
			usart_hw->STATUS.reg |= SERCOM_USART_STATUS_COLL;
    188e:	8b62      	ldrh	r2, [r4, #26]
    1890:	2320      	movs	r3, #32
    1892:	4313      	orrs	r3, r2
    1894:	8363      	strh	r3, [r4, #26]

			return STATUS_ERR_PACKET_COLLISION;
    1896:	2341      	movs	r3, #65	; 0x41
    1898:	e002      	b.n	18a0 <usart_read_wait+0x74>
		}
#endif
	}

	/* Read data from USART module */
	*rx_data = usart_hw->DATA.reg;
    189a:	8d23      	ldrh	r3, [r4, #40]	; 0x28
    189c:	800b      	strh	r3, [r1, #0]

	return STATUS_OK;
    189e:	2300      	movs	r3, #0
}
    18a0:	1c18      	adds	r0, r3, #0
    18a2:	bd10      	pop	{r4, pc}

000018a4 <usart_read_buffer_wait>:
 */
enum status_code usart_read_buffer_wait(
		struct usart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
    18a4:	b5f0      	push	{r4, r5, r6, r7, lr}
    18a6:	4657      	mov	r7, sl
    18a8:	464e      	mov	r6, r9
    18aa:	b4c0      	push	{r6, r7}
    18ac:	b083      	sub	sp, #12
	Assert(module);
	Assert(module->hw);

	/* Check if the buffer length is valid */
	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
    18ae:	2317      	movs	r3, #23
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Check if the buffer length is valid */
	if (length == 0) {
    18b0:	2a00      	cmp	r2, #0
    18b2:	d03c      	beq.n	192e <usart_read_buffer_wait+0x8a>
		return STATUS_ERR_INVALID_ARG;
	}

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
    18b4:	7984      	ldrb	r4, [r0, #6]
		return STATUS_ERR_DENIED;
    18b6:	3305      	adds	r3, #5
	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
	}

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
    18b8:	2c00      	cmp	r4, #0
    18ba:	d038      	beq.n	192e <usart_read_buffer_wait+0x8a>
    18bc:	468a      	mov	sl, r1
    18be:	4681      	mov	r9, r0
		return STATUS_ERR_DENIED;
	}

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    18c0:	6805      	ldr	r5, [r0, #0]
    18c2:	1c17      	adds	r7, r2, #0
    18c4:	2600      	movs	r6, #0
	/* Blocks while buffer is being received */
	while (length--) {
		/* Wait for the USART to have new data and abort operation if it
		 * doesn't get ready within the timeout*/
		for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
			if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_RXC) {
    18c6:	2404      	movs	r4, #4
    18c8:	e02c      	b.n	1924 <usart_read_buffer_wait+0x80>
    18ca:	7e2a      	ldrb	r2, [r5, #24]
    18cc:	4222      	tst	r2, r4
    18ce:	d104      	bne.n	18da <usart_read_buffer_wait+0x36>
				break;
			} else if (i == USART_TIMEOUT) {
    18d0:	2b01      	cmp	r3, #1
    18d2:	d023      	beq.n	191c <usart_read_buffer_wait+0x78>
    18d4:	3b01      	subs	r3, #1

	/* Blocks while buffer is being received */
	while (length--) {
		/* Wait for the USART to have new data and abort operation if it
		 * doesn't get ready within the timeout*/
		for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
    18d6:	2b00      	cmp	r3, #0
    18d8:	d1f7      	bne.n	18ca <usart_read_buffer_wait+0x26>
				return STATUS_ERR_TIMEOUT;
			}
		}

		enum status_code retval;
		uint16_t received_data = 0;
    18da:	466b      	mov	r3, sp
    18dc:	1d99      	adds	r1, r3, #6
    18de:	2300      	movs	r3, #0
    18e0:	800b      	strh	r3, [r1, #0]

		retval = usart_read_wait(module, &received_data);
    18e2:	4648      	mov	r0, r9
    18e4:	4b15      	ldr	r3, [pc, #84]	; (193c <usart_read_buffer_wait+0x98>)
    18e6:	4798      	blx	r3

		if (retval != STATUS_OK) {
    18e8:	2800      	cmp	r0, #0
    18ea:	d119      	bne.n	1920 <usart_read_buffer_wait+0x7c>
			/* Overflow, abort */
			return retval;
		}

		/* Read value will be at least 8-bits long */
		rx_data[rx_pos++] = received_data;
    18ec:	1c73      	adds	r3, r6, #1
    18ee:	b299      	uxth	r1, r3
    18f0:	466b      	mov	r3, sp
    18f2:	3306      	adds	r3, #6
    18f4:	881b      	ldrh	r3, [r3, #0]
    18f6:	4652      	mov	r2, sl
    18f8:	5593      	strb	r3, [r2, r6]

		/* If 9-bit data, write next received byte to the buffer */
		if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    18fa:	464a      	mov	r2, r9
    18fc:	7952      	ldrb	r2, [r2, #5]
    18fe:	2a01      	cmp	r2, #1
    1900:	d105      	bne.n	190e <usart_read_buffer_wait+0x6a>
			rx_data[rx_pos++] = (received_data >> 8);
    1902:	1cb2      	adds	r2, r6, #2
    1904:	b296      	uxth	r6, r2
    1906:	0a1b      	lsrs	r3, r3, #8
    1908:	4652      	mov	r2, sl
    190a:	5453      	strb	r3, [r2, r1]
    190c:	e000      	b.n	1910 <usart_read_buffer_wait+0x6c>
			/* Overflow, abort */
			return retval;
		}

		/* Read value will be at least 8-bits long */
		rx_data[rx_pos++] = received_data;
    190e:	1c0e      	adds	r6, r1, #0
    1910:	1e7a      	subs	r2, r7, #1
    1912:	b297      	uxth	r7, r2
	SercomUsart *const usart_hw = &(module->hw->USART);

	uint16_t rx_pos = 0;

	/* Blocks while buffer is being received */
	while (length--) {
    1914:	2f00      	cmp	r7, #0
    1916:	d105      	bne.n	1924 <usart_read_buffer_wait+0x80>
		if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
			rx_data[rx_pos++] = (received_data >> 8);
		}
	}

	return STATUS_OK;
    1918:	2300      	movs	r3, #0
    191a:	e008      	b.n	192e <usart_read_buffer_wait+0x8a>
		 * doesn't get ready within the timeout*/
		for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
			if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_RXC) {
				break;
			} else if (i == USART_TIMEOUT) {
				return STATUS_ERR_TIMEOUT;
    191c:	2312      	movs	r3, #18
    191e:	e006      	b.n	192e <usart_read_buffer_wait+0x8a>
		}

		enum status_code retval;
		uint16_t received_data = 0;

		retval = usart_read_wait(module, &received_data);
    1920:	1c03      	adds	r3, r0, #0
    1922:	e004      	b.n	192e <usart_read_buffer_wait+0x8a>
	/* Blocks while buffer is being received */
	while (length--) {
		/* Wait for the USART to have new data and abort operation if it
		 * doesn't get ready within the timeout*/
		for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
			if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_RXC) {
    1924:	7e2b      	ldrb	r3, [r5, #24]
    1926:	4223      	tst	r3, r4
    1928:	d1d7      	bne.n	18da <usart_read_buffer_wait+0x36>
    192a:	4b05      	ldr	r3, [pc, #20]	; (1940 <usart_read_buffer_wait+0x9c>)
    192c:	e7cd      	b.n	18ca <usart_read_buffer_wait+0x26>
			rx_data[rx_pos++] = (received_data >> 8);
		}
	}

	return STATUS_OK;
}
    192e:	1c18      	adds	r0, r3, #0
    1930:	b003      	add	sp, #12
    1932:	bc0c      	pop	{r2, r3}
    1934:	4691      	mov	r9, r2
    1936:	469a      	mov	sl, r3
    1938:	bdf0      	pop	{r4, r5, r6, r7, pc}
    193a:	46c0      	nop			; (mov r8, r8)
    193c:	0000182d 	.word	0x0000182d
    1940:	0000ffff 	.word	0x0000ffff

00001944 <_usart_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _usart_interrupt_handler(
		uint8_t instance)
{
    1944:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint16_t callback_status;
	uint8_t error_code;


	/* Get device instance from the look-up table */
	struct usart_module *module
    1946:	0080      	lsls	r0, r0, #2
    1948:	4b65      	ldr	r3, [pc, #404]	; (1ae0 <_usart_interrupt_handler+0x19c>)
    194a:	58c5      	ldr	r5, [r0, r3]
		= (struct usart_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomUsart *const usart_hw
		= &(module->hw->USART);
    194c:	682c      	ldr	r4, [r5, #0]
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    194e:	69e3      	ldr	r3, [r4, #28]
		const struct usart_module *const module)
{
	/* Sanity check. */
	Assert(module);

	while (usart_is_syncing(module)) {
    1950:	2b00      	cmp	r3, #0
    1952:	d1fc      	bne.n	194e <_usart_interrupt_handler+0xa>

	/* Wait for the synchronization to complete */
	_usart_wait_for_sync(module);

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
    1954:	7e23      	ldrb	r3, [r4, #24]
	interrupt_status &= usart_hw->INTENSET.reg;
    1956:	7da6      	ldrb	r6, [r4, #22]
    1958:	401e      	ands	r6, r3
	callback_status = module->callback_reg_mask &
			module->callback_enable_mask;
    195a:	2331      	movs	r3, #49	; 0x31
	_usart_wait_for_sync(module);

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
	interrupt_status &= usart_hw->INTENSET.reg;
	callback_status = module->callback_reg_mask &
    195c:	5ceb      	ldrb	r3, [r5, r3]
    195e:	2230      	movs	r2, #48	; 0x30
    1960:	5caf      	ldrb	r7, [r5, r2]
    1962:	401f      	ands	r7, r3
			module->callback_enable_mask;

	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
    1964:	07f3      	lsls	r3, r6, #31
    1966:	d522      	bpl.n	19ae <_usart_interrupt_handler+0x6a>
		if (module->remaining_tx_buffer_length) {
    1968:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
    196a:	b29b      	uxth	r3, r3
    196c:	2b00      	cmp	r3, #0
    196e:	d01c      	beq.n	19aa <_usart_interrupt_handler+0x66>
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    1970:	6aaa      	ldr	r2, [r5, #40]	; 0x28
    1972:	7813      	ldrb	r3, [r2, #0]
    1974:	b2db      	uxtb	r3, r3
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;
    1976:	1c51      	adds	r1, r2, #1
    1978:	62a9      	str	r1, [r5, #40]	; 0x28

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    197a:	7969      	ldrb	r1, [r5, #5]
    197c:	2901      	cmp	r1, #1
    197e:	d001      	beq.n	1984 <_usart_interrupt_handler+0x40>
	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
		if (module->remaining_tx_buffer_length) {
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    1980:	b29b      	uxth	r3, r3
    1982:	e004      	b.n	198e <_usart_interrupt_handler+0x4a>
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
    1984:	7851      	ldrb	r1, [r2, #1]
    1986:	0209      	lsls	r1, r1, #8
    1988:	430b      	orrs	r3, r1
				/* Increment 8-bit pointer */
				(module->tx_buffer_ptr)++;
    198a:	3202      	adds	r2, #2
    198c:	62aa      	str	r2, [r5, #40]	; 0x28
			}
			/* Write the data to send */
			usart_hw->DATA.reg = (data_to_send & SERCOM_USART_DATA_MASK);
    198e:	05db      	lsls	r3, r3, #23
    1990:	0ddb      	lsrs	r3, r3, #23
    1992:	8523      	strh	r3, [r4, #40]	; 0x28

			if (--(module->remaining_tx_buffer_length) == 0) {
    1994:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
    1996:	3b01      	subs	r3, #1
    1998:	b29b      	uxth	r3, r3
    199a:	85eb      	strh	r3, [r5, #46]	; 0x2e
    199c:	2b00      	cmp	r3, #0
    199e:	d106      	bne.n	19ae <_usart_interrupt_handler+0x6a>
				/* Disable the Data Register Empty Interrupt */
				usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    19a0:	3301      	adds	r3, #1
    19a2:	7523      	strb	r3, [r4, #20]
				/* Enable Transmission Complete interrupt */
				usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_TXC;
    19a4:	3301      	adds	r3, #1
    19a6:	75a3      	strb	r3, [r4, #22]
    19a8:	e001      	b.n	19ae <_usart_interrupt_handler+0x6a>

			}
		} else {
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    19aa:	2301      	movs	r3, #1
    19ac:	7523      	strb	r3, [r4, #20]

	/* Check if the Transmission Complete interrupt has occurred and
	 * that the transmit buffer is empty */
	}

	if (interrupt_status & SERCOM_USART_INTFLAG_TXC) {
    19ae:	07b3      	lsls	r3, r6, #30
    19b0:	d509      	bpl.n	19c6 <_usart_interrupt_handler+0x82>

		/* Disable TX Complete Interrupt, and set STATUS_OK */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_TXC;
    19b2:	2302      	movs	r3, #2
    19b4:	7523      	strb	r3, [r4, #20]
		module->tx_status = STATUS_OK;
    19b6:	2200      	movs	r2, #0
    19b8:	3331      	adds	r3, #49	; 0x31
    19ba:	54ea      	strb	r2, [r5, r3]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BUFFER_TRANSMITTED)) {
    19bc:	07fb      	lsls	r3, r7, #31
    19be:	d502      	bpl.n	19c6 <_usart_interrupt_handler+0x82>
			(*(module->callback[USART_CALLBACK_BUFFER_TRANSMITTED]))(module);
    19c0:	1c28      	adds	r0, r5, #0
    19c2:	68eb      	ldr	r3, [r5, #12]
    19c4:	4798      	blx	r3

	/* Check if the Receive Complete interrupt has occurred, and that
	 * there's more data to receive */
	}

	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {
    19c6:	0773      	lsls	r3, r6, #29
    19c8:	d56a      	bpl.n	1aa0 <_usart_interrupt_handler+0x15c>

		if (module->remaining_rx_buffer_length) {
    19ca:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
    19cc:	b29b      	uxth	r3, r3
    19ce:	2b00      	cmp	r3, #0
    19d0:	d064      	beq.n	1a9c <_usart_interrupt_handler+0x158>
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    19d2:	8b63      	ldrh	r3, [r4, #26]
    19d4:	b2db      	uxtb	r3, r3
#if !SAMD20
			/* CTS status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_CTS) {
    19d6:	071a      	lsls	r2, r3, #28
    19d8:	d402      	bmi.n	19e0 <_usart_interrupt_handler+0x9c>

	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {

		if (module->remaining_rx_buffer_length) {
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    19da:	223f      	movs	r2, #63	; 0x3f
    19dc:	4013      	ands	r3, r2
    19de:	e001      	b.n	19e4 <_usart_interrupt_handler+0xa0>
#if !SAMD20
			/* CTS status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_CTS) {
				error_code &= ~SERCOM_USART_STATUS_CTS;
    19e0:	2237      	movs	r2, #55	; 0x37
    19e2:	4013      	ands	r3, r2
			}
#endif
			/* Check if an error has occurred during the receiving */
			if (error_code) {
    19e4:	2b00      	cmp	r3, #0
    19e6:	d037      	beq.n	1a58 <_usart_interrupt_handler+0x114>
				/* Check which error occurred */
				if (error_code & SERCOM_USART_STATUS_FERR) {
    19e8:	079a      	lsls	r2, r3, #30
    19ea:	d507      	bpl.n	19fc <_usart_interrupt_handler+0xb8>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_FORMAT;
    19ec:	221a      	movs	r2, #26
    19ee:	2332      	movs	r3, #50	; 0x32
    19f0:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg |= SERCOM_USART_STATUS_FERR;
    19f2:	8b62      	ldrh	r2, [r4, #26]
    19f4:	3b30      	subs	r3, #48	; 0x30
    19f6:	4313      	orrs	r3, r2
    19f8:	8363      	strh	r3, [r4, #26]
    19fa:	e027      	b.n	1a4c <_usart_interrupt_handler+0x108>
				} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    19fc:	075a      	lsls	r2, r3, #29
    19fe:	d507      	bpl.n	1a10 <_usart_interrupt_handler+0xcc>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_OVERFLOW;
    1a00:	221e      	movs	r2, #30
    1a02:	2332      	movs	r3, #50	; 0x32
    1a04:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg |= SERCOM_USART_STATUS_BUFOVF;
    1a06:	8b62      	ldrh	r2, [r4, #26]
    1a08:	3b2e      	subs	r3, #46	; 0x2e
    1a0a:	4313      	orrs	r3, r2
    1a0c:	8363      	strh	r3, [r4, #26]
    1a0e:	e01d      	b.n	1a4c <_usart_interrupt_handler+0x108>
				} else if (error_code & SERCOM_USART_STATUS_PERR) {
    1a10:	07da      	lsls	r2, r3, #31
    1a12:	d507      	bpl.n	1a24 <_usart_interrupt_handler+0xe0>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_DATA;
    1a14:	2213      	movs	r2, #19
    1a16:	2332      	movs	r3, #50	; 0x32
    1a18:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg |= SERCOM_USART_STATUS_PERR;
    1a1a:	8b62      	ldrh	r2, [r4, #26]
    1a1c:	3b31      	subs	r3, #49	; 0x31
    1a1e:	4313      	orrs	r3, r2
    1a20:	8363      	strh	r3, [r4, #26]
    1a22:	e013      	b.n	1a4c <_usart_interrupt_handler+0x108>
				}
#ifdef FEATURE_USART_LIN_SLAVE
				else if (error_code & SERCOM_USART_STATUS_ISF) {
    1a24:	06da      	lsls	r2, r3, #27
    1a26:	d507      	bpl.n	1a38 <_usart_interrupt_handler+0xf4>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_PROTOCOL;
    1a28:	2242      	movs	r2, #66	; 0x42
    1a2a:	2332      	movs	r3, #50	; 0x32
    1a2c:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg |= SERCOM_USART_STATUS_ISF;
    1a2e:	8b62      	ldrh	r2, [r4, #26]
    1a30:	3b22      	subs	r3, #34	; 0x22
    1a32:	4313      	orrs	r3, r2
    1a34:	8363      	strh	r3, [r4, #26]
    1a36:	e009      	b.n	1a4c <_usart_interrupt_handler+0x108>
				}
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
				else if (error_code & SERCOM_USART_STATUS_COLL) {
    1a38:	2220      	movs	r2, #32
    1a3a:	421a      	tst	r2, r3
    1a3c:	d006      	beq.n	1a4c <_usart_interrupt_handler+0x108>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_PACKET_COLLISION;
    1a3e:	3221      	adds	r2, #33	; 0x21
    1a40:	2332      	movs	r3, #50	; 0x32
    1a42:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg |= SERCOM_USART_STATUS_COLL;
    1a44:	8b62      	ldrh	r2, [r4, #26]
    1a46:	3b12      	subs	r3, #18
    1a48:	4313      	orrs	r3, r2
    1a4a:	8363      	strh	r3, [r4, #26]
				}
#endif

				/* Run callback if registered and enabled */
				if (callback_status
    1a4c:	077b      	lsls	r3, r7, #29
    1a4e:	d527      	bpl.n	1aa0 <_usart_interrupt_handler+0x15c>
						& (1 << USART_CALLBACK_ERROR)) {
					(*(module->callback[USART_CALLBACK_ERROR]))(module);
    1a50:	1c28      	adds	r0, r5, #0
    1a52:	696b      	ldr	r3, [r5, #20]
    1a54:	4798      	blx	r3
    1a56:	e023      	b.n	1aa0 <_usart_interrupt_handler+0x15c>

			} else {

				/* Read current packet from DATA register,
				 * increment buffer pointer and decrement buffer length */
				uint16_t received_data = (usart_hw->DATA.reg & SERCOM_USART_DATA_MASK);
    1a58:	8d23      	ldrh	r3, [r4, #40]	; 0x28
    1a5a:	05db      	lsls	r3, r3, #23
    1a5c:	0ddb      	lsrs	r3, r3, #23

				/* Read value will be at least 8-bits long */
				*(module->rx_buffer_ptr) = received_data;
    1a5e:	b2da      	uxtb	r2, r3
    1a60:	6a69      	ldr	r1, [r5, #36]	; 0x24
    1a62:	700a      	strb	r2, [r1, #0]
				/* Increment 8-bit pointer */
				module->rx_buffer_ptr += 1;
    1a64:	6a6a      	ldr	r2, [r5, #36]	; 0x24
    1a66:	1c51      	adds	r1, r2, #1
    1a68:	6269      	str	r1, [r5, #36]	; 0x24

				if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    1a6a:	7969      	ldrb	r1, [r5, #5]
    1a6c:	2901      	cmp	r1, #1
    1a6e:	d104      	bne.n	1a7a <_usart_interrupt_handler+0x136>
					/* 9-bit data, write next received byte to the buffer */
					*(module->rx_buffer_ptr) = (received_data >> 8);
    1a70:	0a1b      	lsrs	r3, r3, #8
    1a72:	7053      	strb	r3, [r2, #1]
					/* Increment 8-bit pointer */
					module->rx_buffer_ptr += 1;
    1a74:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    1a76:	3301      	adds	r3, #1
    1a78:	626b      	str	r3, [r5, #36]	; 0x24
				}

				/* Check if the last character have been received */
				if(--(module->remaining_rx_buffer_length) == 0) {
    1a7a:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
    1a7c:	3b01      	subs	r3, #1
    1a7e:	b29b      	uxth	r3, r3
    1a80:	85ab      	strh	r3, [r5, #44]	; 0x2c
    1a82:	2b00      	cmp	r3, #0
    1a84:	d10c      	bne.n	1aa0 <_usart_interrupt_handler+0x15c>
					/* Disable RX Complete Interrupt,
					 * and set STATUS_OK */
					usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    1a86:	3304      	adds	r3, #4
    1a88:	7523      	strb	r3, [r4, #20]
					module->rx_status = STATUS_OK;
    1a8a:	2200      	movs	r2, #0
    1a8c:	332e      	adds	r3, #46	; 0x2e
    1a8e:	54ea      	strb	r2, [r5, r3]

					/* Run callback if registered and enabled */
					if (callback_status
    1a90:	07bb      	lsls	r3, r7, #30
    1a92:	d505      	bpl.n	1aa0 <_usart_interrupt_handler+0x15c>
							& (1 << USART_CALLBACK_BUFFER_RECEIVED)) {
						(*(module->callback[USART_CALLBACK_BUFFER_RECEIVED]))(module);
    1a94:	1c28      	adds	r0, r5, #0
    1a96:	692b      	ldr	r3, [r5, #16]
    1a98:	4798      	blx	r3
    1a9a:	e001      	b.n	1aa0 <_usart_interrupt_handler+0x15c>
					}
				}
			}
		} else {
			/* This should not happen. Disable Receive Complete interrupt. */
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    1a9c:	2304      	movs	r3, #4
    1a9e:	7523      	strb	r3, [r4, #20]
		}
	}

#ifdef FEATURE_USART_HARDWARE_FLOW_CONTROL
	if (interrupt_status & SERCOM_USART_INTFLAG_CTSIC) {
    1aa0:	06f3      	lsls	r3, r6, #27
    1aa2:	d507      	bpl.n	1ab4 <_usart_interrupt_handler+0x170>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_CTSIC;
    1aa4:	2310      	movs	r3, #16
    1aa6:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_CTSIC;
    1aa8:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_CTS_INPUT_CHANGE)) {
    1aaa:	06fb      	lsls	r3, r7, #27
    1aac:	d502      	bpl.n	1ab4 <_usart_interrupt_handler+0x170>
			(*(module->callback[USART_CALLBACK_CTS_INPUT_CHANGE]))(module);
    1aae:	1c28      	adds	r0, r5, #0
    1ab0:	69eb      	ldr	r3, [r5, #28]
    1ab2:	4798      	blx	r3
		}
	}
#endif

#ifdef FEATURE_USART_LIN_SLAVE
	if (interrupt_status & SERCOM_USART_INTFLAG_RXBRK) {
    1ab4:	06b3      	lsls	r3, r6, #26
    1ab6:	d507      	bpl.n	1ac8 <_usart_interrupt_handler+0x184>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXBRK;
    1ab8:	2320      	movs	r3, #32
    1aba:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXBRK;
    1abc:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BREAK_RECEIVED)) {
    1abe:	073b      	lsls	r3, r7, #28
    1ac0:	d502      	bpl.n	1ac8 <_usart_interrupt_handler+0x184>
			(*(module->callback[USART_CALLBACK_BREAK_RECEIVED]))(module);
    1ac2:	1c28      	adds	r0, r5, #0
    1ac4:	69ab      	ldr	r3, [r5, #24]
    1ac6:	4798      	blx	r3
		}
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	if (interrupt_status & SERCOM_USART_INTFLAG_RXS) {
    1ac8:	0733      	lsls	r3, r6, #28
    1aca:	d507      	bpl.n	1adc <_usart_interrupt_handler+0x198>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXS;
    1acc:	2308      	movs	r3, #8
    1ace:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXS;
    1ad0:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_START_RECEIVED)) {
    1ad2:	06bb      	lsls	r3, r7, #26
    1ad4:	d502      	bpl.n	1adc <_usart_interrupt_handler+0x198>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
    1ad6:	6a2b      	ldr	r3, [r5, #32]
    1ad8:	1c28      	adds	r0, r5, #0
    1ada:	4798      	blx	r3
		}
	}
#endif
}
    1adc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1ade:	46c0      	nop			; (mov r8, r8)
    1ae0:	20002ad0 	.word	0x20002ad0

00001ae4 <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
    1ae4:	b508      	push	{r3, lr}
	switch (clock_source) {
    1ae6:	2808      	cmp	r0, #8
    1ae8:	d803      	bhi.n	1af2 <system_clock_source_get_hz+0xe>
    1aea:	0080      	lsls	r0, r0, #2
    1aec:	4b1b      	ldr	r3, [pc, #108]	; (1b5c <system_clock_source_get_hz+0x78>)
    1aee:	581b      	ldr	r3, [r3, r0]
    1af0:	469f      	mov	pc, r3

		return _system_clock_inst.dpll.frequency;
#endif

	default:
		return 0;
    1af2:	2000      	movs	r0, #0
    1af4:	e031      	b.n	1b5a <system_clock_source_get_hz+0x76>
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
	case SYSTEM_CLOCK_SOURCE_XOSC:
		return _system_clock_inst.xosc.frequency;
    1af6:	4b1a      	ldr	r3, [pc, #104]	; (1b60 <system_clock_source_get_hz+0x7c>)
    1af8:	6918      	ldr	r0, [r3, #16]
    1afa:	e02e      	b.n	1b5a <system_clock_source_get_hz+0x76>

	case SYSTEM_CLOCK_SOURCE_OSC8M:
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
    1afc:	4b19      	ldr	r3, [pc, #100]	; (1b64 <system_clock_source_get_hz+0x80>)
    1afe:	6a18      	ldr	r0, [r3, #32]
    1b00:	0580      	lsls	r0, r0, #22
    1b02:	0f80      	lsrs	r0, r0, #30
    1b04:	4b18      	ldr	r3, [pc, #96]	; (1b68 <system_clock_source_get_hz+0x84>)
    1b06:	40c3      	lsrs	r3, r0
    1b08:	1c18      	adds	r0, r3, #0
    1b0a:	e026      	b.n	1b5a <system_clock_source_get_hz+0x76>

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		return 32768UL;

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		return _system_clock_inst.xosc32k.frequency;
    1b0c:	4b14      	ldr	r3, [pc, #80]	; (1b60 <system_clock_source_get_hz+0x7c>)
    1b0e:	6958      	ldr	r0, [r3, #20]
    1b10:	e023      	b.n	1b5a <system_clock_source_get_hz+0x76>

	case SYSTEM_CLOCK_SOURCE_DFLL:

		/* Check if the DFLL has been configured */
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    1b12:	4b13      	ldr	r3, [pc, #76]	; (1b60 <system_clock_source_get_hz+0x7c>)
    1b14:	681b      	ldr	r3, [r3, #0]
    1b16:	2002      	movs	r0, #2
    1b18:	4018      	ands	r0, r3
    1b1a:	d01e      	beq.n	1b5a <system_clock_source_get_hz+0x76>
 * \internal
 * \brief Wait for sync to the DFLL control registers
 */
static inline void _system_dfll_wait_for_sync(void)
{
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    1b1c:	4911      	ldr	r1, [pc, #68]	; (1b64 <system_clock_source_get_hz+0x80>)
    1b1e:	2210      	movs	r2, #16
    1b20:	68cb      	ldr	r3, [r1, #12]
    1b22:	421a      	tst	r2, r3
    1b24:	d0fc      	beq.n	1b20 <system_clock_source_get_hz+0x3c>

		/* Make sure that the DFLL module is ready */
		_system_dfll_wait_for_sync();

		/* Check if operating in closed loop mode */
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
    1b26:	4b0e      	ldr	r3, [pc, #56]	; (1b60 <system_clock_source_get_hz+0x7c>)
    1b28:	681b      	ldr	r3, [r3, #0]
    1b2a:	075b      	lsls	r3, r3, #29
    1b2c:	d514      	bpl.n	1b58 <system_clock_source_get_hz+0x74>
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    1b2e:	2000      	movs	r0, #0
    1b30:	4b0e      	ldr	r3, [pc, #56]	; (1b6c <system_clock_source_get_hz+0x88>)
    1b32:	4798      	blx	r3
					(_system_clock_inst.dfll.mul & 0xffff);
    1b34:	4b0a      	ldr	r3, [pc, #40]	; (1b60 <system_clock_source_get_hz+0x7c>)
    1b36:	689b      	ldr	r3, [r3, #8]
    1b38:	041b      	lsls	r3, r3, #16
    1b3a:	0c1b      	lsrs	r3, r3, #16
		/* Make sure that the DFLL module is ready */
		_system_dfll_wait_for_sync();

		/* Check if operating in closed loop mode */
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    1b3c:	4358      	muls	r0, r3
    1b3e:	e00c      	b.n	1b5a <system_clock_source_get_hz+0x76>

		return 48000000UL;

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    1b40:	2350      	movs	r3, #80	; 0x50
    1b42:	4a08      	ldr	r2, [pc, #32]	; (1b64 <system_clock_source_get_hz+0x80>)
    1b44:	5cd3      	ldrb	r3, [r2, r3]
			return 0;
    1b46:	2000      	movs	r0, #0

		return 48000000UL;

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    1b48:	075b      	lsls	r3, r3, #29
    1b4a:	d506      	bpl.n	1b5a <system_clock_source_get_hz+0x76>
			return 0;
		}

		return _system_clock_inst.dpll.frequency;
    1b4c:	4b04      	ldr	r3, [pc, #16]	; (1b60 <system_clock_source_get_hz+0x7c>)
    1b4e:	68d8      	ldr	r0, [r3, #12]
    1b50:	e003      	b.n	1b5a <system_clock_source_get_hz+0x76>

	case SYSTEM_CLOCK_SOURCE_OSC8M:
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		return 32768UL;
    1b52:	2080      	movs	r0, #128	; 0x80
    1b54:	0200      	lsls	r0, r0, #8
    1b56:	e000      	b.n	1b5a <system_clock_source_get_hz+0x76>
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
					(_system_clock_inst.dfll.mul & 0xffff);
		}

		return 48000000UL;
    1b58:	4805      	ldr	r0, [pc, #20]	; (1b70 <system_clock_source_get_hz+0x8c>)
#endif

	default:
		return 0;
	}
}
    1b5a:	bd08      	pop	{r3, pc}
    1b5c:	00011df4 	.word	0x00011df4
    1b60:	20000280 	.word	0x20000280
    1b64:	40000800 	.word	0x40000800
    1b68:	007a1200 	.word	0x007a1200
    1b6c:	00002199 	.word	0x00002199
    1b70:	02dc6c00 	.word	0x02dc6c00

00001b74 <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
    1b74:	b570      	push	{r4, r5, r6, lr}
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
    1b76:	4c0c      	ldr	r4, [pc, #48]	; (1ba8 <system_clock_source_osc8m_set_config+0x34>)
    1b78:	6a23      	ldr	r3, [r4, #32]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
    1b7a:	7801      	ldrb	r1, [r0, #0]
	temp.bit.ONDEMAND = config->on_demand;
    1b7c:	7885      	ldrb	r5, [r0, #2]
	temp.bit.RUNSTDBY = config->run_in_standby;

	SYSCTRL->OSC8M = temp;
    1b7e:	7842      	ldrb	r2, [r0, #1]
    1b80:	2001      	movs	r0, #1
    1b82:	4002      	ands	r2, r0
    1b84:	0192      	lsls	r2, r2, #6
    1b86:	2640      	movs	r6, #64	; 0x40
    1b88:	43b3      	bics	r3, r6
    1b8a:	4313      	orrs	r3, r2
    1b8c:	1c02      	adds	r2, r0, #0
    1b8e:	402a      	ands	r2, r5
    1b90:	01d2      	lsls	r2, r2, #7
    1b92:	307f      	adds	r0, #127	; 0x7f
    1b94:	4383      	bics	r3, r0
    1b96:	4313      	orrs	r3, r2
    1b98:	2203      	movs	r2, #3
    1b9a:	400a      	ands	r2, r1
    1b9c:	0212      	lsls	r2, r2, #8
    1b9e:	4903      	ldr	r1, [pc, #12]	; (1bac <system_clock_source_osc8m_set_config+0x38>)
    1ba0:	400b      	ands	r3, r1
    1ba2:	4313      	orrs	r3, r2
    1ba4:	6223      	str	r3, [r4, #32]
}
    1ba6:	bd70      	pop	{r4, r5, r6, pc}
    1ba8:	40000800 	.word	0x40000800
    1bac:	fffffcff 	.word	0xfffffcff

00001bb0 <system_clock_source_xosc32k_set_config>:
 *
 * \param[in] config  XOSC32K configuration structure containing the new config
 */
void system_clock_source_xosc32k_set_config(
		struct system_clock_source_xosc32k_config *const config)
{
    1bb0:	b5f0      	push	{r4, r5, r6, r7, lr}
    1bb2:	465f      	mov	r7, fp
    1bb4:	4656      	mov	r6, sl
    1bb6:	464d      	mov	r5, r9
    1bb8:	4644      	mov	r4, r8
    1bba:	b4f0      	push	{r4, r5, r6, r7}
    1bbc:	b083      	sub	sp, #12
	SYSCTRL_XOSC32K_Type temp = SYSCTRL->XOSC32K;
    1bbe:	4e2e      	ldr	r6, [pc, #184]	; (1c78 <system_clock_source_xosc32k_set_config+0xc8>)
    1bc0:	8ab3      	ldrh	r3, [r6, #20]
    1bc2:	469c      	mov	ip, r3

	temp.bit.STARTUP = config->startup_time;
    1bc4:	7845      	ldrb	r5, [r0, #1]

	if (config->external_clock == SYSTEM_CLOCK_EXTERNAL_CRYSTAL) {
    1bc6:	7803      	ldrb	r3, [r0, #0]
    1bc8:	425a      	negs	r2, r3
    1bca:	415a      	adcs	r2, r3
    1bcc:	4691      	mov	r9, r2
		temp.bit.XTALEN = 1;
	} else {
		temp.bit.XTALEN = 0;
	}

	temp.bit.AAMPEN = config->auto_gain_control;
    1bce:	7883      	ldrb	r3, [r0, #2]
    1bd0:	469b      	mov	fp, r3
	temp.bit.EN1K = config->enable_1khz_output;
    1bd2:	78c3      	ldrb	r3, [r0, #3]
	temp.bit.EN32K = config->enable_32khz_output;
    1bd4:	7902      	ldrb	r2, [r0, #4]
    1bd6:	4690      	mov	r8, r2

	temp.bit.ONDEMAND = config->on_demand;
    1bd8:	7b47      	ldrb	r7, [r0, #13]
	temp.bit.RUNSTDBY = config->run_in_standby;
    1bda:	7b02      	ldrb	r2, [r0, #12]
    1bdc:	9201      	str	r2, [sp, #4]
	temp.bit.WRTLOCK  = config->write_once;
    1bde:	7b84      	ldrb	r4, [r0, #14]

	/* Cache the new frequency in case the user needs to check the current
	 * operating frequency later */
	_system_clock_inst.xosc32k.frequency = config->frequency;
    1be0:	6882      	ldr	r2, [r0, #8]
    1be2:	4826      	ldr	r0, [pc, #152]	; (1c7c <system_clock_source_xosc32k_set_config+0xcc>)
    1be4:	6142      	str	r2, [r0, #20]

	SYSCTRL->XOSC32K = temp;
    1be6:	2001      	movs	r0, #1
    1be8:	464a      	mov	r2, r9
    1bea:	0092      	lsls	r2, r2, #2
    1bec:	4691      	mov	r9, r2
    1bee:	2204      	movs	r2, #4
    1bf0:	4692      	mov	sl, r2
    1bf2:	4662      	mov	r2, ip
    1bf4:	4651      	mov	r1, sl
    1bf6:	438a      	bics	r2, r1
    1bf8:	4694      	mov	ip, r2
    1bfa:	464a      	mov	r2, r9
    1bfc:	4661      	mov	r1, ip
    1bfe:	430a      	orrs	r2, r1
    1c00:	4694      	mov	ip, r2
    1c02:	4642      	mov	r2, r8
    1c04:	4002      	ands	r2, r0
    1c06:	00d2      	lsls	r2, r2, #3
    1c08:	4690      	mov	r8, r2
    1c0a:	2208      	movs	r2, #8
    1c0c:	4691      	mov	r9, r2
    1c0e:	4662      	mov	r2, ip
    1c10:	4649      	mov	r1, r9
    1c12:	438a      	bics	r2, r1
    1c14:	4694      	mov	ip, r2
    1c16:	4642      	mov	r2, r8
    1c18:	4661      	mov	r1, ip
    1c1a:	430a      	orrs	r2, r1
    1c1c:	4694      	mov	ip, r2
    1c1e:	4003      	ands	r3, r0
    1c20:	011b      	lsls	r3, r3, #4
    1c22:	2210      	movs	r2, #16
    1c24:	4690      	mov	r8, r2
    1c26:	4662      	mov	r2, ip
    1c28:	4641      	mov	r1, r8
    1c2a:	438a      	bics	r2, r1
    1c2c:	4313      	orrs	r3, r2
    1c2e:	4659      	mov	r1, fp
    1c30:	4001      	ands	r1, r0
    1c32:	0149      	lsls	r1, r1, #5
    1c34:	2220      	movs	r2, #32
    1c36:	4393      	bics	r3, r2
    1c38:	430b      	orrs	r3, r1
    1c3a:	9a01      	ldr	r2, [sp, #4]
    1c3c:	4002      	ands	r2, r0
    1c3e:	0192      	lsls	r2, r2, #6
    1c40:	2140      	movs	r1, #64	; 0x40
    1c42:	438b      	bics	r3, r1
    1c44:	4313      	orrs	r3, r2
    1c46:	4007      	ands	r7, r0
    1c48:	01ff      	lsls	r7, r7, #7
    1c4a:	2280      	movs	r2, #128	; 0x80
    1c4c:	4393      	bics	r3, r2
    1c4e:	433b      	orrs	r3, r7
    1c50:	3a79      	subs	r2, #121	; 0x79
    1c52:	4015      	ands	r5, r2
    1c54:	022d      	lsls	r5, r5, #8
    1c56:	4f0a      	ldr	r7, [pc, #40]	; (1c80 <system_clock_source_xosc32k_set_config+0xd0>)
    1c58:	403b      	ands	r3, r7
    1c5a:	432b      	orrs	r3, r5
    1c5c:	4004      	ands	r4, r0
    1c5e:	0320      	lsls	r0, r4, #12
    1c60:	4c08      	ldr	r4, [pc, #32]	; (1c84 <system_clock_source_xosc32k_set_config+0xd4>)
    1c62:	401c      	ands	r4, r3
    1c64:	4304      	orrs	r4, r0
    1c66:	82b4      	strh	r4, [r6, #20]
}
    1c68:	b003      	add	sp, #12
    1c6a:	bc3c      	pop	{r2, r3, r4, r5}
    1c6c:	4690      	mov	r8, r2
    1c6e:	4699      	mov	r9, r3
    1c70:	46a2      	mov	sl, r4
    1c72:	46ab      	mov	fp, r5
    1c74:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1c76:	46c0      	nop			; (mov r8, r8)
    1c78:	40000800 	.word	0x40000800
    1c7c:	20000280 	.word	0x20000280
    1c80:	fffff8ff 	.word	0xfffff8ff
    1c84:	ffffefff 	.word	0xffffefff

00001c88 <system_clock_source_dfll_set_config>:
 *
 * \param[in] config  DFLL configuration structure containing the new config
 */
void system_clock_source_dfll_set_config(
		struct system_clock_source_dfll_config *const config)
{
    1c88:	b510      	push	{r4, lr}
	_system_clock_inst.dfll.val =
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
    1c8a:	7a03      	ldrb	r3, [r0, #8]
    1c8c:	069b      	lsls	r3, r3, #26
    1c8e:	0c1a      	lsrs	r2, r3, #16
			SYSCTRL_DFLLVAL_FINE(config->fine_value);
    1c90:	8943      	ldrh	r3, [r0, #10]
    1c92:	059b      	lsls	r3, r3, #22
    1c94:	0d9b      	lsrs	r3, r3, #22
 */
void system_clock_source_dfll_set_config(
		struct system_clock_source_dfll_config *const config)
{
	_system_clock_inst.dfll.val =
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
    1c96:	4313      	orrs	r3, r2
 * \param[in] config  DFLL configuration structure containing the new config
 */
void system_clock_source_dfll_set_config(
		struct system_clock_source_dfll_config *const config)
{
	_system_clock_inst.dfll.val =
    1c98:	4c15      	ldr	r4, [pc, #84]	; (1cf0 <system_clock_source_dfll_set_config+0x68>)
    1c9a:	6063      	str	r3, [r4, #4]
    1c9c:	8881      	ldrh	r1, [r0, #4]
    1c9e:	8843      	ldrh	r3, [r0, #2]
    1ca0:	4319      	orrs	r1, r3
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
			SYSCTRL_DFLLVAL_FINE(config->fine_value);

	_system_clock_inst.dfll.control =
			(uint32_t)config->wakeup_lock     |
    1ca2:	79c3      	ldrb	r3, [r0, #7]
    1ca4:	7982      	ldrb	r2, [r0, #6]
    1ca6:	4313      	orrs	r3, r2
			(uint32_t)config->stable_tracking |
			(uint32_t)config->quick_lock      |
    1ca8:	430b      	orrs	r3, r1
			(uint32_t)config->chill_cycle     |
			((uint32_t)config->on_demand << SYSCTRL_DFLLCTRL_ONDEMAND_Pos);
    1caa:	7842      	ldrb	r2, [r0, #1]
    1cac:	01d2      	lsls	r2, r2, #7

	_system_clock_inst.dfll.control =
			(uint32_t)config->wakeup_lock     |
			(uint32_t)config->stable_tracking |
			(uint32_t)config->quick_lock      |
			(uint32_t)config->chill_cycle     |
    1cae:	4313      	orrs	r3, r2
{
	_system_clock_inst.dfll.val =
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
			SYSCTRL_DFLLVAL_FINE(config->fine_value);

	_system_clock_inst.dfll.control =
    1cb0:	6023      	str	r3, [r4, #0]
			(uint32_t)config->stable_tracking |
			(uint32_t)config->quick_lock      |
			(uint32_t)config->chill_cycle     |
			((uint32_t)config->on_demand << SYSCTRL_DFLLCTRL_ONDEMAND_Pos);

	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
    1cb2:	7803      	ldrb	r3, [r0, #0]
    1cb4:	2b04      	cmp	r3, #4
    1cb6:	d10f      	bne.n	1cd8 <system_clock_source_dfll_set_config+0x50>

		_system_clock_inst.dfll.mul =
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    1cb8:	7b03      	ldrb	r3, [r0, #12]
    1cba:	069b      	lsls	r3, r3, #26
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
    1cbc:	8a02      	ldrh	r2, [r0, #16]
    1cbe:	4313      	orrs	r3, r2
    1cc0:	1c19      	adds	r1, r3, #0

	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {

		_system_clock_inst.dfll.mul =
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    1cc2:	89c3      	ldrh	r3, [r0, #14]
    1cc4:	041b      	lsls	r3, r3, #16
    1cc6:	4a0b      	ldr	r2, [pc, #44]	; (1cf4 <system_clock_source_dfll_set_config+0x6c>)
    1cc8:	4013      	ands	r3, r2
    1cca:	430b      	orrs	r3, r1
			(uint32_t)config->chill_cycle     |
			((uint32_t)config->on_demand << SYSCTRL_DFLLCTRL_ONDEMAND_Pos);

	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {

		_system_clock_inst.dfll.mul =
    1ccc:	60a3      	str	r3, [r4, #8]
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);

		/* Enable the closed loop mode */
		_system_clock_inst.dfll.control |= config->loop_mode;
    1cce:	6821      	ldr	r1, [r4, #0]
    1cd0:	2304      	movs	r3, #4
    1cd2:	430b      	orrs	r3, r1
    1cd4:	6023      	str	r3, [r4, #0]
    1cd6:	e009      	b.n	1cec <system_clock_source_dfll_set_config+0x64>
	}
	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_USB_RECOVERY) {
    1cd8:	2b20      	cmp	r3, #32
    1cda:	d107      	bne.n	1cec <system_clock_source_dfll_set_config+0x64>

		_system_clock_inst.dfll.mul =
    1cdc:	8a02      	ldrh	r2, [r0, #16]
    1cde:	4b04      	ldr	r3, [pc, #16]	; (1cf0 <system_clock_source_dfll_set_config+0x68>)
    1ce0:	609a      	str	r2, [r3, #8]
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);

		/* Enable the USB recovery mode */
		_system_clock_inst.dfll.control |= config->loop_mode |
    1ce2:	681a      	ldr	r2, [r3, #0]
    1ce4:	2184      	movs	r1, #132	; 0x84
    1ce6:	00c9      	lsls	r1, r1, #3
    1ce8:	430a      	orrs	r2, r1
    1cea:	601a      	str	r2, [r3, #0]
				SYSCTRL_DFLLCTRL_BPLCKC;
	}
}
    1cec:	bd10      	pop	{r4, pc}
    1cee:	46c0      	nop			; (mov r8, r8)
    1cf0:	20000280 	.word	0x20000280
    1cf4:	03ff0000 	.word	0x03ff0000

00001cf8 <system_clock_source_enable>:
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
    1cf8:	2808      	cmp	r0, #8
    1cfa:	d803      	bhi.n	1d04 <system_clock_source_enable+0xc>
    1cfc:	0080      	lsls	r0, r0, #2
    1cfe:	4b22      	ldr	r3, [pc, #136]	; (1d88 <system_clock_source_enable+0x90>)
    1d00:	581b      	ldr	r3, [r3, r0]
    1d02:	469f      	mov	pc, r3
		/* Always enabled */
		return STATUS_OK;

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    1d04:	2017      	movs	r0, #23
    1d06:	e03e      	b.n	1d86 <system_clock_source_enable+0x8e>
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
	case SYSTEM_CLOCK_SOURCE_OSC8M:
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
    1d08:	4a20      	ldr	r2, [pc, #128]	; (1d8c <system_clock_source_enable+0x94>)
    1d0a:	6a11      	ldr	r1, [r2, #32]
    1d0c:	2302      	movs	r3, #2
    1d0e:	430b      	orrs	r3, r1
    1d10:	6213      	str	r3, [r2, #32]
		return STATUS_OK;
    1d12:	2000      	movs	r0, #0
    1d14:	e037      	b.n	1d86 <system_clock_source_enable+0x8e>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
    1d16:	4a1d      	ldr	r2, [pc, #116]	; (1d8c <system_clock_source_enable+0x94>)
    1d18:	6991      	ldr	r1, [r2, #24]
    1d1a:	2302      	movs	r3, #2
    1d1c:	430b      	orrs	r3, r1
    1d1e:	6193      	str	r3, [r2, #24]
	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
    1d20:	2000      	movs	r0, #0
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
		return STATUS_OK;

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
		break;
    1d22:	e030      	b.n	1d86 <system_clock_source_enable+0x8e>

	case SYSTEM_CLOCK_SOURCE_XOSC:
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
    1d24:	4a19      	ldr	r2, [pc, #100]	; (1d8c <system_clock_source_enable+0x94>)
    1d26:	8a11      	ldrh	r1, [r2, #16]
    1d28:	2302      	movs	r3, #2
    1d2a:	430b      	orrs	r3, r1
    1d2c:	8213      	strh	r3, [r2, #16]
	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
    1d2e:	2000      	movs	r0, #0
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
		break;

	case SYSTEM_CLOCK_SOURCE_XOSC:
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
		break;
    1d30:	e029      	b.n	1d86 <system_clock_source_enable+0x8e>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
    1d32:	4a16      	ldr	r2, [pc, #88]	; (1d8c <system_clock_source_enable+0x94>)
    1d34:	8a91      	ldrh	r1, [r2, #20]
    1d36:	2302      	movs	r3, #2
    1d38:	430b      	orrs	r3, r1
    1d3a:	8293      	strh	r3, [r2, #20]
	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
    1d3c:	2000      	movs	r0, #0
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
		break;

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
		break;
    1d3e:	e022      	b.n	1d86 <system_clock_source_enable+0x8e>

	case SYSTEM_CLOCK_SOURCE_DFLL:
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
    1d40:	4b13      	ldr	r3, [pc, #76]	; (1d90 <system_clock_source_enable+0x98>)
    1d42:	6819      	ldr	r1, [r3, #0]
    1d44:	2202      	movs	r2, #2
    1d46:	430a      	orrs	r2, r1
    1d48:	601a      	str	r2, [r3, #0]

static inline void _system_clock_source_dfll_set_config_errata_9905(void)
{

	/* Disable ONDEMAND mode while writing configurations */
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control & ~SYSCTRL_DFLLCTRL_ONDEMAND;
    1d4a:	681a      	ldr	r2, [r3, #0]
    1d4c:	4b11      	ldr	r3, [pc, #68]	; (1d94 <system_clock_source_enable+0x9c>)
    1d4e:	4013      	ands	r3, r2
    1d50:	4a0e      	ldr	r2, [pc, #56]	; (1d8c <system_clock_source_enable+0x94>)
    1d52:	8493      	strh	r3, [r2, #36]	; 0x24
 * \internal
 * \brief Wait for sync to the DFLL control registers
 */
static inline void _system_dfll_wait_for_sync(void)
{
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    1d54:	1c11      	adds	r1, r2, #0
    1d56:	2210      	movs	r2, #16
    1d58:	68cb      	ldr	r3, [r1, #12]
    1d5a:	421a      	tst	r2, r3
    1d5c:	d0fc      	beq.n	1d58 <system_clock_source_enable+0x60>

	/* Disable ONDEMAND mode while writing configurations */
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control & ~SYSCTRL_DFLLCTRL_ONDEMAND;
	_system_dfll_wait_for_sync();

	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
    1d5e:	4a0c      	ldr	r2, [pc, #48]	; (1d90 <system_clock_source_enable+0x98>)
    1d60:	6891      	ldr	r1, [r2, #8]
    1d62:	4b0a      	ldr	r3, [pc, #40]	; (1d8c <system_clock_source_enable+0x94>)
    1d64:	62d9      	str	r1, [r3, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
    1d66:	6851      	ldr	r1, [r2, #4]
    1d68:	6299      	str	r1, [r3, #40]	; 0x28

	/* Write full configuration to DFLL control register */
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
    1d6a:	6812      	ldr	r2, [r2, #0]
    1d6c:	b292      	uxth	r2, r2
    1d6e:	849a      	strh	r2, [r3, #36]	; 0x24
	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
    1d70:	2000      	movs	r0, #0
    1d72:	e008      	b.n	1d86 <system_clock_source_enable+0x8e>
		_system_clock_source_dfll_set_config_errata_9905();
		break;

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
    1d74:	4905      	ldr	r1, [pc, #20]	; (1d8c <system_clock_source_enable+0x94>)
    1d76:	2244      	movs	r2, #68	; 0x44
    1d78:	5c88      	ldrb	r0, [r1, r2]
    1d7a:	2302      	movs	r3, #2
    1d7c:	4303      	orrs	r3, r0
    1d7e:	548b      	strb	r3, [r1, r2]
	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
    1d80:	2000      	movs	r0, #0
		break;

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
		break;
    1d82:	e000      	b.n	1d86 <system_clock_source_enable+0x8e>
#endif

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		/* Always enabled */
		return STATUS_OK;
    1d84:	2000      	movs	r0, #0
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
}
    1d86:	4770      	bx	lr
    1d88:	00011e18 	.word	0x00011e18
    1d8c:	40000800 	.word	0x40000800
    1d90:	20000280 	.word	0x20000280
    1d94:	0000ff7f 	.word	0x0000ff7f

00001d98 <system_clock_init>:
 * This function will apply the settings in conf_clocks.h when run from the user
 * application. All clock sources and GCLK generators are running when this function
 * returns.
 */
void system_clock_init(void)
{
    1d98:	b5f0      	push	{r4, r5, r6, r7, lr}
    1d9a:	4657      	mov	r7, sl
    1d9c:	464e      	mov	r6, r9
    1d9e:	4645      	mov	r5, r8
    1da0:	b4e0      	push	{r5, r6, r7}
    1da2:	b08e      	sub	sp, #56	; 0x38
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
    1da4:	22c2      	movs	r2, #194	; 0xc2
    1da6:	00d2      	lsls	r2, r2, #3
    1da8:	4b59      	ldr	r3, [pc, #356]	; (1f10 <system_clock_init+0x178>)
    1daa:	609a      	str	r2, [r3, #8]
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
    1dac:	4a59      	ldr	r2, [pc, #356]	; (1f14 <system_clock_init+0x17c>)
    1dae:	6853      	ldr	r3, [r2, #4]
    1db0:	211e      	movs	r1, #30
    1db2:	438b      	bics	r3, r1
    1db4:	6053      	str	r3, [r2, #4]
#elif CONF_CLOCK_GCLK_4_ENABLE == false
	gclk_conf.source_generator = GCLK_GENERATOR_4;
#elif CONF_CLOCK_GCLK_5_ENABLE == false
	gclk_conf.source_generator = GCLK_GENERATOR_5;
#elif CONF_CLOCK_GCLK_6_ENABLE == false
	gclk_conf.source_generator = GCLK_GENERATOR_6;
    1db6:	2206      	movs	r2, #6
    1db8:	ab01      	add	r3, sp, #4
    1dba:	701a      	strb	r2, [r3, #0]
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#else
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#endif

	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    1dbc:	2400      	movs	r4, #0
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
    1dbe:	4d56      	ldr	r5, [pc, #344]	; (1f18 <system_clock_init+0x180>)
    1dc0:	b2e0      	uxtb	r0, r4
    1dc2:	a901      	add	r1, sp, #4
    1dc4:	47a8      	blx	r5
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#else
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#endif

	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    1dc6:	3401      	adds	r4, #1
    1dc8:	2c25      	cmp	r4, #37	; 0x25
    1dca:	d1f9      	bne.n	1dc0 <system_clock_init+0x28>
static inline void system_clock_source_xosc32k_get_config_defaults(
		struct system_clock_source_xosc32k_config *const config)
{
	Assert(config);

	config->external_clock      = SYSTEM_CLOCK_EXTERNAL_CRYSTAL;
    1dcc:	a80a      	add	r0, sp, #40	; 0x28
    1dce:	2300      	movs	r3, #0
    1dd0:	7003      	strb	r3, [r0, #0]
	config->startup_time        = SYSTEM_XOSC32K_STARTUP_16384;
	config->auto_gain_control   = false;
    1dd2:	7083      	strb	r3, [r0, #2]
	config->frequency           = 32768UL;
    1dd4:	2280      	movs	r2, #128	; 0x80
    1dd6:	0212      	lsls	r2, r2, #8
    1dd8:	6082      	str	r2, [r0, #8]
	config->enable_1khz_output  = false;
    1dda:	70c3      	strb	r3, [r0, #3]
	config->enable_32khz_output = true;
    1ddc:	2201      	movs	r2, #1
    1dde:	7102      	strb	r2, [r0, #4]
	config->run_in_standby      = false;
	config->on_demand           = true;
	config->write_once          = false;
    1de0:	7383      	strb	r3, [r0, #14]
	struct system_clock_source_xosc32k_config xosc32k_conf;
	system_clock_source_xosc32k_get_config_defaults(&xosc32k_conf);

	xosc32k_conf.frequency           = 32768UL;
	xosc32k_conf.external_clock      = CONF_CLOCK_XOSC32K_EXTERNAL_CRYSTAL;
	xosc32k_conf.startup_time        = CONF_CLOCK_XOSC32K_STARTUP_TIME;
    1de2:	2106      	movs	r1, #6
    1de4:	7041      	strb	r1, [r0, #1]
	xosc32k_conf.auto_gain_control   = CONF_CLOCK_XOSC32K_AUTO_AMPLITUDE_CONTROL;
	xosc32k_conf.enable_1khz_output  = CONF_CLOCK_XOSC32K_ENABLE_1KHZ_OUPUT;
	xosc32k_conf.enable_32khz_output = CONF_CLOCK_XOSC32K_ENABLE_32KHZ_OUTPUT;
	xosc32k_conf.on_demand           = false;
    1de6:	7343      	strb	r3, [r0, #13]
	xosc32k_conf.run_in_standby      = CONF_CLOCK_XOSC32K_RUN_IN_STANDBY;
    1de8:	7302      	strb	r2, [r0, #12]

	system_clock_source_xosc32k_set_config(&xosc32k_conf);
    1dea:	4b4c      	ldr	r3, [pc, #304]	; (1f1c <system_clock_init+0x184>)
    1dec:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_XOSC32K);
    1dee:	2005      	movs	r0, #5
    1df0:	4b4b      	ldr	r3, [pc, #300]	; (1f20 <system_clock_init+0x188>)
    1df2:	4798      	blx	r3

	default:
		return false;
	}

	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
    1df4:	4946      	ldr	r1, [pc, #280]	; (1f10 <system_clock_init+0x178>)
    1df6:	2202      	movs	r2, #2
    1df8:	68cb      	ldr	r3, [r1, #12]
	xosc32k_conf.on_demand           = false;
	xosc32k_conf.run_in_standby      = CONF_CLOCK_XOSC32K_RUN_IN_STANDBY;

	system_clock_source_xosc32k_set_config(&xosc32k_conf);
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_XOSC32K);
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_XOSC32K));
    1dfa:	421a      	tst	r2, r3
    1dfc:	d0fc      	beq.n	1df8 <system_clock_init+0x60>
		struct system_clock_source_dfll_config *const config)
{
	Assert(config);

	config->loop_mode       = SYSTEM_CLOCK_DFLL_LOOP_MODE_OPEN;
	config->quick_lock      = SYSTEM_CLOCK_DFLL_QUICK_LOCK_ENABLE;
    1dfe:	a805      	add	r0, sp, #20
    1e00:	2300      	movs	r3, #0
    1e02:	2500      	movs	r5, #0
    1e04:	8043      	strh	r3, [r0, #2]
	config->chill_cycle     = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_ENABLE;
    1e06:	8083      	strh	r3, [r0, #4]
	config->wakeup_lock     = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_KEEP;
    1e08:	7185      	strb	r5, [r0, #6]
	config->stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_TRACK_AFTER_LOCK;
    1e0a:	71c5      	strb	r5, [r0, #7]
	config->on_demand       = true;

	/* Open loop mode calibration value */
	config->coarse_value    = 0x1f / 4; /* Midpoint */
    1e0c:	2207      	movs	r2, #7
    1e0e:	7202      	strb	r2, [r0, #8]
	config->fine_value      = 0xff / 4; /* Midpoint */
    1e10:	333f      	adds	r3, #63	; 0x3f
    1e12:	8143      	strh	r3, [r0, #10]
	/* DFLL Config (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	struct system_clock_source_dfll_config dfll_conf;
	system_clock_source_dfll_get_config_defaults(&dfll_conf);

	dfll_conf.loop_mode      = CONF_CLOCK_DFLL_LOOP_MODE;
    1e14:	2104      	movs	r1, #4
    1e16:	7001      	strb	r1, [r0, #0]
	dfll_conf.on_demand      = false;
    1e18:	7045      	strb	r5, [r0, #1]
#  else
	dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;
#  endif

	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		dfll_conf.multiply_factor = CONF_CLOCK_DFLL_MULTIPLY_FACTOR;
    1e1a:	4942      	ldr	r1, [pc, #264]	; (1f24 <system_clock_init+0x18c>)
    1e1c:	8201      	strh	r1, [r0, #16]
	}

	dfll_conf.coarse_max_step = CONF_CLOCK_DFLL_MAX_COARSE_STEP_SIZE;
    1e1e:	7302      	strb	r2, [r0, #12]
	dfll_conf.fine_max_step   = CONF_CLOCK_DFLL_MAX_FINE_STEP_SIZE;
    1e20:	81c3      	strh	r3, [r0, #14]
		dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;

		dfll_conf.multiply_factor = 48000;
	}

	system_clock_source_dfll_set_config(&dfll_conf);
    1e22:	4b41      	ldr	r3, [pc, #260]	; (1f28 <system_clock_init+0x190>)
    1e24:	4798      	blx	r3
		struct system_clock_source_osc8m_config *const config)
{
	Assert(config);

	config->prescaler       = SYSTEM_OSC8M_DIV_8;
	config->run_in_standby  = false;
    1e26:	a804      	add	r0, sp, #16
    1e28:	7045      	strb	r5, [r0, #1]

	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
    1e2a:	7005      	strb	r5, [r0, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
    1e2c:	7085      	strb	r5, [r0, #2]
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;

	system_clock_source_osc8m_set_config(&osc8m_conf);
    1e2e:	4b3f      	ldr	r3, [pc, #252]	; (1f2c <system_clock_init+0x194>)
    1e30:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
    1e32:	2006      	movs	r0, #6
    1e34:	4b3a      	ldr	r3, [pc, #232]	; (1f20 <system_clock_init+0x188>)
    1e36:	4699      	mov	r9, r3
    1e38:	4798      	blx	r3


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
    1e3a:	4b3d      	ldr	r3, [pc, #244]	; (1f30 <system_clock_init+0x198>)
    1e3c:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
    1e3e:	ac01      	add	r4, sp, #4
    1e40:	2601      	movs	r6, #1
    1e42:	6066      	str	r6, [r4, #4]
	config->high_when_disabled = false;
    1e44:	7065      	strb	r5, [r4, #1]
	config->source_clock       = GCLK_SOURCE_OSC8M;
	config->run_in_standby     = false;
    1e46:	7225      	strb	r5, [r4, #8]
	config->output_enable      = false;
    1e48:	7265      	strb	r5, [r4, #9]

	/* Configure all GCLK generators except for the main generator, which
	 * is configured later after all other clock systems are set up */
	MREPEAT(8, _CONF_CLOCK_GCLK_CONFIG_NONMAIN, ~);
    1e4a:	2305      	movs	r3, #5
    1e4c:	469a      	mov	sl, r3
    1e4e:	7023      	strb	r3, [r4, #0]
    1e50:	2001      	movs	r0, #1
    1e52:	1c21      	adds	r1, r4, #0
    1e54:	4b37      	ldr	r3, [pc, #220]	; (1f34 <system_clock_init+0x19c>)
    1e56:	4698      	mov	r8, r3
    1e58:	4798      	blx	r3
    1e5a:	2001      	movs	r0, #1
    1e5c:	4f36      	ldr	r7, [pc, #216]	; (1f38 <system_clock_init+0x1a0>)
    1e5e:	47b8      	blx	r7
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
    1e60:	6066      	str	r6, [r4, #4]
	config->high_when_disabled = false;
    1e62:	7065      	strb	r5, [r4, #1]
	config->source_clock       = GCLK_SOURCE_OSC8M;
	config->run_in_standby     = false;
	config->output_enable      = false;
    1e64:	7265      	strb	r5, [r4, #9]
    1e66:	4653      	mov	r3, sl
    1e68:	7023      	strb	r3, [r4, #0]
    1e6a:	7226      	strb	r6, [r4, #8]
    1e6c:	2002      	movs	r0, #2
    1e6e:	1c21      	adds	r1, r4, #0
    1e70:	47c0      	blx	r8
    1e72:	2002      	movs	r0, #2
    1e74:	47b8      	blx	r7
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
    1e76:	6066      	str	r6, [r4, #4]
	config->high_when_disabled = false;
    1e78:	7065      	strb	r5, [r4, #1]
	config->source_clock       = GCLK_SOURCE_OSC8M;
    1e7a:	2306      	movs	r3, #6
    1e7c:	469a      	mov	sl, r3
    1e7e:	7023      	strb	r3, [r4, #0]
	config->run_in_standby     = false;
    1e80:	7225      	strb	r5, [r4, #8]
	config->output_enable      = false;
    1e82:	7265      	strb	r5, [r4, #9]
    1e84:	2003      	movs	r0, #3
    1e86:	1c21      	adds	r1, r4, #0
    1e88:	47c0      	blx	r8
    1e8a:	2003      	movs	r0, #3
    1e8c:	47b8      	blx	r7
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
	config->high_when_disabled = false;
    1e8e:	7065      	strb	r5, [r4, #1]
	config->source_clock       = GCLK_SOURCE_OSC8M;
	config->run_in_standby     = false;
	config->output_enable      = false;
    1e90:	7265      	strb	r5, [r4, #9]
    1e92:	2303      	movs	r3, #3
    1e94:	7023      	strb	r3, [r4, #0]
    1e96:	331d      	adds	r3, #29
    1e98:	6063      	str	r3, [r4, #4]
    1e9a:	7226      	strb	r6, [r4, #8]
    1e9c:	2004      	movs	r0, #4
    1e9e:	1c21      	adds	r1, r4, #0
    1ea0:	47c0      	blx	r8
    1ea2:	2004      	movs	r0, #4
    1ea4:	47b8      	blx	r7
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
    1ea6:	6066      	str	r6, [r4, #4]
	config->high_when_disabled = false;
    1ea8:	7065      	strb	r5, [r4, #1]
	config->source_clock       = GCLK_SOURCE_OSC8M;
    1eaa:	4653      	mov	r3, sl
    1eac:	7023      	strb	r3, [r4, #0]
	config->run_in_standby     = false;
    1eae:	7225      	strb	r5, [r4, #8]
	config->output_enable      = false;
    1eb0:	7265      	strb	r5, [r4, #9]
    1eb2:	2005      	movs	r0, #5
    1eb4:	1c21      	adds	r1, r4, #0
    1eb6:	47c0      	blx	r8
    1eb8:	2005      	movs	r0, #5
    1eba:	47b8      	blx	r7
	/* Enable DFLL reference clock if in closed loop mode */
	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		struct system_gclk_chan_config dfll_gclk_chan_conf;

		system_gclk_chan_get_config_defaults(&dfll_gclk_chan_conf);
		dfll_gclk_chan_conf.source_generator = CONF_CLOCK_DFLL_SOURCE_GCLK_GENERATOR;
    1ebc:	7026      	strb	r6, [r4, #0]
		system_gclk_chan_set_config(SYSCTRL_GCLK_ID_DFLL48, &dfll_gclk_chan_conf);
    1ebe:	2000      	movs	r0, #0
    1ec0:	1c21      	adds	r1, r4, #0
    1ec2:	4b15      	ldr	r3, [pc, #84]	; (1f18 <system_clock_init+0x180>)
    1ec4:	4798      	blx	r3
		system_gclk_chan_enable(SYSCTRL_GCLK_ID_DFLL48);
    1ec6:	2000      	movs	r0, #0
    1ec8:	4b1c      	ldr	r3, [pc, #112]	; (1f3c <system_clock_init+0x1a4>)
    1eca:	4798      	blx	r3
#endif


	/* DFLL Enable (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_DFLL);
    1ecc:	2007      	movs	r0, #7
    1ece:	47c8      	blx	r9

	default:
		return false;
	}

	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
    1ed0:	490f      	ldr	r1, [pc, #60]	; (1f10 <system_clock_init+0x178>)
    1ed2:	22d0      	movs	r2, #208	; 0xd0
    1ed4:	68cb      	ldr	r3, [r1, #12]
    1ed6:	4013      	ands	r3, r2


	/* DFLL Enable (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_DFLL);
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_DFLL));
    1ed8:	2bd0      	cmp	r3, #208	; 0xd0
    1eda:	d1fb      	bne.n	1ed4 <system_clock_init+0x13c>
 */
static inline void system_cpu_clock_set_divider(
		const enum system_main_clock_div divider)
{
	Assert(((uint32_t)divider & PM_CPUSEL_CPUDIV_Msk) == divider);
	PM->CPUSEL.reg = (uint32_t)divider;
    1edc:	4a18      	ldr	r2, [pc, #96]	; (1f40 <system_clock_init+0x1a8>)
    1ede:	2300      	movs	r3, #0
    1ee0:	7213      	strb	r3, [r2, #8]
		const enum system_clock_apb_bus bus,
		const enum system_main_clock_div divider)
{
	switch (bus) {
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBASEL.reg = (uint32_t)divider;
    1ee2:	7253      	strb	r3, [r2, #9]
			break;
		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBSEL.reg = (uint32_t)divider;
    1ee4:	7293      	strb	r3, [r2, #10]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
	config->high_when_disabled = false;
    1ee6:	a901      	add	r1, sp, #4
    1ee8:	704b      	strb	r3, [r1, #1]
	config->source_clock       = GCLK_SOURCE_OSC8M;
	config->run_in_standby     = false;
    1eea:	720b      	strb	r3, [r1, #8]
	config->output_enable      = false;
    1eec:	724b      	strb	r3, [r1, #9]
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBB, CONF_CLOCK_APBB_DIVIDER);

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
    1eee:	3307      	adds	r3, #7
    1ef0:	700b      	strb	r3, [r1, #0]
    1ef2:	3b01      	subs	r3, #1
    1ef4:	604b      	str	r3, [r1, #4]
    1ef6:	2000      	movs	r0, #0
    1ef8:	4b0e      	ldr	r3, [pc, #56]	; (1f34 <system_clock_init+0x19c>)
    1efa:	4798      	blx	r3
    1efc:	2000      	movs	r0, #0
    1efe:	4b0e      	ldr	r3, [pc, #56]	; (1f38 <system_clock_init+0x1a0>)
    1f00:	4798      	blx	r3
#endif
}
    1f02:	b00e      	add	sp, #56	; 0x38
    1f04:	bc1c      	pop	{r2, r3, r4}
    1f06:	4690      	mov	r8, r2
    1f08:	4699      	mov	r9, r3
    1f0a:	46a2      	mov	sl, r4
    1f0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1f0e:	46c0      	nop			; (mov r8, r8)
    1f10:	40000800 	.word	0x40000800
    1f14:	41004000 	.word	0x41004000
    1f18:	0000217d 	.word	0x0000217d
    1f1c:	00001bb1 	.word	0x00001bb1
    1f20:	00001cf9 	.word	0x00001cf9
    1f24:	000005b9 	.word	0x000005b9
    1f28:	00001c89 	.word	0x00001c89
    1f2c:	00001b75 	.word	0x00001b75
    1f30:	00001f45 	.word	0x00001f45
    1f34:	00001f69 	.word	0x00001f69
    1f38:	00002021 	.word	0x00002021
    1f3c:	000020f1 	.word	0x000020f1
    1f40:	40000400 	.word	0x40000400

00001f44 <system_gclk_init>:
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
	switch (bus) {
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
    1f44:	4a06      	ldr	r2, [pc, #24]	; (1f60 <system_gclk_init+0x1c>)
    1f46:	6991      	ldr	r1, [r2, #24]
    1f48:	2308      	movs	r3, #8
    1f4a:	430b      	orrs	r3, r1
    1f4c:	6193      	str	r3, [r2, #24]
{
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
    1f4e:	2201      	movs	r2, #1
    1f50:	4b04      	ldr	r3, [pc, #16]	; (1f64 <system_gclk_init+0x20>)
    1f52:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
    1f54:	1c19      	adds	r1, r3, #0
    1f56:	780b      	ldrb	r3, [r1, #0]
    1f58:	4213      	tst	r3, r2
    1f5a:	d1fc      	bne.n	1f56 <system_gclk_init+0x12>
		/* Wait for reset to complete */
	}
}
    1f5c:	4770      	bx	lr
    1f5e:	46c0      	nop			; (mov r8, r8)
    1f60:	40000400 	.word	0x40000400
    1f64:	40000c00 	.word	0x40000c00

00001f68 <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    1f68:	b570      	push	{r4, r5, r6, lr}
    1f6a:	1c06      	adds	r6, r0, #0
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
    1f6c:	1c04      	adds	r4, r0, #0
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
    1f6e:	780d      	ldrb	r5, [r1, #0]
    1f70:	022d      	lsls	r5, r5, #8
    1f72:	4305      	orrs	r5, r0

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    1f74:	784b      	ldrb	r3, [r1, #1]
    1f76:	2b00      	cmp	r3, #0
    1f78:	d002      	beq.n	1f80 <system_gclk_gen_set_config+0x18>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
    1f7a:	2380      	movs	r3, #128	; 0x80
    1f7c:	02db      	lsls	r3, r3, #11
    1f7e:	431d      	orrs	r5, r3
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
    1f80:	7a4b      	ldrb	r3, [r1, #9]
    1f82:	2b00      	cmp	r3, #0
    1f84:	d002      	beq.n	1f8c <system_gclk_gen_set_config+0x24>
		new_genctrl_config |= GCLK_GENCTRL_OE;
    1f86:	2380      	movs	r3, #128	; 0x80
    1f88:	031b      	lsls	r3, r3, #12
    1f8a:	431d      	orrs	r5, r3
	}

	/* Set division factor */
	if (config->division_factor > 1) {
    1f8c:	6848      	ldr	r0, [r1, #4]
    1f8e:	2801      	cmp	r0, #1
    1f90:	d918      	bls.n	1fc4 <system_gclk_gen_set_config+0x5c>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
    1f92:	1e43      	subs	r3, r0, #1
    1f94:	4218      	tst	r0, r3
    1f96:	d110      	bne.n	1fba <system_gclk_gen_set_config+0x52>
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    1f98:	2802      	cmp	r0, #2
    1f9a:	d906      	bls.n	1faa <system_gclk_gen_set_config+0x42>
    1f9c:	2302      	movs	r3, #2
    1f9e:	2200      	movs	r2, #0
						mask <<= 1) {
				div2_count++;
    1fa0:	3201      	adds	r2, #1

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
						mask <<= 1) {
    1fa2:	005b      	lsls	r3, r3, #1
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    1fa4:	4298      	cmp	r0, r3
    1fa6:	d8fb      	bhi.n	1fa0 <system_gclk_gen_set_config+0x38>
    1fa8:	e000      	b.n	1fac <system_gclk_gen_set_config+0x44>
    1faa:	2200      	movs	r2, #0
						mask <<= 1) {
				div2_count++;
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
    1fac:	0212      	lsls	r2, r2, #8
    1fae:	4332      	orrs	r2, r6
    1fb0:	1c14      	adds	r4, r2, #0
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    1fb2:	2380      	movs	r3, #128	; 0x80
    1fb4:	035b      	lsls	r3, r3, #13
    1fb6:	431d      	orrs	r5, r3
    1fb8:	e004      	b.n	1fc4 <system_gclk_gen_set_config+0x5c>
		} else {
			/* Set integer division factor */

			new_gendiv_config  |=
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
    1fba:	0204      	lsls	r4, r0, #8
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
		} else {
			/* Set integer division factor */

			new_gendiv_config  |=
    1fbc:	4334      	orrs	r4, r6
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;

			/* Enable non-binary division with increased duty cycle accuracy */
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    1fbe:	2380      	movs	r3, #128	; 0x80
    1fc0:	029b      	lsls	r3, r3, #10
    1fc2:	431d      	orrs	r5, r3
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    1fc4:	7a0b      	ldrb	r3, [r1, #8]
    1fc6:	2b00      	cmp	r3, #0
    1fc8:	d002      	beq.n	1fd0 <system_gclk_gen_set_config+0x68>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    1fca:	2380      	movs	r3, #128	; 0x80
    1fcc:	039b      	lsls	r3, r3, #14
    1fce:	431d      	orrs	r5, r3
 * \retval true if the module has completed synchronization
 * \retval false if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY) {
    1fd0:	4a0f      	ldr	r2, [pc, #60]	; (2010 <STACK_SIZE+0x10>)
    1fd2:	7853      	ldrb	r3, [r2, #1]
	}

	while (system_gclk_is_syncing()) {
    1fd4:	b25b      	sxtb	r3, r3
    1fd6:	2b00      	cmp	r3, #0
    1fd8:	dbfb      	blt.n	1fd2 <system_gclk_gen_set_config+0x6a>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    1fda:	4b0e      	ldr	r3, [pc, #56]	; (2014 <STACK_SIZE+0x14>)
    1fdc:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    1fde:	4b0e      	ldr	r3, [pc, #56]	; (2018 <STACK_SIZE+0x18>)
    1fe0:	701e      	strb	r6, [r3, #0]
    1fe2:	4a0b      	ldr	r2, [pc, #44]	; (2010 <STACK_SIZE+0x10>)
    1fe4:	7853      	ldrb	r3, [r2, #1]

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
    1fe6:	b25b      	sxtb	r3, r3
    1fe8:	2b00      	cmp	r3, #0
    1fea:	dbfb      	blt.n	1fe4 <system_gclk_gen_set_config+0x7c>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
    1fec:	4b08      	ldr	r3, [pc, #32]	; (2010 <STACK_SIZE+0x10>)
    1fee:	609c      	str	r4, [r3, #8]
    1ff0:	1c1a      	adds	r2, r3, #0
    1ff2:	7853      	ldrb	r3, [r2, #1]

	while (system_gclk_is_syncing()) {
    1ff4:	b25b      	sxtb	r3, r3
    1ff6:	2b00      	cmp	r3, #0
    1ff8:	dbfb      	blt.n	1ff2 <system_gclk_gen_set_config+0x8a>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
    1ffa:	4a05      	ldr	r2, [pc, #20]	; (2010 <STACK_SIZE+0x10>)
    1ffc:	6851      	ldr	r1, [r2, #4]
    1ffe:	2380      	movs	r3, #128	; 0x80
    2000:	025b      	lsls	r3, r3, #9
    2002:	400b      	ands	r3, r1
    2004:	431d      	orrs	r5, r3
    2006:	6055      	str	r5, [r2, #4]
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    2008:	4b04      	ldr	r3, [pc, #16]	; (201c <STACK_SIZE+0x1c>)
    200a:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    200c:	bd70      	pop	{r4, r5, r6, pc}
    200e:	46c0      	nop			; (mov r8, r8)
    2010:	40000c00 	.word	0x40000c00
    2014:	000001a5 	.word	0x000001a5
    2018:	40000c08 	.word	0x40000c08
    201c:	000001e5 	.word	0x000001e5

00002020 <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    2020:	b510      	push	{r4, lr}
    2022:	1c04      	adds	r4, r0, #0
    2024:	4a0b      	ldr	r2, [pc, #44]	; (2054 <system_gclk_gen_enable+0x34>)
    2026:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    2028:	b25b      	sxtb	r3, r3
    202a:	2b00      	cmp	r3, #0
    202c:	dbfb      	blt.n	2026 <system_gclk_gen_enable+0x6>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    202e:	4b0a      	ldr	r3, [pc, #40]	; (2058 <system_gclk_gen_enable+0x38>)
    2030:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    2032:	4b0a      	ldr	r3, [pc, #40]	; (205c <system_gclk_gen_enable+0x3c>)
    2034:	701c      	strb	r4, [r3, #0]
    2036:	4a07      	ldr	r2, [pc, #28]	; (2054 <system_gclk_gen_enable+0x34>)
    2038:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    203a:	b25b      	sxtb	r3, r3
    203c:	2b00      	cmp	r3, #0
    203e:	dbfb      	blt.n	2038 <system_gclk_gen_enable+0x18>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
    2040:	4a04      	ldr	r2, [pc, #16]	; (2054 <system_gclk_gen_enable+0x34>)
    2042:	6853      	ldr	r3, [r2, #4]
    2044:	2180      	movs	r1, #128	; 0x80
    2046:	0249      	lsls	r1, r1, #9
    2048:	430b      	orrs	r3, r1
    204a:	6053      	str	r3, [r2, #4]
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    204c:	4b04      	ldr	r3, [pc, #16]	; (2060 <system_gclk_gen_enable+0x40>)
    204e:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    2050:	bd10      	pop	{r4, pc}
    2052:	46c0      	nop			; (mov r8, r8)
    2054:	40000c00 	.word	0x40000c00
    2058:	000001a5 	.word	0x000001a5
    205c:	40000c04 	.word	0x40000c04
    2060:	000001e5 	.word	0x000001e5

00002064 <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
    2064:	b570      	push	{r4, r5, r6, lr}
    2066:	1c04      	adds	r4, r0, #0
    2068:	4a1a      	ldr	r2, [pc, #104]	; (20d4 <system_gclk_gen_get_hz+0x70>)
    206a:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    206c:	b25b      	sxtb	r3, r3
    206e:	2b00      	cmp	r3, #0
    2070:	dbfb      	blt.n	206a <system_gclk_gen_get_hz+0x6>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    2072:	4b19      	ldr	r3, [pc, #100]	; (20d8 <system_gclk_gen_get_hz+0x74>)
    2074:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    2076:	4b19      	ldr	r3, [pc, #100]	; (20dc <system_gclk_gen_get_hz+0x78>)
    2078:	701c      	strb	r4, [r3, #0]
    207a:	4a16      	ldr	r2, [pc, #88]	; (20d4 <system_gclk_gen_get_hz+0x70>)
    207c:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    207e:	b25b      	sxtb	r3, r3
    2080:	2b00      	cmp	r3, #0
    2082:	dbfb      	blt.n	207c <system_gclk_gen_get_hz+0x18>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
    2084:	4e13      	ldr	r6, [pc, #76]	; (20d4 <system_gclk_gen_get_hz+0x70>)
    2086:	6870      	ldr	r0, [r6, #4]
    2088:	04c0      	lsls	r0, r0, #19
    208a:	0ec0      	lsrs	r0, r0, #27
	while (system_gclk_is_syncing()) {
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
    208c:	4b14      	ldr	r3, [pc, #80]	; (20e0 <system_gclk_gen_get_hz+0x7c>)
    208e:	4798      	blx	r3
    2090:	1c05      	adds	r5, r0, #0
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    2092:	4b12      	ldr	r3, [pc, #72]	; (20dc <system_gclk_gen_get_hz+0x78>)
    2094:	701c      	strb	r4, [r3, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
    2096:	6876      	ldr	r6, [r6, #4]
    2098:	02f6      	lsls	r6, r6, #11
    209a:	0ff6      	lsrs	r6, r6, #31

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    209c:	4b11      	ldr	r3, [pc, #68]	; (20e4 <system_gclk_gen_get_hz+0x80>)
    209e:	701c      	strb	r4, [r3, #0]
    20a0:	4a0c      	ldr	r2, [pc, #48]	; (20d4 <system_gclk_gen_get_hz+0x70>)
    20a2:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    20a4:	b25b      	sxtb	r3, r3
    20a6:	2b00      	cmp	r3, #0
    20a8:	dbfb      	blt.n	20a2 <system_gclk_gen_get_hz+0x3e>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
    20aa:	4b0a      	ldr	r3, [pc, #40]	; (20d4 <system_gclk_gen_get_hz+0x70>)
    20ac:	689c      	ldr	r4, [r3, #8]
    20ae:	0a24      	lsrs	r4, r4, #8
    20b0:	b2a4      	uxth	r4, r4
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    20b2:	4b0d      	ldr	r3, [pc, #52]	; (20e8 <system_gclk_gen_get_hz+0x84>)
    20b4:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    20b6:	2e00      	cmp	r6, #0
    20b8:	d107      	bne.n	20ca <system_gclk_gen_get_hz+0x66>
    20ba:	2c01      	cmp	r4, #1
    20bc:	d907      	bls.n	20ce <system_gclk_gen_get_hz+0x6a>
		gen_input_hz /= divider;
    20be:	1c28      	adds	r0, r5, #0
    20c0:	1c21      	adds	r1, r4, #0
    20c2:	4b0a      	ldr	r3, [pc, #40]	; (20ec <system_gclk_gen_get_hz+0x88>)
    20c4:	4798      	blx	r3
    20c6:	1c05      	adds	r5, r0, #0
    20c8:	e001      	b.n	20ce <system_gclk_gen_get_hz+0x6a>
	} else if (divsel) {
		gen_input_hz >>= (divider+1);
    20ca:	3401      	adds	r4, #1
    20cc:	40e5      	lsrs	r5, r4
	}

	return gen_input_hz;
}
    20ce:	1c28      	adds	r0, r5, #0
    20d0:	bd70      	pop	{r4, r5, r6, pc}
    20d2:	46c0      	nop			; (mov r8, r8)
    20d4:	40000c00 	.word	0x40000c00
    20d8:	000001a5 	.word	0x000001a5
    20dc:	40000c04 	.word	0x40000c04
    20e0:	00001ae5 	.word	0x00001ae5
    20e4:	40000c08 	.word	0x40000c08
    20e8:	000001e5 	.word	0x000001e5
    20ec:	00010525 	.word	0x00010525

000020f0 <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    20f0:	b510      	push	{r4, lr}
    20f2:	1c04      	adds	r4, r0, #0
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    20f4:	4b06      	ldr	r3, [pc, #24]	; (2110 <system_gclk_chan_enable+0x20>)
    20f6:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    20f8:	4b06      	ldr	r3, [pc, #24]	; (2114 <system_gclk_chan_enable+0x24>)
    20fa:	701c      	strb	r4, [r3, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
    20fc:	4a06      	ldr	r2, [pc, #24]	; (2118 <system_gclk_chan_enable+0x28>)
    20fe:	8851      	ldrh	r1, [r2, #2]
    2100:	2380      	movs	r3, #128	; 0x80
    2102:	01db      	lsls	r3, r3, #7
    2104:	430b      	orrs	r3, r1
    2106:	8053      	strh	r3, [r2, #2]
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    2108:	4b04      	ldr	r3, [pc, #16]	; (211c <system_gclk_chan_enable+0x2c>)
    210a:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    210c:	bd10      	pop	{r4, pc}
    210e:	46c0      	nop			; (mov r8, r8)
    2110:	000001a5 	.word	0x000001a5
    2114:	40000c02 	.word	0x40000c02
    2118:	40000c00 	.word	0x40000c00
    211c:	000001e5 	.word	0x000001e5

00002120 <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    2120:	b510      	push	{r4, lr}
    2122:	1c04      	adds	r4, r0, #0
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    2124:	4b0f      	ldr	r3, [pc, #60]	; (2164 <system_gclk_chan_disable+0x44>)
    2126:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    2128:	4b0f      	ldr	r3, [pc, #60]	; (2168 <system_gclk_chan_disable+0x48>)
    212a:	701c      	strb	r4, [r3, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
    212c:	4b0f      	ldr	r3, [pc, #60]	; (216c <system_gclk_chan_disable+0x4c>)
    212e:	885a      	ldrh	r2, [r3, #2]
    2130:	0512      	lsls	r2, r2, #20
    2132:	0f10      	lsrs	r0, r2, #28
	GCLK->CLKCTRL.bit.GEN = 0;
    2134:	8859      	ldrh	r1, [r3, #2]
    2136:	4a0e      	ldr	r2, [pc, #56]	; (2170 <system_gclk_chan_disable+0x50>)
    2138:	400a      	ands	r2, r1
    213a:	805a      	strh	r2, [r3, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
    213c:	8859      	ldrh	r1, [r3, #2]
    213e:	4a0d      	ldr	r2, [pc, #52]	; (2174 <system_gclk_chan_disable+0x54>)
    2140:	400a      	ands	r2, r1
    2142:	805a      	strh	r2, [r3, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
    2144:	1c19      	adds	r1, r3, #0
    2146:	2280      	movs	r2, #128	; 0x80
    2148:	01d2      	lsls	r2, r2, #7
    214a:	884b      	ldrh	r3, [r1, #2]
    214c:	4213      	tst	r3, r2
    214e:	d1fc      	bne.n	214a <system_gclk_chan_disable+0x2a>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
    2150:	4906      	ldr	r1, [pc, #24]	; (216c <system_gclk_chan_disable+0x4c>)
    2152:	0202      	lsls	r2, r0, #8
    2154:	8848      	ldrh	r0, [r1, #2]
    2156:	4b06      	ldr	r3, [pc, #24]	; (2170 <system_gclk_chan_disable+0x50>)
    2158:	4003      	ands	r3, r0
    215a:	4313      	orrs	r3, r2
    215c:	804b      	strh	r3, [r1, #2]
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    215e:	4b06      	ldr	r3, [pc, #24]	; (2178 <system_gclk_chan_disable+0x58>)
    2160:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    2162:	bd10      	pop	{r4, pc}
    2164:	000001a5 	.word	0x000001a5
    2168:	40000c02 	.word	0x40000c02
    216c:	40000c00 	.word	0x40000c00
    2170:	fffff0ff 	.word	0xfffff0ff
    2174:	ffffbfff 	.word	0xffffbfff
    2178:	000001e5 	.word	0x000001e5

0000217c <system_gclk_chan_set_config>:
 *
 */
void system_gclk_chan_set_config(
		const uint8_t channel,
		struct system_gclk_chan_config *const config)
{
    217c:	b510      	push	{r4, lr}

	/* Cache the new config to reduce sync requirements */
	uint32_t new_clkctrl_config = (channel << GCLK_CLKCTRL_ID_Pos);

	/* Select the desired generic clock generator */
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
    217e:	780c      	ldrb	r4, [r1, #0]
    2180:	0224      	lsls	r4, r4, #8
    2182:	4304      	orrs	r4, r0

	/* Disable generic clock channel */
	system_gclk_chan_disable(channel);
    2184:	4b02      	ldr	r3, [pc, #8]	; (2190 <system_gclk_chan_set_config+0x14>)
    2186:	4798      	blx	r3

	/* Write the new configuration */
	GCLK->CLKCTRL.reg = new_clkctrl_config;
    2188:	b2a4      	uxth	r4, r4
    218a:	4b02      	ldr	r3, [pc, #8]	; (2194 <system_gclk_chan_set_config+0x18>)
    218c:	805c      	strh	r4, [r3, #2]
}
    218e:	bd10      	pop	{r4, pc}
    2190:	00002121 	.word	0x00002121
    2194:	40000c00 	.word	0x40000c00

00002198 <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    2198:	b510      	push	{r4, lr}
    219a:	1c04      	adds	r4, r0, #0
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    219c:	4b06      	ldr	r3, [pc, #24]	; (21b8 <system_gclk_chan_get_hz+0x20>)
    219e:	4798      	blx	r3
	uint8_t gen_id;

	system_interrupt_enter_critical_section();

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    21a0:	4b06      	ldr	r3, [pc, #24]	; (21bc <system_gclk_chan_get_hz+0x24>)
    21a2:	701c      	strb	r4, [r3, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
    21a4:	4b06      	ldr	r3, [pc, #24]	; (21c0 <system_gclk_chan_get_hz+0x28>)
    21a6:	885c      	ldrh	r4, [r3, #2]
    21a8:	0524      	lsls	r4, r4, #20
    21aa:	0f24      	lsrs	r4, r4, #28
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    21ac:	4b05      	ldr	r3, [pc, #20]	; (21c4 <system_gclk_chan_get_hz+0x2c>)
    21ae:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    21b0:	1c20      	adds	r0, r4, #0
    21b2:	4b05      	ldr	r3, [pc, #20]	; (21c8 <system_gclk_chan_get_hz+0x30>)
    21b4:	4798      	blx	r3
}
    21b6:	bd10      	pop	{r4, pc}
    21b8:	000001a5 	.word	0x000001a5
    21bc:	40000c02 	.word	0x40000c02
    21c0:	40000c00 	.word	0x40000c00
    21c4:	000001e5 	.word	0x000001e5
    21c8:	00002065 	.word	0x00002065

000021cc <system_interrupt_set_priority>:
 * \retval STATUS_INVALID_ARG  If an unsupported interrupt vector number was given
 */
enum status_code system_interrupt_set_priority(
		const enum system_interrupt_vector vector,
		const enum system_interrupt_priority_level priority_level)
{
    21cc:	b5f0      	push	{r4, r5, r6, r7, lr}
	enum status_code status = STATUS_OK;

	if (vector >= _SYSTEM_INTERRUPT_EXTERNAL_VECTOR_START) {
    21ce:	2800      	cmp	r0, #0
    21d0:	db1a      	blt.n	2208 <system_interrupt_set_priority+0x3c>
		uint8_t register_num = vector / 4;
    21d2:	17c6      	asrs	r6, r0, #31
    21d4:	0fb6      	lsrs	r6, r6, #30
    21d6:	1830      	adds	r0, r6, r0
    21d8:	22ff      	movs	r2, #255	; 0xff
    21da:	0092      	lsls	r2, r2, #2
    21dc:	4002      	ands	r2, r0
    21de:	4b0f      	ldr	r3, [pc, #60]	; (221c <system_interrupt_set_priority+0x50>)
    21e0:	469c      	mov	ip, r3
    21e2:	4462      	add	r2, ip
		uint8_t priority_pos = ((vector % 4) * 8) + (8 - __NVIC_PRIO_BITS);

		NVIC->IP[register_num] =
				(NVIC->IP[register_num] & ~(0x3 << priority_pos)) |
    21e4:	25c0      	movs	r5, #192	; 0xc0
    21e6:	00ad      	lsls	r5, r5, #2
    21e8:	5957      	ldr	r7, [r2, r5]
{
	enum status_code status = STATUS_OK;

	if (vector >= _SYSTEM_INTERRUPT_EXTERNAL_VECTOR_START) {
		uint8_t register_num = vector / 4;
		uint8_t priority_pos = ((vector % 4) * 8) + (8 - __NVIC_PRIO_BITS);
    21ea:	2403      	movs	r4, #3
    21ec:	4020      	ands	r0, r4
    21ee:	1b80      	subs	r0, r0, r6
    21f0:	00c0      	lsls	r0, r0, #3
    21f2:	3006      	adds	r0, #6

		NVIC->IP[register_num] =
				(NVIC->IP[register_num] & ~(0x3 << priority_pos)) |
    21f4:	b2c3      	uxtb	r3, r0
    21f6:	409c      	lsls	r4, r3
    21f8:	1c38      	adds	r0, r7, #0
    21fa:	43a0      	bics	r0, r4
				(priority_level << priority_pos);
    21fc:	4099      	lsls	r1, r3
	if (vector >= _SYSTEM_INTERRUPT_EXTERNAL_VECTOR_START) {
		uint8_t register_num = vector / 4;
		uint8_t priority_pos = ((vector % 4) * 8) + (8 - __NVIC_PRIO_BITS);

		NVIC->IP[register_num] =
				(NVIC->IP[register_num] & ~(0x3 << priority_pos)) |
    21fe:	1c03      	adds	r3, r0, #0
    2200:	430b      	orrs	r3, r1

	if (vector >= _SYSTEM_INTERRUPT_EXTERNAL_VECTOR_START) {
		uint8_t register_num = vector / 4;
		uint8_t priority_pos = ((vector % 4) * 8) + (8 - __NVIC_PRIO_BITS);

		NVIC->IP[register_num] =
    2202:	5153      	str	r3, [r2, r5]
 */
enum status_code system_interrupt_set_priority(
		const enum system_interrupt_vector vector,
		const enum system_interrupt_priority_level priority_level)
{
	enum status_code status = STATUS_OK;
    2204:	2300      	movs	r3, #0
    2206:	e006      	b.n	2216 <system_interrupt_set_priority+0x4a>

	} else if (vector == SYSTEM_INTERRUPT_SYSTICK) {
		SCB->SHP[1] = (priority_level << _SYSTEM_INTERRUPT_SYSTICK_PRI_POS);
	} else {
		Assert(false);
		status = STATUS_ERR_INVALID_ARG;
    2208:	2317      	movs	r3, #23

		NVIC->IP[register_num] =
				(NVIC->IP[register_num] & ~(0x3 << priority_pos)) |
				(priority_level << priority_pos);

	} else if (vector == SYSTEM_INTERRUPT_SYSTICK) {
    220a:	1c42      	adds	r2, r0, #1
    220c:	d103      	bne.n	2216 <system_interrupt_set_priority+0x4a>
		SCB->SHP[1] = (priority_level << _SYSTEM_INTERRUPT_SYSTICK_PRI_POS);
    220e:	0749      	lsls	r1, r1, #29
    2210:	4b03      	ldr	r3, [pc, #12]	; (2220 <system_interrupt_set_priority+0x54>)
    2212:	6219      	str	r1, [r3, #32]
 */
enum status_code system_interrupt_set_priority(
		const enum system_interrupt_vector vector,
		const enum system_interrupt_priority_level priority_level)
{
	enum status_code status = STATUS_OK;
    2214:	2300      	movs	r3, #0
		Assert(false);
		status = STATUS_ERR_INVALID_ARG;
	}

	return status;
}
    2216:	1c18      	adds	r0, r3, #0
    2218:	bdf0      	pop	{r4, r5, r6, r7, pc}
    221a:	46c0      	nop			; (mov r8, r8)
    221c:	e000e100 	.word	0xe000e100
    2220:	e000ed00 	.word	0xe000ed00

00002224 <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
    2224:	b530      	push	{r4, r5, lr}

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    2226:	78d3      	ldrb	r3, [r2, #3]
    2228:	2b00      	cmp	r3, #0
    222a:	d11e      	bne.n	226a <_system_pinmux_config+0x46>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    222c:	7814      	ldrb	r4, [r2, #0]
    222e:	2c80      	cmp	r4, #128	; 0x80
    2230:	d004      	beq.n	223c <_system_pinmux_config+0x18>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    2232:	0624      	lsls	r4, r4, #24
    2234:	2380      	movs	r3, #128	; 0x80
    2236:	025b      	lsls	r3, r3, #9
    2238:	431c      	orrs	r4, r3
    223a:	e000      	b.n	223e <_system_pinmux_config+0x1a>
{
	Assert(port);
	Assert(config);

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;
    223c:	2400      	movs	r4, #0
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    223e:	7853      	ldrb	r3, [r2, #1]
    2240:	2502      	movs	r5, #2
    2242:	43ab      	bics	r3, r5
    2244:	d10a      	bne.n	225c <_system_pinmux_config+0x38>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    2246:	7893      	ldrb	r3, [r2, #2]
    2248:	2b00      	cmp	r3, #0
    224a:	d103      	bne.n	2254 <_system_pinmux_config+0x30>

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;
    224c:	2380      	movs	r3, #128	; 0x80
    224e:	029b      	lsls	r3, r3, #10
    2250:	431c      	orrs	r4, r3
    2252:	e002      	b.n	225a <_system_pinmux_config+0x36>

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    2254:	23c0      	movs	r3, #192	; 0xc0
    2256:	02db      	lsls	r3, r3, #11
    2258:	431c      	orrs	r4, r3
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    225a:	6041      	str	r1, [r0, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    225c:	7853      	ldrb	r3, [r2, #1]
    225e:	3b01      	subs	r3, #1
    2260:	2b01      	cmp	r3, #1
    2262:	d812      	bhi.n	228a <_system_pinmux_config+0x66>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Cannot use a pullup if the output driver is enabled,
			 * if requested the input buffer can only sample the current
			 * output state */
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    2264:	4b18      	ldr	r3, [pc, #96]	; (22c8 <_system_pinmux_config+0xa4>)
    2266:	401c      	ands	r4, r3
    2268:	e00f      	b.n	228a <_system_pinmux_config+0x66>
		}
	} else {
		port->DIRCLR.reg = pin_mask;
    226a:	6041      	str	r1, [r0, #4]
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    226c:	040b      	lsls	r3, r1, #16
    226e:	0c1b      	lsrs	r3, r3, #16

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    2270:	24a0      	movs	r4, #160	; 0xa0
    2272:	05e4      	lsls	r4, r4, #23
    2274:	4323      	orrs	r3, r4
	uint32_t upper_pin_mask = (pin_mask >> 16);

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    2276:	6283      	str	r3, [r0, #40]	; 0x28
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
	uint32_t upper_pin_mask = (pin_mask >> 16);
    2278:	0c0b      	lsrs	r3, r1, #16

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    227a:	24d0      	movs	r4, #208	; 0xd0
    227c:	0624      	lsls	r4, r4, #24
    227e:	4323      	orrs	r3, r4
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    2280:	6283      	str	r3, [r0, #40]	; 0x28
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    2282:	78d3      	ldrb	r3, [r2, #3]
    2284:	2b00      	cmp	r3, #0
    2286:	d018      	beq.n	22ba <_system_pinmux_config+0x96>
    2288:	e01c      	b.n	22c4 <_system_pinmux_config+0xa0>
		port->DIRCLR.reg = pin_mask;
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    228a:	040b      	lsls	r3, r1, #16
    228c:	0c1b      	lsrs	r3, r3, #16
    228e:	25a0      	movs	r5, #160	; 0xa0
    2290:	05ed      	lsls	r5, r5, #23
    2292:	432b      	orrs	r3, r5

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    2294:	4323      	orrs	r3, r4
	uint32_t upper_pin_mask = (pin_mask >> 16);

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    2296:	6283      	str	r3, [r0, #40]	; 0x28
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
	uint32_t upper_pin_mask = (pin_mask >> 16);
    2298:	0c0b      	lsrs	r3, r1, #16
    229a:	25d0      	movs	r5, #208	; 0xd0
    229c:	062d      	lsls	r5, r5, #24
    229e:	432b      	orrs	r3, r5

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    22a0:	4323      	orrs	r3, r4
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    22a2:	6283      	str	r3, [r0, #40]	; 0x28
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    22a4:	78d3      	ldrb	r3, [r2, #3]
    22a6:	2b00      	cmp	r3, #0
    22a8:	d10c      	bne.n	22c4 <_system_pinmux_config+0xa0>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    22aa:	0363      	lsls	r3, r4, #13
    22ac:	d505      	bpl.n	22ba <_system_pinmux_config+0x96>
			/* Set the OUT register bits to enable the pullup if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    22ae:	7893      	ldrb	r3, [r2, #2]
    22b0:	2b01      	cmp	r3, #1
    22b2:	d101      	bne.n	22b8 <_system_pinmux_config+0x94>
				port->OUTSET.reg = pin_mask;
    22b4:	6181      	str	r1, [r0, #24]
    22b6:	e000      	b.n	22ba <_system_pinmux_config+0x96>
			} else {
				port->OUTCLR.reg = pin_mask;
    22b8:	6141      	str	r1, [r0, #20]
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    22ba:	7853      	ldrb	r3, [r2, #1]
    22bc:	3b01      	subs	r3, #1
    22be:	2b01      	cmp	r3, #1
    22c0:	d800      	bhi.n	22c4 <_system_pinmux_config+0xa0>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
    22c2:	6081      	str	r1, [r0, #8]
		}
	}
}
    22c4:	bd30      	pop	{r4, r5, pc}
    22c6:	46c0      	nop			; (mov r8, r8)
    22c8:	fffbffff 	.word	0xfffbffff

000022cc <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin.
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    22cc:	b508      	push	{r3, lr}
    22ce:	1c03      	adds	r3, r0, #0
    22d0:	1c0a      	adds	r2, r1, #0
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports. */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    22d2:	09c1      	lsrs	r1, r0, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
    22d4:	2000      	movs	r0, #0
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports. */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    22d6:	2900      	cmp	r1, #0
    22d8:	d104      	bne.n	22e4 <system_pinmux_pin_set_config+0x18>
		return &(ports[port_index]->Group[group_index]);
    22da:	0958      	lsrs	r0, r3, #5
    22dc:	01c0      	lsls	r0, r0, #7
    22de:	4905      	ldr	r1, [pc, #20]	; (22f4 <system_pinmux_pin_set_config+0x28>)
    22e0:	468c      	mov	ip, r1
    22e2:	4460      	add	r0, ip
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
    22e4:	211f      	movs	r1, #31
    22e6:	400b      	ands	r3, r1
    22e8:	391e      	subs	r1, #30
    22ea:	4099      	lsls	r1, r3

	_system_pinmux_config(port, pin_mask, config);
    22ec:	4b02      	ldr	r3, [pc, #8]	; (22f8 <system_pinmux_pin_set_config+0x2c>)
    22ee:	4798      	blx	r3
}
    22f0:	bd08      	pop	{r3, pc}
    22f2:	46c0      	nop			; (mov r8, r8)
    22f4:	41004400 	.word	0x41004400
    22f8:	00002225 	.word	0x00002225

000022fc <_system_dummy_init>:
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
	return;
}
    22fc:	4770      	bx	lr
    22fe:	46c0      	nop			; (mov r8, r8)

00002300 <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    2300:	b508      	push	{r3, lr}
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    2302:	4b04      	ldr	r3, [pc, #16]	; (2314 <system_init+0x14>)
    2304:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    2306:	4b04      	ldr	r3, [pc, #16]	; (2318 <system_init+0x18>)
    2308:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    230a:	4b04      	ldr	r3, [pc, #16]	; (231c <system_init+0x1c>)
    230c:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    230e:	4b04      	ldr	r3, [pc, #16]	; (2320 <system_init+0x20>)
    2310:	4798      	blx	r3
}
    2312:	bd08      	pop	{r3, pc}
    2314:	00001d99 	.word	0x00001d99
    2318:	00000215 	.word	0x00000215
    231c:	000022fd 	.word	0x000022fd
    2320:	000002fd 	.word	0x000002fd

00002324 <_tc_get_inst_index>:
 *
 * \return Index of the given TC module instance.
 */
uint8_t _tc_get_inst_index(
		Tc *const hw)
{
    2324:	b530      	push	{r4, r5, lr}
    2326:	b085      	sub	sp, #20
	/* List of available TC modules. */
	Tc *const tc_modules[TC_INST_NUM] = TC_INSTS;
    2328:	aa01      	add	r2, sp, #4
    232a:	4b0b      	ldr	r3, [pc, #44]	; (2358 <_tc_get_inst_index+0x34>)
    232c:	cb32      	ldmia	r3!, {r1, r4, r5}
    232e:	c232      	stmia	r2!, {r1, r4, r5}

	/* Find index for TC instance. */
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
		if (hw == tc_modules[i]) {
    2330:	9b01      	ldr	r3, [sp, #4]
    2332:	4283      	cmp	r3, r0
    2334:	d00a      	beq.n	234c <_tc_get_inst_index+0x28>
    2336:	9b02      	ldr	r3, [sp, #8]
    2338:	4283      	cmp	r3, r0
    233a:	d005      	beq.n	2348 <_tc_get_inst_index+0x24>
		}
	}

	/* Invalid data given. */
	Assert(false);
	return 0;
    233c:	2300      	movs	r3, #0
	/* List of available TC modules. */
	Tc *const tc_modules[TC_INST_NUM] = TC_INSTS;

	/* Find index for TC instance. */
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
		if (hw == tc_modules[i]) {
    233e:	9a03      	ldr	r2, [sp, #12]
    2340:	4282      	cmp	r2, r0
    2342:	d105      	bne.n	2350 <_tc_get_inst_index+0x2c>
{
	/* List of available TC modules. */
	Tc *const tc_modules[TC_INST_NUM] = TC_INSTS;

	/* Find index for TC instance. */
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    2344:	3302      	adds	r3, #2
    2346:	e002      	b.n	234e <_tc_get_inst_index+0x2a>
    2348:	2301      	movs	r3, #1
    234a:	e000      	b.n	234e <_tc_get_inst_index+0x2a>
    234c:	2300      	movs	r3, #0
		if (hw == tc_modules[i]) {
			return i;
    234e:	b2db      	uxtb	r3, r3
	}

	/* Invalid data given. */
	Assert(false);
	return 0;
}
    2350:	1c18      	adds	r0, r3, #0
    2352:	b005      	add	sp, #20
    2354:	bd30      	pop	{r4, r5, pc}
    2356:	46c0      	nop			; (mov r8, r8)
    2358:	00011e3c 	.word	0x00011e3c

0000235c <tc_init>:
 */
enum status_code tc_init(
		struct tc_module *const module_inst,
		Tc *const hw,
		const struct tc_config *const config)
{
    235c:	b5f0      	push	{r4, r5, r6, r7, lr}
    235e:	464f      	mov	r7, r9
    2360:	4646      	mov	r6, r8
    2362:	b4c0      	push	{r6, r7}
    2364:	b087      	sub	sp, #28
    2366:	1c04      	adds	r4, r0, #0
    2368:	1c0e      	adds	r6, r1, #0
    236a:	4690      	mov	r8, r2
	uint8_t ctrlbset_tmp = 0;
	/* Temporary variable to hold all updates to the CTRLC
	 * register before they are written to it */
	uint8_t ctrlc_tmp = 0;
	/* Temporary variable to hold TC instance number */
	uint8_t instance = _tc_get_inst_index(hw);
    236c:	1c08      	adds	r0, r1, #0
    236e:	4b91      	ldr	r3, [pc, #580]	; (25b4 <tc_init+0x258>)
    2370:	4798      	blx	r3
    2372:	4681      	mov	r9, r0

	/* Array of GLCK ID for different TC instances */
	uint8_t inst_gclk_id[] = TC_INST_GCLK_ID;
    2374:	4d90      	ldr	r5, [pc, #576]	; (25b8 <tc_init+0x25c>)
    2376:	1c29      	adds	r1, r5, #0
    2378:	310c      	adds	r1, #12
    237a:	a805      	add	r0, sp, #20
    237c:	2203      	movs	r2, #3
    237e:	4f8f      	ldr	r7, [pc, #572]	; (25bc <tc_init+0x260>)
    2380:	47b8      	blx	r7
	/* Array of PM APBC mask bit position for different TC instances */
	uint16_t inst_pm_apbmask[] = TC_INST_PM_APBCMASK;
    2382:	1c29      	adds	r1, r5, #0
    2384:	3110      	adds	r1, #16
    2386:	a803      	add	r0, sp, #12
    2388:	2206      	movs	r2, #6
    238a:	47b8      	blx	r7
	struct system_gclk_chan_config gclk_chan_config;

#if TC_ASYNC == true
	/* Initialize parameters */
	for (uint8_t i = 0; i < TC_CALLBACK_N; i++) {
		module_inst->callback[i]        = NULL;
    238c:	2300      	movs	r3, #0
    238e:	60a3      	str	r3, [r4, #8]
    2390:	60e3      	str	r3, [r4, #12]
    2392:	6123      	str	r3, [r4, #16]
    2394:	6163      	str	r3, [r4, #20]
	}
	module_inst->register_callback_mask     = 0x00;
    2396:	7623      	strb	r3, [r4, #24]
	module_inst->enable_callback_mask       = 0x00;
    2398:	7663      	strb	r3, [r4, #25]

	/* Register this instance for callbacks*/
	_tc_instances[instance] = module_inst;
    239a:	464b      	mov	r3, r9
    239c:	009a      	lsls	r2, r3, #2
    239e:	4b88      	ldr	r3, [pc, #544]	; (25c0 <tc_init+0x264>)
    23a0:	50d4      	str	r4, [r2, r3]
#endif

	/* Associate the given device instance with the hardware module */
	module_inst->hw = hw;
    23a2:	6026      	str	r6, [r4, #0]
#else
	/* Check if odd numbered TC modules are being configured in 32-bit
	 * counter size. Only even numbered counters are allowed to be
	 * configured in 32-bit counter size.
	 */
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT) &&
    23a4:	4643      	mov	r3, r8
    23a6:	789b      	ldrb	r3, [r3, #2]
    23a8:	2b08      	cmp	r3, #8
    23aa:	d104      	bne.n	23b6 <tc_init+0x5a>
			((instance + TC_INSTANCE_OFFSET) & 0x01)) {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    23ac:	2017      	movs	r0, #23
#else
	/* Check if odd numbered TC modules are being configured in 32-bit
	 * counter size. Only even numbered counters are allowed to be
	 * configured in 32-bit counter size.
	 */
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT) &&
    23ae:	464a      	mov	r2, r9
    23b0:	07d2      	lsls	r2, r2, #31
    23b2:	d400      	bmi.n	23b6 <tc_init+0x5a>
    23b4:	e0f9      	b.n	25aa <tc_init+0x24e>
#endif

	/* Make the counter size variable in the module_inst struct reflect
	 * the counter size in the module
	 */
	module_inst->counter_size = config->counter_size;
    23b6:	7123      	strb	r3, [r4, #4]

	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_SWRST) {
    23b8:	8833      	ldrh	r3, [r6, #0]
		/* We are in the middle of a reset. Abort. */
		return STATUS_BUSY;
    23ba:	2005      	movs	r0, #5
	/* Make the counter size variable in the module_inst struct reflect
	 * the counter size in the module
	 */
	module_inst->counter_size = config->counter_size;

	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_SWRST) {
    23bc:	07db      	lsls	r3, r3, #31
    23be:	d500      	bpl.n	23c2 <tc_init+0x66>
    23c0:	e0f3      	b.n	25aa <tc_init+0x24e>
		/* We are in the middle of a reset. Abort. */
		return STATUS_BUSY;
	}

	if (hw->COUNT8.STATUS.reg & TC_STATUS_SLAVE) {
    23c2:	7bf3      	ldrb	r3, [r6, #15]
		/* Module is used as a slave */
		return STATUS_ERR_DENIED;
    23c4:	3017      	adds	r0, #23
	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_SWRST) {
		/* We are in the middle of a reset. Abort. */
		return STATUS_BUSY;
	}

	if (hw->COUNT8.STATUS.reg & TC_STATUS_SLAVE) {
    23c6:	06db      	lsls	r3, r3, #27
    23c8:	d500      	bpl.n	23cc <tc_init+0x70>
    23ca:	e0ee      	b.n	25aa <tc_init+0x24e>
		/* Module is used as a slave */
		return STATUS_ERR_DENIED;
	}

	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_ENABLE) {
    23cc:	8833      	ldrh	r3, [r6, #0]
    23ce:	079b      	lsls	r3, r3, #30
    23d0:	d500      	bpl.n	23d4 <tc_init+0x78>
    23d2:	e0ea      	b.n	25aa <tc_init+0x24e>
		/* Module must be disabled before initialization. Abort. */
		return STATUS_ERR_DENIED;
	}

	/* Set up the TC PWM out pin for channel 0 */
	if (config->pwm_channel[0].enabled) {
    23d4:	4643      	mov	r3, r8
    23d6:	7c1b      	ldrb	r3, [r3, #16]
    23d8:	2b00      	cmp	r3, #0
    23da:	d00c      	beq.n	23f6 <tc_init+0x9a>
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    23dc:	a902      	add	r1, sp, #8
    23de:	2301      	movs	r3, #1
    23e0:	708b      	strb	r3, [r1, #2]
	config->powersave    = false;
    23e2:	2200      	movs	r2, #0
    23e4:	70ca      	strb	r2, [r1, #3]
		system_pinmux_get_config_defaults(&pin_config);
		pin_config.mux_position = config->pwm_channel[0].pin_mux;
    23e6:	4642      	mov	r2, r8
    23e8:	7e12      	ldrb	r2, [r2, #24]
    23ea:	700a      	strb	r2, [r1, #0]
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
    23ec:	704b      	strb	r3, [r1, #1]
		system_pinmux_pin_set_config(
    23ee:	4643      	mov	r3, r8
    23f0:	7d18      	ldrb	r0, [r3, #20]
    23f2:	4b74      	ldr	r3, [pc, #464]	; (25c4 <tc_init+0x268>)
    23f4:	4798      	blx	r3
				config->pwm_channel[0].pin_out, &pin_config);
	}

	/* Set up the TC PWM out pin for channel 1 */
	if (config->pwm_channel[1].enabled) {
    23f6:	4643      	mov	r3, r8
    23f8:	7f1b      	ldrb	r3, [r3, #28]
    23fa:	2b00      	cmp	r3, #0
    23fc:	d00d      	beq.n	241a <tc_init+0xbe>
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    23fe:	a902      	add	r1, sp, #8
    2400:	2301      	movs	r3, #1
    2402:	708b      	strb	r3, [r1, #2]
	config->powersave    = false;
    2404:	2200      	movs	r2, #0
    2406:	70ca      	strb	r2, [r1, #3]
		system_pinmux_get_config_defaults(&pin_config);
		pin_config.mux_position = config->pwm_channel[1].pin_mux;
    2408:	4642      	mov	r2, r8
    240a:	6a52      	ldr	r2, [r2, #36]	; 0x24
    240c:	700a      	strb	r2, [r1, #0]
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
    240e:	704b      	strb	r3, [r1, #1]
		system_pinmux_pin_set_config(
    2410:	4643      	mov	r3, r8
    2412:	6a1b      	ldr	r3, [r3, #32]
    2414:	b2d8      	uxtb	r0, r3
    2416:	4b6b      	ldr	r3, [pc, #428]	; (25c4 <tc_init+0x268>)
    2418:	4798      	blx	r3
		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
			break;

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
    241a:	496b      	ldr	r1, [pc, #428]	; (25c8 <tc_init+0x26c>)
    241c:	6a0b      	ldr	r3, [r1, #32]
				config->pwm_channel[1].pin_out, &pin_config);
	}

	/* Enable the user interface clock in the PM */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC,
			inst_pm_apbmask[instance]);
    241e:	464a      	mov	r2, r9
    2420:	0052      	lsls	r2, r2, #1
		system_pinmux_pin_set_config(
				config->pwm_channel[1].pin_out, &pin_config);
	}

	/* Enable the user interface clock in the PM */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC,
    2422:	a803      	add	r0, sp, #12
    2424:	5a12      	ldrh	r2, [r2, r0]
    2426:	4313      	orrs	r3, r2
    2428:	620b      	str	r3, [r1, #32]
			inst_pm_apbmask[instance]);

	/* Enable the slave counter if counter_size is 32-bit */
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT))
    242a:	4643      	mov	r3, r8
    242c:	789b      	ldrb	r3, [r3, #2]
    242e:	2b08      	cmp	r3, #8
    2430:	d106      	bne.n	2440 <tc_init+0xe4>
    2432:	6a0b      	ldr	r3, [r1, #32]
	{
		/* Enable the user interface clock in the PM */
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC,
				inst_pm_apbmask[instance + 1]);
    2434:	464a      	mov	r2, r9
    2436:	3201      	adds	r2, #1
    2438:	0052      	lsls	r2, r2, #1

	/* Enable the slave counter if counter_size is 32-bit */
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT))
	{
		/* Enable the user interface clock in the PM */
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC,
    243a:	5a12      	ldrh	r2, [r2, r0]
    243c:	4313      	orrs	r3, r2
    243e:	620b      	str	r3, [r1, #32]
				inst_pm_apbmask[instance + 1]);
	}

	/* Setup clock for module */
	system_gclk_chan_get_config_defaults(&gclk_chan_config);
	gclk_chan_config.source_generator = config->clock_source;
    2440:	a901      	add	r1, sp, #4
    2442:	4643      	mov	r3, r8
    2444:	781b      	ldrb	r3, [r3, #0]
    2446:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(inst_gclk_id[instance], &gclk_chan_config);
    2448:	ab05      	add	r3, sp, #20
    244a:	464a      	mov	r2, r9
    244c:	5c9d      	ldrb	r5, [r3, r2]
    244e:	1c28      	adds	r0, r5, #0
    2450:	4b5e      	ldr	r3, [pc, #376]	; (25cc <tc_init+0x270>)
    2452:	4798      	blx	r3
	system_gclk_chan_enable(inst_gclk_id[instance]);
    2454:	1c28      	adds	r0, r5, #0
    2456:	4b5e      	ldr	r3, [pc, #376]	; (25d0 <tc_init+0x274>)
    2458:	4798      	blx	r3
    245a:	4643      	mov	r3, r8
    245c:	8898      	ldrh	r0, [r3, #4]
    245e:	891b      	ldrh	r3, [r3, #8]
    2460:	4303      	orrs	r3, r0

	/* Set ctrla register */
	ctrla_tmp =
    2462:	4642      	mov	r2, r8
    2464:	7990      	ldrb	r0, [r2, #6]
    2466:	7892      	ldrb	r2, [r2, #2]
    2468:	4310      	orrs	r0, r2
    246a:	4318      	orrs	r0, r3
			(uint32_t)config->counter_size |
			(uint32_t)config->wave_generation |
			(uint32_t)config->reload_action |
			(uint32_t)config->clock_prescaler;

	if (config->run_in_standby) {
    246c:	4643      	mov	r3, r8
    246e:	785b      	ldrb	r3, [r3, #1]
    2470:	2b00      	cmp	r3, #0
    2472:	d002      	beq.n	247a <tc_init+0x11e>
		ctrla_tmp |= TC_CTRLA_RUNSTDBY;
    2474:	2380      	movs	r3, #128	; 0x80
    2476:	011b      	lsls	r3, r3, #4
    2478:	4318      	orrs	r0, r3
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    247a:	6821      	ldr	r1, [r4, #0]

	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    247c:	227f      	movs	r2, #127	; 0x7f
    247e:	7bcb      	ldrb	r3, [r1, #15]
	}

	/* Write configuration to register */
	while (tc_is_syncing(module_inst)) {
    2480:	4393      	bics	r3, r2
    2482:	d1fc      	bne.n	247e <tc_init+0x122>
		/* Wait for sync */
	}
	hw->COUNT8.CTRLA.reg = ctrla_tmp;
    2484:	8030      	strh	r0, [r6, #0]

	/* Set ctrlb register */
	if (config->oneshot) {
    2486:	4643      	mov	r3, r8
    2488:	7b58      	ldrb	r0, [r3, #13]
		ctrlbset_tmp = TC_CTRLBSET_ONESHOT;
    248a:	1e43      	subs	r3, r0, #1
    248c:	4198      	sbcs	r0, r3
    248e:	0080      	lsls	r0, r0, #2
	}

	if (config->count_direction) {
    2490:	4643      	mov	r3, r8
    2492:	7b9b      	ldrb	r3, [r3, #14]
    2494:	2b00      	cmp	r3, #0
    2496:	d001      	beq.n	249c <tc_init+0x140>
		ctrlbset_tmp |= TC_CTRLBSET_DIR;
    2498:	2301      	movs	r3, #1
    249a:	4318      	orrs	r0, r3
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    249c:	6821      	ldr	r1, [r4, #0]

	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    249e:	227f      	movs	r2, #127	; 0x7f
    24a0:	7bcb      	ldrb	r3, [r1, #15]
	}

	/* Clear old ctrlb configuration */
	while (tc_is_syncing(module_inst)) {
    24a2:	4393      	bics	r3, r2
    24a4:	d1fc      	bne.n	24a0 <tc_init+0x144>
		/* Wait for sync */
	}
	hw->COUNT8.CTRLBCLR.reg = 0xFF;
    24a6:	33ff      	adds	r3, #255	; 0xff
    24a8:	7133      	strb	r3, [r6, #4]

	/* Check if we actually need to go into a wait state. */
	if (ctrlbset_tmp) {
    24aa:	2800      	cmp	r0, #0
    24ac:	d005      	beq.n	24ba <tc_init+0x15e>
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    24ae:	6821      	ldr	r1, [r4, #0]

	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    24b0:	227f      	movs	r2, #127	; 0x7f
    24b2:	7bcb      	ldrb	r3, [r1, #15]
		while (tc_is_syncing(module_inst)) {
    24b4:	4393      	bics	r3, r2
    24b6:	d1fc      	bne.n	24b2 <tc_init+0x156>
			/* Wait for sync */
		}
		/* Write configuration to register */
		hw->COUNT8.CTRLBSET.reg = ctrlbset_tmp;
    24b8:	7170      	strb	r0, [r6, #5]
	}

	/* Set ctrlc register*/
	ctrlc_tmp = config->waveform_invert_output;
    24ba:	4643      	mov	r3, r8
    24bc:	7a98      	ldrb	r0, [r3, #10]
	for (uint8_t i = 0; i < NUMBER_OF_COMPARE_CAPTURE_CHANNELS; i++) {
		if (config->enable_capture_on_channel[i] == true) {
    24be:	7adb      	ldrb	r3, [r3, #11]
    24c0:	2b00      	cmp	r3, #0
    24c2:	d001      	beq.n	24c8 <tc_init+0x16c>
			ctrlc_tmp |= (TC_CTRLC_CPTEN(1) << i);
    24c4:	2310      	movs	r3, #16
    24c6:	4318      	orrs	r0, r3
	}

	/* Set ctrlc register*/
	ctrlc_tmp = config->waveform_invert_output;
	for (uint8_t i = 0; i < NUMBER_OF_COMPARE_CAPTURE_CHANNELS; i++) {
		if (config->enable_capture_on_channel[i] == true) {
    24c8:	4643      	mov	r3, r8
    24ca:	7b1b      	ldrb	r3, [r3, #12]
    24cc:	2b00      	cmp	r3, #0
    24ce:	d001      	beq.n	24d4 <tc_init+0x178>
			ctrlc_tmp |= (TC_CTRLC_CPTEN(1) << i);
    24d0:	2320      	movs	r3, #32
    24d2:	4318      	orrs	r0, r3
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    24d4:	6821      	ldr	r1, [r4, #0]

	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    24d6:	227f      	movs	r2, #127	; 0x7f
    24d8:	7bcb      	ldrb	r3, [r1, #15]
		}
	}

	/* Write configuration to register */
	while (tc_is_syncing(module_inst)) {
    24da:	4393      	bics	r3, r2
    24dc:	d1fc      	bne.n	24d8 <tc_init+0x17c>
		/* Wait for sync */
	}
	hw->COUNT8.CTRLC.reg = ctrlc_tmp;
    24de:	71b0      	strb	r0, [r6, #6]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    24e0:	6822      	ldr	r2, [r4, #0]

	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    24e2:	217f      	movs	r1, #127	; 0x7f
    24e4:	7bd3      	ldrb	r3, [r2, #15]

	/* Write configuration to register */
	while (tc_is_syncing(module_inst)) {
    24e6:	438b      	bics	r3, r1
    24e8:	d1fc      	bne.n	24e4 <tc_init+0x188>
		/* Wait for sync */
	}

	/* Switch for TC counter size  */
	switch (module_inst->counter_size) {
    24ea:	7923      	ldrb	r3, [r4, #4]
    24ec:	2b04      	cmp	r3, #4
    24ee:	d005      	beq.n	24fc <tc_init+0x1a0>
    24f0:	2b08      	cmp	r3, #8
    24f2:	d041      	beq.n	2578 <tc_init+0x21c>

			return STATUS_OK;
	}

	Assert(false);
	return STATUS_ERR_INVALID_ARG;
    24f4:	2017      	movs	r0, #23
	while (tc_is_syncing(module_inst)) {
		/* Wait for sync */
	}

	/* Switch for TC counter size  */
	switch (module_inst->counter_size) {
    24f6:	2b00      	cmp	r3, #0
    24f8:	d157      	bne.n	25aa <tc_init+0x24e>
    24fa:	e024      	b.n	2546 <tc_init+0x1ea>
    24fc:	217f      	movs	r1, #127	; 0x7f
    24fe:	7bd3      	ldrb	r3, [r2, #15]
		case TC_COUNTER_SIZE_8BIT:
			while (tc_is_syncing(module_inst)) {
    2500:	438b      	bics	r3, r1
    2502:	d1fc      	bne.n	24fe <tc_init+0x1a2>
				/* Wait for sync */
			}

			hw->COUNT8.COUNT.reg =
					config->counter_8_bit.value;
    2504:	3328      	adds	r3, #40	; 0x28
    2506:	4642      	mov	r2, r8
    2508:	5cd3      	ldrb	r3, [r2, r3]
		case TC_COUNTER_SIZE_8BIT:
			while (tc_is_syncing(module_inst)) {
				/* Wait for sync */
			}

			hw->COUNT8.COUNT.reg =
    250a:	7433      	strb	r3, [r6, #16]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    250c:	6821      	ldr	r1, [r4, #0]

	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    250e:	227f      	movs	r2, #127	; 0x7f
    2510:	7bcb      	ldrb	r3, [r1, #15]
					config->counter_8_bit.value;


			while (tc_is_syncing(module_inst)) {
    2512:	4393      	bics	r3, r2
    2514:	d1fc      	bne.n	2510 <tc_init+0x1b4>
				/* Wait for sync */
			}

			hw->COUNT8.PER.reg =
					config->counter_8_bit.period;
    2516:	3329      	adds	r3, #41	; 0x29
    2518:	4642      	mov	r2, r8
    251a:	5cd3      	ldrb	r3, [r2, r3]

			while (tc_is_syncing(module_inst)) {
				/* Wait for sync */
			}

			hw->COUNT8.PER.reg =
    251c:	7533      	strb	r3, [r6, #20]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    251e:	6821      	ldr	r1, [r4, #0]

	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    2520:	227f      	movs	r2, #127	; 0x7f
    2522:	7bcb      	ldrb	r3, [r1, #15]
					config->counter_8_bit.period;

			while (tc_is_syncing(module_inst)) {
    2524:	4393      	bics	r3, r2
    2526:	d1fc      	bne.n	2522 <tc_init+0x1c6>
				/* Wait for sync */
			}

			hw->COUNT8.CC[0].reg =
					config->counter_8_bit.compare_capture_channel[0];
    2528:	332a      	adds	r3, #42	; 0x2a
    252a:	4642      	mov	r2, r8
    252c:	5cd3      	ldrb	r3, [r2, r3]

			while (tc_is_syncing(module_inst)) {
				/* Wait for sync */
			}

			hw->COUNT8.CC[0].reg =
    252e:	7633      	strb	r3, [r6, #24]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    2530:	6821      	ldr	r1, [r4, #0]

	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    2532:	227f      	movs	r2, #127	; 0x7f
    2534:	7bcb      	ldrb	r3, [r1, #15]
					config->counter_8_bit.compare_capture_channel[0];

			while (tc_is_syncing(module_inst)) {
    2536:	4393      	bics	r3, r2
    2538:	d1fc      	bne.n	2534 <tc_init+0x1d8>
				/* Wait for sync */
			}

			hw->COUNT8.CC[1].reg =
					config->counter_8_bit.compare_capture_channel[1];
    253a:	332b      	adds	r3, #43	; 0x2b
    253c:	4642      	mov	r2, r8
    253e:	5cd3      	ldrb	r3, [r2, r3]

			while (tc_is_syncing(module_inst)) {
				/* Wait for sync */
			}

			hw->COUNT8.CC[1].reg =
    2540:	7673      	strb	r3, [r6, #25]
					config->counter_8_bit.compare_capture_channel[1];

			return STATUS_OK;
    2542:	2000      	movs	r0, #0
    2544:	e031      	b.n	25aa <tc_init+0x24e>
    2546:	217f      	movs	r1, #127	; 0x7f
    2548:	7bd3      	ldrb	r3, [r2, #15]

		case TC_COUNTER_SIZE_16BIT:
			while (tc_is_syncing(module_inst)) {
    254a:	438b      	bics	r3, r1
    254c:	d1fc      	bne.n	2548 <tc_init+0x1ec>
				/* Wait for sync */
			}

			hw->COUNT16.COUNT.reg
				= config->counter_16_bit.value;
    254e:	4643      	mov	r3, r8
    2550:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    2552:	8233      	strh	r3, [r6, #16]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    2554:	6821      	ldr	r1, [r4, #0]

	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    2556:	227f      	movs	r2, #127	; 0x7f
    2558:	7bcb      	ldrb	r3, [r1, #15]

			while (tc_is_syncing(module_inst)) {
    255a:	4393      	bics	r3, r2
    255c:	d1fc      	bne.n	2558 <tc_init+0x1fc>
				/* Wait for sync */
			}

			hw->COUNT16.CC[0].reg =
					config->counter_16_bit.compare_capture_channel[0];
    255e:	4643      	mov	r3, r8
    2560:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a

			while (tc_is_syncing(module_inst)) {
				/* Wait for sync */
			}

			hw->COUNT16.CC[0].reg =
    2562:	8333      	strh	r3, [r6, #24]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    2564:	6821      	ldr	r1, [r4, #0]

	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    2566:	227f      	movs	r2, #127	; 0x7f
    2568:	7bcb      	ldrb	r3, [r1, #15]
					config->counter_16_bit.compare_capture_channel[0];

			while (tc_is_syncing(module_inst)) {
    256a:	4393      	bics	r3, r2
    256c:	d1fc      	bne.n	2568 <tc_init+0x20c>
				/* Wait for sync */
			}

			hw->COUNT16.CC[1].reg =
					config->counter_16_bit.compare_capture_channel[1];
    256e:	4643      	mov	r3, r8
    2570:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c

			while (tc_is_syncing(module_inst)) {
				/* Wait for sync */
			}

			hw->COUNT16.CC[1].reg =
    2572:	8373      	strh	r3, [r6, #26]
					config->counter_16_bit.compare_capture_channel[1];

			return STATUS_OK;
    2574:	2000      	movs	r0, #0
    2576:	e018      	b.n	25aa <tc_init+0x24e>
    2578:	217f      	movs	r1, #127	; 0x7f
    257a:	7bd3      	ldrb	r3, [r2, #15]

		case TC_COUNTER_SIZE_32BIT:
			while (tc_is_syncing(module_inst)) {
    257c:	438b      	bics	r3, r1
    257e:	d1fc      	bne.n	257a <tc_init+0x21e>
				/* Wait for sync */
			}

			hw->COUNT32.COUNT.reg
				= config->counter_32_bit.value;
    2580:	4643      	mov	r3, r8
    2582:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    2584:	6133      	str	r3, [r6, #16]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    2586:	6821      	ldr	r1, [r4, #0]

	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    2588:	227f      	movs	r2, #127	; 0x7f
    258a:	7bcb      	ldrb	r3, [r1, #15]

			while (tc_is_syncing(module_inst)) {
    258c:	4393      	bics	r3, r2
    258e:	d1fc      	bne.n	258a <tc_init+0x22e>
				/* Wait for sync */
			}

			hw->COUNT32.CC[0].reg =
    2590:	4643      	mov	r3, r8
    2592:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    2594:	61b3      	str	r3, [r6, #24]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    2596:	6821      	ldr	r1, [r4, #0]

	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    2598:	227f      	movs	r2, #127	; 0x7f
    259a:	7bcb      	ldrb	r3, [r1, #15]
					config->counter_32_bit.compare_capture_channel[0];

			while (tc_is_syncing(module_inst)) {
    259c:	4393      	bics	r3, r2
    259e:	d1fc      	bne.n	259a <tc_init+0x23e>
				/* Wait for sync */
			}

			hw->COUNT32.CC[1].reg =
					config->counter_32_bit.compare_capture_channel[1];
    25a0:	4643      	mov	r3, r8
    25a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30

			while (tc_is_syncing(module_inst)) {
				/* Wait for sync */
			}

			hw->COUNT32.CC[1].reg =
    25a4:	61f3      	str	r3, [r6, #28]
					config->counter_32_bit.compare_capture_channel[1];

			return STATUS_OK;
    25a6:	2000      	movs	r0, #0
    25a8:	e7ff      	b.n	25aa <tc_init+0x24e>
	}

	Assert(false);
	return STATUS_ERR_INVALID_ARG;
}
    25aa:	b007      	add	sp, #28
    25ac:	bc0c      	pop	{r2, r3}
    25ae:	4690      	mov	r8, r2
    25b0:	4699      	mov	r9, r3
    25b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    25b4:	00002325 	.word	0x00002325
    25b8:	00011e3c 	.word	0x00011e3c
    25bc:	000108e7 	.word	0x000108e7
    25c0:	20002ae8 	.word	0x20002ae8
    25c4:	000022cd 	.word	0x000022cd
    25c8:	40000400 	.word	0x40000400
    25cc:	0000217d 	.word	0x0000217d
    25d0:	000020f1 	.word	0x000020f1

000025d4 <tc_get_count_value>:
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	Tc *const tc_module = module_inst->hw;
    25d4:	6802      	ldr	r2, [r0, #0]
    25d6:	217f      	movs	r1, #127	; 0x7f
    25d8:	7bd3      	ldrb	r3, [r2, #15]

	while (tc_is_syncing(module_inst)) {
    25da:	438b      	bics	r3, r1
    25dc:	d1fc      	bne.n	25d8 <tc_get_count_value+0x4>
		/* Wait for sync */
	}

	/* Read from based on the TC counter size */
	switch (module_inst->counter_size) {
    25de:	7903      	ldrb	r3, [r0, #4]
    25e0:	2b04      	cmp	r3, #4
    25e2:	d005      	beq.n	25f0 <tc_get_count_value+0x1c>
    25e4:	2b08      	cmp	r3, #8
    25e6:	d009      	beq.n	25fc <tc_get_count_value+0x28>
		case TC_COUNTER_SIZE_32BIT:
			return tc_module->COUNT32.COUNT.reg;
	}

	Assert(false);
	return 0;
    25e8:	2000      	movs	r0, #0
	while (tc_is_syncing(module_inst)) {
		/* Wait for sync */
	}

	/* Read from based on the TC counter size */
	switch (module_inst->counter_size) {
    25ea:	2b00      	cmp	r3, #0
    25ec:	d108      	bne.n	2600 <tc_get_count_value+0x2c>
    25ee:	e002      	b.n	25f6 <tc_get_count_value+0x22>
		case TC_COUNTER_SIZE_8BIT:
			return (uint32_t)tc_module->COUNT8.COUNT.reg;
    25f0:	7c10      	ldrb	r0, [r2, #16]
    25f2:	b2c0      	uxtb	r0, r0
    25f4:	e004      	b.n	2600 <tc_get_count_value+0x2c>

		case TC_COUNTER_SIZE_16BIT:
			return (uint32_t)tc_module->COUNT16.COUNT.reg;
    25f6:	8a10      	ldrh	r0, [r2, #16]
    25f8:	b280      	uxth	r0, r0
    25fa:	e001      	b.n	2600 <tc_get_count_value+0x2c>

		case TC_COUNTER_SIZE_32BIT:
			return tc_module->COUNT32.COUNT.reg;
    25fc:	6910      	ldr	r0, [r2, #16]
    25fe:	e7ff      	b.n	2600 <tc_get_count_value+0x2c>
	}

	Assert(false);
	return 0;
}
    2600:	4770      	bx	lr
    2602:	46c0      	nop			; (mov r8, r8)

00002604 <tc_set_compare_value>:
 */
enum status_code tc_set_compare_value(
		const struct tc_module *const module_inst,
		const enum tc_compare_capture_channel channel_index,
		const uint32_t compare)
{
    2604:	b530      	push	{r4, r5, lr}
	Assert(module_inst);
	Assert(module_inst->hw);
	Assert(compare);

	/* Get a pointer to the module's hardware instance */
	Tc *const tc_module = module_inst->hw;
    2606:	6804      	ldr	r4, [r0, #0]
    2608:	257f      	movs	r5, #127	; 0x7f
    260a:	7be3      	ldrb	r3, [r4, #15]

	while (tc_is_syncing(module_inst)) {
    260c:	43ab      	bics	r3, r5
    260e:	d1fc      	bne.n	260a <tc_set_compare_value+0x6>
		/* Wait for sync */
	}

	/* Read out based on the TC counter size */
	switch (module_inst->counter_size) {
    2610:	7903      	ldrb	r3, [r0, #4]
    2612:	2b04      	cmp	r3, #4
    2614:	d005      	beq.n	2622 <tc_set_compare_value+0x1e>
    2616:	2b08      	cmp	r3, #8
    2618:	d014      	beq.n	2644 <tc_set_compare_value+0x40>
						(uint32_t)compare;
				return STATUS_OK;
			}
	}

	return STATUS_ERR_INVALID_ARG;
    261a:	2017      	movs	r0, #23
	while (tc_is_syncing(module_inst)) {
		/* Wait for sync */
	}

	/* Read out based on the TC counter size */
	switch (module_inst->counter_size) {
    261c:	2b00      	cmp	r3, #0
    261e:	d119      	bne.n	2654 <tc_set_compare_value+0x50>
    2620:	e007      	b.n	2632 <tc_set_compare_value+0x2e>
						(uint32_t)compare;
				return STATUS_OK;
			}
	}

	return STATUS_ERR_INVALID_ARG;
    2622:	2017      	movs	r0, #23
	}

	/* Read out based on the TC counter size */
	switch (module_inst->counter_size) {
		case TC_COUNTER_SIZE_8BIT:
			if (channel_index <
    2624:	2901      	cmp	r1, #1
    2626:	d815      	bhi.n	2654 <tc_set_compare_value+0x50>
					NUMBER_OF_COMPARE_CAPTURE_CHANNELS) {
				tc_module->COUNT8.CC[channel_index].reg  =
						(uint8_t)compare;
    2628:	b2d2      	uxtb	r2, r2
	/* Read out based on the TC counter size */
	switch (module_inst->counter_size) {
		case TC_COUNTER_SIZE_8BIT:
			if (channel_index <
					NUMBER_OF_COMPARE_CAPTURE_CHANNELS) {
				tc_module->COUNT8.CC[channel_index].reg  =
    262a:	1861      	adds	r1, r4, r1
    262c:	760a      	strb	r2, [r1, #24]
						(uint8_t)compare;
				return STATUS_OK;
    262e:	2000      	movs	r0, #0
    2630:	e010      	b.n	2654 <tc_set_compare_value+0x50>
						(uint32_t)compare;
				return STATUS_OK;
			}
	}

	return STATUS_ERR_INVALID_ARG;
    2632:	2017      	movs	r0, #23
						(uint8_t)compare;
				return STATUS_OK;
			}

		case TC_COUNTER_SIZE_16BIT:
			if (channel_index <
    2634:	2901      	cmp	r1, #1
    2636:	d80d      	bhi.n	2654 <tc_set_compare_value+0x50>
					NUMBER_OF_COMPARE_CAPTURE_CHANNELS) {
				tc_module->COUNT16.CC[channel_index].reg =
						(uint16_t)compare;
    2638:	b292      	uxth	r2, r2
			}

		case TC_COUNTER_SIZE_16BIT:
			if (channel_index <
					NUMBER_OF_COMPARE_CAPTURE_CHANNELS) {
				tc_module->COUNT16.CC[channel_index].reg =
    263a:	310c      	adds	r1, #12
    263c:	0049      	lsls	r1, r1, #1
    263e:	530a      	strh	r2, [r1, r4]
						(uint16_t)compare;
				return STATUS_OK;
    2640:	2000      	movs	r0, #0
    2642:	e007      	b.n	2654 <tc_set_compare_value+0x50>
						(uint32_t)compare;
				return STATUS_OK;
			}
	}

	return STATUS_ERR_INVALID_ARG;
    2644:	2017      	movs	r0, #23
						(uint16_t)compare;
				return STATUS_OK;
			}

		case TC_COUNTER_SIZE_32BIT:
			if (channel_index <
    2646:	2901      	cmp	r1, #1
    2648:	d804      	bhi.n	2654 <tc_set_compare_value+0x50>
					NUMBER_OF_COMPARE_CAPTURE_CHANNELS) {
				tc_module->COUNT32.CC[channel_index].reg =
    264a:	3106      	adds	r1, #6
    264c:	0089      	lsls	r1, r1, #2
    264e:	510a      	str	r2, [r1, r4]
						(uint32_t)compare;
				return STATUS_OK;
    2650:	2000      	movs	r0, #0
    2652:	e7ff      	b.n	2654 <tc_set_compare_value+0x50>
			}
	}

	return STATUS_ERR_INVALID_ARG;
}
    2654:	bd30      	pop	{r4, r5, pc}
    2656:	46c0      	nop			; (mov r8, r8)

00002658 <tc_register_callback>:
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
    2658:	1c93      	adds	r3, r2, #2
    265a:	009b      	lsls	r3, r3, #2
    265c:	5019      	str	r1, [r3, r0]

	/* Set the bit corresponding to the callback_type */
	if (callback_type == TC_CALLBACK_CC_CHANNEL0) {
    265e:	2a02      	cmp	r2, #2
    2660:	d104      	bne.n	266c <tc_register_callback+0x14>
		module->register_callback_mask |= TC_INTFLAG_MC(1);
    2662:	7e02      	ldrb	r2, [r0, #24]
    2664:	2310      	movs	r3, #16
    2666:	4313      	orrs	r3, r2
    2668:	7603      	strb	r3, [r0, #24]
    266a:	e00c      	b.n	2686 <tc_register_callback+0x2e>
	}
	else if (callback_type == TC_CALLBACK_CC_CHANNEL1) {
    266c:	2a03      	cmp	r2, #3
    266e:	d104      	bne.n	267a <tc_register_callback+0x22>
		module->register_callback_mask |= TC_INTFLAG_MC(2);
    2670:	7e02      	ldrb	r2, [r0, #24]
    2672:	2320      	movs	r3, #32
    2674:	4313      	orrs	r3, r2
    2676:	7603      	strb	r3, [r0, #24]
    2678:	e005      	b.n	2686 <tc_register_callback+0x2e>
	}
	else {
		module->register_callback_mask |= (1 << callback_type);
    267a:	2301      	movs	r3, #1
    267c:	4093      	lsls	r3, r2
    267e:	1c1a      	adds	r2, r3, #0
    2680:	7e03      	ldrb	r3, [r0, #24]
    2682:	431a      	orrs	r2, r3
    2684:	7602      	strb	r2, [r0, #24]
	}
	return STATUS_OK;
}
    2686:	2000      	movs	r0, #0
    2688:	4770      	bx	lr
    268a:	46c0      	nop			; (mov r8, r8)

0000268c <_tc_interrupt_handler>:
 * \param[in]  instance  ID of the TC instance calling the interrupt
 *                       handler.
 */
void _tc_interrupt_handler(
		uint8_t instance)
{
    268c:	b538      	push	{r3, r4, r5, lr}
	/* Temporary variable */
	uint8_t interrupt_and_callback_status_mask;

	/* Get device instance from the look-up table */
	struct tc_module *module
    268e:	0080      	lsls	r0, r0, #2
    2690:	4b14      	ldr	r3, [pc, #80]	; (26e4 <_tc_interrupt_handler+0x58>)
    2692:	58c5      	ldr	r5, [r0, r3]
			= (struct tc_module *)_tc_instances[instance];

	/* Read and mask interrupt flag register */
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
    2694:	682b      	ldr	r3, [r5, #0]
    2696:	7b9c      	ldrb	r4, [r3, #14]
    2698:	7e2b      	ldrb	r3, [r5, #24]
    269a:	401c      	ands	r4, r3
    269c:	7e6b      	ldrb	r3, [r5, #25]
    269e:	401c      	ands	r4, r3
			module->register_callback_mask &
			module->enable_callback_mask;

	/* Check if an Overflow interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_OVF) {
    26a0:	07e3      	lsls	r3, r4, #31
    26a2:	d505      	bpl.n	26b0 <_tc_interrupt_handler+0x24>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_OVERFLOW])(module);
    26a4:	1c28      	adds	r0, r5, #0
    26a6:	68ab      	ldr	r3, [r5, #8]
    26a8:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_OVF;
    26aa:	2301      	movs	r3, #1
    26ac:	682a      	ldr	r2, [r5, #0]
    26ae:	7393      	strb	r3, [r2, #14]
	}

	/* Check if an Error interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_ERR) {
    26b0:	07a3      	lsls	r3, r4, #30
    26b2:	d505      	bpl.n	26c0 <_tc_interrupt_handler+0x34>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_ERROR])(module);
    26b4:	1c28      	adds	r0, r5, #0
    26b6:	68eb      	ldr	r3, [r5, #12]
    26b8:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_ERR;
    26ba:	2302      	movs	r3, #2
    26bc:	682a      	ldr	r2, [r5, #0]
    26be:	7393      	strb	r3, [r2, #14]
	}

	/* Check if an Match/Capture Channel 0 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(1)) {
    26c0:	06e3      	lsls	r3, r4, #27
    26c2:	d505      	bpl.n	26d0 <_tc_interrupt_handler+0x44>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_CC_CHANNEL0])(module);
    26c4:	1c28      	adds	r0, r5, #0
    26c6:	692b      	ldr	r3, [r5, #16]
    26c8:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(1);
    26ca:	2310      	movs	r3, #16
    26cc:	682a      	ldr	r2, [r5, #0]
    26ce:	7393      	strb	r3, [r2, #14]
	}

	/* Check if an Match/Capture Channel 1 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(2)) {
    26d0:	06a3      	lsls	r3, r4, #26
    26d2:	d505      	bpl.n	26e0 <_tc_interrupt_handler+0x54>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_CC_CHANNEL1])(module);
    26d4:	1c28      	adds	r0, r5, #0
    26d6:	696b      	ldr	r3, [r5, #20]
    26d8:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(2);
    26da:	682b      	ldr	r3, [r5, #0]
    26dc:	2220      	movs	r2, #32
    26de:	739a      	strb	r2, [r3, #14]
	}
}
    26e0:	bd38      	pop	{r3, r4, r5, pc}
    26e2:	46c0      	nop			; (mov r8, r8)
    26e4:	20002ae8 	.word	0x20002ae8

000026e8 <TC3_Handler>:
		void TC##n##_Handler(void) \
		{ \
			_tc_interrupt_handler(m); \
		}

MRECURSION(TC_INST_NUM, _TC_INTERRUPT_HANDLER, TC_INST_MAX_ID)
    26e8:	b508      	push	{r3, lr}
    26ea:	2000      	movs	r0, #0
    26ec:	4b01      	ldr	r3, [pc, #4]	; (26f4 <TC3_Handler+0xc>)
    26ee:	4798      	blx	r3
    26f0:	bd08      	pop	{r3, pc}
    26f2:	46c0      	nop			; (mov r8, r8)
    26f4:	0000268d 	.word	0x0000268d

000026f8 <TC4_Handler>:
    26f8:	b508      	push	{r3, lr}
    26fa:	2001      	movs	r0, #1
    26fc:	4b01      	ldr	r3, [pc, #4]	; (2704 <TC4_Handler+0xc>)
    26fe:	4798      	blx	r3
    2700:	bd08      	pop	{r3, pc}
    2702:	46c0      	nop			; (mov r8, r8)
    2704:	0000268d 	.word	0x0000268d

00002708 <TC5_Handler>:
    2708:	b508      	push	{r3, lr}
    270a:	2002      	movs	r0, #2
    270c:	4b01      	ldr	r3, [pc, #4]	; (2714 <TC5_Handler+0xc>)
    270e:	4798      	blx	r3
    2710:	bd08      	pop	{r3, pc}
    2712:	46c0      	nop			; (mov r8, r8)
    2714:	0000268d 	.word	0x0000268d

00002718 <wdt_reset_count>:
 */
static inline bool wdt_is_syncing(void)
{
	Wdt *const WDT_module = WDT;

	if (WDT_module->STATUS.reg & WDT_STATUS_SYNCBUSY) {
    2718:	4a04      	ldr	r2, [pc, #16]	; (272c <wdt_reset_count+0x14>)
    271a:	79d3      	ldrb	r3, [r2, #7]
 */
void wdt_reset_count(void)
{
	Wdt *const WDT_module = WDT;

	while (wdt_is_syncing()) {
    271c:	b25b      	sxtb	r3, r3
    271e:	2b00      	cmp	r3, #0
    2720:	dbfb      	blt.n	271a <wdt_reset_count+0x2>
		/* Wait for all hardware modules to complete synchronization */
	}

	/* Disable the Watchdog module */
	WDT_module->CLEAR.reg = WDT_CLEAR_CLEAR_KEY;
    2722:	22a5      	movs	r2, #165	; 0xa5
    2724:	4b01      	ldr	r3, [pc, #4]	; (272c <wdt_reset_count+0x14>)
    2726:	721a      	strb	r2, [r3, #8]
}
    2728:	4770      	bx	lr
    272a:	46c0      	nop			; (mov r8, r8)
    272c:	40001000 	.word	0x40001000

00002730 <WDT_Handler>:
	}
}

/** Handler for the WDT hardware module interrupt. */
void WDT_Handler(void)
{
    2730:	b508      	push	{r3, lr}
 */
static inline void wdt_clear_early_warning(void)
{
	Wdt *const WDT_module = WDT;

	WDT_module->INTFLAG.reg = WDT_INTFLAG_EW;
    2732:	2201      	movs	r2, #1
    2734:	4b03      	ldr	r3, [pc, #12]	; (2744 <WDT_Handler+0x14>)
    2736:	719a      	strb	r2, [r3, #6]
	wdt_clear_early_warning();

	if (wdt_early_warning_callback) {
    2738:	4b03      	ldr	r3, [pc, #12]	; (2748 <WDT_Handler+0x18>)
    273a:	681b      	ldr	r3, [r3, #0]
    273c:	2b00      	cmp	r3, #0
    273e:	d000      	beq.n	2742 <WDT_Handler+0x12>
		wdt_early_warning_callback();
    2740:	4798      	blx	r3
	}
}
    2742:	bd08      	pop	{r3, pc}
    2744:	40001000 	.word	0x40001000
    2748:	20002af4 	.word	0x20002af4

0000274c <Dummy_Handler>:
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
        while (1) {
        }
    274c:	e7fe      	b.n	274c <Dummy_Handler>
    274e:	46c0      	nop			; (mov r8, r8)

00002750 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
    2750:	b510      	push	{r4, lr}

        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
    2752:	4b1b      	ldr	r3, [pc, #108]	; (27c0 <Reset_Handler+0x70>)
    2754:	4a1b      	ldr	r2, [pc, #108]	; (27c4 <Reset_Handler+0x74>)
    2756:	429a      	cmp	r2, r3
    2758:	d003      	beq.n	2762 <Reset_Handler+0x12>
                for (; pDest < &_erelocate;) {
    275a:	4b1b      	ldr	r3, [pc, #108]	; (27c8 <Reset_Handler+0x78>)
    275c:	4a18      	ldr	r2, [pc, #96]	; (27c0 <Reset_Handler+0x70>)
    275e:	429a      	cmp	r2, r3
    2760:	d304      	bcc.n	276c <Reset_Handler+0x1c>
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
    2762:	4b1a      	ldr	r3, [pc, #104]	; (27cc <Reset_Handler+0x7c>)
    2764:	4a1a      	ldr	r2, [pc, #104]	; (27d0 <Reset_Handler+0x80>)
    2766:	429a      	cmp	r2, r3
    2768:	d310      	bcc.n	278c <Reset_Handler+0x3c>
    276a:	e01e      	b.n	27aa <Reset_Handler+0x5a>
    276c:	4a19      	ldr	r2, [pc, #100]	; (27d4 <Reset_Handler+0x84>)
    276e:	4b16      	ldr	r3, [pc, #88]	; (27c8 <Reset_Handler+0x78>)
    2770:	3303      	adds	r3, #3
    2772:	1a9b      	subs	r3, r3, r2
    2774:	089b      	lsrs	r3, r3, #2
    2776:	3301      	adds	r3, #1
    2778:	009b      	lsls	r3, r3, #2
        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
                for (; pDest < &_erelocate;) {
    277a:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
    277c:	4810      	ldr	r0, [pc, #64]	; (27c0 <Reset_Handler+0x70>)
    277e:	4911      	ldr	r1, [pc, #68]	; (27c4 <Reset_Handler+0x74>)
    2780:	588c      	ldr	r4, [r1, r2]
    2782:	5084      	str	r4, [r0, r2]
    2784:	3204      	adds	r2, #4
        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
                for (; pDest < &_erelocate;) {
    2786:	429a      	cmp	r2, r3
    2788:	d1fa      	bne.n	2780 <Reset_Handler+0x30>
    278a:	e7ea      	b.n	2762 <Reset_Handler+0x12>
    278c:	4a12      	ldr	r2, [pc, #72]	; (27d8 <Reset_Handler+0x88>)
    278e:	4b0f      	ldr	r3, [pc, #60]	; (27cc <Reset_Handler+0x7c>)
    2790:	3303      	adds	r3, #3
    2792:	1a9b      	subs	r3, r3, r2
    2794:	089b      	lsrs	r3, r3, #2
    2796:	3301      	adds	r3, #1
    2798:	009b      	lsls	r3, r3, #2
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
    279a:	2200      	movs	r2, #0
                *pDest++ = 0;
    279c:	480c      	ldr	r0, [pc, #48]	; (27d0 <Reset_Handler+0x80>)
    279e:	2100      	movs	r1, #0
    27a0:	1814      	adds	r4, r2, r0
    27a2:	6021      	str	r1, [r4, #0]
    27a4:	3204      	adds	r2, #4
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
    27a6:	429a      	cmp	r2, r3
    27a8:	d1fa      	bne.n	27a0 <Reset_Handler+0x50>
                *pDest++ = 0;
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    27aa:	4a0c      	ldr	r2, [pc, #48]	; (27dc <Reset_Handler+0x8c>)
    27ac:	217f      	movs	r1, #127	; 0x7f
    27ae:	4b0c      	ldr	r3, [pc, #48]	; (27e0 <Reset_Handler+0x90>)
    27b0:	438b      	bics	r3, r1
    27b2:	6093      	str	r3, [r2, #8]

        /* Initialize the C library */
        __libc_init_array();
    27b4:	4b0b      	ldr	r3, [pc, #44]	; (27e4 <Reset_Handler+0x94>)
    27b6:	4798      	blx	r3

        /* Branch to main function */
        main();
    27b8:	4b0b      	ldr	r3, [pc, #44]	; (27e8 <Reset_Handler+0x98>)
    27ba:	4798      	blx	r3

        /* Infinite loop */
        while (1);
    27bc:	e7fe      	b.n	27bc <Reset_Handler+0x6c>
    27be:	46c0      	nop			; (mov r8, r8)
    27c0:	20000000 	.word	0x20000000
    27c4:	00013664 	.word	0x00013664
    27c8:	20000238 	.word	0x20000238
    27cc:	20003538 	.word	0x20003538
    27d0:	20000238 	.word	0x20000238
    27d4:	20000004 	.word	0x20000004
    27d8:	2000023c 	.word	0x2000023c
    27dc:	e000ed00 	.word	0xe000ed00
    27e0:	00000000 	.word	0x00000000
    27e4:	0001087d 	.word	0x0001087d
    27e8:	0000f8e9 	.word	0x0000f8e9

000027ec <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
    27ec:	b5f0      	push	{r4, r5, r6, r7, lr}
    27ee:	4647      	mov	r7, r8
    27f0:	b480      	push	{r7}
    27f2:	1c0c      	adds	r4, r1, #0
    27f4:	4690      	mov	r8, r2
	int nChars = 0;

	if (file != 0) {
    27f6:	2800      	cmp	r0, #0
    27f8:	d110      	bne.n	281c <_read+0x30>
		return -1;
	}

	for (; len > 0; --len) {
    27fa:	2a00      	cmp	r2, #0
    27fc:	dd0a      	ble.n	2814 <_read+0x28>
    27fe:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
    2800:	4e09      	ldr	r6, [pc, #36]	; (2828 <_read+0x3c>)
    2802:	4d0a      	ldr	r5, [pc, #40]	; (282c <_read+0x40>)
    2804:	6830      	ldr	r0, [r6, #0]
    2806:	1c21      	adds	r1, r4, #0
    2808:	682b      	ldr	r3, [r5, #0]
    280a:	4798      	blx	r3
		ptr++;
    280c:	3401      	adds	r4, #1

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
    280e:	42bc      	cmp	r4, r7
    2810:	d1f8      	bne.n	2804 <_read+0x18>
    2812:	e001      	b.n	2818 <_read+0x2c>
    2814:	2300      	movs	r3, #0
    2816:	4698      	mov	r8, r3
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
	}
	return nChars;
    2818:	4640      	mov	r0, r8
    281a:	e001      	b.n	2820 <_read+0x34>
_read (int file, char * ptr, int len)
{
	int nChars = 0;

	if (file != 0) {
		return -1;
    281c:	2001      	movs	r0, #1
    281e:	4240      	negs	r0, r0
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
	}
	return nChars;
}
    2820:	bc04      	pop	{r2}
    2822:	4690      	mov	r8, r2
    2824:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2826:	46c0      	nop			; (mov r8, r8)
    2828:	20002b00 	.word	0x20002b00
    282c:	20002af8 	.word	0x20002af8

00002830 <_write>:
int __attribute__((weak))
_write (int file, char * ptr, int len);

int __attribute__((weak))
_write (int file, char * ptr, int len)
{
    2830:	b5f0      	push	{r4, r5, r6, r7, lr}
    2832:	4647      	mov	r7, r8
    2834:	b480      	push	{r7}
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
    2836:	3801      	subs	r0, #1
    2838:	2802      	cmp	r0, #2
    283a:	d815      	bhi.n	2868 <_write+0x38>
		return -1;
	}

	for (; len != 0; --len) {
    283c:	2a00      	cmp	r2, #0
    283e:	d010      	beq.n	2862 <_write+0x32>
    2840:	1c15      	adds	r5, r2, #0
    2842:	1c0e      	adds	r6, r1, #0
    2844:	2400      	movs	r4, #0
		if (ptr_put(stdio_base, *ptr++) < 0) {
    2846:	4b0c      	ldr	r3, [pc, #48]	; (2878 <_write+0x48>)
    2848:	4698      	mov	r8, r3
    284a:	4f0c      	ldr	r7, [pc, #48]	; (287c <_write+0x4c>)
    284c:	4643      	mov	r3, r8
    284e:	6818      	ldr	r0, [r3, #0]
    2850:	5d31      	ldrb	r1, [r6, r4]
    2852:	683b      	ldr	r3, [r7, #0]
    2854:	4798      	blx	r3
    2856:	2800      	cmp	r0, #0
    2858:	db09      	blt.n	286e <_write+0x3e>
			return -1;
		}
		++nChars;
    285a:	3401      	adds	r4, #1

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
    285c:	42a5      	cmp	r5, r4
    285e:	d1f5      	bne.n	284c <_write+0x1c>
    2860:	e000      	b.n	2864 <_write+0x34>
    2862:	2400      	movs	r4, #0
		if (ptr_put(stdio_base, *ptr++) < 0) {
			return -1;
		}
		++nChars;
	}
	return nChars;
    2864:	1c20      	adds	r0, r4, #0
    2866:	e004      	b.n	2872 <_write+0x42>
_write (int file, char * ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
    2868:	2001      	movs	r0, #1
    286a:	4240      	negs	r0, r0
    286c:	e001      	b.n	2872 <_write+0x42>
	}

	for (; len != 0; --len) {
		if (ptr_put(stdio_base, *ptr++) < 0) {
			return -1;
    286e:	2001      	movs	r0, #1
    2870:	4240      	negs	r0, r0
		}
		++nChars;
	}
	return nChars;
}
    2872:	bc04      	pop	{r2}
    2874:	4690      	mov	r8, r2
    2876:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2878:	20002b00 	.word	0x20002b00
    287c:	20002afc 	.word	0x20002afc

00002880 <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
    2880:	1c03      	adds	r3, r0, #0
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
    2882:	4a06      	ldr	r2, [pc, #24]	; (289c <_sbrk+0x1c>)
    2884:	6812      	ldr	r2, [r2, #0]
    2886:	2a00      	cmp	r2, #0
    2888:	d102      	bne.n	2890 <_sbrk+0x10>
		heap = (unsigned char *)&_end;
    288a:	4905      	ldr	r1, [pc, #20]	; (28a0 <_sbrk+0x20>)
    288c:	4a03      	ldr	r2, [pc, #12]	; (289c <_sbrk+0x1c>)
    288e:	6011      	str	r1, [r2, #0]
	}
	prev_heap = heap;
    2890:	4a02      	ldr	r2, [pc, #8]	; (289c <_sbrk+0x1c>)
    2892:	6810      	ldr	r0, [r2, #0]

	heap += incr;
    2894:	18c3      	adds	r3, r0, r3
    2896:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap;
}
    2898:	4770      	bx	lr
    289a:	46c0      	nop			; (mov r8, r8)
    289c:	20000298 	.word	0x20000298
    28a0:	20005538 	.word	0x20005538

000028a4 <_close>:
}

extern int _close(int file)
{
	return -1;
}
    28a4:	2001      	movs	r0, #1
    28a6:	4240      	negs	r0, r0
    28a8:	4770      	bx	lr
    28aa:	46c0      	nop			; (mov r8, r8)

000028ac <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
    28ac:	2380      	movs	r3, #128	; 0x80
    28ae:	019b      	lsls	r3, r3, #6
    28b0:	604b      	str	r3, [r1, #4]

	return 0;
}
    28b2:	2000      	movs	r0, #0
    28b4:	4770      	bx	lr
    28b6:	46c0      	nop			; (mov r8, r8)

000028b8 <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
    28b8:	2001      	movs	r0, #1
    28ba:	4770      	bx	lr

000028bc <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
    28bc:	2000      	movs	r0, #0
    28be:	4770      	bx	lr

000028c0 <usart_serial_getchar>:
 * \param[out]    c       Destination for the read character.
 */
static inline void usart_serial_getchar(
		struct usart_module *const module,
		uint8_t *c)
{
    28c0:	b570      	push	{r4, r5, r6, lr}
    28c2:	b082      	sub	sp, #8
    28c4:	1c05      	adds	r5, r0, #0
    28c6:	1c0e      	adds	r6, r1, #0
	uint16_t temp = 0;
    28c8:	2200      	movs	r2, #0
    28ca:	466b      	mov	r3, sp
    28cc:	80da      	strh	r2, [r3, #6]

	while(STATUS_OK != usart_read_wait(module, &temp));
    28ce:	4c06      	ldr	r4, [pc, #24]	; (28e8 <usart_serial_getchar+0x28>)
    28d0:	1c28      	adds	r0, r5, #0
    28d2:	466b      	mov	r3, sp
    28d4:	1d99      	adds	r1, r3, #6
    28d6:	47a0      	blx	r4
    28d8:	2800      	cmp	r0, #0
    28da:	d1f9      	bne.n	28d0 <usart_serial_getchar+0x10>

	*c = temp;
    28dc:	466b      	mov	r3, sp
    28de:	3306      	adds	r3, #6
    28e0:	881b      	ldrh	r3, [r3, #0]
    28e2:	7033      	strb	r3, [r6, #0]
}
    28e4:	b002      	add	sp, #8
    28e6:	bd70      	pop	{r4, r5, r6, pc}
    28e8:	0000182d 	.word	0x0000182d

000028ec <usart_serial_putchar>:
 * \return Status code
 */
static inline enum status_code usart_serial_putchar(
		struct usart_module *const module,
		uint8_t c)
{
    28ec:	b570      	push	{r4, r5, r6, lr}
    28ee:	1c05      	adds	r5, r0, #0
	while(STATUS_OK !=usart_write_wait(module, c));
    28f0:	b28c      	uxth	r4, r1
    28f2:	4e03      	ldr	r6, [pc, #12]	; (2900 <usart_serial_putchar+0x14>)
    28f4:	1c28      	adds	r0, r5, #0
    28f6:	1c21      	adds	r1, r4, #0
    28f8:	47b0      	blx	r6
    28fa:	2800      	cmp	r0, #0
    28fc:	d1fa      	bne.n	28f4 <usart_serial_putchar+0x8>

	return STATUS_OK;
}
    28fe:	bd70      	pop	{r4, r5, r6, pc}
    2900:	00001801 	.word	0x00001801

00002904 <USART_HOST_ISR_VECT>:
#if SAMD || SAMR21
void USART_HOST_ISR_VECT(uint8_t instance)
#else
USART_HOST_ISR_VECT()
#endif
{
    2904:	b510      	push	{r4, lr}
    2906:	b082      	sub	sp, #8
static inline enum status_code usart_serial_read_packet(
		struct usart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
	return usart_read_buffer_wait(module, rx_data, length);
    2908:	466b      	mov	r3, sp
    290a:	1ddc      	adds	r4, r3, #7
    290c:	4812      	ldr	r0, [pc, #72]	; (2958 <USART_HOST_ISR_VECT+0x54>)
    290e:	1c21      	adds	r1, r4, #0
    2910:	2201      	movs	r2, #1
    2912:	4b12      	ldr	r3, [pc, #72]	; (295c <USART_HOST_ISR_VECT+0x58>)
    2914:	4798      	blx	r3
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
    2916:	b672      	cpsid	i
    2918:	f3bf 8f5f 	dmb	sy
#else
	usart_serial_read_packet(USART_HOST, &temp, 1);
#endif

	/* Introducing critical section to avoid buffer corruption. */
	cpu_irq_disable();
    291c:	2200      	movs	r2, #0
    291e:	4b10      	ldr	r3, [pc, #64]	; (2960 <USART_HOST_ISR_VECT+0x5c>)
    2920:	701a      	strb	r2, [r3, #0]

	/* The number of data in the receive buffer is incremented and the
	 * buffer is updated. */
	serial_rx_count++;
    2922:	4a10      	ldr	r2, [pc, #64]	; (2964 <USART_HOST_ISR_VECT+0x60>)
    2924:	7813      	ldrb	r3, [r2, #0]
    2926:	3301      	adds	r3, #1
    2928:	7013      	strb	r3, [r2, #0]

	serial_rx_buf[serial_rx_buf_tail] = temp;
    292a:	4b0f      	ldr	r3, [pc, #60]	; (2968 <USART_HOST_ISR_VECT+0x64>)
    292c:	781b      	ldrb	r3, [r3, #0]
    292e:	7821      	ldrb	r1, [r4, #0]
    2930:	4a0e      	ldr	r2, [pc, #56]	; (296c <USART_HOST_ISR_VECT+0x68>)
    2932:	54d1      	strb	r1, [r2, r3]

	if ((SERIAL_RX_BUF_SIZE_HOST - 1) == serial_rx_buf_tail) {
    2934:	2b9b      	cmp	r3, #155	; 0x9b
    2936:	d103      	bne.n	2940 <USART_HOST_ISR_VECT+0x3c>
		/* Reached the end of buffer, revert back to beginning of
		 * buffer. */
		serial_rx_buf_tail = 0x00;
    2938:	2200      	movs	r2, #0
    293a:	4b0b      	ldr	r3, [pc, #44]	; (2968 <USART_HOST_ISR_VECT+0x64>)
    293c:	701a      	strb	r2, [r3, #0]
    293e:	e002      	b.n	2946 <USART_HOST_ISR_VECT+0x42>
	} else {
		serial_rx_buf_tail++;
    2940:	3301      	adds	r3, #1
    2942:	4a09      	ldr	r2, [pc, #36]	; (2968 <USART_HOST_ISR_VECT+0x64>)
    2944:	7013      	strb	r3, [r2, #0]
	}

	cpu_irq_enable();
    2946:	2201      	movs	r2, #1
    2948:	4b05      	ldr	r3, [pc, #20]	; (2960 <USART_HOST_ISR_VECT+0x5c>)
    294a:	701a      	strb	r2, [r3, #0]
    294c:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
    2950:	b662      	cpsie	i
}
    2952:	b002      	add	sp, #8
    2954:	bd10      	pop	{r4, pc}
    2956:	46c0      	nop			; (mov r8, r8)
    2958:	20000338 	.word	0x20000338
    295c:	000018a5 	.word	0x000018a5
    2960:	20000008 	.word	0x20000008
    2964:	2000036d 	.word	0x2000036d
    2968:	2000036c 	.word	0x2000036c
    296c:	2000029c 	.word	0x2000029c

00002970 <sio2host_init>:
static uint8_t serial_rx_count;

/* === IMPLEMENTATION ====================================================== */

void sio2host_init(void)
{
    2970:	b5f0      	push	{r4, r5, r6, r7, lr}
    2972:	b091      	sub	sp, #68	; 0x44
{
	/* Sanity check arguments */
	Assert(config);

	/* Set default config in the config struct */
	config->data_order       = USART_DATAORDER_LSB;
    2974:	2380      	movs	r3, #128	; 0x80
    2976:	05db      	lsls	r3, r3, #23
    2978:	9300      	str	r3, [sp, #0]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
    297a:	2300      	movs	r3, #0
    297c:	9301      	str	r3, [sp, #4]
	config->parity           = USART_PARITY_NONE;
    297e:	22ff      	movs	r2, #255	; 0xff
    2980:	4669      	mov	r1, sp
    2982:	810a      	strh	r2, [r1, #8]
	config->stopbits         = USART_STOPBITS_1;
    2984:	2200      	movs	r2, #0
    2986:	728b      	strb	r3, [r1, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
    2988:	72cb      	strb	r3, [r1, #11]
	config->baudrate         = 9600;
	config->receiver_enable  = true;
    298a:	2401      	movs	r4, #1
    298c:	2124      	movs	r1, #36	; 0x24
    298e:	4668      	mov	r0, sp
    2990:	5444      	strb	r4, [r0, r1]
	config->transmitter_enable = true;
    2992:	3101      	adds	r1, #1
    2994:	5444      	strb	r4, [r0, r1]
	config->clock_polarity_inverted = false;
    2996:	3101      	adds	r1, #1
    2998:	5443      	strb	r3, [r0, r1]
	config->use_external_clock = false;
    299a:	3101      	adds	r1, #1
    299c:	5443      	strb	r3, [r0, r1]
	config->ext_clock_freq   = 0;
    299e:	930a      	str	r3, [sp, #40]	; 0x28
	config->mux_setting      = USART_RX_1_TX_2_XCK_3;
	config->run_in_standby   = false;
    29a0:	3105      	adds	r1, #5
    29a2:	5443      	strb	r3, [r0, r1]
	config->generator_source = GCLK_GENERATOR_0;
    29a4:	3101      	adds	r1, #1
    29a6:	5443      	strb	r3, [r0, r1]
	config->pinmux_pad0      = PINMUX_DEFAULT;
	config->pinmux_pad1      = PINMUX_DEFAULT;
	config->pinmux_pad2      = PINMUX_DEFAULT;
	config->pinmux_pad3      = PINMUX_DEFAULT;
#ifdef FEATURE_USART_OVER_SAMPLE
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
    29a8:	9305      	str	r3, [sp, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
    29aa:	8203      	strh	r3, [r0, #16]
#endif
#ifdef FEATURE_USART_LIN_SLAVE
	config->lin_slave_enable      = false;
    29ac:	76c3      	strb	r3, [r0, #27]
#endif
#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
	config->immediate_buffer_overflow_notification      = false;
    29ae:	7602      	strb	r2, [r0, #24]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	config->start_frame_detection_enable                = false;
    29b0:	7702      	strb	r2, [r0, #28]
#endif
#ifdef FEATURE_USART_IRDA
	config->encoding_format_enable                      = false;
    29b2:	7642      	strb	r2, [r0, #25]
	config->receive_pulse_length                        = 19;
    29b4:	2313      	movs	r3, #19
    29b6:	7683      	strb	r3, [r0, #26]
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
	config->collision_detection_enable                  = false;
    29b8:	7742      	strb	r2, [r0, #29]
#if SAMD || SAMR21
	struct usart_config host_uart_config;
	/* Configure USART for unit test output */
	usart_get_config_defaults(&host_uart_config);
	host_uart_config.mux_setting = EDBG_CDC_SERCOM_MUX_SETTING;
    29ba:	2380      	movs	r3, #128	; 0x80
    29bc:	035b      	lsls	r3, r3, #13
    29be:	9303      	str	r3, [sp, #12]

	host_uart_config.pinmux_pad0 = EDBG_CDC_SERCOM_PINMUX_PAD0;
    29c0:	4b2c      	ldr	r3, [pc, #176]	; (2a74 <sio2host_init+0x104>)
    29c2:	930c      	str	r3, [sp, #48]	; 0x30
	host_uart_config.pinmux_pad1 = EDBG_CDC_SERCOM_PINMUX_PAD1;
    29c4:	4b2c      	ldr	r3, [pc, #176]	; (2a78 <sio2host_init+0x108>)
    29c6:	930d      	str	r3, [sp, #52]	; 0x34
	host_uart_config.pinmux_pad2 = EDBG_CDC_SERCOM_PINMUX_PAD2;
    29c8:	2301      	movs	r3, #1
    29ca:	425b      	negs	r3, r3
    29cc:	930e      	str	r3, [sp, #56]	; 0x38
	host_uart_config.pinmux_pad3 = EDBG_CDC_SERCOM_PINMUX_PAD3;
    29ce:	930f      	str	r3, [sp, #60]	; 0x3c
	host_uart_config.baudrate    = USART_HOST_BAUDRATE;
    29d0:	23e1      	movs	r3, #225	; 0xe1
    29d2:	025b      	lsls	r3, r3, #9
    29d4:	9308      	str	r3, [sp, #32]
static inline void stdio_serial_init(
		struct usart_module *const module,
		usart_inst_t const hw,
		const struct usart_config *const config)
{
	stdio_base = (void *)module;
    29d6:	4d29      	ldr	r5, [pc, #164]	; (2a7c <sio2host_init+0x10c>)
    29d8:	4b29      	ldr	r3, [pc, #164]	; (2a80 <sio2host_init+0x110>)
    29da:	601d      	str	r5, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
    29dc:	4a29      	ldr	r2, [pc, #164]	; (2a84 <sio2host_init+0x114>)
    29de:	4b2a      	ldr	r3, [pc, #168]	; (2a88 <sio2host_init+0x118>)
    29e0:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
    29e2:	4a2a      	ldr	r2, [pc, #168]	; (2a8c <sio2host_init+0x11c>)
    29e4:	4b2a      	ldr	r3, [pc, #168]	; (2a90 <sio2host_init+0x120>)
    29e6:	601a      	str	r2, [r3, #0]
static inline bool usart_serial_init(
		struct usart_module *const module,
		usart_inst_t const hw,
		const struct usart_config *const config)
{
	if (usart_init(module, hw, config) == STATUS_OK) {
    29e8:	1c28      	adds	r0, r5, #0
    29ea:	492a      	ldr	r1, [pc, #168]	; (2a94 <sio2host_init+0x124>)
    29ec:	466a      	mov	r2, sp
    29ee:	4b2a      	ldr	r3, [pc, #168]	; (2a98 <sio2host_init+0x128>)
    29f0:	4798      	blx	r3

	usart_serial_init(module, hw, config);
# if defined(__GNUC__)
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
    29f2:	4f2a      	ldr	r7, [pc, #168]	; (2a9c <sio2host_init+0x12c>)
    29f4:	683b      	ldr	r3, [r7, #0]
    29f6:	6898      	ldr	r0, [r3, #8]
    29f8:	2100      	movs	r1, #0
    29fa:	4e29      	ldr	r6, [pc, #164]	; (2aa0 <sio2host_init+0x130>)
    29fc:	47b0      	blx	r6
	setbuf(stdin, NULL);
    29fe:	683b      	ldr	r3, [r7, #0]
    2a00:	6858      	ldr	r0, [r3, #4]
    2a02:	2100      	movs	r1, #0
    2a04:	47b0      	blx	r6
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    2a06:	682e      	ldr	r6, [r5, #0]

#if USART_CALLBACK_MODE == true
	/* Enable Global interrupt for module */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    2a08:	1c30      	adds	r0, r6, #0
    2a0a:	4b26      	ldr	r3, [pc, #152]	; (2aa4 <sio2host_init+0x134>)
    2a0c:	4798      	blx	r3
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    2a0e:	231f      	movs	r3, #31
    2a10:	4018      	ands	r0, r3
    2a12:	4084      	lsls	r4, r0
    2a14:	4b24      	ldr	r3, [pc, #144]	; (2aa8 <sio2host_init+0x138>)
    2a16:	601c      	str	r4, [r3, #0]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
    2a18:	682a      	ldr	r2, [r5, #0]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    2a1a:	69d3      	ldr	r3, [r2, #28]
		const struct usart_module *const module)
{
	/* Sanity check. */
	Assert(module);

	while (usart_is_syncing(module)) {
    2a1c:	2b00      	cmp	r3, #0
    2a1e:	d1fc      	bne.n	2a1a <sio2host_init+0xaa>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Enable USART module */
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    2a20:	6832      	ldr	r2, [r6, #0]
    2a22:	3302      	adds	r3, #2
    2a24:	4313      	orrs	r3, r2
    2a26:	6033      	str	r3, [r6, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    2a28:	4b14      	ldr	r3, [pc, #80]	; (2a7c <sio2host_init+0x10c>)
    2a2a:	681b      	ldr	r3, [r3, #0]
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    2a2c:	69da      	ldr	r2, [r3, #28]
		const struct usart_module *const module)
{
	/* Sanity check. */
	Assert(module);

	while (usart_is_syncing(module)) {
    2a2e:	2a00      	cmp	r2, #0
    2a30:	d1fc      	bne.n	2a2c <sio2host_init+0xbc>
			module->receiver_enabled = true;
			break;

		case USART_TRANSCEIVER_TX:
			/* Enable TX */
			usart_hw->CTRLB.reg |= SERCOM_USART_CTRLB_TXEN;
    2a32:	685a      	ldr	r2, [r3, #4]
    2a34:	2180      	movs	r1, #128	; 0x80
    2a36:	0249      	lsls	r1, r1, #9
    2a38:	430a      	orrs	r2, r1
    2a3a:	605a      	str	r2, [r3, #4]
			module->transmitter_enabled = true;
    2a3c:	2101      	movs	r1, #1
    2a3e:	4a0f      	ldr	r2, [pc, #60]	; (2a7c <sio2host_init+0x10c>)
    2a40:	71d1      	strb	r1, [r2, #7]
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    2a42:	69da      	ldr	r2, [r3, #28]
		const struct usart_module *const module)
{
	/* Sanity check. */
	Assert(module);

	while (usart_is_syncing(module)) {
    2a44:	2a00      	cmp	r2, #0
    2a46:	d1fc      	bne.n	2a42 <sio2host_init+0xd2>
	_usart_wait_for_sync(module);

	switch (transceiver_type) {
		case USART_TRANSCEIVER_RX:
			/* Enable RX */
			usart_hw->CTRLB.reg |= SERCOM_USART_CTRLB_RXEN;
    2a48:	685a      	ldr	r2, [r3, #4]
    2a4a:	2180      	movs	r1, #128	; 0x80
    2a4c:	0289      	lsls	r1, r1, #10
    2a4e:	430a      	orrs	r2, r1
    2a50:	605a      	str	r2, [r3, #4]
			module->receiver_enabled = true;
    2a52:	2201      	movs	r2, #1
    2a54:	4b09      	ldr	r3, [pc, #36]	; (2a7c <sio2host_init+0x10c>)
    2a56:	719a      	strb	r2, [r3, #6]
	usart_enable_transceiver(&host_uart_module, USART_TRANSCEIVER_TX);
	usart_enable_transceiver(&host_uart_module, USART_TRANSCEIVER_RX);
#else
	stdio_serial_init(USART_HOST, &usart_serial_options);
#endif
	USART_HOST_RX_ISR_ENABLE();
    2a58:	2000      	movs	r0, #0
    2a5a:	4914      	ldr	r1, [pc, #80]	; (2aac <sio2host_init+0x13c>)
    2a5c:	4b14      	ldr	r3, [pc, #80]	; (2ab0 <sio2host_init+0x140>)
    2a5e:	4798      	blx	r3
    2a60:	2204      	movs	r2, #4
    2a62:	4b0c      	ldr	r3, [pc, #48]	; (2a94 <sio2host_init+0x124>)
    2a64:	759a      	strb	r2, [r3, #22]
    2a66:	32fd      	adds	r2, #253	; 0xfd
    2a68:	32ff      	adds	r2, #255	; 0xff
    2a6a:	4b0f      	ldr	r3, [pc, #60]	; (2aa8 <sio2host_init+0x138>)
    2a6c:	601a      	str	r2, [r3, #0]
}
    2a6e:	b011      	add	sp, #68	; 0x44
    2a70:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2a72:	46c0      	nop			; (mov r8, r8)
    2a74:	00040003 	.word	0x00040003
    2a78:	00050003 	.word	0x00050003
    2a7c:	20000338 	.word	0x20000338
    2a80:	20002b00 	.word	0x20002b00
    2a84:	000028ed 	.word	0x000028ed
    2a88:	20002afc 	.word	0x20002afc
    2a8c:	000028c1 	.word	0x000028c1
    2a90:	20002af8 	.word	0x20002af8
    2a94:	42000800 	.word	0x42000800
    2a98:	000014b9 	.word	0x000014b9
    2a9c:	20000234 	.word	0x20000234
    2aa0:	00010a61 	.word	0x00010a61
    2aa4:	00001089 	.word	0x00001089
    2aa8:	e000e100 	.word	0xe000e100
    2aac:	00002905 	.word	0x00002905
    2ab0:	0000104d 	.word	0x0000104d

00002ab4 <AT86RFX_ISR>:
void AT86RFX_ISR(void)
#else
AT86RFX_ISR()
#endif

{
    2ab4:	b508      	push	{r3, lr}
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));

	eic_module->INTFLAG.reg = eic_mask;
    2ab6:	2201      	movs	r2, #1
    2ab8:	4b03      	ldr	r3, [pc, #12]	; (2ac8 <AT86RFX_ISR+0x14>)
    2aba:	611a      	str	r2, [r3, #16]
	/*Clearing the RF interrupt*/
	trx_irq_flag_clr();
  	/*Calling the interrupt routines*/
	if (irq_hdl_trx) {
    2abc:	4b03      	ldr	r3, [pc, #12]	; (2acc <AT86RFX_ISR+0x18>)
    2abe:	681b      	ldr	r3, [r3, #0]
    2ac0:	2b00      	cmp	r3, #0
    2ac2:	d000      	beq.n	2ac6 <AT86RFX_ISR+0x12>
		irq_hdl_trx();
    2ac4:	4798      	blx	r3
	}
}
    2ac6:	bd08      	pop	{r3, pc}
    2ac8:	40001800 	.word	0x40001800
    2acc:	20000370 	.word	0x20000370

00002ad0 <trx_spi_init>:

void trx_spi_init(void)
{
    2ad0:	b510      	push	{r4, lr}
    2ad2:	b084      	sub	sp, #16
		struct spi_slave_inst_config *const config)
{
	Assert(config);

	config->ss_pin          = 10;
	config->address_enabled = false;
    2ad4:	4a32      	ldr	r2, [pc, #200]	; (2ba0 <trx_spi_init+0xd0>)
    2ad6:	2300      	movs	r3, #0
    2ad8:	7053      	strb	r3, [r2, #1]
	config->address         = 0;
    2ada:	7093      	strb	r3, [r2, #2]
	/* Initialize SPI in master mode to access the transceiver */
#if SAMD || SAMR21
	spi_slave_inst_get_config_defaults(&slave_dev_config);
	slave_dev_config.ss_pin = AT86RFX_SPI_CS;
    2adc:	213f      	movs	r1, #63	; 0x3f
    2ade:	7011      	strb	r1, [r2, #0]
		struct spi_slave_inst_config *const config)
{
	Assert(slave);
	Assert(config);

	slave->ss_pin          = config->ss_pin;
    2ae0:	4c30      	ldr	r4, [pc, #192]	; (2ba4 <trx_spi_init+0xd4>)
    2ae2:	7021      	strb	r1, [r4, #0]
	slave->address_enabled = config->address_enabled;
    2ae4:	7063      	strb	r3, [r4, #1]
	slave->address         = config->address;
    2ae6:	70a3      	strb	r3, [r4, #2]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
	config->input_pull = PORT_PIN_PULL_UP;
    2ae8:	2201      	movs	r2, #1
    2aea:	4669      	mov	r1, sp
    2aec:	704a      	strb	r2, [r1, #1]
	config->powersave  = false;
    2aee:	708b      	strb	r3, [r1, #2]
	/* Get default config for pin */
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);

	/* Edit config to set the pin as output */
	pin_conf.direction = PORT_PIN_DIR_OUTPUT;
    2af0:	700a      	strb	r2, [r1, #0]

	/* Set config on Slave Select pin */
	port_pin_set_config(slave->ss_pin, &pin_conf);
    2af2:	203f      	movs	r0, #63	; 0x3f
    2af4:	4b2c      	ldr	r3, [pc, #176]	; (2ba8 <trx_spi_init+0xd8>)
    2af6:	4798      	blx	r3
	port_pin_set_output_level(slave->ss_pin, true);
    2af8:	7823      	ldrb	r3, [r4, #0]
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports. */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    2afa:	09d9      	lsrs	r1, r3, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
    2afc:	2200      	movs	r2, #0
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports. */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    2afe:	2900      	cmp	r1, #0
    2b00:	d104      	bne.n	2b0c <trx_spi_init+0x3c>
		return &(ports[port_index]->Group[group_index]);
    2b02:	095a      	lsrs	r2, r3, #5
    2b04:	01d2      	lsls	r2, r2, #7
    2b06:	4929      	ldr	r1, [pc, #164]	; (2bac <trx_spi_init+0xdc>)
    2b08:	468c      	mov	ip, r1
    2b0a:	4462      	add	r2, ip
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    2b0c:	211f      	movs	r1, #31
    2b0e:	400b      	ands	r3, r1
    2b10:	391e      	subs	r1, #30
    2b12:	1c08      	adds	r0, r1, #0
    2b14:	4098      	lsls	r0, r3

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
    2b16:	6190      	str	r0, [r2, #24]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mode             = SPI_MODE_MASTER;
    2b18:	4a25      	ldr	r2, [pc, #148]	; (2bb0 <trx_spi_init+0xe0>)
    2b1a:	7011      	strb	r1, [r2, #0]
	config->data_order       = SPI_DATA_ORDER_MSB;
    2b1c:	2300      	movs	r3, #0
    2b1e:	6053      	str	r3, [r2, #4]
	config->transfer_mode    = SPI_TRANSFER_MODE_0;
    2b20:	6093      	str	r3, [r2, #8]
	config->mux_setting      = SPI_SIGNAL_MUX_SETTING_D;
	config->character_size   = SPI_CHARACTER_SIZE_8BIT;
    2b22:	7413      	strb	r3, [r2, #16]
	config->run_in_standby   = false;
    2b24:	7453      	strb	r3, [r2, #17]
	config->receiver_enable  = true;
    2b26:	7491      	strb	r1, [r2, #18]
#  ifdef FEATURE_SPI_SLAVE_SELECT_LOW_DETECT
	config->select_slave_low_detect_enable= true;
    2b28:	74d1      	strb	r1, [r2, #19]
#  endif
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	config->master_slave_select_enable= false;
    2b2a:	7513      	strb	r3, [r2, #20]
#  endif
	config->generator_source = GCLK_GENERATOR_0;
    2b2c:	3123      	adds	r1, #35	; 0x23
    2b2e:	5453      	strb	r3, [r2, r1]

	/* Clear mode specific config */
	memset(&(config->mode_specific), 0, sizeof(config->mode_specific));
    2b30:	61d3      	str	r3, [r2, #28]
    2b32:	6213      	str	r3, [r2, #32]
	spi_attach_slave(&slave, &slave_dev_config);
	spi_get_config_defaults(&config);
	AT86RFX_SPI_CONFIG(config);
    2b34:	2380      	movs	r3, #128	; 0x80
    2b36:	025b      	lsls	r3, r3, #9
    2b38:	60d3      	str	r3, [r2, #12]
    2b3a:	4b1e      	ldr	r3, [pc, #120]	; (2bb4 <trx_spi_init+0xe4>)
    2b3c:	6193      	str	r3, [r2, #24]
    2b3e:	4b1e      	ldr	r3, [pc, #120]	; (2bb8 <trx_spi_init+0xe8>)
    2b40:	6293      	str	r3, [r2, #40]	; 0x28
    2b42:	2301      	movs	r3, #1
    2b44:	425b      	negs	r3, r3
    2b46:	62d3      	str	r3, [r2, #44]	; 0x2c
    2b48:	4b1c      	ldr	r3, [pc, #112]	; (2bbc <trx_spi_init+0xec>)
    2b4a:	6313      	str	r3, [r2, #48]	; 0x30
    2b4c:	4b1c      	ldr	r3, [pc, #112]	; (2bc0 <trx_spi_init+0xf0>)
    2b4e:	6353      	str	r3, [r2, #52]	; 0x34
	spi_init(&master, AT86RFX_SPI, &config);
    2b50:	4c1c      	ldr	r4, [pc, #112]	; (2bc4 <trx_spi_init+0xf4>)
    2b52:	1c20      	adds	r0, r4, #0
    2b54:	491c      	ldr	r1, [pc, #112]	; (2bc8 <trx_spi_init+0xf8>)
    2b56:	4b1d      	ldr	r3, [pc, #116]	; (2bcc <trx_spi_init+0xfc>)
    2b58:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    2b5a:	6822      	ldr	r2, [r4, #0]

	SercomSpi *const spi_module = &(module->hw->SPI);

#  ifdef FEATURE_SPI_SYNC_SCHEME_VERSION_2
	/* Return synchronization status */
	return (spi_module->SYNCBUSY.reg);
    2b5c:	69d3      	ldr	r3, [r2, #28]

#  if SPI_CALLBACK_MODE == true
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
#  endif

	while (spi_is_syncing(module)) {
    2b5e:	2b00      	cmp	r3, #0
    2b60:	d1fc      	bne.n	2b5c <trx_spi_init+0x8c>
		/* Wait until the synchronization is complete */
	}

	/* Enable SPI */
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
    2b62:	6811      	ldr	r1, [r2, #0]
    2b64:	3302      	adds	r3, #2
    2b66:	430b      	orrs	r3, r1
    2b68:	6013      	str	r3, [r2, #0]

	/* Default configuration values */
	config->gpio_pin            = 0;
	config->gpio_pin_mux        = 0;
	config->gpio_pin_pull       = EXTINT_PULL_UP;
	config->wake_if_sleeping    = true;
    2b6a:	a901      	add	r1, sp, #4
    2b6c:	2301      	movs	r3, #1
    2b6e:	724b      	strb	r3, [r1, #9]
	config->filter_input_signal = false;
    2b70:	2300      	movs	r3, #0
    2b72:	728b      	strb	r3, [r1, #10]
	spi_enable(&master);
	AT86RFX_INTC_INIT();
    2b74:	2220      	movs	r2, #32
    2b76:	9201      	str	r2, [sp, #4]
    2b78:	2280      	movs	r2, #128	; 0x80
    2b7a:	0392      	lsls	r2, r2, #14
    2b7c:	604a      	str	r2, [r1, #4]
    2b7e:	720b      	strb	r3, [r1, #8]
    2b80:	3303      	adds	r3, #3
    2b82:	72cb      	strb	r3, [r1, #11]
    2b84:	2000      	movs	r0, #0
    2b86:	4b12      	ldr	r3, [pc, #72]	; (2bd0 <trx_spi_init+0x100>)
    2b88:	4798      	blx	r3
    2b8a:	4812      	ldr	r0, [pc, #72]	; (2bd4 <trx_spi_init+0x104>)
    2b8c:	2100      	movs	r1, #0
    2b8e:	2200      	movs	r2, #0
    2b90:	4b11      	ldr	r3, [pc, #68]	; (2bd8 <trx_spi_init+0x108>)
    2b92:	4798      	blx	r3
    2b94:	2000      	movs	r0, #0
    2b96:	2100      	movs	r1, #0
    2b98:	4b10      	ldr	r3, [pc, #64]	; (2bdc <trx_spi_init+0x10c>)
    2b9a:	4798      	blx	r3
	spi_master_setup_device(AT86RFX_SPI, &SPI_AT86RFX_DEVICE, SPI_MODE_0,
			AT86RFX_SPI_BAUDRATE, 0);
	spi_enable(AT86RFX_SPI);
	AT86RFX_INTC_INIT();
#endif
}
    2b9c:	b004      	add	sp, #16
    2b9e:	bd10      	pop	{r4, pc}
    2ba0:	20002b08 	.word	0x20002b08
    2ba4:	20002b0c 	.word	0x20002b0c
    2ba8:	0000051d 	.word	0x0000051d
    2bac:	41004400 	.word	0x41004400
    2bb0:	20002b10 	.word	0x20002b10
    2bb4:	003d0900 	.word	0x003d0900
    2bb8:	00530005 	.word	0x00530005
    2bbc:	003e0005 	.word	0x003e0005
    2bc0:	00520005 	.word	0x00520005
    2bc4:	20002b48 	.word	0x20002b48
    2bc8:	42001800 	.word	0x42001800
    2bcc:	00001115 	.word	0x00001115
    2bd0:	00000369 	.word	0x00000369
    2bd4:	00002ab5 	.word	0x00002ab5
    2bd8:	000003e1 	.word	0x000003e1
    2bdc:	0000040d 	.word	0x0000040d

00002be0 <trx_reg_read>:
	delay_us(10);
	RST_HIGH();
}

uint8_t trx_reg_read(uint8_t addr)
{
    2be0:	b570      	push	{r4, r5, r6, lr}
    2be2:	1c05      	adds	r5, r0, #0
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    2be4:	f3ef 8410 	mrs	r4, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
    2be8:	4263      	negs	r3, r4
    2bea:	415c      	adcs	r4, r3
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
    2bec:	b672      	cpsid	i
    2bee:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    2bf2:	2200      	movs	r2, #0
    2bf4:	4b33      	ldr	r3, [pc, #204]	; (2cc4 <trx_reg_read+0xe4>)
    2bf6:	701a      	strb	r2, [r3, #0]
	/* Prepare the command byte */
	addr |= READ_ACCESS_COMMAND;

#if SAMD || SAMR21
	/* Start SPI transaction by pulling SEL low */
	spi_select_slave(&master, &slave, true);
    2bf8:	4e33      	ldr	r6, [pc, #204]	; (2cc8 <trx_reg_read+0xe8>)
    2bfa:	1c30      	adds	r0, r6, #0
    2bfc:	4933      	ldr	r1, [pc, #204]	; (2ccc <trx_reg_read+0xec>)
    2bfe:	3201      	adds	r2, #1
    2c00:	4b33      	ldr	r3, [pc, #204]	; (2cd0 <trx_reg_read+0xf0>)
    2c02:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    2c04:	6833      	ldr	r3, [r6, #0]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    2c06:	2101      	movs	r1, #1
    2c08:	7e1a      	ldrb	r2, [r3, #24]

	/* Send the Read command byte */
	while (!spi_is_ready_to_write(&master)) {
    2c0a:	420a      	tst	r2, r1
    2c0c:	d0fc      	beq.n	2c08 <trx_reg_read+0x28>
    2c0e:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
    2c10:	07d2      	lsls	r2, r2, #31
    2c12:	d502      	bpl.n	2c1a <trx_reg_read+0x3a>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    2c14:	2280      	movs	r2, #128	; 0x80
    2c16:	4315      	orrs	r5, r2
    2c18:	629d      	str	r5, [r3, #40]	; 0x28
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    2c1a:	2102      	movs	r1, #2
    2c1c:	7e1a      	ldrb	r2, [r3, #24]
	}
	spi_write(&master, addr);
	while (!spi_is_write_complete(&master)) {
    2c1e:	420a      	tst	r2, r1
    2c20:	d0fc      	beq.n	2c1c <trx_reg_read+0x3c>
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    2c22:	2104      	movs	r1, #4
    2c24:	7e1a      	ldrb	r2, [r3, #24]
	}
	/* Dummy read since SPI RX is double buffered */
	while (!spi_is_ready_to_read(&master)) {
    2c26:	420a      	tst	r2, r1
    2c28:	d0fc      	beq.n	2c24 <trx_reg_read+0x44>
    2c2a:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
    2c2c:	0752      	lsls	r2, r2, #29
    2c2e:	d514      	bpl.n	2c5a <trx_reg_read+0x7a>

	/* Return value */
	enum status_code retval = STATUS_OK;

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    2c30:	8b5a      	ldrh	r2, [r3, #26]
    2c32:	0752      	lsls	r2, r2, #29
    2c34:	d503      	bpl.n	2c3e <trx_reg_read+0x5e>
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg |= SERCOM_SPI_STATUS_BUFOVF;
    2c36:	8b59      	ldrh	r1, [r3, #26]
    2c38:	2204      	movs	r2, #4
    2c3a:	430a      	orrs	r2, r1
    2c3c:	835a      	strh	r2, [r3, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    2c3e:	4a22      	ldr	r2, [pc, #136]	; (2cc8 <trx_reg_read+0xe8>)
    2c40:	7992      	ldrb	r2, [r2, #6]
    2c42:	2a01      	cmp	r2, #1
    2c44:	d105      	bne.n	2c52 <trx_reg_read+0x72>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    2c46:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    2c48:	05d2      	lsls	r2, r2, #23
    2c4a:	0dd2      	lsrs	r2, r2, #23
    2c4c:	4921      	ldr	r1, [pc, #132]	; (2cd4 <trx_reg_read+0xf4>)
    2c4e:	800a      	strh	r2, [r1, #0]
    2c50:	e003      	b.n	2c5a <trx_reg_read+0x7a>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    2c52:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    2c54:	b2d2      	uxtb	r2, r2
    2c56:	491f      	ldr	r1, [pc, #124]	; (2cd4 <trx_reg_read+0xf4>)
    2c58:	800a      	strh	r2, [r1, #0]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    2c5a:	2101      	movs	r1, #1
    2c5c:	7e1a      	ldrb	r2, [r3, #24]
	}
	spi_read(&master, &dummy_read);

	while (!spi_is_ready_to_write(&master)) {
    2c5e:	420a      	tst	r2, r1
    2c60:	d0fc      	beq.n	2c5c <trx_reg_read+0x7c>
    2c62:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
    2c64:	07d2      	lsls	r2, r2, #31
    2c66:	d501      	bpl.n	2c6c <trx_reg_read+0x8c>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    2c68:	2200      	movs	r2, #0
    2c6a:	629a      	str	r2, [r3, #40]	; 0x28
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    2c6c:	2102      	movs	r1, #2
    2c6e:	7e1a      	ldrb	r2, [r3, #24]
	}
	spi_write(&master, 0);
	while (!spi_is_write_complete(&master)) {
    2c70:	420a      	tst	r2, r1
    2c72:	d0fc      	beq.n	2c6e <trx_reg_read+0x8e>
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    2c74:	2104      	movs	r1, #4
    2c76:	7e1a      	ldrb	r2, [r3, #24]
	}
	while (!spi_is_ready_to_read(&master)) {
    2c78:	420a      	tst	r2, r1
    2c7a:	d0fc      	beq.n	2c76 <trx_reg_read+0x96>
    2c7c:	7e1a      	ldrb	r2, [r3, #24]
}

uint8_t trx_reg_read(uint8_t addr)
{
#if SAMD || SAMR21
	uint16_t register_value = 0;
    2c7e:	2500      	movs	r5, #0
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
    2c80:	0752      	lsls	r2, r2, #29
    2c82:	d510      	bpl.n	2ca6 <trx_reg_read+0xc6>

	/* Return value */
	enum status_code retval = STATUS_OK;

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    2c84:	8b5a      	ldrh	r2, [r3, #26]
    2c86:	0752      	lsls	r2, r2, #29
    2c88:	d503      	bpl.n	2c92 <trx_reg_read+0xb2>
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg |= SERCOM_SPI_STATUS_BUFOVF;
    2c8a:	8b59      	ldrh	r1, [r3, #26]
    2c8c:	2204      	movs	r2, #4
    2c8e:	430a      	orrs	r2, r1
    2c90:	835a      	strh	r2, [r3, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    2c92:	4a0d      	ldr	r2, [pc, #52]	; (2cc8 <trx_reg_read+0xe8>)
    2c94:	7992      	ldrb	r2, [r2, #6]
    2c96:	2a01      	cmp	r2, #1
    2c98:	d103      	bne.n	2ca2 <trx_reg_read+0xc2>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    2c9a:	6a9d      	ldr	r5, [r3, #40]	; 0x28
    2c9c:	05ed      	lsls	r5, r5, #23
    2c9e:	0ded      	lsrs	r5, r5, #23
    2ca0:	e001      	b.n	2ca6 <trx_reg_read+0xc6>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    2ca2:	6a9d      	ldr	r5, [r3, #40]	; 0x28
    2ca4:	b2ed      	uxtb	r5, r5
	while (!spi_is_ready_to_read(&master)) {
	}
	spi_read(&master, &register_value);

	/* Stop the SPI transaction by setting SEL high */
	spi_select_slave(&master, &slave, false);
    2ca6:	4808      	ldr	r0, [pc, #32]	; (2cc8 <trx_reg_read+0xe8>)
    2ca8:	4908      	ldr	r1, [pc, #32]	; (2ccc <trx_reg_read+0xec>)
    2caa:	2200      	movs	r2, #0
    2cac:	4b08      	ldr	r3, [pc, #32]	; (2cd0 <trx_reg_read+0xf0>)
    2cae:	4798      	blx	r3
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
    2cb0:	2c00      	cmp	r4, #0
    2cb2:	d005      	beq.n	2cc0 <trx_reg_read+0xe0>
		cpu_irq_enable();
    2cb4:	2201      	movs	r2, #1
    2cb6:	4b03      	ldr	r3, [pc, #12]	; (2cc4 <trx_reg_read+0xe4>)
    2cb8:	701a      	strb	r2, [r3, #0]
    2cba:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
    2cbe:	b662      	cpsie	i
#endif
	/*Restoring the interrupt status which was stored & enabling the global
	 *interrupt */
	LEAVE_TRX_CRITICAL_REGION();

	return register_value;
    2cc0:	b2e8      	uxtb	r0, r5
}
    2cc2:	bd70      	pop	{r4, r5, r6, pc}
    2cc4:	20000008 	.word	0x20000008
    2cc8:	20002b48 	.word	0x20002b48
    2ccc:	20002b0c 	.word	0x20002b0c
    2cd0:	000013c5 	.word	0x000013c5
    2cd4:	20002b04 	.word	0x20002b04

00002cd8 <trx_reg_write>:

void trx_reg_write(uint8_t addr, uint8_t data)
{
    2cd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2cda:	1c06      	adds	r6, r0, #0
    2cdc:	1c0c      	adds	r4, r1, #0
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    2cde:	f3ef 8510 	mrs	r5, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
    2ce2:	426b      	negs	r3, r5
    2ce4:	415d      	adcs	r5, r3
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
    2ce6:	b672      	cpsid	i
    2ce8:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    2cec:	2200      	movs	r2, #0
    2cee:	4b34      	ldr	r3, [pc, #208]	; (2dc0 <trx_reg_write+0xe8>)
    2cf0:	701a      	strb	r2, [r3, #0]
	/* Prepare the command byte */
	addr |= WRITE_ACCESS_COMMAND;

#if SAMD || SAMR21
	/* Start SPI transaction by pulling SEL low */
	spi_select_slave(&master, &slave, true);
    2cf2:	4f34      	ldr	r7, [pc, #208]	; (2dc4 <trx_reg_write+0xec>)
    2cf4:	1c38      	adds	r0, r7, #0
    2cf6:	4934      	ldr	r1, [pc, #208]	; (2dc8 <trx_reg_write+0xf0>)
    2cf8:	3201      	adds	r2, #1
    2cfa:	4b34      	ldr	r3, [pc, #208]	; (2dcc <trx_reg_write+0xf4>)
    2cfc:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    2cfe:	683b      	ldr	r3, [r7, #0]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    2d00:	2101      	movs	r1, #1
    2d02:	7e1a      	ldrb	r2, [r3, #24]

	/* Send the Read command byte */
	while (!spi_is_ready_to_write(&master)) {
    2d04:	420a      	tst	r2, r1
    2d06:	d0fc      	beq.n	2d02 <trx_reg_write+0x2a>
    2d08:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
    2d0a:	07d2      	lsls	r2, r2, #31
    2d0c:	d502      	bpl.n	2d14 <trx_reg_write+0x3c>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    2d0e:	22c0      	movs	r2, #192	; 0xc0
    2d10:	4316      	orrs	r6, r2
    2d12:	629e      	str	r6, [r3, #40]	; 0x28
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    2d14:	2102      	movs	r1, #2
    2d16:	7e1a      	ldrb	r2, [r3, #24]
	}
	spi_write(&master, addr);
	while (!spi_is_write_complete(&master)) {
    2d18:	420a      	tst	r2, r1
    2d1a:	d0fc      	beq.n	2d16 <trx_reg_write+0x3e>
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    2d1c:	2104      	movs	r1, #4
    2d1e:	7e1a      	ldrb	r2, [r3, #24]
	}
	/* Dummy read since SPI RX is double buffered */
	while (!spi_is_ready_to_read(&master)) {
    2d20:	420a      	tst	r2, r1
    2d22:	d0fc      	beq.n	2d1e <trx_reg_write+0x46>
    2d24:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
    2d26:	0752      	lsls	r2, r2, #29
    2d28:	d514      	bpl.n	2d54 <trx_reg_write+0x7c>

	/* Return value */
	enum status_code retval = STATUS_OK;

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    2d2a:	8b5a      	ldrh	r2, [r3, #26]
    2d2c:	0752      	lsls	r2, r2, #29
    2d2e:	d503      	bpl.n	2d38 <trx_reg_write+0x60>
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg |= SERCOM_SPI_STATUS_BUFOVF;
    2d30:	8b59      	ldrh	r1, [r3, #26]
    2d32:	2204      	movs	r2, #4
    2d34:	430a      	orrs	r2, r1
    2d36:	835a      	strh	r2, [r3, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    2d38:	4a22      	ldr	r2, [pc, #136]	; (2dc4 <trx_reg_write+0xec>)
    2d3a:	7992      	ldrb	r2, [r2, #6]
    2d3c:	2a01      	cmp	r2, #1
    2d3e:	d105      	bne.n	2d4c <trx_reg_write+0x74>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    2d40:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    2d42:	05d2      	lsls	r2, r2, #23
    2d44:	0dd2      	lsrs	r2, r2, #23
    2d46:	4922      	ldr	r1, [pc, #136]	; (2dd0 <trx_reg_write+0xf8>)
    2d48:	800a      	strh	r2, [r1, #0]
    2d4a:	e003      	b.n	2d54 <trx_reg_write+0x7c>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    2d4c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    2d4e:	b2d2      	uxtb	r2, r2
    2d50:	491f      	ldr	r1, [pc, #124]	; (2dd0 <trx_reg_write+0xf8>)
    2d52:	800a      	strh	r2, [r1, #0]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    2d54:	2101      	movs	r1, #1
    2d56:	7e1a      	ldrb	r2, [r3, #24]
	}
	spi_read(&master, &dummy_read);

	/* Write the byte in the transceiver data register */
	while (!spi_is_ready_to_write(&master)) {
    2d58:	420a      	tst	r2, r1
    2d5a:	d0fc      	beq.n	2d56 <trx_reg_write+0x7e>
    2d5c:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
    2d5e:	07d2      	lsls	r2, r2, #31
    2d60:	d500      	bpl.n	2d64 <trx_reg_write+0x8c>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    2d62:	629c      	str	r4, [r3, #40]	; 0x28
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    2d64:	2102      	movs	r1, #2
    2d66:	7e1a      	ldrb	r2, [r3, #24]
	}
	spi_write(&master, data);
	while (!spi_is_write_complete(&master)) {
    2d68:	420a      	tst	r2, r1
    2d6a:	d0fc      	beq.n	2d66 <trx_reg_write+0x8e>
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    2d6c:	2104      	movs	r1, #4
    2d6e:	7e1a      	ldrb	r2, [r3, #24]
	}
	/* Dummy read since SPI RX is double buffered */
	while (!spi_is_ready_to_read(&master)) {
    2d70:	420a      	tst	r2, r1
    2d72:	d0fc      	beq.n	2d6e <trx_reg_write+0x96>
    2d74:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
    2d76:	0752      	lsls	r2, r2, #29
    2d78:	d514      	bpl.n	2da4 <trx_reg_write+0xcc>

	/* Return value */
	enum status_code retval = STATUS_OK;

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    2d7a:	8b5a      	ldrh	r2, [r3, #26]
    2d7c:	0752      	lsls	r2, r2, #29
    2d7e:	d503      	bpl.n	2d88 <trx_reg_write+0xb0>
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg |= SERCOM_SPI_STATUS_BUFOVF;
    2d80:	8b59      	ldrh	r1, [r3, #26]
    2d82:	2204      	movs	r2, #4
    2d84:	430a      	orrs	r2, r1
    2d86:	835a      	strh	r2, [r3, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    2d88:	4a0e      	ldr	r2, [pc, #56]	; (2dc4 <trx_reg_write+0xec>)
    2d8a:	7992      	ldrb	r2, [r2, #6]
    2d8c:	2a01      	cmp	r2, #1
    2d8e:	d105      	bne.n	2d9c <trx_reg_write+0xc4>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    2d90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    2d92:	05db      	lsls	r3, r3, #23
    2d94:	0ddb      	lsrs	r3, r3, #23
    2d96:	4a0e      	ldr	r2, [pc, #56]	; (2dd0 <trx_reg_write+0xf8>)
    2d98:	8013      	strh	r3, [r2, #0]
    2d9a:	e003      	b.n	2da4 <trx_reg_write+0xcc>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    2d9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    2d9e:	b2db      	uxtb	r3, r3
    2da0:	4a0b      	ldr	r2, [pc, #44]	; (2dd0 <trx_reg_write+0xf8>)
    2da2:	8013      	strh	r3, [r2, #0]
	}
	spi_read(&master, &dummy_read);

	/* Stop the SPI transaction by setting SEL high */
	spi_select_slave(&master, &slave, false);
    2da4:	4807      	ldr	r0, [pc, #28]	; (2dc4 <trx_reg_write+0xec>)
    2da6:	4908      	ldr	r1, [pc, #32]	; (2dc8 <trx_reg_write+0xf0>)
    2da8:	2200      	movs	r2, #0
    2daa:	4b08      	ldr	r3, [pc, #32]	; (2dcc <trx_reg_write+0xf4>)
    2dac:	4798      	blx	r3
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
    2dae:	2d00      	cmp	r5, #0
    2db0:	d005      	beq.n	2dbe <trx_reg_write+0xe6>
		cpu_irq_enable();
    2db2:	2201      	movs	r2, #1
    2db4:	4b02      	ldr	r3, [pc, #8]	; (2dc0 <trx_reg_write+0xe8>)
    2db6:	701a      	strb	r2, [r3, #0]
    2db8:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
    2dbc:	b662      	cpsie	i
	spi_deselect_device(AT86RFX_SPI, &SPI_AT86RFX_DEVICE);
#endif
	/*Restoring the interrupt status which was stored & enabling the global
	 *interrupt */
	LEAVE_TRX_CRITICAL_REGION();
}
    2dbe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2dc0:	20000008 	.word	0x20000008
    2dc4:	20002b48 	.word	0x20002b48
    2dc8:	20002b0c 	.word	0x20002b0c
    2dcc:	000013c5 	.word	0x000013c5
    2dd0:	20002b04 	.word	0x20002b04

00002dd4 <trx_irq_init>:
	 * Set the handler function.
	 * The handler is set before enabling the interrupt to prepare for
	 *spurious
	 * interrupts, that can pop up the moment they are enabled
	 */
	irq_hdl_trx = (irq_handler_t)trx_irq_cb;
    2dd4:	4b01      	ldr	r3, [pc, #4]	; (2ddc <trx_irq_init+0x8>)
    2dd6:	6018      	str	r0, [r3, #0]
}
    2dd8:	4770      	bx	lr
    2dda:	46c0      	nop			; (mov r8, r8)
    2ddc:	20000370 	.word	0x20000370

00002de0 <trx_bit_read>:

uint8_t trx_bit_read(uint8_t addr, uint8_t mask, uint8_t pos)
{
    2de0:	b538      	push	{r3, r4, r5, lr}
    2de2:	1c0d      	adds	r5, r1, #0
    2de4:	1c14      	adds	r4, r2, #0
	uint8_t ret;
	ret = trx_reg_read(addr);
    2de6:	4b03      	ldr	r3, [pc, #12]	; (2df4 <trx_bit_read+0x14>)
    2de8:	4798      	blx	r3
	ret &= mask;
	ret >>= pos;
    2dea:	4028      	ands	r0, r5
    2dec:	4120      	asrs	r0, r4
	return ret;
    2dee:	b2c0      	uxtb	r0, r0
}
    2df0:	bd38      	pop	{r3, r4, r5, pc}
    2df2:	46c0      	nop			; (mov r8, r8)
    2df4:	00002be1 	.word	0x00002be1

00002df8 <trx_frame_read>:
	new_value |= current_reg_value;
	trx_reg_write(reg_addr, new_value);
}

void trx_frame_read(uint8_t *data, uint8_t length)
{
    2df8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2dfa:	465f      	mov	r7, fp
    2dfc:	4656      	mov	r6, sl
    2dfe:	464d      	mov	r5, r9
    2e00:	4644      	mov	r4, r8
    2e02:	b4f0      	push	{r4, r5, r6, r7}
    2e04:	1c05      	adds	r5, r0, #0
    2e06:	1c0c      	adds	r4, r1, #0
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    2e08:	f3ef 8710 	mrs	r7, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
    2e0c:	427a      	negs	r2, r7
    2e0e:	417a      	adcs	r2, r7
    2e10:	4690      	mov	r8, r2
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
    2e12:	b672      	cpsid	i
    2e14:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    2e18:	2200      	movs	r2, #0
    2e1a:	4b41      	ldr	r3, [pc, #260]	; (2f20 <trx_frame_read+0x128>)
    2e1c:	701a      	strb	r2, [r3, #0]
	ENTER_TRX_CRITICAL_REGION();

#if SAMD || SAMR21
	uint16_t temp;
	/* Start SPI transaction by pulling SEL low */
	spi_select_slave(&master, &slave, true);
    2e1e:	4e41      	ldr	r6, [pc, #260]	; (2f24 <trx_frame_read+0x12c>)
    2e20:	1c30      	adds	r0, r6, #0
    2e22:	4941      	ldr	r1, [pc, #260]	; (2f28 <trx_frame_read+0x130>)
    2e24:	3201      	adds	r2, #1
    2e26:	4b41      	ldr	r3, [pc, #260]	; (2f2c <trx_frame_read+0x134>)
    2e28:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    2e2a:	6833      	ldr	r3, [r6, #0]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    2e2c:	2101      	movs	r1, #1
    2e2e:	7e1a      	ldrb	r2, [r3, #24]

	temp = TRX_CMD_FR;

	/* Send the command byte */
	while (!spi_is_ready_to_write(&master)) {
    2e30:	420a      	tst	r2, r1
    2e32:	d0fc      	beq.n	2e2e <trx_frame_read+0x36>
    2e34:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
    2e36:	07d2      	lsls	r2, r2, #31
    2e38:	d501      	bpl.n	2e3e <trx_frame_read+0x46>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    2e3a:	2220      	movs	r2, #32
    2e3c:	629a      	str	r2, [r3, #40]	; 0x28
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    2e3e:	2102      	movs	r1, #2
    2e40:	7e1a      	ldrb	r2, [r3, #24]
	}
	spi_write(&master, temp);
	while (!spi_is_write_complete(&master)) {
    2e42:	420a      	tst	r2, r1
    2e44:	d0fc      	beq.n	2e40 <trx_frame_read+0x48>
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    2e46:	2104      	movs	r1, #4
    2e48:	7e1a      	ldrb	r2, [r3, #24]
	}
	/* Dummy read since SPI RX is double buffered */
	while (!spi_is_ready_to_read(&master)) {
    2e4a:	420a      	tst	r2, r1
    2e4c:	d0fc      	beq.n	2e48 <trx_frame_read+0x50>
    2e4e:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
    2e50:	0752      	lsls	r2, r2, #29
    2e52:	d50f      	bpl.n	2e74 <trx_frame_read+0x7c>

	/* Return value */
	enum status_code retval = STATUS_OK;

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    2e54:	8b5a      	ldrh	r2, [r3, #26]
    2e56:	0752      	lsls	r2, r2, #29
    2e58:	d503      	bpl.n	2e62 <trx_frame_read+0x6a>
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg |= SERCOM_SPI_STATUS_BUFOVF;
    2e5a:	8b59      	ldrh	r1, [r3, #26]
    2e5c:	2204      	movs	r2, #4
    2e5e:	430a      	orrs	r2, r1
    2e60:	835a      	strh	r2, [r3, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    2e62:	4a30      	ldr	r2, [pc, #192]	; (2f24 <trx_frame_read+0x12c>)
    2e64:	7992      	ldrb	r2, [r2, #6]
    2e66:	2a01      	cmp	r2, #1
    2e68:	d109      	bne.n	2e7e <trx_frame_read+0x86>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    2e6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    2e6c:	05db      	lsls	r3, r3, #23
    2e6e:	0ddb      	lsrs	r3, r3, #23
    2e70:	4a2f      	ldr	r2, [pc, #188]	; (2f30 <trx_frame_read+0x138>)
    2e72:	8013      	strh	r3, [r2, #0]
	}
	spi_read(&master, &dummy_read);

	while (length--) {
    2e74:	1e63      	subs	r3, r4, #1
    2e76:	b2db      	uxtb	r3, r3
    2e78:	2c00      	cmp	r4, #0
    2e7a:	d105      	bne.n	2e88 <trx_frame_read+0x90>
    2e7c:	e03c      	b.n	2ef8 <trx_frame_read+0x100>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    2e7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    2e80:	b2db      	uxtb	r3, r3
    2e82:	4a2b      	ldr	r2, [pc, #172]	; (2f30 <trx_frame_read+0x138>)
    2e84:	8013      	strh	r3, [r2, #0]
    2e86:	e7f5      	b.n	2e74 <trx_frame_read+0x7c>
    2e88:	3301      	adds	r3, #1
    2e8a:	469c      	mov	ip, r3
    2e8c:	44ac      	add	ip, r5
    2e8e:	2620      	movs	r6, #32
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    2e90:	4b24      	ldr	r3, [pc, #144]	; (2f24 <trx_frame_read+0x12c>)
    2e92:	4699      	mov	r9, r3

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    2e94:	2001      	movs	r0, #1
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    2e96:	2300      	movs	r3, #0
    2e98:	469a      	mov	sl, r3
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    2e9a:	2402      	movs	r4, #2
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    2e9c:	2104      	movs	r1, #4
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    2e9e:	464f      	mov	r7, r9

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg |= SERCOM_SPI_STATUS_BUFOVF;
    2ea0:	2304      	movs	r3, #4
    2ea2:	469b      	mov	fp, r3
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    2ea4:	464b      	mov	r3, r9
    2ea6:	681b      	ldr	r3, [r3, #0]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    2ea8:	7e1a      	ldrb	r2, [r3, #24]
		while (!spi_is_ready_to_write(&master)) {
    2eaa:	4202      	tst	r2, r0
    2eac:	d0fc      	beq.n	2ea8 <trx_frame_read+0xb0>
    2eae:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
    2eb0:	4202      	tst	r2, r0
    2eb2:	d001      	beq.n	2eb8 <trx_frame_read+0xc0>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    2eb4:	4652      	mov	r2, sl
    2eb6:	629a      	str	r2, [r3, #40]	; 0x28
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    2eb8:	7e1a      	ldrb	r2, [r3, #24]
		}
		spi_write(&master, 0);
		while (!spi_is_write_complete(&master)) {
    2eba:	4222      	tst	r2, r4
    2ebc:	d0fc      	beq.n	2eb8 <trx_frame_read+0xc0>
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    2ebe:	7e1a      	ldrb	r2, [r3, #24]
		}
		/* Dummy read since SPI RX is double buffered */
		while (!spi_is_ready_to_read(&master)) {
    2ec0:	420a      	tst	r2, r1
    2ec2:	d0fc      	beq.n	2ebe <trx_frame_read+0xc6>
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    2ec4:	683b      	ldr	r3, [r7, #0]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    2ec6:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
    2ec8:	420a      	tst	r2, r1
    2eca:	d011      	beq.n	2ef0 <trx_frame_read+0xf8>

	/* Return value */
	enum status_code retval = STATUS_OK;

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    2ecc:	8b5a      	ldrh	r2, [r3, #26]
    2ece:	420a      	tst	r2, r1
    2ed0:	d004      	beq.n	2edc <trx_frame_read+0xe4>
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg |= SERCOM_SPI_STATUS_BUFOVF;
    2ed2:	8b5a      	ldrh	r2, [r3, #26]
    2ed4:	465e      	mov	r6, fp
    2ed6:	4332      	orrs	r2, r6
    2ed8:	b292      	uxth	r2, r2
    2eda:	835a      	strh	r2, [r3, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    2edc:	4a11      	ldr	r2, [pc, #68]	; (2f24 <trx_frame_read+0x12c>)
    2ede:	7992      	ldrb	r2, [r2, #6]
    2ee0:	2a01      	cmp	r2, #1
    2ee2:	d103      	bne.n	2eec <trx_frame_read+0xf4>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    2ee4:	6a9e      	ldr	r6, [r3, #40]	; 0x28
    2ee6:	05f6      	lsls	r6, r6, #23
    2ee8:	0df6      	lsrs	r6, r6, #23
    2eea:	e001      	b.n	2ef0 <trx_frame_read+0xf8>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    2eec:	6a9e      	ldr	r6, [r3, #40]	; 0x28
    2eee:	b2f6      	uxtb	r6, r6
		}
		spi_read(&master, &temp);
		*data = temp;
    2ef0:	702e      	strb	r6, [r5, #0]
		data++;
    2ef2:	3501      	adds	r5, #1
	/* Dummy read since SPI RX is double buffered */
	while (!spi_is_ready_to_read(&master)) {
	}
	spi_read(&master, &dummy_read);

	while (length--) {
    2ef4:	4565      	cmp	r5, ip
    2ef6:	d1d5      	bne.n	2ea4 <trx_frame_read+0xac>
		*data = temp;
		data++;
	}

	/* Stop the SPI transaction by setting SEL high */
	spi_select_slave(&master, &slave, false);
    2ef8:	480a      	ldr	r0, [pc, #40]	; (2f24 <trx_frame_read+0x12c>)
    2efa:	490b      	ldr	r1, [pc, #44]	; (2f28 <trx_frame_read+0x130>)
    2efc:	2200      	movs	r2, #0
    2efe:	4b0b      	ldr	r3, [pc, #44]	; (2f2c <trx_frame_read+0x134>)
    2f00:	4798      	blx	r3
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
    2f02:	4643      	mov	r3, r8
    2f04:	2b00      	cmp	r3, #0
    2f06:	d005      	beq.n	2f14 <trx_frame_read+0x11c>
		cpu_irq_enable();
    2f08:	2201      	movs	r2, #1
    2f0a:	4b05      	ldr	r3, [pc, #20]	; (2f20 <trx_frame_read+0x128>)
    2f0c:	701a      	strb	r2, [r3, #0]
    2f0e:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
    2f12:	b662      	cpsie	i
	spi_deselect_device(AT86RFX_SPI, &SPI_AT86RFX_DEVICE);
#endif
	/*Restoring the interrupt status which was stored & enabling the global
	 *interrupt */
	LEAVE_TRX_CRITICAL_REGION();
}
    2f14:	bc3c      	pop	{r2, r3, r4, r5}
    2f16:	4690      	mov	r8, r2
    2f18:	4699      	mov	r9, r3
    2f1a:	46a2      	mov	sl, r4
    2f1c:	46ab      	mov	fp, r5
    2f1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2f20:	20000008 	.word	0x20000008
    2f24:	20002b48 	.word	0x20002b48
    2f28:	20002b0c 	.word	0x20002b0c
    2f2c:	000013c5 	.word	0x000013c5
    2f30:	20002b04 	.word	0x20002b04

00002f34 <trx_frame_write>:

void trx_frame_write(uint8_t *data, uint8_t length)
{
    2f34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2f36:	464f      	mov	r7, r9
    2f38:	4646      	mov	r6, r8
    2f3a:	b4c0      	push	{r6, r7}
    2f3c:	1c04      	adds	r4, r0, #0
    2f3e:	1c0d      	adds	r5, r1, #0
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    2f40:	f3ef 8610 	mrs	r6, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
    2f44:	4272      	negs	r2, r6
    2f46:	4172      	adcs	r2, r6
    2f48:	4691      	mov	r9, r2
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
    2f4a:	b672      	cpsid	i
    2f4c:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    2f50:	2200      	movs	r2, #0
    2f52:	4b3c      	ldr	r3, [pc, #240]	; (3044 <trx_frame_write+0x110>)
    2f54:	701a      	strb	r2, [r3, #0]
	 **/
	ENTER_TRX_CRITICAL_REGION();

#if SAMD || SAMR21
	/* Start SPI transaction by pulling SEL low */
	spi_select_slave(&master, &slave, true);
    2f56:	4f3c      	ldr	r7, [pc, #240]	; (3048 <trx_frame_write+0x114>)
    2f58:	1c38      	adds	r0, r7, #0
    2f5a:	493c      	ldr	r1, [pc, #240]	; (304c <trx_frame_write+0x118>)
    2f5c:	3201      	adds	r2, #1
    2f5e:	4b3c      	ldr	r3, [pc, #240]	; (3050 <trx_frame_write+0x11c>)
    2f60:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    2f62:	683b      	ldr	r3, [r7, #0]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    2f64:	2101      	movs	r1, #1
    2f66:	7e1a      	ldrb	r2, [r3, #24]

	temp = TRX_CMD_FW;

	/* Send the command byte */
	while (!spi_is_ready_to_write(&master)) {
    2f68:	420a      	tst	r2, r1
    2f6a:	d0fc      	beq.n	2f66 <trx_frame_write+0x32>
    2f6c:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
    2f6e:	07d2      	lsls	r2, r2, #31
    2f70:	d501      	bpl.n	2f76 <trx_frame_write+0x42>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    2f72:	2260      	movs	r2, #96	; 0x60
    2f74:	629a      	str	r2, [r3, #40]	; 0x28
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    2f76:	2102      	movs	r1, #2
    2f78:	7e1a      	ldrb	r2, [r3, #24]
	}
	spi_write(&master, temp);
	while (!spi_is_write_complete(&master)) {
    2f7a:	420a      	tst	r2, r1
    2f7c:	d0fc      	beq.n	2f78 <trx_frame_write+0x44>
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    2f7e:	2104      	movs	r1, #4
    2f80:	7e1a      	ldrb	r2, [r3, #24]
	} 
	/* Dummy read since SPI RX is double buffered */
	while (!spi_is_ready_to_read(&master)) {
    2f82:	420a      	tst	r2, r1
    2f84:	d0fc      	beq.n	2f80 <trx_frame_write+0x4c>
    2f86:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
    2f88:	0752      	lsls	r2, r2, #29
    2f8a:	d50f      	bpl.n	2fac <trx_frame_write+0x78>

	/* Return value */
	enum status_code retval = STATUS_OK;

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    2f8c:	8b5a      	ldrh	r2, [r3, #26]
    2f8e:	0752      	lsls	r2, r2, #29
    2f90:	d503      	bpl.n	2f9a <trx_frame_write+0x66>
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg |= SERCOM_SPI_STATUS_BUFOVF;
    2f92:	8b59      	ldrh	r1, [r3, #26]
    2f94:	2204      	movs	r2, #4
    2f96:	430a      	orrs	r2, r1
    2f98:	835a      	strh	r2, [r3, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    2f9a:	4a2b      	ldr	r2, [pc, #172]	; (3048 <trx_frame_write+0x114>)
    2f9c:	7992      	ldrb	r2, [r2, #6]
    2f9e:	2a01      	cmp	r2, #1
    2fa0:	d10e      	bne.n	2fc0 <trx_frame_write+0x8c>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    2fa2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    2fa4:	05d2      	lsls	r2, r2, #23
    2fa6:	0dd2      	lsrs	r2, r2, #23
    2fa8:	492a      	ldr	r1, [pc, #168]	; (3054 <trx_frame_write+0x120>)
    2faa:	800a      	strh	r2, [r1, #0]
		/* Clear overflow flag */
		spi_module->STATUS.reg |= SERCOM_SPI_STATUS_BUFOVF;
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    2fac:	4a26      	ldr	r2, [pc, #152]	; (3048 <trx_frame_write+0x114>)
    2fae:	7992      	ldrb	r2, [r2, #6]
    2fb0:	4690      	mov	r8, r2
    2fb2:	1c26      	adds	r6, r4, #0
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    2fb4:	2701      	movs	r7, #1
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    2fb6:	2002      	movs	r0, #2
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    2fb8:	2404      	movs	r4, #4

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg |= SERCOM_SPI_STATUS_BUFOVF;
    2fba:	2204      	movs	r2, #4
    2fbc:	4694      	mov	ip, r2
    2fbe:	e02b      	b.n	3018 <trx_frame_write+0xe4>

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    2fc0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    2fc2:	b2d2      	uxtb	r2, r2
    2fc4:	4923      	ldr	r1, [pc, #140]	; (3054 <trx_frame_write+0x120>)
    2fc6:	800a      	strh	r2, [r1, #0]
    2fc8:	e7f0      	b.n	2fac <trx_frame_write+0x78>
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    2fca:	7e1a      	ldrb	r2, [r3, #24]
	}
	spi_read(&master, &dummy_read);
	while (length--) {
		while (!spi_is_ready_to_write(&master)) {
    2fcc:	423a      	tst	r2, r7
    2fce:	d0fc      	beq.n	2fca <trx_frame_write+0x96>
		}
		spi_write(&master, *data++);
    2fd0:	7832      	ldrb	r2, [r6, #0]
    2fd2:	7e19      	ldrb	r1, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
    2fd4:	4239      	tst	r1, r7
    2fd6:	d000      	beq.n	2fda <trx_frame_write+0xa6>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    2fd8:	629a      	str	r2, [r3, #40]	; 0x28
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    2fda:	7e1a      	ldrb	r2, [r3, #24]
		while (!spi_is_write_complete(&master)) {
    2fdc:	4202      	tst	r2, r0
    2fde:	d0fc      	beq.n	2fda <trx_frame_write+0xa6>
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    2fe0:	7e1a      	ldrb	r2, [r3, #24]
		}
		/* Dummy read since SPI RX is double buffered */
		while (!spi_is_ready_to_read(&master)) {
    2fe2:	4222      	tst	r2, r4
    2fe4:	d0fc      	beq.n	2fe0 <trx_frame_write+0xac>
    2fe6:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
    2fe8:	4222      	tst	r2, r4
    2fea:	d014      	beq.n	3016 <trx_frame_write+0xe2>

	/* Return value */
	enum status_code retval = STATUS_OK;

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    2fec:	8b5a      	ldrh	r2, [r3, #26]
    2fee:	4222      	tst	r2, r4
    2ff0:	d004      	beq.n	2ffc <trx_frame_write+0xc8>
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg |= SERCOM_SPI_STATUS_BUFOVF;
    2ff2:	8b5a      	ldrh	r2, [r3, #26]
    2ff4:	4661      	mov	r1, ip
    2ff6:	430a      	orrs	r2, r1
    2ff8:	b292      	uxth	r2, r2
    2ffa:	835a      	strh	r2, [r3, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    2ffc:	4642      	mov	r2, r8
    2ffe:	2a01      	cmp	r2, #1
    3000:	d105      	bne.n	300e <trx_frame_write+0xda>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    3002:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    3004:	05d2      	lsls	r2, r2, #23
    3006:	0dd2      	lsrs	r2, r2, #23
    3008:	4912      	ldr	r1, [pc, #72]	; (3054 <trx_frame_write+0x120>)
    300a:	800a      	strh	r2, [r1, #0]
    300c:	e003      	b.n	3016 <trx_frame_write+0xe2>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    300e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    3010:	b2d2      	uxtb	r2, r2
    3012:	4910      	ldr	r1, [pc, #64]	; (3054 <trx_frame_write+0x120>)
    3014:	800a      	strh	r2, [r1, #0]
    3016:	3601      	adds	r6, #1
	} 
	/* Dummy read since SPI RX is double buffered */
	while (!spi_is_ready_to_read(&master)) {
	}
	spi_read(&master, &dummy_read);
	while (length--) {
    3018:	3d01      	subs	r5, #1
    301a:	b2ed      	uxtb	r5, r5
    301c:	2dff      	cmp	r5, #255	; 0xff
    301e:	d1d4      	bne.n	2fca <trx_frame_write+0x96>
		}
		spi_read(&master, &dummy_read);
	}

	/* Stop the SPI transaction by setting SEL high */
	spi_select_slave(&master, &slave, false);
    3020:	4809      	ldr	r0, [pc, #36]	; (3048 <trx_frame_write+0x114>)
    3022:	490a      	ldr	r1, [pc, #40]	; (304c <trx_frame_write+0x118>)
    3024:	2200      	movs	r2, #0
    3026:	4b0a      	ldr	r3, [pc, #40]	; (3050 <trx_frame_write+0x11c>)
    3028:	4798      	blx	r3
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
    302a:	464b      	mov	r3, r9
    302c:	2b00      	cmp	r3, #0
    302e:	d005      	beq.n	303c <trx_frame_write+0x108>
		cpu_irq_enable();
    3030:	2201      	movs	r2, #1
    3032:	4b04      	ldr	r3, [pc, #16]	; (3044 <trx_frame_write+0x110>)
    3034:	701a      	strb	r2, [r3, #0]
    3036:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
    303a:	b662      	cpsie	i
	spi_deselect_device(AT86RFX_SPI, &SPI_AT86RFX_DEVICE);
#endif
	/*Restoring the interrupt status which was stored & enabling the global
	 *interrupt */
	LEAVE_TRX_CRITICAL_REGION();
}
    303c:	bc0c      	pop	{r2, r3}
    303e:	4690      	mov	r8, r2
    3040:	4699      	mov	r9, r3
    3042:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3044:	20000008 	.word	0x20000008
    3048:	20002b48 	.word	0x20002b48
    304c:	20002b0c 	.word	0x20002b0c
    3050:	000013c5 	.word	0x000013c5
    3054:	20002b04 	.word	0x20002b04

00003058 <trx_sram_read>:
 * @param[in] addr Start address in SRAM for read operation
 * @param[out] data Pointer to the location where data stored
 * @param[in] length Number of bytes to be read from SRAM
 */
void trx_sram_read(uint8_t addr, uint8_t *data, uint8_t length)
{
    3058:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    305a:	465f      	mov	r7, fp
    305c:	4656      	mov	r6, sl
    305e:	464d      	mov	r5, r9
    3060:	4644      	mov	r4, r8
    3062:	b4f0      	push	{r4, r5, r6, r7}
    3064:	1c04      	adds	r4, r0, #0
    3066:	1c0d      	adds	r5, r1, #0
    3068:	1c16      	adds	r6, r2, #0
	delay_us(1); /* wap_rf4ce */
    306a:	2001      	movs	r0, #1
    306c:	4b5a      	ldr	r3, [pc, #360]	; (31d8 <trx_sram_read+0x180>)
    306e:	4798      	blx	r3
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    3070:	f3ef 8710 	mrs	r7, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
    3074:	427a      	negs	r2, r7
    3076:	417a      	adcs	r2, r7
    3078:	4690      	mov	r8, r2
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
    307a:	b672      	cpsid	i
    307c:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    3080:	2200      	movs	r2, #0
    3082:	4b56      	ldr	r3, [pc, #344]	; (31dc <trx_sram_read+0x184>)
    3084:	701a      	strb	r2, [r3, #0]
	 **/
	ENTER_TRX_CRITICAL_REGION();
#if SAMD || SAMR21
	uint16_t temp;
	/* Start SPI transaction by pulling SEL low */
	spi_select_slave(&master, &slave, true);
    3086:	4f56      	ldr	r7, [pc, #344]	; (31e0 <trx_sram_read+0x188>)
    3088:	1c38      	adds	r0, r7, #0
    308a:	4956      	ldr	r1, [pc, #344]	; (31e4 <trx_sram_read+0x18c>)
    308c:	3201      	adds	r2, #1
    308e:	4b56      	ldr	r3, [pc, #344]	; (31e8 <trx_sram_read+0x190>)
    3090:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    3092:	683b      	ldr	r3, [r7, #0]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    3094:	2101      	movs	r1, #1
    3096:	7e1a      	ldrb	r2, [r3, #24]

	temp = TRX_CMD_SR;

	/* Send the command byte */
	while (!spi_is_ready_to_write(&master)) {
    3098:	420a      	tst	r2, r1
    309a:	d0fc      	beq.n	3096 <trx_sram_read+0x3e>
    309c:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
    309e:	07d2      	lsls	r2, r2, #31
    30a0:	d501      	bpl.n	30a6 <trx_sram_read+0x4e>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    30a2:	2200      	movs	r2, #0
    30a4:	629a      	str	r2, [r3, #40]	; 0x28
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    30a6:	2102      	movs	r1, #2
    30a8:	7e1a      	ldrb	r2, [r3, #24]
	}
	spi_write(&master, temp);
	while (!spi_is_write_complete(&master)) {
    30aa:	420a      	tst	r2, r1
    30ac:	d0fc      	beq.n	30a8 <trx_sram_read+0x50>
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    30ae:	2104      	movs	r1, #4
    30b0:	7e1a      	ldrb	r2, [r3, #24]
	}
	/* Dummy read since SPI RX is double buffered */
	while (!spi_is_ready_to_read(&master)) {
    30b2:	420a      	tst	r2, r1
    30b4:	d0fc      	beq.n	30b0 <trx_sram_read+0x58>
    30b6:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
    30b8:	0752      	lsls	r2, r2, #29
    30ba:	d514      	bpl.n	30e6 <trx_sram_read+0x8e>

	/* Return value */
	enum status_code retval = STATUS_OK;

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    30bc:	8b5a      	ldrh	r2, [r3, #26]
    30be:	0752      	lsls	r2, r2, #29
    30c0:	d503      	bpl.n	30ca <trx_sram_read+0x72>
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg |= SERCOM_SPI_STATUS_BUFOVF;
    30c2:	8b59      	ldrh	r1, [r3, #26]
    30c4:	2204      	movs	r2, #4
    30c6:	430a      	orrs	r2, r1
    30c8:	835a      	strh	r2, [r3, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    30ca:	4a45      	ldr	r2, [pc, #276]	; (31e0 <trx_sram_read+0x188>)
    30cc:	7992      	ldrb	r2, [r2, #6]
    30ce:	2a01      	cmp	r2, #1
    30d0:	d105      	bne.n	30de <trx_sram_read+0x86>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    30d2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    30d4:	05d2      	lsls	r2, r2, #23
    30d6:	0dd2      	lsrs	r2, r2, #23
    30d8:	4944      	ldr	r1, [pc, #272]	; (31ec <trx_sram_read+0x194>)
    30da:	800a      	strh	r2, [r1, #0]
    30dc:	e003      	b.n	30e6 <trx_sram_read+0x8e>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    30de:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    30e0:	b2d2      	uxtb	r2, r2
    30e2:	4942      	ldr	r1, [pc, #264]	; (31ec <trx_sram_read+0x194>)
    30e4:	800a      	strh	r2, [r1, #0]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    30e6:	2101      	movs	r1, #1
    30e8:	7e1a      	ldrb	r2, [r3, #24]
	}
	spi_read(&master, &dummy_read);

	/* Send the address from which the read operation should start */
	while (!spi_is_ready_to_write(&master)) {
    30ea:	420a      	tst	r2, r1
    30ec:	d0fc      	beq.n	30e8 <trx_sram_read+0x90>
    30ee:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
    30f0:	07d2      	lsls	r2, r2, #31
    30f2:	d500      	bpl.n	30f6 <trx_sram_read+0x9e>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    30f4:	629c      	str	r4, [r3, #40]	; 0x28
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    30f6:	2102      	movs	r1, #2
    30f8:	7e1a      	ldrb	r2, [r3, #24]
	}
	spi_write(&master, addr);
	while (!spi_is_write_complete(&master)) {
    30fa:	420a      	tst	r2, r1
    30fc:	d0fc      	beq.n	30f8 <trx_sram_read+0xa0>
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    30fe:	2104      	movs	r1, #4
    3100:	7e1a      	ldrb	r2, [r3, #24]
	}
	/* Dummy read since SPI RX is double buffered */
	while (!spi_is_ready_to_read(&master)) {
    3102:	420a      	tst	r2, r1
    3104:	d0fc      	beq.n	3100 <trx_sram_read+0xa8>
    3106:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
    3108:	0752      	lsls	r2, r2, #29
    310a:	d50f      	bpl.n	312c <trx_sram_read+0xd4>

	/* Return value */
	enum status_code retval = STATUS_OK;

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    310c:	8b5a      	ldrh	r2, [r3, #26]
    310e:	0752      	lsls	r2, r2, #29
    3110:	d503      	bpl.n	311a <trx_sram_read+0xc2>
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg |= SERCOM_SPI_STATUS_BUFOVF;
    3112:	8b59      	ldrh	r1, [r3, #26]
    3114:	2204      	movs	r2, #4
    3116:	430a      	orrs	r2, r1
    3118:	835a      	strh	r2, [r3, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    311a:	4a31      	ldr	r2, [pc, #196]	; (31e0 <trx_sram_read+0x188>)
    311c:	7992      	ldrb	r2, [r2, #6]
    311e:	2a01      	cmp	r2, #1
    3120:	d109      	bne.n	3136 <trx_sram_read+0xde>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    3122:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    3124:	05db      	lsls	r3, r3, #23
    3126:	0ddb      	lsrs	r3, r3, #23
    3128:	4a30      	ldr	r2, [pc, #192]	; (31ec <trx_sram_read+0x194>)
    312a:	8013      	strh	r3, [r2, #0]
	}
	spi_read(&master, &dummy_read);

	/* Upload the received byte in the user provided location */
	while (length--) {
    312c:	1e73      	subs	r3, r6, #1
    312e:	b2db      	uxtb	r3, r3
    3130:	2e00      	cmp	r6, #0
    3132:	d105      	bne.n	3140 <trx_sram_read+0xe8>
    3134:	e03c      	b.n	31b0 <trx_sram_read+0x158>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    3136:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    3138:	b2db      	uxtb	r3, r3
    313a:	4a2c      	ldr	r2, [pc, #176]	; (31ec <trx_sram_read+0x194>)
    313c:	8013      	strh	r3, [r2, #0]
    313e:	e7f5      	b.n	312c <trx_sram_read+0xd4>
    3140:	3301      	adds	r3, #1
    3142:	469c      	mov	ip, r3
    3144:	44ac      	add	ip, r5
    3146:	2600      	movs	r6, #0
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    3148:	4b25      	ldr	r3, [pc, #148]	; (31e0 <trx_sram_read+0x188>)
    314a:	4699      	mov	r9, r3

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    314c:	2001      	movs	r0, #1
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    314e:	2300      	movs	r3, #0
    3150:	469a      	mov	sl, r3
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    3152:	2402      	movs	r4, #2
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    3154:	2104      	movs	r1, #4
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    3156:	464f      	mov	r7, r9

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg |= SERCOM_SPI_STATUS_BUFOVF;
    3158:	2304      	movs	r3, #4
    315a:	469b      	mov	fp, r3
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    315c:	464b      	mov	r3, r9
    315e:	681b      	ldr	r3, [r3, #0]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    3160:	7e1a      	ldrb	r2, [r3, #24]
		while (!spi_is_ready_to_write(&master)) {
    3162:	4202      	tst	r2, r0
    3164:	d0fc      	beq.n	3160 <trx_sram_read+0x108>
    3166:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
    3168:	4202      	tst	r2, r0
    316a:	d001      	beq.n	3170 <trx_sram_read+0x118>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    316c:	4652      	mov	r2, sl
    316e:	629a      	str	r2, [r3, #40]	; 0x28
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    3170:	7e1a      	ldrb	r2, [r3, #24]
		}
		spi_write(&master, 0);
		while (!spi_is_write_complete(&master)) {
    3172:	4222      	tst	r2, r4
    3174:	d0fc      	beq.n	3170 <trx_sram_read+0x118>
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    3176:	7e1a      	ldrb	r2, [r3, #24]
		}
		/* Dummy read since SPI RX is double buffered */
		while (!spi_is_ready_to_read(&master)) {
    3178:	420a      	tst	r2, r1
    317a:	d0fc      	beq.n	3176 <trx_sram_read+0x11e>
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    317c:	683b      	ldr	r3, [r7, #0]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    317e:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
    3180:	420a      	tst	r2, r1
    3182:	d011      	beq.n	31a8 <trx_sram_read+0x150>

	/* Return value */
	enum status_code retval = STATUS_OK;

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    3184:	8b5a      	ldrh	r2, [r3, #26]
    3186:	420a      	tst	r2, r1
    3188:	d004      	beq.n	3194 <trx_sram_read+0x13c>
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg |= SERCOM_SPI_STATUS_BUFOVF;
    318a:	8b5a      	ldrh	r2, [r3, #26]
    318c:	465e      	mov	r6, fp
    318e:	4332      	orrs	r2, r6
    3190:	b292      	uxth	r2, r2
    3192:	835a      	strh	r2, [r3, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    3194:	4a12      	ldr	r2, [pc, #72]	; (31e0 <trx_sram_read+0x188>)
    3196:	7992      	ldrb	r2, [r2, #6]
    3198:	2a01      	cmp	r2, #1
    319a:	d103      	bne.n	31a4 <trx_sram_read+0x14c>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    319c:	6a9e      	ldr	r6, [r3, #40]	; 0x28
    319e:	05f6      	lsls	r6, r6, #23
    31a0:	0df6      	lsrs	r6, r6, #23
    31a2:	e001      	b.n	31a8 <trx_sram_read+0x150>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    31a4:	6a9e      	ldr	r6, [r3, #40]	; 0x28
    31a6:	b2f6      	uxtb	r6, r6
		}
		spi_read(&master, &temp);
		*data = temp;
    31a8:	702e      	strb	r6, [r5, #0]
		data++;
    31aa:	3501      	adds	r5, #1
	while (!spi_is_ready_to_read(&master)) {
	}
	spi_read(&master, &dummy_read);

	/* Upload the received byte in the user provided location */
	while (length--) {
    31ac:	4565      	cmp	r5, ip
    31ae:	d1d5      	bne.n	315c <trx_sram_read+0x104>
		*data = temp;
		data++;
	}

	/* Stop the SPI transaction by setting SEL high */
	spi_select_slave(&master, &slave, false);
    31b0:	480b      	ldr	r0, [pc, #44]	; (31e0 <trx_sram_read+0x188>)
    31b2:	490c      	ldr	r1, [pc, #48]	; (31e4 <trx_sram_read+0x18c>)
    31b4:	2200      	movs	r2, #0
    31b6:	4b0c      	ldr	r3, [pc, #48]	; (31e8 <trx_sram_read+0x190>)
    31b8:	4798      	blx	r3
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
    31ba:	4643      	mov	r3, r8
    31bc:	2b00      	cmp	r3, #0
    31be:	d005      	beq.n	31cc <trx_sram_read+0x174>
		cpu_irq_enable();
    31c0:	2201      	movs	r2, #1
    31c2:	4b06      	ldr	r3, [pc, #24]	; (31dc <trx_sram_read+0x184>)
    31c4:	701a      	strb	r2, [r3, #0]
    31c6:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
    31ca:	b662      	cpsie	i
	spi_deselect_device(AT86RFX_SPI, &SPI_AT86RFX_DEVICE);
#endif
	/*Restoring the interrupt status which was stored & enabling the global
	 *interrupt */
	LEAVE_TRX_CRITICAL_REGION();
}
    31cc:	bc3c      	pop	{r2, r3, r4, r5}
    31ce:	4690      	mov	r8, r2
    31d0:	4699      	mov	r9, r3
    31d2:	46a2      	mov	sl, r4
    31d4:	46ab      	mov	fp, r5
    31d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    31d8:	0000014d 	.word	0x0000014d
    31dc:	20000008 	.word	0x20000008
    31e0:	20002b48 	.word	0x20002b48
    31e4:	20002b0c 	.word	0x20002b0c
    31e8:	000013c5 	.word	0x000013c5
    31ec:	20002b04 	.word	0x20002b04

000031f0 <encode_remaining_length>:
/*---------------------------------------------------------------------------*/
static void
encode_remaining_length(uint8_t *remaining_length,
                        uint8_t *remaining_length_bytes,
                        uint32_t length)
{
    31f0:	b5f0      	push	{r4, r5, r6, r7, lr}
    31f2:	4647      	mov	r7, r8
    31f4:	b480      	push	{r7}
    31f6:	1c06      	adds	r6, r0, #0
    31f8:	1c0d      	adds	r5, r1, #0
    31fa:	1c14      	adds	r4, r2, #0
  uint8_t digit;

  DBG("MQTT - Encoding length %lu\n\r", length);
    31fc:	4815      	ldr	r0, [pc, #84]	; (3254 <encode_remaining_length+0x64>)
    31fe:	1c11      	adds	r1, r2, #0
    3200:	4b15      	ldr	r3, [pc, #84]	; (3258 <encode_remaining_length+0x68>)
    3202:	4798      	blx	r3

  *remaining_length_bytes = 0;
    3204:	2300      	movs	r3, #0
    3206:	702b      	strb	r3, [r5, #0]
  do {
    digit = length % 128;
    3208:	277f      	movs	r7, #127	; 0x7f
      digit = digit | 0x80;
    }

    remaining_length[*remaining_length_bytes] = digit;
    (*remaining_length_bytes)++;
    DBG("MQTT - Encode len digit '%u' length '%lu'\n\r", digit, length);
    320a:	4b13      	ldr	r3, [pc, #76]	; (3258 <encode_remaining_length+0x68>)
    320c:	4698      	mov	r8, r3

  DBG("MQTT - Encoding length %lu\n\r", length);

  *remaining_length_bytes = 0;
  do {
    digit = length % 128;
    320e:	1c39      	adds	r1, r7, #0
    3210:	4021      	ands	r1, r4
    length = length / 128;
    3212:	09e4      	lsrs	r4, r4, #7
    if(length > 0) {
    3214:	d011      	beq.n	323a <encode_remaining_length+0x4a>
      digit = digit | 0x80;
    3216:	2380      	movs	r3, #128	; 0x80
    3218:	4319      	orrs	r1, r3
    }

    remaining_length[*remaining_length_bytes] = digit;
    321a:	782b      	ldrb	r3, [r5, #0]
    321c:	54f1      	strb	r1, [r6, r3]
    (*remaining_length_bytes)++;
    321e:	782b      	ldrb	r3, [r5, #0]
    3220:	3301      	adds	r3, #1
    3222:	702b      	strb	r3, [r5, #0]
    DBG("MQTT - Encode len digit '%u' length '%lu'\n\r", digit, length);
    3224:	480d      	ldr	r0, [pc, #52]	; (325c <encode_remaining_length+0x6c>)
    3226:	1c22      	adds	r2, r4, #0
    3228:	47c0      	blx	r8
  } while(length > 0 && *remaining_length_bytes < 5);
    322a:	782b      	ldrb	r3, [r5, #0]
    322c:	2b04      	cmp	r3, #4
    322e:	d9ee      	bls.n	320e <encode_remaining_length+0x1e>
  DBG("MQTT - remaining_length_bytes %u\n\r", *remaining_length_bytes);
    3230:	7829      	ldrb	r1, [r5, #0]
    3232:	480b      	ldr	r0, [pc, #44]	; (3260 <encode_remaining_length+0x70>)
    3234:	4b08      	ldr	r3, [pc, #32]	; (3258 <encode_remaining_length+0x68>)
    3236:	4798      	blx	r3
    3238:	e009      	b.n	324e <encode_remaining_length+0x5e>
    length = length / 128;
    if(length > 0) {
      digit = digit | 0x80;
    }

    remaining_length[*remaining_length_bytes] = digit;
    323a:	782b      	ldrb	r3, [r5, #0]
    323c:	54f1      	strb	r1, [r6, r3]
    (*remaining_length_bytes)++;
    323e:	782b      	ldrb	r3, [r5, #0]
    3240:	3301      	adds	r3, #1
    3242:	702b      	strb	r3, [r5, #0]
    DBG("MQTT - Encode len digit '%u' length '%lu'\n\r", digit, length);
    3244:	4805      	ldr	r0, [pc, #20]	; (325c <encode_remaining_length+0x6c>)
    3246:	2200      	movs	r2, #0
    3248:	4b03      	ldr	r3, [pc, #12]	; (3258 <encode_remaining_length+0x68>)
    324a:	4798      	blx	r3
    324c:	e7f0      	b.n	3230 <encode_remaining_length+0x40>
  } while(length > 0 && *remaining_length_bytes < 5);
  DBG("MQTT - remaining_length_bytes %u\n\r", *remaining_length_bytes);
}
    324e:	bc04      	pop	{r2}
    3250:	4690      	mov	r8, r2
    3252:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3254:	00011e54 	.word	0x00011e54
    3258:	00010931 	.word	0x00010931
    325c:	00011e74 	.word	0x00011e74
    3260:	00011ea0 	.word	0x00011ea0

00003264 <call_event>:
/*---------------------------------------------------------------------------*/
static void
call_event(struct mqtt_connection *conn,
           mqtt_event_t event,
           void *data)
{
    3264:	b510      	push	{r4, lr}
    3266:	1c04      	adds	r4, r0, #0
  conn->event_callback(conn, event, data);
    3268:	6e63      	ldr	r3, [r4, #100]	; 0x64
    326a:	4798      	blx	r3
  process_post(conn->app_process, mqtt_update_event, NULL);
    326c:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
    326e:	4b03      	ldr	r3, [pc, #12]	; (327c <call_event+0x18>)
    3270:	7819      	ldrb	r1, [r3, #0]
    3272:	2200      	movs	r2, #0
    3274:	4b02      	ldr	r3, [pc, #8]	; (3280 <call_event+0x1c>)
    3276:	4798      	blx	r3
}
    3278:	bd10      	pop	{r4, pc}
    327a:	46c0      	nop			; (mov r8, r8)
    327c:	20002b54 	.word	0x20002b54
    3280:	0000ebf9 	.word	0x0000ebf9

00003284 <reset_packet>:
  process_post(&mqtt_process, mqtt_do_pingreq_event, conn);
}
/*---------------------------------------------------------------------------*/
static void
reset_packet(struct mqtt_in_packet *packet)
{
    3284:	b510      	push	{r4, lr}
    3286:	1c04      	adds	r4, r0, #0
  memset(packet, 0, sizeof(struct mqtt_in_packet));
    3288:	2100      	movs	r1, #0
    328a:	2286      	movs	r2, #134	; 0x86
    328c:	0092      	lsls	r2, r2, #2
    328e:	4b02      	ldr	r3, [pc, #8]	; (3298 <reset_packet+0x14>)
    3290:	4798      	blx	r3
  packet->remaining_multiplier = 1;
    3292:	2301      	movs	r3, #1
    3294:	73a3      	strb	r3, [r4, #14]
}
    3296:	bd10      	pop	{r4, pc}
    3298:	00010921 	.word	0x00010921

0000329c <handle_publish>:
  call_event(conn, MQTT_EVENT_PUBACK, &conn->in_packet.mid);
}
/*---------------------------------------------------------------------------*/
static void
handle_publish(struct mqtt_connection *conn)
{
    329c:	b538      	push	{r3, r4, r5, lr}
    329e:	1c04      	adds	r4, r0, #0
  DBG("MQTT - Got PUBLISH, called once per manageable chunk of message.\n\r");
    32a0:	4812      	ldr	r0, [pc, #72]	; (32ec <handle_publish+0x50>)
    32a2:	4d13      	ldr	r5, [pc, #76]	; (32f0 <handle_publish+0x54>)
    32a4:	47a8      	blx	r5
  DBG("MQTT - Handling publish on topic '%s'\n\r", conn->in_publish_msg.topic);
    32a6:	4b13      	ldr	r3, [pc, #76]	; (32f4 <handle_publish+0x58>)
    32a8:	18e1      	adds	r1, r4, r3
    32aa:	4813      	ldr	r0, [pc, #76]	; (32f8 <handle_publish+0x5c>)
    32ac:	47a8      	blx	r5

  DBG("MQTT - This chunk is %i bytes\n\r", conn->in_packet.payload_pos);
    32ae:	4b13      	ldr	r3, [pc, #76]	; (32fc <handle_publish+0x60>)
    32b0:	5ce1      	ldrb	r1, [r4, r3]
    32b2:	4813      	ldr	r0, [pc, #76]	; (3300 <handle_publish+0x64>)
    32b4:	47a8      	blx	r5

  if(((conn->in_packet.fhdr & 0x09) >> 1) > 0) {
    PRINTF("MQTT - Error, got incoming PUBLISH with QoS > 0, not supported atm!\n\r");
  }

  call_event(conn, MQTT_EVENT_PUBLISH, &conn->in_publish_msg);
    32b6:	23d8      	movs	r3, #216	; 0xd8
    32b8:	00db      	lsls	r3, r3, #3
    32ba:	18e2      	adds	r2, r4, r3
    32bc:	1c20      	adds	r0, r4, #0
    32be:	2104      	movs	r1, #4
    32c0:	4b10      	ldr	r3, [pc, #64]	; (3304 <handle_publish+0x68>)
    32c2:	4798      	blx	r3

  if(conn->in_publish_msg.first_chunk == 1) {
    32c4:	4b10      	ldr	r3, [pc, #64]	; (3308 <handle_publish+0x6c>)
    32c6:	5ce3      	ldrb	r3, [r4, r3]
    32c8:	2b01      	cmp	r3, #1
    32ca:	d102      	bne.n	32d2 <handle_publish+0x36>
    conn->in_publish_msg.first_chunk = 0;
    32cc:	2200      	movs	r2, #0
    32ce:	4b0e      	ldr	r3, [pc, #56]	; (3308 <handle_publish+0x6c>)
    32d0:	54e2      	strb	r2, [r4, r3]
  }

  /* If this is the last time handle_publish will be called, reset packet. */
  if(conn->in_publish_msg.payload_left == 0) {
    32d2:	4b0e      	ldr	r3, [pc, #56]	; (330c <handle_publish+0x70>)
    32d4:	5ae3      	ldrh	r3, [r4, r3]
    32d6:	2b00      	cmp	r3, #0
    32d8:	d107      	bne.n	32ea <handle_publish+0x4e>

    /* Check for QoS and initiate the reply, do not rely on the data in the
     * in_packet being untouched. */

    DBG("MQTT - (handle_publish) resetting packet.\n\r");
    32da:	480d      	ldr	r0, [pc, #52]	; (3310 <handle_publish+0x74>)
    32dc:	4b04      	ldr	r3, [pc, #16]	; (32f0 <handle_publish+0x54>)
    32de:	4798      	blx	r3
    reset_packet(&conn->in_packet);
    32e0:	2395      	movs	r3, #149	; 0x95
    32e2:	00db      	lsls	r3, r3, #3
    32e4:	18e0      	adds	r0, r4, r3
    32e6:	4b0b      	ldr	r3, [pc, #44]	; (3314 <handle_publish+0x78>)
    32e8:	4798      	blx	r3
  }
}
    32ea:	bd38      	pop	{r3, r4, r5, pc}
    32ec:	00011ec4 	.word	0x00011ec4
    32f0:	00010931 	.word	0x00010931
    32f4:	000006c4 	.word	0x000006c4
    32f8:	00011f08 	.word	0x00011f08
    32fc:	000004b9 	.word	0x000004b9
    3300:	00011f30 	.word	0x00011f30
    3304:	00003265 	.word	0x00003265
    3308:	0000070e 	.word	0x0000070e
    330c:	00000712 	.word	0x00000712
    3310:	00011f50 	.word	0x00011f50
    3314:	00003285 	.word	0x00003285

00003318 <connect_tcp>:
  conn->state = MQTT_CONN_STATE_NOT_CONNECTED;
}
/*---------------------------------------------------------------------------*/
static void
connect_tcp(struct mqtt_connection *conn)
{
    3318:	b570      	push	{r4, r5, r6, lr}
    331a:	b084      	sub	sp, #16
    331c:	1c04      	adds	r4, r0, #0
  conn->state = MQTT_CONN_STATE_TCP_CONNECTING;
    331e:	2205      	movs	r2, #5
    3320:	2360      	movs	r3, #96	; 0x60
    3322:	54c2      	strb	r2, [r0, r3]
}
/*---------------------------------------------------------------------------*/
static void
reset_defaults(struct mqtt_connection *conn)
{
  conn->mid_counter = 1;
    3324:	3a04      	subs	r2, #4
    3326:	3308      	adds	r3, #8
    3328:	52c2      	strh	r2, [r0, r3]
  PT_INIT(&conn->out_proto_thread);
    332a:	2200      	movs	r2, #0
    332c:	23a7      	movs	r3, #167	; 0xa7
    332e:	009b      	lsls	r3, r3, #2
    3330:	52c2      	strh	r2, [r0, r3]
  conn->waiting_for_pingresp = 0;
    3332:	2338      	movs	r3, #56	; 0x38
    3334:	54c2      	strb	r2, [r0, r3]

  reset_packet(&conn->in_packet);
    3336:	2395      	movs	r3, #149	; 0x95
    3338:	00db      	lsls	r3, r3, #3
    333a:	18c0      	adds	r0, r0, r3
    333c:	4b10      	ldr	r3, [pc, #64]	; (3380 <connect_tcp+0x68>)
    333e:	4798      	blx	r3
  conn->out_buffer_sent = 0;
    3340:	239d      	movs	r3, #157	; 0x9d
    3342:	009b      	lsls	r3, r3, #2
    3344:	2200      	movs	r2, #0
    3346:	54e2      	strb	r2, [r4, r3]
connect_tcp(struct mqtt_connection *conn)
{
  conn->state = MQTT_CONN_STATE_TCP_CONNECTING;

  reset_defaults(conn);
  tcp_socket_register(&(conn->socket),
    3348:	4b0e      	ldr	r3, [pc, #56]	; (3384 <connect_tcp+0x6c>)
    334a:	18e5      	adds	r5, r4, r3
                      conn,
                      conn->in_buffer,
    334c:	4b0e      	ldr	r3, [pc, #56]	; (3388 <connect_tcp+0x70>)
    334e:	18e2      	adds	r2, r4, r3
connect_tcp(struct mqtt_connection *conn)
{
  conn->state = MQTT_CONN_STATE_TCP_CONNECTING;

  reset_defaults(conn);
  tcp_socket_register(&(conn->socket),
    3350:	3ba6      	subs	r3, #166	; 0xa6
                      conn,
                      conn->in_buffer,
                      MQTT_TCP_INPUT_BUFF_SIZE,
                      conn->out_buffer,
    3352:	1c21      	adds	r1, r4, #0
    3354:	3174      	adds	r1, #116	; 0x74
connect_tcp(struct mqtt_connection *conn)
{
  conn->state = MQTT_CONN_STATE_TCP_CONNECTING;

  reset_defaults(conn);
  tcp_socket_register(&(conn->socket),
    3356:	9100      	str	r1, [sp, #0]
    3358:	9301      	str	r3, [sp, #4]
    335a:	490c      	ldr	r1, [pc, #48]	; (338c <connect_tcp+0x74>)
    335c:	9102      	str	r1, [sp, #8]
    335e:	490c      	ldr	r1, [pc, #48]	; (3390 <connect_tcp+0x78>)
    3360:	9103      	str	r1, [sp, #12]
    3362:	1c28      	adds	r0, r5, #0
    3364:	1c21      	adds	r1, r4, #0
    3366:	4e0b      	ldr	r6, [pc, #44]	; (3394 <connect_tcp+0x7c>)
    3368:	47b0      	blx	r6
                      MQTT_TCP_INPUT_BUFF_SIZE,
                      conn->out_buffer,
                      MQTT_TCP_OUTPUT_BUFF_SIZE,
                      tcp_input,
                      tcp_event);
  tcp_socket_connect(&(conn->socket), &(conn->server_ip), conn->server_port);
    336a:	23e3      	movs	r3, #227	; 0xe3
    336c:	00db      	lsls	r3, r3, #3
    336e:	18e1      	adds	r1, r4, r3
    3370:	3310      	adds	r3, #16
    3372:	5ae2      	ldrh	r2, [r4, r3]
    3374:	1c28      	adds	r0, r5, #0
    3376:	4b08      	ldr	r3, [pc, #32]	; (3398 <connect_tcp+0x80>)
    3378:	4798      	blx	r3
}
    337a:	b004      	add	sp, #16
    337c:	bd70      	pop	{r4, r5, r6, pc}
    337e:	46c0      	nop			; (mov r8, r8)
    3380:	00003285 	.word	0x00003285
    3384:	0000072c 	.word	0x0000072c
    3388:	000002a6 	.word	0x000002a6
    338c:	0000339d 	.word	0x0000339d
    3390:	00003971 	.word	0x00003971
    3394:	0000a379 	.word	0x0000a379
    3398:	0000a3f1 	.word	0x0000a3f1

0000339c <tcp_input>:
static int
tcp_input(struct tcp_socket *s,
          void *ptr,
          const uint8_t *input_data_ptr,
          int input_data_len)
{
    339c:	b5f0      	push	{r4, r5, r6, r7, lr}
    339e:	465f      	mov	r7, fp
    33a0:	4656      	mov	r6, sl
    33a2:	464d      	mov	r5, r9
    33a4:	4644      	mov	r4, r8
    33a6:	b4f0      	push	{r4, r5, r6, r7}
    33a8:	b085      	sub	sp, #20
  struct mqtt_connection *conn = ptr;
  uint32_t pos = 0;
  uint32_t copy_bytes = 0;
  uint8_t byte;

  if(input_data_len == 0) {
    33aa:	2b00      	cmp	r3, #0
    33ac:	d100      	bne.n	33b0 <tcp_input+0x14>
    33ae:	e25b      	b.n	3868 <tcp_input+0x4cc>
    33b0:	469a      	mov	sl, r3
    33b2:	4693      	mov	fp, r2
    33b4:	1c0d      	adds	r5, r1, #0
    return 0;
  }

  if(conn->in_packet.packet_received) {
    33b6:	2396      	movs	r3, #150	; 0x96
    33b8:	00db      	lsls	r3, r3, #3
    33ba:	5ccb      	ldrb	r3, [r1, r3]
    33bc:	2b00      	cmp	r3, #0
    33be:	d004      	beq.n	33ca <tcp_input+0x2e>
    reset_packet(&conn->in_packet);
    33c0:	2395      	movs	r3, #149	; 0x95
    33c2:	00db      	lsls	r3, r3, #3
    33c4:	18c8      	adds	r0, r1, r3
    33c6:	4bcf      	ldr	r3, [pc, #828]	; (3704 <tcp_input+0x368>)
    33c8:	4798      	blx	r3
  }

  DBG("tcp_input with %i bytes of data:\n\r", input_data_len);
    33ca:	48cf      	ldr	r0, [pc, #828]	; (3708 <tcp_input+0x36c>)
    33cc:	4651      	mov	r1, sl
    33ce:	4bcf      	ldr	r3, [pc, #828]	; (370c <tcp_input+0x370>)
    33d0:	4798      	blx	r3

  /* Read the fixed header field, if we do not have it */
  if(!conn->in_packet.fhdr) {
    33d2:	4bcf      	ldr	r3, [pc, #828]	; (3710 <tcp_input+0x374>)
    33d4:	5ceb      	ldrb	r3, [r5, r3]
          void *ptr,
          const uint8_t *input_data_ptr,
          int input_data_len)
{
  struct mqtt_connection *conn = ptr;
  uint32_t pos = 0;
    33d6:	2200      	movs	r2, #0
    33d8:	4691      	mov	r9, r2
  }

  DBG("tcp_input with %i bytes of data:\n\r", input_data_len);

  /* Read the fixed header field, if we do not have it */
  if(!conn->in_packet.fhdr) {
    33da:	2b00      	cmp	r3, #0
    33dc:	d110      	bne.n	3400 <tcp_input+0x64>
    conn->in_packet.fhdr = input_data_ptr[pos++];
    33de:	465b      	mov	r3, fp
    33e0:	7819      	ldrb	r1, [r3, #0]
    33e2:	4bcb      	ldr	r3, [pc, #812]	; (3710 <tcp_input+0x374>)
    33e4:	54e9      	strb	r1, [r5, r3]
    conn->in_packet.byte_counter++;
    33e6:	4acb      	ldr	r2, [pc, #812]	; (3714 <tcp_input+0x378>)
    33e8:	58ab      	ldr	r3, [r5, r2]
    33ea:	3301      	adds	r3, #1
    33ec:	50ab      	str	r3, [r5, r2]

    DBG("MQTT - Read VHDR '%02X'\n\r", conn->in_packet.fhdr);
    33ee:	48ca      	ldr	r0, [pc, #808]	; (3718 <tcp_input+0x37c>)
    33f0:	4bc6      	ldr	r3, [pc, #792]	; (370c <tcp_input+0x370>)
    33f2:	4798      	blx	r3

    if(pos >= input_data_len) {
    33f4:	4653      	mov	r3, sl
    33f6:	2b01      	cmp	r3, #1
    33f8:	d800      	bhi.n	33fc <tcp_input+0x60>
    33fa:	e235      	b.n	3868 <tcp_input+0x4cc>

  DBG("tcp_input with %i bytes of data:\n\r", input_data_len);

  /* Read the fixed header field, if we do not have it */
  if(!conn->in_packet.fhdr) {
    conn->in_packet.fhdr = input_data_ptr[pos++];
    33fc:	2301      	movs	r3, #1
    33fe:	4699      	mov	r9, r3
      return 0;
    }
  }

  /* Read the Remaining Length field, if we do not have it */
  if(!conn->in_packet.has_remaining_length) {
    3400:	4bc6      	ldr	r3, [pc, #792]	; (371c <tcp_input+0x380>)
    3402:	5ceb      	ldrb	r3, [r5, r3]
    3404:	2b00      	cmp	r3, #0
    3406:	d139      	bne.n	347c <tcp_input+0xe0>
    3408:	465f      	mov	r7, fp
    340a:	444f      	add	r7, r9
      if(pos >= input_data_len) {
        return 0;
      }

      byte = input_data_ptr[pos++];
      conn->in_packet.byte_counter++;
    340c:	4ec1      	ldr	r6, [pc, #772]	; (3714 <tcp_input+0x378>)
      conn->in_packet.remaining_length_bytes++;
      DBG("MQTT - Read Remaining Length byte\n\r");
    340e:	4bbf      	ldr	r3, [pc, #764]	; (370c <tcp_input+0x370>)
    3410:	4698      	mov	r8, r3
  }

  /* Read the Remaining Length field, if we do not have it */
  if(!conn->in_packet.has_remaining_length) {
    do {
      if(pos >= input_data_len) {
    3412:	45ca      	cmp	sl, r9
    3414:	d800      	bhi.n	3418 <tcp_input+0x7c>
    3416:	e227      	b.n	3868 <tcp_input+0x4cc>
        return 0;
      }

      byte = input_data_ptr[pos++];
    3418:	2301      	movs	r3, #1
    341a:	469c      	mov	ip, r3
    341c:	44e1      	add	r9, ip
    341e:	783c      	ldrb	r4, [r7, #0]
      conn->in_packet.byte_counter++;
    3420:	59ab      	ldr	r3, [r5, r6]
    3422:	3301      	adds	r3, #1
    3424:	51ab      	str	r3, [r5, r6]
      conn->in_packet.remaining_length_bytes++;
    3426:	2297      	movs	r2, #151	; 0x97
    3428:	00d2      	lsls	r2, r2, #3
    342a:	5cab      	ldrb	r3, [r5, r2]
    342c:	3301      	adds	r3, #1
    342e:	54ab      	strb	r3, [r5, r2]
      DBG("MQTT - Read Remaining Length byte\n\r");
    3430:	48bb      	ldr	r0, [pc, #748]	; (3720 <tcp_input+0x384>)
    3432:	47c0      	blx	r8

      if(conn->in_packet.byte_counter > 5) {
    3434:	59ab      	ldr	r3, [r5, r6]
    3436:	2b05      	cmp	r3, #5
    3438:	d908      	bls.n	344c <tcp_input+0xb0>
        call_event(conn, MQTT_EVENT_ERROR, NULL);
    343a:	1c28      	adds	r0, r5, #0
    343c:	2180      	movs	r1, #128	; 0x80
    343e:	2200      	movs	r2, #0
    3440:	4bb8      	ldr	r3, [pc, #736]	; (3724 <tcp_input+0x388>)
    3442:	4798      	blx	r3
        DBG("Received more then 4 byte 'remaining lenght'.");
    3444:	48b8      	ldr	r0, [pc, #736]	; (3728 <tcp_input+0x38c>)
    3446:	4bb1      	ldr	r3, [pc, #708]	; (370c <tcp_input+0x370>)
    3448:	4798      	blx	r3
        return 0;
    344a:	e20d      	b.n	3868 <tcp_input+0x4cc>
      }

      conn->in_packet.remaining_length +=
        (byte & 127) * conn->in_packet.remaining_multiplier;
    344c:	49b7      	ldr	r1, [pc, #732]	; (372c <tcp_input+0x390>)
    344e:	5c6a      	ldrb	r2, [r5, r1]
        call_event(conn, MQTT_EVENT_ERROR, NULL);
        DBG("Received more then 4 byte 'remaining lenght'.");
        return 0;
      }

      conn->in_packet.remaining_length +=
    3450:	237f      	movs	r3, #127	; 0x7f
    3452:	4023      	ands	r3, r4
    3454:	4353      	muls	r3, r2
    3456:	9301      	str	r3, [sp, #4]
    3458:	48b5      	ldr	r0, [pc, #724]	; (3730 <tcp_input+0x394>)
    345a:	5a2b      	ldrh	r3, [r5, r0]
    345c:	469c      	mov	ip, r3
    345e:	9b01      	ldr	r3, [sp, #4]
    3460:	4463      	add	r3, ip
    3462:	522b      	strh	r3, [r5, r0]
        (byte & 127) * conn->in_packet.remaining_multiplier;
      conn->in_packet.remaining_multiplier *= 128;
    3464:	01d2      	lsls	r2, r2, #7
    3466:	546a      	strb	r2, [r5, r1]
    3468:	3701      	adds	r7, #1
    } while((byte & 128) != 0);
    346a:	b264      	sxtb	r4, r4
    346c:	2c00      	cmp	r4, #0
    346e:	dbd0      	blt.n	3412 <tcp_input+0x76>

    DBG("MQTT - Finished reading remaining length byte\n\r");
    3470:	48b0      	ldr	r0, [pc, #704]	; (3734 <tcp_input+0x398>)
    3472:	4ba6      	ldr	r3, [pc, #664]	; (370c <tcp_input+0x370>)
    3474:	4798      	blx	r3
    conn->in_packet.has_remaining_length = 1;
    3476:	2201      	movs	r2, #1
    3478:	4ba8      	ldr	r3, [pc, #672]	; (371c <tcp_input+0x380>)
    347a:	54ea      	strb	r2, [r5, r3]
   * Check for unsupported payload length. Will read all incoming data from the
   * server in any case and then reset the packet.
   *
   * TODO: Decide if we, for example, want to disconnect instead.
   */
  if((conn->in_packet.remaining_length > MQTT_INPUT_BUFF_SIZE) &&
    347c:	4bac      	ldr	r3, [pc, #688]	; (3730 <tcp_input+0x394>)
    347e:	5aea      	ldrh	r2, [r5, r3]
    3480:	2380      	movs	r3, #128	; 0x80
    3482:	009b      	lsls	r3, r3, #2
    3484:	429a      	cmp	r2, r3
    3486:	d800      	bhi.n	348a <tcp_input+0xee>
    3488:	e0d0      	b.n	362c <tcp_input+0x290>
     (conn->in_packet.fhdr & 0xF0) != MQTT_FHDR_MSG_TYPE_PUBLISH) {
    348a:	4ba1      	ldr	r3, [pc, #644]	; (3710 <tcp_input+0x374>)
    348c:	5ceb      	ldrb	r3, [r5, r3]
   * Check for unsupported payload length. Will read all incoming data from the
   * server in any case and then reset the packet.
   *
   * TODO: Decide if we, for example, want to disconnect instead.
   */
  if((conn->in_packet.remaining_length > MQTT_INPUT_BUFF_SIZE) &&
    348e:	210f      	movs	r1, #15
    3490:	438b      	bics	r3, r1
    3492:	2b30      	cmp	r3, #48	; 0x30
    3494:	d100      	bne.n	3498 <tcp_input+0xfc>
    3496:	e0c9      	b.n	362c <tcp_input+0x290>
     (conn->in_packet.fhdr & 0xF0) != MQTT_FHDR_MSG_TYPE_PUBLISH) {

    PRINTF("MQTT - Error, unsupported payload size for non-PUBLISH message\n\r");

    conn->in_packet.byte_counter += input_data_len;
    3498:	499e      	ldr	r1, [pc, #632]	; (3714 <tcp_input+0x378>)
    349a:	586b      	ldr	r3, [r5, r1]
    349c:	4453      	add	r3, sl
    349e:	506b      	str	r3, [r5, r1]
    if(conn->in_packet.byte_counter >=
       (MQTT_FHDR_SIZE + conn->in_packet.remaining_length)) {
    34a0:	3201      	adds	r2, #1
     (conn->in_packet.fhdr & 0xF0) != MQTT_FHDR_MSG_TYPE_PUBLISH) {

    PRINTF("MQTT - Error, unsupported payload size for non-PUBLISH message\n\r");

    conn->in_packet.byte_counter += input_data_len;
    if(conn->in_packet.byte_counter >=
    34a2:	4293      	cmp	r3, r2
    34a4:	d200      	bcs.n	34a8 <tcp_input+0x10c>
    34a6:	e1df      	b.n	3868 <tcp_input+0x4cc>
       (MQTT_FHDR_SIZE + conn->in_packet.remaining_length)) {
      conn->in_packet.packet_received = 1;
    34a8:	2201      	movs	r2, #1
    34aa:	2396      	movs	r3, #150	; 0x96
    34ac:	00db      	lsls	r3, r3, #3
    34ae:	54ea      	strb	r2, [r5, r3]
    34b0:	e1da      	b.n	3868 <tcp_input+0x4cc>
   *       this loop.
   */
  while(conn->in_packet.byte_counter <
        (MQTT_FHDR_SIZE + conn->in_packet.remaining_length)) {

    if((conn->in_packet.fhdr & 0xF0) == MQTT_FHDR_MSG_TYPE_PUBLISH &&
    34b2:	4b97      	ldr	r3, [pc, #604]	; (3710 <tcp_input+0x374>)
    34b4:	5ceb      	ldrb	r3, [r5, r3]
    34b6:	210f      	movs	r1, #15
    34b8:	438b      	bics	r3, r1
    34ba:	2b30      	cmp	r3, #48	; 0x30
    34bc:	d173      	bne.n	35a6 <tcp_input+0x20a>
       conn->in_packet.topic_received == 0) {
    34be:	4b9e      	ldr	r3, [pc, #632]	; (3738 <tcp_input+0x39c>)
   *       this loop.
   */
  while(conn->in_packet.byte_counter <
        (MQTT_FHDR_SIZE + conn->in_packet.remaining_length)) {

    if((conn->in_packet.fhdr & 0xF0) == MQTT_FHDR_MSG_TYPE_PUBLISH &&
    34c0:	5ceb      	ldrb	r3, [r5, r3]
    34c2:	2b00      	cmp	r3, #0
    34c4:	d16f      	bne.n	35a6 <tcp_input+0x20a>
                   int input_data_len)
{
  uint16_t copy_bytes;

  /* Read out topic length */
  if(conn->in_packet.topic_len_received == 0) {
    34c6:	4b9d      	ldr	r3, [pc, #628]	; (373c <tcp_input+0x3a0>)
    34c8:	5ceb      	ldrb	r3, [r5, r3]
    34ca:	2b00      	cmp	r3, #0
    34cc:	d11c      	bne.n	3508 <tcp_input+0x16c>
    conn->in_packet.topic_len = (input_data_ptr[(*pos)++] << 8);
    34ce:	464b      	mov	r3, r9
    34d0:	1c58      	adds	r0, r3, #1
    34d2:	465b      	mov	r3, fp
    34d4:	4649      	mov	r1, r9
    34d6:	5c5b      	ldrb	r3, [r3, r1]
    34d8:	021b      	lsls	r3, r3, #8
    34da:	4999      	ldr	r1, [pc, #612]	; (3740 <tcp_input+0x3a4>)
    34dc:	526b      	strh	r3, [r5, r1]
    conn->in_packet.byte_counter++;
    34de:	1c51      	adds	r1, r2, #1
    34e0:	4c8c      	ldr	r4, [pc, #560]	; (3714 <tcp_input+0x378>)
    34e2:	5129      	str	r1, [r5, r4]
    if(*pos >= input_data_len) {
    34e4:	4550      	cmp	r0, sl
    34e6:	d25d      	bcs.n	35a4 <tcp_input+0x208>
      return;
    }
    conn->in_packet.topic_len |= input_data_ptr[(*pos)++];
    34e8:	2102      	movs	r1, #2
    34ea:	468c      	mov	ip, r1
    34ec:	44e1      	add	r9, ip
    34ee:	4659      	mov	r1, fp
    34f0:	5c09      	ldrb	r1, [r1, r0]
    34f2:	4319      	orrs	r1, r3
    34f4:	4b92      	ldr	r3, [pc, #584]	; (3740 <tcp_input+0x3a4>)
    34f6:	52e9      	strh	r1, [r5, r3]
    conn->in_packet.byte_counter++;
    34f8:	3202      	adds	r2, #2
    34fa:	512a      	str	r2, [r5, r4]
    conn->in_packet.topic_len_received = 1;
    34fc:	2201      	movs	r2, #1
    34fe:	4b8f      	ldr	r3, [pc, #572]	; (373c <tcp_input+0x3a0>)
    3500:	54ea      	strb	r2, [r5, r3]

    DBG("MQTT - Read PUBLISH topic len %i\n\r", conn->in_packet.topic_len);
    3502:	4890      	ldr	r0, [pc, #576]	; (3744 <tcp_input+0x3a8>)
    3504:	4b81      	ldr	r3, [pc, #516]	; (370c <tcp_input+0x370>)
    3506:	4798      	blx	r3
    /* WARNING: Check here if TOPIC fits in payload area, otherwise error */
  }

  /* Read out topic */
  if(conn->in_packet.topic_len_received == 1 &&
    3508:	4b8c      	ldr	r3, [pc, #560]	; (373c <tcp_input+0x3a0>)
    350a:	5aeb      	ldrh	r3, [r5, r3]
    350c:	2b01      	cmp	r3, #1
    350e:	d14a      	bne.n	35a6 <tcp_input+0x20a>
     conn->in_packet.topic_received == 0) {
    copy_bytes = MIN(conn->in_packet.topic_len - conn->in_packet.topic_pos,
    3510:	4b8d      	ldr	r3, [pc, #564]	; (3748 <tcp_input+0x3ac>)
    3512:	5ae9      	ldrh	r1, [r5, r3]
    3514:	4b8a      	ldr	r3, [pc, #552]	; (3740 <tcp_input+0x3a4>)
    3516:	5aeb      	ldrh	r3, [r5, r3]
    3518:	1a5b      	subs	r3, r3, r1
    351a:	4652      	mov	r2, sl
    351c:	4648      	mov	r0, r9
    351e:	1a17      	subs	r7, r2, r0
    3520:	429f      	cmp	r7, r3
    3522:	d900      	bls.n	3526 <tcp_input+0x18a>
    3524:	1c1f      	adds	r7, r3, #0
    3526:	043e      	lsls	r6, r7, #16
    3528:	0c36      	lsrs	r6, r6, #16
                     input_data_len - *pos);
    DBG("MQTT - topic_pos: %i copy_bytes: %i", conn->in_packet.topic_pos,
    352a:	4888      	ldr	r0, [pc, #544]	; (374c <tcp_input+0x3b0>)
    352c:	1c32      	adds	r2, r6, #0
    352e:	4b77      	ldr	r3, [pc, #476]	; (370c <tcp_input+0x370>)
    3530:	4798      	blx	r3
        copy_bytes);
    memcpy(&conn->in_publish_msg.topic[conn->in_packet.topic_pos],
    3532:	4c85      	ldr	r4, [pc, #532]	; (3748 <tcp_input+0x3ac>)
    3534:	5b28      	ldrh	r0, [r5, r4]
    3536:	1828      	adds	r0, r5, r0
    3538:	4b85      	ldr	r3, [pc, #532]	; (3750 <tcp_input+0x3b4>)
    353a:	469c      	mov	ip, r3
    353c:	4460      	add	r0, ip
           &input_data_ptr[*pos],
    353e:	4659      	mov	r1, fp
    3540:	4449      	add	r1, r9
     conn->in_packet.topic_received == 0) {
    copy_bytes = MIN(conn->in_packet.topic_len - conn->in_packet.topic_pos,
                     input_data_len - *pos);
    DBG("MQTT - topic_pos: %i copy_bytes: %i", conn->in_packet.topic_pos,
        copy_bytes);
    memcpy(&conn->in_publish_msg.topic[conn->in_packet.topic_pos],
    3542:	1c32      	adds	r2, r6, #0
    3544:	4b83      	ldr	r3, [pc, #524]	; (3754 <tcp_input+0x3b8>)
    3546:	4798      	blx	r3
           &input_data_ptr[*pos],
           copy_bytes);
    (*pos) += copy_bytes;
    3548:	44b1      	add	r9, r6
    conn->in_packet.byte_counter += copy_bytes;
    354a:	4b72      	ldr	r3, [pc, #456]	; (3714 <tcp_input+0x378>)
    354c:	58ea      	ldr	r2, [r5, r3]
    354e:	4694      	mov	ip, r2
    3550:	4466      	add	r6, ip
    3552:	50ee      	str	r6, [r5, r3]
    conn->in_packet.topic_pos += copy_bytes;
    3554:	5b2b      	ldrh	r3, [r5, r4]
    3556:	18fb      	adds	r3, r7, r3
    3558:	b29b      	uxth	r3, r3
    355a:	532b      	strh	r3, [r5, r4]

    if(conn->in_packet.topic_len - conn->in_packet.topic_pos == 0) {
    355c:	4a78      	ldr	r2, [pc, #480]	; (3740 <tcp_input+0x3a4>)
    355e:	5aaa      	ldrh	r2, [r5, r2]
    3560:	429a      	cmp	r2, r3
    3562:	d11b      	bne.n	359c <tcp_input+0x200>
      DBG("MQTT - Got topic '%s'", conn->in_publish_msg.topic);
    3564:	487c      	ldr	r0, [pc, #496]	; (3758 <tcp_input+0x3bc>)
    3566:	4b7a      	ldr	r3, [pc, #488]	; (3750 <tcp_input+0x3b4>)
    3568:	18e9      	adds	r1, r5, r3
    356a:	4b68      	ldr	r3, [pc, #416]	; (370c <tcp_input+0x370>)
    356c:	4798      	blx	r3
      conn->in_packet.topic_received = 1;
    356e:	2201      	movs	r2, #1
    3570:	4b71      	ldr	r3, [pc, #452]	; (3738 <tcp_input+0x39c>)
    3572:	54ea      	strb	r2, [r5, r3]
      conn->in_publish_msg.topic[conn->in_packet.topic_pos] = '\0';
    3574:	5b2b      	ldrh	r3, [r5, r4]
    3576:	18eb      	adds	r3, r5, r3
    3578:	22d8      	movs	r2, #216	; 0xd8
    357a:	00d2      	lsls	r2, r2, #3
    357c:	4694      	mov	ip, r2
    357e:	4463      	add	r3, ip
    3580:	2200      	movs	r2, #0
    3582:	711a      	strb	r2, [r3, #4]
      conn->in_publish_msg.payload_length =
        conn->in_packet.remaining_length - conn->in_packet.topic_len - 2;
    3584:	4b6a      	ldr	r3, [pc, #424]	; (3730 <tcp_input+0x394>)
    3586:	5aeb      	ldrh	r3, [r5, r3]
    3588:	3b02      	subs	r3, #2
    358a:	4a6d      	ldr	r2, [pc, #436]	; (3740 <tcp_input+0x3a4>)

    if(conn->in_packet.topic_len - conn->in_packet.topic_pos == 0) {
      DBG("MQTT - Got topic '%s'", conn->in_publish_msg.topic);
      conn->in_packet.topic_received = 1;
      conn->in_publish_msg.topic[conn->in_packet.topic_pos] = '\0';
      conn->in_publish_msg.payload_length =
    358c:	5aaa      	ldrh	r2, [r5, r2]
    358e:	1a9b      	subs	r3, r3, r2
    3590:	b29b      	uxth	r3, r3
    3592:	22e2      	movs	r2, #226	; 0xe2
    3594:	00d2      	lsls	r2, r2, #3
    3596:	52ab      	strh	r3, [r5, r2]
        conn->in_packet.remaining_length - conn->in_packet.topic_len - 2;
      conn->in_publish_msg.payload_left = conn->in_publish_msg.payload_length;
    3598:	4a70      	ldr	r2, [pc, #448]	; (375c <tcp_input+0x3c0>)
    359a:	52ab      	strh	r3, [r5, r2]
    }

    /* Set this once per incomming publish message */
    conn->in_publish_msg.first_chunk = 1;
    359c:	2201      	movs	r2, #1
    359e:	4b70      	ldr	r3, [pc, #448]	; (3760 <tcp_input+0x3c4>)
    35a0:	54ea      	strb	r2, [r5, r3]
    35a2:	e000      	b.n	35a6 <tcp_input+0x20a>
{
  uint16_t copy_bytes;

  /* Read out topic length */
  if(conn->in_packet.topic_len_received == 0) {
    conn->in_packet.topic_len = (input_data_ptr[(*pos)++] << 8);
    35a4:	4681      	mov	r9, r0
       conn->in_packet.topic_received == 0) {
      parse_publish_vhdr(conn, &pos, input_data_ptr, input_data_len);
    }

    /* Read in as much as we can into the packet payload */
    copy_bytes = MIN(input_data_len - pos,
    35a6:	46d0      	mov	r8, sl
    35a8:	4b6e      	ldr	r3, [pc, #440]	; (3764 <tcp_input+0x3c8>)
    35aa:	5cea      	ldrb	r2, [r5, r3]
    35ac:	2380      	movs	r3, #128	; 0x80
    35ae:	009b      	lsls	r3, r3, #2
    35b0:	1a9b      	subs	r3, r3, r2
    35b2:	4652      	mov	r2, sl
    35b4:	4649      	mov	r1, r9
    35b6:	1a56      	subs	r6, r2, r1
    35b8:	429e      	cmp	r6, r3
    35ba:	d900      	bls.n	35be <tcp_input+0x222>
    35bc:	1c1e      	adds	r6, r3, #0
                     MQTT_INPUT_BUFF_SIZE - conn->in_packet.payload_pos);
    DBG("- Copied %lu payload bytes\n\r", copy_bytes);
    35be:	486a      	ldr	r0, [pc, #424]	; (3768 <tcp_input+0x3cc>)
    35c0:	1c31      	adds	r1, r6, #0
    35c2:	4f52      	ldr	r7, [pc, #328]	; (370c <tcp_input+0x370>)
    35c4:	47b8      	blx	r7
    memcpy(&conn->in_packet.payload[conn->in_packet.payload_pos],
    35c6:	4c67      	ldr	r4, [pc, #412]	; (3764 <tcp_input+0x3c8>)
    35c8:	5d28      	ldrb	r0, [r5, r4]
    35ca:	1828      	adds	r0, r5, r0
    35cc:	4b67      	ldr	r3, [pc, #412]	; (376c <tcp_input+0x3d0>)
    35ce:	469c      	mov	ip, r3
    35d0:	4460      	add	r0, ip
           &input_data_ptr[pos],
    35d2:	4659      	mov	r1, fp
    35d4:	4449      	add	r1, r9

    /* Read in as much as we can into the packet payload */
    copy_bytes = MIN(input_data_len - pos,
                     MQTT_INPUT_BUFF_SIZE - conn->in_packet.payload_pos);
    DBG("- Copied %lu payload bytes\n\r", copy_bytes);
    memcpy(&conn->in_packet.payload[conn->in_packet.payload_pos],
    35d6:	1c32      	adds	r2, r6, #0
    35d8:	4b5e      	ldr	r3, [pc, #376]	; (3754 <tcp_input+0x3b8>)
    35da:	4798      	blx	r3
           &input_data_ptr[pos],
           copy_bytes);
    conn->in_packet.byte_counter += copy_bytes;
    35dc:	4a4d      	ldr	r2, [pc, #308]	; (3714 <tcp_input+0x378>)
    35de:	58ab      	ldr	r3, [r5, r2]
    35e0:	18f3      	adds	r3, r6, r3
    35e2:	50ab      	str	r3, [r5, r2]
    conn->in_packet.payload_pos += copy_bytes;
    35e4:	5d2b      	ldrb	r3, [r5, r4]
    35e6:	18f3      	adds	r3, r6, r3
    35e8:	552b      	strb	r3, [r5, r4]
    pos += copy_bytes;
    35ea:	44b1      	add	r9, r6

    uint8_t i;
    DBG("MQTT - Copied bytes: \n\r");
    35ec:	4860      	ldr	r0, [pc, #384]	; (3770 <tcp_input+0x3d4>)
    35ee:	47b8      	blx	r7
    for(i = 0; i < copy_bytes; i++) {
    35f0:	2e00      	cmp	r6, #0
    35f2:	d00d      	beq.n	3610 <tcp_input+0x274>
    35f4:	2400      	movs	r4, #0
      DBG("%02X ", conn->in_packet.payload[i]);
    35f6:	4f45      	ldr	r7, [pc, #276]	; (370c <tcp_input+0x370>)
    35f8:	192b      	adds	r3, r5, r4
    35fa:	2297      	movs	r2, #151	; 0x97
    35fc:	00d2      	lsls	r2, r2, #3
    35fe:	4694      	mov	ip, r2
    3600:	4463      	add	r3, ip
    3602:	7899      	ldrb	r1, [r3, #2]
    3604:	485b      	ldr	r0, [pc, #364]	; (3774 <tcp_input+0x3d8>)
    3606:	47b8      	blx	r7
    conn->in_packet.payload_pos += copy_bytes;
    pos += copy_bytes;

    uint8_t i;
    DBG("MQTT - Copied bytes: \n\r");
    for(i = 0; i < copy_bytes; i++) {
    3608:	3401      	adds	r4, #1
    360a:	b2e4      	uxtb	r4, r4
    360c:	42a6      	cmp	r6, r4
    360e:	d8f3      	bhi.n	35f8 <tcp_input+0x25c>
      DBG("%02X ", conn->in_packet.payload[i]);
    }
    DBG("\n\r");
    3610:	4859      	ldr	r0, [pc, #356]	; (3778 <tcp_input+0x3dc>)
    3612:	4b3e      	ldr	r3, [pc, #248]	; (370c <tcp_input+0x370>)
    3614:	4798      	blx	r3

      conn->in_publish_msg.payload_chunk = conn->in_packet.payload;
      conn->in_packet.payload_pos = 0;
    }

    if(pos >= input_data_len &&
    3616:	4643      	mov	r3, r8
    3618:	454b      	cmp	r3, r9
    361a:	d807      	bhi.n	362c <tcp_input+0x290>
       (conn->in_packet.byte_counter < (MQTT_FHDR_SIZE + conn->in_packet.remaining_length))) {
    361c:	4b44      	ldr	r3, [pc, #272]	; (3730 <tcp_input+0x394>)
    361e:	5aeb      	ldrh	r3, [r5, r3]
    3620:	3301      	adds	r3, #1

      conn->in_publish_msg.payload_chunk = conn->in_packet.payload;
      conn->in_packet.payload_pos = 0;
    }

    if(pos >= input_data_len &&
    3622:	4a3c      	ldr	r2, [pc, #240]	; (3714 <tcp_input+0x378>)
    3624:	58aa      	ldr	r2, [r5, r2]
    3626:	429a      	cmp	r2, r3
    3628:	d200      	bcs.n	362c <tcp_input+0x290>
    362a:	e11d      	b.n	3868 <tcp_input+0x4cc>
   * Supported payload, reads out both VHDR and Payload of all packets.
   *
   * Note: There will always be at least one byte left to read when we enter
   *       this loop.
   */
  while(conn->in_packet.byte_counter <
    362c:	4b39      	ldr	r3, [pc, #228]	; (3714 <tcp_input+0x378>)
    362e:	58ea      	ldr	r2, [r5, r3]
        (MQTT_FHDR_SIZE + conn->in_packet.remaining_length)) {
    3630:	4b3f      	ldr	r3, [pc, #252]	; (3730 <tcp_input+0x394>)
    3632:	5aeb      	ldrh	r3, [r5, r3]
    3634:	3301      	adds	r3, #1
   * Supported payload, reads out both VHDR and Payload of all packets.
   *
   * Note: There will always be at least one byte left to read when we enter
   *       this loop.
   */
  while(conn->in_packet.byte_counter <
    3636:	429a      	cmp	r2, r3
    3638:	d200      	bcs.n	363c <tcp_input+0x2a0>
    363a:	e73a      	b.n	34b2 <tcp_input+0x116>
      return 0;
    }
  }

  /* Debug information */
  DBG("\n\r");
    363c:	484e      	ldr	r0, [pc, #312]	; (3778 <tcp_input+0x3dc>)
    363e:	4c33      	ldr	r4, [pc, #204]	; (370c <tcp_input+0x370>)
    3640:	47a0      	blx	r4
  /* Take care of input */
  DBG("MQTT - Finished reading packet!\n\r");
    3642:	484e      	ldr	r0, [pc, #312]	; (377c <tcp_input+0x3e0>)
    3644:	47a0      	blx	r4
  /* What to return? */
  DBG("MQTT - total data was %i bytes of data. \n\r",
    3646:	4b3a      	ldr	r3, [pc, #232]	; (3730 <tcp_input+0x394>)
    3648:	5ae9      	ldrh	r1, [r5, r3]
    364a:	3101      	adds	r1, #1
    364c:	484c      	ldr	r0, [pc, #304]	; (3780 <tcp_input+0x3e4>)
    364e:	47a0      	blx	r4
      (MQTT_FHDR_SIZE + conn->in_packet.remaining_length));

  /* Handle packet here. */
  switch(conn->in_packet.fhdr & 0xF0) {
    3650:	4b2f      	ldr	r3, [pc, #188]	; (3710 <tcp_input+0x374>)
    3652:	5ceb      	ldrb	r3, [r5, r3]
    3654:	220f      	movs	r2, #15
    3656:	4393      	bics	r3, r2
    3658:	2b60      	cmp	r3, #96	; 0x60
    365a:	d100      	bne.n	365e <tcp_input+0x2c2>
    365c:	e0fb      	b.n	3856 <tcp_input+0x4ba>
    365e:	b2da      	uxtb	r2, r3
    3660:	2a60      	cmp	r2, #96	; 0x60
    3662:	d80d      	bhi.n	3680 <tcp_input+0x2e4>
    3664:	2b30      	cmp	r3, #48	; 0x30
    3666:	d03d      	beq.n	36e4 <tcp_input+0x348>
    3668:	2a30      	cmp	r2, #48	; 0x30
    366a:	d802      	bhi.n	3672 <tcp_input+0x2d6>
    366c:	2b20      	cmp	r3, #32
    366e:	d018      	beq.n	36a2 <tcp_input+0x306>
    3670:	e0f6      	b.n	3860 <tcp_input+0x4c4>
    3672:	2b40      	cmp	r3, #64	; 0x40
    3674:	d100      	bne.n	3678 <tcp_input+0x2dc>
    3676:	e093      	b.n	37a0 <tcp_input+0x404>
    3678:	2b50      	cmp	r3, #80	; 0x50
    367a:	d100      	bne.n	367e <tcp_input+0x2e2>
    367c:	e0eb      	b.n	3856 <tcp_input+0x4ba>
    367e:	e0ef      	b.n	3860 <tcp_input+0x4c4>
    3680:	b2da      	uxtb	r2, r3
    3682:	2a90      	cmp	r2, #144	; 0x90
    3684:	d100      	bne.n	3688 <tcp_input+0x2ec>
    3686:	e09f      	b.n	37c8 <tcp_input+0x42c>
    3688:	d803      	bhi.n	3692 <tcp_input+0x2f6>
    368a:	2b70      	cmp	r3, #112	; 0x70
    368c:	d100      	bne.n	3690 <tcp_input+0x2f4>
    368e:	e0e2      	b.n	3856 <tcp_input+0x4ba>
    3690:	e0e6      	b.n	3860 <tcp_input+0x4c4>
    3692:	b2da      	uxtb	r2, r3
    3694:	2ab0      	cmp	r2, #176	; 0xb0
    3696:	d100      	bne.n	369a <tcp_input+0x2fe>
    3698:	e0bd      	b.n	3816 <tcp_input+0x47a>
    369a:	2ad0      	cmp	r2, #208	; 0xd0
    369c:	d100      	bne.n	36a0 <tcp_input+0x304>
    369e:	e0d6      	b.n	384e <tcp_input+0x4b2>
    36a0:	e0de      	b.n	3860 <tcp_input+0x4c4>
}
/*---------------------------------------------------------------------------*/
static void
handle_connack(struct mqtt_connection *conn)
{
  DBG("MQTT - Got CONNACK\n\r");
    36a2:	4838      	ldr	r0, [pc, #224]	; (3784 <tcp_input+0x3e8>)
    36a4:	4b19      	ldr	r3, [pc, #100]	; (370c <tcp_input+0x370>)
    36a6:	4798      	blx	r3

  if(conn->in_packet.payload[1] != 0) {
    36a8:	4b37      	ldr	r3, [pc, #220]	; (3788 <tcp_input+0x3ec>)
    36aa:	5ceb      	ldrb	r3, [r5, r3]
    36ac:	2b00      	cmp	r3, #0
    36ae:	d005      	beq.n	36bc <tcp_input+0x320>
    PRINTF("MQTT - Connection refused with Return Code %i\n\r",
           conn->in_packet.payload[1]);
    call_event(conn,
               MQTT_EVENT_CONNECTION_REFUSED_ERROR,
               &conn->in_packet.payload[1]);
    36b0:	4b35      	ldr	r3, [pc, #212]	; (3788 <tcp_input+0x3ec>)
    36b2:	18ea      	adds	r2, r5, r3
  DBG("MQTT - Got CONNACK\n\r");

  if(conn->in_packet.payload[1] != 0) {
    PRINTF("MQTT - Connection refused with Return Code %i\n\r",
           conn->in_packet.payload[1]);
    call_event(conn,
    36b4:	1c28      	adds	r0, r5, #0
    36b6:	2182      	movs	r1, #130	; 0x82
    36b8:	4b1a      	ldr	r3, [pc, #104]	; (3724 <tcp_input+0x388>)
    36ba:	4798      	blx	r3
               MQTT_EVENT_CONNECTION_REFUSED_ERROR,
               &conn->in_packet.payload[1]);
  }

  conn->out_packet.qos_state = MQTT_QOS_STATE_GOT_ACK;
    36bc:	2201      	movs	r2, #1
    36be:	4b33      	ldr	r3, [pc, #204]	; (378c <tcp_input+0x3f0>)
    36c0:	54ea      	strb	r2, [r5, r3]

  ctimer_set(&conn->keep_alive_timer, conn->keep_alive * CLOCK_SECOND,
    36c2:	1c28      	adds	r0, r5, #0
    36c4:	3018      	adds	r0, #24
    36c6:	8ae9      	ldrh	r1, [r5, #22]
    36c8:	01c9      	lsls	r1, r1, #7
    36ca:	4a31      	ldr	r2, [pc, #196]	; (3790 <tcp_input+0x3f4>)
    36cc:	1c2b      	adds	r3, r5, #0
    36ce:	4c31      	ldr	r4, [pc, #196]	; (3794 <tcp_input+0x3f8>)
    36d0:	47a0      	blx	r4
             keep_alive_callback, conn);

  /* Always reset packet before callback since it might be used directly */
  conn->state = MQTT_CONN_STATE_CONNECTED_TO_BROKER;
    36d2:	2208      	movs	r2, #8
    36d4:	2360      	movs	r3, #96	; 0x60
    36d6:	54ea      	strb	r2, [r5, r3]
  call_event(conn, MQTT_EVENT_CONNECTED, NULL);
    36d8:	1c28      	adds	r0, r5, #0
    36da:	2100      	movs	r1, #0
    36dc:	2200      	movs	r2, #0
    36de:	4b11      	ldr	r3, [pc, #68]	; (3724 <tcp_input+0x388>)
    36e0:	4798      	blx	r3
    36e2:	e0bd      	b.n	3860 <tcp_input+0x4c4>
  case MQTT_FHDR_MSG_TYPE_CONNACK:
    handle_connack(conn);
    break;
  case MQTT_FHDR_MSG_TYPE_PUBLISH:
    /* This is the only or the last chunk of publish payload */
    conn->in_publish_msg.payload_chunk = conn->in_packet.payload;
    36e4:	4b21      	ldr	r3, [pc, #132]	; (376c <tcp_input+0x3d0>)
    36e6:	18eb      	adds	r3, r5, r3
    36e8:	22e1      	movs	r2, #225	; 0xe1
    36ea:	00d2      	lsls	r2, r2, #3
    36ec:	50ab      	str	r3, [r5, r2]
    conn->in_publish_msg.payload_chunk_length = conn->in_packet.payload_pos;
    36ee:	4b1d      	ldr	r3, [pc, #116]	; (3764 <tcp_input+0x3c8>)
    36f0:	5cea      	ldrb	r2, [r5, r3]
    36f2:	4b29      	ldr	r3, [pc, #164]	; (3798 <tcp_input+0x3fc>)
    36f4:	52ea      	strh	r2, [r5, r3]
    conn->in_publish_msg.payload_left = 0;
    36f6:	2200      	movs	r2, #0
    36f8:	4b18      	ldr	r3, [pc, #96]	; (375c <tcp_input+0x3c0>)
    36fa:	52ea      	strh	r2, [r5, r3]
    handle_publish(conn);
    36fc:	1c28      	adds	r0, r5, #0
    36fe:	4b27      	ldr	r3, [pc, #156]	; (379c <tcp_input+0x400>)
    3700:	4798      	blx	r3
    break;
    3702:	e0ad      	b.n	3860 <tcp_input+0x4c4>
    3704:	00003285 	.word	0x00003285
    3708:	00011f7c 	.word	0x00011f7c
    370c:	00010931 	.word	0x00010931
    3710:	000004b1 	.word	0x000004b1
    3714:	000004ac 	.word	0x000004ac
    3718:	00011fa0 	.word	0x00011fa0
    371c:	000004b7 	.word	0x000004b7
    3720:	00011fbc 	.word	0x00011fbc
    3724:	00003265 	.word	0x00003265
    3728:	00011fe0 	.word	0x00011fe0
    372c:	000004b6 	.word	0x000004b6
    3730:	000004b2 	.word	0x000004b2
    3734:	00012010 	.word	0x00012010
    3738:	000006bf 	.word	0x000006bf
    373c:	000006be 	.word	0x000006be
    3740:	000006ba 	.word	0x000006ba
    3744:	00012040 	.word	0x00012040
    3748:	000006bc 	.word	0x000006bc
    374c:	00012064 	.word	0x00012064
    3750:	000006c4 	.word	0x000006c4
    3754:	000108e7 	.word	0x000108e7
    3758:	00012088 	.word	0x00012088
    375c:	00000712 	.word	0x00000712
    3760:	0000070e 	.word	0x0000070e
    3764:	000004b9 	.word	0x000004b9
    3768:	000120a0 	.word	0x000120a0
    376c:	000004ba 	.word	0x000004ba
    3770:	000120c0 	.word	0x000120c0
    3774:	000120d8 	.word	0x000120d8
    3778:	00012df4 	.word	0x00012df4
    377c:	000120e0 	.word	0x000120e0
    3780:	00012104 	.word	0x00012104
    3784:	00012130 	.word	0x00012130
    3788:	000004bb 	.word	0x000004bb
    378c:	00000299 	.word	0x00000299
    3790:	000038b9 	.word	0x000038b9
    3794:	0000e615 	.word	0x0000e615
    3798:	0000070c 	.word	0x0000070c
    379c:	0000329d 	.word	0x0000329d
}
/*---------------------------------------------------------------------------*/
static void
handle_puback(struct mqtt_connection *conn)
{
  DBG("MQTT - Got PUBACK\n\r");
    37a0:	4835      	ldr	r0, [pc, #212]	; (3878 <tcp_input+0x4dc>)
    37a2:	4b36      	ldr	r3, [pc, #216]	; (387c <tcp_input+0x4e0>)
    37a4:	4798      	blx	r3

  conn->out_packet.qos_state = MQTT_QOS_STATE_GOT_ACK;
    37a6:	2201      	movs	r2, #1
    37a8:	4b35      	ldr	r3, [pc, #212]	; (3880 <tcp_input+0x4e4>)
    37aa:	54ea      	strb	r2, [r5, r3]
  conn->in_packet.mid = (conn->in_packet.payload[0] << 8) |
    37ac:	4b35      	ldr	r3, [pc, #212]	; (3884 <tcp_input+0x4e8>)
    37ae:	5ceb      	ldrb	r3, [r5, r3]
    37b0:	021b      	lsls	r3, r3, #8
    (conn->in_packet.payload[1]);
    37b2:	4a35      	ldr	r2, [pc, #212]	; (3888 <tcp_input+0x4ec>)
handle_puback(struct mqtt_connection *conn)
{
  DBG("MQTT - Got PUBACK\n\r");

  conn->out_packet.qos_state = MQTT_QOS_STATE_GOT_ACK;
  conn->in_packet.mid = (conn->in_packet.payload[0] << 8) |
    37b4:	5caa      	ldrb	r2, [r5, r2]
    37b6:	4313      	orrs	r3, r2
    37b8:	4a34      	ldr	r2, [pc, #208]	; (388c <tcp_input+0x4f0>)
    37ba:	52ab      	strh	r3, [r5, r2]
    (conn->in_packet.payload[1]);

  call_event(conn, MQTT_EVENT_PUBACK, &conn->in_packet.mid);
    37bc:	18aa      	adds	r2, r5, r2
    37be:	1c28      	adds	r0, r5, #0
    37c0:	2105      	movs	r1, #5
    37c2:	4b33      	ldr	r3, [pc, #204]	; (3890 <tcp_input+0x4f4>)
    37c4:	4798      	blx	r3
    37c6:	e04b      	b.n	3860 <tcp_input+0x4c4>
static void
handle_suback(struct mqtt_connection *conn)
{
  struct mqtt_suback_event suback_event;

  DBG("MQTT - Got SUBACK\n\r");
    37c8:	4832      	ldr	r0, [pc, #200]	; (3894 <tcp_input+0x4f8>)
    37ca:	4b2c      	ldr	r3, [pc, #176]	; (387c <tcp_input+0x4e0>)
    37cc:	4798      	blx	r3

  /* Only accept SUBACKS with X topic QoS response, assume 1 */
  if(conn->in_packet.remaining_length > MQTT_MID_SIZE +
    37ce:	4b32      	ldr	r3, [pc, #200]	; (3898 <tcp_input+0x4fc>)
    37d0:	5aeb      	ldrh	r3, [r5, r3]
    37d2:	2b03      	cmp	r3, #3
    37d4:	d902      	bls.n	37dc <tcp_input+0x440>
     MQTT_MAX_TOPICS_PER_SUBSCRIBE * MQTT_QOS_SIZE) {
    DBG("MQTT - Error, SUBACK with > 1 topic, not supported.\n\r");
    37d6:	4831      	ldr	r0, [pc, #196]	; (389c <tcp_input+0x500>)
    37d8:	4b28      	ldr	r3, [pc, #160]	; (387c <tcp_input+0x4e0>)
    37da:	4798      	blx	r3
  }

  conn->out_packet.qos_state = MQTT_QOS_STATE_GOT_ACK;
    37dc:	2201      	movs	r2, #1
    37de:	4b28      	ldr	r3, [pc, #160]	; (3880 <tcp_input+0x4e4>)
    37e0:	54ea      	strb	r2, [r5, r3]

  suback_event.mid = (conn->in_packet.payload[0] << 8) |
    37e2:	4b28      	ldr	r3, [pc, #160]	; (3884 <tcp_input+0x4e8>)
    37e4:	5ceb      	ldrb	r3, [r5, r3]
    37e6:	021b      	lsls	r3, r3, #8
    (conn->in_packet.payload[1]);
    37e8:	4a27      	ldr	r2, [pc, #156]	; (3888 <tcp_input+0x4ec>)
    DBG("MQTT - Error, SUBACK with > 1 topic, not supported.\n\r");
  }

  conn->out_packet.qos_state = MQTT_QOS_STATE_GOT_ACK;

  suback_event.mid = (conn->in_packet.payload[0] << 8) |
    37ea:	5caa      	ldrb	r2, [r5, r2]
    37ec:	4313      	orrs	r3, r2
    37ee:	aa03      	add	r2, sp, #12
    37f0:	8013      	strh	r3, [r2, #0]
    (conn->in_packet.payload[1]);
  suback_event.qos_level = conn->in_packet.payload[2];
    37f2:	492b      	ldr	r1, [pc, #172]	; (38a0 <tcp_input+0x504>)
    37f4:	5c69      	ldrb	r1, [r5, r1]
    37f6:	7091      	strb	r1, [r2, #2]
  conn->in_packet.mid = suback_event.mid;
    37f8:	4a24      	ldr	r2, [pc, #144]	; (388c <tcp_input+0x4f0>)
    37fa:	52ab      	strh	r3, [r5, r2]

  if(conn->in_packet.mid != conn->out_packet.mid) {
    37fc:	4a29      	ldr	r2, [pc, #164]	; (38a4 <tcp_input+0x508>)
    37fe:	5aaa      	ldrh	r2, [r5, r2]
    3800:	429a      	cmp	r2, r3
    3802:	d002      	beq.n	380a <tcp_input+0x46e>
    DBG("MQTT - Warning, got SUBACK with none matching MID. Currently there is"
    3804:	4828      	ldr	r0, [pc, #160]	; (38a8 <tcp_input+0x50c>)
    3806:	4b1d      	ldr	r3, [pc, #116]	; (387c <tcp_input+0x4e0>)
    3808:	4798      	blx	r3
        "no support for several concurrent SUBSCRIBE messages.\n\r");
  }

  /* Always reset packet before callback since it might be used directly */
  call_event(conn, MQTT_EVENT_SUBACK, &suback_event);
    380a:	1c28      	adds	r0, r5, #0
    380c:	2102      	movs	r1, #2
    380e:	aa03      	add	r2, sp, #12
    3810:	4b1f      	ldr	r3, [pc, #124]	; (3890 <tcp_input+0x4f4>)
    3812:	4798      	blx	r3
    3814:	e024      	b.n	3860 <tcp_input+0x4c4>
}
/*---------------------------------------------------------------------------*/
static void
handle_unsuback(struct mqtt_connection *conn)
{
  DBG("MQTT - Got UNSUBACK\n\r");
    3816:	4825      	ldr	r0, [pc, #148]	; (38ac <tcp_input+0x510>)
    3818:	4b18      	ldr	r3, [pc, #96]	; (387c <tcp_input+0x4e0>)
    381a:	4798      	blx	r3

  conn->out_packet.qos_state = MQTT_QOS_STATE_GOT_ACK;
    381c:	2201      	movs	r2, #1
    381e:	4b18      	ldr	r3, [pc, #96]	; (3880 <tcp_input+0x4e4>)
    3820:	54ea      	strb	r2, [r5, r3]
  conn->in_packet.mid = (conn->in_packet.payload[0] << 8) |
    3822:	4b18      	ldr	r3, [pc, #96]	; (3884 <tcp_input+0x4e8>)
    3824:	5ceb      	ldrb	r3, [r5, r3]
    3826:	021b      	lsls	r3, r3, #8
    (conn->in_packet.payload[1]);
    3828:	4a17      	ldr	r2, [pc, #92]	; (3888 <tcp_input+0x4ec>)
handle_unsuback(struct mqtt_connection *conn)
{
  DBG("MQTT - Got UNSUBACK\n\r");

  conn->out_packet.qos_state = MQTT_QOS_STATE_GOT_ACK;
  conn->in_packet.mid = (conn->in_packet.payload[0] << 8) |
    382a:	5caa      	ldrb	r2, [r5, r2]
    382c:	4313      	orrs	r3, r2
    382e:	4a17      	ldr	r2, [pc, #92]	; (388c <tcp_input+0x4f0>)
    3830:	52ab      	strh	r3, [r5, r2]
    (conn->in_packet.payload[1]);

  if(conn->in_packet.mid != conn->out_packet.mid) {
    3832:	4a1c      	ldr	r2, [pc, #112]	; (38a4 <tcp_input+0x508>)
    3834:	5aaa      	ldrh	r2, [r5, r2]
    3836:	429a      	cmp	r2, r3
    3838:	d002      	beq.n	3840 <tcp_input+0x4a4>
    DBG("MQTT - Warning, got UNSUBACK with none matching MID. Currently there is"
    383a:	481d      	ldr	r0, [pc, #116]	; (38b0 <tcp_input+0x514>)
    383c:	4b0f      	ldr	r3, [pc, #60]	; (387c <tcp_input+0x4e0>)
    383e:	4798      	blx	r3
        "no support for several concurrent UNSUBSCRIBE messages.\n\r");
  }

  call_event(conn, MQTT_EVENT_UNSUBACK, &conn->in_packet.mid);
    3840:	4b12      	ldr	r3, [pc, #72]	; (388c <tcp_input+0x4f0>)
    3842:	18ea      	adds	r2, r5, r3
    3844:	1c28      	adds	r0, r5, #0
    3846:	2103      	movs	r1, #3
    3848:	4b11      	ldr	r3, [pc, #68]	; (3890 <tcp_input+0x4f4>)
    384a:	4798      	blx	r3
    384c:	e008      	b.n	3860 <tcp_input+0x4c4>
}
/*---------------------------------------------------------------------------*/
static void
handle_pingresp(struct mqtt_connection *conn)
{
  DBG("MQTT - Got RINGRESP\n\r");
    384e:	4819      	ldr	r0, [pc, #100]	; (38b4 <tcp_input+0x518>)
    3850:	4b0a      	ldr	r3, [pc, #40]	; (387c <tcp_input+0x4e0>)
    3852:	4798      	blx	r3
    3854:	e004      	b.n	3860 <tcp_input+0x4c4>

  /* QoS 2 not implemented yet */
  case MQTT_FHDR_MSG_TYPE_PUBREC:
  case MQTT_FHDR_MSG_TYPE_PUBREL:
  case MQTT_FHDR_MSG_TYPE_PUBCOMP:
    call_event(conn, MQTT_EVENT_NOT_IMPLEMENTED_ERROR, NULL);
    3856:	1c28      	adds	r0, r5, #0
    3858:	2184      	movs	r1, #132	; 0x84
    385a:	2200      	movs	r2, #0
    385c:	4b0c      	ldr	r3, [pc, #48]	; (3890 <tcp_input+0x4f4>)
    385e:	4798      	blx	r3
    /* All server-only message */
    PRINTF("MQTT - Got MQTT Message Type '%i'", (conn->in_packet.fhdr & 0xF0));
    break;
  }

  conn->in_packet.packet_received = 1;
    3860:	2201      	movs	r2, #1
    3862:	2396      	movs	r3, #150	; 0x96
    3864:	00db      	lsls	r3, r3, #3
    3866:	54ea      	strb	r2, [r5, r3]

  return 0;
}
    3868:	2000      	movs	r0, #0
    386a:	b005      	add	sp, #20
    386c:	bc3c      	pop	{r2, r3, r4, r5}
    386e:	4690      	mov	r8, r2
    3870:	4699      	mov	r9, r3
    3872:	46a2      	mov	sl, r4
    3874:	46ab      	mov	fp, r5
    3876:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3878:	00012148 	.word	0x00012148
    387c:	00010931 	.word	0x00010931
    3880:	00000299 	.word	0x00000299
    3884:	000004ba 	.word	0x000004ba
    3888:	000004bb 	.word	0x000004bb
    388c:	000004b4 	.word	0x000004b4
    3890:	00003265 	.word	0x00003265
    3894:	0001215c 	.word	0x0001215c
    3898:	000004b2 	.word	0x000004b2
    389c:	00012170 	.word	0x00012170
    38a0:	000004bc 	.word	0x000004bc
    38a4:	00000286 	.word	0x00000286
    38a8:	000121a8 	.word	0x000121a8
    38ac:	00012228 	.word	0x00012228
    38b0:	00012240 	.word	0x00012240
    38b4:	000122c4 	.word	0x000122c4

000038b8 <keep_alive_callback>:
  DBG("MQTT - remaining_length_bytes %u\n\r", *remaining_length_bytes);
}
/*---------------------------------------------------------------------------*/
static void
keep_alive_callback(void *ptr)
{
    38b8:	b510      	push	{r4, lr}
    38ba:	1c04      	adds	r4, r0, #0
  struct mqtt_connection *conn = ptr;

  DBG("MQTT - (keep_alive_callback) Called!\n\r");
    38bc:	480f      	ldr	r0, [pc, #60]	; (38fc <keep_alive_callback+0x44>)
    38be:	4b10      	ldr	r3, [pc, #64]	; (3900 <keep_alive_callback+0x48>)
    38c0:	4798      	blx	r3

  /* The flag is set when the PINGREQ has been sent */
  if(conn->waiting_for_pingresp) {
    38c2:	2338      	movs	r3, #56	; 0x38
    38c4:	5ce3      	ldrb	r3, [r4, r3]
    38c6:	2b00      	cmp	r3, #0
    38c8:	d011      	beq.n	38ee <keep_alive_callback+0x36>
}
/*---------------------------------------------------------------------------*/
static void
disconnect_tcp(struct mqtt_connection *conn)
{
  conn->state = MQTT_CONN_STATE_DISCONNECTING;
    38ca:	2202      	movs	r2, #2
    38cc:	2360      	movs	r3, #96	; 0x60
    38ce:	54e2      	strb	r2, [r4, r3]
  tcp_socket_close(&(conn->socket));
    38d0:	4b0c      	ldr	r3, [pc, #48]	; (3904 <keep_alive_callback+0x4c>)
    38d2:	469c      	mov	ip, r3
    38d4:	4464      	add	r4, ip
    38d6:	1c20      	adds	r0, r4, #0
    38d8:	4b0b      	ldr	r3, [pc, #44]	; (3908 <keep_alive_callback+0x50>)
    38da:	4798      	blx	r3
  tcp_socket_unregister(&conn->socket);
    38dc:	1c20      	adds	r0, r4, #0
    38de:	4b0b      	ldr	r3, [pc, #44]	; (390c <keep_alive_callback+0x54>)
    38e0:	4798      	blx	r3

  memset(&conn->socket, 0, sizeof(conn->socket));
    38e2:	1c20      	adds	r0, r4, #0
    38e4:	2100      	movs	r1, #0
    38e6:	2234      	movs	r2, #52	; 0x34
    38e8:	4b09      	ldr	r3, [pc, #36]	; (3910 <keep_alive_callback+0x58>)
    38ea:	4798      	blx	r3
    38ec:	e005      	b.n	38fa <keep_alive_callback+0x42>
    PRINTF("MQTT - Disconnect due to no PINGRESP from broker.\n\r");
    disconnect_tcp(conn);
    return;
  }

  process_post(&mqtt_process, mqtt_do_pingreq_event, conn);
    38ee:	4b09      	ldr	r3, [pc, #36]	; (3914 <keep_alive_callback+0x5c>)
    38f0:	7819      	ldrb	r1, [r3, #0]
    38f2:	4809      	ldr	r0, [pc, #36]	; (3918 <keep_alive_callback+0x60>)
    38f4:	1c22      	adds	r2, r4, #0
    38f6:	4b09      	ldr	r3, [pc, #36]	; (391c <keep_alive_callback+0x64>)
    38f8:	4798      	blx	r3
}
    38fa:	bd10      	pop	{r4, pc}
    38fc:	000122dc 	.word	0x000122dc
    3900:	00010931 	.word	0x00010931
    3904:	0000072c 	.word	0x0000072c
    3908:	0000a4d5 	.word	0x0000a4d5
    390c:	0000a4ed 	.word	0x0000a4ed
    3910:	00010921 	.word	0x00010921
    3914:	20000374 	.word	0x20000374
    3918:	2000000c 	.word	0x2000000c
    391c:	0000ebf9 	.word	0x0000ebf9

00003920 <abort_connection>:
  conn->out_buffer_sent = 0;
}
/*---------------------------------------------------------------------------*/
static void
abort_connection(struct mqtt_connection *conn)
{
    3920:	b570      	push	{r4, r5, r6, lr}
    3922:	1c04      	adds	r4, r0, #0
  conn->out_buffer_ptr = conn->out_buffer;
    3924:	1c03      	adds	r3, r0, #0
    3926:	3374      	adds	r3, #116	; 0x74
    3928:	6703      	str	r3, [r0, #112]	; 0x70
  conn->out_queue_full = 0;
    392a:	2200      	movs	r2, #0
    392c:	236a      	movs	r3, #106	; 0x6a
    392e:	54c2      	strb	r2, [r0, r3]

  /* Reset outgoing packet */
  memset(&conn->out_packet, 0, sizeof(conn->out_packet));
    3930:	239e      	movs	r3, #158	; 0x9e
    3932:	009b      	lsls	r3, r3, #2
    3934:	18c0      	adds	r0, r0, r3
    3936:	2100      	movs	r1, #0
    3938:	3224      	adds	r2, #36	; 0x24
    393a:	4e09      	ldr	r6, [pc, #36]	; (3960 <abort_connection+0x40>)
    393c:	47b0      	blx	r6

  tcp_socket_close(&conn->socket);
    393e:	4b09      	ldr	r3, [pc, #36]	; (3964 <abort_connection+0x44>)
    3940:	18e5      	adds	r5, r4, r3
    3942:	1c28      	adds	r0, r5, #0
    3944:	4b08      	ldr	r3, [pc, #32]	; (3968 <abort_connection+0x48>)
    3946:	4798      	blx	r3
  tcp_socket_unregister(&conn->socket);
    3948:	1c28      	adds	r0, r5, #0
    394a:	4b08      	ldr	r3, [pc, #32]	; (396c <abort_connection+0x4c>)
    394c:	4798      	blx	r3

  memset(&conn->socket, 0, sizeof(conn->socket));
    394e:	1c28      	adds	r0, r5, #0
    3950:	2100      	movs	r1, #0
    3952:	2234      	movs	r2, #52	; 0x34
    3954:	47b0      	blx	r6

  conn->state = MQTT_CONN_STATE_NOT_CONNECTED;
    3956:	2203      	movs	r2, #3
    3958:	2360      	movs	r3, #96	; 0x60
    395a:	54e2      	strb	r2, [r4, r3]
}
    395c:	bd70      	pop	{r4, r5, r6, pc}
    395e:	46c0      	nop			; (mov r8, r8)
    3960:	00010921 	.word	0x00010921
    3964:	0000072c 	.word	0x0000072c
    3968:	0000a4d5 	.word	0x0000a4d5
    396c:	0000a4ed 	.word	0x0000a4ed

00003970 <tcp_event>:
/*
 * Handles TCP events from Simple TCP
 */
static void
tcp_event(struct tcp_socket *s, void *ptr, tcp_socket_event_t event)
{
    3970:	b510      	push	{r4, lr}
    3972:	b082      	sub	sp, #8
    3974:	1c0c      	adds	r4, r1, #0
    3976:	466b      	mov	r3, sp
    3978:	71da      	strb	r2, [r3, #7]
  struct mqtt_connection *conn = ptr;

  /* Take care of event */
  switch(event) {
    397a:	1e11      	subs	r1, r2, #0
    397c:	2903      	cmp	r1, #3
    397e:	d802      	bhi.n	3986 <tcp_event+0x16>
    3980:	2a00      	cmp	r2, #0
    3982:	d023      	beq.n	39cc <tcp_event+0x5c>
    3984:	e002      	b.n	398c <tcp_event+0x1c>
    3986:	2a04      	cmp	r2, #4
    3988:	d02e      	beq.n	39e8 <tcp_event+0x78>
    398a:	e040      	b.n	3a0e <tcp_event+0x9e>
  /* Fall through to manage different disconnect event the same way. */
  case TCP_SOCKET_CLOSED:
  case TCP_SOCKET_TIMEDOUT:
  case TCP_SOCKET_ABORTED: {

    DBG("MQTT - Disconnected by tcp event %d\n\r", event);
    398c:	4822      	ldr	r0, [pc, #136]	; (3a18 <tcp_event+0xa8>)
    398e:	4b23      	ldr	r3, [pc, #140]	; (3a1c <tcp_event+0xac>)
    3990:	4798      	blx	r3
    process_post(&mqtt_process, mqtt_abort_now_event, conn);
    3992:	4b23      	ldr	r3, [pc, #140]	; (3a20 <tcp_event+0xb0>)
    3994:	7819      	ldrb	r1, [r3, #0]
    3996:	4823      	ldr	r0, [pc, #140]	; (3a24 <tcp_event+0xb4>)
    3998:	1c22      	adds	r2, r4, #0
    399a:	4b23      	ldr	r3, [pc, #140]	; (3a28 <tcp_event+0xb8>)
    399c:	4798      	blx	r3
    conn->state = MQTT_CONN_STATE_NOT_CONNECTED;
    399e:	2203      	movs	r2, #3
    39a0:	2360      	movs	r3, #96	; 0x60
    39a2:	54e2      	strb	r2, [r4, r3]
    ctimer_stop(&conn->keep_alive_timer);
    39a4:	1c20      	adds	r0, r4, #0
    39a6:	3018      	adds	r0, #24
    39a8:	4b20      	ldr	r3, [pc, #128]	; (3a2c <tcp_event+0xbc>)
    39aa:	4798      	blx	r3
    call_event(conn, MQTT_EVENT_DISCONNECTED, &event);
    39ac:	1c20      	adds	r0, r4, #0
    39ae:	2101      	movs	r1, #1
    39b0:	466b      	mov	r3, sp
    39b2:	1dda      	adds	r2, r3, #7
    39b4:	4b1e      	ldr	r3, [pc, #120]	; (3a30 <tcp_event+0xc0>)
    39b6:	4798      	blx	r3
    abort_connection(conn);
    39b8:	1c20      	adds	r0, r4, #0
    39ba:	4b1e      	ldr	r3, [pc, #120]	; (3a34 <tcp_event+0xc4>)
    39bc:	4798      	blx	r3

    /* If connecting retry */
    if(conn->auto_reconnect == 1) {
    39be:	7d63      	ldrb	r3, [r4, #21]
    39c0:	2b01      	cmp	r3, #1
    39c2:	d127      	bne.n	3a14 <tcp_event+0xa4>
      connect_tcp(conn);
    39c4:	1c20      	adds	r0, r4, #0
    39c6:	4b1c      	ldr	r3, [pc, #112]	; (3a38 <tcp_event+0xc8>)
    39c8:	4798      	blx	r3
    39ca:	e023      	b.n	3a14 <tcp_event+0xa4>
    }
    break;
  }
  case TCP_SOCKET_CONNECTED: {
    conn->state = MQTT_CONN_STATE_TCP_CONNECTED;
    39cc:	2206      	movs	r2, #6
    39ce:	2360      	movs	r3, #96	; 0x60
    39d0:	54e2      	strb	r2, [r4, r3]
    conn->out_buffer_sent = 1;
    39d2:	3a05      	subs	r2, #5
    39d4:	239d      	movs	r3, #157	; 0x9d
    39d6:	009b      	lsls	r3, r3, #2
    39d8:	54e2      	strb	r2, [r4, r3]

    process_post(&mqtt_process, mqtt_do_connect_mqtt_event, conn);
    39da:	4b18      	ldr	r3, [pc, #96]	; (3a3c <tcp_event+0xcc>)
    39dc:	7819      	ldrb	r1, [r3, #0]
    39de:	4811      	ldr	r0, [pc, #68]	; (3a24 <tcp_event+0xb4>)
    39e0:	1c22      	adds	r2, r4, #0
    39e2:	4b11      	ldr	r3, [pc, #68]	; (3a28 <tcp_event+0xb8>)
    39e4:	4798      	blx	r3
    break;
    39e6:	e015      	b.n	3a14 <tcp_event+0xa4>
  }
  case TCP_SOCKET_DATA_SENT: {
    DBG("MQTT - Got TCP_DATA_SENT\n\r");
    39e8:	4815      	ldr	r0, [pc, #84]	; (3a40 <tcp_event+0xd0>)
    39ea:	4b0c      	ldr	r3, [pc, #48]	; (3a1c <tcp_event+0xac>)
    39ec:	4798      	blx	r3

    if(conn->socket.output_data_len == 0) {
    39ee:	4b15      	ldr	r3, [pc, #84]	; (3a44 <tcp_event+0xd4>)
    39f0:	5ae3      	ldrh	r3, [r4, r3]
    39f2:	2b00      	cmp	r3, #0
    39f4:	d106      	bne.n	3a04 <tcp_event+0x94>
      conn->out_buffer_sent = 1;
    39f6:	2201      	movs	r2, #1
    39f8:	239d      	movs	r3, #157	; 0x9d
    39fa:	009b      	lsls	r3, r3, #2
    39fc:	54e2      	strb	r2, [r4, r3]
      conn->out_buffer_ptr = conn->out_buffer;
    39fe:	1c23      	adds	r3, r4, #0
    3a00:	3374      	adds	r3, #116	; 0x74
    3a02:	6723      	str	r3, [r4, #112]	; 0x70
    }

    ctimer_restart(&conn->keep_alive_timer);
    3a04:	1c20      	adds	r0, r4, #0
    3a06:	3018      	adds	r0, #24
    3a08:	4b0f      	ldr	r3, [pc, #60]	; (3a48 <tcp_event+0xd8>)
    3a0a:	4798      	blx	r3
    break;
    3a0c:	e002      	b.n	3a14 <tcp_event+0xa4>
  }

  default: {
    DBG("MQTT - TCP Event %d is currently not managed by the tcp event callback\n\r",
    3a0e:	480f      	ldr	r0, [pc, #60]	; (3a4c <tcp_event+0xdc>)
    3a10:	4b02      	ldr	r3, [pc, #8]	; (3a1c <tcp_event+0xac>)
    3a12:	4798      	blx	r3
        event);
  }
  }
}
    3a14:	b002      	add	sp, #8
    3a16:	bd10      	pop	{r4, pc}
    3a18:	00012304 	.word	0x00012304
    3a1c:	00010931 	.word	0x00010931
    3a20:	2000037b 	.word	0x2000037b
    3a24:	2000000c 	.word	0x2000000c
    3a28:	0000ebf9 	.word	0x0000ebf9
    3a2c:	0000e705 	.word	0x0000e705
    3a30:	00003265 	.word	0x00003265
    3a34:	00003921 	.word	0x00003921
    3a38:	00003319 	.word	0x00003319
    3a3c:	20000377 	.word	0x20000377
    3a40:	0001232c 	.word	0x0001232c
    3a44:	0000074e 	.word	0x0000074e
    3a48:	0000e6b9 	.word	0x0000e6b9
    3a4c:	00012348 	.word	0x00012348

00003a50 <send_out_buffer>:
  memset(&conn->socket, 0, sizeof(conn->socket));
}
/*---------------------------------------------------------------------------*/
static void
send_out_buffer(struct mqtt_connection *conn)
{
    3a50:	b538      	push	{r3, r4, r5, lr}
  if(conn->out_buffer_ptr - conn->out_buffer == 0) {
    3a52:	6f01      	ldr	r1, [r0, #112]	; 0x70
    3a54:	1c05      	adds	r5, r0, #0
    3a56:	3574      	adds	r5, #116	; 0x74
    3a58:	42a9      	cmp	r1, r5
    3a5a:	d104      	bne.n	3a66 <send_out_buffer+0x16>
    conn->out_buffer_sent = 1;
    3a5c:	2201      	movs	r2, #1
    3a5e:	239d      	movs	r3, #157	; 0x9d
    3a60:	009b      	lsls	r3, r3, #2
    3a62:	54c2      	strb	r2, [r0, r3]
    return;
    3a64:	e00f      	b.n	3a86 <send_out_buffer+0x36>
    3a66:	1c04      	adds	r4, r0, #0
  }
  conn->out_buffer_sent = 0;
    3a68:	2200      	movs	r2, #0
    3a6a:	239d      	movs	r3, #157	; 0x9d
    3a6c:	009b      	lsls	r3, r3, #2
    3a6e:	54c2      	strb	r2, [r0, r3]

  DBG("MQTT - (send_out_buffer) Space used in buffer: %i\n\r",
    3a70:	1b49      	subs	r1, r1, r5
    3a72:	4805      	ldr	r0, [pc, #20]	; (3a88 <send_out_buffer+0x38>)
    3a74:	4b05      	ldr	r3, [pc, #20]	; (3a8c <send_out_buffer+0x3c>)
    3a76:	4798      	blx	r3
      conn->out_buffer_ptr - conn->out_buffer);

  tcp_socket_send(&conn->socket, conn->out_buffer,
    3a78:	4b05      	ldr	r3, [pc, #20]	; (3a90 <send_out_buffer+0x40>)
    3a7a:	18e0      	adds	r0, r4, r3
    3a7c:	6f22      	ldr	r2, [r4, #112]	; 0x70
    3a7e:	1b52      	subs	r2, r2, r5
    3a80:	1c29      	adds	r1, r5, #0
    3a82:	4b04      	ldr	r3, [pc, #16]	; (3a94 <send_out_buffer+0x44>)
    3a84:	4798      	blx	r3
                  conn->out_buffer_ptr - conn->out_buffer);
}
    3a86:	bd38      	pop	{r3, r4, r5, pc}
    3a88:	00012394 	.word	0x00012394
    3a8c:	00010931 	.word	0x00010931
    3a90:	0000072c 	.word	0x0000072c
    3a94:	0000a495 	.word	0x0000a495

00003a98 <write_byte>:
  }
}
/*---------------------------------------------------------------------------*/
static int
write_byte(struct mqtt_connection *conn, uint8_t data)
{
    3a98:	b570      	push	{r4, r5, r6, lr}
    3a9a:	1c04      	adds	r4, r0, #0
    3a9c:	1c0e      	adds	r6, r1, #0
  DBG("MQTT - (write_byte) buff_size: %i write: '%02X'\n\r",
    3a9e:	239d      	movs	r3, #157	; 0x9d
    3aa0:	009b      	lsls	r3, r3, #2
    3aa2:	18c5      	adds	r5, r0, r3
    3aa4:	6f03      	ldr	r3, [r0, #112]	; 0x70
    3aa6:	1ae9      	subs	r1, r5, r3
    3aa8:	4808      	ldr	r0, [pc, #32]	; (3acc <write_byte+0x34>)
    3aaa:	1c32      	adds	r2, r6, #0
    3aac:	4b08      	ldr	r3, [pc, #32]	; (3ad0 <write_byte+0x38>)
    3aae:	4798      	blx	r3
      &conn->out_buffer[MQTT_TCP_OUTPUT_BUFF_SIZE] - conn->out_buffer_ptr,
      data);

  if(&conn->out_buffer[MQTT_TCP_OUTPUT_BUFF_SIZE] - conn->out_buffer_ptr == 0) {
    3ab0:	6f23      	ldr	r3, [r4, #112]	; 0x70
    3ab2:	42ab      	cmp	r3, r5
    3ab4:	d104      	bne.n	3ac0 <write_byte+0x28>
    send_out_buffer(conn);
    3ab6:	1c20      	adds	r0, r4, #0
    3ab8:	4b06      	ldr	r3, [pc, #24]	; (3ad4 <write_byte+0x3c>)
    3aba:	4798      	blx	r3
    return 1;
    3abc:	2001      	movs	r0, #1
    3abe:	e004      	b.n	3aca <write_byte+0x32>
  }

  *conn->out_buffer_ptr = data;
    3ac0:	701e      	strb	r6, [r3, #0]
  conn->out_buffer_ptr++;
    3ac2:	6f23      	ldr	r3, [r4, #112]	; 0x70
    3ac4:	3301      	adds	r3, #1
    3ac6:	6723      	str	r3, [r4, #112]	; 0x70
  return 0;
    3ac8:	2000      	movs	r0, #0
}
    3aca:	bd70      	pop	{r4, r5, r6, pc}
    3acc:	000123c8 	.word	0x000123c8
    3ad0:	00010931 	.word	0x00010931
    3ad4:	00003a51 	.word	0x00003a51

00003ad8 <write_bytes>:
/*---------------------------------------------------------------------------*/
static int
write_bytes(struct mqtt_connection *conn, uint8_t *data, uint16_t len)
{
    3ad8:	b5f0      	push	{r4, r5, r6, r7, lr}
    3ada:	4647      	mov	r7, r8
    3adc:	b480      	push	{r7}
    3ade:	1c06      	adds	r6, r0, #0
    3ae0:	1c15      	adds	r5, r2, #0
  uint16_t write_bytes;
  write_bytes =
    MIN(&conn->out_buffer[MQTT_TCP_OUTPUT_BUFF_SIZE] - conn->out_buffer_ptr,
    3ae2:	4690      	mov	r8, r2
    3ae4:	23a8      	movs	r3, #168	; 0xa8
    3ae6:	009b      	lsls	r3, r3, #2
    3ae8:	58c3      	ldr	r3, [r0, r3]
    3aea:	6f00      	ldr	r0, [r0, #112]	; 0x70
    3aec:	229d      	movs	r2, #157	; 0x9d
    3aee:	0092      	lsls	r2, r2, #2
    3af0:	18b2      	adds	r2, r6, r2
    3af2:	1a12      	subs	r2, r2, r0
    3af4:	1aec      	subs	r4, r5, r3
    3af6:	4294      	cmp	r4, r2
    3af8:	d900      	bls.n	3afc <write_bytes+0x24>
    3afa:	1c14      	adds	r4, r2, #0
        len - conn->out_write_pos);

  memcpy(conn->out_buffer_ptr, &data[conn->out_write_pos], write_bytes);
    3afc:	0424      	lsls	r4, r4, #16
    3afe:	0c24      	lsrs	r4, r4, #16
    3b00:	18c9      	adds	r1, r1, r3
    3b02:	1c22      	adds	r2, r4, #0
    3b04:	4b0f      	ldr	r3, [pc, #60]	; (3b44 <write_bytes+0x6c>)
    3b06:	4798      	blx	r3
  conn->out_write_pos += write_bytes;
    3b08:	27a8      	movs	r7, #168	; 0xa8
    3b0a:	00bf      	lsls	r7, r7, #2
    3b0c:	59f3      	ldr	r3, [r6, r7]
    3b0e:	18e2      	adds	r2, r4, r3
    3b10:	51f2      	str	r2, [r6, r7]
  conn->out_buffer_ptr += write_bytes;
    3b12:	6f33      	ldr	r3, [r6, #112]	; 0x70
    3b14:	469c      	mov	ip, r3
    3b16:	4464      	add	r4, ip
    3b18:	6734      	str	r4, [r6, #112]	; 0x70

  DBG("MQTT - (write_bytes) len: %u write_pos: %lu\n\r", len,
    3b1a:	480b      	ldr	r0, [pc, #44]	; (3b48 <write_bytes+0x70>)
    3b1c:	1c29      	adds	r1, r5, #0
    3b1e:	4b0b      	ldr	r3, [pc, #44]	; (3b4c <write_bytes+0x74>)
    3b20:	4798      	blx	r3
      conn->out_write_pos);

  if(len - conn->out_write_pos == 0) {
    3b22:	59f3      	ldr	r3, [r6, r7]
    3b24:	4598      	cmp	r8, r3
    3b26:	d103      	bne.n	3b30 <write_bytes+0x58>
    conn->out_write_pos = 0;
    3b28:	2200      	movs	r2, #0
    3b2a:	51f2      	str	r2, [r6, r7]
    return 0;
    3b2c:	2000      	movs	r0, #0
    3b2e:	e006      	b.n	3b3e <write_bytes+0x66>
  } else {
    send_out_buffer(conn);
    3b30:	1c30      	adds	r0, r6, #0
    3b32:	4b07      	ldr	r3, [pc, #28]	; (3b50 <write_bytes+0x78>)
    3b34:	4798      	blx	r3
    return len - conn->out_write_pos;
    3b36:	23a8      	movs	r3, #168	; 0xa8
    3b38:	009b      	lsls	r3, r3, #2
    3b3a:	58f0      	ldr	r0, [r6, r3]
    3b3c:	1a28      	subs	r0, r5, r0
  }
}
    3b3e:	bc04      	pop	{r2}
    3b40:	4690      	mov	r8, r2
    3b42:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3b44:	000108e7 	.word	0x000108e7
    3b48:	000123fc 	.word	0x000123fc
    3b4c:	00010931 	.word	0x00010931
    3b50:	00003a51 	.word	0x00003a51

00003b54 <string_to_mqtt_string>:
                  conn->out_buffer_ptr - conn->out_buffer);
}
/*---------------------------------------------------------------------------*/
static void
string_to_mqtt_string(struct mqtt_string *mqtt_string, char *string)
{
    3b54:	b510      	push	{r4, lr}
  if(mqtt_string == NULL) {
    3b56:	2800      	cmp	r0, #0
    3b58:	d00a      	beq.n	3b70 <string_to_mqtt_string+0x1c>
    return;
  }
  mqtt_string->string = string;
    3b5a:	6001      	str	r1, [r0, #0]

  if(string != NULL) {
    3b5c:	2900      	cmp	r1, #0
    3b5e:	d005      	beq.n	3b6c <string_to_mqtt_string+0x18>
    3b60:	1c04      	adds	r4, r0, #0
    mqtt_string->length = strlen(string);
    3b62:	1c08      	adds	r0, r1, #0
    3b64:	4b03      	ldr	r3, [pc, #12]	; (3b74 <string_to_mqtt_string+0x20>)
    3b66:	4798      	blx	r3
    3b68:	80a0      	strh	r0, [r4, #4]
    3b6a:	e001      	b.n	3b70 <string_to_mqtt_string+0x1c>
  } else {
    mqtt_string->length = 0;
    3b6c:	2300      	movs	r3, #0
    3b6e:	8083      	strh	r3, [r0, #4]
  }
}
    3b70:	bd10      	pop	{r4, pc}
    3b72:	46c0      	nop			; (mov r8, r8)
    3b74:	00010be9 	.word	0x00010be9

00003b78 <mqtt_init>:
  PROCESS_END();
}
/*---------------------------------------------------------------------------*/
void
mqtt_init(void)
{
    3b78:	b510      	push	{r4, lr}
  static uint8_t inited = 0;
  if(!inited) {
    3b7a:	4b19      	ldr	r3, [pc, #100]	; (3be0 <mqtt_init+0x68>)
    3b7c:	781b      	ldrb	r3, [r3, #0]
    3b7e:	2b00      	cmp	r3, #0
    3b80:	d12c      	bne.n	3bdc <mqtt_init+0x64>
    mqtt_do_connect_tcp_event = process_alloc_event();
    3b82:	4c18      	ldr	r4, [pc, #96]	; (3be4 <mqtt_init+0x6c>)
    3b84:	47a0      	blx	r4
    3b86:	4b18      	ldr	r3, [pc, #96]	; (3be8 <mqtt_init+0x70>)
    3b88:	7018      	strb	r0, [r3, #0]
    mqtt_event_min = mqtt_do_connect_tcp_event;
    3b8a:	4b18      	ldr	r3, [pc, #96]	; (3bec <mqtt_init+0x74>)
    3b8c:	7018      	strb	r0, [r3, #0]

    mqtt_do_connect_mqtt_event = process_alloc_event();
    3b8e:	47a0      	blx	r4
    3b90:	4b17      	ldr	r3, [pc, #92]	; (3bf0 <mqtt_init+0x78>)
    3b92:	7018      	strb	r0, [r3, #0]
    mqtt_do_disconnect_mqtt_event = process_alloc_event();
    3b94:	47a0      	blx	r4
    3b96:	4b17      	ldr	r3, [pc, #92]	; (3bf4 <mqtt_init+0x7c>)
    3b98:	7018      	strb	r0, [r3, #0]
    mqtt_do_subscribe_event = process_alloc_event();
    3b9a:	47a0      	blx	r4
    3b9c:	4b16      	ldr	r3, [pc, #88]	; (3bf8 <mqtt_init+0x80>)
    3b9e:	7018      	strb	r0, [r3, #0]
    mqtt_do_unsubscribe_event = process_alloc_event();
    3ba0:	47a0      	blx	r4
    3ba2:	4b16      	ldr	r3, [pc, #88]	; (3bfc <mqtt_init+0x84>)
    3ba4:	7018      	strb	r0, [r3, #0]
    mqtt_do_publish_event = process_alloc_event();
    3ba6:	47a0      	blx	r4
    3ba8:	4b15      	ldr	r3, [pc, #84]	; (3c00 <mqtt_init+0x88>)
    3baa:	7018      	strb	r0, [r3, #0]
    mqtt_do_pingreq_event = process_alloc_event();
    3bac:	47a0      	blx	r4
    3bae:	4b15      	ldr	r3, [pc, #84]	; (3c04 <mqtt_init+0x8c>)
    3bb0:	7018      	strb	r0, [r3, #0]
    mqtt_update_event = process_alloc_event();
    3bb2:	47a0      	blx	r4
    3bb4:	4b14      	ldr	r3, [pc, #80]	; (3c08 <mqtt_init+0x90>)
    3bb6:	7018      	strb	r0, [r3, #0]
    mqtt_abort_now_event = process_alloc_event();
    3bb8:	47a0      	blx	r4
    3bba:	4b14      	ldr	r3, [pc, #80]	; (3c0c <mqtt_init+0x94>)
    3bbc:	7018      	strb	r0, [r3, #0]
    mqtt_event_max = mqtt_abort_now_event;
    3bbe:	4b14      	ldr	r3, [pc, #80]	; (3c10 <mqtt_init+0x98>)
    3bc0:	7018      	strb	r0, [r3, #0]

    mqtt_continue_send_event = process_alloc_event();
    3bc2:	47a0      	blx	r4
    3bc4:	4b13      	ldr	r3, [pc, #76]	; (3c14 <mqtt_init+0x9c>)
    3bc6:	7018      	strb	r0, [r3, #0]

    list_init(mqtt_conn_list);
    3bc8:	4813      	ldr	r0, [pc, #76]	; (3c18 <mqtt_init+0xa0>)
    3bca:	4b14      	ldr	r3, [pc, #80]	; (3c1c <mqtt_init+0xa4>)
    3bcc:	4798      	blx	r3
    process_start(&mqtt_process, NULL);
    3bce:	4814      	ldr	r0, [pc, #80]	; (3c20 <mqtt_init+0xa8>)
    3bd0:	2100      	movs	r1, #0
    3bd2:	4b14      	ldr	r3, [pc, #80]	; (3c24 <mqtt_init+0xac>)
    3bd4:	4798      	blx	r3
    inited = 1;
    3bd6:	2201      	movs	r2, #1
    3bd8:	4b01      	ldr	r3, [pc, #4]	; (3be0 <mqtt_init+0x68>)
    3bda:	701a      	strb	r2, [r3, #0]
  }
}
    3bdc:	bd10      	pop	{r4, pc}
    3bde:	46c0      	nop			; (mov r8, r8)
    3be0:	20000386 	.word	0x20000386
    3be4:	0000eaed 	.word	0x0000eaed
    3be8:	20000385 	.word	0x20000385
    3bec:	20000375 	.word	0x20000375
    3bf0:	20000377 	.word	0x20000377
    3bf4:	2000037a 	.word	0x2000037a
    3bf8:	2000037c 	.word	0x2000037c
    3bfc:	20000384 	.word	0x20000384
    3c00:	20000378 	.word	0x20000378
    3c04:	20000374 	.word	0x20000374
    3c08:	20002b54 	.word	0x20002b54
    3c0c:	2000037b 	.word	0x2000037b
    3c10:	20000376 	.word	0x20000376
    3c14:	20000379 	.word	0x20000379
    3c18:	20000388 	.word	0x20000388
    3c1c:	00005701 	.word	0x00005701
    3c20:	2000000c 	.word	0x2000000c
    3c24:	0000ec69 	.word	0x0000ec69

00003c28 <mqtt_register>:
/*---------------------------------------------------------------------------*/
mqtt_status_t
mqtt_register(struct mqtt_connection *conn, struct process *app_process,
              char *client_id, mqtt_event_callback_t event_callback,
              uint16_t max_segment_size)
{
    3c28:	b5f0      	push	{r4, r5, r6, r7, lr}
    3c2a:	b083      	sub	sp, #12
    3c2c:	1c04      	adds	r4, r0, #0
    3c2e:	a808      	add	r0, sp, #32
    3c30:	8806      	ldrh	r6, [r0, #0]
  if(strlen(client_id) < 1) {
    3c32:	7815      	ldrb	r5, [r2, #0]
    return MQTT_STATUS_INVALID_ARGS_ERROR;
    3c34:	2082      	movs	r0, #130	; 0x82
mqtt_status_t
mqtt_register(struct mqtt_connection *conn, struct process *app_process,
              char *client_id, mqtt_event_callback_t event_callback,
              uint16_t max_segment_size)
{
  if(strlen(client_id) < 1) {
    3c36:	2d00      	cmp	r5, #0
    3c38:	d02f      	beq.n	3c9a <mqtt_register+0x72>
    3c3a:	1c1f      	adds	r7, r3, #0
    3c3c:	9201      	str	r2, [sp, #4]
    3c3e:	1c0d      	adds	r5, r1, #0
    return MQTT_STATUS_INVALID_ARGS_ERROR;
  }

  /* Set defaults - Set all to zero to begin with */
  memset(conn, 0, sizeof(struct mqtt_connection));
    3c40:	1c20      	adds	r0, r4, #0
    3c42:	2100      	movs	r1, #0
    3c44:	22ec      	movs	r2, #236	; 0xec
    3c46:	00d2      	lsls	r2, r2, #3
    3c48:	4b15      	ldr	r3, [pc, #84]	; (3ca0 <mqtt_register+0x78>)
    3c4a:	4798      	blx	r3
  string_to_mqtt_string(&conn->client_id, client_id);
    3c4c:	1c20      	adds	r0, r4, #0
    3c4e:	300c      	adds	r0, #12
    3c50:	9901      	ldr	r1, [sp, #4]
    3c52:	4b14      	ldr	r3, [pc, #80]	; (3ca4 <mqtt_register+0x7c>)
    3c54:	4798      	blx	r3
  conn->event_callback = event_callback;
    3c56:	6667      	str	r7, [r4, #100]	; 0x64
  conn->app_process = app_process;
    3c58:	66e5      	str	r5, [r4, #108]	; 0x6c
  conn->auto_reconnect = 1;
    3c5a:	2301      	movs	r3, #1
    3c5c:	7563      	strb	r3, [r4, #21]
  conn->max_segment_size = max_segment_size;
    3c5e:	22a9      	movs	r2, #169	; 0xa9
    3c60:	0092      	lsls	r2, r2, #2
    3c62:	52a6      	strh	r6, [r4, r2]
}
/*---------------------------------------------------------------------------*/
static void
reset_defaults(struct mqtt_connection *conn)
{
  conn->mid_counter = 1;
    3c64:	2268      	movs	r2, #104	; 0x68
    3c66:	52a3      	strh	r3, [r4, r2]
  PT_INIT(&conn->out_proto_thread);
    3c68:	2200      	movs	r2, #0
    3c6a:	23a7      	movs	r3, #167	; 0xa7
    3c6c:	009b      	lsls	r3, r3, #2
    3c6e:	52e2      	strh	r2, [r4, r3]
  conn->waiting_for_pingresp = 0;
    3c70:	2338      	movs	r3, #56	; 0x38
    3c72:	54e2      	strb	r2, [r4, r3]

  reset_packet(&conn->in_packet);
    3c74:	2395      	movs	r3, #149	; 0x95
    3c76:	00db      	lsls	r3, r3, #3
    3c78:	18e0      	adds	r0, r4, r3
    3c7a:	4b0b      	ldr	r3, [pc, #44]	; (3ca8 <mqtt_register+0x80>)
    3c7c:	4798      	blx	r3
  conn->out_buffer_sent = 0;
    3c7e:	239d      	movs	r3, #157	; 0x9d
    3c80:	009b      	lsls	r3, r3, #2
    3c82:	2200      	movs	r2, #0
    3c84:	54e2      	strb	r2, [r4, r3]
  conn->app_process = app_process;
  conn->auto_reconnect = 1;
  conn->max_segment_size = max_segment_size;
  reset_defaults(conn);

  mqtt_init();
    3c86:	4b09      	ldr	r3, [pc, #36]	; (3cac <mqtt_register+0x84>)
    3c88:	4798      	blx	r3
  list_add(mqtt_conn_list, conn);
    3c8a:	4809      	ldr	r0, [pc, #36]	; (3cb0 <mqtt_register+0x88>)
    3c8c:	1c21      	adds	r1, r4, #0
    3c8e:	4b09      	ldr	r3, [pc, #36]	; (3cb4 <mqtt_register+0x8c>)
    3c90:	4798      	blx	r3

  DBG("MQTT - Registered successfully\n\r");
    3c92:	4809      	ldr	r0, [pc, #36]	; (3cb8 <mqtt_register+0x90>)
    3c94:	4b09      	ldr	r3, [pc, #36]	; (3cbc <mqtt_register+0x94>)
    3c96:	4798      	blx	r3

  return MQTT_STATUS_OK;
    3c98:	2000      	movs	r0, #0
}
    3c9a:	b003      	add	sp, #12
    3c9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3c9e:	46c0      	nop			; (mov r8, r8)
    3ca0:	00010921 	.word	0x00010921
    3ca4:	00003b55 	.word	0x00003b55
    3ca8:	00003285 	.word	0x00003285
    3cac:	00003b79 	.word	0x00003b79
    3cb0:	20000388 	.word	0x20000388
    3cb4:	00005759 	.word	0x00005759
    3cb8:	0001242c 	.word	0x0001242c
    3cbc:	00010931 	.word	0x00010931

00003cc0 <mqtt_connect>:
 * N.B. Non-blocking call.
 */
mqtt_status_t
mqtt_connect(struct mqtt_connection *conn, char *host, uint16_t port,
             uint16_t keep_alive)
{
    3cc0:	b530      	push	{r4, r5, lr}
    3cc2:	b085      	sub	sp, #20
    3cc4:	1c04      	adds	r4, r0, #0
  uip_ip6addr_t ip6addr;
  uip_ipaddr_t *ipaddr;
  ipaddr = &ip6addr;

  /* Check if we are already trying to connect */
  if(conn->state > MQTT_CONN_STATE_NOT_CONNECTED) {
    3cc6:	2560      	movs	r5, #96	; 0x60
    3cc8:	5d45      	ldrb	r5, [r0, r5]
    3cca:	2d03      	cmp	r5, #3
    3ccc:	d821      	bhi.n	3d12 <mqtt_connect+0x52>
    return MQTT_STATUS_OK;
  }

  conn->server_host = host;
    3cce:	4812      	ldr	r0, [pc, #72]	; (3d18 <mqtt_connect+0x58>)
    3cd0:	5021      	str	r1, [r4, r0]
  conn->keep_alive = keep_alive;
    3cd2:	82e3      	strh	r3, [r4, #22]
  conn->server_port = port;
    3cd4:	23e5      	movs	r3, #229	; 0xe5
    3cd6:	00db      	lsls	r3, r3, #3
    3cd8:	52e2      	strh	r2, [r4, r3]
  conn->out_buffer_ptr = conn->out_buffer;
    3cda:	1c23      	adds	r3, r4, #0
    3cdc:	3374      	adds	r3, #116	; 0x74
    3cde:	6723      	str	r3, [r4, #112]	; 0x70
  conn->out_packet.qos_state = MQTT_QOS_STATE_GOT_ACK;
    3ce0:	2201      	movs	r2, #1
    3ce2:	4b0e      	ldr	r3, [pc, #56]	; (3d1c <mqtt_connect+0x5c>)
    3ce4:	54e2      	strb	r2, [r4, r3]
  conn->connect_vhdr_flags |= MQTT_VHDR_CLEAN_SESSION_FLAG;
    3ce6:	7d22      	ldrb	r2, [r4, #20]
    3ce8:	2302      	movs	r3, #2
    3cea:	4313      	orrs	r3, r2
    3cec:	7523      	strb	r3, [r4, #20]

  /* convert the string IPv6 address to a numeric IPv6 address */
  uiplib_ip6addrconv(host, &ip6addr);
    3cee:	466d      	mov	r5, sp
    3cf0:	1c08      	adds	r0, r1, #0
    3cf2:	4669      	mov	r1, sp
    3cf4:	4b0a      	ldr	r3, [pc, #40]	; (3d20 <mqtt_connect+0x60>)
    3cf6:	4798      	blx	r3

  uip_ipaddr_copy(&(conn->server_ip), ipaddr);
    3cf8:	23e3      	movs	r3, #227	; 0xe3
    3cfa:	00db      	lsls	r3, r3, #3
    3cfc:	18e3      	adds	r3, r4, r3
    3cfe:	cd07      	ldmia	r5!, {r0, r1, r2}
    3d00:	c307      	stmia	r3!, {r0, r1, r2}
    3d02:	682a      	ldr	r2, [r5, #0]
    3d04:	601a      	str	r2, [r3, #0]
  /*
   * Initiate the connection if the IP could be resolved. Otherwise the
   * connection will be initiated when the DNS lookup is finished, in the main
   * event loop.
   */
  process_post(&mqtt_process, mqtt_do_connect_tcp_event, conn);
    3d06:	4b07      	ldr	r3, [pc, #28]	; (3d24 <mqtt_connect+0x64>)
    3d08:	7819      	ldrb	r1, [r3, #0]
    3d0a:	4807      	ldr	r0, [pc, #28]	; (3d28 <mqtt_connect+0x68>)
    3d0c:	1c22      	adds	r2, r4, #0
    3d0e:	4b07      	ldr	r3, [pc, #28]	; (3d2c <mqtt_connect+0x6c>)
    3d10:	4798      	blx	r3

  return MQTT_STATUS_OK;
}
    3d12:	2000      	movs	r0, #0
    3d14:	b005      	add	sp, #20
    3d16:	bd30      	pop	{r4, r5, pc}
    3d18:	00000714 	.word	0x00000714
    3d1c:	00000299 	.word	0x00000299
    3d20:	0000ab79 	.word	0x0000ab79
    3d24:	20000385 	.word	0x20000385
    3d28:	2000000c 	.word	0x2000000c
    3d2c:	0000ebf9 	.word	0x0000ebf9

00003d30 <mqtt_disconnect>:
/*----------------------------------------------------------------------------*/
void
mqtt_disconnect(struct mqtt_connection *conn)
{
    3d30:	b508      	push	{r3, lr}
  if(conn->state != MQTT_CONN_STATE_CONNECTED_TO_BROKER) {
    3d32:	2360      	movs	r3, #96	; 0x60
    3d34:	5cc3      	ldrb	r3, [r0, r3]
    3d36:	2b08      	cmp	r3, #8
    3d38:	d108      	bne.n	3d4c <mqtt_disconnect+0x1c>
    3d3a:	1c02      	adds	r2, r0, #0
    return;
  }

  conn->state = MQTT_CONN_STATE_SENDING_MQTT_DISCONNECT;
    3d3c:	2109      	movs	r1, #9
    3d3e:	3358      	adds	r3, #88	; 0x58
    3d40:	54c1      	strb	r1, [r0, r3]

  process_post(&mqtt_process, mqtt_do_disconnect_mqtt_event, conn);
    3d42:	4b03      	ldr	r3, [pc, #12]	; (3d50 <mqtt_disconnect+0x20>)
    3d44:	7819      	ldrb	r1, [r3, #0]
    3d46:	4803      	ldr	r0, [pc, #12]	; (3d54 <mqtt_disconnect+0x24>)
    3d48:	4b03      	ldr	r3, [pc, #12]	; (3d58 <mqtt_disconnect+0x28>)
    3d4a:	4798      	blx	r3
}
    3d4c:	bd08      	pop	{r3, pc}
    3d4e:	46c0      	nop			; (mov r8, r8)
    3d50:	2000037a 	.word	0x2000037a
    3d54:	2000000c 	.word	0x2000000c
    3d58:	0000ebf9 	.word	0x0000ebf9

00003d5c <process_thread_mqtt_process>:
  }
  }
}
/*---------------------------------------------------------------------------*/
PROCESS_THREAD(mqtt_process, ev, data)
{
    3d5c:	b5f0      	push	{r4, r5, r6, r7, lr}
    3d5e:	4657      	mov	r7, sl
    3d60:	464e      	mov	r6, r9
    3d62:	4645      	mov	r5, r8
    3d64:	b4e0      	push	{r5, r6, r7}
    3d66:	b084      	sub	sp, #16
    3d68:	1c04      	adds	r4, r0, #0
    3d6a:	1c15      	adds	r5, r2, #0
    3d6c:	230f      	movs	r3, #15
    3d6e:	446b      	add	r3, sp
    3d70:	7019      	strb	r1, [r3, #0]
  static struct mqtt_connection *conn;

  PROCESS_BEGIN();
    3d72:	8803      	ldrh	r3, [r0, #0]
    3d74:	4ac5      	ldr	r2, [pc, #788]	; (408c <process_thread_mqtt_process+0x330>)
    3d76:	4293      	cmp	r3, r2
    3d78:	d101      	bne.n	3d7e <process_thread_mqtt_process+0x22>
    3d7a:	f000 fc0e 	bl	459a <process_thread_mqtt_process+0x83e>
    3d7e:	d80a      	bhi.n	3d96 <process_thread_mqtt_process+0x3a>
    3d80:	4ac3      	ldr	r2, [pc, #780]	; (4090 <process_thread_mqtt_process+0x334>)
    3d82:	4293      	cmp	r3, r2
    3d84:	d025      	beq.n	3dd2 <process_thread_mqtt_process+0x76>
    3d86:	4ac3      	ldr	r2, [pc, #780]	; (4094 <process_thread_mqtt_process+0x338>)
    3d88:	4293      	cmp	r3, r2
    3d8a:	d06d      	beq.n	3e68 <process_thread_mqtt_process+0x10c>
    3d8c:	2b00      	cmp	r3, #0
    3d8e:	d001      	beq.n	3d94 <process_thread_mqtt_process+0x38>
    3d90:	f001 fad1 	bl	5336 <process_thread_mqtt_process+0x15da>
    3d94:	e018      	b.n	3dc8 <process_thread_mqtt_process+0x6c>
    3d96:	4ac0      	ldr	r2, [pc, #768]	; (4098 <process_thread_mqtt_process+0x33c>)
    3d98:	4293      	cmp	r3, r2
    3d9a:	d101      	bne.n	3da0 <process_thread_mqtt_process+0x44>
    3d9c:	f000 fda5 	bl	48ea <process_thread_mqtt_process+0xb8e>
    3da0:	d806      	bhi.n	3db0 <process_thread_mqtt_process+0x54>
    3da2:	4abe      	ldr	r2, [pc, #760]	; (409c <process_thread_mqtt_process+0x340>)
    3da4:	4293      	cmp	r3, r2
    3da6:	d101      	bne.n	3dac <process_thread_mqtt_process+0x50>
    3da8:	f000 fca9 	bl	46fe <process_thread_mqtt_process+0x9a2>
    3dac:	f001 fac3 	bl	5336 <process_thread_mqtt_process+0x15da>
    3db0:	4abb      	ldr	r2, [pc, #748]	; (40a0 <process_thread_mqtt_process+0x344>)
    3db2:	4293      	cmp	r3, r2
    3db4:	d101      	bne.n	3dba <process_thread_mqtt_process+0x5e>
    3db6:	f000 ff51 	bl	4c5c <process_thread_mqtt_process+0xf00>
    3dba:	4aba      	ldr	r2, [pc, #744]	; (40a4 <process_thread_mqtt_process+0x348>)
    3dbc:	4293      	cmp	r3, r2
    3dbe:	d101      	bne.n	3dc4 <process_thread_mqtt_process+0x68>
    3dc0:	f001 f8eb 	bl	4f9a <process_thread_mqtt_process+0x123e>
    3dc4:	f001 fab7 	bl	5336 <process_thread_mqtt_process+0x15da>

  while(1) {
    PROCESS_WAIT_EVENT();
    3dc8:	4bb1      	ldr	r3, [pc, #708]	; (4090 <process_thread_mqtt_process+0x334>)
    3dca:	8023      	strh	r3, [r4, #0]
    3dcc:	2001      	movs	r0, #1
    3dce:	f001 faee 	bl	53ae <process_thread_mqtt_process+0x1652>

    if(ev == mqtt_abort_now_event) {
    3dd2:	230f      	movs	r3, #15
    3dd4:	446b      	add	r3, sp
    3dd6:	781a      	ldrb	r2, [r3, #0]
    3dd8:	4bb3      	ldr	r3, [pc, #716]	; (40a8 <process_thread_mqtt_process+0x34c>)
    3dda:	781b      	ldrb	r3, [r3, #0]
    3ddc:	429a      	cmp	r2, r3
    3dde:	d10a      	bne.n	3df6 <process_thread_mqtt_process+0x9a>
      DBG("MQTT - Abort\n\r");
    3de0:	48b2      	ldr	r0, [pc, #712]	; (40ac <process_thread_mqtt_process+0x350>)
    3de2:	4bb3      	ldr	r3, [pc, #716]	; (40b0 <process_thread_mqtt_process+0x354>)
    3de4:	4798      	blx	r3
      conn = data;
    3de6:	4bb3      	ldr	r3, [pc, #716]	; (40b4 <process_thread_mqtt_process+0x358>)
    3de8:	601d      	str	r5, [r3, #0]
      conn->state = MQTT_CONN_STATE_ABORT_IMMEDIATE;
    3dea:	220a      	movs	r2, #10
    3dec:	2360      	movs	r3, #96	; 0x60
    3dee:	54ea      	strb	r2, [r5, r3]

      abort_connection(conn);
    3df0:	1c28      	adds	r0, r5, #0
    3df2:	4bb1      	ldr	r3, [pc, #708]	; (40b8 <process_thread_mqtt_process+0x35c>)
    3df4:	4798      	blx	r3
    }
    if(ev == mqtt_do_connect_tcp_event) {
    3df6:	230f      	movs	r3, #15
    3df8:	446b      	add	r3, sp
    3dfa:	781a      	ldrb	r2, [r3, #0]
    3dfc:	4baf      	ldr	r3, [pc, #700]	; (40bc <process_thread_mqtt_process+0x360>)
    3dfe:	781b      	ldrb	r3, [r3, #0]
    3e00:	429a      	cmp	r2, r3
    3e02:	d107      	bne.n	3e14 <process_thread_mqtt_process+0xb8>
      conn = data;
    3e04:	4eab      	ldr	r6, [pc, #684]	; (40b4 <process_thread_mqtt_process+0x358>)
    3e06:	6035      	str	r5, [r6, #0]
      DBG("MQTT - Got mqtt_do_connect_tcp_event!\n\r");
    3e08:	48ad      	ldr	r0, [pc, #692]	; (40c0 <process_thread_mqtt_process+0x364>)
    3e0a:	4ba9      	ldr	r3, [pc, #676]	; (40b0 <process_thread_mqtt_process+0x354>)
    3e0c:	4798      	blx	r3
      connect_tcp(conn);
    3e0e:	6830      	ldr	r0, [r6, #0]
    3e10:	4bac      	ldr	r3, [pc, #688]	; (40c4 <process_thread_mqtt_process+0x368>)
    3e12:	4798      	blx	r3
    }
    if(ev == mqtt_do_connect_mqtt_event) {
    3e14:	230f      	movs	r3, #15
    3e16:	446b      	add	r3, sp
    3e18:	781a      	ldrb	r2, [r3, #0]
    3e1a:	4bab      	ldr	r3, [pc, #684]	; (40c8 <process_thread_mqtt_process+0x36c>)
    3e1c:	781b      	ldrb	r3, [r3, #0]
    3e1e:	429a      	cmp	r2, r3
    3e20:	d000      	beq.n	3e24 <process_thread_mqtt_process+0xc8>
    3e22:	e390      	b.n	4546 <process_thread_mqtt_process+0x7ea>
      conn = data;
    3e24:	4ea3      	ldr	r6, [pc, #652]	; (40b4 <process_thread_mqtt_process+0x358>)
    3e26:	6035      	str	r5, [r6, #0]
      conn->socket.output_data_max_seg = conn->max_segment_size;
    3e28:	23a9      	movs	r3, #169	; 0xa9
    3e2a:	009b      	lsls	r3, r3, #2
    3e2c:	5aea      	ldrh	r2, [r5, r3]
    3e2e:	4ba7      	ldr	r3, [pc, #668]	; (40cc <process_thread_mqtt_process+0x370>)
    3e30:	52ea      	strh	r2, [r5, r3]
      DBG("MQTT - Got mqtt_do_connect_mqtt_event!\n\r");
    3e32:	48a7      	ldr	r0, [pc, #668]	; (40d0 <process_thread_mqtt_process+0x374>)
    3e34:	4b9e      	ldr	r3, [pc, #632]	; (40b0 <process_thread_mqtt_process+0x354>)
    3e36:	4798      	blx	r3

      if(conn->out_buffer_sent == 1) {
    3e38:	6833      	ldr	r3, [r6, #0]
    3e3a:	229d      	movs	r2, #157	; 0x9d
    3e3c:	0092      	lsls	r2, r2, #2
    3e3e:	5c9a      	ldrb	r2, [r3, r2]
    3e40:	2a01      	cmp	r2, #1
    3e42:	d000      	beq.n	3e46 <process_thread_mqtt_process+0xea>
    3e44:	e37f      	b.n	4546 <process_thread_mqtt_process+0x7ea>
        PT_INIT(&conn->out_proto_thread);
    3e46:	2100      	movs	r1, #0
    3e48:	22a7      	movs	r2, #167	; 0xa7
    3e4a:	0092      	lsls	r2, r2, #2
    3e4c:	5299      	strh	r1, [r3, r2]
        while(connect_pt(&conn->out_proto_thread, conn) < PT_EXITED &&
    3e4e:	e02b      	b.n	3ea8 <process_thread_mqtt_process+0x14c>
              conn->state != MQTT_CONN_STATE_ABORT_IMMEDIATE) {
          PT_MQTT_WAIT_SEND();
    3e50:	4ba0      	ldr	r3, [pc, #640]	; (40d4 <process_thread_mqtt_process+0x378>)
    3e52:	7819      	ldrb	r1, [r3, #0]
    3e54:	4ba0      	ldr	r3, [pc, #640]	; (40d8 <process_thread_mqtt_process+0x37c>)
    3e56:	6818      	ldr	r0, [r3, #0]
    3e58:	2200      	movs	r2, #0
    3e5a:	4ba0      	ldr	r3, [pc, #640]	; (40dc <process_thread_mqtt_process+0x380>)
    3e5c:	4798      	blx	r3
    3e5e:	4b8d      	ldr	r3, [pc, #564]	; (4094 <process_thread_mqtt_process+0x338>)
    3e60:	8023      	strh	r3, [r4, #0]
    3e62:	2001      	movs	r0, #1
    3e64:	f001 faa3 	bl	53ae <process_thread_mqtt_process+0x1652>
    3e68:	230f      	movs	r3, #15
    3e6a:	446b      	add	r3, sp
    3e6c:	7819      	ldrb	r1, [r3, #0]
    3e6e:	4b8e      	ldr	r3, [pc, #568]	; (40a8 <process_thread_mqtt_process+0x34c>)
    3e70:	781b      	ldrb	r3, [r3, #0]
    3e72:	428b      	cmp	r3, r1
    3e74:	d10b      	bne.n	3e8e <process_thread_mqtt_process+0x132>
    3e76:	4b8f      	ldr	r3, [pc, #572]	; (40b4 <process_thread_mqtt_process+0x358>)
    3e78:	681b      	ldr	r3, [r3, #0]
    3e7a:	210a      	movs	r1, #10
    3e7c:	2260      	movs	r2, #96	; 0x60
    3e7e:	5499      	strb	r1, [r3, r2]
    3e80:	2100      	movs	r1, #0
    3e82:	22a7      	movs	r2, #167	; 0xa7
    3e84:	0092      	lsls	r2, r2, #2
    3e86:	5299      	strh	r1, [r3, r2]
    3e88:	2002      	movs	r0, #2
    3e8a:	f001 fa90 	bl	53ae <process_thread_mqtt_process+0x1652>
    3e8e:	4b94      	ldr	r3, [pc, #592]	; (40e0 <process_thread_mqtt_process+0x384>)
    3e90:	781b      	ldrb	r3, [r3, #0]
    3e92:	428b      	cmp	r3, r1
    3e94:	d808      	bhi.n	3ea8 <process_thread_mqtt_process+0x14c>
    3e96:	4b93      	ldr	r3, [pc, #588]	; (40e4 <process_thread_mqtt_process+0x388>)
    3e98:	781b      	ldrb	r3, [r3, #0]
    3e9a:	428b      	cmp	r3, r1
    3e9c:	d304      	bcc.n	3ea8 <process_thread_mqtt_process+0x14c>
    3e9e:	4b8e      	ldr	r3, [pc, #568]	; (40d8 <process_thread_mqtt_process+0x37c>)
    3ea0:	6818      	ldr	r0, [r3, #0]
    3ea2:	1c2a      	adds	r2, r5, #0
    3ea4:	4b8d      	ldr	r3, [pc, #564]	; (40dc <process_thread_mqtt_process+0x380>)
    3ea6:	4798      	blx	r3
      conn->socket.output_data_max_seg = conn->max_segment_size;
      DBG("MQTT - Got mqtt_do_connect_mqtt_event!\n\r");

      if(conn->out_buffer_sent == 1) {
        PT_INIT(&conn->out_proto_thread);
        while(connect_pt(&conn->out_proto_thread, conn) < PT_EXITED &&
    3ea8:	4b82      	ldr	r3, [pc, #520]	; (40b4 <process_thread_mqtt_process+0x358>)
    3eaa:	681e      	ldr	r6, [r3, #0]
}
/*---------------------------------------------------------------------------*/
static
PT_THREAD(connect_pt(struct pt *pt, struct mqtt_connection *conn))
{
  PT_BEGIN(pt);
    3eac:	23a7      	movs	r3, #167	; 0xa7
    3eae:	009b      	lsls	r3, r3, #2
    3eb0:	5af3      	ldrh	r3, [r6, r3]
    3eb2:	2276      	movs	r2, #118	; 0x76
    3eb4:	32ff      	adds	r2, #255	; 0xff
    3eb6:	4293      	cmp	r3, r2
    3eb8:	d100      	bne.n	3ebc <process_thread_mqtt_process+0x160>
    3eba:	e1d1      	b.n	4260 <process_thread_mqtt_process+0x504>
    3ebc:	d839      	bhi.n	3f32 <process_thread_mqtt_process+0x1d6>
    3ebe:	226e      	movs	r2, #110	; 0x6e
    3ec0:	32ff      	adds	r2, #255	; 0xff
    3ec2:	4293      	cmp	r3, r2
    3ec4:	d100      	bne.n	3ec8 <process_thread_mqtt_process+0x16c>
    3ec6:	e144      	b.n	4152 <process_thread_mqtt_process+0x3f6>
    3ec8:	d816      	bhi.n	3ef8 <process_thread_mqtt_process+0x19c>
    3eca:	3a03      	subs	r2, #3
    3ecc:	4293      	cmp	r3, r2
    3ece:	d100      	bne.n	3ed2 <process_thread_mqtt_process+0x176>
    3ed0:	e0ca      	b.n	4068 <process_thread_mqtt_process+0x30c>
    3ed2:	d807      	bhi.n	3ee4 <process_thread_mqtt_process+0x188>
    3ed4:	2b00      	cmp	r3, #0
    3ed6:	d06c      	beq.n	3fb2 <process_thread_mqtt_process+0x256>
    3ed8:	2268      	movs	r2, #104	; 0x68
    3eda:	32ff      	adds	r2, #255	; 0xff
    3edc:	4293      	cmp	r3, r2
    3ede:	d100      	bne.n	3ee2 <process_thread_mqtt_process+0x186>
    3ee0:	e0ad      	b.n	403e <process_thread_mqtt_process+0x2e2>
    3ee2:	e32c      	b.n	453e <process_thread_mqtt_process+0x7e2>
    3ee4:	226c      	movs	r2, #108	; 0x6c
    3ee6:	32ff      	adds	r2, #255	; 0xff
    3ee8:	4293      	cmp	r3, r2
    3eea:	d100      	bne.n	3eee <process_thread_mqtt_process+0x192>
    3eec:	e10b      	b.n	4106 <process_thread_mqtt_process+0x3aa>
    3eee:	3201      	adds	r2, #1
    3ef0:	4293      	cmp	r3, r2
    3ef2:	d100      	bne.n	3ef6 <process_thread_mqtt_process+0x19a>
    3ef4:	e11a      	b.n	412c <process_thread_mqtt_process+0x3d0>
    3ef6:	e322      	b.n	453e <process_thread_mqtt_process+0x7e2>
    3ef8:	22b8      	movs	r2, #184	; 0xb8
    3efa:	0052      	lsls	r2, r2, #1
    3efc:	4293      	cmp	r3, r2
    3efe:	d100      	bne.n	3f02 <process_thread_mqtt_process+0x1a6>
    3f00:	e161      	b.n	41c6 <process_thread_mqtt_process+0x46a>
    3f02:	d809      	bhi.n	3f18 <process_thread_mqtt_process+0x1bc>
    3f04:	3a02      	subs	r2, #2
    3f06:	4293      	cmp	r3, r2
    3f08:	d100      	bne.n	3f0c <process_thread_mqtt_process+0x1b0>
    3f0a:	e136      	b.n	417a <process_thread_mqtt_process+0x41e>
    3f0c:	2270      	movs	r2, #112	; 0x70
    3f0e:	32ff      	adds	r2, #255	; 0xff
    3f10:	4293      	cmp	r3, r2
    3f12:	d100      	bne.n	3f16 <process_thread_mqtt_process+0x1ba>
    3f14:	e144      	b.n	41a0 <process_thread_mqtt_process+0x444>
    3f16:	e312      	b.n	453e <process_thread_mqtt_process+0x7e2>
    3f18:	22b9      	movs	r2, #185	; 0xb9
    3f1a:	0052      	lsls	r2, r2, #1
    3f1c:	4293      	cmp	r3, r2
    3f1e:	d100      	bne.n	3f22 <process_thread_mqtt_process+0x1c6>
    3f20:	e178      	b.n	4214 <process_thread_mqtt_process+0x4b8>
    3f22:	d200      	bcs.n	3f26 <process_thread_mqtt_process+0x1ca>
    3f24:	e163      	b.n	41ee <process_thread_mqtt_process+0x492>
    3f26:	2274      	movs	r2, #116	; 0x74
    3f28:	32ff      	adds	r2, #255	; 0xff
    3f2a:	4293      	cmp	r3, r2
    3f2c:	d100      	bne.n	3f30 <process_thread_mqtt_process+0x1d4>
    3f2e:	e184      	b.n	423a <process_thread_mqtt_process+0x4de>
    3f30:	e305      	b.n	453e <process_thread_mqtt_process+0x7e2>
    3f32:	22c3      	movs	r2, #195	; 0xc3
    3f34:	0052      	lsls	r2, r2, #1
    3f36:	4293      	cmp	r3, r2
    3f38:	d100      	bne.n	3f3c <process_thread_mqtt_process+0x1e0>
    3f3a:	e22d      	b.n	4398 <process_thread_mqtt_process+0x63c>
    3f3c:	d81a      	bhi.n	3f74 <process_thread_mqtt_process+0x218>
    3f3e:	3a0c      	subs	r2, #12
    3f40:	4293      	cmp	r3, r2
    3f42:	d100      	bne.n	3f46 <process_thread_mqtt_process+0x1ea>
    3f44:	e1ca      	b.n	42dc <process_thread_mqtt_process+0x580>
    3f46:	d809      	bhi.n	3f5c <process_thread_mqtt_process+0x200>
    3f48:	2278      	movs	r2, #120	; 0x78
    3f4a:	32ff      	adds	r2, #255	; 0xff
    3f4c:	4293      	cmp	r3, r2
    3f4e:	d100      	bne.n	3f52 <process_thread_mqtt_process+0x1f6>
    3f50:	e19d      	b.n	428e <process_thread_mqtt_process+0x532>
    3f52:	3201      	adds	r2, #1
    3f54:	4293      	cmp	r3, r2
    3f56:	d100      	bne.n	3f5a <process_thread_mqtt_process+0x1fe>
    3f58:	e1ac      	b.n	42b4 <process_thread_mqtt_process+0x558>
    3f5a:	e2f0      	b.n	453e <process_thread_mqtt_process+0x7e2>
    3f5c:	22be      	movs	r2, #190	; 0xbe
    3f5e:	0052      	lsls	r2, r2, #1
    3f60:	4293      	cmp	r3, r2
    3f62:	d100      	bne.n	3f66 <process_thread_mqtt_process+0x20a>
    3f64:	e1e2      	b.n	432c <process_thread_mqtt_process+0x5d0>
    3f66:	d200      	bcs.n	3f6a <process_thread_mqtt_process+0x20e>
    3f68:	e1cd      	b.n	4306 <process_thread_mqtt_process+0x5aa>
    3f6a:	3202      	adds	r2, #2
    3f6c:	4293      	cmp	r3, r2
    3f6e:	d100      	bne.n	3f72 <process_thread_mqtt_process+0x216>
    3f70:	e1f0      	b.n	4354 <process_thread_mqtt_process+0x5f8>
    3f72:	e2e4      	b.n	453e <process_thread_mqtt_process+0x7e2>
    3f74:	228e      	movs	r2, #142	; 0x8e
    3f76:	32ff      	adds	r2, #255	; 0xff
    3f78:	4293      	cmp	r3, r2
    3f7a:	d100      	bne.n	3f7e <process_thread_mqtt_process+0x222>
    3f7c:	e24b      	b.n	4416 <process_thread_mqtt_process+0x6ba>
    3f7e:	d809      	bhi.n	3f94 <process_thread_mqtt_process+0x238>
    3f80:	2288      	movs	r2, #136	; 0x88
    3f82:	32ff      	adds	r2, #255	; 0xff
    3f84:	4293      	cmp	r3, r2
    3f86:	d100      	bne.n	3f8a <process_thread_mqtt_process+0x22e>
    3f88:	e219      	b.n	43be <process_thread_mqtt_process+0x662>
    3f8a:	3203      	adds	r2, #3
    3f8c:	4293      	cmp	r3, r2
    3f8e:	d100      	bne.n	3f92 <process_thread_mqtt_process+0x236>
    3f90:	e229      	b.n	43e6 <process_thread_mqtt_process+0x68a>
    3f92:	e2d4      	b.n	453e <process_thread_mqtt_process+0x7e2>
    3f94:	2292      	movs	r2, #146	; 0x92
    3f96:	32ff      	adds	r2, #255	; 0xff
    3f98:	4293      	cmp	r3, r2
    3f9a:	d100      	bne.n	3f9e <process_thread_mqtt_process+0x242>
    3f9c:	e26d      	b.n	447a <process_thread_mqtt_process+0x71e>
    3f9e:	229e      	movs	r2, #158	; 0x9e
    3fa0:	32ff      	adds	r2, #255	; 0xff
    3fa2:	4293      	cmp	r3, r2
    3fa4:	d100      	bne.n	3fa8 <process_thread_mqtt_process+0x24c>
    3fa6:	e28c      	b.n	44c2 <process_thread_mqtt_process+0x766>
    3fa8:	3a0f      	subs	r2, #15
    3faa:	4293      	cmp	r3, r2
    3fac:	d000      	beq.n	3fb0 <process_thread_mqtt_process+0x254>
    3fae:	e2c6      	b.n	453e <process_thread_mqtt_process+0x7e2>
    3fb0:	e244      	b.n	443c <process_thread_mqtt_process+0x6e0>

  DBG("MQTT - Sending CONNECT message...\n\r");
    3fb2:	484d      	ldr	r0, [pc, #308]	; (40e8 <process_thread_mqtt_process+0x38c>)
    3fb4:	4b3e      	ldr	r3, [pc, #248]	; (40b0 <process_thread_mqtt_process+0x354>)
    3fb6:	4798      	blx	r3

  /* Set up FHDR */
  conn->out_packet.fhdr = MQTT_FHDR_MSG_TYPE_CONNECT;
    3fb8:	2210      	movs	r2, #16
    3fba:	239e      	movs	r3, #158	; 0x9e
    3fbc:	009b      	lsls	r3, r3, #2
    3fbe:	54f2      	strb	r2, [r6, r3]
  conn->out_packet.remaining_length = 0;
  conn->out_packet.remaining_length += MQTT_CONNECT_VHDR_FLAGS_SIZE;
  conn->out_packet.remaining_length += MQTT_STRING_LENGTH(&conn->client_id);
    3fc0:	8a33      	ldrh	r3, [r6, #16]
    3fc2:	2200      	movs	r2, #0
    3fc4:	4293      	cmp	r3, r2
    3fc6:	d000      	beq.n	3fca <process_thread_mqtt_process+0x26e>
    3fc8:	1c9a      	adds	r2, r3, #2
    3fca:	320c      	adds	r2, #12
  conn->out_packet.remaining_length += MQTT_STRING_LENGTH(&conn->credentials.username);
    3fcc:	2354      	movs	r3, #84	; 0x54
    3fce:	5af1      	ldrh	r1, [r6, r3]
    3fd0:	2300      	movs	r3, #0
    3fd2:	4299      	cmp	r1, r3
    3fd4:	d000      	beq.n	3fd8 <process_thread_mqtt_process+0x27c>
    3fd6:	1c8b      	adds	r3, r1, #2
    3fd8:	18d2      	adds	r2, r2, r3
  conn->out_packet.remaining_length += MQTT_STRING_LENGTH(&conn->credentials.password);
    3fda:	235c      	movs	r3, #92	; 0x5c
    3fdc:	5af1      	ldrh	r1, [r6, r3]
    3fde:	2300      	movs	r3, #0
    3fe0:	4299      	cmp	r1, r3
    3fe2:	d000      	beq.n	3fe6 <process_thread_mqtt_process+0x28a>
    3fe4:	1c8b      	adds	r3, r1, #2
    3fe6:	18d2      	adds	r2, r2, r3
  conn->out_packet.remaining_length += MQTT_STRING_LENGTH(&conn->will.topic);
    3fe8:	2340      	movs	r3, #64	; 0x40
    3fea:	5af1      	ldrh	r1, [r6, r3]
    3fec:	2300      	movs	r3, #0
    3fee:	4299      	cmp	r1, r3
    3ff0:	d000      	beq.n	3ff4 <process_thread_mqtt_process+0x298>
    3ff2:	1c8b      	adds	r3, r1, #2
    3ff4:	18d2      	adds	r2, r2, r3
  conn->out_packet.remaining_length += MQTT_STRING_LENGTH(&conn->will.message);
    3ff6:	2348      	movs	r3, #72	; 0x48
    3ff8:	5af1      	ldrh	r1, [r6, r3]
    3ffa:	2300      	movs	r3, #0
    3ffc:	4299      	cmp	r1, r3
    3ffe:	d000      	beq.n	4002 <process_thread_mqtt_process+0x2a6>
    4000:	1c8b      	adds	r3, r1, #2
    4002:	18d2      	adds	r2, r2, r3
    4004:	239f      	movs	r3, #159	; 0x9f
    4006:	009b      	lsls	r3, r3, #2
    4008:	50f2      	str	r2, [r6, r3]
  encode_remaining_length(conn->out_packet.remaining_length_enc,
    400a:	3304      	adds	r3, #4
    400c:	18f0      	adds	r0, r6, r3
    400e:	3304      	adds	r3, #4
    4010:	18f1      	adds	r1, r6, r3
    4012:	4b36      	ldr	r3, [pc, #216]	; (40ec <process_thread_mqtt_process+0x390>)
    4014:	4798      	blx	r3
                          &conn->out_packet.remaining_length_enc_bytes,
                          conn->out_packet.remaining_length);
  if(conn->out_packet.remaining_length_enc_bytes > 4) {
    4016:	23a1      	movs	r3, #161	; 0xa1
    4018:	009b      	lsls	r3, r3, #2
    401a:	5cf3      	ldrb	r3, [r6, r3]
    401c:	2b04      	cmp	r3, #4
    401e:	d915      	bls.n	404c <process_thread_mqtt_process+0x2f0>
    call_event(conn, MQTT_EVENT_PROTOCOL_ERROR, NULL);
    4020:	1c30      	adds	r0, r6, #0
    4022:	2181      	movs	r1, #129	; 0x81
    4024:	2200      	movs	r2, #0
    4026:	4b32      	ldr	r3, [pc, #200]	; (40f0 <process_thread_mqtt_process+0x394>)
    4028:	4798      	blx	r3
    PRINTF("MQTT - Error, remaining length > 4 bytes\n\r");
    PT_EXIT(pt);
    402a:	2200      	movs	r2, #0
    402c:	23a7      	movs	r3, #167	; 0xa7
    402e:	009b      	lsls	r3, r3, #2
    4030:	52f2      	strh	r2, [r6, r3]
    4032:	e288      	b.n	4546 <process_thread_mqtt_process+0x7ea>
  }

  /* Write Fixed Header */
  PT_MQTT_WRITE_BYTE(conn, conn->out_packet.fhdr);
    4034:	2268      	movs	r2, #104	; 0x68
    4036:	32ff      	adds	r2, #255	; 0xff
    4038:	23a7      	movs	r3, #167	; 0xa7
    403a:	009b      	lsls	r3, r3, #2
    403c:	52f2      	strh	r2, [r6, r3]
    403e:	239d      	movs	r3, #157	; 0x9d
    4040:	009b      	lsls	r3, r3, #2
    4042:	5cf3      	ldrb	r3, [r6, r3]
    4044:	2b00      	cmp	r3, #0
    4046:	d101      	bne.n	404c <process_thread_mqtt_process+0x2f0>
    4048:	f001 f979 	bl	533e <process_thread_mqtt_process+0x15e2>
    404c:	239e      	movs	r3, #158	; 0x9e
    404e:	009b      	lsls	r3, r3, #2
    4050:	5cf1      	ldrb	r1, [r6, r3]
    4052:	1c30      	adds	r0, r6, #0
    4054:	4b27      	ldr	r3, [pc, #156]	; (40f4 <process_thread_mqtt_process+0x398>)
    4056:	4798      	blx	r3
    4058:	2800      	cmp	r0, #0
    405a:	d1eb      	bne.n	4034 <process_thread_mqtt_process+0x2d8>
    405c:	e00b      	b.n	4076 <process_thread_mqtt_process+0x31a>
  PT_MQTT_WRITE_BYTES(conn,
    405e:	22b5      	movs	r2, #181	; 0xb5
    4060:	0052      	lsls	r2, r2, #1
    4062:	23a7      	movs	r3, #167	; 0xa7
    4064:	009b      	lsls	r3, r3, #2
    4066:	52f2      	strh	r2, [r6, r3]
    4068:	239d      	movs	r3, #157	; 0x9d
    406a:	009b      	lsls	r3, r3, #2
    406c:	5cf3      	ldrb	r3, [r6, r3]
    406e:	2b00      	cmp	r3, #0
    4070:	d101      	bne.n	4076 <process_thread_mqtt_process+0x31a>
    4072:	f001 f964 	bl	533e <process_thread_mqtt_process+0x15e2>
    4076:	23a0      	movs	r3, #160	; 0xa0
    4078:	009b      	lsls	r3, r3, #2
    407a:	18f1      	adds	r1, r6, r3
    407c:	3304      	adds	r3, #4
    407e:	5cf2      	ldrb	r2, [r6, r3]
    4080:	1c30      	adds	r0, r6, #0
    4082:	4b1d      	ldr	r3, [pc, #116]	; (40f8 <process_thread_mqtt_process+0x39c>)
    4084:	4798      	blx	r3
    4086:	2800      	cmp	r0, #0
    4088:	d1e9      	bne.n	405e <process_thread_mqtt_process+0x302>
    408a:	e043      	b.n	4114 <process_thread_mqtt_process+0x3b8>
    408c:	0000047a 	.word	0x0000047a
    4090:	00000455 	.word	0x00000455
    4094:	0000046c 	.word	0x0000046c
    4098:	00000499 	.word	0x00000499
    409c:	0000048c 	.word	0x0000048c
    40a0:	000004a6 	.word	0x000004a6
    40a4:	000004b3 	.word	0x000004b3
    40a8:	2000037b 	.word	0x2000037b
    40ac:	00012450 	.word	0x00012450
    40b0:	00010931 	.word	0x00010931
    40b4:	20000380 	.word	0x20000380
    40b8:	00003921 	.word	0x00003921
    40bc:	20000385 	.word	0x20000385
    40c0:	00012460 	.word	0x00012460
    40c4:	00003319 	.word	0x00003319
    40c8:	20000377 	.word	0x20000377
    40cc:	00000754 	.word	0x00000754
    40d0:	00012488 	.word	0x00012488
    40d4:	20000379 	.word	0x20000379
    40d8:	20001d2c 	.word	0x20001d2c
    40dc:	0000ebf9 	.word	0x0000ebf9
    40e0:	20000375 	.word	0x20000375
    40e4:	20000376 	.word	0x20000376
    40e8:	000124b4 	.word	0x000124b4
    40ec:	000031f1 	.word	0x000031f1
    40f0:	00003265 	.word	0x00003265
    40f4:	00003a99 	.word	0x00003a99
    40f8:	00003ad9 	.word	0x00003ad9
                      conn->out_packet.remaining_length_enc,
                      conn->out_packet.remaining_length_enc_bytes);
  PT_MQTT_WRITE_BYTE(conn, 0);
    40fc:	226c      	movs	r2, #108	; 0x6c
    40fe:	32ff      	adds	r2, #255	; 0xff
    4100:	23a7      	movs	r3, #167	; 0xa7
    4102:	009b      	lsls	r3, r3, #2
    4104:	52f2      	strh	r2, [r6, r3]
    4106:	239d      	movs	r3, #157	; 0x9d
    4108:	009b      	lsls	r3, r3, #2
    410a:	5cf3      	ldrb	r3, [r6, r3]
    410c:	2b00      	cmp	r3, #0
    410e:	d101      	bne.n	4114 <process_thread_mqtt_process+0x3b8>
    4110:	f001 f915 	bl	533e <process_thread_mqtt_process+0x15e2>
    4114:	1c30      	adds	r0, r6, #0
    4116:	2100      	movs	r1, #0
    4118:	4bd0      	ldr	r3, [pc, #832]	; (445c <process_thread_mqtt_process+0x700>)
    411a:	4798      	blx	r3
    411c:	2800      	cmp	r0, #0
    411e:	d1ed      	bne.n	40fc <process_thread_mqtt_process+0x3a0>
    4120:	e00b      	b.n	413a <process_thread_mqtt_process+0x3de>
  PT_MQTT_WRITE_BYTE(conn, 6);
    4122:	22b6      	movs	r2, #182	; 0xb6
    4124:	0052      	lsls	r2, r2, #1
    4126:	23a7      	movs	r3, #167	; 0xa7
    4128:	009b      	lsls	r3, r3, #2
    412a:	52f2      	strh	r2, [r6, r3]
    412c:	239d      	movs	r3, #157	; 0x9d
    412e:	009b      	lsls	r3, r3, #2
    4130:	5cf3      	ldrb	r3, [r6, r3]
    4132:	2b00      	cmp	r3, #0
    4134:	d101      	bne.n	413a <process_thread_mqtt_process+0x3de>
    4136:	f001 f902 	bl	533e <process_thread_mqtt_process+0x15e2>
    413a:	1c30      	adds	r0, r6, #0
    413c:	2106      	movs	r1, #6
    413e:	4bc7      	ldr	r3, [pc, #796]	; (445c <process_thread_mqtt_process+0x700>)
    4140:	4798      	blx	r3
    4142:	2800      	cmp	r0, #0
    4144:	d1ed      	bne.n	4122 <process_thread_mqtt_process+0x3c6>
    4146:	e00b      	b.n	4160 <process_thread_mqtt_process+0x404>
  PT_MQTT_WRITE_BYTES(conn, (uint8_t *)MQTT_PROTOCOL_NAME, 6);
    4148:	226e      	movs	r2, #110	; 0x6e
    414a:	32ff      	adds	r2, #255	; 0xff
    414c:	23a7      	movs	r3, #167	; 0xa7
    414e:	009b      	lsls	r3, r3, #2
    4150:	52f2      	strh	r2, [r6, r3]
    4152:	239d      	movs	r3, #157	; 0x9d
    4154:	009b      	lsls	r3, r3, #2
    4156:	5cf3      	ldrb	r3, [r6, r3]
    4158:	2b00      	cmp	r3, #0
    415a:	d101      	bne.n	4160 <process_thread_mqtt_process+0x404>
    415c:	f001 f8ef 	bl	533e <process_thread_mqtt_process+0x15e2>
    4160:	1c30      	adds	r0, r6, #0
    4162:	49bf      	ldr	r1, [pc, #764]	; (4460 <process_thread_mqtt_process+0x704>)
    4164:	2206      	movs	r2, #6
    4166:	4bbf      	ldr	r3, [pc, #764]	; (4464 <process_thread_mqtt_process+0x708>)
    4168:	4798      	blx	r3
    416a:	2800      	cmp	r0, #0
    416c:	d1ec      	bne.n	4148 <process_thread_mqtt_process+0x3ec>
    416e:	e00b      	b.n	4188 <process_thread_mqtt_process+0x42c>
  PT_MQTT_WRITE_BYTE(conn, MQTT_PROTOCOL_VERSION);
    4170:	22b7      	movs	r2, #183	; 0xb7
    4172:	0052      	lsls	r2, r2, #1
    4174:	23a7      	movs	r3, #167	; 0xa7
    4176:	009b      	lsls	r3, r3, #2
    4178:	52f2      	strh	r2, [r6, r3]
    417a:	239d      	movs	r3, #157	; 0x9d
    417c:	009b      	lsls	r3, r3, #2
    417e:	5cf3      	ldrb	r3, [r6, r3]
    4180:	2b00      	cmp	r3, #0
    4182:	d101      	bne.n	4188 <process_thread_mqtt_process+0x42c>
    4184:	f001 f8db 	bl	533e <process_thread_mqtt_process+0x15e2>
    4188:	1c30      	adds	r0, r6, #0
    418a:	2103      	movs	r1, #3
    418c:	4bb3      	ldr	r3, [pc, #716]	; (445c <process_thread_mqtt_process+0x700>)
    418e:	4798      	blx	r3
    4190:	2800      	cmp	r0, #0
    4192:	d1ed      	bne.n	4170 <process_thread_mqtt_process+0x414>
    4194:	e00b      	b.n	41ae <process_thread_mqtt_process+0x452>
  PT_MQTT_WRITE_BYTE(conn, conn->connect_vhdr_flags);
    4196:	2270      	movs	r2, #112	; 0x70
    4198:	32ff      	adds	r2, #255	; 0xff
    419a:	23a7      	movs	r3, #167	; 0xa7
    419c:	009b      	lsls	r3, r3, #2
    419e:	52f2      	strh	r2, [r6, r3]
    41a0:	239d      	movs	r3, #157	; 0x9d
    41a2:	009b      	lsls	r3, r3, #2
    41a4:	5cf3      	ldrb	r3, [r6, r3]
    41a6:	2b00      	cmp	r3, #0
    41a8:	d101      	bne.n	41ae <process_thread_mqtt_process+0x452>
    41aa:	f001 f8c8 	bl	533e <process_thread_mqtt_process+0x15e2>
    41ae:	7d31      	ldrb	r1, [r6, #20]
    41b0:	1c30      	adds	r0, r6, #0
    41b2:	4baa      	ldr	r3, [pc, #680]	; (445c <process_thread_mqtt_process+0x700>)
    41b4:	4798      	blx	r3
    41b6:	2800      	cmp	r0, #0
    41b8:	d1ed      	bne.n	4196 <process_thread_mqtt_process+0x43a>
    41ba:	e00b      	b.n	41d4 <process_thread_mqtt_process+0x478>
  PT_MQTT_WRITE_BYTE(conn, (conn->keep_alive >> 8));
    41bc:	22b8      	movs	r2, #184	; 0xb8
    41be:	0052      	lsls	r2, r2, #1
    41c0:	23a7      	movs	r3, #167	; 0xa7
    41c2:	009b      	lsls	r3, r3, #2
    41c4:	52f2      	strh	r2, [r6, r3]
    41c6:	239d      	movs	r3, #157	; 0x9d
    41c8:	009b      	lsls	r3, r3, #2
    41ca:	5cf3      	ldrb	r3, [r6, r3]
    41cc:	2b00      	cmp	r3, #0
    41ce:	d101      	bne.n	41d4 <process_thread_mqtt_process+0x478>
    41d0:	f001 f8b5 	bl	533e <process_thread_mqtt_process+0x15e2>
    41d4:	8af1      	ldrh	r1, [r6, #22]
    41d6:	0a09      	lsrs	r1, r1, #8
    41d8:	1c30      	adds	r0, r6, #0
    41da:	4ba0      	ldr	r3, [pc, #640]	; (445c <process_thread_mqtt_process+0x700>)
    41dc:	4798      	blx	r3
    41de:	2800      	cmp	r0, #0
    41e0:	d1ec      	bne.n	41bc <process_thread_mqtt_process+0x460>
    41e2:	e00b      	b.n	41fc <process_thread_mqtt_process+0x4a0>
  PT_MQTT_WRITE_BYTE(conn, (conn->keep_alive & 0x00FF));
    41e4:	2272      	movs	r2, #114	; 0x72
    41e6:	32ff      	adds	r2, #255	; 0xff
    41e8:	23a7      	movs	r3, #167	; 0xa7
    41ea:	009b      	lsls	r3, r3, #2
    41ec:	52f2      	strh	r2, [r6, r3]
    41ee:	239d      	movs	r3, #157	; 0x9d
    41f0:	009b      	lsls	r3, r3, #2
    41f2:	5cf3      	ldrb	r3, [r6, r3]
    41f4:	2b00      	cmp	r3, #0
    41f6:	d101      	bne.n	41fc <process_thread_mqtt_process+0x4a0>
    41f8:	f001 f8a1 	bl	533e <process_thread_mqtt_process+0x15e2>
    41fc:	7db1      	ldrb	r1, [r6, #22]
    41fe:	1c30      	adds	r0, r6, #0
    4200:	4b96      	ldr	r3, [pc, #600]	; (445c <process_thread_mqtt_process+0x700>)
    4202:	4798      	blx	r3
    4204:	2800      	cmp	r0, #0
    4206:	d1ed      	bne.n	41e4 <process_thread_mqtt_process+0x488>
    4208:	e00b      	b.n	4222 <process_thread_mqtt_process+0x4c6>
  PT_MQTT_WRITE_BYTE(conn, conn->client_id.length << 8);
    420a:	22b9      	movs	r2, #185	; 0xb9
    420c:	0052      	lsls	r2, r2, #1
    420e:	23a7      	movs	r3, #167	; 0xa7
    4210:	009b      	lsls	r3, r3, #2
    4212:	52f2      	strh	r2, [r6, r3]
    4214:	239d      	movs	r3, #157	; 0x9d
    4216:	009b      	lsls	r3, r3, #2
    4218:	5cf3      	ldrb	r3, [r6, r3]
    421a:	2b00      	cmp	r3, #0
    421c:	d101      	bne.n	4222 <process_thread_mqtt_process+0x4c6>
    421e:	f001 f88e 	bl	533e <process_thread_mqtt_process+0x15e2>
    4222:	1c30      	adds	r0, r6, #0
    4224:	2100      	movs	r1, #0
    4226:	4b8d      	ldr	r3, [pc, #564]	; (445c <process_thread_mqtt_process+0x700>)
    4228:	4798      	blx	r3
    422a:	2800      	cmp	r0, #0
    422c:	d1ed      	bne.n	420a <process_thread_mqtt_process+0x4ae>
    422e:	e00b      	b.n	4248 <process_thread_mqtt_process+0x4ec>
  PT_MQTT_WRITE_BYTE(conn, conn->client_id.length & 0x00FF);
    4230:	2274      	movs	r2, #116	; 0x74
    4232:	32ff      	adds	r2, #255	; 0xff
    4234:	23a7      	movs	r3, #167	; 0xa7
    4236:	009b      	lsls	r3, r3, #2
    4238:	52f2      	strh	r2, [r6, r3]
    423a:	239d      	movs	r3, #157	; 0x9d
    423c:	009b      	lsls	r3, r3, #2
    423e:	5cf3      	ldrb	r3, [r6, r3]
    4240:	2b00      	cmp	r3, #0
    4242:	d101      	bne.n	4248 <process_thread_mqtt_process+0x4ec>
    4244:	f001 f87b 	bl	533e <process_thread_mqtt_process+0x15e2>
    4248:	7c31      	ldrb	r1, [r6, #16]
    424a:	1c30      	adds	r0, r6, #0
    424c:	4b83      	ldr	r3, [pc, #524]	; (445c <process_thread_mqtt_process+0x700>)
    424e:	4798      	blx	r3
    4250:	2800      	cmp	r0, #0
    4252:	d1ed      	bne.n	4230 <process_thread_mqtt_process+0x4d4>
    4254:	e00b      	b.n	426e <process_thread_mqtt_process+0x512>
  PT_MQTT_WRITE_BYTES(conn, (uint8_t *)conn->client_id.string,
    4256:	2276      	movs	r2, #118	; 0x76
    4258:	32ff      	adds	r2, #255	; 0xff
    425a:	23a7      	movs	r3, #167	; 0xa7
    425c:	009b      	lsls	r3, r3, #2
    425e:	52f2      	strh	r2, [r6, r3]
    4260:	239d      	movs	r3, #157	; 0x9d
    4262:	009b      	lsls	r3, r3, #2
    4264:	5cf3      	ldrb	r3, [r6, r3]
    4266:	2b00      	cmp	r3, #0
    4268:	d101      	bne.n	426e <process_thread_mqtt_process+0x512>
    426a:	f001 f868 	bl	533e <process_thread_mqtt_process+0x15e2>
    426e:	8a32      	ldrh	r2, [r6, #16]
    4270:	1c30      	adds	r0, r6, #0
    4272:	68f1      	ldr	r1, [r6, #12]
    4274:	4b7b      	ldr	r3, [pc, #492]	; (4464 <process_thread_mqtt_process+0x708>)
    4276:	4798      	blx	r3
    4278:	2800      	cmp	r0, #0
    427a:	d1ec      	bne.n	4256 <process_thread_mqtt_process+0x4fa>
                      conn->client_id.length);
  if(conn->connect_vhdr_flags & MQTT_VHDR_WILL_FLAG) {
    427c:	7d33      	ldrb	r3, [r6, #20]
    427e:	075b      	lsls	r3, r3, #29
    4280:	d40c      	bmi.n	429c <process_thread_mqtt_process+0x540>
    4282:	e080      	b.n	4386 <process_thread_mqtt_process+0x62a>
    PT_MQTT_WRITE_BYTE(conn, conn->will.topic.length << 8);
    4284:	2278      	movs	r2, #120	; 0x78
    4286:	32ff      	adds	r2, #255	; 0xff
    4288:	23a7      	movs	r3, #167	; 0xa7
    428a:	009b      	lsls	r3, r3, #2
    428c:	52f2      	strh	r2, [r6, r3]
    428e:	239d      	movs	r3, #157	; 0x9d
    4290:	009b      	lsls	r3, r3, #2
    4292:	5cf3      	ldrb	r3, [r6, r3]
    4294:	2b00      	cmp	r3, #0
    4296:	d101      	bne.n	429c <process_thread_mqtt_process+0x540>
    4298:	f001 f851 	bl	533e <process_thread_mqtt_process+0x15e2>
    429c:	1c30      	adds	r0, r6, #0
    429e:	2100      	movs	r1, #0
    42a0:	4b6e      	ldr	r3, [pc, #440]	; (445c <process_thread_mqtt_process+0x700>)
    42a2:	4798      	blx	r3
    42a4:	2800      	cmp	r0, #0
    42a6:	d1ed      	bne.n	4284 <process_thread_mqtt_process+0x528>
    42a8:	e00b      	b.n	42c2 <process_thread_mqtt_process+0x566>
    PT_MQTT_WRITE_BYTE(conn, conn->will.topic.length & 0x00FF);
    42aa:	22bc      	movs	r2, #188	; 0xbc
    42ac:	0052      	lsls	r2, r2, #1
    42ae:	23a7      	movs	r3, #167	; 0xa7
    42b0:	009b      	lsls	r3, r3, #2
    42b2:	52f2      	strh	r2, [r6, r3]
    42b4:	239d      	movs	r3, #157	; 0x9d
    42b6:	009b      	lsls	r3, r3, #2
    42b8:	5cf3      	ldrb	r3, [r6, r3]
    42ba:	2b00      	cmp	r3, #0
    42bc:	d101      	bne.n	42c2 <process_thread_mqtt_process+0x566>
    42be:	f001 f83e 	bl	533e <process_thread_mqtt_process+0x15e2>
    42c2:	2340      	movs	r3, #64	; 0x40
    42c4:	5cf1      	ldrb	r1, [r6, r3]
    42c6:	1c30      	adds	r0, r6, #0
    42c8:	4b64      	ldr	r3, [pc, #400]	; (445c <process_thread_mqtt_process+0x700>)
    42ca:	4798      	blx	r3
    42cc:	2800      	cmp	r0, #0
    42ce:	d1ec      	bne.n	42aa <process_thread_mqtt_process+0x54e>
    42d0:	e00b      	b.n	42ea <process_thread_mqtt_process+0x58e>
    PT_MQTT_WRITE_BYTES(conn, (uint8_t *)conn->will.topic.string,
    42d2:	22bd      	movs	r2, #189	; 0xbd
    42d4:	0052      	lsls	r2, r2, #1
    42d6:	23a7      	movs	r3, #167	; 0xa7
    42d8:	009b      	lsls	r3, r3, #2
    42da:	52f2      	strh	r2, [r6, r3]
    42dc:	239d      	movs	r3, #157	; 0x9d
    42de:	009b      	lsls	r3, r3, #2
    42e0:	5cf3      	ldrb	r3, [r6, r3]
    42e2:	2b00      	cmp	r3, #0
    42e4:	d101      	bne.n	42ea <process_thread_mqtt_process+0x58e>
    42e6:	f001 f82a 	bl	533e <process_thread_mqtt_process+0x15e2>
    42ea:	2340      	movs	r3, #64	; 0x40
    42ec:	5af2      	ldrh	r2, [r6, r3]
    42ee:	1c30      	adds	r0, r6, #0
    42f0:	6bf1      	ldr	r1, [r6, #60]	; 0x3c
    42f2:	4b5c      	ldr	r3, [pc, #368]	; (4464 <process_thread_mqtt_process+0x708>)
    42f4:	4798      	blx	r3
    42f6:	2800      	cmp	r0, #0
    42f8:	d1eb      	bne.n	42d2 <process_thread_mqtt_process+0x576>
    42fa:	e00b      	b.n	4314 <process_thread_mqtt_process+0x5b8>
                        conn->will.topic.length);
    PT_MQTT_WRITE_BYTE(conn, conn->will.message.length << 8);
    42fc:	227c      	movs	r2, #124	; 0x7c
    42fe:	32ff      	adds	r2, #255	; 0xff
    4300:	23a7      	movs	r3, #167	; 0xa7
    4302:	009b      	lsls	r3, r3, #2
    4304:	52f2      	strh	r2, [r6, r3]
    4306:	239d      	movs	r3, #157	; 0x9d
    4308:	009b      	lsls	r3, r3, #2
    430a:	5cf3      	ldrb	r3, [r6, r3]
    430c:	2b00      	cmp	r3, #0
    430e:	d101      	bne.n	4314 <process_thread_mqtt_process+0x5b8>
    4310:	f001 f815 	bl	533e <process_thread_mqtt_process+0x15e2>
    4314:	1c30      	adds	r0, r6, #0
    4316:	2100      	movs	r1, #0
    4318:	4b50      	ldr	r3, [pc, #320]	; (445c <process_thread_mqtt_process+0x700>)
    431a:	4798      	blx	r3
    431c:	2800      	cmp	r0, #0
    431e:	d1ed      	bne.n	42fc <process_thread_mqtt_process+0x5a0>
    4320:	e00b      	b.n	433a <process_thread_mqtt_process+0x5de>
    PT_MQTT_WRITE_BYTE(conn, conn->will.message.length & 0x00FF);
    4322:	22be      	movs	r2, #190	; 0xbe
    4324:	0052      	lsls	r2, r2, #1
    4326:	23a7      	movs	r3, #167	; 0xa7
    4328:	009b      	lsls	r3, r3, #2
    432a:	52f2      	strh	r2, [r6, r3]
    432c:	239d      	movs	r3, #157	; 0x9d
    432e:	009b      	lsls	r3, r3, #2
    4330:	5cf3      	ldrb	r3, [r6, r3]
    4332:	2b00      	cmp	r3, #0
    4334:	d101      	bne.n	433a <process_thread_mqtt_process+0x5de>
    4336:	f001 f802 	bl	533e <process_thread_mqtt_process+0x15e2>
    433a:	2348      	movs	r3, #72	; 0x48
    433c:	5cf1      	ldrb	r1, [r6, r3]
    433e:	1c30      	adds	r0, r6, #0
    4340:	4b46      	ldr	r3, [pc, #280]	; (445c <process_thread_mqtt_process+0x700>)
    4342:	4798      	blx	r3
    4344:	2800      	cmp	r0, #0
    4346:	d1ec      	bne.n	4322 <process_thread_mqtt_process+0x5c6>
    4348:	e00b      	b.n	4362 <process_thread_mqtt_process+0x606>
    PT_MQTT_WRITE_BYTES(conn, (uint8_t *)conn->will.message.string,
    434a:	22bf      	movs	r2, #191	; 0xbf
    434c:	0052      	lsls	r2, r2, #1
    434e:	23a7      	movs	r3, #167	; 0xa7
    4350:	009b      	lsls	r3, r3, #2
    4352:	52f2      	strh	r2, [r6, r3]
    4354:	239d      	movs	r3, #157	; 0x9d
    4356:	009b      	lsls	r3, r3, #2
    4358:	5cf3      	ldrb	r3, [r6, r3]
    435a:	2b00      	cmp	r3, #0
    435c:	d101      	bne.n	4362 <process_thread_mqtt_process+0x606>
    435e:	f000 ffee 	bl	533e <process_thread_mqtt_process+0x15e2>
    4362:	2348      	movs	r3, #72	; 0x48
    4364:	5af2      	ldrh	r2, [r6, r3]
    4366:	1c30      	adds	r0, r6, #0
    4368:	6c71      	ldr	r1, [r6, #68]	; 0x44
    436a:	4b3e      	ldr	r3, [pc, #248]	; (4464 <process_thread_mqtt_process+0x708>)
    436c:	4798      	blx	r3
    436e:	2800      	cmp	r0, #0
    4370:	d1eb      	bne.n	434a <process_thread_mqtt_process+0x5ee>
                        conn->will.message.length);
    DBG("MQTT - Setting will topic to '%s' %u bytes and message to '%s' %u bytes\n\r",
    4372:	2340      	movs	r3, #64	; 0x40
    4374:	5af2      	ldrh	r2, [r6, r3]
    4376:	3308      	adds	r3, #8
    4378:	5af3      	ldrh	r3, [r6, r3]
    437a:	9300      	str	r3, [sp, #0]
    437c:	483a      	ldr	r0, [pc, #232]	; (4468 <process_thread_mqtt_process+0x70c>)
    437e:	6bf1      	ldr	r1, [r6, #60]	; 0x3c
    4380:	6c73      	ldr	r3, [r6, #68]	; 0x44
    4382:	4f3a      	ldr	r7, [pc, #232]	; (446c <process_thread_mqtt_process+0x710>)
    4384:	47b8      	blx	r7
        conn->will.topic.string,
        conn->will.topic.length,
        conn->will.message.string,
        conn->will.message.length);
  }
  if(conn->connect_vhdr_flags & MQTT_VHDR_USERNAME_FLAG) {
    4386:	7d33      	ldrb	r3, [r6, #20]
    4388:	2b7f      	cmp	r3, #127	; 0x7f
    438a:	d93b      	bls.n	4404 <process_thread_mqtt_process+0x6a8>
    438c:	e00b      	b.n	43a6 <process_thread_mqtt_process+0x64a>
    PT_MQTT_WRITE_BYTE(conn, conn->credentials.username.length << 8);
    438e:	22c3      	movs	r2, #195	; 0xc3
    4390:	0052      	lsls	r2, r2, #1
    4392:	23a7      	movs	r3, #167	; 0xa7
    4394:	009b      	lsls	r3, r3, #2
    4396:	52f2      	strh	r2, [r6, r3]
    4398:	239d      	movs	r3, #157	; 0x9d
    439a:	009b      	lsls	r3, r3, #2
    439c:	5cf3      	ldrb	r3, [r6, r3]
    439e:	2b00      	cmp	r3, #0
    43a0:	d101      	bne.n	43a6 <process_thread_mqtt_process+0x64a>
    43a2:	f000 ffcc 	bl	533e <process_thread_mqtt_process+0x15e2>
    43a6:	1c30      	adds	r0, r6, #0
    43a8:	2100      	movs	r1, #0
    43aa:	4b2c      	ldr	r3, [pc, #176]	; (445c <process_thread_mqtt_process+0x700>)
    43ac:	4798      	blx	r3
    43ae:	2800      	cmp	r0, #0
    43b0:	d1ed      	bne.n	438e <process_thread_mqtt_process+0x632>
    43b2:	e00b      	b.n	43cc <process_thread_mqtt_process+0x670>
    PT_MQTT_WRITE_BYTE(conn, conn->credentials.username.length & 0x00FF);
    43b4:	2288      	movs	r2, #136	; 0x88
    43b6:	32ff      	adds	r2, #255	; 0xff
    43b8:	23a7      	movs	r3, #167	; 0xa7
    43ba:	009b      	lsls	r3, r3, #2
    43bc:	52f2      	strh	r2, [r6, r3]
    43be:	239d      	movs	r3, #157	; 0x9d
    43c0:	009b      	lsls	r3, r3, #2
    43c2:	5cf3      	ldrb	r3, [r6, r3]
    43c4:	2b00      	cmp	r3, #0
    43c6:	d101      	bne.n	43cc <process_thread_mqtt_process+0x670>
    43c8:	f000 ffb9 	bl	533e <process_thread_mqtt_process+0x15e2>
    43cc:	2354      	movs	r3, #84	; 0x54
    43ce:	5cf1      	ldrb	r1, [r6, r3]
    43d0:	1c30      	adds	r0, r6, #0
    43d2:	4b22      	ldr	r3, [pc, #136]	; (445c <process_thread_mqtt_process+0x700>)
    43d4:	4798      	blx	r3
    43d6:	2800      	cmp	r0, #0
    43d8:	d1ec      	bne.n	43b4 <process_thread_mqtt_process+0x658>
    43da:	e00b      	b.n	43f4 <process_thread_mqtt_process+0x698>
    PT_MQTT_WRITE_BYTES(conn,
    43dc:	22c5      	movs	r2, #197	; 0xc5
    43de:	0052      	lsls	r2, r2, #1
    43e0:	23a7      	movs	r3, #167	; 0xa7
    43e2:	009b      	lsls	r3, r3, #2
    43e4:	52f2      	strh	r2, [r6, r3]
    43e6:	239d      	movs	r3, #157	; 0x9d
    43e8:	009b      	lsls	r3, r3, #2
    43ea:	5cf3      	ldrb	r3, [r6, r3]
    43ec:	2b00      	cmp	r3, #0
    43ee:	d101      	bne.n	43f4 <process_thread_mqtt_process+0x698>
    43f0:	f000 ffa5 	bl	533e <process_thread_mqtt_process+0x15e2>
    43f4:	2354      	movs	r3, #84	; 0x54
    43f6:	5af2      	ldrh	r2, [r6, r3]
    43f8:	1c30      	adds	r0, r6, #0
    43fa:	6d31      	ldr	r1, [r6, #80]	; 0x50
    43fc:	4b19      	ldr	r3, [pc, #100]	; (4464 <process_thread_mqtt_process+0x708>)
    43fe:	4798      	blx	r3
    4400:	2800      	cmp	r0, #0
    4402:	d1eb      	bne.n	43dc <process_thread_mqtt_process+0x680>
                        (uint8_t *)conn->credentials.username.string,
                        conn->credentials.username.length);
  }
  if(conn->connect_vhdr_flags & MQTT_VHDR_PASSWORD_FLAG) {
    4404:	7d33      	ldrb	r3, [r6, #20]
    4406:	065b      	lsls	r3, r3, #25
    4408:	d40c      	bmi.n	4424 <process_thread_mqtt_process+0x6c8>
    440a:	e045      	b.n	4498 <process_thread_mqtt_process+0x73c>
    PT_MQTT_WRITE_BYTE(conn, conn->credentials.password.length << 8);
    440c:	228e      	movs	r2, #142	; 0x8e
    440e:	32ff      	adds	r2, #255	; 0xff
    4410:	23a7      	movs	r3, #167	; 0xa7
    4412:	009b      	lsls	r3, r3, #2
    4414:	52f2      	strh	r2, [r6, r3]
    4416:	239d      	movs	r3, #157	; 0x9d
    4418:	009b      	lsls	r3, r3, #2
    441a:	5cf3      	ldrb	r3, [r6, r3]
    441c:	2b00      	cmp	r3, #0
    441e:	d101      	bne.n	4424 <process_thread_mqtt_process+0x6c8>
    4420:	f000 ff8d 	bl	533e <process_thread_mqtt_process+0x15e2>
    4424:	1c30      	adds	r0, r6, #0
    4426:	2100      	movs	r1, #0
    4428:	4b0c      	ldr	r3, [pc, #48]	; (445c <process_thread_mqtt_process+0x700>)
    442a:	4798      	blx	r3
    442c:	2800      	cmp	r0, #0
    442e:	d1ed      	bne.n	440c <process_thread_mqtt_process+0x6b0>
    4430:	e00b      	b.n	444a <process_thread_mqtt_process+0x6ee>
    PT_MQTT_WRITE_BYTE(conn, conn->credentials.password.length & 0x00FF);
    4432:	22c7      	movs	r2, #199	; 0xc7
    4434:	0052      	lsls	r2, r2, #1
    4436:	23a7      	movs	r3, #167	; 0xa7
    4438:	009b      	lsls	r3, r3, #2
    443a:	52f2      	strh	r2, [r6, r3]
    443c:	239d      	movs	r3, #157	; 0x9d
    443e:	009b      	lsls	r3, r3, #2
    4440:	5cf3      	ldrb	r3, [r6, r3]
    4442:	2b00      	cmp	r3, #0
    4444:	d101      	bne.n	444a <process_thread_mqtt_process+0x6ee>
    4446:	f000 ff7a 	bl	533e <process_thread_mqtt_process+0x15e2>
    444a:	235c      	movs	r3, #92	; 0x5c
    444c:	5cf1      	ldrb	r1, [r6, r3]
    444e:	1c30      	adds	r0, r6, #0
    4450:	4b02      	ldr	r3, [pc, #8]	; (445c <process_thread_mqtt_process+0x700>)
    4452:	4798      	blx	r3
    4454:	2800      	cmp	r0, #0
    4456:	d1ec      	bne.n	4432 <process_thread_mqtt_process+0x6d6>
    4458:	e016      	b.n	4488 <process_thread_mqtt_process+0x72c>
    445a:	46c0      	nop			; (mov r8, r8)
    445c:	00003a99 	.word	0x00003a99
    4460:	000124d8 	.word	0x000124d8
    4464:	00003ad9 	.word	0x00003ad9
    4468:	000124e0 	.word	0x000124e0
    446c:	00010931 	.word	0x00010931
    PT_MQTT_WRITE_BYTES(conn,
    4470:	2292      	movs	r2, #146	; 0x92
    4472:	32ff      	adds	r2, #255	; 0xff
    4474:	23a7      	movs	r3, #167	; 0xa7
    4476:	009b      	lsls	r3, r3, #2
    4478:	52f2      	strh	r2, [r6, r3]
    447a:	239d      	movs	r3, #157	; 0x9d
    447c:	009b      	lsls	r3, r3, #2
    447e:	5cf3      	ldrb	r3, [r6, r3]
    4480:	2b00      	cmp	r3, #0
    4482:	d101      	bne.n	4488 <process_thread_mqtt_process+0x72c>
    4484:	f000 ff5b 	bl	533e <process_thread_mqtt_process+0x15e2>
    4488:	235c      	movs	r3, #92	; 0x5c
    448a:	5af2      	ldrh	r2, [r6, r3]
    448c:	1c30      	adds	r0, r6, #0
    448e:	6db1      	ldr	r1, [r6, #88]	; 0x58
    4490:	4bc0      	ldr	r3, [pc, #768]	; (4794 <process_thread_mqtt_process+0xa38>)
    4492:	4798      	blx	r3
    4494:	2800      	cmp	r0, #0
    4496:	d1eb      	bne.n	4470 <process_thread_mqtt_process+0x714>
                        (uint8_t *)conn->credentials.password.string,
                        conn->credentials.password.length);
  }

  /* Send out buffer */
  send_out_buffer(conn);
    4498:	1c30      	adds	r0, r6, #0
    449a:	4bbf      	ldr	r3, [pc, #764]	; (4798 <process_thread_mqtt_process+0xa3c>)
    449c:	4798      	blx	r3
  conn->state = MQTT_CONN_STATE_CONNECTING_TO_BROKER;
    449e:	2207      	movs	r2, #7
    44a0:	2360      	movs	r3, #96	; 0x60
    44a2:	54f2      	strb	r2, [r6, r3]

  timer_set(&conn->t, RESPONSE_WAIT_TIMEOUT);
    44a4:	1d30      	adds	r0, r6, #4
    44a6:	21a0      	movs	r1, #160	; 0xa0
    44a8:	00c9      	lsls	r1, r1, #3
    44aa:	4bbc      	ldr	r3, [pc, #752]	; (479c <process_thread_mqtt_process+0xa40>)
    44ac:	4798      	blx	r3

  /* Wait for CONNACK */
  reset_packet(&conn->in_packet);
    44ae:	2395      	movs	r3, #149	; 0x95
    44b0:	00db      	lsls	r3, r3, #3
    44b2:	18f0      	adds	r0, r6, r3
    44b4:	4bba      	ldr	r3, [pc, #744]	; (47a0 <process_thread_mqtt_process+0xa44>)
    44b6:	4798      	blx	r3
  PT_WAIT_UNTIL(pt, conn->out_packet.qos_state == MQTT_QOS_STATE_GOT_ACK ||
    44b8:	229e      	movs	r2, #158	; 0x9e
    44ba:	32ff      	adds	r2, #255	; 0xff
    44bc:	23a7      	movs	r3, #167	; 0xa7
    44be:	009b      	lsls	r3, r3, #2
    44c0:	52f2      	strh	r2, [r6, r3]
    44c2:	4bb8      	ldr	r3, [pc, #736]	; (47a4 <process_thread_mqtt_process+0xa48>)
    44c4:	5cf3      	ldrb	r3, [r6, r3]
    44c6:	2b01      	cmp	r3, #1
    44c8:	d006      	beq.n	44d8 <process_thread_mqtt_process+0x77c>
    44ca:	1d30      	adds	r0, r6, #4
    44cc:	4bb6      	ldr	r3, [pc, #728]	; (47a8 <process_thread_mqtt_process+0xa4c>)
    44ce:	4798      	blx	r3
    44d0:	2800      	cmp	r0, #0
    44d2:	d101      	bne.n	44d8 <process_thread_mqtt_process+0x77c>
    44d4:	f000 ff33 	bl	533e <process_thread_mqtt_process+0x15e2>
                timer_expired(&conn->t));
  if(timer_expired(&conn->t)) {
    44d8:	1d30      	adds	r0, r6, #4
    44da:	4bb3      	ldr	r3, [pc, #716]	; (47a8 <process_thread_mqtt_process+0xa4c>)
    44dc:	4798      	blx	r3
    44de:	2800      	cmp	r0, #0
    44e0:	d005      	beq.n	44ee <process_thread_mqtt_process+0x792>
    DBG("Timeout waiting for CONNACK\n\r");
    44e2:	48b2      	ldr	r0, [pc, #712]	; (47ac <process_thread_mqtt_process+0xa50>)
    44e4:	4bb2      	ldr	r3, [pc, #712]	; (47b0 <process_thread_mqtt_process+0xa54>)
    44e6:	4798      	blx	r3
    /* We stick to the letter of the spec here: Tear the connection down */
    mqtt_disconnect(conn);
    44e8:	1c30      	adds	r0, r6, #0
    44ea:	4bb2      	ldr	r3, [pc, #712]	; (47b4 <process_thread_mqtt_process+0xa58>)
    44ec:	4798      	blx	r3
  }
  reset_packet(&conn->in_packet);
    44ee:	2395      	movs	r3, #149	; 0x95
    44f0:	00db      	lsls	r3, r3, #3
    44f2:	18f0      	adds	r0, r6, r3
    44f4:	4baa      	ldr	r3, [pc, #680]	; (47a0 <process_thread_mqtt_process+0xa44>)
    44f6:	4798      	blx	r3

  DBG("MQTT - Done sending CONNECT\n\r");
    44f8:	48af      	ldr	r0, [pc, #700]	; (47b8 <process_thread_mqtt_process+0xa5c>)
    44fa:	4fad      	ldr	r7, [pc, #692]	; (47b0 <process_thread_mqtt_process+0xa54>)
    44fc:	47b8      	blx	r7

#if DEBUG_MQTT == 1
  DBG("MQTT - CONNECT message sent: \n\r");
    44fe:	48af      	ldr	r0, [pc, #700]	; (47bc <process_thread_mqtt_process+0xa60>)
    4500:	47b8      	blx	r7
  uint16_t i;
  for(i = 0; i < (conn->out_buffer_ptr - conn->out_buffer); i++) {
    4502:	2374      	movs	r3, #116	; 0x74
    4504:	4698      	mov	r8, r3
    4506:	44b0      	add	r8, r6
    4508:	6f33      	ldr	r3, [r6, #112]	; 0x70
    450a:	4642      	mov	r2, r8
    450c:	1a9b      	subs	r3, r3, r2
    450e:	2b00      	cmp	r3, #0
    4510:	dd12      	ble.n	4538 <process_thread_mqtt_process+0x7dc>
    4512:	2700      	movs	r7, #0
    4514:	1c3b      	adds	r3, r7, #0
    DBG("%02X ", conn->out_buffer[i]);
    4516:	4aaa      	ldr	r2, [pc, #680]	; (47c0 <process_thread_mqtt_process+0xa64>)
    4518:	4692      	mov	sl, r2
    451a:	4aa5      	ldr	r2, [pc, #660]	; (47b0 <process_thread_mqtt_process+0xa54>)
    451c:	4691      	mov	r9, r2
    451e:	18f3      	adds	r3, r6, r3
    4520:	3370      	adds	r3, #112	; 0x70
    4522:	7919      	ldrb	r1, [r3, #4]
    4524:	4650      	mov	r0, sl
    4526:	47c8      	blx	r9
  DBG("MQTT - Done sending CONNECT\n\r");

#if DEBUG_MQTT == 1
  DBG("MQTT - CONNECT message sent: \n\r");
  uint16_t i;
  for(i = 0; i < (conn->out_buffer_ptr - conn->out_buffer); i++) {
    4528:	3701      	adds	r7, #1
    452a:	b2bf      	uxth	r7, r7
    452c:	1c3b      	adds	r3, r7, #0
    452e:	6f32      	ldr	r2, [r6, #112]	; 0x70
    4530:	4641      	mov	r1, r8
    4532:	1a52      	subs	r2, r2, r1
    4534:	4297      	cmp	r7, r2
    4536:	dbf2      	blt.n	451e <process_thread_mqtt_process+0x7c2>
    DBG("%02X ", conn->out_buffer[i]);
  }
  DBG("\n\r");
    4538:	48a2      	ldr	r0, [pc, #648]	; (47c4 <process_thread_mqtt_process+0xa68>)
    453a:	4b9d      	ldr	r3, [pc, #628]	; (47b0 <process_thread_mqtt_process+0xa54>)
    453c:	4798      	blx	r3
#endif

  PT_END(pt);
    453e:	2200      	movs	r2, #0
    4540:	23a7      	movs	r3, #167	; 0xa7
    4542:	009b      	lsls	r3, r3, #2
    4544:	52f2      	strh	r2, [r6, r3]
              conn->state != MQTT_CONN_STATE_ABORT_IMMEDIATE) {
          PT_MQTT_WAIT_SEND();
        }
      }
    }
    if(ev == mqtt_do_disconnect_mqtt_event) {
    4546:	230f      	movs	r3, #15
    4548:	446b      	add	r3, sp
    454a:	781a      	ldrb	r2, [r3, #0]
    454c:	4b9e      	ldr	r3, [pc, #632]	; (47c8 <process_thread_mqtt_process+0xa6c>)
    454e:	781b      	ldrb	r3, [r3, #0]
    4550:	429a      	cmp	r2, r3
    4552:	d000      	beq.n	4556 <process_thread_mqtt_process+0x7fa>
    4554:	e0a9      	b.n	46aa <process_thread_mqtt_process+0x94e>
      conn = data;
    4556:	4e9d      	ldr	r6, [pc, #628]	; (47cc <process_thread_mqtt_process+0xa70>)
    4558:	6035      	str	r5, [r6, #0]
      DBG("MQTT - Got mqtt_do_disconnect_mqtt_event!\n\r");
    455a:	489d      	ldr	r0, [pc, #628]	; (47d0 <process_thread_mqtt_process+0xa74>)
    455c:	4b94      	ldr	r3, [pc, #592]	; (47b0 <process_thread_mqtt_process+0xa54>)
    455e:	4798      	blx	r3

      /* Send MQTT Disconnect if we are connected */
      if(conn->state == MQTT_CONN_STATE_SENDING_MQTT_DISCONNECT) {
    4560:	6832      	ldr	r2, [r6, #0]
    4562:	2360      	movs	r3, #96	; 0x60
    4564:	5cd3      	ldrb	r3, [r2, r3]
    4566:	2b09      	cmp	r3, #9
    4568:	d000      	beq.n	456c <process_thread_mqtt_process+0x810>
    456a:	e09e      	b.n	46aa <process_thread_mqtt_process+0x94e>
        if(conn->out_buffer_sent == 1) {
    456c:	239d      	movs	r3, #157	; 0x9d
    456e:	009b      	lsls	r3, r3, #2
    4570:	5cd3      	ldrb	r3, [r2, r3]
    4572:	2b01      	cmp	r3, #1
    4574:	d000      	beq.n	4578 <process_thread_mqtt_process+0x81c>
    4576:	e093      	b.n	46a0 <process_thread_mqtt_process+0x944>
          PT_INIT(&conn->out_proto_thread);
    4578:	2100      	movs	r1, #0
    457a:	23a7      	movs	r3, #167	; 0xa7
    457c:	009b      	lsls	r3, r3, #2
    457e:	52d1      	strh	r1, [r2, r3]
          while(disconnect_pt(&conn->out_proto_thread, conn) < PT_EXITED &&
    4580:	e02b      	b.n	45da <process_thread_mqtt_process+0x87e>
                conn->state != MQTT_CONN_STATE_ABORT_IMMEDIATE) {
            PT_MQTT_WAIT_SEND();
    4582:	4b94      	ldr	r3, [pc, #592]	; (47d4 <process_thread_mqtt_process+0xa78>)
    4584:	7819      	ldrb	r1, [r3, #0]
    4586:	4b94      	ldr	r3, [pc, #592]	; (47d8 <process_thread_mqtt_process+0xa7c>)
    4588:	6818      	ldr	r0, [r3, #0]
    458a:	2200      	movs	r2, #0
    458c:	4b93      	ldr	r3, [pc, #588]	; (47dc <process_thread_mqtt_process+0xa80>)
    458e:	4798      	blx	r3
    4590:	4b93      	ldr	r3, [pc, #588]	; (47e0 <process_thread_mqtt_process+0xa84>)
    4592:	8023      	strh	r3, [r4, #0]
    4594:	2001      	movs	r0, #1
    4596:	f000 ff0a 	bl	53ae <process_thread_mqtt_process+0x1652>
    459a:	230f      	movs	r3, #15
    459c:	446b      	add	r3, sp
    459e:	7819      	ldrb	r1, [r3, #0]
    45a0:	4b90      	ldr	r3, [pc, #576]	; (47e4 <process_thread_mqtt_process+0xa88>)
    45a2:	781b      	ldrb	r3, [r3, #0]
    45a4:	428b      	cmp	r3, r1
    45a6:	d10b      	bne.n	45c0 <process_thread_mqtt_process+0x864>
    45a8:	4b88      	ldr	r3, [pc, #544]	; (47cc <process_thread_mqtt_process+0xa70>)
    45aa:	681b      	ldr	r3, [r3, #0]
    45ac:	210a      	movs	r1, #10
    45ae:	2260      	movs	r2, #96	; 0x60
    45b0:	5499      	strb	r1, [r3, r2]
    45b2:	2100      	movs	r1, #0
    45b4:	22a7      	movs	r2, #167	; 0xa7
    45b6:	0092      	lsls	r2, r2, #2
    45b8:	5299      	strh	r1, [r3, r2]
    45ba:	2002      	movs	r0, #2
    45bc:	f000 fef7 	bl	53ae <process_thread_mqtt_process+0x1652>
    45c0:	4b89      	ldr	r3, [pc, #548]	; (47e8 <process_thread_mqtt_process+0xa8c>)
    45c2:	781b      	ldrb	r3, [r3, #0]
    45c4:	428b      	cmp	r3, r1
    45c6:	d808      	bhi.n	45da <process_thread_mqtt_process+0x87e>
    45c8:	4b88      	ldr	r3, [pc, #544]	; (47ec <process_thread_mqtt_process+0xa90>)
    45ca:	781b      	ldrb	r3, [r3, #0]
    45cc:	428b      	cmp	r3, r1
    45ce:	d304      	bcc.n	45da <process_thread_mqtt_process+0x87e>
    45d0:	4b81      	ldr	r3, [pc, #516]	; (47d8 <process_thread_mqtt_process+0xa7c>)
    45d2:	6818      	ldr	r0, [r3, #0]
    45d4:	1c2a      	adds	r2, r5, #0
    45d6:	4b81      	ldr	r3, [pc, #516]	; (47dc <process_thread_mqtt_process+0xa80>)
    45d8:	4798      	blx	r3

      /* Send MQTT Disconnect if we are connected */
      if(conn->state == MQTT_CONN_STATE_SENDING_MQTT_DISCONNECT) {
        if(conn->out_buffer_sent == 1) {
          PT_INIT(&conn->out_proto_thread);
          while(disconnect_pt(&conn->out_proto_thread, conn) < PT_EXITED &&
    45da:	4b7c      	ldr	r3, [pc, #496]	; (47cc <process_thread_mqtt_process+0xa70>)
    45dc:	681e      	ldr	r6, [r3, #0]
}
/*---------------------------------------------------------------------------*/
static
PT_THREAD(disconnect_pt(struct pt *pt, struct mqtt_connection *conn))
{
  PT_BEGIN(pt);
    45de:	23a7      	movs	r3, #167	; 0xa7
    45e0:	009b      	lsls	r3, r3, #2
    45e2:	5af3      	ldrh	r3, [r6, r3]
    45e4:	22dc      	movs	r2, #220	; 0xdc
    45e6:	0052      	lsls	r2, r2, #1
    45e8:	4293      	cmp	r3, r2
    45ea:	d011      	beq.n	4610 <process_thread_mqtt_process+0x8b4>
    45ec:	d802      	bhi.n	45f4 <process_thread_mqtt_process+0x898>
    45ee:	2b00      	cmp	r3, #0
    45f0:	d015      	beq.n	461e <process_thread_mqtt_process+0x8c2>
    45f2:	e046      	b.n	4682 <process_thread_mqtt_process+0x926>
    45f4:	22ba      	movs	r2, #186	; 0xba
    45f6:	32ff      	adds	r2, #255	; 0xff
    45f8:	4293      	cmp	r3, r2
    45fa:	d01c      	beq.n	4636 <process_thread_mqtt_process+0x8da>
    45fc:	22c4      	movs	r2, #196	; 0xc4
    45fe:	32ff      	adds	r2, #255	; 0xff
    4600:	4293      	cmp	r3, r2
    4602:	d032      	beq.n	466a <process_thread_mqtt_process+0x90e>
    4604:	e03d      	b.n	4682 <process_thread_mqtt_process+0x926>

  PT_MQTT_WRITE_BYTE(conn, MQTT_FHDR_MSG_TYPE_DISCONNECT);
    4606:	22dc      	movs	r2, #220	; 0xdc
    4608:	0052      	lsls	r2, r2, #1
    460a:	23a7      	movs	r3, #167	; 0xa7
    460c:	009b      	lsls	r3, r3, #2
    460e:	52f2      	strh	r2, [r6, r3]
    4610:	239d      	movs	r3, #157	; 0x9d
    4612:	009b      	lsls	r3, r3, #2
    4614:	5cf3      	ldrb	r3, [r6, r3]
    4616:	2b00      	cmp	r3, #0
    4618:	d101      	bne.n	461e <process_thread_mqtt_process+0x8c2>
    461a:	f000 fe9a 	bl	5352 <process_thread_mqtt_process+0x15f6>
    461e:	1c30      	adds	r0, r6, #0
    4620:	21e0      	movs	r1, #224	; 0xe0
    4622:	4b73      	ldr	r3, [pc, #460]	; (47f0 <process_thread_mqtt_process+0xa94>)
    4624:	4798      	blx	r3
    4626:	2800      	cmp	r0, #0
    4628:	d1ed      	bne.n	4606 <process_thread_mqtt_process+0x8aa>
    462a:	e00b      	b.n	4644 <process_thread_mqtt_process+0x8e8>
  PT_MQTT_WRITE_BYTE(conn, 0);
    462c:	22ba      	movs	r2, #186	; 0xba
    462e:	32ff      	adds	r2, #255	; 0xff
    4630:	23a7      	movs	r3, #167	; 0xa7
    4632:	009b      	lsls	r3, r3, #2
    4634:	52f2      	strh	r2, [r6, r3]
    4636:	239d      	movs	r3, #157	; 0x9d
    4638:	009b      	lsls	r3, r3, #2
    463a:	5cf3      	ldrb	r3, [r6, r3]
    463c:	2b00      	cmp	r3, #0
    463e:	d101      	bne.n	4644 <process_thread_mqtt_process+0x8e8>
    4640:	f000 fe87 	bl	5352 <process_thread_mqtt_process+0x15f6>
    4644:	1c30      	adds	r0, r6, #0
    4646:	2100      	movs	r1, #0
    4648:	4b69      	ldr	r3, [pc, #420]	; (47f0 <process_thread_mqtt_process+0xa94>)
    464a:	4798      	blx	r3
    464c:	2800      	cmp	r0, #0
    464e:	d1ed      	bne.n	462c <process_thread_mqtt_process+0x8d0>

  send_out_buffer(conn);
    4650:	1c30      	adds	r0, r6, #0
    4652:	4b51      	ldr	r3, [pc, #324]	; (4798 <process_thread_mqtt_process+0xa3c>)
    4654:	4798      	blx	r3
  /*
   * Wait a couple of seconds for a TCP ACK. We don't really need the ACK,
   * we do want the TCP/IP stack to actually send this disconnect before we
   * tear down the session.
   */
  timer_set(&conn->t, (CLOCK_SECOND * 2));
    4656:	1d30      	adds	r0, r6, #4
    4658:	2180      	movs	r1, #128	; 0x80
    465a:	0049      	lsls	r1, r1, #1
    465c:	4b4f      	ldr	r3, [pc, #316]	; (479c <process_thread_mqtt_process+0xa40>)
    465e:	4798      	blx	r3
  PT_WAIT_UNTIL(pt, conn->out_buffer_sent || timer_expired(&conn->t));
    4660:	22c4      	movs	r2, #196	; 0xc4
    4662:	32ff      	adds	r2, #255	; 0xff
    4664:	23a7      	movs	r3, #167	; 0xa7
    4666:	009b      	lsls	r3, r3, #2
    4668:	52f2      	strh	r2, [r6, r3]
    466a:	239d      	movs	r3, #157	; 0x9d
    466c:	009b      	lsls	r3, r3, #2
    466e:	5cf3      	ldrb	r3, [r6, r3]
    4670:	2b00      	cmp	r3, #0
    4672:	d106      	bne.n	4682 <process_thread_mqtt_process+0x926>
    4674:	1d30      	adds	r0, r6, #4
    4676:	4b4c      	ldr	r3, [pc, #304]	; (47a8 <process_thread_mqtt_process+0xa4c>)
    4678:	4798      	blx	r3
    467a:	2800      	cmp	r0, #0
    467c:	d101      	bne.n	4682 <process_thread_mqtt_process+0x926>
    467e:	f000 fe68 	bl	5352 <process_thread_mqtt_process+0x15f6>

  PT_END(pt);
    4682:	2200      	movs	r2, #0
    4684:	23a7      	movs	r3, #167	; 0xa7
    4686:	009b      	lsls	r3, r3, #2
    4688:	52f2      	strh	r2, [r6, r3]
          PT_INIT(&conn->out_proto_thread);
          while(disconnect_pt(&conn->out_proto_thread, conn) < PT_EXITED &&
                conn->state != MQTT_CONN_STATE_ABORT_IMMEDIATE) {
            PT_MQTT_WAIT_SEND();
          }
          abort_connection(conn);
    468a:	4e50      	ldr	r6, [pc, #320]	; (47cc <process_thread_mqtt_process+0xa70>)
    468c:	6830      	ldr	r0, [r6, #0]
    468e:	4b59      	ldr	r3, [pc, #356]	; (47f4 <process_thread_mqtt_process+0xa98>)
    4690:	4798      	blx	r3
          call_event(conn, MQTT_EVENT_DISCONNECTED, &ev);
    4692:	6830      	ldr	r0, [r6, #0]
    4694:	2101      	movs	r1, #1
    4696:	220f      	movs	r2, #15
    4698:	446a      	add	r2, sp
    469a:	4b57      	ldr	r3, [pc, #348]	; (47f8 <process_thread_mqtt_process+0xa9c>)
    469c:	4798      	blx	r3
    469e:	e004      	b.n	46aa <process_thread_mqtt_process+0x94e>
        } else {
          process_post(&mqtt_process, mqtt_do_disconnect_mqtt_event, conn);
    46a0:	4b49      	ldr	r3, [pc, #292]	; (47c8 <process_thread_mqtt_process+0xa6c>)
    46a2:	7819      	ldrb	r1, [r3, #0]
    46a4:	4855      	ldr	r0, [pc, #340]	; (47fc <process_thread_mqtt_process+0xaa0>)
    46a6:	4b4d      	ldr	r3, [pc, #308]	; (47dc <process_thread_mqtt_process+0xa80>)
    46a8:	4798      	blx	r3
        }
      }
    }
    if(ev == mqtt_do_pingreq_event) {
    46aa:	230f      	movs	r3, #15
    46ac:	446b      	add	r3, sp
    46ae:	781a      	ldrb	r2, [r3, #0]
    46b0:	4b53      	ldr	r3, [pc, #332]	; (4800 <process_thread_mqtt_process+0xaa4>)
    46b2:	781b      	ldrb	r3, [r3, #0]
    46b4:	429a      	cmp	r2, r3
    46b6:	d000      	beq.n	46ba <process_thread_mqtt_process+0x95e>
    46b8:	e0ed      	b.n	4896 <process_thread_mqtt_process+0xb3a>
      conn = data;
    46ba:	4e44      	ldr	r6, [pc, #272]	; (47cc <process_thread_mqtt_process+0xa70>)
    46bc:	6035      	str	r5, [r6, #0]
      DBG("MQTT - Got mqtt_do_pingreq_event!\n\r");
    46be:	4851      	ldr	r0, [pc, #324]	; (4804 <process_thread_mqtt_process+0xaa8>)
    46c0:	4b3b      	ldr	r3, [pc, #236]	; (47b0 <process_thread_mqtt_process+0xa54>)
    46c2:	4798      	blx	r3

      if(conn->out_buffer_sent == 1 &&
    46c4:	6833      	ldr	r3, [r6, #0]
    46c6:	229d      	movs	r2, #157	; 0x9d
    46c8:	0092      	lsls	r2, r2, #2
    46ca:	5c9a      	ldrb	r2, [r3, r2]
    46cc:	2a01      	cmp	r2, #1
    46ce:	d000      	beq.n	46d2 <process_thread_mqtt_process+0x976>
    46d0:	e0e1      	b.n	4896 <process_thread_mqtt_process+0xb3a>
         conn->state == MQTT_CONN_STATE_CONNECTED_TO_BROKER) {
    46d2:	325f      	adds	r2, #95	; 0x5f
    }
    if(ev == mqtt_do_pingreq_event) {
      conn = data;
      DBG("MQTT - Got mqtt_do_pingreq_event!\n\r");

      if(conn->out_buffer_sent == 1 &&
    46d4:	5c9a      	ldrb	r2, [r3, r2]
    46d6:	2a08      	cmp	r2, #8
    46d8:	d000      	beq.n	46dc <process_thread_mqtt_process+0x980>
    46da:	e0dc      	b.n	4896 <process_thread_mqtt_process+0xb3a>
         conn->state == MQTT_CONN_STATE_CONNECTED_TO_BROKER) {
        PT_INIT(&conn->out_proto_thread);
    46dc:	2100      	movs	r1, #0
    46de:	22a7      	movs	r2, #167	; 0xa7
    46e0:	0092      	lsls	r2, r2, #2
    46e2:	5299      	strh	r1, [r3, r2]
        while(pingreq_pt(&conn->out_proto_thread, conn) < PT_EXITED &&
    46e4:	e02b      	b.n	473e <process_thread_mqtt_process+0x9e2>
              conn->state == MQTT_CONN_STATE_CONNECTED_TO_BROKER) {
          PT_MQTT_WAIT_SEND();
    46e6:	4b3b      	ldr	r3, [pc, #236]	; (47d4 <process_thread_mqtt_process+0xa78>)
    46e8:	7819      	ldrb	r1, [r3, #0]
    46ea:	4b3b      	ldr	r3, [pc, #236]	; (47d8 <process_thread_mqtt_process+0xa7c>)
    46ec:	6818      	ldr	r0, [r3, #0]
    46ee:	2200      	movs	r2, #0
    46f0:	4b3a      	ldr	r3, [pc, #232]	; (47dc <process_thread_mqtt_process+0xa80>)
    46f2:	4798      	blx	r3
    46f4:	4b44      	ldr	r3, [pc, #272]	; (4808 <process_thread_mqtt_process+0xaac>)
    46f6:	8023      	strh	r3, [r4, #0]
    46f8:	2001      	movs	r0, #1
    46fa:	f000 fe58 	bl	53ae <process_thread_mqtt_process+0x1652>
    46fe:	230f      	movs	r3, #15
    4700:	446b      	add	r3, sp
    4702:	7819      	ldrb	r1, [r3, #0]
    4704:	4b37      	ldr	r3, [pc, #220]	; (47e4 <process_thread_mqtt_process+0xa88>)
    4706:	781b      	ldrb	r3, [r3, #0]
    4708:	428b      	cmp	r3, r1
    470a:	d10b      	bne.n	4724 <process_thread_mqtt_process+0x9c8>
    470c:	4b2f      	ldr	r3, [pc, #188]	; (47cc <process_thread_mqtt_process+0xa70>)
    470e:	681b      	ldr	r3, [r3, #0]
    4710:	210a      	movs	r1, #10
    4712:	2260      	movs	r2, #96	; 0x60
    4714:	5499      	strb	r1, [r3, r2]
    4716:	2100      	movs	r1, #0
    4718:	22a7      	movs	r2, #167	; 0xa7
    471a:	0092      	lsls	r2, r2, #2
    471c:	5299      	strh	r1, [r3, r2]
    471e:	2002      	movs	r0, #2
    4720:	f000 fe45 	bl	53ae <process_thread_mqtt_process+0x1652>
    4724:	4b30      	ldr	r3, [pc, #192]	; (47e8 <process_thread_mqtt_process+0xa8c>)
    4726:	781b      	ldrb	r3, [r3, #0]
    4728:	428b      	cmp	r3, r1
    472a:	d808      	bhi.n	473e <process_thread_mqtt_process+0x9e2>
    472c:	4b2f      	ldr	r3, [pc, #188]	; (47ec <process_thread_mqtt_process+0xa90>)
    472e:	781b      	ldrb	r3, [r3, #0]
    4730:	428b      	cmp	r3, r1
    4732:	d304      	bcc.n	473e <process_thread_mqtt_process+0x9e2>
    4734:	4b28      	ldr	r3, [pc, #160]	; (47d8 <process_thread_mqtt_process+0xa7c>)
    4736:	6818      	ldr	r0, [r3, #0]
    4738:	1c2a      	adds	r2, r5, #0
    473a:	4b28      	ldr	r3, [pc, #160]	; (47dc <process_thread_mqtt_process+0xa80>)
    473c:	4798      	blx	r3
      DBG("MQTT - Got mqtt_do_pingreq_event!\n\r");

      if(conn->out_buffer_sent == 1 &&
         conn->state == MQTT_CONN_STATE_CONNECTED_TO_BROKER) {
        PT_INIT(&conn->out_proto_thread);
        while(pingreq_pt(&conn->out_proto_thread, conn) < PT_EXITED &&
    473e:	4b23      	ldr	r3, [pc, #140]	; (47cc <process_thread_mqtt_process+0xa70>)
    4740:	681e      	ldr	r6, [r3, #0]
}
/*---------------------------------------------------------------------------*/
static
PT_THREAD(pingreq_pt(struct pt *pt, struct mqtt_connection *conn))
{
  PT_BEGIN(pt);
    4742:	23a7      	movs	r3, #167	; 0xa7
    4744:	009b      	lsls	r3, r3, #2
    4746:	5af3      	ldrh	r3, [r6, r3]
    4748:	4a30      	ldr	r2, [pc, #192]	; (480c <process_thread_mqtt_process+0xab0>)
    474a:	4293      	cmp	r3, r2
    474c:	d013      	beq.n	4776 <process_thread_mqtt_process+0xa1a>
    474e:	d802      	bhi.n	4756 <process_thread_mqtt_process+0x9fa>
    4750:	2b00      	cmp	r3, #0
    4752:	d008      	beq.n	4766 <process_thread_mqtt_process+0xa0a>
    4754:	e09b      	b.n	488e <process_thread_mqtt_process+0xb32>
    4756:	4a2e      	ldr	r2, [pc, #184]	; (4810 <process_thread_mqtt_process+0xab4>)
    4758:	4293      	cmp	r3, r2
    475a:	d063      	beq.n	4824 <process_thread_mqtt_process+0xac8>
    475c:	4a2d      	ldr	r2, [pc, #180]	; (4814 <process_thread_mqtt_process+0xab8>)
    475e:	4293      	cmp	r3, r2
    4760:	d100      	bne.n	4764 <process_thread_mqtt_process+0xa08>
    4762:	e080      	b.n	4866 <process_thread_mqtt_process+0xb0a>
    4764:	e093      	b.n	488e <process_thread_mqtt_process+0xb32>

  DBG("MQTT - Sending PINGREQ\n\r");
    4766:	482c      	ldr	r0, [pc, #176]	; (4818 <process_thread_mqtt_process+0xabc>)
    4768:	4b11      	ldr	r3, [pc, #68]	; (47b0 <process_thread_mqtt_process+0xa54>)
    476a:	4798      	blx	r3
    476c:	e00a      	b.n	4784 <process_thread_mqtt_process+0xa28>

  /* Write Fixed Header */
  PT_MQTT_WRITE_BYTE(conn, MQTT_FHDR_MSG_TYPE_PINGREQ);
    476e:	4a27      	ldr	r2, [pc, #156]	; (480c <process_thread_mqtt_process+0xab0>)
    4770:	23a7      	movs	r3, #167	; 0xa7
    4772:	009b      	lsls	r3, r3, #2
    4774:	52f2      	strh	r2, [r6, r3]
    4776:	239d      	movs	r3, #157	; 0x9d
    4778:	009b      	lsls	r3, r3, #2
    477a:	5cf3      	ldrb	r3, [r6, r3]
    477c:	2b00      	cmp	r3, #0
    477e:	d101      	bne.n	4784 <process_thread_mqtt_process+0xa28>
    4780:	f000 fdf1 	bl	5366 <process_thread_mqtt_process+0x160a>
    4784:	1c30      	adds	r0, r6, #0
    4786:	21c0      	movs	r1, #192	; 0xc0
    4788:	4b19      	ldr	r3, [pc, #100]	; (47f0 <process_thread_mqtt_process+0xa94>)
    478a:	4798      	blx	r3
    478c:	2800      	cmp	r0, #0
    478e:	d1ee      	bne.n	476e <process_thread_mqtt_process+0xa12>
    4790:	e04f      	b.n	4832 <process_thread_mqtt_process+0xad6>
    4792:	46c0      	nop			; (mov r8, r8)
    4794:	00003ad9 	.word	0x00003ad9
    4798:	00003a51 	.word	0x00003a51
    479c:	0000ed5d 	.word	0x0000ed5d
    47a0:	00003285 	.word	0x00003285
    47a4:	00000299 	.word	0x00000299
    47a8:	0000ed8d 	.word	0x0000ed8d
    47ac:	0001252c 	.word	0x0001252c
    47b0:	00010931 	.word	0x00010931
    47b4:	00003d31 	.word	0x00003d31
    47b8:	0001254c 	.word	0x0001254c
    47bc:	0001256c 	.word	0x0001256c
    47c0:	000120d8 	.word	0x000120d8
    47c4:	00012df4 	.word	0x00012df4
    47c8:	2000037a 	.word	0x2000037a
    47cc:	20000380 	.word	0x20000380
    47d0:	0001258c 	.word	0x0001258c
    47d4:	20000379 	.word	0x20000379
    47d8:	20001d2c 	.word	0x20001d2c
    47dc:	0000ebf9 	.word	0x0000ebf9
    47e0:	0000047a 	.word	0x0000047a
    47e4:	2000037b 	.word	0x2000037b
    47e8:	20000375 	.word	0x20000375
    47ec:	20000376 	.word	0x20000376
    47f0:	00003a99 	.word	0x00003a99
    47f4:	00003921 	.word	0x00003921
    47f8:	00003265 	.word	0x00003265
    47fc:	2000000c 	.word	0x2000000c
    4800:	20000374 	.word	0x20000374
    4804:	000125b8 	.word	0x000125b8
    4808:	0000048c 	.word	0x0000048c
    480c:	000002a5 	.word	0x000002a5
    4810:	000002a6 	.word	0x000002a6
    4814:	000002b1 	.word	0x000002b1
    4818:	000125dc 	.word	0x000125dc
  PT_MQTT_WRITE_BYTE(conn, 0);
    481c:	4abf      	ldr	r2, [pc, #764]	; (4b1c <process_thread_mqtt_process+0xdc0>)
    481e:	23a7      	movs	r3, #167	; 0xa7
    4820:	009b      	lsls	r3, r3, #2
    4822:	52f2      	strh	r2, [r6, r3]
    4824:	239d      	movs	r3, #157	; 0x9d
    4826:	009b      	lsls	r3, r3, #2
    4828:	5cf3      	ldrb	r3, [r6, r3]
    482a:	2b00      	cmp	r3, #0
    482c:	d101      	bne.n	4832 <process_thread_mqtt_process+0xad6>
    482e:	f000 fd9a 	bl	5366 <process_thread_mqtt_process+0x160a>
    4832:	1c30      	adds	r0, r6, #0
    4834:	2100      	movs	r1, #0
    4836:	4bba      	ldr	r3, [pc, #744]	; (4b20 <process_thread_mqtt_process+0xdc4>)
    4838:	4798      	blx	r3
    483a:	2800      	cmp	r0, #0
    483c:	d1ee      	bne.n	481c <process_thread_mqtt_process+0xac0>

  send_out_buffer(conn);
    483e:	1c30      	adds	r0, r6, #0
    4840:	4bb8      	ldr	r3, [pc, #736]	; (4b24 <process_thread_mqtt_process+0xdc8>)
    4842:	4798      	blx	r3

  /* Start timeout for reply. */
  conn->waiting_for_pingresp = 1;
    4844:	2201      	movs	r2, #1
    4846:	2338      	movs	r3, #56	; 0x38
    4848:	54f2      	strb	r2, [r6, r3]

  /* Wait for PINGRESP or timeout */
  reset_packet(&conn->in_packet);
    484a:	2395      	movs	r3, #149	; 0x95
    484c:	00db      	lsls	r3, r3, #3
    484e:	18f0      	adds	r0, r6, r3
    4850:	4bb5      	ldr	r3, [pc, #724]	; (4b28 <process_thread_mqtt_process+0xdcc>)
    4852:	4798      	blx	r3
  timer_set(&conn->t, RESPONSE_WAIT_TIMEOUT);
    4854:	1d30      	adds	r0, r6, #4
    4856:	21a0      	movs	r1, #160	; 0xa0
    4858:	00c9      	lsls	r1, r1, #3
    485a:	4bb4      	ldr	r3, [pc, #720]	; (4b2c <process_thread_mqtt_process+0xdd0>)
    485c:	4798      	blx	r3

  PT_WAIT_UNTIL(pt, conn->in_packet.packet_received || timer_expired(&conn->t));
    485e:	4ab4      	ldr	r2, [pc, #720]	; (4b30 <process_thread_mqtt_process+0xdd4>)
    4860:	23a7      	movs	r3, #167	; 0xa7
    4862:	009b      	lsls	r3, r3, #2
    4864:	52f2      	strh	r2, [r6, r3]
    4866:	2396      	movs	r3, #150	; 0x96
    4868:	00db      	lsls	r3, r3, #3
    486a:	5cf3      	ldrb	r3, [r6, r3]
    486c:	2b00      	cmp	r3, #0
    486e:	d106      	bne.n	487e <process_thread_mqtt_process+0xb22>
    4870:	1d30      	adds	r0, r6, #4
    4872:	4bb0      	ldr	r3, [pc, #704]	; (4b34 <process_thread_mqtt_process+0xdd8>)
    4874:	4798      	blx	r3
    4876:	2800      	cmp	r0, #0
    4878:	d101      	bne.n	487e <process_thread_mqtt_process+0xb22>
    487a:	f000 fd74 	bl	5366 <process_thread_mqtt_process+0x160a>

  reset_packet(&conn->in_packet);
    487e:	2395      	movs	r3, #149	; 0x95
    4880:	00db      	lsls	r3, r3, #3
    4882:	18f0      	adds	r0, r6, r3
    4884:	4ba8      	ldr	r3, [pc, #672]	; (4b28 <process_thread_mqtt_process+0xdcc>)
    4886:	4798      	blx	r3

  conn->waiting_for_pingresp = 0;
    4888:	2200      	movs	r2, #0
    488a:	2338      	movs	r3, #56	; 0x38
    488c:	54f2      	strb	r2, [r6, r3]

  PT_END(pt);
    488e:	2200      	movs	r2, #0
    4890:	23a7      	movs	r3, #167	; 0xa7
    4892:	009b      	lsls	r3, r3, #2
    4894:	52f2      	strh	r2, [r6, r3]
              conn->state == MQTT_CONN_STATE_CONNECTED_TO_BROKER) {
          PT_MQTT_WAIT_SEND();
        }
      }
    }
    if(ev == mqtt_do_subscribe_event) {
    4896:	230f      	movs	r3, #15
    4898:	446b      	add	r3, sp
    489a:	781a      	ldrb	r2, [r3, #0]
    489c:	4ba6      	ldr	r3, [pc, #664]	; (4b38 <process_thread_mqtt_process+0xddc>)
    489e:	781b      	ldrb	r3, [r3, #0]
    48a0:	429a      	cmp	r2, r3
    48a2:	d000      	beq.n	48a6 <process_thread_mqtt_process+0xb4a>
    48a4:	e1b1      	b.n	4c0a <process_thread_mqtt_process+0xeae>
      conn = data;
    48a6:	4ea5      	ldr	r6, [pc, #660]	; (4b3c <process_thread_mqtt_process+0xde0>)
    48a8:	6035      	str	r5, [r6, #0]
      DBG("MQTT - Got mqtt_do_subscribe_mqtt_event!\n\r");
    48aa:	48a5      	ldr	r0, [pc, #660]	; (4b40 <process_thread_mqtt_process+0xde4>)
    48ac:	4ba5      	ldr	r3, [pc, #660]	; (4b44 <process_thread_mqtt_process+0xde8>)
    48ae:	4798      	blx	r3

      if(conn->out_buffer_sent == 1 &&
    48b0:	6833      	ldr	r3, [r6, #0]
    48b2:	229d      	movs	r2, #157	; 0x9d
    48b4:	0092      	lsls	r2, r2, #2
    48b6:	5c9a      	ldrb	r2, [r3, r2]
    48b8:	2a01      	cmp	r2, #1
    48ba:	d000      	beq.n	48be <process_thread_mqtt_process+0xb62>
    48bc:	e1a5      	b.n	4c0a <process_thread_mqtt_process+0xeae>
         conn->state == MQTT_CONN_STATE_CONNECTED_TO_BROKER) {
    48be:	325f      	adds	r2, #95	; 0x5f
    }
    if(ev == mqtt_do_subscribe_event) {
      conn = data;
      DBG("MQTT - Got mqtt_do_subscribe_mqtt_event!\n\r");

      if(conn->out_buffer_sent == 1 &&
    48c0:	5c9a      	ldrb	r2, [r3, r2]
    48c2:	2a08      	cmp	r2, #8
    48c4:	d000      	beq.n	48c8 <process_thread_mqtt_process+0xb6c>
    48c6:	e1a0      	b.n	4c0a <process_thread_mqtt_process+0xeae>
         conn->state == MQTT_CONN_STATE_CONNECTED_TO_BROKER) {
        PT_INIT(&conn->out_proto_thread);
    48c8:	2100      	movs	r1, #0
    48ca:	22a7      	movs	r2, #167	; 0xa7
    48cc:	0092      	lsls	r2, r2, #2
    48ce:	5299      	strh	r1, [r3, r2]
        while(subscribe_pt(&conn->out_proto_thread, conn) < PT_EXITED &&
    48d0:	e02b      	b.n	492a <process_thread_mqtt_process+0xbce>
              conn->state == MQTT_CONN_STATE_CONNECTED_TO_BROKER) {
          PT_MQTT_WAIT_SEND();
    48d2:	4b9d      	ldr	r3, [pc, #628]	; (4b48 <process_thread_mqtt_process+0xdec>)
    48d4:	7819      	ldrb	r1, [r3, #0]
    48d6:	4b9d      	ldr	r3, [pc, #628]	; (4b4c <process_thread_mqtt_process+0xdf0>)
    48d8:	6818      	ldr	r0, [r3, #0]
    48da:	2200      	movs	r2, #0
    48dc:	4b9c      	ldr	r3, [pc, #624]	; (4b50 <process_thread_mqtt_process+0xdf4>)
    48de:	4798      	blx	r3
    48e0:	4b9c      	ldr	r3, [pc, #624]	; (4b54 <process_thread_mqtt_process+0xdf8>)
    48e2:	8023      	strh	r3, [r4, #0]
    48e4:	2001      	movs	r0, #1
    48e6:	f000 fd62 	bl	53ae <process_thread_mqtt_process+0x1652>
    48ea:	230f      	movs	r3, #15
    48ec:	446b      	add	r3, sp
    48ee:	7819      	ldrb	r1, [r3, #0]
    48f0:	4b99      	ldr	r3, [pc, #612]	; (4b58 <process_thread_mqtt_process+0xdfc>)
    48f2:	781b      	ldrb	r3, [r3, #0]
    48f4:	428b      	cmp	r3, r1
    48f6:	d10b      	bne.n	4910 <process_thread_mqtt_process+0xbb4>
    48f8:	4b90      	ldr	r3, [pc, #576]	; (4b3c <process_thread_mqtt_process+0xde0>)
    48fa:	681b      	ldr	r3, [r3, #0]
    48fc:	210a      	movs	r1, #10
    48fe:	2260      	movs	r2, #96	; 0x60
    4900:	5499      	strb	r1, [r3, r2]
    4902:	2100      	movs	r1, #0
    4904:	22a7      	movs	r2, #167	; 0xa7
    4906:	0092      	lsls	r2, r2, #2
    4908:	5299      	strh	r1, [r3, r2]
    490a:	2002      	movs	r0, #2
    490c:	f000 fd4f 	bl	53ae <process_thread_mqtt_process+0x1652>
    4910:	4b92      	ldr	r3, [pc, #584]	; (4b5c <process_thread_mqtt_process+0xe00>)
    4912:	781b      	ldrb	r3, [r3, #0]
    4914:	428b      	cmp	r3, r1
    4916:	d808      	bhi.n	492a <process_thread_mqtt_process+0xbce>
    4918:	4b91      	ldr	r3, [pc, #580]	; (4b60 <process_thread_mqtt_process+0xe04>)
    491a:	781b      	ldrb	r3, [r3, #0]
    491c:	428b      	cmp	r3, r1
    491e:	d304      	bcc.n	492a <process_thread_mqtt_process+0xbce>
    4920:	4b8a      	ldr	r3, [pc, #552]	; (4b4c <process_thread_mqtt_process+0xdf0>)
    4922:	6818      	ldr	r0, [r3, #0]
    4924:	1c2a      	adds	r2, r5, #0
    4926:	4b8a      	ldr	r3, [pc, #552]	; (4b50 <process_thread_mqtt_process+0xdf4>)
    4928:	4798      	blx	r3
      DBG("MQTT - Got mqtt_do_subscribe_mqtt_event!\n\r");

      if(conn->out_buffer_sent == 1 &&
         conn->state == MQTT_CONN_STATE_CONNECTED_TO_BROKER) {
        PT_INIT(&conn->out_proto_thread);
        while(subscribe_pt(&conn->out_proto_thread, conn) < PT_EXITED &&
    492a:	4b84      	ldr	r3, [pc, #528]	; (4b3c <process_thread_mqtt_process+0xde0>)
    492c:	681e      	ldr	r6, [r3, #0]
}
/*---------------------------------------------------------------------------*/
static
PT_THREAD(subscribe_pt(struct pt *pt, struct mqtt_connection *conn))
{
  PT_BEGIN(pt);
    492e:	23a7      	movs	r3, #167	; 0xa7
    4930:	009b      	lsls	r3, r3, #2
    4932:	5af3      	ldrh	r3, [r6, r3]
    4934:	22ea      	movs	r2, #234	; 0xea
    4936:	32ff      	adds	r2, #255	; 0xff
    4938:	4293      	cmp	r3, r2
    493a:	d100      	bne.n	493e <process_thread_mqtt_process+0xbe2>
    493c:	e09c      	b.n	4a78 <process_thread_mqtt_process+0xd1c>
    493e:	d80f      	bhi.n	4960 <process_thread_mqtt_process+0xc04>
    4940:	22e4      	movs	r2, #228	; 0xe4
    4942:	32ff      	adds	r2, #255	; 0xff
    4944:	4293      	cmp	r3, r2
    4946:	d058      	beq.n	49fa <process_thread_mqtt_process+0xc9e>
    4948:	d802      	bhi.n	4950 <process_thread_mqtt_process+0xbf4>
    494a:	2b00      	cmp	r3, #0
    494c:	d022      	beq.n	4994 <process_thread_mqtt_process+0xc38>
    494e:	e158      	b.n	4c02 <process_thread_mqtt_process+0xea6>
    4950:	22f3      	movs	r2, #243	; 0xf3
    4952:	0052      	lsls	r2, r2, #1
    4954:	4293      	cmp	r3, r2
    4956:	d065      	beq.n	4a24 <process_thread_mqtt_process+0xcc8>
    4958:	3202      	adds	r2, #2
    495a:	4293      	cmp	r3, r2
    495c:	d079      	beq.n	4a52 <process_thread_mqtt_process+0xcf6>
    495e:	e150      	b.n	4c02 <process_thread_mqtt_process+0xea6>
    4960:	22f7      	movs	r2, #247	; 0xf7
    4962:	0052      	lsls	r2, r2, #1
    4964:	4293      	cmp	r3, r2
    4966:	d100      	bne.n	496a <process_thread_mqtt_process+0xc0e>
    4968:	e0c5      	b.n	4af6 <process_thread_mqtt_process+0xd9a>
    496a:	d809      	bhi.n	4980 <process_thread_mqtt_process+0xc24>
    496c:	22ec      	movs	r2, #236	; 0xec
    496e:	32ff      	adds	r2, #255	; 0xff
    4970:	4293      	cmp	r3, r2
    4972:	d100      	bne.n	4976 <process_thread_mqtt_process+0xc1a>
    4974:	e094      	b.n	4aa0 <process_thread_mqtt_process+0xd44>
    4976:	3201      	adds	r2, #1
    4978:	4293      	cmp	r3, r2
    497a:	d100      	bne.n	497e <process_thread_mqtt_process+0xc22>
    497c:	e0a6      	b.n	4acc <process_thread_mqtt_process+0xd70>
    497e:	e140      	b.n	4c02 <process_thread_mqtt_process+0xea6>
    4980:	22f0      	movs	r2, #240	; 0xf0
    4982:	32ff      	adds	r2, #255	; 0xff
    4984:	4293      	cmp	r3, r2
    4986:	d100      	bne.n	498a <process_thread_mqtt_process+0xc2e>
    4988:	e0fd      	b.n	4b86 <process_thread_mqtt_process+0xe2a>
    498a:	3209      	adds	r2, #9
    498c:	4293      	cmp	r3, r2
    498e:	d100      	bne.n	4992 <process_thread_mqtt_process+0xc36>
    4990:	e11a      	b.n	4bc8 <process_thread_mqtt_process+0xe6c>
    4992:	e136      	b.n	4c02 <process_thread_mqtt_process+0xea6>

  DBG("MQTT - Sending subscribe message! topic %s topic_length %i\n\r",
    4994:	27a3      	movs	r7, #163	; 0xa3
    4996:	00bf      	lsls	r7, r7, #2
    4998:	5bf2      	ldrh	r2, [r6, r7]
    499a:	4872      	ldr	r0, [pc, #456]	; (4b64 <process_thread_mqtt_process+0xe08>)
    499c:	23a2      	movs	r3, #162	; 0xa2
    499e:	009b      	lsls	r3, r3, #2
    49a0:	58f1      	ldr	r1, [r6, r3]
    49a2:	4b68      	ldr	r3, [pc, #416]	; (4b44 <process_thread_mqtt_process+0xde8>)
    49a4:	4698      	mov	r8, r3
    49a6:	4798      	blx	r3
      conn->out_packet.topic,
      conn->out_packet.topic_length);
  DBG("MQTT - Buffer space is %i \n\r",
    49a8:	239d      	movs	r3, #157	; 0x9d
    49aa:	009b      	lsls	r3, r3, #2
    49ac:	18f3      	adds	r3, r6, r3
    49ae:	6f32      	ldr	r2, [r6, #112]	; 0x70
    49b0:	1a99      	subs	r1, r3, r2
    49b2:	486d      	ldr	r0, [pc, #436]	; (4b68 <process_thread_mqtt_process+0xe0c>)
    49b4:	47c0      	blx	r8
      &conn->out_buffer[MQTT_TCP_OUTPUT_BUFF_SIZE] - conn->out_buffer_ptr);

  /* Set up FHDR */
  conn->out_packet.fhdr = MQTT_FHDR_MSG_TYPE_SUBSCRIBE | MQTT_FHDR_QOS_LEVEL_1;
    49b6:	2282      	movs	r2, #130	; 0x82
    49b8:	239e      	movs	r3, #158	; 0x9e
    49ba:	009b      	lsls	r3, r3, #2
    49bc:	54f2      	strb	r2, [r6, r3]
  conn->out_packet.remaining_length = MQTT_MID_SIZE +
    MQTT_STRING_LEN_SIZE +
    conn->out_packet.topic_length +
    49be:	5bf2      	ldrh	r2, [r6, r7]
    49c0:	3205      	adds	r2, #5
  DBG("MQTT - Buffer space is %i \n\r",
      &conn->out_buffer[MQTT_TCP_OUTPUT_BUFF_SIZE] - conn->out_buffer_ptr);

  /* Set up FHDR */
  conn->out_packet.fhdr = MQTT_FHDR_MSG_TYPE_SUBSCRIBE | MQTT_FHDR_QOS_LEVEL_1;
  conn->out_packet.remaining_length = MQTT_MID_SIZE +
    49c2:	3304      	adds	r3, #4
    49c4:	50f2      	str	r2, [r6, r3]
    MQTT_STRING_LEN_SIZE +
    conn->out_packet.topic_length +
    MQTT_QOS_SIZE;
  encode_remaining_length(conn->out_packet.remaining_length_enc,
    49c6:	3304      	adds	r3, #4
    49c8:	18f0      	adds	r0, r6, r3
    49ca:	3304      	adds	r3, #4
    49cc:	18f1      	adds	r1, r6, r3
    49ce:	4b67      	ldr	r3, [pc, #412]	; (4b6c <process_thread_mqtt_process+0xe10>)
    49d0:	4798      	blx	r3
                          &conn->out_packet.remaining_length_enc_bytes,
                          conn->out_packet.remaining_length);
  if(conn->out_packet.remaining_length_enc_bytes > 4) {
    49d2:	23a1      	movs	r3, #161	; 0xa1
    49d4:	009b      	lsls	r3, r3, #2
    49d6:	5cf3      	ldrb	r3, [r6, r3]
    49d8:	2b04      	cmp	r3, #4
    49da:	d915      	bls.n	4a08 <process_thread_mqtt_process+0xcac>
    call_event(conn, MQTT_EVENT_PROTOCOL_ERROR, NULL);
    49dc:	1c30      	adds	r0, r6, #0
    49de:	2181      	movs	r1, #129	; 0x81
    49e0:	2200      	movs	r2, #0
    49e2:	4b63      	ldr	r3, [pc, #396]	; (4b70 <process_thread_mqtt_process+0xe14>)
    49e4:	4798      	blx	r3
    PRINTF("MQTT - Error, remaining length > 4 bytes\n\r");
    PT_EXIT(pt);
    49e6:	2200      	movs	r2, #0
    49e8:	23a7      	movs	r3, #167	; 0xa7
    49ea:	009b      	lsls	r3, r3, #2
    49ec:	52f2      	strh	r2, [r6, r3]
    49ee:	e10c      	b.n	4c0a <process_thread_mqtt_process+0xeae>
  }

  /* Write Fixed Header */
  PT_MQTT_WRITE_BYTE(conn, conn->out_packet.fhdr);
    49f0:	22e4      	movs	r2, #228	; 0xe4
    49f2:	32ff      	adds	r2, #255	; 0xff
    49f4:	23a7      	movs	r3, #167	; 0xa7
    49f6:	009b      	lsls	r3, r3, #2
    49f8:	52f2      	strh	r2, [r6, r3]
    49fa:	239d      	movs	r3, #157	; 0x9d
    49fc:	009b      	lsls	r3, r3, #2
    49fe:	5cf3      	ldrb	r3, [r6, r3]
    4a00:	2b00      	cmp	r3, #0
    4a02:	d101      	bne.n	4a08 <process_thread_mqtt_process+0xcac>
    4a04:	f000 fcb9 	bl	537a <process_thread_mqtt_process+0x161e>
    4a08:	239e      	movs	r3, #158	; 0x9e
    4a0a:	009b      	lsls	r3, r3, #2
    4a0c:	5cf1      	ldrb	r1, [r6, r3]
    4a0e:	1c30      	adds	r0, r6, #0
    4a10:	4b43      	ldr	r3, [pc, #268]	; (4b20 <process_thread_mqtt_process+0xdc4>)
    4a12:	4798      	blx	r3
    4a14:	2800      	cmp	r0, #0
    4a16:	d1eb      	bne.n	49f0 <process_thread_mqtt_process+0xc94>
    4a18:	e00b      	b.n	4a32 <process_thread_mqtt_process+0xcd6>
  PT_MQTT_WRITE_BYTES(conn,
    4a1a:	22f3      	movs	r2, #243	; 0xf3
    4a1c:	0052      	lsls	r2, r2, #1
    4a1e:	23a7      	movs	r3, #167	; 0xa7
    4a20:	009b      	lsls	r3, r3, #2
    4a22:	52f2      	strh	r2, [r6, r3]
    4a24:	239d      	movs	r3, #157	; 0x9d
    4a26:	009b      	lsls	r3, r3, #2
    4a28:	5cf3      	ldrb	r3, [r6, r3]
    4a2a:	2b00      	cmp	r3, #0
    4a2c:	d101      	bne.n	4a32 <process_thread_mqtt_process+0xcd6>
    4a2e:	f000 fca4 	bl	537a <process_thread_mqtt_process+0x161e>
    4a32:	23a0      	movs	r3, #160	; 0xa0
    4a34:	009b      	lsls	r3, r3, #2
    4a36:	18f1      	adds	r1, r6, r3
    4a38:	3304      	adds	r3, #4
    4a3a:	5cf2      	ldrb	r2, [r6, r3]
    4a3c:	1c30      	adds	r0, r6, #0
    4a3e:	4b4d      	ldr	r3, [pc, #308]	; (4b74 <process_thread_mqtt_process+0xe18>)
    4a40:	4798      	blx	r3
    4a42:	2800      	cmp	r0, #0
    4a44:	d1e9      	bne.n	4a1a <process_thread_mqtt_process+0xcbe>
    4a46:	e00b      	b.n	4a60 <process_thread_mqtt_process+0xd04>
                      conn->out_packet.remaining_length_enc,
                      conn->out_packet.remaining_length_enc_bytes);
  /* Write Variable Header */
  PT_MQTT_WRITE_BYTE(conn, (conn->out_packet.mid << 8));
    4a48:	22f4      	movs	r2, #244	; 0xf4
    4a4a:	0052      	lsls	r2, r2, #1
    4a4c:	23a7      	movs	r3, #167	; 0xa7
    4a4e:	009b      	lsls	r3, r3, #2
    4a50:	52f2      	strh	r2, [r6, r3]
    4a52:	239d      	movs	r3, #157	; 0x9d
    4a54:	009b      	lsls	r3, r3, #2
    4a56:	5cf3      	ldrb	r3, [r6, r3]
    4a58:	2b00      	cmp	r3, #0
    4a5a:	d101      	bne.n	4a60 <process_thread_mqtt_process+0xd04>
    4a5c:	f000 fc8d 	bl	537a <process_thread_mqtt_process+0x161e>
    4a60:	1c30      	adds	r0, r6, #0
    4a62:	2100      	movs	r1, #0
    4a64:	4b2e      	ldr	r3, [pc, #184]	; (4b20 <process_thread_mqtt_process+0xdc4>)
    4a66:	4798      	blx	r3
    4a68:	2800      	cmp	r0, #0
    4a6a:	d1ed      	bne.n	4a48 <process_thread_mqtt_process+0xcec>
    4a6c:	e00b      	b.n	4a86 <process_thread_mqtt_process+0xd2a>
  PT_MQTT_WRITE_BYTE(conn, (conn->out_packet.mid & 0x00FF));
    4a6e:	22ea      	movs	r2, #234	; 0xea
    4a70:	32ff      	adds	r2, #255	; 0xff
    4a72:	23a7      	movs	r3, #167	; 0xa7
    4a74:	009b      	lsls	r3, r3, #2
    4a76:	52f2      	strh	r2, [r6, r3]
    4a78:	239d      	movs	r3, #157	; 0x9d
    4a7a:	009b      	lsls	r3, r3, #2
    4a7c:	5cf3      	ldrb	r3, [r6, r3]
    4a7e:	2b00      	cmp	r3, #0
    4a80:	d101      	bne.n	4a86 <process_thread_mqtt_process+0xd2a>
    4a82:	f000 fc7a 	bl	537a <process_thread_mqtt_process+0x161e>
    4a86:	4b3c      	ldr	r3, [pc, #240]	; (4b78 <process_thread_mqtt_process+0xe1c>)
    4a88:	5cf1      	ldrb	r1, [r6, r3]
    4a8a:	1c30      	adds	r0, r6, #0
    4a8c:	4b24      	ldr	r3, [pc, #144]	; (4b20 <process_thread_mqtt_process+0xdc4>)
    4a8e:	4798      	blx	r3
    4a90:	2800      	cmp	r0, #0
    4a92:	d1ec      	bne.n	4a6e <process_thread_mqtt_process+0xd12>
    4a94:	e00b      	b.n	4aae <process_thread_mqtt_process+0xd52>
  /* Write Payload */
  PT_MQTT_WRITE_BYTE(conn, (conn->out_packet.topic_length >> 8));
    4a96:	22ec      	movs	r2, #236	; 0xec
    4a98:	32ff      	adds	r2, #255	; 0xff
    4a9a:	23a7      	movs	r3, #167	; 0xa7
    4a9c:	009b      	lsls	r3, r3, #2
    4a9e:	52f2      	strh	r2, [r6, r3]
    4aa0:	239d      	movs	r3, #157	; 0x9d
    4aa2:	009b      	lsls	r3, r3, #2
    4aa4:	5cf3      	ldrb	r3, [r6, r3]
    4aa6:	2b00      	cmp	r3, #0
    4aa8:	d101      	bne.n	4aae <process_thread_mqtt_process+0xd52>
    4aaa:	f000 fc66 	bl	537a <process_thread_mqtt_process+0x161e>
    4aae:	23a3      	movs	r3, #163	; 0xa3
    4ab0:	009b      	lsls	r3, r3, #2
    4ab2:	5af1      	ldrh	r1, [r6, r3]
    4ab4:	0a09      	lsrs	r1, r1, #8
    4ab6:	1c30      	adds	r0, r6, #0
    4ab8:	4b19      	ldr	r3, [pc, #100]	; (4b20 <process_thread_mqtt_process+0xdc4>)
    4aba:	4798      	blx	r3
    4abc:	2800      	cmp	r0, #0
    4abe:	d1ea      	bne.n	4a96 <process_thread_mqtt_process+0xd3a>
    4ac0:	e00b      	b.n	4ada <process_thread_mqtt_process+0xd7e>
  PT_MQTT_WRITE_BYTE(conn, (conn->out_packet.topic_length & 0x00FF));
    4ac2:	22f6      	movs	r2, #246	; 0xf6
    4ac4:	0052      	lsls	r2, r2, #1
    4ac6:	23a7      	movs	r3, #167	; 0xa7
    4ac8:	009b      	lsls	r3, r3, #2
    4aca:	52f2      	strh	r2, [r6, r3]
    4acc:	239d      	movs	r3, #157	; 0x9d
    4ace:	009b      	lsls	r3, r3, #2
    4ad0:	5cf3      	ldrb	r3, [r6, r3]
    4ad2:	2b00      	cmp	r3, #0
    4ad4:	d101      	bne.n	4ada <process_thread_mqtt_process+0xd7e>
    4ad6:	f000 fc50 	bl	537a <process_thread_mqtt_process+0x161e>
    4ada:	23a3      	movs	r3, #163	; 0xa3
    4adc:	009b      	lsls	r3, r3, #2
    4ade:	5cf1      	ldrb	r1, [r6, r3]
    4ae0:	1c30      	adds	r0, r6, #0
    4ae2:	4b0f      	ldr	r3, [pc, #60]	; (4b20 <process_thread_mqtt_process+0xdc4>)
    4ae4:	4798      	blx	r3
    4ae6:	2800      	cmp	r0, #0
    4ae8:	d1eb      	bne.n	4ac2 <process_thread_mqtt_process+0xd66>
    4aea:	e00b      	b.n	4b04 <process_thread_mqtt_process+0xda8>
  PT_MQTT_WRITE_BYTES(conn, (uint8_t *)conn->out_packet.topic,
    4aec:	22f7      	movs	r2, #247	; 0xf7
    4aee:	0052      	lsls	r2, r2, #1
    4af0:	23a7      	movs	r3, #167	; 0xa7
    4af2:	009b      	lsls	r3, r3, #2
    4af4:	52f2      	strh	r2, [r6, r3]
    4af6:	239d      	movs	r3, #157	; 0x9d
    4af8:	009b      	lsls	r3, r3, #2
    4afa:	5cf3      	ldrb	r3, [r6, r3]
    4afc:	2b00      	cmp	r3, #0
    4afe:	d101      	bne.n	4b04 <process_thread_mqtt_process+0xda8>
    4b00:	f000 fc3b 	bl	537a <process_thread_mqtt_process+0x161e>
    4b04:	23a3      	movs	r3, #163	; 0xa3
    4b06:	009b      	lsls	r3, r3, #2
    4b08:	5af2      	ldrh	r2, [r6, r3]
    4b0a:	1c30      	adds	r0, r6, #0
    4b0c:	3b04      	subs	r3, #4
    4b0e:	58f1      	ldr	r1, [r6, r3]
    4b10:	4b18      	ldr	r3, [pc, #96]	; (4b74 <process_thread_mqtt_process+0xe18>)
    4b12:	4798      	blx	r3
    4b14:	2800      	cmp	r0, #0
    4b16:	d1e9      	bne.n	4aec <process_thread_mqtt_process+0xd90>
    4b18:	e03c      	b.n	4b94 <process_thread_mqtt_process+0xe38>
    4b1a:	46c0      	nop			; (mov r8, r8)
    4b1c:	000002a6 	.word	0x000002a6
    4b20:	00003a99 	.word	0x00003a99
    4b24:	00003a51 	.word	0x00003a51
    4b28:	00003285 	.word	0x00003285
    4b2c:	0000ed5d 	.word	0x0000ed5d
    4b30:	000002b1 	.word	0x000002b1
    4b34:	0000ed8d 	.word	0x0000ed8d
    4b38:	2000037c 	.word	0x2000037c
    4b3c:	20000380 	.word	0x20000380
    4b40:	000125f8 	.word	0x000125f8
    4b44:	00010931 	.word	0x00010931
    4b48:	20000379 	.word	0x20000379
    4b4c:	20001d2c 	.word	0x20001d2c
    4b50:	0000ebf9 	.word	0x0000ebf9
    4b54:	00000499 	.word	0x00000499
    4b58:	2000037b 	.word	0x2000037b
    4b5c:	20000375 	.word	0x20000375
    4b60:	20000376 	.word	0x20000376
    4b64:	00012624 	.word	0x00012624
    4b68:	00012664 	.word	0x00012664
    4b6c:	000031f1 	.word	0x000031f1
    4b70:	00003265 	.word	0x00003265
    4b74:	00003ad9 	.word	0x00003ad9
    4b78:	00000286 	.word	0x00000286
                      conn->out_packet.topic_length);
  PT_MQTT_WRITE_BYTE(conn, conn->out_packet.qos);
    4b7c:	22f0      	movs	r2, #240	; 0xf0
    4b7e:	32ff      	adds	r2, #255	; 0xff
    4b80:	23a7      	movs	r3, #167	; 0xa7
    4b82:	009b      	lsls	r3, r3, #2
    4b84:	52f2      	strh	r2, [r6, r3]
    4b86:	239d      	movs	r3, #157	; 0x9d
    4b88:	009b      	lsls	r3, r3, #2
    4b8a:	5cf3      	ldrb	r3, [r6, r3]
    4b8c:	2b00      	cmp	r3, #0
    4b8e:	d101      	bne.n	4b94 <process_thread_mqtt_process+0xe38>
    4b90:	f000 fbf3 	bl	537a <process_thread_mqtt_process+0x161e>
    4b94:	23a6      	movs	r3, #166	; 0xa6
    4b96:	009b      	lsls	r3, r3, #2
    4b98:	5cf1      	ldrb	r1, [r6, r3]
    4b9a:	1c30      	adds	r0, r6, #0
    4b9c:	4ba6      	ldr	r3, [pc, #664]	; (4e38 <process_thread_mqtt_process+0x10dc>)
    4b9e:	4798      	blx	r3
    4ba0:	2800      	cmp	r0, #0
    4ba2:	d1eb      	bne.n	4b7c <process_thread_mqtt_process+0xe20>

  /* Send out buffer */
  send_out_buffer(conn);
    4ba4:	1c30      	adds	r0, r6, #0
    4ba6:	4ba5      	ldr	r3, [pc, #660]	; (4e3c <process_thread_mqtt_process+0x10e0>)
    4ba8:	4798      	blx	r3
  timer_set(&conn->t, RESPONSE_WAIT_TIMEOUT);
    4baa:	1d30      	adds	r0, r6, #4
    4bac:	21a0      	movs	r1, #160	; 0xa0
    4bae:	00c9      	lsls	r1, r1, #3
    4bb0:	4ba3      	ldr	r3, [pc, #652]	; (4e40 <process_thread_mqtt_process+0x10e4>)
    4bb2:	4798      	blx	r3

  /* Wait for SUBACK. */
  reset_packet(&conn->in_packet);
    4bb4:	2395      	movs	r3, #149	; 0x95
    4bb6:	00db      	lsls	r3, r3, #3
    4bb8:	18f0      	adds	r0, r6, r3
    4bba:	4ba2      	ldr	r3, [pc, #648]	; (4e44 <process_thread_mqtt_process+0x10e8>)
    4bbc:	4798      	blx	r3
  PT_WAIT_UNTIL(pt, conn->out_packet.qos_state == MQTT_QOS_STATE_GOT_ACK ||
    4bbe:	22fc      	movs	r2, #252	; 0xfc
    4bc0:	0052      	lsls	r2, r2, #1
    4bc2:	23a7      	movs	r3, #167	; 0xa7
    4bc4:	009b      	lsls	r3, r3, #2
    4bc6:	52f2      	strh	r2, [r6, r3]
    4bc8:	4b9f      	ldr	r3, [pc, #636]	; (4e48 <process_thread_mqtt_process+0x10ec>)
    4bca:	5cf3      	ldrb	r3, [r6, r3]
    4bcc:	2b01      	cmp	r3, #1
    4bce:	d005      	beq.n	4bdc <process_thread_mqtt_process+0xe80>
    4bd0:	1d30      	adds	r0, r6, #4
    4bd2:	4b9e      	ldr	r3, [pc, #632]	; (4e4c <process_thread_mqtt_process+0x10f0>)
    4bd4:	4798      	blx	r3
    4bd6:	2800      	cmp	r0, #0
    4bd8:	d100      	bne.n	4bdc <process_thread_mqtt_process+0xe80>
    4bda:	e3ce      	b.n	537a <process_thread_mqtt_process+0x161e>
                timer_expired(&conn->t));

  if(timer_expired(&conn->t)) {
    4bdc:	1d30      	adds	r0, r6, #4
    4bde:	4b9b      	ldr	r3, [pc, #620]	; (4e4c <process_thread_mqtt_process+0x10f0>)
    4be0:	4798      	blx	r3
    4be2:	2800      	cmp	r0, #0
    4be4:	d002      	beq.n	4bec <process_thread_mqtt_process+0xe90>
    DBG("Timeout waiting for SUBACK\n\r");
    4be6:	489a      	ldr	r0, [pc, #616]	; (4e50 <process_thread_mqtt_process+0x10f4>)
    4be8:	4b9a      	ldr	r3, [pc, #616]	; (4e54 <process_thread_mqtt_process+0x10f8>)
    4bea:	4798      	blx	r3
  }
  reset_packet(&conn->in_packet);
    4bec:	2395      	movs	r3, #149	; 0x95
    4bee:	00db      	lsls	r3, r3, #3
    4bf0:	18f0      	adds	r0, r6, r3
    4bf2:	4b94      	ldr	r3, [pc, #592]	; (4e44 <process_thread_mqtt_process+0x10e8>)
    4bf4:	4798      	blx	r3

  /* This is clear after the entire transaction is complete */
  conn->out_queue_full = 0;
    4bf6:	2200      	movs	r2, #0
    4bf8:	236a      	movs	r3, #106	; 0x6a
    4bfa:	54f2      	strb	r2, [r6, r3]

  DBG("MQTT - Done in send_subscribe!\n\r");
    4bfc:	4896      	ldr	r0, [pc, #600]	; (4e58 <process_thread_mqtt_process+0x10fc>)
    4bfe:	4b95      	ldr	r3, [pc, #596]	; (4e54 <process_thread_mqtt_process+0x10f8>)
    4c00:	4798      	blx	r3

  PT_END(pt);
    4c02:	2200      	movs	r2, #0
    4c04:	23a7      	movs	r3, #167	; 0xa7
    4c06:	009b      	lsls	r3, r3, #2
    4c08:	52f2      	strh	r2, [r6, r3]
              conn->state == MQTT_CONN_STATE_CONNECTED_TO_BROKER) {
          PT_MQTT_WAIT_SEND();
        }
      }
    }
    if(ev == mqtt_do_unsubscribe_event) {
    4c0a:	230f      	movs	r3, #15
    4c0c:	446b      	add	r3, sp
    4c0e:	781a      	ldrb	r2, [r3, #0]
    4c10:	4b92      	ldr	r3, [pc, #584]	; (4e5c <process_thread_mqtt_process+0x1100>)
    4c12:	781b      	ldrb	r3, [r3, #0]
    4c14:	429a      	cmp	r2, r3
    4c16:	d000      	beq.n	4c1a <process_thread_mqtt_process+0xebe>
    4c18:	e193      	b.n	4f42 <process_thread_mqtt_process+0x11e6>
      conn = data;
    4c1a:	4e91      	ldr	r6, [pc, #580]	; (4e60 <process_thread_mqtt_process+0x1104>)
    4c1c:	6035      	str	r5, [r6, #0]
      DBG("MQTT - Got mqtt_do_unsubscribe_mqtt_event!\n\r");
    4c1e:	4891      	ldr	r0, [pc, #580]	; (4e64 <process_thread_mqtt_process+0x1108>)
    4c20:	4b8c      	ldr	r3, [pc, #560]	; (4e54 <process_thread_mqtt_process+0x10f8>)
    4c22:	4798      	blx	r3

      if(conn->out_buffer_sent == 1 &&
    4c24:	6833      	ldr	r3, [r6, #0]
    4c26:	229d      	movs	r2, #157	; 0x9d
    4c28:	0092      	lsls	r2, r2, #2
    4c2a:	5c9a      	ldrb	r2, [r3, r2]
    4c2c:	2a01      	cmp	r2, #1
    4c2e:	d000      	beq.n	4c32 <process_thread_mqtt_process+0xed6>
    4c30:	e187      	b.n	4f42 <process_thread_mqtt_process+0x11e6>
         conn->state == MQTT_CONN_STATE_CONNECTED_TO_BROKER) {
    4c32:	325f      	adds	r2, #95	; 0x5f
    }
    if(ev == mqtt_do_unsubscribe_event) {
      conn = data;
      DBG("MQTT - Got mqtt_do_unsubscribe_mqtt_event!\n\r");

      if(conn->out_buffer_sent == 1 &&
    4c34:	5c9a      	ldrb	r2, [r3, r2]
    4c36:	2a08      	cmp	r2, #8
    4c38:	d000      	beq.n	4c3c <process_thread_mqtt_process+0xee0>
    4c3a:	e182      	b.n	4f42 <process_thread_mqtt_process+0x11e6>
         conn->state == MQTT_CONN_STATE_CONNECTED_TO_BROKER) {
        PT_INIT(&conn->out_proto_thread);
    4c3c:	2100      	movs	r1, #0
    4c3e:	22a7      	movs	r2, #167	; 0xa7
    4c40:	0092      	lsls	r2, r2, #2
    4c42:	5299      	strh	r1, [r3, r2]
        while(unsubscribe_pt(&conn->out_proto_thread, conn) < PT_EXITED &&
    4c44:	e029      	b.n	4c9a <process_thread_mqtt_process+0xf3e>
              conn->state == MQTT_CONN_STATE_CONNECTED_TO_BROKER) {
          PT_MQTT_WAIT_SEND();
    4c46:	4b88      	ldr	r3, [pc, #544]	; (4e68 <process_thread_mqtt_process+0x110c>)
    4c48:	7819      	ldrb	r1, [r3, #0]
    4c4a:	4b88      	ldr	r3, [pc, #544]	; (4e6c <process_thread_mqtt_process+0x1110>)
    4c4c:	6818      	ldr	r0, [r3, #0]
    4c4e:	2200      	movs	r2, #0
    4c50:	4b87      	ldr	r3, [pc, #540]	; (4e70 <process_thread_mqtt_process+0x1114>)
    4c52:	4798      	blx	r3
    4c54:	4b87      	ldr	r3, [pc, #540]	; (4e74 <process_thread_mqtt_process+0x1118>)
    4c56:	8023      	strh	r3, [r4, #0]
    4c58:	2001      	movs	r0, #1
    4c5a:	e3a8      	b.n	53ae <process_thread_mqtt_process+0x1652>
    4c5c:	230f      	movs	r3, #15
    4c5e:	446b      	add	r3, sp
    4c60:	7819      	ldrb	r1, [r3, #0]
    4c62:	4b85      	ldr	r3, [pc, #532]	; (4e78 <process_thread_mqtt_process+0x111c>)
    4c64:	781b      	ldrb	r3, [r3, #0]
    4c66:	428b      	cmp	r3, r1
    4c68:	d10a      	bne.n	4c80 <process_thread_mqtt_process+0xf24>
    4c6a:	4b7d      	ldr	r3, [pc, #500]	; (4e60 <process_thread_mqtt_process+0x1104>)
    4c6c:	681b      	ldr	r3, [r3, #0]
    4c6e:	210a      	movs	r1, #10
    4c70:	2260      	movs	r2, #96	; 0x60
    4c72:	5499      	strb	r1, [r3, r2]
    4c74:	2100      	movs	r1, #0
    4c76:	22a7      	movs	r2, #167	; 0xa7
    4c78:	0092      	lsls	r2, r2, #2
    4c7a:	5299      	strh	r1, [r3, r2]
    4c7c:	2002      	movs	r0, #2
    4c7e:	e396      	b.n	53ae <process_thread_mqtt_process+0x1652>
    4c80:	4b7e      	ldr	r3, [pc, #504]	; (4e7c <process_thread_mqtt_process+0x1120>)
    4c82:	781b      	ldrb	r3, [r3, #0]
    4c84:	428b      	cmp	r3, r1
    4c86:	d808      	bhi.n	4c9a <process_thread_mqtt_process+0xf3e>
    4c88:	4b7d      	ldr	r3, [pc, #500]	; (4e80 <process_thread_mqtt_process+0x1124>)
    4c8a:	781b      	ldrb	r3, [r3, #0]
    4c8c:	428b      	cmp	r3, r1
    4c8e:	d304      	bcc.n	4c9a <process_thread_mqtt_process+0xf3e>
    4c90:	4b76      	ldr	r3, [pc, #472]	; (4e6c <process_thread_mqtt_process+0x1110>)
    4c92:	6818      	ldr	r0, [r3, #0]
    4c94:	1c2a      	adds	r2, r5, #0
    4c96:	4b76      	ldr	r3, [pc, #472]	; (4e70 <process_thread_mqtt_process+0x1114>)
    4c98:	4798      	blx	r3
      DBG("MQTT - Got mqtt_do_unsubscribe_mqtt_event!\n\r");

      if(conn->out_buffer_sent == 1 &&
         conn->state == MQTT_CONN_STATE_CONNECTED_TO_BROKER) {
        PT_INIT(&conn->out_proto_thread);
        while(unsubscribe_pt(&conn->out_proto_thread, conn) < PT_EXITED &&
    4c9a:	4b71      	ldr	r3, [pc, #452]	; (4e60 <process_thread_mqtt_process+0x1104>)
    4c9c:	681e      	ldr	r6, [r3, #0]
}
/*---------------------------------------------------------------------------*/
static
PT_THREAD(unsubscribe_pt(struct pt *pt, struct mqtt_connection *conn))
{
  PT_BEGIN(pt);
    4c9e:	23a7      	movs	r3, #167	; 0xa7
    4ca0:	009b      	lsls	r3, r3, #2
    4ca2:	5af3      	ldrh	r3, [r6, r3]
    4ca4:	4a77      	ldr	r2, [pc, #476]	; (4e84 <process_thread_mqtt_process+0x1128>)
    4ca6:	4293      	cmp	r3, r2
    4ca8:	d100      	bne.n	4cac <process_thread_mqtt_process+0xf50>
    4caa:	e08f      	b.n	4dcc <process_thread_mqtt_process+0x1070>
    4cac:	d80e      	bhi.n	4ccc <process_thread_mqtt_process+0xf70>
    4cae:	4a76      	ldr	r2, [pc, #472]	; (4e88 <process_thread_mqtt_process+0x112c>)
    4cb0:	4293      	cmp	r3, r2
    4cb2:	d051      	beq.n	4d58 <process_thread_mqtt_process+0xffc>
    4cb4:	d802      	bhi.n	4cbc <process_thread_mqtt_process+0xf60>
    4cb6:	2b00      	cmp	r3, #0
    4cb8:	d01c      	beq.n	4cf4 <process_thread_mqtt_process+0xf98>
    4cba:	e13e      	b.n	4f3a <process_thread_mqtt_process+0x11de>
    4cbc:	2289      	movs	r2, #137	; 0x89
    4cbe:	0092      	lsls	r2, r2, #2
    4cc0:	4293      	cmp	r3, r2
    4cc2:	d05d      	beq.n	4d80 <process_thread_mqtt_process+0x1024>
    4cc4:	4a71      	ldr	r2, [pc, #452]	; (4e8c <process_thread_mqtt_process+0x1130>)
    4cc6:	4293      	cmp	r3, r2
    4cc8:	d06f      	beq.n	4daa <process_thread_mqtt_process+0x104e>
    4cca:	e136      	b.n	4f3a <process_thread_mqtt_process+0x11de>
    4ccc:	4a70      	ldr	r2, [pc, #448]	; (4e90 <process_thread_mqtt_process+0x1134>)
    4cce:	4293      	cmp	r3, r2
    4cd0:	d100      	bne.n	4cd4 <process_thread_mqtt_process+0xf78>
    4cd2:	e0a1      	b.n	4e18 <process_thread_mqtt_process+0x10bc>
    4cd4:	d804      	bhi.n	4ce0 <process_thread_mqtt_process+0xf84>
    4cd6:	4a6f      	ldr	r2, [pc, #444]	; (4e94 <process_thread_mqtt_process+0x1138>)
    4cd8:	4293      	cmp	r3, r2
    4cda:	d100      	bne.n	4cde <process_thread_mqtt_process+0xf82>
    4cdc:	e088      	b.n	4df0 <process_thread_mqtt_process+0x1094>
    4cde:	e12c      	b.n	4f3a <process_thread_mqtt_process+0x11de>
    4ce0:	228b      	movs	r2, #139	; 0x8b
    4ce2:	0092      	lsls	r2, r2, #2
    4ce4:	4293      	cmp	r3, r2
    4ce6:	d100      	bne.n	4cea <process_thread_mqtt_process+0xf8e>
    4ce8:	e0e9      	b.n	4ebe <process_thread_mqtt_process+0x1162>
    4cea:	4a6b      	ldr	r2, [pc, #428]	; (4e98 <process_thread_mqtt_process+0x113c>)
    4cec:	4293      	cmp	r3, r2
    4cee:	d100      	bne.n	4cf2 <process_thread_mqtt_process+0xf96>
    4cf0:	e106      	b.n	4f00 <process_thread_mqtt_process+0x11a4>
    4cf2:	e122      	b.n	4f3a <process_thread_mqtt_process+0x11de>

  DBG("MQTT - Sending unsubscribe message on topic %s topic_length %i\n\r",
    4cf4:	27a3      	movs	r7, #163	; 0xa3
    4cf6:	00bf      	lsls	r7, r7, #2
    4cf8:	5bf2      	ldrh	r2, [r6, r7]
    4cfa:	4868      	ldr	r0, [pc, #416]	; (4e9c <process_thread_mqtt_process+0x1140>)
    4cfc:	23a2      	movs	r3, #162	; 0xa2
    4cfe:	009b      	lsls	r3, r3, #2
    4d00:	58f1      	ldr	r1, [r6, r3]
    4d02:	4b54      	ldr	r3, [pc, #336]	; (4e54 <process_thread_mqtt_process+0x10f8>)
    4d04:	4698      	mov	r8, r3
    4d06:	4798      	blx	r3
      conn->out_packet.topic,
      conn->out_packet.topic_length);
  DBG("MQTT - Buffer space is %i \n\r",
    4d08:	239d      	movs	r3, #157	; 0x9d
    4d0a:	009b      	lsls	r3, r3, #2
    4d0c:	18f3      	adds	r3, r6, r3
    4d0e:	6f32      	ldr	r2, [r6, #112]	; 0x70
    4d10:	1a99      	subs	r1, r3, r2
    4d12:	4863      	ldr	r0, [pc, #396]	; (4ea0 <process_thread_mqtt_process+0x1144>)
    4d14:	47c0      	blx	r8
      &conn->out_buffer[MQTT_TCP_OUTPUT_BUFF_SIZE] - conn->out_buffer_ptr);

  /* Set up FHDR */
  conn->out_packet.fhdr = MQTT_FHDR_MSG_TYPE_UNSUBSCRIBE |
    4d16:	22a2      	movs	r2, #162	; 0xa2
    4d18:	239e      	movs	r3, #158	; 0x9e
    4d1a:	009b      	lsls	r3, r3, #2
    4d1c:	54f2      	strb	r2, [r6, r3]
    MQTT_FHDR_QOS_LEVEL_1;
  conn->out_packet.remaining_length = MQTT_MID_SIZE +
    MQTT_STRING_LEN_SIZE +
    4d1e:	5bf2      	ldrh	r2, [r6, r7]
    4d20:	3204      	adds	r2, #4
      &conn->out_buffer[MQTT_TCP_OUTPUT_BUFF_SIZE] - conn->out_buffer_ptr);

  /* Set up FHDR */
  conn->out_packet.fhdr = MQTT_FHDR_MSG_TYPE_UNSUBSCRIBE |
    MQTT_FHDR_QOS_LEVEL_1;
  conn->out_packet.remaining_length = MQTT_MID_SIZE +
    4d22:	3304      	adds	r3, #4
    4d24:	50f2      	str	r2, [r6, r3]
    MQTT_STRING_LEN_SIZE +
    conn->out_packet.topic_length;
  encode_remaining_length(conn->out_packet.remaining_length_enc,
    4d26:	3304      	adds	r3, #4
    4d28:	18f0      	adds	r0, r6, r3
    4d2a:	3304      	adds	r3, #4
    4d2c:	18f1      	adds	r1, r6, r3
    4d2e:	4b5d      	ldr	r3, [pc, #372]	; (4ea4 <process_thread_mqtt_process+0x1148>)
    4d30:	4798      	blx	r3
                          &conn->out_packet.remaining_length_enc_bytes,
                          conn->out_packet.remaining_length);
  if(conn->out_packet.remaining_length_enc_bytes > 4) {
    4d32:	23a1      	movs	r3, #161	; 0xa1
    4d34:	009b      	lsls	r3, r3, #2
    4d36:	5cf3      	ldrb	r3, [r6, r3]
    4d38:	2b04      	cmp	r3, #4
    4d3a:	d913      	bls.n	4d64 <process_thread_mqtt_process+0x1008>
    call_event(conn, MQTT_EVENT_PROTOCOL_ERROR, NULL);
    4d3c:	1c30      	adds	r0, r6, #0
    4d3e:	2181      	movs	r1, #129	; 0x81
    4d40:	2200      	movs	r2, #0
    4d42:	4b59      	ldr	r3, [pc, #356]	; (4ea8 <process_thread_mqtt_process+0x114c>)
    4d44:	4798      	blx	r3
    PRINTF("MQTT - Error, remaining length > 4 bytes\n\r");
    PT_EXIT(pt);
    4d46:	2200      	movs	r2, #0
    4d48:	23a7      	movs	r3, #167	; 0xa7
    4d4a:	009b      	lsls	r3, r3, #2
    4d4c:	52f2      	strh	r2, [r6, r3]
    4d4e:	e0f8      	b.n	4f42 <process_thread_mqtt_process+0x11e6>
  }

  /* Write Fixed Header */
  PT_MQTT_WRITE_BYTE(conn, conn->out_packet.fhdr);
    4d50:	4a4d      	ldr	r2, [pc, #308]	; (4e88 <process_thread_mqtt_process+0x112c>)
    4d52:	23a7      	movs	r3, #167	; 0xa7
    4d54:	009b      	lsls	r3, r3, #2
    4d56:	52f2      	strh	r2, [r6, r3]
    4d58:	239d      	movs	r3, #157	; 0x9d
    4d5a:	009b      	lsls	r3, r3, #2
    4d5c:	5cf3      	ldrb	r3, [r6, r3]
    4d5e:	2b00      	cmp	r3, #0
    4d60:	d100      	bne.n	4d64 <process_thread_mqtt_process+0x1008>
    4d62:	e313      	b.n	538c <process_thread_mqtt_process+0x1630>
    4d64:	239e      	movs	r3, #158	; 0x9e
    4d66:	009b      	lsls	r3, r3, #2
    4d68:	5cf1      	ldrb	r1, [r6, r3]
    4d6a:	1c30      	adds	r0, r6, #0
    4d6c:	4b32      	ldr	r3, [pc, #200]	; (4e38 <process_thread_mqtt_process+0x10dc>)
    4d6e:	4798      	blx	r3
    4d70:	2800      	cmp	r0, #0
    4d72:	d1ed      	bne.n	4d50 <process_thread_mqtt_process+0xff4>
    4d74:	e00a      	b.n	4d8c <process_thread_mqtt_process+0x1030>
  PT_MQTT_WRITE_BYTES(conn, (uint8_t *)conn->out_packet.remaining_length_enc,
    4d76:	2289      	movs	r2, #137	; 0x89
    4d78:	0092      	lsls	r2, r2, #2
    4d7a:	23a7      	movs	r3, #167	; 0xa7
    4d7c:	009b      	lsls	r3, r3, #2
    4d7e:	52f2      	strh	r2, [r6, r3]
    4d80:	239d      	movs	r3, #157	; 0x9d
    4d82:	009b      	lsls	r3, r3, #2
    4d84:	5cf3      	ldrb	r3, [r6, r3]
    4d86:	2b00      	cmp	r3, #0
    4d88:	d100      	bne.n	4d8c <process_thread_mqtt_process+0x1030>
    4d8a:	e2ff      	b.n	538c <process_thread_mqtt_process+0x1630>
    4d8c:	23a0      	movs	r3, #160	; 0xa0
    4d8e:	009b      	lsls	r3, r3, #2
    4d90:	18f1      	adds	r1, r6, r3
    4d92:	3304      	adds	r3, #4
    4d94:	5cf2      	ldrb	r2, [r6, r3]
    4d96:	1c30      	adds	r0, r6, #0
    4d98:	4b44      	ldr	r3, [pc, #272]	; (4eac <process_thread_mqtt_process+0x1150>)
    4d9a:	4798      	blx	r3
    4d9c:	2800      	cmp	r0, #0
    4d9e:	d1ea      	bne.n	4d76 <process_thread_mqtt_process+0x101a>
    4da0:	e009      	b.n	4db6 <process_thread_mqtt_process+0x105a>
                      conn->out_packet.remaining_length_enc_bytes);
  /* Write Variable Header */
  PT_MQTT_WRITE_BYTE(conn, (conn->out_packet.mid << 8));
    4da2:	4a3a      	ldr	r2, [pc, #232]	; (4e8c <process_thread_mqtt_process+0x1130>)
    4da4:	23a7      	movs	r3, #167	; 0xa7
    4da6:	009b      	lsls	r3, r3, #2
    4da8:	52f2      	strh	r2, [r6, r3]
    4daa:	239d      	movs	r3, #157	; 0x9d
    4dac:	009b      	lsls	r3, r3, #2
    4dae:	5cf3      	ldrb	r3, [r6, r3]
    4db0:	2b00      	cmp	r3, #0
    4db2:	d100      	bne.n	4db6 <process_thread_mqtt_process+0x105a>
    4db4:	e2ea      	b.n	538c <process_thread_mqtt_process+0x1630>
    4db6:	1c30      	adds	r0, r6, #0
    4db8:	2100      	movs	r1, #0
    4dba:	4b1f      	ldr	r3, [pc, #124]	; (4e38 <process_thread_mqtt_process+0x10dc>)
    4dbc:	4798      	blx	r3
    4dbe:	2800      	cmp	r0, #0
    4dc0:	d1ef      	bne.n	4da2 <process_thread_mqtt_process+0x1046>
    4dc2:	e009      	b.n	4dd8 <process_thread_mqtt_process+0x107c>
  PT_MQTT_WRITE_BYTE(conn, (conn->out_packet.mid & 0x00FF));
    4dc4:	4a2f      	ldr	r2, [pc, #188]	; (4e84 <process_thread_mqtt_process+0x1128>)
    4dc6:	23a7      	movs	r3, #167	; 0xa7
    4dc8:	009b      	lsls	r3, r3, #2
    4dca:	52f2      	strh	r2, [r6, r3]
    4dcc:	239d      	movs	r3, #157	; 0x9d
    4dce:	009b      	lsls	r3, r3, #2
    4dd0:	5cf3      	ldrb	r3, [r6, r3]
    4dd2:	2b00      	cmp	r3, #0
    4dd4:	d100      	bne.n	4dd8 <process_thread_mqtt_process+0x107c>
    4dd6:	e2d9      	b.n	538c <process_thread_mqtt_process+0x1630>
    4dd8:	4b35      	ldr	r3, [pc, #212]	; (4eb0 <process_thread_mqtt_process+0x1154>)
    4dda:	5cf1      	ldrb	r1, [r6, r3]
    4ddc:	1c30      	adds	r0, r6, #0
    4dde:	4b16      	ldr	r3, [pc, #88]	; (4e38 <process_thread_mqtt_process+0x10dc>)
    4de0:	4798      	blx	r3
    4de2:	2800      	cmp	r0, #0
    4de4:	d1ee      	bne.n	4dc4 <process_thread_mqtt_process+0x1068>
    4de6:	e009      	b.n	4dfc <process_thread_mqtt_process+0x10a0>
  /* Write Payload */
  PT_MQTT_WRITE_BYTE(conn, (conn->out_packet.topic_length >> 8));
    4de8:	4a2a      	ldr	r2, [pc, #168]	; (4e94 <process_thread_mqtt_process+0x1138>)
    4dea:	23a7      	movs	r3, #167	; 0xa7
    4dec:	009b      	lsls	r3, r3, #2
    4dee:	52f2      	strh	r2, [r6, r3]
    4df0:	239d      	movs	r3, #157	; 0x9d
    4df2:	009b      	lsls	r3, r3, #2
    4df4:	5cf3      	ldrb	r3, [r6, r3]
    4df6:	2b00      	cmp	r3, #0
    4df8:	d100      	bne.n	4dfc <process_thread_mqtt_process+0x10a0>
    4dfa:	e2c7      	b.n	538c <process_thread_mqtt_process+0x1630>
    4dfc:	23a3      	movs	r3, #163	; 0xa3
    4dfe:	009b      	lsls	r3, r3, #2
    4e00:	5af1      	ldrh	r1, [r6, r3]
    4e02:	0a09      	lsrs	r1, r1, #8
    4e04:	1c30      	adds	r0, r6, #0
    4e06:	4b0c      	ldr	r3, [pc, #48]	; (4e38 <process_thread_mqtt_process+0x10dc>)
    4e08:	4798      	blx	r3
    4e0a:	2800      	cmp	r0, #0
    4e0c:	d1ec      	bne.n	4de8 <process_thread_mqtt_process+0x108c>
    4e0e:	e009      	b.n	4e24 <process_thread_mqtt_process+0x10c8>
  PT_MQTT_WRITE_BYTE(conn, (conn->out_packet.topic_length & 0x00FF));
    4e10:	4a1f      	ldr	r2, [pc, #124]	; (4e90 <process_thread_mqtt_process+0x1134>)
    4e12:	23a7      	movs	r3, #167	; 0xa7
    4e14:	009b      	lsls	r3, r3, #2
    4e16:	52f2      	strh	r2, [r6, r3]
    4e18:	239d      	movs	r3, #157	; 0x9d
    4e1a:	009b      	lsls	r3, r3, #2
    4e1c:	5cf3      	ldrb	r3, [r6, r3]
    4e1e:	2b00      	cmp	r3, #0
    4e20:	d100      	bne.n	4e24 <process_thread_mqtt_process+0x10c8>
    4e22:	e2b3      	b.n	538c <process_thread_mqtt_process+0x1630>
    4e24:	23a3      	movs	r3, #163	; 0xa3
    4e26:	009b      	lsls	r3, r3, #2
    4e28:	5cf1      	ldrb	r1, [r6, r3]
    4e2a:	1c30      	adds	r0, r6, #0
    4e2c:	4b02      	ldr	r3, [pc, #8]	; (4e38 <process_thread_mqtt_process+0x10dc>)
    4e2e:	4798      	blx	r3
    4e30:	2800      	cmp	r0, #0
    4e32:	d1ed      	bne.n	4e10 <process_thread_mqtt_process+0x10b4>
    4e34:	e049      	b.n	4eca <process_thread_mqtt_process+0x116e>
    4e36:	46c0      	nop			; (mov r8, r8)
    4e38:	00003a99 	.word	0x00003a99
    4e3c:	00003a51 	.word	0x00003a51
    4e40:	0000ed5d 	.word	0x0000ed5d
    4e44:	00003285 	.word	0x00003285
    4e48:	00000299 	.word	0x00000299
    4e4c:	0000ed8d 	.word	0x0000ed8d
    4e50:	00012684 	.word	0x00012684
    4e54:	00010931 	.word	0x00010931
    4e58:	000126a4 	.word	0x000126a4
    4e5c:	20000384 	.word	0x20000384
    4e60:	20000380 	.word	0x20000380
    4e64:	000126c8 	.word	0x000126c8
    4e68:	20000379 	.word	0x20000379
    4e6c:	20001d2c 	.word	0x20001d2c
    4e70:	0000ebf9 	.word	0x0000ebf9
    4e74:	000004a6 	.word	0x000004a6
    4e78:	2000037b 	.word	0x2000037b
    4e7c:	20000375 	.word	0x20000375
    4e80:	20000376 	.word	0x20000376
    4e84:	00000227 	.word	0x00000227
    4e88:	00000222 	.word	0x00000222
    4e8c:	00000226 	.word	0x00000226
    4e90:	0000022a 	.word	0x0000022a
    4e94:	00000229 	.word	0x00000229
    4e98:	00000235 	.word	0x00000235
    4e9c:	000126f8 	.word	0x000126f8
    4ea0:	00012664 	.word	0x00012664
    4ea4:	000031f1 	.word	0x000031f1
    4ea8:	00003265 	.word	0x00003265
    4eac:	00003ad9 	.word	0x00003ad9
    4eb0:	00000286 	.word	0x00000286
  PT_MQTT_WRITE_BYTES(conn, (uint8_t *)conn->out_packet.topic,
    4eb4:	228b      	movs	r2, #139	; 0x8b
    4eb6:	0092      	lsls	r2, r2, #2
    4eb8:	23a7      	movs	r3, #167	; 0xa7
    4eba:	009b      	lsls	r3, r3, #2
    4ebc:	52f2      	strh	r2, [r6, r3]
    4ebe:	239d      	movs	r3, #157	; 0x9d
    4ec0:	009b      	lsls	r3, r3, #2
    4ec2:	5cf3      	ldrb	r3, [r6, r3]
    4ec4:	2b00      	cmp	r3, #0
    4ec6:	d100      	bne.n	4eca <process_thread_mqtt_process+0x116e>
    4ec8:	e260      	b.n	538c <process_thread_mqtt_process+0x1630>
    4eca:	23a3      	movs	r3, #163	; 0xa3
    4ecc:	009b      	lsls	r3, r3, #2
    4ece:	5af2      	ldrh	r2, [r6, r3]
    4ed0:	1c30      	adds	r0, r6, #0
    4ed2:	3b04      	subs	r3, #4
    4ed4:	58f1      	ldr	r1, [r6, r3]
    4ed6:	4bc4      	ldr	r3, [pc, #784]	; (51e8 <process_thread_mqtt_process+0x148c>)
    4ed8:	4798      	blx	r3
    4eda:	2800      	cmp	r0, #0
    4edc:	d1ea      	bne.n	4eb4 <process_thread_mqtt_process+0x1158>
                      conn->out_packet.topic_length);

  /* Send out buffer */
  send_out_buffer(conn);
    4ede:	1c30      	adds	r0, r6, #0
    4ee0:	4bc2      	ldr	r3, [pc, #776]	; (51ec <process_thread_mqtt_process+0x1490>)
    4ee2:	4798      	blx	r3
  timer_set(&conn->t, RESPONSE_WAIT_TIMEOUT);
    4ee4:	1d30      	adds	r0, r6, #4
    4ee6:	21a0      	movs	r1, #160	; 0xa0
    4ee8:	00c9      	lsls	r1, r1, #3
    4eea:	4bc1      	ldr	r3, [pc, #772]	; (51f0 <process_thread_mqtt_process+0x1494>)
    4eec:	4798      	blx	r3

  /* Wait for UNSUBACK */
  reset_packet(&conn->in_packet);
    4eee:	2395      	movs	r3, #149	; 0x95
    4ef0:	00db      	lsls	r3, r3, #3
    4ef2:	18f0      	adds	r0, r6, r3
    4ef4:	4bbf      	ldr	r3, [pc, #764]	; (51f4 <process_thread_mqtt_process+0x1498>)
    4ef6:	4798      	blx	r3
  PT_WAIT_UNTIL(pt, conn->out_packet.qos_state == MQTT_QOS_STATE_GOT_ACK ||
    4ef8:	4abf      	ldr	r2, [pc, #764]	; (51f8 <process_thread_mqtt_process+0x149c>)
    4efa:	23a7      	movs	r3, #167	; 0xa7
    4efc:	009b      	lsls	r3, r3, #2
    4efe:	52f2      	strh	r2, [r6, r3]
    4f00:	4bbe      	ldr	r3, [pc, #760]	; (51fc <process_thread_mqtt_process+0x14a0>)
    4f02:	5cf3      	ldrb	r3, [r6, r3]
    4f04:	2b01      	cmp	r3, #1
    4f06:	d005      	beq.n	4f14 <process_thread_mqtt_process+0x11b8>
    4f08:	1d30      	adds	r0, r6, #4
    4f0a:	4bbd      	ldr	r3, [pc, #756]	; (5200 <process_thread_mqtt_process+0x14a4>)
    4f0c:	4798      	blx	r3
    4f0e:	2800      	cmp	r0, #0
    4f10:	d100      	bne.n	4f14 <process_thread_mqtt_process+0x11b8>
    4f12:	e23b      	b.n	538c <process_thread_mqtt_process+0x1630>
                timer_expired(&conn->t));

  if(timer_expired(&conn->t)) {
    4f14:	1d30      	adds	r0, r6, #4
    4f16:	4bba      	ldr	r3, [pc, #744]	; (5200 <process_thread_mqtt_process+0x14a4>)
    4f18:	4798      	blx	r3
    4f1a:	2800      	cmp	r0, #0
    4f1c:	d002      	beq.n	4f24 <process_thread_mqtt_process+0x11c8>
    DBG("Timeout waiting for UNSUBACK\n\r");
    4f1e:	48b9      	ldr	r0, [pc, #740]	; (5204 <process_thread_mqtt_process+0x14a8>)
    4f20:	4bb9      	ldr	r3, [pc, #740]	; (5208 <process_thread_mqtt_process+0x14ac>)
    4f22:	4798      	blx	r3
  }

  reset_packet(&conn->in_packet);
    4f24:	2395      	movs	r3, #149	; 0x95
    4f26:	00db      	lsls	r3, r3, #3
    4f28:	18f0      	adds	r0, r6, r3
    4f2a:	4bb2      	ldr	r3, [pc, #712]	; (51f4 <process_thread_mqtt_process+0x1498>)
    4f2c:	4798      	blx	r3

  /* This is clear after the entire transaction is complete */
  conn->out_queue_full = 0;
    4f2e:	2200      	movs	r2, #0
    4f30:	236a      	movs	r3, #106	; 0x6a
    4f32:	54f2      	strb	r2, [r6, r3]

  DBG("MQTT - Done writing subscribe message to out buffer!\n\r");
    4f34:	48b5      	ldr	r0, [pc, #724]	; (520c <process_thread_mqtt_process+0x14b0>)
    4f36:	4bb4      	ldr	r3, [pc, #720]	; (5208 <process_thread_mqtt_process+0x14ac>)
    4f38:	4798      	blx	r3

  PT_END(pt);
    4f3a:	2200      	movs	r2, #0
    4f3c:	23a7      	movs	r3, #167	; 0xa7
    4f3e:	009b      	lsls	r3, r3, #2
    4f40:	52f2      	strh	r2, [r6, r3]
              conn->state == MQTT_CONN_STATE_CONNECTED_TO_BROKER) {
          PT_MQTT_WAIT_SEND();
        }
      }
    }
    if(ev == mqtt_do_publish_event) {
    4f42:	230f      	movs	r3, #15
    4f44:	446b      	add	r3, sp
    4f46:	781a      	ldrb	r2, [r3, #0]
    4f48:	4bb1      	ldr	r3, [pc, #708]	; (5210 <process_thread_mqtt_process+0x14b4>)
    4f4a:	781b      	ldrb	r3, [r3, #0]
    4f4c:	429a      	cmp	r2, r3
    4f4e:	d001      	beq.n	4f54 <process_thread_mqtt_process+0x11f8>
    4f50:	f7fe ff3a 	bl	3dc8 <process_thread_mqtt_process+0x6c>
      conn = data;
    4f54:	4eaf      	ldr	r6, [pc, #700]	; (5214 <process_thread_mqtt_process+0x14b8>)
    4f56:	6035      	str	r5, [r6, #0]
      DBG("MQTT - Got mqtt_do_publish_mqtt_event!\n\r");
    4f58:	48af      	ldr	r0, [pc, #700]	; (5218 <process_thread_mqtt_process+0x14bc>)
    4f5a:	4bab      	ldr	r3, [pc, #684]	; (5208 <process_thread_mqtt_process+0x14ac>)
    4f5c:	4798      	blx	r3

      if(conn->out_buffer_sent == 1 &&
    4f5e:	6833      	ldr	r3, [r6, #0]
    4f60:	229d      	movs	r2, #157	; 0x9d
    4f62:	0092      	lsls	r2, r2, #2
    4f64:	5c9a      	ldrb	r2, [r3, r2]
    4f66:	2a01      	cmp	r2, #1
    4f68:	d001      	beq.n	4f6e <process_thread_mqtt_process+0x1212>
    4f6a:	f7fe ff2d 	bl	3dc8 <process_thread_mqtt_process+0x6c>
         conn->state == MQTT_CONN_STATE_CONNECTED_TO_BROKER) {
    4f6e:	325f      	adds	r2, #95	; 0x5f
    }
    if(ev == mqtt_do_publish_event) {
      conn = data;
      DBG("MQTT - Got mqtt_do_publish_mqtt_event!\n\r");

      if(conn->out_buffer_sent == 1 &&
    4f70:	5c9a      	ldrb	r2, [r3, r2]
    4f72:	2a08      	cmp	r2, #8
    4f74:	d001      	beq.n	4f7a <process_thread_mqtt_process+0x121e>
    4f76:	f7fe ff27 	bl	3dc8 <process_thread_mqtt_process+0x6c>
         conn->state == MQTT_CONN_STATE_CONNECTED_TO_BROKER) {
        PT_INIT(&conn->out_proto_thread);
    4f7a:	2100      	movs	r1, #0
    4f7c:	22a7      	movs	r2, #167	; 0xa7
    4f7e:	0092      	lsls	r2, r2, #2
    4f80:	5299      	strh	r1, [r3, r2]
        while(publish_pt(&conn->out_proto_thread, conn) < PT_EXITED &&
    4f82:	e029      	b.n	4fd8 <process_thread_mqtt_process+0x127c>
              conn->state == MQTT_CONN_STATE_CONNECTED_TO_BROKER) {
          PT_MQTT_WAIT_SEND();
    4f84:	4ba5      	ldr	r3, [pc, #660]	; (521c <process_thread_mqtt_process+0x14c0>)
    4f86:	7819      	ldrb	r1, [r3, #0]
    4f88:	4ba5      	ldr	r3, [pc, #660]	; (5220 <process_thread_mqtt_process+0x14c4>)
    4f8a:	6818      	ldr	r0, [r3, #0]
    4f8c:	2200      	movs	r2, #0
    4f8e:	4ba5      	ldr	r3, [pc, #660]	; (5224 <process_thread_mqtt_process+0x14c8>)
    4f90:	4798      	blx	r3
    4f92:	4ba5      	ldr	r3, [pc, #660]	; (5228 <process_thread_mqtt_process+0x14cc>)
    4f94:	8023      	strh	r3, [r4, #0]
    4f96:	2001      	movs	r0, #1
    4f98:	e209      	b.n	53ae <process_thread_mqtt_process+0x1652>
    4f9a:	230f      	movs	r3, #15
    4f9c:	446b      	add	r3, sp
    4f9e:	7819      	ldrb	r1, [r3, #0]
    4fa0:	4ba2      	ldr	r3, [pc, #648]	; (522c <process_thread_mqtt_process+0x14d0>)
    4fa2:	781b      	ldrb	r3, [r3, #0]
    4fa4:	428b      	cmp	r3, r1
    4fa6:	d10a      	bne.n	4fbe <process_thread_mqtt_process+0x1262>
    4fa8:	4b9a      	ldr	r3, [pc, #616]	; (5214 <process_thread_mqtt_process+0x14b8>)
    4faa:	681b      	ldr	r3, [r3, #0]
    4fac:	210a      	movs	r1, #10
    4fae:	2260      	movs	r2, #96	; 0x60
    4fb0:	5499      	strb	r1, [r3, r2]
    4fb2:	2100      	movs	r1, #0
    4fb4:	22a7      	movs	r2, #167	; 0xa7
    4fb6:	0092      	lsls	r2, r2, #2
    4fb8:	5299      	strh	r1, [r3, r2]
    4fba:	2002      	movs	r0, #2
    4fbc:	e1f7      	b.n	53ae <process_thread_mqtt_process+0x1652>
    4fbe:	4b9c      	ldr	r3, [pc, #624]	; (5230 <process_thread_mqtt_process+0x14d4>)
    4fc0:	781b      	ldrb	r3, [r3, #0]
    4fc2:	428b      	cmp	r3, r1
    4fc4:	d808      	bhi.n	4fd8 <process_thread_mqtt_process+0x127c>
    4fc6:	4b9b      	ldr	r3, [pc, #620]	; (5234 <process_thread_mqtt_process+0x14d8>)
    4fc8:	781b      	ldrb	r3, [r3, #0]
    4fca:	428b      	cmp	r3, r1
    4fcc:	d304      	bcc.n	4fd8 <process_thread_mqtt_process+0x127c>
    4fce:	4b94      	ldr	r3, [pc, #592]	; (5220 <process_thread_mqtt_process+0x14c4>)
    4fd0:	6818      	ldr	r0, [r3, #0]
    4fd2:	1c2a      	adds	r2, r5, #0
    4fd4:	4b93      	ldr	r3, [pc, #588]	; (5224 <process_thread_mqtt_process+0x14c8>)
    4fd6:	4798      	blx	r3
      DBG("MQTT - Got mqtt_do_publish_mqtt_event!\n\r");

      if(conn->out_buffer_sent == 1 &&
         conn->state == MQTT_CONN_STATE_CONNECTED_TO_BROKER) {
        PT_INIT(&conn->out_proto_thread);
        while(publish_pt(&conn->out_proto_thread, conn) < PT_EXITED &&
    4fd8:	4b8e      	ldr	r3, [pc, #568]	; (5214 <process_thread_mqtt_process+0x14b8>)
    4fda:	681d      	ldr	r5, [r3, #0]
}
/*---------------------------------------------------------------------------*/
static
PT_THREAD(publish_pt(struct pt *pt, struct mqtt_connection *conn))
{
  PT_BEGIN(pt);
    4fdc:	23a7      	movs	r3, #167	; 0xa7
    4fde:	009b      	lsls	r3, r3, #2
    4fe0:	5aeb      	ldrh	r3, [r5, r3]
    4fe2:	4a95      	ldr	r2, [pc, #596]	; (5238 <process_thread_mqtt_process+0x14dc>)
    4fe4:	4293      	cmp	r3, r2
    4fe6:	d100      	bne.n	4fea <process_thread_mqtt_process+0x128e>
    4fe8:	e0b1      	b.n	514e <process_thread_mqtt_process+0x13f2>
    4fea:	d80f      	bhi.n	500c <process_thread_mqtt_process+0x12b0>
    4fec:	4a93      	ldr	r2, [pc, #588]	; (523c <process_thread_mqtt_process+0x14e0>)
    4fee:	4293      	cmp	r3, r2
    4ff0:	d070      	beq.n	50d4 <process_thread_mqtt_process+0x1378>
    4ff2:	d802      	bhi.n	4ffa <process_thread_mqtt_process+0x129e>
    4ff4:	2b00      	cmp	r3, #0
    4ff6:	d021      	beq.n	503c <process_thread_mqtt_process+0x12e0>
    4ff8:	e197      	b.n	532a <process_thread_mqtt_process+0x15ce>
    4ffa:	229a      	movs	r2, #154	; 0x9a
    4ffc:	0092      	lsls	r2, r2, #2
    4ffe:	4293      	cmp	r3, r2
    5000:	d07c      	beq.n	50fc <process_thread_mqtt_process+0x13a0>
    5002:	4a8f      	ldr	r2, [pc, #572]	; (5240 <process_thread_mqtt_process+0x14e4>)
    5004:	4293      	cmp	r3, r2
    5006:	d100      	bne.n	500a <process_thread_mqtt_process+0x12ae>
    5008:	e08d      	b.n	5126 <process_thread_mqtt_process+0x13ca>
    500a:	e18e      	b.n	532a <process_thread_mqtt_process+0x15ce>
    500c:	229c      	movs	r2, #156	; 0x9c
    500e:	0092      	lsls	r2, r2, #2
    5010:	4293      	cmp	r3, r2
    5012:	d100      	bne.n	5016 <process_thread_mqtt_process+0x12ba>
    5014:	e0da      	b.n	51cc <process_thread_mqtt_process+0x1470>
    5016:	d808      	bhi.n	502a <process_thread_mqtt_process+0x12ce>
    5018:	4a8a      	ldr	r2, [pc, #552]	; (5244 <process_thread_mqtt_process+0x14e8>)
    501a:	4293      	cmp	r3, r2
    501c:	d100      	bne.n	5020 <process_thread_mqtt_process+0x12c4>
    501e:	e0a9      	b.n	5174 <process_thread_mqtt_process+0x1418>
    5020:	4a89      	ldr	r2, [pc, #548]	; (5248 <process_thread_mqtt_process+0x14ec>)
    5022:	4293      	cmp	r3, r2
    5024:	d100      	bne.n	5028 <process_thread_mqtt_process+0x12cc>
    5026:	e0bf      	b.n	51a8 <process_thread_mqtt_process+0x144c>
    5028:	e17f      	b.n	532a <process_thread_mqtt_process+0x15ce>
    502a:	4a88      	ldr	r2, [pc, #544]	; (524c <process_thread_mqtt_process+0x14f0>)
    502c:	4293      	cmp	r3, r2
    502e:	d100      	bne.n	5032 <process_thread_mqtt_process+0x12d6>
    5030:	e120      	b.n	5274 <process_thread_mqtt_process+0x1518>
    5032:	4a87      	ldr	r2, [pc, #540]	; (5250 <process_thread_mqtt_process+0x14f4>)
    5034:	4293      	cmp	r3, r2
    5036:	d100      	bne.n	503a <process_thread_mqtt_process+0x12de>
    5038:	e14c      	b.n	52d4 <process_thread_mqtt_process+0x1578>
    503a:	e176      	b.n	532a <process_thread_mqtt_process+0x15ce>

  DBG("MQTT - Sending publish message! topic %s topic_length %i\n\r",
    503c:	23a3      	movs	r3, #163	; 0xa3
    503e:	009b      	lsls	r3, r3, #2
    5040:	5aea      	ldrh	r2, [r5, r3]
    5042:	4884      	ldr	r0, [pc, #528]	; (5254 <process_thread_mqtt_process+0x14f8>)
    5044:	3b04      	subs	r3, #4
    5046:	58e9      	ldr	r1, [r5, r3]
    5048:	4e6f      	ldr	r6, [pc, #444]	; (5208 <process_thread_mqtt_process+0x14ac>)
    504a:	47b0      	blx	r6
      conn->out_packet.topic,
      conn->out_packet.topic_length);
  DBG("MQTT - Buffer space is %i \n\r",
    504c:	239d      	movs	r3, #157	; 0x9d
    504e:	009b      	lsls	r3, r3, #2
    5050:	18eb      	adds	r3, r5, r3
    5052:	6f2a      	ldr	r2, [r5, #112]	; 0x70
    5054:	1a99      	subs	r1, r3, r2
    5056:	4880      	ldr	r0, [pc, #512]	; (5258 <process_thread_mqtt_process+0x14fc>)
    5058:	47b0      	blx	r6
      &conn->out_buffer[MQTT_TCP_OUTPUT_BUFF_SIZE] - conn->out_buffer_ptr);

  /* Set up FHDR */
  conn->out_packet.fhdr = MQTT_FHDR_MSG_TYPE_PUBLISH |
    conn->out_packet.qos << 1;
    505a:	23a6      	movs	r3, #166	; 0xa6
    505c:	009b      	lsls	r3, r3, #2
    505e:	5cea      	ldrb	r2, [r5, r3]
    5060:	0053      	lsls	r3, r2, #1
      conn->out_packet.topic_length);
  DBG("MQTT - Buffer space is %i \n\r",
      &conn->out_buffer[MQTT_TCP_OUTPUT_BUFF_SIZE] - conn->out_buffer_ptr);

  /* Set up FHDR */
  conn->out_packet.fhdr = MQTT_FHDR_MSG_TYPE_PUBLISH |
    5062:	2130      	movs	r1, #48	; 0x30
    5064:	430b      	orrs	r3, r1
    5066:	b2db      	uxtb	r3, r3
    5068:	219e      	movs	r1, #158	; 0x9e
    506a:	0089      	lsls	r1, r1, #2
    506c:	546b      	strb	r3, [r5, r1]
    conn->out_packet.qos << 1;
  if(conn->out_packet.retain == MQTT_RETAIN_ON) {
    506e:	497b      	ldr	r1, [pc, #492]	; (525c <process_thread_mqtt_process+0x1500>)
    5070:	5c69      	ldrb	r1, [r5, r1]
    5072:	2901      	cmp	r1, #1
    5074:	d103      	bne.n	507e <process_thread_mqtt_process+0x1322>
    conn->out_packet.fhdr |= MQTT_FHDR_RETAIN_FLAG;
    5076:	430b      	orrs	r3, r1
    5078:	219e      	movs	r1, #158	; 0x9e
    507a:	0089      	lsls	r1, r1, #2
    507c:	546b      	strb	r3, [r5, r1]
  }
  conn->out_packet.remaining_length = MQTT_STRING_LEN_SIZE +
    conn->out_packet.topic_length +
    507e:	23a3      	movs	r3, #163	; 0xa3
    5080:	009b      	lsls	r3, r3, #2
    5082:	5ae9      	ldrh	r1, [r5, r3]
    conn->out_packet.payload_size;
    5084:	3308      	adds	r3, #8
    conn->out_packet.qos << 1;
  if(conn->out_packet.retain == MQTT_RETAIN_ON) {
    conn->out_packet.fhdr |= MQTT_FHDR_RETAIN_FLAG;
  }
  conn->out_packet.remaining_length = MQTT_STRING_LEN_SIZE +
    conn->out_packet.topic_length +
    5086:	58eb      	ldr	r3, [r5, r3]
    5088:	18cb      	adds	r3, r1, r3
    508a:	1c98      	adds	r0, r3, #2
  conn->out_packet.fhdr = MQTT_FHDR_MSG_TYPE_PUBLISH |
    conn->out_packet.qos << 1;
  if(conn->out_packet.retain == MQTT_RETAIN_ON) {
    conn->out_packet.fhdr |= MQTT_FHDR_RETAIN_FLAG;
  }
  conn->out_packet.remaining_length = MQTT_STRING_LEN_SIZE +
    508c:	219f      	movs	r1, #159	; 0x9f
    508e:	0089      	lsls	r1, r1, #2
    5090:	5068      	str	r0, [r5, r1]
    conn->out_packet.topic_length +
    conn->out_packet.payload_size;
  if(conn->out_packet.qos > MQTT_QOS_LEVEL_0) {
    5092:	2a00      	cmp	r2, #0
    5094:	d001      	beq.n	509a <process_thread_mqtt_process+0x133e>
    conn->out_packet.remaining_length += MQTT_MID_SIZE;
    5096:	3304      	adds	r3, #4
    5098:	506b      	str	r3, [r5, r1]
  }
  encode_remaining_length(conn->out_packet.remaining_length_enc,
    509a:	23a0      	movs	r3, #160	; 0xa0
    509c:	009b      	lsls	r3, r3, #2
    509e:	18e8      	adds	r0, r5, r3
    50a0:	3304      	adds	r3, #4
    50a2:	18e9      	adds	r1, r5, r3
    50a4:	3b08      	subs	r3, #8
    50a6:	58ea      	ldr	r2, [r5, r3]
    50a8:	4b6d      	ldr	r3, [pc, #436]	; (5260 <process_thread_mqtt_process+0x1504>)
    50aa:	4798      	blx	r3
                          &conn->out_packet.remaining_length_enc_bytes,
                          conn->out_packet.remaining_length);
  if(conn->out_packet.remaining_length_enc_bytes > 4) {
    50ac:	23a1      	movs	r3, #161	; 0xa1
    50ae:	009b      	lsls	r3, r3, #2
    50b0:	5ceb      	ldrb	r3, [r5, r3]
    50b2:	2b04      	cmp	r3, #4
    50b4:	d914      	bls.n	50e0 <process_thread_mqtt_process+0x1384>
    call_event(conn, MQTT_EVENT_PROTOCOL_ERROR, NULL);
    50b6:	1c28      	adds	r0, r5, #0
    50b8:	2181      	movs	r1, #129	; 0x81
    50ba:	2200      	movs	r2, #0
    50bc:	4b69      	ldr	r3, [pc, #420]	; (5264 <process_thread_mqtt_process+0x1508>)
    50be:	4798      	blx	r3
    PRINTF("MQTT - Error, remaining length > 4 bytes\n\r");
    PT_EXIT(pt);
    50c0:	2200      	movs	r2, #0
    50c2:	23a7      	movs	r3, #167	; 0xa7
    50c4:	009b      	lsls	r3, r3, #2
    50c6:	52ea      	strh	r2, [r5, r3]
    50c8:	f7fe fe7e 	bl	3dc8 <process_thread_mqtt_process+0x6c>
  }

  /* Write Fixed Header */
  PT_MQTT_WRITE_BYTE(conn, conn->out_packet.fhdr);
    50cc:	4a5b      	ldr	r2, [pc, #364]	; (523c <process_thread_mqtt_process+0x14e0>)
    50ce:	23a7      	movs	r3, #167	; 0xa7
    50d0:	009b      	lsls	r3, r3, #2
    50d2:	52ea      	strh	r2, [r5, r3]
    50d4:	239d      	movs	r3, #157	; 0x9d
    50d6:	009b      	lsls	r3, r3, #2
    50d8:	5ceb      	ldrb	r3, [r5, r3]
    50da:	2b00      	cmp	r3, #0
    50dc:	d100      	bne.n	50e0 <process_thread_mqtt_process+0x1384>
    50de:	e15d      	b.n	539c <process_thread_mqtt_process+0x1640>
    50e0:	239e      	movs	r3, #158	; 0x9e
    50e2:	009b      	lsls	r3, r3, #2
    50e4:	5ce9      	ldrb	r1, [r5, r3]
    50e6:	1c28      	adds	r0, r5, #0
    50e8:	4b5f      	ldr	r3, [pc, #380]	; (5268 <process_thread_mqtt_process+0x150c>)
    50ea:	4798      	blx	r3
    50ec:	2800      	cmp	r0, #0
    50ee:	d1ed      	bne.n	50cc <process_thread_mqtt_process+0x1370>
    50f0:	e00a      	b.n	5108 <process_thread_mqtt_process+0x13ac>
  PT_MQTT_WRITE_BYTES(conn, (uint8_t *)conn->out_packet.remaining_length_enc,
    50f2:	229a      	movs	r2, #154	; 0x9a
    50f4:	0092      	lsls	r2, r2, #2
    50f6:	23a7      	movs	r3, #167	; 0xa7
    50f8:	009b      	lsls	r3, r3, #2
    50fa:	52ea      	strh	r2, [r5, r3]
    50fc:	239d      	movs	r3, #157	; 0x9d
    50fe:	009b      	lsls	r3, r3, #2
    5100:	5ceb      	ldrb	r3, [r5, r3]
    5102:	2b00      	cmp	r3, #0
    5104:	d100      	bne.n	5108 <process_thread_mqtt_process+0x13ac>
    5106:	e149      	b.n	539c <process_thread_mqtt_process+0x1640>
    5108:	23a0      	movs	r3, #160	; 0xa0
    510a:	009b      	lsls	r3, r3, #2
    510c:	18e9      	adds	r1, r5, r3
    510e:	3304      	adds	r3, #4
    5110:	5cea      	ldrb	r2, [r5, r3]
    5112:	1c28      	adds	r0, r5, #0
    5114:	4b34      	ldr	r3, [pc, #208]	; (51e8 <process_thread_mqtt_process+0x148c>)
    5116:	4798      	blx	r3
    5118:	2800      	cmp	r0, #0
    511a:	d1ea      	bne.n	50f2 <process_thread_mqtt_process+0x1396>
    511c:	e009      	b.n	5132 <process_thread_mqtt_process+0x13d6>
                      conn->out_packet.remaining_length_enc_bytes);
  /* Write Variable Header */
  PT_MQTT_WRITE_BYTE(conn, (conn->out_packet.topic_length >> 8));
    511e:	4a48      	ldr	r2, [pc, #288]	; (5240 <process_thread_mqtt_process+0x14e4>)
    5120:	23a7      	movs	r3, #167	; 0xa7
    5122:	009b      	lsls	r3, r3, #2
    5124:	52ea      	strh	r2, [r5, r3]
    5126:	239d      	movs	r3, #157	; 0x9d
    5128:	009b      	lsls	r3, r3, #2
    512a:	5ceb      	ldrb	r3, [r5, r3]
    512c:	2b00      	cmp	r3, #0
    512e:	d100      	bne.n	5132 <process_thread_mqtt_process+0x13d6>
    5130:	e134      	b.n	539c <process_thread_mqtt_process+0x1640>
    5132:	23a3      	movs	r3, #163	; 0xa3
    5134:	009b      	lsls	r3, r3, #2
    5136:	5ae9      	ldrh	r1, [r5, r3]
    5138:	0a09      	lsrs	r1, r1, #8
    513a:	1c28      	adds	r0, r5, #0
    513c:	4b4a      	ldr	r3, [pc, #296]	; (5268 <process_thread_mqtt_process+0x150c>)
    513e:	4798      	blx	r3
    5140:	2800      	cmp	r0, #0
    5142:	d1ec      	bne.n	511e <process_thread_mqtt_process+0x13c2>
    5144:	e009      	b.n	515a <process_thread_mqtt_process+0x13fe>
  PT_MQTT_WRITE_BYTE(conn, (conn->out_packet.topic_length & 0x00FF));
    5146:	4a3c      	ldr	r2, [pc, #240]	; (5238 <process_thread_mqtt_process+0x14dc>)
    5148:	23a7      	movs	r3, #167	; 0xa7
    514a:	009b      	lsls	r3, r3, #2
    514c:	52ea      	strh	r2, [r5, r3]
    514e:	239d      	movs	r3, #157	; 0x9d
    5150:	009b      	lsls	r3, r3, #2
    5152:	5ceb      	ldrb	r3, [r5, r3]
    5154:	2b00      	cmp	r3, #0
    5156:	d100      	bne.n	515a <process_thread_mqtt_process+0x13fe>
    5158:	e120      	b.n	539c <process_thread_mqtt_process+0x1640>
    515a:	23a3      	movs	r3, #163	; 0xa3
    515c:	009b      	lsls	r3, r3, #2
    515e:	5ce9      	ldrb	r1, [r5, r3]
    5160:	1c28      	adds	r0, r5, #0
    5162:	4b41      	ldr	r3, [pc, #260]	; (5268 <process_thread_mqtt_process+0x150c>)
    5164:	4798      	blx	r3
    5166:	2800      	cmp	r0, #0
    5168:	d1ed      	bne.n	5146 <process_thread_mqtt_process+0x13ea>
    516a:	e009      	b.n	5180 <process_thread_mqtt_process+0x1424>
  PT_MQTT_WRITE_BYTES(conn, (uint8_t *)conn->out_packet.topic,
    516c:	4a35      	ldr	r2, [pc, #212]	; (5244 <process_thread_mqtt_process+0x14e8>)
    516e:	23a7      	movs	r3, #167	; 0xa7
    5170:	009b      	lsls	r3, r3, #2
    5172:	52ea      	strh	r2, [r5, r3]
    5174:	239d      	movs	r3, #157	; 0x9d
    5176:	009b      	lsls	r3, r3, #2
    5178:	5ceb      	ldrb	r3, [r5, r3]
    517a:	2b00      	cmp	r3, #0
    517c:	d100      	bne.n	5180 <process_thread_mqtt_process+0x1424>
    517e:	e10d      	b.n	539c <process_thread_mqtt_process+0x1640>
    5180:	23a3      	movs	r3, #163	; 0xa3
    5182:	009b      	lsls	r3, r3, #2
    5184:	5aea      	ldrh	r2, [r5, r3]
    5186:	1c28      	adds	r0, r5, #0
    5188:	3b04      	subs	r3, #4
    518a:	58e9      	ldr	r1, [r5, r3]
    518c:	4b16      	ldr	r3, [pc, #88]	; (51e8 <process_thread_mqtt_process+0x148c>)
    518e:	4798      	blx	r3
    5190:	2800      	cmp	r0, #0
    5192:	d1eb      	bne.n	516c <process_thread_mqtt_process+0x1410>
                      conn->out_packet.topic_length);
  if(conn->out_packet.qos > MQTT_QOS_LEVEL_0) {
    5194:	23a6      	movs	r3, #166	; 0xa6
    5196:	009b      	lsls	r3, r3, #2
    5198:	5ceb      	ldrb	r3, [r5, r3]
    519a:	2b00      	cmp	r3, #0
    519c:	d10a      	bne.n	51b4 <process_thread_mqtt_process+0x1458>
    519e:	e06f      	b.n	5280 <process_thread_mqtt_process+0x1524>
    PT_MQTT_WRITE_BYTE(conn, (conn->out_packet.mid << 8));
    51a0:	4a29      	ldr	r2, [pc, #164]	; (5248 <process_thread_mqtt_process+0x14ec>)
    51a2:	23a7      	movs	r3, #167	; 0xa7
    51a4:	009b      	lsls	r3, r3, #2
    51a6:	52ea      	strh	r2, [r5, r3]
    51a8:	239d      	movs	r3, #157	; 0x9d
    51aa:	009b      	lsls	r3, r3, #2
    51ac:	5ceb      	ldrb	r3, [r5, r3]
    51ae:	2b00      	cmp	r3, #0
    51b0:	d100      	bne.n	51b4 <process_thread_mqtt_process+0x1458>
    51b2:	e0f3      	b.n	539c <process_thread_mqtt_process+0x1640>
    51b4:	1c28      	adds	r0, r5, #0
    51b6:	2100      	movs	r1, #0
    51b8:	4b2b      	ldr	r3, [pc, #172]	; (5268 <process_thread_mqtt_process+0x150c>)
    51ba:	4798      	blx	r3
    51bc:	2800      	cmp	r0, #0
    51be:	d1ef      	bne.n	51a0 <process_thread_mqtt_process+0x1444>
    51c0:	e00a      	b.n	51d8 <process_thread_mqtt_process+0x147c>
    PT_MQTT_WRITE_BYTE(conn, (conn->out_packet.mid & 0x00FF));
    51c2:	229c      	movs	r2, #156	; 0x9c
    51c4:	0092      	lsls	r2, r2, #2
    51c6:	23a7      	movs	r3, #167	; 0xa7
    51c8:	009b      	lsls	r3, r3, #2
    51ca:	52ea      	strh	r2, [r5, r3]
    51cc:	239d      	movs	r3, #157	; 0x9d
    51ce:	009b      	lsls	r3, r3, #2
    51d0:	5ceb      	ldrb	r3, [r5, r3]
    51d2:	2b00      	cmp	r3, #0
    51d4:	d100      	bne.n	51d8 <process_thread_mqtt_process+0x147c>
    51d6:	e0e1      	b.n	539c <process_thread_mqtt_process+0x1640>
    51d8:	4b1d      	ldr	r3, [pc, #116]	; (5250 <process_thread_mqtt_process+0x14f4>)
    51da:	5ce9      	ldrb	r1, [r5, r3]
    51dc:	1c28      	adds	r0, r5, #0
    51de:	4b22      	ldr	r3, [pc, #136]	; (5268 <process_thread_mqtt_process+0x150c>)
    51e0:	4798      	blx	r3
    51e2:	2800      	cmp	r0, #0
    51e4:	d1ed      	bne.n	51c2 <process_thread_mqtt_process+0x1466>
    51e6:	e04b      	b.n	5280 <process_thread_mqtt_process+0x1524>
    51e8:	00003ad9 	.word	0x00003ad9
    51ec:	00003a51 	.word	0x00003a51
    51f0:	0000ed5d 	.word	0x0000ed5d
    51f4:	00003285 	.word	0x00003285
    51f8:	00000235 	.word	0x00000235
    51fc:	00000299 	.word	0x00000299
    5200:	0000ed8d 	.word	0x0000ed8d
    5204:	0001273c 	.word	0x0001273c
    5208:	00010931 	.word	0x00010931
    520c:	0001275c 	.word	0x0001275c
    5210:	20000378 	.word	0x20000378
    5214:	20000380 	.word	0x20000380
    5218:	00012794 	.word	0x00012794
    521c:	20000379 	.word	0x20000379
    5220:	20001d2c 	.word	0x20001d2c
    5224:	0000ebf9 	.word	0x0000ebf9
    5228:	000004b3 	.word	0x000004b3
    522c:	2000037b 	.word	0x2000037b
    5230:	20000375 	.word	0x20000375
    5234:	20000376 	.word	0x20000376
    5238:	0000026b 	.word	0x0000026b
    523c:	00000266 	.word	0x00000266
    5240:	0000026a 	.word	0x0000026a
    5244:	0000026d 	.word	0x0000026d
    5248:	0000026f 	.word	0x0000026f
    524c:	00000275 	.word	0x00000275
    5250:	00000286 	.word	0x00000286
    5254:	000127c0 	.word	0x000127c0
    5258:	00012664 	.word	0x00012664
    525c:	0000029a 	.word	0x0000029a
    5260:	000031f1 	.word	0x000031f1
    5264:	00003265 	.word	0x00003265
    5268:	00003a99 	.word	0x00003a99
  }
  /* Write Payload */
  PT_MQTT_WRITE_BYTES(conn,
    526c:	4a53      	ldr	r2, [pc, #332]	; (53bc <process_thread_mqtt_process+0x1660>)
    526e:	23a7      	movs	r3, #167	; 0xa7
    5270:	009b      	lsls	r3, r3, #2
    5272:	52ea      	strh	r2, [r5, r3]
    5274:	239d      	movs	r3, #157	; 0x9d
    5276:	009b      	lsls	r3, r3, #2
    5278:	5ceb      	ldrb	r3, [r5, r3]
    527a:	2b00      	cmp	r3, #0
    527c:	d100      	bne.n	5280 <process_thread_mqtt_process+0x1524>
    527e:	e08d      	b.n	539c <process_thread_mqtt_process+0x1640>
    5280:	23a5      	movs	r3, #165	; 0xa5
    5282:	009b      	lsls	r3, r3, #2
    5284:	58ea      	ldr	r2, [r5, r3]
    5286:	b292      	uxth	r2, r2
    5288:	1c28      	adds	r0, r5, #0
    528a:	3b04      	subs	r3, #4
    528c:	58e9      	ldr	r1, [r5, r3]
    528e:	4b4c      	ldr	r3, [pc, #304]	; (53c0 <process_thread_mqtt_process+0x1664>)
    5290:	4798      	blx	r3
    5292:	2800      	cmp	r0, #0
    5294:	d1ea      	bne.n	526c <process_thread_mqtt_process+0x1510>
                      conn->out_packet.payload,
                      conn->out_packet.payload_size);

  send_out_buffer(conn);
    5296:	1c28      	adds	r0, r5, #0
    5298:	4b4a      	ldr	r3, [pc, #296]	; (53c4 <process_thread_mqtt_process+0x1668>)
    529a:	4798      	blx	r3
  timer_set(&conn->t, RESPONSE_WAIT_TIMEOUT);
    529c:	1d28      	adds	r0, r5, #4
    529e:	21a0      	movs	r1, #160	; 0xa0
    52a0:	00c9      	lsls	r1, r1, #3
    52a2:	4b49      	ldr	r3, [pc, #292]	; (53c8 <process_thread_mqtt_process+0x166c>)
    52a4:	4798      	blx	r3
   * If QoS is zero then wait until the message has been sent, since there is
   * no ACK to wait for.
   *
   * Also notify the app will not be notified via PUBACK or PUBCOMP
   */
  if(conn->out_packet.qos == 0) {
    52a6:	23a6      	movs	r3, #166	; 0xa6
    52a8:	009b      	lsls	r3, r3, #2
    52aa:	5ceb      	ldrb	r3, [r5, r3]
    52ac:	2b00      	cmp	r3, #0
    52ae:	d106      	bne.n	52be <process_thread_mqtt_process+0x1562>
    process_post(conn->app_process, mqtt_update_event, NULL);
    52b0:	4b46      	ldr	r3, [pc, #280]	; (53cc <process_thread_mqtt_process+0x1670>)
    52b2:	7819      	ldrb	r1, [r3, #0]
    52b4:	6ee8      	ldr	r0, [r5, #108]	; 0x6c
    52b6:	2200      	movs	r2, #0
    52b8:	4b45      	ldr	r3, [pc, #276]	; (53d0 <process_thread_mqtt_process+0x1674>)
    52ba:	4798      	blx	r3
    52bc:	e02a      	b.n	5314 <process_thread_mqtt_process+0x15b8>
  } else if(conn->out_packet.qos == 1) {
    52be:	2b01      	cmp	r3, #1
    52c0:	d123      	bne.n	530a <process_thread_mqtt_process+0x15ae>
    /* Wait for PUBACK */
    reset_packet(&conn->in_packet);
    52c2:	2395      	movs	r3, #149	; 0x95
    52c4:	00db      	lsls	r3, r3, #3
    52c6:	18e8      	adds	r0, r5, r3
    52c8:	4b42      	ldr	r3, [pc, #264]	; (53d4 <process_thread_mqtt_process+0x1678>)
    52ca:	4798      	blx	r3
    PT_WAIT_UNTIL(pt, conn->out_packet.qos_state == MQTT_QOS_STATE_GOT_ACK ||
    52cc:	4a42      	ldr	r2, [pc, #264]	; (53d8 <process_thread_mqtt_process+0x167c>)
    52ce:	23a7      	movs	r3, #167	; 0xa7
    52d0:	009b      	lsls	r3, r3, #2
    52d2:	52ea      	strh	r2, [r5, r3]
    52d4:	4b41      	ldr	r3, [pc, #260]	; (53dc <process_thread_mqtt_process+0x1680>)
    52d6:	5ceb      	ldrb	r3, [r5, r3]
    52d8:	2b01      	cmp	r3, #1
    52da:	d004      	beq.n	52e6 <process_thread_mqtt_process+0x158a>
    52dc:	1d28      	adds	r0, r5, #4
    52de:	4b40      	ldr	r3, [pc, #256]	; (53e0 <process_thread_mqtt_process+0x1684>)
    52e0:	4798      	blx	r3
    52e2:	2800      	cmp	r0, #0
    52e4:	d05a      	beq.n	539c <process_thread_mqtt_process+0x1640>
                  timer_expired(&conn->t));
    if(timer_expired(&conn->t)) {
    52e6:	1d28      	adds	r0, r5, #4
    52e8:	4b3d      	ldr	r3, [pc, #244]	; (53e0 <process_thread_mqtt_process+0x1684>)
    52ea:	4798      	blx	r3
    52ec:	2800      	cmp	r0, #0
    52ee:	d002      	beq.n	52f6 <process_thread_mqtt_process+0x159a>
      DBG("Timeout waiting for PUBACK\n\r");
    52f0:	483c      	ldr	r0, [pc, #240]	; (53e4 <process_thread_mqtt_process+0x1688>)
    52f2:	4b3d      	ldr	r3, [pc, #244]	; (53e8 <process_thread_mqtt_process+0x168c>)
    52f4:	4798      	blx	r3
    }
    if(conn->in_packet.mid != conn->out_packet.mid) {
    52f6:	4b3d      	ldr	r3, [pc, #244]	; (53ec <process_thread_mqtt_process+0x1690>)
    52f8:	5aea      	ldrh	r2, [r5, r3]
    52fa:	4b37      	ldr	r3, [pc, #220]	; (53d8 <process_thread_mqtt_process+0x167c>)
    52fc:	5aeb      	ldrh	r3, [r5, r3]
    52fe:	429a      	cmp	r2, r3
    5300:	d008      	beq.n	5314 <process_thread_mqtt_process+0x15b8>
      DBG("MQTT - Warning, got PUBACK with none matching MID. Currently there "
    5302:	483b      	ldr	r0, [pc, #236]	; (53f0 <process_thread_mqtt_process+0x1694>)
    5304:	4b38      	ldr	r3, [pc, #224]	; (53e8 <process_thread_mqtt_process+0x168c>)
    5306:	4798      	blx	r3
    5308:	e004      	b.n	5314 <process_thread_mqtt_process+0x15b8>
          "is no support for several concurrent PUBLISH messages.\n\r");
    }
  } else if(conn->out_packet.qos == 2) {
    530a:	2b02      	cmp	r3, #2
    530c:	d102      	bne.n	5314 <process_thread_mqtt_process+0x15b8>
    DBG("MQTT - QoS not implemented yet.\n\r");
    530e:	4839      	ldr	r0, [pc, #228]	; (53f4 <process_thread_mqtt_process+0x1698>)
    5310:	4b35      	ldr	r3, [pc, #212]	; (53e8 <process_thread_mqtt_process+0x168c>)
    5312:	4798      	blx	r3
    /* Should wait for PUBREC, send PUBREL and then wait for PUBCOMP */
  }

  reset_packet(&conn->in_packet);
    5314:	2395      	movs	r3, #149	; 0x95
    5316:	00db      	lsls	r3, r3, #3
    5318:	18e8      	adds	r0, r5, r3
    531a:	4b2e      	ldr	r3, [pc, #184]	; (53d4 <process_thread_mqtt_process+0x1678>)
    531c:	4798      	blx	r3

  /* This is clear after the entire transaction is complete */
  conn->out_queue_full = 0;
    531e:	2200      	movs	r2, #0
    5320:	236a      	movs	r3, #106	; 0x6a
    5322:	54ea      	strb	r2, [r5, r3]

  DBG("MQTT - Publish Enqueued\n\r");
    5324:	4834      	ldr	r0, [pc, #208]	; (53f8 <process_thread_mqtt_process+0x169c>)
    5326:	4b30      	ldr	r3, [pc, #192]	; (53e8 <process_thread_mqtt_process+0x168c>)
    5328:	4798      	blx	r3

  PT_END(pt);
    532a:	2200      	movs	r2, #0
    532c:	23a7      	movs	r3, #167	; 0xa7
    532e:	009b      	lsls	r3, r3, #2
    5330:	52ea      	strh	r2, [r5, r3]
    5332:	f7fe fd49 	bl	3dc8 <process_thread_mqtt_process+0x6c>
          PT_MQTT_WAIT_SEND();
        }
      }
    }
  }
  PROCESS_END();
    5336:	2300      	movs	r3, #0
    5338:	8023      	strh	r3, [r4, #0]
    533a:	2003      	movs	r0, #3
    533c:	e037      	b.n	53ae <process_thread_mqtt_process+0x1652>
      DBG("MQTT - Got mqtt_do_connect_mqtt_event!\n\r");

      if(conn->out_buffer_sent == 1) {
        PT_INIT(&conn->out_proto_thread);
        while(connect_pt(&conn->out_proto_thread, conn) < PT_EXITED &&
              conn->state != MQTT_CONN_STATE_ABORT_IMMEDIATE) {
    533e:	4b2f      	ldr	r3, [pc, #188]	; (53fc <process_thread_mqtt_process+0x16a0>)
    5340:	681a      	ldr	r2, [r3, #0]
    5342:	2360      	movs	r3, #96	; 0x60
      conn->socket.output_data_max_seg = conn->max_segment_size;
      DBG("MQTT - Got mqtt_do_connect_mqtt_event!\n\r");

      if(conn->out_buffer_sent == 1) {
        PT_INIT(&conn->out_proto_thread);
        while(connect_pt(&conn->out_proto_thread, conn) < PT_EXITED &&
    5344:	5cd3      	ldrb	r3, [r2, r3]
    5346:	2b0a      	cmp	r3, #10
    5348:	d001      	beq.n	534e <process_thread_mqtt_process+0x15f2>
    534a:	f7fe fd81 	bl	3e50 <process_thread_mqtt_process+0xf4>
    534e:	f7ff f8fa 	bl	4546 <process_thread_mqtt_process+0x7ea>
      /* Send MQTT Disconnect if we are connected */
      if(conn->state == MQTT_CONN_STATE_SENDING_MQTT_DISCONNECT) {
        if(conn->out_buffer_sent == 1) {
          PT_INIT(&conn->out_proto_thread);
          while(disconnect_pt(&conn->out_proto_thread, conn) < PT_EXITED &&
                conn->state != MQTT_CONN_STATE_ABORT_IMMEDIATE) {
    5352:	4b2a      	ldr	r3, [pc, #168]	; (53fc <process_thread_mqtt_process+0x16a0>)
    5354:	681a      	ldr	r2, [r3, #0]
    5356:	2360      	movs	r3, #96	; 0x60

      /* Send MQTT Disconnect if we are connected */
      if(conn->state == MQTT_CONN_STATE_SENDING_MQTT_DISCONNECT) {
        if(conn->out_buffer_sent == 1) {
          PT_INIT(&conn->out_proto_thread);
          while(disconnect_pt(&conn->out_proto_thread, conn) < PT_EXITED &&
    5358:	5cd3      	ldrb	r3, [r2, r3]
    535a:	2b0a      	cmp	r3, #10
    535c:	d001      	beq.n	5362 <process_thread_mqtt_process+0x1606>
    535e:	f7ff f910 	bl	4582 <process_thread_mqtt_process+0x826>
    5362:	f7ff f992 	bl	468a <process_thread_mqtt_process+0x92e>

      if(conn->out_buffer_sent == 1 &&
         conn->state == MQTT_CONN_STATE_CONNECTED_TO_BROKER) {
        PT_INIT(&conn->out_proto_thread);
        while(pingreq_pt(&conn->out_proto_thread, conn) < PT_EXITED &&
              conn->state == MQTT_CONN_STATE_CONNECTED_TO_BROKER) {
    5366:	4b25      	ldr	r3, [pc, #148]	; (53fc <process_thread_mqtt_process+0x16a0>)
    5368:	681a      	ldr	r2, [r3, #0]
    536a:	2360      	movs	r3, #96	; 0x60
      DBG("MQTT - Got mqtt_do_pingreq_event!\n\r");

      if(conn->out_buffer_sent == 1 &&
         conn->state == MQTT_CONN_STATE_CONNECTED_TO_BROKER) {
        PT_INIT(&conn->out_proto_thread);
        while(pingreq_pt(&conn->out_proto_thread, conn) < PT_EXITED &&
    536c:	5cd3      	ldrb	r3, [r2, r3]
    536e:	2b08      	cmp	r3, #8
    5370:	d001      	beq.n	5376 <process_thread_mqtt_process+0x161a>
    5372:	f7ff fa90 	bl	4896 <process_thread_mqtt_process+0xb3a>
    5376:	f7ff f9b6 	bl	46e6 <process_thread_mqtt_process+0x98a>

      if(conn->out_buffer_sent == 1 &&
         conn->state == MQTT_CONN_STATE_CONNECTED_TO_BROKER) {
        PT_INIT(&conn->out_proto_thread);
        while(subscribe_pt(&conn->out_proto_thread, conn) < PT_EXITED &&
              conn->state == MQTT_CONN_STATE_CONNECTED_TO_BROKER) {
    537a:	4b20      	ldr	r3, [pc, #128]	; (53fc <process_thread_mqtt_process+0x16a0>)
    537c:	681a      	ldr	r2, [r3, #0]
    537e:	2360      	movs	r3, #96	; 0x60
      DBG("MQTT - Got mqtt_do_subscribe_mqtt_event!\n\r");

      if(conn->out_buffer_sent == 1 &&
         conn->state == MQTT_CONN_STATE_CONNECTED_TO_BROKER) {
        PT_INIT(&conn->out_proto_thread);
        while(subscribe_pt(&conn->out_proto_thread, conn) < PT_EXITED &&
    5380:	5cd3      	ldrb	r3, [r2, r3]
    5382:	2b08      	cmp	r3, #8
    5384:	d000      	beq.n	5388 <process_thread_mqtt_process+0x162c>
    5386:	e440      	b.n	4c0a <process_thread_mqtt_process+0xeae>
    5388:	f7ff faa3 	bl	48d2 <process_thread_mqtt_process+0xb76>

      if(conn->out_buffer_sent == 1 &&
         conn->state == MQTT_CONN_STATE_CONNECTED_TO_BROKER) {
        PT_INIT(&conn->out_proto_thread);
        while(unsubscribe_pt(&conn->out_proto_thread, conn) < PT_EXITED &&
              conn->state == MQTT_CONN_STATE_CONNECTED_TO_BROKER) {
    538c:	4b1b      	ldr	r3, [pc, #108]	; (53fc <process_thread_mqtt_process+0x16a0>)
    538e:	681a      	ldr	r2, [r3, #0]
    5390:	2360      	movs	r3, #96	; 0x60
      DBG("MQTT - Got mqtt_do_unsubscribe_mqtt_event!\n\r");

      if(conn->out_buffer_sent == 1 &&
         conn->state == MQTT_CONN_STATE_CONNECTED_TO_BROKER) {
        PT_INIT(&conn->out_proto_thread);
        while(unsubscribe_pt(&conn->out_proto_thread, conn) < PT_EXITED &&
    5392:	5cd3      	ldrb	r3, [r2, r3]
    5394:	2b08      	cmp	r3, #8
    5396:	d000      	beq.n	539a <process_thread_mqtt_process+0x163e>
    5398:	e5d3      	b.n	4f42 <process_thread_mqtt_process+0x11e6>
    539a:	e454      	b.n	4c46 <process_thread_mqtt_process+0xeea>

      if(conn->out_buffer_sent == 1 &&
         conn->state == MQTT_CONN_STATE_CONNECTED_TO_BROKER) {
        PT_INIT(&conn->out_proto_thread);
        while(publish_pt(&conn->out_proto_thread, conn) < PT_EXITED &&
              conn->state == MQTT_CONN_STATE_CONNECTED_TO_BROKER) {
    539c:	4b17      	ldr	r3, [pc, #92]	; (53fc <process_thread_mqtt_process+0x16a0>)
    539e:	681a      	ldr	r2, [r3, #0]
    53a0:	2360      	movs	r3, #96	; 0x60
      DBG("MQTT - Got mqtt_do_publish_mqtt_event!\n\r");

      if(conn->out_buffer_sent == 1 &&
         conn->state == MQTT_CONN_STATE_CONNECTED_TO_BROKER) {
        PT_INIT(&conn->out_proto_thread);
        while(publish_pt(&conn->out_proto_thread, conn) < PT_EXITED &&
    53a2:	5cd3      	ldrb	r3, [r2, r3]
    53a4:	2b08      	cmp	r3, #8
    53a6:	d001      	beq.n	53ac <process_thread_mqtt_process+0x1650>
    53a8:	f7fe fd0e 	bl	3dc8 <process_thread_mqtt_process+0x6c>
    53ac:	e5ea      	b.n	4f84 <process_thread_mqtt_process+0x1228>
        }
      }
    }
  }
  PROCESS_END();
}
    53ae:	b004      	add	sp, #16
    53b0:	bc1c      	pop	{r2, r3, r4}
    53b2:	4690      	mov	r8, r2
    53b4:	4699      	mov	r9, r3
    53b6:	46a2      	mov	sl, r4
    53b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    53ba:	46c0      	nop			; (mov r8, r8)
    53bc:	00000275 	.word	0x00000275
    53c0:	00003ad9 	.word	0x00003ad9
    53c4:	00003a51 	.word	0x00003a51
    53c8:	0000ed5d 	.word	0x0000ed5d
    53cc:	20002b54 	.word	0x20002b54
    53d0:	0000ebf9 	.word	0x0000ebf9
    53d4:	00003285 	.word	0x00003285
    53d8:	00000286 	.word	0x00000286
    53dc:	00000299 	.word	0x00000299
    53e0:	0000ed8d 	.word	0x0000ed8d
    53e4:	000127fc 	.word	0x000127fc
    53e8:	00010931 	.word	0x00010931
    53ec:	000004b4 	.word	0x000004b4
    53f0:	0001281c 	.word	0x0001281c
    53f4:	00012898 	.word	0x00012898
    53f8:	000128bc 	.word	0x000128bc
    53fc:	20000380 	.word	0x20000380

00005400 <mqtt_subscribe>:
}
/*----------------------------------------------------------------------------*/
mqtt_status_t
mqtt_subscribe(struct mqtt_connection *conn, uint16_t *mid, char *topic,
               mqtt_qos_level_t qos_level)
{
    5400:	b570      	push	{r4, r5, r6, lr}
    5402:	1c04      	adds	r4, r0, #0
    5404:	1c15      	adds	r5, r2, #0
    5406:	1c1e      	adds	r6, r3, #0
  if(conn->state != MQTT_CONN_STATE_CONNECTED_TO_BROKER) {
    5408:	2360      	movs	r3, #96	; 0x60
    540a:	5cc3      	ldrb	r3, [r0, r3]
    return MQTT_STATUS_NOT_CONNECTED_ERROR;
    540c:	2081      	movs	r0, #129	; 0x81
/*----------------------------------------------------------------------------*/
mqtt_status_t
mqtt_subscribe(struct mqtt_connection *conn, uint16_t *mid, char *topic,
               mqtt_qos_level_t qos_level)
{
  if(conn->state != MQTT_CONN_STATE_CONNECTED_TO_BROKER) {
    540e:	2b08      	cmp	r3, #8
    5410:	d12d      	bne.n	546e <mqtt_subscribe+0x6e>
    return MQTT_STATUS_NOT_CONNECTED_ERROR;
  }

  DBG("MQTT - Call to mqtt_subscribe...\n\r");
    5412:	4817      	ldr	r0, [pc, #92]	; (5470 <mqtt_subscribe+0x70>)
    5414:	4b17      	ldr	r3, [pc, #92]	; (5474 <mqtt_subscribe+0x74>)
    5416:	4798      	blx	r3

  /* Currently don't have a queue, so only one item at a time */
  if(conn->out_queue_full) {
    5418:	236a      	movs	r3, #106	; 0x6a
    541a:	5ce3      	ldrb	r3, [r4, r3]
    541c:	2b00      	cmp	r3, #0
    541e:	d004      	beq.n	542a <mqtt_subscribe+0x2a>
    DBG("MQTT - Not accepted!\n\r");
    5420:	4815      	ldr	r0, [pc, #84]	; (5478 <mqtt_subscribe+0x78>)
    5422:	4b14      	ldr	r3, [pc, #80]	; (5474 <mqtt_subscribe+0x74>)
    5424:	4798      	blx	r3
    return MQTT_STATUS_OUT_QUEUE_FULL;
    5426:	2001      	movs	r0, #1
    5428:	e021      	b.n	546e <mqtt_subscribe+0x6e>
  }
  conn->out_queue_full = 1;
    542a:	2201      	movs	r2, #1
    542c:	236a      	movs	r3, #106	; 0x6a
    542e:	54e2      	strb	r2, [r4, r3]
  DBG("MQTT - Accepted!\n\r");
    5430:	4812      	ldr	r0, [pc, #72]	; (547c <mqtt_subscribe+0x7c>)
    5432:	4b10      	ldr	r3, [pc, #64]	; (5474 <mqtt_subscribe+0x74>)
    5434:	4798      	blx	r3

  conn->out_packet.mid = INCREMENT_MID(conn);
    5436:	2268      	movs	r2, #104	; 0x68
    5438:	5aa3      	ldrh	r3, [r4, r2]
    543a:	3302      	adds	r3, #2
    543c:	b29b      	uxth	r3, r3
    543e:	52a3      	strh	r3, [r4, r2]
    5440:	4a0f      	ldr	r2, [pc, #60]	; (5480 <mqtt_subscribe+0x80>)
    5442:	52a3      	strh	r3, [r4, r2]
  conn->out_packet.topic = topic;
    5444:	23a2      	movs	r3, #162	; 0xa2
    5446:	009b      	lsls	r3, r3, #2
    5448:	50e5      	str	r5, [r4, r3]
  conn->out_packet.topic_length = strlen(topic);
    544a:	1c28      	adds	r0, r5, #0
    544c:	4b0d      	ldr	r3, [pc, #52]	; (5484 <mqtt_subscribe+0x84>)
    544e:	4798      	blx	r3
    5450:	23a3      	movs	r3, #163	; 0xa3
    5452:	009b      	lsls	r3, r3, #2
    5454:	52e0      	strh	r0, [r4, r3]
  conn->out_packet.qos = qos_level;
    5456:	330c      	adds	r3, #12
    5458:	54e6      	strb	r6, [r4, r3]
  conn->out_packet.qos_state = MQTT_QOS_STATE_NO_ACK;
    545a:	2200      	movs	r2, #0
    545c:	4b0a      	ldr	r3, [pc, #40]	; (5488 <mqtt_subscribe+0x88>)
    545e:	54e2      	strb	r2, [r4, r3]

  process_post(&mqtt_process, mqtt_do_subscribe_event, conn);
    5460:	4b0a      	ldr	r3, [pc, #40]	; (548c <mqtt_subscribe+0x8c>)
    5462:	7819      	ldrb	r1, [r3, #0]
    5464:	480a      	ldr	r0, [pc, #40]	; (5490 <mqtt_subscribe+0x90>)
    5466:	1c22      	adds	r2, r4, #0
    5468:	4b0a      	ldr	r3, [pc, #40]	; (5494 <mqtt_subscribe+0x94>)
    546a:	4798      	blx	r3
  return MQTT_STATUS_OK;
    546c:	2000      	movs	r0, #0
}
    546e:	bd70      	pop	{r4, r5, r6, pc}
    5470:	000128d8 	.word	0x000128d8
    5474:	00010931 	.word	0x00010931
    5478:	000128fc 	.word	0x000128fc
    547c:	00012914 	.word	0x00012914
    5480:	00000286 	.word	0x00000286
    5484:	00010be9 	.word	0x00010be9
    5488:	00000299 	.word	0x00000299
    548c:	2000037c 	.word	0x2000037c
    5490:	2000000c 	.word	0x2000000c
    5494:	0000ebf9 	.word	0x0000ebf9

00005498 <mqtt_publish>:
/*----------------------------------------------------------------------------*/
mqtt_status_t
mqtt_publish(struct mqtt_connection *conn, uint16_t *mid, char *topic,
             uint8_t *payload, uint32_t payload_size,
             mqtt_qos_level_t qos_level, mqtt_retain_t retain)
{
    5498:	b5f0      	push	{r4, r5, r6, r7, lr}
    549a:	b083      	sub	sp, #12
    549c:	1c04      	adds	r4, r0, #0
    549e:	9200      	str	r2, [sp, #0]
    54a0:	9301      	str	r3, [sp, #4]
    54a2:	ab08      	add	r3, sp, #32
    54a4:	cb40      	ldmia	r3!, {r6}
    54a6:	781f      	ldrb	r7, [r3, #0]
    54a8:	ab0a      	add	r3, sp, #40	; 0x28
    54aa:	781d      	ldrb	r5, [r3, #0]
  if(conn->state != MQTT_CONN_STATE_CONNECTED_TO_BROKER) {
    54ac:	2360      	movs	r3, #96	; 0x60
    54ae:	5cc3      	ldrb	r3, [r0, r3]
    return MQTT_STATUS_NOT_CONNECTED_ERROR;
    54b0:	2081      	movs	r0, #129	; 0x81
mqtt_status_t
mqtt_publish(struct mqtt_connection *conn, uint16_t *mid, char *topic,
             uint8_t *payload, uint32_t payload_size,
             mqtt_qos_level_t qos_level, mqtt_retain_t retain)
{
  if(conn->state != MQTT_CONN_STATE_CONNECTED_TO_BROKER) {
    54b2:	2b08      	cmp	r3, #8
    54b4:	d134      	bne.n	5520 <mqtt_publish+0x88>
    return MQTT_STATUS_NOT_CONNECTED_ERROR;
  }

  DBG("MQTT - Call to mqtt_publish...\n\r");
    54b6:	481b      	ldr	r0, [pc, #108]	; (5524 <mqtt_publish+0x8c>)
    54b8:	4b1b      	ldr	r3, [pc, #108]	; (5528 <mqtt_publish+0x90>)
    54ba:	4798      	blx	r3

  /* Currently don't have a queue, so only one item at a time */
  if(conn->out_queue_full) {
    54bc:	236a      	movs	r3, #106	; 0x6a
    54be:	5ce3      	ldrb	r3, [r4, r3]
    54c0:	2b00      	cmp	r3, #0
    54c2:	d004      	beq.n	54ce <mqtt_publish+0x36>
    DBG("MQTT - Not accepted!\n\r");
    54c4:	4819      	ldr	r0, [pc, #100]	; (552c <mqtt_publish+0x94>)
    54c6:	4b18      	ldr	r3, [pc, #96]	; (5528 <mqtt_publish+0x90>)
    54c8:	4798      	blx	r3
    return MQTT_STATUS_OUT_QUEUE_FULL;
    54ca:	2001      	movs	r0, #1
    54cc:	e028      	b.n	5520 <mqtt_publish+0x88>
  }
  conn->out_queue_full = 1;
    54ce:	2201      	movs	r2, #1
    54d0:	236a      	movs	r3, #106	; 0x6a
    54d2:	54e2      	strb	r2, [r4, r3]
  DBG("MQTT - Accepted!\n\r");
    54d4:	4816      	ldr	r0, [pc, #88]	; (5530 <mqtt_publish+0x98>)
    54d6:	4b14      	ldr	r3, [pc, #80]	; (5528 <mqtt_publish+0x90>)
    54d8:	4798      	blx	r3

  conn->out_packet.mid = INCREMENT_MID(conn);
    54da:	2268      	movs	r2, #104	; 0x68
    54dc:	5aa3      	ldrh	r3, [r4, r2]
    54de:	3302      	adds	r3, #2
    54e0:	b29b      	uxth	r3, r3
    54e2:	52a3      	strh	r3, [r4, r2]
    54e4:	4a13      	ldr	r2, [pc, #76]	; (5534 <mqtt_publish+0x9c>)
    54e6:	52a3      	strh	r3, [r4, r2]
  conn->out_packet.retain = retain;
    54e8:	4b13      	ldr	r3, [pc, #76]	; (5538 <mqtt_publish+0xa0>)
    54ea:	54e5      	strb	r5, [r4, r3]
  conn->out_packet.topic = topic;
    54ec:	3b12      	subs	r3, #18
    54ee:	9a00      	ldr	r2, [sp, #0]
    54f0:	50e2      	str	r2, [r4, r3]
  conn->out_packet.topic_length = strlen(topic);
    54f2:	1c10      	adds	r0, r2, #0
    54f4:	4b11      	ldr	r3, [pc, #68]	; (553c <mqtt_publish+0xa4>)
    54f6:	4798      	blx	r3
    54f8:	23a3      	movs	r3, #163	; 0xa3
    54fa:	009b      	lsls	r3, r3, #2
    54fc:	52e0      	strh	r0, [r4, r3]
  conn->out_packet.payload = payload;
    54fe:	3304      	adds	r3, #4
    5500:	9a01      	ldr	r2, [sp, #4]
    5502:	50e2      	str	r2, [r4, r3]
  conn->out_packet.payload_size = payload_size;
    5504:	3304      	adds	r3, #4
    5506:	50e6      	str	r6, [r4, r3]
  conn->out_packet.qos = qos_level;
    5508:	3304      	adds	r3, #4
    550a:	54e7      	strb	r7, [r4, r3]
  conn->out_packet.qos_state = MQTT_QOS_STATE_NO_ACK;
    550c:	2200      	movs	r2, #0
    550e:	4b0c      	ldr	r3, [pc, #48]	; (5540 <mqtt_publish+0xa8>)
    5510:	54e2      	strb	r2, [r4, r3]

  process_post(&mqtt_process, mqtt_do_publish_event, conn);
    5512:	4b0c      	ldr	r3, [pc, #48]	; (5544 <mqtt_publish+0xac>)
    5514:	7819      	ldrb	r1, [r3, #0]
    5516:	480c      	ldr	r0, [pc, #48]	; (5548 <mqtt_publish+0xb0>)
    5518:	1c22      	adds	r2, r4, #0
    551a:	4b0c      	ldr	r3, [pc, #48]	; (554c <mqtt_publish+0xb4>)
    551c:	4798      	blx	r3
  return MQTT_STATUS_OK;
    551e:	2000      	movs	r0, #0
}
    5520:	b003      	add	sp, #12
    5522:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5524:	00012950 	.word	0x00012950
    5528:	00010931 	.word	0x00010931
    552c:	000128fc 	.word	0x000128fc
    5530:	00012914 	.word	0x00012914
    5534:	00000286 	.word	0x00000286
    5538:	0000029a 	.word	0x0000029a
    553c:	00010be9 	.word	0x00010be9
    5540:	00000299 	.word	0x00000299
    5544:	20000378 	.word	0x20000378
    5548:	2000000c 	.word	0x2000000c
    554c:	0000ebf9 	.word	0x0000ebf9

00005550 <mqtt_set_username_password>:
/*----------------------------------------------------------------------------*/
void
mqtt_set_username_password(struct mqtt_connection *conn, char *username,
                           char *password)
{
    5550:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5552:	1c04      	adds	r4, r0, #0
    5554:	1c0e      	adds	r6, r1, #0
    5556:	1c15      	adds	r5, r2, #0
  /* Set strings, NULL string will simply set length to zero */
  string_to_mqtt_string(&conn->credentials.username, username);
    5558:	3050      	adds	r0, #80	; 0x50
    555a:	4f0f      	ldr	r7, [pc, #60]	; (5598 <mqtt_set_username_password+0x48>)
    555c:	47b8      	blx	r7
  string_to_mqtt_string(&conn->credentials.password, password);
    555e:	1c20      	adds	r0, r4, #0
    5560:	3058      	adds	r0, #88	; 0x58
    5562:	1c29      	adds	r1, r5, #0
    5564:	47b8      	blx	r7

  /* Set CONNECT VHDR flags */
  if(username != NULL) {
    5566:	2e00      	cmp	r6, #0
    5568:	d005      	beq.n	5576 <mqtt_set_username_password+0x26>
    conn->connect_vhdr_flags |= MQTT_VHDR_USERNAME_FLAG;
    556a:	7d23      	ldrb	r3, [r4, #20]
    556c:	2280      	movs	r2, #128	; 0x80
    556e:	4252      	negs	r2, r2
    5570:	4313      	orrs	r3, r2
    5572:	7523      	strb	r3, [r4, #20]
    5574:	e003      	b.n	557e <mqtt_set_username_password+0x2e>
  } else {
    conn->connect_vhdr_flags &= ~MQTT_VHDR_USERNAME_FLAG;
    5576:	7d23      	ldrb	r3, [r4, #20]
    5578:	227f      	movs	r2, #127	; 0x7f
    557a:	4013      	ands	r3, r2
    557c:	7523      	strb	r3, [r4, #20]
  }
  if(password != NULL) {
    557e:	2d00      	cmp	r5, #0
    5580:	d004      	beq.n	558c <mqtt_set_username_password+0x3c>
    conn->connect_vhdr_flags |= MQTT_VHDR_PASSWORD_FLAG;
    5582:	7d22      	ldrb	r2, [r4, #20]
    5584:	2340      	movs	r3, #64	; 0x40
    5586:	4313      	orrs	r3, r2
    5588:	7523      	strb	r3, [r4, #20]
    558a:	e003      	b.n	5594 <mqtt_set_username_password+0x44>
  } else {
    conn->connect_vhdr_flags &= ~MQTT_VHDR_PASSWORD_FLAG;
    558c:	7d23      	ldrb	r3, [r4, #20]
    558e:	2240      	movs	r2, #64	; 0x40
    5590:	4393      	bics	r3, r2
    5592:	7523      	strb	r3, [r4, #20]
  }
}
    5594:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    5596:	46c0      	nop			; (mov r8, r8)
    5598:	00003b55 	.word	0x00003b55

0000559c <show_leds>:

static unsigned char leds, invert;
/*---------------------------------------------------------------------------*/
static void
show_leds(unsigned char changed)
{
    559c:	b538      	push	{r3, r4, r5, lr}
    559e:	1c05      	adds	r5, r0, #0
  if(changed & LEDS_GREEN) {
    55a0:	2401      	movs	r4, #1
    55a2:	4004      	ands	r4, r0
    55a4:	d067      	beq.n	5676 <show_leds+0xda>
    /* Green did change */
    if((invert ^ leds) & LEDS_GREEN) {
    55a6:	4b39      	ldr	r3, [pc, #228]	; (568c <show_leds+0xf0>)
    55a8:	781a      	ldrb	r2, [r3, #0]
    55aa:	4b39      	ldr	r3, [pc, #228]	; (5690 <show_leds+0xf4>)
    55ac:	781b      	ldrb	r3, [r3, #0]
    55ae:	4053      	eors	r3, r2
    55b0:	07db      	lsls	r3, r3, #31
    55b2:	d507      	bpl.n	55c4 <show_leds+0x28>
      ENERGEST_ON(ENERGEST_TYPE_LED_GREEN);
    55b4:	4b37      	ldr	r3, [pc, #220]	; (5694 <show_leds+0xf8>)
    55b6:	4798      	blx	r3
    55b8:	4b37      	ldr	r3, [pc, #220]	; (5698 <show_leds+0xfc>)
    55ba:	60d8      	str	r0, [r3, #12]
    55bc:	2201      	movs	r2, #1
    55be:	4b37      	ldr	r3, [pc, #220]	; (569c <show_leds+0x100>)
    55c0:	70da      	strb	r2, [r3, #3]
    55c2:	e05b      	b.n	567c <show_leds+0xe0>
    } else {
      ENERGEST_OFF(ENERGEST_TYPE_LED_GREEN);
    55c4:	4b35      	ldr	r3, [pc, #212]	; (569c <show_leds+0x100>)
    55c6:	78db      	ldrb	r3, [r3, #3]
    55c8:	2b00      	cmp	r3, #0
    55ca:	d05a      	beq.n	5682 <show_leds+0xe6>
    55cc:	4b31      	ldr	r3, [pc, #196]	; (5694 <show_leds+0xf8>)
    55ce:	4798      	blx	r3
    55d0:	4a33      	ldr	r2, [pc, #204]	; (56a0 <show_leds+0x104>)
    55d2:	4b31      	ldr	r3, [pc, #196]	; (5698 <show_leds+0xfc>)
    55d4:	68db      	ldr	r3, [r3, #12]
    55d6:	68d1      	ldr	r1, [r2, #12]
    55d8:	1acb      	subs	r3, r1, r3
    55da:	1818      	adds	r0, r3, r0
    55dc:	60d0      	str	r0, [r2, #12]
    55de:	2200      	movs	r2, #0
    55e0:	4b2e      	ldr	r3, [pc, #184]	; (569c <show_leds+0x100>)
    55e2:	70da      	strb	r2, [r3, #3]
    55e4:	e04a      	b.n	567c <show_leds+0xe0>
    }
  }
  if(changed & LEDS_YELLOW) {
    if((invert ^ leds) & LEDS_YELLOW) {
    55e6:	4b29      	ldr	r3, [pc, #164]	; (568c <show_leds+0xf0>)
    55e8:	781a      	ldrb	r2, [r3, #0]
    55ea:	4b29      	ldr	r3, [pc, #164]	; (5690 <show_leds+0xf4>)
    55ec:	781b      	ldrb	r3, [r3, #0]
    55ee:	4053      	eors	r3, r2
    55f0:	079b      	lsls	r3, r3, #30
    55f2:	d507      	bpl.n	5604 <show_leds+0x68>
      ENERGEST_ON(ENERGEST_TYPE_LED_YELLOW);
    55f4:	4b27      	ldr	r3, [pc, #156]	; (5694 <show_leds+0xf8>)
    55f6:	4798      	blx	r3
    55f8:	4b27      	ldr	r3, [pc, #156]	; (5698 <show_leds+0xfc>)
    55fa:	6118      	str	r0, [r3, #16]
    55fc:	2201      	movs	r2, #1
    55fe:	4b27      	ldr	r3, [pc, #156]	; (569c <show_leds+0x100>)
    5600:	711a      	strb	r2, [r3, #4]
    5602:	e00f      	b.n	5624 <show_leds+0x88>
    } else {
      ENERGEST_OFF(ENERGEST_TYPE_LED_YELLOW);
    5604:	4b25      	ldr	r3, [pc, #148]	; (569c <show_leds+0x100>)
    5606:	791b      	ldrb	r3, [r3, #4]
    5608:	2b00      	cmp	r3, #0
    560a:	d00b      	beq.n	5624 <show_leds+0x88>
    560c:	4b21      	ldr	r3, [pc, #132]	; (5694 <show_leds+0xf8>)
    560e:	4798      	blx	r3
    5610:	4a23      	ldr	r2, [pc, #140]	; (56a0 <show_leds+0x104>)
    5612:	4b21      	ldr	r3, [pc, #132]	; (5698 <show_leds+0xfc>)
    5614:	691b      	ldr	r3, [r3, #16]
    5616:	6911      	ldr	r1, [r2, #16]
    5618:	1acb      	subs	r3, r1, r3
    561a:	1818      	adds	r0, r3, r0
    561c:	6110      	str	r0, [r2, #16]
    561e:	2200      	movs	r2, #0
    5620:	4b1e      	ldr	r3, [pc, #120]	; (569c <show_leds+0x100>)
    5622:	711a      	strb	r2, [r3, #4]
    }
  }
  if(changed & LEDS_RED) {
    5624:	2c00      	cmp	r4, #0
    5626:	d01e      	beq.n	5666 <show_leds+0xca>
    if((invert ^ leds) & LEDS_RED) {
    5628:	4b18      	ldr	r3, [pc, #96]	; (568c <show_leds+0xf0>)
    562a:	781a      	ldrb	r2, [r3, #0]
    562c:	4b18      	ldr	r3, [pc, #96]	; (5690 <show_leds+0xf4>)
    562e:	781b      	ldrb	r3, [r3, #0]
    5630:	4053      	eors	r3, r2
    5632:	07db      	lsls	r3, r3, #31
    5634:	d507      	bpl.n	5646 <show_leds+0xaa>
      ENERGEST_ON(ENERGEST_TYPE_LED_RED);
    5636:	4b17      	ldr	r3, [pc, #92]	; (5694 <show_leds+0xf8>)
    5638:	4798      	blx	r3
    563a:	4b17      	ldr	r3, [pc, #92]	; (5698 <show_leds+0xfc>)
    563c:	6158      	str	r0, [r3, #20]
    563e:	2201      	movs	r2, #1
    5640:	4b16      	ldr	r3, [pc, #88]	; (569c <show_leds+0x100>)
    5642:	715a      	strb	r2, [r3, #5]
    5644:	e00f      	b.n	5666 <show_leds+0xca>
    } else {
      ENERGEST_OFF(ENERGEST_TYPE_LED_RED);
    5646:	4b15      	ldr	r3, [pc, #84]	; (569c <show_leds+0x100>)
    5648:	795b      	ldrb	r3, [r3, #5]
    564a:	2b00      	cmp	r3, #0
    564c:	d00b      	beq.n	5666 <show_leds+0xca>
    564e:	4b11      	ldr	r3, [pc, #68]	; (5694 <show_leds+0xf8>)
    5650:	4798      	blx	r3
    5652:	4a13      	ldr	r2, [pc, #76]	; (56a0 <show_leds+0x104>)
    5654:	4b10      	ldr	r3, [pc, #64]	; (5698 <show_leds+0xfc>)
    5656:	695b      	ldr	r3, [r3, #20]
    5658:	6951      	ldr	r1, [r2, #20]
    565a:	1acb      	subs	r3, r1, r3
    565c:	1818      	adds	r0, r3, r0
    565e:	6150      	str	r0, [r2, #20]
    5660:	2200      	movs	r2, #0
    5662:	4b0e      	ldr	r3, [pc, #56]	; (569c <show_leds+0x100>)
    5664:	715a      	strb	r2, [r3, #5]
    }
  }
  leds_arch_set(leds ^ invert);
    5666:	4b0a      	ldr	r3, [pc, #40]	; (5690 <show_leds+0xf4>)
    5668:	7818      	ldrb	r0, [r3, #0]
    566a:	4b08      	ldr	r3, [pc, #32]	; (568c <show_leds+0xf0>)
    566c:	781b      	ldrb	r3, [r3, #0]
    566e:	4058      	eors	r0, r3
    5670:	4b0c      	ldr	r3, [pc, #48]	; (56a4 <show_leds+0x108>)
    5672:	4798      	blx	r3
    5674:	e008      	b.n	5688 <show_leds+0xec>
      ENERGEST_ON(ENERGEST_TYPE_LED_GREEN);
    } else {
      ENERGEST_OFF(ENERGEST_TYPE_LED_GREEN);
    }
  }
  if(changed & LEDS_YELLOW) {
    5676:	0783      	lsls	r3, r0, #30
    5678:	d4b5      	bmi.n	55e6 <show_leds+0x4a>
    567a:	e7f4      	b.n	5666 <show_leds+0xca>
    567c:	07ab      	lsls	r3, r5, #30
    567e:	d4b2      	bmi.n	55e6 <show_leds+0x4a>
    5680:	e7d2      	b.n	5628 <show_leds+0x8c>
    5682:	0783      	lsls	r3, r0, #30
    5684:	d4af      	bmi.n	55e6 <show_leds+0x4a>
    5686:	e7de      	b.n	5646 <show_leds+0xaa>
    } else {
      ENERGEST_OFF(ENERGEST_TYPE_LED_RED);
    }
  }
  leds_arch_set(leds ^ invert);
}
    5688:	bd38      	pop	{r3, r4, r5, pc}
    568a:	46c0      	nop			; (mov r8, r8)
    568c:	2000038c 	.word	0x2000038c
    5690:	2000038d 	.word	0x2000038d
    5694:	0000f88d 	.word	0x0000f88d
    5698:	200033cc 	.word	0x200033cc
    569c:	200033c0 	.word	0x200033c0
    56a0:	2000338c 	.word	0x2000338c
    56a4:	0000f5b1 	.word	0x0000f5b1

000056a8 <leds_init>:
/*---------------------------------------------------------------------------*/
void
leds_init(void)
{
    56a8:	b508      	push	{r3, lr}
  leds_arch_init();
    56aa:	4b04      	ldr	r3, [pc, #16]	; (56bc <leds_init+0x14>)
    56ac:	4798      	blx	r3
  leds = invert = 0;
    56ae:	2300      	movs	r3, #0
    56b0:	4a03      	ldr	r2, [pc, #12]	; (56c0 <leds_init+0x18>)
    56b2:	7013      	strb	r3, [r2, #0]
    56b4:	4a03      	ldr	r2, [pc, #12]	; (56c4 <leds_init+0x1c>)
    56b6:	7013      	strb	r3, [r2, #0]
}
    56b8:	bd08      	pop	{r3, pc}
    56ba:	46c0      	nop			; (mov r8, r8)
    56bc:	0000f585 	.word	0x0000f585
    56c0:	2000038d 	.word	0x2000038d
    56c4:	2000038c 	.word	0x2000038c

000056c8 <leds_on>:
  return leds_arch_get();
}
/*---------------------------------------------------------------------------*/
void
leds_on(unsigned char ledv)
{
    56c8:	b508      	push	{r3, lr}
  unsigned char changed;
  changed = (~leds) & ledv;
    56ca:	4a04      	ldr	r2, [pc, #16]	; (56dc <leds_on+0x14>)
    56cc:	7813      	ldrb	r3, [r2, #0]
  leds |= ledv;
    56ce:	1c01      	adds	r1, r0, #0
    56d0:	4319      	orrs	r1, r3
    56d2:	7011      	strb	r1, [r2, #0]
  show_leds(changed);
    56d4:	4398      	bics	r0, r3
    56d6:	4b02      	ldr	r3, [pc, #8]	; (56e0 <leds_on+0x18>)
    56d8:	4798      	blx	r3
}
    56da:	bd08      	pop	{r3, pc}
    56dc:	2000038c 	.word	0x2000038c
    56e0:	0000559d 	.word	0x0000559d

000056e4 <leds_off>:
/*---------------------------------------------------------------------------*/
void
leds_off(unsigned char ledv)
{
    56e4:	b508      	push	{r3, lr}
  unsigned char changed;
  changed = leds & ledv;
    56e6:	4a04      	ldr	r2, [pc, #16]	; (56f8 <leds_off+0x14>)
    56e8:	7813      	ldrb	r3, [r2, #0]
  leds &= ~ledv;
    56ea:	1c19      	adds	r1, r3, #0
    56ec:	4381      	bics	r1, r0
    56ee:	7011      	strb	r1, [r2, #0]
  show_leds(changed);
    56f0:	4018      	ands	r0, r3
    56f2:	4b02      	ldr	r3, [pc, #8]	; (56fc <leds_off+0x18>)
    56f4:	4798      	blx	r3
}
    56f6:	bd08      	pop	{r3, pc}
    56f8:	2000038c 	.word	0x2000038c
    56fc:	0000559d 	.word	0x0000559d

00005700 <list_init>:
 * \param list The list to be initialized.
 */
void
list_init(list_t list)
{
  *list = NULL;
    5700:	2300      	movs	r3, #0
    5702:	6003      	str	r3, [r0, #0]
}
    5704:	4770      	bx	lr
    5706:	46c0      	nop			; (mov r8, r8)

00005708 <list_head>:
 * \sa list_tail()
 */
void *
list_head(list_t list)
{
  return *list;
    5708:	6800      	ldr	r0, [r0, #0]
}
    570a:	4770      	bx	lr

0000570c <list_tail>:
void *
list_tail(list_t list)
{
  struct list *l;
  
  if(*list == NULL) {
    570c:	6800      	ldr	r0, [r0, #0]
    570e:	2800      	cmp	r0, #0
    5710:	d101      	bne.n	5716 <list_tail+0xa>
    5712:	e004      	b.n	571e <list_tail+0x12>
    return NULL;
  }
  
  for(l = *list; l->next != NULL; l = l->next);
    5714:	1c18      	adds	r0, r3, #0
    5716:	6803      	ldr	r3, [r0, #0]
    5718:	2b00      	cmp	r3, #0
    571a:	d1fb      	bne.n	5714 <list_tail+0x8>
    571c:	e000      	b.n	5720 <list_tail+0x14>
list_tail(list_t list)
{
  struct list *l;
  
  if(*list == NULL) {
    return NULL;
    571e:	2000      	movs	r0, #0
  }
  
  for(l = *list; l->next != NULL; l = l->next);
  
  return l;
}
    5720:	4770      	bx	lr
    5722:	46c0      	nop			; (mov r8, r8)

00005724 <list_remove>:
void
list_remove(list_t list, void *item)
{
  struct list *l, *r;
  
  if(*list == NULL) {
    5724:	6802      	ldr	r2, [r0, #0]
    5726:	2a00      	cmp	r2, #0
    5728:	d014      	beq.n	5754 <list_remove+0x30>
    return;
  }
  
  r = NULL;
  for(l = *list; l != NULL; l = l->next) {
    if(l == item) {
    572a:	428a      	cmp	r2, r1
    572c:	d10f      	bne.n	574e <list_remove+0x2a>
    572e:	e004      	b.n	573a <list_remove+0x16>
    5730:	4299      	cmp	r1, r3
    5732:	d10b      	bne.n	574c <list_remove+0x28>
      if(r == NULL) {
    5734:	2a00      	cmp	r2, #0
    5736:	d104      	bne.n	5742 <list_remove+0x1e>
  if(*list == NULL) {
    return;
  }
  
  r = NULL;
  for(l = *list; l != NULL; l = l->next) {
    5738:	1c19      	adds	r1, r3, #0
    if(l == item) {
      if(r == NULL) {
	/* First on list */
	*list = l->next;
    573a:	680b      	ldr	r3, [r1, #0]
    573c:	6003      	str	r3, [r0, #0]
    573e:	1c0b      	adds	r3, r1, #0
    5740:	e001      	b.n	5746 <list_remove+0x22>
      } else {
	/* Not first on list */
	r->next = l->next;
    5742:	6819      	ldr	r1, [r3, #0]
    5744:	6011      	str	r1, [r2, #0]
      }
      l->next = NULL;
    5746:	2200      	movs	r2, #0
    5748:	601a      	str	r2, [r3, #0]
      return;
    574a:	e003      	b.n	5754 <list_remove+0x30>
  if(*list == NULL) {
    return;
  }
  
  r = NULL;
  for(l = *list; l != NULL; l = l->next) {
    574c:	1c1a      	adds	r2, r3, #0
    574e:	6813      	ldr	r3, [r2, #0]
    5750:	2b00      	cmp	r3, #0
    5752:	d1ed      	bne.n	5730 <list_remove+0xc>
      l->next = NULL;
      return;
    }
    r = l;
  }
}
    5754:	4770      	bx	lr
    5756:	46c0      	nop			; (mov r8, r8)

00005758 <list_add>:
 * \sa list_push()
 *
 */
void
list_add(list_t list, void *item)
{
    5758:	b538      	push	{r3, r4, r5, lr}
    575a:	1c05      	adds	r5, r0, #0
    575c:	1c0c      	adds	r4, r1, #0
  struct list *l;

  /* Make sure not to add the same element twice */
  list_remove(list, item);
    575e:	4b06      	ldr	r3, [pc, #24]	; (5778 <list_add+0x20>)
    5760:	4798      	blx	r3

  ((struct list *)item)->next = NULL;
    5762:	2300      	movs	r3, #0
    5764:	6023      	str	r3, [r4, #0]
  
  l = list_tail(list);
    5766:	1c28      	adds	r0, r5, #0
    5768:	4b04      	ldr	r3, [pc, #16]	; (577c <list_add+0x24>)
    576a:	4798      	blx	r3

  if(l == NULL) {
    576c:	2800      	cmp	r0, #0
    576e:	d101      	bne.n	5774 <list_add+0x1c>
    *list = item;
    5770:	602c      	str	r4, [r5, #0]
    5772:	e000      	b.n	5776 <list_add+0x1e>
  } else {
    l->next = item;
    5774:	6004      	str	r4, [r0, #0]
  }
}
    5776:	bd38      	pop	{r3, r4, r5, pc}
    5778:	00005725 	.word	0x00005725
    577c:	0000570d 	.word	0x0000570d

00005780 <list_push>:
/**
 * Add an item to the start of the list.
 */
void
list_push(list_t list, void *item)
{
    5780:	b538      	push	{r3, r4, r5, lr}
    5782:	1c04      	adds	r4, r0, #0
    5784:	1c0d      	adds	r5, r1, #0
  /*  struct list *l;*/

  /* Make sure not to add the same element twice */
  list_remove(list, item);
    5786:	4b03      	ldr	r3, [pc, #12]	; (5794 <list_push+0x14>)
    5788:	4798      	blx	r3

  ((struct list *)item)->next = *list;
    578a:	6823      	ldr	r3, [r4, #0]
    578c:	602b      	str	r3, [r5, #0]
  *list = item;
    578e:	6025      	str	r5, [r4, #0]
}
    5790:	bd38      	pop	{r3, r4, r5, pc}
    5792:	46c0      	nop			; (mov r8, r8)
    5794:	00005725 	.word	0x00005725

00005798 <list_length>:
list_length(list_t list)
{
  struct list *l;
  int n = 0;

  for(l = *list; l != NULL; l = l->next) {
    5798:	6803      	ldr	r3, [r0, #0]
    579a:	2b00      	cmp	r3, #0
    579c:	d005      	beq.n	57aa <list_length+0x12>
    579e:	2000      	movs	r0, #0
    ++n;
    57a0:	3001      	adds	r0, #1
list_length(list_t list)
{
  struct list *l;
  int n = 0;

  for(l = *list; l != NULL; l = l->next) {
    57a2:	681b      	ldr	r3, [r3, #0]
    57a4:	2b00      	cmp	r3, #0
    57a6:	d1fb      	bne.n	57a0 <list_length+0x8>
    57a8:	e000      	b.n	57ac <list_length+0x14>
/*---------------------------------------------------------------------------*/
int
list_length(list_t list)
{
  struct list *l;
  int n = 0;
    57aa:	2000      	movs	r0, #0
  for(l = *list; l != NULL; l = l->next) {
    ++n;
  }

  return n;
}
    57ac:	4770      	bx	lr
    57ae:	46c0      	nop			; (mov r8, r8)

000057b0 <list_item_next>:
 *             lists.
 */
void *
list_item_next(void *item)
{
  return item == NULL? NULL: ((struct list *)item)->next;
    57b0:	2800      	cmp	r0, #0
    57b2:	d001      	beq.n	57b8 <list_item_next+0x8>
    57b4:	6800      	ldr	r0, [r0, #0]
    57b6:	e000      	b.n	57ba <list_item_next+0xa>
    57b8:	2000      	movs	r0, #0
}
    57ba:	4770      	bx	lr

000057bc <memb_init>:
#include "lib/memb.h"

/*---------------------------------------------------------------------------*/
void
memb_init(struct memb *m)
{
    57bc:	b538      	push	{r3, r4, r5, lr}
    57be:	1c04      	adds	r4, r0, #0
  memset(m->count, 0, m->num);
    57c0:	8842      	ldrh	r2, [r0, #2]
    57c2:	6840      	ldr	r0, [r0, #4]
    57c4:	2100      	movs	r1, #0
    57c6:	4d04      	ldr	r5, [pc, #16]	; (57d8 <memb_init+0x1c>)
    57c8:	47a8      	blx	r5
  memset(m->mem, 0, m->size * m->num);
    57ca:	8822      	ldrh	r2, [r4, #0]
    57cc:	8863      	ldrh	r3, [r4, #2]
    57ce:	435a      	muls	r2, r3
    57d0:	68a0      	ldr	r0, [r4, #8]
    57d2:	2100      	movs	r1, #0
    57d4:	47a8      	blx	r5
}
    57d6:	bd38      	pop	{r3, r4, r5, pc}
    57d8:	00010921 	.word	0x00010921

000057dc <memb_alloc>:
/*---------------------------------------------------------------------------*/
void *
memb_alloc(struct memb *m)
{
    57dc:	b530      	push	{r4, r5, lr}
  int i;

  for(i = 0; i < m->num; ++i) {
    57de:	8845      	ldrh	r5, [r0, #2]
    57e0:	2d00      	cmp	r5, #0
    57e2:	dd1a      	ble.n	581a <memb_alloc+0x3e>
    if(m->count[i] == 0) {
    57e4:	6844      	ldr	r4, [r0, #4]
    57e6:	7823      	ldrb	r3, [r4, #0]
    57e8:	2b00      	cmp	r3, #0
    57ea:	d10f      	bne.n	580c <memb_alloc+0x30>
    57ec:	e006      	b.n	57fc <memb_alloc+0x20>
    57ee:	1c1c      	adds	r4, r3, #0
    57f0:	3301      	adds	r3, #1
    57f2:	1e59      	subs	r1, r3, #1
    57f4:	7809      	ldrb	r1, [r1, #0]
    57f6:	2900      	cmp	r1, #0
    57f8:	d10a      	bne.n	5810 <memb_alloc+0x34>
    57fa:	e000      	b.n	57fe <memb_alloc+0x22>
void *
memb_alloc(struct memb *m)
{
  int i;

  for(i = 0; i < m->num; ++i) {
    57fc:	2200      	movs	r2, #0
    if(m->count[i] == 0) {
      /* If this block was unused, we increase the reference count to
	 indicate that it now is used and return a pointer to the
	 memory block. */
      ++(m->count[i]);
    57fe:	2301      	movs	r3, #1
    5800:	7023      	strb	r3, [r4, #0]
      return (void *)((char *)m->mem + (i * m->size));
    5802:	8803      	ldrh	r3, [r0, #0]
    5804:	435a      	muls	r2, r3
    5806:	6880      	ldr	r0, [r0, #8]
    5808:	1880      	adds	r0, r0, r2
    580a:	e007      	b.n	581c <memb_alloc+0x40>
    580c:	1c63      	adds	r3, r4, #1
memb_alloc(struct memb *m)
{
  int i;

  for(i = 0; i < m->num; ++i) {
    if(m->count[i] == 0) {
    580e:	2200      	movs	r2, #0
void *
memb_alloc(struct memb *m)
{
  int i;

  for(i = 0; i < m->num; ++i) {
    5810:	3201      	adds	r2, #1
    5812:	42aa      	cmp	r2, r5
    5814:	dbeb      	blt.n	57ee <memb_alloc+0x12>
    }
  }

  /* No free block was found, so we return NULL to indicate failure to
     allocate block. */
  return NULL;
    5816:	2000      	movs	r0, #0
    5818:	e000      	b.n	581c <memb_alloc+0x40>
    581a:	2000      	movs	r0, #0
}
    581c:	bd30      	pop	{r4, r5, pc}
    581e:	46c0      	nop			; (mov r8, r8)

00005820 <memb_free>:
/*---------------------------------------------------------------------------*/
char
memb_free(struct memb *m, void *ptr)
{
    5820:	b570      	push	{r4, r5, r6, lr}
  int i;
  char *ptr2;

  /* Walk through the list of blocks and try to find the block to
     which the pointer "ptr" points to. */
  ptr2 = (char *)m->mem;
    5822:	6882      	ldr	r2, [r0, #8]
  for(i = 0; i < m->num; ++i) {
    5824:	8845      	ldrh	r5, [r0, #2]
    5826:	2d00      	cmp	r5, #0
    5828:	dd1d      	ble.n	5866 <memb_free+0x46>
    
    if(ptr2 == (char *)ptr) {
    582a:	428a      	cmp	r2, r1
    582c:	d111      	bne.n	5852 <memb_free+0x32>
    582e:	e003      	b.n	5838 <memb_free+0x18>
    5830:	1994      	adds	r4, r2, r6
    5832:	4291      	cmp	r1, r2
    5834:	d111      	bne.n	585a <memb_free+0x3a>
    5836:	e000      	b.n	583a <memb_free+0x1a>
  char *ptr2;

  /* Walk through the list of blocks and try to find the block to
     which the pointer "ptr" points to. */
  ptr2 = (char *)m->mem;
  for(i = 0; i < m->num; ++i) {
    5838:	2300      	movs	r3, #0
    
    if(ptr2 == (char *)ptr) {
      /* We've found to block to which "ptr" points so we decrease the
	 reference count and return the new value of it. */
      if(m->count[i] > 0) {
    583a:	1c19      	adds	r1, r3, #0
    583c:	6842      	ldr	r2, [r0, #4]
    583e:	4694      	mov	ip, r2
    5840:	4463      	add	r3, ip
    5842:	781a      	ldrb	r2, [r3, #0]
    5844:	2a00      	cmp	r2, #0
    5846:	d001      	beq.n	584c <memb_free+0x2c>
	/* Make sure that we don't deallocate free memory. */
	--(m->count[i]);
    5848:	3a01      	subs	r2, #1
    584a:	701a      	strb	r2, [r3, #0]
      }
      return m->count[i];
    584c:	6843      	ldr	r3, [r0, #4]
    584e:	5c58      	ldrb	r0, [r3, r1]
    5850:	e00a      	b.n	5868 <memb_free+0x48>
    }
    ptr2 += m->size;
    5852:	8806      	ldrh	r6, [r0, #0]
    5854:	1992      	adds	r2, r2, r6
    5856:	2300      	movs	r3, #0
    5858:	e000      	b.n	585c <memb_free+0x3c>
    585a:	1c22      	adds	r2, r4, #0
  char *ptr2;

  /* Walk through the list of blocks and try to find the block to
     which the pointer "ptr" points to. */
  ptr2 = (char *)m->mem;
  for(i = 0; i < m->num; ++i) {
    585c:	3301      	adds	r3, #1
    585e:	42ab      	cmp	r3, r5
    5860:	dbe6      	blt.n	5830 <memb_free+0x10>
      }
      return m->count[i];
    }
    ptr2 += m->size;
  }
  return -1;
    5862:	20ff      	movs	r0, #255	; 0xff
    5864:	e000      	b.n	5868 <memb_free+0x48>
    5866:	20ff      	movs	r0, #255	; 0xff
}
    5868:	bd70      	pop	{r4, r5, r6, pc}
    586a:	46c0      	nop			; (mov r8, r8)

0000586c <memb_inmemb>:
/*---------------------------------------------------------------------------*/
int
memb_inmemb(struct memb *m, void *ptr)
{
    586c:	1c03      	adds	r3, r0, #0
  return (char *)ptr >= (char *)m->mem &&
    586e:	6882      	ldr	r2, [r0, #8]
    5870:	2000      	movs	r0, #0
    5872:	428a      	cmp	r2, r1
    5874:	d806      	bhi.n	5884 <memb_inmemb+0x18>
    (char *)ptr < (char *)m->mem + (m->num * m->size);
    5876:	8858      	ldrh	r0, [r3, #2]
    5878:	881b      	ldrh	r3, [r3, #0]
    587a:	4358      	muls	r0, r3
    587c:	1810      	adds	r0, r2, r0
}
/*---------------------------------------------------------------------------*/
int
memb_inmemb(struct memb *m, void *ptr)
{
  return (char *)ptr >= (char *)m->mem &&
    587e:	4281      	cmp	r1, r0
    5880:	4189      	sbcs	r1, r1
    5882:	4248      	negs	r0, r1
    (char *)ptr < (char *)m->mem + (m->num * m->size);
}
    5884:	4770      	bx	lr
    5886:	46c0      	nop			; (mov r8, r8)

00005888 <random_init>:
#include <stdlib.h>

/*---------------------------------------------------------------------------*/
void
random_init(unsigned short seed)
{
    5888:	b508      	push	{r3, lr}
  srand(seed);
    588a:	4b01      	ldr	r3, [pc, #4]	; (5890 <random_init+0x8>)
    588c:	4798      	blx	r3
}
    588e:	bd08      	pop	{r3, pc}
    5890:	0001098d 	.word	0x0001098d

00005894 <random_rand>:
/*---------------------------------------------------------------------------*/
unsigned short
random_rand(void)
{
    5894:	b508      	push	{r3, lr}
/* In gcc int rand() uses RAND_MAX and long random() uses RANDOM_MAX=0x7FFFFFFF */
/* RAND_MAX varies depending on the architecture */

  return (unsigned short)rand();
    5896:	4b02      	ldr	r3, [pc, #8]	; (58a0 <random_rand+0xc>)
    5898:	4798      	blx	r3
    589a:	b280      	uxth	r0, r0
}
    589c:	bd08      	pop	{r3, pc}
    589e:	46c0      	nop			; (mov r8, r8)
    58a0:	000109e9 	.word	0x000109e9

000058a4 <process_thread_sensors_process>:
  }
  return NULL;
}
/*---------------------------------------------------------------------------*/
PROCESS_THREAD(sensors_process, ev, data)
{
    58a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    58a6:	1c07      	adds	r7, r0, #0
  static int i;
  static int events;

  PROCESS_BEGIN();
    58a8:	8803      	ldrh	r3, [r0, #0]
    58aa:	2b78      	cmp	r3, #120	; 0x78
    58ac:	d026      	beq.n	58fc <process_thread_sensors_process+0x58>
    58ae:	2b7f      	cmp	r3, #127	; 0x7f
    58b0:	d03c      	beq.n	592c <process_thread_sensors_process+0x88>
    58b2:	2b00      	cmp	r3, #0
    58b4:	d159      	bne.n	596a <process_thread_sensors_process+0xc6>

  sensors_event = process_alloc_event();
    58b6:	4b2f      	ldr	r3, [pc, #188]	; (5974 <process_thread_sensors_process+0xd0>)
    58b8:	4798      	blx	r3
    58ba:	4b2f      	ldr	r3, [pc, #188]	; (5978 <process_thread_sensors_process+0xd4>)
    58bc:	7018      	strb	r0, [r3, #0]

  
  for(i = 0; sensors[i] != NULL; ++i) {
    58be:	2200      	movs	r2, #0
    58c0:	4b2e      	ldr	r3, [pc, #184]	; (597c <process_thread_sensors_process+0xd8>)
    58c2:	601a      	str	r2, [r3, #0]
    58c4:	4b2e      	ldr	r3, [pc, #184]	; (5980 <process_thread_sensors_process+0xdc>)
    58c6:	681a      	ldr	r2, [r3, #0]
    58c8:	2a00      	cmp	r2, #0
    58ca:	d010      	beq.n	58ee <process_thread_sensors_process+0x4a>
    58cc:	2300      	movs	r3, #0
    sensors_flags[i] = 0;
    58ce:	4e2d      	ldr	r6, [pc, #180]	; (5984 <process_thread_sensors_process+0xe0>)
  PROCESS_BEGIN();

  sensors_event = process_alloc_event();

  
  for(i = 0; sensors[i] != NULL; ++i) {
    58d0:	4c2a      	ldr	r4, [pc, #168]	; (597c <process_thread_sensors_process+0xd8>)
    58d2:	4d2b      	ldr	r5, [pc, #172]	; (5980 <process_thread_sensors_process+0xdc>)
    sensors_flags[i] = 0;
    58d4:	2100      	movs	r1, #0
    58d6:	54f1      	strb	r1, [r6, r3]
    sensors[i]->configure(SENSORS_HW_INIT, 0);
    58d8:	6893      	ldr	r3, [r2, #8]
    58da:	2080      	movs	r0, #128	; 0x80
    58dc:	4798      	blx	r3
  PROCESS_BEGIN();

  sensors_event = process_alloc_event();

  
  for(i = 0; sensors[i] != NULL; ++i) {
    58de:	6823      	ldr	r3, [r4, #0]
    58e0:	3301      	adds	r3, #1
    58e2:	6023      	str	r3, [r4, #0]
    58e4:	009a      	lsls	r2, r3, #2
    58e6:	5952      	ldr	r2, [r2, r5]
    58e8:	2a00      	cmp	r2, #0
    58ea:	d1f3      	bne.n	58d4 <process_thread_sensors_process+0x30>
    58ec:	e000      	b.n	58f0 <process_thread_sensors_process+0x4c>
    58ee:	2300      	movs	r3, #0
    sensors_flags[i] = 0;
    sensors[i]->configure(SENSORS_HW_INIT, 0);
  }
  num_sensors = i;
    58f0:	4a25      	ldr	r2, [pc, #148]	; (5988 <process_thread_sensors_process+0xe4>)
    58f2:	7013      	strb	r3, [r2, #0]

  while(1) {

    PROCESS_WAIT_EVENT();
    58f4:	2378      	movs	r3, #120	; 0x78
    58f6:	803b      	strh	r3, [r7, #0]
    58f8:	2001      	movs	r0, #1
    58fa:	e039      	b.n	5970 <process_thread_sensors_process+0xcc>

    do {
      events = 0;
    58fc:	2300      	movs	r3, #0
    58fe:	4a23      	ldr	r2, [pc, #140]	; (598c <process_thread_sensors_process+0xe8>)
    5900:	6013      	str	r3, [r2, #0]
      for(i = 0; i < num_sensors; ++i) {
    5902:	4a1e      	ldr	r2, [pc, #120]	; (597c <process_thread_sensors_process+0xd8>)
    5904:	6013      	str	r3, [r2, #0]
    5906:	e025      	b.n	5954 <process_thread_sensors_process+0xb0>
	if(sensors_flags[i] & FLAG_CHANGED) {
    5908:	4a1e      	ldr	r2, [pc, #120]	; (5984 <process_thread_sensors_process+0xe0>)
    590a:	5cd2      	ldrb	r2, [r2, r3]
    590c:	2a7f      	cmp	r2, #127	; 0x7f
    590e:	d91d      	bls.n	594c <process_thread_sensors_process+0xa8>
	  if(process_post(PROCESS_BROADCAST, sensors_event, (void *)sensors[i]) == PROCESS_ERR_OK) {
    5910:	4a19      	ldr	r2, [pc, #100]	; (5978 <process_thread_sensors_process+0xd4>)
    5912:	7811      	ldrb	r1, [r2, #0]
    5914:	009b      	lsls	r3, r3, #2
    5916:	4a1a      	ldr	r2, [pc, #104]	; (5980 <process_thread_sensors_process+0xdc>)
    5918:	589a      	ldr	r2, [r3, r2]
    591a:	2000      	movs	r0, #0
    591c:	4b1c      	ldr	r3, [pc, #112]	; (5990 <process_thread_sensors_process+0xec>)
    591e:	4798      	blx	r3
    5920:	2800      	cmp	r0, #0
    5922:	d108      	bne.n	5936 <process_thread_sensors_process+0x92>
	    PROCESS_WAIT_EVENT_UNTIL(ev == sensors_event);
    5924:	237f      	movs	r3, #127	; 0x7f
    5926:	803b      	strh	r3, [r7, #0]
    5928:	3001      	adds	r0, #1
    592a:	e021      	b.n	5970 <process_thread_sensors_process+0xcc>
    592c:	4b12      	ldr	r3, [pc, #72]	; (5978 <process_thread_sensors_process+0xd4>)
    592e:	781b      	ldrb	r3, [r3, #0]
    5930:	2001      	movs	r0, #1
    5932:	428b      	cmp	r3, r1
    5934:	d11c      	bne.n	5970 <process_thread_sensors_process+0xcc>
	  }
	  sensors_flags[i] &= ~FLAG_CHANGED;
    5936:	4b11      	ldr	r3, [pc, #68]	; (597c <process_thread_sensors_process+0xd8>)
    5938:	681a      	ldr	r2, [r3, #0]
    593a:	4912      	ldr	r1, [pc, #72]	; (5984 <process_thread_sensors_process+0xe0>)
    593c:	5c8b      	ldrb	r3, [r1, r2]
    593e:	207f      	movs	r0, #127	; 0x7f
    5940:	4003      	ands	r3, r0
    5942:	548b      	strb	r3, [r1, r2]
	  events++;
    5944:	4a11      	ldr	r2, [pc, #68]	; (598c <process_thread_sensors_process+0xe8>)
    5946:	6813      	ldr	r3, [r2, #0]
    5948:	3301      	adds	r3, #1
    594a:	6013      	str	r3, [r2, #0]

    PROCESS_WAIT_EVENT();

    do {
      events = 0;
      for(i = 0; i < num_sensors; ++i) {
    594c:	4a0b      	ldr	r2, [pc, #44]	; (597c <process_thread_sensors_process+0xd8>)
    594e:	6813      	ldr	r3, [r2, #0]
    5950:	3301      	adds	r3, #1
    5952:	6013      	str	r3, [r2, #0]
    5954:	4b09      	ldr	r3, [pc, #36]	; (597c <process_thread_sensors_process+0xd8>)
    5956:	681b      	ldr	r3, [r3, #0]
    5958:	4a0b      	ldr	r2, [pc, #44]	; (5988 <process_thread_sensors_process+0xe4>)
    595a:	7812      	ldrb	r2, [r2, #0]
    595c:	429a      	cmp	r2, r3
    595e:	dcd3      	bgt.n	5908 <process_thread_sensors_process+0x64>
	  }
	  sensors_flags[i] &= ~FLAG_CHANGED;
	  events++;
	}
      }
    } while(events);
    5960:	4b0a      	ldr	r3, [pc, #40]	; (598c <process_thread_sensors_process+0xe8>)
    5962:	681b      	ldr	r3, [r3, #0]
    5964:	2b00      	cmp	r3, #0
    5966:	d1c9      	bne.n	58fc <process_thread_sensors_process+0x58>
    5968:	e7c4      	b.n	58f4 <process_thread_sensors_process+0x50>
  }

  PROCESS_END();
    596a:	2300      	movs	r3, #0
    596c:	8003      	strh	r3, [r0, #0]
    596e:	2003      	movs	r0, #3
}
    5970:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    5972:	46c0      	nop			; (mov r8, r8)
    5974:	0000eaed 	.word	0x0000eaed
    5978:	20002b55 	.word	0x20002b55
    597c:	20000390 	.word	0x20000390
    5980:	200001b8 	.word	0x200001b8
    5984:	20003514 	.word	0x20003514
    5988:	2000038e 	.word	0x2000038e
    598c:	20000394 	.word	0x20000394
    5990:	0000ebf9 	.word	0x0000ebf9

00005994 <set_packet_attrs>:
static void
set_packet_attrs(void)
{
  int c = 0;
  /* set protocol in NETWORK_ID */
  packetbuf_set_attr(PACKETBUF_ATTR_NETWORK_ID, UIP_IP_BUF->proto);
    5994:	4b11      	ldr	r3, [pc, #68]	; (59dc <set_packet_attrs+0x48>)
    5996:	799b      	ldrb	r3, [r3, #6]

static inline int
packetbuf_set_attr(uint8_t type, const packetbuf_attr_t val)
{
/*   packetbuf_attrs[type].type = type; */
  packetbuf_attrs[type].val = val;
    5998:	4a11      	ldr	r2, [pc, #68]	; (59e0 <set_packet_attrs+0x4c>)
    599a:	8093      	strh	r3, [r2, #4]

  /* assign values to the channel attribute (port or type + code) */
  if(UIP_IP_BUF->proto == UIP_PROTO_UDP) {
    599c:	2b11      	cmp	r3, #17
    599e:	d106      	bne.n	59ae <set_packet_attrs+0x1a>
    c = UIP_UDP_BUF->srcport;
    59a0:	4b0e      	ldr	r3, [pc, #56]	; (59dc <set_packet_attrs+0x48>)
    59a2:	8d19      	ldrh	r1, [r3, #40]	; 0x28
    if(UIP_UDP_BUF->destport < c) {
    59a4:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
    59a6:	428a      	cmp	r2, r1
    59a8:	dd14      	ble.n	59d4 <set_packet_attrs+0x40>
    59aa:	1c0a      	adds	r2, r1, #0
    59ac:	e012      	b.n	59d4 <set_packet_attrs+0x40>
      c = UIP_UDP_BUF->destport;
    }
  } else if(UIP_IP_BUF->proto == UIP_PROTO_TCP) {
    59ae:	2b06      	cmp	r3, #6
    59b0:	d106      	bne.n	59c0 <set_packet_attrs+0x2c>
    c = UIP_TCP_BUF->srcport;
    59b2:	4b0a      	ldr	r3, [pc, #40]	; (59dc <set_packet_attrs+0x48>)
    59b4:	8d19      	ldrh	r1, [r3, #40]	; 0x28
    if(UIP_TCP_BUF->destport < c) {
    59b6:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
    59b8:	428a      	cmp	r2, r1
    59ba:	dd0b      	ble.n	59d4 <set_packet_attrs+0x40>
    59bc:	1c0a      	adds	r2, r1, #0
    59be:	e009      	b.n	59d4 <set_packet_attrs+0x40>
}

static void
set_packet_attrs(void)
{
  int c = 0;
    59c0:	2200      	movs	r2, #0
  } else if(UIP_IP_BUF->proto == UIP_PROTO_TCP) {
    c = UIP_TCP_BUF->srcport;
    if(UIP_TCP_BUF->destport < c) {
      c = UIP_TCP_BUF->destport;
    }
  } else if(UIP_IP_BUF->proto == UIP_PROTO_ICMP6) {
    59c2:	2b3a      	cmp	r3, #58	; 0x3a
    59c4:	d106      	bne.n	59d4 <set_packet_attrs+0x40>
    c = UIP_ICMP_BUF->type << 8 | UIP_ICMP_BUF->icode;
    59c6:	4b05      	ldr	r3, [pc, #20]	; (59dc <set_packet_attrs+0x48>)
    59c8:	3228      	adds	r2, #40	; 0x28
    59ca:	5c9a      	ldrb	r2, [r3, r2]
    59cc:	0212      	lsls	r2, r2, #8
    59ce:	2129      	movs	r1, #41	; 0x29
    59d0:	5c5b      	ldrb	r3, [r3, r1]
    59d2:	431a      	orrs	r2, r3
    59d4:	4b02      	ldr	r3, [pc, #8]	; (59e0 <set_packet_attrs+0x4c>)
    59d6:	805a      	strh	r2, [r3, #2]

/*   if(uip_ds6_is_my_addr(&UIP_IP_BUF->srcipaddr)) { */
/*     own = 1; */
/*   } */

}
    59d8:	4770      	bx	lr
    59da:	46c0      	nop			; (mov r8, r8)
    59dc:	20002cd4 	.word	0x20002cd4
    59e0:	200031f8 	.word	0x200031f8

000059e4 <sicslowpan_init>:
/*--------------------------------------------------------------------*/
/* \brief 6lowpan init function (called by the MAC layer)             */
/*--------------------------------------------------------------------*/
void
sicslowpan_init(void)
{
    59e4:	b508      	push	{r3, lr}
  /*
   * Set out output function as the function to be called from uIP to
   * send a packet.
   */
  tcpip_set_outputfunc(output);
    59e6:	4806      	ldr	r0, [pc, #24]	; (5a00 <sicslowpan_init+0x1c>)
    59e8:	4b06      	ldr	r3, [pc, #24]	; (5a04 <sicslowpan_init+0x20>)
    59ea:	4798      	blx	r3
 * (Saves up to 13 bytes per 6lowpan packet)
 * The platform contiki-conf.h file can override this using e.g.
 * #define SICSLOWPAN_CONF_ADDR_CONTEXT_0 {addr_contexts[0].prefix[0]=0xbb;addr_contexts[0].prefix[1]=0xbb;}
 */
#if SICSLOWPAN_CONF_MAX_ADDR_CONTEXTS > 0 
  addr_contexts[0].used   = 1;
    59ec:	4b06      	ldr	r3, [pc, #24]	; (5a08 <sicslowpan_init+0x24>)
    59ee:	2201      	movs	r2, #1
    59f0:	701a      	strb	r2, [r3, #0]
  addr_contexts[0].number = 0;
    59f2:	2200      	movs	r2, #0
    59f4:	705a      	strb	r2, [r3, #1]
#ifdef SICSLOWPAN_CONF_ADDR_CONTEXT_0
	SICSLOWPAN_CONF_ADDR_CONTEXT_0;
#else
  addr_contexts[0].prefix[0] = 0xaa; 
    59f6:	32aa      	adds	r2, #170	; 0xaa
    59f8:	709a      	strb	r2, [r3, #2]
  addr_contexts[0].prefix[1] = 0xaa;
    59fa:	70da      	strb	r2, [r3, #3]
    }
  }
#endif /* SICSLOWPAN_CONF_MAX_ADDR_CONTEXTS > 1 */

#endif /* SICSLOWPAN_COMPRESSION == SICSLOWPAN_COMPRESSION_HC06 */
}
    59fc:	bd08      	pop	{r3, pc}
    59fe:	46c0      	nop			; (mov r8, r8)
    5a00:	00005b19 	.word	0x00005b19
    5a04:	0000a561 	.word	0x0000a561
    5a08:	20000558 	.word	0x20000558

00005a0c <compress_addr_64>:
  return NULL;
}
/*--------------------------------------------------------------------*/
static uint8_t
compress_addr_64(uint8_t bitpos, uip_ipaddr_t *ipaddr, uip_lladdr_t *lladdr)
{
    5a0c:	b570      	push	{r4, r5, r6, lr}
  if(uip_is_addr_mac_addr_based(ipaddr, lladdr)) {
    5a0e:	7815      	ldrb	r5, [r2, #0]
    5a10:	7a0c      	ldrb	r4, [r1, #8]
    5a12:	2302      	movs	r3, #2
    5a14:	406b      	eors	r3, r5
    5a16:	429c      	cmp	r4, r3
    5a18:	d11f      	bne.n	5a5a <compress_addr_64+0x4e>
    5a1a:	7a4c      	ldrb	r4, [r1, #9]
    5a1c:	7853      	ldrb	r3, [r2, #1]
    5a1e:	429c      	cmp	r4, r3
    5a20:	d11b      	bne.n	5a5a <compress_addr_64+0x4e>
    5a22:	7a8c      	ldrb	r4, [r1, #10]
    5a24:	7893      	ldrb	r3, [r2, #2]
    5a26:	429c      	cmp	r4, r3
    5a28:	d117      	bne.n	5a5a <compress_addr_64+0x4e>
    5a2a:	7acc      	ldrb	r4, [r1, #11]
    5a2c:	78d3      	ldrb	r3, [r2, #3]
    5a2e:	429c      	cmp	r4, r3
    5a30:	d113      	bne.n	5a5a <compress_addr_64+0x4e>
    5a32:	7b0c      	ldrb	r4, [r1, #12]
    5a34:	7913      	ldrb	r3, [r2, #4]
    5a36:	429c      	cmp	r4, r3
    5a38:	d10f      	bne.n	5a5a <compress_addr_64+0x4e>
    5a3a:	7b4c      	ldrb	r4, [r1, #13]
    5a3c:	7953      	ldrb	r3, [r2, #5]
    5a3e:	429c      	cmp	r4, r3
    5a40:	d10b      	bne.n	5a5a <compress_addr_64+0x4e>
    5a42:	7b8c      	ldrb	r4, [r1, #14]
    5a44:	7993      	ldrb	r3, [r2, #6]
    5a46:	429c      	cmp	r4, r3
    5a48:	d107      	bne.n	5a5a <compress_addr_64+0x4e>
    5a4a:	7bcc      	ldrb	r4, [r1, #15]
    5a4c:	79d3      	ldrb	r3, [r2, #7]
    5a4e:	429c      	cmp	r4, r3
    5a50:	d103      	bne.n	5a5a <compress_addr_64+0x4e>
    return 3 << bitpos; /* 0-bits */
    5a52:	2303      	movs	r3, #3
    5a54:	4083      	lsls	r3, r0
    5a56:	b2d8      	uxtb	r0, r3
    5a58:	e02a      	b.n	5ab0 <compress_addr_64+0xa4>
    5a5a:	1c05      	adds	r5, r0, #0
  } else if(sicslowpan_is_iid_16_bit_compressable(ipaddr)) {
    5a5c:	7a0a      	ldrb	r2, [r1, #8]
    5a5e:	7a4b      	ldrb	r3, [r1, #9]
    5a60:	021b      	lsls	r3, r3, #8
    5a62:	4313      	orrs	r3, r2
    5a64:	d118      	bne.n	5a98 <compress_addr_64+0x8c>
    5a66:	7a8b      	ldrb	r3, [r1, #10]
    5a68:	2b00      	cmp	r3, #0
    5a6a:	d115      	bne.n	5a98 <compress_addr_64+0x8c>
    5a6c:	7acb      	ldrb	r3, [r1, #11]
    5a6e:	2bff      	cmp	r3, #255	; 0xff
    5a70:	d112      	bne.n	5a98 <compress_addr_64+0x8c>
    5a72:	7b0b      	ldrb	r3, [r1, #12]
    5a74:	2bfe      	cmp	r3, #254	; 0xfe
    5a76:	d10f      	bne.n	5a98 <compress_addr_64+0x8c>
    5a78:	7b4b      	ldrb	r3, [r1, #13]
    5a7a:	2b00      	cmp	r3, #0
    5a7c:	d10c      	bne.n	5a98 <compress_addr_64+0x8c>
    /* compress IID to 16 bits xxxx::0000:00ff:fe00:XXXX */
    memcpy(hc06_ptr, &ipaddr->u16[7], 2);
    5a7e:	4e0d      	ldr	r6, [pc, #52]	; (5ab4 <compress_addr_64+0xa8>)
    5a80:	6834      	ldr	r4, [r6, #0]
    5a82:	310e      	adds	r1, #14
    5a84:	1c20      	adds	r0, r4, #0
    5a86:	2202      	movs	r2, #2
    5a88:	4b0b      	ldr	r3, [pc, #44]	; (5ab8 <compress_addr_64+0xac>)
    5a8a:	4798      	blx	r3
    hc06_ptr += 2;
    5a8c:	3402      	adds	r4, #2
    5a8e:	6034      	str	r4, [r6, #0]
    return 2 << bitpos; /* 16-bits */
    5a90:	2302      	movs	r3, #2
    5a92:	40ab      	lsls	r3, r5
    5a94:	b2d8      	uxtb	r0, r3
    5a96:	e00b      	b.n	5ab0 <compress_addr_64+0xa4>
  } else {
    /* do not compress IID => xxxx::IID */
    memcpy(hc06_ptr, &ipaddr->u16[4], 8);
    5a98:	4e06      	ldr	r6, [pc, #24]	; (5ab4 <compress_addr_64+0xa8>)
    5a9a:	6834      	ldr	r4, [r6, #0]
    5a9c:	3108      	adds	r1, #8
    5a9e:	1c20      	adds	r0, r4, #0
    5aa0:	2208      	movs	r2, #8
    5aa2:	4b05      	ldr	r3, [pc, #20]	; (5ab8 <compress_addr_64+0xac>)
    5aa4:	4798      	blx	r3
    hc06_ptr += 8;
    5aa6:	3408      	adds	r4, #8
    5aa8:	6034      	str	r4, [r6, #0]
    return 1 << bitpos; /* 64-bits */
    5aaa:	2001      	movs	r0, #1
    5aac:	40a8      	lsls	r0, r5
    5aae:	b2c0      	uxtb	r0, r0
  }
}
    5ab0:	bd70      	pop	{r4, r5, r6, pc}
    5ab2:	46c0      	nop			; (mov r8, r8)
    5ab4:	20000564 	.word	0x20000564
    5ab8:	000108e7 	.word	0x000108e7

00005abc <addr_context_lookup_by_prefix>:
 * @{                                                                 */
/*--------------------------------------------------------------------*/
/** \brief find the context corresponding to prefix ipaddr */
static struct sicslowpan_addr_context*
addr_context_lookup_by_prefix(uip_ipaddr_t *ipaddr)
{
    5abc:	b508      	push	{r3, lr}
/* Remove code to avoid warnings and save flash if no context is used */
#if SICSLOWPAN_CONF_MAX_ADDR_CONTEXTS > 0
  int i;
  for(i = 0; i < SICSLOWPAN_CONF_MAX_ADDR_CONTEXTS; i++) {
    if((addr_contexts[i].used == 1) &&
    5abe:	4b08      	ldr	r3, [pc, #32]	; (5ae0 <addr_context_lookup_by_prefix+0x24>)
    5ac0:	781a      	ldrb	r2, [r3, #0]
       uip_ipaddr_prefixcmp(&addr_contexts[i].prefix, ipaddr, 64)) {
      return &addr_contexts[i];
    }
  }
#endif /* SICSLOWPAN_CONF_MAX_ADDR_CONTEXTS > 0 */
  return NULL;
    5ac2:	2300      	movs	r3, #0
{
/* Remove code to avoid warnings and save flash if no context is used */
#if SICSLOWPAN_CONF_MAX_ADDR_CONTEXTS > 0
  int i;
  for(i = 0; i < SICSLOWPAN_CONF_MAX_ADDR_CONTEXTS; i++) {
    if((addr_contexts[i].used == 1) &&
    5ac4:	2a01      	cmp	r2, #1
    5ac6:	d109      	bne.n	5adc <addr_context_lookup_by_prefix+0x20>
    5ac8:	1c01      	adds	r1, r0, #0
       uip_ipaddr_prefixcmp(&addr_contexts[i].prefix, ipaddr, 64)) {
    5aca:	4805      	ldr	r0, [pc, #20]	; (5ae0 <addr_context_lookup_by_prefix+0x24>)
    5acc:	3002      	adds	r0, #2
    5ace:	3207      	adds	r2, #7
    5ad0:	4b04      	ldr	r3, [pc, #16]	; (5ae4 <addr_context_lookup_by_prefix+0x28>)
    5ad2:	4798      	blx	r3
      return &addr_contexts[i];
    }
  }
#endif /* SICSLOWPAN_CONF_MAX_ADDR_CONTEXTS > 0 */
  return NULL;
    5ad4:	2300      	movs	r3, #0
{
/* Remove code to avoid warnings and save flash if no context is used */
#if SICSLOWPAN_CONF_MAX_ADDR_CONTEXTS > 0
  int i;
  for(i = 0; i < SICSLOWPAN_CONF_MAX_ADDR_CONTEXTS; i++) {
    if((addr_contexts[i].used == 1) &&
    5ad6:	2800      	cmp	r0, #0
    5ad8:	d100      	bne.n	5adc <addr_context_lookup_by_prefix+0x20>
       uip_ipaddr_prefixcmp(&addr_contexts[i].prefix, ipaddr, 64)) {
      return &addr_contexts[i];
    5ada:	4b01      	ldr	r3, [pc, #4]	; (5ae0 <addr_context_lookup_by_prefix+0x24>)
    }
  }
#endif /* SICSLOWPAN_CONF_MAX_ADDR_CONTEXTS > 0 */
  return NULL;
}
    5adc:	1c18      	adds	r0, r3, #0
    5ade:	bd08      	pop	{r3, pc}
    5ae0:	20000558 	.word	0x20000558
    5ae4:	000108c9 	.word	0x000108c9

00005ae8 <send_packet>:
 * packet.
 * \param dest the link layer destination address of the packet
 */
static void
send_packet(linkaddr_t *dest)
{
    5ae8:	b508      	push	{r3, lr}
    5aea:	1c01      	adds	r1, r0, #0

static inline int
packetbuf_set_addr(uint8_t type, const linkaddr_t *addr)
{
/*   packetbuf_addrs[type - PACKETBUF_ADDR_FIRST].type = type; */
  linkaddr_copy(&packetbuf_addrs[type - PACKETBUF_ADDR_FIRST].addr, addr);
    5aec:	4805      	ldr	r0, [pc, #20]	; (5b04 <send_packet+0x1c>)
    5aee:	4b06      	ldr	r3, [pc, #24]	; (5b08 <send_packet+0x20>)
    5af0:	4798      	blx	r3
    packetbuf_set_attr(PACKETBUF_ATTR_RELIABLE, 1);
#endif

  /* Provide a callback function to receive the result of
     a packet transmission. */
  NETSTACK_MAC.send(&packet_sent, NULL);
    5af2:	4b06      	ldr	r3, [pc, #24]	; (5b0c <send_packet+0x24>)
    5af4:	689b      	ldr	r3, [r3, #8]
    5af6:	4806      	ldr	r0, [pc, #24]	; (5b10 <send_packet+0x28>)
    5af8:	2100      	movs	r1, #0
    5afa:	4798      	blx	r3

  /* If we are sending multiple packets in a row, we need to let the
     watchdog know that we are still alive. */
  //watchdog_periodic();
  wdt_reset_count();
    5afc:	4b05      	ldr	r3, [pc, #20]	; (5b14 <send_packet+0x2c>)
    5afe:	4798      	blx	r3
}
    5b00:	bd08      	pop	{r3, pc}
    5b02:	46c0      	nop			; (mov r8, r8)
    5b04:	200031e0 	.word	0x200031e0
    5b08:	0000ac5d 	.word	0x0000ac5d
    5b0c:	00012bf8 	.word	0x00012bf8
    5b10:	00006299 	.word	0x00006299
    5b14:	00002719 	.word	0x00002719

00005b18 <output>:
 *  packet/fragments are put in packetbuf and delivered to the 802.15.4
 *  MAC.
 */
static uint8_t
output(const uip_lladdr_t *localdest)
{
    5b18:	b5f0      	push	{r4, r5, r6, r7, lr}
    5b1a:	464f      	mov	r7, r9
    5b1c:	4646      	mov	r6, r8
    5b1e:	b4c0      	push	{r6, r7}
    5b20:	b083      	sub	sp, #12
    5b22:	1c04      	adds	r4, r0, #0

  /* Number of bytes processed. */
  uint16_t processed_ip_out_len;

  /* init */
  uncomp_hdr_len = 0;
    5b24:	2300      	movs	r3, #0
    5b26:	4ab4      	ldr	r2, [pc, #720]	; (5df8 <output+0x2e0>)
    5b28:	7013      	strb	r3, [r2, #0]
  packetbuf_hdr_len = 0;
    5b2a:	4ab4      	ldr	r2, [pc, #720]	; (5dfc <output+0x2e4>)
    5b2c:	7013      	strb	r3, [r2, #0]

  /* reset packetbuf buffer */
  packetbuf_clear();
    5b2e:	4bb4      	ldr	r3, [pc, #720]	; (5e00 <output+0x2e8>)
    5b30:	4798      	blx	r3
  packetbuf_ptr = packetbuf_dataptr();
    5b32:	4bb4      	ldr	r3, [pc, #720]	; (5e04 <output+0x2ec>)
    5b34:	4798      	blx	r3
    5b36:	4bb4      	ldr	r3, [pc, #720]	; (5e08 <output+0x2f0>)
    5b38:	6018      	str	r0, [r3, #0]

static inline int
packetbuf_set_attr(uint8_t type, const packetbuf_attr_t val)
{
/*   packetbuf_attrs[type].type = type; */
  packetbuf_attrs[type].val = val;
    5b3a:	2205      	movs	r2, #5
    5b3c:	4bb3      	ldr	r3, [pc, #716]	; (5e0c <output+0x2f4>)
    5b3e:	829a      	strh	r2, [r3, #20]

  packetbuf_set_attr(PACKETBUF_ATTR_MAX_MAC_TRANSMISSIONS,
                     SICSLOWPAN_MAX_MAC_TRANSMISSIONS);

  if(callback) {
    5b40:	4bb3      	ldr	r3, [pc, #716]	; (5e10 <output+0x2f8>)
    5b42:	681b      	ldr	r3, [r3, #0]
    5b44:	2b00      	cmp	r3, #0
    5b46:	d001      	beq.n	5b4c <output+0x34>
    /* call the attribution when the callback comes, but set attributes
       here ! */
    set_packet_attrs();
    5b48:	4bb2      	ldr	r3, [pc, #712]	; (5e14 <output+0x2fc>)
    5b4a:	4798      	blx	r3

#define TCP_FIN 0x01
#define TCP_ACK 0x10
#define TCP_CTL 0x3f
  /* Set stream mode for all TCP packets, except FIN packets. */
  if(UIP_IP_BUF->proto == UIP_PROTO_TCP &&
    5b4c:	4bb2      	ldr	r3, [pc, #712]	; (5e18 <output+0x300>)
    5b4e:	799b      	ldrb	r3, [r3, #6]
    5b50:	2b06      	cmp	r3, #6
    5b52:	d10c      	bne.n	5b6e <output+0x56>
     (UIP_TCP_BUF->flags & TCP_FIN) == 0 &&
    5b54:	332f      	adds	r3, #47	; 0x2f
    5b56:	4ab0      	ldr	r2, [pc, #704]	; (5e18 <output+0x300>)
    5b58:	5cd3      	ldrb	r3, [r2, r3]

#define TCP_FIN 0x01
#define TCP_ACK 0x10
#define TCP_CTL 0x3f
  /* Set stream mode for all TCP packets, except FIN packets. */
  if(UIP_IP_BUF->proto == UIP_PROTO_TCP &&
    5b5a:	07da      	lsls	r2, r3, #31
    5b5c:	d500      	bpl.n	5b60 <output+0x48>
    5b5e:	e37d      	b.n	625c <output+0x744>
     (UIP_TCP_BUF->flags & TCP_FIN) == 0 &&
    5b60:	223f      	movs	r2, #63	; 0x3f
    5b62:	4013      	ands	r3, r2
    5b64:	2b10      	cmp	r3, #16
    5b66:	d002      	beq.n	5b6e <output+0x56>
    5b68:	3a3d      	subs	r2, #61	; 0x3d
    5b6a:	4ba8      	ldr	r3, [pc, #672]	; (5e0c <output+0x2f4>)
    5b6c:	849a      	strh	r2, [r3, #36]	; 0x24
  /*
   * The destination address will be tagged to each outbound
   * packet. If the argument localdest is NULL, we are sending a
   * broadcast packet.
   */
  if(localdest == NULL) {
    5b6e:	2c00      	cmp	r4, #0
    5b70:	d104      	bne.n	5b7c <output+0x64>
    linkaddr_copy(&dest, &linkaddr_null);
    5b72:	4668      	mov	r0, sp
    5b74:	49a9      	ldr	r1, [pc, #676]	; (5e1c <output+0x304>)
    5b76:	4baa      	ldr	r3, [pc, #680]	; (5e20 <output+0x308>)
    5b78:	4798      	blx	r3
    5b7a:	e003      	b.n	5b84 <output+0x6c>
  } else {
    linkaddr_copy(&dest, (const linkaddr_t *)localdest);
    5b7c:	4668      	mov	r0, sp
    5b7e:	1c21      	adds	r1, r4, #0
    5b80:	4ba7      	ldr	r3, [pc, #668]	; (5e20 <output+0x308>)
    5b82:	4798      	blx	r3
    }
    PRINTF("\n\r");
  }
#endif

  hc06_ptr = packetbuf_ptr + 2;
    5b84:	4ba0      	ldr	r3, [pc, #640]	; (5e08 <output+0x2f0>)
    5b86:	681d      	ldr	r5, [r3, #0]
    5b88:	1caa      	adds	r2, r5, #2
    5b8a:	4ba6      	ldr	r3, [pc, #664]	; (5e24 <output+0x30c>)
    5b8c:	601a      	str	r2, [r3, #0]
   * this does not work. We therefore reset the IPHC encoding here
   */

  iphc0 = SICSLOWPAN_DISPATCH_IPHC;
  iphc1 = 0;
  PACKETBUF_IPHC_BUF[2] = 0; /* might not be used - but needs to be cleared */
    5b8e:	4b9b      	ldr	r3, [pc, #620]	; (5dfc <output+0x2e4>)
    5b90:	781c      	ldrb	r4, [r3, #0]
    5b92:	3402      	adds	r4, #2
    5b94:	192c      	adds	r4, r5, r4
    5b96:	2300      	movs	r3, #0
    5b98:	7023      	strb	r3, [r4, #0]


  /* check if dest context exists (for allocating third byte) */
  /* TODO: fix this so that it remembers the looked up values for
     avoiding two lookups - or set the lookup values immediately */
  if(addr_context_lookup_by_prefix(&UIP_IP_BUF->destipaddr) != NULL ||
    5b9a:	48a3      	ldr	r0, [pc, #652]	; (5e28 <output+0x310>)
    5b9c:	4ba3      	ldr	r3, [pc, #652]	; (5e2c <output+0x314>)
    5b9e:	4798      	blx	r3
    5ba0:	2800      	cmp	r0, #0
    5ba2:	d104      	bne.n	5bae <output+0x96>
     addr_context_lookup_by_prefix(&UIP_IP_BUF->srcipaddr) != NULL) {
    5ba4:	48a2      	ldr	r0, [pc, #648]	; (5e30 <output+0x318>)
    5ba6:	4ba1      	ldr	r3, [pc, #644]	; (5e2c <output+0x314>)
    5ba8:	4798      	blx	r3


  /* check if dest context exists (for allocating third byte) */
  /* TODO: fix this so that it remembers the looked up values for
     avoiding two lookups - or set the lookup values immediately */
  if(addr_context_lookup_by_prefix(&UIP_IP_BUF->destipaddr) != NULL ||
    5baa:	2800      	cmp	r0, #0
    5bac:	d004      	beq.n	5bb8 <output+0xa0>
     addr_context_lookup_by_prefix(&UIP_IP_BUF->srcipaddr) != NULL) {
    /* set context flag and increase hc06_ptr */
    PRINTF("IPHC: compressing dest or src ipaddr - setting CID\n\r");
    iphc1 |= SICSLOWPAN_IPHC_CID;
    hc06_ptr++;
    5bae:	3503      	adds	r5, #3
    5bb0:	4b9c      	ldr	r3, [pc, #624]	; (5e24 <output+0x30c>)
    5bb2:	601d      	str	r5, [r3, #0]
     avoiding two lookups - or set the lookup values immediately */
  if(addr_context_lookup_by_prefix(&UIP_IP_BUF->destipaddr) != NULL ||
     addr_context_lookup_by_prefix(&UIP_IP_BUF->srcipaddr) != NULL) {
    /* set context flag and increase hc06_ptr */
    PRINTF("IPHC: compressing dest or src ipaddr - setting CID\n\r");
    iphc1 |= SICSLOWPAN_IPHC_CID;
    5bb4:	2580      	movs	r5, #128	; 0x80
    5bb6:	e000      	b.n	5bba <output+0xa2>
   * If the field is 0, and the current bit value in memory is 1,
   * this does not work. We therefore reset the IPHC encoding here
   */

  iphc0 = SICSLOWPAN_DISPATCH_IPHC;
  iphc1 = 0;
    5bb8:	2500      	movs	r5, #0
   * We have to process both in the same time as the offset of traffic class
   * depends on the presence of version and flow label
   */
 
  /* hc06 format of tc is ECN | DSCP , original is DSCP | ECN */
  tmp = (UIP_IP_BUF->vtc << 4) | (UIP_IP_BUF->tcflow >> 4);
    5bba:	4b97      	ldr	r3, [pc, #604]	; (5e18 <output+0x300>)
    5bbc:	7818      	ldrb	r0, [r3, #0]
    5bbe:	7859      	ldrb	r1, [r3, #1]
    5bc0:	0103      	lsls	r3, r0, #4
    5bc2:	090a      	lsrs	r2, r1, #4
    5bc4:	4313      	orrs	r3, r2
    5bc6:	b2db      	uxtb	r3, r3
  tmp = ((tmp & 0x03) << 6) | (tmp >> 2);
    5bc8:	019a      	lsls	r2, r3, #6
    5bca:	089b      	lsrs	r3, r3, #2
    5bcc:	4313      	orrs	r3, r2
    5bce:	b2db      	uxtb	r3, r3
    5bd0:	b2df      	uxtb	r7, r3
  
  if(((UIP_IP_BUF->tcflow & 0x0F) == 0) &&
    5bd2:	070a      	lsls	r2, r1, #28
    5bd4:	d113      	bne.n	5bfe <output+0xe6>
     (UIP_IP_BUF->flow == 0)) {
    5bd6:	4a90      	ldr	r2, [pc, #576]	; (5e18 <output+0x300>)
 
  /* hc06 format of tc is ECN | DSCP , original is DSCP | ECN */
  tmp = (UIP_IP_BUF->vtc << 4) | (UIP_IP_BUF->tcflow >> 4);
  tmp = ((tmp & 0x03) << 6) | (tmp >> 2);
  
  if(((UIP_IP_BUF->tcflow & 0x0F) == 0) &&
    5bd8:	8852      	ldrh	r2, [r2, #2]
    5bda:	2a00      	cmp	r2, #0
    5bdc:	d10f      	bne.n	5bfe <output+0xe6>
     (UIP_IP_BUF->flow == 0)) {
    /* flow label can be compressed */
    iphc0 |= SICSLOWPAN_IPHC_FL_C;
    if(((UIP_IP_BUF->vtc & 0x0F) == 0) &&
    5bde:	0703      	lsls	r3, r0, #28
    5be0:	d106      	bne.n	5bf0 <output+0xd8>
    5be2:	230f      	movs	r3, #15
    5be4:	1c0a      	adds	r2, r1, #0
    5be6:	439a      	bics	r2, r3
       ((UIP_IP_BUF->tcflow & 0xF0) == 0)) {
      /* compress (elide) all */
      iphc0 |= SICSLOWPAN_IPHC_TC_C;
    5be8:	2678      	movs	r6, #120	; 0x78
  
  if(((UIP_IP_BUF->tcflow & 0x0F) == 0) &&
     (UIP_IP_BUF->flow == 0)) {
    /* flow label can be compressed */
    iphc0 |= SICSLOWPAN_IPHC_FL_C;
    if(((UIP_IP_BUF->vtc & 0x0F) == 0) &&
    5bea:	2a00      	cmp	r2, #0
    5bec:	d100      	bne.n	5bf0 <output+0xd8>
    5bee:	e32f      	b.n	6250 <output+0x738>
       ((UIP_IP_BUF->tcflow & 0xF0) == 0)) {
      /* compress (elide) all */
      iphc0 |= SICSLOWPAN_IPHC_TC_C;
    } else {
      /* compress only the flow label */
     *hc06_ptr = tmp;
    5bf0:	4a8c      	ldr	r2, [pc, #560]	; (5e24 <output+0x30c>)
    5bf2:	6813      	ldr	r3, [r2, #0]
    5bf4:	701f      	strb	r7, [r3, #0]
      hc06_ptr += 1;
    5bf6:	3301      	adds	r3, #1
    5bf8:	6013      	str	r3, [r2, #0]
  tmp = ((tmp & 0x03) << 6) | (tmp >> 2);
  
  if(((UIP_IP_BUF->tcflow & 0x0F) == 0) &&
     (UIP_IP_BUF->flow == 0)) {
    /* flow label can be compressed */
    iphc0 |= SICSLOWPAN_IPHC_FL_C;
    5bfa:	2670      	movs	r6, #112	; 0x70
    5bfc:	e328      	b.n	6250 <output+0x738>
     *hc06_ptr = tmp;
      hc06_ptr += 1;
    }
  } else {
    /* Flow label cannot be compressed */
    if(((UIP_IP_BUF->vtc & 0x0F) == 0) &&
    5bfe:	0702      	lsls	r2, r0, #28
    5c00:	d115      	bne.n	5c2e <output+0x116>
    5c02:	220f      	movs	r2, #15
    5c04:	1c08      	adds	r0, r1, #0
    5c06:	4390      	bics	r0, r2
    5c08:	1e02      	subs	r2, r0, #0
    5c0a:	d110      	bne.n	5c2e <output+0x116>
       ((UIP_IP_BUF->tcflow & 0xF0) == 0)) {
      /* compress only traffic class */
      iphc0 |= SICSLOWPAN_IPHC_TC_C;
      *hc06_ptr = (tmp & 0xc0) |
    5c0c:	4f85      	ldr	r7, [pc, #532]	; (5e24 <output+0x30c>)
    5c0e:	683e      	ldr	r6, [r7, #0]
    5c10:	323f      	adds	r2, #63	; 0x3f
    5c12:	4393      	bics	r3, r2
    5c14:	3a30      	subs	r2, #48	; 0x30
    5c16:	400a      	ands	r2, r1
    5c18:	4313      	orrs	r3, r2
    5c1a:	7033      	strb	r3, [r6, #0]
        (UIP_IP_BUF->tcflow & 0x0F);
      memcpy(hc06_ptr + 1, &UIP_IP_BUF->flow, 2);
    5c1c:	1c70      	adds	r0, r6, #1
    5c1e:	4985      	ldr	r1, [pc, #532]	; (5e34 <output+0x31c>)
    5c20:	2202      	movs	r2, #2
    5c22:	4b85      	ldr	r3, [pc, #532]	; (5e38 <output+0x320>)
    5c24:	4798      	blx	r3
      hc06_ptr += 3;
    5c26:	3603      	adds	r6, #3
    5c28:	603e      	str	r6, [r7, #0]
  } else {
    /* Flow label cannot be compressed */
    if(((UIP_IP_BUF->vtc & 0x0F) == 0) &&
       ((UIP_IP_BUF->tcflow & 0xF0) == 0)) {
      /* compress only traffic class */
      iphc0 |= SICSLOWPAN_IPHC_TC_C;
    5c2a:	2668      	movs	r6, #104	; 0x68
    5c2c:	e310      	b.n	6250 <output+0x738>
        (UIP_IP_BUF->tcflow & 0x0F);
      memcpy(hc06_ptr + 1, &UIP_IP_BUF->flow, 2);
      hc06_ptr += 3;
    } else {
      /* compress nothing */
      memcpy(hc06_ptr, &UIP_IP_BUF->vtc, 4);
    5c2e:	4b7d      	ldr	r3, [pc, #500]	; (5e24 <output+0x30c>)
    5c30:	4698      	mov	r8, r3
    5c32:	681e      	ldr	r6, [r3, #0]
    5c34:	1c30      	adds	r0, r6, #0
    5c36:	4978      	ldr	r1, [pc, #480]	; (5e18 <output+0x300>)
    5c38:	2204      	movs	r2, #4
    5c3a:	4b7f      	ldr	r3, [pc, #508]	; (5e38 <output+0x320>)
    5c3c:	4798      	blx	r3
      /* but replace the top byte with the new ECN | DSCP format*/
      *hc06_ptr = tmp;
    5c3e:	7037      	strb	r7, [r6, #0]
      hc06_ptr += 4;
    5c40:	3604      	adds	r6, #4
    5c42:	4643      	mov	r3, r8
    5c44:	601e      	str	r6, [r3, #0]
   * we sometimes use |=
   * If the field is 0, and the current bit value in memory is 1,
   * this does not work. We therefore reset the IPHC encoding here
   */

  iphc0 = SICSLOWPAN_DISPATCH_IPHC;
    5c46:	2660      	movs	r6, #96	; 0x60
    5c48:	e302      	b.n	6250 <output+0x738>
  /* Note that the payload length is always compressed */

  /* Next header. We compress it if UDP */
#if UIP_CONF_UDP || UIP_CONF_ROUTER
  if(UIP_IP_BUF->proto == UIP_PROTO_UDP) {
    iphc0 |= SICSLOWPAN_IPHC_NH_C;
    5c4a:	2304      	movs	r3, #4
    5c4c:	431e      	orrs	r6, r3
    5c4e:	e004      	b.n	5c5a <output+0x142>
  if(SICSLOWPAN_NH_COMPRESSOR.is_compressable(UIP_IP_BUF->proto)) {
    iphc0 |= SICSLOWPAN_IPHC_NH_C;
  }
#endif
  if ((iphc0 & SICSLOWPAN_IPHC_NH_C) == 0) {
    *hc06_ptr = UIP_IP_BUF->proto;
    5c50:	4974      	ldr	r1, [pc, #464]	; (5e24 <output+0x30c>)
    5c52:	680a      	ldr	r2, [r1, #0]
    5c54:	7013      	strb	r3, [r2, #0]
    hc06_ptr += 1;
    5c56:	3201      	adds	r2, #1
    5c58:	600a      	str	r2, [r1, #0]
   * if 1: compress, encoding is 01
   * if 64: compress, encoding is 10
   * if 255: compress, encoding is 11
   * else do not compress
   */
  switch(UIP_IP_BUF->ttl) {
    5c5a:	4b6f      	ldr	r3, [pc, #444]	; (5e18 <output+0x300>)
    5c5c:	79db      	ldrb	r3, [r3, #7]
    5c5e:	2b40      	cmp	r3, #64	; 0x40
    5c60:	d005      	beq.n	5c6e <output+0x156>
    5c62:	2bff      	cmp	r3, #255	; 0xff
    5c64:	d006      	beq.n	5c74 <output+0x15c>
    5c66:	2b01      	cmp	r3, #1
    5c68:	d107      	bne.n	5c7a <output+0x162>
    case 1:
      iphc0 |= SICSLOWPAN_IPHC_TTL_1;
    5c6a:	431e      	orrs	r6, r3
    5c6c:	e00a      	b.n	5c84 <output+0x16c>
      break;
    case 64:
      iphc0 |= SICSLOWPAN_IPHC_TTL_64;
    5c6e:	2302      	movs	r3, #2
    5c70:	431e      	orrs	r6, r3
    5c72:	e007      	b.n	5c84 <output+0x16c>
      break;
    case 255:
      iphc0 |= SICSLOWPAN_IPHC_TTL_255;
    5c74:	2303      	movs	r3, #3
    5c76:	431e      	orrs	r6, r3
    5c78:	e004      	b.n	5c84 <output+0x16c>
      break;
    default:
      *hc06_ptr = UIP_IP_BUF->ttl;
    5c7a:	496a      	ldr	r1, [pc, #424]	; (5e24 <output+0x30c>)
    5c7c:	680a      	ldr	r2, [r1, #0]
    5c7e:	7013      	strb	r3, [r2, #0]
      hc06_ptr += 1;
    5c80:	3201      	adds	r2, #1
    5c82:	600a      	str	r2, [r1, #0]
      break;
  }

  /* source address - cannot be multicast */
  if(uip_is_addr_unspecified(&UIP_IP_BUF->srcipaddr)) {
    5c84:	4b64      	ldr	r3, [pc, #400]	; (5e18 <output+0x300>)
    5c86:	891b      	ldrh	r3, [r3, #8]
    5c88:	2b00      	cmp	r3, #0
    5c8a:	d11e      	bne.n	5cca <output+0x1b2>
    5c8c:	4b62      	ldr	r3, [pc, #392]	; (5e18 <output+0x300>)
    5c8e:	895b      	ldrh	r3, [r3, #10]
    5c90:	2b00      	cmp	r3, #0
    5c92:	d11a      	bne.n	5cca <output+0x1b2>
    5c94:	4b60      	ldr	r3, [pc, #384]	; (5e18 <output+0x300>)
    5c96:	899b      	ldrh	r3, [r3, #12]
    5c98:	2b00      	cmp	r3, #0
    5c9a:	d116      	bne.n	5cca <output+0x1b2>
    5c9c:	4b5e      	ldr	r3, [pc, #376]	; (5e18 <output+0x300>)
    5c9e:	89db      	ldrh	r3, [r3, #14]
    5ca0:	2b00      	cmp	r3, #0
    5ca2:	d112      	bne.n	5cca <output+0x1b2>
    5ca4:	4b5c      	ldr	r3, [pc, #368]	; (5e18 <output+0x300>)
    5ca6:	8a1b      	ldrh	r3, [r3, #16]
    5ca8:	2b00      	cmp	r3, #0
    5caa:	d10e      	bne.n	5cca <output+0x1b2>
    5cac:	4b5a      	ldr	r3, [pc, #360]	; (5e18 <output+0x300>)
    5cae:	8a5b      	ldrh	r3, [r3, #18]
    5cb0:	2b00      	cmp	r3, #0
    5cb2:	d10a      	bne.n	5cca <output+0x1b2>
    5cb4:	4b58      	ldr	r3, [pc, #352]	; (5e18 <output+0x300>)
    5cb6:	8a9b      	ldrh	r3, [r3, #20]
    5cb8:	2b00      	cmp	r3, #0
    5cba:	d106      	bne.n	5cca <output+0x1b2>
    5cbc:	4b56      	ldr	r3, [pc, #344]	; (5e18 <output+0x300>)
    5cbe:	8adb      	ldrh	r3, [r3, #22]
    5cc0:	2b00      	cmp	r3, #0
    5cc2:	d102      	bne.n	5cca <output+0x1b2>
    PRINTF("IPHC: compressing unspecified - setting SAC\n\r");
    iphc1 |= SICSLOWPAN_IPHC_SAC;
    5cc4:	3340      	adds	r3, #64	; 0x40
    5cc6:	431d      	orrs	r5, r3
    5cc8:	e03c      	b.n	5d44 <output+0x22c>
    iphc1 |= SICSLOWPAN_IPHC_SAM_00;
  } else if((context = addr_context_lookup_by_prefix(&UIP_IP_BUF->srcipaddr))
    5cca:	4859      	ldr	r0, [pc, #356]	; (5e30 <output+0x318>)
    5ccc:	4b57      	ldr	r3, [pc, #348]	; (5e2c <output+0x314>)
    5cce:	4798      	blx	r3
    5cd0:	4b5a      	ldr	r3, [pc, #360]	; (5e3c <output+0x324>)
    5cd2:	6018      	str	r0, [r3, #0]
    5cd4:	2800      	cmp	r0, #0
    5cd6:	d00e      	beq.n	5cf6 <output+0x1de>
     != NULL) {
    /* elide the prefix - indicate by CID and set context + SAC */
    PRINTF("IPHC: compressing src with context - setting CID & SAC ctx: %d\n\r",
	   context->number);
    iphc1 |= SICSLOWPAN_IPHC_CID | SICSLOWPAN_IPHC_SAC;
    PACKETBUF_IPHC_BUF[2] |= context->number << 4;
    5cd8:	7843      	ldrb	r3, [r0, #1]
    5cda:	011b      	lsls	r3, r3, #4
    5cdc:	7822      	ldrb	r2, [r4, #0]
    5cde:	4313      	orrs	r3, r2
    5ce0:	7023      	strb	r3, [r4, #0]
    /* compession compare with this nodes address (source) */

    iphc1 |= compress_addr_64(SICSLOWPAN_IPHC_SAM_BIT,
    5ce2:	2004      	movs	r0, #4
    5ce4:	4952      	ldr	r1, [pc, #328]	; (5e30 <output+0x318>)
    5ce6:	4a56      	ldr	r2, [pc, #344]	; (5e40 <output+0x328>)
    5ce8:	4b56      	ldr	r3, [pc, #344]	; (5e44 <output+0x32c>)
    5cea:	4798      	blx	r3
    5cec:	2540      	movs	r5, #64	; 0x40
    5cee:	426d      	negs	r5, r5
    5cf0:	4328      	orrs	r0, r5
    5cf2:	b2c5      	uxtb	r5, r0
    5cf4:	e026      	b.n	5d44 <output+0x22c>
                              &UIP_IP_BUF->srcipaddr, &uip_lladdr);
    /* No context found for this address */
  } else if(uip_is_addr_link_local(&UIP_IP_BUF->srcipaddr) &&
    5cf6:	4b48      	ldr	r3, [pc, #288]	; (5e18 <output+0x300>)
    5cf8:	7a1b      	ldrb	r3, [r3, #8]
    5cfa:	2bfe      	cmp	r3, #254	; 0xfe
    5cfc:	d117      	bne.n	5d2e <output+0x216>
    5cfe:	4b46      	ldr	r3, [pc, #280]	; (5e18 <output+0x300>)
    5d00:	7a5b      	ldrb	r3, [r3, #9]
    5d02:	2b80      	cmp	r3, #128	; 0x80
    5d04:	d113      	bne.n	5d2e <output+0x216>
	    UIP_IP_BUF->destipaddr.u16[1] == 0 &&
    5d06:	4b44      	ldr	r3, [pc, #272]	; (5e18 <output+0x300>)
    /* compession compare with this nodes address (source) */

    iphc1 |= compress_addr_64(SICSLOWPAN_IPHC_SAM_BIT,
                              &UIP_IP_BUF->srcipaddr, &uip_lladdr);
    /* No context found for this address */
  } else if(uip_is_addr_link_local(&UIP_IP_BUF->srcipaddr) &&
    5d08:	8b5b      	ldrh	r3, [r3, #26]
    5d0a:	2b00      	cmp	r3, #0
    5d0c:	d10f      	bne.n	5d2e <output+0x216>
	    UIP_IP_BUF->destipaddr.u16[1] == 0 &&
	    UIP_IP_BUF->destipaddr.u16[2] == 0 &&
    5d0e:	4b42      	ldr	r3, [pc, #264]	; (5e18 <output+0x300>)

    iphc1 |= compress_addr_64(SICSLOWPAN_IPHC_SAM_BIT,
                              &UIP_IP_BUF->srcipaddr, &uip_lladdr);
    /* No context found for this address */
  } else if(uip_is_addr_link_local(&UIP_IP_BUF->srcipaddr) &&
	    UIP_IP_BUF->destipaddr.u16[1] == 0 &&
    5d10:	8b9b      	ldrh	r3, [r3, #28]
    5d12:	2b00      	cmp	r3, #0
    5d14:	d10b      	bne.n	5d2e <output+0x216>
	    UIP_IP_BUF->destipaddr.u16[2] == 0 &&
	    UIP_IP_BUF->destipaddr.u16[3] == 0) {
    5d16:	4b40      	ldr	r3, [pc, #256]	; (5e18 <output+0x300>)
    iphc1 |= compress_addr_64(SICSLOWPAN_IPHC_SAM_BIT,
                              &UIP_IP_BUF->srcipaddr, &uip_lladdr);
    /* No context found for this address */
  } else if(uip_is_addr_link_local(&UIP_IP_BUF->srcipaddr) &&
	    UIP_IP_BUF->destipaddr.u16[1] == 0 &&
	    UIP_IP_BUF->destipaddr.u16[2] == 0 &&
    5d18:	8bdb      	ldrh	r3, [r3, #30]
    5d1a:	2b00      	cmp	r3, #0
    5d1c:	d107      	bne.n	5d2e <output+0x216>
	    UIP_IP_BUF->destipaddr.u16[3] == 0) {
    iphc1 |= compress_addr_64(SICSLOWPAN_IPHC_SAM_BIT,
    5d1e:	2004      	movs	r0, #4
    5d20:	4943      	ldr	r1, [pc, #268]	; (5e30 <output+0x318>)
    5d22:	4a47      	ldr	r2, [pc, #284]	; (5e40 <output+0x328>)
    5d24:	4b47      	ldr	r3, [pc, #284]	; (5e44 <output+0x32c>)
    5d26:	4798      	blx	r3
    5d28:	4305      	orrs	r5, r0
    5d2a:	b2ed      	uxtb	r5, r5
    5d2c:	e00a      	b.n	5d44 <output+0x22c>
                              &UIP_IP_BUF->srcipaddr, &uip_lladdr);
  } else {
    /* send the full address => SAC = 0, SAM = 00 */
    iphc1 |= SICSLOWPAN_IPHC_SAM_00; /* 128-bits */
    memcpy(hc06_ptr, &UIP_IP_BUF->srcipaddr.u16[0], 16);
    5d2e:	4b3d      	ldr	r3, [pc, #244]	; (5e24 <output+0x30c>)
    5d30:	4698      	mov	r8, r3
    5d32:	681f      	ldr	r7, [r3, #0]
    5d34:	1c38      	adds	r0, r7, #0
    5d36:	493e      	ldr	r1, [pc, #248]	; (5e30 <output+0x318>)
    5d38:	2210      	movs	r2, #16
    5d3a:	4b3f      	ldr	r3, [pc, #252]	; (5e38 <output+0x320>)
    5d3c:	4798      	blx	r3
    hc06_ptr += 16;
    5d3e:	3710      	adds	r7, #16
    5d40:	4643      	mov	r3, r8
    5d42:	601f      	str	r7, [r3, #0]
  }

  /* dest address*/
  if(uip_is_addr_mcast(&UIP_IP_BUF->destipaddr)) {
    5d44:	4b34      	ldr	r3, [pc, #208]	; (5e18 <output+0x300>)
    5d46:	7e1f      	ldrb	r7, [r3, #24]
    5d48:	2fff      	cmp	r7, #255	; 0xff
    5d4a:	d000      	beq.n	5d4e <output+0x236>
    5d4c:	e0a2      	b.n	5e94 <output+0x37c>
    /* Address is multicast, try to compress */
    iphc1 |= SICSLOWPAN_IPHC_M;
    5d4e:	2408      	movs	r4, #8
    5d50:	432c      	orrs	r4, r5
    if(sicslowpan_is_mcast_addr_compressable8(&UIP_IP_BUF->destipaddr)) {
    5d52:	7e5b      	ldrb	r3, [r3, #25]
    5d54:	2b02      	cmp	r3, #2
    5d56:	d129      	bne.n	5dac <output+0x294>
    5d58:	4a2f      	ldr	r2, [pc, #188]	; (5e18 <output+0x300>)
    5d5a:	8b52      	ldrh	r2, [r2, #26]
    5d5c:	2a00      	cmp	r2, #0
    5d5e:	d000      	beq.n	5d62 <output+0x24a>
    5d60:	e08e      	b.n	5e80 <output+0x368>
    5d62:	4a2d      	ldr	r2, [pc, #180]	; (5e18 <output+0x300>)
    5d64:	8b92      	ldrh	r2, [r2, #28]
    5d66:	2a00      	cmp	r2, #0
    5d68:	d000      	beq.n	5d6c <output+0x254>
    5d6a:	e27b      	b.n	6264 <output+0x74c>
    5d6c:	4a2a      	ldr	r2, [pc, #168]	; (5e18 <output+0x300>)
    5d6e:	8bd2      	ldrh	r2, [r2, #30]
    5d70:	2a00      	cmp	r2, #0
    5d72:	d123      	bne.n	5dbc <output+0x2a4>
    5d74:	4a28      	ldr	r2, [pc, #160]	; (5e18 <output+0x300>)
    5d76:	8c12      	ldrh	r2, [r2, #32]
    5d78:	2a00      	cmp	r2, #0
    5d7a:	d11f      	bne.n	5dbc <output+0x2a4>
    5d7c:	4a26      	ldr	r2, [pc, #152]	; (5e18 <output+0x300>)
    5d7e:	8c52      	ldrh	r2, [r2, #34]	; 0x22
    5d80:	2a00      	cmp	r2, #0
    5d82:	d11b      	bne.n	5dbc <output+0x2a4>
    5d84:	4a24      	ldr	r2, [pc, #144]	; (5e18 <output+0x300>)
    5d86:	8c92      	ldrh	r2, [r2, #36]	; 0x24
    5d88:	2a00      	cmp	r2, #0
    5d8a:	d117      	bne.n	5dbc <output+0x2a4>
    5d8c:	3226      	adds	r2, #38	; 0x26
    5d8e:	4922      	ldr	r1, [pc, #136]	; (5e18 <output+0x300>)
    5d90:	5c8a      	ldrb	r2, [r1, r2]
    5d92:	2a00      	cmp	r2, #0
    5d94:	d112      	bne.n	5dbc <output+0x2a4>
      iphc1 |= SICSLOWPAN_IPHC_DAM_11;
    5d96:	240b      	movs	r4, #11
    5d98:	432c      	orrs	r4, r5
      /* use last byte */
      *hc06_ptr = UIP_IP_BUF->destipaddr.u8[15];
    5d9a:	4a22      	ldr	r2, [pc, #136]	; (5e24 <output+0x30c>)
    5d9c:	6813      	ldr	r3, [r2, #0]
    5d9e:	2127      	movs	r1, #39	; 0x27
    5da0:	481d      	ldr	r0, [pc, #116]	; (5e18 <output+0x300>)
    5da2:	5c41      	ldrb	r1, [r0, r1]
    5da4:	7019      	strb	r1, [r3, #0]
      hc06_ptr += 1;
    5da6:	3301      	adds	r3, #1
    5da8:	6013      	str	r3, [r2, #0]
    5daa:	e0ac      	b.n	5f06 <output+0x3ee>
    } else if(sicslowpan_is_mcast_addr_compressable32(&UIP_IP_BUF->destipaddr)) {
    5dac:	4a1a      	ldr	r2, [pc, #104]	; (5e18 <output+0x300>)
    5dae:	8b52      	ldrh	r2, [r2, #26]
    5db0:	2a00      	cmp	r2, #0
    5db2:	d165      	bne.n	5e80 <output+0x368>
    5db4:	4a18      	ldr	r2, [pc, #96]	; (5e18 <output+0x300>)
    5db6:	8b92      	ldrh	r2, [r2, #28]
    5db8:	2a00      	cmp	r2, #0
    5dba:	d161      	bne.n	5e80 <output+0x368>
    5dbc:	4a16      	ldr	r2, [pc, #88]	; (5e18 <output+0x300>)
    5dbe:	8bd2      	ldrh	r2, [r2, #30]
    5dc0:	2a00      	cmp	r2, #0
    5dc2:	d143      	bne.n	5e4c <output+0x334>
    5dc4:	4a14      	ldr	r2, [pc, #80]	; (5e18 <output+0x300>)
    5dc6:	8c12      	ldrh	r2, [r2, #32]
    5dc8:	2a00      	cmp	r2, #0
    5dca:	d13f      	bne.n	5e4c <output+0x334>
    5dcc:	4a12      	ldr	r2, [pc, #72]	; (5e18 <output+0x300>)
    5dce:	8c52      	ldrh	r2, [r2, #34]	; 0x22
    5dd0:	2a00      	cmp	r2, #0
    5dd2:	d13b      	bne.n	5e4c <output+0x334>
    5dd4:	3224      	adds	r2, #36	; 0x24
    5dd6:	4910      	ldr	r1, [pc, #64]	; (5e18 <output+0x300>)
    5dd8:	5c8a      	ldrb	r2, [r1, r2]
    5dda:	2a00      	cmp	r2, #0
    5ddc:	d136      	bne.n	5e4c <output+0x334>
      iphc1 |= SICSLOWPAN_IPHC_DAM_10;
    5dde:	240a      	movs	r4, #10
    5de0:	432c      	orrs	r4, r5
      /* second byte + the last three */
      *hc06_ptr = UIP_IP_BUF->destipaddr.u8[1];
    5de2:	4f10      	ldr	r7, [pc, #64]	; (5e24 <output+0x30c>)
    5de4:	683d      	ldr	r5, [r7, #0]
    5de6:	702b      	strb	r3, [r5, #0]
      memcpy(hc06_ptr + 1, &UIP_IP_BUF->destipaddr.u8[13], 3);
    5de8:	1c68      	adds	r0, r5, #1
    5dea:	4917      	ldr	r1, [pc, #92]	; (5e48 <output+0x330>)
    5dec:	3203      	adds	r2, #3
    5dee:	4b12      	ldr	r3, [pc, #72]	; (5e38 <output+0x320>)
    5df0:	4798      	blx	r3
      hc06_ptr += 4;
    5df2:	3504      	adds	r5, #4
    5df4:	603d      	str	r5, [r7, #0]
    5df6:	e086      	b.n	5f06 <output+0x3ee>
    5df8:	20000548 	.word	0x20000548
    5dfc:	20000550 	.word	0x20000550
    5e00:	0000bf91 	.word	0x0000bf91
    5e04:	0000beb5 	.word	0x0000beb5
    5e08:	20000554 	.word	0x20000554
    5e0c:	200031f8 	.word	0x200031f8
    5e10:	2000052c 	.word	0x2000052c
    5e14:	00005995 	.word	0x00005995
    5e18:	20002cd4 	.word	0x20002cd4
    5e1c:	00012be8 	.word	0x00012be8
    5e20:	0000ac5d 	.word	0x0000ac5d
    5e24:	20000564 	.word	0x20000564
    5e28:	20002cec 	.word	0x20002cec
    5e2c:	00005abd 	.word	0x00005abd
    5e30:	20002cdc 	.word	0x20002cdc
    5e34:	20002cd6 	.word	0x20002cd6
    5e38:	000108e7 	.word	0x000108e7
    5e3c:	20000534 	.word	0x20000534
    5e40:	20002ccc 	.word	0x20002ccc
    5e44:	00005a0d 	.word	0x00005a0d
    5e48:	20002cf9 	.word	0x20002cf9
    } else if(sicslowpan_is_mcast_addr_compressable48(&UIP_IP_BUF->destipaddr)) {
    5e4c:	4ad4      	ldr	r2, [pc, #848]	; (61a0 <output+0x688>)
    5e4e:	8bd2      	ldrh	r2, [r2, #30]
    5e50:	2a00      	cmp	r2, #0
    5e52:	d115      	bne.n	5e80 <output+0x368>
    5e54:	4ad2      	ldr	r2, [pc, #840]	; (61a0 <output+0x688>)
    5e56:	8c12      	ldrh	r2, [r2, #32]
    5e58:	2a00      	cmp	r2, #0
    5e5a:	d111      	bne.n	5e80 <output+0x368>
    5e5c:	3222      	adds	r2, #34	; 0x22
    5e5e:	49d0      	ldr	r1, [pc, #832]	; (61a0 <output+0x688>)
    5e60:	5c8a      	ldrb	r2, [r1, r2]
    5e62:	2a00      	cmp	r2, #0
    5e64:	d10c      	bne.n	5e80 <output+0x368>
      iphc1 |= SICSLOWPAN_IPHC_DAM_01;
    5e66:	2409      	movs	r4, #9
    5e68:	432c      	orrs	r4, r5
      /* second byte + the last five */
      *hc06_ptr = UIP_IP_BUF->destipaddr.u8[1];
    5e6a:	4fce      	ldr	r7, [pc, #824]	; (61a4 <output+0x68c>)
    5e6c:	683d      	ldr	r5, [r7, #0]
    5e6e:	702b      	strb	r3, [r5, #0]
      memcpy(hc06_ptr + 1, &UIP_IP_BUF->destipaddr.u8[11], 5);
    5e70:	1c68      	adds	r0, r5, #1
    5e72:	49cd      	ldr	r1, [pc, #820]	; (61a8 <output+0x690>)
    5e74:	3205      	adds	r2, #5
    5e76:	4bcd      	ldr	r3, [pc, #820]	; (61ac <output+0x694>)
    5e78:	4798      	blx	r3
      hc06_ptr += 6;
    5e7a:	3506      	adds	r5, #6
    5e7c:	603d      	str	r5, [r7, #0]
    5e7e:	e042      	b.n	5f06 <output+0x3ee>
    } else {
      iphc1 |= SICSLOWPAN_IPHC_DAM_00;
      /* full address */
      memcpy(hc06_ptr, &UIP_IP_BUF->destipaddr.u8[0], 16);
    5e80:	4fc8      	ldr	r7, [pc, #800]	; (61a4 <output+0x68c>)
    5e82:	683d      	ldr	r5, [r7, #0]
    5e84:	1c28      	adds	r0, r5, #0
    5e86:	49ca      	ldr	r1, [pc, #808]	; (61b0 <output+0x698>)
    5e88:	2210      	movs	r2, #16
    5e8a:	4bc8      	ldr	r3, [pc, #800]	; (61ac <output+0x694>)
    5e8c:	4798      	blx	r3
      hc06_ptr += 16;
    5e8e:	3510      	adds	r5, #16
    5e90:	603d      	str	r5, [r7, #0]
    5e92:	e038      	b.n	5f06 <output+0x3ee>
    }
  } else {
    /* Address is unicast, try to compress */
    if((context = addr_context_lookup_by_prefix(&UIP_IP_BUF->destipaddr)) != NULL) {
    5e94:	48c6      	ldr	r0, [pc, #792]	; (61b0 <output+0x698>)
    5e96:	4bc7      	ldr	r3, [pc, #796]	; (61b4 <output+0x69c>)
    5e98:	4798      	blx	r3
    5e9a:	4bc7      	ldr	r3, [pc, #796]	; (61b8 <output+0x6a0>)
    5e9c:	6018      	str	r0, [r3, #0]
    5e9e:	2800      	cmp	r0, #0
    5ea0:	d00d      	beq.n	5ebe <output+0x3a6>
      /* elide the prefix */
      iphc1 |= SICSLOWPAN_IPHC_DAC;
    5ea2:	2304      	movs	r3, #4
    5ea4:	431d      	orrs	r5, r3
      PACKETBUF_IPHC_BUF[2] |= context->number;
    5ea6:	7822      	ldrb	r2, [r4, #0]
    5ea8:	7843      	ldrb	r3, [r0, #1]
    5eaa:	4313      	orrs	r3, r2
    5eac:	7023      	strb	r3, [r4, #0]
      /* compession compare with link adress (destination) */

      iphc1 |= compress_addr_64(SICSLOWPAN_IPHC_DAM_BIT,
    5eae:	2000      	movs	r0, #0
    5eb0:	49bf      	ldr	r1, [pc, #764]	; (61b0 <output+0x698>)
    5eb2:	466a      	mov	r2, sp
    5eb4:	4bc1      	ldr	r3, [pc, #772]	; (61bc <output+0x6a4>)
    5eb6:	4798      	blx	r3
    5eb8:	4328      	orrs	r0, r5
    5eba:	b2c4      	uxtb	r4, r0
    5ebc:	e023      	b.n	5f06 <output+0x3ee>
	       &UIP_IP_BUF->destipaddr, (uip_lladdr_t *)link_destaddr);
      /* No context found for this address */
    } else if(uip_is_addr_link_local(&UIP_IP_BUF->destipaddr) &&
    5ebe:	2ffe      	cmp	r7, #254	; 0xfe
    5ec0:	d117      	bne.n	5ef2 <output+0x3da>
    5ec2:	4bb7      	ldr	r3, [pc, #732]	; (61a0 <output+0x688>)
    5ec4:	7e5b      	ldrb	r3, [r3, #25]
    5ec6:	2b80      	cmp	r3, #128	; 0x80
    5ec8:	d113      	bne.n	5ef2 <output+0x3da>
	      UIP_IP_BUF->destipaddr.u16[1] == 0 &&
    5eca:	4bb5      	ldr	r3, [pc, #724]	; (61a0 <output+0x688>)
      /* compession compare with link adress (destination) */

      iphc1 |= compress_addr_64(SICSLOWPAN_IPHC_DAM_BIT,
	       &UIP_IP_BUF->destipaddr, (uip_lladdr_t *)link_destaddr);
      /* No context found for this address */
    } else if(uip_is_addr_link_local(&UIP_IP_BUF->destipaddr) &&
    5ecc:	8b5b      	ldrh	r3, [r3, #26]
    5ece:	2b00      	cmp	r3, #0
    5ed0:	d10f      	bne.n	5ef2 <output+0x3da>
	      UIP_IP_BUF->destipaddr.u16[1] == 0 &&
	      UIP_IP_BUF->destipaddr.u16[2] == 0 &&
    5ed2:	4bb3      	ldr	r3, [pc, #716]	; (61a0 <output+0x688>)

      iphc1 |= compress_addr_64(SICSLOWPAN_IPHC_DAM_BIT,
	       &UIP_IP_BUF->destipaddr, (uip_lladdr_t *)link_destaddr);
      /* No context found for this address */
    } else if(uip_is_addr_link_local(&UIP_IP_BUF->destipaddr) &&
	      UIP_IP_BUF->destipaddr.u16[1] == 0 &&
    5ed4:	8b9b      	ldrh	r3, [r3, #28]
    5ed6:	2b00      	cmp	r3, #0
    5ed8:	d10b      	bne.n	5ef2 <output+0x3da>
	      UIP_IP_BUF->destipaddr.u16[2] == 0 &&
	      UIP_IP_BUF->destipaddr.u16[3] == 0) {
    5eda:	4bb1      	ldr	r3, [pc, #708]	; (61a0 <output+0x688>)
      iphc1 |= compress_addr_64(SICSLOWPAN_IPHC_DAM_BIT,
	       &UIP_IP_BUF->destipaddr, (uip_lladdr_t *)link_destaddr);
      /* No context found for this address */
    } else if(uip_is_addr_link_local(&UIP_IP_BUF->destipaddr) &&
	      UIP_IP_BUF->destipaddr.u16[1] == 0 &&
	      UIP_IP_BUF->destipaddr.u16[2] == 0 &&
    5edc:	8bdb      	ldrh	r3, [r3, #30]
    5ede:	2b00      	cmp	r3, #0
    5ee0:	d107      	bne.n	5ef2 <output+0x3da>
	      UIP_IP_BUF->destipaddr.u16[3] == 0) {
      iphc1 |= compress_addr_64(SICSLOWPAN_IPHC_DAM_BIT,
    5ee2:	2000      	movs	r0, #0
    5ee4:	49b2      	ldr	r1, [pc, #712]	; (61b0 <output+0x698>)
    5ee6:	466a      	mov	r2, sp
    5ee8:	4bb4      	ldr	r3, [pc, #720]	; (61bc <output+0x6a4>)
    5eea:	4798      	blx	r3
    5eec:	4305      	orrs	r5, r0
    5eee:	b2ec      	uxtb	r4, r5
    5ef0:	e009      	b.n	5f06 <output+0x3ee>
               &UIP_IP_BUF->destipaddr, (uip_lladdr_t *)link_destaddr);
    } else {
      /* send the full address */
      iphc1 |= SICSLOWPAN_IPHC_DAM_00; /* 128-bits */
      memcpy(hc06_ptr, &UIP_IP_BUF->destipaddr.u16[0], 16);
    5ef2:	4fac      	ldr	r7, [pc, #688]	; (61a4 <output+0x68c>)
    5ef4:	683c      	ldr	r4, [r7, #0]
    5ef6:	1c20      	adds	r0, r4, #0
    5ef8:	49ad      	ldr	r1, [pc, #692]	; (61b0 <output+0x698>)
    5efa:	2210      	movs	r2, #16
    5efc:	4bab      	ldr	r3, [pc, #684]	; (61ac <output+0x694>)
    5efe:	4798      	blx	r3
      hc06_ptr += 16;
    5f00:	3410      	adds	r4, #16
    5f02:	603c      	str	r4, [r7, #0]
	      UIP_IP_BUF->destipaddr.u16[3] == 0) {
      iphc1 |= compress_addr_64(SICSLOWPAN_IPHC_DAM_BIT,
               &UIP_IP_BUF->destipaddr, (uip_lladdr_t *)link_destaddr);
    } else {
      /* send the full address */
      iphc1 |= SICSLOWPAN_IPHC_DAM_00; /* 128-bits */
    5f04:	1c2c      	adds	r4, r5, #0
      memcpy(hc06_ptr, &UIP_IP_BUF->destipaddr.u16[0], 16);
      hc06_ptr += 16;
    }
  }

  uncomp_hdr_len = UIP_IPH_LEN;
    5f06:	2228      	movs	r2, #40	; 0x28
    5f08:	4bad      	ldr	r3, [pc, #692]	; (61c0 <output+0x6a8>)
    5f0a:	701a      	strb	r2, [r3, #0]

#if UIP_CONF_UDP || UIP_CONF_ROUTER
  /* UDP header compression */
  if(UIP_IP_BUF->proto == UIP_PROTO_UDP) {
    5f0c:	4ba4      	ldr	r3, [pc, #656]	; (61a0 <output+0x688>)
    5f0e:	799b      	ldrb	r3, [r3, #6]
    5f10:	2b11      	cmp	r3, #17
    5f12:	d16f      	bne.n	5ff4 <output+0x4dc>
    PRINTF("IPHC: Uncompressed UDP ports on send side: %x, %x\n\r",
	   UIP_HTONS(UIP_UDP_BUF->srcport), UIP_HTONS(UIP_UDP_BUF->destport));
    /* Mask out the last 4 bits can be used as a mask */
    if(((UIP_HTONS(UIP_UDP_BUF->srcport) & 0xfff0) == SICSLOWPAN_UDP_4_BIT_PORT_MIN) &&
    5f14:	4ba2      	ldr	r3, [pc, #648]	; (61a0 <output+0x688>)
    5f16:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    5f18:	021a      	lsls	r2, r3, #8
    5f1a:	0a1b      	lsrs	r3, r3, #8
    5f1c:	4313      	orrs	r3, r2
    5f1e:	b29b      	uxth	r3, r3
    5f20:	220f      	movs	r2, #15
    5f22:	1c19      	adds	r1, r3, #0
    5f24:	4391      	bics	r1, r2
    5f26:	4aa7      	ldr	r2, [pc, #668]	; (61c4 <output+0x6ac>)
    5f28:	4291      	cmp	r1, r2
    5f2a:	d11b      	bne.n	5f64 <output+0x44c>
       ((UIP_HTONS(UIP_UDP_BUF->destport) & 0xfff0) == SICSLOWPAN_UDP_4_BIT_PORT_MIN)) {
    5f2c:	4a9c      	ldr	r2, [pc, #624]	; (61a0 <output+0x688>)
    5f2e:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
    5f30:	0211      	lsls	r1, r2, #8
    5f32:	0a12      	lsrs	r2, r2, #8
    5f34:	430a      	orrs	r2, r1
    5f36:	49a4      	ldr	r1, [pc, #656]	; (61c8 <output+0x6b0>)
  /* UDP header compression */
  if(UIP_IP_BUF->proto == UIP_PROTO_UDP) {
    PRINTF("IPHC: Uncompressed UDP ports on send side: %x, %x\n\r",
	   UIP_HTONS(UIP_UDP_BUF->srcport), UIP_HTONS(UIP_UDP_BUF->destport));
    /* Mask out the last 4 bits can be used as a mask */
    if(((UIP_HTONS(UIP_UDP_BUF->srcport) & 0xfff0) == SICSLOWPAN_UDP_4_BIT_PORT_MIN) &&
    5f38:	400a      	ands	r2, r1
    5f3a:	49a2      	ldr	r1, [pc, #648]	; (61c4 <output+0x6ac>)
    5f3c:	428a      	cmp	r2, r1
    5f3e:	d111      	bne.n	5f64 <output+0x44c>
       ((UIP_HTONS(UIP_UDP_BUF->destport) & 0xfff0) == SICSLOWPAN_UDP_4_BIT_PORT_MIN)) {
      /* we can compress 12 bits of both source and dest */
      *hc06_ptr = SICSLOWPAN_NHC_UDP_CS_P_11;
    5f40:	4898      	ldr	r0, [pc, #608]	; (61a4 <output+0x68c>)
    5f42:	6802      	ldr	r2, [r0, #0]
    5f44:	23f3      	movs	r3, #243	; 0xf3
    5f46:	7013      	strb	r3, [r2, #0]
      PRINTF("IPHC: remove 12 b of both source & dest with prefix 0xFOB\n\r");
      *(hc06_ptr + 1) =
	(uint8_t)((UIP_HTONS(UIP_UDP_BUF->srcport) -
		SICSLOWPAN_UDP_4_BIT_PORT_MIN) << 4) +
	(uint8_t)((UIP_HTONS(UIP_UDP_BUF->destport) -
    5f48:	4d95      	ldr	r5, [pc, #596]	; (61a0 <output+0x688>)
    if(((UIP_HTONS(UIP_UDP_BUF->srcport) & 0xfff0) == SICSLOWPAN_UDP_4_BIT_PORT_MIN) &&
       ((UIP_HTONS(UIP_UDP_BUF->destport) & 0xfff0) == SICSLOWPAN_UDP_4_BIT_PORT_MIN)) {
      /* we can compress 12 bits of both source and dest */
      *hc06_ptr = SICSLOWPAN_NHC_UDP_CS_P_11;
      PRINTF("IPHC: remove 12 b of both source & dest with prefix 0xFOB\n\r");
      *(hc06_ptr + 1) =
    5f4a:	8d6b      	ldrh	r3, [r5, #42]	; 0x2a
    5f4c:	0a1b      	lsrs	r3, r3, #8
    5f4e:	3350      	adds	r3, #80	; 0x50
    5f50:	1c19      	adds	r1, r3, #0
    5f52:	8d2b      	ldrh	r3, [r5, #40]	; 0x28
    5f54:	0a1b      	lsrs	r3, r3, #8
    5f56:	3350      	adds	r3, #80	; 0x50
	(uint8_t)((UIP_HTONS(UIP_UDP_BUF->srcport) -
    5f58:	011b      	lsls	r3, r3, #4
    if(((UIP_HTONS(UIP_UDP_BUF->srcport) & 0xfff0) == SICSLOWPAN_UDP_4_BIT_PORT_MIN) &&
       ((UIP_HTONS(UIP_UDP_BUF->destport) & 0xfff0) == SICSLOWPAN_UDP_4_BIT_PORT_MIN)) {
      /* we can compress 12 bits of both source and dest */
      *hc06_ptr = SICSLOWPAN_NHC_UDP_CS_P_11;
      PRINTF("IPHC: remove 12 b of both source & dest with prefix 0xFOB\n\r");
      *(hc06_ptr + 1) =
    5f5a:	18cb      	adds	r3, r1, r3
    5f5c:	7053      	strb	r3, [r2, #1]
	(uint8_t)((UIP_HTONS(UIP_UDP_BUF->srcport) -
		SICSLOWPAN_UDP_4_BIT_PORT_MIN) << 4) +
	(uint8_t)((UIP_HTONS(UIP_UDP_BUF->destport) -
		SICSLOWPAN_UDP_4_BIT_PORT_MIN));
      hc06_ptr += 2;
    5f5e:	3202      	adds	r2, #2
    5f60:	6002      	str	r2, [r0, #0]
    5f62:	e03a      	b.n	5fda <output+0x4c2>
    } else if((UIP_HTONS(UIP_UDP_BUF->destport) & 0xff00) == SICSLOWPAN_UDP_8_BIT_PORT_MIN) {
    5f64:	4a8e      	ldr	r2, [pc, #568]	; (61a0 <output+0x688>)
    5f66:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
    5f68:	0212      	lsls	r2, r2, #8
    5f6a:	b292      	uxth	r2, r2
    5f6c:	21f0      	movs	r1, #240	; 0xf0
    5f6e:	0209      	lsls	r1, r1, #8
    5f70:	428a      	cmp	r2, r1
    5f72:	d111      	bne.n	5f98 <output+0x480>
      /* we can compress 8 bits of dest, leave source. */
      *hc06_ptr = SICSLOWPAN_NHC_UDP_CS_P_01;
    5f74:	4f8b      	ldr	r7, [pc, #556]	; (61a4 <output+0x68c>)
    5f76:	683d      	ldr	r5, [r7, #0]
    5f78:	23f1      	movs	r3, #241	; 0xf1
    5f7a:	702b      	strb	r3, [r5, #0]
      PRINTF("IPHC: leave source, remove 8 bits of dest with prefix 0xF0\n\r");
      memcpy(hc06_ptr + 1, &UIP_UDP_BUF->srcport, 2);
    5f7c:	1c68      	adds	r0, r5, #1
    5f7e:	4b93      	ldr	r3, [pc, #588]	; (61cc <output+0x6b4>)
    5f80:	4698      	mov	r8, r3
    5f82:	1c19      	adds	r1, r3, #0
    5f84:	2202      	movs	r2, #2
    5f86:	4b89      	ldr	r3, [pc, #548]	; (61ac <output+0x694>)
    5f88:	4798      	blx	r3
      *(hc06_ptr + 3) =
	(uint8_t)((UIP_HTONS(UIP_UDP_BUF->destport) -
    5f8a:	4643      	mov	r3, r8
    5f8c:	885b      	ldrh	r3, [r3, #2]
    5f8e:	0a1b      	lsrs	r3, r3, #8
    5f90:	70eb      	strb	r3, [r5, #3]
		SICSLOWPAN_UDP_8_BIT_PORT_MIN));
      hc06_ptr += 4;
    5f92:	3504      	adds	r5, #4
    5f94:	603d      	str	r5, [r7, #0]
    5f96:	e020      	b.n	5fda <output+0x4c2>
    } else if((UIP_HTONS(UIP_UDP_BUF->srcport) & 0xff00) == SICSLOWPAN_UDP_8_BIT_PORT_MIN) {
    5f98:	22ff      	movs	r2, #255	; 0xff
    5f9a:	4393      	bics	r3, r2
    5f9c:	22f0      	movs	r2, #240	; 0xf0
    5f9e:	0212      	lsls	r2, r2, #8
    5fa0:	4293      	cmp	r3, r2
    5fa2:	d10f      	bne.n	5fc4 <output+0x4ac>
      /* we can compress 8 bits of src, leave dest. Copy compressed port */
      *hc06_ptr = SICSLOWPAN_NHC_UDP_CS_P_10;
    5fa4:	4f7f      	ldr	r7, [pc, #508]	; (61a4 <output+0x68c>)
    5fa6:	683d      	ldr	r5, [r7, #0]
    5fa8:	23f2      	movs	r3, #242	; 0xf2
    5faa:	702b      	strb	r3, [r5, #0]
      PRINTF("IPHC: remove 8 bits of source with prefix 0xF0, leave dest. hch: %i\n\r", *hc06_ptr);
      *(hc06_ptr + 1) =
	(uint8_t)((UIP_HTONS(UIP_UDP_BUF->srcport) -
    5fac:	497c      	ldr	r1, [pc, #496]	; (61a0 <output+0x688>)
    5fae:	8d0b      	ldrh	r3, [r1, #40]	; 0x28
    5fb0:	0a1b      	lsrs	r3, r3, #8
    5fb2:	706b      	strb	r3, [r5, #1]
		SICSLOWPAN_UDP_8_BIT_PORT_MIN));
      memcpy(hc06_ptr + 2, &UIP_UDP_BUF->destport, 2);
    5fb4:	1ca8      	adds	r0, r5, #2
    5fb6:	312a      	adds	r1, #42	; 0x2a
    5fb8:	2202      	movs	r2, #2
    5fba:	4b7c      	ldr	r3, [pc, #496]	; (61ac <output+0x694>)
    5fbc:	4798      	blx	r3
      hc06_ptr += 4;
    5fbe:	3504      	adds	r5, #4
    5fc0:	603d      	str	r5, [r7, #0]
    5fc2:	e00a      	b.n	5fda <output+0x4c2>
    } else {
      /* we cannot compress. Copy uncompressed ports, full checksum  */
      *hc06_ptr = SICSLOWPAN_NHC_UDP_CS_P_00;
    5fc4:	4f77      	ldr	r7, [pc, #476]	; (61a4 <output+0x68c>)
    5fc6:	683d      	ldr	r5, [r7, #0]
    5fc8:	23f0      	movs	r3, #240	; 0xf0
    5fca:	702b      	strb	r3, [r5, #0]
      PRINTF("IPHC: cannot compress headers\n\r");
      memcpy(hc06_ptr + 1, &UIP_UDP_BUF->srcport, 4);
    5fcc:	1c68      	adds	r0, r5, #1
    5fce:	497f      	ldr	r1, [pc, #508]	; (61cc <output+0x6b4>)
    5fd0:	2204      	movs	r2, #4
    5fd2:	4b76      	ldr	r3, [pc, #472]	; (61ac <output+0x694>)
    5fd4:	4798      	blx	r3
      hc06_ptr += 5;
    5fd6:	3505      	adds	r5, #5
    5fd8:	603d      	str	r5, [r7, #0]
    }
    /* always inline the checksum  */
    if(1) {
      memcpy(hc06_ptr, &UIP_UDP_BUF->udpchksum, 2);
    5fda:	4f72      	ldr	r7, [pc, #456]	; (61a4 <output+0x68c>)
    5fdc:	683d      	ldr	r5, [r7, #0]
    5fde:	1c28      	adds	r0, r5, #0
    5fe0:	497b      	ldr	r1, [pc, #492]	; (61d0 <output+0x6b8>)
    5fe2:	2202      	movs	r2, #2
    5fe4:	4b71      	ldr	r3, [pc, #452]	; (61ac <output+0x694>)
    5fe6:	4798      	blx	r3
      hc06_ptr += 2;
    5fe8:	3502      	adds	r5, #2
    5fea:	603d      	str	r5, [r7, #0]
    }
    uncomp_hdr_len += UIP_UDPH_LEN;
    5fec:	4a74      	ldr	r2, [pc, #464]	; (61c0 <output+0x6a8>)
    5fee:	7813      	ldrb	r3, [r2, #0]
    5ff0:	3308      	adds	r3, #8
    5ff2:	7013      	strb	r3, [r2, #0]
  /* if nothing to compress just return zero  */
  hc06_ptr += SICSLOWPAN_NH_COMPRESSOR.compress(hc06_ptr, &uncomp_hdr_len);
#endif

  /* before the packetbuf_hdr_len operation */
  PACKETBUF_IPHC_BUF[0] = iphc0;
    5ff4:	4b77      	ldr	r3, [pc, #476]	; (61d4 <output+0x6bc>)
    5ff6:	681a      	ldr	r2, [r3, #0]
    5ff8:	4977      	ldr	r1, [pc, #476]	; (61d8 <output+0x6c0>)
    5ffa:	780b      	ldrb	r3, [r1, #0]
    5ffc:	54d6      	strb	r6, [r2, r3]
  PACKETBUF_IPHC_BUF[1] = iphc1;
    5ffe:	18d3      	adds	r3, r2, r3
    6000:	705c      	strb	r4, [r3, #1]

  packetbuf_hdr_len = hc06_ptr - packetbuf_ptr;
    6002:	4b68      	ldr	r3, [pc, #416]	; (61a4 <output+0x68c>)
    6004:	681b      	ldr	r3, [r3, #0]
    6006:	1a9b      	subs	r3, r3, r2
    6008:	700b      	strb	r3, [r1, #0]

  /* Calculate NETSTACK_FRAMER's header length, that will be added in the NETSTACK_RDC.
   * We calculate it here only to make a better decision of whether the outgoing packet
   * needs to be fragmented or not. */
#if USE_FRAMER_HDRLEN
  packetbuf_clear();
    600a:	4b74      	ldr	r3, [pc, #464]	; (61dc <output+0x6c4>)
    600c:	4798      	blx	r3

static inline int
packetbuf_set_addr(uint8_t type, const linkaddr_t *addr)
{
/*   packetbuf_addrs[type - PACKETBUF_ADDR_FIRST].type = type; */
  linkaddr_copy(&packetbuf_addrs[type - PACKETBUF_ADDR_FIRST].addr, addr);
    600e:	4874      	ldr	r0, [pc, #464]	; (61e0 <output+0x6c8>)
    6010:	4669      	mov	r1, sp
    6012:	4b74      	ldr	r3, [pc, #464]	; (61e4 <output+0x6cc>)
    6014:	4798      	blx	r3
  packetbuf_set_addr(PACKETBUF_ADDR_RECEIVER, &dest);
  framer_hdrlen = NETSTACK_FRAMER.create();
    6016:	4b74      	ldr	r3, [pc, #464]	; (61e8 <output+0x6d0>)
    6018:	681b      	ldr	r3, [r3, #0]
    601a:	4798      	blx	r3
    601c:	1e06      	subs	r6, r0, #0
  if(framer_hdrlen < 0) {
    601e:	da00      	bge.n	6022 <output+0x50a>
    /* Framing failed, we assume the maximum header length */
    framer_hdrlen = 21;
    6020:	2615      	movs	r6, #21
  }
  packetbuf_clear();
    6022:	4b6e      	ldr	r3, [pc, #440]	; (61dc <output+0x6c4>)
    6024:	4798      	blx	r3

static inline int
packetbuf_set_attr(uint8_t type, const packetbuf_attr_t val)
{
/*   packetbuf_attrs[type].type = type; */
  packetbuf_attrs[type].val = val;
    6026:	2205      	movs	r2, #5
    6028:	4b70      	ldr	r3, [pc, #448]	; (61ec <output+0x6d4>)
    602a:	829a      	strh	r2, [r3, #20]
                     SICSLOWPAN_MAX_MAC_TRANSMISSIONS);
#else /* USE_FRAMER_HDRLEN */
  framer_hdrlen = 21;
#endif /* USE_FRAMER_HDRLEN */

  if((int)uip_len - (int)uncomp_hdr_len > (int)MAC_MAX_PAYLOAD - framer_hdrlen - (int)packetbuf_hdr_len) {
    602c:	4b70      	ldr	r3, [pc, #448]	; (61f0 <output+0x6d8>)
    602e:	881b      	ldrh	r3, [r3, #0]
    6030:	4699      	mov	r9, r3
    6032:	4b63      	ldr	r3, [pc, #396]	; (61c0 <output+0x6a8>)
    6034:	781f      	ldrb	r7, [r3, #0]
    6036:	464b      	mov	r3, r9
    6038:	1bda      	subs	r2, r3, r7
    603a:	257d      	movs	r5, #125	; 0x7d
    603c:	1bad      	subs	r5, r5, r6
    603e:	4b66      	ldr	r3, [pc, #408]	; (61d8 <output+0x6c0>)
    6040:	781c      	ldrb	r4, [r3, #0]
    6042:	1b2b      	subs	r3, r5, r4
    6044:	429a      	cmp	r2, r3
    6046:	dc00      	bgt.n	604a <output+0x532>
    6048:	e0ef      	b.n	622a <output+0x712>

    /* Create 1st Fragment */
    PRINTFO("sicslowpan output: 1rst fragment ");

    /* move HC1/HC06/IPv6 header */
    memmove(packetbuf_ptr + SICSLOWPAN_FRAG1_HDR_LEN, packetbuf_ptr, packetbuf_hdr_len);
    604a:	4b62      	ldr	r3, [pc, #392]	; (61d4 <output+0x6bc>)
    604c:	681b      	ldr	r3, [r3, #0]
    604e:	4698      	mov	r8, r3
    6050:	1d18      	adds	r0, r3, #4
    6052:	1c19      	adds	r1, r3, #0
    6054:	1c22      	adds	r2, r4, #0
    6056:	4b67      	ldr	r3, [pc, #412]	; (61f4 <output+0x6dc>)
    6058:	4798      	blx	r3
     * FRAG1 dispatch + header
     * Note that the length is in units of 8 bytes
     */
/*     PACKETBUF_FRAG_BUF->dispatch_size = */
/*       uip_htons((SICSLOWPAN_DISPATCH_FRAG1 << 8) | uip_len); */
    SET16(PACKETBUF_FRAG_PTR, PACKETBUF_FRAG_DISPATCH_SIZE,
    605a:	23c0      	movs	r3, #192	; 0xc0
    605c:	021b      	lsls	r3, r3, #8
    605e:	464a      	mov	r2, r9
    6060:	431a      	orrs	r2, r3
    6062:	0a13      	lsrs	r3, r2, #8
    6064:	4642      	mov	r2, r8
    6066:	7013      	strb	r3, [r2, #0]
    6068:	4b61      	ldr	r3, [pc, #388]	; (61f0 <output+0x6d8>)
    606a:	881b      	ldrh	r3, [r3, #0]
    606c:	7053      	strb	r3, [r2, #1]
          ((SICSLOWPAN_DISPATCH_FRAG1 << 8) | uip_len));
/*     PACKETBUF_FRAG_BUF->tag = uip_htons(my_tag); */
    SET16(PACKETBUF_FRAG_PTR, PACKETBUF_FRAG_TAG, my_tag);
    606e:	4a62      	ldr	r2, [pc, #392]	; (61f8 <output+0x6e0>)
    6070:	8813      	ldrh	r3, [r2, #0]
    6072:	0a19      	lsrs	r1, r3, #8
    6074:	4640      	mov	r0, r8
    6076:	7081      	strb	r1, [r0, #2]
    6078:	70c3      	strb	r3, [r0, #3]
    my_tag++;
    607a:	3301      	adds	r3, #1
    607c:	8013      	strh	r3, [r2, #0]

    /* Copy payload and send */
    packetbuf_hdr_len += SICSLOWPAN_FRAG1_HDR_LEN;
    607e:	3404      	adds	r4, #4
    6080:	b2e4      	uxtb	r4, r4
    6082:	4b55      	ldr	r3, [pc, #340]	; (61d8 <output+0x6c0>)
    6084:	701c      	strb	r4, [r3, #0]
    packetbuf_payload_len = (MAC_MAX_PAYLOAD - framer_hdrlen - packetbuf_hdr_len) & 0xfffffff8;
    6086:	1b2d      	subs	r5, r5, r4
    6088:	2307      	movs	r3, #7
    608a:	439d      	bics	r5, r3
    608c:	4b5b      	ldr	r3, [pc, #364]	; (61fc <output+0x6e4>)
    608e:	601d      	str	r5, [r3, #0]
    PRINTFO("(len %d, tag %d)\n\r", packetbuf_payload_len, my_tag);
    memcpy(packetbuf_ptr + packetbuf_hdr_len,
    6090:	1900      	adds	r0, r0, r4
    6092:	4943      	ldr	r1, [pc, #268]	; (61a0 <output+0x688>)
    6094:	1879      	adds	r1, r7, r1
    6096:	1c2a      	adds	r2, r5, #0
    6098:	4b44      	ldr	r3, [pc, #272]	; (61ac <output+0x694>)
    609a:	4798      	blx	r3
           (uint8_t *)UIP_IP_BUF + uncomp_hdr_len, packetbuf_payload_len);
    packetbuf_set_datalen(packetbuf_payload_len + packetbuf_hdr_len);
    609c:	1928      	adds	r0, r5, r4
    609e:	b280      	uxth	r0, r0
    60a0:	4b57      	ldr	r3, [pc, #348]	; (6200 <output+0x6e8>)
    60a2:	4798      	blx	r3
    q = queuebuf_new_from_packetbuf();
    60a4:	4b57      	ldr	r3, [pc, #348]	; (6204 <output+0x6ec>)
    60a6:	4798      	blx	r3
    60a8:	1e04      	subs	r4, r0, #0
    if(q == NULL) {
    60aa:	d105      	bne.n	60b8 <output+0x5a0>
      PRINTFO("could not allocate queuebuf for first fragment, dropping packet\n\r");
      RIMESTATS_ADD(sicslowpandrops);
    60ac:	4a56      	ldr	r2, [pc, #344]	; (6208 <output+0x6f0>)
    60ae:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
    60b0:	3301      	adds	r3, #1
    60b2:	64d3      	str	r3, [r2, #76]	; 0x4c
      return 0;
    60b4:	2000      	movs	r0, #0
    60b6:	e0db      	b.n	6270 <output+0x758>
    }
    send_packet(&dest);
    60b8:	4668      	mov	r0, sp
    60ba:	4b54      	ldr	r3, [pc, #336]	; (620c <output+0x6f4>)
    60bc:	4798      	blx	r3
    queuebuf_to_packetbuf(q);
    60be:	1c20      	adds	r0, r4, #0
    60c0:	4b53      	ldr	r3, [pc, #332]	; (6210 <output+0x6f8>)
    60c2:	4798      	blx	r3
    queuebuf_free(q);
    60c4:	1c20      	adds	r0, r4, #0
    60c6:	4b53      	ldr	r3, [pc, #332]	; (6214 <output+0x6fc>)
    60c8:	4798      	blx	r3
    q = NULL;

    /* Check tx result. */
    if((last_tx_status == MAC_TX_COLLISION) ||
    60ca:	4b53      	ldr	r3, [pc, #332]	; (6218 <output+0x700>)
    60cc:	681b      	ldr	r3, [r3, #0]
    60ce:	2b01      	cmp	r3, #1
    60d0:	d002      	beq.n	60d8 <output+0x5c0>
    60d2:	3b05      	subs	r3, #5
    60d4:	2b01      	cmp	r3, #1
    60d6:	d805      	bhi.n	60e4 <output+0x5cc>
       (last_tx_status == MAC_TX_ERR) ||
       (last_tx_status == MAC_TX_ERR_FATAL)) {
      PRINTFO("error in fragment tx, dropping subsequent fragments.\n\r");
      RIMESTATS_ADD(sicslowpandrops);
    60d8:	4a4b      	ldr	r2, [pc, #300]	; (6208 <output+0x6f0>)
    60da:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
    60dc:	3301      	adds	r3, #1
    60de:	64d3      	str	r3, [r2, #76]	; 0x4c
      return 0;
    60e0:	2000      	movs	r0, #0
    60e2:	e0c5      	b.n	6270 <output+0x758>
    }

    /* set processed_ip_out_len to what we already sent from the IP payload*/
    processed_ip_out_len = packetbuf_payload_len + uncomp_hdr_len;
    60e4:	4a45      	ldr	r2, [pc, #276]	; (61fc <output+0x6e4>)
    60e6:	4b36      	ldr	r3, [pc, #216]	; (61c0 <output+0x6a8>)
    60e8:	781d      	ldrb	r5, [r3, #0]
    60ea:	6813      	ldr	r3, [r2, #0]
    60ec:	469c      	mov	ip, r3
    60ee:	4465      	add	r5, ip
    60f0:	b2ad      	uxth	r5, r5
    /*
     * Create following fragments
     * Datagram tag is already in the buffer, we need to set the
     * FRAGN dispatch and for each fragment, the offset
     */
    packetbuf_hdr_len = SICSLOWPAN_FRAGN_HDR_LEN;
    60f2:	2105      	movs	r1, #5
    60f4:	4b38      	ldr	r3, [pc, #224]	; (61d8 <output+0x6c0>)
    60f6:	7019      	strb	r1, [r3, #0]
/*     PACKETBUF_FRAG_BUF->dispatch_size = */
/*       uip_htons((SICSLOWPAN_DISPATCH_FRAGN << 8) | uip_len); */
    SET16(PACKETBUF_FRAG_PTR, PACKETBUF_FRAG_DISPATCH_SIZE,
    60f8:	4b36      	ldr	r3, [pc, #216]	; (61d4 <output+0x6bc>)
    60fa:	6819      	ldr	r1, [r3, #0]
    60fc:	483c      	ldr	r0, [pc, #240]	; (61f0 <output+0x6d8>)
    60fe:	8804      	ldrh	r4, [r0, #0]
    6100:	23e0      	movs	r3, #224	; 0xe0
    6102:	021b      	lsls	r3, r3, #8
    6104:	4323      	orrs	r3, r4
    6106:	0a1b      	lsrs	r3, r3, #8
    6108:	700b      	strb	r3, [r1, #0]
    610a:	8803      	ldrh	r3, [r0, #0]
    610c:	704b      	strb	r3, [r1, #1]
          ((SICSLOWPAN_DISPATCH_FRAGN << 8) | uip_len));
    packetbuf_payload_len = (MAC_MAX_PAYLOAD - framer_hdrlen - packetbuf_hdr_len) & 0xfffffff8;
    610e:	2378      	movs	r3, #120	; 0x78
    6110:	1b9e      	subs	r6, r3, r6
    6112:	3b71      	subs	r3, #113	; 0x71
    6114:	439e      	bics	r6, r3
    6116:	6016      	str	r6, [r2, #0]
    while(processed_ip_out_len < uip_len) {
    6118:	4681      	mov	r9, r0
      PRINTFO("sicslowpan output: fragment ");
      PACKETBUF_FRAG_PTR[PACKETBUF_FRAG_OFFSET] = processed_ip_out_len >> 3;
    611a:	4b2e      	ldr	r3, [pc, #184]	; (61d4 <output+0x6bc>)
    611c:	4698      	mov	r8, r3
      
      /* Copy payload and send */
      if(uip_len - processed_ip_out_len < packetbuf_payload_len) {
    611e:	1c17      	adds	r7, r2, #0
/*     PACKETBUF_FRAG_BUF->dispatch_size = */
/*       uip_htons((SICSLOWPAN_DISPATCH_FRAGN << 8) | uip_len); */
    SET16(PACKETBUF_FRAG_PTR, PACKETBUF_FRAG_DISPATCH_SIZE,
          ((SICSLOWPAN_DISPATCH_FRAGN << 8) | uip_len));
    packetbuf_payload_len = (MAC_MAX_PAYLOAD - framer_hdrlen - packetbuf_hdr_len) & 0xfffffff8;
    while(processed_ip_out_len < uip_len) {
    6120:	e07c      	b.n	621c <output+0x704>
      PRINTFO("sicslowpan output: fragment ");
      PACKETBUF_FRAG_PTR[PACKETBUF_FRAG_OFFSET] = processed_ip_out_len >> 3;
    6122:	08ea      	lsrs	r2, r5, #3
    6124:	4641      	mov	r1, r8
    6126:	6809      	ldr	r1, [r1, #0]
    6128:	710a      	strb	r2, [r1, #4]
      
      /* Copy payload and send */
      if(uip_len - processed_ip_out_len < packetbuf_payload_len) {
    612a:	1b5b      	subs	r3, r3, r5
    612c:	683a      	ldr	r2, [r7, #0]
    612e:	4293      	cmp	r3, r2
    6130:	da01      	bge.n	6136 <output+0x61e>
        /* last fragment */
        packetbuf_payload_len = uip_len - processed_ip_out_len;
    6132:	4a32      	ldr	r2, [pc, #200]	; (61fc <output+0x6e4>)
    6134:	6013      	str	r3, [r2, #0]
      }
      PRINTFO("(offset %d, len %d, tag %d)\n\r",
             processed_ip_out_len >> 3, packetbuf_payload_len, my_tag);
      memcpy(packetbuf_ptr + packetbuf_hdr_len,
    6136:	4b28      	ldr	r3, [pc, #160]	; (61d8 <output+0x6c0>)
    6138:	781c      	ldrb	r4, [r3, #0]
    613a:	4b30      	ldr	r3, [pc, #192]	; (61fc <output+0x6e4>)
    613c:	681e      	ldr	r6, [r3, #0]
    613e:	4b25      	ldr	r3, [pc, #148]	; (61d4 <output+0x6bc>)
    6140:	6818      	ldr	r0, [r3, #0]
    6142:	1900      	adds	r0, r0, r4
    6144:	4916      	ldr	r1, [pc, #88]	; (61a0 <output+0x688>)
    6146:	1869      	adds	r1, r5, r1
    6148:	1c32      	adds	r2, r6, #0
    614a:	4b18      	ldr	r3, [pc, #96]	; (61ac <output+0x694>)
    614c:	4798      	blx	r3
             (uint8_t *)UIP_IP_BUF + processed_ip_out_len, packetbuf_payload_len);
      packetbuf_set_datalen(packetbuf_payload_len + packetbuf_hdr_len);
    614e:	1930      	adds	r0, r6, r4
    6150:	b280      	uxth	r0, r0
    6152:	4b2b      	ldr	r3, [pc, #172]	; (6200 <output+0x6e8>)
    6154:	4798      	blx	r3
      q = queuebuf_new_from_packetbuf();
    6156:	4b2b      	ldr	r3, [pc, #172]	; (6204 <output+0x6ec>)
    6158:	4798      	blx	r3
    615a:	1e04      	subs	r4, r0, #0
      if(q == NULL) {
    615c:	d105      	bne.n	616a <output+0x652>
        PRINTFO("could not allocate queuebuf, dropping fragment\n\r");
        RIMESTATS_ADD(sicslowpandrops);
    615e:	4a2a      	ldr	r2, [pc, #168]	; (6208 <output+0x6f0>)
    6160:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
    6162:	3301      	adds	r3, #1
    6164:	64d3      	str	r3, [r2, #76]	; 0x4c
        return 0;
    6166:	2000      	movs	r0, #0
    6168:	e082      	b.n	6270 <output+0x758>
      }
      send_packet(&dest);
    616a:	4668      	mov	r0, sp
    616c:	4b27      	ldr	r3, [pc, #156]	; (620c <output+0x6f4>)
    616e:	4798      	blx	r3
      queuebuf_to_packetbuf(q);
    6170:	1c20      	adds	r0, r4, #0
    6172:	4b27      	ldr	r3, [pc, #156]	; (6210 <output+0x6f8>)
    6174:	4798      	blx	r3
      queuebuf_free(q);
    6176:	1c20      	adds	r0, r4, #0
    6178:	4b26      	ldr	r3, [pc, #152]	; (6214 <output+0x6fc>)
    617a:	4798      	blx	r3
      q = NULL;
      processed_ip_out_len += packetbuf_payload_len;
    617c:	4b1f      	ldr	r3, [pc, #124]	; (61fc <output+0x6e4>)
    617e:	681b      	ldr	r3, [r3, #0]
    6180:	18ed      	adds	r5, r5, r3
    6182:	b2ad      	uxth	r5, r5

      /* Check tx result. */
      if((last_tx_status == MAC_TX_COLLISION) ||
    6184:	4b24      	ldr	r3, [pc, #144]	; (6218 <output+0x700>)
    6186:	681b      	ldr	r3, [r3, #0]
    6188:	2b01      	cmp	r3, #1
    618a:	d002      	beq.n	6192 <output+0x67a>
    618c:	3b05      	subs	r3, #5
    618e:	2b01      	cmp	r3, #1
    6190:	d844      	bhi.n	621c <output+0x704>
         (last_tx_status == MAC_TX_ERR) ||
         (last_tx_status == MAC_TX_ERR_FATAL)) {
        PRINTFO("error in fragment tx, dropping subsequent fragments.\n\r");
        RIMESTATS_ADD(sicslowpandrops);
    6192:	4a1d      	ldr	r2, [pc, #116]	; (6208 <output+0x6f0>)
    6194:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
    6196:	3301      	adds	r3, #1
    6198:	64d3      	str	r3, [r2, #76]	; 0x4c
        return 0;
    619a:	2000      	movs	r0, #0
    619c:	e068      	b.n	6270 <output+0x758>
    619e:	46c0      	nop			; (mov r8, r8)
    61a0:	20002cd4 	.word	0x20002cd4
    61a4:	20000564 	.word	0x20000564
    61a8:	20002cf7 	.word	0x20002cf7
    61ac:	000108e7 	.word	0x000108e7
    61b0:	20002cec 	.word	0x20002cec
    61b4:	00005abd 	.word	0x00005abd
    61b8:	20000534 	.word	0x20000534
    61bc:	00005a0d 	.word	0x00005a0d
    61c0:	20000548 	.word	0x20000548
    61c4:	0000f0b0 	.word	0x0000f0b0
    61c8:	0000fff0 	.word	0x0000fff0
    61cc:	20002cfc 	.word	0x20002cfc
    61d0:	20002d02 	.word	0x20002d02
    61d4:	20000554 	.word	0x20000554
    61d8:	20000550 	.word	0x20000550
    61dc:	0000bf91 	.word	0x0000bf91
    61e0:	200031e0 	.word	0x200031e0
    61e4:	0000ac5d 	.word	0x0000ac5d
    61e8:	00012c14 	.word	0x00012c14
    61ec:	200031f8 	.word	0x200031f8
    61f0:	20002cc0 	.word	0x20002cc0
    61f4:	000108f9 	.word	0x000108f9
    61f8:	20000538 	.word	0x20000538
    61fc:	20000544 	.word	0x20000544
    6200:	0000bea9 	.word	0x0000bea9
    6204:	0000c071 	.word	0x0000c071
    6208:	20003230 	.word	0x20003230
    620c:	00005ae9 	.word	0x00005ae9
    6210:	0000c175 	.word	0x0000c175
    6214:	0000c129 	.word	0x0000c129
    6218:	20000568 	.word	0x20000568
/*     PACKETBUF_FRAG_BUF->dispatch_size = */
/*       uip_htons((SICSLOWPAN_DISPATCH_FRAGN << 8) | uip_len); */
    SET16(PACKETBUF_FRAG_PTR, PACKETBUF_FRAG_DISPATCH_SIZE,
          ((SICSLOWPAN_DISPATCH_FRAGN << 8) | uip_len));
    packetbuf_payload_len = (MAC_MAX_PAYLOAD - framer_hdrlen - packetbuf_hdr_len) & 0xfffffff8;
    while(processed_ip_out_len < uip_len) {
    621c:	464b      	mov	r3, r9
    621e:	881b      	ldrh	r3, [r3, #0]
    6220:	429d      	cmp	r5, r3
    6222:	d200      	bcs.n	6226 <output+0x70e>
    6224:	e77d      	b.n	6122 <output+0x60a>
    memcpy(packetbuf_ptr + packetbuf_hdr_len, (uint8_t *)UIP_IP_BUF + uncomp_hdr_len,
           uip_len - uncomp_hdr_len);
    packetbuf_set_datalen(uip_len - uncomp_hdr_len + packetbuf_hdr_len);
    send_packet(&dest);
  }
  return 1;
    6226:	2001      	movs	r0, #1
    6228:	e022      	b.n	6270 <output+0x758>

    /*
     * The packet does not need to be fragmented
     * copy "payload" and send
     */
    memcpy(packetbuf_ptr + packetbuf_hdr_len, (uint8_t *)UIP_IP_BUF + uncomp_hdr_len,
    622a:	4b14      	ldr	r3, [pc, #80]	; (627c <output+0x764>)
    622c:	6818      	ldr	r0, [r3, #0]
    622e:	1900      	adds	r0, r0, r4
    6230:	4913      	ldr	r1, [pc, #76]	; (6280 <output+0x768>)
    6232:	1879      	adds	r1, r7, r1
    6234:	4b13      	ldr	r3, [pc, #76]	; (6284 <output+0x76c>)
    6236:	4798      	blx	r3
           uip_len - uncomp_hdr_len);
    packetbuf_set_datalen(uip_len - uncomp_hdr_len + packetbuf_hdr_len);
    6238:	4b13      	ldr	r3, [pc, #76]	; (6288 <output+0x770>)
    623a:	8818      	ldrh	r0, [r3, #0]
    623c:	1820      	adds	r0, r4, r0
    623e:	1bc0      	subs	r0, r0, r7
    6240:	b280      	uxth	r0, r0
    6242:	4b12      	ldr	r3, [pc, #72]	; (628c <output+0x774>)
    6244:	4798      	blx	r3
    send_packet(&dest);
    6246:	4668      	mov	r0, sp
    6248:	4b11      	ldr	r3, [pc, #68]	; (6290 <output+0x778>)
    624a:	4798      	blx	r3
  }
  return 1;
    624c:	2001      	movs	r0, #1
    624e:	e00f      	b.n	6270 <output+0x758>

  /* Note that the payload length is always compressed */

  /* Next header. We compress it if UDP */
#if UIP_CONF_UDP || UIP_CONF_ROUTER
  if(UIP_IP_BUF->proto == UIP_PROTO_UDP) {
    6250:	4b0b      	ldr	r3, [pc, #44]	; (6280 <output+0x768>)
    6252:	799b      	ldrb	r3, [r3, #6]
    6254:	2b11      	cmp	r3, #17
    6256:	d000      	beq.n	625a <output+0x742>
    6258:	e4fa      	b.n	5c50 <output+0x138>
    625a:	e4f6      	b.n	5c4a <output+0x132>
    625c:	2203      	movs	r2, #3
    625e:	4b0d      	ldr	r3, [pc, #52]	; (6294 <output+0x77c>)
    6260:	849a      	strh	r2, [r3, #36]	; 0x24
    6262:	e484      	b.n	5b6e <output+0x56>
    if(sicslowpan_is_mcast_addr_compressable8(&UIP_IP_BUF->destipaddr)) {
      iphc1 |= SICSLOWPAN_IPHC_DAM_11;
      /* use last byte */
      *hc06_ptr = UIP_IP_BUF->destipaddr.u8[15];
      hc06_ptr += 1;
    } else if(sicslowpan_is_mcast_addr_compressable32(&UIP_IP_BUF->destipaddr)) {
    6264:	4a06      	ldr	r2, [pc, #24]	; (6280 <output+0x768>)
      iphc1 |= SICSLOWPAN_IPHC_DAM_10;
      /* second byte + the last three */
      *hc06_ptr = UIP_IP_BUF->destipaddr.u8[1];
      memcpy(hc06_ptr + 1, &UIP_IP_BUF->destipaddr.u8[13], 3);
      hc06_ptr += 4;
    } else if(sicslowpan_is_mcast_addr_compressable48(&UIP_IP_BUF->destipaddr)) {
    6266:	8b92      	ldrh	r2, [r2, #28]
    6268:	2a00      	cmp	r2, #0
    626a:	d000      	beq.n	626e <output+0x756>
    626c:	e608      	b.n	5e80 <output+0x368>
    626e:	e5ed      	b.n	5e4c <output+0x334>
           uip_len - uncomp_hdr_len);
    packetbuf_set_datalen(uip_len - uncomp_hdr_len + packetbuf_hdr_len);
    send_packet(&dest);
  }
  return 1;
}
    6270:	b003      	add	sp, #12
    6272:	bc0c      	pop	{r2, r3}
    6274:	4690      	mov	r8, r2
    6276:	4699      	mov	r9, r3
    6278:	bdf0      	pop	{r4, r5, r6, r7, pc}
    627a:	46c0      	nop			; (mov r8, r8)
    627c:	20000554 	.word	0x20000554
    6280:	20002cd4 	.word	0x20002cd4
    6284:	000108e7 	.word	0x000108e7
    6288:	20002cc0 	.word	0x20002cc0
    628c:	0000bea9 	.word	0x0000bea9
    6290:	00005ae9 	.word	0x00005ae9
    6294:	200031f8 	.word	0x200031f8

00006298 <packet_sent>:
/**
 * Callback function for the MAC packet sent callback
 */
static void
packet_sent(void *ptr, int status, int transmissions)
{
    6298:	b510      	push	{r4, lr}
    629a:	1c0c      	adds	r4, r1, #0
  uip_ds6_link_neighbor_callback(status, transmissions);
    629c:	1c08      	adds	r0, r1, #0
    629e:	1c11      	adds	r1, r2, #0
    62a0:	4b05      	ldr	r3, [pc, #20]	; (62b8 <packet_sent+0x20>)
    62a2:	4798      	blx	r3

  if(callback != NULL) {
    62a4:	4b05      	ldr	r3, [pc, #20]	; (62bc <packet_sent+0x24>)
    62a6:	681b      	ldr	r3, [r3, #0]
    62a8:	2b00      	cmp	r3, #0
    62aa:	d002      	beq.n	62b2 <packet_sent+0x1a>
    callback->output_callback(status);
    62ac:	689b      	ldr	r3, [r3, #8]
    62ae:	1c20      	adds	r0, r4, #0
    62b0:	4798      	blx	r3
  }
  last_tx_status = status;
    62b2:	4b03      	ldr	r3, [pc, #12]	; (62c0 <packet_sent+0x28>)
    62b4:	601c      	str	r4, [r3, #0]
}
    62b6:	bd10      	pop	{r4, pc}
    62b8:	00006bed 	.word	0x00006bed
    62bc:	2000052c 	.word	0x2000052c
    62c0:	20000568 	.word	0x20000568

000062c4 <uncompress_addr>:
 * and the second postfix count (NOTE: 15/0xf => 16 bytes copy).
 */
static void
uncompress_addr(uip_ipaddr_t *ipaddr, uint8_t const prefix[],
                uint8_t pref_post_count, uip_lladdr_t *lladdr)
{
    62c4:	b5f0      	push	{r4, r5, r6, r7, lr}
    62c6:	464f      	mov	r7, r9
    62c8:	b480      	push	{r7}
    62ca:	b082      	sub	sp, #8
    62cc:	1c05      	adds	r5, r0, #0
    62ce:	1c1e      	adds	r6, r3, #0
  uint8_t prefcount = pref_post_count >> 4;
    62d0:	0917      	lsrs	r7, r2, #4
  uint8_t postcount = pref_post_count & 0x0f;
    62d2:	240f      	movs	r4, #15
    62d4:	4014      	ands	r4, r2
  /* full nibble 15 => 16 */
  prefcount = prefcount == 15 ? 16 : prefcount;
    62d6:	2f0f      	cmp	r7, #15
    62d8:	d035      	beq.n	6346 <uncompress_addr+0x82>
  postcount = postcount == 15 ? 16 : postcount;
    62da:	2c0f      	cmp	r4, #15
    62dc:	d100      	bne.n	62e0 <uncompress_addr+0x1c>
    62de:	3401      	adds	r4, #1

  PRINTF("Uncompressing %d + %d => ", prefcount, postcount);

  if(prefcount > 0) {
    62e0:	2f00      	cmp	r7, #0
    62e2:	d006      	beq.n	62f2 <uncompress_addr+0x2e>
    62e4:	e001      	b.n	62ea <uncompress_addr+0x26>
{
  uint8_t prefcount = pref_post_count >> 4;
  uint8_t postcount = pref_post_count & 0x0f;
  /* full nibble 15 => 16 */
  prefcount = prefcount == 15 ? 16 : prefcount;
  postcount = postcount == 15 ? 16 : postcount;
    62e6:	2410      	movs	r4, #16
                uint8_t pref_post_count, uip_lladdr_t *lladdr)
{
  uint8_t prefcount = pref_post_count >> 4;
  uint8_t postcount = pref_post_count & 0x0f;
  /* full nibble 15 => 16 */
  prefcount = prefcount == 15 ? 16 : prefcount;
    62e8:	2710      	movs	r7, #16
  postcount = postcount == 15 ? 16 : postcount;

  PRINTF("Uncompressing %d + %d => ", prefcount, postcount);

  if(prefcount > 0) {
    memcpy(ipaddr, prefix, prefcount);
    62ea:	1c28      	adds	r0, r5, #0
    62ec:	1c3a      	adds	r2, r7, #0
    62ee:	4b1a      	ldr	r3, [pc, #104]	; (6358 <uncompress_addr+0x94>)
    62f0:	4798      	blx	r3
  }
  if(prefcount + postcount < 16) {
    62f2:	9401      	str	r4, [sp, #4]
    62f4:	193b      	adds	r3, r7, r4
    62f6:	2b0f      	cmp	r3, #15
    62f8:	dc05      	bgt.n	6306 <uncompress_addr+0x42>
    memset(&ipaddr->u8[prefcount], 0, 16 - (prefcount + postcount));
    62fa:	2210      	movs	r2, #16
    62fc:	1ad2      	subs	r2, r2, r3
    62fe:	19e8      	adds	r0, r5, r7
    6300:	2100      	movs	r1, #0
    6302:	4b16      	ldr	r3, [pc, #88]	; (635c <uncompress_addr+0x98>)
    6304:	4798      	blx	r3
  }
  if(postcount > 0) {
    6306:	2c00      	cmp	r4, #0
    6308:	d016      	beq.n	6338 <uncompress_addr+0x74>
    memcpy(&ipaddr->u8[16 - postcount], hc06_ptr, postcount);
    630a:	4b15      	ldr	r3, [pc, #84]	; (6360 <uncompress_addr+0x9c>)
    630c:	681b      	ldr	r3, [r3, #0]
    630e:	4699      	mov	r9, r3
    6310:	1c26      	adds	r6, r4, #0
    6312:	9b01      	ldr	r3, [sp, #4]
    6314:	1ae8      	subs	r0, r5, r3
    6316:	3010      	adds	r0, #16
    6318:	4649      	mov	r1, r9
    631a:	1c22      	adds	r2, r4, #0
    631c:	4b0e      	ldr	r3, [pc, #56]	; (6358 <uncompress_addr+0x94>)
    631e:	4798      	blx	r3
    if(postcount == 2 && prefcount < 11) {
    6320:	2c02      	cmp	r4, #2
    6322:	d105      	bne.n	6330 <uncompress_addr+0x6c>
    6324:	2f0a      	cmp	r7, #10
    6326:	d803      	bhi.n	6330 <uncompress_addr+0x6c>
      /* 16 bits uncompression => 0000:00ff:fe00:XXXX */
      ipaddr->u8[11] = 0xff;
    6328:	23ff      	movs	r3, #255	; 0xff
    632a:	72eb      	strb	r3, [r5, #11]
      ipaddr->u8[12] = 0xfe;
    632c:	3b01      	subs	r3, #1
    632e:	732b      	strb	r3, [r5, #12]
    }
    hc06_ptr += postcount;
    6330:	444e      	add	r6, r9
    6332:	4b0b      	ldr	r3, [pc, #44]	; (6360 <uncompress_addr+0x9c>)
    6334:	601e      	str	r6, [r3, #0]
    6336:	e00a      	b.n	634e <uncompress_addr+0x8a>
  } else if (prefcount > 0) {
    6338:	2f00      	cmp	r7, #0
    633a:	d008      	beq.n	634e <uncompress_addr+0x8a>
    /* no IID based configuration if no prefix and no data => unspec */
    uip_ds6_set_addr_iid(ipaddr, lladdr);
    633c:	1c28      	adds	r0, r5, #0
    633e:	1c31      	adds	r1, r6, #0
    6340:	4b08      	ldr	r3, [pc, #32]	; (6364 <uncompress_addr+0xa0>)
    6342:	4798      	blx	r3
    6344:	e003      	b.n	634e <uncompress_addr+0x8a>
{
  uint8_t prefcount = pref_post_count >> 4;
  uint8_t postcount = pref_post_count & 0x0f;
  /* full nibble 15 => 16 */
  prefcount = prefcount == 15 ? 16 : prefcount;
  postcount = postcount == 15 ? 16 : postcount;
    6346:	2c0f      	cmp	r4, #15
    6348:	d0cd      	beq.n	62e6 <uncompress_addr+0x22>
                uint8_t pref_post_count, uip_lladdr_t *lladdr)
{
  uint8_t prefcount = pref_post_count >> 4;
  uint8_t postcount = pref_post_count & 0x0f;
  /* full nibble 15 => 16 */
  prefcount = prefcount == 15 ? 16 : prefcount;
    634a:	2710      	movs	r7, #16
    634c:	e7cd      	b.n	62ea <uncompress_addr+0x26>
    uip_ds6_set_addr_iid(ipaddr, lladdr);
  }

  PRINT6ADDR(ipaddr);
  PRINTF("\n\r");
}
    634e:	b002      	add	sp, #8
    6350:	bc04      	pop	{r2}
    6352:	4691      	mov	r9, r2
    6354:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6356:	46c0      	nop			; (mov r8, r8)
    6358:	000108e7 	.word	0x000108e7
    635c:	00010921 	.word	0x00010921
    6360:	20000564 	.word	0x20000564
    6364:	00007695 	.word	0x00007695

00006368 <input>:
 * \note We do not check for overlapping sicslowpan fragments
 * (it is a SHALL in the RFC 4944 and should never happen)
 */
static void
input(void)
{
    6368:	b5f0      	push	{r4, r5, r6, r7, lr}
    636a:	465f      	mov	r7, fp
    636c:	4656      	mov	r6, sl
    636e:	464d      	mov	r5, r9
    6370:	4644      	mov	r4, r8
    6372:	b4f0      	push	{r4, r5, r6, r7}
    6374:	b085      	sub	sp, #20
  uint16_t frag_tag = 0;
  uint8_t first_fragment = 0, last_fragment = 0;
#endif /*SICSLOWPAN_CONF_FRAG*/

  /* init */
  uncomp_hdr_len = 0;
    6376:	2300      	movs	r3, #0
    6378:	4ad5      	ldr	r2, [pc, #852]	; (66d0 <input+0x368>)
    637a:	7013      	strb	r3, [r2, #0]
  packetbuf_hdr_len = 0;
    637c:	4ad5      	ldr	r2, [pc, #852]	; (66d4 <input+0x36c>)
    637e:	7013      	strb	r3, [r2, #0]

  /* The MAC puts the 15.4 payload inside the packetbuf data buffer */
  packetbuf_ptr = packetbuf_dataptr();
    6380:	4bd5      	ldr	r3, [pc, #852]	; (66d8 <input+0x370>)
    6382:	4798      	blx	r3
    6384:	4bd5      	ldr	r3, [pc, #852]	; (66dc <input+0x374>)
    6386:	6018      	str	r0, [r3, #0]
  return 1;
}
static inline packetbuf_attr_t
packetbuf_attr(uint8_t type)
{
  return packetbuf_attrs[type].val;
    6388:	4bd5      	ldr	r3, [pc, #852]	; (66e0 <input+0x378>)

  /* Save the RSSI of the incoming packet in case the upper layer will
     want to query us for it later. */
  last_rssi = (signed short)packetbuf_attr(PACKETBUF_ATTR_RSSI);
    638a:	2208      	movs	r2, #8
    638c:	5e9a      	ldrsh	r2, [r3, r2]
    638e:	4bd5      	ldr	r3, [pc, #852]	; (66e4 <input+0x37c>)
    6390:	601a      	str	r2, [r3, #0]
#if SICSLOWPAN_CONF_FRAG
  /* if reassembly timed out, cancel it */
  if(timer_expired(&reass_timer)) {
    6392:	48d5      	ldr	r0, [pc, #852]	; (66e8 <input+0x380>)
    6394:	4bd5      	ldr	r3, [pc, #852]	; (66ec <input+0x384>)
    6396:	4798      	blx	r3
    6398:	2800      	cmp	r0, #0
    639a:	d004      	beq.n	63a6 <input+0x3e>
    sicslowpan_len = 0;
    639c:	2300      	movs	r3, #0
    639e:	4ad4      	ldr	r2, [pc, #848]	; (66f0 <input+0x388>)
    63a0:	8013      	strh	r3, [r2, #0]
    processed_ip_in_len = 0;
    63a2:	4ad4      	ldr	r2, [pc, #848]	; (66f4 <input+0x38c>)
    63a4:	8013      	strh	r3, [r2, #0]
  }
  /*
   * Since we don't support the mesh and broadcast header, the first header
   * we look for is the fragmentation header
   */
  switch((GET16(PACKETBUF_FRAG_PTR, PACKETBUF_FRAG_DISPATCH_SIZE) & 0xf800) >> 8) {
    63a6:	4bcd      	ldr	r3, [pc, #820]	; (66dc <input+0x374>)
    63a8:	6819      	ldr	r1, [r3, #0]
    63aa:	780c      	ldrb	r4, [r1, #0]
    63ac:	0224      	lsls	r4, r4, #8
    63ae:	784a      	ldrb	r2, [r1, #1]
    63b0:	23f8      	movs	r3, #248	; 0xf8
    63b2:	021b      	lsls	r3, r3, #8
    63b4:	4023      	ands	r3, r4
    63b6:	121b      	asrs	r3, r3, #8
    63b8:	2bc0      	cmp	r3, #192	; 0xc0
    63ba:	d002      	beq.n	63c2 <input+0x5a>
    63bc:	2be0      	cmp	r3, #224	; 0xe0
    63be:	d015      	beq.n	63ec <input+0x84>
    63c0:	e036      	b.n	6430 <input+0xc8>
    case SICSLOWPAN_DISPATCH_FRAG1:
      PRINTFI("sicslowpan input: FRAG1 ");
      frag_offset = 0;
/*       frag_size = (uip_ntohs(PACKETBUF_FRAG_BUF->dispatch_size) & 0x07ff); */
      frag_size = GET16(PACKETBUF_FRAG_PTR, PACKETBUF_FRAG_DISPATCH_SIZE) & 0x07ff;
    63c2:	4314      	orrs	r4, r2
    63c4:	0564      	lsls	r4, r4, #21
    63c6:	0d64      	lsrs	r4, r4, #21
/*       frag_tag = uip_ntohs(PACKETBUF_FRAG_BUF->tag); */
      frag_tag = GET16(PACKETBUF_FRAG_PTR, PACKETBUF_FRAG_TAG);
    63c8:	788f      	ldrb	r7, [r1, #2]
    63ca:	023f      	lsls	r7, r7, #8
    63cc:	78cb      	ldrb	r3, [r1, #3]
    63ce:	431f      	orrs	r7, r3
      PRINTFI("size %d, tag %d, offset %d)\n\r",
             frag_size, frag_tag, frag_offset);
      packetbuf_hdr_len += SICSLOWPAN_FRAG1_HDR_LEN;
    63d0:	4ac0      	ldr	r2, [pc, #768]	; (66d4 <input+0x36c>)
    63d2:	7813      	ldrb	r3, [r2, #0]
    63d4:	3304      	adds	r3, #4
    63d6:	7013      	strb	r3, [r2, #0]

  if(!is_fragment) {
    /* Prioritize non-fragment packets too. */
    sicslowpan_len = 0;
    processed_ip_in_len = 0;
  } else if(processed_ip_in_len > 0 && first_fragment
    63d8:	4bc6      	ldr	r3, [pc, #792]	; (66f4 <input+0x38c>)
    63da:	881b      	ldrh	r3, [r3, #0]
    63dc:	2b00      	cmp	r3, #0
    63de:	d133      	bne.n	6448 <input+0xe0>
  uint8_t frag_offset = 0;
  uint8_t is_fragment = 0;
#if SICSLOWPAN_CONF_FRAG
  /* tag of the fragment */
  uint16_t frag_tag = 0;
  uint8_t first_fragment = 0, last_fragment = 0;
    63e0:	9300      	str	r3, [sp, #0]
      frag_tag = GET16(PACKETBUF_FRAG_PTR, PACKETBUF_FRAG_TAG);
      PRINTFI("size %d, tag %d, offset %d)\n\r",
             frag_size, frag_tag, frag_offset);
      packetbuf_hdr_len += SICSLOWPAN_FRAG1_HDR_LEN;
      /*      printf("frag1 %d %d\n\r", reass_tag, frag_tag);*/
      first_fragment = 1;
    63e2:	3301      	adds	r3, #1
    63e4:	4698      	mov	r8, r3

  if(!is_fragment) {
    /* Prioritize non-fragment packets too. */
    sicslowpan_len = 0;
    processed_ip_in_len = 0;
  } else if(processed_ip_in_len > 0 && first_fragment
    63e6:	2101      	movs	r1, #1
   * we look for is the fragmentation header
   */
  switch((GET16(PACKETBUF_FRAG_PTR, PACKETBUF_FRAG_DISPATCH_SIZE) & 0xf800) >> 8) {
    case SICSLOWPAN_DISPATCH_FRAG1:
      PRINTFI("sicslowpan input: FRAG1 ");
      frag_offset = 0;
    63e8:	2600      	movs	r6, #0
    63ea:	e2f6      	b.n	69da <input+0x672>
      /*
       * set offset, tag, size
       * Offset is in units of 8 bytes
       */
      PRINTFI("sicslowpan input: FRAGN ");
      frag_offset = PACKETBUF_FRAG_PTR[PACKETBUF_FRAG_OFFSET];
    63ec:	790e      	ldrb	r6, [r1, #4]
      frag_tag = GET16(PACKETBUF_FRAG_PTR, PACKETBUF_FRAG_TAG);
    63ee:	788f      	ldrb	r7, [r1, #2]
    63f0:	023f      	lsls	r7, r7, #8
    63f2:	78cb      	ldrb	r3, [r1, #3]
    63f4:	431f      	orrs	r7, r3
      frag_size = GET16(PACKETBUF_FRAG_PTR, PACKETBUF_FRAG_DISPATCH_SIZE) & 0x07ff;
    63f6:	4314      	orrs	r4, r2
    63f8:	0564      	lsls	r4, r4, #21
    63fa:	0d64      	lsrs	r4, r4, #21
      PRINTFI("size %d, tag %d, offset %d)\n\r",
             frag_size, frag_tag, frag_offset);
      packetbuf_hdr_len += SICSLOWPAN_FRAGN_HDR_LEN;
    63fc:	4db5      	ldr	r5, [pc, #724]	; (66d4 <input+0x36c>)
    63fe:	782b      	ldrb	r3, [r5, #0]
    6400:	3305      	adds	r3, #5
    6402:	702b      	strb	r3, [r5, #0]
      /* If this is the last fragment, we may shave off any extrenous
         bytes at the end. We must be liberal in what we accept. */
      PRINTFI("last_fragment?: processed_ip_in_len %d packetbuf_payload_len %d frag_size %d\n\r",
              processed_ip_in_len, packetbuf_datalen() - packetbuf_hdr_len, frag_size);

      if(processed_ip_in_len + packetbuf_datalen() - packetbuf_hdr_len >= frag_size) {
    6404:	4bbb      	ldr	r3, [pc, #748]	; (66f4 <input+0x38c>)
    6406:	4698      	mov	r8, r3
    6408:	881b      	ldrh	r3, [r3, #0]
    640a:	4699      	mov	r9, r3
    640c:	4bba      	ldr	r3, [pc, #744]	; (66f8 <input+0x390>)
    640e:	4798      	blx	r3
    6410:	4448      	add	r0, r9
    6412:	782b      	ldrb	r3, [r5, #0]
    6414:	1ac0      	subs	r0, r0, r3
    6416:	17c5      	asrs	r5, r0, #31
    6418:	0fe3      	lsrs	r3, r4, #31
    641a:	42a0      	cmp	r0, r4
    641c:	415d      	adcs	r5, r3
  uint8_t frag_offset = 0;
  uint8_t is_fragment = 0;
#if SICSLOWPAN_CONF_FRAG
  /* tag of the fragment */
  uint16_t frag_tag = 0;
  uint8_t first_fragment = 0, last_fragment = 0;
    641e:	b2eb      	uxtb	r3, r5
    6420:	9300      	str	r3, [sp, #0]

  if(!is_fragment) {
    /* Prioritize non-fragment packets too. */
    sicslowpan_len = 0;
    processed_ip_in_len = 0;
  } else if(processed_ip_in_len > 0 && first_fragment
    6422:	4643      	mov	r3, r8
    6424:	881b      	ldrh	r3, [r3, #0]
    6426:	2b00      	cmp	r3, #0
    6428:	d12a      	bne.n	6480 <input+0x118>
  uint8_t frag_offset = 0;
  uint8_t is_fragment = 0;
#if SICSLOWPAN_CONF_FRAG
  /* tag of the fragment */
  uint16_t frag_tag = 0;
  uint8_t first_fragment = 0, last_fragment = 0;
    642a:	4698      	mov	r8, r3

  if(!is_fragment) {
    /* Prioritize non-fragment packets too. */
    sicslowpan_len = 0;
    processed_ip_in_len = 0;
  } else if(processed_ip_in_len > 0 && first_fragment
    642c:	2101      	movs	r1, #1
    642e:	e2d4      	b.n	69da <input+0x672>
#define PRIORITIZE_NEW_PACKETS 1
#if PRIORITIZE_NEW_PACKETS

  if(!is_fragment) {
    /* Prioritize non-fragment packets too. */
    sicslowpan_len = 0;
    6430:	2300      	movs	r3, #0
    6432:	4aaf      	ldr	r2, [pc, #700]	; (66f0 <input+0x388>)
    6434:	8013      	strh	r3, [r2, #0]
    processed_ip_in_len = 0;
    6436:	4aaf      	ldr	r2, [pc, #700]	; (66f4 <input+0x38c>)
    6438:	8013      	strh	r3, [r2, #0]
  uint8_t frag_offset = 0;
  uint8_t is_fragment = 0;
#if SICSLOWPAN_CONF_FRAG
  /* tag of the fragment */
  uint16_t frag_tag = 0;
  uint8_t first_fragment = 0, last_fragment = 0;
    643a:	9300      	str	r3, [sp, #0]
    643c:	4698      	mov	r8, r3
  /* offset of the fragment in the IP packet */
  uint8_t frag_offset = 0;
  uint8_t is_fragment = 0;
#if SICSLOWPAN_CONF_FRAG
  /* tag of the fragment */
  uint16_t frag_tag = 0;
    643e:	2700      	movs	r7, #0
{
  /* size of the IP packet (read from fragment) */
  uint16_t frag_size = 0;
  /* offset of the fragment in the IP packet */
  uint8_t frag_offset = 0;
  uint8_t is_fragment = 0;
    6440:	2100      	movs	r1, #0
input(void)
{
  /* size of the IP packet (read from fragment) */
  uint16_t frag_size = 0;
  /* offset of the fragment in the IP packet */
  uint8_t frag_offset = 0;
    6442:	2600      	movs	r6, #0
 */
static void
input(void)
{
  /* size of the IP packet (read from fragment) */
  uint16_t frag_size = 0;
    6444:	2400      	movs	r4, #0
    6446:	e2c8      	b.n	69da <input+0x672>
  if(!is_fragment) {
    /* Prioritize non-fragment packets too. */
    sicslowpan_len = 0;
    processed_ip_in_len = 0;
  } else if(processed_ip_in_len > 0 && first_fragment
      && !linkaddr_cmp(&frag_sender, packetbuf_addr(PACKETBUF_ADDR_SENDER))) {
    6448:	48ac      	ldr	r0, [pc, #688]	; (66fc <input+0x394>)
    644a:	49ad      	ldr	r1, [pc, #692]	; (6700 <input+0x398>)
    644c:	4bad      	ldr	r3, [pc, #692]	; (6704 <input+0x39c>)
    644e:	4798      	blx	r3
    6450:	2800      	cmp	r0, #0
    6452:	d10a      	bne.n	646a <input+0x102>
    sicslowpan_len = 0;
    6454:	2300      	movs	r3, #0
    6456:	4aa6      	ldr	r2, [pc, #664]	; (66f0 <input+0x388>)
    6458:	8013      	strh	r3, [r2, #0]
    processed_ip_in_len = 0;
    645a:	4aa6      	ldr	r2, [pc, #664]	; (66f4 <input+0x38c>)
    645c:	8013      	strh	r3, [r2, #0]
  uint8_t frag_offset = 0;
  uint8_t is_fragment = 0;
#if SICSLOWPAN_CONF_FRAG
  /* tag of the fragment */
  uint16_t frag_tag = 0;
  uint8_t first_fragment = 0, last_fragment = 0;
    645e:	9300      	str	r3, [sp, #0]
      frag_tag = GET16(PACKETBUF_FRAG_PTR, PACKETBUF_FRAG_TAG);
      PRINTFI("size %d, tag %d, offset %d)\n\r",
             frag_size, frag_tag, frag_offset);
      packetbuf_hdr_len += SICSLOWPAN_FRAG1_HDR_LEN;
      /*      printf("frag1 %d %d\n\r", reass_tag, frag_tag);*/
      first_fragment = 1;
    6460:	3301      	adds	r3, #1
    6462:	4698      	mov	r8, r3
    sicslowpan_len = 0;
    processed_ip_in_len = 0;
  } else if(processed_ip_in_len > 0 && first_fragment
      && !linkaddr_cmp(&frag_sender, packetbuf_addr(PACKETBUF_ADDR_SENDER))) {
    sicslowpan_len = 0;
    processed_ip_in_len = 0;
    6464:	2101      	movs	r1, #1
   * we look for is the fragmentation header
   */
  switch((GET16(PACKETBUF_FRAG_PTR, PACKETBUF_FRAG_DISPATCH_SIZE) & 0xf800) >> 8) {
    case SICSLOWPAN_DISPATCH_FRAG1:
      PRINTFI("sicslowpan input: FRAG1 ");
      frag_offset = 0;
    6466:	2600      	movs	r6, #0
    6468:	e2b7      	b.n	69da <input+0x672>
    sicslowpan_len = 0;
    processed_ip_in_len = 0;
  }
#endif /* PRIORITIZE_NEW_PACKETS */

  if(processed_ip_in_len > 0) {
    646a:	4ba2      	ldr	r3, [pc, #648]	; (66f4 <input+0x38c>)
    646c:	881b      	ldrh	r3, [r3, #0]
    646e:	2b00      	cmp	r3, #0
    6470:	d100      	bne.n	6474 <input+0x10c>
    6472:	e2c2      	b.n	69fa <input+0x692>
      frag_tag = GET16(PACKETBUF_FRAG_PTR, PACKETBUF_FRAG_TAG);
      PRINTFI("size %d, tag %d, offset %d)\n\r",
             frag_size, frag_tag, frag_offset);
      packetbuf_hdr_len += SICSLOWPAN_FRAG1_HDR_LEN;
      /*      printf("frag1 %d %d\n\r", reass_tag, frag_tag);*/
      first_fragment = 1;
    6474:	2301      	movs	r3, #1
    6476:	4698      	mov	r8, r3
  uint8_t frag_offset = 0;
  uint8_t is_fragment = 0;
#if SICSLOWPAN_CONF_FRAG
  /* tag of the fragment */
  uint16_t frag_tag = 0;
  uint8_t first_fragment = 0, last_fragment = 0;
    6478:	2300      	movs	r3, #0
    647a:	9300      	str	r3, [sp, #0]
   * we look for is the fragmentation header
   */
  switch((GET16(PACKETBUF_FRAG_PTR, PACKETBUF_FRAG_DISPATCH_SIZE) & 0xf800) >> 8) {
    case SICSLOWPAN_DISPATCH_FRAG1:
      PRINTFI("sicslowpan input: FRAG1 ");
      frag_offset = 0;
    647c:	2600      	movs	r6, #0
    647e:	e001      	b.n	6484 <input+0x11c>
  uint8_t frag_offset = 0;
  uint8_t is_fragment = 0;
#if SICSLOWPAN_CONF_FRAG
  /* tag of the fragment */
  uint16_t frag_tag = 0;
  uint8_t first_fragment = 0, last_fragment = 0;
    6480:	2300      	movs	r3, #0
    6482:	4698      	mov	r8, r3
#endif /* PRIORITIZE_NEW_PACKETS */

  if(processed_ip_in_len > 0) {
    /* reassembly is ongoing */
    /*    printf("frag %d %d\n\r", reass_tag, frag_tag);*/
    if((frag_size > 0 &&
    6484:	2c00      	cmp	r4, #0
    6486:	d00e      	beq.n	64a6 <input+0x13e>
        (frag_size != sicslowpan_len ||
    6488:	4b99      	ldr	r3, [pc, #612]	; (66f0 <input+0x388>)
    648a:	881d      	ldrh	r5, [r3, #0]
#endif /* PRIORITIZE_NEW_PACKETS */

  if(processed_ip_in_len > 0) {
    /* reassembly is ongoing */
    /*    printf("frag %d %d\n\r", reass_tag, frag_tag);*/
    if((frag_size > 0 &&
    648c:	42a5      	cmp	r5, r4
    648e:	d10a      	bne.n	64a6 <input+0x13e>
        (frag_size != sicslowpan_len ||
         reass_tag  != frag_tag ||
    6490:	4b9d      	ldr	r3, [pc, #628]	; (6708 <input+0x3a0>)

  if(processed_ip_in_len > 0) {
    /* reassembly is ongoing */
    /*    printf("frag %d %d\n\r", reass_tag, frag_tag);*/
    if((frag_size > 0 &&
        (frag_size != sicslowpan_len ||
    6492:	881b      	ldrh	r3, [r3, #0]
    6494:	42bb      	cmp	r3, r7
    6496:	d106      	bne.n	64a6 <input+0x13e>
         reass_tag  != frag_tag ||
         !linkaddr_cmp(&frag_sender, packetbuf_addr(PACKETBUF_ADDR_SENDER))))  ||
    6498:	4898      	ldr	r0, [pc, #608]	; (66fc <input+0x394>)
    649a:	4999      	ldr	r1, [pc, #612]	; (6700 <input+0x398>)
    649c:	4b99      	ldr	r3, [pc, #612]	; (6704 <input+0x39c>)
    649e:	4798      	blx	r3
    64a0:	1c2c      	adds	r4, r5, #0
  if(processed_ip_in_len > 0) {
    /* reassembly is ongoing */
    /*    printf("frag %d %d\n\r", reass_tag, frag_tag);*/
    if((frag_size > 0 &&
        (frag_size != sicslowpan_len ||
         reass_tag  != frag_tag ||
    64a2:	2800      	cmp	r0, #0
    64a4:	d123      	bne.n	64ee <input+0x186>
      /*
       * the packet is a fragment that does not belong to the packet
       * being reassembled or the packet is not a fragment.
       */
      PRINTFI("sicslowpan input: Dropping 6lowpan packet that is not a fragment of the packet currently being reassembled\n\r");
      printf("frag %d %d\n\r", reass_tag, frag_tag);
    64a6:	4b98      	ldr	r3, [pc, #608]	; (6708 <input+0x3a0>)
    64a8:	8819      	ldrh	r1, [r3, #0]
    64aa:	4898      	ldr	r0, [pc, #608]	; (670c <input+0x3a4>)
    64ac:	1c3a      	adds	r2, r7, #0
    64ae:	4c98      	ldr	r4, [pc, #608]	; (6710 <input+0x3a8>)
    64b0:	47a0      	blx	r4
      printf("drop incoming frag\n\r");
    64b2:	4898      	ldr	r0, [pc, #608]	; (6714 <input+0x3ac>)
    64b4:	47a0      	blx	r4
      RIMESTATS_ADD(sicslowpandrops);
    64b6:	4a98      	ldr	r2, [pc, #608]	; (6718 <input+0x3b0>)
    64b8:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
    64ba:	3301      	adds	r3, #1
    64bc:	64d3      	str	r3, [r2, #76]	; 0x4c
      return;
    64be:	e2af      	b.n	6a20 <input+0x6b8>
     * start it if we received a fragment
     */
    if((frag_size > 0) && (frag_size <= UIP_BUFSIZE)) {
      /* We are currently not reassembling a packet, but have received a packet fragment
       * that is not the first one. */
      if(is_fragment && !first_fragment) {
    64c0:	2900      	cmp	r1, #0
    64c2:	d008      	beq.n	64d6 <input+0x16e>
    64c4:	4643      	mov	r3, r8
    64c6:	2b00      	cmp	r3, #0
    64c8:	d105      	bne.n	64d6 <input+0x16e>
    64ca:	e2a9      	b.n	6a20 <input+0x6b8>
  uint8_t frag_offset = 0;
  uint8_t is_fragment = 0;
#if SICSLOWPAN_CONF_FRAG
  /* tag of the fragment */
  uint16_t frag_tag = 0;
  uint8_t first_fragment = 0, last_fragment = 0;
    64cc:	2300      	movs	r3, #0
    64ce:	9300      	str	r3, [sp, #0]
      frag_tag = GET16(PACKETBUF_FRAG_PTR, PACKETBUF_FRAG_TAG);
      PRINTFI("size %d, tag %d, offset %d)\n\r",
             frag_size, frag_tag, frag_offset);
      packetbuf_hdr_len += SICSLOWPAN_FRAG1_HDR_LEN;
      /*      printf("frag1 %d %d\n\r", reass_tag, frag_tag);*/
      first_fragment = 1;
    64d0:	2201      	movs	r2, #1
    64d2:	4690      	mov	r8, r2
   * we look for is the fragmentation header
   */
  switch((GET16(PACKETBUF_FRAG_PTR, PACKETBUF_FRAG_DISPATCH_SIZE) & 0xf800) >> 8) {
    case SICSLOWPAN_DISPATCH_FRAG1:
      PRINTFI("sicslowpan input: FRAG1 ");
      frag_offset = 0;
    64d4:	1c1e      	adds	r6, r3, #0
       * that is not the first one. */
      if(is_fragment && !first_fragment) {
        return;
      }

      sicslowpan_len = frag_size;
    64d6:	4b86      	ldr	r3, [pc, #536]	; (66f0 <input+0x388>)
    64d8:	801c      	strh	r4, [r3, #0]
      reass_tag = frag_tag;
    64da:	4b8b      	ldr	r3, [pc, #556]	; (6708 <input+0x3a0>)
    64dc:	801f      	strh	r7, [r3, #0]
      timer_set(&reass_timer, SICSLOWPAN_REASS_MAXAGE * CLOCK_SECOND / 16);
    64de:	4882      	ldr	r0, [pc, #520]	; (66e8 <input+0x380>)
    64e0:	21a0      	movs	r1, #160	; 0xa0
    64e2:	4b8e      	ldr	r3, [pc, #568]	; (671c <input+0x3b4>)
    64e4:	4798      	blx	r3
      PRINTFI("sicslowpan input: INIT FRAGMENTATION (len %d, tag %d)\n\r",
             sicslowpan_len, reass_tag);
      linkaddr_copy(&frag_sender, packetbuf_addr(PACKETBUF_ADDR_SENDER));
    64e6:	4885      	ldr	r0, [pc, #532]	; (66fc <input+0x394>)
    64e8:	4985      	ldr	r1, [pc, #532]	; (6700 <input+0x398>)
    64ea:	4b8d      	ldr	r3, [pc, #564]	; (6720 <input+0x3b8>)
    64ec:	4798      	blx	r3
    }
  }

  if(packetbuf_hdr_len == SICSLOWPAN_FRAGN_HDR_LEN) {
    64ee:	4b79      	ldr	r3, [pc, #484]	; (66d4 <input+0x36c>)
    64f0:	781d      	ldrb	r5, [r3, #0]
    64f2:	2d05      	cmp	r5, #5
    64f4:	d100      	bne.n	64f8 <input+0x190>
    64f6:	e21a      	b.n	692e <input+0x5c6>
  }
#endif /* SICSLOWPAN_CONF_FRAG */

  /* Process next dispatch and headers */
#if SICSLOWPAN_COMPRESSION == SICSLOWPAN_COMPRESSION_HC06
  if((PACKETBUF_HC1_PTR[PACKETBUF_HC1_DISPATCH] & 0xe0) == SICSLOWPAN_DISPATCH_IPHC) {
    64f8:	4b78      	ldr	r3, [pc, #480]	; (66dc <input+0x374>)
    64fa:	681b      	ldr	r3, [r3, #0]
    64fc:	5d5f      	ldrb	r7, [r3, r5]
    64fe:	221f      	movs	r2, #31
    6500:	1c39      	adds	r1, r7, #0
    6502:	4391      	bics	r1, r2
    6504:	2960      	cmp	r1, #96	; 0x60
    6506:	d000      	beq.n	650a <input+0x1a2>
    6508:	e1ff      	b.n	690a <input+0x5a2>
static void
uncompress_hdr_hc06(uint16_t ip_len)
{
  uint8_t tmp, iphc0, iphc1;
  /* at least two byte will be used for the encoding */
  hc06_ptr = packetbuf_ptr + packetbuf_hdr_len + 2;
    650a:	1caa      	adds	r2, r5, #2
    650c:	189a      	adds	r2, r3, r2
    650e:	4985      	ldr	r1, [pc, #532]	; (6724 <input+0x3bc>)
    6510:	600a      	str	r2, [r1, #0]

  iphc0 = PACKETBUF_IPHC_BUF[0];
  iphc1 = PACKETBUF_IPHC_BUF[1];
    6512:	195b      	adds	r3, r3, r5
    6514:	785b      	ldrb	r3, [r3, #1]
    6516:	4699      	mov	r9, r3

  /* another if the CID flag is set */
  if(iphc1 & SICSLOWPAN_IPHC_CID) {
    6518:	4669      	mov	r1, sp
    651a:	710b      	strb	r3, [r1, #4]
    651c:	790b      	ldrb	r3, [r1, #4]
    651e:	9301      	str	r3, [sp, #4]
    6520:	b25b      	sxtb	r3, r3
    6522:	2b00      	cmp	r3, #0
    6524:	da02      	bge.n	652c <input+0x1c4>
    PRINTF("IPHC: CID flag set - increase header with one\n\r");
    hc06_ptr++;
    6526:	3201      	adds	r2, #1
    6528:	4b7e      	ldr	r3, [pc, #504]	; (6724 <input+0x3bc>)
    652a:	601a      	str	r2, [r3, #0]
  }

  /* Traffic class and flow label */
    if((iphc0 & SICSLOWPAN_IPHC_FL_C) == 0) {
    652c:	06fb      	lsls	r3, r7, #27
    652e:	d43d      	bmi.n	65ac <input+0x244>
      /* Flow label are carried inline */
      if((iphc0 & SICSLOWPAN_IPHC_TC_C) == 0) {
    6530:	073b      	lsls	r3, r7, #28
    6532:	d423      	bmi.n	657c <input+0x214>
        /* Traffic class is carried inline */
        memcpy(&SICSLOWPAN_IP_BUF->tcflow, hc06_ptr + 1, 3);
    6534:	4b7b      	ldr	r3, [pc, #492]	; (6724 <input+0x3bc>)
    6536:	469a      	mov	sl, r3
    6538:	681b      	ldr	r3, [r3, #0]
    653a:	469b      	mov	fp, r3
    653c:	4d7a      	ldr	r5, [pc, #488]	; (6728 <input+0x3c0>)
    653e:	1c68      	adds	r0, r5, #1
    6540:	1c59      	adds	r1, r3, #1
    6542:	2203      	movs	r2, #3
    6544:	4b79      	ldr	r3, [pc, #484]	; (672c <input+0x3c4>)
    6546:	4798      	blx	r3
        tmp = *hc06_ptr;
    6548:	465b      	mov	r3, fp
    654a:	781b      	ldrb	r3, [r3, #0]
        hc06_ptr += 4;
    654c:	465a      	mov	r2, fp
    654e:	3204      	adds	r2, #4
    6550:	4651      	mov	r1, sl
    6552:	600a      	str	r2, [r1, #0]
        /* hc06 format of tc is ECN | DSCP , original is DSCP | ECN */
        /* set version, pick highest DSCP bits and set in vtc */
        SICSLOWPAN_IP_BUF->vtc = 0x60 | ((tmp >> 2) & 0x0f);
    6554:	089a      	lsrs	r2, r3, #2
    6556:	210f      	movs	r1, #15
    6558:	468a      	mov	sl, r1
    655a:	1c08      	adds	r0, r1, #0
    655c:	4010      	ands	r0, r2
    655e:	4684      	mov	ip, r0
    6560:	2060      	movs	r0, #96	; 0x60
    6562:	4661      	mov	r1, ip
    6564:	4308      	orrs	r0, r1
    6566:	7028      	strb	r0, [r5, #0]
        /* ECN rolled down two steps + lowest DSCP bits at top two bits */
        SICSLOWPAN_IP_BUF->tcflow = ((tmp >> 2) & 0x30) | (tmp << 6) |
    6568:	2030      	movs	r0, #48	; 0x30
    656a:	4002      	ands	r2, r0
    656c:	019b      	lsls	r3, r3, #6
    656e:	4313      	orrs	r3, r2
    6570:	786a      	ldrb	r2, [r5, #1]
    6572:	4651      	mov	r1, sl
    6574:	400a      	ands	r2, r1
    6576:	4313      	orrs	r3, r2
    6578:	706b      	strb	r3, [r5, #1]
    657a:	e036      	b.n	65ea <input+0x282>
  	(SICSLOWPAN_IP_BUF->tcflow & 0x0f);
      } else {
        /* Traffic class is compressed (set version and no TC)*/
        SICSLOWPAN_IP_BUF->vtc = 0x60;
    657c:	486a      	ldr	r0, [pc, #424]	; (6728 <input+0x3c0>)
    657e:	2360      	movs	r3, #96	; 0x60
    6580:	7003      	strb	r3, [r0, #0]
        /* highest flow label bits + ECN bits */
        SICSLOWPAN_IP_BUF->tcflow = (*hc06_ptr & 0x0F) |
    6582:	4d68      	ldr	r5, [pc, #416]	; (6724 <input+0x3bc>)
    6584:	682b      	ldr	r3, [r5, #0]
    6586:	469a      	mov	sl, r3
    6588:	781b      	ldrb	r3, [r3, #0]
    658a:	089a      	lsrs	r2, r3, #2
    658c:	2130      	movs	r1, #48	; 0x30
    658e:	400a      	ands	r2, r1
    6590:	3921      	subs	r1, #33	; 0x21
    6592:	400b      	ands	r3, r1
    6594:	4313      	orrs	r3, r2
    6596:	7043      	strb	r3, [r0, #1]
  	((*hc06_ptr >> 2) & 0x30);
        memcpy(&SICSLOWPAN_IP_BUF->flow, hc06_ptr + 1, 2);
    6598:	3002      	adds	r0, #2
    659a:	4653      	mov	r3, sl
    659c:	1c59      	adds	r1, r3, #1
    659e:	2202      	movs	r2, #2
    65a0:	4b62      	ldr	r3, [pc, #392]	; (672c <input+0x3c4>)
    65a2:	4798      	blx	r3
        hc06_ptr += 3;
    65a4:	4653      	mov	r3, sl
    65a6:	3303      	adds	r3, #3
    65a8:	602b      	str	r3, [r5, #0]
    65aa:	e01e      	b.n	65ea <input+0x282>
      }
    } else {
      /* Version is always 6! */
      /* Version and flow label are compressed */
      if((iphc0 & SICSLOWPAN_IPHC_TC_C) == 0) {
    65ac:	073b      	lsls	r3, r7, #28
    65ae:	d416      	bmi.n	65de <input+0x276>
        /* Traffic class is inline */
          SICSLOWPAN_IP_BUF->vtc = 0x60 | ((*hc06_ptr >> 2) & 0x0f);
    65b0:	4b5c      	ldr	r3, [pc, #368]	; (6724 <input+0x3bc>)
    65b2:	469c      	mov	ip, r3
    65b4:	681a      	ldr	r2, [r3, #0]
    65b6:	485c      	ldr	r0, [pc, #368]	; (6728 <input+0x3c0>)
    65b8:	7813      	ldrb	r3, [r2, #0]
    65ba:	069b      	lsls	r3, r3, #26
    65bc:	0f1b      	lsrs	r3, r3, #28
    65be:	2560      	movs	r5, #96	; 0x60
    65c0:	432b      	orrs	r3, r5
    65c2:	7003      	strb	r3, [r0, #0]
          SICSLOWPAN_IP_BUF->tcflow = ((*hc06_ptr << 6) & 0xC0) | ((*hc06_ptr >> 2) & 0x30);
    65c4:	7813      	ldrb	r3, [r2, #0]
    65c6:	089d      	lsrs	r5, r3, #2
    65c8:	2130      	movs	r1, #48	; 0x30
    65ca:	400d      	ands	r5, r1
    65cc:	019b      	lsls	r3, r3, #6
    65ce:	432b      	orrs	r3, r5
    65d0:	7043      	strb	r3, [r0, #1]
          SICSLOWPAN_IP_BUF->flow = 0;
    65d2:	2300      	movs	r3, #0
    65d4:	8043      	strh	r3, [r0, #2]
          hc06_ptr += 1;
    65d6:	3201      	adds	r2, #1
    65d8:	4663      	mov	r3, ip
    65da:	601a      	str	r2, [r3, #0]
    65dc:	e005      	b.n	65ea <input+0x282>
      } else {
        /* Traffic class is compressed */
        SICSLOWPAN_IP_BUF->vtc = 0x60;
    65de:	4b52      	ldr	r3, [pc, #328]	; (6728 <input+0x3c0>)
    65e0:	2260      	movs	r2, #96	; 0x60
    65e2:	701a      	strb	r2, [r3, #0]
        SICSLOWPAN_IP_BUF->tcflow = 0;
    65e4:	2200      	movs	r2, #0
    65e6:	705a      	strb	r2, [r3, #1]
        SICSLOWPAN_IP_BUF->flow = 0;
    65e8:	805a      	strh	r2, [r3, #2]
      }
    }

  /* Next Header */
  if((iphc0 & SICSLOWPAN_IPHC_NH_C) == 0) {
    65ea:	2304      	movs	r3, #4
    65ec:	403b      	ands	r3, r7
    65ee:	469a      	mov	sl, r3
    65f0:	d106      	bne.n	6600 <input+0x298>
    /* Next header is carried inline */
    SICSLOWPAN_IP_BUF->proto = *hc06_ptr;
    65f2:	4a4c      	ldr	r2, [pc, #304]	; (6724 <input+0x3bc>)
    65f4:	6813      	ldr	r3, [r2, #0]
    65f6:	7818      	ldrb	r0, [r3, #0]
    65f8:	494b      	ldr	r1, [pc, #300]	; (6728 <input+0x3c0>)
    65fa:	7188      	strb	r0, [r1, #6]
    PRINTF("IPHC: next header inline: %d\n\r", SICSLOWPAN_IP_BUF->proto);
    hc06_ptr += 1;
    65fc:	3301      	adds	r3, #1
    65fe:	6013      	str	r3, [r2, #0]
  }

  /* Hop limit */
  if((iphc0 & 0x03) != SICSLOWPAN_IPHC_TTL_I) {
    6600:	2303      	movs	r3, #3
    6602:	401f      	ands	r7, r3
    6604:	d004      	beq.n	6610 <input+0x2a8>
    SICSLOWPAN_IP_BUF->ttl = ttl_values[iphc0 & 0x03];
    6606:	4b4a      	ldr	r3, [pc, #296]	; (6730 <input+0x3c8>)
    6608:	5dda      	ldrb	r2, [r3, r7]
    660a:	4b47      	ldr	r3, [pc, #284]	; (6728 <input+0x3c0>)
    660c:	71da      	strb	r2, [r3, #7]
    660e:	e006      	b.n	661e <input+0x2b6>
  } else {
    SICSLOWPAN_IP_BUF->ttl = *hc06_ptr;
    6610:	4a44      	ldr	r2, [pc, #272]	; (6724 <input+0x3bc>)
    6612:	6813      	ldr	r3, [r2, #0]
    6614:	7818      	ldrb	r0, [r3, #0]
    6616:	4944      	ldr	r1, [pc, #272]	; (6728 <input+0x3c0>)
    6618:	71c8      	strb	r0, [r1, #7]
    hc06_ptr += 1;
    661a:	3301      	adds	r3, #1
    661c:	6013      	str	r3, [r2, #0]
  }

  /* put the source address compression mode SAM in the tmp var */
  tmp = ((iphc1 & SICSLOWPAN_IPHC_SAM_11) >> SICSLOWPAN_IPHC_SAM_BIT) & 0x03;
    661e:	464b      	mov	r3, r9
    6620:	069b      	lsls	r3, r3, #26
    6622:	0f9b      	lsrs	r3, r3, #30

  /* context based compression */
  if(iphc1 & SICSLOWPAN_IPHC_SAC) {
    6624:	464a      	mov	r2, r9
    6626:	0652      	lsls	r2, r2, #25
    6628:	d528      	bpl.n	667c <input+0x314>
    uint8_t sci = (iphc1 & SICSLOWPAN_IPHC_CID) ?
    662a:	466a      	mov	r2, sp
    662c:	7912      	ldrb	r2, [r2, #4]
    662e:	b252      	sxtb	r2, r2
    6630:	2a00      	cmp	r2, #0
    6632:	db00      	blt.n	6636 <input+0x2ce>
    6634:	e1ef      	b.n	6a16 <input+0x6ae>
      PACKETBUF_IPHC_BUF[2] >> 4 : 0;
    6636:	4a27      	ldr	r2, [pc, #156]	; (66d4 <input+0x36c>)
    6638:	7812      	ldrb	r2, [r2, #0]
    663a:	4928      	ldr	r1, [pc, #160]	; (66dc <input+0x374>)
    663c:	6809      	ldr	r1, [r1, #0]
    663e:	188a      	adds	r2, r1, r2
  /* put the source address compression mode SAM in the tmp var */
  tmp = ((iphc1 & SICSLOWPAN_IPHC_SAM_11) >> SICSLOWPAN_IPHC_SAM_BIT) & 0x03;

  /* context based compression */
  if(iphc1 & SICSLOWPAN_IPHC_SAC) {
    uint8_t sci = (iphc1 & SICSLOWPAN_IPHC_CID) ?
    6640:	7892      	ldrb	r2, [r2, #2]
    6642:	0912      	lsrs	r2, r2, #4
      PACKETBUF_IPHC_BUF[2] >> 4 : 0;

    /* Source address - check context != NULL only if SAM bits are != 0*/
    if (tmp != 0) {
    6644:	2b00      	cmp	r3, #0
    6646:	d010      	beq.n	666a <input+0x302>
    6648:	e000      	b.n	664c <input+0x2e4>
  /* put the source address compression mode SAM in the tmp var */
  tmp = ((iphc1 & SICSLOWPAN_IPHC_SAM_11) >> SICSLOWPAN_IPHC_SAM_BIT) & 0x03;

  /* context based compression */
  if(iphc1 & SICSLOWPAN_IPHC_SAC) {
    uint8_t sci = (iphc1 & SICSLOWPAN_IPHC_CID) ?
    664a:	2200      	movs	r2, #0
{
/* Remove code to avoid warnings and save flash if no context is used */ 
#if SICSLOWPAN_CONF_MAX_ADDR_CONTEXTS > 0
  int i;
  for(i = 0; i < SICSLOWPAN_CONF_MAX_ADDR_CONTEXTS; i++) {
    if((addr_contexts[i].used == 1) &&
    664c:	4939      	ldr	r1, [pc, #228]	; (6734 <input+0x3cc>)
    664e:	7809      	ldrb	r1, [r1, #0]
    6650:	2901      	cmp	r1, #1
    6652:	d000      	beq.n	6656 <input+0x2ee>
    6654:	e1c9      	b.n	69ea <input+0x682>
       addr_contexts[i].number == number) {
    6656:	4937      	ldr	r1, [pc, #220]	; (6734 <input+0x3cc>)
{
/* Remove code to avoid warnings and save flash if no context is used */ 
#if SICSLOWPAN_CONF_MAX_ADDR_CONTEXTS > 0
  int i;
  for(i = 0; i < SICSLOWPAN_CONF_MAX_ADDR_CONTEXTS; i++) {
    if((addr_contexts[i].used == 1) &&
    6658:	7849      	ldrb	r1, [r1, #1]
    665a:	4291      	cmp	r1, r2
    665c:	d000      	beq.n	6660 <input+0x2f8>
    665e:	e1c4      	b.n	69ea <input+0x682>
    uint8_t sci = (iphc1 & SICSLOWPAN_IPHC_CID) ?
      PACKETBUF_IPHC_BUF[2] >> 4 : 0;

    /* Source address - check context != NULL only if SAM bits are != 0*/
    if (tmp != 0) {
      context = addr_context_lookup_by_number(sci);
    6660:	4934      	ldr	r1, [pc, #208]	; (6734 <input+0x3cc>)
    6662:	4a35      	ldr	r2, [pc, #212]	; (6738 <input+0x3d0>)
    6664:	6011      	str	r1, [r2, #0]
        PRINTF("sicslowpan uncompress_hdr: error context not found\n\r");
        return;
      }
    }
    /* if tmp == 0 we do not have a context and therefore no prefix */
    uncompress_addr(&SICSLOWPAN_IP_BUF->srcipaddr,
    6666:	3102      	adds	r1, #2
    6668:	e000      	b.n	666c <input+0x304>
    666a:	2100      	movs	r1, #0
    666c:	4a33      	ldr	r2, [pc, #204]	; (673c <input+0x3d4>)
    666e:	5cd2      	ldrb	r2, [r2, r3]
    6670:	482d      	ldr	r0, [pc, #180]	; (6728 <input+0x3c0>)
    6672:	3008      	adds	r0, #8
    6674:	4b22      	ldr	r3, [pc, #136]	; (6700 <input+0x398>)
    6676:	4f32      	ldr	r7, [pc, #200]	; (6740 <input+0x3d8>)
    6678:	47b8      	blx	r7
    667a:	e007      	b.n	668c <input+0x324>
                    tmp != 0 ? context->prefix : NULL, unc_ctxconf[tmp],
                    (uip_lladdr_t *)packetbuf_addr(PACKETBUF_ADDR_SENDER));
  } else {
    /* no compression and link local */
    uncompress_addr(&SICSLOWPAN_IP_BUF->srcipaddr, llprefix, unc_llconf[tmp],
    667c:	4a31      	ldr	r2, [pc, #196]	; (6744 <input+0x3dc>)
    667e:	5cd2      	ldrb	r2, [r2, r3]
    6680:	4829      	ldr	r0, [pc, #164]	; (6728 <input+0x3c0>)
    6682:	3008      	adds	r0, #8
    6684:	4930      	ldr	r1, [pc, #192]	; (6748 <input+0x3e0>)
    6686:	4b1e      	ldr	r3, [pc, #120]	; (6700 <input+0x398>)
    6688:	4f2d      	ldr	r7, [pc, #180]	; (6740 <input+0x3d8>)
    668a:	47b8      	blx	r7
                    (uip_lladdr_t *)packetbuf_addr(PACKETBUF_ADDR_SENDER));
  }

  /* Destination address */
  /* put the destination address compression mode into tmp */
  tmp = ((iphc1 & SICSLOWPAN_IPHC_DAM_11) >> SICSLOWPAN_IPHC_DAM_BIT) & 0x03;
    668c:	2303      	movs	r3, #3
    668e:	464f      	mov	r7, r9
    6690:	401f      	ands	r7, r3

  /* multicast compression */
  if(iphc1 & SICSLOWPAN_IPHC_M) {
    6692:	464b      	mov	r3, r9
    6694:	071b      	lsls	r3, r3, #28
    6696:	d55d      	bpl.n	6754 <input+0x3ec>
    /* context based multicast compression */
    if(iphc1 & SICSLOWPAN_IPHC_DAC) {
    6698:	464b      	mov	r3, r9
    669a:	075b      	lsls	r3, r3, #29
    669c:	d500      	bpl.n	66a0 <input+0x338>
    669e:	e088      	b.n	67b2 <input+0x44a>
      /* non-context based multicast compression - */
      /* DAM_00: 128 bits  */
      /* DAM_01:  48 bits FFXX::00XX:XXXX:XXXX */
      /* DAM_10:  32 bits FFXX::00XX:XXXX */
      /* DAM_11:   8 bits FF02::00XX */
      uint8_t prefix[] = {0xff, 0x02};
    66a0:	a803      	add	r0, sp, #12
    66a2:	492a      	ldr	r1, [pc, #168]	; (674c <input+0x3e4>)
    66a4:	2202      	movs	r2, #2
    66a6:	4b21      	ldr	r3, [pc, #132]	; (672c <input+0x3c4>)
    66a8:	4798      	blx	r3
      if(tmp > 0 && tmp < 3) {
    66aa:	1e7b      	subs	r3, r7, #1
    66ac:	2b01      	cmp	r3, #1
    66ae:	d806      	bhi.n	66be <input+0x356>
        prefix[1] = *hc06_ptr;
    66b0:	4a1c      	ldr	r2, [pc, #112]	; (6724 <input+0x3bc>)
    66b2:	6813      	ldr	r3, [r2, #0]
    66b4:	7818      	ldrb	r0, [r3, #0]
    66b6:	a903      	add	r1, sp, #12
    66b8:	7048      	strb	r0, [r1, #1]
        hc06_ptr++;
    66ba:	3301      	adds	r3, #1
    66bc:	6013      	str	r3, [r2, #0]
      }

      uncompress_addr(&SICSLOWPAN_IP_BUF->destipaddr, prefix,
    66be:	4b24      	ldr	r3, [pc, #144]	; (6750 <input+0x3e8>)
    66c0:	5dda      	ldrb	r2, [r3, r7]
    66c2:	4819      	ldr	r0, [pc, #100]	; (6728 <input+0x3c0>)
    66c4:	3018      	adds	r0, #24
    66c6:	a903      	add	r1, sp, #12
    66c8:	2300      	movs	r3, #0
    66ca:	4f1d      	ldr	r7, [pc, #116]	; (6740 <input+0x3d8>)
    66cc:	47b8      	blx	r7
    66ce:	e070      	b.n	67b2 <input+0x44a>
    66d0:	20000548 	.word	0x20000548
    66d4:	20000550 	.word	0x20000550
    66d8:	0000beb5 	.word	0x0000beb5
    66dc:	20000554 	.word	0x20000554
    66e0:	200031f8 	.word	0x200031f8
    66e4:	2000054c 	.word	0x2000054c
    66e8:	2000053c 	.word	0x2000053c
    66ec:	0000ed8d 	.word	0x0000ed8d
    66f0:	20000530 	.word	0x20000530
    66f4:	2000039a 	.word	0x2000039a
    66f8:	0000bf01 	.word	0x0000bf01
    66fc:	20002b58 	.word	0x20002b58
    6700:	200031d8 	.word	0x200031d8
    6704:	0000ac6d 	.word	0x0000ac6d
    6708:	20000398 	.word	0x20000398
    670c:	000129b0 	.word	0x000129b0
    6710:	00010931 	.word	0x00010931
    6714:	000129c0 	.word	0x000129c0
    6718:	20003230 	.word	0x20003230
    671c:	0000ed5d 	.word	0x0000ed5d
    6720:	0000ac5d 	.word	0x0000ac5d
    6724:	20000564 	.word	0x20000564
    6728:	2000039c 	.word	0x2000039c
    672c:	000108e7 	.word	0x000108e7
    6730:	000129ac 	.word	0x000129ac
    6734:	20000558 	.word	0x20000558
    6738:	20000534 	.word	0x20000534
    673c:	00012994 	.word	0x00012994
    6740:	000062c5 	.word	0x000062c5
    6744:	00012990 	.word	0x00012990
    6748:	0001299c 	.word	0x0001299c
    674c:	0001298c 	.word	0x0001298c
    6750:	00012998 	.word	0x00012998
                      unc_mxconf[tmp], NULL);
    }
  } else {
    /* no multicast */
    /* Context based */
    if(iphc1 & SICSLOWPAN_IPHC_DAC) {
    6754:	464b      	mov	r3, r9
    6756:	075b      	lsls	r3, r3, #29
    6758:	d523      	bpl.n	67a2 <input+0x43a>
      uint8_t dci = (iphc1 & SICSLOWPAN_IPHC_CID) ?
    675a:	466b      	mov	r3, sp
    675c:	2204      	movs	r2, #4
    675e:	569a      	ldrsb	r2, [r3, r2]
    6760:	2300      	movs	r3, #0
    6762:	2a00      	cmp	r2, #0
    6764:	da07      	bge.n	6776 <input+0x40e>
	PACKETBUF_IPHC_BUF[2] & 0x0f : 0;
    6766:	4bb2      	ldr	r3, [pc, #712]	; (6a30 <input+0x6c8>)
    6768:	781b      	ldrb	r3, [r3, #0]
    676a:	4ab2      	ldr	r2, [pc, #712]	; (6a34 <input+0x6cc>)
    676c:	6812      	ldr	r2, [r2, #0]
    676e:	18d3      	adds	r3, r2, r3
    }
  } else {
    /* no multicast */
    /* Context based */
    if(iphc1 & SICSLOWPAN_IPHC_DAC) {
      uint8_t dci = (iphc1 & SICSLOWPAN_IPHC_CID) ?
    6770:	789b      	ldrb	r3, [r3, #2]
    6772:	220f      	movs	r2, #15
    6774:	4013      	ands	r3, r2
{
/* Remove code to avoid warnings and save flash if no context is used */ 
#if SICSLOWPAN_CONF_MAX_ADDR_CONTEXTS > 0
  int i;
  for(i = 0; i < SICSLOWPAN_CONF_MAX_ADDR_CONTEXTS; i++) {
    if((addr_contexts[i].used == 1) &&
    6776:	4ab0      	ldr	r2, [pc, #704]	; (6a38 <input+0x6d0>)
    6778:	7812      	ldrb	r2, [r2, #0]
    677a:	2a01      	cmp	r2, #1
    677c:	d000      	beq.n	6780 <input+0x418>
    677e:	e138      	b.n	69f2 <input+0x68a>
       addr_contexts[i].number == number) {
    6780:	4aad      	ldr	r2, [pc, #692]	; (6a38 <input+0x6d0>)
{
/* Remove code to avoid warnings and save flash if no context is used */ 
#if SICSLOWPAN_CONF_MAX_ADDR_CONTEXTS > 0
  int i;
  for(i = 0; i < SICSLOWPAN_CONF_MAX_ADDR_CONTEXTS; i++) {
    if((addr_contexts[i].used == 1) &&
    6782:	7852      	ldrb	r2, [r2, #1]
    6784:	429a      	cmp	r2, r3
    6786:	d000      	beq.n	678a <input+0x422>
    6788:	e133      	b.n	69f2 <input+0x68a>
    /* no multicast */
    /* Context based */
    if(iphc1 & SICSLOWPAN_IPHC_DAC) {
      uint8_t dci = (iphc1 & SICSLOWPAN_IPHC_CID) ?
	PACKETBUF_IPHC_BUF[2] & 0x0f : 0;
      context = addr_context_lookup_by_number(dci);
    678a:	49ab      	ldr	r1, [pc, #684]	; (6a38 <input+0x6d0>)
    678c:	4bab      	ldr	r3, [pc, #684]	; (6a3c <input+0x6d4>)
    678e:	6019      	str	r1, [r3, #0]
      /* all valid cases below need the context! */
      if(context == NULL) {
	PRINTF("sicslowpan uncompress_hdr: error context not found\n\r");
	return;
      }
      uncompress_addr(&SICSLOWPAN_IP_BUF->destipaddr, context->prefix,
    6790:	3102      	adds	r1, #2
    6792:	4bab      	ldr	r3, [pc, #684]	; (6a40 <input+0x6d8>)
    6794:	5dda      	ldrb	r2, [r3, r7]
    6796:	48ab      	ldr	r0, [pc, #684]	; (6a44 <input+0x6dc>)
    6798:	3018      	adds	r0, #24
    679a:	4bab      	ldr	r3, [pc, #684]	; (6a48 <input+0x6e0>)
    679c:	4fab      	ldr	r7, [pc, #684]	; (6a4c <input+0x6e4>)
    679e:	47b8      	blx	r7
    67a0:	e007      	b.n	67b2 <input+0x44a>
                      unc_ctxconf[tmp],
                      (uip_lladdr_t *)packetbuf_addr(PACKETBUF_ADDR_RECEIVER));
    } else {
      /* not context based => link local M = 0, DAC = 0 - same as SAC */
      uncompress_addr(&SICSLOWPAN_IP_BUF->destipaddr, llprefix,
    67a2:	4bab      	ldr	r3, [pc, #684]	; (6a50 <input+0x6e8>)
    67a4:	5dda      	ldrb	r2, [r3, r7]
    67a6:	48a7      	ldr	r0, [pc, #668]	; (6a44 <input+0x6dc>)
    67a8:	3018      	adds	r0, #24
    67aa:	49aa      	ldr	r1, [pc, #680]	; (6a54 <input+0x6ec>)
    67ac:	4ba6      	ldr	r3, [pc, #664]	; (6a48 <input+0x6e0>)
    67ae:	4fa7      	ldr	r7, [pc, #668]	; (6a4c <input+0x6e4>)
    67b0:	47b8      	blx	r7
                      unc_llconf[tmp],
                      (uip_lladdr_t *)packetbuf_addr(PACKETBUF_ADDR_RECEIVER));
    }
  }
  uncomp_hdr_len += UIP_IPH_LEN;
    67b2:	4aa9      	ldr	r2, [pc, #676]	; (6a58 <input+0x6f0>)
    67b4:	7813      	ldrb	r3, [r2, #0]
    67b6:	3328      	adds	r3, #40	; 0x28
    67b8:	7013      	strb	r3, [r2, #0]

  /* Next header processing - continued */
  if((iphc0 & SICSLOWPAN_IPHC_NH_C)) {
    67ba:	4653      	mov	r3, sl
    67bc:	2b00      	cmp	r3, #0
    67be:	d07d      	beq.n	68bc <input+0x554>
    /* The next header is compressed, NHC is following */
    if((*hc06_ptr & SICSLOWPAN_NHC_UDP_MASK) == SICSLOWPAN_NHC_UDP_ID) {
    67c0:	4ba6      	ldr	r3, [pc, #664]	; (6a5c <input+0x6f4>)
    67c2:	681f      	ldr	r7, [r3, #0]
    67c4:	783b      	ldrb	r3, [r7, #0]
    67c6:	2207      	movs	r2, #7
    67c8:	4393      	bics	r3, r2
    67ca:	2bf0      	cmp	r3, #240	; 0xf0
    67cc:	d176      	bne.n	68bc <input+0x554>
      uint8_t checksum_compressed;
      SICSLOWPAN_IP_BUF->proto = UIP_PROTO_UDP;
    67ce:	320a      	adds	r2, #10
    67d0:	4b9c      	ldr	r3, [pc, #624]	; (6a44 <input+0x6dc>)
    67d2:	719a      	strb	r2, [r3, #6]
      checksum_compressed = *hc06_ptr & SICSLOWPAN_NHC_UDP_CHECKSUMC;
    67d4:	783b      	ldrb	r3, [r7, #0]
    67d6:	3a0d      	subs	r2, #13
    67d8:	401a      	ands	r2, r3
    67da:	1c15      	adds	r5, r2, #0
      PRINTF("IPHC: Incoming header value: %i\n\r", *hc06_ptr);
      switch(*hc06_ptr & SICSLOWPAN_NHC_UDP_CS_P_11) {
    67dc:	220c      	movs	r2, #12
    67de:	4393      	bics	r3, r2
    67e0:	b2da      	uxtb	r2, r3
    67e2:	2af1      	cmp	r2, #241	; 0xf1
    67e4:	d01b      	beq.n	681e <input+0x4b6>
    67e6:	d802      	bhi.n	67ee <input+0x486>
    67e8:	2af0      	cmp	r2, #240	; 0xf0
    67ea:	d006      	beq.n	67fa <input+0x492>
    67ec:	e09f      	b.n	692e <input+0x5c6>
    67ee:	b2da      	uxtb	r2, r3
    67f0:	2af2      	cmp	r2, #242	; 0xf2
    67f2:	d02a      	beq.n	684a <input+0x4e2>
    67f4:	2af3      	cmp	r2, #243	; 0xf3
    67f6:	d03b      	beq.n	6870 <input+0x508>
    67f8:	e099      	b.n	692e <input+0x5c6>
      case SICSLOWPAN_NHC_UDP_CS_P_00:
	/* 1 byte for NHC, 4 byte for ports, 2 bytes chksum */
	memcpy(&SICSLOWPAN_UDP_BUF->srcport, hc06_ptr + 1, 2);
    67fa:	4b92      	ldr	r3, [pc, #584]	; (6a44 <input+0x6dc>)
    67fc:	469a      	mov	sl, r3
    67fe:	1c18      	adds	r0, r3, #0
    6800:	3028      	adds	r0, #40	; 0x28
    6802:	1c79      	adds	r1, r7, #1
    6804:	2202      	movs	r2, #2
    6806:	4b96      	ldr	r3, [pc, #600]	; (6a60 <input+0x6f8>)
    6808:	469b      	mov	fp, r3
    680a:	4798      	blx	r3
	memcpy(&SICSLOWPAN_UDP_BUF->destport, hc06_ptr + 3, 2);
    680c:	4650      	mov	r0, sl
    680e:	302a      	adds	r0, #42	; 0x2a
    6810:	1cf9      	adds	r1, r7, #3
    6812:	2202      	movs	r2, #2
    6814:	47d8      	blx	fp
	PRINTF("IPHC: Uncompressed UDP ports (ptr+5): %x, %x\n\r",
	       UIP_HTONS(SICSLOWPAN_UDP_BUF->srcport), UIP_HTONS(SICSLOWPAN_UDP_BUF->destport));
	hc06_ptr += 5;
    6816:	3705      	adds	r7, #5
    6818:	4b90      	ldr	r3, [pc, #576]	; (6a5c <input+0x6f4>)
    681a:	601f      	str	r7, [r3, #0]
    681c:	e03e      	b.n	689c <input+0x534>
	break;

      case SICSLOWPAN_NHC_UDP_CS_P_01:
        /* 1 byte for NHC + source 16bit inline, dest = 0xF0 + 8 bit inline */
	PRINTF("IPHC: Decompressing destination\n\r");
	memcpy(&SICSLOWPAN_UDP_BUF->srcport, hc06_ptr + 1, 2);
    681e:	4b89      	ldr	r3, [pc, #548]	; (6a44 <input+0x6dc>)
    6820:	469a      	mov	sl, r3
    6822:	1c18      	adds	r0, r3, #0
    6824:	3028      	adds	r0, #40	; 0x28
    6826:	1c79      	adds	r1, r7, #1
    6828:	2202      	movs	r2, #2
    682a:	4b8d      	ldr	r3, [pc, #564]	; (6a60 <input+0x6f8>)
    682c:	4798      	blx	r3
	SICSLOWPAN_UDP_BUF->destport = UIP_HTONS(SICSLOWPAN_UDP_8_BIT_PORT_MIN + (*(hc06_ptr + 3)));
    682e:	78fb      	ldrb	r3, [r7, #3]
    6830:	4a8c      	ldr	r2, [pc, #560]	; (6a64 <input+0x6fc>)
    6832:	4694      	mov	ip, r2
    6834:	4463      	add	r3, ip
    6836:	b29b      	uxth	r3, r3
    6838:	021a      	lsls	r2, r3, #8
    683a:	0a1b      	lsrs	r3, r3, #8
    683c:	4313      	orrs	r3, r2
    683e:	4652      	mov	r2, sl
    6840:	8553      	strh	r3, [r2, #42]	; 0x2a
	PRINTF("IPHC: Uncompressed UDP ports (ptr+4): %x, %x\n\r",
	       UIP_HTONS(SICSLOWPAN_UDP_BUF->srcport), UIP_HTONS(SICSLOWPAN_UDP_BUF->destport));
	hc06_ptr += 4;
    6842:	3704      	adds	r7, #4
    6844:	4b85      	ldr	r3, [pc, #532]	; (6a5c <input+0x6f4>)
    6846:	601f      	str	r7, [r3, #0]
    6848:	e028      	b.n	689c <input+0x534>
	break;

      case SICSLOWPAN_NHC_UDP_CS_P_10:
        /* 1 byte for NHC + source = 0xF0 + 8bit inline, dest = 16 bit inline*/
	PRINTF("IPHC: Decompressing source\n\r");
	SICSLOWPAN_UDP_BUF->srcport = UIP_HTONS(SICSLOWPAN_UDP_8_BIT_PORT_MIN +
    684a:	787b      	ldrb	r3, [r7, #1]
    684c:	4a85      	ldr	r2, [pc, #532]	; (6a64 <input+0x6fc>)
    684e:	4694      	mov	ip, r2
    6850:	4463      	add	r3, ip
    6852:	b29b      	uxth	r3, r3
    6854:	487b      	ldr	r0, [pc, #492]	; (6a44 <input+0x6dc>)
    6856:	021a      	lsls	r2, r3, #8
    6858:	0a1b      	lsrs	r3, r3, #8
    685a:	4313      	orrs	r3, r2
    685c:	8503      	strh	r3, [r0, #40]	; 0x28
					    (*(hc06_ptr + 1)));
	memcpy(&SICSLOWPAN_UDP_BUF->destport, hc06_ptr + 2, 2);
    685e:	302a      	adds	r0, #42	; 0x2a
    6860:	1cb9      	adds	r1, r7, #2
    6862:	2202      	movs	r2, #2
    6864:	4b7e      	ldr	r3, [pc, #504]	; (6a60 <input+0x6f8>)
    6866:	4798      	blx	r3
	PRINTF("IPHC: Uncompressed UDP ports (ptr+4): %x, %x\n\r",
	       UIP_HTONS(SICSLOWPAN_UDP_BUF->srcport), UIP_HTONS(SICSLOWPAN_UDP_BUF->destport));
	hc06_ptr += 4;
    6868:	3704      	adds	r7, #4
    686a:	4b7c      	ldr	r3, [pc, #496]	; (6a5c <input+0x6f4>)
    686c:	601f      	str	r7, [r3, #0]
    686e:	e015      	b.n	689c <input+0x534>
	break;

      case SICSLOWPAN_NHC_UDP_CS_P_11:
	/* 1 byte for NHC, 1 byte for ports */
	SICSLOWPAN_UDP_BUF->srcport = UIP_HTONS(SICSLOWPAN_UDP_4_BIT_PORT_MIN +
    6870:	4a74      	ldr	r2, [pc, #464]	; (6a44 <input+0x6dc>)
    6872:	787b      	ldrb	r3, [r7, #1]
    6874:	091b      	lsrs	r3, r3, #4
    6876:	497c      	ldr	r1, [pc, #496]	; (6a68 <input+0x700>)
    6878:	468c      	mov	ip, r1
    687a:	4463      	add	r3, ip
    687c:	b29b      	uxth	r3, r3
    687e:	021b      	lsls	r3, r3, #8
    6880:	21f0      	movs	r1, #240	; 0xf0
    6882:	430b      	orrs	r3, r1
    6884:	8513      	strh	r3, [r2, #40]	; 0x28
					    (*(hc06_ptr + 1) >> 4));
	SICSLOWPAN_UDP_BUF->destport = UIP_HTONS(SICSLOWPAN_UDP_4_BIT_PORT_MIN +
    6886:	787b      	ldrb	r3, [r7, #1]
    6888:	200f      	movs	r0, #15
    688a:	4003      	ands	r3, r0
    688c:	4463      	add	r3, ip
    688e:	b29b      	uxth	r3, r3
    6890:	021b      	lsls	r3, r3, #8
    6892:	430b      	orrs	r3, r1
    6894:	8553      	strh	r3, [r2, #42]	; 0x2a
					     ((*(hc06_ptr + 1)) & 0x0F));
	PRINTF("IPHC: Uncompressed UDP ports (ptr+2): %x, %x\n\r",
	       UIP_HTONS(SICSLOWPAN_UDP_BUF->srcport), UIP_HTONS(SICSLOWPAN_UDP_BUF->destport));
	hc06_ptr += 2;
    6896:	3702      	adds	r7, #2
    6898:	4b70      	ldr	r3, [pc, #448]	; (6a5c <input+0x6f4>)
    689a:	601f      	str	r7, [r3, #0]

      default:
	PRINTF("sicslowpan uncompress_hdr: error unsupported UDP compression\n\r");
	return;
      }
      if(!checksum_compressed) { /* has_checksum, default  */
    689c:	2d00      	cmp	r5, #0
    689e:	d109      	bne.n	68b4 <input+0x54c>
	memcpy(&SICSLOWPAN_UDP_BUF->udpchksum, hc06_ptr, 2);
    68a0:	4d6e      	ldr	r5, [pc, #440]	; (6a5c <input+0x6f4>)
    68a2:	682f      	ldr	r7, [r5, #0]
    68a4:	4867      	ldr	r0, [pc, #412]	; (6a44 <input+0x6dc>)
    68a6:	302e      	adds	r0, #46	; 0x2e
    68a8:	1c39      	adds	r1, r7, #0
    68aa:	2202      	movs	r2, #2
    68ac:	4b6c      	ldr	r3, [pc, #432]	; (6a60 <input+0x6f8>)
    68ae:	4798      	blx	r3
	hc06_ptr += 2;
    68b0:	3702      	adds	r7, #2
    68b2:	602f      	str	r7, [r5, #0]
	PRINTF("IPHC: sicslowpan uncompress_hdr: checksum included\n\r");
      } else {
	PRINTF("IPHC: sicslowpan uncompress_hdr: checksum *NOT* included\n\r");
      }
      uncomp_hdr_len += UIP_UDPH_LEN;
    68b4:	4a68      	ldr	r2, [pc, #416]	; (6a58 <input+0x6f0>)
    68b6:	7813      	ldrb	r3, [r2, #0]
    68b8:	3308      	adds	r3, #8
    68ba:	7013      	strb	r3, [r2, #0]
      hc06_ptr += SICSLOWPAN_NH_COMPRESSOR.uncompress(hc06_ptr, sicslowpan_buf, &uncomp_hdr_len);
    }
#endif
  }

  packetbuf_hdr_len = hc06_ptr - packetbuf_ptr;
    68bc:	4b67      	ldr	r3, [pc, #412]	; (6a5c <input+0x6f4>)
    68be:	681b      	ldr	r3, [r3, #0]
    68c0:	4a5c      	ldr	r2, [pc, #368]	; (6a34 <input+0x6cc>)
    68c2:	6812      	ldr	r2, [r2, #0]
    68c4:	1a9b      	subs	r3, r3, r2
    68c6:	4a5a      	ldr	r2, [pc, #360]	; (6a30 <input+0x6c8>)
    68c8:	7013      	strb	r3, [r2, #0]
  
  /* IP length field. */
  if(ip_len == 0) {
    68ca:	2c00      	cmp	r4, #0
    68cc:	d10d      	bne.n	68ea <input+0x582>
    int len = packetbuf_datalen() - packetbuf_hdr_len + uncomp_hdr_len - UIP_IPH_LEN;
    68ce:	4b67      	ldr	r3, [pc, #412]	; (6a6c <input+0x704>)
    68d0:	4798      	blx	r3
    68d2:	4b57      	ldr	r3, [pc, #348]	; (6a30 <input+0x6c8>)
    68d4:	781b      	ldrb	r3, [r3, #0]
    68d6:	1ac0      	subs	r0, r0, r3
    68d8:	4b5f      	ldr	r3, [pc, #380]	; (6a58 <input+0x6f0>)
    68da:	781b      	ldrb	r3, [r3, #0]
    68dc:	18c3      	adds	r3, r0, r3
    68de:	3b28      	subs	r3, #40	; 0x28
    /* This is not a fragmented packet */
    SICSLOWPAN_IP_BUF->len[0] = len >> 8;
    68e0:	4a58      	ldr	r2, [pc, #352]	; (6a44 <input+0x6dc>)
    68e2:	1219      	asrs	r1, r3, #8
    68e4:	7111      	strb	r1, [r2, #4]
    SICSLOWPAN_IP_BUF->len[1] = len & 0x00FF;
    68e6:	7153      	strb	r3, [r2, #5]
    68e8:	e007      	b.n	68fa <input+0x592>
  } else {
    /* This is a 1st fragment */
    SICSLOWPAN_IP_BUF->len[0] = (ip_len - UIP_IPH_LEN) >> 8;
    68ea:	4a56      	ldr	r2, [pc, #344]	; (6a44 <input+0x6dc>)
    68ec:	1c23      	adds	r3, r4, #0
    68ee:	3b28      	subs	r3, #40	; 0x28
    68f0:	121b      	asrs	r3, r3, #8
    68f2:	7113      	strb	r3, [r2, #4]
    SICSLOWPAN_IP_BUF->len[1] = (ip_len - UIP_IPH_LEN) & 0x00FF;
    68f4:	1c23      	adds	r3, r4, #0
    68f6:	3b28      	subs	r3, #40	; 0x28
    68f8:	7153      	strb	r3, [r2, #5]
  }
  
  /* length field in UDP header */
  if(SICSLOWPAN_IP_BUF->proto == UIP_PROTO_UDP) {
    68fa:	4b52      	ldr	r3, [pc, #328]	; (6a44 <input+0x6dc>)
    68fc:	799b      	ldrb	r3, [r3, #6]
    68fe:	2b11      	cmp	r3, #17
    6900:	d115      	bne.n	692e <input+0x5c6>
    memcpy(&SICSLOWPAN_UDP_BUF->udplen, &SICSLOWPAN_IP_BUF->len[0], 2);
    6902:	4b50      	ldr	r3, [pc, #320]	; (6a44 <input+0x6dc>)
    6904:	889a      	ldrh	r2, [r3, #4]
    6906:	859a      	strh	r2, [r3, #44]	; 0x2c
    6908:	e011      	b.n	692e <input+0x5c6>
  if((PACKETBUF_HC1_PTR[PACKETBUF_HC1_DISPATCH] & 0xe0) == SICSLOWPAN_DISPATCH_IPHC) {
    PRINTFI("sicslowpan input: IPHC\n\r");
    uncompress_hdr_hc06(frag_size);
  } else
#endif /* SICSLOWPAN_COMPRESSION == SICSLOWPAN_COMPRESSION_HC06 */
    switch(PACKETBUF_HC1_PTR[PACKETBUF_HC1_DISPATCH]) {
    690a:	2f41      	cmp	r7, #65	; 0x41
    690c:	d000      	beq.n	6910 <input+0x5a8>
    690e:	e087      	b.n	6a20 <input+0x6b8>
      uncompress_hdr_hc1(frag_size);
      break;
#endif /* SICSLOWPAN_COMPRESSION == SICSLOWPAN_COMPRESSION_HC1 */
    case SICSLOWPAN_DISPATCH_IPV6:
      PRINTFI("sicslowpan input: IPV6\n\r");
      packetbuf_hdr_len += SICSLOWPAN_IPV6_HDR_LEN;
    6910:	1c69      	adds	r1, r5, #1

      /* Put uncompressed IP header in sicslowpan_buf. */
      memcpy(SICSLOWPAN_IP_BUF, packetbuf_ptr + packetbuf_hdr_len, UIP_IPH_LEN);
    6912:	b2c9      	uxtb	r1, r1
    6914:	1859      	adds	r1, r3, r1
    6916:	484b      	ldr	r0, [pc, #300]	; (6a44 <input+0x6dc>)
    6918:	2228      	movs	r2, #40	; 0x28
    691a:	4b51      	ldr	r3, [pc, #324]	; (6a60 <input+0x6f8>)
    691c:	4798      	blx	r3

      /* Update uncomp_hdr_len and packetbuf_hdr_len. */
      packetbuf_hdr_len += UIP_IPH_LEN;
    691e:	1c2b      	adds	r3, r5, #0
    6920:	3329      	adds	r3, #41	; 0x29
    6922:	4a43      	ldr	r2, [pc, #268]	; (6a30 <input+0x6c8>)
    6924:	7013      	strb	r3, [r2, #0]
      uncomp_hdr_len += UIP_IPH_LEN;
    6926:	4a4c      	ldr	r2, [pc, #304]	; (6a58 <input+0x6f0>)
    6928:	7813      	ldrb	r3, [r2, #0]
    692a:	3328      	adds	r3, #40	; 0x28
    692c:	7013      	strb	r3, [r2, #0]
   * if this is a first fragment or not fragmented packet,
   * we have already copied the compressed headers, uncomp_hdr_len
   * and packetbuf_hdr_len are non 0, frag_offset is.
   * If this is a subsequent fragment, this is the contrary.
   */
  if(packetbuf_datalen() < packetbuf_hdr_len) {
    692e:	4b4f      	ldr	r3, [pc, #316]	; (6a6c <input+0x704>)
    6930:	4798      	blx	r3
    6932:	4b3f      	ldr	r3, [pc, #252]	; (6a30 <input+0x6c8>)
    6934:	781b      	ldrb	r3, [r3, #0]
    6936:	4283      	cmp	r3, r0
    6938:	d904      	bls.n	6944 <input+0x5dc>
    PRINTF("SICSLOWPAN: packet dropped due to header > total packet\n\r");
    RIMESTATS_ADD(sicslowpandrops);
    693a:	4a4d      	ldr	r2, [pc, #308]	; (6a70 <input+0x708>)
    693c:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
    693e:	3301      	adds	r3, #1
    6940:	64d3      	str	r3, [r2, #76]	; 0x4c
    return;
    6942:	e06d      	b.n	6a20 <input+0x6b8>
  }
  packetbuf_payload_len = packetbuf_datalen() - packetbuf_hdr_len;
    6944:	4b49      	ldr	r3, [pc, #292]	; (6a6c <input+0x704>)
    6946:	4798      	blx	r3
    6948:	4b39      	ldr	r3, [pc, #228]	; (6a30 <input+0x6c8>)
    694a:	781b      	ldrb	r3, [r3, #0]
    694c:	1ac7      	subs	r7, r0, r3
    694e:	4a49      	ldr	r2, [pc, #292]	; (6a74 <input+0x70c>)
    6950:	6017      	str	r7, [r2, #0]
          RIMESTATS_ADD(sicslowpandrops);
      return;
    }
  }

  memcpy((uint8_t *)SICSLOWPAN_IP_BUF + uncomp_hdr_len + (uint16_t)(frag_offset << 3), packetbuf_ptr + packetbuf_hdr_len, packetbuf_payload_len);
    6952:	4a41      	ldr	r2, [pc, #260]	; (6a58 <input+0x6f0>)
    6954:	7812      	ldrb	r2, [r2, #0]
    6956:	4691      	mov	r9, r2
    6958:	00f6      	lsls	r6, r6, #3
    695a:	444e      	add	r6, r9
    695c:	4839      	ldr	r0, [pc, #228]	; (6a44 <input+0x6dc>)
    695e:	1980      	adds	r0, r0, r6
    6960:	4a34      	ldr	r2, [pc, #208]	; (6a34 <input+0x6cc>)
    6962:	6811      	ldr	r1, [r2, #0]
    6964:	18c9      	adds	r1, r1, r3
    6966:	1c3a      	adds	r2, r7, #0
    6968:	4b3d      	ldr	r3, [pc, #244]	; (6a60 <input+0x6f8>)
    696a:	4798      	blx	r3
  
  /* update processed_ip_in_len if fragment, sicslowpan_len otherwise */

#if SICSLOWPAN_CONF_FRAG
  if(frag_size > 0) {
    696c:	2c00      	cmp	r4, #0
    696e:	d011      	beq.n	6994 <input+0x62c>
    /* Add the size of the header only for the first fragment. */
    if(first_fragment != 0) {
    6970:	4643      	mov	r3, r8
    6972:	2b00      	cmp	r3, #0
    6974:	d003      	beq.n	697e <input+0x616>
      processed_ip_in_len += uncomp_hdr_len;
    6976:	4a40      	ldr	r2, [pc, #256]	; (6a78 <input+0x710>)
    6978:	8813      	ldrh	r3, [r2, #0]
    697a:	444b      	add	r3, r9
    697c:	8013      	strh	r3, [r2, #0]
    }
    /* For the last fragment, we are OK if there is extrenous bytes at
       the end of the packet. */
    if(last_fragment != 0) {
    697e:	9b00      	ldr	r3, [sp, #0]
    6980:	2b00      	cmp	r3, #0
    6982:	d002      	beq.n	698a <input+0x622>
      processed_ip_in_len = frag_size;
    6984:	4b3c      	ldr	r3, [pc, #240]	; (6a78 <input+0x710>)
    6986:	801c      	strh	r4, [r3, #0]
    6988:	e00b      	b.n	69a2 <input+0x63a>
    } else {
      processed_ip_in_len += packetbuf_payload_len;
    698a:	4a3b      	ldr	r2, [pc, #236]	; (6a78 <input+0x710>)
    698c:	8813      	ldrh	r3, [r2, #0]
    698e:	18ff      	adds	r7, r7, r3
    6990:	8017      	strh	r7, [r2, #0]
    6992:	e002      	b.n	699a <input+0x632>
    }
    PRINTF("processed_ip_in_len %d, packetbuf_payload_len %d\n\r", processed_ip_in_len, packetbuf_payload_len);

  } else {
#endif /* SICSLOWPAN_CONF_FRAG */
    sicslowpan_len = packetbuf_payload_len + uncomp_hdr_len;
    6994:	444f      	add	r7, r9
    6996:	4b39      	ldr	r3, [pc, #228]	; (6a7c <input+0x714>)
    6998:	801f      	strh	r7, [r3, #0]
   * If we have a full IP packet in sicslowpan_buf, deliver it to
   * the IP stack
   */
  PRINTF("sicslowpan_init processed_ip_in_len %d, sicslowpan_len %d\n\r",
         processed_ip_in_len, sicslowpan_len);
  if(processed_ip_in_len == 0 || (processed_ip_in_len == sicslowpan_len)) {
    699a:	4b37      	ldr	r3, [pc, #220]	; (6a78 <input+0x710>)
    699c:	881c      	ldrh	r4, [r3, #0]
    699e:	2c00      	cmp	r4, #0
    69a0:	d003      	beq.n	69aa <input+0x642>
    69a2:	4b36      	ldr	r3, [pc, #216]	; (6a7c <input+0x714>)
    69a4:	881b      	ldrh	r3, [r3, #0]
    69a6:	42a3      	cmp	r3, r4
    69a8:	d13a      	bne.n	6a20 <input+0x6b8>
    PRINTFI("sicslowpan input: IP packet ready (length %d)\n\r",
           sicslowpan_len);
    memcpy((uint8_t *)UIP_IP_BUF, (uint8_t *)SICSLOWPAN_IP_BUF, sicslowpan_len);
    69aa:	4c34      	ldr	r4, [pc, #208]	; (6a7c <input+0x714>)
    69ac:	8825      	ldrh	r5, [r4, #0]
    69ae:	4834      	ldr	r0, [pc, #208]	; (6a80 <input+0x718>)
    69b0:	4924      	ldr	r1, [pc, #144]	; (6a44 <input+0x6dc>)
    69b2:	1c2a      	adds	r2, r5, #0
    69b4:	4b2a      	ldr	r3, [pc, #168]	; (6a60 <input+0x6f8>)
    69b6:	4798      	blx	r3
    uip_len = sicslowpan_len;
    69b8:	4b32      	ldr	r3, [pc, #200]	; (6a84 <input+0x71c>)
    69ba:	801d      	strh	r5, [r3, #0]
    sicslowpan_len = 0;
    69bc:	2300      	movs	r3, #0
    69be:	8023      	strh	r3, [r4, #0]
    processed_ip_in_len = 0;
    69c0:	4a2d      	ldr	r2, [pc, #180]	; (6a78 <input+0x710>)
    69c2:	8013      	strh	r3, [r2, #0]
      PRINTF("\n\r");
    }
#endif

    /* if callback is set then set attributes and call */
    if(callback) {
    69c4:	4b30      	ldr	r3, [pc, #192]	; (6a88 <input+0x720>)
    69c6:	681c      	ldr	r4, [r3, #0]
    69c8:	2c00      	cmp	r4, #0
    69ca:	d003      	beq.n	69d4 <input+0x66c>
      set_packet_attrs();
    69cc:	4b2f      	ldr	r3, [pc, #188]	; (6a8c <input+0x724>)
    69ce:	4798      	blx	r3
      callback->input_callback();
    69d0:	6863      	ldr	r3, [r4, #4]
    69d2:	4798      	blx	r3
    }

    tcpip_input();
    69d4:	4b2e      	ldr	r3, [pc, #184]	; (6a90 <input+0x728>)
    69d6:	4798      	blx	r3
    69d8:	e022      	b.n	6a20 <input+0x6b8>
  } else {
    /*
     * reassembly is off
     * start it if we received a fragment
     */
    if((frag_size > 0) && (frag_size <= UIP_BUFSIZE)) {
    69da:	1e63      	subs	r3, r4, #1
    69dc:	b29b      	uxth	r3, r3
    69de:	2290      	movs	r2, #144	; 0x90
    69e0:	32ff      	adds	r2, #255	; 0xff
    69e2:	4293      	cmp	r3, r2
    69e4:	d800      	bhi.n	69e8 <input+0x680>
    69e6:	e56b      	b.n	64c0 <input+0x158>
    69e8:	e581      	b.n	64ee <input+0x186>
    uint8_t sci = (iphc1 & SICSLOWPAN_IPHC_CID) ?
      PACKETBUF_IPHC_BUF[2] >> 4 : 0;

    /* Source address - check context != NULL only if SAM bits are != 0*/
    if (tmp != 0) {
      context = addr_context_lookup_by_number(sci);
    69ea:	2200      	movs	r2, #0
    69ec:	4b13      	ldr	r3, [pc, #76]	; (6a3c <input+0x6d4>)
    69ee:	601a      	str	r2, [r3, #0]
    69f0:	e79d      	b.n	692e <input+0x5c6>
    /* no multicast */
    /* Context based */
    if(iphc1 & SICSLOWPAN_IPHC_DAC) {
      uint8_t dci = (iphc1 & SICSLOWPAN_IPHC_CID) ?
	PACKETBUF_IPHC_BUF[2] & 0x0f : 0;
      context = addr_context_lookup_by_number(dci);
    69f2:	2200      	movs	r2, #0
    69f4:	4b11      	ldr	r3, [pc, #68]	; (6a3c <input+0x6d4>)
    69f6:	601a      	str	r2, [r3, #0]
    69f8:	e799      	b.n	692e <input+0x5c6>
  } else {
    /*
     * reassembly is off
     * start it if we received a fragment
     */
    if((frag_size > 0) && (frag_size <= UIP_BUFSIZE)) {
    69fa:	1e63      	subs	r3, r4, #1
    69fc:	b29b      	uxth	r3, r3
    69fe:	2290      	movs	r2, #144	; 0x90
    6a00:	32ff      	adds	r2, #255	; 0xff
    6a02:	4293      	cmp	r3, r2
    6a04:	d800      	bhi.n	6a08 <input+0x6a0>
    6a06:	e561      	b.n	64cc <input+0x164>
  uint8_t frag_offset = 0;
  uint8_t is_fragment = 0;
#if SICSLOWPAN_CONF_FRAG
  /* tag of the fragment */
  uint16_t frag_tag = 0;
  uint8_t first_fragment = 0, last_fragment = 0;
    6a08:	2300      	movs	r3, #0
    6a0a:	9300      	str	r3, [sp, #0]
      frag_tag = GET16(PACKETBUF_FRAG_PTR, PACKETBUF_FRAG_TAG);
      PRINTFI("size %d, tag %d, offset %d)\n\r",
             frag_size, frag_tag, frag_offset);
      packetbuf_hdr_len += SICSLOWPAN_FRAG1_HDR_LEN;
      /*      printf("frag1 %d %d\n\r", reass_tag, frag_tag);*/
      first_fragment = 1;
    6a0c:	3a8f      	subs	r2, #143	; 0x8f
    6a0e:	3aff      	subs	r2, #255	; 0xff
    6a10:	4690      	mov	r8, r2
   * we look for is the fragmentation header
   */
  switch((GET16(PACKETBUF_FRAG_PTR, PACKETBUF_FRAG_DISPATCH_SIZE) & 0xf800) >> 8) {
    case SICSLOWPAN_DISPATCH_FRAG1:
      PRINTFI("sicslowpan input: FRAG1 ");
      frag_offset = 0;
    6a12:	1c1e      	adds	r6, r3, #0
    6a14:	e56b      	b.n	64ee <input+0x186>
        PRINTF("sicslowpan uncompress_hdr: error context not found\n\r");
        return;
      }
    }
    /* if tmp == 0 we do not have a context and therefore no prefix */
    uncompress_addr(&SICSLOWPAN_IP_BUF->srcipaddr,
    6a16:	2100      	movs	r1, #0
  if(iphc1 & SICSLOWPAN_IPHC_SAC) {
    uint8_t sci = (iphc1 & SICSLOWPAN_IPHC_CID) ?
      PACKETBUF_IPHC_BUF[2] >> 4 : 0;

    /* Source address - check context != NULL only if SAM bits are != 0*/
    if (tmp != 0) {
    6a18:	2b00      	cmp	r3, #0
    6a1a:	d100      	bne.n	6a1e <input+0x6b6>
    6a1c:	e626      	b.n	666c <input+0x304>
    6a1e:	e614      	b.n	664a <input+0x2e2>

    tcpip_input();
#if SICSLOWPAN_CONF_FRAG
  }
#endif /* SICSLOWPAN_CONF_FRAG */
}
    6a20:	b005      	add	sp, #20
    6a22:	bc3c      	pop	{r2, r3, r4, r5}
    6a24:	4690      	mov	r8, r2
    6a26:	4699      	mov	r9, r3
    6a28:	46a2      	mov	sl, r4
    6a2a:	46ab      	mov	fp, r5
    6a2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6a2e:	46c0      	nop			; (mov r8, r8)
    6a30:	20000550 	.word	0x20000550
    6a34:	20000554 	.word	0x20000554
    6a38:	20000558 	.word	0x20000558
    6a3c:	20000534 	.word	0x20000534
    6a40:	00012994 	.word	0x00012994
    6a44:	2000039c 	.word	0x2000039c
    6a48:	200031e0 	.word	0x200031e0
    6a4c:	000062c5 	.word	0x000062c5
    6a50:	00012990 	.word	0x00012990
    6a54:	0001299c 	.word	0x0001299c
    6a58:	20000548 	.word	0x20000548
    6a5c:	20000564 	.word	0x20000564
    6a60:	000108e7 	.word	0x000108e7
    6a64:	fffff000 	.word	0xfffff000
    6a68:	fffff0b0 	.word	0xfffff0b0
    6a6c:	0000bf01 	.word	0x0000bf01
    6a70:	20003230 	.word	0x20003230
    6a74:	20000544 	.word	0x20000544
    6a78:	2000039a 	.word	0x2000039a
    6a7c:	20000530 	.word	0x20000530
    6a80:	20002cd4 	.word	0x20002cd4
    6a84:	20002cc0 	.word	0x20002cc0
    6a88:	2000052c 	.word	0x2000052c
    6a8c:	00005995 	.word	0x00005995
    6a90:	0000a5fd 	.word	0x0000a5fd

00006a94 <sicslowpan_get_last_rssi>:
}
/*--------------------------------------------------------------------*/
int
sicslowpan_get_last_rssi(void)
{
  return last_rssi;
    6a94:	4b01      	ldr	r3, [pc, #4]	; (6a9c <sicslowpan_get_last_rssi+0x8>)
    6a96:	6818      	ldr	r0, [r3, #0]
}
    6a98:	4770      	bx	lr
    6a9a:	46c0      	nop			; (mov r8, r8)
    6a9c:	2000054c 	.word	0x2000054c

00006aa0 <uip_ds6_nbr_rm>:
}

/*---------------------------------------------------------------------------*/
void
uip_ds6_nbr_rm(uip_ds6_nbr_t *nbr)
{
    6aa0:	b510      	push	{r4, lr}
  if(nbr != NULL) {
    6aa2:	2800      	cmp	r0, #0
    6aa4:	d007      	beq.n	6ab6 <uip_ds6_nbr_rm+0x16>
    6aa6:	1c04      	adds	r4, r0, #0
#if UIP_CONF_IPV6_QUEUE_PKT
    uip_packetqueue_free(&nbr->packethandle);
#endif /* UIP_CONF_IPV6_QUEUE_PKT */
    NEIGHBOR_STATE_CHANGED(nbr);
    6aa8:	4b03      	ldr	r3, [pc, #12]	; (6ab8 <uip_ds6_nbr_rm+0x18>)
    6aaa:	4798      	blx	r3
    nbr_table_remove(ds6_neighbors, nbr);
    6aac:	4b03      	ldr	r3, [pc, #12]	; (6abc <uip_ds6_nbr_rm+0x1c>)
    6aae:	6818      	ldr	r0, [r3, #0]
    6ab0:	1c21      	adds	r1, r4, #0
    6ab2:	4b03      	ldr	r3, [pc, #12]	; (6ac0 <uip_ds6_nbr_rm+0x20>)
    6ab4:	4798      	blx	r3
  }
  return;
}
    6ab6:	bd10      	pop	{r4, pc}
    6ab8:	0000e49d 	.word	0x0000e49d
    6abc:	2000002c 	.word	0x2000002c
    6ac0:	0000bd45 	.word	0x0000bd45

00006ac4 <uip_ds6_neighbors_init>:
NBR_TABLE_GLOBAL(uip_ds6_nbr_t, ds6_neighbors);

/*---------------------------------------------------------------------------*/
void
uip_ds6_neighbors_init(void)
{
    6ac4:	b508      	push	{r3, lr}
  nbr_table_register(ds6_neighbors, (nbr_table_callback *)uip_ds6_nbr_rm);
    6ac6:	4b03      	ldr	r3, [pc, #12]	; (6ad4 <uip_ds6_neighbors_init+0x10>)
    6ac8:	6818      	ldr	r0, [r3, #0]
    6aca:	4903      	ldr	r1, [pc, #12]	; (6ad8 <uip_ds6_neighbors_init+0x14>)
    6acc:	4b03      	ldr	r3, [pc, #12]	; (6adc <uip_ds6_neighbors_init+0x18>)
    6ace:	4798      	blx	r3
}
    6ad0:	bd08      	pop	{r3, pc}
    6ad2:	46c0      	nop			; (mov r8, r8)
    6ad4:	2000002c 	.word	0x2000002c
    6ad8:	00006aa1 	.word	0x00006aa1
    6adc:	0000ba99 	.word	0x0000ba99

00006ae0 <uip_ds6_nbr_add>:
/*---------------------------------------------------------------------------*/
uip_ds6_nbr_t *
uip_ds6_nbr_add(const uip_ipaddr_t *ipaddr, const uip_lladdr_t *lladdr,
                uint8_t isrouter, uint8_t state)
{
    6ae0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6ae2:	1c05      	adds	r5, r0, #0
    6ae4:	1c17      	adds	r7, r2, #0
    6ae6:	1c1e      	adds	r6, r3, #0
  uip_ds6_nbr_t *nbr = nbr_table_add_lladdr(ds6_neighbors, (linkaddr_t*)lladdr);
    6ae8:	4b0f      	ldr	r3, [pc, #60]	; (6b28 <uip_ds6_nbr_add+0x48>)
    6aea:	6818      	ldr	r0, [r3, #0]
    6aec:	4b0f      	ldr	r3, [pc, #60]	; (6b2c <uip_ds6_nbr_add+0x4c>)
    6aee:	4798      	blx	r3
    6af0:	1e04      	subs	r4, r0, #0
  if(nbr) {
    6af2:	d016      	beq.n	6b22 <uip_ds6_nbr_add+0x42>
    uip_ipaddr_copy(&nbr->ipaddr, ipaddr);
    6af4:	1c29      	adds	r1, r5, #0
    6af6:	2210      	movs	r2, #16
    6af8:	4b0d      	ldr	r3, [pc, #52]	; (6b30 <uip_ds6_nbr_add+0x50>)
    6afa:	4798      	blx	r3
    nbr->isrouter = isrouter;
    6afc:	2321      	movs	r3, #33	; 0x21
    6afe:	54e7      	strb	r7, [r4, r3]
    nbr->state = state;
    6b00:	3301      	adds	r3, #1
    6b02:	54e6      	strb	r6, [r4, r3]
  #if UIP_CONF_IPV6_QUEUE_PKT
    uip_packetqueue_new(&nbr->packethandle);
  #endif /* UIP_CONF_IPV6_QUEUE_PKT */
    /* timers are set separately, for now we put them in expired state */
    stimer_set(&nbr->reachable, 0);
    6b04:	1c20      	adds	r0, r4, #0
    6b06:	3010      	adds	r0, #16
    6b08:	2100      	movs	r1, #0
    6b0a:	4d0a      	ldr	r5, [pc, #40]	; (6b34 <uip_ds6_nbr_add+0x54>)
    6b0c:	47a8      	blx	r5
    stimer_set(&nbr->sendns, 0);
    6b0e:	1c20      	adds	r0, r4, #0
    6b10:	3018      	adds	r0, #24
    6b12:	2100      	movs	r1, #0
    6b14:	47a8      	blx	r5
    nbr->nscount = 0;
    6b16:	2200      	movs	r2, #0
    6b18:	2320      	movs	r3, #32
    6b1a:	54e2      	strb	r2, [r4, r3]
    PRINTF("Adding neighbor with ip addr ");
    PRINT6ADDR(ipaddr);
    PRINTF(" link addr ");
    PRINTLLADDR(lladdr);
    PRINTF(" state %u\n\r", state);
    NEIGHBOR_STATE_CHANGED(nbr);
    6b1c:	1c20      	adds	r0, r4, #0
    6b1e:	4b06      	ldr	r3, [pc, #24]	; (6b38 <uip_ds6_nbr_add+0x58>)
    6b20:	4798      	blx	r3
    PRINTF(" link addr (%p) ", lladdr);
    PRINTLLADDR(lladdr);
    PRINTF(" state %u\n\r", state);
    return NULL;
  }
}
    6b22:	1c20      	adds	r0, r4, #0
    6b24:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    6b26:	46c0      	nop			; (mov r8, r8)
    6b28:	2000002c 	.word	0x2000002c
    6b2c:	0000bb81 	.word	0x0000bb81
    6b30:	000108e7 	.word	0x000108e7
    6b34:	0000ecfd 	.word	0x0000ecfd
    6b38:	0000e49d 	.word	0x0000e49d

00006b3c <uip_ds6_nbr_get_ll>:
}

/*---------------------------------------------------------------------------*/
const uip_lladdr_t *
uip_ds6_nbr_get_ll(const uip_ds6_nbr_t *nbr)
{
    6b3c:	b508      	push	{r3, lr}
    6b3e:	1c01      	adds	r1, r0, #0
  return (const uip_lladdr_t *)nbr_table_get_lladdr(ds6_neighbors, nbr);
    6b40:	4b02      	ldr	r3, [pc, #8]	; (6b4c <uip_ds6_nbr_get_ll+0x10>)
    6b42:	6818      	ldr	r0, [r3, #0]
    6b44:	4b02      	ldr	r3, [pc, #8]	; (6b50 <uip_ds6_nbr_get_ll+0x14>)
    6b46:	4798      	blx	r3
}
    6b48:	bd08      	pop	{r3, pc}
    6b4a:	46c0      	nop			; (mov r8, r8)
    6b4c:	2000002c 	.word	0x2000002c
    6b50:	0000bdad 	.word	0x0000bdad

00006b54 <uip_ds6_nbr_lookup>:
  return num;
}
/*---------------------------------------------------------------------------*/
uip_ds6_nbr_t *
uip_ds6_nbr_lookup(const uip_ipaddr_t *ipaddr)
{
    6b54:	b5f0      	push	{r4, r5, r6, r7, lr}
    6b56:	b083      	sub	sp, #12
    6b58:	1c05      	adds	r5, r0, #0
    6b5a:	9001      	str	r0, [sp, #4]
  uip_ds6_nbr_t *nbr = nbr_table_head(ds6_neighbors);
    6b5c:	4b0f      	ldr	r3, [pc, #60]	; (6b9c <uip_ds6_nbr_lookup+0x48>)
    6b5e:	6818      	ldr	r0, [r3, #0]
    6b60:	4b0f      	ldr	r3, [pc, #60]	; (6ba0 <uip_ds6_nbr_lookup+0x4c>)
    6b62:	4798      	blx	r3
    6b64:	1c04      	adds	r4, r0, #0
  if(ipaddr != NULL) {
    6b66:	2d00      	cmp	r5, #0
    6b68:	d011      	beq.n	6b8e <uip_ds6_nbr_lookup+0x3a>
    while(nbr != NULL) {
    6b6a:	2800      	cmp	r0, #0
    6b6c:	d011      	beq.n	6b92 <uip_ds6_nbr_lookup+0x3e>
      if(uip_ipaddr_cmp(&nbr->ipaddr, ipaddr)) {
    6b6e:	4e0d      	ldr	r6, [pc, #52]	; (6ba4 <uip_ds6_nbr_lookup+0x50>)
        return nbr;
      }
      nbr = nbr_table_next(ds6_neighbors, nbr);
    6b70:	4d0a      	ldr	r5, [pc, #40]	; (6b9c <uip_ds6_nbr_lookup+0x48>)
    6b72:	4f0d      	ldr	r7, [pc, #52]	; (6ba8 <uip_ds6_nbr_lookup+0x54>)
uip_ds6_nbr_lookup(const uip_ipaddr_t *ipaddr)
{
  uip_ds6_nbr_t *nbr = nbr_table_head(ds6_neighbors);
  if(ipaddr != NULL) {
    while(nbr != NULL) {
      if(uip_ipaddr_cmp(&nbr->ipaddr, ipaddr)) {
    6b74:	1c20      	adds	r0, r4, #0
    6b76:	9901      	ldr	r1, [sp, #4]
    6b78:	2210      	movs	r2, #16
    6b7a:	47b0      	blx	r6
    6b7c:	2800      	cmp	r0, #0
    6b7e:	d00a      	beq.n	6b96 <uip_ds6_nbr_lookup+0x42>
        return nbr;
      }
      nbr = nbr_table_next(ds6_neighbors, nbr);
    6b80:	6828      	ldr	r0, [r5, #0]
    6b82:	1c21      	adds	r1, r4, #0
    6b84:	47b8      	blx	r7
    6b86:	1e04      	subs	r4, r0, #0
uip_ds6_nbr_t *
uip_ds6_nbr_lookup(const uip_ipaddr_t *ipaddr)
{
  uip_ds6_nbr_t *nbr = nbr_table_head(ds6_neighbors);
  if(ipaddr != NULL) {
    while(nbr != NULL) {
    6b88:	d1f4      	bne.n	6b74 <uip_ds6_nbr_lookup+0x20>
        return nbr;
      }
      nbr = nbr_table_next(ds6_neighbors, nbr);
    }
  }
  return NULL;
    6b8a:	2000      	movs	r0, #0
    6b8c:	e004      	b.n	6b98 <uip_ds6_nbr_lookup+0x44>
    6b8e:	2000      	movs	r0, #0
    6b90:	e002      	b.n	6b98 <uip_ds6_nbr_lookup+0x44>
    6b92:	2000      	movs	r0, #0
    6b94:	e000      	b.n	6b98 <uip_ds6_nbr_lookup+0x44>
    6b96:	1c20      	adds	r0, r4, #0
}
    6b98:	b003      	add	sp, #12
    6b9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6b9c:	2000002c 	.word	0x2000002c
    6ba0:	0000bb31 	.word	0x0000bb31
    6ba4:	000108c9 	.word	0x000108c9
    6ba8:	0000bac5 	.word	0x0000bac5

00006bac <uip_ds6_nbr_ll_lookup>:
/*---------------------------------------------------------------------------*/
uip_ds6_nbr_t *
uip_ds6_nbr_ll_lookup(const uip_lladdr_t *lladdr)
{
    6bac:	b508      	push	{r3, lr}
    6bae:	1c01      	adds	r1, r0, #0
  return nbr_table_get_from_lladdr(ds6_neighbors, (linkaddr_t*)lladdr);
    6bb0:	4b02      	ldr	r3, [pc, #8]	; (6bbc <uip_ds6_nbr_ll_lookup+0x10>)
    6bb2:	6818      	ldr	r0, [r3, #0]
    6bb4:	4b02      	ldr	r3, [pc, #8]	; (6bc0 <uip_ds6_nbr_ll_lookup+0x14>)
    6bb6:	4798      	blx	r3
}
    6bb8:	bd08      	pop	{r3, pc}
    6bba:	46c0      	nop			; (mov r8, r8)
    6bbc:	2000002c 	.word	0x2000002c
    6bc0:	0000bd09 	.word	0x0000bd09

00006bc4 <uip_ds6_nbr_ipaddr_from_lladdr>:

/*---------------------------------------------------------------------------*/
uip_ipaddr_t *
uip_ds6_nbr_ipaddr_from_lladdr(const uip_lladdr_t *lladdr)
{
    6bc4:	b508      	push	{r3, lr}
  uip_ds6_nbr_t *nbr = uip_ds6_nbr_ll_lookup(lladdr);
    6bc6:	4b01      	ldr	r3, [pc, #4]	; (6bcc <uip_ds6_nbr_ipaddr_from_lladdr+0x8>)
    6bc8:	4798      	blx	r3
  return nbr ? &nbr->ipaddr : NULL;
}
    6bca:	bd08      	pop	{r3, pc}
    6bcc:	00006bad 	.word	0x00006bad

00006bd0 <uip_ds6_nbr_lladdr_from_ipaddr>:

/*---------------------------------------------------------------------------*/
const uip_lladdr_t *
uip_ds6_nbr_lladdr_from_ipaddr(const uip_ipaddr_t *ipaddr)
{
    6bd0:	b508      	push	{r3, lr}
  uip_ds6_nbr_t *nbr = uip_ds6_nbr_lookup(ipaddr);
    6bd2:	4b04      	ldr	r3, [pc, #16]	; (6be4 <uip_ds6_nbr_lladdr_from_ipaddr+0x14>)
    6bd4:	4798      	blx	r3
  return nbr ? uip_ds6_nbr_get_ll(nbr) : NULL;
    6bd6:	2800      	cmp	r0, #0
    6bd8:	d002      	beq.n	6be0 <uip_ds6_nbr_lladdr_from_ipaddr+0x10>
    6bda:	4b03      	ldr	r3, [pc, #12]	; (6be8 <uip_ds6_nbr_lladdr_from_ipaddr+0x18>)
    6bdc:	4798      	blx	r3
    6bde:	e000      	b.n	6be2 <uip_ds6_nbr_lladdr_from_ipaddr+0x12>
    6be0:	2000      	movs	r0, #0
}
    6be2:	bd08      	pop	{r3, pc}
    6be4:	00006b55 	.word	0x00006b55
    6be8:	00006b3d 	.word	0x00006b3d

00006bec <uip_ds6_link_neighbor_callback>:
/*---------------------------------------------------------------------------*/
void
uip_ds6_link_neighbor_callback(int status, int numtx)
{
    6bec:	b538      	push	{r3, r4, r5, lr}
    6bee:	1c05      	adds	r5, r0, #0
    6bf0:	1c0c      	adds	r4, r1, #0
  const linkaddr_t *dest = packetbuf_addr(PACKETBUF_ADDR_RECEIVER);
  if(linkaddr_cmp(dest, &linkaddr_null)) {
    6bf2:	4806      	ldr	r0, [pc, #24]	; (6c0c <uip_ds6_link_neighbor_callback+0x20>)
    6bf4:	4906      	ldr	r1, [pc, #24]	; (6c10 <uip_ds6_link_neighbor_callback+0x24>)
    6bf6:	4b07      	ldr	r3, [pc, #28]	; (6c14 <uip_ds6_link_neighbor_callback+0x28>)
    6bf8:	4798      	blx	r3
    6bfa:	2800      	cmp	r0, #0
    6bfc:	d104      	bne.n	6c08 <uip_ds6_link_neighbor_callback+0x1c>
    return;
  }

  LINK_NEIGHBOR_CALLBACK(dest, status, numtx);
    6bfe:	4803      	ldr	r0, [pc, #12]	; (6c0c <uip_ds6_link_neighbor_callback+0x20>)
    6c00:	1c29      	adds	r1, r5, #0
    6c02:	1c22      	adds	r2, r4, #0
    6c04:	4b04      	ldr	r3, [pc, #16]	; (6c18 <uip_ds6_link_neighbor_callback+0x2c>)
    6c06:	4798      	blx	r3
      PRINTF(" is reachable.\n\r");
    }
  }
#endif /* UIP_DS6_LL_NUD */

}
    6c08:	bd38      	pop	{r3, r4, r5, pc}
    6c0a:	46c0      	nop			; (mov r8, r8)
    6c0c:	200031e0 	.word	0x200031e0
    6c10:	00012be8 	.word	0x00012be8
    6c14:	0000ac6d 	.word	0x0000ac6d
    6c18:	0000e435 	.word	0x0000e435

00006c1c <uip_ds6_neighbor_periodic>:
/*---------------------------------------------------------------------------*/
void
uip_ds6_neighbor_periodic(void)
{
    6c1c:	b538      	push	{r3, r4, r5, lr}
  /* Periodic processing on neighbors */
  uip_ds6_nbr_t *nbr = nbr_table_head(ds6_neighbors);
    6c1e:	4b47      	ldr	r3, [pc, #284]	; (6d3c <uip_ds6_neighbor_periodic+0x120>)
    6c20:	6818      	ldr	r0, [r3, #0]
    6c22:	4b47      	ldr	r3, [pc, #284]	; (6d40 <uip_ds6_neighbor_periodic+0x124>)
    6c24:	4798      	blx	r3
    6c26:	1e04      	subs	r4, r0, #0
  while(nbr != NULL) {
    6c28:	d100      	bne.n	6c2c <uip_ds6_neighbor_periodic+0x10>
    6c2a:	e085      	b.n	6d38 <uip_ds6_neighbor_periodic+0x11c>
    switch(nbr->state) {
    6c2c:	2322      	movs	r3, #34	; 0x22
    6c2e:	5ce3      	ldrb	r3, [r4, r3]
    6c30:	2b01      	cmp	r3, #1
    6c32:	d006      	beq.n	6c42 <uip_ds6_neighbor_periodic+0x26>
    6c34:	2b00      	cmp	r3, #0
    6c36:	d00e      	beq.n	6c56 <uip_ds6_neighbor_periodic+0x3a>
    6c38:	2b03      	cmp	r3, #3
    6c3a:	d033      	beq.n	6ca4 <uip_ds6_neighbor_periodic+0x88>
    6c3c:	2b04      	cmp	r3, #4
    6c3e:	d043      	beq.n	6cc8 <uip_ds6_neighbor_periodic+0xac>
    6c40:	e072      	b.n	6d28 <uip_ds6_neighbor_periodic+0x10c>
    case NBR_REACHABLE:
      if(stimer_expired(&nbr->reachable)) {
    6c42:	1c20      	adds	r0, r4, #0
    6c44:	3010      	adds	r0, #16
    6c46:	4b3f      	ldr	r3, [pc, #252]	; (6d44 <uip_ds6_neighbor_periodic+0x128>)
    6c48:	4798      	blx	r3
    6c4a:	2800      	cmp	r0, #0
    6c4c:	d06c      	beq.n	6d28 <uip_ds6_neighbor_periodic+0x10c>
        PRINTF("REACHABLE: moving to STALE (");
        PRINT6ADDR(&nbr->ipaddr);
        PRINTF(")\n\r");
        nbr->state = NBR_STALE;
    6c4e:	2202      	movs	r2, #2
    6c50:	2322      	movs	r3, #34	; 0x22
    6c52:	54e2      	strb	r2, [r4, r3]
    6c54:	e068      	b.n	6d28 <uip_ds6_neighbor_periodic+0x10c>
      }
      break;
#if UIP_ND6_SEND_NA
    case NBR_INCOMPLETE:
      if(nbr->nscount >= UIP_ND6_MAX_MULTICAST_SOLICIT) {
    6c56:	2320      	movs	r3, #32
    6c58:	5ce3      	ldrb	r3, [r4, r3]
    6c5a:	2b02      	cmp	r3, #2
    6c5c:	d903      	bls.n	6c66 <uip_ds6_neighbor_periodic+0x4a>
        uip_ds6_nbr_rm(nbr);
    6c5e:	1c20      	adds	r0, r4, #0
    6c60:	4b39      	ldr	r3, [pc, #228]	; (6d48 <uip_ds6_neighbor_periodic+0x12c>)
    6c62:	4798      	blx	r3
    6c64:	e060      	b.n	6d28 <uip_ds6_neighbor_periodic+0x10c>
      } else if(stimer_expired(&nbr->sendns) && (uip_len == 0)) {
    6c66:	1c25      	adds	r5, r4, #0
    6c68:	3518      	adds	r5, #24
    6c6a:	1c28      	adds	r0, r5, #0
    6c6c:	4b35      	ldr	r3, [pc, #212]	; (6d44 <uip_ds6_neighbor_periodic+0x128>)
    6c6e:	4798      	blx	r3
    6c70:	2800      	cmp	r0, #0
    6c72:	d059      	beq.n	6d28 <uip_ds6_neighbor_periodic+0x10c>
    6c74:	4b35      	ldr	r3, [pc, #212]	; (6d4c <uip_ds6_neighbor_periodic+0x130>)
    6c76:	881b      	ldrh	r3, [r3, #0]
    6c78:	2b00      	cmp	r3, #0
    6c7a:	d155      	bne.n	6d28 <uip_ds6_neighbor_periodic+0x10c>
        nbr->nscount++;
    6c7c:	2220      	movs	r2, #32
    6c7e:	5ca3      	ldrb	r3, [r4, r2]
    6c80:	3301      	adds	r3, #1
    6c82:	54a3      	strb	r3, [r4, r2]
        PRINTF("NBR_INCOMPLETE: NS %u\n\r", nbr->nscount);
        uip_nd6_ns_output(NULL, NULL, &nbr->ipaddr);
    6c84:	2000      	movs	r0, #0
    6c86:	2100      	movs	r1, #0
    6c88:	1c22      	adds	r2, r4, #0
    6c8a:	4b31      	ldr	r3, [pc, #196]	; (6d50 <uip_ds6_neighbor_periodic+0x134>)
    6c8c:	4798      	blx	r3
        stimer_set(&nbr->sendns, uip_ds6_if.retrans_timer / 1000);
    6c8e:	4b31      	ldr	r3, [pc, #196]	; (6d54 <uip_ds6_neighbor_periodic+0x138>)
    6c90:	6918      	ldr	r0, [r3, #16]
    6c92:	21fa      	movs	r1, #250	; 0xfa
    6c94:	0089      	lsls	r1, r1, #2
    6c96:	4b30      	ldr	r3, [pc, #192]	; (6d58 <uip_ds6_neighbor_periodic+0x13c>)
    6c98:	4798      	blx	r3
    6c9a:	1c01      	adds	r1, r0, #0
    6c9c:	1c28      	adds	r0, r5, #0
    6c9e:	4b2f      	ldr	r3, [pc, #188]	; (6d5c <uip_ds6_neighbor_periodic+0x140>)
    6ca0:	4798      	blx	r3
    6ca2:	e041      	b.n	6d28 <uip_ds6_neighbor_periodic+0x10c>
      }
      break;
    case NBR_DELAY:
      if(stimer_expired(&nbr->reachable)) {
    6ca4:	1c20      	adds	r0, r4, #0
    6ca6:	3010      	adds	r0, #16
    6ca8:	4b26      	ldr	r3, [pc, #152]	; (6d44 <uip_ds6_neighbor_periodic+0x128>)
    6caa:	4798      	blx	r3
    6cac:	2800      	cmp	r0, #0
    6cae:	d03b      	beq.n	6d28 <uip_ds6_neighbor_periodic+0x10c>
        nbr->state = NBR_PROBE;
    6cb0:	2204      	movs	r2, #4
    6cb2:	2322      	movs	r3, #34	; 0x22
    6cb4:	54e2      	strb	r2, [r4, r3]
        nbr->nscount = 0;
    6cb6:	2200      	movs	r2, #0
    6cb8:	3b02      	subs	r3, #2
    6cba:	54e2      	strb	r2, [r4, r3]
        PRINTF("DELAY: moving to PROBE\n\r");
        stimer_set(&nbr->sendns, 0);
    6cbc:	1c20      	adds	r0, r4, #0
    6cbe:	3018      	adds	r0, #24
    6cc0:	2100      	movs	r1, #0
    6cc2:	4b26      	ldr	r3, [pc, #152]	; (6d5c <uip_ds6_neighbor_periodic+0x140>)
    6cc4:	4798      	blx	r3
    6cc6:	e02f      	b.n	6d28 <uip_ds6_neighbor_periodic+0x10c>
      }
      break;
    case NBR_PROBE:
      if(nbr->nscount >= UIP_ND6_MAX_UNICAST_SOLICIT) {
    6cc8:	2320      	movs	r3, #32
    6cca:	5ce3      	ldrb	r3, [r4, r3]
    6ccc:	2b02      	cmp	r3, #2
    6cce:	d90d      	bls.n	6cec <uip_ds6_neighbor_periodic+0xd0>
        uip_ds6_defrt_t *locdefrt;
        PRINTF("PROBE END\n\r");
        if((locdefrt = uip_ds6_defrt_lookup(&nbr->ipaddr)) != NULL) {
    6cd0:	1c20      	adds	r0, r4, #0
    6cd2:	4b23      	ldr	r3, [pc, #140]	; (6d60 <uip_ds6_neighbor_periodic+0x144>)
    6cd4:	4798      	blx	r3
    6cd6:	2800      	cmp	r0, #0
    6cd8:	d004      	beq.n	6ce4 <uip_ds6_neighbor_periodic+0xc8>
          if (!locdefrt->isinfinite) {
    6cda:	7f03      	ldrb	r3, [r0, #28]
    6cdc:	2b00      	cmp	r3, #0
    6cde:	d101      	bne.n	6ce4 <uip_ds6_neighbor_periodic+0xc8>
            uip_ds6_defrt_rm(locdefrt);
    6ce0:	4b20      	ldr	r3, [pc, #128]	; (6d64 <uip_ds6_neighbor_periodic+0x148>)
    6ce2:	4798      	blx	r3
          }
        }
        uip_ds6_nbr_rm(nbr);
    6ce4:	1c20      	adds	r0, r4, #0
    6ce6:	4b18      	ldr	r3, [pc, #96]	; (6d48 <uip_ds6_neighbor_periodic+0x12c>)
    6ce8:	4798      	blx	r3
    6cea:	e01d      	b.n	6d28 <uip_ds6_neighbor_periodic+0x10c>
      } else if(stimer_expired(&nbr->sendns) && (uip_len == 0)) {
    6cec:	1c25      	adds	r5, r4, #0
    6cee:	3518      	adds	r5, #24
    6cf0:	1c28      	adds	r0, r5, #0
    6cf2:	4b14      	ldr	r3, [pc, #80]	; (6d44 <uip_ds6_neighbor_periodic+0x128>)
    6cf4:	4798      	blx	r3
    6cf6:	2800      	cmp	r0, #0
    6cf8:	d016      	beq.n	6d28 <uip_ds6_neighbor_periodic+0x10c>
    6cfa:	4b14      	ldr	r3, [pc, #80]	; (6d4c <uip_ds6_neighbor_periodic+0x130>)
    6cfc:	881b      	ldrh	r3, [r3, #0]
    6cfe:	2b00      	cmp	r3, #0
    6d00:	d112      	bne.n	6d28 <uip_ds6_neighbor_periodic+0x10c>
        nbr->nscount++;
    6d02:	2220      	movs	r2, #32
    6d04:	5ca3      	ldrb	r3, [r4, r2]
    6d06:	3301      	adds	r3, #1
    6d08:	54a3      	strb	r3, [r4, r2]
        PRINTF("PROBE: NS %u\n\r", nbr->nscount);
        uip_nd6_ns_output(NULL, &nbr->ipaddr, &nbr->ipaddr);
    6d0a:	2000      	movs	r0, #0
    6d0c:	1c21      	adds	r1, r4, #0
    6d0e:	1c22      	adds	r2, r4, #0
    6d10:	4b0f      	ldr	r3, [pc, #60]	; (6d50 <uip_ds6_neighbor_periodic+0x134>)
    6d12:	4798      	blx	r3
        stimer_set(&nbr->sendns, uip_ds6_if.retrans_timer / 1000);
    6d14:	4b0f      	ldr	r3, [pc, #60]	; (6d54 <uip_ds6_neighbor_periodic+0x138>)
    6d16:	6918      	ldr	r0, [r3, #16]
    6d18:	21fa      	movs	r1, #250	; 0xfa
    6d1a:	0089      	lsls	r1, r1, #2
    6d1c:	4b0e      	ldr	r3, [pc, #56]	; (6d58 <uip_ds6_neighbor_periodic+0x13c>)
    6d1e:	4798      	blx	r3
    6d20:	1c01      	adds	r1, r0, #0
    6d22:	1c28      	adds	r0, r5, #0
    6d24:	4b0d      	ldr	r3, [pc, #52]	; (6d5c <uip_ds6_neighbor_periodic+0x140>)
    6d26:	4798      	blx	r3
      break;
#endif /* UIP_ND6_SEND_NA */
    default:
      break;
    }
    nbr = nbr_table_next(ds6_neighbors, nbr);
    6d28:	4b04      	ldr	r3, [pc, #16]	; (6d3c <uip_ds6_neighbor_periodic+0x120>)
    6d2a:	6818      	ldr	r0, [r3, #0]
    6d2c:	1c21      	adds	r1, r4, #0
    6d2e:	4b0e      	ldr	r3, [pc, #56]	; (6d68 <uip_ds6_neighbor_periodic+0x14c>)
    6d30:	4798      	blx	r3
    6d32:	1e04      	subs	r4, r0, #0
void
uip_ds6_neighbor_periodic(void)
{
  /* Periodic processing on neighbors */
  uip_ds6_nbr_t *nbr = nbr_table_head(ds6_neighbors);
  while(nbr != NULL) {
    6d34:	d000      	beq.n	6d38 <uip_ds6_neighbor_periodic+0x11c>
    6d36:	e779      	b.n	6c2c <uip_ds6_neighbor_periodic+0x10>
    default:
      break;
    }
    nbr = nbr_table_next(ds6_neighbors, nbr);
  }
}
    6d38:	bd38      	pop	{r3, r4, r5, pc}
    6d3a:	46c0      	nop			; (mov r8, r8)
    6d3c:	2000002c 	.word	0x2000002c
    6d40:	0000bb31 	.word	0x0000bb31
    6d44:	0000ed11 	.word	0x0000ed11
    6d48:	00006aa1 	.word	0x00006aa1
    6d4c:	20002cc0 	.word	0x20002cc0
    6d50:	000086c1 	.word	0x000086c1
    6d54:	20002b68 	.word	0x20002b68
    6d58:	00010525 	.word	0x00010525
    6d5c:	0000ecfd 	.word	0x0000ecfd
    6d60:	00007179 	.word	0x00007179
    6d64:	0000711d 	.word	0x0000711d
    6d68:	0000bac5 	.word	0x0000bac5

00006d6c <call_route_callback>:
/*---------------------------------------------------------------------------*/
#if UIP_DS6_NOTIFICATIONS
static void
call_route_callback(int event, uip_ipaddr_t *route,
		    uip_ipaddr_t *nexthop)
{
    6d6c:	b5f0      	push	{r4, r5, r6, r7, lr}
    6d6e:	4647      	mov	r7, r8
    6d70:	b480      	push	{r7}
    6d72:	b082      	sub	sp, #8
    6d74:	1c05      	adds	r5, r0, #0
    6d76:	9101      	str	r1, [sp, #4]
    6d78:	1c17      	adds	r7, r2, #0
  int num;
  struct uip_ds6_notification *n;
  for(n = list_head(notificationlist);
    6d7a:	480f      	ldr	r0, [pc, #60]	; (6db8 <call_route_callback+0x4c>)
    6d7c:	4b0f      	ldr	r3, [pc, #60]	; (6dbc <call_route_callback+0x50>)
    6d7e:	4798      	blx	r3
    6d80:	1e04      	subs	r4, r0, #0
    6d82:	d014      	beq.n	6dae <call_route_callback+0x42>
      n = list_item_next(n)) {
    if(event == UIP_DS6_NOTIFICATION_DEFRT_ADD ||
       event == UIP_DS6_NOTIFICATION_DEFRT_RM) {
      num = list_length(defaultrouterlist);
    } else {
      num = num_routes;
    6d84:	4b0e      	ldr	r3, [pc, #56]	; (6dc0 <call_route_callback+0x54>)
    6d86:	4698      	mov	r8, r3
  int num;
  struct uip_ds6_notification *n;
  for(n = list_head(notificationlist);
      n != NULL;
      n = list_item_next(n)) {
    if(event == UIP_DS6_NOTIFICATION_DEFRT_ADD ||
    6d88:	2d01      	cmp	r5, #1
    6d8a:	d804      	bhi.n	6d96 <call_route_callback+0x2a>
       event == UIP_DS6_NOTIFICATION_DEFRT_RM) {
      num = list_length(defaultrouterlist);
    6d8c:	480d      	ldr	r0, [pc, #52]	; (6dc4 <call_route_callback+0x58>)
    6d8e:	4b0e      	ldr	r3, [pc, #56]	; (6dc8 <call_route_callback+0x5c>)
    6d90:	4798      	blx	r3
    6d92:	1c03      	adds	r3, r0, #0
    6d94:	e001      	b.n	6d9a <call_route_callback+0x2e>
    } else {
      num = num_routes;
    6d96:	4643      	mov	r3, r8
    6d98:	681b      	ldr	r3, [r3, #0]
    }
    n->callback(event, route, nexthop, num);
    6d9a:	1c28      	adds	r0, r5, #0
    6d9c:	9901      	ldr	r1, [sp, #4]
    6d9e:	1c3a      	adds	r2, r7, #0
    6da0:	6866      	ldr	r6, [r4, #4]
    6da2:	47b0      	blx	r6
{
  int num;
  struct uip_ds6_notification *n;
  for(n = list_head(notificationlist);
      n != NULL;
      n = list_item_next(n)) {
    6da4:	1c20      	adds	r0, r4, #0
    6da6:	4b09      	ldr	r3, [pc, #36]	; (6dcc <call_route_callback+0x60>)
    6da8:	4798      	blx	r3
    6daa:	1e04      	subs	r4, r0, #0
call_route_callback(int event, uip_ipaddr_t *route,
		    uip_ipaddr_t *nexthop)
{
  int num;
  struct uip_ds6_notification *n;
  for(n = list_head(notificationlist);
    6dac:	d1ec      	bne.n	6d88 <call_route_callback+0x1c>
    } else {
      num = num_routes;
    }
    n->callback(event, route, nexthop, num);
  }
}
    6dae:	b002      	add	sp, #8
    6db0:	bc04      	pop	{r2}
    6db2:	4690      	mov	r8, r2
    6db4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6db6:	46c0      	nop			; (mov r8, r8)
    6db8:	20000aac 	.word	0x20000aac
    6dbc:	00005709 	.word	0x00005709
    6dc0:	2000087c 	.word	0x2000087c
    6dc4:	20000884 	.word	0x20000884
    6dc8:	00005799 	.word	0x00005799
    6dcc:	000057b1 	.word	0x000057b1

00006dd0 <uip_ds6_route_init>:
}
#endif
/*---------------------------------------------------------------------------*/
void
uip_ds6_route_init(void)
{
    6dd0:	b538      	push	{r3, r4, r5, lr}
  memb_init(&routememb);
    6dd2:	4808      	ldr	r0, [pc, #32]	; (6df4 <uip_ds6_route_init+0x24>)
    6dd4:	4d08      	ldr	r5, [pc, #32]	; (6df8 <uip_ds6_route_init+0x28>)
    6dd6:	47a8      	blx	r5
  list_init(routelist);
    6dd8:	4808      	ldr	r0, [pc, #32]	; (6dfc <uip_ds6_route_init+0x2c>)
    6dda:	4c09      	ldr	r4, [pc, #36]	; (6e00 <uip_ds6_route_init+0x30>)
    6ddc:	47a0      	blx	r4
  nbr_table_register(nbr_routes,
    6dde:	4809      	ldr	r0, [pc, #36]	; (6e04 <uip_ds6_route_init+0x34>)
    6de0:	4909      	ldr	r1, [pc, #36]	; (6e08 <uip_ds6_route_init+0x38>)
    6de2:	4b0a      	ldr	r3, [pc, #40]	; (6e0c <uip_ds6_route_init+0x3c>)
    6de4:	4798      	blx	r3
                     (nbr_table_callback *)rm_routelist_callback);

  memb_init(&defaultroutermemb);
    6de6:	480a      	ldr	r0, [pc, #40]	; (6e10 <uip_ds6_route_init+0x40>)
    6de8:	47a8      	blx	r5
  list_init(defaultrouterlist);
    6dea:	480a      	ldr	r0, [pc, #40]	; (6e14 <uip_ds6_route_init+0x44>)
    6dec:	47a0      	blx	r4

#if UIP_DS6_NOTIFICATIONS
  list_init(notificationlist);
    6dee:	480a      	ldr	r0, [pc, #40]	; (6e18 <uip_ds6_route_init+0x48>)
    6df0:	47a0      	blx	r4
#endif
}
    6df2:	bd38      	pop	{r3, r4, r5, pc}
    6df4:	2000005c 	.word	0x2000005c
    6df8:	000057bd 	.word	0x000057bd
    6dfc:	20000928 	.word	0x20000928
    6e00:	00005701 	.word	0x00005701
    6e04:	2000004c 	.word	0x2000004c
    6e08:	00006ff5 	.word	0x00006ff5
    6e0c:	0000ba99 	.word	0x0000ba99
    6e10:	20000040 	.word	0x20000040
    6e14:	20000884 	.word	0x20000884
    6e18:	20000aac 	.word	0x20000aac

00006e1c <uip_ds6_route_nexthop>:
  }
}
/*---------------------------------------------------------------------------*/
uip_ipaddr_t *
uip_ds6_route_nexthop(uip_ds6_route_t *route)
{
    6e1c:	b508      	push	{r3, lr}
  if(route != NULL) {
    6e1e:	2800      	cmp	r0, #0
    6e20:	d006      	beq.n	6e30 <uip_ds6_route_nexthop+0x14>
/*---------------------------------------------------------------------------*/
static uip_lladdr_t *
uip_ds6_route_nexthop_lladdr(uip_ds6_route_t *route)
{
  if(route != NULL) {
    return (uip_lladdr_t *)nbr_table_get_lladdr(nbr_routes,
    6e22:	6841      	ldr	r1, [r0, #4]
    6e24:	4803      	ldr	r0, [pc, #12]	; (6e34 <uip_ds6_route_nexthop+0x18>)
    6e26:	4b04      	ldr	r3, [pc, #16]	; (6e38 <uip_ds6_route_nexthop+0x1c>)
    6e28:	4798      	blx	r3
/*---------------------------------------------------------------------------*/
uip_ipaddr_t *
uip_ds6_route_nexthop(uip_ds6_route_t *route)
{
  if(route != NULL) {
    return uip_ds6_nbr_ipaddr_from_lladdr(uip_ds6_route_nexthop_lladdr(route));
    6e2a:	4b04      	ldr	r3, [pc, #16]	; (6e3c <uip_ds6_route_nexthop+0x20>)
    6e2c:	4798      	blx	r3
    6e2e:	e000      	b.n	6e32 <uip_ds6_route_nexthop+0x16>
  } else {
    return NULL;
    6e30:	2000      	movs	r0, #0
  }
}
    6e32:	bd08      	pop	{r3, pc}
    6e34:	2000004c 	.word	0x2000004c
    6e38:	0000bdad 	.word	0x0000bdad
    6e3c:	00006bc5 	.word	0x00006bc5

00006e40 <uip_ds6_route_head>:
/*---------------------------------------------------------------------------*/
uip_ds6_route_t *
uip_ds6_route_head(void)
{
    6e40:	b508      	push	{r3, lr}
  return list_head(routelist);
    6e42:	4802      	ldr	r0, [pc, #8]	; (6e4c <uip_ds6_route_head+0xc>)
    6e44:	4b02      	ldr	r3, [pc, #8]	; (6e50 <uip_ds6_route_head+0x10>)
    6e46:	4798      	blx	r3
}
    6e48:	bd08      	pop	{r3, pc}
    6e4a:	46c0      	nop			; (mov r8, r8)
    6e4c:	20000928 	.word	0x20000928
    6e50:	00005709 	.word	0x00005709

00006e54 <uip_ds6_route_next>:
/*---------------------------------------------------------------------------*/
uip_ds6_route_t *
uip_ds6_route_next(uip_ds6_route_t *r)
{
    6e54:	b508      	push	{r3, lr}
  if(r != NULL) {
    6e56:	2800      	cmp	r0, #0
    6e58:	d002      	beq.n	6e60 <uip_ds6_route_next+0xc>
    uip_ds6_route_t *n = list_item_next(r);
    6e5a:	4b02      	ldr	r3, [pc, #8]	; (6e64 <uip_ds6_route_next+0x10>)
    6e5c:	4798      	blx	r3
    return n;
    6e5e:	e000      	b.n	6e62 <uip_ds6_route_next+0xe>
  }
  return NULL;
    6e60:	2000      	movs	r0, #0
}
    6e62:	bd08      	pop	{r3, pc}
    6e64:	000057b1 	.word	0x000057b1

00006e68 <uip_ds6_route_lookup>:
  return num_routes;
}
/*---------------------------------------------------------------------------*/
uip_ds6_route_t *
uip_ds6_route_lookup(uip_ipaddr_t *addr)
{
    6e68:	b5f0      	push	{r4, r5, r6, r7, lr}
    6e6a:	464f      	mov	r7, r9
    6e6c:	4646      	mov	r6, r8
    6e6e:	b4c0      	push	{r6, r7}
    6e70:	b083      	sub	sp, #12
    6e72:	9000      	str	r0, [sp, #0]
  PRINTF("\n\r");


  found_route = NULL;
  longestmatch = 0;
  for(r = uip_ds6_route_head();
    6e74:	4b17      	ldr	r3, [pc, #92]	; (6ed4 <uip_ds6_route_lookup+0x6c>)
    6e76:	4798      	blx	r3
    6e78:	1e04      	subs	r4, r0, #0
    6e7a:	d023      	beq.n	6ec4 <uip_ds6_route_lookup+0x5c>
    6e7c:	2300      	movs	r3, #0
    6e7e:	4698      	mov	r8, r3
    6e80:	9301      	str	r3, [sp, #4]
      r != NULL;
      r = uip_ds6_route_next(r)) {
    if(r->length >= longestmatch &&
    6e82:	2624      	movs	r6, #36	; 0x24
       uip_ipaddr_prefixcmp(addr, &r->ipaddr, r->length)) {
    6e84:	4b14      	ldr	r3, [pc, #80]	; (6ed8 <uip_ds6_route_lookup+0x70>)
    6e86:	4699      	mov	r9, r3

  found_route = NULL;
  longestmatch = 0;
  for(r = uip_ds6_route_head();
      r != NULL;
      r = uip_ds6_route_next(r)) {
    6e88:	4f14      	ldr	r7, [pc, #80]	; (6edc <uip_ds6_route_lookup+0x74>)
    if(r->length >= longestmatch &&
    6e8a:	5da5      	ldrb	r5, [r4, r6]
    6e8c:	4545      	cmp	r5, r8
    6e8e:	d308      	bcc.n	6ea2 <uip_ds6_route_lookup+0x3a>
       uip_ipaddr_prefixcmp(addr, &r->ipaddr, r->length)) {
    6e90:	1c21      	adds	r1, r4, #0
    6e92:	3108      	adds	r1, #8
    6e94:	08ea      	lsrs	r2, r5, #3
    6e96:	9800      	ldr	r0, [sp, #0]
    6e98:	47c8      	blx	r9
  found_route = NULL;
  longestmatch = 0;
  for(r = uip_ds6_route_head();
      r != NULL;
      r = uip_ds6_route_next(r)) {
    if(r->length >= longestmatch &&
    6e9a:	2800      	cmp	r0, #0
    6e9c:	d101      	bne.n	6ea2 <uip_ds6_route_lookup+0x3a>
       uip_ipaddr_prefixcmp(addr, &r->ipaddr, r->length)) {
      longestmatch = r->length;
    6e9e:	46a8      	mov	r8, r5
  found_route = NULL;
  longestmatch = 0;
  for(r = uip_ds6_route_head();
      r != NULL;
      r = uip_ds6_route_next(r)) {
    if(r->length >= longestmatch &&
    6ea0:	9401      	str	r4, [sp, #4]

  found_route = NULL;
  longestmatch = 0;
  for(r = uip_ds6_route_head();
      r != NULL;
      r = uip_ds6_route_next(r)) {
    6ea2:	1c20      	adds	r0, r4, #0
    6ea4:	47b8      	blx	r7
    6ea6:	1e04      	subs	r4, r0, #0
  PRINTF("\n\r");


  found_route = NULL;
  longestmatch = 0;
  for(r = uip_ds6_route_head();
    6ea8:	d1ef      	bne.n	6e8a <uip_ds6_route_lookup+0x22>
    PRINTF("\n\r");
  } else {
    PRINTF("uip-ds6-route: No route found\n\r");
  }

  if(found_route != NULL) {
    6eaa:	9d01      	ldr	r5, [sp, #4]
    6eac:	2d00      	cmp	r5, #0
    6eae:	d00a      	beq.n	6ec6 <uip_ds6_route_lookup+0x5e>
    /* If we found a route, we put it at the end of the routeslist
       list. The list is ordered by how recently we looked them up:
       the least recently used route will be at the start of the
       list. */
    list_remove(routelist, found_route);
    6eb0:	4c0b      	ldr	r4, [pc, #44]	; (6ee0 <uip_ds6_route_lookup+0x78>)
    6eb2:	1c20      	adds	r0, r4, #0
    6eb4:	1c29      	adds	r1, r5, #0
    6eb6:	4b0b      	ldr	r3, [pc, #44]	; (6ee4 <uip_ds6_route_lookup+0x7c>)
    6eb8:	4798      	blx	r3
    list_add(routelist, found_route);
    6eba:	1c20      	adds	r0, r4, #0
    6ebc:	1c29      	adds	r1, r5, #0
    6ebe:	4b0a      	ldr	r3, [pc, #40]	; (6ee8 <uip_ds6_route_lookup+0x80>)
    6ec0:	4798      	blx	r3
    6ec2:	e000      	b.n	6ec6 <uip_ds6_route_lookup+0x5e>
  PRINTF("uip-ds6-route: Looking up route for ");
  PRINT6ADDR(addr);
  PRINTF("\n\r");


  found_route = NULL;
    6ec4:	9001      	str	r0, [sp, #4]
    list_remove(routelist, found_route);
    list_add(routelist, found_route);
  }

  return found_route;
}
    6ec6:	9801      	ldr	r0, [sp, #4]
    6ec8:	b003      	add	sp, #12
    6eca:	bc0c      	pop	{r2, r3}
    6ecc:	4690      	mov	r8, r2
    6ece:	4699      	mov	r9, r3
    6ed0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6ed2:	46c0      	nop			; (mov r8, r8)
    6ed4:	00006e41 	.word	0x00006e41
    6ed8:	000108c9 	.word	0x000108c9
    6edc:	00006e55 	.word	0x00006e55
    6ee0:	20000928 	.word	0x20000928
    6ee4:	00005725 	.word	0x00005725
    6ee8:	00005759 	.word	0x00005759

00006eec <uip_ds6_route_rm>:
}

/*---------------------------------------------------------------------------*/
void
uip_ds6_route_rm(uip_ds6_route_t *route)
{
    6eec:	b570      	push	{r4, r5, r6, lr}
  struct uip_ds6_route_neighbor_route *neighbor_route;
#if DEBUG != DEBUG_NONE
  assert_nbr_routes_list_sane();
#endif /* DEBUG != DEBUG_NONE */
  if(route != NULL && route->neighbor_routes != NULL) {
    6eee:	2800      	cmp	r0, #0
    6ef0:	d043      	beq.n	6f7a <uip_ds6_route_rm+0x8e>
    6ef2:	6843      	ldr	r3, [r0, #4]
    6ef4:	2b00      	cmp	r3, #0
    6ef6:	d040      	beq.n	6f7a <uip_ds6_route_rm+0x8e>
    6ef8:	1c05      	adds	r5, r0, #0
    PRINTF("uip_ds6_route_rm: removing route: ");
    PRINT6ADDR(&route->ipaddr);
    PRINTF("\n\r");

    /* Remove the neighbor from the route list */
    list_remove(routelist, route);
    6efa:	4820      	ldr	r0, [pc, #128]	; (6f7c <uip_ds6_route_rm+0x90>)
    6efc:	1c29      	adds	r1, r5, #0
    6efe:	4b20      	ldr	r3, [pc, #128]	; (6f80 <uip_ds6_route_rm+0x94>)
    6f00:	4798      	blx	r3

    /* Find the corresponding neighbor_route and remove it. */
    for(neighbor_route = list_head(route->neighbor_routes->route_list);
    6f02:	686b      	ldr	r3, [r5, #4]
    6f04:	6858      	ldr	r0, [r3, #4]
    6f06:	4b1f      	ldr	r3, [pc, #124]	; (6f84 <uip_ds6_route_rm+0x98>)
    6f08:	4798      	blx	r3
    6f0a:	1e04      	subs	r4, r0, #0
    6f0c:	d02f      	beq.n	6f6e <uip_ds6_route_rm+0x82>
        neighbor_route != NULL && neighbor_route->route != route;
    6f0e:	6843      	ldr	r3, [r0, #4]
    6f10:	42ab      	cmp	r3, r5
    6f12:	d007      	beq.n	6f24 <uip_ds6_route_rm+0x38>
        neighbor_route = list_item_next(neighbor_route));
    6f14:	4e1c      	ldr	r6, [pc, #112]	; (6f88 <uip_ds6_route_rm+0x9c>)
    6f16:	1c20      	adds	r0, r4, #0
    6f18:	47b0      	blx	r6
    6f1a:	1e04      	subs	r4, r0, #0

    /* Remove the neighbor from the route list */
    list_remove(routelist, route);

    /* Find the corresponding neighbor_route and remove it. */
    for(neighbor_route = list_head(route->neighbor_routes->route_list);
    6f1c:	d027      	beq.n	6f6e <uip_ds6_route_rm+0x82>
        neighbor_route != NULL && neighbor_route->route != route;
    6f1e:	6843      	ldr	r3, [r0, #4]
    6f20:	42ab      	cmp	r3, r5
    6f22:	d1f8      	bne.n	6f16 <uip_ds6_route_rm+0x2a>
    if(neighbor_route == NULL) {
      PRINTF("uip_ds6_route_rm: neighbor_route was NULL for ");
      uip_debug_ipaddr_print(&route->ipaddr);
      PRINTF("\n\r");
    }
    list_remove(route->neighbor_routes->route_list, neighbor_route);
    6f24:	686b      	ldr	r3, [r5, #4]
    6f26:	6858      	ldr	r0, [r3, #4]
    6f28:	1c21      	adds	r1, r4, #0
    6f2a:	4b15      	ldr	r3, [pc, #84]	; (6f80 <uip_ds6_route_rm+0x94>)
    6f2c:	4798      	blx	r3
    if(list_head(route->neighbor_routes->route_list) == NULL) {
    6f2e:	686b      	ldr	r3, [r5, #4]
    6f30:	6858      	ldr	r0, [r3, #4]
    6f32:	4b14      	ldr	r3, [pc, #80]	; (6f84 <uip_ds6_route_rm+0x98>)
    6f34:	4798      	blx	r3
    6f36:	2800      	cmp	r0, #0
    6f38:	d104      	bne.n	6f44 <uip_ds6_route_rm+0x58>
      /* If this was the only route using this neighbor, remove the
         neibhor from the table */
      PRINTF("uip_ds6_route_rm: removing neighbor too\n\r");
      nbr_table_remove(nbr_routes, route->neighbor_routes->route_list);
    6f3a:	686b      	ldr	r3, [r5, #4]
    6f3c:	6859      	ldr	r1, [r3, #4]
    6f3e:	4813      	ldr	r0, [pc, #76]	; (6f8c <uip_ds6_route_rm+0xa0>)
    6f40:	4b13      	ldr	r3, [pc, #76]	; (6f90 <uip_ds6_route_rm+0xa4>)
    6f42:	4798      	blx	r3
    }
    memb_free(&routememb, route);
    6f44:	4813      	ldr	r0, [pc, #76]	; (6f94 <uip_ds6_route_rm+0xa8>)
    6f46:	1c29      	adds	r1, r5, #0
    6f48:	4e13      	ldr	r6, [pc, #76]	; (6f98 <uip_ds6_route_rm+0xac>)
    6f4a:	47b0      	blx	r6
    memb_free(&neighborroutememb, neighbor_route);
    6f4c:	4813      	ldr	r0, [pc, #76]	; (6f9c <uip_ds6_route_rm+0xb0>)
    6f4e:	1c21      	adds	r1, r4, #0
    6f50:	47b0      	blx	r6

    num_routes--;
    6f52:	4a13      	ldr	r2, [pc, #76]	; (6fa0 <uip_ds6_route_rm+0xb4>)
    6f54:	6813      	ldr	r3, [r2, #0]
    6f56:	3b01      	subs	r3, #1
    6f58:	6013      	str	r3, [r2, #0]

    PRINTF("uip_ds6_route_rm num %d\n\r", num_routes);

#if UIP_DS6_NOTIFICATIONS
    call_route_callback(UIP_DS6_NOTIFICATION_ROUTE_RM,
    6f5a:	1c28      	adds	r0, r5, #0
    6f5c:	4b11      	ldr	r3, [pc, #68]	; (6fa4 <uip_ds6_route_rm+0xb8>)
    6f5e:	4798      	blx	r3
    6f60:	1c02      	adds	r2, r0, #0
    6f62:	1c29      	adds	r1, r5, #0
    6f64:	3108      	adds	r1, #8
    6f66:	2003      	movs	r0, #3
    6f68:	4b0f      	ldr	r3, [pc, #60]	; (6fa8 <uip_ds6_route_rm+0xbc>)
    6f6a:	4798      	blx	r3
    6f6c:	e005      	b.n	6f7a <uip_ds6_route_rm+0x8e>
        neighbor_route != NULL && neighbor_route->route != route;
        neighbor_route = list_item_next(neighbor_route));

    if(neighbor_route == NULL) {
      PRINTF("uip_ds6_route_rm: neighbor_route was NULL for ");
      uip_debug_ipaddr_print(&route->ipaddr);
    6f6e:	1c28      	adds	r0, r5, #0
    6f70:	3008      	adds	r0, #8
    6f72:	4b0e      	ldr	r3, [pc, #56]	; (6fac <uip_ds6_route_rm+0xc0>)
    6f74:	4798      	blx	r3
    6f76:	2400      	movs	r4, #0
    6f78:	e7d4      	b.n	6f24 <uip_ds6_route_rm+0x38>

#if DEBUG != DEBUG_NONE
  assert_nbr_routes_list_sane();
#endif /* DEBUG != DEBUG_NONE */
  return;
}
    6f7a:	bd70      	pop	{r4, r5, r6, pc}
    6f7c:	20000928 	.word	0x20000928
    6f80:	00005725 	.word	0x00005725
    6f84:	00005709 	.word	0x00005709
    6f88:	000057b1 	.word	0x000057b1
    6f8c:	2000004c 	.word	0x2000004c
    6f90:	0000bd45 	.word	0x0000bd45
    6f94:	2000005c 	.word	0x2000005c
    6f98:	00005821 	.word	0x00005821
    6f9c:	20000068 	.word	0x20000068
    6fa0:	2000087c 	.word	0x2000087c
    6fa4:	00006e1d 	.word	0x00006e1d
    6fa8:	00006d6d 	.word	0x00006d6d
    6fac:	0000aaf9 	.word	0x0000aaf9

00006fb0 <rm_routelist>:
/*---------------------------------------------------------------------------*/
static void
rm_routelist(struct uip_ds6_route_neighbor_routes *routes)
{
    6fb0:	b570      	push	{r4, r5, r6, lr}
#if DEBUG != DEBUG_NONE
  assert_nbr_routes_list_sane();
#endif /* DEBUG != DEBUG_NONE */
  PRINTF("uip_ds6_route_rm_routelist\n\r");
  if(routes != NULL && routes->route_list != NULL) {
    6fb2:	2800      	cmp	r0, #0
    6fb4:	d014      	beq.n	6fe0 <rm_routelist+0x30>
    6fb6:	6843      	ldr	r3, [r0, #4]
    6fb8:	2b00      	cmp	r3, #0
    6fba:	d011      	beq.n	6fe0 <rm_routelist+0x30>
    6fbc:	1c04      	adds	r4, r0, #0
    struct uip_ds6_route_neighbor_route *r;
    r = list_head(routes->route_list);
    6fbe:	1c18      	adds	r0, r3, #0
    6fc0:	4b08      	ldr	r3, [pc, #32]	; (6fe4 <rm_routelist+0x34>)
    6fc2:	4798      	blx	r3
    while(r != NULL) {
    6fc4:	2800      	cmp	r0, #0
    6fc6:	d007      	beq.n	6fd8 <rm_routelist+0x28>
      uip_ds6_route_rm(r->route);
    6fc8:	4e07      	ldr	r6, [pc, #28]	; (6fe8 <rm_routelist+0x38>)
      r = list_head(routes->route_list);
    6fca:	4d06      	ldr	r5, [pc, #24]	; (6fe4 <rm_routelist+0x34>)
  PRINTF("uip_ds6_route_rm_routelist\n\r");
  if(routes != NULL && routes->route_list != NULL) {
    struct uip_ds6_route_neighbor_route *r;
    r = list_head(routes->route_list);
    while(r != NULL) {
      uip_ds6_route_rm(r->route);
    6fcc:	6840      	ldr	r0, [r0, #4]
    6fce:	47b0      	blx	r6
      r = list_head(routes->route_list);
    6fd0:	6860      	ldr	r0, [r4, #4]
    6fd2:	47a8      	blx	r5
#endif /* DEBUG != DEBUG_NONE */
  PRINTF("uip_ds6_route_rm_routelist\n\r");
  if(routes != NULL && routes->route_list != NULL) {
    struct uip_ds6_route_neighbor_route *r;
    r = list_head(routes->route_list);
    while(r != NULL) {
    6fd4:	2800      	cmp	r0, #0
    6fd6:	d1f9      	bne.n	6fcc <rm_routelist+0x1c>
      uip_ds6_route_rm(r->route);
      r = list_head(routes->route_list);
    }
    nbr_table_remove(nbr_routes, routes);
    6fd8:	4804      	ldr	r0, [pc, #16]	; (6fec <rm_routelist+0x3c>)
    6fda:	1c21      	adds	r1, r4, #0
    6fdc:	4b04      	ldr	r3, [pc, #16]	; (6ff0 <rm_routelist+0x40>)
    6fde:	4798      	blx	r3
  }
#if DEBUG != DEBUG_NONE
  assert_nbr_routes_list_sane();
#endif /* DEBUG != DEBUG_NONE */
}
    6fe0:	bd70      	pop	{r4, r5, r6, pc}
    6fe2:	46c0      	nop			; (mov r8, r8)
    6fe4:	00005709 	.word	0x00005709
    6fe8:	00006eed 	.word	0x00006eed
    6fec:	2000004c 	.word	0x2000004c
    6ff0:	0000bd45 	.word	0x0000bd45

00006ff4 <rm_routelist_callback>:
/*---------------------------------------------------------------------------*/
static void
rm_routelist_callback(nbr_table_item_t *ptr)
{
    6ff4:	b508      	push	{r3, lr}
  rm_routelist((struct uip_ds6_route_neighbor_routes *)ptr);
    6ff6:	4b01      	ldr	r3, [pc, #4]	; (6ffc <rm_routelist_callback+0x8>)
    6ff8:	4798      	blx	r3
}
    6ffa:	bd08      	pop	{r3, pc}
    6ffc:	00006fb1 	.word	0x00006fb1

00007000 <uip_ds6_route_add>:
}
/*---------------------------------------------------------------------------*/
uip_ds6_route_t *
uip_ds6_route_add(uip_ipaddr_t *ipaddr, uint8_t length,
		  uip_ipaddr_t *nexthop)
{
    7000:	b5f0      	push	{r4, r5, r6, r7, lr}
    7002:	b083      	sub	sp, #12
    7004:	1c04      	adds	r4, r0, #0
    7006:	9000      	str	r0, [sp, #0]
    7008:	1c0d      	adds	r5, r1, #0
    700a:	9201      	str	r2, [sp, #4]
#if DEBUG != DEBUG_NONE
  assert_nbr_routes_list_sane();
#endif /* DEBUG != DEBUG_NONE */

  /* Get link-layer address of next hop, make sure it is in neighbor table */
  const uip_lladdr_t *nexthop_lladdr = uip_ds6_nbr_lladdr_from_ipaddr(nexthop);
    700c:	1c10      	adds	r0, r2, #0
    700e:	4b32      	ldr	r3, [pc, #200]	; (70d8 <uip_ds6_route_add+0xd8>)
    7010:	4798      	blx	r3
    7012:	1e07      	subs	r7, r0, #0
  if(nexthop_lladdr == NULL) {
    7014:	d059      	beq.n	70ca <uip_ds6_route_add+0xca>
  }

  /* First make sure that we don't add a route twice. If we find an
     existing route for our destination, we'll just update the old
     one. */
  r = uip_ds6_route_lookup(ipaddr);
    7016:	1c20      	adds	r0, r4, #0
    7018:	4b30      	ldr	r3, [pc, #192]	; (70dc <uip_ds6_route_add+0xdc>)
    701a:	4798      	blx	r3
    701c:	1e06      	subs	r6, r0, #0
  if(r != NULL) {
    701e:	d135      	bne.n	708c <uip_ds6_route_add+0x8c>
}
/*---------------------------------------------------------------------------*/
int
uip_ds6_route_num_routes(void)
{
  return num_routes;
    7020:	4b2f      	ldr	r3, [pc, #188]	; (70e0 <uip_ds6_route_add+0xe0>)
    struct uip_ds6_route_neighbor_routes *routes;
    /* If there is no routing entry, create one. We first need to
       check if we have room for this route. If not, we remove the
       least recently used one we have. */

    if(uip_ds6_route_num_routes() == UIP_DS6_ROUTE_NB) {
    7022:	681b      	ldr	r3, [r3, #0]
    7024:	2b08      	cmp	r3, #8
    7026:	d103      	bne.n	7030 <uip_ds6_route_add+0x30>
      /* Removing the oldest route entry from the route table. The
         least recently used route is the first route on the list. */
      uip_ds6_route_t *oldest;

      oldest = uip_ds6_route_head();
    7028:	4b2e      	ldr	r3, [pc, #184]	; (70e4 <uip_ds6_route_add+0xe4>)
    702a:	4798      	blx	r3
      PRINTF("uip_ds6_route_add: dropping route to ");
      PRINT6ADDR(&oldest->ipaddr);
      PRINTF("\n\r");
      uip_ds6_route_rm(oldest);
    702c:	4b2e      	ldr	r3, [pc, #184]	; (70e8 <uip_ds6_route_add+0xe8>)
    702e:	4798      	blx	r3

       We first check to see if we already have this neighbor in our
       nbr_route table. If so, the neighbor already has a route entry
       list.
    */
    routes = nbr_table_get_from_lladdr(nbr_routes,
    7030:	482e      	ldr	r0, [pc, #184]	; (70ec <uip_ds6_route_add+0xec>)
    7032:	1c39      	adds	r1, r7, #0
    7034:	4b2e      	ldr	r3, [pc, #184]	; (70f0 <uip_ds6_route_add+0xf0>)
    7036:	4798      	blx	r3
    7038:	1e04      	subs	r4, r0, #0
                                       (linkaddr_t *)nexthop_lladdr);

    if(routes == NULL) {
    703a:	d10a      	bne.n	7052 <uip_ds6_route_add+0x52>
      /* If the neighbor did not have an entry in our neighbor table,
         we create one. The nbr_table_add_lladdr() function returns a
         pointer to a pointer that we may use for our own purposes. We
         initialize this pointer with the list of routing entries that
         are attached to this neighbor. */
      routes = nbr_table_add_lladdr(nbr_routes,
    703c:	482b      	ldr	r0, [pc, #172]	; (70ec <uip_ds6_route_add+0xec>)
    703e:	1c39      	adds	r1, r7, #0
    7040:	4b2c      	ldr	r3, [pc, #176]	; (70f4 <uip_ds6_route_add+0xf4>)
    7042:	4798      	blx	r3
    7044:	1e04      	subs	r4, r0, #0
                                    (linkaddr_t *)nexthop_lladdr);
      if(routes == NULL) {
    7046:	d042      	beq.n	70ce <uip_ds6_route_add+0xce>
        /* This should not happen, as we explicitly deallocated one
           route table entry above. */
        PRINTF("uip_ds6_route_add: could not allocate neighbor table entry\n\r");
        return NULL;
      }
      LIST_STRUCT_INIT(routes, route_list);
    7048:	6060      	str	r0, [r4, #4]
    704a:	2300      	movs	r3, #0
    704c:	6003      	str	r3, [r0, #0]
    704e:	4b2a      	ldr	r3, [pc, #168]	; (70f8 <uip_ds6_route_add+0xf8>)
    7050:	4798      	blx	r3
    }

    /* Allocate a routing entry and populate it. */
    r = memb_alloc(&routememb);
    7052:	482a      	ldr	r0, [pc, #168]	; (70fc <uip_ds6_route_add+0xfc>)
    7054:	4b2a      	ldr	r3, [pc, #168]	; (7100 <uip_ds6_route_add+0x100>)
    7056:	4798      	blx	r3
    7058:	1e06      	subs	r6, r0, #0

    if(r == NULL) {
    705a:	d03a      	beq.n	70d2 <uip_ds6_route_add+0xd2>
         route table entry above. */
      PRINTF("uip_ds6_route_add: could not allocate route\n\r");
      return NULL;
    }

    list_add(routelist, r);
    705c:	4829      	ldr	r0, [pc, #164]	; (7104 <uip_ds6_route_add+0x104>)
    705e:	1c31      	adds	r1, r6, #0
    7060:	4b29      	ldr	r3, [pc, #164]	; (7108 <uip_ds6_route_add+0x108>)
    7062:	4798      	blx	r3

    nbrr = memb_alloc(&neighborroutememb);
    7064:	4829      	ldr	r0, [pc, #164]	; (710c <uip_ds6_route_add+0x10c>)
    7066:	4b26      	ldr	r3, [pc, #152]	; (7100 <uip_ds6_route_add+0x100>)
    7068:	4798      	blx	r3
    706a:	1e01      	subs	r1, r0, #0
    if(nbrr == NULL) {
    706c:	d105      	bne.n	707a <uip_ds6_route_add+0x7a>
      /* This should not happen, as we explicitly deallocated one
         route table entry above. */
      PRINTF("uip_ds6_route_add: could not allocate neighbor route list entry\n\r");
      memb_free(&routememb, r);
    706e:	4823      	ldr	r0, [pc, #140]	; (70fc <uip_ds6_route_add+0xfc>)
    7070:	1c31      	adds	r1, r6, #0
    7072:	4b27      	ldr	r3, [pc, #156]	; (7110 <uip_ds6_route_add+0x110>)
    7074:	4798      	blx	r3
      return NULL;
    7076:	2000      	movs	r0, #0
    7078:	e02c      	b.n	70d4 <uip_ds6_route_add+0xd4>
    }

    nbrr->route = r;
    707a:	6046      	str	r6, [r0, #4]
    /* Add the route to this neighbor */
    list_add(routes->route_list, nbrr);
    707c:	6860      	ldr	r0, [r4, #4]
    707e:	4b22      	ldr	r3, [pc, #136]	; (7108 <uip_ds6_route_add+0x108>)
    7080:	4798      	blx	r3
    r->neighbor_routes = routes;
    7082:	6074      	str	r4, [r6, #4]
    num_routes++;
    7084:	4a16      	ldr	r2, [pc, #88]	; (70e0 <uip_ds6_route_add+0xe0>)
    7086:	6813      	ldr	r3, [r2, #0]
    7088:	3301      	adds	r3, #1
    708a:	6013      	str	r3, [r2, #0]

    PRINTF("uip_ds6_route_add num %d\n\r", num_routes);
  }

  uip_ipaddr_copy(&(r->ipaddr), ipaddr);
    708c:	1c30      	adds	r0, r6, #0
    708e:	3008      	adds	r0, #8
    7090:	9c00      	ldr	r4, [sp, #0]
    7092:	1c21      	adds	r1, r4, #0
    7094:	2210      	movs	r2, #16
    7096:	4b1f      	ldr	r3, [pc, #124]	; (7114 <uip_ds6_route_add+0x114>)
    7098:	4798      	blx	r3
  r->length = length;
    709a:	2324      	movs	r3, #36	; 0x24
    709c:	54f5      	strb	r5, [r6, r3]

#ifdef UIP_DS6_ROUTE_STATE_TYPE
  memset(&r->state, 0, sizeof(UIP_DS6_ROUTE_STATE_TYPE));
    709e:	1c32      	adds	r2, r6, #0
    70a0:	2300      	movs	r3, #0
    70a2:	7633      	strb	r3, [r6, #24]
    70a4:	7673      	strb	r3, [r6, #25]
    70a6:	76b3      	strb	r3, [r6, #26]
    70a8:	76f3      	strb	r3, [r6, #27]
    70aa:	7733      	strb	r3, [r6, #28]
    70ac:	7773      	strb	r3, [r6, #29]
    70ae:	77b3      	strb	r3, [r6, #30]
    70b0:	77f3      	strb	r3, [r6, #31]
    70b2:	3218      	adds	r2, #24
    70b4:	7213      	strb	r3, [r2, #8]
    70b6:	7253      	strb	r3, [r2, #9]
    70b8:	7293      	strb	r3, [r2, #10]
    70ba:	72d3      	strb	r3, [r2, #11]
  PRINT6ADDR(nexthop);
  PRINTF("\n\r");
  ANNOTATE("#L %u 1;blue\n\r", nexthop->u8[sizeof(uip_ipaddr_t) - 1]);

#if UIP_DS6_NOTIFICATIONS
  call_route_callback(UIP_DS6_NOTIFICATION_ROUTE_ADD, ipaddr, nexthop);
    70bc:	2002      	movs	r0, #2
    70be:	1c21      	adds	r1, r4, #0
    70c0:	9a01      	ldr	r2, [sp, #4]
    70c2:	4b15      	ldr	r3, [pc, #84]	; (7118 <uip_ds6_route_add+0x118>)
    70c4:	4798      	blx	r3
#endif

#if DEBUG != DEBUG_NONE
  assert_nbr_routes_list_sane();
#endif /* DEBUG != DEBUG_NONE */
  return r;
    70c6:	1c30      	adds	r0, r6, #0
    70c8:	e004      	b.n	70d4 <uip_ds6_route_add+0xd4>
  const uip_lladdr_t *nexthop_lladdr = uip_ds6_nbr_lladdr_from_ipaddr(nexthop);
  if(nexthop_lladdr == NULL) {
    PRINTF("uip_ds6_route_add: neighbor link-local address unknown for ");
    PRINT6ADDR(nexthop);
    PRINTF("\n\r");
    return NULL;
    70ca:	2000      	movs	r0, #0
    70cc:	e002      	b.n	70d4 <uip_ds6_route_add+0xd4>
                                    (linkaddr_t *)nexthop_lladdr);
      if(routes == NULL) {
        /* This should not happen, as we explicitly deallocated one
           route table entry above. */
        PRINTF("uip_ds6_route_add: could not allocate neighbor table entry\n\r");
        return NULL;
    70ce:	2000      	movs	r0, #0
    70d0:	e000      	b.n	70d4 <uip_ds6_route_add+0xd4>

    if(r == NULL) {
      /* This should not happen, as we explicitly deallocated one
         route table entry above. */
      PRINTF("uip_ds6_route_add: could not allocate route\n\r");
      return NULL;
    70d2:	2000      	movs	r0, #0

#if DEBUG != DEBUG_NONE
  assert_nbr_routes_list_sane();
#endif /* DEBUG != DEBUG_NONE */
  return r;
}
    70d4:	b003      	add	sp, #12
    70d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    70d8:	00006bd1 	.word	0x00006bd1
    70dc:	00006e69 	.word	0x00006e69
    70e0:	2000087c 	.word	0x2000087c
    70e4:	00006e41 	.word	0x00006e41
    70e8:	00006eed 	.word	0x00006eed
    70ec:	2000004c 	.word	0x2000004c
    70f0:	0000bd09 	.word	0x0000bd09
    70f4:	0000bb81 	.word	0x0000bb81
    70f8:	00005701 	.word	0x00005701
    70fc:	2000005c 	.word	0x2000005c
    7100:	000057dd 	.word	0x000057dd
    7104:	20000928 	.word	0x20000928
    7108:	00005759 	.word	0x00005759
    710c:	20000068 	.word	0x20000068
    7110:	00005821 	.word	0x00005821
    7114:	000108e7 	.word	0x000108e7
    7118:	00006d6d 	.word	0x00006d6d

0000711c <uip_ds6_defrt_rm>:
  return d;
}
/*---------------------------------------------------------------------------*/
void
uip_ds6_defrt_rm(uip_ds6_defrt_t *defrt)
{
    711c:	b538      	push	{r3, r4, r5, lr}
    711e:	1c04      	adds	r4, r0, #0
#if DEBUG != DEBUG_NONE
  assert_nbr_routes_list_sane();
#endif /* DEBUG != DEBUG_NONE */

  /* Make sure that the defrt is in the list before we remove it. */
  for(d = list_head(defaultrouterlist);
    7120:	480e      	ldr	r0, [pc, #56]	; (715c <uip_ds6_defrt_rm+0x40>)
    7122:	4b0f      	ldr	r3, [pc, #60]	; (7160 <uip_ds6_defrt_rm+0x44>)
    7124:	4798      	blx	r3
    7126:	2800      	cmp	r0, #0
    7128:	d016      	beq.n	7158 <uip_ds6_defrt_rm+0x3c>
      d != NULL;
      d = list_item_next(d)) {
    if(d == defrt) {
    712a:	42a0      	cmp	r0, r4
    712c:	d003      	beq.n	7136 <uip_ds6_defrt_rm+0x1a>
#endif /* DEBUG != DEBUG_NONE */

  /* Make sure that the defrt is in the list before we remove it. */
  for(d = list_head(defaultrouterlist);
      d != NULL;
      d = list_item_next(d)) {
    712e:	4d0d      	ldr	r5, [pc, #52]	; (7164 <uip_ds6_defrt_rm+0x48>)
    7130:	e00f      	b.n	7152 <uip_ds6_defrt_rm+0x36>
    if(d == defrt) {
    7132:	4284      	cmp	r4, r0
    7134:	d10d      	bne.n	7152 <uip_ds6_defrt_rm+0x36>
      PRINTF("Removing default route\n\r");
      list_remove(defaultrouterlist, defrt);
    7136:	4809      	ldr	r0, [pc, #36]	; (715c <uip_ds6_defrt_rm+0x40>)
    7138:	1c21      	adds	r1, r4, #0
    713a:	4b0b      	ldr	r3, [pc, #44]	; (7168 <uip_ds6_defrt_rm+0x4c>)
    713c:	4798      	blx	r3
      memb_free(&defaultroutermemb, defrt);
    713e:	480b      	ldr	r0, [pc, #44]	; (716c <uip_ds6_defrt_rm+0x50>)
    7140:	1c21      	adds	r1, r4, #0
    7142:	4b0b      	ldr	r3, [pc, #44]	; (7170 <uip_ds6_defrt_rm+0x54>)
    7144:	4798      	blx	r3
      ANNOTATE("#L %u 0\n\r", defrt->ipaddr.u8[sizeof(uip_ipaddr_t) - 1]);
#if UIP_DS6_NOTIFICATIONS
      call_route_callback(UIP_DS6_NOTIFICATION_DEFRT_RM,
    7146:	1d22      	adds	r2, r4, #4
    7148:	2001      	movs	r0, #1
    714a:	1c11      	adds	r1, r2, #0
    714c:	4b09      	ldr	r3, [pc, #36]	; (7174 <uip_ds6_defrt_rm+0x58>)
    714e:	4798      	blx	r3
			  &defrt->ipaddr, &defrt->ipaddr);
#endif
      return;
    7150:	e002      	b.n	7158 <uip_ds6_defrt_rm+0x3c>
#endif /* DEBUG != DEBUG_NONE */

  /* Make sure that the defrt is in the list before we remove it. */
  for(d = list_head(defaultrouterlist);
      d != NULL;
      d = list_item_next(d)) {
    7152:	47a8      	blx	r5
#if DEBUG != DEBUG_NONE
  assert_nbr_routes_list_sane();
#endif /* DEBUG != DEBUG_NONE */

  /* Make sure that the defrt is in the list before we remove it. */
  for(d = list_head(defaultrouterlist);
    7154:	2800      	cmp	r0, #0
    7156:	d1ec      	bne.n	7132 <uip_ds6_defrt_rm+0x16>
  }
#if DEBUG != DEBUG_NONE
  assert_nbr_routes_list_sane();
#endif /* DEBUG != DEBUG_NONE */

}
    7158:	bd38      	pop	{r3, r4, r5, pc}
    715a:	46c0      	nop			; (mov r8, r8)
    715c:	20000884 	.word	0x20000884
    7160:	00005709 	.word	0x00005709
    7164:	000057b1 	.word	0x000057b1
    7168:	00005725 	.word	0x00005725
    716c:	20000040 	.word	0x20000040
    7170:	00005821 	.word	0x00005821
    7174:	00006d6d 	.word	0x00006d6d

00007178 <uip_ds6_defrt_lookup>:
/*---------------------------------------------------------------------------*/
uip_ds6_defrt_t *
uip_ds6_defrt_lookup(uip_ipaddr_t *ipaddr)
{
    7178:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    717a:	1c05      	adds	r5, r0, #0
  uip_ds6_defrt_t *d;
  for(d = list_head(defaultrouterlist);
    717c:	480b      	ldr	r0, [pc, #44]	; (71ac <uip_ds6_defrt_lookup+0x34>)
    717e:	4b0c      	ldr	r3, [pc, #48]	; (71b0 <uip_ds6_defrt_lookup+0x38>)
    7180:	4798      	blx	r3
    7182:	1e04      	subs	r4, r0, #0
    7184:	d00d      	beq.n	71a2 <uip_ds6_defrt_lookup+0x2a>
      d != NULL;
      d = list_item_next(d)) {
    if(uip_ipaddr_cmp(&d->ipaddr, ipaddr)) {
    7186:	4e0b      	ldr	r6, [pc, #44]	; (71b4 <uip_ds6_defrt_lookup+0x3c>)
uip_ds6_defrt_lookup(uip_ipaddr_t *ipaddr)
{
  uip_ds6_defrt_t *d;
  for(d = list_head(defaultrouterlist);
      d != NULL;
      d = list_item_next(d)) {
    7188:	4f0b      	ldr	r7, [pc, #44]	; (71b8 <uip_ds6_defrt_lookup+0x40>)
    if(uip_ipaddr_cmp(&d->ipaddr, ipaddr)) {
    718a:	1d20      	adds	r0, r4, #4
    718c:	1c29      	adds	r1, r5, #0
    718e:	2210      	movs	r2, #16
    7190:	47b0      	blx	r6
    7192:	2800      	cmp	r0, #0
    7194:	d007      	beq.n	71a6 <uip_ds6_defrt_lookup+0x2e>
uip_ds6_defrt_lookup(uip_ipaddr_t *ipaddr)
{
  uip_ds6_defrt_t *d;
  for(d = list_head(defaultrouterlist);
      d != NULL;
      d = list_item_next(d)) {
    7196:	1c20      	adds	r0, r4, #0
    7198:	47b8      	blx	r7
    719a:	1e04      	subs	r4, r0, #0
/*---------------------------------------------------------------------------*/
uip_ds6_defrt_t *
uip_ds6_defrt_lookup(uip_ipaddr_t *ipaddr)
{
  uip_ds6_defrt_t *d;
  for(d = list_head(defaultrouterlist);
    719c:	d1f5      	bne.n	718a <uip_ds6_defrt_lookup+0x12>
      d = list_item_next(d)) {
    if(uip_ipaddr_cmp(&d->ipaddr, ipaddr)) {
      return d;
    }
  }
  return NULL;
    719e:	2000      	movs	r0, #0
    71a0:	e002      	b.n	71a8 <uip_ds6_defrt_lookup+0x30>
    71a2:	2000      	movs	r0, #0
    71a4:	e000      	b.n	71a8 <uip_ds6_defrt_lookup+0x30>
    71a6:	1c20      	adds	r0, r4, #0
}
    71a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    71aa:	46c0      	nop			; (mov r8, r8)
    71ac:	20000884 	.word	0x20000884
    71b0:	00005709 	.word	0x00005709
    71b4:	000108c9 	.word	0x000108c9
    71b8:	000057b1 	.word	0x000057b1

000071bc <uip_ds6_defrt_add>:
  rm_routelist(routes);
}
/*---------------------------------------------------------------------------*/
uip_ds6_defrt_t *
uip_ds6_defrt_add(uip_ipaddr_t *ipaddr, unsigned long interval)
{
    71bc:	b570      	push	{r4, r5, r6, lr}
    71be:	1c05      	adds	r5, r0, #0
    71c0:	1c0e      	adds	r6, r1, #0
#if DEBUG != DEBUG_NONE
  assert_nbr_routes_list_sane();
#endif /* DEBUG != DEBUG_NONE */

  PRINTF("uip_ds6_defrt_add\n\r");
  d = uip_ds6_defrt_lookup(ipaddr);
    71c2:	4b1a      	ldr	r3, [pc, #104]	; (722c <uip_ds6_defrt_add+0x70>)
    71c4:	4798      	blx	r3
    71c6:	1e04      	subs	r4, r0, #0
  if(d == NULL) {
    71c8:	d108      	bne.n	71dc <uip_ds6_defrt_add+0x20>
    d = memb_alloc(&defaultroutermemb);
    71ca:	4819      	ldr	r0, [pc, #100]	; (7230 <uip_ds6_defrt_add+0x74>)
    71cc:	4b19      	ldr	r3, [pc, #100]	; (7234 <uip_ds6_defrt_add+0x78>)
    71ce:	4798      	blx	r3
    71d0:	1e04      	subs	r4, r0, #0
    if(d == NULL) {
    71d2:	d028      	beq.n	7226 <uip_ds6_defrt_add+0x6a>
      PRINTF("uip_ds6_defrt_add: adding default route to ");
      PRINT6ADDR(ipaddr);
      PRINTF("\n\r");
    }

    list_push(defaultrouterlist, d);
    71d4:	4818      	ldr	r0, [pc, #96]	; (7238 <uip_ds6_defrt_add+0x7c>)
    71d6:	1c21      	adds	r1, r4, #0
    71d8:	4b18      	ldr	r3, [pc, #96]	; (723c <uip_ds6_defrt_add+0x80>)
    71da:	4798      	blx	r3
  }

  if(ipaddr == NULL) {
    71dc:	2d00      	cmp	r5, #0
    71de:	d10a      	bne.n	71f6 <uip_ds6_defrt_add+0x3a>
       route, this is an indication that we want to force packets to
       go out to the fallback interface. If so, we add an unspecified
       route to the list of default routes. uip_ds6_defrt_choose()
       will trap this and ensure that packets go to the fallback
       interface. */
    uip_create_unspecified(&d->ipaddr);
    71e0:	2300      	movs	r3, #0
    71e2:	80a3      	strh	r3, [r4, #4]
    71e4:	80e3      	strh	r3, [r4, #6]
    71e6:	8123      	strh	r3, [r4, #8]
    71e8:	8163      	strh	r3, [r4, #10]
    71ea:	81a3      	strh	r3, [r4, #12]
    71ec:	81e3      	strh	r3, [r4, #14]
    71ee:	8223      	strh	r3, [r4, #16]
    71f0:	8263      	strh	r3, [r4, #18]
    ipaddr = &d->ipaddr;
    71f2:	1d25      	adds	r5, r4, #4
    71f4:	e004      	b.n	7200 <uip_ds6_defrt_add+0x44>
  } else {
    uip_ipaddr_copy(&d->ipaddr, ipaddr);
    71f6:	1d20      	adds	r0, r4, #4
    71f8:	1c29      	adds	r1, r5, #0
    71fa:	2210      	movs	r2, #16
    71fc:	4b10      	ldr	r3, [pc, #64]	; (7240 <uip_ds6_defrt_add+0x84>)
    71fe:	4798      	blx	r3
  }

  if(interval != 0) {
    7200:	2e00      	cmp	r6, #0
    7202:	d007      	beq.n	7214 <uip_ds6_defrt_add+0x58>
    stimer_set(&d->lifetime, interval);
    7204:	1c20      	adds	r0, r4, #0
    7206:	3014      	adds	r0, #20
    7208:	1c31      	adds	r1, r6, #0
    720a:	4b0e      	ldr	r3, [pc, #56]	; (7244 <uip_ds6_defrt_add+0x88>)
    720c:	4798      	blx	r3
    d->isinfinite = 0;
    720e:	2300      	movs	r3, #0
    7210:	7723      	strb	r3, [r4, #28]
    7212:	e001      	b.n	7218 <uip_ds6_defrt_add+0x5c>
  } else {
    d->isinfinite = 1;
    7214:	2301      	movs	r3, #1
    7216:	7723      	strb	r3, [r4, #28]
  }

  ANNOTATE("#L %u 1\n\r", ipaddr->u8[sizeof(uip_ipaddr_t) - 1]);

#if UIP_DS6_NOTIFICATIONS
  call_route_callback(UIP_DS6_NOTIFICATION_DEFRT_ADD, ipaddr, ipaddr);
    7218:	2000      	movs	r0, #0
    721a:	1c29      	adds	r1, r5, #0
    721c:	1c2a      	adds	r2, r5, #0
    721e:	4b0a      	ldr	r3, [pc, #40]	; (7248 <uip_ds6_defrt_add+0x8c>)
    7220:	4798      	blx	r3

#if DEBUG != DEBUG_NONE
  assert_nbr_routes_list_sane();
#endif /* DEBUG != DEBUG_NONE */

  return d;
    7222:	1c20      	adds	r0, r4, #0
    7224:	e000      	b.n	7228 <uip_ds6_defrt_add+0x6c>
    d = memb_alloc(&defaultroutermemb);
    if(d == NULL) {
      PRINTF("uip_ds6_defrt_add: could not add default route to ");
      PRINT6ADDR(ipaddr);
      PRINTF(", out of memory\n\r");
      return NULL;
    7226:	2000      	movs	r0, #0
#if DEBUG != DEBUG_NONE
  assert_nbr_routes_list_sane();
#endif /* DEBUG != DEBUG_NONE */

  return d;
}
    7228:	bd70      	pop	{r4, r5, r6, pc}
    722a:	46c0      	nop			; (mov r8, r8)
    722c:	00007179 	.word	0x00007179
    7230:	20000040 	.word	0x20000040
    7234:	000057dd 	.word	0x000057dd
    7238:	20000884 	.word	0x20000884
    723c:	00005781 	.word	0x00005781
    7240:	000108e7 	.word	0x000108e7
    7244:	0000ecfd 	.word	0x0000ecfd
    7248:	00006d6d 	.word	0x00006d6d

0000724c <uip_ds6_defrt_choose>:
  return NULL;
}
/*---------------------------------------------------------------------------*/
uip_ipaddr_t *
uip_ds6_defrt_choose(void)
{
    724c:	b5f0      	push	{r4, r5, r6, r7, lr}
    724e:	4647      	mov	r7, r8
    7250:	b480      	push	{r7}
    7252:	b084      	sub	sp, #16

  /* Check if we have a default route that go to the unspecified IP
     address. This signals that we have set up a route that should
     always go to the fallback interface. If so, we return NULL for
     any route. */
  uip_create_unspecified(&unspec);
    7254:	2300      	movs	r3, #0
    7256:	466a      	mov	r2, sp
    7258:	8013      	strh	r3, [r2, #0]
    725a:	8053      	strh	r3, [r2, #2]
    725c:	8093      	strh	r3, [r2, #4]
    725e:	80d3      	strh	r3, [r2, #6]
    7260:	8113      	strh	r3, [r2, #8]
    7262:	8153      	strh	r3, [r2, #10]
    7264:	8193      	strh	r3, [r2, #12]
    7266:	81d3      	strh	r3, [r2, #14]
  for(d = list_head(defaultrouterlist);
    7268:	4818      	ldr	r0, [pc, #96]	; (72cc <uip_ds6_defrt_choose+0x80>)
    726a:	4b19      	ldr	r3, [pc, #100]	; (72d0 <uip_ds6_defrt_choose+0x84>)
    726c:	4798      	blx	r3
    726e:	1e04      	subs	r4, r0, #0
    7270:	d00b      	beq.n	728a <uip_ds6_defrt_choose+0x3e>
      d != NULL;
      d = list_item_next(d)) {
    if(uip_ipaddr_cmp(&d->ipaddr, &unspec)) {
    7272:	4d18      	ldr	r5, [pc, #96]	; (72d4 <uip_ds6_defrt_choose+0x88>)
     always go to the fallback interface. If so, we return NULL for
     any route. */
  uip_create_unspecified(&unspec);
  for(d = list_head(defaultrouterlist);
      d != NULL;
      d = list_item_next(d)) {
    7274:	4e18      	ldr	r6, [pc, #96]	; (72d8 <uip_ds6_defrt_choose+0x8c>)
    if(uip_ipaddr_cmp(&d->ipaddr, &unspec)) {
    7276:	1d20      	adds	r0, r4, #4
    7278:	4669      	mov	r1, sp
    727a:	2210      	movs	r2, #16
    727c:	47a8      	blx	r5
    727e:	2800      	cmp	r0, #0
    7280:	d01d      	beq.n	72be <uip_ds6_defrt_choose+0x72>
     always go to the fallback interface. If so, we return NULL for
     any route. */
  uip_create_unspecified(&unspec);
  for(d = list_head(defaultrouterlist);
      d != NULL;
      d = list_item_next(d)) {
    7282:	1c20      	adds	r0, r4, #0
    7284:	47b0      	blx	r6
    7286:	1e04      	subs	r4, r0, #0
  /* Check if we have a default route that go to the unspecified IP
     address. This signals that we have set up a route that should
     always go to the fallback interface. If so, we return NULL for
     any route. */
  uip_create_unspecified(&unspec);
  for(d = list_head(defaultrouterlist);
    7288:	d1f5      	bne.n	7276 <uip_ds6_defrt_choose+0x2a>
    if(uip_ipaddr_cmp(&d->ipaddr, &unspec)) {
      return NULL;
    }
  }
  addr = NULL;
  for(d = list_head(defaultrouterlist);
    728a:	4810      	ldr	r0, [pc, #64]	; (72cc <uip_ds6_defrt_choose+0x80>)
    728c:	4b10      	ldr	r3, [pc, #64]	; (72d0 <uip_ds6_defrt_choose+0x84>)
    728e:	4798      	blx	r3
    7290:	1e04      	subs	r4, r0, #0
    7292:	d011      	beq.n	72b8 <uip_ds6_defrt_choose+0x6c>
      d != NULL;
      d = list_item_next(d)) {
    PRINTF("Defrt, IP address ");
    PRINT6ADDR(&d->ipaddr);
    PRINTF("\n\r");
    bestnbr = uip_ds6_nbr_lookup(&d->ipaddr);
    7294:	4e11      	ldr	r6, [pc, #68]	; (72dc <uip_ds6_defrt_choose+0x90>)
    if(bestnbr != NULL && bestnbr->state != NBR_INCOMPLETE) {
    7296:	2322      	movs	r3, #34	; 0x22
    7298:	4698      	mov	r8, r3
    }
  }
  addr = NULL;
  for(d = list_head(defaultrouterlist);
      d != NULL;
      d = list_item_next(d)) {
    729a:	4f0f      	ldr	r7, [pc, #60]	; (72d8 <uip_ds6_defrt_choose+0x8c>)
    PRINTF("Defrt, IP address ");
    PRINT6ADDR(&d->ipaddr);
    PRINTF("\n\r");
    bestnbr = uip_ds6_nbr_lookup(&d->ipaddr);
    729c:	1d25      	adds	r5, r4, #4
    729e:	1c28      	adds	r0, r5, #0
    72a0:	47b0      	blx	r6
    if(bestnbr != NULL && bestnbr->state != NBR_INCOMPLETE) {
    72a2:	2800      	cmp	r0, #0
    72a4:	d003      	beq.n	72ae <uip_ds6_defrt_choose+0x62>
    72a6:	4643      	mov	r3, r8
    72a8:	5cc3      	ldrb	r3, [r0, r3]
    72aa:	2b00      	cmp	r3, #0
    72ac:	d109      	bne.n	72c2 <uip_ds6_defrt_choose+0x76>
    }
  }
  addr = NULL;
  for(d = list_head(defaultrouterlist);
      d != NULL;
      d = list_item_next(d)) {
    72ae:	1c20      	adds	r0, r4, #0
    72b0:	47b8      	blx	r7
    72b2:	1e04      	subs	r4, r0, #0
    if(uip_ipaddr_cmp(&d->ipaddr, &unspec)) {
      return NULL;
    }
  }
  addr = NULL;
  for(d = list_head(defaultrouterlist);
    72b4:	d1f2      	bne.n	729c <uip_ds6_defrt_choose+0x50>
    72b6:	e000      	b.n	72ba <uip_ds6_defrt_choose+0x6e>
      d = list_item_next(d)) {
    if(uip_ipaddr_cmp(&d->ipaddr, &unspec)) {
      return NULL;
    }
  }
  addr = NULL;
    72b8:	2500      	movs	r5, #0
      PRINTF("Defrt INCOMPLETE found, IP address ");
      PRINT6ADDR(&d->ipaddr);
      PRINTF("\n\r");
    }
  }
  return addr;
    72ba:	1c28      	adds	r0, r5, #0
    72bc:	e002      	b.n	72c4 <uip_ds6_defrt_choose+0x78>
  uip_create_unspecified(&unspec);
  for(d = list_head(defaultrouterlist);
      d != NULL;
      d = list_item_next(d)) {
    if(uip_ipaddr_cmp(&d->ipaddr, &unspec)) {
      return NULL;
    72be:	2000      	movs	r0, #0
    72c0:	e000      	b.n	72c4 <uip_ds6_defrt_choose+0x78>
      d != NULL;
      d = list_item_next(d)) {
    PRINTF("Defrt, IP address ");
    PRINT6ADDR(&d->ipaddr);
    PRINTF("\n\r");
    bestnbr = uip_ds6_nbr_lookup(&d->ipaddr);
    72c2:	1c28      	adds	r0, r5, #0
      PRINT6ADDR(&d->ipaddr);
      PRINTF("\n\r");
    }
  }
  return addr;
}
    72c4:	b004      	add	sp, #16
    72c6:	bc04      	pop	{r2}
    72c8:	4690      	mov	r8, r2
    72ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
    72cc:	20000884 	.word	0x20000884
    72d0:	00005709 	.word	0x00005709
    72d4:	000108c9 	.word	0x000108c9
    72d8:	000057b1 	.word	0x000057b1
    72dc:	00006b55 	.word	0x00006b55

000072e0 <uip_ds6_defrt_periodic>:
/*---------------------------------------------------------------------------*/
void
uip_ds6_defrt_periodic(void)
{
    72e0:	b538      	push	{r3, r4, r5, lr}
  uip_ds6_defrt_t *d;
  d = list_head(defaultrouterlist);
    72e2:	480e      	ldr	r0, [pc, #56]	; (731c <uip_ds6_defrt_periodic+0x3c>)
    72e4:	4b0e      	ldr	r3, [pc, #56]	; (7320 <uip_ds6_defrt_periodic+0x40>)
    72e6:	4798      	blx	r3
    72e8:	1e04      	subs	r4, r0, #0
  while(d != NULL) {
    72ea:	d016      	beq.n	731a <uip_ds6_defrt_periodic+0x3a>
    if(!d->isinfinite &&
       stimer_expired(&d->lifetime)) {
    72ec:	4d0d      	ldr	r5, [pc, #52]	; (7324 <uip_ds6_defrt_periodic+0x44>)
uip_ds6_defrt_periodic(void)
{
  uip_ds6_defrt_t *d;
  d = list_head(defaultrouterlist);
  while(d != NULL) {
    if(!d->isinfinite &&
    72ee:	7f23      	ldrb	r3, [r4, #28]
    72f0:	2b00      	cmp	r3, #0
    72f2:	d10c      	bne.n	730e <uip_ds6_defrt_periodic+0x2e>
       stimer_expired(&d->lifetime)) {
    72f4:	1c20      	adds	r0, r4, #0
    72f6:	3014      	adds	r0, #20
    72f8:	47a8      	blx	r5
uip_ds6_defrt_periodic(void)
{
  uip_ds6_defrt_t *d;
  d = list_head(defaultrouterlist);
  while(d != NULL) {
    if(!d->isinfinite &&
    72fa:	2800      	cmp	r0, #0
    72fc:	d007      	beq.n	730e <uip_ds6_defrt_periodic+0x2e>
       stimer_expired(&d->lifetime)) {
      PRINTF("uip_ds6_defrt_periodic: defrt lifetime expired\n\r");
      uip_ds6_defrt_rm(d);
    72fe:	1c20      	adds	r0, r4, #0
    7300:	4b09      	ldr	r3, [pc, #36]	; (7328 <uip_ds6_defrt_periodic+0x48>)
    7302:	4798      	blx	r3
      d = list_head(defaultrouterlist);
    7304:	4805      	ldr	r0, [pc, #20]	; (731c <uip_ds6_defrt_periodic+0x3c>)
    7306:	4b06      	ldr	r3, [pc, #24]	; (7320 <uip_ds6_defrt_periodic+0x40>)
    7308:	4798      	blx	r3
    730a:	1c04      	adds	r4, r0, #0
    730c:	e003      	b.n	7316 <uip_ds6_defrt_periodic+0x36>
    } else {
      d = list_item_next(d);
    730e:	1c20      	adds	r0, r4, #0
    7310:	4b06      	ldr	r3, [pc, #24]	; (732c <uip_ds6_defrt_periodic+0x4c>)
    7312:	4798      	blx	r3
    7314:	1c04      	adds	r4, r0, #0
void
uip_ds6_defrt_periodic(void)
{
  uip_ds6_defrt_t *d;
  d = list_head(defaultrouterlist);
  while(d != NULL) {
    7316:	2c00      	cmp	r4, #0
    7318:	d1e9      	bne.n	72ee <uip_ds6_defrt_periodic+0xe>
      d = list_head(defaultrouterlist);
    } else {
      d = list_item_next(d);
    }
  }
}
    731a:	bd38      	pop	{r3, r4, r5, pc}
    731c:	20000884 	.word	0x20000884
    7320:	00005709 	.word	0x00005709
    7324:	0000ed11 	.word	0x0000ed11
    7328:	0000711d 	.word	0x0000711d
    732c:	000057b1 	.word	0x000057b1

00007330 <uip_ds6_list_loop>:
/*---------------------------------------------------------------------------*/
uint8_t
uip_ds6_list_loop(uip_ds6_element_t *list, uint8_t size,
                  uint16_t elementsize, uip_ipaddr_t *ipaddr,
                  uint8_t ipaddrlen, uip_ds6_element_t **out_element)
{
    7330:	b5f0      	push	{r4, r5, r6, r7, lr}
    7332:	4647      	mov	r7, r8
    7334:	b480      	push	{r7}
    7336:	b082      	sub	sp, #8
    7338:	1c04      	adds	r4, r0, #0
    733a:	1c15      	adds	r5, r2, #0
    733c:	9300      	str	r3, [sp, #0]
    733e:	ab08      	add	r3, sp, #32
    7340:	781a      	ldrb	r2, [r3, #0]
    7342:	9e09      	ldr	r6, [sp, #36]	; 0x24
  uip_ds6_element_t *element;

  *out_element = NULL;
    7344:	2300      	movs	r3, #0
    7346:	6033      	str	r3, [r6, #0]

  for(element = list;
      element <
      (uip_ds6_element_t *)((uint8_t *)list + (size * elementsize));
    7348:	4369      	muls	r1, r5
    734a:	1847      	adds	r7, r0, r1
{
  uip_ds6_element_t *element;

  *out_element = NULL;

  for(element = list;
    734c:	42b8      	cmp	r0, r7
    734e:	d218      	bcs.n	7382 <uip_ds6_list_loop+0x52>
      element <
      (uip_ds6_element_t *)((uint8_t *)list + (size * elementsize));
      element = (uip_ds6_element_t *)((uint8_t *)element + elementsize)) {
    if(element->isused) {
      if(uip_ipaddr_prefixcmp(&element->ipaddr, ipaddr, ipaddrlen)) {
    7350:	08d3      	lsrs	r3, r2, #3
    7352:	9301      	str	r3, [sp, #4]
    7354:	4b0d      	ldr	r3, [pc, #52]	; (738c <uip_ds6_list_loop+0x5c>)
    7356:	4698      	mov	r8, r3

  for(element = list;
      element <
      (uip_ds6_element_t *)((uint8_t *)list + (size * elementsize));
      element = (uip_ds6_element_t *)((uint8_t *)element + elementsize)) {
    if(element->isused) {
    7358:	7823      	ldrb	r3, [r4, #0]
    735a:	2b00      	cmp	r3, #0
    735c:	d007      	beq.n	736e <uip_ds6_list_loop+0x3e>
    735e:	1c60      	adds	r0, r4, #1
      if(uip_ipaddr_prefixcmp(&element->ipaddr, ipaddr, ipaddrlen)) {
    7360:	9900      	ldr	r1, [sp, #0]
    7362:	9a01      	ldr	r2, [sp, #4]
    7364:	47c0      	blx	r8
    7366:	2800      	cmp	r0, #0
    7368:	d102      	bne.n	7370 <uip_ds6_list_loop+0x40>
        *out_element = element;
    736a:	6034      	str	r4, [r6, #0]
        return FOUND;
    736c:	e00a      	b.n	7384 <uip_ds6_list_loop+0x54>
      }
    } else {
      *out_element = element;
    736e:	6034      	str	r4, [r6, #0]
    7370:	1964      	adds	r4, r4, r5
{
  uip_ds6_element_t *element;

  *out_element = NULL;

  for(element = list;
    7372:	42bc      	cmp	r4, r7
    7374:	d3f0      	bcc.n	7358 <uip_ds6_list_loop+0x28>
    } else {
      *out_element = element;
    }
  }

  return *out_element != NULL ? FREESPACE : NOSPACE;
    7376:	6830      	ldr	r0, [r6, #0]
    7378:	1e43      	subs	r3, r0, #1
    737a:	4198      	sbcs	r0, r3
    737c:	2302      	movs	r3, #2
    737e:	1a18      	subs	r0, r3, r0
    7380:	e000      	b.n	7384 <uip_ds6_list_loop+0x54>
    7382:	2002      	movs	r0, #2
}
    7384:	b002      	add	sp, #8
    7386:	bc04      	pop	{r2}
    7388:	4690      	mov	r8, r2
    738a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    738c:	000108c9 	.word	0x000108c9

00007390 <uip_ds6_prefix_add>:
/*---------------------------------------------------------------------------*/
uip_ds6_prefix_t *
uip_ds6_prefix_add(uip_ipaddr_t *ipaddr, uint8_t ipaddrlen,
                   uint8_t advertise, uint8_t flags, unsigned long vtime,
                   unsigned long ptime)
{
    7390:	b5f0      	push	{r4, r5, r6, r7, lr}
    7392:	b085      	sub	sp, #20
    7394:	1c04      	adds	r4, r0, #0
    7396:	1c0d      	adds	r5, r1, #0
    7398:	1c16      	adds	r6, r2, #0
    739a:	1c1f      	adds	r7, r3, #0
  if(uip_ds6_list_loop
    739c:	9100      	str	r1, [sp, #0]
    739e:	4b10      	ldr	r3, [pc, #64]	; (73e0 <uip_ds6_prefix_add+0x50>)
    73a0:	9301      	str	r3, [sp, #4]
    73a2:	4810      	ldr	r0, [pc, #64]	; (73e4 <uip_ds6_prefix_add+0x54>)
    73a4:	2103      	movs	r1, #3
    73a6:	2220      	movs	r2, #32
    73a8:	9403      	str	r4, [sp, #12]
    73aa:	1c23      	adds	r3, r4, #0
    73ac:	4c0e      	ldr	r4, [pc, #56]	; (73e8 <uip_ds6_prefix_add+0x58>)
    73ae:	47a0      	blx	r4
    73b0:	2801      	cmp	r0, #1
    73b2:	d112      	bne.n	73da <uip_ds6_prefix_add+0x4a>
     ((uip_ds6_element_t *)uip_ds6_prefix_list, UIP_DS6_PREFIX_NB,
      sizeof(uip_ds6_prefix_t), ipaddr, ipaddrlen,
      (uip_ds6_element_t **)&locprefix) == FREESPACE) {
    locprefix->isused = 1;
    73b4:	4c0a      	ldr	r4, [pc, #40]	; (73e0 <uip_ds6_prefix_add+0x50>)
    73b6:	2301      	movs	r3, #1
    73b8:	6822      	ldr	r2, [r4, #0]
    73ba:	7013      	strb	r3, [r2, #0]
    uip_ipaddr_copy(&locprefix->ipaddr, ipaddr);
    73bc:	6823      	ldr	r3, [r4, #0]
    73be:	1c58      	adds	r0, r3, #1
    73c0:	9903      	ldr	r1, [sp, #12]
    73c2:	2210      	movs	r2, #16
    73c4:	4b09      	ldr	r3, [pc, #36]	; (73ec <uip_ds6_prefix_add+0x5c>)
    73c6:	4798      	blx	r3
    locprefix->length = ipaddrlen;
    73c8:	6820      	ldr	r0, [r4, #0]
    73ca:	7445      	strb	r5, [r0, #17]
    locprefix->advertise = advertise;
    73cc:	7486      	strb	r6, [r0, #18]
    locprefix->l_a_reserved = flags;
    73ce:	7707      	strb	r7, [r0, #28]
    locprefix->vlifetime = vtime;
    73d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    73d2:	6143      	str	r3, [r0, #20]
    locprefix->plifetime = ptime;
    73d4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    73d6:	6183      	str	r3, [r0, #24]
    PRINTF("Adding prefix ");
    PRINT6ADDR(&locprefix->ipaddr);
    PRINTF("length %u, flags %x, Valid lifetime %lx, Preffered lifetime %lx\n\r",
       ipaddrlen, flags, vtime, ptime);
    return locprefix;
    73d8:	e000      	b.n	73dc <uip_ds6_prefix_add+0x4c>
  } else {
    PRINTF("No more space in Prefix list\n\r");
  }
  return NULL;
    73da:	2000      	movs	r0, #0
}
    73dc:	b005      	add	sp, #20
    73de:	bdf0      	pop	{r4, r5, r6, r7, pc}
    73e0:	20000ac8 	.word	0x20000ac8
    73e4:	20002c50 	.word	0x20002c50
    73e8:	00007331 	.word	0x00007331
    73ec:	000108e7 	.word	0x000108e7

000073f0 <uip_ds6_is_addr_onlink>:
}

/*---------------------------------------------------------------------------*/
uint8_t
uip_ds6_is_addr_onlink(uip_ipaddr_t *ipaddr)
{
    73f0:	b5f0      	push	{r4, r5, r6, r7, lr}
    73f2:	b083      	sub	sp, #12
    73f4:	9001      	str	r0, [sp, #4]
  for(locprefix = uip_ds6_prefix_list;
    73f6:	4c0c      	ldr	r4, [pc, #48]	; (7428 <uip_ds6_is_addr_onlink+0x38>)
    73f8:	4b0c      	ldr	r3, [pc, #48]	; (742c <uip_ds6_is_addr_onlink+0x3c>)
    73fa:	601c      	str	r4, [r3, #0]
      locprefix < uip_ds6_prefix_list + UIP_DS6_PREFIX_NB; locprefix++) {
    if(locprefix->isused &&
       uip_ipaddr_prefixcmp(&locprefix->ipaddr, ipaddr, locprefix->length)) {
    73fc:	4d0c      	ldr	r5, [pc, #48]	; (7430 <uip_ds6_is_addr_onlink+0x40>)
/*---------------------------------------------------------------------------*/
uint8_t
uip_ds6_is_addr_onlink(uip_ipaddr_t *ipaddr)
{
  for(locprefix = uip_ds6_prefix_list;
      locprefix < uip_ds6_prefix_list + UIP_DS6_PREFIX_NB; locprefix++) {
    73fe:	1c1f      	adds	r7, r3, #0

/*---------------------------------------------------------------------------*/
uint8_t
uip_ds6_is_addr_onlink(uip_ipaddr_t *ipaddr)
{
  for(locprefix = uip_ds6_prefix_list;
    7400:	4e0c      	ldr	r6, [pc, #48]	; (7434 <uip_ds6_is_addr_onlink+0x44>)
      locprefix < uip_ds6_prefix_list + UIP_DS6_PREFIX_NB; locprefix++) {
    if(locprefix->isused &&
    7402:	7823      	ldrb	r3, [r4, #0]
    7404:	2b00      	cmp	r3, #0
    7406:	d006      	beq.n	7416 <uip_ds6_is_addr_onlink+0x26>
    7408:	1c60      	adds	r0, r4, #1
       uip_ipaddr_prefixcmp(&locprefix->ipaddr, ipaddr, locprefix->length)) {
    740a:	7c62      	ldrb	r2, [r4, #17]
    740c:	08d2      	lsrs	r2, r2, #3
    740e:	9901      	ldr	r1, [sp, #4]
    7410:	47a8      	blx	r5
uint8_t
uip_ds6_is_addr_onlink(uip_ipaddr_t *ipaddr)
{
  for(locprefix = uip_ds6_prefix_list;
      locprefix < uip_ds6_prefix_list + UIP_DS6_PREFIX_NB; locprefix++) {
    if(locprefix->isused &&
    7412:	2800      	cmp	r0, #0
    7414:	d005      	beq.n	7422 <uip_ds6_is_addr_onlink+0x32>
/*---------------------------------------------------------------------------*/
uint8_t
uip_ds6_is_addr_onlink(uip_ipaddr_t *ipaddr)
{
  for(locprefix = uip_ds6_prefix_list;
      locprefix < uip_ds6_prefix_list + UIP_DS6_PREFIX_NB; locprefix++) {
    7416:	3420      	adds	r4, #32
    7418:	603c      	str	r4, [r7, #0]

/*---------------------------------------------------------------------------*/
uint8_t
uip_ds6_is_addr_onlink(uip_ipaddr_t *ipaddr)
{
  for(locprefix = uip_ds6_prefix_list;
    741a:	42b4      	cmp	r4, r6
    741c:	d3f1      	bcc.n	7402 <uip_ds6_is_addr_onlink+0x12>
    if(locprefix->isused &&
       uip_ipaddr_prefixcmp(&locprefix->ipaddr, ipaddr, locprefix->length)) {
      return 1;
    }
  }
  return 0;
    741e:	2000      	movs	r0, #0
    7420:	e000      	b.n	7424 <uip_ds6_is_addr_onlink+0x34>
{
  for(locprefix = uip_ds6_prefix_list;
      locprefix < uip_ds6_prefix_list + UIP_DS6_PREFIX_NB; locprefix++) {
    if(locprefix->isused &&
       uip_ipaddr_prefixcmp(&locprefix->ipaddr, ipaddr, locprefix->length)) {
      return 1;
    7422:	2001      	movs	r0, #1
    }
  }
  return 0;
}
    7424:	b003      	add	sp, #12
    7426:	bdf0      	pop	{r4, r5, r6, r7, pc}
    7428:	20002c50 	.word	0x20002c50
    742c:	20000ac8 	.word	0x20000ac8
    7430:	000108c9 	.word	0x000108c9
    7434:	20002cb0 	.word	0x20002cb0

00007438 <uip_ds6_addr_lookup>:
}

/*---------------------------------------------------------------------------*/
uip_ds6_addr_t *
uip_ds6_addr_lookup(uip_ipaddr_t *ipaddr)
{
    7438:	b510      	push	{r4, lr}
    743a:	b082      	sub	sp, #8
    743c:	1c03      	adds	r3, r0, #0
  if(uip_ds6_list_loop
    743e:	2280      	movs	r2, #128	; 0x80
    7440:	9200      	str	r2, [sp, #0]
    7442:	4a07      	ldr	r2, [pc, #28]	; (7460 <uip_ds6_addr_lookup+0x28>)
    7444:	9201      	str	r2, [sp, #4]
    7446:	4807      	ldr	r0, [pc, #28]	; (7464 <uip_ds6_addr_lookup+0x2c>)
    7448:	2103      	movs	r1, #3
    744a:	221c      	movs	r2, #28
    744c:	4c06      	ldr	r4, [pc, #24]	; (7468 <uip_ds6_addr_lookup+0x30>)
    744e:	47a0      	blx	r4
    7450:	2800      	cmp	r0, #0
    7452:	d102      	bne.n	745a <uip_ds6_addr_lookup+0x22>
     ((uip_ds6_element_t *)uip_ds6_if.addr_list, UIP_DS6_ADDR_NB,
      sizeof(uip_ds6_addr_t), ipaddr, 128,
      (uip_ds6_element_t **)&locaddr) == FOUND) {
    return locaddr;
    7454:	4b02      	ldr	r3, [pc, #8]	; (7460 <uip_ds6_addr_lookup+0x28>)
    7456:	6818      	ldr	r0, [r3, #0]
    7458:	e000      	b.n	745c <uip_ds6_addr_lookup+0x24>
  }
  return NULL;
    745a:	2000      	movs	r0, #0
}
    745c:	b002      	add	sp, #8
    745e:	bd10      	pop	{r4, pc}
    7460:	20000acc 	.word	0x20000acc
    7464:	20002b80 	.word	0x20002b80
    7468:	00007331 	.word	0x00007331

0000746c <uip_ds6_get_link_local>:
 * state = -1 => any address is ok. Otherwise state = desired state of addr.
 * (TENTATIVE, PREFERRED, DEPRECATED)
 */
uip_ds6_addr_t *
uip_ds6_get_link_local(int8_t state)
{
    746c:	b570      	push	{r4, r5, r6, lr}
    746e:	1c04      	adds	r4, r0, #0
  for(locaddr = uip_ds6_if.addr_list;
    7470:	4b0c      	ldr	r3, [pc, #48]	; (74a4 <uip_ds6_get_link_local+0x38>)
    7472:	4a0d      	ldr	r2, [pc, #52]	; (74a8 <uip_ds6_get_link_local+0x3c>)
    7474:	6013      	str	r3, [r2, #0]
    7476:	1c18      	adds	r0, r3, #0
      locaddr < uip_ds6_if.addr_list + UIP_DS6_ADDR_NB; locaddr++) {
    if(locaddr->isused && (state == -1 || locaddr->state == state)
       && (uip_is_addr_link_local(&locaddr->ipaddr))) {
    7478:	4e0c      	ldr	r6, [pc, #48]	; (74ac <uip_ds6_get_link_local+0x40>)
    747a:	4d0d      	ldr	r5, [pc, #52]	; (74b0 <uip_ds6_get_link_local+0x44>)
 */
uip_ds6_addr_t *
uip_ds6_get_link_local(int8_t state)
{
  for(locaddr = uip_ds6_if.addr_list;
      locaddr < uip_ds6_if.addr_list + UIP_DS6_ADDR_NB; locaddr++) {
    747c:	1c11      	adds	r1, r2, #0
 * (TENTATIVE, PREFERRED, DEPRECATED)
 */
uip_ds6_addr_t *
uip_ds6_get_link_local(int8_t state)
{
  for(locaddr = uip_ds6_if.addr_list;
    747e:	4a0d      	ldr	r2, [pc, #52]	; (74b4 <uip_ds6_get_link_local+0x48>)
      locaddr < uip_ds6_if.addr_list + UIP_DS6_ADDR_NB; locaddr++) {
    if(locaddr->isused && (state == -1 || locaddr->state == state)
    7480:	7803      	ldrb	r3, [r0, #0]
    7482:	2b00      	cmp	r3, #0
    7484:	d008      	beq.n	7498 <uip_ds6_get_link_local+0x2c>
    7486:	1c63      	adds	r3, r4, #1
    7488:	d002      	beq.n	7490 <uip_ds6_get_link_local+0x24>
    748a:	7c43      	ldrb	r3, [r0, #17]
    748c:	42a3      	cmp	r3, r4
    748e:	d103      	bne.n	7498 <uip_ds6_get_link_local+0x2c>
       && (uip_is_addr_link_local(&locaddr->ipaddr))) {
    7490:	6803      	ldr	r3, [r0, #0]
    7492:	4033      	ands	r3, r6
    7494:	42ab      	cmp	r3, r5
    7496:	d004      	beq.n	74a2 <uip_ds6_get_link_local+0x36>
 */
uip_ds6_addr_t *
uip_ds6_get_link_local(int8_t state)
{
  for(locaddr = uip_ds6_if.addr_list;
      locaddr < uip_ds6_if.addr_list + UIP_DS6_ADDR_NB; locaddr++) {
    7498:	301c      	adds	r0, #28
    749a:	6008      	str	r0, [r1, #0]
 * (TENTATIVE, PREFERRED, DEPRECATED)
 */
uip_ds6_addr_t *
uip_ds6_get_link_local(int8_t state)
{
  for(locaddr = uip_ds6_if.addr_list;
    749c:	4290      	cmp	r0, r2
    749e:	d1ef      	bne.n	7480 <uip_ds6_get_link_local+0x14>
    if(locaddr->isused && (state == -1 || locaddr->state == state)
       && (uip_is_addr_link_local(&locaddr->ipaddr))) {
      return locaddr;
    }
  }
  return NULL;
    74a0:	2000      	movs	r0, #0
}
    74a2:	bd70      	pop	{r4, r5, r6, pc}
    74a4:	20002b80 	.word	0x20002b80
    74a8:	20000acc 	.word	0x20000acc
    74ac:	00ffff00 	.word	0x00ffff00
    74b0:	0080fe00 	.word	0x0080fe00
    74b4:	20002bd4 	.word	0x20002bd4

000074b8 <uip_ds6_get_global>:
 * state = -1 => any address is ok. Otherwise state = desired state of addr.
 * (TENTATIVE, PREFERRED, DEPRECATED)
 */
uip_ds6_addr_t *
uip_ds6_get_global(int8_t state)
{
    74b8:	b570      	push	{r4, r5, r6, lr}
    74ba:	1c04      	adds	r4, r0, #0
  for(locaddr = uip_ds6_if.addr_list;
    74bc:	4b0c      	ldr	r3, [pc, #48]	; (74f0 <uip_ds6_get_global+0x38>)
    74be:	4a0d      	ldr	r2, [pc, #52]	; (74f4 <uip_ds6_get_global+0x3c>)
    74c0:	6013      	str	r3, [r2, #0]
    74c2:	1c18      	adds	r0, r3, #0
      locaddr < uip_ds6_if.addr_list + UIP_DS6_ADDR_NB; locaddr++) {
    if(locaddr->isused && (state == -1 || locaddr->state == state)
       && !(uip_is_addr_link_local(&locaddr->ipaddr))) {
    74c4:	4e0c      	ldr	r6, [pc, #48]	; (74f8 <uip_ds6_get_global+0x40>)
    74c6:	4d0d      	ldr	r5, [pc, #52]	; (74fc <uip_ds6_get_global+0x44>)
 */
uip_ds6_addr_t *
uip_ds6_get_global(int8_t state)
{
  for(locaddr = uip_ds6_if.addr_list;
      locaddr < uip_ds6_if.addr_list + UIP_DS6_ADDR_NB; locaddr++) {
    74c8:	1c11      	adds	r1, r2, #0
 * (TENTATIVE, PREFERRED, DEPRECATED)
 */
uip_ds6_addr_t *
uip_ds6_get_global(int8_t state)
{
  for(locaddr = uip_ds6_if.addr_list;
    74ca:	4a0d      	ldr	r2, [pc, #52]	; (7500 <uip_ds6_get_global+0x48>)
      locaddr < uip_ds6_if.addr_list + UIP_DS6_ADDR_NB; locaddr++) {
    if(locaddr->isused && (state == -1 || locaddr->state == state)
    74cc:	7803      	ldrb	r3, [r0, #0]
    74ce:	2b00      	cmp	r3, #0
    74d0:	d008      	beq.n	74e4 <uip_ds6_get_global+0x2c>
    74d2:	1c63      	adds	r3, r4, #1
    74d4:	d002      	beq.n	74dc <uip_ds6_get_global+0x24>
    74d6:	7c43      	ldrb	r3, [r0, #17]
    74d8:	42a3      	cmp	r3, r4
    74da:	d103      	bne.n	74e4 <uip_ds6_get_global+0x2c>
       && !(uip_is_addr_link_local(&locaddr->ipaddr))) {
    74dc:	6803      	ldr	r3, [r0, #0]
    74de:	4033      	ands	r3, r6
    74e0:	42ab      	cmp	r3, r5
    74e2:	d104      	bne.n	74ee <uip_ds6_get_global+0x36>
 */
uip_ds6_addr_t *
uip_ds6_get_global(int8_t state)
{
  for(locaddr = uip_ds6_if.addr_list;
      locaddr < uip_ds6_if.addr_list + UIP_DS6_ADDR_NB; locaddr++) {
    74e4:	301c      	adds	r0, #28
    74e6:	6008      	str	r0, [r1, #0]
 * (TENTATIVE, PREFERRED, DEPRECATED)
 */
uip_ds6_addr_t *
uip_ds6_get_global(int8_t state)
{
  for(locaddr = uip_ds6_if.addr_list;
    74e8:	4290      	cmp	r0, r2
    74ea:	d1ef      	bne.n	74cc <uip_ds6_get_global+0x14>
    if(locaddr->isused && (state == -1 || locaddr->state == state)
       && !(uip_is_addr_link_local(&locaddr->ipaddr))) {
      return locaddr;
    }
  }
  return NULL;
    74ec:	2000      	movs	r0, #0
}
    74ee:	bd70      	pop	{r4, r5, r6, pc}
    74f0:	20002b80 	.word	0x20002b80
    74f4:	20000acc 	.word	0x20000acc
    74f8:	00ffff00 	.word	0x00ffff00
    74fc:	0080fe00 	.word	0x0080fe00
    7500:	20002bd4 	.word	0x20002bd4

00007504 <uip_ds6_maddr_add>:

/*---------------------------------------------------------------------------*/
uip_ds6_maddr_t *
uip_ds6_maddr_add(const uip_ipaddr_t *ipaddr)
{
    7504:	b530      	push	{r4, r5, lr}
    7506:	b083      	sub	sp, #12
    7508:	1c05      	adds	r5, r0, #0
  if(uip_ds6_list_loop
    750a:	2380      	movs	r3, #128	; 0x80
    750c:	9300      	str	r3, [sp, #0]
    750e:	4b0c      	ldr	r3, [pc, #48]	; (7540 <uip_ds6_maddr_add+0x3c>)
    7510:	9301      	str	r3, [sp, #4]
    7512:	480c      	ldr	r0, [pc, #48]	; (7544 <uip_ds6_maddr_add+0x40>)
    7514:	2105      	movs	r1, #5
    7516:	2211      	movs	r2, #17
    7518:	1c2b      	adds	r3, r5, #0
    751a:	4c0b      	ldr	r4, [pc, #44]	; (7548 <uip_ds6_maddr_add+0x44>)
    751c:	47a0      	blx	r4
    751e:	2801      	cmp	r0, #1
    7520:	d10b      	bne.n	753a <uip_ds6_maddr_add+0x36>
     ((uip_ds6_element_t *)uip_ds6_if.maddr_list, UIP_DS6_MADDR_NB,
      sizeof(uip_ds6_maddr_t), (void*)ipaddr, 128,
      (uip_ds6_element_t **)&locmaddr) == FREESPACE) {
    locmaddr->isused = 1;
    7522:	4c07      	ldr	r4, [pc, #28]	; (7540 <uip_ds6_maddr_add+0x3c>)
    7524:	2301      	movs	r3, #1
    7526:	6822      	ldr	r2, [r4, #0]
    7528:	7013      	strb	r3, [r2, #0]
    uip_ipaddr_copy(&locmaddr->ipaddr, ipaddr);
    752a:	6823      	ldr	r3, [r4, #0]
    752c:	1c58      	adds	r0, r3, #1
    752e:	1c29      	adds	r1, r5, #0
    7530:	2210      	movs	r2, #16
    7532:	4b06      	ldr	r3, [pc, #24]	; (754c <uip_ds6_maddr_add+0x48>)
    7534:	4798      	blx	r3
    return locmaddr;
    7536:	6820      	ldr	r0, [r4, #0]
    7538:	e000      	b.n	753c <uip_ds6_maddr_add+0x38>
  }
  return NULL;
    753a:	2000      	movs	r0, #0
}
    753c:	b003      	add	sp, #12
    753e:	bd30      	pop	{r4, r5, pc}
    7540:	20000ac0 	.word	0x20000ac0
    7544:	20002bf6 	.word	0x20002bf6
    7548:	00007331 	.word	0x00007331
    754c:	000108e7 	.word	0x000108e7

00007550 <uip_ds6_addr_add>:
}

/*---------------------------------------------------------------------------*/
uip_ds6_addr_t *
uip_ds6_addr_add(uip_ipaddr_t *ipaddr, unsigned long vlifetime, uint8_t type)
{
    7550:	b5f0      	push	{r4, r5, r6, r7, lr}
    7552:	b083      	sub	sp, #12
    7554:	1c04      	adds	r4, r0, #0
    7556:	1c0e      	adds	r6, r1, #0
    7558:	1c17      	adds	r7, r2, #0
  if(uip_ds6_list_loop
    755a:	2380      	movs	r3, #128	; 0x80
    755c:	9300      	str	r3, [sp, #0]
    755e:	4b20      	ldr	r3, [pc, #128]	; (75e0 <uip_ds6_addr_add+0x90>)
    7560:	9301      	str	r3, [sp, #4]
    7562:	4820      	ldr	r0, [pc, #128]	; (75e4 <uip_ds6_addr_add+0x94>)
    7564:	2103      	movs	r1, #3
    7566:	221c      	movs	r2, #28
    7568:	1c23      	adds	r3, r4, #0
    756a:	4d1f      	ldr	r5, [pc, #124]	; (75e8 <uip_ds6_addr_add+0x98>)
    756c:	47a8      	blx	r5
    756e:	2801      	cmp	r0, #1
    7570:	d132      	bne.n	75d8 <uip_ds6_addr_add+0x88>
     ((uip_ds6_element_t *)uip_ds6_if.addr_list, UIP_DS6_ADDR_NB,
      sizeof(uip_ds6_addr_t), ipaddr, 128,
      (uip_ds6_element_t **)&locaddr) == FREESPACE) {
    locaddr->isused = 1;
    7572:	4d1b      	ldr	r5, [pc, #108]	; (75e0 <uip_ds6_addr_add+0x90>)
    7574:	2301      	movs	r3, #1
    7576:	682a      	ldr	r2, [r5, #0]
    7578:	7013      	strb	r3, [r2, #0]
    uip_ipaddr_copy(&locaddr->ipaddr, ipaddr);
    757a:	682b      	ldr	r3, [r5, #0]
    757c:	1c58      	adds	r0, r3, #1
    757e:	1c21      	adds	r1, r4, #0
    7580:	2210      	movs	r2, #16
    7582:	4b1a      	ldr	r3, [pc, #104]	; (75ec <uip_ds6_addr_add+0x9c>)
    7584:	4798      	blx	r3
    locaddr->type = type;
    7586:	6828      	ldr	r0, [r5, #0]
    7588:	7487      	strb	r7, [r0, #18]
    if(vlifetime == 0) {
    758a:	2e00      	cmp	r6, #0
    758c:	d102      	bne.n	7594 <uip_ds6_addr_add+0x44>
      locaddr->isinfinite = 1;
    758e:	2301      	movs	r3, #1
    7590:	74c3      	strb	r3, [r0, #19]
    7592:	e005      	b.n	75a0 <uip_ds6_addr_add+0x50>
    } else {
      locaddr->isinfinite = 0;
    7594:	2300      	movs	r3, #0
    7596:	74c3      	strb	r3, [r0, #19]
      stimer_set(&(locaddr->vlifetime), vlifetime);
    7598:	3014      	adds	r0, #20
    759a:	1c31      	adds	r1, r6, #0
    759c:	4b14      	ldr	r3, [pc, #80]	; (75f0 <uip_ds6_addr_add+0xa0>)
    759e:	4798      	blx	r3
    timer_set(&locaddr->dadtimer,
              random_rand() % (UIP_ND6_MAX_RTR_SOLICITATION_DELAY *
                               CLOCK_SECOND));
    locaddr->dadnscount = 0;
#else /* UIP_ND6_DEF_MAXDADNS > 0 */
    locaddr->state = ADDR_PREFERRED;
    75a0:	4d0f      	ldr	r5, [pc, #60]	; (75e0 <uip_ds6_addr_add+0x90>)
    75a2:	2101      	movs	r1, #1
    75a4:	682b      	ldr	r3, [r5, #0]
    75a6:	7459      	strb	r1, [r3, #17]
#endif /* UIP_ND6_DEF_MAXDADNS > 0 */
    uip_create_solicited_node(ipaddr, &loc_fipaddr);
    75a8:	4812      	ldr	r0, [pc, #72]	; (75f4 <uip_ds6_addr_add+0xa4>)
    75aa:	22ff      	movs	r2, #255	; 0xff
    75ac:	7002      	strb	r2, [r0, #0]
    75ae:	2302      	movs	r3, #2
    75b0:	7043      	strb	r3, [r0, #1]
    75b2:	2300      	movs	r3, #0
    75b4:	8043      	strh	r3, [r0, #2]
    75b6:	8083      	strh	r3, [r0, #4]
    75b8:	80c3      	strh	r3, [r0, #6]
    75ba:	8103      	strh	r3, [r0, #8]
    75bc:	7283      	strb	r3, [r0, #10]
    75be:	72c1      	strb	r1, [r0, #11]
    75c0:	7302      	strb	r2, [r0, #12]
    75c2:	7b63      	ldrb	r3, [r4, #13]
    75c4:	7343      	strb	r3, [r0, #13]
    75c6:	7ba2      	ldrb	r2, [r4, #14]
    75c8:	7be3      	ldrb	r3, [r4, #15]
    75ca:	021b      	lsls	r3, r3, #8
    75cc:	4313      	orrs	r3, r2
    75ce:	81c3      	strh	r3, [r0, #14]
    uip_ds6_maddr_add(&loc_fipaddr);
    75d0:	4b09      	ldr	r3, [pc, #36]	; (75f8 <uip_ds6_addr_add+0xa8>)
    75d2:	4798      	blx	r3
    return locaddr;
    75d4:	6828      	ldr	r0, [r5, #0]
    75d6:	e000      	b.n	75da <uip_ds6_addr_add+0x8a>
  }
  return NULL;
    75d8:	2000      	movs	r0, #0
}
    75da:	b003      	add	sp, #12
    75dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    75de:	46c0      	nop			; (mov r8, r8)
    75e0:	20000acc 	.word	0x20000acc
    75e4:	20002b80 	.word	0x20002b80
    75e8:	00007331 	.word	0x00007331
    75ec:	000108e7 	.word	0x000108e7
    75f0:	0000ecfd 	.word	0x0000ecfd
    75f4:	20000ad0 	.word	0x20000ad0
    75f8:	00007505 	.word	0x00007505

000075fc <uip_ds6_maddr_rm>:

/*---------------------------------------------------------------------------*/
void
uip_ds6_maddr_rm(uip_ds6_maddr_t *maddr)
{
  if(maddr != NULL) {
    75fc:	2800      	cmp	r0, #0
    75fe:	d001      	beq.n	7604 <uip_ds6_maddr_rm+0x8>
    maddr->isused = 0;
    7600:	2300      	movs	r3, #0
    7602:	7003      	strb	r3, [r0, #0]
  }
  return;
}
    7604:	4770      	bx	lr
    7606:	46c0      	nop			; (mov r8, r8)

00007608 <uip_ds6_maddr_lookup>:

/*---------------------------------------------------------------------------*/
uip_ds6_maddr_t *
uip_ds6_maddr_lookup(const uip_ipaddr_t *ipaddr)
{
    7608:	b510      	push	{r4, lr}
    760a:	b082      	sub	sp, #8
    760c:	1c03      	adds	r3, r0, #0
  if(uip_ds6_list_loop
    760e:	2280      	movs	r2, #128	; 0x80
    7610:	9200      	str	r2, [sp, #0]
    7612:	4a07      	ldr	r2, [pc, #28]	; (7630 <uip_ds6_maddr_lookup+0x28>)
    7614:	9201      	str	r2, [sp, #4]
    7616:	4807      	ldr	r0, [pc, #28]	; (7634 <uip_ds6_maddr_lookup+0x2c>)
    7618:	2105      	movs	r1, #5
    761a:	2211      	movs	r2, #17
    761c:	4c06      	ldr	r4, [pc, #24]	; (7638 <uip_ds6_maddr_lookup+0x30>)
    761e:	47a0      	blx	r4
    7620:	2800      	cmp	r0, #0
    7622:	d102      	bne.n	762a <uip_ds6_maddr_lookup+0x22>
     ((uip_ds6_element_t *)uip_ds6_if.maddr_list, UIP_DS6_MADDR_NB,
      sizeof(uip_ds6_maddr_t), (void*)ipaddr, 128,
      (uip_ds6_element_t **)&locmaddr) == FOUND) {
    return locmaddr;
    7624:	4b02      	ldr	r3, [pc, #8]	; (7630 <uip_ds6_maddr_lookup+0x28>)
    7626:	6818      	ldr	r0, [r3, #0]
    7628:	e000      	b.n	762c <uip_ds6_maddr_lookup+0x24>
  }
  return NULL;
    762a:	2000      	movs	r0, #0
}
    762c:	b002      	add	sp, #8
    762e:	bd10      	pop	{r4, pc}
    7630:	20000ac0 	.word	0x20000ac0
    7634:	20002bf6 	.word	0x20002bf6
    7638:	00007331 	.word	0x00007331

0000763c <uip_ds6_addr_rm>:
}

/*---------------------------------------------------------------------------*/
void
uip_ds6_addr_rm(uip_ds6_addr_t *addr)
{
    763c:	b510      	push	{r4, lr}
  if(addr != NULL) {
    763e:	2800      	cmp	r0, #0
    7640:	d01f      	beq.n	7682 <uip_ds6_addr_rm+0x46>
    7642:	1c04      	adds	r4, r0, #0
    uip_create_solicited_node(&addr->ipaddr, &loc_fipaddr);
    7644:	480f      	ldr	r0, [pc, #60]	; (7684 <uip_ds6_addr_rm+0x48>)
    7646:	22ff      	movs	r2, #255	; 0xff
    7648:	7002      	strb	r2, [r0, #0]
    764a:	2302      	movs	r3, #2
    764c:	7043      	strb	r3, [r0, #1]
    764e:	2300      	movs	r3, #0
    7650:	8043      	strh	r3, [r0, #2]
    7652:	8083      	strh	r3, [r0, #4]
    7654:	80c3      	strh	r3, [r0, #6]
    7656:	8103      	strh	r3, [r0, #8]
    7658:	7283      	strb	r3, [r0, #10]
    765a:	2301      	movs	r3, #1
    765c:	72c3      	strb	r3, [r0, #11]
    765e:	7302      	strb	r2, [r0, #12]
    7660:	7ba3      	ldrb	r3, [r4, #14]
    7662:	7343      	strb	r3, [r0, #13]
    7664:	7be2      	ldrb	r2, [r4, #15]
    7666:	7c23      	ldrb	r3, [r4, #16]
    7668:	021b      	lsls	r3, r3, #8
    766a:	4313      	orrs	r3, r2
    766c:	81c3      	strh	r3, [r0, #14]
    if((locmaddr = uip_ds6_maddr_lookup(&loc_fipaddr)) != NULL) {
    766e:	4b06      	ldr	r3, [pc, #24]	; (7688 <uip_ds6_addr_rm+0x4c>)
    7670:	4798      	blx	r3
    7672:	4b06      	ldr	r3, [pc, #24]	; (768c <uip_ds6_addr_rm+0x50>)
    7674:	6018      	str	r0, [r3, #0]
    7676:	2800      	cmp	r0, #0
    7678:	d001      	beq.n	767e <uip_ds6_addr_rm+0x42>
      uip_ds6_maddr_rm(locmaddr);
    767a:	4b05      	ldr	r3, [pc, #20]	; (7690 <uip_ds6_addr_rm+0x54>)
    767c:	4798      	blx	r3
    }
    addr->isused = 0;
    767e:	2300      	movs	r3, #0
    7680:	7023      	strb	r3, [r4, #0]
  }
  return;
}
    7682:	bd10      	pop	{r4, pc}
    7684:	20000ad0 	.word	0x20000ad0
    7688:	00007609 	.word	0x00007609
    768c:	20000ac0 	.word	0x20000ac0
    7690:	000075fd 	.word	0x000075fd

00007694 <uip_ds6_set_addr_iid>:
}

/*---------------------------------------------------------------------------*/
void
uip_ds6_set_addr_iid(uip_ipaddr_t *ipaddr, uip_lladdr_t *lladdr)
{
    7694:	b510      	push	{r4, lr}
    7696:	1c04      	adds	r4, r0, #0
  /* We consider only links with IEEE EUI-64 identifier or
   * IEEE 48-bit MAC addresses */
#if (UIP_LLADDR_LEN == 8)
  memcpy(ipaddr->u8 + 8, lladdr, UIP_LLADDR_LEN);
    7698:	3008      	adds	r0, #8
    769a:	2208      	movs	r2, #8
    769c:	4b03      	ldr	r3, [pc, #12]	; (76ac <uip_ds6_set_addr_iid+0x18>)
    769e:	4798      	blx	r3
  ipaddr->u8[8] ^= 0x02;
    76a0:	7a22      	ldrb	r2, [r4, #8]
    76a2:	2302      	movs	r3, #2
    76a4:	4053      	eors	r3, r2
    76a6:	7223      	strb	r3, [r4, #8]
  memcpy(ipaddr->u8 + 13, (uint8_t *)lladdr + 3, 3);
  ipaddr->u8[8] ^= 0x02;
#else
#error uip-ds6.c cannot build interface address when UIP_LLADDR_LEN is not 6 or 8
#endif
}
    76a8:	bd10      	pop	{r4, pc}
    76aa:	46c0      	nop			; (mov r8, r8)
    76ac:	000108e7 	.word	0x000108e7

000076b0 <get_match_length>:

/*---------------------------------------------------------------------------*/
uint8_t
get_match_length(uip_ipaddr_t *src, uip_ipaddr_t *dst)
{
    76b0:	b530      	push	{r4, r5, lr}
    76b2:	1c05      	adds	r5, r0, #0
  uint8_t j, k, x_or;
  uint8_t len = 0;

  for(j = 0; j < 16; j++) {
    if(src->u8[j] == dst->u8[j]) {
    76b4:	7802      	ldrb	r2, [r0, #0]
    76b6:	780c      	ldrb	r4, [r1, #0]
    76b8:	42a2      	cmp	r2, r4
    76ba:	d10d      	bne.n	76d8 <get_match_length+0x28>
    76bc:	2300      	movs	r3, #0
    76be:	2008      	movs	r0, #8
    76c0:	18ea      	adds	r2, r5, r3
    76c2:	7852      	ldrb	r2, [r2, #1]
    76c4:	18cc      	adds	r4, r1, r3
    76c6:	7864      	ldrb	r4, [r4, #1]
    76c8:	42a2      	cmp	r2, r4
    76ca:	d106      	bne.n	76da <get_match_length+0x2a>
      len += 8;
    76cc:	3008      	adds	r0, #8
    76ce:	b2c0      	uxtb	r0, r0
    76d0:	3301      	adds	r3, #1
get_match_length(uip_ipaddr_t *src, uip_ipaddr_t *dst)
{
  uint8_t j, k, x_or;
  uint8_t len = 0;

  for(j = 0; j < 16; j++) {
    76d2:	2880      	cmp	r0, #128	; 0x80
    76d4:	d1f4      	bne.n	76c0 <get_match_length+0x10>
    76d6:	e018      	b.n	770a <get_match_length+0x5a>
/*---------------------------------------------------------------------------*/
uint8_t
get_match_length(uip_ipaddr_t *src, uip_ipaddr_t *dst)
{
  uint8_t j, k, x_or;
  uint8_t len = 0;
    76d8:	2000      	movs	r0, #0

  for(j = 0; j < 16; j++) {
    if(src->u8[j] == dst->u8[j]) {
      len += 8;
    } else {
      x_or = src->u8[j] ^ dst->u8[j];
    76da:	4062      	eors	r2, r4
      for(k = 0; k < 8; k++) {
        if((x_or & 0x80) == 0) {
    76dc:	b253      	sxtb	r3, r2
    76de:	2b00      	cmp	r3, #0
    76e0:	da0c      	bge.n	76fc <get_match_length+0x4c>
    76e2:	e012      	b.n	770a <get_match_length+0x5a>
    76e4:	b251      	sxtb	r1, r2
    76e6:	2900      	cmp	r1, #0
    76e8:	db06      	blt.n	76f8 <get_match_length+0x48>
          len++;
    76ea:	3301      	adds	r3, #1
    76ec:	b2db      	uxtb	r3, r3
          x_or <<= 1;
    76ee:	0052      	lsls	r2, r2, #1
    76f0:	b2d2      	uxtb	r2, r2
  for(j = 0; j < 16; j++) {
    if(src->u8[j] == dst->u8[j]) {
      len += 8;
    } else {
      x_or = src->u8[j] ^ dst->u8[j];
      for(k = 0; k < 8; k++) {
    76f2:	4283      	cmp	r3, r0
    76f4:	d1f6      	bne.n	76e4 <get_match_length+0x34>
    76f6:	e008      	b.n	770a <get_match_length+0x5a>
    76f8:	1c18      	adds	r0, r3, #0
    76fa:	e006      	b.n	770a <get_match_length+0x5a>
        if((x_or & 0x80) == 0) {
          len++;
    76fc:	1c43      	adds	r3, r0, #1
    76fe:	b2db      	uxtb	r3, r3
          x_or <<= 1;
    7700:	0052      	lsls	r2, r2, #1
    7702:	b2d2      	uxtb	r2, r2
    7704:	3008      	adds	r0, #8
    7706:	b2c0      	uxtb	r0, r0
    7708:	e7ec      	b.n	76e4 <get_match_length+0x34>
      }
      break;
    }
  }
  return len;
}
    770a:	bd30      	pop	{r4, r5, pc}

0000770c <uip_ds6_select_src>:
}

/*---------------------------------------------------------------------------*/
void
uip_ds6_select_src(uip_ipaddr_t *src, uip_ipaddr_t *dst)
{
    770c:	b5f0      	push	{r4, r5, r6, r7, lr}
    770e:	465f      	mov	r7, fp
    7710:	4656      	mov	r6, sl
    7712:	464d      	mov	r5, r9
    7714:	4644      	mov	r4, r8
    7716:	b4f0      	push	{r4, r5, r6, r7}
    7718:	b083      	sub	sp, #12
    771a:	4680      	mov	r8, r0
    771c:	9101      	str	r1, [sp, #4]
  uint8_t best = 0;             /* number of bit in common with best match */
  uint8_t n = 0;
  uip_ds6_addr_t *matchaddr = NULL;

  if(!uip_is_addr_link_local(dst) && !uip_is_addr_mcast(dst)) {
    771e:	780b      	ldrb	r3, [r1, #0]
    7720:	2bfe      	cmp	r3, #254	; 0xfe
    7722:	d14a      	bne.n	77ba <uip_ds6_select_src+0xae>
    7724:	784b      	ldrb	r3, [r1, #1]
    7726:	2b80      	cmp	r3, #128	; 0x80
    7728:	d024      	beq.n	7774 <uip_ds6_select_src+0x68>
    /* find longest match */
    for(locaddr = uip_ds6_if.addr_list;
    772a:	4a29      	ldr	r2, [pc, #164]	; (77d0 <uip_ds6_select_src+0xc4>)
    772c:	4b29      	ldr	r3, [pc, #164]	; (77d4 <uip_ds6_select_src+0xc8>)
    772e:	601a      	str	r2, [r3, #0]
}

/*---------------------------------------------------------------------------*/
void
uip_ds6_select_src(uip_ipaddr_t *src, uip_ipaddr_t *dst)
{
    7730:	4c27      	ldr	r4, [pc, #156]	; (77d0 <uip_ds6_select_src+0xc4>)
    7732:	2700      	movs	r7, #0
    7734:	2300      	movs	r3, #0
    7736:	4699      	mov	r9, r3
    /* find longest match */
    for(locaddr = uip_ds6_if.addr_list;
        locaddr < uip_ds6_if.addr_list + UIP_DS6_ADDR_NB; locaddr++) {
      /* Only preferred global (not link-local) addresses */
      if(locaddr->isused && locaddr->state == ADDR_PREFERRED &&
         !uip_is_addr_link_local(&locaddr->ipaddr)) {
    7738:	4b27      	ldr	r3, [pc, #156]	; (77d8 <uip_ds6_select_src+0xcc>)
    773a:	469b      	mov	fp, r3
  if(!uip_is_addr_link_local(dst) && !uip_is_addr_mcast(dst)) {
    /* find longest match */
    for(locaddr = uip_ds6_if.addr_list;
        locaddr < uip_ds6_if.addr_list + UIP_DS6_ADDR_NB; locaddr++) {
      /* Only preferred global (not link-local) addresses */
      if(locaddr->isused && locaddr->state == ADDR_PREFERRED &&
    773c:	4b27      	ldr	r3, [pc, #156]	; (77dc <uip_ds6_select_src+0xd0>)
    773e:	469a      	mov	sl, r3
  uip_ds6_addr_t *matchaddr = NULL;

  if(!uip_is_addr_link_local(dst) && !uip_is_addr_mcast(dst)) {
    /* find longest match */
    for(locaddr = uip_ds6_if.addr_list;
        locaddr < uip_ds6_if.addr_list + UIP_DS6_ADDR_NB; locaddr++) {
    7740:	4e24      	ldr	r6, [pc, #144]	; (77d4 <uip_ds6_select_src+0xc8>)
  uint8_t n = 0;
  uip_ds6_addr_t *matchaddr = NULL;

  if(!uip_is_addr_link_local(dst) && !uip_is_addr_mcast(dst)) {
    /* find longest match */
    for(locaddr = uip_ds6_if.addr_list;
    7742:	4d27      	ldr	r5, [pc, #156]	; (77e0 <uip_ds6_select_src+0xd4>)
        locaddr < uip_ds6_if.addr_list + UIP_DS6_ADDR_NB; locaddr++) {
      /* Only preferred global (not link-local) addresses */
      if(locaddr->isused && locaddr->state == ADDR_PREFERRED &&
    7744:	7823      	ldrb	r3, [r4, #0]
    7746:	2b00      	cmp	r3, #0
    7748:	d00f      	beq.n	776a <uip_ds6_select_src+0x5e>
    774a:	7c63      	ldrb	r3, [r4, #17]
    774c:	2b01      	cmp	r3, #1
    774e:	d10c      	bne.n	776a <uip_ds6_select_src+0x5e>
         !uip_is_addr_link_local(&locaddr->ipaddr)) {
    7750:	6823      	ldr	r3, [r4, #0]
    7752:	465a      	mov	r2, fp
    7754:	4013      	ands	r3, r2
  if(!uip_is_addr_link_local(dst) && !uip_is_addr_mcast(dst)) {
    /* find longest match */
    for(locaddr = uip_ds6_if.addr_list;
        locaddr < uip_ds6_if.addr_list + UIP_DS6_ADDR_NB; locaddr++) {
      /* Only preferred global (not link-local) addresses */
      if(locaddr->isused && locaddr->state == ADDR_PREFERRED &&
    7756:	4553      	cmp	r3, sl
    7758:	d007      	beq.n	776a <uip_ds6_select_src+0x5e>
    775a:	1c61      	adds	r1, r4, #1
         !uip_is_addr_link_local(&locaddr->ipaddr)) {
        n = get_match_length(dst, &locaddr->ipaddr);
    775c:	9801      	ldr	r0, [sp, #4]
    775e:	4b21      	ldr	r3, [pc, #132]	; (77e4 <uip_ds6_select_src+0xd8>)
    7760:	4798      	blx	r3
        if(n >= best) {
    7762:	4548      	cmp	r0, r9
    7764:	d301      	bcc.n	776a <uip_ds6_select_src+0x5e>
    7766:	1c27      	adds	r7, r4, #0
          best = n;
    7768:	4681      	mov	r9, r0
  uip_ds6_addr_t *matchaddr = NULL;

  if(!uip_is_addr_link_local(dst) && !uip_is_addr_mcast(dst)) {
    /* find longest match */
    for(locaddr = uip_ds6_if.addr_list;
        locaddr < uip_ds6_if.addr_list + UIP_DS6_ADDR_NB; locaddr++) {
    776a:	341c      	adds	r4, #28
    776c:	6034      	str	r4, [r6, #0]
  uint8_t n = 0;
  uip_ds6_addr_t *matchaddr = NULL;

  if(!uip_is_addr_link_local(dst) && !uip_is_addr_mcast(dst)) {
    /* find longest match */
    for(locaddr = uip_ds6_if.addr_list;
    776e:	42ac      	cmp	r4, r5
    7770:	d1e8      	bne.n	7744 <uip_ds6_select_src+0x38>
    7772:	e003      	b.n	777c <uip_ds6_select_src+0x70>
#if UIP_IPV6_MULTICAST
  } else if(uip_is_addr_mcast_routable(dst)) {
    matchaddr = uip_ds6_get_global(ADDR_PREFERRED);
#endif
  } else {
    matchaddr = uip_ds6_get_link_local(ADDR_PREFERRED);
    7774:	2001      	movs	r0, #1
    7776:	4b1c      	ldr	r3, [pc, #112]	; (77e8 <uip_ds6_select_src+0xdc>)
    7778:	4798      	blx	r3
    777a:	1c07      	adds	r7, r0, #0
  }

  /* use the :: (unspecified address) as source if no match found */
  if(matchaddr == NULL) {
    777c:	2f00      	cmp	r7, #0
    777e:	d112      	bne.n	77a6 <uip_ds6_select_src+0x9a>
    uip_create_unspecified(src);
    7780:	2300      	movs	r3, #0
    7782:	4642      	mov	r2, r8
    7784:	7013      	strb	r3, [r2, #0]
    7786:	7053      	strb	r3, [r2, #1]
    7788:	7093      	strb	r3, [r2, #2]
    778a:	70d3      	strb	r3, [r2, #3]
    778c:	7113      	strb	r3, [r2, #4]
    778e:	7153      	strb	r3, [r2, #5]
    7790:	7193      	strb	r3, [r2, #6]
    7792:	71d3      	strb	r3, [r2, #7]
    7794:	7213      	strb	r3, [r2, #8]
    7796:	7253      	strb	r3, [r2, #9]
    7798:	7293      	strb	r3, [r2, #10]
    779a:	72d3      	strb	r3, [r2, #11]
    779c:	7313      	strb	r3, [r2, #12]
    779e:	7353      	strb	r3, [r2, #13]
    77a0:	7393      	strb	r3, [r2, #14]
    77a2:	73d3      	strb	r3, [r2, #15]
    77a4:	e00c      	b.n	77c0 <uip_ds6_select_src+0xb4>
  } else {
    uip_ipaddr_copy(src, &matchaddr->ipaddr);
    77a6:	1c79      	adds	r1, r7, #1
    77a8:	4640      	mov	r0, r8
    77aa:	2210      	movs	r2, #16
    77ac:	4b0f      	ldr	r3, [pc, #60]	; (77ec <uip_ds6_select_src+0xe0>)
    77ae:	4798      	blx	r3
    77b0:	e006      	b.n	77c0 <uip_ds6_select_src+0xb4>
  uint8_t n = 0;
  uip_ds6_addr_t *matchaddr = NULL;

  if(!uip_is_addr_link_local(dst) && !uip_is_addr_mcast(dst)) {
    /* find longest match */
    for(locaddr = uip_ds6_if.addr_list;
    77b2:	4a07      	ldr	r2, [pc, #28]	; (77d0 <uip_ds6_select_src+0xc4>)
    77b4:	4b07      	ldr	r3, [pc, #28]	; (77d4 <uip_ds6_select_src+0xc8>)
    77b6:	601a      	str	r2, [r3, #0]
    77b8:	e7ba      	b.n	7730 <uip_ds6_select_src+0x24>
{
  uint8_t best = 0;             /* number of bit in common with best match */
  uint8_t n = 0;
  uip_ds6_addr_t *matchaddr = NULL;

  if(!uip_is_addr_link_local(dst) && !uip_is_addr_mcast(dst)) {
    77ba:	2bff      	cmp	r3, #255	; 0xff
    77bc:	d1f9      	bne.n	77b2 <uip_ds6_select_src+0xa6>
    77be:	e7d9      	b.n	7774 <uip_ds6_select_src+0x68>
  if(matchaddr == NULL) {
    uip_create_unspecified(src);
  } else {
    uip_ipaddr_copy(src, &matchaddr->ipaddr);
  }
}
    77c0:	b003      	add	sp, #12
    77c2:	bc3c      	pop	{r2, r3, r4, r5}
    77c4:	4690      	mov	r8, r2
    77c6:	4699      	mov	r9, r3
    77c8:	46a2      	mov	sl, r4
    77ca:	46ab      	mov	fp, r5
    77cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    77ce:	46c0      	nop			; (mov r8, r8)
    77d0:	20002b80 	.word	0x20002b80
    77d4:	20000acc 	.word	0x20000acc
    77d8:	00ffff00 	.word	0x00ffff00
    77dc:	0080fe00 	.word	0x0080fe00
    77e0:	20002bd4 	.word	0x20002bd4
    77e4:	000076b1 	.word	0x000076b1
    77e8:	0000746d 	.word	0x0000746d
    77ec:	000108e7 	.word	0x000108e7

000077f0 <uip_ds6_send_ra_sollicited>:
/*---------------------------------------------------------------------------*/
#if UIP_CONF_ROUTER
#if UIP_ND6_SEND_RA
void
uip_ds6_send_ra_sollicited(void)
{
    77f0:	b510      	push	{r4, lr}
   * hence we have to use stimers. However, when receiving a RS, we
   * should delay the reply by a random value between 0 and 500ms timers.
   * stimers are in seconds, hence we cannot do this. Therefore we just send
   * the RA (setting the timer to 0 below). We keep the code logic for
   * the days contiki will support appropriate timers */
  rand_time = 0;
    77f2:	4c0a      	ldr	r4, [pc, #40]	; (781c <uip_ds6_send_ra_sollicited+0x2c>)
    77f4:	2300      	movs	r3, #0
    77f6:	8023      	strh	r3, [r4, #0]
  PRINTF("Solicited RA, random time %u\n\r", rand_time);

  if(stimer_remaining(&uip_ds6_timer_ra) > rand_time) {
    77f8:	4809      	ldr	r0, [pc, #36]	; (7820 <uip_ds6_send_ra_sollicited+0x30>)
    77fa:	4b0a      	ldr	r3, [pc, #40]	; (7824 <uip_ds6_send_ra_sollicited+0x34>)
    77fc:	4798      	blx	r3
    77fe:	8823      	ldrh	r3, [r4, #0]
    7800:	4298      	cmp	r0, r3
    7802:	d909      	bls.n	7818 <uip_ds6_send_ra_sollicited+0x28>
    if(stimer_elapsed(&uip_ds6_timer_ra) < UIP_ND6_MIN_DELAY_BETWEEN_RAS) {
    7804:	4806      	ldr	r0, [pc, #24]	; (7820 <uip_ds6_send_ra_sollicited+0x30>)
    7806:	4b08      	ldr	r3, [pc, #32]	; (7828 <uip_ds6_send_ra_sollicited+0x38>)
    7808:	4798      	blx	r3
    780a:	2802      	cmp	r0, #2
    780c:	d904      	bls.n	7818 <uip_ds6_send_ra_sollicited+0x28>
      /* Ensure that the RAs are rate limited */
/*      stimer_set(&uip_ds6_timer_ra, rand_time +
                 UIP_ND6_MIN_DELAY_BETWEEN_RAS -
                 stimer_elapsed(&uip_ds6_timer_ra));
  */ } else {
      stimer_set(&uip_ds6_timer_ra, rand_time);
    780e:	4b03      	ldr	r3, [pc, #12]	; (781c <uip_ds6_send_ra_sollicited+0x2c>)
    7810:	8819      	ldrh	r1, [r3, #0]
    7812:	4803      	ldr	r0, [pc, #12]	; (7820 <uip_ds6_send_ra_sollicited+0x30>)
    7814:	4b05      	ldr	r3, [pc, #20]	; (782c <uip_ds6_send_ra_sollicited+0x3c>)
    7816:	4798      	blx	r3
    }
  }
}
    7818:	bd10      	pop	{r4, pc}
    781a:	46c0      	nop			; (mov r8, r8)
    781c:	20000ae0 	.word	0x20000ae0
    7820:	20002b60 	.word	0x20002b60
    7824:	0000ed35 	.word	0x0000ed35
    7828:	0000ed49 	.word	0x0000ed49
    782c:	0000ecfd 	.word	0x0000ecfd

00007830 <uip_ds6_send_ra_periodic>:

/*---------------------------------------------------------------------------*/
void
uip_ds6_send_ra_periodic(void)
{
    7830:	b508      	push	{r3, lr}
  if(racount > 0) {
    7832:	4b11      	ldr	r3, [pc, #68]	; (7878 <uip_ds6_send_ra_periodic+0x48>)
    7834:	781b      	ldrb	r3, [r3, #0]
    7836:	2b00      	cmp	r3, #0
    7838:	d002      	beq.n	7840 <uip_ds6_send_ra_periodic+0x10>
    /* send previously scheduled RA */
    uip_nd6_ra_output(NULL);
    783a:	2000      	movs	r0, #0
    783c:	4b0f      	ldr	r3, [pc, #60]	; (787c <uip_ds6_send_ra_periodic+0x4c>)
    783e:	4798      	blx	r3
    PRINTF("Sending periodic RA\n\r");
  }

  rand_time = UIP_ND6_MIN_RA_INTERVAL + random_rand() %
    7840:	4b0f      	ldr	r3, [pc, #60]	; (7880 <uip_ds6_send_ra_periodic+0x50>)
    7842:	4798      	blx	r3
    7844:	21c8      	movs	r1, #200	; 0xc8
    7846:	0049      	lsls	r1, r1, #1
    7848:	4b0e      	ldr	r3, [pc, #56]	; (7884 <uip_ds6_send_ra_periodic+0x54>)
    784a:	4798      	blx	r3
    784c:	31c8      	adds	r1, #200	; 0xc8
    784e:	b289      	uxth	r1, r1
    7850:	4b0d      	ldr	r3, [pc, #52]	; (7888 <uip_ds6_send_ra_periodic+0x58>)
    7852:	8019      	strh	r1, [r3, #0]
    (uint16_t) (UIP_ND6_MAX_RA_INTERVAL - UIP_ND6_MIN_RA_INTERVAL);
  PRINTF("Random time 1 = %u\n\r", rand_time);

  if(racount < UIP_ND6_MAX_INITIAL_RAS) {
    7854:	4b08      	ldr	r3, [pc, #32]	; (7878 <uip_ds6_send_ra_periodic+0x48>)
    7856:	781b      	ldrb	r3, [r3, #0]
    7858:	2b02      	cmp	r3, #2
    785a:	d807      	bhi.n	786c <uip_ds6_send_ra_periodic+0x3c>
    if(rand_time > UIP_ND6_MAX_INITIAL_RA_INTERVAL) {
    785c:	2910      	cmp	r1, #16
    785e:	d902      	bls.n	7866 <uip_ds6_send_ra_periodic+0x36>
      rand_time = UIP_ND6_MAX_INITIAL_RA_INTERVAL;
    7860:	2110      	movs	r1, #16
    7862:	4a09      	ldr	r2, [pc, #36]	; (7888 <uip_ds6_send_ra_periodic+0x58>)
    7864:	8011      	strh	r1, [r2, #0]
      PRINTF("Random time 2 = %u\n\r", rand_time);
    }
    racount++;
    7866:	3301      	adds	r3, #1
    7868:	4a03      	ldr	r2, [pc, #12]	; (7878 <uip_ds6_send_ra_periodic+0x48>)
    786a:	7013      	strb	r3, [r2, #0]
  }
  PRINTF("Random time 3 = %u\n\r", rand_time);
  stimer_set(&uip_ds6_timer_ra, rand_time);
    786c:	4b06      	ldr	r3, [pc, #24]	; (7888 <uip_ds6_send_ra_periodic+0x58>)
    786e:	8819      	ldrh	r1, [r3, #0]
    7870:	4806      	ldr	r0, [pc, #24]	; (788c <uip_ds6_send_ra_periodic+0x5c>)
    7872:	4b07      	ldr	r3, [pc, #28]	; (7890 <uip_ds6_send_ra_periodic+0x60>)
    7874:	4798      	blx	r3
}
    7876:	bd08      	pop	{r3, pc}
    7878:	20000ac4 	.word	0x20000ac4
    787c:	0000883d 	.word	0x0000883d
    7880:	00005895 	.word	0x00005895
    7884:	00010631 	.word	0x00010631
    7888:	20000ae0 	.word	0x20000ae0
    788c:	20002b60 	.word	0x20002b60
    7890:	0000ecfd 	.word	0x0000ecfd

00007894 <uip_ds6_periodic>:


/*---------------------------------------------------------------------------*/
void
uip_ds6_periodic(void)
{
    7894:	b508      	push	{r3, lr}

  /* Periodic processing on unicast addresses */
  for(locaddr = uip_ds6_if.addr_list;
    7896:	4816      	ldr	r0, [pc, #88]	; (78f0 <uip_ds6_periodic+0x5c>)
    7898:	4b16      	ldr	r3, [pc, #88]	; (78f4 <uip_ds6_periodic+0x60>)
    789a:	6018      	str	r0, [r3, #0]
      locaddr < uip_ds6_if.addr_list + UIP_DS6_ADDR_NB; locaddr++) {
    if(locaddr->isused) {
    789c:	7803      	ldrb	r3, [r0, #0]
    789e:	2b00      	cmp	r3, #0
    78a0:	d00b      	beq.n	78ba <uip_ds6_periodic+0x26>
      if((!locaddr->isinfinite) && (stimer_expired(&locaddr->vlifetime))) {
    78a2:	7cc3      	ldrb	r3, [r0, #19]
    78a4:	2b00      	cmp	r3, #0
    78a6:	d108      	bne.n	78ba <uip_ds6_periodic+0x26>
    78a8:	3014      	adds	r0, #20
    78aa:	4b13      	ldr	r3, [pc, #76]	; (78f8 <uip_ds6_periodic+0x64>)
    78ac:	4798      	blx	r3
    78ae:	2800      	cmp	r0, #0
    78b0:	d003      	beq.n	78ba <uip_ds6_periodic+0x26>
        uip_ds6_addr_rm(locaddr);
    78b2:	4b10      	ldr	r3, [pc, #64]	; (78f4 <uip_ds6_periodic+0x60>)
    78b4:	6818      	ldr	r0, [r3, #0]
    78b6:	4b11      	ldr	r3, [pc, #68]	; (78fc <uip_ds6_periodic+0x68>)
    78b8:	4798      	blx	r3
uip_ds6_periodic(void)
{

  /* Periodic processing on unicast addresses */
  for(locaddr = uip_ds6_if.addr_list;
      locaddr < uip_ds6_if.addr_list + UIP_DS6_ADDR_NB; locaddr++) {
    78ba:	4b0e      	ldr	r3, [pc, #56]	; (78f4 <uip_ds6_periodic+0x60>)
    78bc:	6818      	ldr	r0, [r3, #0]
    78be:	301c      	adds	r0, #28
    78c0:	6018      	str	r0, [r3, #0]
void
uip_ds6_periodic(void)
{

  /* Periodic processing on unicast addresses */
  for(locaddr = uip_ds6_if.addr_list;
    78c2:	4b0f      	ldr	r3, [pc, #60]	; (7900 <uip_ds6_periodic+0x6c>)
    78c4:	4298      	cmp	r0, r3
    78c6:	d3e9      	bcc.n	789c <uip_ds6_periodic+0x8>
      }
    }
  }

  /* Periodic processing on default routers */
  uip_ds6_defrt_periodic();
    78c8:	4b0e      	ldr	r3, [pc, #56]	; (7904 <uip_ds6_periodic+0x70>)
    78ca:	4798      	blx	r3
      uip_ds6_prefix_rm(locprefix);
    }
  }
#endif /* !UIP_CONF_ROUTER */

  uip_ds6_neighbor_periodic();
    78cc:	4b0e      	ldr	r3, [pc, #56]	; (7908 <uip_ds6_periodic+0x74>)
    78ce:	4798      	blx	r3

#if UIP_CONF_ROUTER & UIP_ND6_SEND_RA
  /* Periodic RA sending */
  if(stimer_expired(&uip_ds6_timer_ra) && (uip_len == 0)) {
    78d0:	480e      	ldr	r0, [pc, #56]	; (790c <uip_ds6_periodic+0x78>)
    78d2:	4b09      	ldr	r3, [pc, #36]	; (78f8 <uip_ds6_periodic+0x64>)
    78d4:	4798      	blx	r3
    78d6:	2800      	cmp	r0, #0
    78d8:	d005      	beq.n	78e6 <uip_ds6_periodic+0x52>
    78da:	4b0d      	ldr	r3, [pc, #52]	; (7910 <uip_ds6_periodic+0x7c>)
    78dc:	881b      	ldrh	r3, [r3, #0]
    78de:	2b00      	cmp	r3, #0
    78e0:	d101      	bne.n	78e6 <uip_ds6_periodic+0x52>
    uip_ds6_send_ra_periodic();
    78e2:	4b0c      	ldr	r3, [pc, #48]	; (7914 <uip_ds6_periodic+0x80>)
    78e4:	4798      	blx	r3
  }
#endif /* UIP_CONF_ROUTER & UIP_ND6_SEND_RA */
  etimer_reset(&uip_ds6_timer_periodic);
    78e6:	480c      	ldr	r0, [pc, #48]	; (7918 <uip_ds6_periodic+0x84>)
    78e8:	4b0c      	ldr	r3, [pc, #48]	; (791c <uip_ds6_periodic+0x88>)
    78ea:	4798      	blx	r3
  return;
}
    78ec:	bd08      	pop	{r3, pc}
    78ee:	46c0      	nop			; (mov r8, r8)
    78f0:	20002b80 	.word	0x20002b80
    78f4:	20000acc 	.word	0x20000acc
    78f8:	0000ed11 	.word	0x0000ed11
    78fc:	0000763d 	.word	0x0000763d
    7900:	20002bd4 	.word	0x20002bd4
    7904:	000072e1 	.word	0x000072e1
    7908:	00006c1d 	.word	0x00006c1d
    790c:	20002b60 	.word	0x20002b60
    7910:	20002cc0 	.word	0x20002cc0
    7914:	00007831 	.word	0x00007831
    7918:	20002cb0 	.word	0x20002cb0
    791c:	0000e925 	.word	0x0000e925

00007920 <uip_ds6_compute_reachable_time>:

#endif /* UIP_CONF_ROUTER */
/*---------------------------------------------------------------------------*/
uint32_t
uip_ds6_compute_reachable_time(void)
{
    7920:	b538      	push	{r3, r4, r5, lr}
  return (uint32_t) (UIP_ND6_MIN_RANDOM_FACTOR
                     (uip_ds6_if.base_reachable_time)) +
    ((uint16_t) (random_rand() << 8) +
    7922:	4c07      	ldr	r4, [pc, #28]	; (7940 <uip_ds6_compute_reachable_time+0x20>)
    7924:	47a0      	blx	r4
    7926:	1c05      	adds	r5, r0, #0
     (uint16_t) random_rand()) %
    7928:	47a0      	blx	r4
    (uint32_t) (UIP_ND6_MAX_RANDOM_FACTOR(uip_ds6_if.base_reachable_time) -
    792a:	4b06      	ldr	r3, [pc, #24]	; (7944 <uip_ds6_compute_reachable_time+0x24>)
    792c:	689c      	ldr	r4, [r3, #8]
uint32_t
uip_ds6_compute_reachable_time(void)
{
  return (uint32_t) (UIP_ND6_MIN_RANDOM_FACTOR
                     (uip_ds6_if.base_reachable_time)) +
    ((uint16_t) (random_rand() << 8) +
    792e:	022d      	lsls	r5, r5, #8
    7930:	b2ad      	uxth	r5, r5
    7932:	1828      	adds	r0, r5, r0
     (uint16_t) random_rand()) %
    7934:	1c21      	adds	r1, r4, #0
    7936:	4b04      	ldr	r3, [pc, #16]	; (7948 <uip_ds6_compute_reachable_time+0x28>)
    7938:	4798      	blx	r3
    (uint32_t) (UIP_ND6_MAX_RANDOM_FACTOR(uip_ds6_if.base_reachable_time) -
    793a:	0864      	lsrs	r4, r4, #1
#endif /* UIP_CONF_ROUTER */
/*---------------------------------------------------------------------------*/
uint32_t
uip_ds6_compute_reachable_time(void)
{
  return (uint32_t) (UIP_ND6_MIN_RANDOM_FACTOR
    793c:	1908      	adds	r0, r1, r4
                     (uip_ds6_if.base_reachable_time)) +
    ((uint16_t) (random_rand() << 8) +
     (uint16_t) random_rand()) %
    (uint32_t) (UIP_ND6_MAX_RANDOM_FACTOR(uip_ds6_if.base_reachable_time) -
                UIP_ND6_MIN_RANDOM_FACTOR(uip_ds6_if.base_reachable_time));
}
    793e:	bd38      	pop	{r3, r4, r5, pc}
    7940:	00005895 	.word	0x00005895
    7944:	20002b68 	.word	0x20002b68
    7948:	00010631 	.word	0x00010631

0000794c <uip_ds6_init>:
static uip_ds6_prefix_t *locprefix;

/*---------------------------------------------------------------------------*/
void
uip_ds6_init(void)
{
    794c:	b5f0      	push	{r4, r5, r6, r7, lr}
    794e:	b083      	sub	sp, #12

  uip_ds6_neighbors_init();
    7950:	4b2e      	ldr	r3, [pc, #184]	; (7a0c <uip_ds6_init+0xc0>)
    7952:	4798      	blx	r3
  uip_ds6_route_init();
    7954:	4b2e      	ldr	r3, [pc, #184]	; (7a10 <uip_ds6_init+0xc4>)
    7956:	4798      	blx	r3

  PRINTF("Init of IPv6 data structures\n\r");
  PRINTF("%u neighbors\n%u default routers\n%u prefixes\n%u routes\n%u unicast addresses\n%u multicast addresses\n%u anycast addresses\n\r",
     NBR_TABLE_MAX_NEIGHBORS, UIP_DS6_DEFRT_NB, UIP_DS6_PREFIX_NB, UIP_DS6_ROUTE_NB,
     UIP_DS6_ADDR_NB, UIP_DS6_MADDR_NB, UIP_DS6_AADDR_NB);
  memset(uip_ds6_prefix_list, 0, sizeof(uip_ds6_prefix_list));
    7958:	482e      	ldr	r0, [pc, #184]	; (7a14 <uip_ds6_init+0xc8>)
    795a:	2100      	movs	r1, #0
    795c:	2260      	movs	r2, #96	; 0x60
    795e:	4d2e      	ldr	r5, [pc, #184]	; (7a18 <uip_ds6_init+0xcc>)
    7960:	47a8      	blx	r5
  memset(&uip_ds6_if, 0, sizeof(uip_ds6_if));
    7962:	4c2e      	ldr	r4, [pc, #184]	; (7a1c <uip_ds6_init+0xd0>)
    7964:	1c20      	adds	r0, r4, #0
    7966:	2100      	movs	r1, #0
    7968:	22e4      	movs	r2, #228	; 0xe4
    796a:	47a8      	blx	r5
  uip_ds6_addr_size = sizeof(struct uip_ds6_addr);
    796c:	221c      	movs	r2, #28
    796e:	4b2c      	ldr	r3, [pc, #176]	; (7a20 <uip_ds6_init+0xd4>)
    7970:	701a      	strb	r2, [r3, #0]
  uip_ds6_netif_addr_list_offset = offsetof(struct uip_ds6_netif, addr_list);
    7972:	3a04      	subs	r2, #4
    7974:	4b2b      	ldr	r3, [pc, #172]	; (7a24 <uip_ds6_init+0xd8>)
    7976:	701a      	strb	r2, [r3, #0]

  /* Set interface parameters */
  uip_ds6_if.link_mtu = UIP_LINK_MTU;
    7978:	23a0      	movs	r3, #160	; 0xa0
    797a:	00db      	lsls	r3, r3, #3
    797c:	6023      	str	r3, [r4, #0]
  uip_ds6_if.cur_hop_limit = UIP_TTL;
    797e:	2340      	movs	r3, #64	; 0x40
    7980:	7123      	strb	r3, [r4, #4]
  uip_ds6_if.base_reachable_time = UIP_ND6_REACHABLE_TIME;
    7982:	4b29      	ldr	r3, [pc, #164]	; (7a28 <uip_ds6_init+0xdc>)
    7984:	60a3      	str	r3, [r4, #8]
  uip_ds6_if.reachable_time = uip_ds6_compute_reachable_time();
    7986:	4b29      	ldr	r3, [pc, #164]	; (7a2c <uip_ds6_init+0xe0>)
    7988:	4798      	blx	r3
    798a:	60e0      	str	r0, [r4, #12]
  uip_ds6_if.retrans_timer = UIP_ND6_RETRANS_TIMER;
    798c:	23fa      	movs	r3, #250	; 0xfa
    798e:	009b      	lsls	r3, r3, #2
    7990:	6123      	str	r3, [r4, #16]
  uip_ds6_if.maxdadns = UIP_ND6_DEF_MAXDADNS;
    7992:	2500      	movs	r5, #0
    7994:	7525      	strb	r5, [r4, #20]

  /* Create link local address, prefix, multicast addresses, anycast addresses */
  uip_create_linklocal_prefix(&loc_fipaddr);
    7996:	4c26      	ldr	r4, [pc, #152]	; (7a30 <uip_ds6_init+0xe4>)
    7998:	4b26      	ldr	r3, [pc, #152]	; (7a34 <uip_ds6_init+0xe8>)
    799a:	8023      	strh	r3, [r4, #0]
    799c:	8065      	strh	r5, [r4, #2]
    799e:	80a5      	strh	r5, [r4, #4]
    79a0:	80e5      	strh	r5, [r4, #6]
#if UIP_CONF_ROUTER
  uip_ds6_prefix_add(&loc_fipaddr, UIP_DEFAULT_PREFIX_LEN, 0, 0, 0, 0);
    79a2:	9500      	str	r5, [sp, #0]
    79a4:	9501      	str	r5, [sp, #4]
    79a6:	1c20      	adds	r0, r4, #0
    79a8:	2140      	movs	r1, #64	; 0x40
    79aa:	2200      	movs	r2, #0
    79ac:	2300      	movs	r3, #0
    79ae:	4e22      	ldr	r6, [pc, #136]	; (7a38 <uip_ds6_init+0xec>)
    79b0:	47b0      	blx	r6
#else /* UIP_CONF_ROUTER */
  uip_ds6_prefix_add(&loc_fipaddr, UIP_DEFAULT_PREFIX_LEN, 0);
#endif /* UIP_CONF_ROUTER */
  uip_ds6_set_addr_iid(&loc_fipaddr, &uip_lladdr);
    79b2:	1c20      	adds	r0, r4, #0
    79b4:	4921      	ldr	r1, [pc, #132]	; (7a3c <uip_ds6_init+0xf0>)
    79b6:	4b22      	ldr	r3, [pc, #136]	; (7a40 <uip_ds6_init+0xf4>)
    79b8:	4798      	blx	r3
  uip_ds6_addr_add(&loc_fipaddr, 0, ADDR_AUTOCONF);
    79ba:	1c20      	adds	r0, r4, #0
    79bc:	2100      	movs	r1, #0
    79be:	2201      	movs	r2, #1
    79c0:	4b20      	ldr	r3, [pc, #128]	; (7a44 <uip_ds6_init+0xf8>)
    79c2:	4798      	blx	r3

  uip_create_linklocal_allnodes_mcast(&loc_fipaddr);
    79c4:	4f20      	ldr	r7, [pc, #128]	; (7a48 <uip_ds6_init+0xfc>)
    79c6:	8027      	strh	r7, [r4, #0]
    79c8:	8065      	strh	r5, [r4, #2]
    79ca:	80a5      	strh	r5, [r4, #4]
    79cc:	80e5      	strh	r5, [r4, #6]
    79ce:	8125      	strh	r5, [r4, #8]
    79d0:	8165      	strh	r5, [r4, #10]
    79d2:	81a5      	strh	r5, [r4, #12]
    79d4:	2380      	movs	r3, #128	; 0x80
    79d6:	005b      	lsls	r3, r3, #1
    79d8:	81e3      	strh	r3, [r4, #14]
  uip_ds6_maddr_add(&loc_fipaddr);
    79da:	1c20      	adds	r0, r4, #0
    79dc:	4e1b      	ldr	r6, [pc, #108]	; (7a4c <uip_ds6_init+0x100>)
    79de:	47b0      	blx	r6
#if UIP_CONF_ROUTER
  uip_create_linklocal_allrouters_mcast(&loc_fipaddr);
    79e0:	8027      	strh	r7, [r4, #0]
    79e2:	8065      	strh	r5, [r4, #2]
    79e4:	80a5      	strh	r5, [r4, #4]
    79e6:	80e5      	strh	r5, [r4, #6]
    79e8:	8125      	strh	r5, [r4, #8]
    79ea:	8165      	strh	r5, [r4, #10]
    79ec:	81a5      	strh	r5, [r4, #12]
    79ee:	2380      	movs	r3, #128	; 0x80
    79f0:	009b      	lsls	r3, r3, #2
    79f2:	81e3      	strh	r3, [r4, #14]
  uip_ds6_maddr_add(&loc_fipaddr);
    79f4:	1c20      	adds	r0, r4, #0
    79f6:	47b0      	blx	r6
#if UIP_ND6_SEND_RA
  stimer_set(&uip_ds6_timer_ra, 2);     /* wait to have a link local IP address */
    79f8:	4815      	ldr	r0, [pc, #84]	; (7a50 <uip_ds6_init+0x104>)
    79fa:	2102      	movs	r1, #2
    79fc:	4b15      	ldr	r3, [pc, #84]	; (7a54 <uip_ds6_init+0x108>)
    79fe:	4798      	blx	r3
#else /* UIP_CONF_ROUTER */
  etimer_set(&uip_ds6_timer_rs,
             random_rand() % (UIP_ND6_MAX_RTR_SOLICITATION_DELAY *
                              CLOCK_SECOND));
#endif /* UIP_CONF_ROUTER */
  etimer_set(&uip_ds6_timer_periodic, UIP_DS6_PERIOD);
    7a00:	4815      	ldr	r0, [pc, #84]	; (7a58 <uip_ds6_init+0x10c>)
    7a02:	210c      	movs	r1, #12
    7a04:	4b15      	ldr	r3, [pc, #84]	; (7a5c <uip_ds6_init+0x110>)
    7a06:	4798      	blx	r3

  return;
}
    7a08:	b003      	add	sp, #12
    7a0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    7a0c:	00006ac5 	.word	0x00006ac5
    7a10:	00006dd1 	.word	0x00006dd1
    7a14:	20002c50 	.word	0x20002c50
    7a18:	00010921 	.word	0x00010921
    7a1c:	20002b68 	.word	0x20002b68
    7a20:	20002c4d 	.word	0x20002c4d
    7a24:	20002c4c 	.word	0x20002c4c
    7a28:	00007530 	.word	0x00007530
    7a2c:	00007921 	.word	0x00007921
    7a30:	20000ad0 	.word	0x20000ad0
    7a34:	ffff80fe 	.word	0xffff80fe
    7a38:	00007391 	.word	0x00007391
    7a3c:	20002ccc 	.word	0x20002ccc
    7a40:	00007695 	.word	0x00007695
    7a44:	00007551 	.word	0x00007551
    7a48:	000002ff 	.word	0x000002ff
    7a4c:	00007505 	.word	0x00007505
    7a50:	20002b60 	.word	0x20002b60
    7a54:	0000ecfd 	.word	0x0000ecfd
    7a58:	20002cb0 	.word	0x20002cb0
    7a5c:	0000e90d 	.word	0x0000e90d

00007a60 <echo_reply_input>:
  tcpip_ipv6_output();
}
/*---------------------------------------------------------------------------*/
static void
echo_reply_input(void)
{
    7a60:	b5f0      	push	{r4, r5, r6, r7, lr}
    7a62:	4647      	mov	r7, r8
    7a64:	b480      	push	{r7}
    7a66:	b086      	sub	sp, #24
  uip_ipaddr_t sender;
#if UIP_CONF_IPV6_RPL
  uint8_t temp_ext_len;
#endif /* UIP_CONF_IPV6_RPL */

  uip_ipaddr_copy(&sender, &UIP_IP_BUF->srcipaddr);
    7a68:	aa02      	add	r2, sp, #8
    7a6a:	4938      	ldr	r1, [pc, #224]	; (7b4c <echo_reply_input+0xec>)
    7a6c:	1c0b      	adds	r3, r1, #0
    7a6e:	3308      	adds	r3, #8
    7a70:	cb31      	ldmia	r3!, {r0, r4, r5}
    7a72:	c231      	stmia	r2!, {r0, r4, r5}
    7a74:	681b      	ldr	r3, [r3, #0]
    7a76:	6013      	str	r3, [r2, #0]
  ttl = UIP_IP_BUF->ttl;
    7a78:	79cb      	ldrb	r3, [r1, #7]
    7a7a:	9301      	str	r3, [sp, #4]

  if(uip_ext_len > 0) {
    7a7c:	4b34      	ldr	r3, [pc, #208]	; (7b50 <echo_reply_input+0xf0>)
    7a7e:	781b      	ldrb	r3, [r3, #0]
    7a80:	2b00      	cmp	r3, #0
    7a82:	d041      	beq.n	7b08 <echo_reply_input+0xa8>
#if UIP_CONF_IPV6_RPL
    if((temp_ext_len = rpl_invert_header())) {
    7a84:	4b33      	ldr	r3, [pc, #204]	; (7b54 <echo_reply_input+0xf4>)
    7a86:	4798      	blx	r3
    7a88:	1e04      	subs	r4, r0, #0
    7a8a:	d023      	beq.n	7ad4 <echo_reply_input+0x74>
      /* If there were other extension headers*/
      UIP_FIRST_EXT_BUF->next = UIP_PROTO_ICMP6;
    7a8c:	203a      	movs	r0, #58	; 0x3a
    7a8e:	2228      	movs	r2, #40	; 0x28
    7a90:	492e      	ldr	r1, [pc, #184]	; (7b4c <echo_reply_input+0xec>)
    7a92:	5488      	strb	r0, [r1, r2]
      if (uip_ext_len != temp_ext_len) {
    7a94:	4a2e      	ldr	r2, [pc, #184]	; (7b50 <echo_reply_input+0xf0>)
    7a96:	7812      	ldrb	r2, [r2, #0]
    7a98:	42a2      	cmp	r2, r4
    7a9a:	d014      	beq.n	7ac6 <echo_reply_input+0x66>
        uip_len -= (uip_ext_len - temp_ext_len);
    7a9c:	492e      	ldr	r1, [pc, #184]	; (7b58 <echo_reply_input+0xf8>)
    7a9e:	880b      	ldrh	r3, [r1, #0]
    7aa0:	1a9b      	subs	r3, r3, r2
    7aa2:	191b      	adds	r3, r3, r4
    7aa4:	b29b      	uxth	r3, r3
    7aa6:	800b      	strh	r3, [r1, #0]
        UIP_IP_BUF->len[0] = ((uip_len - UIP_IPH_LEN) >> 8);
    7aa8:	1c1e      	adds	r6, r3, #0
    7aaa:	3e28      	subs	r6, #40	; 0x28
    7aac:	4927      	ldr	r1, [pc, #156]	; (7b4c <echo_reply_input+0xec>)
    7aae:	1230      	asrs	r0, r6, #8
    7ab0:	7108      	strb	r0, [r1, #4]
        UIP_IP_BUF->len[1] = ((uip_len - UIP_IPH_LEN) & 0xff);
    7ab2:	714e      	strb	r6, [r1, #5]
         * header) to the new location in the reply.  The shift is
         * equal to the length of the remaining extension headers
         * present Note: UIP_ICMP_BUF still points to the echo reply
         * at this stage
         */
        memmove((uint8_t *)UIP_ICMP_BUF + UIP_ICMPH_LEN - (uip_ext_len - temp_ext_len),
    7ab4:	322c      	adds	r2, #44	; 0x2c
    7ab6:	1c20      	adds	r0, r4, #0
    7ab8:	302c      	adds	r0, #44	; 0x2c
    7aba:	1840      	adds	r0, r0, r1
    7abc:	1851      	adds	r1, r2, r1
                (uint8_t *)UIP_ICMP_BUF + UIP_ICMPH_LEN,
                (uip_len - UIP_IPH_LEN - temp_ext_len - UIP_ICMPH_LEN));
    7abe:	1b36      	subs	r6, r6, r4
    7ac0:	1f32      	subs	r2, r6, #4
         * header) to the new location in the reply.  The shift is
         * equal to the length of the remaining extension headers
         * present Note: UIP_ICMP_BUF still points to the echo reply
         * at this stage
         */
        memmove((uint8_t *)UIP_ICMP_BUF + UIP_ICMPH_LEN - (uip_ext_len - temp_ext_len),
    7ac2:	4b26      	ldr	r3, [pc, #152]	; (7b5c <echo_reply_input+0xfc>)
    7ac4:	4798      	blx	r3
                (uint8_t *)UIP_ICMP_BUF + UIP_ICMPH_LEN,
                (uip_len - UIP_IPH_LEN - temp_ext_len - UIP_ICMPH_LEN));
      }
      uip_ext_len = temp_ext_len;
    7ac6:	4b22      	ldr	r3, [pc, #136]	; (7b50 <echo_reply_input+0xf0>)
    7ac8:	701c      	strb	r4, [r3, #0]
      uip_len -= uip_ext_len;
    7aca:	4a23      	ldr	r2, [pc, #140]	; (7b58 <echo_reply_input+0xf8>)
    7acc:	8813      	ldrh	r3, [r2, #0]
    7ace:	1b1c      	subs	r4, r3, r4
    7ad0:	8014      	strh	r4, [r2, #0]
    7ad2:	e019      	b.n	7b08 <echo_reply_input+0xa8>
    } else {
#endif /* UIP_CONF_IPV6_RPL */
      /* If there were extension headers*/
      UIP_IP_BUF->proto = UIP_PROTO_ICMP6;
    7ad4:	4b1d      	ldr	r3, [pc, #116]	; (7b4c <echo_reply_input+0xec>)
    7ad6:	223a      	movs	r2, #58	; 0x3a
    7ad8:	719a      	strb	r2, [r3, #6]
      uip_len -= uip_ext_len;
    7ada:	4c1d      	ldr	r4, [pc, #116]	; (7b50 <echo_reply_input+0xf0>)
    7adc:	7821      	ldrb	r1, [r4, #0]
    7ade:	481e      	ldr	r0, [pc, #120]	; (7b58 <echo_reply_input+0xf8>)
    7ae0:	8802      	ldrh	r2, [r0, #0]
    7ae2:	1a52      	subs	r2, r2, r1
    7ae4:	b292      	uxth	r2, r2
    7ae6:	8002      	strh	r2, [r0, #0]
      UIP_IP_BUF->len[0] = ((uip_len - UIP_IPH_LEN) >> 8);
    7ae8:	1c10      	adds	r0, r2, #0
    7aea:	3828      	subs	r0, #40	; 0x28
    7aec:	1200      	asrs	r0, r0, #8
    7aee:	7118      	strb	r0, [r3, #4]
      UIP_IP_BUF->len[1] = ((uip_len - UIP_IPH_LEN) & 0xff);
    7af0:	1c10      	adds	r0, r2, #0
    7af2:	3828      	subs	r0, #40	; 0x28
    7af4:	7158      	strb	r0, [r3, #5]
      /* move the echo reply payload (starting after the icmp header)
       * to the new location in the reply.  The shift is equal to the
       * length of the extension headers present Note: UIP_ICMP_BUF
       * still points to the echo request at this stage
       */
      memmove((uint8_t *)UIP_ICMP_BUF + UIP_ICMPH_LEN - uip_ext_len,
    7af6:	1c18      	adds	r0, r3, #0
    7af8:	302c      	adds	r0, #44	; 0x2c
              (uint8_t *)UIP_ICMP_BUF + UIP_ICMPH_LEN,
    7afa:	312c      	adds	r1, #44	; 0x2c
      /* move the echo reply payload (starting after the icmp header)
       * to the new location in the reply.  The shift is equal to the
       * length of the extension headers present Note: UIP_ICMP_BUF
       * still points to the echo request at this stage
       */
      memmove((uint8_t *)UIP_ICMP_BUF + UIP_ICMPH_LEN - uip_ext_len,
    7afc:	18c9      	adds	r1, r1, r3
              (uint8_t *)UIP_ICMP_BUF + UIP_ICMPH_LEN,
              (uip_len - UIP_IPH_LEN - UIP_ICMPH_LEN));
    7afe:	3a2c      	subs	r2, #44	; 0x2c
      /* move the echo reply payload (starting after the icmp header)
       * to the new location in the reply.  The shift is equal to the
       * length of the extension headers present Note: UIP_ICMP_BUF
       * still points to the echo request at this stage
       */
      memmove((uint8_t *)UIP_ICMP_BUF + UIP_ICMPH_LEN - uip_ext_len,
    7b00:	4b16      	ldr	r3, [pc, #88]	; (7b5c <echo_reply_input+0xfc>)
    7b02:	4798      	blx	r3
              (uint8_t *)UIP_ICMP_BUF + UIP_ICMPH_LEN,
              (uip_len - UIP_IPH_LEN - UIP_ICMPH_LEN));
      uip_ext_len = 0;
    7b04:	2300      	movs	r3, #0
    7b06:	7023      	strb	r3, [r4, #0]

  /* Call all registered applications to let them know an echo reply
     has been received. */
  {
    struct uip_icmp6_echo_reply_notification *n;
    for(n = list_head(echo_reply_callback_list);
    7b08:	4815      	ldr	r0, [pc, #84]	; (7b60 <echo_reply_input+0x100>)
    7b0a:	4b16      	ldr	r3, [pc, #88]	; (7b64 <echo_reply_input+0x104>)
    7b0c:	4798      	blx	r3
    7b0e:	1e04      	subs	r4, r0, #0
    7b10:	d015      	beq.n	7b3e <echo_reply_input+0xde>
        n != NULL;
        n = list_item_next(n)) {
      if(n->callback != NULL) {
        n->callback(&sender, ttl,
                    (uint8_t *)&UIP_ICMP_BUF[sizeof(struct uip_icmp_hdr)],
    7b12:	4b0f      	ldr	r3, [pc, #60]	; (7b50 <echo_reply_input+0xf0>)
    7b14:	4698      	mov	r8, r3
    struct uip_icmp6_echo_reply_notification *n;
    for(n = list_head(echo_reply_callback_list);
        n != NULL;
        n = list_item_next(n)) {
      if(n->callback != NULL) {
        n->callback(&sender, ttl,
    7b16:	4f0d      	ldr	r7, [pc, #52]	; (7b4c <echo_reply_input+0xec>)
    7b18:	4e0f      	ldr	r6, [pc, #60]	; (7b58 <echo_reply_input+0xf8>)
  {
    struct uip_icmp6_echo_reply_notification *n;
    for(n = list_head(echo_reply_callback_list);
        n != NULL;
        n = list_item_next(n)) {
      if(n->callback != NULL) {
    7b1a:	6865      	ldr	r5, [r4, #4]
    7b1c:	2d00      	cmp	r5, #0
    7b1e:	d009      	beq.n	7b34 <echo_reply_input+0xd4>
        n->callback(&sender, ttl,
                    (uint8_t *)&UIP_ICMP_BUF[sizeof(struct uip_icmp_hdr)],
    7b20:	4643      	mov	r3, r8
    7b22:	781a      	ldrb	r2, [r3, #0]
    7b24:	3238      	adds	r2, #56	; 0x38
    struct uip_icmp6_echo_reply_notification *n;
    for(n = list_head(echo_reply_callback_list);
        n != NULL;
        n = list_item_next(n)) {
      if(n->callback != NULL) {
        n->callback(&sender, ttl,
    7b26:	19d2      	adds	r2, r2, r7
    7b28:	8833      	ldrh	r3, [r6, #0]
    7b2a:	3b2c      	subs	r3, #44	; 0x2c
    7b2c:	b29b      	uxth	r3, r3
    7b2e:	a802      	add	r0, sp, #8
    7b30:	9901      	ldr	r1, [sp, #4]
    7b32:	47a8      	blx	r5
     has been received. */
  {
    struct uip_icmp6_echo_reply_notification *n;
    for(n = list_head(echo_reply_callback_list);
        n != NULL;
        n = list_item_next(n)) {
    7b34:	1c20      	adds	r0, r4, #0
    7b36:	4b0c      	ldr	r3, [pc, #48]	; (7b68 <echo_reply_input+0x108>)
    7b38:	4798      	blx	r3
    7b3a:	1e04      	subs	r4, r0, #0

  /* Call all registered applications to let them know an echo reply
     has been received. */
  {
    struct uip_icmp6_echo_reply_notification *n;
    for(n = list_head(echo_reply_callback_list);
    7b3c:	d1ed      	bne.n	7b1a <echo_reply_input+0xba>
                    uip_len - sizeof(struct uip_icmp_hdr) - UIP_IPH_LEN);
      }
    }
  }

  uip_len = 0;
    7b3e:	2200      	movs	r2, #0
    7b40:	4b05      	ldr	r3, [pc, #20]	; (7b58 <echo_reply_input+0xf8>)
    7b42:	801a      	strh	r2, [r3, #0]
  return;
}
    7b44:	b006      	add	sp, #24
    7b46:	bc04      	pop	{r2}
    7b48:	4690      	mov	r8, r2
    7b4a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    7b4c:	20002cd4 	.word	0x20002cd4
    7b50:	20000b12 	.word	0x20000b12
    7b54:	0000d409 	.word	0x0000d409
    7b58:	20002cc0 	.word	0x20002cc0
    7b5c:	000108f9 	.word	0x000108f9
    7b60:	20000af4 	.word	0x20000af4
    7b64:	00005709 	.word	0x00005709
    7b68:	000057b1 	.word	0x000057b1

00007b6c <echo_request_input>:
  list_add(input_handler_list, handler);
}
/*---------------------------------------------------------------------------*/
static void
echo_request_input(void)
{
    7b6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  PRINTF("to");
  PRINT6ADDR(&UIP_IP_BUF->destipaddr);
  PRINTF("\n\r");

  /* IP header */
  UIP_IP_BUF->ttl = uip_ds6_if.cur_hop_limit;
    7b6e:	4b40      	ldr	r3, [pc, #256]	; (7c70 <echo_request_input+0x104>)
    7b70:	4a40      	ldr	r2, [pc, #256]	; (7c74 <echo_request_input+0x108>)
    7b72:	7912      	ldrb	r2, [r2, #4]
    7b74:	71da      	strb	r2, [r3, #7]

  if(uip_is_addr_mcast(&UIP_IP_BUF->destipaddr)){
    7b76:	7e1b      	ldrb	r3, [r3, #24]
    7b78:	2bff      	cmp	r3, #255	; 0xff
    7b7a:	d10e      	bne.n	7b9a <echo_request_input+0x2e>
    uip_ipaddr_copy(&UIP_IP_BUF->destipaddr, &UIP_IP_BUF->srcipaddr);
    7b7c:	483c      	ldr	r0, [pc, #240]	; (7c70 <echo_request_input+0x104>)
    7b7e:	1c03      	adds	r3, r0, #0
    7b80:	3318      	adds	r3, #24
    7b82:	1c02      	adds	r2, r0, #0
    7b84:	3208      	adds	r2, #8
    7b86:	ca32      	ldmia	r2!, {r1, r4, r5}
    7b88:	c332      	stmia	r3!, {r1, r4, r5}
    7b8a:	6812      	ldr	r2, [r2, #0]
    7b8c:	601a      	str	r2, [r3, #0]
    uip_ds6_select_src(&UIP_IP_BUF->srcipaddr, &UIP_IP_BUF->destipaddr);
    7b8e:	3008      	adds	r0, #8
    7b90:	1c01      	adds	r1, r0, #0
    7b92:	3110      	adds	r1, #16
    7b94:	4b38      	ldr	r3, [pc, #224]	; (7c78 <echo_request_input+0x10c>)
    7b96:	4798      	blx	r3
    7b98:	e014      	b.n	7bc4 <echo_request_input+0x58>
  } else {
    uip_ipaddr_copy(&tmp_ipaddr, &UIP_IP_BUF->srcipaddr);
    7b9a:	4a38      	ldr	r2, [pc, #224]	; (7c7c <echo_request_input+0x110>)
    7b9c:	4b34      	ldr	r3, [pc, #208]	; (7c70 <echo_request_input+0x104>)
    7b9e:	1c19      	adds	r1, r3, #0
    7ba0:	3108      	adds	r1, #8
    7ba2:	1c10      	adds	r0, r2, #0
    7ba4:	c970      	ldmia	r1!, {r4, r5, r6}
    7ba6:	c070      	stmia	r0!, {r4, r5, r6}
    7ba8:	680c      	ldr	r4, [r1, #0]
    7baa:	6004      	str	r4, [r0, #0]
    uip_ipaddr_copy(&UIP_IP_BUF->srcipaddr, &UIP_IP_BUF->destipaddr);
    7bac:	1c19      	adds	r1, r3, #0
    7bae:	3108      	adds	r1, #8
    7bb0:	1c18      	adds	r0, r3, #0
    7bb2:	3018      	adds	r0, #24
    7bb4:	c8e0      	ldmia	r0!, {r5, r6, r7}
    7bb6:	c1e0      	stmia	r1!, {r5, r6, r7}
    7bb8:	6800      	ldr	r0, [r0, #0]
    7bba:	6008      	str	r0, [r1, #0]
    uip_ipaddr_copy(&UIP_IP_BUF->destipaddr, &tmp_ipaddr);
    7bbc:	3318      	adds	r3, #24
    7bbe:	ca23      	ldmia	r2!, {r0, r1, r5}
    7bc0:	c323      	stmia	r3!, {r0, r1, r5}
    7bc2:	601c      	str	r4, [r3, #0]
  }

  if(uip_ext_len > 0) {
    7bc4:	4b2e      	ldr	r3, [pc, #184]	; (7c80 <echo_request_input+0x114>)
    7bc6:	781b      	ldrb	r3, [r3, #0]
    7bc8:	2b00      	cmp	r3, #0
    7bca:	d03d      	beq.n	7c48 <echo_request_input+0xdc>
#if UIP_CONF_IPV6_RPL
    if((temp_ext_len = rpl_invert_header())) {
    7bcc:	4b2d      	ldr	r3, [pc, #180]	; (7c84 <echo_request_input+0x118>)
    7bce:	4798      	blx	r3
    7bd0:	1e04      	subs	r4, r0, #0
    7bd2:	d01f      	beq.n	7c14 <echo_request_input+0xa8>
      /* If there were other extension headers*/
      UIP_FIRST_EXT_BUF->next = UIP_PROTO_ICMP6;
    7bd4:	203a      	movs	r0, #58	; 0x3a
    7bd6:	2228      	movs	r2, #40	; 0x28
    7bd8:	4925      	ldr	r1, [pc, #148]	; (7c70 <echo_request_input+0x104>)
    7bda:	5488      	strb	r0, [r1, r2]
      if (uip_ext_len != temp_ext_len) {
    7bdc:	4a28      	ldr	r2, [pc, #160]	; (7c80 <echo_request_input+0x114>)
    7bde:	7811      	ldrb	r1, [r2, #0]
    7be0:	42a1      	cmp	r1, r4
    7be2:	d014      	beq.n	7c0e <echo_request_input+0xa2>
        uip_len -= (uip_ext_len - temp_ext_len);
    7be4:	4a28      	ldr	r2, [pc, #160]	; (7c88 <echo_request_input+0x11c>)
    7be6:	8813      	ldrh	r3, [r2, #0]
    7be8:	1a5b      	subs	r3, r3, r1
    7bea:	191b      	adds	r3, r3, r4
    7bec:	b29b      	uxth	r3, r3
    7bee:	8013      	strh	r3, [r2, #0]
        UIP_IP_BUF->len[0] = ((uip_len - UIP_IPH_LEN) >> 8);
    7bf0:	1c1a      	adds	r2, r3, #0
    7bf2:	3a28      	subs	r2, #40	; 0x28
    7bf4:	4d1e      	ldr	r5, [pc, #120]	; (7c70 <echo_request_input+0x104>)
    7bf6:	1210      	asrs	r0, r2, #8
    7bf8:	7128      	strb	r0, [r5, #4]
        UIP_IP_BUF->len[1] = ((uip_len - UIP_IPH_LEN) & 0xff);
    7bfa:	716a      	strb	r2, [r5, #5]
        /* move the echo request payload (starting after the icmp header)
         * to the new location in the reply.
         * The shift is equal to the length of the remaining extension headers present
         * Note: UIP_ICMP_BUF still points to the echo request at this stage
         */
      memmove((uint8_t *)UIP_ICMP_BUF + UIP_ICMPH_LEN - (uip_ext_len - temp_ext_len),
    7bfc:	312c      	adds	r1, #44	; 0x2c
    7bfe:	1c20      	adds	r0, r4, #0
    7c00:	302c      	adds	r0, #44	; 0x2c
    7c02:	1940      	adds	r0, r0, r5
    7c04:	1949      	adds	r1, r1, r5
              (uint8_t *)UIP_ICMP_BUF + UIP_ICMPH_LEN,
              (uip_len - UIP_IPH_LEN - temp_ext_len - UIP_ICMPH_LEN));
    7c06:	1b12      	subs	r2, r2, r4
    7c08:	3a04      	subs	r2, #4
        /* move the echo request payload (starting after the icmp header)
         * to the new location in the reply.
         * The shift is equal to the length of the remaining extension headers present
         * Note: UIP_ICMP_BUF still points to the echo request at this stage
         */
      memmove((uint8_t *)UIP_ICMP_BUF + UIP_ICMPH_LEN - (uip_ext_len - temp_ext_len),
    7c0a:	4b20      	ldr	r3, [pc, #128]	; (7c8c <echo_request_input+0x120>)
    7c0c:	4798      	blx	r3
              (uint8_t *)UIP_ICMP_BUF + UIP_ICMPH_LEN,
              (uip_len - UIP_IPH_LEN - temp_ext_len - UIP_ICMPH_LEN));
      }
      uip_ext_len = temp_ext_len;
    7c0e:	4b1c      	ldr	r3, [pc, #112]	; (7c80 <echo_request_input+0x114>)
    7c10:	701c      	strb	r4, [r3, #0]
    7c12:	e019      	b.n	7c48 <echo_request_input+0xdc>
    } else {
#endif /* UIP_CONF_IPV6_RPL */
      /* If there were extension headers*/
      UIP_IP_BUF->proto = UIP_PROTO_ICMP6;
    7c14:	4b16      	ldr	r3, [pc, #88]	; (7c70 <echo_request_input+0x104>)
    7c16:	223a      	movs	r2, #58	; 0x3a
    7c18:	719a      	strb	r2, [r3, #6]
      uip_len -= uip_ext_len;
    7c1a:	4c19      	ldr	r4, [pc, #100]	; (7c80 <echo_request_input+0x114>)
    7c1c:	7821      	ldrb	r1, [r4, #0]
    7c1e:	481a      	ldr	r0, [pc, #104]	; (7c88 <echo_request_input+0x11c>)
    7c20:	8802      	ldrh	r2, [r0, #0]
    7c22:	1a52      	subs	r2, r2, r1
    7c24:	b292      	uxth	r2, r2
    7c26:	8002      	strh	r2, [r0, #0]
      UIP_IP_BUF->len[0] = ((uip_len - UIP_IPH_LEN) >> 8);
    7c28:	1c10      	adds	r0, r2, #0
    7c2a:	3828      	subs	r0, #40	; 0x28
    7c2c:	1200      	asrs	r0, r0, #8
    7c2e:	7118      	strb	r0, [r3, #4]
      UIP_IP_BUF->len[1] = ((uip_len - UIP_IPH_LEN) & 0xff);
    7c30:	1c10      	adds	r0, r2, #0
    7c32:	3828      	subs	r0, #40	; 0x28
    7c34:	7158      	strb	r0, [r3, #5]
      /* move the echo request payload (starting after the icmp header)
       * to the new location in the reply.
       * The shift is equal to the length of the extension headers present
       * Note: UIP_ICMP_BUF still points to the echo request at this stage
       */
      memmove((uint8_t *)UIP_ICMP_BUF + UIP_ICMPH_LEN - uip_ext_len,
    7c36:	1c18      	adds	r0, r3, #0
    7c38:	302c      	adds	r0, #44	; 0x2c
              (uint8_t *)UIP_ICMP_BUF + UIP_ICMPH_LEN,
    7c3a:	312c      	adds	r1, #44	; 0x2c
      /* move the echo request payload (starting after the icmp header)
       * to the new location in the reply.
       * The shift is equal to the length of the extension headers present
       * Note: UIP_ICMP_BUF still points to the echo request at this stage
       */
      memmove((uint8_t *)UIP_ICMP_BUF + UIP_ICMPH_LEN - uip_ext_len,
    7c3c:	18c9      	adds	r1, r1, r3
              (uint8_t *)UIP_ICMP_BUF + UIP_ICMPH_LEN,
              (uip_len - UIP_IPH_LEN - UIP_ICMPH_LEN));
    7c3e:	3a2c      	subs	r2, #44	; 0x2c
      /* move the echo request payload (starting after the icmp header)
       * to the new location in the reply.
       * The shift is equal to the length of the extension headers present
       * Note: UIP_ICMP_BUF still points to the echo request at this stage
       */
      memmove((uint8_t *)UIP_ICMP_BUF + UIP_ICMPH_LEN - uip_ext_len,
    7c40:	4b12      	ldr	r3, [pc, #72]	; (7c8c <echo_request_input+0x120>)
    7c42:	4798      	blx	r3
              (uint8_t *)UIP_ICMP_BUF + UIP_ICMPH_LEN,
              (uip_len - UIP_IPH_LEN - UIP_ICMPH_LEN));
      uip_ext_len = 0;
    7c44:	2300      	movs	r3, #0
    7c46:	7023      	strb	r3, [r4, #0]
  /* Below is important for the correctness of UIP_ICMP_BUF and the
   * checksum
   */

  /* Note: now UIP_ICMP_BUF points to the beginning of the echo reply */
  UIP_ICMP_BUF->type = ICMP6_ECHO_REPLY;
    7c48:	4b0d      	ldr	r3, [pc, #52]	; (7c80 <echo_request_input+0x114>)
    7c4a:	781c      	ldrb	r4, [r3, #0]
    7c4c:	3428      	adds	r4, #40	; 0x28
    7c4e:	4b08      	ldr	r3, [pc, #32]	; (7c70 <echo_request_input+0x104>)
    7c50:	18e4      	adds	r4, r4, r3
    7c52:	2381      	movs	r3, #129	; 0x81
    7c54:	7023      	strb	r3, [r4, #0]
  UIP_ICMP_BUF->icode = 0;
    7c56:	2300      	movs	r3, #0
    7c58:	7063      	strb	r3, [r4, #1]
  UIP_ICMP_BUF->icmpchksum = 0;
    7c5a:	70a3      	strb	r3, [r4, #2]
    7c5c:	70e3      	strb	r3, [r4, #3]
  UIP_ICMP_BUF->icmpchksum = ~uip_icmp6chksum();
    7c5e:	4b0c      	ldr	r3, [pc, #48]	; (7c90 <echo_request_input+0x124>)
    7c60:	4798      	blx	r3
    7c62:	43c0      	mvns	r0, r0
    7c64:	b280      	uxth	r0, r0
    7c66:	70a0      	strb	r0, [r4, #2]
    7c68:	0a00      	lsrs	r0, r0, #8
    7c6a:	70e0      	strb	r0, [r4, #3]
  PRINTF("from");
  PRINT6ADDR(&UIP_IP_BUF->srcipaddr);
  PRINTF("\n\r");
  UIP_STAT(++uip_stat.icmp.sent);
  return;
}
    7c6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    7c6e:	46c0      	nop			; (mov r8, r8)
    7c70:	20002cd4 	.word	0x20002cd4
    7c74:	20002b68 	.word	0x20002b68
    7c78:	0000770d 	.word	0x0000770d
    7c7c:	20000ae4 	.word	0x20000ae4
    7c80:	20000b12 	.word	0x20000b12
    7c84:	0000d409 	.word	0x0000d409
    7c88:	20002cc0 	.word	0x20002cc0
    7c8c:	000108f9 	.word	0x000108f9
    7c90:	00008bd1 	.word	0x00008bd1

00007c94 <uip_icmp6_input>:
  return NULL;
}
/*---------------------------------------------------------------------------*/
uint8_t
uip_icmp6_input(uint8_t type, uint8_t icode)
{
    7c94:	b570      	push	{r4, r5, r6, lr}
    7c96:	1c04      	adds	r4, r0, #0
    7c98:	1c0e      	adds	r6, r1, #0
static uip_icmp6_input_handler_t *
input_handler_lookup(uint8_t type, uint8_t icode)
{
  uip_icmp6_input_handler_t *handler = NULL;

  for(handler = list_head(input_handler_list);
    7c9a:	4810      	ldr	r0, [pc, #64]	; (7cdc <uip_icmp6_input+0x48>)
    7c9c:	4b10      	ldr	r3, [pc, #64]	; (7ce0 <uip_icmp6_input+0x4c>)
    7c9e:	4798      	blx	r3
    7ca0:	2800      	cmp	r0, #0
    7ca2:	d018      	beq.n	7cd6 <uip_icmp6_input+0x42>
      handler != NULL;
      handler = list_item_next(handler)) {
    7ca4:	4d0f      	ldr	r5, [pc, #60]	; (7ce4 <uip_icmp6_input+0x50>)
    if(handler->type == type &&
    7ca6:	7903      	ldrb	r3, [r0, #4]
    7ca8:	42a3      	cmp	r3, r4
    7caa:	d108      	bne.n	7cbe <uip_icmp6_input+0x2a>
       (handler->icode == icode ||
    7cac:	7943      	ldrb	r3, [r0, #5]
  uip_icmp6_input_handler_t *handler = NULL;

  for(handler = list_head(input_handler_list);
      handler != NULL;
      handler = list_item_next(handler)) {
    if(handler->type == type &&
    7cae:	429e      	cmp	r6, r3
    7cb0:	d001      	beq.n	7cb6 <uip_icmp6_input+0x22>
       (handler->icode == icode ||
    7cb2:	2bff      	cmp	r3, #255	; 0xff
    7cb4:	d103      	bne.n	7cbe <uip_icmp6_input+0x2a>
uip_icmp6_input(uint8_t type, uint8_t icode)
{
  uip_icmp6_input_handler_t *handler = input_handler_lookup(type, icode);

  if(handler == NULL) {
    return UIP_ICMP6_INPUT_ERROR;
    7cb6:	2301      	movs	r3, #1
uint8_t
uip_icmp6_input(uint8_t type, uint8_t icode)
{
  uip_icmp6_input_handler_t *handler = input_handler_lookup(type, icode);

  if(handler == NULL) {
    7cb8:	2800      	cmp	r0, #0
    7cba:	d104      	bne.n	7cc6 <uip_icmp6_input+0x32>
    7cbc:	e00c      	b.n	7cd8 <uip_icmp6_input+0x44>
{
  uip_icmp6_input_handler_t *handler = NULL;

  for(handler = list_head(input_handler_list);
      handler != NULL;
      handler = list_item_next(handler)) {
    7cbe:	47a8      	blx	r5
static uip_icmp6_input_handler_t *
input_handler_lookup(uint8_t type, uint8_t icode)
{
  uip_icmp6_input_handler_t *handler = NULL;

  for(handler = list_head(input_handler_list);
    7cc0:	2800      	cmp	r0, #0
    7cc2:	d1f0      	bne.n	7ca6 <uip_icmp6_input+0x12>
    7cc4:	e007      	b.n	7cd6 <uip_icmp6_input+0x42>

  if(handler == NULL) {
    return UIP_ICMP6_INPUT_ERROR;
  }

  if(handler->handler == NULL) {
    7cc6:	6883      	ldr	r3, [r0, #8]
    7cc8:	2b00      	cmp	r3, #0
    7cca:	d002      	beq.n	7cd2 <uip_icmp6_input+0x3e>
    return UIP_ICMP6_INPUT_ERROR;
  }

  handler->handler();
    7ccc:	4798      	blx	r3
  return UIP_ICMP6_INPUT_SUCCESS;
    7cce:	2300      	movs	r3, #0
    7cd0:	e002      	b.n	7cd8 <uip_icmp6_input+0x44>
  if(handler == NULL) {
    return UIP_ICMP6_INPUT_ERROR;
  }

  if(handler->handler == NULL) {
    return UIP_ICMP6_INPUT_ERROR;
    7cd2:	2301      	movs	r3, #1
    7cd4:	e000      	b.n	7cd8 <uip_icmp6_input+0x44>
uip_icmp6_input(uint8_t type, uint8_t icode)
{
  uip_icmp6_input_handler_t *handler = input_handler_lookup(type, icode);

  if(handler == NULL) {
    return UIP_ICMP6_INPUT_ERROR;
    7cd6:	2301      	movs	r3, #1
    return UIP_ICMP6_INPUT_ERROR;
  }

  handler->handler();
  return UIP_ICMP6_INPUT_SUCCESS;
}
    7cd8:	1c18      	adds	r0, r3, #0
    7cda:	bd70      	pop	{r4, r5, r6, pc}
    7cdc:	20000af8 	.word	0x20000af8
    7ce0:	00005709 	.word	0x00005709
    7ce4:	000057b1 	.word	0x000057b1

00007ce8 <uip_icmp6_register_input_handler>:
/*---------------------------------------------------------------------------*/
void
uip_icmp6_register_input_handler(uip_icmp6_input_handler_t *handler)
{
    7ce8:	b508      	push	{r3, lr}
    7cea:	1c01      	adds	r1, r0, #0
  list_add(input_handler_list, handler);
    7cec:	4801      	ldr	r0, [pc, #4]	; (7cf4 <uip_icmp6_register_input_handler+0xc>)
    7cee:	4b02      	ldr	r3, [pc, #8]	; (7cf8 <uip_icmp6_register_input_handler+0x10>)
    7cf0:	4798      	blx	r3
}
    7cf2:	bd08      	pop	{r3, pc}
    7cf4:	20000af8 	.word	0x20000af8
    7cf8:	00005759 	.word	0x00005759

00007cfc <uip_icmp6_error_output>:
  UIP_STAT(++uip_stat.icmp.sent);
  return;
}
/*---------------------------------------------------------------------------*/
void
uip_icmp6_error_output(uint8_t type, uint8_t code, uint32_t param) {
    7cfc:	b5f0      	push	{r4, r5, r6, r7, lr}
    7cfe:	4647      	mov	r7, r8
    7d00:	b480      	push	{r7}
    7d02:	b082      	sub	sp, #8
    7d04:	1c06      	adds	r6, r0, #0
    7d06:	9100      	str	r1, [sp, #0]
    7d08:	9201      	str	r2, [sp, #4]

 /* check if originating packet is not an ICMP error*/
  if (uip_ext_len) {
    7d0a:	4b62      	ldr	r3, [pc, #392]	; (7e94 <uip_icmp6_error_output+0x198>)
    7d0c:	781b      	ldrb	r3, [r3, #0]
    7d0e:	2b00      	cmp	r3, #0
    7d10:	d008      	beq.n	7d24 <uip_icmp6_error_output+0x28>
    if(UIP_EXT_BUF->next == UIP_PROTO_ICMP6 && UIP_ICMP_BUF->type < 128){
    7d12:	3328      	adds	r3, #40	; 0x28
    7d14:	4a60      	ldr	r2, [pc, #384]	; (7e98 <uip_icmp6_error_output+0x19c>)
    7d16:	5cd3      	ldrb	r3, [r2, r3]
    7d18:	2b3a      	cmp	r3, #58	; 0x3a
    7d1a:	d110      	bne.n	7d3e <uip_icmp6_error_output+0x42>
      uip_len = 0;
    7d1c:	2200      	movs	r2, #0
    7d1e:	4b5f      	ldr	r3, [pc, #380]	; (7e9c <uip_icmp6_error_output+0x1a0>)
    7d20:	801a      	strh	r2, [r3, #0]
      return;
    7d22:	e0b3      	b.n	7e8c <uip_icmp6_error_output+0x190>
    }
  } else {
    if(UIP_IP_BUF->proto == UIP_PROTO_ICMP6 && UIP_ICMP_BUF->type < 128){
    7d24:	4b5c      	ldr	r3, [pc, #368]	; (7e98 <uip_icmp6_error_output+0x19c>)
    7d26:	799b      	ldrb	r3, [r3, #6]
    7d28:	2b3a      	cmp	r3, #58	; 0x3a
    7d2a:	d108      	bne.n	7d3e <uip_icmp6_error_output+0x42>
    7d2c:	3b12      	subs	r3, #18
    7d2e:	4a5a      	ldr	r2, [pc, #360]	; (7e98 <uip_icmp6_error_output+0x19c>)
    7d30:	5cd3      	ldrb	r3, [r2, r3]
    7d32:	2b7f      	cmp	r3, #127	; 0x7f
    7d34:	d803      	bhi.n	7d3e <uip_icmp6_error_output+0x42>
      uip_len = 0;
    7d36:	2200      	movs	r2, #0
    7d38:	4b58      	ldr	r3, [pc, #352]	; (7e9c <uip_icmp6_error_output+0x1a0>)
    7d3a:	801a      	strh	r2, [r3, #0]
      return;
    7d3c:	e0a6      	b.n	7e8c <uip_icmp6_error_output+0x190>
    }
  }

#if UIP_CONF_IPV6_RPL
  uip_ext_len = rpl_invert_header();
    7d3e:	4b58      	ldr	r3, [pc, #352]	; (7ea0 <uip_icmp6_error_output+0x1a4>)
    7d40:	4798      	blx	r3
    7d42:	1c07      	adds	r7, r0, #0
    7d44:	4b53      	ldr	r3, [pc, #332]	; (7e94 <uip_icmp6_error_output+0x198>)
    7d46:	7018      	strb	r0, [r3, #0]
#else /* UIP_CONF_IPV6_RPL */
  uip_ext_len = 0;
#endif /* UIP_CONF_IPV6_RPL */

  /* remember data of original packet before shifting */
  uip_ipaddr_copy(&tmp_ipaddr, &UIP_IP_BUF->destipaddr);
    7d48:	4a56      	ldr	r2, [pc, #344]	; (7ea4 <uip_icmp6_error_output+0x1a8>)
    7d4a:	4b53      	ldr	r3, [pc, #332]	; (7e98 <uip_icmp6_error_output+0x19c>)
    7d4c:	3318      	adds	r3, #24
    7d4e:	cb32      	ldmia	r3!, {r1, r4, r5}
    7d50:	c232      	stmia	r2!, {r1, r4, r5}
    7d52:	681b      	ldr	r3, [r3, #0]
    7d54:	6013      	str	r3, [r2, #0]

  uip_len += UIP_IPICMPH_LEN + UIP_ICMP6_ERROR_LEN;
    7d56:	4b51      	ldr	r3, [pc, #324]	; (7e9c <uip_icmp6_error_output+0x1a0>)
    7d58:	881b      	ldrh	r3, [r3, #0]
    7d5a:	3330      	adds	r3, #48	; 0x30
    7d5c:	b29b      	uxth	r3, r3

  if(uip_len > UIP_LINK_MTU)
    7d5e:	22a0      	movs	r2, #160	; 0xa0
    7d60:	00d2      	lsls	r2, r2, #3
    7d62:	4293      	cmp	r3, r2
    7d64:	d802      	bhi.n	7d6c <uip_icmp6_error_output+0x70>
#endif /* UIP_CONF_IPV6_RPL */

  /* remember data of original packet before shifting */
  uip_ipaddr_copy(&tmp_ipaddr, &UIP_IP_BUF->destipaddr);

  uip_len += UIP_IPICMPH_LEN + UIP_ICMP6_ERROR_LEN;
    7d66:	4a4d      	ldr	r2, [pc, #308]	; (7e9c <uip_icmp6_error_output+0x1a0>)
    7d68:	8013      	strh	r3, [r2, #0]
    7d6a:	e003      	b.n	7d74 <uip_icmp6_error_output+0x78>

  if(uip_len > UIP_LINK_MTU)
    uip_len = UIP_LINK_MTU;
    7d6c:	22a0      	movs	r2, #160	; 0xa0
    7d6e:	00d2      	lsls	r2, r2, #3
    7d70:	4b4a      	ldr	r3, [pc, #296]	; (7e9c <uip_icmp6_error_output+0x1a0>)
    7d72:	801a      	strh	r2, [r3, #0]

  memmove((uint8_t *)UIP_ICMP6_ERROR_BUF + uip_ext_len + UIP_ICMP6_ERROR_LEN,
    7d74:	0041      	lsls	r1, r0, #1
    7d76:	3130      	adds	r1, #48	; 0x30
    7d78:	4d47      	ldr	r5, [pc, #284]	; (7e98 <uip_icmp6_error_output+0x19c>)
    7d7a:	1949      	adds	r1, r1, r5
          (void *)UIP_IP_BUF, uip_len - UIP_IPICMPH_LEN - uip_ext_len - UIP_ICMP6_ERROR_LEN);
    7d7c:	4b47      	ldr	r3, [pc, #284]	; (7e9c <uip_icmp6_error_output+0x1a0>)
    7d7e:	881b      	ldrh	r3, [r3, #0]
    7d80:	1a1a      	subs	r2, r3, r0
    7d82:	3a30      	subs	r2, #48	; 0x30
  uip_len += UIP_IPICMPH_LEN + UIP_ICMP6_ERROR_LEN;

  if(uip_len > UIP_LINK_MTU)
    uip_len = UIP_LINK_MTU;

  memmove((uint8_t *)UIP_ICMP6_ERROR_BUF + uip_ext_len + UIP_ICMP6_ERROR_LEN,
    7d84:	1c08      	adds	r0, r1, #0
    7d86:	1c29      	adds	r1, r5, #0
    7d88:	4b47      	ldr	r3, [pc, #284]	; (7ea8 <uip_icmp6_error_output+0x1ac>)
    7d8a:	4798      	blx	r3
          (void *)UIP_IP_BUF, uip_len - UIP_IPICMPH_LEN - uip_ext_len - UIP_ICMP6_ERROR_LEN);

  UIP_IP_BUF->vtc = 0x60;
    7d8c:	2360      	movs	r3, #96	; 0x60
    7d8e:	702b      	strb	r3, [r5, #0]
  UIP_IP_BUF->tcflow = 0;
    7d90:	2300      	movs	r3, #0
    7d92:	706b      	strb	r3, [r5, #1]
  UIP_IP_BUF->flow = 0;
    7d94:	806b      	strh	r3, [r5, #2]
  if (uip_ext_len) {
    7d96:	2f00      	cmp	r7, #0
    7d98:	d004      	beq.n	7da4 <uip_icmp6_error_output+0xa8>
    UIP_FIRST_EXT_BUF->next = UIP_PROTO_ICMP6;
    7d9a:	213a      	movs	r1, #58	; 0x3a
    7d9c:	3328      	adds	r3, #40	; 0x28
    7d9e:	4a3e      	ldr	r2, [pc, #248]	; (7e98 <uip_icmp6_error_output+0x19c>)
    7da0:	54d1      	strb	r1, [r2, r3]
    7da2:	e002      	b.n	7daa <uip_icmp6_error_output+0xae>
  } else {
    UIP_IP_BUF->proto = UIP_PROTO_ICMP6;
    7da4:	223a      	movs	r2, #58	; 0x3a
    7da6:	4b3c      	ldr	r3, [pc, #240]	; (7e98 <uip_icmp6_error_output+0x19c>)
    7da8:	719a      	strb	r2, [r3, #6]
  }
  UIP_IP_BUF->ttl = uip_ds6_if.cur_hop_limit;
    7daa:	4b3b      	ldr	r3, [pc, #236]	; (7e98 <uip_icmp6_error_output+0x19c>)
    7dac:	4a3f      	ldr	r2, [pc, #252]	; (7eac <uip_icmp6_error_output+0x1b0>)
    7dae:	7912      	ldrb	r2, [r2, #4]
    7db0:	71da      	strb	r2, [r3, #7]

  /* the source should not be unspecified nor multicast, the check for
     multicast is done in uip_process */
  if(uip_is_addr_unspecified(&UIP_IP_BUF->srcipaddr)){
    7db2:	891b      	ldrh	r3, [r3, #8]
    7db4:	2b00      	cmp	r3, #0
    7db6:	d11f      	bne.n	7df8 <uip_icmp6_error_output+0xfc>
    7db8:	4b37      	ldr	r3, [pc, #220]	; (7e98 <uip_icmp6_error_output+0x19c>)
    7dba:	895b      	ldrh	r3, [r3, #10]
    7dbc:	2b00      	cmp	r3, #0
    7dbe:	d11b      	bne.n	7df8 <uip_icmp6_error_output+0xfc>
    7dc0:	4b35      	ldr	r3, [pc, #212]	; (7e98 <uip_icmp6_error_output+0x19c>)
    7dc2:	899b      	ldrh	r3, [r3, #12]
    7dc4:	2b00      	cmp	r3, #0
    7dc6:	d117      	bne.n	7df8 <uip_icmp6_error_output+0xfc>
    7dc8:	4b33      	ldr	r3, [pc, #204]	; (7e98 <uip_icmp6_error_output+0x19c>)
    7dca:	89db      	ldrh	r3, [r3, #14]
    7dcc:	2b00      	cmp	r3, #0
    7dce:	d113      	bne.n	7df8 <uip_icmp6_error_output+0xfc>
    7dd0:	4b31      	ldr	r3, [pc, #196]	; (7e98 <uip_icmp6_error_output+0x19c>)
    7dd2:	8a1b      	ldrh	r3, [r3, #16]
    7dd4:	2b00      	cmp	r3, #0
    7dd6:	d10f      	bne.n	7df8 <uip_icmp6_error_output+0xfc>
    7dd8:	4b2f      	ldr	r3, [pc, #188]	; (7e98 <uip_icmp6_error_output+0x19c>)
    7dda:	8a5b      	ldrh	r3, [r3, #18]
    7ddc:	2b00      	cmp	r3, #0
    7dde:	d10b      	bne.n	7df8 <uip_icmp6_error_output+0xfc>
    7de0:	4b2d      	ldr	r3, [pc, #180]	; (7e98 <uip_icmp6_error_output+0x19c>)
    7de2:	8a9b      	ldrh	r3, [r3, #20]
    7de4:	2b00      	cmp	r3, #0
    7de6:	d107      	bne.n	7df8 <uip_icmp6_error_output+0xfc>
    7de8:	4b2b      	ldr	r3, [pc, #172]	; (7e98 <uip_icmp6_error_output+0x19c>)
    7dea:	8adb      	ldrh	r3, [r3, #22]
    7dec:	2b00      	cmp	r3, #0
    7dee:	d103      	bne.n	7df8 <uip_icmp6_error_output+0xfc>
    uip_len = 0;
    7df0:	2200      	movs	r2, #0
    7df2:	4b2a      	ldr	r3, [pc, #168]	; (7e9c <uip_icmp6_error_output+0x1a0>)
    7df4:	801a      	strh	r2, [r3, #0]
    return;
    7df6:	e049      	b.n	7e8c <uip_icmp6_error_output+0x190>
  }

  uip_ipaddr_copy(&UIP_IP_BUF->destipaddr, &UIP_IP_BUF->srcipaddr);
    7df8:	4b27      	ldr	r3, [pc, #156]	; (7e98 <uip_icmp6_error_output+0x19c>)
    7dfa:	1c1a      	adds	r2, r3, #0
    7dfc:	3218      	adds	r2, #24
    7dfe:	3308      	adds	r3, #8
    7e00:	cb13      	ldmia	r3!, {r0, r1, r4}
    7e02:	c213      	stmia	r2!, {r0, r1, r4}
    7e04:	681b      	ldr	r3, [r3, #0]
    7e06:	6013      	str	r3, [r2, #0]

  if(uip_is_addr_mcast(&tmp_ipaddr)){
    7e08:	4b26      	ldr	r3, [pc, #152]	; (7ea4 <uip_icmp6_error_output+0x1a8>)
    7e0a:	781b      	ldrb	r3, [r3, #0]
    7e0c:	2bff      	cmp	r3, #255	; 0xff
    7e0e:	d10d      	bne.n	7e2c <uip_icmp6_error_output+0x130>
    if(type == ICMP6_PARAM_PROB && code == ICMP6_PARAMPROB_OPTION){
    7e10:	2e04      	cmp	r6, #4
    7e12:	d107      	bne.n	7e24 <uip_icmp6_error_output+0x128>
    7e14:	9b00      	ldr	r3, [sp, #0]
    7e16:	2b02      	cmp	r3, #2
    7e18:	d104      	bne.n	7e24 <uip_icmp6_error_output+0x128>
      uip_ds6_select_src(&UIP_IP_BUF->srcipaddr, &tmp_ipaddr);
    7e1a:	4825      	ldr	r0, [pc, #148]	; (7eb0 <uip_icmp6_error_output+0x1b4>)
    7e1c:	4921      	ldr	r1, [pc, #132]	; (7ea4 <uip_icmp6_error_output+0x1a8>)
    7e1e:	4b25      	ldr	r3, [pc, #148]	; (7eb4 <uip_icmp6_error_output+0x1b8>)
    7e20:	4798      	blx	r3
    7e22:	e007      	b.n	7e34 <uip_icmp6_error_output+0x138>
    } else {
      uip_len = 0;
    7e24:	2200      	movs	r2, #0
    7e26:	4b1d      	ldr	r3, [pc, #116]	; (7e9c <uip_icmp6_error_output+0x1a0>)
    7e28:	801a      	strh	r2, [r3, #0]
      return;
    7e2a:	e02f      	b.n	7e8c <uip_icmp6_error_output+0x190>
    }
  } else {
#if UIP_CONF_ROUTER
    /* need to pick a source that corresponds to this node */
    uip_ds6_select_src(&UIP_IP_BUF->srcipaddr, &tmp_ipaddr);
    7e2c:	4820      	ldr	r0, [pc, #128]	; (7eb0 <uip_icmp6_error_output+0x1b4>)
    7e2e:	491d      	ldr	r1, [pc, #116]	; (7ea4 <uip_icmp6_error_output+0x1a8>)
    7e30:	4b20      	ldr	r3, [pc, #128]	; (7eb4 <uip_icmp6_error_output+0x1b8>)
    7e32:	4798      	blx	r3
#else
    uip_ipaddr_copy(&UIP_IP_BUF->srcipaddr, &tmp_ipaddr);
#endif
  }

  UIP_ICMP_BUF->type = type;
    7e34:	4d17      	ldr	r5, [pc, #92]	; (7e94 <uip_icmp6_error_output+0x198>)
    7e36:	782b      	ldrb	r3, [r5, #0]
    7e38:	4698      	mov	r8, r3
    7e3a:	3328      	adds	r3, #40	; 0x28
    7e3c:	4f16      	ldr	r7, [pc, #88]	; (7e98 <uip_icmp6_error_output+0x19c>)
    7e3e:	19db      	adds	r3, r3, r7
    7e40:	701e      	strb	r6, [r3, #0]
  UIP_ICMP_BUF->icode = code;
    7e42:	466a      	mov	r2, sp
    7e44:	7812      	ldrb	r2, [r2, #0]
    7e46:	705a      	strb	r2, [r3, #1]
  UIP_ICMP6_ERROR_BUF->param = uip_htonl(param);
    7e48:	9801      	ldr	r0, [sp, #4]
    7e4a:	4b1b      	ldr	r3, [pc, #108]	; (7eb8 <uip_icmp6_error_output+0x1bc>)
    7e4c:	4798      	blx	r3
    7e4e:	4643      	mov	r3, r8
    7e50:	332c      	adds	r3, #44	; 0x2c
    7e52:	19db      	adds	r3, r3, r7
    7e54:	7018      	strb	r0, [r3, #0]
    7e56:	0a02      	lsrs	r2, r0, #8
    7e58:	705a      	strb	r2, [r3, #1]
    7e5a:	0c02      	lsrs	r2, r0, #16
    7e5c:	709a      	strb	r2, [r3, #2]
    7e5e:	0e00      	lsrs	r0, r0, #24
    7e60:	70d8      	strb	r0, [r3, #3]
  UIP_IP_BUF->len[0] = ((uip_len - UIP_IPH_LEN) >> 8);
    7e62:	4b0e      	ldr	r3, [pc, #56]	; (7e9c <uip_icmp6_error_output+0x1a0>)
    7e64:	881b      	ldrh	r3, [r3, #0]
    7e66:	1c1a      	adds	r2, r3, #0
    7e68:	3a28      	subs	r2, #40	; 0x28
    7e6a:	1212      	asrs	r2, r2, #8
    7e6c:	713a      	strb	r2, [r7, #4]
  UIP_IP_BUF->len[1] = ((uip_len - UIP_IPH_LEN) & 0xff);
    7e6e:	3b28      	subs	r3, #40	; 0x28
    7e70:	717b      	strb	r3, [r7, #5]
  UIP_ICMP_BUF->icmpchksum = 0;
    7e72:	782b      	ldrb	r3, [r5, #0]
    7e74:	3328      	adds	r3, #40	; 0x28
    7e76:	19df      	adds	r7, r3, r7
    7e78:	2300      	movs	r3, #0
    7e7a:	70bb      	strb	r3, [r7, #2]
    7e7c:	70fb      	strb	r3, [r7, #3]
  UIP_ICMP_BUF->icmpchksum = ~uip_icmp6chksum();
    7e7e:	4b0f      	ldr	r3, [pc, #60]	; (7ebc <uip_icmp6_error_output+0x1c0>)
    7e80:	4798      	blx	r3
    7e82:	43c0      	mvns	r0, r0
    7e84:	b280      	uxth	r0, r0
    7e86:	70b8      	strb	r0, [r7, #2]
    7e88:	0a00      	lsrs	r0, r0, #8
    7e8a:	70f8      	strb	r0, [r7, #3]
  PRINT6ADDR(&UIP_IP_BUF->destipaddr);
  PRINTF("from");
  PRINT6ADDR(&UIP_IP_BUF->srcipaddr);
  PRINTF("\n\r");
  return;
}
    7e8c:	b002      	add	sp, #8
    7e8e:	bc04      	pop	{r2}
    7e90:	4690      	mov	r8, r2
    7e92:	bdf0      	pop	{r4, r5, r6, r7, pc}
    7e94:	20000b12 	.word	0x20000b12
    7e98:	20002cd4 	.word	0x20002cd4
    7e9c:	20002cc0 	.word	0x20002cc0
    7ea0:	0000d409 	.word	0x0000d409
    7ea4:	20000ae4 	.word	0x20000ae4
    7ea8:	000108f9 	.word	0x000108f9
    7eac:	20002b68 	.word	0x20002b68
    7eb0:	20002cdc 	.word	0x20002cdc
    7eb4:	0000770d 	.word	0x0000770d
    7eb8:	00009fcd 	.word	0x00009fcd
    7ebc:	00008bd1 	.word	0x00008bd1

00007ec0 <uip_icmp6_send>:

/*---------------------------------------------------------------------------*/
void
uip_icmp6_send(const uip_ipaddr_t *dest, int type, int code, int payload_len)
{
    7ec0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    7ec2:	464f      	mov	r7, r9
    7ec4:	4646      	mov	r6, r8
    7ec6:	b4c0      	push	{r6, r7}
    7ec8:	1c04      	adds	r4, r0, #0
    7eca:	4688      	mov	r8, r1
    7ecc:	4691      	mov	r9, r2
    7ece:	1c1d      	adds	r5, r3, #0

  UIP_IP_BUF->vtc = 0x60;
    7ed0:	4f1b      	ldr	r7, [pc, #108]	; (7f40 <uip_icmp6_send+0x80>)
    7ed2:	2360      	movs	r3, #96	; 0x60
    7ed4:	703b      	strb	r3, [r7, #0]
  UIP_IP_BUF->tcflow = 0;
    7ed6:	2300      	movs	r3, #0
    7ed8:	707b      	strb	r3, [r7, #1]
  UIP_IP_BUF->flow = 0;
    7eda:	807b      	strh	r3, [r7, #2]
  UIP_IP_BUF->proto = UIP_PROTO_ICMP6;
    7edc:	333a      	adds	r3, #58	; 0x3a
    7ede:	71bb      	strb	r3, [r7, #6]
  UIP_IP_BUF->ttl = uip_ds6_if.cur_hop_limit;
    7ee0:	4b18      	ldr	r3, [pc, #96]	; (7f44 <uip_icmp6_send+0x84>)
    7ee2:	791b      	ldrb	r3, [r3, #4]
    7ee4:	71fb      	strb	r3, [r7, #7]
  UIP_IP_BUF->len[0] = (UIP_ICMPH_LEN + payload_len) >> 8;
    7ee6:	1d2b      	adds	r3, r5, #4
    7ee8:	121b      	asrs	r3, r3, #8
    7eea:	713b      	strb	r3, [r7, #4]
  UIP_IP_BUF->len[1] = (UIP_ICMPH_LEN + payload_len) & 0xff;
    7eec:	1d2b      	adds	r3, r5, #4
    7eee:	717b      	strb	r3, [r7, #5]

  memcpy(&UIP_IP_BUF->destipaddr, dest, sizeof(*dest));
    7ef0:	1c3e      	adds	r6, r7, #0
    7ef2:	3618      	adds	r6, #24
    7ef4:	1c30      	adds	r0, r6, #0
    7ef6:	1c21      	adds	r1, r4, #0
    7ef8:	2210      	movs	r2, #16
    7efa:	4b13      	ldr	r3, [pc, #76]	; (7f48 <uip_icmp6_send+0x88>)
    7efc:	4798      	blx	r3
  uip_ds6_select_src(&UIP_IP_BUF->srcipaddr, &UIP_IP_BUF->destipaddr);
    7efe:	1c38      	adds	r0, r7, #0
    7f00:	3008      	adds	r0, #8
    7f02:	1c31      	adds	r1, r6, #0
    7f04:	4b11      	ldr	r3, [pc, #68]	; (7f4c <uip_icmp6_send+0x8c>)
    7f06:	4798      	blx	r3

  UIP_ICMP_BUF->type = type;
    7f08:	4b11      	ldr	r3, [pc, #68]	; (7f50 <uip_icmp6_send+0x90>)
    7f0a:	781c      	ldrb	r4, [r3, #0]
    7f0c:	3428      	adds	r4, #40	; 0x28
    7f0e:	19e4      	adds	r4, r4, r7
    7f10:	4643      	mov	r3, r8
    7f12:	7023      	strb	r3, [r4, #0]
  UIP_ICMP_BUF->icode = code;
    7f14:	464b      	mov	r3, r9
    7f16:	7063      	strb	r3, [r4, #1]

  UIP_ICMP_BUF->icmpchksum = 0;
    7f18:	2300      	movs	r3, #0
    7f1a:	70a3      	strb	r3, [r4, #2]
    7f1c:	70e3      	strb	r3, [r4, #3]
  UIP_ICMP_BUF->icmpchksum = ~uip_icmp6chksum();
    7f1e:	4b0d      	ldr	r3, [pc, #52]	; (7f54 <uip_icmp6_send+0x94>)
    7f20:	4798      	blx	r3
    7f22:	43c0      	mvns	r0, r0
    7f24:	b280      	uxth	r0, r0
    7f26:	70a0      	strb	r0, [r4, #2]
    7f28:	0a00      	lsrs	r0, r0, #8
    7f2a:	70e0      	strb	r0, [r4, #3]

  uip_len = UIP_IPH_LEN + UIP_ICMPH_LEN + payload_len;
    7f2c:	1c2b      	adds	r3, r5, #0
    7f2e:	332c      	adds	r3, #44	; 0x2c
    7f30:	4a09      	ldr	r2, [pc, #36]	; (7f58 <uip_icmp6_send+0x98>)
    7f32:	8013      	strh	r3, [r2, #0]
  tcpip_ipv6_output();
    7f34:	4b09      	ldr	r3, [pc, #36]	; (7f5c <uip_icmp6_send+0x9c>)
    7f36:	4798      	blx	r3
}
    7f38:	bc0c      	pop	{r2, r3}
    7f3a:	4690      	mov	r8, r2
    7f3c:	4699      	mov	r9, r3
    7f3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    7f40:	20002cd4 	.word	0x20002cd4
    7f44:	20002b68 	.word	0x20002b68
    7f48:	000108e7 	.word	0x000108e7
    7f4c:	0000770d 	.word	0x0000770d
    7f50:	20000b12 	.word	0x20000b12
    7f54:	00008bd1 	.word	0x00008bd1
    7f58:	20002cc0 	.word	0x20002cc0
    7f5c:	0000a625 	.word	0x0000a625

00007f60 <uip_icmp6_echo_reply_callback_add>:
}
/*---------------------------------------------------------------------------*/
void
uip_icmp6_echo_reply_callback_add(struct uip_icmp6_echo_reply_notification *n,
                                  uip_icmp6_echo_reply_callback_t c)
{
    7f60:	b508      	push	{r3, lr}
  if(n != NULL && c != NULL) {
    7f62:	2800      	cmp	r0, #0
    7f64:	d007      	beq.n	7f76 <uip_icmp6_echo_reply_callback_add+0x16>
    7f66:	2900      	cmp	r1, #0
    7f68:	d005      	beq.n	7f76 <uip_icmp6_echo_reply_callback_add+0x16>
    7f6a:	1c0b      	adds	r3, r1, #0
    7f6c:	1c01      	adds	r1, r0, #0
    n->callback = c;
    7f6e:	6043      	str	r3, [r0, #4]
    list_add(echo_reply_callback_list, n);
    7f70:	4801      	ldr	r0, [pc, #4]	; (7f78 <uip_icmp6_echo_reply_callback_add+0x18>)
    7f72:	4b02      	ldr	r3, [pc, #8]	; (7f7c <uip_icmp6_echo_reply_callback_add+0x1c>)
    7f74:	4798      	blx	r3
  }
}
    7f76:	bd08      	pop	{r3, pc}
    7f78:	20000af4 	.word	0x20000af4
    7f7c:	00005759 	.word	0x00005759

00007f80 <uip_icmp6_init>:
UIP_ICMP6_HANDLER(echo_reply_handler, ICMP6_ECHO_REPLY,
                  UIP_ICMP6_HANDLER_CODE_ANY, echo_reply_input);
/*---------------------------------------------------------------------------*/
void
uip_icmp6_init()
{
    7f80:	b510      	push	{r4, lr}
  /* Register Echo Request and Reply handlers */
  uip_icmp6_register_input_handler(&echo_request_handler);
    7f82:	4803      	ldr	r0, [pc, #12]	; (7f90 <uip_icmp6_init+0x10>)
    7f84:	4c03      	ldr	r4, [pc, #12]	; (7f94 <uip_icmp6_init+0x14>)
    7f86:	47a0      	blx	r4
  uip_icmp6_register_input_handler(&echo_reply_handler);
    7f88:	4803      	ldr	r0, [pc, #12]	; (7f98 <uip_icmp6_init+0x18>)
    7f8a:	47a0      	blx	r4
}
    7f8c:	bd10      	pop	{r4, pc}
    7f8e:	46c0      	nop			; (mov r8, r8)
    7f90:	20000074 	.word	0x20000074
    7f94:	00007ce9 	.word	0x00007ce9
    7f98:	20000080 	.word	0x20000080

00007f9c <create_llao>:
static uip_ds6_defrt_t *defrt; /**  Pointer to a router list entry */
static uip_ds6_addr_t *addr; /**  Pointer to an interface address */
/*------------------------------------------------------------------*/
/* create a llao */ 
static void
create_llao(uint8_t *llao, uint8_t type) {
    7f9c:	b510      	push	{r4, lr}
    7f9e:	1c04      	adds	r4, r0, #0
  llao[UIP_ND6_OPT_TYPE_OFFSET] = type;
    7fa0:	7001      	strb	r1, [r0, #0]
  llao[UIP_ND6_OPT_LEN_OFFSET] = UIP_ND6_OPT_LLAO_LEN >> 3;
    7fa2:	2302      	movs	r3, #2
    7fa4:	7043      	strb	r3, [r0, #1]
  memcpy(&llao[UIP_ND6_OPT_DATA_OFFSET], &uip_lladdr, UIP_LLADDR_LEN);
    7fa6:	3002      	adds	r0, #2
    7fa8:	4905      	ldr	r1, [pc, #20]	; (7fc0 <create_llao+0x24>)
    7faa:	2208      	movs	r2, #8
    7fac:	4b05      	ldr	r3, [pc, #20]	; (7fc4 <create_llao+0x28>)
    7fae:	4798      	blx	r3
  /* padding on some */
  memset(&llao[UIP_ND6_OPT_DATA_OFFSET + UIP_LLADDR_LEN], 0,
    7fb0:	2300      	movs	r3, #0
    7fb2:	72a3      	strb	r3, [r4, #10]
    7fb4:	72e3      	strb	r3, [r4, #11]
    7fb6:	7323      	strb	r3, [r4, #12]
    7fb8:	7363      	strb	r3, [r4, #13]
    7fba:	73a3      	strb	r3, [r4, #14]
    7fbc:	73e3      	strb	r3, [r4, #15]
         UIP_ND6_OPT_LLAO_LEN - 2 - UIP_LLADDR_LEN);
}
    7fbe:	bd10      	pop	{r4, pc}
    7fc0:	20002ccc 	.word	0x20002ccc
    7fc4:	000108e7 	.word	0x000108e7

00007fc8 <rs_input>:
#if UIP_CONF_ROUTER
#if UIP_ND6_SEND_RA
/*---------------------------------------------------------------------------*/
static void
rs_input(void)
{
    7fc8:	b5f0      	push	{r4, r5, r6, r7, lr}
    7fca:	b08b      	sub	sp, #44	; 0x2c
  /*
   * Check hop limit / icmp code 
   * target address must not be multicast
   * if the NA is solicited, dest must not be multicast
   */
  if((UIP_IP_BUF->ttl != UIP_ND6_HOP_LIMIT) || (UIP_ICMP_BUF->icode != 0)) {
    7fcc:	4b56      	ldr	r3, [pc, #344]	; (8128 <rs_input+0x160>)
    7fce:	79db      	ldrb	r3, [r3, #7]
    7fd0:	2bff      	cmp	r3, #255	; 0xff
    7fd2:	d000      	beq.n	7fd6 <rs_input+0xe>
    7fd4:	e0a2      	b.n	811c <rs_input+0x154>
    7fd6:	4b55      	ldr	r3, [pc, #340]	; (812c <rs_input+0x164>)
    7fd8:	781b      	ldrb	r3, [r3, #0]
    7fda:	1c19      	adds	r1, r3, #0
    7fdc:	3128      	adds	r1, #40	; 0x28
    7fde:	4a52      	ldr	r2, [pc, #328]	; (8128 <rs_input+0x160>)
    7fe0:	188a      	adds	r2, r1, r2
    7fe2:	7852      	ldrb	r2, [r2, #1]
    7fe4:	2a00      	cmp	r2, #0
    7fe6:	d000      	beq.n	7fea <rs_input+0x22>
    7fe8:	e098      	b.n	811c <rs_input+0x154>
  }
#endif /*UIP_CONF_IPV6_CHECKS */

  /* Only valid option is Source Link-Layer Address option any thing
     else is discarded */
  nd6_opt_offset = UIP_ND6_RS_LEN;
    7fea:	2104      	movs	r1, #4
    7fec:	4a50      	ldr	r2, [pc, #320]	; (8130 <rs_input+0x168>)
    7fee:	7011      	strb	r1, [r2, #0]
  nd6_opt_llao = NULL;
    7ff0:	2100      	movs	r1, #0
    7ff2:	4a50      	ldr	r2, [pc, #320]	; (8134 <rs_input+0x16c>)
    7ff4:	6011      	str	r1, [r2, #0]

  while(uip_l3_icmp_hdr_len + nd6_opt_offset < uip_len) {
    7ff6:	1c1c      	adds	r4, r3, #0
    7ff8:	342c      	adds	r4, #44	; 0x2c
    7ffa:	3104      	adds	r1, #4
    7ffc:	3330      	adds	r3, #48	; 0x30
    7ffe:	4a4e      	ldr	r2, [pc, #312]	; (8138 <rs_input+0x170>)
    8000:	8815      	ldrh	r5, [r2, #0]
    8002:	42ab      	cmp	r3, r5
    8004:	db00      	blt.n	8008 <rs_input+0x40>
    8006:	e087      	b.n	8118 <rs_input+0x150>
#if UIP_CONF_IPV6_CHECKS
    if(UIP_ND6_OPT_HDR_BUF->len == 0) {
    8008:	4a47      	ldr	r2, [pc, #284]	; (8128 <rs_input+0x160>)
    800a:	189b      	adds	r3, r3, r2
    800c:	785a      	ldrb	r2, [r3, #1]
    800e:	2a00      	cmp	r2, #0
    8010:	d100      	bne.n	8014 <rs_input+0x4c>
    8012:	e083      	b.n	811c <rs_input+0x154>
    8014:	2000      	movs	r0, #0
      break;
    default:
      PRINTF("ND option not supported in RS\n\r");
      break;
    }
    nd6_opt_offset += (UIP_ND6_OPT_HDR_BUF->len << 3);
    8016:	4e44      	ldr	r6, [pc, #272]	; (8128 <rs_input+0x160>)
  nd6_opt_offset = UIP_ND6_RS_LEN;
  nd6_opt_llao = NULL;

  while(uip_l3_icmp_hdr_len + nd6_opt_offset < uip_len) {
#if UIP_CONF_IPV6_CHECKS
    if(UIP_ND6_OPT_HDR_BUF->len == 0) {
    8018:	1c37      	adds	r7, r6, #0
    801a:	e008      	b.n	802e <rs_input+0x66>
    801c:	19db      	adds	r3, r3, r7
    801e:	785a      	ldrb	r2, [r3, #1]
    8020:	2a00      	cmp	r2, #0
    8022:	d104      	bne.n	802e <rs_input+0x66>
    8024:	4b43      	ldr	r3, [pc, #268]	; (8134 <rs_input+0x16c>)
    8026:	6018      	str	r0, [r3, #0]
    8028:	4b41      	ldr	r3, [pc, #260]	; (8130 <rs_input+0x168>)
    802a:	7019      	strb	r1, [r3, #0]
    802c:	e076      	b.n	811c <rs_input+0x154>
      PRINTF("RS received is bad\n\r");
      goto discard;
    }
#endif /*UIP_CONF_IPV6_CHECKS */
    switch (UIP_ND6_OPT_HDR_BUF->type) {
    802e:	781a      	ldrb	r2, [r3, #0]
    8030:	2a01      	cmp	r2, #1
    8032:	d100      	bne.n	8036 <rs_input+0x6e>
    case UIP_ND6_OPT_SLLAO:
      nd6_opt_llao = (uint8_t *)UIP_ND6_OPT_HDR_BUF;
    8034:	1c18      	adds	r0, r3, #0
      break;
    default:
      PRINTF("ND option not supported in RS\n\r");
      break;
    }
    nd6_opt_offset += (UIP_ND6_OPT_HDR_BUF->len << 3);
    8036:	190b      	adds	r3, r1, r4
    8038:	199b      	adds	r3, r3, r6
    803a:	785b      	ldrb	r3, [r3, #1]
    803c:	00da      	lsls	r2, r3, #3
    803e:	188b      	adds	r3, r1, r2
    8040:	b2d9      	uxtb	r1, r3
  /* Only valid option is Source Link-Layer Address option any thing
     else is discarded */
  nd6_opt_offset = UIP_ND6_RS_LEN;
  nd6_opt_llao = NULL;

  while(uip_l3_icmp_hdr_len + nd6_opt_offset < uip_len) {
    8042:	190b      	adds	r3, r1, r4
    8044:	42ab      	cmp	r3, r5
    8046:	dbe9      	blt.n	801c <rs_input+0x54>
    8048:	4b3a      	ldr	r3, [pc, #232]	; (8134 <rs_input+0x16c>)
    804a:	6018      	str	r0, [r3, #0]
    804c:	4b38      	ldr	r3, [pc, #224]	; (8130 <rs_input+0x168>)
    804e:	7019      	strb	r1, [r3, #0]
      break;
    }
    nd6_opt_offset += (UIP_ND6_OPT_HDR_BUF->len << 3);
  }
  /* Options processing: only SLLAO */
  if(nd6_opt_llao != NULL) {
    8050:	2800      	cmp	r0, #0
    8052:	d061      	beq.n	8118 <rs_input+0x150>
#if UIP_CONF_IPV6_CHECKS
    if(uip_is_addr_unspecified(&UIP_IP_BUF->srcipaddr)) {
    8054:	4b34      	ldr	r3, [pc, #208]	; (8128 <rs_input+0x160>)
    8056:	891b      	ldrh	r3, [r3, #8]
    8058:	2b00      	cmp	r3, #0
    805a:	d11b      	bne.n	8094 <rs_input+0xcc>
    805c:	4b32      	ldr	r3, [pc, #200]	; (8128 <rs_input+0x160>)
    805e:	895b      	ldrh	r3, [r3, #10]
    8060:	2b00      	cmp	r3, #0
    8062:	d117      	bne.n	8094 <rs_input+0xcc>
    8064:	4b30      	ldr	r3, [pc, #192]	; (8128 <rs_input+0x160>)
    8066:	899b      	ldrh	r3, [r3, #12]
    8068:	2b00      	cmp	r3, #0
    806a:	d113      	bne.n	8094 <rs_input+0xcc>
    806c:	4b2e      	ldr	r3, [pc, #184]	; (8128 <rs_input+0x160>)
    806e:	89db      	ldrh	r3, [r3, #14]
    8070:	2b00      	cmp	r3, #0
    8072:	d10f      	bne.n	8094 <rs_input+0xcc>
    8074:	4b2c      	ldr	r3, [pc, #176]	; (8128 <rs_input+0x160>)
    8076:	8a1b      	ldrh	r3, [r3, #16]
    8078:	2b00      	cmp	r3, #0
    807a:	d10b      	bne.n	8094 <rs_input+0xcc>
    807c:	4b2a      	ldr	r3, [pc, #168]	; (8128 <rs_input+0x160>)
    807e:	8a5b      	ldrh	r3, [r3, #18]
    8080:	2b00      	cmp	r3, #0
    8082:	d107      	bne.n	8094 <rs_input+0xcc>
    8084:	4b28      	ldr	r3, [pc, #160]	; (8128 <rs_input+0x160>)
    8086:	8a9b      	ldrh	r3, [r3, #20]
    8088:	2b00      	cmp	r3, #0
    808a:	d103      	bne.n	8094 <rs_input+0xcc>
    808c:	4b26      	ldr	r3, [pc, #152]	; (8128 <rs_input+0x160>)
    808e:	8adb      	ldrh	r3, [r3, #22]
    8090:	2b00      	cmp	r3, #0
    8092:	d043      	beq.n	811c <rs_input+0x154>
      PRINTF("RS received is bad\n\r");
      goto discard;
    } else {
#endif /*UIP_CONF_IPV6_CHECKS */
      if((nbr = uip_ds6_nbr_lookup(&UIP_IP_BUF->srcipaddr)) == NULL) {
    8094:	4829      	ldr	r0, [pc, #164]	; (813c <rs_input+0x174>)
    8096:	4b2a      	ldr	r3, [pc, #168]	; (8140 <rs_input+0x178>)
    8098:	4798      	blx	r3
    809a:	4b2a      	ldr	r3, [pc, #168]	; (8144 <rs_input+0x17c>)
    809c:	6018      	str	r0, [r3, #0]
    809e:	2800      	cmp	r0, #0
    80a0:	d108      	bne.n	80b4 <rs_input+0xec>
        /* we need to add the neighbor */
        uip_ds6_nbr_add(&UIP_IP_BUF->srcipaddr,
                        (uip_lladdr_t *)&nd6_opt_llao[UIP_ND6_OPT_DATA_OFFSET], 0, NBR_STALE);
    80a2:	4b24      	ldr	r3, [pc, #144]	; (8134 <rs_input+0x16c>)
      goto discard;
    } else {
#endif /*UIP_CONF_IPV6_CHECKS */
      if((nbr = uip_ds6_nbr_lookup(&UIP_IP_BUF->srcipaddr)) == NULL) {
        /* we need to add the neighbor */
        uip_ds6_nbr_add(&UIP_IP_BUF->srcipaddr,
    80a4:	6819      	ldr	r1, [r3, #0]
    80a6:	3102      	adds	r1, #2
    80a8:	4824      	ldr	r0, [pc, #144]	; (813c <rs_input+0x174>)
    80aa:	2200      	movs	r2, #0
    80ac:	2302      	movs	r3, #2
    80ae:	4c26      	ldr	r4, [pc, #152]	; (8148 <rs_input+0x180>)
    80b0:	47a0      	blx	r4
    80b2:	e031      	b.n	8118 <rs_input+0x150>
                        (uip_lladdr_t *)&nd6_opt_llao[UIP_ND6_OPT_DATA_OFFSET], 0, NBR_STALE);
      } else {
        /* If LL address changed, set neighbor state to stale */
        if(memcmp(&nd6_opt_llao[UIP_ND6_OPT_DATA_OFFSET],
    80b4:	4b1f      	ldr	r3, [pc, #124]	; (8134 <rs_input+0x16c>)
    80b6:	681c      	ldr	r4, [r3, #0]
    80b8:	3402      	adds	r4, #2
            uip_ds6_nbr_get_ll(nbr), UIP_LLADDR_LEN) != 0) {
    80ba:	4b24      	ldr	r3, [pc, #144]	; (814c <rs_input+0x184>)
    80bc:	4798      	blx	r3
    80be:	1c01      	adds	r1, r0, #0
        /* we need to add the neighbor */
        uip_ds6_nbr_add(&UIP_IP_BUF->srcipaddr,
                        (uip_lladdr_t *)&nd6_opt_llao[UIP_ND6_OPT_DATA_OFFSET], 0, NBR_STALE);
      } else {
        /* If LL address changed, set neighbor state to stale */
        if(memcmp(&nd6_opt_llao[UIP_ND6_OPT_DATA_OFFSET],
    80c0:	1c20      	adds	r0, r4, #0
    80c2:	2208      	movs	r2, #8
    80c4:	4b22      	ldr	r3, [pc, #136]	; (8150 <rs_input+0x188>)
    80c6:	4798      	blx	r3
    80c8:	2800      	cmp	r0, #0
    80ca:	d020      	beq.n	810e <rs_input+0x146>
            uip_ds6_nbr_get_ll(nbr), UIP_LLADDR_LEN) != 0) {
          uip_ds6_nbr_t nbr_data = *nbr;
    80cc:	4e1d      	ldr	r6, [pc, #116]	; (8144 <rs_input+0x17c>)
    80ce:	6830      	ldr	r0, [r6, #0]
    80d0:	a901      	add	r1, sp, #4
    80d2:	1c0b      	adds	r3, r1, #0
    80d4:	1c02      	adds	r2, r0, #0
    80d6:	ca32      	ldmia	r2!, {r1, r4, r5}
    80d8:	c332      	stmia	r3!, {r1, r4, r5}
    80da:	ca32      	ldmia	r2!, {r1, r4, r5}
    80dc:	c332      	stmia	r3!, {r1, r4, r5}
    80de:	ca32      	ldmia	r2!, {r1, r4, r5}
    80e0:	c332      	stmia	r3!, {r1, r4, r5}
    80e2:	2420      	movs	r4, #32
    80e4:	5d05      	ldrb	r5, [r0, r4]
          uip_ds6_nbr_rm(nbr);
    80e6:	4b1b      	ldr	r3, [pc, #108]	; (8154 <rs_input+0x18c>)
    80e8:	4798      	blx	r3
          nbr = uip_ds6_nbr_add(&UIP_IP_BUF->srcipaddr,
                                (uip_lladdr_t *)&nd6_opt_llao[UIP_ND6_OPT_DATA_OFFSET], 0, NBR_STALE);
    80ea:	4b12      	ldr	r3, [pc, #72]	; (8134 <rs_input+0x16c>)
        /* If LL address changed, set neighbor state to stale */
        if(memcmp(&nd6_opt_llao[UIP_ND6_OPT_DATA_OFFSET],
            uip_ds6_nbr_get_ll(nbr), UIP_LLADDR_LEN) != 0) {
          uip_ds6_nbr_t nbr_data = *nbr;
          uip_ds6_nbr_rm(nbr);
          nbr = uip_ds6_nbr_add(&UIP_IP_BUF->srcipaddr,
    80ec:	6819      	ldr	r1, [r3, #0]
    80ee:	3102      	adds	r1, #2
    80f0:	4812      	ldr	r0, [pc, #72]	; (813c <rs_input+0x174>)
    80f2:	2200      	movs	r2, #0
    80f4:	2302      	movs	r3, #2
    80f6:	4f14      	ldr	r7, [pc, #80]	; (8148 <rs_input+0x180>)
    80f8:	47b8      	blx	r7
    80fa:	6030      	str	r0, [r6, #0]
                                (uip_lladdr_t *)&nd6_opt_llao[UIP_ND6_OPT_DATA_OFFSET], 0, NBR_STALE);
          nbr->reachable = nbr_data.reachable;
    80fc:	1c03      	adds	r3, r0, #0
    80fe:	3310      	adds	r3, #16
    8100:	aa05      	add	r2, sp, #20
    8102:	ca42      	ldmia	r2!, {r1, r6}
    8104:	c342      	stmia	r3!, {r1, r6}
          nbr->sendns = nbr_data.sendns;
    8106:	aa07      	add	r2, sp, #28
    8108:	ca42      	ldmia	r2!, {r1, r6}
    810a:	c342      	stmia	r3!, {r1, r6}
          nbr->nscount = nbr_data.nscount;
    810c:	5505      	strb	r5, [r0, r4]
        }
        nbr->isrouter = 0;
    810e:	4b0d      	ldr	r3, [pc, #52]	; (8144 <rs_input+0x17c>)
    8110:	681a      	ldr	r2, [r3, #0]
    8112:	2100      	movs	r1, #0
    8114:	2321      	movs	r3, #33	; 0x21
    8116:	54d1      	strb	r1, [r2, r3]
    }
#endif /*UIP_CONF_IPV6_CHECKS */
  }

  /* Schedule a sollicited RA */
  uip_ds6_send_ra_sollicited();
    8118:	4b0f      	ldr	r3, [pc, #60]	; (8158 <rs_input+0x190>)
    811a:	4798      	blx	r3

discard:
  uip_len = 0;
    811c:	2200      	movs	r2, #0
    811e:	4b06      	ldr	r3, [pc, #24]	; (8138 <rs_input+0x170>)
    8120:	801a      	strh	r2, [r3, #0]
  return;
}
    8122:	b00b      	add	sp, #44	; 0x2c
    8124:	bdf0      	pop	{r4, r5, r6, r7, pc}
    8126:	46c0      	nop			; (mov r8, r8)
    8128:	20002cd4 	.word	0x20002cd4
    812c:	20000b12 	.word	0x20000b12
    8130:	20000b08 	.word	0x20000b08
    8134:	20000b04 	.word	0x20000b04
    8138:	20002cc0 	.word	0x20002cc0
    813c:	20002cdc 	.word	0x20002cdc
    8140:	00006b55 	.word	0x00006b55
    8144:	20000b00 	.word	0x20000b00
    8148:	00006ae1 	.word	0x00006ae1
    814c:	00006b3d 	.word	0x00006b3d
    8150:	000108c9 	.word	0x000108c9
    8154:	00006aa1 	.word	0x00006aa1
    8158:	000077f1 	.word	0x000077f1

0000815c <ns_input>:
/*------------------------------------------------------------------*/


static void
ns_input(void)
{
    815c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  PRINT6ADDR((uip_ipaddr_t *) (&UIP_ND6_NS_BUF->tgtipaddr));
  PRINTF("\n\r");
  UIP_STAT(++uip_stat.nd6.recv);

#if UIP_CONF_IPV6_CHECKS
  if((UIP_IP_BUF->ttl != UIP_ND6_HOP_LIMIT) ||
    815e:	4bab      	ldr	r3, [pc, #684]	; (840c <ns_input+0x2b0>)
    8160:	79db      	ldrb	r3, [r3, #7]
    8162:	2bff      	cmp	r3, #255	; 0xff
    8164:	d000      	beq.n	8168 <ns_input+0xc>
    8166:	e14c      	b.n	8402 <ns_input+0x2a6>
     (uip_is_addr_mcast(&UIP_ND6_NS_BUF->tgtipaddr)) ||
    8168:	4ba9      	ldr	r3, [pc, #676]	; (8410 <ns_input+0x2b4>)
    816a:	781b      	ldrb	r3, [r3, #0]
    816c:	1c19      	adds	r1, r3, #0
    816e:	312c      	adds	r1, #44	; 0x2c
    8170:	4aa6      	ldr	r2, [pc, #664]	; (840c <ns_input+0x2b0>)
    8172:	188a      	adds	r2, r1, r2
  PRINT6ADDR((uip_ipaddr_t *) (&UIP_ND6_NS_BUF->tgtipaddr));
  PRINTF("\n\r");
  UIP_STAT(++uip_stat.nd6.recv);

#if UIP_CONF_IPV6_CHECKS
  if((UIP_IP_BUF->ttl != UIP_ND6_HOP_LIMIT) ||
    8174:	7912      	ldrb	r2, [r2, #4]
    8176:	2aff      	cmp	r2, #255	; 0xff
    8178:	d100      	bne.n	817c <ns_input+0x20>
    817a:	e142      	b.n	8402 <ns_input+0x2a6>
     (uip_is_addr_mcast(&UIP_ND6_NS_BUF->tgtipaddr)) ||
     (UIP_ICMP_BUF->icode != 0)) {
    817c:	3328      	adds	r3, #40	; 0x28
    817e:	4aa3      	ldr	r2, [pc, #652]	; (840c <ns_input+0x2b0>)
    8180:	189b      	adds	r3, r3, r2
  PRINTF("\n\r");
  UIP_STAT(++uip_stat.nd6.recv);

#if UIP_CONF_IPV6_CHECKS
  if((UIP_IP_BUF->ttl != UIP_ND6_HOP_LIMIT) ||
     (uip_is_addr_mcast(&UIP_ND6_NS_BUF->tgtipaddr)) ||
    8182:	785b      	ldrb	r3, [r3, #1]
    8184:	2b00      	cmp	r3, #0
    8186:	d000      	beq.n	818a <ns_input+0x2e>
    8188:	e13b      	b.n	8402 <ns_input+0x2a6>
    goto discard;
  }
#endif /* UIP_CONF_IPV6_CHECKS */

  /* Options processing */
  nd6_opt_llao = NULL;
    818a:	2200      	movs	r2, #0
    818c:	4ba1      	ldr	r3, [pc, #644]	; (8414 <ns_input+0x2b8>)
    818e:	601a      	str	r2, [r3, #0]
  nd6_opt_offset = UIP_ND6_NS_LEN;
    8190:	3214      	adds	r2, #20
    8192:	4ba1      	ldr	r3, [pc, #644]	; (8418 <ns_input+0x2bc>)
    8194:	701a      	strb	r2, [r3, #0]
  while(uip_l3_icmp_hdr_len + nd6_opt_offset < uip_len) {
    8196:	4b9e      	ldr	r3, [pc, #632]	; (8410 <ns_input+0x2b4>)
    8198:	7818      	ldrb	r0, [r3, #0]
    819a:	1c02      	adds	r2, r0, #0
    819c:	3240      	adds	r2, #64	; 0x40
    819e:	4b9f      	ldr	r3, [pc, #636]	; (841c <ns_input+0x2c0>)
    81a0:	881b      	ldrh	r3, [r3, #0]
    81a2:	1c08      	adds	r0, r1, #0
    81a4:	429a      	cmp	r2, r3
    81a6:	db00      	blt.n	81aa <ns_input+0x4e>
    81a8:	e077      	b.n	829a <ns_input+0x13e>
#if UIP_CONF_IPV6_CHECKS
    if(UIP_ND6_OPT_HDR_BUF->len == 0) {
    81aa:	4b98      	ldr	r3, [pc, #608]	; (840c <ns_input+0x2b0>)
    81ac:	18d3      	adds	r3, r2, r3
    81ae:	785a      	ldrb	r2, [r3, #1]
    81b0:	2a00      	cmp	r2, #0
    81b2:	d100      	bne.n	81b6 <ns_input+0x5a>
    81b4:	e125      	b.n	8402 <ns_input+0x2a6>
      goto discard;
    }
#endif /* UIP_CONF_IPV6_CHECKS */
    switch (UIP_ND6_OPT_HDR_BUF->type) {
    case UIP_ND6_OPT_SLLAO:
      nd6_opt_llao = &uip_buf[uip_l2_l3_icmp_hdr_len + nd6_opt_offset];
    81b6:	4d97      	ldr	r5, [pc, #604]	; (8414 <ns_input+0x2b8>)
#if UIP_CONF_IPV6_CHECKS
      /* There must be NO option in a DAD NS */
      if(uip_is_addr_unspecified(&UIP_IP_BUF->srcipaddr)) {
    81b8:	4c94      	ldr	r4, [pc, #592]	; (840c <ns_input+0x2b0>)
    81ba:	e005      	b.n	81c8 <ns_input+0x6c>
  /* Options processing */
  nd6_opt_llao = NULL;
  nd6_opt_offset = UIP_ND6_NS_LEN;
  while(uip_l3_icmp_hdr_len + nd6_opt_offset < uip_len) {
#if UIP_CONF_IPV6_CHECKS
    if(UIP_ND6_OPT_HDR_BUF->len == 0) {
    81bc:	4a93      	ldr	r2, [pc, #588]	; (840c <ns_input+0x2b0>)
    81be:	189b      	adds	r3, r3, r2
    81c0:	785a      	ldrb	r2, [r3, #1]
    81c2:	2a00      	cmp	r2, #0
    81c4:	d100      	bne.n	81c8 <ns_input+0x6c>
    81c6:	e11c      	b.n	8402 <ns_input+0x2a6>
      PRINTF("NS received is bad\n\r");
      goto discard;
    }
#endif /* UIP_CONF_IPV6_CHECKS */
    switch (UIP_ND6_OPT_HDR_BUF->type) {
    81c8:	781a      	ldrb	r2, [r3, #0]
    81ca:	2a01      	cmp	r2, #1
    81cc:	d151      	bne.n	8272 <ns_input+0x116>
    case UIP_ND6_OPT_SLLAO:
      nd6_opt_llao = &uip_buf[uip_l2_l3_icmp_hdr_len + nd6_opt_offset];
    81ce:	602b      	str	r3, [r5, #0]
#if UIP_CONF_IPV6_CHECKS
      /* There must be NO option in a DAD NS */
      if(uip_is_addr_unspecified(&UIP_IP_BUF->srcipaddr)) {
    81d0:	8923      	ldrh	r3, [r4, #8]
    81d2:	2b00      	cmp	r3, #0
    81d4:	d11c      	bne.n	8210 <ns_input+0xb4>
    81d6:	4b8d      	ldr	r3, [pc, #564]	; (840c <ns_input+0x2b0>)
    81d8:	895b      	ldrh	r3, [r3, #10]
    81da:	2b00      	cmp	r3, #0
    81dc:	d118      	bne.n	8210 <ns_input+0xb4>
    81de:	4b8b      	ldr	r3, [pc, #556]	; (840c <ns_input+0x2b0>)
    81e0:	899b      	ldrh	r3, [r3, #12]
    81e2:	2b00      	cmp	r3, #0
    81e4:	d114      	bne.n	8210 <ns_input+0xb4>
    81e6:	4b89      	ldr	r3, [pc, #548]	; (840c <ns_input+0x2b0>)
    81e8:	89db      	ldrh	r3, [r3, #14]
    81ea:	2b00      	cmp	r3, #0
    81ec:	d110      	bne.n	8210 <ns_input+0xb4>
    81ee:	4b87      	ldr	r3, [pc, #540]	; (840c <ns_input+0x2b0>)
    81f0:	8a1b      	ldrh	r3, [r3, #16]
    81f2:	2b00      	cmp	r3, #0
    81f4:	d10c      	bne.n	8210 <ns_input+0xb4>
    81f6:	4b85      	ldr	r3, [pc, #532]	; (840c <ns_input+0x2b0>)
    81f8:	8a5b      	ldrh	r3, [r3, #18]
    81fa:	2b00      	cmp	r3, #0
    81fc:	d108      	bne.n	8210 <ns_input+0xb4>
    81fe:	4b83      	ldr	r3, [pc, #524]	; (840c <ns_input+0x2b0>)
    8200:	8a9b      	ldrh	r3, [r3, #20]
    8202:	2b00      	cmp	r3, #0
    8204:	d104      	bne.n	8210 <ns_input+0xb4>
    8206:	4b81      	ldr	r3, [pc, #516]	; (840c <ns_input+0x2b0>)
    8208:	8adb      	ldrh	r3, [r3, #22]
    820a:	2b00      	cmp	r3, #0
    820c:	d100      	bne.n	8210 <ns_input+0xb4>
    820e:	e0f8      	b.n	8402 <ns_input+0x2a6>
        PRINTF("NS received is bad\n\r");
        goto discard;
      } else {
#endif /*UIP_CONF_IPV6_CHECKS */
        nbr = uip_ds6_nbr_lookup(&UIP_IP_BUF->srcipaddr);
    8210:	4883      	ldr	r0, [pc, #524]	; (8420 <ns_input+0x2c4>)
    8212:	4b84      	ldr	r3, [pc, #528]	; (8424 <ns_input+0x2c8>)
    8214:	4798      	blx	r3
    8216:	4b84      	ldr	r3, [pc, #528]	; (8428 <ns_input+0x2cc>)
    8218:	6018      	str	r0, [r3, #0]
        if(nbr == NULL) {
    821a:	2800      	cmp	r0, #0
    821c:	d108      	bne.n	8230 <ns_input+0xd4>
          uip_ds6_nbr_add(&UIP_IP_BUF->srcipaddr,
			  (uip_lladdr_t *)&nd6_opt_llao[UIP_ND6_OPT_DATA_OFFSET],
    821e:	4b7d      	ldr	r3, [pc, #500]	; (8414 <ns_input+0x2b8>)
        goto discard;
      } else {
#endif /*UIP_CONF_IPV6_CHECKS */
        nbr = uip_ds6_nbr_lookup(&UIP_IP_BUF->srcipaddr);
        if(nbr == NULL) {
          uip_ds6_nbr_add(&UIP_IP_BUF->srcipaddr,
    8220:	6819      	ldr	r1, [r3, #0]
    8222:	3102      	adds	r1, #2
    8224:	487e      	ldr	r0, [pc, #504]	; (8420 <ns_input+0x2c4>)
    8226:	2200      	movs	r2, #0
    8228:	2302      	movs	r3, #2
    822a:	4e80      	ldr	r6, [pc, #512]	; (842c <ns_input+0x2d0>)
    822c:	47b0      	blx	r6
    822e:	e020      	b.n	8272 <ns_input+0x116>
			  (uip_lladdr_t *)&nd6_opt_llao[UIP_ND6_OPT_DATA_OFFSET],
			  0, NBR_STALE);
        } else {
          uip_lladdr_t *lladdr = (uip_lladdr_t *)uip_ds6_nbr_get_ll(nbr);
    8230:	4b7f      	ldr	r3, [pc, #508]	; (8430 <ns_input+0x2d4>)
    8232:	4798      	blx	r3
    8234:	1c07      	adds	r7, r0, #0
          if(memcmp(&nd6_opt_llao[UIP_ND6_OPT_DATA_OFFSET],
    8236:	4b77      	ldr	r3, [pc, #476]	; (8414 <ns_input+0x2b8>)
    8238:	681e      	ldr	r6, [r3, #0]
    823a:	3602      	adds	r6, #2
    823c:	1c30      	adds	r0, r6, #0
    823e:	1c39      	adds	r1, r7, #0
    8240:	2208      	movs	r2, #8
    8242:	4b7c      	ldr	r3, [pc, #496]	; (8434 <ns_input+0x2d8>)
    8244:	4798      	blx	r3
    8246:	2800      	cmp	r0, #0
    8248:	d00a      	beq.n	8260 <ns_input+0x104>
		    lladdr, UIP_LLADDR_LEN) != 0) {
            memcpy(lladdr, &nd6_opt_llao[UIP_ND6_OPT_DATA_OFFSET],
    824a:	1c38      	adds	r0, r7, #0
    824c:	1c31      	adds	r1, r6, #0
    824e:	2208      	movs	r2, #8
    8250:	4b79      	ldr	r3, [pc, #484]	; (8438 <ns_input+0x2dc>)
    8252:	4798      	blx	r3
		   UIP_LLADDR_LEN);
            nbr->state = NBR_STALE;
    8254:	4b74      	ldr	r3, [pc, #464]	; (8428 <ns_input+0x2cc>)
    8256:	681a      	ldr	r2, [r3, #0]
    8258:	2102      	movs	r1, #2
    825a:	2322      	movs	r3, #34	; 0x22
    825c:	54d1      	strb	r1, [r2, r3]
    825e:	e008      	b.n	8272 <ns_input+0x116>
          } else {
            if(nbr->state == NBR_INCOMPLETE) {
    8260:	4b71      	ldr	r3, [pc, #452]	; (8428 <ns_input+0x2cc>)
    8262:	681b      	ldr	r3, [r3, #0]
    8264:	2222      	movs	r2, #34	; 0x22
    8266:	5c9a      	ldrb	r2, [r3, r2]
    8268:	2a00      	cmp	r2, #0
    826a:	d102      	bne.n	8272 <ns_input+0x116>
              nbr->state = NBR_STALE;
    826c:	2102      	movs	r1, #2
    826e:	3222      	adds	r2, #34	; 0x22
    8270:	5499      	strb	r1, [r3, r2]
      break;
    default:
      PRINTF("ND option not supported in NS");
      break;
    }
    nd6_opt_offset += (UIP_ND6_OPT_HDR_BUF->len << 3);
    8272:	4e69      	ldr	r6, [pc, #420]	; (8418 <ns_input+0x2bc>)
    8274:	7837      	ldrb	r7, [r6, #0]
    8276:	4b66      	ldr	r3, [pc, #408]	; (8410 <ns_input+0x2b4>)
    8278:	781b      	ldrb	r3, [r3, #0]
    827a:	332c      	adds	r3, #44	; 0x2c
    827c:	1c19      	adds	r1, r3, #0
    827e:	19db      	adds	r3, r3, r7
    8280:	4862      	ldr	r0, [pc, #392]	; (840c <ns_input+0x2b0>)
    8282:	1818      	adds	r0, r3, r0
    8284:	7842      	ldrb	r2, [r0, #1]
    8286:	00d2      	lsls	r2, r2, #3
    8288:	18ba      	adds	r2, r7, r2
    828a:	b2d3      	uxtb	r3, r2
    828c:	7033      	strb	r3, [r6, #0]
#endif /* UIP_CONF_IPV6_CHECKS */

  /* Options processing */
  nd6_opt_llao = NULL;
  nd6_opt_offset = UIP_ND6_NS_LEN;
  while(uip_l3_icmp_hdr_len + nd6_opt_offset < uip_len) {
    828e:	1c08      	adds	r0, r1, #0
    8290:	18cb      	adds	r3, r1, r3
    8292:	4a62      	ldr	r2, [pc, #392]	; (841c <ns_input+0x2c0>)
    8294:	8812      	ldrh	r2, [r2, #0]
    8296:	4293      	cmp	r3, r2
    8298:	db90      	blt.n	81bc <ns_input+0x60>
      break;
    }
    nd6_opt_offset += (UIP_ND6_OPT_HDR_BUF->len << 3);
  }

  addr = uip_ds6_addr_lookup(&UIP_ND6_NS_BUF->tgtipaddr);
    829a:	4b5c      	ldr	r3, [pc, #368]	; (840c <ns_input+0x2b0>)
    829c:	18c0      	adds	r0, r0, r3
    829e:	3004      	adds	r0, #4
    82a0:	4b66      	ldr	r3, [pc, #408]	; (843c <ns_input+0x2e0>)
    82a2:	4798      	blx	r3
    82a4:	4b66      	ldr	r3, [pc, #408]	; (8440 <ns_input+0x2e4>)
    82a6:	6018      	str	r0, [r3, #0]
  if(addr != NULL) {
    82a8:	2800      	cmp	r0, #0
    82aa:	d100      	bne.n	82ae <ns_input+0x152>
    82ac:	e0a9      	b.n	8402 <ns_input+0x2a6>
          /** \todo if I sent a NS before him, I win */
        uip_ds6_dad_failed(addr);
        goto discard;
      }
#else /* UIP_ND6_DEF_MAXDADNS > 0 */
    if(uip_is_addr_unspecified(&UIP_IP_BUF->srcipaddr)) {
    82ae:	4b57      	ldr	r3, [pc, #348]	; (840c <ns_input+0x2b0>)
    82b0:	891b      	ldrh	r3, [r3, #8]
    82b2:	2b00      	cmp	r3, #0
    82b4:	d11c      	bne.n	82f0 <ns_input+0x194>
    82b6:	4b55      	ldr	r3, [pc, #340]	; (840c <ns_input+0x2b0>)
    82b8:	895b      	ldrh	r3, [r3, #10]
    82ba:	2b00      	cmp	r3, #0
    82bc:	d118      	bne.n	82f0 <ns_input+0x194>
    82be:	4b53      	ldr	r3, [pc, #332]	; (840c <ns_input+0x2b0>)
    82c0:	899b      	ldrh	r3, [r3, #12]
    82c2:	2b00      	cmp	r3, #0
    82c4:	d114      	bne.n	82f0 <ns_input+0x194>
    82c6:	4b51      	ldr	r3, [pc, #324]	; (840c <ns_input+0x2b0>)
    82c8:	89db      	ldrh	r3, [r3, #14]
    82ca:	2b00      	cmp	r3, #0
    82cc:	d110      	bne.n	82f0 <ns_input+0x194>
    82ce:	4b4f      	ldr	r3, [pc, #316]	; (840c <ns_input+0x2b0>)
    82d0:	8a1b      	ldrh	r3, [r3, #16]
    82d2:	2b00      	cmp	r3, #0
    82d4:	d10c      	bne.n	82f0 <ns_input+0x194>
    82d6:	4b4d      	ldr	r3, [pc, #308]	; (840c <ns_input+0x2b0>)
    82d8:	8a5b      	ldrh	r3, [r3, #18]
    82da:	2b00      	cmp	r3, #0
    82dc:	d108      	bne.n	82f0 <ns_input+0x194>
    82de:	4b4b      	ldr	r3, [pc, #300]	; (840c <ns_input+0x2b0>)
    82e0:	8a9b      	ldrh	r3, [r3, #20]
    82e2:	2b00      	cmp	r3, #0
    82e4:	d104      	bne.n	82f0 <ns_input+0x194>
    82e6:	4b49      	ldr	r3, [pc, #292]	; (840c <ns_input+0x2b0>)
    82e8:	8adb      	ldrh	r3, [r3, #22]
    82ea:	2b00      	cmp	r3, #0
    82ec:	d100      	bne.n	82f0 <ns_input+0x194>
    82ee:	e088      	b.n	8402 <ns_input+0x2a6>
      /* DAD CASE */
      goto discard;
#endif /* UIP_ND6_DEF_MAXDADNS > 0 */
    }
#if UIP_CONF_IPV6_CHECKS
    if(uip_ds6_is_my_addr(&UIP_IP_BUF->srcipaddr)) {
    82f0:	484b      	ldr	r0, [pc, #300]	; (8420 <ns_input+0x2c4>)
    82f2:	4b52      	ldr	r3, [pc, #328]	; (843c <ns_input+0x2e0>)
    82f4:	4798      	blx	r3
    82f6:	2800      	cmp	r0, #0
    82f8:	d000      	beq.n	82fc <ns_input+0x1a0>
    82fa:	e082      	b.n	8402 <ns_input+0x2a6>
      goto discard;
    }
#endif /*UIP_CONF_IPV6_CHECKS */

    /* Address resolution case */
    if(uip_is_addr_solicited_node(&UIP_IP_BUF->destipaddr)) {
    82fc:	4b43      	ldr	r3, [pc, #268]	; (840c <ns_input+0x2b0>)
    82fe:	7e1b      	ldrb	r3, [r3, #24]
    8300:	2bff      	cmp	r3, #255	; 0xff
    8302:	d131      	bne.n	8368 <ns_input+0x20c>
    8304:	4b41      	ldr	r3, [pc, #260]	; (840c <ns_input+0x2b0>)
    8306:	7e5b      	ldrb	r3, [r3, #25]
    8308:	2b02      	cmp	r3, #2
    830a:	d12d      	bne.n	8368 <ns_input+0x20c>
    830c:	4b3f      	ldr	r3, [pc, #252]	; (840c <ns_input+0x2b0>)
    830e:	8b5b      	ldrh	r3, [r3, #26]
    8310:	2b00      	cmp	r3, #0
    8312:	d129      	bne.n	8368 <ns_input+0x20c>
    8314:	4b3d      	ldr	r3, [pc, #244]	; (840c <ns_input+0x2b0>)
    8316:	8b9b      	ldrh	r3, [r3, #28]
    8318:	2b00      	cmp	r3, #0
    831a:	d125      	bne.n	8368 <ns_input+0x20c>
    831c:	4b3b      	ldr	r3, [pc, #236]	; (840c <ns_input+0x2b0>)
    831e:	8bdb      	ldrh	r3, [r3, #30]
    8320:	2b00      	cmp	r3, #0
    8322:	d121      	bne.n	8368 <ns_input+0x20c>
    8324:	4b39      	ldr	r3, [pc, #228]	; (840c <ns_input+0x2b0>)
    8326:	8c1b      	ldrh	r3, [r3, #32]
    8328:	2b00      	cmp	r3, #0
    832a:	d11d      	bne.n	8368 <ns_input+0x20c>
    832c:	3322      	adds	r3, #34	; 0x22
    832e:	4a37      	ldr	r2, [pc, #220]	; (840c <ns_input+0x2b0>)
    8330:	5cd3      	ldrb	r3, [r2, r3]
    8332:	2b00      	cmp	r3, #0
    8334:	d118      	bne.n	8368 <ns_input+0x20c>
    8336:	3323      	adds	r3, #35	; 0x23
    8338:	5cd3      	ldrb	r3, [r2, r3]
    833a:	2b01      	cmp	r3, #1
    833c:	d114      	bne.n	8368 <ns_input+0x20c>
    833e:	3323      	adds	r3, #35	; 0x23
    8340:	5cd3      	ldrb	r3, [r2, r3]
    8342:	2bff      	cmp	r3, #255	; 0xff
    8344:	d110      	bne.n	8368 <ns_input+0x20c>
      uip_ipaddr_copy(&UIP_IP_BUF->destipaddr, &UIP_IP_BUF->srcipaddr);
    8346:	1c10      	adds	r0, r2, #0
    8348:	1c13      	adds	r3, r2, #0
    834a:	3318      	adds	r3, #24
    834c:	3208      	adds	r2, #8
    834e:	ca32      	ldmia	r2!, {r1, r4, r5}
    8350:	c332      	stmia	r3!, {r1, r4, r5}
    8352:	6812      	ldr	r2, [r2, #0]
    8354:	601a      	str	r2, [r3, #0]
      uip_ipaddr_copy(&UIP_IP_BUF->srcipaddr, &UIP_ND6_NS_BUF->tgtipaddr);
    8356:	4b2e      	ldr	r3, [pc, #184]	; (8410 <ns_input+0x2b4>)
    8358:	7819      	ldrb	r1, [r3, #0]
    835a:	1841      	adds	r1, r0, r1
    835c:	3008      	adds	r0, #8
    835e:	3130      	adds	r1, #48	; 0x30
    8360:	2210      	movs	r2, #16
    8362:	4b35      	ldr	r3, [pc, #212]	; (8438 <ns_input+0x2dc>)
    8364:	4798      	blx	r3
      flags = UIP_ND6_NA_FLAG_SOLICITED | UIP_ND6_NA_FLAG_OVERRIDE;
      goto create_na;
    8366:	e017      	b.n	8398 <ns_input+0x23c>
    }

    /* NUD CASE */
    if(uip_ds6_addr_lookup(&UIP_IP_BUF->destipaddr) == addr) {
    8368:	4836      	ldr	r0, [pc, #216]	; (8444 <ns_input+0x2e8>)
    836a:	4b34      	ldr	r3, [pc, #208]	; (843c <ns_input+0x2e0>)
    836c:	4798      	blx	r3
    836e:	4b34      	ldr	r3, [pc, #208]	; (8440 <ns_input+0x2e4>)
    8370:	681b      	ldr	r3, [r3, #0]
    8372:	4298      	cmp	r0, r3
    8374:	d145      	bne.n	8402 <ns_input+0x2a6>
      uip_ipaddr_copy(&UIP_IP_BUF->destipaddr, &UIP_IP_BUF->srcipaddr);
    8376:	4825      	ldr	r0, [pc, #148]	; (840c <ns_input+0x2b0>)
    8378:	1c03      	adds	r3, r0, #0
    837a:	3318      	adds	r3, #24
    837c:	1c02      	adds	r2, r0, #0
    837e:	3208      	adds	r2, #8
    8380:	ca32      	ldmia	r2!, {r1, r4, r5}
    8382:	c332      	stmia	r3!, {r1, r4, r5}
    8384:	6812      	ldr	r2, [r2, #0]
    8386:	601a      	str	r2, [r3, #0]
      uip_ipaddr_copy(&UIP_IP_BUF->srcipaddr, &UIP_ND6_NS_BUF->tgtipaddr);
    8388:	4b21      	ldr	r3, [pc, #132]	; (8410 <ns_input+0x2b4>)
    838a:	7819      	ldrb	r1, [r3, #0]
    838c:	1841      	adds	r1, r0, r1
    838e:	3008      	adds	r0, #8
    8390:	3130      	adds	r1, #48	; 0x30
    8392:	2210      	movs	r2, #16
    8394:	4b28      	ldr	r3, [pc, #160]	; (8438 <ns_input+0x2dc>)
    8396:	4798      	blx	r3
create_na:
    /* If the node is a router it should set R flag in NAs */
#if UIP_CONF_ROUTER
    flags = flags | UIP_ND6_NA_FLAG_ROUTER;
#endif
  uip_ext_len = 0;
    8398:	4d1d      	ldr	r5, [pc, #116]	; (8410 <ns_input+0x2b4>)
    839a:	2300      	movs	r3, #0
    839c:	702b      	strb	r3, [r5, #0]
  UIP_IP_BUF->vtc = 0x60;
    839e:	4c1b      	ldr	r4, [pc, #108]	; (840c <ns_input+0x2b0>)
    83a0:	2260      	movs	r2, #96	; 0x60
    83a2:	7022      	strb	r2, [r4, #0]
  UIP_IP_BUF->tcflow = 0;
    83a4:	7063      	strb	r3, [r4, #1]
  UIP_IP_BUF->flow = 0;
    83a6:	8063      	strh	r3, [r4, #2]
  UIP_IP_BUF->len[0] = 0;       /* length will not be more than 255 */
    83a8:	7123      	strb	r3, [r4, #4]
  UIP_IP_BUF->len[1] = UIP_ICMPH_LEN + UIP_ND6_NA_LEN + UIP_ND6_OPT_LLAO_LEN;
    83aa:	2328      	movs	r3, #40	; 0x28
    83ac:	7163      	strb	r3, [r4, #5]
  UIP_IP_BUF->proto = UIP_PROTO_ICMP6;
    83ae:	3a26      	subs	r2, #38	; 0x26
    83b0:	71a2      	strb	r2, [r4, #6]
  UIP_IP_BUF->ttl = UIP_ND6_HOP_LIMIT;
    83b2:	32c5      	adds	r2, #197	; 0xc5
    83b4:	71e2      	strb	r2, [r4, #7]

  UIP_ICMP_BUF->type = ICMP6_NA;
    83b6:	3a77      	subs	r2, #119	; 0x77
    83b8:	54e2      	strb	r2, [r4, r3]
  UIP_ICMP_BUF->icode = 0;
    83ba:	3301      	adds	r3, #1
    83bc:	2200      	movs	r2, #0
    83be:	54e2      	strb	r2, [r4, r3]

  UIP_ND6_NA_BUF->flagsreserved = flags;
    83c0:	22e0      	movs	r2, #224	; 0xe0
    83c2:	3303      	adds	r3, #3
    83c4:	54e2      	strb	r2, [r4, r3]
  memcpy(&UIP_ND6_NA_BUF->tgtipaddr, &addr->ipaddr, sizeof(uip_ipaddr_t));
    83c6:	1c20      	adds	r0, r4, #0
    83c8:	3030      	adds	r0, #48	; 0x30
    83ca:	4b1d      	ldr	r3, [pc, #116]	; (8440 <ns_input+0x2e4>)
    83cc:	6819      	ldr	r1, [r3, #0]
    83ce:	3101      	adds	r1, #1
    83d0:	3ad0      	subs	r2, #208	; 0xd0
    83d2:	4b19      	ldr	r3, [pc, #100]	; (8438 <ns_input+0x2dc>)
    83d4:	4798      	blx	r3

  create_llao(&uip_buf[uip_l2_l3_icmp_hdr_len + UIP_ND6_NA_LEN],
    83d6:	1c20      	adds	r0, r4, #0
    83d8:	3040      	adds	r0, #64	; 0x40
    83da:	2102      	movs	r1, #2
    83dc:	4b1a      	ldr	r3, [pc, #104]	; (8448 <ns_input+0x2ec>)
    83de:	4798      	blx	r3
              UIP_ND6_OPT_TLLAO);

  UIP_ICMP_BUF->icmpchksum = 0;
    83e0:	782b      	ldrb	r3, [r5, #0]
    83e2:	3328      	adds	r3, #40	; 0x28
    83e4:	191c      	adds	r4, r3, r4
    83e6:	2300      	movs	r3, #0
    83e8:	70a3      	strb	r3, [r4, #2]
    83ea:	70e3      	strb	r3, [r4, #3]
  UIP_ICMP_BUF->icmpchksum = ~uip_icmp6chksum();
    83ec:	4b17      	ldr	r3, [pc, #92]	; (844c <ns_input+0x2f0>)
    83ee:	4798      	blx	r3
    83f0:	43c3      	mvns	r3, r0
    83f2:	b29b      	uxth	r3, r3
    83f4:	70a3      	strb	r3, [r4, #2]
    83f6:	0a1b      	lsrs	r3, r3, #8
    83f8:	70e3      	strb	r3, [r4, #3]

  uip_len =
    83fa:	2250      	movs	r2, #80	; 0x50
    83fc:	4b07      	ldr	r3, [pc, #28]	; (841c <ns_input+0x2c0>)
    83fe:	801a      	strh	r2, [r3, #0]
  PRINTF(" from ");
  PRINT6ADDR(&UIP_IP_BUF->srcipaddr);
  PRINTF(" with target address ");
  PRINT6ADDR(&UIP_ND6_NA_BUF->tgtipaddr);
  PRINTF("\n\r");
  return;
    8400:	e002      	b.n	8408 <ns_input+0x2ac>

discard:
  uip_len = 0;
    8402:	2200      	movs	r2, #0
    8404:	4b05      	ldr	r3, [pc, #20]	; (841c <ns_input+0x2c0>)
    8406:	801a      	strh	r2, [r3, #0]
  return;
}
    8408:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    840a:	46c0      	nop			; (mov r8, r8)
    840c:	20002cd4 	.word	0x20002cd4
    8410:	20000b12 	.word	0x20000b12
    8414:	20000b04 	.word	0x20000b04
    8418:	20000b08 	.word	0x20000b08
    841c:	20002cc0 	.word	0x20002cc0
    8420:	20002cdc 	.word	0x20002cdc
    8424:	00006b55 	.word	0x00006b55
    8428:	20000b00 	.word	0x20000b00
    842c:	00006ae1 	.word	0x00006ae1
    8430:	00006b3d 	.word	0x00006b3d
    8434:	000108c9 	.word	0x000108c9
    8438:	000108e7 	.word	0x000108e7
    843c:	00007439 	.word	0x00007439
    8440:	20000b0c 	.word	0x20000b0c
    8444:	20002cec 	.word	0x20002cec
    8448:	00007f9d 	.word	0x00007f9d
    844c:	00008bd1 	.word	0x00008bd1

00008450 <na_input>:
 * If the NS was for DAD, it means DAD failed
 *
 */
static void
na_input(void)
{
    8450:	b5f0      	push	{r4, r5, r6, r7, lr}
    8452:	4657      	mov	r7, sl
    8454:	464e      	mov	r6, r9
    8456:	4645      	mov	r5, r8
    8458:	b4e0      	push	{r5, r6, r7}
    845a:	b082      	sub	sp, #8
  /* 
   * booleans. the three last one are not 0 or 1 but 0 or 0x80, 0x40, 0x20
   * but it works. Be careful though, do not use tests such as is_router == 1 
   */
  is_llchange = 0;
  is_router = ((UIP_ND6_NA_BUF->flagsreserved & UIP_ND6_NA_FLAG_ROUTER));
    845c:	4b85      	ldr	r3, [pc, #532]	; (8674 <na_input+0x224>)
    845e:	781b      	ldrb	r3, [r3, #0]
    8460:	1c1f      	adds	r7, r3, #0
    8462:	372c      	adds	r7, #44	; 0x2c
    8464:	4a84      	ldr	r2, [pc, #528]	; (8678 <na_input+0x228>)
    8466:	18b8      	adds	r0, r7, r2
    8468:	7804      	ldrb	r4, [r0, #0]
    ((UIP_ND6_NA_BUF->flagsreserved & UIP_ND6_NA_FLAG_SOLICITED));
  is_override =
    ((UIP_ND6_NA_BUF->flagsreserved & UIP_ND6_NA_FLAG_OVERRIDE));

#if UIP_CONF_IPV6_CHECKS
  if((UIP_IP_BUF->ttl != UIP_ND6_HOP_LIMIT) ||
    846a:	79d2      	ldrb	r2, [r2, #7]
    846c:	2aff      	cmp	r2, #255	; 0xff
    846e:	d000      	beq.n	8472 <na_input+0x22>
    8470:	e0e1      	b.n	8636 <na_input+0x1e6>
     (UIP_ICMP_BUF->icode != 0) ||
    8472:	3328      	adds	r3, #40	; 0x28
    8474:	4a80      	ldr	r2, [pc, #512]	; (8678 <na_input+0x228>)
    8476:	189b      	adds	r3, r3, r2
    ((UIP_ND6_NA_BUF->flagsreserved & UIP_ND6_NA_FLAG_SOLICITED));
  is_override =
    ((UIP_ND6_NA_BUF->flagsreserved & UIP_ND6_NA_FLAG_OVERRIDE));

#if UIP_CONF_IPV6_CHECKS
  if((UIP_IP_BUF->ttl != UIP_ND6_HOP_LIMIT) ||
    8478:	785b      	ldrb	r3, [r3, #1]
    847a:	2b00      	cmp	r3, #0
    847c:	d000      	beq.n	8480 <na_input+0x30>
    847e:	e0da      	b.n	8636 <na_input+0x1e6>
     (UIP_ICMP_BUF->icode != 0) ||
    8480:	7903      	ldrb	r3, [r0, #4]
    8482:	2bff      	cmp	r3, #255	; 0xff
    8484:	d100      	bne.n	8488 <na_input+0x38>
    8486:	e0d6      	b.n	8636 <na_input+0x1e6>
   * booleans. the three last one are not 0 or 1 but 0 or 0x80, 0x40, 0x20
   * but it works. Be careful though, do not use tests such as is_router == 1 
   */
  is_llchange = 0;
  is_router = ((UIP_ND6_NA_BUF->flagsreserved & UIP_ND6_NA_FLAG_ROUTER));
  is_solicited =
    8488:	2540      	movs	r5, #64	; 0x40
    848a:	4025      	ands	r5, r4
    848c:	46aa      	mov	sl, r5
    ((UIP_ND6_NA_BUF->flagsreserved & UIP_ND6_NA_FLAG_OVERRIDE));

#if UIP_CONF_IPV6_CHECKS
  if((UIP_IP_BUF->ttl != UIP_ND6_HOP_LIMIT) ||
     (UIP_ICMP_BUF->icode != 0) ||
     (uip_is_addr_mcast(&UIP_ND6_NA_BUF->tgtipaddr)) ||
    848e:	d003      	beq.n	8498 <na_input+0x48>
     (is_solicited && uip_is_addr_mcast(&UIP_IP_BUF->destipaddr))) {
    8490:	7e13      	ldrb	r3, [r2, #24]
    8492:	2bff      	cmp	r3, #255	; 0xff
    8494:	d100      	bne.n	8498 <na_input+0x48>
    8496:	e0ce      	b.n	8636 <na_input+0x1e6>
    goto discard;
  }
#endif /*UIP_CONF_IPV6_CHECKS */

  /* Options processing: we handle TLLAO, and must ignore others */
  nd6_opt_offset = UIP_ND6_NA_LEN;
    8498:	2214      	movs	r2, #20
    849a:	4b78      	ldr	r3, [pc, #480]	; (867c <na_input+0x22c>)
    849c:	701a      	strb	r2, [r3, #0]
  nd6_opt_llao = NULL;
    849e:	2200      	movs	r2, #0
    84a0:	4b77      	ldr	r3, [pc, #476]	; (8680 <na_input+0x230>)
    84a2:	601a      	str	r2, [r3, #0]
  while(uip_l3_icmp_hdr_len + nd6_opt_offset < uip_len) {
    84a4:	2114      	movs	r1, #20
    84a6:	1c3a      	adds	r2, r7, #0
    84a8:	3214      	adds	r2, #20
    84aa:	4b76      	ldr	r3, [pc, #472]	; (8684 <na_input+0x234>)
    84ac:	881b      	ldrh	r3, [r3, #0]
    84ae:	469c      	mov	ip, r3
    84b0:	429a      	cmp	r2, r3
    84b2:	da26      	bge.n	8502 <na_input+0xb2>
#if UIP_CONF_IPV6_CHECKS
    if(UIP_ND6_OPT_HDR_BUF->len == 0) {
    84b4:	4b70      	ldr	r3, [pc, #448]	; (8678 <na_input+0x228>)
    84b6:	18d3      	adds	r3, r2, r3
    84b8:	785a      	ldrb	r2, [r3, #1]
    84ba:	2a00      	cmp	r2, #0
    84bc:	d100      	bne.n	84c0 <na_input+0x70>
    84be:	e0ba      	b.n	8636 <na_input+0x1e6>
    84c0:	2200      	movs	r2, #0
    84c2:	9201      	str	r2, [sp, #4]
      break;
    default:
      PRINTF("ND option not supported in NA\n\r");
      break;
    }
    nd6_opt_offset += (UIP_ND6_OPT_HDR_BUF->len << 3);
    84c4:	4d6c      	ldr	r5, [pc, #432]	; (8678 <na_input+0x228>)
  /* Options processing: we handle TLLAO, and must ignore others */
  nd6_opt_offset = UIP_ND6_NA_LEN;
  nd6_opt_llao = NULL;
  while(uip_l3_icmp_hdr_len + nd6_opt_offset < uip_len) {
#if UIP_CONF_IPV6_CHECKS
    if(UIP_ND6_OPT_HDR_BUF->len == 0) {
    84c6:	1c2e      	adds	r6, r5, #0
    84c8:	e009      	b.n	84de <na_input+0x8e>
    84ca:	199b      	adds	r3, r3, r6
    84cc:	785a      	ldrb	r2, [r3, #1]
    84ce:	2a00      	cmp	r2, #0
    84d0:	d105      	bne.n	84de <na_input+0x8e>
    84d2:	4b6b      	ldr	r3, [pc, #428]	; (8680 <na_input+0x230>)
    84d4:	9a01      	ldr	r2, [sp, #4]
    84d6:	601a      	str	r2, [r3, #0]
    84d8:	4b68      	ldr	r3, [pc, #416]	; (867c <na_input+0x22c>)
    84da:	7019      	strb	r1, [r3, #0]
    84dc:	e0ab      	b.n	8636 <na_input+0x1e6>
      PRINTF("NA received is bad\n\r");
      goto discard;
    }
#endif /*UIP_CONF_IPV6_CHECKS */
    switch (UIP_ND6_OPT_HDR_BUF->type) {
    84de:	781a      	ldrb	r2, [r3, #0]
    84e0:	2a02      	cmp	r2, #2
    84e2:	d100      	bne.n	84e6 <na_input+0x96>
    case UIP_ND6_OPT_TLLAO:
      nd6_opt_llao = (uint8_t *)UIP_ND6_OPT_HDR_BUF;
    84e4:	9301      	str	r3, [sp, #4]
      break;
    default:
      PRINTF("ND option not supported in NA\n\r");
      break;
    }
    nd6_opt_offset += (UIP_ND6_OPT_HDR_BUF->len << 3);
    84e6:	187b      	adds	r3, r7, r1
    84e8:	195b      	adds	r3, r3, r5
    84ea:	785b      	ldrb	r3, [r3, #1]
    84ec:	00da      	lsls	r2, r3, #3
    84ee:	188b      	adds	r3, r1, r2
    84f0:	b2d9      	uxtb	r1, r3
#endif /*UIP_CONF_IPV6_CHECKS */

  /* Options processing: we handle TLLAO, and must ignore others */
  nd6_opt_offset = UIP_ND6_NA_LEN;
  nd6_opt_llao = NULL;
  while(uip_l3_icmp_hdr_len + nd6_opt_offset < uip_len) {
    84f2:	187b      	adds	r3, r7, r1
    84f4:	4563      	cmp	r3, ip
    84f6:	dbe8      	blt.n	84ca <na_input+0x7a>
    84f8:	4b61      	ldr	r3, [pc, #388]	; (8680 <na_input+0x230>)
    84fa:	9a01      	ldr	r2, [sp, #4]
    84fc:	601a      	str	r2, [r3, #0]
    84fe:	4b5f      	ldr	r3, [pc, #380]	; (867c <na_input+0x22c>)
    8500:	7019      	strb	r1, [r3, #0]
      PRINTF("ND option not supported in NA\n\r");
      break;
    }
    nd6_opt_offset += (UIP_ND6_OPT_HDR_BUF->len << 3);
  }
  addr = uip_ds6_addr_lookup(&UIP_ND6_NA_BUF->tgtipaddr);
    8502:	3004      	adds	r0, #4
    8504:	4b60      	ldr	r3, [pc, #384]	; (8688 <na_input+0x238>)
    8506:	4798      	blx	r3
    8508:	4b60      	ldr	r3, [pc, #384]	; (868c <na_input+0x23c>)
    850a:	6018      	str	r0, [r3, #0]
  /* Message processing, including TLLAO if any */
  if(addr != NULL) {
    850c:	2800      	cmp	r0, #0
    850e:	d000      	beq.n	8512 <na_input+0xc2>
    8510:	e091      	b.n	8636 <na_input+0x1e6>
#endif /*UIP_ND6_DEF_MAXDADNS > 0 */
    PRINTF("NA received is bad\n\r");
    goto discard;
  } else {
    uip_lladdr_t *lladdr;
    nbr = uip_ds6_nbr_lookup(&UIP_ND6_NA_BUF->tgtipaddr);
    8512:	4b58      	ldr	r3, [pc, #352]	; (8674 <na_input+0x224>)
    8514:	781b      	ldrb	r3, [r3, #0]
    8516:	4858      	ldr	r0, [pc, #352]	; (8678 <na_input+0x228>)
    8518:	18c0      	adds	r0, r0, r3
    851a:	3030      	adds	r0, #48	; 0x30
    851c:	4b5c      	ldr	r3, [pc, #368]	; (8690 <na_input+0x240>)
    851e:	4798      	blx	r3
    8520:	4e5c      	ldr	r6, [pc, #368]	; (8694 <na_input+0x244>)
    8522:	6030      	str	r0, [r6, #0]
    lladdr = (uip_lladdr_t *)uip_ds6_nbr_get_ll(nbr);
    8524:	4b5c      	ldr	r3, [pc, #368]	; (8698 <na_input+0x248>)
    8526:	4798      	blx	r3
    8528:	1c05      	adds	r5, r0, #0
    if(nbr == NULL) {
    852a:	6836      	ldr	r6, [r6, #0]
    852c:	2e00      	cmp	r6, #0
    852e:	d100      	bne.n	8532 <na_input+0xe2>
    8530:	e081      	b.n	8636 <na_input+0x1e6>
  /* 
   * booleans. the three last one are not 0 or 1 but 0 or 0x80, 0x40, 0x20
   * but it works. Be careful though, do not use tests such as is_router == 1 
   */
  is_llchange = 0;
  is_router = ((UIP_ND6_NA_BUF->flagsreserved & UIP_ND6_NA_FLAG_ROUTER));
    8532:	237f      	movs	r3, #127	; 0x7f
    8534:	1c22      	adds	r2, r4, #0
    8536:	439a      	bics	r2, r3
    8538:	4690      	mov	r8, r2
    nbr = uip_ds6_nbr_lookup(&UIP_ND6_NA_BUF->tgtipaddr);
    lladdr = (uip_lladdr_t *)uip_ds6_nbr_get_ll(nbr);
    if(nbr == NULL) {
      goto discard;
    }
    if(nd6_opt_llao != 0) {
    853a:	4b51      	ldr	r3, [pc, #324]	; (8680 <na_input+0x230>)
    853c:	681f      	ldr	r7, [r3, #0]
    853e:	2f00      	cmp	r7, #0
    8540:	d07d      	beq.n	863e <na_input+0x1ee>
      is_llchange =
        memcmp(&nd6_opt_llao[UIP_ND6_OPT_DATA_OFFSET], (void *)lladdr,
    8542:	1cbb      	adds	r3, r7, #2
    8544:	4699      	mov	r9, r3
    8546:	1c18      	adds	r0, r3, #0
    8548:	1c29      	adds	r1, r5, #0
    854a:	2208      	movs	r2, #8
    854c:	4b53      	ldr	r3, [pc, #332]	; (869c <na_input+0x24c>)
    854e:	4798      	blx	r3
               UIP_LLADDR_LEN);
    }
    if(nbr->state == NBR_INCOMPLETE) {
    8550:	2322      	movs	r3, #34	; 0x22
    8552:	5cf3      	ldrb	r3, [r6, r3]
    8554:	2b00      	cmp	r3, #0
    8556:	d122      	bne.n	859e <na_input+0x14e>
      if(nd6_opt_llao == NULL) {
        goto discard;
      }
      memcpy(lladdr, &nd6_opt_llao[UIP_ND6_OPT_DATA_OFFSET],
    8558:	1c28      	adds	r0, r5, #0
    855a:	4649      	mov	r1, r9
    855c:	2208      	movs	r2, #8
    855e:	4b50      	ldr	r3, [pc, #320]	; (86a0 <na_input+0x250>)
    8560:	4798      	blx	r3
	     UIP_LLADDR_LEN);
      if(is_solicited) {
    8562:	4653      	mov	r3, sl
    8564:	2b00      	cmp	r3, #0
    8566:	d011      	beq.n	858c <na_input+0x13c>
        nbr->state = NBR_REACHABLE;
    8568:	2201      	movs	r2, #1
    856a:	2322      	movs	r3, #34	; 0x22
    856c:	54f2      	strb	r2, [r6, r3]
        nbr->nscount = 0;
    856e:	2200      	movs	r2, #0
    8570:	3b02      	subs	r3, #2
    8572:	54f2      	strb	r2, [r6, r3]

        /* reachable time is stored in ms */
        stimer_set(&(nbr->reachable), uip_ds6_if.reachable_time / 1000);
    8574:	3610      	adds	r6, #16
    8576:	4b4b      	ldr	r3, [pc, #300]	; (86a4 <na_input+0x254>)
    8578:	68d8      	ldr	r0, [r3, #12]
    857a:	21fa      	movs	r1, #250	; 0xfa
    857c:	0089      	lsls	r1, r1, #2
    857e:	4b4a      	ldr	r3, [pc, #296]	; (86a8 <na_input+0x258>)
    8580:	4798      	blx	r3
    8582:	1c01      	adds	r1, r0, #0
    8584:	1c30      	adds	r0, r6, #0
    8586:	4b49      	ldr	r3, [pc, #292]	; (86ac <na_input+0x25c>)
    8588:	4798      	blx	r3
    858a:	e002      	b.n	8592 <na_input+0x142>

      } else {
        nbr->state = NBR_STALE;
    858c:	2202      	movs	r2, #2
    858e:	2322      	movs	r3, #34	; 0x22
    8590:	54f2      	strb	r2, [r6, r3]
      }
      nbr->isrouter = is_router;
    8592:	4b40      	ldr	r3, [pc, #256]	; (8694 <na_input+0x244>)
    8594:	681a      	ldr	r2, [r3, #0]
    8596:	2321      	movs	r3, #33	; 0x21
    8598:	4641      	mov	r1, r8
    859a:	54d1      	strb	r1, [r2, r3]
    859c:	e04b      	b.n	8636 <na_input+0x1e6>
    lladdr = (uip_lladdr_t *)uip_ds6_nbr_get_ll(nbr);
    if(nbr == NULL) {
      goto discard;
    }
    if(nd6_opt_llao != 0) {
      is_llchange =
    859e:	b2c2      	uxtb	r2, r0
    85a0:	4691      	mov	r9, r2
      } else {
        nbr->state = NBR_STALE;
      }
      nbr->isrouter = is_router;
    } else {
      if(!is_override && is_llchange) {
    85a2:	06a2      	lsls	r2, r4, #26
    85a4:	d40f      	bmi.n	85c6 <na_input+0x176>
    85a6:	464a      	mov	r2, r9
    85a8:	2a00      	cmp	r2, #0
    85aa:	d005      	beq.n	85b8 <na_input+0x168>
        if(nbr->state == NBR_REACHABLE) {
    85ac:	2b01      	cmp	r3, #1
    85ae:	d142      	bne.n	8636 <na_input+0x1e6>
          nbr->state = NBR_STALE;
    85b0:	2202      	movs	r2, #2
    85b2:	3321      	adds	r3, #33	; 0x21
    85b4:	54f2      	strb	r2, [r6, r3]
    85b6:	e03e      	b.n	8636 <na_input+0x1e6>
        }
        goto discard;
      } else {
        if(is_override || (!is_override && nd6_opt_llao != 0 && !is_llchange)
    85b8:	2f00      	cmp	r7, #0
    85ba:	d14c      	bne.n	8656 <na_input+0x206>
    85bc:	e00c      	b.n	85d8 <na_input+0x188>
           || nd6_opt_llao == 0) {
          if(nd6_opt_llao != 0) {
    85be:	2f00      	cmp	r7, #0
    85c0:	d042      	beq.n	8648 <na_input+0x1f8>

  /* 
   * booleans. the three last one are not 0 or 1 but 0 or 0x80, 0x40, 0x20
   * but it works. Be careful though, do not use tests such as is_router == 1 
   */
  is_llchange = 0;
    85c2:	2300      	movs	r3, #0
    85c4:	4699      	mov	r9, r3
        goto discard;
      } else {
        if(is_override || (!is_override && nd6_opt_llao != 0 && !is_llchange)
           || nd6_opt_llao == 0) {
          if(nd6_opt_llao != 0) {
            memcpy(lladdr, &nd6_opt_llao[UIP_ND6_OPT_DATA_OFFSET],
    85c6:	1cb9      	adds	r1, r7, #2
    85c8:	1c28      	adds	r0, r5, #0
    85ca:	2208      	movs	r2, #8
    85cc:	4b34      	ldr	r3, [pc, #208]	; (86a0 <na_input+0x250>)
    85ce:	4798      	blx	r3
		   UIP_LLADDR_LEN);
          }
          if(is_solicited) {
    85d0:	4653      	mov	r3, sl
    85d2:	2b00      	cmp	r3, #0
    85d4:	d012      	beq.n	85fc <na_input+0x1ac>
    85d6:	e002      	b.n	85de <na_input+0x18e>
    85d8:	4653      	mov	r3, sl
    85da:	2b00      	cmp	r3, #0
    85dc:	d014      	beq.n	8608 <na_input+0x1b8>
            nbr->state = NBR_REACHABLE;
    85de:	2201      	movs	r2, #1
    85e0:	2322      	movs	r3, #34	; 0x22
    85e2:	54f2      	strb	r2, [r6, r3]
            /* reachable time is stored in ms */
            stimer_set(&(nbr->reachable), uip_ds6_if.reachable_time / 1000);
    85e4:	3610      	adds	r6, #16
    85e6:	4b2f      	ldr	r3, [pc, #188]	; (86a4 <na_input+0x254>)
    85e8:	68d8      	ldr	r0, [r3, #12]
    85ea:	21fa      	movs	r1, #250	; 0xfa
    85ec:	0089      	lsls	r1, r1, #2
    85ee:	4b2e      	ldr	r3, [pc, #184]	; (86a8 <na_input+0x258>)
    85f0:	4798      	blx	r3
    85f2:	1c01      	adds	r1, r0, #0
    85f4:	1c30      	adds	r0, r6, #0
    85f6:	4b2d      	ldr	r3, [pc, #180]	; (86ac <na_input+0x25c>)
    85f8:	4798      	blx	r3
    85fa:	e005      	b.n	8608 <na_input+0x1b8>
          } else {
            if(nd6_opt_llao != 0 && is_llchange) {
    85fc:	464b      	mov	r3, r9
    85fe:	2b00      	cmp	r3, #0
    8600:	d002      	beq.n	8608 <na_input+0x1b8>
              nbr->state = NBR_STALE;
    8602:	2202      	movs	r2, #2
    8604:	2322      	movs	r3, #34	; 0x22
    8606:	54f2      	strb	r2, [r6, r3]
            }
          }
        }
      }
      if(nbr->isrouter && !is_router) {
    8608:	4b22      	ldr	r3, [pc, #136]	; (8694 <na_input+0x244>)
    860a:	681a      	ldr	r2, [r3, #0]
    860c:	2321      	movs	r3, #33	; 0x21
    860e:	5cd3      	ldrb	r3, [r2, r3]
    8610:	2b00      	cmp	r3, #0
    8612:	d00b      	beq.n	862c <na_input+0x1dc>
    8614:	4643      	mov	r3, r8
    8616:	2b00      	cmp	r3, #0
    8618:	d108      	bne.n	862c <na_input+0x1dc>
        defrt = uip_ds6_defrt_lookup(&UIP_IP_BUF->srcipaddr);
    861a:	4825      	ldr	r0, [pc, #148]	; (86b0 <na_input+0x260>)
    861c:	4b25      	ldr	r3, [pc, #148]	; (86b4 <na_input+0x264>)
    861e:	4798      	blx	r3
    8620:	4b25      	ldr	r3, [pc, #148]	; (86b8 <na_input+0x268>)
    8622:	6018      	str	r0, [r3, #0]
        if(defrt != NULL) {
    8624:	2800      	cmp	r0, #0
    8626:	d001      	beq.n	862c <na_input+0x1dc>
          uip_ds6_defrt_rm(defrt);
    8628:	4b24      	ldr	r3, [pc, #144]	; (86bc <na_input+0x26c>)
    862a:	4798      	blx	r3
        }
      }
      nbr->isrouter = is_router;
    862c:	4b19      	ldr	r3, [pc, #100]	; (8694 <na_input+0x244>)
    862e:	681a      	ldr	r2, [r3, #0]
    8630:	2321      	movs	r3, #33	; 0x21
    8632:	4641      	mov	r1, r8
    8634:	54d1      	strb	r1, [r2, r3]
  }
  
#endif /*UIP_CONF_IPV6_QUEUE_PKT */

discard:
  uip_len = 0;
    8636:	2200      	movs	r2, #0
    8638:	4b12      	ldr	r3, [pc, #72]	; (8684 <na_input+0x234>)
    863a:	801a      	strh	r2, [r3, #0]
    863c:	e014      	b.n	8668 <na_input+0x218>
    if(nd6_opt_llao != 0) {
      is_llchange =
        memcmp(&nd6_opt_llao[UIP_ND6_OPT_DATA_OFFSET], (void *)lladdr,
               UIP_LLADDR_LEN);
    }
    if(nbr->state == NBR_INCOMPLETE) {
    863e:	2322      	movs	r3, #34	; 0x22
    8640:	5cf3      	ldrb	r3, [r6, r3]
    8642:	2b00      	cmp	r3, #0
    8644:	d0f7      	beq.n	8636 <na_input+0x1e6>
    8646:	e003      	b.n	8650 <na_input+0x200>
           || nd6_opt_llao == 0) {
          if(nd6_opt_llao != 0) {
            memcpy(lladdr, &nd6_opt_llao[UIP_ND6_OPT_DATA_OFFSET],
		   UIP_LLADDR_LEN);
          }
          if(is_solicited) {
    8648:	4653      	mov	r3, sl
    864a:	2b00      	cmp	r3, #0
    864c:	d0dc      	beq.n	8608 <na_input+0x1b8>
    864e:	e7c6      	b.n	85de <na_input+0x18e>
      } else {
        nbr->state = NBR_STALE;
      }
      nbr->isrouter = is_router;
    } else {
      if(!is_override && is_llchange) {
    8650:	06a3      	lsls	r3, r4, #26
    8652:	d5c1      	bpl.n	85d8 <na_input+0x188>
    8654:	e7b3      	b.n	85be <na_input+0x16e>
        goto discard;
      } else {
        if(is_override || (!is_override && nd6_opt_llao != 0 && !is_llchange)
           || nd6_opt_llao == 0) {
          if(nd6_opt_llao != 0) {
            memcpy(lladdr, &nd6_opt_llao[UIP_ND6_OPT_DATA_OFFSET],
    8656:	1cb9      	adds	r1, r7, #2
    8658:	1c28      	adds	r0, r5, #0
    865a:	2208      	movs	r2, #8
    865c:	4b10      	ldr	r3, [pc, #64]	; (86a0 <na_input+0x250>)
    865e:	4798      	blx	r3
		   UIP_LLADDR_LEN);
          }
          if(is_solicited) {
    8660:	4653      	mov	r3, sl
    8662:	2b00      	cmp	r3, #0
    8664:	d0d0      	beq.n	8608 <na_input+0x1b8>
    8666:	e7ba      	b.n	85de <na_input+0x18e>
#endif /*UIP_CONF_IPV6_QUEUE_PKT */

discard:
  uip_len = 0;
  return;
}
    8668:	b002      	add	sp, #8
    866a:	bc1c      	pop	{r2, r3, r4}
    866c:	4690      	mov	r8, r2
    866e:	4699      	mov	r9, r3
    8670:	46a2      	mov	sl, r4
    8672:	bdf0      	pop	{r4, r5, r6, r7, pc}
    8674:	20000b12 	.word	0x20000b12
    8678:	20002cd4 	.word	0x20002cd4
    867c:	20000b08 	.word	0x20000b08
    8680:	20000b04 	.word	0x20000b04
    8684:	20002cc0 	.word	0x20002cc0
    8688:	00007439 	.word	0x00007439
    868c:	20000b0c 	.word	0x20000b0c
    8690:	00006b55 	.word	0x00006b55
    8694:	20000b00 	.word	0x20000b00
    8698:	00006b3d 	.word	0x00006b3d
    869c:	000108c9 	.word	0x000108c9
    86a0:	000108e7 	.word	0x000108e7
    86a4:	20002b68 	.word	0x20002b68
    86a8:	00010525 	.word	0x00010525
    86ac:	0000ecfd 	.word	0x0000ecfd
    86b0:	20002cdc 	.word	0x20002cdc
    86b4:	00007179 	.word	0x00007179
    86b8:	20000afc 	.word	0x20000afc
    86bc:	0000711d 	.word	0x0000711d

000086c0 <uip_nd6_ns_output>:


/*------------------------------------------------------------------*/
void
uip_nd6_ns_output(uip_ipaddr_t * src, uip_ipaddr_t * dest, uip_ipaddr_t * tgt)
{
    86c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    86c2:	1c05      	adds	r5, r0, #0
    86c4:	1c14      	adds	r4, r2, #0
  uip_ext_len = 0;
    86c6:	2200      	movs	r2, #0
    86c8:	4b53      	ldr	r3, [pc, #332]	; (8818 <uip_nd6_ns_output+0x158>)
    86ca:	701a      	strb	r2, [r3, #0]
  UIP_IP_BUF->vtc = 0x60;
    86cc:	4b53      	ldr	r3, [pc, #332]	; (881c <uip_nd6_ns_output+0x15c>)
    86ce:	2060      	movs	r0, #96	; 0x60
    86d0:	7018      	strb	r0, [r3, #0]
  UIP_IP_BUF->tcflow = 0;
    86d2:	705a      	strb	r2, [r3, #1]
  UIP_IP_BUF->flow = 0;
    86d4:	805a      	strh	r2, [r3, #2]
  UIP_IP_BUF->proto = UIP_PROTO_ICMP6;
    86d6:	323a      	adds	r2, #58	; 0x3a
    86d8:	719a      	strb	r2, [r3, #6]
  UIP_IP_BUF->ttl = UIP_ND6_HOP_LIMIT;
    86da:	32c5      	adds	r2, #197	; 0xc5
    86dc:	71da      	strb	r2, [r3, #7]

  if(dest == NULL) {
    86de:	2900      	cmp	r1, #0
    86e0:	d119      	bne.n	8716 <uip_nd6_ns_output+0x56>
    uip_create_solicited_node(tgt, &UIP_IP_BUF->destipaddr);
    86e2:	31ff      	adds	r1, #255	; 0xff
    86e4:	7619      	strb	r1, [r3, #24]
    86e6:	3afd      	subs	r2, #253	; 0xfd
    86e8:	765a      	strb	r2, [r3, #25]
    86ea:	2200      	movs	r2, #0
    86ec:	835a      	strh	r2, [r3, #26]
    86ee:	839a      	strh	r2, [r3, #28]
    86f0:	83da      	strh	r2, [r3, #30]
    86f2:	841a      	strh	r2, [r3, #32]
    86f4:	3222      	adds	r2, #34	; 0x22
    86f6:	2000      	movs	r0, #0
    86f8:	5498      	strb	r0, [r3, r2]
    86fa:	2001      	movs	r0, #1
    86fc:	3201      	adds	r2, #1
    86fe:	5498      	strb	r0, [r3, r2]
    8700:	3201      	adds	r2, #1
    8702:	5499      	strb	r1, [r3, r2]
    8704:	7b61      	ldrb	r1, [r4, #13]
    8706:	3201      	adds	r2, #1
    8708:	5499      	strb	r1, [r3, r2]
    870a:	7ba1      	ldrb	r1, [r4, #14]
    870c:	7be2      	ldrb	r2, [r4, #15]
    870e:	0212      	lsls	r2, r2, #8
    8710:	430a      	orrs	r2, r1
    8712:	84da      	strh	r2, [r3, #38]	; 0x26
    8714:	e004      	b.n	8720 <uip_nd6_ns_output+0x60>
  } else {
    uip_ipaddr_copy(&UIP_IP_BUF->destipaddr, dest);
    8716:	4841      	ldr	r0, [pc, #260]	; (881c <uip_nd6_ns_output+0x15c>)
    8718:	3018      	adds	r0, #24
    871a:	2210      	movs	r2, #16
    871c:	4b40      	ldr	r3, [pc, #256]	; (8820 <uip_nd6_ns_output+0x160>)
    871e:	4798      	blx	r3
  }
  UIP_ICMP_BUF->type = ICMP6_NS;
    8720:	4b3d      	ldr	r3, [pc, #244]	; (8818 <uip_nd6_ns_output+0x158>)
    8722:	7818      	ldrb	r0, [r3, #0]
    8724:	1c03      	adds	r3, r0, #0
    8726:	3328      	adds	r3, #40	; 0x28
    8728:	4e3c      	ldr	r6, [pc, #240]	; (881c <uip_nd6_ns_output+0x15c>)
    872a:	199b      	adds	r3, r3, r6
    872c:	2287      	movs	r2, #135	; 0x87
    872e:	701a      	strb	r2, [r3, #0]
  UIP_ICMP_BUF->icode = 0;
    8730:	2700      	movs	r7, #0
    8732:	705f      	strb	r7, [r3, #1]
  UIP_ND6_NS_BUF->reserved = 0;
    8734:	302c      	adds	r0, #44	; 0x2c
    8736:	1980      	adds	r0, r0, r6
    8738:	2300      	movs	r3, #0
    873a:	7003      	strb	r3, [r0, #0]
    873c:	7043      	strb	r3, [r0, #1]
    873e:	7083      	strb	r3, [r0, #2]
    8740:	70c3      	strb	r3, [r0, #3]
  uip_ipaddr_copy((uip_ipaddr_t *) &UIP_ND6_NS_BUF->tgtipaddr, tgt);
    8742:	3004      	adds	r0, #4
    8744:	1c21      	adds	r1, r4, #0
    8746:	3a77      	subs	r2, #119	; 0x77
    8748:	4b35      	ldr	r3, [pc, #212]	; (8820 <uip_nd6_ns_output+0x160>)
    874a:	4798      	blx	r3
  UIP_IP_BUF->len[0] = 0;       /* length will not be more than 255 */
    874c:	7137      	strb	r7, [r6, #4]
  /*
   * check if we add a SLLAO option: for DAD, MUST NOT, for NUD, MAY
   * (here yes), for Address resolution , MUST 
   */
  if(!(uip_ds6_is_my_addr(tgt))) {
    874e:	1c20      	adds	r0, r4, #0
    8750:	4b34      	ldr	r3, [pc, #208]	; (8824 <uip_nd6_ns_output+0x164>)
    8752:	4798      	blx	r3
    8754:	2800      	cmp	r0, #0
    8756:	d13f      	bne.n	87d8 <uip_nd6_ns_output+0x118>
    if(src != NULL) {
    8758:	2d00      	cmp	r5, #0
    875a:	d006      	beq.n	876a <uip_nd6_ns_output+0xaa>
      uip_ipaddr_copy(&UIP_IP_BUF->srcipaddr, src);
    875c:	482f      	ldr	r0, [pc, #188]	; (881c <uip_nd6_ns_output+0x15c>)
    875e:	3008      	adds	r0, #8
    8760:	1c29      	adds	r1, r5, #0
    8762:	2210      	movs	r2, #16
    8764:	4b2e      	ldr	r3, [pc, #184]	; (8820 <uip_nd6_ns_output+0x160>)
    8766:	4798      	blx	r3
    8768:	e004      	b.n	8774 <uip_nd6_ns_output+0xb4>
    } else {
      uip_ds6_select_src(&UIP_IP_BUF->srcipaddr, &UIP_IP_BUF->destipaddr);
    876a:	482f      	ldr	r0, [pc, #188]	; (8828 <uip_nd6_ns_output+0x168>)
    876c:	1c01      	adds	r1, r0, #0
    876e:	3110      	adds	r1, #16
    8770:	4b2e      	ldr	r3, [pc, #184]	; (882c <uip_nd6_ns_output+0x16c>)
    8772:	4798      	blx	r3
    }
    if (uip_is_addr_unspecified(&UIP_IP_BUF->srcipaddr)) {
    8774:	4b29      	ldr	r3, [pc, #164]	; (881c <uip_nd6_ns_output+0x15c>)
    8776:	891b      	ldrh	r3, [r3, #8]
    8778:	2b00      	cmp	r3, #0
    877a:	d11f      	bne.n	87bc <uip_nd6_ns_output+0xfc>
    877c:	4b27      	ldr	r3, [pc, #156]	; (881c <uip_nd6_ns_output+0x15c>)
    877e:	895b      	ldrh	r3, [r3, #10]
    8780:	2b00      	cmp	r3, #0
    8782:	d11b      	bne.n	87bc <uip_nd6_ns_output+0xfc>
    8784:	4b25      	ldr	r3, [pc, #148]	; (881c <uip_nd6_ns_output+0x15c>)
    8786:	899b      	ldrh	r3, [r3, #12]
    8788:	2b00      	cmp	r3, #0
    878a:	d117      	bne.n	87bc <uip_nd6_ns_output+0xfc>
    878c:	4b23      	ldr	r3, [pc, #140]	; (881c <uip_nd6_ns_output+0x15c>)
    878e:	89db      	ldrh	r3, [r3, #14]
    8790:	2b00      	cmp	r3, #0
    8792:	d113      	bne.n	87bc <uip_nd6_ns_output+0xfc>
    8794:	4b21      	ldr	r3, [pc, #132]	; (881c <uip_nd6_ns_output+0x15c>)
    8796:	8a1b      	ldrh	r3, [r3, #16]
    8798:	2b00      	cmp	r3, #0
    879a:	d10f      	bne.n	87bc <uip_nd6_ns_output+0xfc>
    879c:	4b1f      	ldr	r3, [pc, #124]	; (881c <uip_nd6_ns_output+0x15c>)
    879e:	8a5b      	ldrh	r3, [r3, #18]
    87a0:	2b00      	cmp	r3, #0
    87a2:	d10b      	bne.n	87bc <uip_nd6_ns_output+0xfc>
    87a4:	4b1d      	ldr	r3, [pc, #116]	; (881c <uip_nd6_ns_output+0x15c>)
    87a6:	8a9b      	ldrh	r3, [r3, #20]
    87a8:	2b00      	cmp	r3, #0
    87aa:	d107      	bne.n	87bc <uip_nd6_ns_output+0xfc>
    87ac:	4b1b      	ldr	r3, [pc, #108]	; (881c <uip_nd6_ns_output+0x15c>)
    87ae:	8adb      	ldrh	r3, [r3, #22]
    87b0:	2b00      	cmp	r3, #0
    87b2:	d103      	bne.n	87bc <uip_nd6_ns_output+0xfc>
      PRINTF("Dropping NS due to no suitable source address\n\r");
      uip_len = 0;
    87b4:	2200      	movs	r2, #0
    87b6:	4b1e      	ldr	r3, [pc, #120]	; (8830 <uip_nd6_ns_output+0x170>)
    87b8:	801a      	strh	r2, [r3, #0]
      return;
    87ba:	e02b      	b.n	8814 <uip_nd6_ns_output+0x154>
    }
    UIP_IP_BUF->len[1] =
    87bc:	4b17      	ldr	r3, [pc, #92]	; (881c <uip_nd6_ns_output+0x15c>)
    87be:	2228      	movs	r2, #40	; 0x28
    87c0:	715a      	strb	r2, [r3, #5]
      UIP_ICMPH_LEN + UIP_ND6_NS_LEN + UIP_ND6_OPT_LLAO_LEN;

    create_llao(&uip_buf[uip_l2_l3_icmp_hdr_len + UIP_ND6_NS_LEN],
    87c2:	4a15      	ldr	r2, [pc, #84]	; (8818 <uip_nd6_ns_output+0x158>)
    87c4:	7810      	ldrb	r0, [r2, #0]
    87c6:	3040      	adds	r0, #64	; 0x40
    87c8:	18c0      	adds	r0, r0, r3
    87ca:	2101      	movs	r1, #1
    87cc:	4b19      	ldr	r3, [pc, #100]	; (8834 <uip_nd6_ns_output+0x174>)
    87ce:	4798      	blx	r3
		UIP_ND6_OPT_SLLAO);

    uip_len =
    87d0:	2250      	movs	r2, #80	; 0x50
    87d2:	4b17      	ldr	r3, [pc, #92]	; (8830 <uip_nd6_ns_output+0x170>)
    87d4:	801a      	strh	r2, [r3, #0]
    87d6:	e00e      	b.n	87f6 <uip_nd6_ns_output+0x136>
      UIP_IPH_LEN + UIP_ICMPH_LEN + UIP_ND6_NS_LEN + UIP_ND6_OPT_LLAO_LEN;
  } else {
    uip_create_unspecified(&UIP_IP_BUF->srcipaddr);
    87d8:	4b10      	ldr	r3, [pc, #64]	; (881c <uip_nd6_ns_output+0x15c>)
    87da:	2200      	movs	r2, #0
    87dc:	811a      	strh	r2, [r3, #8]
    87de:	815a      	strh	r2, [r3, #10]
    87e0:	819a      	strh	r2, [r3, #12]
    87e2:	81da      	strh	r2, [r3, #14]
    87e4:	821a      	strh	r2, [r3, #16]
    87e6:	825a      	strh	r2, [r3, #18]
    87e8:	829a      	strh	r2, [r3, #20]
    87ea:	82da      	strh	r2, [r3, #22]
    UIP_IP_BUF->len[1] = UIP_ICMPH_LEN + UIP_ND6_NS_LEN;
    87ec:	3218      	adds	r2, #24
    87ee:	715a      	strb	r2, [r3, #5]
    uip_len = UIP_IPH_LEN + UIP_ICMPH_LEN + UIP_ND6_NS_LEN;
    87f0:	3228      	adds	r2, #40	; 0x28
    87f2:	4b0f      	ldr	r3, [pc, #60]	; (8830 <uip_nd6_ns_output+0x170>)
    87f4:	801a      	strh	r2, [r3, #0]
  }

  UIP_ICMP_BUF->icmpchksum = 0;
    87f6:	4b08      	ldr	r3, [pc, #32]	; (8818 <uip_nd6_ns_output+0x158>)
    87f8:	781c      	ldrb	r4, [r3, #0]
    87fa:	3428      	adds	r4, #40	; 0x28
    87fc:	4b07      	ldr	r3, [pc, #28]	; (881c <uip_nd6_ns_output+0x15c>)
    87fe:	18e4      	adds	r4, r4, r3
    8800:	2300      	movs	r3, #0
    8802:	70a3      	strb	r3, [r4, #2]
    8804:	70e3      	strb	r3, [r4, #3]
  UIP_ICMP_BUF->icmpchksum = ~uip_icmp6chksum();
    8806:	4b0c      	ldr	r3, [pc, #48]	; (8838 <uip_nd6_ns_output+0x178>)
    8808:	4798      	blx	r3
    880a:	43c0      	mvns	r0, r0
    880c:	b280      	uxth	r0, r0
    880e:	70a0      	strb	r0, [r4, #2]
    8810:	0a00      	lsrs	r0, r0, #8
    8812:	70e0      	strb	r0, [r4, #3]
  PRINT6ADDR(&UIP_IP_BUF->srcipaddr);
  PRINTF("with target address");
  PRINT6ADDR(tgt);
  PRINTF("\n\r");
  return;
}
    8814:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    8816:	46c0      	nop			; (mov r8, r8)
    8818:	20000b12 	.word	0x20000b12
    881c:	20002cd4 	.word	0x20002cd4
    8820:	000108e7 	.word	0x000108e7
    8824:	00007439 	.word	0x00007439
    8828:	20002cdc 	.word	0x20002cdc
    882c:	0000770d 	.word	0x0000770d
    8830:	20002cc0 	.word	0x20002cc0
    8834:	00007f9d 	.word	0x00007f9d
    8838:	00008bd1 	.word	0x00008bd1

0000883c <uip_nd6_ra_output>:
}

/*---------------------------------------------------------------------------*/
void
uip_nd6_ra_output(uip_ipaddr_t * dest)
{
    883c:	b5f0      	push	{r4, r5, r6, r7, lr}
    883e:	4647      	mov	r7, r8
    8840:	b480      	push	{r7}
    8842:	1c01      	adds	r1, r0, #0

  UIP_IP_BUF->vtc = 0x60;
    8844:	4b45      	ldr	r3, [pc, #276]	; (895c <uip_nd6_ra_output+0x120>)
    8846:	2260      	movs	r2, #96	; 0x60
    8848:	701a      	strb	r2, [r3, #0]
  UIP_IP_BUF->tcflow = 0;
    884a:	2200      	movs	r2, #0
    884c:	705a      	strb	r2, [r3, #1]
  UIP_IP_BUF->flow = 0;
    884e:	805a      	strh	r2, [r3, #2]
  UIP_IP_BUF->proto = UIP_PROTO_ICMP6;
    8850:	323a      	adds	r2, #58	; 0x3a
    8852:	719a      	strb	r2, [r3, #6]
  UIP_IP_BUF->ttl = UIP_ND6_HOP_LIMIT;
    8854:	32c5      	adds	r2, #197	; 0xc5
    8856:	71da      	strb	r2, [r3, #7]

  if(dest == NULL) {
    8858:	2800      	cmp	r0, #0
    885a:	d10c      	bne.n	8876 <uip_nd6_ra_output+0x3a>
    uip_create_linklocal_allnodes_mcast(&UIP_IP_BUF->destipaddr);
    885c:	4a40      	ldr	r2, [pc, #256]	; (8960 <uip_nd6_ra_output+0x124>)
    885e:	831a      	strh	r2, [r3, #24]
    8860:	2200      	movs	r2, #0
    8862:	835a      	strh	r2, [r3, #26]
    8864:	839a      	strh	r2, [r3, #28]
    8866:	83da      	strh	r2, [r3, #30]
    8868:	841a      	strh	r2, [r3, #32]
    886a:	845a      	strh	r2, [r3, #34]	; 0x22
    886c:	849a      	strh	r2, [r3, #36]	; 0x24
    886e:	3201      	adds	r2, #1
    8870:	32ff      	adds	r2, #255	; 0xff
    8872:	84da      	strh	r2, [r3, #38]	; 0x26
    8874:	e004      	b.n	8880 <uip_nd6_ra_output+0x44>
  } else {
    /* For sollicited RA */
    uip_ipaddr_copy(&UIP_IP_BUF->destipaddr, dest);
    8876:	4839      	ldr	r0, [pc, #228]	; (895c <uip_nd6_ra_output+0x120>)
    8878:	3018      	adds	r0, #24
    887a:	2210      	movs	r2, #16
    887c:	4b39      	ldr	r3, [pc, #228]	; (8964 <uip_nd6_ra_output+0x128>)
    887e:	4798      	blx	r3
  }
  uip_ds6_select_src(&UIP_IP_BUF->srcipaddr, &UIP_IP_BUF->destipaddr);
    8880:	4c39      	ldr	r4, [pc, #228]	; (8968 <uip_nd6_ra_output+0x12c>)
    8882:	1c21      	adds	r1, r4, #0
    8884:	3110      	adds	r1, #16
    8886:	1c20      	adds	r0, r4, #0
    8888:	4b38      	ldr	r3, [pc, #224]	; (896c <uip_nd6_ra_output+0x130>)
    888a:	4798      	blx	r3

  UIP_ICMP_BUF->type = ICMP6_RA;
    888c:	4e38      	ldr	r6, [pc, #224]	; (8970 <uip_nd6_ra_output+0x134>)
    888e:	7835      	ldrb	r5, [r6, #0]
    8890:	1c2b      	adds	r3, r5, #0
    8892:	3328      	adds	r3, #40	; 0x28
    8894:	3c08      	subs	r4, #8
    8896:	191b      	adds	r3, r3, r4
    8898:	2286      	movs	r2, #134	; 0x86
    889a:	701a      	strb	r2, [r3, #0]
  UIP_ICMP_BUF->icode = 0;
    889c:	2200      	movs	r2, #0
    889e:	705a      	strb	r2, [r3, #1]

  UIP_ND6_RA_BUF->cur_ttl = uip_ds6_if.cur_hop_limit;
    88a0:	352c      	adds	r5, #44	; 0x2c
    88a2:	192d      	adds	r5, r5, r4
    88a4:	4b33      	ldr	r3, [pc, #204]	; (8974 <uip_nd6_ra_output+0x138>)
    88a6:	791b      	ldrb	r3, [r3, #4]
    88a8:	702b      	strb	r3, [r5, #0]

  UIP_ND6_RA_BUF->flags_reserved =
    88aa:	706a      	strb	r2, [r5, #1]
    (UIP_ND6_M_FLAG << 7) | (UIP_ND6_O_FLAG << 6);

  UIP_ND6_RA_BUF->router_lifetime = uip_htons(UIP_ND6_ROUTER_LIFETIME);
    88ac:	20e1      	movs	r0, #225	; 0xe1
    88ae:	00c0      	lsls	r0, r0, #3
    88b0:	4b31      	ldr	r3, [pc, #196]	; (8978 <uip_nd6_ra_output+0x13c>)
    88b2:	4798      	blx	r3
    88b4:	70a8      	strb	r0, [r5, #2]
    88b6:	0a00      	lsrs	r0, r0, #8
    88b8:	70e8      	strb	r0, [r5, #3]
  //UIP_ND6_RA_BUF->reachable_time = uip_htonl(uip_ds6_if.reachable_time);
  //UIP_ND6_RA_BUF->retrans_timer = uip_htonl(uip_ds6_if.retrans_timer);
  UIP_ND6_RA_BUF->reachable_time = 0;
    88ba:	7830      	ldrb	r0, [r6, #0]
    88bc:	1c03      	adds	r3, r0, #0
    88be:	332c      	adds	r3, #44	; 0x2c
    88c0:	191b      	adds	r3, r3, r4
    88c2:	2200      	movs	r2, #0
    88c4:	711a      	strb	r2, [r3, #4]
    88c6:	715a      	strb	r2, [r3, #5]
    88c8:	719a      	strb	r2, [r3, #6]
    88ca:	71da      	strb	r2, [r3, #7]
  UIP_ND6_RA_BUF->retrans_timer = 0;
    88cc:	721a      	strb	r2, [r3, #8]
    88ce:	725a      	strb	r2, [r3, #9]
    88d0:	729a      	strb	r2, [r3, #10]
    88d2:	72da      	strb	r2, [r3, #11]

  uip_len = UIP_IPH_LEN + UIP_ICMPH_LEN + UIP_ND6_RA_LEN;
    88d4:	4f29      	ldr	r7, [pc, #164]	; (897c <uip_nd6_ra_output+0x140>)
    88d6:	2338      	movs	r3, #56	; 0x38
    88d8:	803b      	strh	r3, [r7, #0]
    }
  }
#endif /* !UIP_CONF_ROUTER */

  /* Source link-layer option */
  create_llao((uint8_t *)UIP_ND6_OPT_HDR_BUF, UIP_ND6_OPT_SLLAO);
    88da:	3038      	adds	r0, #56	; 0x38
    88dc:	1900      	adds	r0, r0, r4
    88de:	2101      	movs	r1, #1
    88e0:	4b27      	ldr	r3, [pc, #156]	; (8980 <uip_nd6_ra_output+0x144>)
    88e2:	4798      	blx	r3

  uip_len += UIP_ND6_OPT_LLAO_LEN;
    88e4:	883b      	ldrh	r3, [r7, #0]
    88e6:	3310      	adds	r3, #16
    88e8:	803b      	strh	r3, [r7, #0]
  nd6_opt_offset += UIP_ND6_OPT_LLAO_LEN;
    88ea:	4b26      	ldr	r3, [pc, #152]	; (8984 <uip_nd6_ra_output+0x148>)
    88ec:	4698      	mov	r8, r3
    88ee:	231c      	movs	r3, #28
    88f0:	4642      	mov	r2, r8
    88f2:	7013      	strb	r3, [r2, #0]

  /* MTU */
  UIP_ND6_OPT_MTU_BUF->type = UIP_ND6_OPT_MTU;
    88f4:	7835      	ldrb	r5, [r6, #0]
    88f6:	3548      	adds	r5, #72	; 0x48
    88f8:	192d      	adds	r5, r5, r4
    88fa:	3b17      	subs	r3, #23
    88fc:	702b      	strb	r3, [r5, #0]
  UIP_ND6_OPT_MTU_BUF->len = UIP_ND6_OPT_MTU_LEN >> 3;
    88fe:	3b04      	subs	r3, #4
    8900:	706b      	strb	r3, [r5, #1]
  UIP_ND6_OPT_MTU_BUF->reserved = 0;
    8902:	2300      	movs	r3, #0
    8904:	70ab      	strb	r3, [r5, #2]
    8906:	70eb      	strb	r3, [r5, #3]
  //UIP_ND6_OPT_MTU_BUF->mtu = uip_htonl(uip_ds6_if.link_mtu);
  UIP_ND6_OPT_MTU_BUF->mtu = uip_htonl(1500);
    8908:	481f      	ldr	r0, [pc, #124]	; (8988 <uip_nd6_ra_output+0x14c>)
    890a:	4b20      	ldr	r3, [pc, #128]	; (898c <uip_nd6_ra_output+0x150>)
    890c:	4798      	blx	r3
    890e:	7128      	strb	r0, [r5, #4]
    8910:	0a03      	lsrs	r3, r0, #8
    8912:	716b      	strb	r3, [r5, #5]
    8914:	0c03      	lsrs	r3, r0, #16
    8916:	71ab      	strb	r3, [r5, #6]
    8918:	0e00      	lsrs	r0, r0, #24
    891a:	71e8      	strb	r0, [r5, #7]

  uip_len += UIP_ND6_OPT_MTU_LEN;
    891c:	883b      	ldrh	r3, [r7, #0]
    891e:	3308      	adds	r3, #8
    8920:	b29b      	uxth	r3, r3
    8922:	803b      	strh	r3, [r7, #0]
  nd6_opt_offset += UIP_ND6_OPT_MTU_LEN;
    8924:	4642      	mov	r2, r8
    8926:	7812      	ldrb	r2, [r2, #0]
    8928:	3208      	adds	r2, #8
    892a:	4641      	mov	r1, r8
    892c:	700a      	strb	r2, [r1, #0]
  UIP_IP_BUF->len[0] = ((uip_len - UIP_IPH_LEN) >> 8);
    892e:	1c1a      	adds	r2, r3, #0
    8930:	3a28      	subs	r2, #40	; 0x28
    8932:	1212      	asrs	r2, r2, #8
    8934:	7122      	strb	r2, [r4, #4]
  UIP_IP_BUF->len[1] = ((uip_len - UIP_IPH_LEN) & 0xff);
    8936:	3b28      	subs	r3, #40	; 0x28
    8938:	7163      	strb	r3, [r4, #5]

  /*ICMP checksum */
  UIP_ICMP_BUF->icmpchksum = 0;
    893a:	7833      	ldrb	r3, [r6, #0]
    893c:	3328      	adds	r3, #40	; 0x28
    893e:	191c      	adds	r4, r3, r4
    8940:	2300      	movs	r3, #0
    8942:	70a3      	strb	r3, [r4, #2]
    8944:	70e3      	strb	r3, [r4, #3]
  UIP_ICMP_BUF->icmpchksum = ~uip_icmp6chksum();
    8946:	4b12      	ldr	r3, [pc, #72]	; (8990 <uip_nd6_ra_output+0x154>)
    8948:	4798      	blx	r3
    894a:	43c0      	mvns	r0, r0
    894c:	b280      	uxth	r0, r0
    894e:	70a0      	strb	r0, [r4, #2]
    8950:	0a00      	lsrs	r0, r0, #8
    8952:	70e0      	strb	r0, [r4, #3]
  PRINT6ADDR(&UIP_IP_BUF->destipaddr);
  PRINTF("from");
  PRINT6ADDR(&UIP_IP_BUF->srcipaddr);
  PRINTF("\n\r");
  return;
}
    8954:	bc04      	pop	{r2}
    8956:	4690      	mov	r8, r2
    8958:	bdf0      	pop	{r4, r5, r6, r7, pc}
    895a:	46c0      	nop			; (mov r8, r8)
    895c:	20002cd4 	.word	0x20002cd4
    8960:	000002ff 	.word	0x000002ff
    8964:	000108e7 	.word	0x000108e7
    8968:	20002cdc 	.word	0x20002cdc
    896c:	0000770d 	.word	0x0000770d
    8970:	20000b12 	.word	0x20000b12
    8974:	20002b68 	.word	0x20002b68
    8978:	00009fc1 	.word	0x00009fc1
    897c:	20002cc0 	.word	0x20002cc0
    8980:	00007f9d 	.word	0x00007f9d
    8984:	20000b08 	.word	0x20000b08
    8988:	000005dc 	.word	0x000005dc
    898c:	00009fcd 	.word	0x00009fcd
    8990:	00008bd1 	.word	0x00008bd1

00008994 <uip_nd6_init>:
                  ra_input);
#endif
/*---------------------------------------------------------------------------*/
void
uip_nd6_init()
{
    8994:	b510      	push	{r4, lr}

#if UIP_ND6_SEND_NA
  /* Only handle NSs if we are prepared to send out NAs */
  uip_icmp6_register_input_handler(&ns_input_handler);
    8996:	4804      	ldr	r0, [pc, #16]	; (89a8 <uip_nd6_init+0x14>)
    8998:	4c04      	ldr	r4, [pc, #16]	; (89ac <uip_nd6_init+0x18>)
    899a:	47a0      	blx	r4
  /*
   * Only handle NAs if we are prepared to send out NAs.
   * This is perhaps logically incorrect, but this condition was present in
   * uip_process and we keep it until proven wrong
   */
  uip_icmp6_register_input_handler(&na_input_handler);
    899c:	4804      	ldr	r0, [pc, #16]	; (89b0 <uip_nd6_init+0x1c>)
    899e:	47a0      	blx	r4
#endif


#if UIP_CONF_ROUTER && UIP_ND6_SEND_RA
  /* Only accept RS if we are a router and happy to send out RAs */
  uip_icmp6_register_input_handler(&rs_input_handler);
    89a0:	4804      	ldr	r0, [pc, #16]	; (89b4 <uip_nd6_init+0x20>)
    89a2:	47a0      	blx	r4

#if !UIP_CONF_ROUTER
  /* Only process RAs if we are not a router */
  uip_icmp6_register_input_handler(&ra_input_handler);
#endif
}
    89a4:	bd10      	pop	{r4, pc}
    89a6:	46c0      	nop			; (mov r8, r8)
    89a8:	20000098 	.word	0x20000098
    89ac:	00007ce9 	.word	0x00007ce9
    89b0:	200000a4 	.word	0x200000a4
    89b4:	2000008c 	.word	0x2000008c

000089b8 <chksum>:

#if ! UIP_ARCH_CHKSUM
/*---------------------------------------------------------------------------*/
static uint16_t
chksum(uint16_t sum, const uint8_t *data, uint16_t len)
{
    89b8:	b530      	push	{r4, r5, lr}
  uint16_t t;
  const uint8_t *dataptr;
  const uint8_t *last_byte;

  dataptr = data;
  last_byte = data + len - 1;
    89ba:	3a01      	subs	r2, #1
    89bc:	188a      	adds	r2, r1, r2
  
  while(dataptr < last_byte) {   /* At least two more bytes */
    89be:	4291      	cmp	r1, r2
    89c0:	d214      	bcs.n	89ec <chksum+0x34>
    89c2:	1c0c      	adds	r4, r1, #0
    t = (dataptr[0] << 8) + dataptr[1];
    89c4:	7823      	ldrb	r3, [r4, #0]
    89c6:	021b      	lsls	r3, r3, #8
    89c8:	7865      	ldrb	r5, [r4, #1]
    89ca:	18eb      	adds	r3, r5, r3
    89cc:	b29b      	uxth	r3, r3
    sum += t;
    89ce:	18c0      	adds	r0, r0, r3
    89d0:	b280      	uxth	r0, r0
    if(sum < t) {
    89d2:	4283      	cmp	r3, r0
    89d4:	d901      	bls.n	89da <chksum+0x22>
      sum++;      /* carry */
    89d6:	3001      	adds	r0, #1
    89d8:	b280      	uxth	r0, r0
    }
    dataptr += 2;
    89da:	3402      	adds	r4, #2
  const uint8_t *last_byte;

  dataptr = data;
  last_byte = data + len - 1;
  
  while(dataptr < last_byte) {   /* At least two more bytes */
    89dc:	42a2      	cmp	r2, r4
    89de:	d8f1      	bhi.n	89c4 <chksum+0xc>
    89e0:	43cb      	mvns	r3, r1
    89e2:	189b      	adds	r3, r3, r2
    89e4:	085b      	lsrs	r3, r3, #1
    89e6:	3301      	adds	r3, #1
    89e8:	005b      	lsls	r3, r3, #1
    89ea:	18c9      	adds	r1, r1, r3
      sum++;      /* carry */
    }
    dataptr += 2;
  }
  
  if(dataptr == last_byte) {
    89ec:	4291      	cmp	r1, r2
    89ee:	d107      	bne.n	8a00 <chksum+0x48>
    t = (dataptr[0] << 8) + 0;
    89f0:	780b      	ldrb	r3, [r1, #0]
    89f2:	021b      	lsls	r3, r3, #8
    sum += t;
    89f4:	1818      	adds	r0, r3, r0
    89f6:	b280      	uxth	r0, r0
    if(sum < t) {
    89f8:	4283      	cmp	r3, r0
    89fa:	d901      	bls.n	8a00 <chksum+0x48>
      sum++;      /* carry */
    89fc:	3001      	adds	r0, #1
    89fe:	b280      	uxth	r0, r0
    }
  }

  /* Return sum in host byte order. */
  return sum;
}
    8a00:	bd30      	pop	{r4, r5, pc}
    8a02:	46c0      	nop			; (mov r8, r8)

00008a04 <ext_hdr_options_process>:
/**
 * \brief Process the options in Destination and Hop By Hop extension headers
 */
static uint8_t
ext_hdr_options_process(void)
{
    8a04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 /*
  * Length field in the extension header: length of the header in units of
  * 8 bytes, excluding the first 8 bytes
  * length field in an option : the length of data in the option
  */
  uip_ext_opt_offset = 2;
    8a06:	2202      	movs	r2, #2
    8a08:	4b31      	ldr	r3, [pc, #196]	; (8ad0 <ext_hdr_options_process+0xcc>)
    8a0a:	701a      	strb	r2, [r3, #0]
  while(uip_ext_opt_offset < ((UIP_EXT_BUF->len << 3) + 8)) {
    8a0c:	4b31      	ldr	r3, [pc, #196]	; (8ad4 <ext_hdr_options_process+0xd0>)
    8a0e:	781a      	ldrb	r2, [r3, #0]
    8a10:	1c16      	adds	r6, r2, #0
    8a12:	3628      	adds	r6, #40	; 0x28
    8a14:	4930      	ldr	r1, [pc, #192]	; (8ad8 <ext_hdr_options_process+0xd4>)
    8a16:	1871      	adds	r1, r6, r1
    8a18:	784d      	ldrb	r5, [r1, #1]
    8a1a:	00ed      	lsls	r5, r5, #3
    8a1c:	3508      	adds	r5, #8
    8a1e:	2302      	movs	r3, #2
         *   Address was not a multicast address, send an ICMP Parameter
         *   Problem, Code 2, message to the packet's Source Address,
         *   pointing to the unrecognized Option Type.
         */
        PRINTF("MSB %x\n\r", UIP_EXT_HDR_OPT_BUF->type);
        switch(UIP_EXT_HDR_OPT_BUF->type & 0xC0) {
    8a20:	273f      	movs	r7, #63	; 0x3f
  * Length field in the extension header: length of the header in units of
  * 8 bytes, excluding the first 8 bytes
  * length field in an option : the length of data in the option
  */
  uip_ext_opt_offset = 2;
  while(uip_ext_opt_offset < ((UIP_EXT_BUF->len << 3) + 8)) {
    8a22:	e04a      	b.n	8aba <ext_hdr_options_process+0xb6>
    switch(UIP_EXT_HDR_OPT_BUF->type) {
    8a24:	1999      	adds	r1, r3, r6
    8a26:	4c2c      	ldr	r4, [pc, #176]	; (8ad8 <ext_hdr_options_process+0xd4>)
    8a28:	46a4      	mov	ip, r4
    8a2a:	4461      	add	r1, ip
    8a2c:	780c      	ldrb	r4, [r1, #0]
    8a2e:	2c01      	cmp	r4, #1
    8a30:	d007      	beq.n	8a42 <ext_hdr_options_process+0x3e>
    8a32:	2c00      	cmp	r4, #0
    8a34:	d002      	beq.n	8a3c <ext_hdr_options_process+0x38>
    8a36:	2c63      	cmp	r4, #99	; 0x63
    8a38:	d008      	beq.n	8a4c <ext_hdr_options_process+0x48>
    8a3a:	e01c      	b.n	8a76 <ext_hdr_options_process+0x72>
       * PAD1 does not make sense as the header must be 8bytes aligned,
       * hence we can only have
       */
      case UIP_EXT_HDR_OPT_PAD1:
        PRINTF("Processing PAD1 option\n\r");
        uip_ext_opt_offset += 1;
    8a3c:	3301      	adds	r3, #1
    8a3e:	b2db      	uxtb	r3, r3
        break;
    8a40:	e03b      	b.n	8aba <ext_hdr_options_process+0xb6>
    8a42:	7849      	ldrb	r1, [r1, #1]
    8a44:	3102      	adds	r1, #2
      case UIP_EXT_HDR_OPT_PADN:
        PRINTF("Processing PADN option\n\r");
        uip_ext_opt_offset += UIP_EXT_HDR_OPT_PADN_BUF->opt_len + 2;
    8a46:	185b      	adds	r3, r3, r1
    8a48:	b2db      	uxtb	r3, r3
        break;
    8a4a:	e036      	b.n	8aba <ext_hdr_options_process+0xb6>
    8a4c:	4a20      	ldr	r2, [pc, #128]	; (8ad0 <ext_hdr_options_process+0xcc>)
    8a4e:	7013      	strb	r3, [r2, #0]
		 * Using this fix, the header is ignored, and the next header (if
		 * present) is processed.
		 */
#if UIP_CONF_IPV6_RPL
        PRINTF("Processing RPL option\n\r");
        if(rpl_verify_header(uip_ext_opt_offset)) {
    8a50:	4b22      	ldr	r3, [pc, #136]	; (8adc <ext_hdr_options_process+0xd8>)
    8a52:	4798      	blx	r3
          PRINTF("RPL Option Error: Dropping Packet\n\r");
          return 1;
    8a54:	2301      	movs	r3, #1
		 * Using this fix, the header is ignored, and the next header (if
		 * present) is processed.
		 */
#if UIP_CONF_IPV6_RPL
        PRINTF("Processing RPL option\n\r");
        if(rpl_verify_header(uip_ext_opt_offset)) {
    8a56:	2800      	cmp	r0, #0
    8a58:	d137      	bne.n	8aca <ext_hdr_options_process+0xc6>
          PRINTF("RPL Option Error: Dropping Packet\n\r");
          return 1;
        }
#endif /* UIP_CONF_IPV6_RPL */
        uip_ext_opt_offset += (UIP_EXT_HDR_OPT_BUF->len) + 2;
    8a5a:	481d      	ldr	r0, [pc, #116]	; (8ad0 <ext_hdr_options_process+0xcc>)
    8a5c:	7804      	ldrb	r4, [r0, #0]
    8a5e:	4b1d      	ldr	r3, [pc, #116]	; (8ad4 <ext_hdr_options_process+0xd0>)
    8a60:	781a      	ldrb	r2, [r3, #0]
    8a62:	3228      	adds	r2, #40	; 0x28
    8a64:	1912      	adds	r2, r2, r4
    8a66:	491c      	ldr	r1, [pc, #112]	; (8ad8 <ext_hdr_options_process+0xd4>)
    8a68:	1852      	adds	r2, r2, r1
    8a6a:	7853      	ldrb	r3, [r2, #1]
    8a6c:	18e3      	adds	r3, r4, r3
    8a6e:	3302      	adds	r3, #2
    8a70:	7003      	strb	r3, [r0, #0]
        return 0;
    8a72:	2300      	movs	r3, #0
    8a74:	e029      	b.n	8aca <ext_hdr_options_process+0xc6>
         *   Address was not a multicast address, send an ICMP Parameter
         *   Problem, Code 2, message to the packet's Source Address,
         *   pointing to the unrecognized Option Type.
         */
        PRINTF("MSB %x\n\r", UIP_EXT_HDR_OPT_BUF->type);
        switch(UIP_EXT_HDR_OPT_BUF->type & 0xC0) {
    8a76:	43bc      	bics	r4, r7
    8a78:	b2e0      	uxtb	r0, r4
    8a7a:	2880      	cmp	r0, #128	; 0x80
    8a7c:	d004      	beq.n	8a88 <ext_hdr_options_process+0x84>
    8a7e:	28c0      	cmp	r0, #192	; 0xc0
    8a80:	d009      	beq.n	8a96 <ext_hdr_options_process+0x92>
    8a82:	2c40      	cmp	r4, #64	; 0x40
    8a84:	d115      	bne.n	8ab2 <ext_hdr_options_process+0xae>
    8a86:	e002      	b.n	8a8e <ext_hdr_options_process+0x8a>
    8a88:	4911      	ldr	r1, [pc, #68]	; (8ad0 <ext_hdr_options_process+0xcc>)
    8a8a:	700b      	strb	r3, [r1, #0]
    8a8c:	e009      	b.n	8aa2 <ext_hdr_options_process+0x9e>
    8a8e:	4a10      	ldr	r2, [pc, #64]	; (8ad0 <ext_hdr_options_process+0xcc>)
    8a90:	7013      	strb	r3, [r2, #0]
          case 0:
            break;
          case 0x40:
            return 1;
    8a92:	2301      	movs	r3, #1
    8a94:	e019      	b.n	8aca <ext_hdr_options_process+0xc6>
    8a96:	490e      	ldr	r1, [pc, #56]	; (8ad0 <ext_hdr_options_process+0xcc>)
    8a98:	700b      	strb	r3, [r1, #0]
          case 0xC0:
            if(uip_is_addr_mcast(&UIP_IP_BUF->destipaddr)) {
    8a9a:	490f      	ldr	r1, [pc, #60]	; (8ad8 <ext_hdr_options_process+0xd4>)
    8a9c:	7e09      	ldrb	r1, [r1, #24]
    8a9e:	29ff      	cmp	r1, #255	; 0xff
    8aa0:	d012      	beq.n	8ac8 <ext_hdr_options_process+0xc4>
    8aa2:	3228      	adds	r2, #40	; 0x28
              return 1;
            }
          case 0x80:
            uip_icmp6_error_output(ICMP6_PARAM_PROB, ICMP6_PARAMPROB_OPTION,
    8aa4:	18d2      	adds	r2, r2, r3
    8aa6:	2004      	movs	r0, #4
    8aa8:	2102      	movs	r1, #2
    8aaa:	4b0d      	ldr	r3, [pc, #52]	; (8ae0 <ext_hdr_options_process+0xdc>)
    8aac:	4798      	blx	r3
                             (uint32_t)UIP_IPH_LEN + uip_ext_len + uip_ext_opt_offset);
            return 2;
    8aae:	2302      	movs	r3, #2
    8ab0:	e00b      	b.n	8aca <ext_hdr_options_process+0xc6>
    8ab2:	7849      	ldrb	r1, [r1, #1]
    8ab4:	3102      	adds	r1, #2
        }
        /* in the cases were we did not discard, update ext_opt* */
        uip_ext_opt_offset += UIP_EXT_HDR_OPT_BUF->len + 2;
    8ab6:	185b      	adds	r3, r3, r1
    8ab8:	b2db      	uxtb	r3, r3
  * Length field in the extension header: length of the header in units of
  * 8 bytes, excluding the first 8 bytes
  * length field in an option : the length of data in the option
  */
  uip_ext_opt_offset = 2;
  while(uip_ext_opt_offset < ((UIP_EXT_BUF->len << 3) + 8)) {
    8aba:	1e18      	subs	r0, r3, #0
    8abc:	42a8      	cmp	r0, r5
    8abe:	dbb1      	blt.n	8a24 <ext_hdr_options_process+0x20>
    8ac0:	4a03      	ldr	r2, [pc, #12]	; (8ad0 <ext_hdr_options_process+0xcc>)
    8ac2:	7013      	strb	r3, [r2, #0]
        /* in the cases were we did not discard, update ext_opt* */
        uip_ext_opt_offset += UIP_EXT_HDR_OPT_BUF->len + 2;
        break;
    }
  }
  return 0;
    8ac4:	2300      	movs	r3, #0
    8ac6:	e000      	b.n	8aca <ext_hdr_options_process+0xc6>
            break;
          case 0x40:
            return 1;
          case 0xC0:
            if(uip_is_addr_mcast(&UIP_IP_BUF->destipaddr)) {
              return 1;
    8ac8:	2301      	movs	r3, #1
        uip_ext_opt_offset += UIP_EXT_HDR_OPT_BUF->len + 2;
        break;
    }
  }
  return 0;
}
    8aca:	1c18      	adds	r0, r3, #0
    8acc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    8ace:	46c0      	nop			; (mov r8, r8)
    8ad0:	20000b18 	.word	0x20000b18
    8ad4:	20000b12 	.word	0x20000b12
    8ad8:	20002cd4 	.word	0x20002cd4
    8adc:	0000d12d 	.word	0x0000d12d
    8ae0:	00007cfd 	.word	0x00007cfd

00008ae4 <upper_layer_chksum>:
}
#endif
/*---------------------------------------------------------------------------*/
static uint16_t
upper_layer_chksum(uint8_t proto)
{
    8ae4:	b5f0      	push	{r4, r5, r6, r7, lr}
    8ae6:	b083      	sub	sp, #12
 * See https://sourceforge.net/apps/mantisbt/contiki/view.php?id=3
 */
  volatile uint16_t upper_layer_len;
  uint16_t sum;
  
  upper_layer_len = (((uint16_t)(UIP_IP_BUF->len[0]) << 8) + UIP_IP_BUF->len[1] - uip_ext_len);
    8ae8:	4b11      	ldr	r3, [pc, #68]	; (8b30 <upper_layer_chksum+0x4c>)
    8aea:	781d      	ldrb	r5, [r3, #0]
    8aec:	4c11      	ldr	r4, [pc, #68]	; (8b34 <upper_layer_chksum+0x50>)
    8aee:	7923      	ldrb	r3, [r4, #4]
    8af0:	021b      	lsls	r3, r3, #8
    8af2:	1b5b      	subs	r3, r3, r5
    8af4:	7962      	ldrb	r2, [r4, #5]
    8af6:	18d3      	adds	r3, r2, r3
    8af8:	b29b      	uxth	r3, r3
    8afa:	466a      	mov	r2, sp
    8afc:	1d96      	adds	r6, r2, #6
    8afe:	80d3      	strh	r3, [r2, #6]
  PRINTF("Upper layer checksum len: %d from: %d\n\r", upper_layer_len,
	 UIP_IPH_LEN + UIP_LLH_LEN + uip_ext_len);

  /* First sum pseudoheader. */
  /* IP protocol and length fields. This addition cannot carry. */
  sum = upper_layer_len + proto;
    8b00:	88d3      	ldrh	r3, [r2, #6]
    8b02:	1818      	adds	r0, r3, r0
    8b04:	b280      	uxth	r0, r0
  /* Sum IP source and destination addresses. */
  sum = chksum(sum, (uint8_t *)&UIP_IP_BUF->srcipaddr, 2 * sizeof(uip_ipaddr_t));
    8b06:	1c21      	adds	r1, r4, #0
    8b08:	3108      	adds	r1, #8
    8b0a:	2220      	movs	r2, #32
    8b0c:	4f0a      	ldr	r7, [pc, #40]	; (8b38 <upper_layer_chksum+0x54>)
    8b0e:	47b8      	blx	r7

  /* Sum TCP header and data. */
  sum = chksum(sum, &uip_buf[UIP_IPH_LEN + UIP_LLH_LEN + uip_ext_len],
    8b10:	8832      	ldrh	r2, [r6, #0]
    8b12:	b292      	uxth	r2, r2
    8b14:	3528      	adds	r5, #40	; 0x28
    8b16:	1929      	adds	r1, r5, r4
    8b18:	47b8      	blx	r7
               upper_layer_len);
    
  return (sum == 0) ? 0xffff : uip_htons(sum);
    8b1a:	2800      	cmp	r0, #0
    8b1c:	d004      	beq.n	8b28 <upper_layer_chksum+0x44>
}
/*---------------------------------------------------------------------------*/
uint16_t
uip_htons(uint16_t val)
{
  return UIP_HTONS(val);
    8b1e:	0203      	lsls	r3, r0, #8
    8b20:	0a00      	lsrs	r0, r0, #8
    8b22:	4318      	orrs	r0, r3
    8b24:	b280      	uxth	r0, r0
    8b26:	e000      	b.n	8b2a <upper_layer_chksum+0x46>

  /* Sum TCP header and data. */
  sum = chksum(sum, &uip_buf[UIP_IPH_LEN + UIP_LLH_LEN + uip_ext_len],
               upper_layer_len);
    
  return (sum == 0) ? 0xffff : uip_htons(sum);
    8b28:	4804      	ldr	r0, [pc, #16]	; (8b3c <upper_layer_chksum+0x58>)
}
    8b2a:	b003      	add	sp, #12
    8b2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    8b2e:	46c0      	nop			; (mov r8, r8)
    8b30:	20000b12 	.word	0x20000b12
    8b34:	20002cd4 	.word	0x20002cd4
    8b38:	000089b9 	.word	0x000089b9
    8b3c:	0000ffff 	.word	0x0000ffff

00008b40 <uip_add32>:
/* Functions                                                                 */
/*---------------------------------------------------------------------------*/
#if (!UIP_ARCH_ADD32 && UIP_TCP)
void
uip_add32(uint8_t *op32, uint16_t op16)
{
    8b40:	b570      	push	{r4, r5, r6, lr}
  uip_acc32[3] = op32[3] + (op16 & 0xff);
    8b42:	78c5      	ldrb	r5, [r0, #3]
    8b44:	186d      	adds	r5, r5, r1
    8b46:	b2ed      	uxtb	r5, r5
    8b48:	4c14      	ldr	r4, [pc, #80]	; (8b9c <uip_add32+0x5c>)
    8b4a:	70e5      	strb	r5, [r4, #3]
  uip_acc32[2] = op32[2] + (op16 >> 8);
    8b4c:	0a0e      	lsrs	r6, r1, #8
    8b4e:	7883      	ldrb	r3, [r0, #2]
    8b50:	199b      	adds	r3, r3, r6
    8b52:	b2db      	uxtb	r3, r3
    8b54:	70a3      	strb	r3, [r4, #2]
  uip_acc32[1] = op32[1];
    8b56:	7842      	ldrb	r2, [r0, #1]
    8b58:	7062      	strb	r2, [r4, #1]
  uip_acc32[0] = op32[0];
    8b5a:	7800      	ldrb	r0, [r0, #0]
    8b5c:	7020      	strb	r0, [r4, #0]
  
  if(uip_acc32[2] < (op16 >> 8)) {
    8b5e:	b29c      	uxth	r4, r3
    8b60:	42a6      	cmp	r6, r4
    8b62:	d907      	bls.n	8b74 <uip_add32+0x34>
    ++uip_acc32[1];
    8b64:	3201      	adds	r2, #1
    8b66:	b2d2      	uxtb	r2, r2
    8b68:	4c0c      	ldr	r4, [pc, #48]	; (8b9c <uip_add32+0x5c>)
    8b6a:	7062      	strb	r2, [r4, #1]
    if(uip_acc32[1] == 0) {
    8b6c:	2a00      	cmp	r2, #0
    8b6e:	d101      	bne.n	8b74 <uip_add32+0x34>
      ++uip_acc32[0];
    8b70:	3001      	adds	r0, #1
    8b72:	7020      	strb	r0, [r4, #0]
    }
  }
  
  
  if(uip_acc32[3] < (op16 & 0xff)) {
    8b74:	b2c9      	uxtb	r1, r1
    8b76:	42a9      	cmp	r1, r5
    8b78:	dd0e      	ble.n	8b98 <uip_add32+0x58>
    ++uip_acc32[2];
    8b7a:	3301      	adds	r3, #1
    8b7c:	b2db      	uxtb	r3, r3
    8b7e:	4a07      	ldr	r2, [pc, #28]	; (8b9c <uip_add32+0x5c>)
    8b80:	7093      	strb	r3, [r2, #2]
    if(uip_acc32[2] == 0) {
    8b82:	2b00      	cmp	r3, #0
    8b84:	d108      	bne.n	8b98 <uip_add32+0x58>
      ++uip_acc32[1];
    8b86:	7853      	ldrb	r3, [r2, #1]
    8b88:	3301      	adds	r3, #1
    8b8a:	b2db      	uxtb	r3, r3
    8b8c:	7053      	strb	r3, [r2, #1]
      if(uip_acc32[1] == 0) {
    8b8e:	2b00      	cmp	r3, #0
    8b90:	d102      	bne.n	8b98 <uip_add32+0x58>
        ++uip_acc32[0];
    8b92:	7813      	ldrb	r3, [r2, #0]
    8b94:	3301      	adds	r3, #1
    8b96:	7013      	strb	r3, [r2, #0]
      }
    }
  }
}
    8b98:	bd70      	pop	{r4, r5, r6, pc}
    8b9a:	46c0      	nop			; (mov r8, r8)
    8b9c:	20002cc8 	.word	0x20002cc8

00008ba0 <uip_add_rcv_nxt>:

/*---------------------------------------------------------------------------*/
#if UIP_TCP
static void
uip_add_rcv_nxt(uint16_t n)
{
    8ba0:	b510      	push	{r4, lr}
    8ba2:	1c01      	adds	r1, r0, #0
  uip_add32(uip_conn->rcv_nxt, n);
    8ba4:	4c07      	ldr	r4, [pc, #28]	; (8bc4 <uip_add_rcv_nxt+0x24>)
    8ba6:	6820      	ldr	r0, [r4, #0]
    8ba8:	3014      	adds	r0, #20
    8baa:	4b07      	ldr	r3, [pc, #28]	; (8bc8 <uip_add_rcv_nxt+0x28>)
    8bac:	4798      	blx	r3
  uip_conn->rcv_nxt[0] = uip_acc32[0];
    8bae:	6823      	ldr	r3, [r4, #0]
    8bb0:	4a06      	ldr	r2, [pc, #24]	; (8bcc <uip_add_rcv_nxt+0x2c>)
    8bb2:	7811      	ldrb	r1, [r2, #0]
    8bb4:	7519      	strb	r1, [r3, #20]
  uip_conn->rcv_nxt[1] = uip_acc32[1];
    8bb6:	7851      	ldrb	r1, [r2, #1]
    8bb8:	7559      	strb	r1, [r3, #21]
  uip_conn->rcv_nxt[2] = uip_acc32[2];
    8bba:	7891      	ldrb	r1, [r2, #2]
    8bbc:	7599      	strb	r1, [r3, #22]
  uip_conn->rcv_nxt[3] = uip_acc32[3];
    8bbe:	78d2      	ldrb	r2, [r2, #3]
    8bc0:	75da      	strb	r2, [r3, #23]
}
    8bc2:	bd10      	pop	{r4, pc}
    8bc4:	20002e74 	.word	0x20002e74
    8bc8:	00008b41 	.word	0x00008b41
    8bcc:	20002cc8 	.word	0x20002cc8

00008bd0 <uip_icmp6chksum>:
  return (sum == 0) ? 0xffff : uip_htons(sum);
}
/*---------------------------------------------------------------------------*/
uint16_t
uip_icmp6chksum(void)
{
    8bd0:	b508      	push	{r3, lr}
  return upper_layer_chksum(UIP_PROTO_ICMP6);
    8bd2:	203a      	movs	r0, #58	; 0x3a
    8bd4:	4b01      	ldr	r3, [pc, #4]	; (8bdc <uip_icmp6chksum+0xc>)
    8bd6:	4798      	blx	r3
  
}
    8bd8:	bd08      	pop	{r3, pc}
    8bda:	46c0      	nop			; (mov r8, r8)
    8bdc:	00008ae5 	.word	0x00008ae5

00008be0 <uip_tcpchksum>:
/*---------------------------------------------------------------------------*/
#if UIP_TCP
uint16_t
uip_tcpchksum(void)
{
    8be0:	b508      	push	{r3, lr}
  return upper_layer_chksum(UIP_PROTO_TCP);
    8be2:	2006      	movs	r0, #6
    8be4:	4b01      	ldr	r3, [pc, #4]	; (8bec <uip_tcpchksum+0xc>)
    8be6:	4798      	blx	r3
}
    8be8:	bd08      	pop	{r3, pc}
    8bea:	46c0      	nop			; (mov r8, r8)
    8bec:	00008ae5 	.word	0x00008ae5

00008bf0 <uip_udpchksum>:
#endif /* UIP_TCP */
/*---------------------------------------------------------------------------*/
#if UIP_UDP && UIP_UDP_CHECKSUMS
uint16_t
uip_udpchksum(void)
{
    8bf0:	b508      	push	{r3, lr}
  return upper_layer_chksum(UIP_PROTO_UDP);
    8bf2:	2011      	movs	r0, #17
    8bf4:	4b01      	ldr	r3, [pc, #4]	; (8bfc <uip_udpchksum+0xc>)
    8bf6:	4798      	blx	r3
}
    8bf8:	bd08      	pop	{r3, pc}
    8bfa:	46c0      	nop			; (mov r8, r8)
    8bfc:	00008ae5 	.word	0x00008ae5

00008c00 <uip_init>:
#endif /* UIP_UDP && UIP_UDP_CHECKSUMS */
#endif /* UIP_ARCH_CHKSUM */
/*---------------------------------------------------------------------------*/
void
uip_init(void)
{
    8c00:	b508      	push	{r3, lr}
   
  uip_ds6_init();
    8c02:	4b14      	ldr	r3, [pc, #80]	; (8c54 <uip_init+0x54>)
    8c04:	4798      	blx	r3
  uip_icmp6_init();
    8c06:	4b14      	ldr	r3, [pc, #80]	; (8c58 <uip_init+0x58>)
    8c08:	4798      	blx	r3
  uip_nd6_init();
    8c0a:	4b14      	ldr	r3, [pc, #80]	; (8c5c <uip_init+0x5c>)
    8c0c:	4798      	blx	r3
    8c0e:	4b14      	ldr	r3, [pc, #80]	; (8c60 <uip_init+0x60>)
    8c10:	1c19      	adds	r1, r3, #0
    8c12:	3128      	adds	r1, #40	; 0x28

#if UIP_TCP
  for(c = 0; c < UIP_LISTENPORTS; ++c) {
    uip_listenports[c] = 0;
    8c14:	2200      	movs	r2, #0
    8c16:	801a      	strh	r2, [r3, #0]
    8c18:	3302      	adds	r3, #2
  uip_ds6_init();
  uip_icmp6_init();
  uip_nd6_init();

#if UIP_TCP
  for(c = 0; c < UIP_LISTENPORTS; ++c) {
    8c1a:	428b      	cmp	r3, r1
    8c1c:	d1fb      	bne.n	8c16 <uip_init+0x16>
    8c1e:	4b11      	ldr	r3, [pc, #68]	; (8c64 <uip_init+0x64>)
    8c20:	1c19      	adds	r1, r3, #0
    8c22:	31e1      	adds	r1, #225	; 0xe1
    8c24:	31ff      	adds	r1, #255	; 0xff
    uip_listenports[c] = 0;
  }
  for(c = 0; c < UIP_CONNS; ++c) {
    uip_conns[c].tcpstateflags = UIP_CLOSED;
    8c26:	2200      	movs	r2, #0
    8c28:	701a      	strb	r2, [r3, #0]
    8c2a:	3330      	adds	r3, #48	; 0x30

#if UIP_TCP
  for(c = 0; c < UIP_LISTENPORTS; ++c) {
    uip_listenports[c] = 0;
  }
  for(c = 0; c < UIP_CONNS; ++c) {
    8c2c:	428b      	cmp	r3, r1
    8c2e:	d1fb      	bne.n	8c28 <uip_init+0x28>
    uip_conns[c].tcpstateflags = UIP_CLOSED;
  }
#endif /* UIP_TCP */

#if UIP_ACTIVE_OPEN || UIP_UDP
  lastport = 1024;
    8c30:	2280      	movs	r2, #128	; 0x80
    8c32:	00d2      	lsls	r2, r2, #3
    8c34:	4b0c      	ldr	r3, [pc, #48]	; (8c68 <uip_init+0x68>)
    8c36:	801a      	strh	r2, [r3, #0]
    8c38:	4b0c      	ldr	r3, [pc, #48]	; (8c6c <uip_init+0x6c>)
    8c3a:	1c19      	adds	r1, r3, #0
    8c3c:	3141      	adds	r1, #65	; 0x41
    8c3e:	31ff      	adds	r1, #255	; 0xff
#endif /* UIP_ACTIVE_OPEN || UIP_UDP */

#if UIP_UDP
  for(c = 0; c < UIP_UDP_CONNS; ++c) {
    uip_udp_conns[c].lport = 0;
    8c40:	2200      	movs	r2, #0
    8c42:	801a      	strh	r2, [r3, #0]
    8c44:	3320      	adds	r3, #32
#if UIP_ACTIVE_OPEN || UIP_UDP
  lastport = 1024;
#endif /* UIP_ACTIVE_OPEN || UIP_UDP */

#if UIP_UDP
  for(c = 0; c < UIP_UDP_CONNS; ++c) {
    8c46:	428b      	cmp	r3, r1
    8c48:	d1fb      	bne.n	8c42 <uip_init+0x42>
    8c4a:	220a      	movs	r2, #10
    8c4c:	4b08      	ldr	r3, [pc, #32]	; (8c70 <uip_init+0x70>)
    8c4e:	701a      	strb	r2, [r3, #0]
#endif /* UIP_UDP */

#if UIP_CONF_IPV6_MULTICAST
  UIP_MCAST6.init();
#endif
}
    8c50:	bd08      	pop	{r3, pc}
    8c52:	46c0      	nop			; (mov r8, r8)
    8c54:	0000794d 	.word	0x0000794d
    8c58:	00007f81 	.word	0x00007f81
    8c5c:	00008995 	.word	0x00008995
    8c60:	20003060 	.word	0x20003060
    8c64:	20002e9d 	.word	0x20002e9d
    8c68:	20000b1a 	.word	0x20000b1a
    8c6c:	2000309c 	.word	0x2000309c
    8c70:	20000b1c 	.word	0x20000b1c

00008c74 <uip_connect>:
/*---------------------------------------------------------------------------*/
#if UIP_TCP && UIP_ACTIVE_OPEN
struct uip_conn *
uip_connect(uip_ipaddr_t *ripaddr, uint16_t rport)
{
    8c74:	b5f0      	push	{r4, r5, r6, r7, lr}
    8c76:	b083      	sub	sp, #12
    8c78:	9001      	str	r0, [sp, #4]
    8c7a:	4b41      	ldr	r3, [pc, #260]	; (8d80 <uip_connect+0x10c>)
    8c7c:	881c      	ldrh	r4, [r3, #0]
  
  /* Find an unused local port. */
 again:
  ++lastport;

  if(lastport >= 32000) {
    8c7e:	4f41      	ldr	r7, [pc, #260]	; (8d84 <uip_connect+0x110>)
    8c80:	4e41      	ldr	r6, [pc, #260]	; (8d88 <uip_connect+0x114>)
{
  register struct uip_conn *conn, *cconn;
  
  /* Find an unused local port. */
 again:
  ++lastport;
    8c82:	1c63      	adds	r3, r4, #1
    8c84:	b29c      	uxth	r4, r3

  if(lastport >= 32000) {
    8c86:	42bc      	cmp	r4, r7
    8c88:	d901      	bls.n	8c8e <uip_connect+0x1a>
    lastport = 4096;
    8c8a:	2480      	movs	r4, #128	; 0x80
    8c8c:	0164      	lsls	r4, r4, #5
}
/*---------------------------------------------------------------------------*/
uint16_t
uip_htons(uint16_t val)
{
  return UIP_HTONS(val);
    8c8e:	0222      	lsls	r2, r4, #8
    8c90:	0a20      	lsrs	r0, r4, #8
    8c92:	1c13      	adds	r3, r2, #0
    8c94:	4303      	orrs	r3, r0
    8c96:	b29d      	uxth	r5, r3
    8c98:	1c32      	adds	r2, r6, #0
    8c9a:	2301      	movs	r3, #1

  /* Check if this port is already in use, and if so try to find
     another one. */
  for(c = 0; c < UIP_CONNS; ++c) {
    conn = &uip_conns[c];
    if(conn->tcpstateflags != UIP_CLOSED &&
    8c9c:	7d50      	ldrb	r0, [r2, #21]
    8c9e:	2800      	cmp	r0, #0
    8ca0:	d002      	beq.n	8ca8 <uip_connect+0x34>
    8ca2:	8810      	ldrh	r0, [r2, #0]
    8ca4:	42a8      	cmp	r0, r5
    8ca6:	d0ec      	beq.n	8c82 <uip_connect+0xe>
    8ca8:	3301      	adds	r3, #1
    8caa:	b2db      	uxtb	r3, r3
    8cac:	3230      	adds	r2, #48	; 0x30
    lastport = 4096;
  }

  /* Check if this port is already in use, and if so try to find
     another one. */
  for(c = 0; c < UIP_CONNS; ++c) {
    8cae:	2b0b      	cmp	r3, #11
    8cb0:	d1f4      	bne.n	8c9c <uip_connect+0x28>
    8cb2:	4b33      	ldr	r3, [pc, #204]	; (8d80 <uip_connect+0x10c>)
    8cb4:	801c      	strh	r4, [r3, #0]
      goto again;
    }
  }

  conn = 0;
  for(c = 0; c < UIP_CONNS; ++c) {
    8cb6:	2200      	movs	r2, #0
    8cb8:	4b34      	ldr	r3, [pc, #208]	; (8d8c <uip_connect+0x118>)
    8cba:	701a      	strb	r2, [r3, #0]
    cconn = &uip_conns[c];
    if(cconn->tcpstateflags == UIP_CLOSED) {
    8cbc:	2325      	movs	r3, #37	; 0x25
    8cbe:	4a34      	ldr	r2, [pc, #208]	; (8d90 <uip_connect+0x11c>)
    8cc0:	5cd0      	ldrb	r0, [r2, r3]
    8cc2:	2800      	cmp	r0, #0
    8cc4:	d10e      	bne.n	8ce4 <uip_connect+0x70>
    8cc6:	e00b      	b.n	8ce0 <uip_connect+0x6c>
    }
  }

  conn = 0;
  for(c = 0; c < UIP_CONNS; ++c) {
    cconn = &uip_conns[c];
    8cc8:	1c1e      	adds	r6, r3, #0
    8cca:	1c18      	adds	r0, r3, #0
    8ccc:	3025      	adds	r0, #37	; 0x25
    if(cconn->tcpstateflags == UIP_CLOSED) {
    8cce:	7800      	ldrb	r0, [r0, #0]
    8cd0:	3201      	adds	r2, #1
    8cd2:	3330      	adds	r3, #48	; 0x30
    8cd4:	2800      	cmp	r0, #0
    8cd6:	d10b      	bne.n	8cf0 <uip_connect+0x7c>
    8cd8:	4b2c      	ldr	r3, [pc, #176]	; (8d8c <uip_connect+0x118>)
    8cda:	701f      	strb	r7, [r3, #0]
    }
  }

  conn = 0;
  for(c = 0; c < UIP_CONNS; ++c) {
    cconn = &uip_conns[c];
    8cdc:	1c35      	adds	r5, r6, #0
    8cde:	e019      	b.n	8d14 <uip_connect+0xa0>
    8ce0:	4d2b      	ldr	r5, [pc, #172]	; (8d90 <uip_connect+0x11c>)
    if(cconn->tcpstateflags == UIP_CLOSED) {
      conn = cconn;
      break;
    8ce2:	e017      	b.n	8d14 <uip_connect+0xa0>
    8ce4:	4b2b      	ldr	r3, [pc, #172]	; (8d94 <uip_connect+0x120>)
  }

  conn = 0;
  for(c = 0; c < UIP_CONNS; ++c) {
    cconn = &uip_conns[c];
    if(cconn->tcpstateflags == UIP_CLOSED) {
    8ce6:	2201      	movs	r2, #1
    8ce8:	1c1e      	adds	r6, r3, #0
    8cea:	3e30      	subs	r6, #48	; 0x30
    8cec:	2500      	movs	r5, #0
      conn = cconn;
      break;
    }
    if(cconn->tcpstateflags == UIP_TIME_WAIT) {
      if(conn == 0 ||
         cconn->timer > conn->timer) {
    8cee:	2426      	movs	r4, #38	; 0x26
    cconn = &uip_conns[c];
    if(cconn->tcpstateflags == UIP_CLOSED) {
      conn = cconn;
      break;
    }
    if(cconn->tcpstateflags == UIP_TIME_WAIT) {
    8cf0:	2807      	cmp	r0, #7
    8cf2:	d10a      	bne.n	8d0a <uip_connect+0x96>
      if(conn == 0 ||
    8cf4:	2d00      	cmp	r5, #0
    8cf6:	d007      	beq.n	8d08 <uip_connect+0x94>
    8cf8:	1c18      	adds	r0, r3, #0
    8cfa:	380a      	subs	r0, #10
    8cfc:	7807      	ldrb	r7, [r0, #0]
    8cfe:	5d28      	ldrb	r0, [r5, r4]
    8d00:	4287      	cmp	r7, r0
    8d02:	d902      	bls.n	8d0a <uip_connect+0x96>
    8d04:	1c35      	adds	r5, r6, #0
    8d06:	e000      	b.n	8d0a <uip_connect+0x96>
    8d08:	1c35      	adds	r5, r6, #0
      goto again;
    }
  }

  conn = 0;
  for(c = 0; c < UIP_CONNS; ++c) {
    8d0a:	b2d7      	uxtb	r7, r2
    8d0c:	2a0a      	cmp	r2, #10
    8d0e:	d1db      	bne.n	8cc8 <uip_connect+0x54>
    8d10:	4b1e      	ldr	r3, [pc, #120]	; (8d8c <uip_connect+0x118>)
    8d12:	701f      	strb	r7, [r3, #0]
        conn = cconn;
      }
    }
  }

  if(conn == 0) {
    8d14:	2d00      	cmp	r5, #0
    8d16:	d030      	beq.n	8d7a <uip_connect+0x106>
    return 0;
  }
  
  conn->tcpstateflags = UIP_SYN_SENT;
    8d18:	2202      	movs	r2, #2
    8d1a:	2325      	movs	r3, #37	; 0x25
    8d1c:	54ea      	strb	r2, [r5, r3]

  conn->snd_nxt[0] = iss[0];
    8d1e:	4b1e      	ldr	r3, [pc, #120]	; (8d98 <uip_connect+0x124>)
    8d20:	781a      	ldrb	r2, [r3, #0]
    8d22:	762a      	strb	r2, [r5, #24]
  conn->snd_nxt[1] = iss[1];
    8d24:	785a      	ldrb	r2, [r3, #1]
    8d26:	766a      	strb	r2, [r5, #25]
  conn->snd_nxt[2] = iss[2];
    8d28:	789a      	ldrb	r2, [r3, #2]
    8d2a:	76aa      	strb	r2, [r5, #26]
  conn->snd_nxt[3] = iss[3];
    8d2c:	78db      	ldrb	r3, [r3, #3]
    8d2e:	76eb      	strb	r3, [r5, #27]

  conn->rcv_nxt[0] = 0;
    8d30:	2300      	movs	r3, #0
    8d32:	752b      	strb	r3, [r5, #20]
  conn->rcv_nxt[1] = 0;
    8d34:	756b      	strb	r3, [r5, #21]
  conn->rcv_nxt[2] = 0;
    8d36:	75ab      	strb	r3, [r5, #22]
  conn->rcv_nxt[3] = 0;
    8d38:	75eb      	strb	r3, [r5, #23]

  conn->initialmss = conn->mss = UIP_TCP_MSS;
    8d3a:	22aa      	movs	r2, #170	; 0xaa
    8d3c:	0052      	lsls	r2, r2, #1
    8d3e:	83ea      	strh	r2, [r5, #30]
    8d40:	842a      	strh	r2, [r5, #32]
  
  conn->len = 1;   /* TCP length of the SYN is one. */
    8d42:	3a54      	subs	r2, #84	; 0x54
    8d44:	3aff      	subs	r2, #255	; 0xff
    8d46:	83aa      	strh	r2, [r5, #28]
  conn->nrtx = 0;
    8d48:	3226      	adds	r2, #38	; 0x26
    8d4a:	54ab      	strb	r3, [r5, r2]
  conn->timer = 1; /* Send the SYN next time around. */
    8d4c:	3a01      	subs	r2, #1
    8d4e:	2001      	movs	r0, #1
    8d50:	54a8      	strb	r0, [r5, r2]
  conn->rto = UIP_RTO;
    8d52:	2003      	movs	r0, #3
    8d54:	3a02      	subs	r2, #2
    8d56:	54a8      	strb	r0, [r5, r2]
  conn->sa = 0;
    8d58:	3a02      	subs	r2, #2
    8d5a:	54ab      	strb	r3, [r5, r2]
  conn->sv = 16;   /* Initial value of the RTT variance. */
    8d5c:	3a12      	subs	r2, #18
    8d5e:	3323      	adds	r3, #35	; 0x23
    8d60:	54ea      	strb	r2, [r5, r3]
  conn->lport = uip_htons(lastport);
    8d62:	4b07      	ldr	r3, [pc, #28]	; (8d80 <uip_connect+0x10c>)
    8d64:	881b      	ldrh	r3, [r3, #0]
}
/*---------------------------------------------------------------------------*/
uint16_t
uip_htons(uint16_t val)
{
  return UIP_HTONS(val);
    8d66:	021a      	lsls	r2, r3, #8
    8d68:	0a1b      	lsrs	r3, r3, #8
    8d6a:	4313      	orrs	r3, r2
  conn->nrtx = 0;
  conn->timer = 1; /* Send the SYN next time around. */
  conn->rto = UIP_RTO;
  conn->sa = 0;
  conn->sv = 16;   /* Initial value of the RTT variance. */
  conn->lport = uip_htons(lastport);
    8d6c:	822b      	strh	r3, [r5, #16]
  conn->rport = rport;
    8d6e:	8269      	strh	r1, [r5, #18]
  uip_ipaddr_copy(&conn->ripaddr, ripaddr);
    8d70:	1c28      	adds	r0, r5, #0
    8d72:	9901      	ldr	r1, [sp, #4]
    8d74:	2210      	movs	r2, #16
    8d76:	4b09      	ldr	r3, [pc, #36]	; (8d9c <uip_connect+0x128>)
    8d78:	4798      	blx	r3
  
  return conn;
}
    8d7a:	1c28      	adds	r0, r5, #0
    8d7c:	b003      	add	sp, #12
    8d7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    8d80:	20000b1a 	.word	0x20000b1a
    8d84:	00007cff 	.word	0x00007cff
    8d88:	20002e88 	.word	0x20002e88
    8d8c:	20000b1c 	.word	0x20000b1c
    8d90:	20002e78 	.word	0x20002e78
    8d94:	20002ea8 	.word	0x20002ea8
    8d98:	20000b14 	.word	0x20000b14
    8d9c:	000108e7 	.word	0x000108e7

00008da0 <remove_ext_hdr>:
#endif /* UIP_TCP && UIP_ACTIVE_OPEN */
/*---------------------------------------------------------------------------*/
void
remove_ext_hdr(void)
{
    8da0:	b570      	push	{r4, r5, r6, lr}
  /* Remove ext header before TCP/UDP processing. */
  if(uip_ext_len > 0) {
    8da2:	4b13      	ldr	r3, [pc, #76]	; (8df0 <remove_ext_hdr+0x50>)
    8da4:	781d      	ldrb	r5, [r3, #0]
    8da6:	2d00      	cmp	r5, #0
    8da8:	d021      	beq.n	8dee <remove_ext_hdr+0x4e>
    PRINTF("Cutting ext-header before processing (extlen: %d, uiplen: %d)\n\r",
	   uip_ext_len, uip_len);
    if(uip_len < UIP_IPH_LEN + uip_ext_len) {
    8daa:	4b12      	ldr	r3, [pc, #72]	; (8df4 <remove_ext_hdr+0x54>)
    8dac:	881c      	ldrh	r4, [r3, #0]
    8dae:	1c2b      	adds	r3, r5, #0
    8db0:	3328      	adds	r3, #40	; 0x28
    8db2:	429c      	cmp	r4, r3
    8db4:	da05      	bge.n	8dc2 <remove_ext_hdr+0x22>
      PRINTF("ERROR: uip_len too short compared to ext len\n\r");
      uip_ext_len = 0;
    8db6:	2300      	movs	r3, #0
    8db8:	4a0d      	ldr	r2, [pc, #52]	; (8df0 <remove_ext_hdr+0x50>)
    8dba:	7013      	strb	r3, [r2, #0]
      uip_len = 0;
    8dbc:	4a0d      	ldr	r2, [pc, #52]	; (8df4 <remove_ext_hdr+0x54>)
    8dbe:	8013      	strh	r3, [r2, #0]
      return;
    8dc0:	e015      	b.n	8dee <remove_ext_hdr+0x4e>
    }
    memmove(((uint8_t *)UIP_TCP_BUF), (uint8_t *)UIP_TCP_BUF + uip_ext_len,
    8dc2:	480d      	ldr	r0, [pc, #52]	; (8df8 <remove_ext_hdr+0x58>)
    8dc4:	1c06      	adds	r6, r0, #0
    8dc6:	3e28      	subs	r6, #40	; 0x28
    8dc8:	1941      	adds	r1, r0, r5
	    uip_len - UIP_IPH_LEN - uip_ext_len);
    8dca:	1c22      	adds	r2, r4, #0
    8dcc:	3a28      	subs	r2, #40	; 0x28
    8dce:	1b52      	subs	r2, r2, r5
      PRINTF("ERROR: uip_len too short compared to ext len\n\r");
      uip_ext_len = 0;
      uip_len = 0;
      return;
    }
    memmove(((uint8_t *)UIP_TCP_BUF), (uint8_t *)UIP_TCP_BUF + uip_ext_len,
    8dd0:	4b0a      	ldr	r3, [pc, #40]	; (8dfc <remove_ext_hdr+0x5c>)
    8dd2:	4798      	blx	r3
	    uip_len - UIP_IPH_LEN - uip_ext_len);

    uip_len -= uip_ext_len;
    8dd4:	1b64      	subs	r4, r4, r5
    8dd6:	b2a4      	uxth	r4, r4
    8dd8:	4b06      	ldr	r3, [pc, #24]	; (8df4 <remove_ext_hdr+0x54>)
    8dda:	801c      	strh	r4, [r3, #0]

    /* Update the IP length. */
    UIP_IP_BUF->len[0] = (uip_len - UIP_IPH_LEN) >> 8;
    8ddc:	1c23      	adds	r3, r4, #0
    8dde:	3b28      	subs	r3, #40	; 0x28
    8de0:	121b      	asrs	r3, r3, #8
    8de2:	7133      	strb	r3, [r6, #4]
    UIP_IP_BUF->len[1] = (uip_len - UIP_IPH_LEN) & 0xff;
    8de4:	3c28      	subs	r4, #40	; 0x28
    8de6:	7174      	strb	r4, [r6, #5]
    uip_ext_len = 0;
    8de8:	2200      	movs	r2, #0
    8dea:	4b01      	ldr	r3, [pc, #4]	; (8df0 <remove_ext_hdr+0x50>)
    8dec:	701a      	strb	r2, [r3, #0]
  }
}
    8dee:	bd70      	pop	{r4, r5, r6, pc}
    8df0:	20000b12 	.word	0x20000b12
    8df4:	20002cc0 	.word	0x20002cc0
    8df8:	20002cfc 	.word	0x20002cfc
    8dfc:	000108f9 	.word	0x000108f9

00008e00 <uip_unlisten>:
#endif /* UIP_UDP */
/*---------------------------------------------------------------------------*/
#if UIP_TCP
void
uip_unlisten(uint16_t port)
{
    8e00:	b530      	push	{r4, r5, lr}
  for(c = 0; c < UIP_LISTENPORTS; ++c) {
    8e02:	2200      	movs	r2, #0
    8e04:	4b11      	ldr	r3, [pc, #68]	; (8e4c <uip_unlisten+0x4c>)
    8e06:	701a      	strb	r2, [r3, #0]
    if(uip_listenports[c] == port) {
    8e08:	4b11      	ldr	r3, [pc, #68]	; (8e50 <uip_unlisten+0x50>)
    8e0a:	881b      	ldrh	r3, [r3, #0]
    8e0c:	4283      	cmp	r3, r0
    8e0e:	d116      	bne.n	8e3e <uip_unlisten+0x3e>
    8e10:	e006      	b.n	8e20 <uip_unlisten+0x20>
    8e12:	1c1d      	adds	r5, r3, #0
    8e14:	880c      	ldrh	r4, [r1, #0]
    8e16:	4284      	cmp	r4, r0
    8e18:	d108      	bne.n	8e2c <uip_unlisten+0x2c>
    8e1a:	4b0c      	ldr	r3, [pc, #48]	; (8e4c <uip_unlisten+0x4c>)
    8e1c:	701a      	strb	r2, [r3, #0]
    8e1e:	e000      	b.n	8e22 <uip_unlisten+0x22>
    8e20:	2500      	movs	r5, #0
      uip_listenports[c] = 0;
    8e22:	006d      	lsls	r5, r5, #1
    8e24:	2200      	movs	r2, #0
    8e26:	4b0a      	ldr	r3, [pc, #40]	; (8e50 <uip_unlisten+0x50>)
    8e28:	52ea      	strh	r2, [r5, r3]
      return;
    8e2a:	e00e      	b.n	8e4a <uip_unlisten+0x4a>
    8e2c:	1c5a      	adds	r2, r3, #1
    8e2e:	b2d2      	uxtb	r2, r2
    8e30:	3301      	adds	r3, #1
    8e32:	3102      	adds	r1, #2
/*---------------------------------------------------------------------------*/
#if UIP_TCP
void
uip_unlisten(uint16_t port)
{
  for(c = 0; c < UIP_LISTENPORTS; ++c) {
    8e34:	2b14      	cmp	r3, #20
    8e36:	d1ec      	bne.n	8e12 <uip_unlisten+0x12>
    8e38:	4b04      	ldr	r3, [pc, #16]	; (8e4c <uip_unlisten+0x4c>)
    8e3a:	701a      	strb	r2, [r3, #0]
    8e3c:	e005      	b.n	8e4a <uip_unlisten+0x4a>
    8e3e:	2201      	movs	r2, #1
    8e40:	4b02      	ldr	r3, [pc, #8]	; (8e4c <uip_unlisten+0x4c>)
    8e42:	701a      	strb	r2, [r3, #0]
    8e44:	4903      	ldr	r1, [pc, #12]	; (8e54 <uip_unlisten+0x54>)
    8e46:	2301      	movs	r3, #1
    8e48:	e7e3      	b.n	8e12 <uip_unlisten+0x12>
    if(uip_listenports[c] == port) {
      uip_listenports[c] = 0;
      return;
    }
  }
}
    8e4a:	bd30      	pop	{r4, r5, pc}
    8e4c:	20000b1c 	.word	0x20000b1c
    8e50:	20003060 	.word	0x20003060
    8e54:	20003062 	.word	0x20003062

00008e58 <uip_process>:


/*---------------------------------------------------------------------------*/
void
uip_process(uint8_t flag)
{
    8e58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    8e5a:	464f      	mov	r7, r9
    8e5c:	4646      	mov	r6, r8
    8e5e:	b4c0      	push	{r6, r7}
#if UIP_TCP
  register struct uip_conn *uip_connr = uip_conn;
    8e60:	4bc8      	ldr	r3, [pc, #800]	; (9184 <uip_process+0x32c>)
    8e62:	681c      	ldr	r4, [r3, #0]
#endif /* UIP_TCP */
#if UIP_UDP
  if(flag == UIP_UDP_SEND_CONN) {
    8e64:	2804      	cmp	r0, #4
    8e66:	d100      	bne.n	8e6a <uip_process+0x12>
    8e68:	e351      	b.n	950e <uip_process+0x6b6>
    goto udp_send;
  }
#endif /* UIP_UDP */
  uip_sappdata = uip_appdata = &uip_buf[UIP_IPTCPH_LEN + UIP_LLH_LEN];
    8e6a:	4bc7      	ldr	r3, [pc, #796]	; (9188 <uip_process+0x330>)
    8e6c:	4ac7      	ldr	r2, [pc, #796]	; (918c <uip_process+0x334>)
    8e6e:	6013      	str	r3, [r2, #0]
    8e70:	4ac7      	ldr	r2, [pc, #796]	; (9190 <uip_process+0x338>)
    8e72:	6013      	str	r3, [r2, #0]
   
  /* Check if we were invoked because of a poll request for a
     particular connection. */
  if(flag == UIP_POLL_REQUEST) {
    8e74:	2803      	cmp	r0, #3
    8e76:	d11b      	bne.n	8eb0 <uip_process+0x58>
#if UIP_TCP
    if((uip_connr->tcpstateflags & UIP_TS_MASK) == UIP_ESTABLISHED &&
    8e78:	2325      	movs	r3, #37	; 0x25
    8e7a:	5ce3      	ldrb	r3, [r4, r3]
    8e7c:	220f      	movs	r2, #15
    8e7e:	4013      	ands	r3, r2
    8e80:	2b03      	cmp	r3, #3
    8e82:	d10b      	bne.n	8e9c <uip_process+0x44>
    8e84:	8ba3      	ldrh	r3, [r4, #28]
    8e86:	2b00      	cmp	r3, #0
    8e88:	d001      	beq.n	8e8e <uip_process+0x36>
    8e8a:	f001 f86b 	bl	9f64 <uip_process+0x110c>
       !uip_outstanding(uip_connr)) {
      uip_flags = UIP_POLL;
    8e8e:	3a07      	subs	r2, #7
    8e90:	4bc0      	ldr	r3, [pc, #768]	; (9194 <uip_process+0x33c>)
    8e92:	701a      	strb	r2, [r3, #0]
      UIP_APPCALL();
    8e94:	4bc0      	ldr	r3, [pc, #768]	; (9198 <uip_process+0x340>)
    8e96:	4798      	blx	r3
      goto appsend;
    8e98:	f000 ff1e 	bl	9cd8 <uip_process+0xe80>
#if UIP_ACTIVE_OPEN
    } else if((uip_connr->tcpstateflags & UIP_TS_MASK) == UIP_SYN_SENT) {
    8e9c:	2b02      	cmp	r3, #2
    8e9e:	d001      	beq.n	8ea4 <uip_process+0x4c>
    8ea0:	f001 f860 	bl	9f64 <uip_process+0x110c>
      /* In the SYN_SENT state, we retransmit out SYN. */
      UIP_TCP_BUF->flags = 0;
    8ea4:	2100      	movs	r1, #0
    8ea6:	3333      	adds	r3, #51	; 0x33
    8ea8:	4abc      	ldr	r2, [pc, #752]	; (919c <uip_process+0x344>)
    8eaa:	54d1      	strb	r1, [r2, r3]
      goto tcp_send_syn;
    8eac:	f000 fd0c 	bl	98c8 <uip_process+0xa70>
#endif /* UIP_ACTIVE_OPEN */
    }
    goto drop;
#endif /* UIP_TCP */
    /* Check if we were invoked because of the perodic timer fireing. */
  } else if(flag == UIP_TIMER) {
    8eb0:	2802      	cmp	r0, #2
    8eb2:	d000      	beq.n	8eb6 <uip_process+0x5e>
    8eb4:	e086      	b.n	8fc4 <uip_process+0x16c>
    /* Reset the length variables. */
#if UIP_TCP
    uip_len = 0;
    8eb6:	2300      	movs	r3, #0
    8eb8:	4ab9      	ldr	r2, [pc, #740]	; (91a0 <uip_process+0x348>)
    8eba:	8013      	strh	r3, [r2, #0]
    uip_slen = 0;
    8ebc:	4ab9      	ldr	r2, [pc, #740]	; (91a4 <uip_process+0x34c>)
    8ebe:	8013      	strh	r3, [r2, #0]
    
    /* Increase the initial sequence number. */
    if(++iss[3] == 0) {
    8ec0:	4ab9      	ldr	r2, [pc, #740]	; (91a8 <uip_process+0x350>)
    8ec2:	78d3      	ldrb	r3, [r2, #3]
    8ec4:	3301      	adds	r3, #1
    8ec6:	b2db      	uxtb	r3, r3
    8ec8:	70d3      	strb	r3, [r2, #3]
    8eca:	2b00      	cmp	r3, #0
    8ecc:	d10e      	bne.n	8eec <uip_process+0x94>
      if(++iss[2] == 0) {
    8ece:	7893      	ldrb	r3, [r2, #2]
    8ed0:	3301      	adds	r3, #1
    8ed2:	b2db      	uxtb	r3, r3
    8ed4:	7093      	strb	r3, [r2, #2]
    8ed6:	2b00      	cmp	r3, #0
    8ed8:	d108      	bne.n	8eec <uip_process+0x94>
        if(++iss[1] == 0) {
    8eda:	7853      	ldrb	r3, [r2, #1]
    8edc:	3301      	adds	r3, #1
    8ede:	b2db      	uxtb	r3, r3
    8ee0:	7053      	strb	r3, [r2, #1]
    8ee2:	2b00      	cmp	r3, #0
    8ee4:	d102      	bne.n	8eec <uip_process+0x94>
          ++iss[0];
    8ee6:	7813      	ldrb	r3, [r2, #0]
    8ee8:	3301      	adds	r3, #1
    8eea:	7013      	strb	r3, [r2, #0]
     * Check if the connection is in a state in which we simply wait
     * for the connection to time out. If so, we increase the
     * connection's timer and remove the connection if it times
     * out.
     */
    if(uip_connr->tcpstateflags == UIP_TIME_WAIT ||
    8eec:	2325      	movs	r3, #37	; 0x25
    8eee:	5ce3      	ldrb	r3, [r4, r3]
    8ef0:	2202      	movs	r2, #2
    8ef2:	1c19      	adds	r1, r3, #0
    8ef4:	4391      	bics	r1, r2
    8ef6:	1e0a      	subs	r2, r1, #0
    8ef8:	2a05      	cmp	r2, #5
    8efa:	d10d      	bne.n	8f18 <uip_process+0xc0>
       uip_connr->tcpstateflags == UIP_FIN_WAIT_2) {
      ++(uip_connr->timer);
    8efc:	3221      	adds	r2, #33	; 0x21
    8efe:	5ca3      	ldrb	r3, [r4, r2]
    8f00:	3301      	adds	r3, #1
    8f02:	b2db      	uxtb	r3, r3
    8f04:	54a3      	strb	r3, [r4, r2]
      if(uip_connr->timer == UIP_TIME_WAIT_TIMEOUT) {
    8f06:	2b78      	cmp	r3, #120	; 0x78
    8f08:	d001      	beq.n	8f0e <uip_process+0xb6>
    8f0a:	f001 f82b 	bl	9f64 <uip_process+0x110c>
        uip_connr->tcpstateflags = UIP_CLOSED;
    8f0e:	2200      	movs	r2, #0
    8f10:	3b53      	subs	r3, #83	; 0x53
    8f12:	54e2      	strb	r2, [r4, r3]
    8f14:	f001 f826 	bl	9f64 <uip_process+0x110c>
      }
    } else if(uip_connr->tcpstateflags != UIP_CLOSED) {
    8f18:	2b00      	cmp	r3, #0
    8f1a:	d101      	bne.n	8f20 <uip_process+0xc8>
    8f1c:	f001 f822 	bl	9f64 <uip_process+0x110c>
      /*
       * If the connection has outstanding data, we increase the
       * connection's timer and see if it has reached the RTO value
       * in which case we retransmit.
       */
      if(uip_outstanding(uip_connr)) {
    8f20:	8ba2      	ldrh	r2, [r4, #28]
    8f22:	2a00      	cmp	r2, #0
    8f24:	d041      	beq.n	8faa <uip_process+0x152>
        if(uip_connr->timer-- == 0) {
    8f26:	2126      	movs	r1, #38	; 0x26
    8f28:	5c62      	ldrb	r2, [r4, r1]
    8f2a:	1e50      	subs	r0, r2, #1
    8f2c:	5460      	strb	r0, [r4, r1]
    8f2e:	2a00      	cmp	r2, #0
    8f30:	d001      	beq.n	8f36 <uip_process+0xde>
    8f32:	f001 f817 	bl	9f64 <uip_process+0x110c>
          if(uip_connr->nrtx == UIP_MAXRTX ||
    8f36:	3227      	adds	r2, #39	; 0x27
    8f38:	5ca2      	ldrb	r2, [r4, r2]
    8f3a:	2a08      	cmp	r2, #8
    8f3c:	d004      	beq.n	8f48 <uip_process+0xf0>
    8f3e:	1e59      	subs	r1, r3, #1
    8f40:	2901      	cmp	r1, #1
    8f42:	d80f      	bhi.n	8f64 <uip_process+0x10c>
             ((uip_connr->tcpstateflags == UIP_SYN_SENT ||
               uip_connr->tcpstateflags == UIP_SYN_RCVD) &&
    8f44:	2a05      	cmp	r2, #5
    8f46:	d10d      	bne.n	8f64 <uip_process+0x10c>
              uip_connr->nrtx == UIP_MAXSYNRTX)) {
            uip_connr->tcpstateflags = UIP_CLOSED;
    8f48:	2200      	movs	r2, #0
    8f4a:	2325      	movs	r3, #37	; 0x25
    8f4c:	54e2      	strb	r2, [r4, r3]
            /*
             * We call UIP_APPCALL() with uip_flags set to
             * UIP_TIMEDOUT to inform the application that the
             * connection has timed out.
             */
            uip_flags = UIP_TIMEDOUT;
    8f4e:	3280      	adds	r2, #128	; 0x80
    8f50:	4b90      	ldr	r3, [pc, #576]	; (9194 <uip_process+0x33c>)
    8f52:	701a      	strb	r2, [r3, #0]
            UIP_APPCALL();
    8f54:	4b90      	ldr	r3, [pc, #576]	; (9198 <uip_process+0x340>)
    8f56:	4798      	blx	r3
                  
            /* We also send a reset packet to the remote host. */
            UIP_TCP_BUF->flags = TCP_RST | TCP_ACK;
    8f58:	2114      	movs	r1, #20
    8f5a:	2335      	movs	r3, #53	; 0x35
    8f5c:	4a8f      	ldr	r2, [pc, #572]	; (919c <uip_process+0x344>)
    8f5e:	54d1      	strb	r1, [r2, r3]
            goto tcp_send_nodata;
    8f60:	f000 ff84 	bl	9e6c <uip_process+0x1014>
          }
               
          /* Exponential backoff. */
          uip_connr->timer = UIP_RTO << (uip_connr->nrtx > 4?
    8f64:	2130      	movs	r1, #48	; 0x30
    8f66:	2a04      	cmp	r2, #4
    8f68:	d802      	bhi.n	8f70 <uip_process+0x118>
    8f6a:	392d      	subs	r1, #45	; 0x2d
    8f6c:	4091      	lsls	r1, r2
    8f6e:	b2c9      	uxtb	r1, r1
    8f70:	2026      	movs	r0, #38	; 0x26
    8f72:	5421      	strb	r1, [r4, r0]
                                         4:
                                         uip_connr->nrtx);
          ++(uip_connr->nrtx);
    8f74:	3201      	adds	r2, #1
    8f76:	2127      	movs	r1, #39	; 0x27
    8f78:	5462      	strb	r2, [r4, r1]
           * data for the retransmit. In SYN_RCVD, we resend the
           * SYNACK that we sent earlier and in LAST_ACK we have to
           * retransmit our FINACK.
           */
          UIP_STAT(++uip_stat.tcp.rexmit);
          switch(uip_connr->tcpstateflags & UIP_TS_MASK) {
    8f7a:	220f      	movs	r2, #15
    8f7c:	4013      	ands	r3, r2
    8f7e:	b2da      	uxtb	r2, r3
    8f80:	2a08      	cmp	r2, #8
    8f82:	d901      	bls.n	8f88 <uip_process+0x130>
    8f84:	f000 ffee 	bl	9f64 <uip_process+0x110c>
    8f88:	009b      	lsls	r3, r3, #2
    8f8a:	4a88      	ldr	r2, [pc, #544]	; (91ac <uip_process+0x354>)
    8f8c:	58d3      	ldr	r3, [r2, r3]
    8f8e:	469f      	mov	pc, r3
              goto tcp_send_synack;
                     
#if UIP_ACTIVE_OPEN
            case UIP_SYN_SENT:
              /* In the SYN_SENT state, we retransmit out SYN. */
              UIP_TCP_BUF->flags = 0;
    8f90:	2100      	movs	r1, #0
    8f92:	2335      	movs	r3, #53	; 0x35
    8f94:	4a81      	ldr	r2, [pc, #516]	; (919c <uip_process+0x344>)
    8f96:	54d1      	strb	r1, [r2, r3]
              goto tcp_send_syn;
    8f98:	f000 fc96 	bl	98c8 <uip_process+0xa70>
               * In the ESTABLISHED state, we call upon the application
               * to do the actual retransmit after which we jump into
               * the code for sending out the packet (the apprexmit
               * label).
               */
              uip_flags = UIP_REXMIT;
    8f9c:	2204      	movs	r2, #4
    8f9e:	4b7d      	ldr	r3, [pc, #500]	; (9194 <uip_process+0x33c>)
    8fa0:	701a      	strb	r2, [r3, #0]
              UIP_APPCALL();
    8fa2:	4b7d      	ldr	r3, [pc, #500]	; (9198 <uip_process+0x340>)
    8fa4:	4798      	blx	r3
              goto apprexmit;
    8fa6:	f000 fed1 	bl	9d4c <uip_process+0xef4>
            case UIP_LAST_ACK:
              /* In all these states we should retransmit a FINACK. */
              goto tcp_send_finack;
          }
        }
      } else if((uip_connr->tcpstateflags & UIP_TS_MASK) == UIP_ESTABLISHED) {
    8faa:	220f      	movs	r2, #15
    8fac:	4013      	ands	r3, r2
    8fae:	2b03      	cmp	r3, #3
    8fb0:	d001      	beq.n	8fb6 <uip_process+0x15e>
    8fb2:	f000 ffd7 	bl	9f64 <uip_process+0x110c>
        /*
         * If there was no need for a retransmission, we poll the
         * application for new data.
         */
        uip_flags = UIP_POLL;
    8fb6:	3a07      	subs	r2, #7
    8fb8:	4b76      	ldr	r3, [pc, #472]	; (9194 <uip_process+0x33c>)
    8fba:	701a      	strb	r2, [r3, #0]
        UIP_APPCALL();
    8fbc:	4b76      	ldr	r3, [pc, #472]	; (9198 <uip_process+0x340>)
    8fbe:	4798      	blx	r3
        goto appsend;
    8fc0:	f000 fe8a 	bl	9cd8 <uip_process+0xe80>
    }
    goto drop;
#endif /* UIP_TCP */
  }
#if UIP_UDP
  if(flag == UIP_UDP_TIMER) {
    8fc4:	2805      	cmp	r0, #5
    8fc6:	d118      	bne.n	8ffa <uip_process+0x1a2>
    if(uip_udp_conn->lport != 0) {
    8fc8:	4b79      	ldr	r3, [pc, #484]	; (91b0 <uip_process+0x358>)
    8fca:	681b      	ldr	r3, [r3, #0]
    8fcc:	8a1b      	ldrh	r3, [r3, #16]
    8fce:	2b00      	cmp	r3, #0
    8fd0:	d101      	bne.n	8fd6 <uip_process+0x17e>
    8fd2:	f000 ffc7 	bl	9f64 <uip_process+0x110c>
      uip_conn = NULL;
    8fd6:	2300      	movs	r3, #0
    8fd8:	4a6a      	ldr	r2, [pc, #424]	; (9184 <uip_process+0x32c>)
    8fda:	6013      	str	r3, [r2, #0]
      uip_sappdata = uip_appdata = &uip_buf[UIP_IPUDPH_LEN + UIP_LLH_LEN];
    8fdc:	4a75      	ldr	r2, [pc, #468]	; (91b4 <uip_process+0x35c>)
    8fde:	496b      	ldr	r1, [pc, #428]	; (918c <uip_process+0x334>)
    8fe0:	600a      	str	r2, [r1, #0]
    8fe2:	496b      	ldr	r1, [pc, #428]	; (9190 <uip_process+0x338>)
    8fe4:	600a      	str	r2, [r1, #0]
      uip_len = uip_slen = 0;
    8fe6:	4a6f      	ldr	r2, [pc, #444]	; (91a4 <uip_process+0x34c>)
    8fe8:	8013      	strh	r3, [r2, #0]
    8fea:	4a6d      	ldr	r2, [pc, #436]	; (91a0 <uip_process+0x348>)
    8fec:	8013      	strh	r3, [r2, #0]
      uip_flags = UIP_POLL;
    8fee:	2208      	movs	r2, #8
    8ff0:	4b68      	ldr	r3, [pc, #416]	; (9194 <uip_process+0x33c>)
    8ff2:	701a      	strb	r2, [r3, #0]
      UIP_UDP_APPCALL();
    8ff4:	4b68      	ldr	r3, [pc, #416]	; (9198 <uip_process+0x340>)
    8ff6:	4798      	blx	r3
      goto udp_send;
    8ff8:	e289      	b.n	950e <uip_process+0x6b6>
  UIP_STAT(++uip_stat.ip.recv);
   
  /* Start of IP input header processing code. */
   
  /* Check validity of the IP header. */
  if((UIP_IP_BUF->vtc & 0xf0) != 0x60)  { /* IP version and header length. */
    8ffa:	4b68      	ldr	r3, [pc, #416]	; (919c <uip_process+0x344>)
    8ffc:	781b      	ldrb	r3, [r3, #0]
    8ffe:	220f      	movs	r2, #15
    9000:	4393      	bics	r3, r2
    9002:	2b60      	cmp	r3, #96	; 0x60
    9004:	d001      	beq.n	900a <uip_process+0x1b2>
    9006:	f000 ffad 	bl	9f64 <uip_process+0x110c>
   * uip_len is larger than the size reported in the IP packet header,
   * the packet has been padded and we set uip_len to the correct
   * value..
   */
   
  if((UIP_IP_BUF->len[0] << 8) + UIP_IP_BUF->len[1] <= uip_len) {
    900a:	4a64      	ldr	r2, [pc, #400]	; (919c <uip_process+0x344>)
    900c:	7913      	ldrb	r3, [r2, #4]
    900e:	7951      	ldrb	r1, [r2, #5]
    9010:	021a      	lsls	r2, r3, #8
    9012:	1852      	adds	r2, r2, r1
    9014:	4862      	ldr	r0, [pc, #392]	; (91a0 <uip_process+0x348>)
    9016:	8800      	ldrh	r0, [r0, #0]
    9018:	4282      	cmp	r2, r0
    901a:	dd01      	ble.n	9020 <uip_process+0x1c8>
    901c:	f000 ffa2 	bl	9f64 <uip_process+0x110c>
    9020:	3128      	adds	r1, #40	; 0x28
    uip_len = (UIP_IP_BUF->len[0] << 8) + UIP_IP_BUF->len[1] + UIP_IPH_LEN;
    9022:	021b      	lsls	r3, r3, #8
    9024:	18cb      	adds	r3, r1, r3
    9026:	4a5e      	ldr	r2, [pc, #376]	; (91a0 <uip_process+0x348>)
    9028:	8013      	strh	r3, [r2, #0]
  PRINT6ADDR(&UIP_IP_BUF->srcipaddr);
  PRINTF(" to ");
  PRINT6ADDR(&UIP_IP_BUF->destipaddr);
  PRINTF("\n\r");

  if(uip_is_addr_mcast(&UIP_IP_BUF->srcipaddr)){
    902a:	4b5c      	ldr	r3, [pc, #368]	; (919c <uip_process+0x344>)
    902c:	7a1b      	ldrb	r3, [r3, #8]
    902e:	2bff      	cmp	r3, #255	; 0xff
    9030:	d101      	bne.n	9036 <uip_process+0x1de>
    9032:	f000 ff97 	bl	9f64 <uip_process+0x110c>
  /*
   * Next header field processing. In IPv6, we can have extension headers,
   * if present, the Hop-by-Hop Option must be processed before forwarding
   * the packet.
   */
  uip_next_hdr = &UIP_IP_BUF->proto;
    9036:	4b60      	ldr	r3, [pc, #384]	; (91b8 <uip_process+0x360>)
    9038:	4a60      	ldr	r2, [pc, #384]	; (91bc <uip_process+0x364>)
    903a:	6013      	str	r3, [r2, #0]
  uip_ext_len = 0;
    903c:	2200      	movs	r2, #0
    903e:	4960      	ldr	r1, [pc, #384]	; (91c0 <uip_process+0x368>)
    9040:	700a      	strb	r2, [r1, #0]
  uip_ext_bitmap = 0;
    9042:	4960      	ldr	r1, [pc, #384]	; (91c4 <uip_process+0x36c>)
    9044:	700a      	strb	r2, [r1, #0]
  if(*uip_next_hdr == UIP_PROTO_HBHO) {
    9046:	781b      	ldrb	r3, [r3, #0]
    9048:	2b00      	cmp	r3, #0
    904a:	d11c      	bne.n	9086 <uip_process+0x22e>
#if UIP_CONF_IPV6_CHECKS
    uip_ext_bitmap |= UIP_EXT_HDR_BITMAP_HBHO;
    904c:	3201      	adds	r2, #1
    904e:	700a      	strb	r2, [r1, #0]
#endif /* UIP_CONF_IPV6_CHECKS */
    switch(ext_hdr_options_process()) {
    9050:	4b5d      	ldr	r3, [pc, #372]	; (91c8 <uip_process+0x370>)
    9052:	4798      	blx	r3
    9054:	2801      	cmp	r0, #1
    9056:	d101      	bne.n	905c <uip_process+0x204>
    9058:	f000 ff84 	bl	9f64 <uip_process+0x110c>
    905c:	2800      	cmp	r0, #0
    905e:	d004      	beq.n	906a <uip_process+0x212>
    9060:	2802      	cmp	r0, #2
    9062:	d101      	bne.n	9068 <uip_process+0x210>
    9064:	f000 ff62 	bl	9f2c <uip_process+0x10d4>
    9068:	e00d      	b.n	9086 <uip_process+0x22e>
      case 0:
        /* continue */
        uip_next_hdr = &UIP_EXT_BUF->next;
    906a:	4855      	ldr	r0, [pc, #340]	; (91c0 <uip_process+0x368>)
    906c:	7803      	ldrb	r3, [r0, #0]
    906e:	1c19      	adds	r1, r3, #0
    9070:	3128      	adds	r1, #40	; 0x28
    9072:	4a4a      	ldr	r2, [pc, #296]	; (919c <uip_process+0x344>)
    9074:	1889      	adds	r1, r1, r2
    9076:	4a51      	ldr	r2, [pc, #324]	; (91bc <uip_process+0x364>)
    9078:	6011      	str	r1, [r2, #0]
    907a:	3308      	adds	r3, #8
    907c:	1c1a      	adds	r2, r3, #0
        uip_ext_len += (UIP_EXT_BUF->len << 3) + 8;
    907e:	784b      	ldrb	r3, [r1, #1]
    9080:	00db      	lsls	r3, r3, #3
    9082:	18d3      	adds	r3, r2, r3
    9084:	7003      	strb	r3, [r0, #0]
    }
  }
#endif /* UIP_IPV6_CONF_MULTICAST */

  /* TBD Some Parameter problem messages */
  if(!uip_ds6_is_my_addr(&UIP_IP_BUF->destipaddr) &&
    9086:	4851      	ldr	r0, [pc, #324]	; (91cc <uip_process+0x374>)
    9088:	4b51      	ldr	r3, [pc, #324]	; (91d0 <uip_process+0x378>)
    908a:	4798      	blx	r3
    908c:	2800      	cmp	r0, #0
    908e:	d104      	bne.n	909a <uip_process+0x242>
     !uip_ds6_is_my_maddr(&UIP_IP_BUF->destipaddr)) {
    9090:	484e      	ldr	r0, [pc, #312]	; (91cc <uip_process+0x374>)
    9092:	4b50      	ldr	r3, [pc, #320]	; (91d4 <uip_process+0x37c>)
    9094:	4798      	blx	r3
    }
  }
#endif /* UIP_IPV6_CONF_MULTICAST */

  /* TBD Some Parameter problem messages */
  if(!uip_ds6_is_my_addr(&UIP_IP_BUF->destipaddr) &&
    9096:	2800      	cmp	r0, #0
    9098:	d001      	beq.n	909e <uip_process+0x246>
#if UIP_CONF_IPV6_MULTICAST
  process:
#endif

  while(1) {
    switch(*uip_next_hdr){
    909a:	4c48      	ldr	r4, [pc, #288]	; (91bc <uip_process+0x364>)
    909c:	e10d      	b.n	92ba <uip_process+0x462>
#endif /* UIP_IPV6_CONF_MULTICAST */

  /* TBD Some Parameter problem messages */
  if(!uip_ds6_is_my_addr(&UIP_IP_BUF->destipaddr) &&
     !uip_ds6_is_my_maddr(&UIP_IP_BUF->destipaddr)) {
    if(!uip_is_addr_mcast(&UIP_IP_BUF->destipaddr) &&
    909e:	4b3f      	ldr	r3, [pc, #252]	; (919c <uip_process+0x344>)
    90a0:	7e1b      	ldrb	r3, [r3, #24]
    90a2:	2bff      	cmp	r3, #255	; 0xff
    90a4:	d100      	bne.n	90a8 <uip_process+0x250>
    90a6:	e0a1      	b.n	91ec <uip_process+0x394>
    90a8:	2bfe      	cmp	r3, #254	; 0xfe
    90aa:	d104      	bne.n	90b6 <uip_process+0x25e>
       !uip_is_addr_link_local(&UIP_IP_BUF->destipaddr) &&
    90ac:	4a3b      	ldr	r2, [pc, #236]	; (919c <uip_process+0x344>)
    90ae:	7e52      	ldrb	r2, [r2, #25]
    90b0:	2a80      	cmp	r2, #128	; 0x80
    90b2:	d100      	bne.n	90b6 <uip_process+0x25e>
    90b4:	e09a      	b.n	91ec <uip_process+0x394>
       !uip_is_addr_link_local(&UIP_IP_BUF->srcipaddr) &&
    90b6:	4a39      	ldr	r2, [pc, #228]	; (919c <uip_process+0x344>)

  /* TBD Some Parameter problem messages */
  if(!uip_ds6_is_my_addr(&UIP_IP_BUF->destipaddr) &&
     !uip_ds6_is_my_maddr(&UIP_IP_BUF->destipaddr)) {
    if(!uip_is_addr_mcast(&UIP_IP_BUF->destipaddr) &&
       !uip_is_addr_link_local(&UIP_IP_BUF->destipaddr) &&
    90b8:	7a12      	ldrb	r2, [r2, #8]
    90ba:	2afe      	cmp	r2, #254	; 0xfe
    90bc:	d104      	bne.n	90c8 <uip_process+0x270>
       !uip_is_addr_link_local(&UIP_IP_BUF->srcipaddr) &&
    90be:	4a37      	ldr	r2, [pc, #220]	; (919c <uip_process+0x344>)
    90c0:	7a52      	ldrb	r2, [r2, #9]
    90c2:	2a80      	cmp	r2, #128	; 0x80
    90c4:	d100      	bne.n	90c8 <uip_process+0x270>
    90c6:	e09d      	b.n	9204 <uip_process+0x3ac>
       !uip_is_addr_unspecified(&UIP_IP_BUF->srcipaddr) &&
    90c8:	4a34      	ldr	r2, [pc, #208]	; (919c <uip_process+0x344>)
  /* TBD Some Parameter problem messages */
  if(!uip_ds6_is_my_addr(&UIP_IP_BUF->destipaddr) &&
     !uip_ds6_is_my_maddr(&UIP_IP_BUF->destipaddr)) {
    if(!uip_is_addr_mcast(&UIP_IP_BUF->destipaddr) &&
       !uip_is_addr_link_local(&UIP_IP_BUF->destipaddr) &&
       !uip_is_addr_link_local(&UIP_IP_BUF->srcipaddr) &&
    90ca:	8912      	ldrh	r2, [r2, #8]
    90cc:	2a00      	cmp	r2, #0
    90ce:	d11b      	bne.n	9108 <uip_process+0x2b0>
       !uip_is_addr_unspecified(&UIP_IP_BUF->srcipaddr) &&
    90d0:	4a32      	ldr	r2, [pc, #200]	; (919c <uip_process+0x344>)
    90d2:	8952      	ldrh	r2, [r2, #10]
    90d4:	2a00      	cmp	r2, #0
    90d6:	d117      	bne.n	9108 <uip_process+0x2b0>
    90d8:	4a30      	ldr	r2, [pc, #192]	; (919c <uip_process+0x344>)
    90da:	8992      	ldrh	r2, [r2, #12]
    90dc:	2a00      	cmp	r2, #0
    90de:	d113      	bne.n	9108 <uip_process+0x2b0>
    90e0:	4a2e      	ldr	r2, [pc, #184]	; (919c <uip_process+0x344>)
    90e2:	89d2      	ldrh	r2, [r2, #14]
    90e4:	2a00      	cmp	r2, #0
    90e6:	d10f      	bne.n	9108 <uip_process+0x2b0>
    90e8:	4a2c      	ldr	r2, [pc, #176]	; (919c <uip_process+0x344>)
    90ea:	8a12      	ldrh	r2, [r2, #16]
    90ec:	2a00      	cmp	r2, #0
    90ee:	d10b      	bne.n	9108 <uip_process+0x2b0>
    90f0:	4a2a      	ldr	r2, [pc, #168]	; (919c <uip_process+0x344>)
    90f2:	8a52      	ldrh	r2, [r2, #18]
    90f4:	2a00      	cmp	r2, #0
    90f6:	d107      	bne.n	9108 <uip_process+0x2b0>
    90f8:	4a28      	ldr	r2, [pc, #160]	; (919c <uip_process+0x344>)
    90fa:	8a92      	ldrh	r2, [r2, #20]
    90fc:	2a00      	cmp	r2, #0
    90fe:	d103      	bne.n	9108 <uip_process+0x2b0>
    9100:	4a26      	ldr	r2, [pc, #152]	; (919c <uip_process+0x344>)
    9102:	8ad2      	ldrh	r2, [r2, #22]
    9104:	2a00      	cmp	r2, #0
    9106:	d071      	beq.n	91ec <uip_process+0x394>
       !uip_is_addr_loopback(&UIP_IP_BUF->destipaddr)) {
    9108:	4a24      	ldr	r2, [pc, #144]	; (919c <uip_process+0x344>)
  if(!uip_ds6_is_my_addr(&UIP_IP_BUF->destipaddr) &&
     !uip_ds6_is_my_maddr(&UIP_IP_BUF->destipaddr)) {
    if(!uip_is_addr_mcast(&UIP_IP_BUF->destipaddr) &&
       !uip_is_addr_link_local(&UIP_IP_BUF->destipaddr) &&
       !uip_is_addr_link_local(&UIP_IP_BUF->srcipaddr) &&
       !uip_is_addr_unspecified(&UIP_IP_BUF->srcipaddr) &&
    910a:	8b12      	ldrh	r2, [r2, #24]
    910c:	2a00      	cmp	r2, #0
    910e:	d120      	bne.n	9152 <uip_process+0x2fa>
       !uip_is_addr_loopback(&UIP_IP_BUF->destipaddr)) {
    9110:	4a22      	ldr	r2, [pc, #136]	; (919c <uip_process+0x344>)
    9112:	8b52      	ldrh	r2, [r2, #26]
    9114:	2a00      	cmp	r2, #0
    9116:	d11c      	bne.n	9152 <uip_process+0x2fa>
    9118:	4a20      	ldr	r2, [pc, #128]	; (919c <uip_process+0x344>)
    911a:	8b92      	ldrh	r2, [r2, #28]
    911c:	2a00      	cmp	r2, #0
    911e:	d118      	bne.n	9152 <uip_process+0x2fa>
    9120:	4a1e      	ldr	r2, [pc, #120]	; (919c <uip_process+0x344>)
    9122:	8bd2      	ldrh	r2, [r2, #30]
    9124:	2a00      	cmp	r2, #0
    9126:	d114      	bne.n	9152 <uip_process+0x2fa>
    9128:	4a1c      	ldr	r2, [pc, #112]	; (919c <uip_process+0x344>)
    912a:	8c12      	ldrh	r2, [r2, #32]
    912c:	2a00      	cmp	r2, #0
    912e:	d110      	bne.n	9152 <uip_process+0x2fa>
    9130:	4a1a      	ldr	r2, [pc, #104]	; (919c <uip_process+0x344>)
    9132:	8c52      	ldrh	r2, [r2, #34]	; 0x22
    9134:	2a00      	cmp	r2, #0
    9136:	d10c      	bne.n	9152 <uip_process+0x2fa>
    9138:	4a18      	ldr	r2, [pc, #96]	; (919c <uip_process+0x344>)
    913a:	8c92      	ldrh	r2, [r2, #36]	; 0x24
    913c:	2a00      	cmp	r2, #0
    913e:	d108      	bne.n	9152 <uip_process+0x2fa>
    9140:	3226      	adds	r2, #38	; 0x26
    9142:	4916      	ldr	r1, [pc, #88]	; (919c <uip_process+0x344>)
    9144:	5c8a      	ldrb	r2, [r1, r2]
    9146:	2a00      	cmp	r2, #0
    9148:	d103      	bne.n	9152 <uip_process+0x2fa>
    914a:	3227      	adds	r2, #39	; 0x27
    914c:	5c8a      	ldrb	r2, [r1, r2]
    914e:	2a01      	cmp	r2, #1
    9150:	d04c      	beq.n	91ec <uip_process+0x394>


      /* Check MTU */
      if(uip_len > UIP_LINK_MTU) {
    9152:	4b13      	ldr	r3, [pc, #76]	; (91a0 <uip_process+0x348>)
    9154:	881a      	ldrh	r2, [r3, #0]
    9156:	23a0      	movs	r3, #160	; 0xa0
    9158:	00db      	lsls	r3, r3, #3
    915a:	429a      	cmp	r2, r3
    915c:	d906      	bls.n	916c <uip_process+0x314>
        uip_icmp6_error_output(ICMP6_PACKET_TOO_BIG, 0, UIP_LINK_MTU);
    915e:	2002      	movs	r0, #2
    9160:	2100      	movs	r1, #0
    9162:	1c1a      	adds	r2, r3, #0
    9164:	4b1c      	ldr	r3, [pc, #112]	; (91d8 <uip_process+0x380>)
    9166:	4798      	blx	r3
        UIP_STAT(++uip_stat.ip.drop);
        goto send;
    9168:	f000 fee0 	bl	9f2c <uip_process+0x10d4>
      }
      /* Check Hop Limit */
      if(UIP_IP_BUF->ttl <= 1) {
    916c:	4b0b      	ldr	r3, [pc, #44]	; (919c <uip_process+0x344>)
    916e:	79db      	ldrb	r3, [r3, #7]
    9170:	2b01      	cmp	r3, #1
    9172:	d833      	bhi.n	91dc <uip_process+0x384>
        uip_icmp6_error_output(ICMP6_TIME_EXCEEDED,
    9174:	2003      	movs	r0, #3
    9176:	2100      	movs	r1, #0
    9178:	1c0a      	adds	r2, r1, #0
    917a:	4b17      	ldr	r3, [pc, #92]	; (91d8 <uip_process+0x380>)
    917c:	4798      	blx	r3
                               ICMP6_TIME_EXCEED_TRANSIT, 0);
        UIP_STAT(++uip_stat.ip.drop);
        goto send;
    917e:	f000 fed5 	bl	9f2c <uip_process+0x10d4>
    9182:	46c0      	nop			; (mov r8, r8)
    9184:	20002e74 	.word	0x20002e74
    9188:	20002d10 	.word	0x20002d10
    918c:	20002e70 	.word	0x20002e70
    9190:	20002cc4 	.word	0x20002cc4
    9194:	20002e64 	.word	0x20002e64
    9198:	0000aa69 	.word	0x0000aa69
    919c:	20002cd4 	.word	0x20002cd4
    91a0:	20002cc0 	.word	0x20002cc0
    91a4:	20003088 	.word	0x20003088
    91a8:	20000b14 	.word	0x20000b14
    91ac:	000129e8 	.word	0x000129e8
    91b0:	20002e6c 	.word	0x20002e6c
    91b4:	20002d04 	.word	0x20002d04
    91b8:	20002cda 	.word	0x20002cda
    91bc:	20002e68 	.word	0x20002e68
    91c0:	20000b12 	.word	0x20000b12
    91c4:	20000b13 	.word	0x20000b13
    91c8:	00008a05 	.word	0x00008a05
    91cc:	20002cec 	.word	0x20002cec
    91d0:	00007439 	.word	0x00007439
    91d4:	00007609 	.word	0x00007609
    91d8:	00007cfd 	.word	0x00007cfd
      }

#if UIP_CONF_IPV6_RPL
      rpl_update_header_empty();
    91dc:	4bac      	ldr	r3, [pc, #688]	; (9490 <uip_process+0x638>)
    91de:	4798      	blx	r3
#endif /* UIP_CONF_IPV6_RPL */

      UIP_IP_BUF->ttl = UIP_IP_BUF->ttl - 1;
    91e0:	4aac      	ldr	r2, [pc, #688]	; (9494 <uip_process+0x63c>)
    91e2:	79d3      	ldrb	r3, [r2, #7]
    91e4:	3b01      	subs	r3, #1
    91e6:	71d3      	strb	r3, [r2, #7]
      PRINTF("Forwarding packet to ");
      PRINT6ADDR(&UIP_IP_BUF->destipaddr);
      PRINTF("\n\r");
      UIP_STAT(++uip_stat.ip.forwarded);
      goto send;
    91e8:	f000 fea0 	bl	9f2c <uip_process+0x10d4>
    } else {
      if((uip_is_addr_link_local(&UIP_IP_BUF->srcipaddr)) &&
    91ec:	4aa9      	ldr	r2, [pc, #676]	; (9494 <uip_process+0x63c>)
    91ee:	7a12      	ldrb	r2, [r2, #8]
    91f0:	2afe      	cmp	r2, #254	; 0xfe
    91f2:	d001      	beq.n	91f8 <uip_process+0x3a0>
    91f4:	f000 feb6 	bl	9f64 <uip_process+0x110c>
    91f8:	4aa6      	ldr	r2, [pc, #664]	; (9494 <uip_process+0x63c>)
    91fa:	7a52      	ldrb	r2, [r2, #9]
    91fc:	2a80      	cmp	r2, #128	; 0x80
    91fe:	d001      	beq.n	9204 <uip_process+0x3ac>
    9200:	f000 feb0 	bl	9f64 <uip_process+0x110c>
         (!uip_is_addr_unspecified(&UIP_IP_BUF->srcipaddr)) &&
    9204:	4aa3      	ldr	r2, [pc, #652]	; (9494 <uip_process+0x63c>)
      PRINT6ADDR(&UIP_IP_BUF->destipaddr);
      PRINTF("\n\r");
      UIP_STAT(++uip_stat.ip.forwarded);
      goto send;
    } else {
      if((uip_is_addr_link_local(&UIP_IP_BUF->srcipaddr)) &&
    9206:	8912      	ldrh	r2, [r2, #8]
    9208:	2a00      	cmp	r2, #0
    920a:	d11d      	bne.n	9248 <uip_process+0x3f0>
         (!uip_is_addr_unspecified(&UIP_IP_BUF->srcipaddr)) &&
    920c:	4aa1      	ldr	r2, [pc, #644]	; (9494 <uip_process+0x63c>)
    920e:	8952      	ldrh	r2, [r2, #10]
    9210:	2a00      	cmp	r2, #0
    9212:	d119      	bne.n	9248 <uip_process+0x3f0>
    9214:	4a9f      	ldr	r2, [pc, #636]	; (9494 <uip_process+0x63c>)
    9216:	8992      	ldrh	r2, [r2, #12]
    9218:	2a00      	cmp	r2, #0
    921a:	d115      	bne.n	9248 <uip_process+0x3f0>
    921c:	4a9d      	ldr	r2, [pc, #628]	; (9494 <uip_process+0x63c>)
    921e:	89d2      	ldrh	r2, [r2, #14]
    9220:	2a00      	cmp	r2, #0
    9222:	d111      	bne.n	9248 <uip_process+0x3f0>
    9224:	4a9b      	ldr	r2, [pc, #620]	; (9494 <uip_process+0x63c>)
    9226:	8a12      	ldrh	r2, [r2, #16]
    9228:	2a00      	cmp	r2, #0
    922a:	d10d      	bne.n	9248 <uip_process+0x3f0>
    922c:	4a99      	ldr	r2, [pc, #612]	; (9494 <uip_process+0x63c>)
    922e:	8a52      	ldrh	r2, [r2, #18]
    9230:	2a00      	cmp	r2, #0
    9232:	d109      	bne.n	9248 <uip_process+0x3f0>
    9234:	4a97      	ldr	r2, [pc, #604]	; (9494 <uip_process+0x63c>)
    9236:	8a92      	ldrh	r2, [r2, #20]
    9238:	2a00      	cmp	r2, #0
    923a:	d105      	bne.n	9248 <uip_process+0x3f0>
    923c:	4a95      	ldr	r2, [pc, #596]	; (9494 <uip_process+0x63c>)
    923e:	8ad2      	ldrh	r2, [r2, #22]
    9240:	2a00      	cmp	r2, #0
    9242:	d101      	bne.n	9248 <uip_process+0x3f0>
    9244:	f000 fe8e 	bl	9f64 <uip_process+0x110c>
         (!uip_is_addr_loopback(&UIP_IP_BUF->destipaddr)) &&
    9248:	4a92      	ldr	r2, [pc, #584]	; (9494 <uip_process+0x63c>)
      PRINTF("\n\r");
      UIP_STAT(++uip_stat.ip.forwarded);
      goto send;
    } else {
      if((uip_is_addr_link_local(&UIP_IP_BUF->srcipaddr)) &&
         (!uip_is_addr_unspecified(&UIP_IP_BUF->srcipaddr)) &&
    924a:	8b12      	ldrh	r2, [r2, #24]
    924c:	2a00      	cmp	r2, #0
    924e:	d122      	bne.n	9296 <uip_process+0x43e>
         (!uip_is_addr_loopback(&UIP_IP_BUF->destipaddr)) &&
    9250:	4a90      	ldr	r2, [pc, #576]	; (9494 <uip_process+0x63c>)
    9252:	8b52      	ldrh	r2, [r2, #26]
    9254:	2a00      	cmp	r2, #0
    9256:	d11e      	bne.n	9296 <uip_process+0x43e>
    9258:	4a8e      	ldr	r2, [pc, #568]	; (9494 <uip_process+0x63c>)
    925a:	8b92      	ldrh	r2, [r2, #28]
    925c:	2a00      	cmp	r2, #0
    925e:	d11a      	bne.n	9296 <uip_process+0x43e>
    9260:	4a8c      	ldr	r2, [pc, #560]	; (9494 <uip_process+0x63c>)
    9262:	8bd2      	ldrh	r2, [r2, #30]
    9264:	2a00      	cmp	r2, #0
    9266:	d116      	bne.n	9296 <uip_process+0x43e>
    9268:	4a8a      	ldr	r2, [pc, #552]	; (9494 <uip_process+0x63c>)
    926a:	8c12      	ldrh	r2, [r2, #32]
    926c:	2a00      	cmp	r2, #0
    926e:	d112      	bne.n	9296 <uip_process+0x43e>
    9270:	4a88      	ldr	r2, [pc, #544]	; (9494 <uip_process+0x63c>)
    9272:	8c52      	ldrh	r2, [r2, #34]	; 0x22
    9274:	2a00      	cmp	r2, #0
    9276:	d10e      	bne.n	9296 <uip_process+0x43e>
    9278:	4a86      	ldr	r2, [pc, #536]	; (9494 <uip_process+0x63c>)
    927a:	8c92      	ldrh	r2, [r2, #36]	; 0x24
    927c:	2a00      	cmp	r2, #0
    927e:	d10a      	bne.n	9296 <uip_process+0x43e>
    9280:	3226      	adds	r2, #38	; 0x26
    9282:	4984      	ldr	r1, [pc, #528]	; (9494 <uip_process+0x63c>)
    9284:	5c8a      	ldrb	r2, [r1, r2]
    9286:	2a00      	cmp	r2, #0
    9288:	d105      	bne.n	9296 <uip_process+0x43e>
    928a:	3227      	adds	r2, #39	; 0x27
    928c:	5c8a      	ldrb	r2, [r1, r2]
    928e:	2a01      	cmp	r2, #1
    9290:	d101      	bne.n	9296 <uip_process+0x43e>
    9292:	f000 fe67 	bl	9f64 <uip_process+0x110c>
    9296:	2bff      	cmp	r3, #255	; 0xff
    9298:	d101      	bne.n	929e <uip_process+0x446>
    929a:	f000 fe63 	bl	9f64 <uip_process+0x110c>
         (!uip_is_addr_mcast(&UIP_IP_BUF->destipaddr)) &&
         (!uip_ds6_is_addr_onlink((&UIP_IP_BUF->destipaddr)))) {
    929e:	487e      	ldr	r0, [pc, #504]	; (9498 <uip_process+0x640>)
    92a0:	4b7e      	ldr	r3, [pc, #504]	; (949c <uip_process+0x644>)
    92a2:	4798      	blx	r3
      goto send;
    } else {
      if((uip_is_addr_link_local(&UIP_IP_BUF->srcipaddr)) &&
         (!uip_is_addr_unspecified(&UIP_IP_BUF->srcipaddr)) &&
         (!uip_is_addr_loopback(&UIP_IP_BUF->destipaddr)) &&
         (!uip_is_addr_mcast(&UIP_IP_BUF->destipaddr)) &&
    92a4:	2800      	cmp	r0, #0
    92a6:	d001      	beq.n	92ac <uip_process+0x454>
    92a8:	f000 fe5c 	bl	9f64 <uip_process+0x110c>
         (!uip_ds6_is_addr_onlink((&UIP_IP_BUF->destipaddr)))) {
        PRINTF("LL source address with off link destination, dropping\n\r");
        uip_icmp6_error_output(ICMP6_DST_UNREACH,
    92ac:	3001      	adds	r0, #1
    92ae:	2102      	movs	r1, #2
    92b0:	2200      	movs	r2, #0
    92b2:	4b7b      	ldr	r3, [pc, #492]	; (94a0 <uip_process+0x648>)
    92b4:	4798      	blx	r3
                               ICMP6_DST_UNREACH_NOTNEIGHBOR, 0);
        goto send;
    92b6:	f000 fe39 	bl	9f2c <uip_process+0x10d4>
#if UIP_CONF_IPV6_MULTICAST
  process:
#endif

  while(1) {
    switch(*uip_next_hdr){
    92ba:	6822      	ldr	r2, [r4, #0]
    92bc:	7813      	ldrb	r3, [r2, #0]
    92be:	2b3c      	cmp	r3, #60	; 0x3c
    92c0:	d875      	bhi.n	93ae <uip_process+0x556>
    92c2:	009b      	lsls	r3, r3, #2
    92c4:	4977      	ldr	r1, [pc, #476]	; (94a4 <uip_process+0x64c>)
    92c6:	58cb      	ldr	r3, [r1, r3]
    92c8:	469f      	mov	pc, r3
      case UIP_PROTO_HBHO:
        PRINTF("Processing hbh header\n\r");
        /* Hop by hop option header */
#if UIP_CONF_IPV6_CHECKS
        /* Hop by hop option header. If we saw one HBH already, drop */
        if(uip_ext_bitmap & UIP_EXT_HDR_BITMAP_HBHO) {
    92ca:	4b77      	ldr	r3, [pc, #476]	; (94a8 <uip_process+0x650>)
    92cc:	7819      	ldrb	r1, [r3, #0]
    92ce:	07cb      	lsls	r3, r1, #31
    92d0:	d46d      	bmi.n	93ae <uip_process+0x556>
          goto bad_hdr;
        } else {
          uip_ext_bitmap |= UIP_EXT_HDR_BITMAP_HBHO;
    92d2:	2301      	movs	r3, #1
    92d4:	430b      	orrs	r3, r1
    92d6:	4a74      	ldr	r2, [pc, #464]	; (94a8 <uip_process+0x650>)
    92d8:	7013      	strb	r3, [r2, #0]
        }
#endif /*UIP_CONF_IPV6_CHECKS*/
        switch(ext_hdr_options_process()) {
    92da:	4b74      	ldr	r3, [pc, #464]	; (94ac <uip_process+0x654>)
    92dc:	4798      	blx	r3
    92de:	2801      	cmp	r0, #1
    92e0:	d101      	bne.n	92e6 <uip_process+0x48e>
    92e2:	f000 fe3f 	bl	9f64 <uip_process+0x110c>
    92e6:	2800      	cmp	r0, #0
    92e8:	d004      	beq.n	92f4 <uip_process+0x49c>
    92ea:	2802      	cmp	r0, #2
    92ec:	d101      	bne.n	92f2 <uip_process+0x49a>
    92ee:	f000 fe1d 	bl	9f2c <uip_process+0x10d4>
    92f2:	e7e2      	b.n	92ba <uip_process+0x462>
          case 0:
            /*continue*/
            uip_next_hdr = &UIP_EXT_BUF->next;
    92f4:	486e      	ldr	r0, [pc, #440]	; (94b0 <uip_process+0x658>)
    92f6:	7803      	ldrb	r3, [r0, #0]
    92f8:	1c19      	adds	r1, r3, #0
    92fa:	3128      	adds	r1, #40	; 0x28
    92fc:	4a65      	ldr	r2, [pc, #404]	; (9494 <uip_process+0x63c>)
    92fe:	1889      	adds	r1, r1, r2
    9300:	4a6c      	ldr	r2, [pc, #432]	; (94b4 <uip_process+0x65c>)
    9302:	6011      	str	r1, [r2, #0]
    9304:	3308      	adds	r3, #8
    9306:	1c1a      	adds	r2, r3, #0
            uip_ext_len += (UIP_EXT_BUF->len << 3) + 8;
    9308:	784b      	ldrb	r3, [r1, #1]
    930a:	00db      	lsls	r3, r3, #3
    930c:	18d3      	adds	r3, r2, r3
    930e:	7003      	strb	r3, [r0, #0]
            break;
    9310:	e7d3      	b.n	92ba <uip_process+0x462>
        break;
      case UIP_PROTO_DESTO:
#if UIP_CONF_IPV6_CHECKS
        /* Destination option header. if we saw two already, drop */
        PRINTF("Processing desto header\n\r");
        if(uip_ext_bitmap & UIP_EXT_HDR_BITMAP_DESTO1) {
    9312:	4b65      	ldr	r3, [pc, #404]	; (94a8 <uip_process+0x650>)
    9314:	781b      	ldrb	r3, [r3, #0]
    9316:	0799      	lsls	r1, r3, #30
    9318:	d506      	bpl.n	9328 <uip_process+0x4d0>
          if(uip_ext_bitmap & UIP_EXT_HDR_BITMAP_DESTO2) {
    931a:	0659      	lsls	r1, r3, #25
    931c:	d447      	bmi.n	93ae <uip_process+0x556>
            goto bad_hdr;
          } else{
            uip_ext_bitmap |= UIP_EXT_HDR_BITMAP_DESTO2;
    931e:	2240      	movs	r2, #64	; 0x40
    9320:	4313      	orrs	r3, r2
    9322:	4a61      	ldr	r2, [pc, #388]	; (94a8 <uip_process+0x650>)
    9324:	7013      	strb	r3, [r2, #0]
    9326:	e003      	b.n	9330 <uip_process+0x4d8>
          }
        } else {
          uip_ext_bitmap |= UIP_EXT_HDR_BITMAP_DESTO1;
    9328:	2202      	movs	r2, #2
    932a:	4313      	orrs	r3, r2
    932c:	4a5e      	ldr	r2, [pc, #376]	; (94a8 <uip_process+0x650>)
    932e:	7013      	strb	r3, [r2, #0]
        }
#endif /*UIP_CONF_IPV6_CHECKS*/
        switch(ext_hdr_options_process()) {
    9330:	4b5e      	ldr	r3, [pc, #376]	; (94ac <uip_process+0x654>)
    9332:	4798      	blx	r3
    9334:	2801      	cmp	r0, #1
    9336:	d101      	bne.n	933c <uip_process+0x4e4>
    9338:	f000 fe14 	bl	9f64 <uip_process+0x110c>
    933c:	2800      	cmp	r0, #0
    933e:	d004      	beq.n	934a <uip_process+0x4f2>
    9340:	2802      	cmp	r0, #2
    9342:	d101      	bne.n	9348 <uip_process+0x4f0>
    9344:	f000 fdf2 	bl	9f2c <uip_process+0x10d4>
    9348:	e7b7      	b.n	92ba <uip_process+0x462>
          case 0:
            /*continue*/
            uip_next_hdr = &UIP_EXT_BUF->next;
    934a:	4859      	ldr	r0, [pc, #356]	; (94b0 <uip_process+0x658>)
    934c:	7803      	ldrb	r3, [r0, #0]
    934e:	1c19      	adds	r1, r3, #0
    9350:	3128      	adds	r1, #40	; 0x28
    9352:	4a50      	ldr	r2, [pc, #320]	; (9494 <uip_process+0x63c>)
    9354:	1889      	adds	r1, r1, r2
    9356:	4a57      	ldr	r2, [pc, #348]	; (94b4 <uip_process+0x65c>)
    9358:	6011      	str	r1, [r2, #0]
    935a:	3308      	adds	r3, #8
    935c:	1c1a      	adds	r2, r3, #0
            uip_ext_len += (UIP_EXT_BUF->len << 3) + 8;
    935e:	784b      	ldrb	r3, [r1, #1]
    9360:	00db      	lsls	r3, r3, #3
    9362:	18d3      	adds	r3, r2, r3
    9364:	7003      	strb	r3, [r0, #0]
            break;
    9366:	e7a8      	b.n	92ba <uip_process+0x462>
        }
        break;
      case UIP_PROTO_ROUTING:
#if UIP_CONF_IPV6_CHECKS
        /* Routing header. If we saw one already, drop */
        if(uip_ext_bitmap & UIP_EXT_HDR_BITMAP_ROUTING) {
    9368:	4b4f      	ldr	r3, [pc, #316]	; (94a8 <uip_process+0x650>)
    936a:	7819      	ldrb	r1, [r3, #0]
    936c:	074b      	lsls	r3, r1, #29
    936e:	d41e      	bmi.n	93ae <uip_process+0x556>
          goto bad_hdr;
        } else {
          uip_ext_bitmap |= UIP_EXT_HDR_BITMAP_ROUTING;
    9370:	2304      	movs	r3, #4
    9372:	430b      	orrs	r3, r1
    9374:	4a4c      	ldr	r2, [pc, #304]	; (94a8 <uip_process+0x650>)
    9376:	7013      	strb	r3, [r2, #0]
         * if segments left > 0, discard packet and send icmp error pointing
         * to the routing type
         */

        PRINTF("Processing Routing header\n\r");
        if(UIP_ROUTING_BUF->seg_left > 0) {
    9378:	4b4d      	ldr	r3, [pc, #308]	; (94b0 <uip_process+0x658>)
    937a:	781b      	ldrb	r3, [r3, #0]
    937c:	1c1a      	adds	r2, r3, #0
    937e:	1c18      	adds	r0, r3, #0
    9380:	3028      	adds	r0, #40	; 0x28
    9382:	4944      	ldr	r1, [pc, #272]	; (9494 <uip_process+0x63c>)
    9384:	1841      	adds	r1, r0, r1
    9386:	78c8      	ldrb	r0, [r1, #3]
    9388:	2800      	cmp	r0, #0
    938a:	d006      	beq.n	939a <uip_process+0x542>
          uip_icmp6_error_output(ICMP6_PARAM_PROB, ICMP6_PARAMPROB_HEADER, UIP_IPH_LEN + uip_ext_len + 2);
    938c:	322a      	adds	r2, #42	; 0x2a
    938e:	2004      	movs	r0, #4
    9390:	2100      	movs	r1, #0
    9392:	4b43      	ldr	r3, [pc, #268]	; (94a0 <uip_process+0x648>)
    9394:	4798      	blx	r3
          UIP_STAT(++uip_stat.ip.drop);
          UIP_LOG("ip6: unrecognized routing type");
          goto send;
    9396:	f000 fdc9 	bl	9f2c <uip_process+0x10d4>
        }
        uip_next_hdr = &UIP_EXT_BUF->next;
    939a:	4a46      	ldr	r2, [pc, #280]	; (94b4 <uip_process+0x65c>)
    939c:	6011      	str	r1, [r2, #0]
    939e:	3308      	adds	r3, #8
    93a0:	1c1a      	adds	r2, r3, #0
        uip_ext_len += (UIP_EXT_BUF->len << 3) + 8;
    93a2:	784b      	ldrb	r3, [r1, #1]
    93a4:	00db      	lsls	r3, r3, #3
    93a6:	18d3      	adds	r3, r2, r3
    93a8:	4a41      	ldr	r2, [pc, #260]	; (94b0 <uip_process+0x658>)
    93aa:	7013      	strb	r3, [r2, #0]
        break;
    93ac:	e785      	b.n	92ba <uip_process+0x462>
  bad_hdr:
  /*
   * RFC 2460 send error message parameterr problem, code unrecognized
   * next header, pointing to the next header field
   */
  uip_icmp6_error_output(ICMP6_PARAM_PROB, ICMP6_PARAMPROB_NEXTHEADER, (uint32_t)(uip_next_hdr - (uint8_t *)UIP_IP_BUF));
    93ae:	4b39      	ldr	r3, [pc, #228]	; (9494 <uip_process+0x63c>)
    93b0:	1ad2      	subs	r2, r2, r3
    93b2:	2004      	movs	r0, #4
    93b4:	2101      	movs	r1, #1
    93b6:	4b3a      	ldr	r3, [pc, #232]	; (94a0 <uip_process+0x648>)
    93b8:	4798      	blx	r3
  UIP_STAT(++uip_stat.ip.drop);
  UIP_STAT(++uip_stat.ip.protoerr);
  UIP_LOG("ip6: unrecognized header");
  goto send;
    93ba:	f000 fdb7 	bl	9f2c <uip_process+0x10d4>
  /* This is IPv6 ICMPv6 processing code. */
  PRINTF("icmp6_input: length %d type: %d \n\r", uip_len, UIP_ICMP_BUF->type);

#if UIP_CONF_IPV6_CHECKS
  /* Compute and check the ICMP header checksum */
  if(uip_icmp6chksum() != 0xffff) {
    93be:	4b3e      	ldr	r3, [pc, #248]	; (94b8 <uip_process+0x660>)
    93c0:	4798      	blx	r3
    93c2:	4b3e      	ldr	r3, [pc, #248]	; (94bc <uip_process+0x664>)
    93c4:	4298      	cmp	r0, r3
    93c6:	d001      	beq.n	93cc <uip_process+0x574>
    93c8:	f000 fdcc 	bl	9f64 <uip_process+0x110c>
   * If no pkt is to be sent as an answer to the incoming one, we
   * "goto drop". Else we just break; then at the after the "switch"
   * we "goto send"
   */
#if UIP_CONF_ICMP6
  UIP_ICMP6_APPCALL(UIP_ICMP_BUF->type);
    93cc:	4d38      	ldr	r5, [pc, #224]	; (94b0 <uip_process+0x658>)
    93ce:	782b      	ldrb	r3, [r5, #0]
    93d0:	3328      	adds	r3, #40	; 0x28
    93d2:	4c30      	ldr	r4, [pc, #192]	; (9494 <uip_process+0x63c>)
    93d4:	5ce0      	ldrb	r0, [r4, r3]
    93d6:	4b3a      	ldr	r3, [pc, #232]	; (94c0 <uip_process+0x668>)
    93d8:	4798      	blx	r3

  /*
   * Search generic input handlers.
   * The handler is in charge of setting uip_len to 0
   */
  if(uip_icmp6_input(UIP_ICMP_BUF->type,
    93da:	782b      	ldrb	r3, [r5, #0]
    93dc:	3328      	adds	r3, #40	; 0x28
    93de:	191c      	adds	r4, r3, r4
    93e0:	7820      	ldrb	r0, [r4, #0]
    93e2:	7861      	ldrb	r1, [r4, #1]
    93e4:	4b37      	ldr	r3, [pc, #220]	; (94c4 <uip_process+0x66c>)
    93e6:	4798      	blx	r3
    93e8:	2801      	cmp	r0, #1
    93ea:	d101      	bne.n	93f0 <uip_process+0x598>
    93ec:	f000 fdba 	bl	9f64 <uip_process+0x110c>
    UIP_STAT(++uip_stat.icmp.typeerr);
    UIP_LOG("icmp6: unknown ICMPv6 message.");
    uip_len = 0;
  }
  
  if(uip_len > 0) {
    93f0:	4b35      	ldr	r3, [pc, #212]	; (94c8 <uip_process+0x670>)
    93f2:	881b      	ldrh	r3, [r3, #0]
    93f4:	2b00      	cmp	r3, #0
    93f6:	d101      	bne.n	93fc <uip_process+0x5a4>
    93f8:	f000 fdb4 	bl	9f64 <uip_process+0x110c>
    93fc:	f000 fd96 	bl	9f2c <uip_process+0x10d4>

#if UIP_UDP
  /* UDP input processing. */
 udp_input:

  remove_ext_hdr();
    9400:	4b32      	ldr	r3, [pc, #200]	; (94cc <uip_process+0x674>)
    9402:	4798      	blx	r3
  /* UDP processing is really just a hack. We don't do anything to the
     UDP/IP headers, but let the UDP application do all the hard
     work. If the application sets uip_slen, it has a packet to
     send. */
#if UIP_UDP_CHECKSUMS
  uip_len = uip_len - UIP_IPUDPH_LEN;
    9404:	4a30      	ldr	r2, [pc, #192]	; (94c8 <uip_process+0x670>)
    9406:	8813      	ldrh	r3, [r2, #0]
    9408:	3b30      	subs	r3, #48	; 0x30
    940a:	8013      	strh	r3, [r2, #0]
  uip_appdata = &uip_buf[UIP_IPUDPH_LEN + UIP_LLH_LEN];
    940c:	4b30      	ldr	r3, [pc, #192]	; (94d0 <uip_process+0x678>)
    940e:	4a31      	ldr	r2, [pc, #196]	; (94d4 <uip_process+0x67c>)
    9410:	6013      	str	r3, [r2, #0]
  /* XXX hack: UDP/IPv6 receivers should drop packets with UDP
     checksum 0. Here, we explicitly receive UDP packets with checksum
     0. This is to be able to debug code that for one reason or
     another miscomputes UDP checksums. The reception of zero UDP
     checksums should be turned into a configration option. */
  if(UIP_UDP_BUF->udpchksum != 0 && uip_udpchksum() != 0xffff) {
    9412:	3b30      	subs	r3, #48	; 0x30
    9414:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
    9416:	2b00      	cmp	r3, #0
    9418:	d101      	bne.n	941e <uip_process+0x5c6>
    941a:	f000 fdb4 	bl	9f86 <uip_process+0x112e>
    941e:	4b2e      	ldr	r3, [pc, #184]	; (94d8 <uip_process+0x680>)
    9420:	4798      	blx	r3
    9422:	4b26      	ldr	r3, [pc, #152]	; (94bc <uip_process+0x664>)
    9424:	4298      	cmp	r0, r3
    9426:	d001      	beq.n	942c <uip_process+0x5d4>
    9428:	f000 fd9c 	bl	9f64 <uip_process+0x110c>
#else /* UIP_UDP_CHECKSUMS */
  uip_len = uip_len - UIP_IPUDPH_LEN;
#endif /* UIP_UDP_CHECKSUMS */

  /* Make sure that the UDP destination port number is not zero. */
  if(UIP_UDP_BUF->destport == 0) {
    942c:	4b19      	ldr	r3, [pc, #100]	; (9494 <uip_process+0x63c>)
    942e:	8d5e      	ldrh	r6, [r3, #42]	; 0x2a
    9430:	2e00      	cmp	r6, #0
    9432:	d101      	bne.n	9438 <uip_process+0x5e0>
    9434:	f000 fd96 	bl	9f64 <uip_process+0x110c>
    PRINTF("udp: zero port.\n\r");
    goto drop;
  }

  /* Demultiplex this UDP packet between the UDP "connections". */
  for(uip_udp_conn = &uip_udp_conns[0];
    9438:	4a28      	ldr	r2, [pc, #160]	; (94dc <uip_process+0x684>)
    943a:	4b29      	ldr	r3, [pc, #164]	; (94e0 <uip_process+0x688>)
    943c:	601a      	str	r2, [r3, #0]
       connection is bound to a remote IP address, the source IP
       address of the packet is checked. */
    if(uip_udp_conn->lport != 0 &&
       UIP_UDP_BUF->destport == uip_udp_conn->lport &&
       (uip_udp_conn->rport == 0 ||
        UIP_UDP_BUF->srcport == uip_udp_conn->rport) &&
    943e:	4b15      	ldr	r3, [pc, #84]	; (9494 <uip_process+0x63c>)
    9440:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    9442:	4699      	mov	r9, r3
    9444:	4c25      	ldr	r4, [pc, #148]	; (94dc <uip_process+0x684>)
  }

  /* Demultiplex this UDP packet between the UDP "connections". */
  for(uip_udp_conn = &uip_udp_conns[0];
      uip_udp_conn < &uip_udp_conns[UIP_UDP_CONNS];
      ++uip_udp_conn) {
    9446:	4f26      	ldr	r7, [pc, #152]	; (94e0 <uip_process+0x688>)
    PRINTF("udp: zero port.\n\r");
    goto drop;
  }

  /* Demultiplex this UDP packet between the UDP "connections". */
  for(uip_udp_conn = &uip_udp_conns[0];
    9448:	4d26      	ldr	r5, [pc, #152]	; (94e4 <uip_process+0x68c>)
       destination port number in the received packet. If the two port
       numbers match, the remote port number is checked if the
       connection is bound to a remote port. Finally, if the
       connection is bound to a remote IP address, the source IP
       address of the packet is checked. */
    if(uip_udp_conn->lport != 0 &&
    944a:	8a23      	ldrh	r3, [r4, #16]
    944c:	2b00      	cmp	r3, #0
    944e:	d019      	beq.n	9484 <uip_process+0x62c>
    9450:	429e      	cmp	r6, r3
    9452:	d117      	bne.n	9484 <uip_process+0x62c>
       UIP_UDP_BUF->destport == uip_udp_conn->lport &&
       (uip_udp_conn->rport == 0 ||
    9454:	8a63      	ldrh	r3, [r4, #18]
       numbers match, the remote port number is checked if the
       connection is bound to a remote port. Finally, if the
       connection is bound to a remote IP address, the source IP
       address of the packet is checked. */
    if(uip_udp_conn->lport != 0 &&
       UIP_UDP_BUF->destport == uip_udp_conn->lport &&
    9456:	2b00      	cmp	r3, #0
    9458:	d001      	beq.n	945e <uip_process+0x606>
       (uip_udp_conn->rport == 0 ||
    945a:	454b      	cmp	r3, r9
    945c:	d112      	bne.n	9484 <uip_process+0x62c>
        UIP_UDP_BUF->srcport == uip_udp_conn->rport) &&
    945e:	6823      	ldr	r3, [r4, #0]
    9460:	2b00      	cmp	r3, #0
    9462:	d108      	bne.n	9476 <uip_process+0x61e>
       (uip_is_addr_unspecified(&uip_udp_conn->ripaddr) ||
    9464:	6863      	ldr	r3, [r4, #4]
    9466:	2b00      	cmp	r3, #0
    9468:	d105      	bne.n	9476 <uip_process+0x61e>
    946a:	68a3      	ldr	r3, [r4, #8]
    946c:	2b00      	cmp	r3, #0
    946e:	d102      	bne.n	9476 <uip_process+0x61e>
    9470:	68e3      	ldr	r3, [r4, #12]
    9472:	2b00      	cmp	r3, #0
    9474:	d03c      	beq.n	94f0 <uip_process+0x698>
        uip_ipaddr_cmp(&UIP_IP_BUF->srcipaddr, &uip_udp_conn->ripaddr))) {
    9476:	481c      	ldr	r0, [pc, #112]	; (94e8 <uip_process+0x690>)
    9478:	1c21      	adds	r1, r4, #0
    947a:	2210      	movs	r2, #16
    947c:	4b1b      	ldr	r3, [pc, #108]	; (94ec <uip_process+0x694>)
    947e:	4798      	blx	r3
       address of the packet is checked. */
    if(uip_udp_conn->lport != 0 &&
       UIP_UDP_BUF->destport == uip_udp_conn->lport &&
       (uip_udp_conn->rport == 0 ||
        UIP_UDP_BUF->srcport == uip_udp_conn->rport) &&
       (uip_is_addr_unspecified(&uip_udp_conn->ripaddr) ||
    9480:	2800      	cmp	r0, #0
    9482:	d035      	beq.n	94f0 <uip_process+0x698>
  }

  /* Demultiplex this UDP packet between the UDP "connections". */
  for(uip_udp_conn = &uip_udp_conns[0];
      uip_udp_conn < &uip_udp_conns[UIP_UDP_CONNS];
      ++uip_udp_conn) {
    9484:	3420      	adds	r4, #32
    9486:	603c      	str	r4, [r7, #0]
    PRINTF("udp: zero port.\n\r");
    goto drop;
  }

  /* Demultiplex this UDP packet between the UDP "connections". */
  for(uip_udp_conn = &uip_udp_conns[0];
    9488:	42ac      	cmp	r4, r5
    948a:	d1de      	bne.n	944a <uip_process+0x5f2>
    948c:	f000 fd6a 	bl	9f64 <uip_process+0x110c>
    9490:	0000d1fd 	.word	0x0000d1fd
    9494:	20002cd4 	.word	0x20002cd4
    9498:	20002cec 	.word	0x20002cec
    949c:	000073f1 	.word	0x000073f1
    94a0:	00007cfd 	.word	0x00007cfd
    94a4:	00012a0c 	.word	0x00012a0c
    94a8:	20000b13 	.word	0x20000b13
    94ac:	00008a05 	.word	0x00008a05
    94b0:	20000b12 	.word	0x20000b12
    94b4:	20002e68 	.word	0x20002e68
    94b8:	00008bd1 	.word	0x00008bd1
    94bc:	0000ffff 	.word	0x0000ffff
    94c0:	0000a5d1 	.word	0x0000a5d1
    94c4:	00007c95 	.word	0x00007c95
    94c8:	20002cc0 	.word	0x20002cc0
    94cc:	00008da1 	.word	0x00008da1
    94d0:	20002d04 	.word	0x20002d04
    94d4:	20002e70 	.word	0x20002e70
    94d8:	00008bf1 	.word	0x00008bf1
    94dc:	2000308c 	.word	0x2000308c
    94e0:	20002e6c 	.word	0x20002e6c
    94e4:	200031cc 	.word	0x200031cc
    94e8:	20002cdc 	.word	0x20002cdc
    94ec:	000108c9 	.word	0x000108c9

 udp_found:
  PRINTF("In udp_found\n\r");
  UIP_STAT(++uip_stat.udp.recv);
 
  uip_conn = NULL;
    94f0:	2300      	movs	r3, #0
    94f2:	4ad2      	ldr	r2, [pc, #840]	; (983c <uip_process+0x9e4>)
    94f4:	6013      	str	r3, [r2, #0]
  uip_flags = UIP_NEWDATA;
    94f6:	2102      	movs	r1, #2
    94f8:	4ad1      	ldr	r2, [pc, #836]	; (9840 <uip_process+0x9e8>)
    94fa:	7011      	strb	r1, [r2, #0]
  uip_sappdata = uip_appdata = &uip_buf[UIP_IPUDPH_LEN + UIP_LLH_LEN];
    94fc:	4ad1      	ldr	r2, [pc, #836]	; (9844 <uip_process+0x9ec>)
    94fe:	49d2      	ldr	r1, [pc, #840]	; (9848 <uip_process+0x9f0>)
    9500:	600a      	str	r2, [r1, #0]
    9502:	49d2      	ldr	r1, [pc, #840]	; (984c <uip_process+0x9f4>)
    9504:	600a      	str	r2, [r1, #0]
  uip_slen = 0;
    9506:	4ad2      	ldr	r2, [pc, #840]	; (9850 <uip_process+0x9f8>)
    9508:	8013      	strh	r3, [r2, #0]
  UIP_UDP_APPCALL();
    950a:	4bd2      	ldr	r3, [pc, #840]	; (9854 <uip_process+0x9fc>)
    950c:	4798      	blx	r3

 udp_send:
  PRINTF("In udp_send\n\r");

  if(uip_slen == 0) {
    950e:	4bd0      	ldr	r3, [pc, #832]	; (9850 <uip_process+0x9f8>)
    9510:	881b      	ldrh	r3, [r3, #0]
    9512:	2b00      	cmp	r3, #0
    9514:	d101      	bne.n	951a <uip_process+0x6c2>
    9516:	f000 fd25 	bl	9f64 <uip_process+0x110c>
    goto drop;
  }
  uip_len = uip_slen + UIP_IPUDPH_LEN;
    951a:	1c1a      	adds	r2, r3, #0
    951c:	3230      	adds	r2, #48	; 0x30
    951e:	b292      	uxth	r2, r2
    9520:	49cd      	ldr	r1, [pc, #820]	; (9858 <uip_process+0xa00>)
    9522:	800a      	strh	r2, [r1, #0]

  /* For IPv6, the IP length field does not include the IPv6 IP header
     length. */
  UIP_IP_BUF->len[0] = ((uip_len - UIP_IPH_LEN) >> 8);
    9524:	4ccd      	ldr	r4, [pc, #820]	; (985c <uip_process+0xa04>)
    9526:	1c11      	adds	r1, r2, #0
    9528:	3928      	subs	r1, #40	; 0x28
    952a:	1209      	asrs	r1, r1, #8
    952c:	7121      	strb	r1, [r4, #4]
  UIP_IP_BUF->len[1] = ((uip_len - UIP_IPH_LEN) & 0xff);
    952e:	3a28      	subs	r2, #40	; 0x28
    9530:	7162      	strb	r2, [r4, #5]

  UIP_IP_BUF->ttl = uip_udp_conn->ttl;
    9532:	4acb      	ldr	r2, [pc, #812]	; (9860 <uip_process+0xa08>)
    9534:	6812      	ldr	r2, [r2, #0]
    9536:	7d11      	ldrb	r1, [r2, #20]
    9538:	71e1      	strb	r1, [r4, #7]
  UIP_IP_BUF->proto = UIP_PROTO_UDP;
    953a:	2111      	movs	r1, #17
    953c:	71a1      	strb	r1, [r4, #6]

  UIP_UDP_BUF->udplen = UIP_HTONS(uip_slen + UIP_UDPH_LEN);
    953e:	3308      	adds	r3, #8
    9540:	b29b      	uxth	r3, r3
    9542:	0219      	lsls	r1, r3, #8
    9544:	0a1b      	lsrs	r3, r3, #8
    9546:	430b      	orrs	r3, r1
    9548:	85a3      	strh	r3, [r4, #44]	; 0x2c
  UIP_UDP_BUF->udpchksum = 0;
    954a:	2300      	movs	r3, #0
    954c:	85e3      	strh	r3, [r4, #46]	; 0x2e

  UIP_UDP_BUF->srcport  = uip_udp_conn->lport;
    954e:	8a13      	ldrh	r3, [r2, #16]
    9550:	8523      	strh	r3, [r4, #40]	; 0x28
  UIP_UDP_BUF->destport = uip_udp_conn->rport;
    9552:	8a53      	ldrh	r3, [r2, #18]
    9554:	8563      	strh	r3, [r4, #42]	; 0x2a

  uip_ipaddr_copy(&UIP_IP_BUF->destipaddr, &uip_udp_conn->ripaddr);
    9556:	1c23      	adds	r3, r4, #0
    9558:	3318      	adds	r3, #24
    955a:	ca23      	ldmia	r2!, {r0, r1, r5}
    955c:	c323      	stmia	r3!, {r0, r1, r5}
    955e:	6812      	ldr	r2, [r2, #0]
    9560:	601a      	str	r2, [r3, #0]
  uip_ds6_select_src(&UIP_IP_BUF->srcipaddr, &UIP_IP_BUF->destipaddr);
    9562:	1c20      	adds	r0, r4, #0
    9564:	3008      	adds	r0, #8
    9566:	1c01      	adds	r1, r0, #0
    9568:	3110      	adds	r1, #16
    956a:	4bbe      	ldr	r3, [pc, #760]	; (9864 <uip_process+0xa0c>)
    956c:	4798      	blx	r3

  uip_appdata = &uip_buf[UIP_LLH_LEN + UIP_IPTCPH_LEN];
    956e:	343c      	adds	r4, #60	; 0x3c
    9570:	4bb5      	ldr	r3, [pc, #724]	; (9848 <uip_process+0x9f0>)
    9572:	601c      	str	r4, [r3, #0]

#if UIP_CONF_IPV6_RPL
  rpl_insert_header();
    9574:	4bbc      	ldr	r3, [pc, #752]	; (9868 <uip_process+0xa10>)
    9576:	4798      	blx	r3
#endif /* UIP_CONF_IPV6_RPL */

#if UIP_UDP_CHECKSUMS
  /* Calculate UDP checksum. */
  UIP_UDP_BUF->udpchksum = ~(uip_udpchksum());
    9578:	4bbc      	ldr	r3, [pc, #752]	; (986c <uip_process+0xa14>)
    957a:	4798      	blx	r3
    957c:	43c0      	mvns	r0, r0
    957e:	b280      	uxth	r0, r0
  if(UIP_UDP_BUF->udpchksum == 0) {
    9580:	2800      	cmp	r0, #0
    9582:	d003      	beq.n	958c <uip_process+0x734>
  rpl_insert_header();
#endif /* UIP_CONF_IPV6_RPL */

#if UIP_UDP_CHECKSUMS
  /* Calculate UDP checksum. */
  UIP_UDP_BUF->udpchksum = ~(uip_udpchksum());
    9584:	4bb5      	ldr	r3, [pc, #724]	; (985c <uip_process+0xa04>)
    9586:	85d8      	strh	r0, [r3, #46]	; 0x2e
    9588:	f000 fcca 	bl	9f20 <uip_process+0x10c8>
  if(UIP_UDP_BUF->udpchksum == 0) {
    UIP_UDP_BUF->udpchksum = 0xffff;
    958c:	2201      	movs	r2, #1
    958e:	4252      	negs	r2, r2
    9590:	4bb2      	ldr	r3, [pc, #712]	; (985c <uip_process+0xa04>)
    9592:	85da      	strh	r2, [r3, #46]	; 0x2e
    9594:	f000 fcc4 	bl	9f20 <uip_process+0x10c8>

#if UIP_TCP
  /* TCP input processing. */
 tcp_input:

  remove_ext_hdr();
    9598:	4bb5      	ldr	r3, [pc, #724]	; (9870 <uip_process+0xa18>)
    959a:	4798      	blx	r3

  UIP_STAT(++uip_stat.tcp.recv);
  PRINTF("Receiving TCP packet\n\r");
  /* Start of TCP input header processing code. */
  
  if(uip_tcpchksum() != 0xffff) {   /* Compute and check the TCP
    959c:	4bb5      	ldr	r3, [pc, #724]	; (9874 <uip_process+0xa1c>)
    959e:	4798      	blx	r3
    95a0:	4bb5      	ldr	r3, [pc, #724]	; (9878 <uip_process+0xa20>)
    95a2:	4298      	cmp	r0, r3
    95a4:	d001      	beq.n	95aa <uip_process+0x752>
    95a6:	f000 fcdd 	bl	9f64 <uip_process+0x110c>
           uip_tcpchksum());
    goto drop;
  }

  /* Make sure that the TCP port number is not zero. */
  if(UIP_TCP_BUF->destport == 0 || UIP_TCP_BUF->srcport == 0) {
    95aa:	4bac      	ldr	r3, [pc, #688]	; (985c <uip_process+0xa04>)
    95ac:	8d5d      	ldrh	r5, [r3, #42]	; 0x2a
    95ae:	2d00      	cmp	r5, #0
    95b0:	d101      	bne.n	95b6 <uip_process+0x75e>
    95b2:	f000 fcd7 	bl	9f64 <uip_process+0x110c>
    95b6:	8d1e      	ldrh	r6, [r3, #40]	; 0x28
    95b8:	2e00      	cmp	r6, #0
    95ba:	d101      	bne.n	95c0 <uip_process+0x768>
    95bc:	f000 fcd2 	bl	9f64 <uip_process+0x110c>
    95c0:	4cae      	ldr	r4, [pc, #696]	; (987c <uip_process+0xa24>)
    95c2:	1c23      	adds	r3, r4, #0
    95c4:	3325      	adds	r3, #37	; 0x25

  /* Demultiplex this segment. */
  /* First check any active connections. */
  for(uip_connr = &uip_conns[0]; uip_connr <= &uip_conns[UIP_CONNS - 1];
      ++uip_connr) {
    if(uip_connr->tcpstateflags != UIP_CLOSED &&
    95c6:	781f      	ldrb	r7, [r3, #0]
    95c8:	2f00      	cmp	r7, #0
    95ca:	d00d      	beq.n	95e8 <uip_process+0x790>
    95cc:	8a23      	ldrh	r3, [r4, #16]
    95ce:	42ab      	cmp	r3, r5
    95d0:	d10a      	bne.n	95e8 <uip_process+0x790>
       UIP_TCP_BUF->destport == uip_connr->lport &&
    95d2:	8a63      	ldrh	r3, [r4, #18]
    95d4:	42b3      	cmp	r3, r6
    95d6:	d107      	bne.n	95e8 <uip_process+0x790>
       UIP_TCP_BUF->srcport == uip_connr->rport &&
       uip_ipaddr_cmp(&UIP_IP_BUF->srcipaddr, &uip_connr->ripaddr)) {
    95d8:	48a9      	ldr	r0, [pc, #676]	; (9880 <uip_process+0xa28>)
    95da:	1c21      	adds	r1, r4, #0
    95dc:	2210      	movs	r2, #16
    95de:	4ba9      	ldr	r3, [pc, #676]	; (9884 <uip_process+0xa2c>)
    95e0:	4798      	blx	r3
  /* First check any active connections. */
  for(uip_connr = &uip_conns[0]; uip_connr <= &uip_conns[UIP_CONNS - 1];
      ++uip_connr) {
    if(uip_connr->tcpstateflags != UIP_CLOSED &&
       UIP_TCP_BUF->destport == uip_connr->lport &&
       UIP_TCP_BUF->srcport == uip_connr->rport &&
    95e2:	2800      	cmp	r0, #0
    95e4:	d100      	bne.n	95e8 <uip_process+0x790>
    95e6:	e188      	b.n	98fa <uip_process+0xaa2>
  }

  /* Demultiplex this segment. */
  /* First check any active connections. */
  for(uip_connr = &uip_conns[0]; uip_connr <= &uip_conns[UIP_CONNS - 1];
      ++uip_connr) {
    95e8:	3430      	adds	r4, #48	; 0x30
    goto drop;
  }

  /* Demultiplex this segment. */
  /* First check any active connections. */
  for(uip_connr = &uip_conns[0]; uip_connr <= &uip_conns[UIP_CONNS - 1];
    95ea:	4ba7      	ldr	r3, [pc, #668]	; (9888 <uip_process+0xa30>)
    95ec:	429c      	cmp	r4, r3
    95ee:	d1e8      	bne.n	95c2 <uip_process+0x76a>

  /* If we didn't find and active connection that expected the packet,
     either this packet is an old duplicate, or this is a SYN packet
     destined for a connection in LISTEN. If the SYN flag isn't set,
     it is an old packet and we send a RST. */
  if((UIP_TCP_BUF->flags & TCP_CTL) != TCP_SYN) {
    95f0:	2335      	movs	r3, #53	; 0x35
    95f2:	4a9a      	ldr	r2, [pc, #616]	; (985c <uip_process+0xa04>)
    95f4:	5cd2      	ldrb	r2, [r2, r3]
    95f6:	330a      	adds	r3, #10
    95f8:	4013      	ands	r3, r2
    95fa:	2b02      	cmp	r3, #2
    95fc:	d10f      	bne.n	961e <uip_process+0x7c6>
    goto reset;
  }
  
  tmp16 = UIP_TCP_BUF->destport;
    95fe:	4ba3      	ldr	r3, [pc, #652]	; (988c <uip_process+0xa34>)
    9600:	801d      	strh	r5, [r3, #0]
  /* Next, check listening connections. */
  for(c = 0; c < UIP_LISTENPORTS; ++c) {
    9602:	2300      	movs	r3, #0
    9604:	4aa2      	ldr	r2, [pc, #648]	; (9890 <uip_process+0xa38>)
    9606:	7013      	strb	r3, [r2, #0]
    if(tmp16 == uip_listenports[c]) {
    9608:	4aa2      	ldr	r2, [pc, #648]	; (9894 <uip_process+0xa3c>)
    960a:	0059      	lsls	r1, r3, #1
    960c:	5a89      	ldrh	r1, [r1, r2]
    960e:	42a9      	cmp	r1, r5
    9610:	d059      	beq.n	96c6 <uip_process+0x86e>
    goto reset;
  }
  
  tmp16 = UIP_TCP_BUF->destport;
  /* Next, check listening connections. */
  for(c = 0; c < UIP_LISTENPORTS; ++c) {
    9612:	3301      	adds	r3, #1
    9614:	b2db      	uxtb	r3, r3
    9616:	2b13      	cmp	r3, #19
    9618:	d9f7      	bls.n	960a <uip_process+0x7b2>
    961a:	4a9d      	ldr	r2, [pc, #628]	; (9890 <uip_process+0xa38>)
    961c:	7013      	strb	r3, [r2, #0]
  UIP_STAT(++uip_stat.tcp.synrst);

 reset:
  PRINTF("In reset\n\r");
  /* We do not send resets in response to resets. */
  if(UIP_TCP_BUF->flags & TCP_RST) {
    961e:	2335      	movs	r3, #53	; 0x35
    9620:	4a8e      	ldr	r2, [pc, #568]	; (985c <uip_process+0xa04>)
    9622:	5cd3      	ldrb	r3, [r2, r3]
    9624:	075b      	lsls	r3, r3, #29
    9626:	d501      	bpl.n	962c <uip_process+0x7d4>
    9628:	f000 fc9c 	bl	9f64 <uip_process+0x110c>
    goto drop;
  }

  UIP_STAT(++uip_stat.tcp.rst);
  
  UIP_TCP_BUF->flags = TCP_RST | TCP_ACK;
    962c:	1c13      	adds	r3, r2, #0
    962e:	2114      	movs	r1, #20
    9630:	2235      	movs	r2, #53	; 0x35
    9632:	5499      	strb	r1, [r3, r2]
  uip_len = UIP_IPTCPH_LEN;
    9634:	3128      	adds	r1, #40	; 0x28
    9636:	4a88      	ldr	r2, [pc, #544]	; (9858 <uip_process+0xa00>)
    9638:	8011      	strh	r1, [r2, #0]
  UIP_TCP_BUF->tcpoffset = 5 << 4;
    963a:	3114      	adds	r1, #20
    963c:	2234      	movs	r2, #52	; 0x34
    963e:	5499      	strb	r1, [r3, r2]

  /* Flip the seqno and ackno fields in the TCP header. */
  c = UIP_TCP_BUF->seqno[3];
    9640:	3a05      	subs	r2, #5
    9642:	5c99      	ldrb	r1, [r3, r2]
    9644:	4688      	mov	r8, r1
  UIP_TCP_BUF->seqno[3] = UIP_TCP_BUF->ackno[3];
    9646:	2533      	movs	r5, #51	; 0x33
    9648:	5d58      	ldrb	r0, [r3, r5]
    964a:	5498      	strb	r0, [r3, r2]
  UIP_TCP_BUF->ackno[3] = c;
  
  c = UIP_TCP_BUF->seqno[2];
    964c:	242e      	movs	r4, #46	; 0x2e
    964e:	5d1a      	ldrb	r2, [r3, r4]
  UIP_TCP_BUF->seqno[2] = UIP_TCP_BUF->ackno[2];
    9650:	2032      	movs	r0, #50	; 0x32
    9652:	5c1e      	ldrb	r6, [r3, r0]
    9654:	551e      	strb	r6, [r3, r4]
  UIP_TCP_BUF->ackno[2] = c;
    9656:	541a      	strb	r2, [r3, r0]
  
  c = UIP_TCP_BUF->seqno[1];
    9658:	262d      	movs	r6, #45	; 0x2d
    965a:	5d98      	ldrb	r0, [r3, r6]
  UIP_TCP_BUF->seqno[1] = UIP_TCP_BUF->ackno[1];
    965c:	3403      	adds	r4, #3
    965e:	5d1f      	ldrb	r7, [r3, r4]
    9660:	559f      	strb	r7, [r3, r6]
  UIP_TCP_BUF->ackno[1] = c;
    9662:	5518      	strb	r0, [r3, r4]
  
  c = UIP_TCP_BUF->seqno[0];
    9664:	272c      	movs	r7, #44	; 0x2c
    9666:	5ddc      	ldrb	r4, [r3, r7]
    9668:	4e89      	ldr	r6, [pc, #548]	; (9890 <uip_process+0xa38>)
    966a:	7034      	strb	r4, [r6, #0]
  UIP_TCP_BUF->seqno[0] = UIP_TCP_BUF->ackno[0];
    966c:	2630      	movs	r6, #48	; 0x30
    966e:	5d99      	ldrb	r1, [r3, r6]
    9670:	55d9      	strb	r1, [r3, r7]
  UIP_TCP_BUF->ackno[0] = c;
    9672:	559c      	strb	r4, [r3, r6]

  /* We also have to increase the sequence number we are
     acknowledging. If the least significant byte overflowed, we need
     to propagate the carry to the other bytes as well. */
  if(++UIP_TCP_BUF->ackno[3] == 0) {
    9674:	4641      	mov	r1, r8
    9676:	3101      	adds	r1, #1
    9678:	b2c9      	uxtb	r1, r1
    967a:	5559      	strb	r1, [r3, r5]
    967c:	2900      	cmp	r1, #0
    967e:	d10e      	bne.n	969e <uip_process+0x846>
    if(++UIP_TCP_BUF->ackno[2] == 0) {
    9680:	3201      	adds	r2, #1
    9682:	b2d2      	uxtb	r2, r2
    9684:	2332      	movs	r3, #50	; 0x32
    9686:	4975      	ldr	r1, [pc, #468]	; (985c <uip_process+0xa04>)
    9688:	54ca      	strb	r2, [r1, r3]
    968a:	2a00      	cmp	r2, #0
    968c:	d107      	bne.n	969e <uip_process+0x846>
      if(++UIP_TCP_BUF->ackno[1] == 0) {
    968e:	1c43      	adds	r3, r0, #1
    9690:	b2db      	uxtb	r3, r3
    9692:	3231      	adds	r2, #49	; 0x31
    9694:	548b      	strb	r3, [r1, r2]
    9696:	2b00      	cmp	r3, #0
    9698:	d101      	bne.n	969e <uip_process+0x846>
        ++UIP_TCP_BUF->ackno[0];
    969a:	1c63      	adds	r3, r4, #1
    969c:	558b      	strb	r3, [r1, r6]
      }
    }
  }
 
  /* Swap port numbers. */
  tmp16 = UIP_TCP_BUF->srcport;
    969e:	4b6f      	ldr	r3, [pc, #444]	; (985c <uip_process+0xa04>)
    96a0:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
    96a2:	497a      	ldr	r1, [pc, #488]	; (988c <uip_process+0xa34>)
    96a4:	800a      	strh	r2, [r1, #0]
  UIP_TCP_BUF->srcport = UIP_TCP_BUF->destport;
    96a6:	8d59      	ldrh	r1, [r3, #42]	; 0x2a
    96a8:	8519      	strh	r1, [r3, #40]	; 0x28
  UIP_TCP_BUF->destport = tmp16;
    96aa:	855a      	strh	r2, [r3, #42]	; 0x2a
  
  /* Swap IP addresses. */
  uip_ipaddr_copy(&UIP_IP_BUF->destipaddr, &UIP_IP_BUF->srcipaddr);
    96ac:	1c1a      	adds	r2, r3, #0
    96ae:	3218      	adds	r2, #24
    96b0:	3308      	adds	r3, #8
    96b2:	cb13      	ldmia	r3!, {r0, r1, r4}
    96b4:	c213      	stmia	r2!, {r0, r1, r4}
    96b6:	681b      	ldr	r3, [r3, #0]
    96b8:	6013      	str	r3, [r2, #0]
  uip_ds6_select_src(&UIP_IP_BUF->srcipaddr, &UIP_IP_BUF->destipaddr);
    96ba:	4871      	ldr	r0, [pc, #452]	; (9880 <uip_process+0xa28>)
    96bc:	4976      	ldr	r1, [pc, #472]	; (9898 <uip_process+0xa40>)
    96be:	4b69      	ldr	r3, [pc, #420]	; (9864 <uip_process+0xa0c>)
    96c0:	4798      	blx	r3
  /* And send out the RST packet! */
  goto tcp_send_noconn;
    96c2:	f000 fc17 	bl	9ef4 <uip_process+0x109c>
     unused ones have the tcpstate set to CLOSED. Also, connections in
     TIME_WAIT are kept track of and we'll use the oldest one if no
     CLOSED connections are found. Thanks to Eddie C. Dost for a very
     nice algorithm for the TIME_WAIT search. */
  uip_connr = 0;
  for(c = 0; c < UIP_CONNS; ++c) {
    96c6:	2400      	movs	r4, #0
    96c8:	4b71      	ldr	r3, [pc, #452]	; (9890 <uip_process+0xa38>)
    96ca:	701c      	strb	r4, [r3, #0]
    96cc:	1c23      	adds	r3, r4, #0
    if(uip_conns[c].tcpstateflags == UIP_CLOSED) {
    96ce:	4a6b      	ldr	r2, [pc, #428]	; (987c <uip_process+0xa24>)
    96d0:	4691      	mov	r9, r2
    96d2:	2030      	movs	r0, #48	; 0x30
      uip_connr = &uip_conns[c];
      break;
    }
    if(uip_conns[c].tcpstateflags == UIP_TIME_WAIT) {
      if(uip_connr == 0 ||
         uip_conns[c].timer > uip_connr->timer) {
    96d4:	2226      	movs	r2, #38	; 0x26
    96d6:	4690      	mov	r8, r2
     TIME_WAIT are kept track of and we'll use the oldest one if no
     CLOSED connections are found. Thanks to Eddie C. Dost for a very
     nice algorithm for the TIME_WAIT search. */
  uip_connr = 0;
  for(c = 0; c < UIP_CONNS; ++c) {
    if(uip_conns[c].tcpstateflags == UIP_CLOSED) {
    96d8:	1c1a      	adds	r2, r3, #0
    96da:	1c01      	adds	r1, r0, #0
    96dc:	4359      	muls	r1, r3
    96de:	4449      	add	r1, r9
    96e0:	3120      	adds	r1, #32
    96e2:	7949      	ldrb	r1, [r1, #5]
    96e4:	2900      	cmp	r1, #0
    96e6:	d106      	bne.n	96f6 <uip_process+0x89e>
    96e8:	4969      	ldr	r1, [pc, #420]	; (9890 <uip_process+0xa38>)
    96ea:	700b      	strb	r3, [r1, #0]
      uip_connr = &uip_conns[c];
    96ec:	2430      	movs	r4, #48	; 0x30
    96ee:	4362      	muls	r2, r4
    96f0:	4c62      	ldr	r4, [pc, #392]	; (987c <uip_process+0xa24>)
    96f2:	1914      	adds	r4, r2, r4
      break;
    96f4:	e01a      	b.n	972c <uip_process+0x8d4>
    }
    if(uip_conns[c].tcpstateflags == UIP_TIME_WAIT) {
    96f6:	2907      	cmp	r1, #7
    96f8:	d112      	bne.n	9720 <uip_process+0x8c8>
      if(uip_connr == 0 ||
    96fa:	2c00      	cmp	r4, #0
    96fc:	d00b      	beq.n	9716 <uip_process+0x8be>
         uip_conns[c].timer > uip_connr->timer) {
    96fe:	1c01      	adds	r1, r0, #0
    9700:	4359      	muls	r1, r3
    9702:	4f5e      	ldr	r7, [pc, #376]	; (987c <uip_process+0xa24>)
    9704:	46bc      	mov	ip, r7
    9706:	4461      	add	r1, ip
    9708:	3120      	adds	r1, #32
    if(uip_conns[c].tcpstateflags == UIP_CLOSED) {
      uip_connr = &uip_conns[c];
      break;
    }
    if(uip_conns[c].tcpstateflags == UIP_TIME_WAIT) {
      if(uip_connr == 0 ||
    970a:	7989      	ldrb	r1, [r1, #6]
    970c:	468c      	mov	ip, r1
    970e:	4641      	mov	r1, r8
    9710:	5c61      	ldrb	r1, [r4, r1]
    9712:	458c      	cmp	ip, r1
    9714:	d904      	bls.n	9720 <uip_process+0x8c8>
         uip_conns[c].timer > uip_connr->timer) {
        uip_connr = &uip_conns[c];
    9716:	4342      	muls	r2, r0
    9718:	1c14      	adds	r4, r2, #0
    971a:	4a58      	ldr	r2, [pc, #352]	; (987c <uip_process+0xa24>)
    971c:	4694      	mov	ip, r2
    971e:	4464      	add	r4, ip
     unused ones have the tcpstate set to CLOSED. Also, connections in
     TIME_WAIT are kept track of and we'll use the oldest one if no
     CLOSED connections are found. Thanks to Eddie C. Dost for a very
     nice algorithm for the TIME_WAIT search. */
  uip_connr = 0;
  for(c = 0; c < UIP_CONNS; ++c) {
    9720:	3301      	adds	r3, #1
    9722:	b2db      	uxtb	r3, r3
    9724:	2b09      	cmp	r3, #9
    9726:	d9d7      	bls.n	96d8 <uip_process+0x880>
    9728:	4a59      	ldr	r2, [pc, #356]	; (9890 <uip_process+0xa38>)
    972a:	7013      	strb	r3, [r2, #0]
        uip_connr = &uip_conns[c];
      }
    }
  }

  if(uip_connr == 0) {
    972c:	2c00      	cmp	r4, #0
    972e:	d101      	bne.n	9734 <uip_process+0x8dc>
    9730:	f000 fc18 	bl	9f64 <uip_process+0x110c>
       have more spare connections. */
    UIP_STAT(++uip_stat.tcp.syndrop);
    UIP_LOG("tcp: found no unused connections.");
    goto drop;
  }
  uip_conn = uip_connr;
    9734:	4b41      	ldr	r3, [pc, #260]	; (983c <uip_process+0x9e4>)
    9736:	601c      	str	r4, [r3, #0]
  
  /* Fill in the necessary fields for the new connection. */
  uip_connr->rto = uip_connr->timer = UIP_RTO;
    9738:	2303      	movs	r3, #3
    973a:	2226      	movs	r2, #38	; 0x26
    973c:	54a3      	strb	r3, [r4, r2]
    973e:	3a02      	subs	r2, #2
    9740:	54a3      	strb	r3, [r4, r2]
  uip_connr->sa = 0;
    9742:	2300      	movs	r3, #0
    9744:	3a02      	subs	r2, #2
    9746:	54a3      	strb	r3, [r4, r2]
  uip_connr->sv = 4;
    9748:	2104      	movs	r1, #4
    974a:	3201      	adds	r2, #1
    974c:	54a1      	strb	r1, [r4, r2]
  uip_connr->nrtx = 0;
    974e:	3204      	adds	r2, #4
    9750:	54a3      	strb	r3, [r4, r2]
  uip_connr->lport = UIP_TCP_BUF->destport;
    9752:	8225      	strh	r5, [r4, #16]
  uip_connr->rport = UIP_TCP_BUF->srcport;
    9754:	8266      	strh	r6, [r4, #18]
  uip_ipaddr_copy(&uip_connr->ripaddr, &UIP_IP_BUF->srcipaddr);
    9756:	4d41      	ldr	r5, [pc, #260]	; (985c <uip_process+0xa04>)
    9758:	1c2b      	adds	r3, r5, #0
    975a:	3308      	adds	r3, #8
    975c:	1c22      	adds	r2, r4, #0
    975e:	cb43      	ldmia	r3!, {r0, r1, r6}
    9760:	c243      	stmia	r2!, {r0, r1, r6}
    9762:	681b      	ldr	r3, [r3, #0]
    9764:	6013      	str	r3, [r2, #0]
  uip_connr->tcpstateflags = UIP_SYN_RCVD;
    9766:	2001      	movs	r0, #1
    9768:	2325      	movs	r3, #37	; 0x25
    976a:	54e0      	strb	r0, [r4, r3]

  uip_connr->snd_nxt[0] = iss[0];
    976c:	4b4b      	ldr	r3, [pc, #300]	; (989c <uip_process+0xa44>)
    976e:	781a      	ldrb	r2, [r3, #0]
    9770:	7622      	strb	r2, [r4, #24]
  uip_connr->snd_nxt[1] = iss[1];
    9772:	785a      	ldrb	r2, [r3, #1]
    9774:	7662      	strb	r2, [r4, #25]
  uip_connr->snd_nxt[2] = iss[2];
    9776:	789a      	ldrb	r2, [r3, #2]
    9778:	76a2      	strb	r2, [r4, #26]
  uip_connr->snd_nxt[3] = iss[3];
    977a:	78db      	ldrb	r3, [r3, #3]
    977c:	76e3      	strb	r3, [r4, #27]
  uip_connr->len = 1;
    977e:	83a0      	strh	r0, [r4, #28]

  /* rcv_nxt should be the seqno from the incoming packet + 1. */
  uip_connr->rcv_nxt[3] = UIP_TCP_BUF->seqno[3];
    9780:	232f      	movs	r3, #47	; 0x2f
    9782:	5ceb      	ldrb	r3, [r5, r3]
    9784:	75e3      	strb	r3, [r4, #23]
  uip_connr->rcv_nxt[2] = UIP_TCP_BUF->seqno[2];
    9786:	232e      	movs	r3, #46	; 0x2e
    9788:	5ceb      	ldrb	r3, [r5, r3]
    978a:	75a3      	strb	r3, [r4, #22]
  uip_connr->rcv_nxt[1] = UIP_TCP_BUF->seqno[1];
    978c:	232d      	movs	r3, #45	; 0x2d
    978e:	5ceb      	ldrb	r3, [r5, r3]
    9790:	7563      	strb	r3, [r4, #21]
  uip_connr->rcv_nxt[0] = UIP_TCP_BUF->seqno[0];
    9792:	232c      	movs	r3, #44	; 0x2c
    9794:	5ceb      	ldrb	r3, [r5, r3]
    9796:	7523      	strb	r3, [r4, #20]
  uip_add_rcv_nxt(1);
    9798:	4b41      	ldr	r3, [pc, #260]	; (98a0 <uip_process+0xa48>)
    979a:	4798      	blx	r3

  /* Parse the TCP MSS option, if present. */
  if((UIP_TCP_BUF->tcpoffset & 0xf0) > 0x50) {
    979c:	2334      	movs	r3, #52	; 0x34
    979e:	5cea      	ldrb	r2, [r5, r3]
    97a0:	3b25      	subs	r3, #37	; 0x25
    97a2:	1c11      	adds	r1, r2, #0
    97a4:	4399      	bics	r1, r3
    97a6:	2950      	cmp	r1, #80	; 0x50
    97a8:	dc00      	bgt.n	97ac <uip_process+0x954>
    97aa:	e089      	b.n	98c0 <uip_process+0xa68>
    for(c = 0; c < ((UIP_TCP_BUF->tcpoffset >> 4) - 5) << 2 ;) {
    97ac:	2300      	movs	r3, #0
    97ae:	4938      	ldr	r1, [pc, #224]	; (9890 <uip_process+0xa38>)
    97b0:	700b      	strb	r3, [r1, #0]
    97b2:	0912      	lsrs	r2, r2, #4
    97b4:	3a05      	subs	r2, #5
    97b6:	0090      	lsls	r0, r2, #2
    97b8:	4a3a      	ldr	r2, [pc, #232]	; (98a4 <uip_process+0xa4c>)
    97ba:	7815      	ldrb	r5, [r2, #0]
    97bc:	e078      	b.n	98b0 <uip_process+0xa58>
      opt = uip_buf[UIP_TCPIP_HLEN + UIP_LLH_LEN + c];
    97be:	4927      	ldr	r1, [pc, #156]	; (985c <uip_process+0xa04>)
    97c0:	18c9      	adds	r1, r1, r3
    97c2:	313c      	adds	r1, #60	; 0x3c
    97c4:	780d      	ldrb	r5, [r1, #0]
      if(opt == TCP_OPT_END) {
    97c6:	2d00      	cmp	r5, #0
    97c8:	d105      	bne.n	97d6 <uip_process+0x97e>
    97ca:	4a31      	ldr	r2, [pc, #196]	; (9890 <uip_process+0xa38>)
    97cc:	7013      	strb	r3, [r2, #0]
    97ce:	2200      	movs	r2, #0
    97d0:	4b34      	ldr	r3, [pc, #208]	; (98a4 <uip_process+0xa4c>)
    97d2:	701a      	strb	r2, [r3, #0]
    97d4:	e074      	b.n	98c0 <uip_process+0xa68>
        /* End of options. */
        break;
      } else if(opt == TCP_OPT_NOOP) {
    97d6:	2d01      	cmp	r5, #1
    97d8:	d102      	bne.n	97e0 <uip_process+0x988>
        ++c;
    97da:	3301      	adds	r3, #1
    97dc:	b2db      	uxtb	r3, r3
    97de:	e067      	b.n	98b0 <uip_process+0xa58>
        /* NOP option. */
      } else if(opt == TCP_OPT_MSS &&
    97e0:	2d02      	cmp	r5, #2
    97e2:	d11f      	bne.n	9824 <uip_process+0x9cc>
                uip_buf[UIP_TCPIP_HLEN + UIP_LLH_LEN + 1 + c] == TCP_OPT_MSS_LEN) {
    97e4:	491d      	ldr	r1, [pc, #116]	; (985c <uip_process+0xa04>)
    97e6:	1889      	adds	r1, r1, r2
    97e8:	313d      	adds	r1, #61	; 0x3d
        /* End of options. */
        break;
      } else if(opt == TCP_OPT_NOOP) {
        ++c;
        /* NOP option. */
      } else if(opt == TCP_OPT_MSS &&
    97ea:	7809      	ldrb	r1, [r1, #0]
    97ec:	2904      	cmp	r1, #4
    97ee:	d119      	bne.n	9824 <uip_process+0x9cc>
    97f0:	4927      	ldr	r1, [pc, #156]	; (9890 <uip_process+0xa38>)
    97f2:	700b      	strb	r3, [r1, #0]
    97f4:	2102      	movs	r1, #2
    97f6:	4b2b      	ldr	r3, [pc, #172]	; (98a4 <uip_process+0xa4c>)
    97f8:	7019      	strb	r1, [r3, #0]
                uip_buf[UIP_TCPIP_HLEN + UIP_LLH_LEN + 1 + c] == TCP_OPT_MSS_LEN) {
        /* An MSS option with the right option length. */
        tmp16 = ((uint16_t)uip_buf[UIP_TCPIP_HLEN + UIP_LLH_LEN + 2 + c] << 8) |
    97fa:	4b18      	ldr	r3, [pc, #96]	; (985c <uip_process+0xa04>)
    97fc:	189a      	adds	r2, r3, r2
    97fe:	1c13      	adds	r3, r2, #0
    9800:	333e      	adds	r3, #62	; 0x3e
    9802:	781b      	ldrb	r3, [r3, #0]
    9804:	021b      	lsls	r3, r3, #8
          (uint16_t)uip_buf[UIP_IPTCPH_LEN + UIP_LLH_LEN + 3 + c];
    9806:	323f      	adds	r2, #63	; 0x3f
        ++c;
        /* NOP option. */
      } else if(opt == TCP_OPT_MSS &&
                uip_buf[UIP_TCPIP_HLEN + UIP_LLH_LEN + 1 + c] == TCP_OPT_MSS_LEN) {
        /* An MSS option with the right option length. */
        tmp16 = ((uint16_t)uip_buf[UIP_TCPIP_HLEN + UIP_LLH_LEN + 2 + c] << 8) |
    9808:	7812      	ldrb	r2, [r2, #0]
    980a:	4313      	orrs	r3, r2
    980c:	4a1f      	ldr	r2, [pc, #124]	; (988c <uip_process+0xa34>)
    980e:	8013      	strh	r3, [r2, #0]
          (uint16_t)uip_buf[UIP_IPTCPH_LEN + UIP_LLH_LEN + 3 + c];
        uip_connr->initialmss = uip_connr->mss =
    9810:	1c1a      	adds	r2, r3, #0
    9812:	3153      	adds	r1, #83	; 0x53
    9814:	31ff      	adds	r1, #255	; 0xff
    9816:	428b      	cmp	r3, r1
    9818:	d901      	bls.n	981e <uip_process+0x9c6>
    981a:	4b23      	ldr	r3, [pc, #140]	; (98a8 <uip_process+0xa50>)
    981c:	881a      	ldrh	r2, [r3, #0]
    981e:	83e2      	strh	r2, [r4, #30]
    9820:	8422      	strh	r2, [r4, #32]
          tmp16 > UIP_TCP_MSS? UIP_TCP_MSS: tmp16;
   
        /* And we are done processing options. */
        break;
    9822:	e04d      	b.n	98c0 <uip_process+0xa68>
      } else {
        /* All other options have a length field, so that we easily
           can skip past them. */
        if(uip_buf[UIP_TCPIP_HLEN + UIP_LLH_LEN + 1 + c] == 0) {
    9824:	490d      	ldr	r1, [pc, #52]	; (985c <uip_process+0xa04>)
    9826:	1889      	adds	r1, r1, r2
    9828:	313d      	adds	r1, #61	; 0x3d
    982a:	7809      	ldrb	r1, [r1, #0]
    982c:	2900      	cmp	r1, #0
    982e:	d13d      	bne.n	98ac <uip_process+0xa54>
    9830:	4a17      	ldr	r2, [pc, #92]	; (9890 <uip_process+0xa38>)
    9832:	7013      	strb	r3, [r2, #0]
    9834:	4b1b      	ldr	r3, [pc, #108]	; (98a4 <uip_process+0xa4c>)
    9836:	701d      	strb	r5, [r3, #0]
    9838:	e042      	b.n	98c0 <uip_process+0xa68>
    983a:	46c0      	nop			; (mov r8, r8)
    983c:	20002e74 	.word	0x20002e74
    9840:	20002e64 	.word	0x20002e64
    9844:	20002d04 	.word	0x20002d04
    9848:	20002e70 	.word	0x20002e70
    984c:	20002cc4 	.word	0x20002cc4
    9850:	20003088 	.word	0x20003088
    9854:	0000aa69 	.word	0x0000aa69
    9858:	20002cc0 	.word	0x20002cc0
    985c:	20002cd4 	.word	0x20002cd4
    9860:	20002e6c 	.word	0x20002e6c
    9864:	0000770d 	.word	0x0000770d
    9868:	0000d465 	.word	0x0000d465
    986c:	00008bf1 	.word	0x00008bf1
    9870:	00008da1 	.word	0x00008da1
    9874:	00008be1 	.word	0x00008be1
    9878:	0000ffff 	.word	0x0000ffff
    987c:	20002e78 	.word	0x20002e78
    9880:	20002cdc 	.word	0x20002cdc
    9884:	000108c9 	.word	0x000108c9
    9888:	20003058 	.word	0x20003058
    988c:	20000b10 	.word	0x20000b10
    9890:	20000b1c 	.word	0x20000b1c
    9894:	20003060 	.word	0x20003060
    9898:	20002cec 	.word	0x20002cec
    989c:	20000b14 	.word	0x20000b14
    98a0:	00008ba1 	.word	0x00008ba1
    98a4:	20000b1d 	.word	0x20000b1d
    98a8:	000129e4 	.word	0x000129e4
          /* If the length field is zero, the options are malformed
             and we don't process them further. */
          break;
        }
        c += uip_buf[UIP_TCPIP_HLEN + UIP_LLH_LEN + 1 + c];
    98ac:	18cb      	adds	r3, r1, r3
    98ae:	b2db      	uxtb	r3, r3
  uip_connr->rcv_nxt[0] = UIP_TCP_BUF->seqno[0];
  uip_add_rcv_nxt(1);

  /* Parse the TCP MSS option, if present. */
  if((UIP_TCP_BUF->tcpoffset & 0xf0) > 0x50) {
    for(c = 0; c < ((UIP_TCP_BUF->tcpoffset >> 4) - 5) << 2 ;) {
    98b0:	1e1a      	subs	r2, r3, #0
    98b2:	4282      	cmp	r2, r0
    98b4:	da00      	bge.n	98b8 <uip_process+0xa60>
    98b6:	e782      	b.n	97be <uip_process+0x966>
    98b8:	4ac4      	ldr	r2, [pc, #784]	; (9bcc <uip_process+0xd74>)
    98ba:	7013      	strb	r3, [r2, #0]
    98bc:	4bc4      	ldr	r3, [pc, #784]	; (9bd0 <uip_process+0xd78>)
    98be:	701d      	strb	r5, [r3, #0]
  }
  
  /* Our response will be a SYNACK. */
#if UIP_ACTIVE_OPEN
 tcp_send_synack:
  UIP_TCP_BUF->flags = TCP_ACK;
    98c0:	2110      	movs	r1, #16
    98c2:	2335      	movs	r3, #53	; 0x35
    98c4:	4ac3      	ldr	r2, [pc, #780]	; (9bd4 <uip_process+0xd7c>)
    98c6:	54d1      	strb	r1, [r2, r3]
  
 tcp_send_syn:
  UIP_TCP_BUF->flags |= TCP_SYN;
    98c8:	4bc2      	ldr	r3, [pc, #776]	; (9bd4 <uip_process+0xd7c>)
    98ca:	2135      	movs	r1, #53	; 0x35
    98cc:	5c58      	ldrb	r0, [r3, r1]
    98ce:	2202      	movs	r2, #2
    98d0:	4302      	orrs	r2, r0
    98d2:	545a      	strb	r2, [r3, r1]
  UIP_TCP_BUF->flags = TCP_SYN | TCP_ACK;
#endif /* UIP_ACTIVE_OPEN */
  
  /* We send out the TCP Maximum Segment Size option with our
     SYNACK. */
  UIP_TCP_BUF->optdata[0] = TCP_OPT_MSS;
    98d4:	223c      	movs	r2, #60	; 0x3c
    98d6:	3933      	subs	r1, #51	; 0x33
    98d8:	5499      	strb	r1, [r3, r2]
  UIP_TCP_BUF->optdata[1] = TCP_OPT_MSS_LEN;
    98da:	3102      	adds	r1, #2
    98dc:	3201      	adds	r2, #1
    98de:	5499      	strb	r1, [r3, r2]
  UIP_TCP_BUF->optdata[2] = (UIP_TCP_MSS) / 256;
    98e0:	3903      	subs	r1, #3
    98e2:	3201      	adds	r2, #1
    98e4:	5499      	strb	r1, [r3, r2]
  UIP_TCP_BUF->optdata[3] = (UIP_TCP_MSS) & 255;
    98e6:	3153      	adds	r1, #83	; 0x53
    98e8:	3201      	adds	r2, #1
    98ea:	5499      	strb	r1, [r3, r2]
  uip_len = UIP_IPTCPH_LEN + TCP_OPT_MSS_LEN;
    98ec:	3914      	subs	r1, #20
    98ee:	4aba      	ldr	r2, [pc, #744]	; (9bd8 <uip_process+0xd80>)
    98f0:	8011      	strh	r1, [r2, #0]
  UIP_TCP_BUF->tcpoffset = ((UIP_TCPH_LEN + TCP_OPT_MSS_LEN) / 4) << 4;
    98f2:	3120      	adds	r1, #32
    98f4:	2234      	movs	r2, #52	; 0x34
    98f6:	5499      	strb	r1, [r3, r2]
  goto tcp_send;
    98f8:	e2bf      	b.n	9e7a <uip_process+0x1022>
    98fa:	1c25      	adds	r5, r4, #0

  /* This label will be jumped to if we found an active connection. */
 found:
  PRINTF("In found\n\r");
  uip_conn = uip_connr;
    98fc:	4bb7      	ldr	r3, [pc, #732]	; (9bdc <uip_process+0xd84>)
    98fe:	601c      	str	r4, [r3, #0]
  uip_flags = 0;
    9900:	2200      	movs	r2, #0
    9902:	4bb7      	ldr	r3, [pc, #732]	; (9be0 <uip_process+0xd88>)
    9904:	701a      	strb	r2, [r3, #0]
  /* We do a very naive form of TCP reset processing; we just accept
     any RST and kill our connection. We should in fact check if the
     sequence number of this reset is wihtin our advertised window
     before we accept the reset. */
  if(UIP_TCP_BUF->flags & TCP_RST) {
    9906:	2335      	movs	r3, #53	; 0x35
    9908:	4ab2      	ldr	r2, [pc, #712]	; (9bd4 <uip_process+0xd7c>)
    990a:	5cd1      	ldrb	r1, [r2, r3]
    990c:	2604      	movs	r6, #4
    990e:	400e      	ands	r6, r1
    9910:	d008      	beq.n	9924 <uip_process+0xacc>
    uip_connr->tcpstateflags = UIP_CLOSED;
    9912:	2200      	movs	r2, #0
    9914:	3b10      	subs	r3, #16
    9916:	54e2      	strb	r2, [r4, r3]
    UIP_LOG("tcp: got reset, aborting connection.");
    uip_flags = UIP_ABORT;
    9918:	3220      	adds	r2, #32
    991a:	4bb1      	ldr	r3, [pc, #708]	; (9be0 <uip_process+0xd88>)
    991c:	701a      	strb	r2, [r3, #0]
    UIP_APPCALL();
    991e:	4bb1      	ldr	r3, [pc, #708]	; (9be4 <uip_process+0xd8c>)
    9920:	4798      	blx	r3
    goto drop;
    9922:	e31f      	b.n	9f64 <uip_process+0x110c>
  }
  /* Calculate the length of the data, if the application has sent
     any data to us. */
  c = (UIP_TCP_BUF->tcpoffset >> 4) << 2;
    9924:	2334      	movs	r3, #52	; 0x34
    9926:	4aab      	ldr	r2, [pc, #684]	; (9bd4 <uip_process+0xd7c>)
    9928:	5cd3      	ldrb	r3, [r2, r3]
    992a:	091b      	lsrs	r3, r3, #4
    992c:	009a      	lsls	r2, r3, #2
    992e:	4ba7      	ldr	r3, [pc, #668]	; (9bcc <uip_process+0xd74>)
    9930:	701a      	strb	r2, [r3, #0]
  /* uip_len will contain the length of the actual TCP data. This is
     calculated by subtracing the length of the TCP header (in
     c) and the length of the IP header (20 bytes). */
  uip_len = uip_len - c - UIP_IPH_LEN;
    9932:	48a9      	ldr	r0, [pc, #676]	; (9bd8 <uip_process+0xd80>)
    9934:	8803      	ldrh	r3, [r0, #0]
    9936:	3b28      	subs	r3, #40	; 0x28
    9938:	1a9b      	subs	r3, r3, r2
    993a:	b29b      	uxth	r3, r3
    993c:	8003      	strh	r3, [r0, #0]
  /* First, check if the sequence number of the incoming packet is
     what we're expecting next. If not, we send out an ACK with the
     correct numbers in, unless we are in the SYN_RCVD state and
     receive a SYN, in which case we should retransmit our SYNACK
     (which is done futher down). */
  if(!((((uip_connr->tcpstateflags & UIP_TS_MASK) == UIP_SYN_SENT) &&
    993e:	200f      	movs	r0, #15
    9940:	4038      	ands	r0, r7
    9942:	2802      	cmp	r0, #2
    9944:	d104      	bne.n	9950 <uip_process+0xaf8>
    9946:	223f      	movs	r2, #63	; 0x3f
    9948:	400a      	ands	r2, r1
    994a:	2a12      	cmp	r2, #18
    994c:	d106      	bne.n	995c <uip_process+0xb04>
    994e:	e02a      	b.n	99a6 <uip_process+0xb4e>
    9950:	2801      	cmp	r0, #1
    9952:	d103      	bne.n	995c <uip_process+0xb04>
	((UIP_TCP_BUF->flags & TCP_CTL) == (TCP_SYN | TCP_ACK))) ||
       (((uip_connr->tcpstateflags & UIP_TS_MASK) == UIP_SYN_RCVD) &&
    9954:	223f      	movs	r2, #63	; 0x3f
    9956:	400a      	ands	r2, r1
    9958:	2a02      	cmp	r2, #2
    995a:	d024      	beq.n	99a6 <uip_process+0xb4e>
	((UIP_TCP_BUF->flags & TCP_CTL) == TCP_SYN)))) {
    if((uip_len > 0 || ((UIP_TCP_BUF->flags & (TCP_SYN | TCP_FIN)) != 0)) &&
    995c:	2b00      	cmp	r3, #0
    995e:	d101      	bne.n	9964 <uip_process+0xb0c>
    9960:	078b      	lsls	r3, r1, #30
    9962:	d020      	beq.n	99a6 <uip_process+0xb4e>
       (UIP_TCP_BUF->seqno[0] != uip_connr->rcv_nxt[0] ||
    9964:	232c      	movs	r3, #44	; 0x2c
     (which is done futher down). */
  if(!((((uip_connr->tcpstateflags & UIP_TS_MASK) == UIP_SYN_SENT) &&
	((UIP_TCP_BUF->flags & TCP_CTL) == (TCP_SYN | TCP_ACK))) ||
       (((uip_connr->tcpstateflags & UIP_TS_MASK) == UIP_SYN_RCVD) &&
	((UIP_TCP_BUF->flags & TCP_CTL) == TCP_SYN)))) {
    if((uip_len > 0 || ((UIP_TCP_BUF->flags & (TCP_SYN | TCP_FIN)) != 0)) &&
    9966:	4a9b      	ldr	r2, [pc, #620]	; (9bd4 <uip_process+0xd7c>)
    9968:	5cd2      	ldrb	r2, [r2, r3]
    996a:	7d2b      	ldrb	r3, [r5, #20]
    996c:	429a      	cmp	r2, r3
    996e:	d111      	bne.n	9994 <uip_process+0xb3c>
       (UIP_TCP_BUF->seqno[0] != uip_connr->rcv_nxt[0] ||
        UIP_TCP_BUF->seqno[1] != uip_connr->rcv_nxt[1] ||
    9970:	232d      	movs	r3, #45	; 0x2d
  if(!((((uip_connr->tcpstateflags & UIP_TS_MASK) == UIP_SYN_SENT) &&
	((UIP_TCP_BUF->flags & TCP_CTL) == (TCP_SYN | TCP_ACK))) ||
       (((uip_connr->tcpstateflags & UIP_TS_MASK) == UIP_SYN_RCVD) &&
	((UIP_TCP_BUF->flags & TCP_CTL) == TCP_SYN)))) {
    if((uip_len > 0 || ((UIP_TCP_BUF->flags & (TCP_SYN | TCP_FIN)) != 0)) &&
       (UIP_TCP_BUF->seqno[0] != uip_connr->rcv_nxt[0] ||
    9972:	4a98      	ldr	r2, [pc, #608]	; (9bd4 <uip_process+0xd7c>)
    9974:	5cd2      	ldrb	r2, [r2, r3]
    9976:	7d6b      	ldrb	r3, [r5, #21]
    9978:	429a      	cmp	r2, r3
    997a:	d10b      	bne.n	9994 <uip_process+0xb3c>
        UIP_TCP_BUF->seqno[1] != uip_connr->rcv_nxt[1] ||
        UIP_TCP_BUF->seqno[2] != uip_connr->rcv_nxt[2] ||
    997c:	232e      	movs	r3, #46	; 0x2e
	((UIP_TCP_BUF->flags & TCP_CTL) == (TCP_SYN | TCP_ACK))) ||
       (((uip_connr->tcpstateflags & UIP_TS_MASK) == UIP_SYN_RCVD) &&
	((UIP_TCP_BUF->flags & TCP_CTL) == TCP_SYN)))) {
    if((uip_len > 0 || ((UIP_TCP_BUF->flags & (TCP_SYN | TCP_FIN)) != 0)) &&
       (UIP_TCP_BUF->seqno[0] != uip_connr->rcv_nxt[0] ||
        UIP_TCP_BUF->seqno[1] != uip_connr->rcv_nxt[1] ||
    997e:	4a95      	ldr	r2, [pc, #596]	; (9bd4 <uip_process+0xd7c>)
    9980:	5cd2      	ldrb	r2, [r2, r3]
    9982:	7dab      	ldrb	r3, [r5, #22]
    9984:	429a      	cmp	r2, r3
    9986:	d105      	bne.n	9994 <uip_process+0xb3c>
        UIP_TCP_BUF->seqno[2] != uip_connr->rcv_nxt[2] ||
        UIP_TCP_BUF->seqno[3] != uip_connr->rcv_nxt[3])) {
    9988:	232f      	movs	r3, #47	; 0x2f
       (((uip_connr->tcpstateflags & UIP_TS_MASK) == UIP_SYN_RCVD) &&
	((UIP_TCP_BUF->flags & TCP_CTL) == TCP_SYN)))) {
    if((uip_len > 0 || ((UIP_TCP_BUF->flags & (TCP_SYN | TCP_FIN)) != 0)) &&
       (UIP_TCP_BUF->seqno[0] != uip_connr->rcv_nxt[0] ||
        UIP_TCP_BUF->seqno[1] != uip_connr->rcv_nxt[1] ||
        UIP_TCP_BUF->seqno[2] != uip_connr->rcv_nxt[2] ||
    998a:	4a92      	ldr	r2, [pc, #584]	; (9bd4 <uip_process+0xd7c>)
    998c:	5cd2      	ldrb	r2, [r2, r3]
    998e:	7deb      	ldrb	r3, [r5, #23]
    9990:	429a      	cmp	r2, r3
    9992:	d008      	beq.n	99a6 <uip_process+0xb4e>
        UIP_TCP_BUF->seqno[3] != uip_connr->rcv_nxt[3])) {

      if((UIP_TCP_BUF->flags & TCP_SYN)) {
    9994:	078b      	lsls	r3, r1, #30
    9996:	d400      	bmi.n	999a <uip_process+0xb42>
    9998:	e264      	b.n	9e64 <uip_process+0x100c>
        if((uip_connr->tcpstateflags & UIP_TS_MASK) == UIP_SYN_RCVD) {
    999a:	2801      	cmp	r0, #1
    999c:	d090      	beq.n	98c0 <uip_process+0xa68>
          goto tcp_send_synack;
        } else if((uip_connr->tcpstateflags & UIP_TS_MASK) == UIP_SYN_SENT) {
    999e:	2802      	cmp	r0, #2
    99a0:	d000      	beq.n	99a4 <uip_process+0xb4c>
    99a2:	e25f      	b.n	9e64 <uip_process+0x100c>
    99a4:	e790      	b.n	98c8 <uip_process+0xa70>

  /* Next, check if the incoming segment acknowledges any outstanding
     data. If so, we update the sequence number, reset the length of
     the outstanding data, calculate RTT estimations, and reset the
     retransmission timer. */
  if((UIP_TCP_BUF->flags & TCP_ACK) && uip_outstanding(uip_connr)) {
    99a6:	06cb      	lsls	r3, r1, #27
    99a8:	d54f      	bpl.n	9a4a <uip_process+0xbf2>
    99aa:	8ba9      	ldrh	r1, [r5, #28]
    99ac:	2900      	cmp	r1, #0
    99ae:	d04c      	beq.n	9a4a <uip_process+0xbf2>
    uip_add32(uip_connr->snd_nxt, uip_connr->len);
    99b0:	1c28      	adds	r0, r5, #0
    99b2:	3018      	adds	r0, #24
    99b4:	4b8c      	ldr	r3, [pc, #560]	; (9be8 <uip_process+0xd90>)
    99b6:	4798      	blx	r3

    if(UIP_TCP_BUF->ackno[0] == uip_acc32[0] &&
    99b8:	2330      	movs	r3, #48	; 0x30
    99ba:	4a86      	ldr	r2, [pc, #536]	; (9bd4 <uip_process+0xd7c>)
    99bc:	5cd0      	ldrb	r0, [r2, r3]
    99be:	4b8b      	ldr	r3, [pc, #556]	; (9bec <uip_process+0xd94>)
    99c0:	781b      	ldrb	r3, [r3, #0]
    99c2:	4283      	cmp	r3, r0
    99c4:	d141      	bne.n	9a4a <uip_process+0xbf2>
       UIP_TCP_BUF->ackno[1] == uip_acc32[1] &&
    99c6:	2331      	movs	r3, #49	; 0x31
    99c8:	5cd1      	ldrb	r1, [r2, r3]
    99ca:	4b88      	ldr	r3, [pc, #544]	; (9bec <uip_process+0xd94>)
     the outstanding data, calculate RTT estimations, and reset the
     retransmission timer. */
  if((UIP_TCP_BUF->flags & TCP_ACK) && uip_outstanding(uip_connr)) {
    uip_add32(uip_connr->snd_nxt, uip_connr->len);

    if(UIP_TCP_BUF->ackno[0] == uip_acc32[0] &&
    99cc:	785b      	ldrb	r3, [r3, #1]
    99ce:	428b      	cmp	r3, r1
    99d0:	d13b      	bne.n	9a4a <uip_process+0xbf2>
       UIP_TCP_BUF->ackno[1] == uip_acc32[1] &&
       UIP_TCP_BUF->ackno[2] == uip_acc32[2] &&
    99d2:	2332      	movs	r3, #50	; 0x32
    99d4:	5cd2      	ldrb	r2, [r2, r3]
    99d6:	4b85      	ldr	r3, [pc, #532]	; (9bec <uip_process+0xd94>)
     retransmission timer. */
  if((UIP_TCP_BUF->flags & TCP_ACK) && uip_outstanding(uip_connr)) {
    uip_add32(uip_connr->snd_nxt, uip_connr->len);

    if(UIP_TCP_BUF->ackno[0] == uip_acc32[0] &&
       UIP_TCP_BUF->ackno[1] == uip_acc32[1] &&
    99d8:	789b      	ldrb	r3, [r3, #2]
    99da:	4293      	cmp	r3, r2
    99dc:	d135      	bne.n	9a4a <uip_process+0xbf2>
       UIP_TCP_BUF->ackno[2] == uip_acc32[2] &&
       UIP_TCP_BUF->ackno[3] == uip_acc32[3]) {
    99de:	2333      	movs	r3, #51	; 0x33
    99e0:	4f7c      	ldr	r7, [pc, #496]	; (9bd4 <uip_process+0xd7c>)
    99e2:	5cfb      	ldrb	r3, [r7, r3]
    99e4:	4f81      	ldr	r7, [pc, #516]	; (9bec <uip_process+0xd94>)
  if((UIP_TCP_BUF->flags & TCP_ACK) && uip_outstanding(uip_connr)) {
    uip_add32(uip_connr->snd_nxt, uip_connr->len);

    if(UIP_TCP_BUF->ackno[0] == uip_acc32[0] &&
       UIP_TCP_BUF->ackno[1] == uip_acc32[1] &&
       UIP_TCP_BUF->ackno[2] == uip_acc32[2] &&
    99e6:	78ff      	ldrb	r7, [r7, #3]
    99e8:	429f      	cmp	r7, r3
    99ea:	d12e      	bne.n	9a4a <uip_process+0xbf2>
       UIP_TCP_BUF->ackno[3] == uip_acc32[3]) {
      /* Update sequence number. */
      uip_connr->snd_nxt[0] = uip_acc32[0];
    99ec:	7628      	strb	r0, [r5, #24]
      uip_connr->snd_nxt[1] = uip_acc32[1];
    99ee:	7669      	strb	r1, [r5, #25]
      uip_connr->snd_nxt[2] = uip_acc32[2];
    99f0:	76aa      	strb	r2, [r5, #26]
      uip_connr->snd_nxt[3] = uip_acc32[3];
    99f2:	76eb      	strb	r3, [r5, #27]
   
      /* Do RTT estimation, unless we have done retransmissions. */
      if(uip_connr->nrtx == 0) {
    99f4:	2327      	movs	r3, #39	; 0x27
    99f6:	5ceb      	ldrb	r3, [r5, r3]
    99f8:	2b00      	cmp	r3, #0
    99fa:	d11d      	bne.n	9a38 <uip_process+0xbe0>
        signed char m;
        m = uip_connr->rto - uip_connr->timer;
        /* This is taken directly from VJs original code in his paper */
        m = m - (uip_connr->sa >> 3);
    99fc:	2122      	movs	r1, #34	; 0x22
    99fe:	5c6a      	ldrb	r2, [r5, r1]
      uip_connr->snd_nxt[3] = uip_acc32[3];
   
      /* Do RTT estimation, unless we have done retransmissions. */
      if(uip_connr->nrtx == 0) {
        signed char m;
        m = uip_connr->rto - uip_connr->timer;
    9a00:	3324      	adds	r3, #36	; 0x24
    9a02:	5ceb      	ldrb	r3, [r5, r3]
    9a04:	2026      	movs	r0, #38	; 0x26
    9a06:	5c28      	ldrb	r0, [r5, r0]
    9a08:	1a1b      	subs	r3, r3, r0
        /* This is taken directly from VJs original code in his paper */
        m = m - (uip_connr->sa >> 3);
    9a0a:	08d0      	lsrs	r0, r2, #3
    9a0c:	1a1b      	subs	r3, r3, r0
    9a0e:	b2db      	uxtb	r3, r3
    9a10:	b2df      	uxtb	r7, r3
        uip_connr->sa += m;
    9a12:	189a      	adds	r2, r3, r2
    9a14:	b2d2      	uxtb	r2, r2
    9a16:	546a      	strb	r2, [r5, r1]
        if(m < 0) {
    9a18:	b279      	sxtb	r1, r7
    9a1a:	2900      	cmp	r1, #0
    9a1c:	da01      	bge.n	9a22 <uip_process+0xbca>
          m = -m;
    9a1e:	425b      	negs	r3, r3
    9a20:	b2df      	uxtb	r7, r3
        }
        m = m - (uip_connr->sv >> 2);
    9a22:	2023      	movs	r0, #35	; 0x23
    9a24:	5c29      	ldrb	r1, [r5, r0]
    9a26:	088b      	lsrs	r3, r1, #2
    9a28:	1ac9      	subs	r1, r1, r3
        uip_connr->sv += m;
    9a2a:	19cb      	adds	r3, r1, r7
    9a2c:	b2db      	uxtb	r3, r3
    9a2e:	542b      	strb	r3, [r5, r0]
        uip_connr->rto = (uip_connr->sa >> 3) + uip_connr->sv;
    9a30:	08d2      	lsrs	r2, r2, #3
    9a32:	189b      	adds	r3, r3, r2
    9a34:	2224      	movs	r2, #36	; 0x24
    9a36:	54ab      	strb	r3, [r5, r2]

      }
      /* Set the acknowledged flag. */
      uip_flags = UIP_ACKDATA;
    9a38:	2201      	movs	r2, #1
    9a3a:	4b69      	ldr	r3, [pc, #420]	; (9be0 <uip_process+0xd88>)
    9a3c:	701a      	strb	r2, [r3, #0]
      /* Reset the retransmission timer. */
      uip_connr->timer = uip_connr->rto;
    9a3e:	2324      	movs	r3, #36	; 0x24
    9a40:	5cea      	ldrb	r2, [r5, r3]
    9a42:	3302      	adds	r3, #2
    9a44:	54ea      	strb	r2, [r5, r3]

      /* Reset length of outstanding data. */
      uip_connr->len = 0;
    9a46:	2300      	movs	r3, #0
    9a48:	83ab      	strh	r3, [r5, #28]
    }
    
  }

  /* Do different things depending on in what state the connection is. */
  switch(uip_connr->tcpstateflags & UIP_TS_MASK) {
    9a4a:	2325      	movs	r3, #37	; 0x25
    9a4c:	5ce9      	ldrb	r1, [r5, r3]
    9a4e:	3b16      	subs	r3, #22
    9a50:	400b      	ands	r3, r1
    9a52:	3b01      	subs	r3, #1
    9a54:	b2da      	uxtb	r2, r3
    9a56:	2a07      	cmp	r2, #7
    9a58:	d900      	bls.n	9a5c <uip_process+0xc04>
    9a5a:	e283      	b.n	9f64 <uip_process+0x110c>
    9a5c:	b2db      	uxtb	r3, r3
    9a5e:	009b      	lsls	r3, r3, #2
    9a60:	4a63      	ldr	r2, [pc, #396]	; (9bf0 <uip_process+0xd98>)
    9a62:	58d3      	ldr	r3, [r2, r3]
    9a64:	469f      	mov	pc, r3
    case UIP_SYN_RCVD:
      /* In SYN_RCVD we have sent out a SYNACK in response to a SYN, and
         we are waiting for an ACK that acknowledges the data we sent
         out the last time. Therefore, we want to have the UIP_ACKDATA
         flag set. If so, we enter the ESTABLISHED state. */
      if(uip_flags & UIP_ACKDATA) {
    9a66:	4b5e      	ldr	r3, [pc, #376]	; (9be0 <uip_process+0xd88>)
    9a68:	781b      	ldrb	r3, [r3, #0]
    9a6a:	07db      	lsls	r3, r3, #31
    9a6c:	d516      	bpl.n	9a9c <uip_process+0xc44>
        uip_connr->tcpstateflags = UIP_ESTABLISHED;
    9a6e:	2203      	movs	r2, #3
    9a70:	2325      	movs	r3, #37	; 0x25
    9a72:	54ea      	strb	r2, [r5, r3]
        uip_flags = UIP_CONNECTED;
    9a74:	323d      	adds	r2, #61	; 0x3d
    9a76:	4b5a      	ldr	r3, [pc, #360]	; (9be0 <uip_process+0xd88>)
    9a78:	701a      	strb	r2, [r3, #0]
        uip_connr->len = 0;
    9a7a:	2300      	movs	r3, #0
    9a7c:	83ab      	strh	r3, [r5, #28]
        if(uip_len > 0) {
    9a7e:	4b56      	ldr	r3, [pc, #344]	; (9bd8 <uip_process+0xd80>)
    9a80:	8818      	ldrh	r0, [r3, #0]
    9a82:	2800      	cmp	r0, #0
    9a84:	d004      	beq.n	9a90 <uip_process+0xc38>
          uip_flags |= UIP_NEWDATA;
    9a86:	3202      	adds	r2, #2
    9a88:	4b55      	ldr	r3, [pc, #340]	; (9be0 <uip_process+0xd88>)
    9a8a:	701a      	strb	r2, [r3, #0]
          uip_add_rcv_nxt(uip_len);
    9a8c:	4b59      	ldr	r3, [pc, #356]	; (9bf4 <uip_process+0xd9c>)
    9a8e:	4798      	blx	r3
        }
        uip_slen = 0;
    9a90:	2200      	movs	r2, #0
    9a92:	4b59      	ldr	r3, [pc, #356]	; (9bf8 <uip_process+0xda0>)
    9a94:	801a      	strh	r2, [r3, #0]
        UIP_APPCALL();
    9a96:	4b53      	ldr	r3, [pc, #332]	; (9be4 <uip_process+0xd8c>)
    9a98:	4798      	blx	r3
        goto appsend;
    9a9a:	e11d      	b.n	9cd8 <uip_process+0xe80>
      }
      /* We need to retransmit the SYNACK */
      if((UIP_TCP_BUF->flags & TCP_CTL) == TCP_SYN) {
    9a9c:	2335      	movs	r3, #53	; 0x35
    9a9e:	4a4d      	ldr	r2, [pc, #308]	; (9bd4 <uip_process+0xd7c>)
    9aa0:	5cd2      	ldrb	r2, [r2, r3]
    9aa2:	330a      	adds	r3, #10
    9aa4:	4013      	ands	r3, r2
    9aa6:	2b02      	cmp	r3, #2
    9aa8:	d000      	beq.n	9aac <uip_process+0xc54>
    9aaa:	e25b      	b.n	9f64 <uip_process+0x110c>
    9aac:	e708      	b.n	98c0 <uip_process+0xa68>
    case UIP_SYN_SENT:
      /* In SYN_SENT, we wait for a SYNACK that is sent in response to
         our SYN. The rcv_nxt is set to sequence number in the SYNACK
         plus one, and we send an ACK. We move into the ESTABLISHED
         state. */
      if((uip_flags & UIP_ACKDATA) &&
    9aae:	4b4c      	ldr	r3, [pc, #304]	; (9be0 <uip_process+0xd88>)
    9ab0:	781b      	ldrb	r3, [r3, #0]
    9ab2:	07db      	lsls	r3, r3, #31
    9ab4:	d57e      	bpl.n	9bb4 <uip_process+0xd5c>
         (UIP_TCP_BUF->flags & TCP_CTL) == (TCP_SYN | TCP_ACK)) {
    9ab6:	2335      	movs	r3, #53	; 0x35
    9ab8:	4a46      	ldr	r2, [pc, #280]	; (9bd4 <uip_process+0xd7c>)
    9aba:	5cd2      	ldrb	r2, [r2, r3]
    case UIP_SYN_SENT:
      /* In SYN_SENT, we wait for a SYNACK that is sent in response to
         our SYN. The rcv_nxt is set to sequence number in the SYNACK
         plus one, and we send an ACK. We move into the ESTABLISHED
         state. */
      if((uip_flags & UIP_ACKDATA) &&
    9abc:	330a      	adds	r3, #10
    9abe:	4013      	ands	r3, r2
    9ac0:	2b12      	cmp	r3, #18
    9ac2:	d177      	bne.n	9bb4 <uip_process+0xd5c>
         (UIP_TCP_BUF->flags & TCP_CTL) == (TCP_SYN | TCP_ACK)) {

        /* Parse the TCP MSS option, if present. */
        if((UIP_TCP_BUF->tcpoffset & 0xf0) > 0x50) {
    9ac4:	3322      	adds	r3, #34	; 0x22
    9ac6:	4a43      	ldr	r2, [pc, #268]	; (9bd4 <uip_process+0xd7c>)
    9ac8:	5cd3      	ldrb	r3, [r2, r3]
    9aca:	220f      	movs	r2, #15
    9acc:	1c19      	adds	r1, r3, #0
    9ace:	4391      	bics	r1, r2
    9ad0:	2950      	cmp	r1, #80	; 0x50
    9ad2:	dd50      	ble.n	9b76 <uip_process+0xd1e>
          for(c = 0; c < ((UIP_TCP_BUF->tcpoffset >> 4) - 5) << 2 ;) {
    9ad4:	2100      	movs	r1, #0
    9ad6:	4a3d      	ldr	r2, [pc, #244]	; (9bcc <uip_process+0xd74>)
    9ad8:	7011      	strb	r1, [r2, #0]
    9ada:	091b      	lsrs	r3, r3, #4
    9adc:	3b05      	subs	r3, #5
    9ade:	009b      	lsls	r3, r3, #2
    9ae0:	4a3b      	ldr	r2, [pc, #236]	; (9bd0 <uip_process+0xd78>)
    9ae2:	7810      	ldrb	r0, [r2, #0]
    9ae4:	e040      	b.n	9b68 <uip_process+0xd10>
            opt = uip_buf[UIP_IPTCPH_LEN + UIP_LLH_LEN + c];
    9ae6:	493b      	ldr	r1, [pc, #236]	; (9bd4 <uip_process+0xd7c>)
    9ae8:	1989      	adds	r1, r1, r6
    9aea:	313c      	adds	r1, #60	; 0x3c
    9aec:	7808      	ldrb	r0, [r1, #0]
            if(opt == TCP_OPT_END) {
    9aee:	2800      	cmp	r0, #0
    9af0:	d105      	bne.n	9afe <uip_process+0xca6>
    9af2:	4b36      	ldr	r3, [pc, #216]	; (9bcc <uip_process+0xd74>)
    9af4:	701e      	strb	r6, [r3, #0]
    9af6:	2200      	movs	r2, #0
    9af8:	4b35      	ldr	r3, [pc, #212]	; (9bd0 <uip_process+0xd78>)
    9afa:	701a      	strb	r2, [r3, #0]
    9afc:	e03b      	b.n	9b76 <uip_process+0xd1e>
              /* End of options. */
              break;
            } else if(opt == TCP_OPT_NOOP) {
    9afe:	2801      	cmp	r0, #1
    9b00:	d102      	bne.n	9b08 <uip_process+0xcb0>
              ++c;
    9b02:	3601      	adds	r6, #1
    9b04:	b2f6      	uxtb	r6, r6
    9b06:	e02f      	b.n	9b68 <uip_process+0xd10>
              /* NOP option. */
            } else if(opt == TCP_OPT_MSS &&
    9b08:	2802      	cmp	r0, #2
    9b0a:	d11f      	bne.n	9b4c <uip_process+0xcf4>
                      uip_buf[UIP_TCPIP_HLEN + UIP_LLH_LEN + 1 + c] == TCP_OPT_MSS_LEN) {
    9b0c:	4931      	ldr	r1, [pc, #196]	; (9bd4 <uip_process+0xd7c>)
    9b0e:	1889      	adds	r1, r1, r2
    9b10:	313d      	adds	r1, #61	; 0x3d
              /* End of options. */
              break;
            } else if(opt == TCP_OPT_NOOP) {
              ++c;
              /* NOP option. */
            } else if(opt == TCP_OPT_MSS &&
    9b12:	7809      	ldrb	r1, [r1, #0]
    9b14:	2904      	cmp	r1, #4
    9b16:	d119      	bne.n	9b4c <uip_process+0xcf4>
    9b18:	4b2c      	ldr	r3, [pc, #176]	; (9bcc <uip_process+0xd74>)
    9b1a:	701e      	strb	r6, [r3, #0]
    9b1c:	3902      	subs	r1, #2
    9b1e:	4b2c      	ldr	r3, [pc, #176]	; (9bd0 <uip_process+0xd78>)
    9b20:	7019      	strb	r1, [r3, #0]
                      uip_buf[UIP_TCPIP_HLEN + UIP_LLH_LEN + 1 + c] == TCP_OPT_MSS_LEN) {
              /* An MSS option with the right option length. */
              tmp16 = (uip_buf[UIP_TCPIP_HLEN + UIP_LLH_LEN + 2 + c] << 8) |
    9b22:	4b2c      	ldr	r3, [pc, #176]	; (9bd4 <uip_process+0xd7c>)
    9b24:	189b      	adds	r3, r3, r2
    9b26:	1c1a      	adds	r2, r3, #0
    9b28:	323e      	adds	r2, #62	; 0x3e
    9b2a:	7812      	ldrb	r2, [r2, #0]
    9b2c:	0212      	lsls	r2, r2, #8
                uip_buf[UIP_TCPIP_HLEN + UIP_LLH_LEN + 3 + c];
    9b2e:	333f      	adds	r3, #63	; 0x3f
              ++c;
              /* NOP option. */
            } else if(opt == TCP_OPT_MSS &&
                      uip_buf[UIP_TCPIP_HLEN + UIP_LLH_LEN + 1 + c] == TCP_OPT_MSS_LEN) {
              /* An MSS option with the right option length. */
              tmp16 = (uip_buf[UIP_TCPIP_HLEN + UIP_LLH_LEN + 2 + c] << 8) |
    9b30:	781b      	ldrb	r3, [r3, #0]
    9b32:	4313      	orrs	r3, r2
    9b34:	4a31      	ldr	r2, [pc, #196]	; (9bfc <uip_process+0xda4>)
    9b36:	8013      	strh	r3, [r2, #0]
                uip_buf[UIP_TCPIP_HLEN + UIP_LLH_LEN + 3 + c];
              uip_connr->initialmss =
                uip_connr->mss = tmp16 > UIP_TCP_MSS? UIP_TCP_MSS: tmp16;
    9b38:	1c1a      	adds	r2, r3, #0
    9b3a:	3153      	adds	r1, #83	; 0x53
    9b3c:	31ff      	adds	r1, #255	; 0xff
    9b3e:	428b      	cmp	r3, r1
    9b40:	d901      	bls.n	9b46 <uip_process+0xcee>
    9b42:	4b2f      	ldr	r3, [pc, #188]	; (9c00 <uip_process+0xda8>)
    9b44:	881a      	ldrh	r2, [r3, #0]
    9b46:	83ea      	strh	r2, [r5, #30]
            } else if(opt == TCP_OPT_MSS &&
                      uip_buf[UIP_TCPIP_HLEN + UIP_LLH_LEN + 1 + c] == TCP_OPT_MSS_LEN) {
              /* An MSS option with the right option length. */
              tmp16 = (uip_buf[UIP_TCPIP_HLEN + UIP_LLH_LEN + 2 + c] << 8) |
                uip_buf[UIP_TCPIP_HLEN + UIP_LLH_LEN + 3 + c];
              uip_connr->initialmss =
    9b48:	842a      	strh	r2, [r5, #32]
                uip_connr->mss = tmp16 > UIP_TCP_MSS? UIP_TCP_MSS: tmp16;

              /* And we are done processing options. */
              break;
    9b4a:	e014      	b.n	9b76 <uip_process+0xd1e>
            } else {
              /* All other options have a length field, so that we easily
                 can skip past them. */
              if(uip_buf[UIP_TCPIP_HLEN + UIP_LLH_LEN + 1 + c] == 0) {
    9b4c:	4921      	ldr	r1, [pc, #132]	; (9bd4 <uip_process+0xd7c>)
    9b4e:	468c      	mov	ip, r1
    9b50:	4462      	add	r2, ip
    9b52:	323d      	adds	r2, #61	; 0x3d
    9b54:	7812      	ldrb	r2, [r2, #0]
    9b56:	2a00      	cmp	r2, #0
    9b58:	d104      	bne.n	9b64 <uip_process+0xd0c>
    9b5a:	4b1c      	ldr	r3, [pc, #112]	; (9bcc <uip_process+0xd74>)
    9b5c:	701e      	strb	r6, [r3, #0]
    9b5e:	4b1c      	ldr	r3, [pc, #112]	; (9bd0 <uip_process+0xd78>)
    9b60:	7018      	strb	r0, [r3, #0]
    9b62:	e008      	b.n	9b76 <uip_process+0xd1e>
                /* If the length field is zero, the options are malformed
                   and we don't process them further. */
                break;
              }
              c += uip_buf[UIP_TCPIP_HLEN + UIP_LLH_LEN + 1 + c];
    9b64:	1996      	adds	r6, r2, r6
    9b66:	b2f6      	uxtb	r6, r6
      if((uip_flags & UIP_ACKDATA) &&
         (UIP_TCP_BUF->flags & TCP_CTL) == (TCP_SYN | TCP_ACK)) {

        /* Parse the TCP MSS option, if present. */
        if((UIP_TCP_BUF->tcpoffset & 0xf0) > 0x50) {
          for(c = 0; c < ((UIP_TCP_BUF->tcpoffset >> 4) - 5) << 2 ;) {
    9b68:	1e32      	subs	r2, r6, #0
    9b6a:	429a      	cmp	r2, r3
    9b6c:	dbbb      	blt.n	9ae6 <uip_process+0xc8e>
    9b6e:	4b17      	ldr	r3, [pc, #92]	; (9bcc <uip_process+0xd74>)
    9b70:	701e      	strb	r6, [r3, #0]
    9b72:	4b17      	ldr	r3, [pc, #92]	; (9bd0 <uip_process+0xd78>)
    9b74:	7018      	strb	r0, [r3, #0]
              }
              c += uip_buf[UIP_TCPIP_HLEN + UIP_LLH_LEN + 1 + c];
            }
          }
        }
        uip_connr->tcpstateflags = UIP_ESTABLISHED;
    9b76:	2203      	movs	r2, #3
    9b78:	2325      	movs	r3, #37	; 0x25
    9b7a:	54ea      	strb	r2, [r5, r3]
        uip_connr->rcv_nxt[0] = UIP_TCP_BUF->seqno[0];
    9b7c:	4b15      	ldr	r3, [pc, #84]	; (9bd4 <uip_process+0xd7c>)
    9b7e:	3229      	adds	r2, #41	; 0x29
    9b80:	5c9a      	ldrb	r2, [r3, r2]
    9b82:	752a      	strb	r2, [r5, #20]
        uip_connr->rcv_nxt[1] = UIP_TCP_BUF->seqno[1];
    9b84:	222d      	movs	r2, #45	; 0x2d
    9b86:	5c9a      	ldrb	r2, [r3, r2]
    9b88:	756a      	strb	r2, [r5, #21]
        uip_connr->rcv_nxt[2] = UIP_TCP_BUF->seqno[2];
    9b8a:	222e      	movs	r2, #46	; 0x2e
    9b8c:	5c9a      	ldrb	r2, [r3, r2]
    9b8e:	75aa      	strb	r2, [r5, #22]
        uip_connr->rcv_nxt[3] = UIP_TCP_BUF->seqno[3];
    9b90:	222f      	movs	r2, #47	; 0x2f
    9b92:	5c9b      	ldrb	r3, [r3, r2]
    9b94:	75eb      	strb	r3, [r5, #23]
        uip_add_rcv_nxt(1);
    9b96:	2001      	movs	r0, #1
    9b98:	4b16      	ldr	r3, [pc, #88]	; (9bf4 <uip_process+0xd9c>)
    9b9a:	4798      	blx	r3
        uip_flags = UIP_CONNECTED | UIP_NEWDATA;
    9b9c:	2242      	movs	r2, #66	; 0x42
    9b9e:	4b10      	ldr	r3, [pc, #64]	; (9be0 <uip_process+0xd88>)
    9ba0:	701a      	strb	r2, [r3, #0]
        uip_connr->len = 0;
    9ba2:	2300      	movs	r3, #0
    9ba4:	83ab      	strh	r3, [r5, #28]
        uip_len = 0;
    9ba6:	4a0c      	ldr	r2, [pc, #48]	; (9bd8 <uip_process+0xd80>)
    9ba8:	8013      	strh	r3, [r2, #0]
        uip_slen = 0;
    9baa:	4a13      	ldr	r2, [pc, #76]	; (9bf8 <uip_process+0xda0>)
    9bac:	8013      	strh	r3, [r2, #0]
        UIP_APPCALL();
    9bae:	4b0d      	ldr	r3, [pc, #52]	; (9be4 <uip_process+0xd8c>)
    9bb0:	4798      	blx	r3
        goto appsend;
    9bb2:	e091      	b.n	9cd8 <uip_process+0xe80>
      }
      /* Inform the application that the connection failed */
      uip_flags = UIP_ABORT;
    9bb4:	2220      	movs	r2, #32
    9bb6:	4b0a      	ldr	r3, [pc, #40]	; (9be0 <uip_process+0xd88>)
    9bb8:	701a      	strb	r2, [r3, #0]
      UIP_APPCALL();
    9bba:	4b0a      	ldr	r3, [pc, #40]	; (9be4 <uip_process+0xd8c>)
    9bbc:	4798      	blx	r3
      /* The connection is closed after we send the RST */
      uip_conn->tcpstateflags = UIP_CLOSED;
    9bbe:	4b07      	ldr	r3, [pc, #28]	; (9bdc <uip_process+0xd84>)
    9bc0:	681a      	ldr	r2, [r3, #0]
    9bc2:	2100      	movs	r1, #0
    9bc4:	2325      	movs	r3, #37	; 0x25
    9bc6:	54d1      	strb	r1, [r2, r3]
      goto reset;
    9bc8:	e529      	b.n	961e <uip_process+0x7c6>
    9bca:	46c0      	nop			; (mov r8, r8)
    9bcc:	20000b1c 	.word	0x20000b1c
    9bd0:	20000b1d 	.word	0x20000b1d
    9bd4:	20002cd4 	.word	0x20002cd4
    9bd8:	20002cc0 	.word	0x20002cc0
    9bdc:	20002e74 	.word	0x20002e74
    9be0:	20002e64 	.word	0x20002e64
    9be4:	0000aa69 	.word	0x0000aa69
    9be8:	00008b41 	.word	0x00008b41
    9bec:	20002cc8 	.word	0x20002cc8
    9bf0:	00012b00 	.word	0x00012b00
    9bf4:	00008ba1 	.word	0x00008ba1
    9bf8:	20003088 	.word	0x20003088
    9bfc:	20000b10 	.word	0x20000b10
    9c00:	000129e4 	.word	0x000129e4
         If the incoming packet is a FIN, we should close the connection on
         this side as well, and we send out a FIN and enter the LAST_ACK
         state. We require that there is no outstanding data; otherwise the
         sequence numbers will be screwed up. */

      if(UIP_TCP_BUF->flags & TCP_FIN && !(uip_connr->tcpstateflags & UIP_STOPPED)) {
    9c04:	2335      	movs	r3, #53	; 0x35
    9c06:	4acb      	ldr	r2, [pc, #812]	; (9f34 <uip_process+0x10dc>)
    9c08:	5cd3      	ldrb	r3, [r2, r3]
    9c0a:	07da      	lsls	r2, r3, #31
    9c0c:	d525      	bpl.n	9c5a <uip_process+0xe02>
    9c0e:	06ca      	lsls	r2, r1, #27
    9c10:	d423      	bmi.n	9c5a <uip_process+0xe02>
        if(uip_outstanding(uip_connr)) {
    9c12:	8bab      	ldrh	r3, [r5, #28]
    9c14:	2b00      	cmp	r3, #0
    9c16:	d000      	beq.n	9c1a <uip_process+0xdc2>
    9c18:	e1a4      	b.n	9f64 <uip_process+0x110c>
          goto drop;
        }
        uip_add_rcv_nxt(1 + uip_len);
    9c1a:	4ec7      	ldr	r6, [pc, #796]	; (9f38 <uip_process+0x10e0>)
    9c1c:	8830      	ldrh	r0, [r6, #0]
    9c1e:	3001      	adds	r0, #1
    9c20:	b280      	uxth	r0, r0
    9c22:	4bc6      	ldr	r3, [pc, #792]	; (9f3c <uip_process+0x10e4>)
    9c24:	4798      	blx	r3
        uip_flags |= UIP_CLOSE;
    9c26:	49c6      	ldr	r1, [pc, #792]	; (9f40 <uip_process+0x10e8>)
    9c28:	780b      	ldrb	r3, [r1, #0]
    9c2a:	2210      	movs	r2, #16
    9c2c:	431a      	orrs	r2, r3
    9c2e:	700a      	strb	r2, [r1, #0]
        if(uip_len > 0) {
    9c30:	8832      	ldrh	r2, [r6, #0]
    9c32:	2a00      	cmp	r2, #0
    9c34:	d002      	beq.n	9c3c <uip_process+0xde4>
          uip_flags |= UIP_NEWDATA;
    9c36:	2212      	movs	r2, #18
    9c38:	4313      	orrs	r3, r2
    9c3a:	700b      	strb	r3, [r1, #0]
        }
        UIP_APPCALL();
    9c3c:	4bc1      	ldr	r3, [pc, #772]	; (9f44 <uip_process+0x10ec>)
    9c3e:	4798      	blx	r3
        uip_connr->len = 1;
    9c40:	2301      	movs	r3, #1
    9c42:	83ab      	strh	r3, [r5, #28]
        uip_connr->tcpstateflags = UIP_LAST_ACK;
    9c44:	2208      	movs	r2, #8
    9c46:	3324      	adds	r3, #36	; 0x24
    9c48:	54ea      	strb	r2, [r5, r3]
        uip_connr->nrtx = 0;
    9c4a:	2200      	movs	r2, #0
    9c4c:	3302      	adds	r3, #2
    9c4e:	54ea      	strb	r2, [r5, r3]
      tcp_send_finack:
        UIP_TCP_BUF->flags = TCP_FIN | TCP_ACK;
    9c50:	2111      	movs	r1, #17
    9c52:	2335      	movs	r3, #53	; 0x35
    9c54:	4ab7      	ldr	r2, [pc, #732]	; (9f34 <uip_process+0x10dc>)
    9c56:	54d1      	strb	r1, [r2, r3]
        goto tcp_send_nodata;
    9c58:	e108      	b.n	9e6c <uip_process+0x1014>
      }

      /* Check the URG flag. If this is set, the segment carries urgent
         data that we must pass to the application. */
      if((UIP_TCP_BUF->flags & TCP_URG) != 0) {
    9c5a:	069b      	lsls	r3, r3, #26
    9c5c:	d511      	bpl.n	9c82 <uip_process+0xe2a>
        uip_urgdata = uip_appdata;
        uip_appdata += uip_urglen;
      } else {
        uip_urglen = 0;
#else /* UIP_URGDATA > 0 */
        uip_appdata = ((char *)uip_appdata) + ((UIP_TCP_BUF->urgp[0] << 8) | UIP_TCP_BUF->urgp[1]);
    9c5e:	48b5      	ldr	r0, [pc, #724]	; (9f34 <uip_process+0x10dc>)
    9c60:	233a      	movs	r3, #58	; 0x3a
    9c62:	5cc3      	ldrb	r3, [r0, r3]
    9c64:	021a      	lsls	r2, r3, #8
    9c66:	233b      	movs	r3, #59	; 0x3b
    9c68:	5cc3      	ldrb	r3, [r0, r3]
    9c6a:	4eb7      	ldr	r6, [pc, #732]	; (9f48 <uip_process+0x10f0>)
    9c6c:	1c10      	adds	r0, r2, #0
    9c6e:	4318      	orrs	r0, r3
    9c70:	6837      	ldr	r7, [r6, #0]
    9c72:	46bc      	mov	ip, r7
    9c74:	4460      	add	r0, ip
    9c76:	6030      	str	r0, [r6, #0]
        uip_len -= (UIP_TCP_BUF->urgp[0] << 8) | UIP_TCP_BUF->urgp[1];
    9c78:	48af      	ldr	r0, [pc, #700]	; (9f38 <uip_process+0x10e0>)
    9c7a:	4313      	orrs	r3, r2
    9c7c:	8802      	ldrh	r2, [r0, #0]
    9c7e:	1ad3      	subs	r3, r2, r3
    9c80:	8003      	strh	r3, [r0, #0]
      /* If uip_len > 0 we have TCP data in the packet, and we flag this
         by setting the UIP_NEWDATA flag and update the sequence number
         we acknowledge. If the application has stopped the dataflow
         using uip_stop(), we must not accept any data packets from the
         remote host. */
      if(uip_len > 0 && !(uip_connr->tcpstateflags & UIP_STOPPED)) {
    9c82:	4bad      	ldr	r3, [pc, #692]	; (9f38 <uip_process+0x10e0>)
    9c84:	8818      	ldrh	r0, [r3, #0]
    9c86:	2800      	cmp	r0, #0
    9c88:	d008      	beq.n	9c9c <uip_process+0xe44>
    9c8a:	06cb      	lsls	r3, r1, #27
    9c8c:	d406      	bmi.n	9c9c <uip_process+0xe44>
        uip_flags |= UIP_NEWDATA;
    9c8e:	4aac      	ldr	r2, [pc, #688]	; (9f40 <uip_process+0x10e8>)
    9c90:	7813      	ldrb	r3, [r2, #0]
    9c92:	2102      	movs	r1, #2
    9c94:	430b      	orrs	r3, r1
    9c96:	7013      	strb	r3, [r2, #0]
        uip_add_rcv_nxt(uip_len);
    9c98:	4ba8      	ldr	r3, [pc, #672]	; (9f3c <uip_process+0x10e4>)
    9c9a:	4798      	blx	r3
         the initial MSS so that the application will send an entire MSS
         of data. This data will not be acknowledged by the receiver,
         and the application will retransmit it. This is called the
         "persistent timer" and uses the retransmission mechanim.
      */
      tmp16 = ((uint16_t)UIP_TCP_BUF->wnd[0] << 8) + (uint16_t)UIP_TCP_BUF->wnd[1];
    9c9c:	4aa5      	ldr	r2, [pc, #660]	; (9f34 <uip_process+0x10dc>)
    9c9e:	2336      	movs	r3, #54	; 0x36
    9ca0:	5cd3      	ldrb	r3, [r2, r3]
    9ca2:	021b      	lsls	r3, r3, #8
    9ca4:	2137      	movs	r1, #55	; 0x37
    9ca6:	5c52      	ldrb	r2, [r2, r1]
    9ca8:	18d3      	adds	r3, r2, r3
    9caa:	b29b      	uxth	r3, r3
    9cac:	4aa7      	ldr	r2, [pc, #668]	; (9f4c <uip_process+0x10f4>)
    9cae:	8013      	strh	r3, [r2, #0]
      if(tmp16 > uip_connr->initialmss ||
    9cb0:	8c2a      	ldrh	r2, [r5, #32]
    9cb2:	4293      	cmp	r3, r2
    9cb4:	d801      	bhi.n	9cba <uip_process+0xe62>
    9cb6:	2b00      	cmp	r3, #0
    9cb8:	d101      	bne.n	9cbe <uip_process+0xe66>
         tmp16 == 0) {
        tmp16 = uip_connr->initialmss;
    9cba:	4ba4      	ldr	r3, [pc, #656]	; (9f4c <uip_process+0x10f4>)
    9cbc:	801a      	strh	r2, [r3, #0]
      }
      uip_connr->mss = tmp16;
    9cbe:	4ba3      	ldr	r3, [pc, #652]	; (9f4c <uip_process+0x10f4>)
    9cc0:	881b      	ldrh	r3, [r3, #0]
    9cc2:	83eb      	strh	r3, [r5, #30]

         If the application wishes to send any data, this data should be
         put into the uip_appdata and the length of the data should be
         put into uip_len. If the application don't have any data to
         send, uip_len must be set to 0. */
      if(uip_flags & (UIP_NEWDATA | UIP_ACKDATA)) {
    9cc4:	4b9e      	ldr	r3, [pc, #632]	; (9f40 <uip_process+0x10e8>)
    9cc6:	781b      	ldrb	r3, [r3, #0]
    9cc8:	079b      	lsls	r3, r3, #30
    9cca:	d100      	bne.n	9cce <uip_process+0xe76>
    9ccc:	e14a      	b.n	9f64 <uip_process+0x110c>
        uip_slen = 0;
    9cce:	2200      	movs	r2, #0
    9cd0:	4b9f      	ldr	r3, [pc, #636]	; (9f50 <uip_process+0x10f8>)
    9cd2:	801a      	strh	r2, [r3, #0]
        UIP_APPCALL();
    9cd4:	4b9b      	ldr	r3, [pc, #620]	; (9f44 <uip_process+0x10ec>)
    9cd6:	4798      	blx	r3

      appsend:
      
        if(uip_flags & UIP_ABORT) {
    9cd8:	4b99      	ldr	r3, [pc, #612]	; (9f40 <uip_process+0x10e8>)
    9cda:	781b      	ldrb	r3, [r3, #0]
    9cdc:	069a      	lsls	r2, r3, #26
    9cde:	d509      	bpl.n	9cf4 <uip_process+0xe9c>
          uip_slen = 0;
    9ce0:	2200      	movs	r2, #0
    9ce2:	4b9b      	ldr	r3, [pc, #620]	; (9f50 <uip_process+0x10f8>)
    9ce4:	801a      	strh	r2, [r3, #0]
          uip_connr->tcpstateflags = UIP_CLOSED;
    9ce6:	2325      	movs	r3, #37	; 0x25
    9ce8:	54e2      	strb	r2, [r4, r3]
          UIP_TCP_BUF->flags = TCP_RST | TCP_ACK;
    9cea:	2114      	movs	r1, #20
    9cec:	3310      	adds	r3, #16
    9cee:	4a91      	ldr	r2, [pc, #580]	; (9f34 <uip_process+0x10dc>)
    9cf0:	54d1      	strb	r1, [r2, r3]
          goto tcp_send_nodata;
    9cf2:	e0bb      	b.n	9e6c <uip_process+0x1014>
        }

        if(uip_flags & UIP_CLOSE) {
    9cf4:	06da      	lsls	r2, r3, #27
    9cf6:	d50f      	bpl.n	9d18 <uip_process+0xec0>
          uip_slen = 0;
    9cf8:	2200      	movs	r2, #0
    9cfa:	4b95      	ldr	r3, [pc, #596]	; (9f50 <uip_process+0x10f8>)
    9cfc:	801a      	strh	r2, [r3, #0]
          uip_connr->len = 1;
    9cfe:	2301      	movs	r3, #1
    9d00:	83a3      	strh	r3, [r4, #28]
          uip_connr->tcpstateflags = UIP_FIN_WAIT_1;
    9d02:	3204      	adds	r2, #4
    9d04:	3324      	adds	r3, #36	; 0x24
    9d06:	54e2      	strb	r2, [r4, r3]
          uip_connr->nrtx = 0;
    9d08:	3302      	adds	r3, #2
    9d0a:	2200      	movs	r2, #0
    9d0c:	54e2      	strb	r2, [r4, r3]
          UIP_TCP_BUF->flags = TCP_FIN | TCP_ACK;
    9d0e:	2111      	movs	r1, #17
    9d10:	330e      	adds	r3, #14
    9d12:	4a88      	ldr	r2, [pc, #544]	; (9f34 <uip_process+0x10dc>)
    9d14:	54d1      	strb	r1, [r2, r3]
          goto tcp_send_nodata;
    9d16:	e0a9      	b.n	9e6c <uip_process+0x1014>
        }

        /* If uip_slen > 0, the application has data to be sent. */
        if(uip_slen > 0) {
    9d18:	4a8d      	ldr	r2, [pc, #564]	; (9f50 <uip_process+0x10f8>)
    9d1a:	8812      	ldrh	r2, [r2, #0]
    9d1c:	2a00      	cmp	r2, #0
    9d1e:	d012      	beq.n	9d46 <uip_process+0xeee>

          /* If the connection has acknowledged data, the contents of
             the ->len variable should be discarded. */
          if((uip_flags & UIP_ACKDATA) != 0) {
    9d20:	07db      	lsls	r3, r3, #31
    9d22:	d502      	bpl.n	9d2a <uip_process+0xed2>
            uip_connr->len = 0;
    9d24:	2300      	movs	r3, #0
    9d26:	83a3      	strh	r3, [r4, #28]
    9d28:	e002      	b.n	9d30 <uip_process+0xed8>
          }

          /* If the ->len variable is non-zero the connection has
             already data in transit and cannot send anymore right
             now. */
          if(uip_connr->len == 0) {
    9d2a:	8ba3      	ldrh	r3, [r4, #28]
    9d2c:	2b00      	cmp	r3, #0
    9d2e:	d108      	bne.n	9d42 <uip_process+0xeea>

            /* The application cannot send more than what is allowed by
               the mss (the minumum of the MSS and the available
               window). */
            if(uip_slen > uip_connr->mss) {
    9d30:	8be3      	ldrh	r3, [r4, #30]
    9d32:	429a      	cmp	r2, r3
    9d34:	d901      	bls.n	9d3a <uip_process+0xee2>
              uip_slen = uip_connr->mss;
    9d36:	4a86      	ldr	r2, [pc, #536]	; (9f50 <uip_process+0x10f8>)
    9d38:	8013      	strh	r3, [r2, #0]
            }

            /* Remember how much data we send out now so that we know
               when everything has been acknowledged. */
            uip_connr->len = uip_slen;
    9d3a:	4b85      	ldr	r3, [pc, #532]	; (9f50 <uip_process+0x10f8>)
    9d3c:	881b      	ldrh	r3, [r3, #0]
    9d3e:	83a3      	strh	r3, [r4, #28]
    9d40:	e001      	b.n	9d46 <uip_process+0xeee>
          } else {

            /* If the application already had unacknowledged data, we
               make sure that the application does not send (i.e.,
               retransmit) out more than it previously sent out. */
            uip_slen = uip_connr->len;
    9d42:	4a83      	ldr	r2, [pc, #524]	; (9f50 <uip_process+0x10f8>)
    9d44:	8013      	strh	r3, [r2, #0]
          }
        }
        uip_connr->nrtx = 0;
    9d46:	2200      	movs	r2, #0
    9d48:	2327      	movs	r3, #39	; 0x27
    9d4a:	54e2      	strb	r2, [r4, r3]
      apprexmit:
        uip_appdata = uip_sappdata;
    9d4c:	4b81      	ldr	r3, [pc, #516]	; (9f54 <uip_process+0x10fc>)
    9d4e:	681a      	ldr	r2, [r3, #0]
    9d50:	4b7d      	ldr	r3, [pc, #500]	; (9f48 <uip_process+0x10f0>)
    9d52:	601a      	str	r2, [r3, #0]
      
        /* If the application has data to be sent, or if the incoming
           packet had new data in it, we must send out a packet. */
        if(uip_slen > 0 && uip_connr->len > 0) {
    9d54:	4b7e      	ldr	r3, [pc, #504]	; (9f50 <uip_process+0x10f8>)
    9d56:	881b      	ldrh	r3, [r3, #0]
    9d58:	2b00      	cmp	r3, #0
    9d5a:	d00a      	beq.n	9d72 <uip_process+0xf1a>
    9d5c:	8ba3      	ldrh	r3, [r4, #28]
    9d5e:	2b00      	cmp	r3, #0
    9d60:	d007      	beq.n	9d72 <uip_process+0xf1a>
          /* Add the length of the IP and TCP headers. */
          uip_len = uip_connr->len + UIP_TCPIP_HLEN;
    9d62:	333c      	adds	r3, #60	; 0x3c
    9d64:	4a74      	ldr	r2, [pc, #464]	; (9f38 <uip_process+0x10e0>)
    9d66:	8013      	strh	r3, [r2, #0]
          /* We always set the ACK flag in response packets. */
          UIP_TCP_BUF->flags = TCP_ACK | TCP_PSH;
    9d68:	2118      	movs	r1, #24
    9d6a:	2335      	movs	r3, #53	; 0x35
    9d6c:	4a71      	ldr	r2, [pc, #452]	; (9f34 <uip_process+0x10dc>)
    9d6e:	54d1      	strb	r1, [r2, r3]
          /* Send the packet. */
          goto tcp_send_noopts;
    9d70:	e07f      	b.n	9e72 <uip_process+0x101a>
        }
        /* If there is no data to send, just send out a pure ACK if
           there is newdata. */
        if(uip_flags & UIP_NEWDATA) {
    9d72:	4b73      	ldr	r3, [pc, #460]	; (9f40 <uip_process+0x10e8>)
    9d74:	781b      	ldrb	r3, [r3, #0]
    9d76:	079b      	lsls	r3, r3, #30
    9d78:	d400      	bmi.n	9d7c <uip_process+0xf24>
    9d7a:	e0f3      	b.n	9f64 <uip_process+0x110c>
          uip_len = UIP_TCPIP_HLEN;
    9d7c:	223c      	movs	r2, #60	; 0x3c
    9d7e:	4b6e      	ldr	r3, [pc, #440]	; (9f38 <uip_process+0x10e0>)
    9d80:	801a      	strh	r2, [r3, #0]
          UIP_TCP_BUF->flags = TCP_ACK;
    9d82:	2110      	movs	r1, #16
    9d84:	2335      	movs	r3, #53	; 0x35
    9d86:	4a6b      	ldr	r2, [pc, #428]	; (9f34 <uip_process+0x10dc>)
    9d88:	54d1      	strb	r1, [r2, r3]
          goto tcp_send_noopts;
    9d8a:	e072      	b.n	9e72 <uip_process+0x101a>
      }
      goto drop;
    case UIP_LAST_ACK:
      /* We can close this connection if the peer has acknowledged our
         FIN. This is indicated by the UIP_ACKDATA flag. */
      if(uip_flags & UIP_ACKDATA) {
    9d8c:	4b6c      	ldr	r3, [pc, #432]	; (9f40 <uip_process+0x10e8>)
    9d8e:	781b      	ldrb	r3, [r3, #0]
    9d90:	07db      	lsls	r3, r3, #31
    9d92:	d400      	bmi.n	9d96 <uip_process+0xf3e>
    9d94:	e0e6      	b.n	9f64 <uip_process+0x110c>
        uip_connr->tcpstateflags = UIP_CLOSED;
    9d96:	2200      	movs	r2, #0
    9d98:	2325      	movs	r3, #37	; 0x25
    9d9a:	54ea      	strb	r2, [r5, r3]
        uip_flags = UIP_CLOSE;
    9d9c:	3210      	adds	r2, #16
    9d9e:	4b68      	ldr	r3, [pc, #416]	; (9f40 <uip_process+0x10e8>)
    9da0:	701a      	strb	r2, [r3, #0]
        UIP_APPCALL();
    9da2:	4b68      	ldr	r3, [pc, #416]	; (9f44 <uip_process+0x10ec>)
    9da4:	4798      	blx	r3
    9da6:	e0dd      	b.n	9f64 <uip_process+0x110c>
    
    case UIP_FIN_WAIT_1:
      /* The application has closed the connection, but the remote host
         hasn't closed its end yet. Thus we do nothing but wait for a
         FIN from the other side. */
      if(uip_len > 0) {
    9da8:	4b63      	ldr	r3, [pc, #396]	; (9f38 <uip_process+0x10e0>)
    9daa:	8818      	ldrh	r0, [r3, #0]
    9dac:	2800      	cmp	r0, #0
    9dae:	d001      	beq.n	9db4 <uip_process+0xf5c>
        uip_add_rcv_nxt(uip_len);
    9db0:	4b62      	ldr	r3, [pc, #392]	; (9f3c <uip_process+0x10e4>)
    9db2:	4798      	blx	r3
      }
      if(UIP_TCP_BUF->flags & TCP_FIN) {
    9db4:	2335      	movs	r3, #53	; 0x35
    9db6:	4a5f      	ldr	r2, [pc, #380]	; (9f34 <uip_process+0x10dc>)
    9db8:	5cd3      	ldrb	r3, [r2, r3]
    9dba:	07db      	lsls	r3, r3, #31
    9dbc:	d517      	bpl.n	9dee <uip_process+0xf96>
        if(uip_flags & UIP_ACKDATA) {
    9dbe:	4b60      	ldr	r3, [pc, #384]	; (9f40 <uip_process+0x10e8>)
    9dc0:	781b      	ldrb	r3, [r3, #0]
    9dc2:	07db      	lsls	r3, r3, #31
    9dc4:	d507      	bpl.n	9dd6 <uip_process+0xf7e>
          uip_connr->tcpstateflags = UIP_TIME_WAIT;
    9dc6:	2207      	movs	r2, #7
    9dc8:	2325      	movs	r3, #37	; 0x25
    9dca:	54ea      	strb	r2, [r5, r3]
          uip_connr->timer = 0;
    9dcc:	2300      	movs	r3, #0
    9dce:	321f      	adds	r2, #31
    9dd0:	54ab      	strb	r3, [r5, r2]
          uip_connr->len = 0;
    9dd2:	83ab      	strh	r3, [r5, #28]
    9dd4:	e002      	b.n	9ddc <uip_process+0xf84>
        } else {
          uip_connr->tcpstateflags = UIP_CLOSING;
    9dd6:	2206      	movs	r2, #6
    9dd8:	2325      	movs	r3, #37	; 0x25
    9dda:	54ea      	strb	r2, [r5, r3]
        }
        uip_add_rcv_nxt(1);
    9ddc:	2001      	movs	r0, #1
    9dde:	4b57      	ldr	r3, [pc, #348]	; (9f3c <uip_process+0x10e4>)
    9de0:	4798      	blx	r3
        uip_flags = UIP_CLOSE;
    9de2:	2210      	movs	r2, #16
    9de4:	4b56      	ldr	r3, [pc, #344]	; (9f40 <uip_process+0x10e8>)
    9de6:	701a      	strb	r2, [r3, #0]
        UIP_APPCALL();
    9de8:	4b56      	ldr	r3, [pc, #344]	; (9f44 <uip_process+0x10ec>)
    9dea:	4798      	blx	r3
        goto tcp_send_ack;
    9dec:	e03a      	b.n	9e64 <uip_process+0x100c>
      } else if(uip_flags & UIP_ACKDATA) {
    9dee:	4b54      	ldr	r3, [pc, #336]	; (9f40 <uip_process+0x10e8>)
    9df0:	781b      	ldrb	r3, [r3, #0]
    9df2:	07db      	lsls	r3, r3, #31
    9df4:	d505      	bpl.n	9e02 <uip_process+0xfaa>
        uip_connr->tcpstateflags = UIP_FIN_WAIT_2;
    9df6:	2205      	movs	r2, #5
    9df8:	2325      	movs	r3, #37	; 0x25
    9dfa:	54ea      	strb	r2, [r5, r3]
        uip_connr->len = 0;
    9dfc:	2300      	movs	r3, #0
    9dfe:	83ab      	strh	r3, [r5, #28]
        goto drop;
    9e00:	e0b0      	b.n	9f64 <uip_process+0x110c>
      }
      if(uip_len > 0) {
    9e02:	4b4d      	ldr	r3, [pc, #308]	; (9f38 <uip_process+0x10e0>)
    9e04:	881b      	ldrh	r3, [r3, #0]
    9e06:	2b00      	cmp	r3, #0
    9e08:	d12c      	bne.n	9e64 <uip_process+0x100c>
    9e0a:	e0ab      	b.n	9f64 <uip_process+0x110c>
        goto tcp_send_ack;
      }
      goto drop;
      
    case UIP_FIN_WAIT_2:
      if(uip_len > 0) {
    9e0c:	4b4a      	ldr	r3, [pc, #296]	; (9f38 <uip_process+0x10e0>)
    9e0e:	8818      	ldrh	r0, [r3, #0]
    9e10:	2800      	cmp	r0, #0
    9e12:	d100      	bne.n	9e16 <uip_process+0xfbe>
    9e14:	e0bc      	b.n	9f90 <uip_process+0x1138>
        uip_add_rcv_nxt(uip_len);
    9e16:	4b49      	ldr	r3, [pc, #292]	; (9f3c <uip_process+0x10e4>)
    9e18:	4798      	blx	r3
      }
      if(UIP_TCP_BUF->flags & TCP_FIN) {
    9e1a:	2335      	movs	r3, #53	; 0x35
    9e1c:	4a45      	ldr	r2, [pc, #276]	; (9f34 <uip_process+0x10dc>)
    9e1e:	5cd3      	ldrb	r3, [r2, r3]
    9e20:	07db      	lsls	r3, r3, #31
    9e22:	d50e      	bpl.n	9e42 <uip_process+0xfea>
        uip_connr->tcpstateflags = UIP_TIME_WAIT;
    9e24:	2207      	movs	r2, #7
    9e26:	2325      	movs	r3, #37	; 0x25
    9e28:	54ea      	strb	r2, [r5, r3]
        uip_connr->timer = 0;
    9e2a:	2200      	movs	r2, #0
    9e2c:	3301      	adds	r3, #1
    9e2e:	54ea      	strb	r2, [r5, r3]
        uip_add_rcv_nxt(1);
    9e30:	2001      	movs	r0, #1
    9e32:	4b42      	ldr	r3, [pc, #264]	; (9f3c <uip_process+0x10e4>)
    9e34:	4798      	blx	r3
        uip_flags = UIP_CLOSE;
    9e36:	2210      	movs	r2, #16
    9e38:	4b41      	ldr	r3, [pc, #260]	; (9f40 <uip_process+0x10e8>)
    9e3a:	701a      	strb	r2, [r3, #0]
        UIP_APPCALL();
    9e3c:	4b41      	ldr	r3, [pc, #260]	; (9f44 <uip_process+0x10ec>)
    9e3e:	4798      	blx	r3
        goto tcp_send_ack;
    9e40:	e010      	b.n	9e64 <uip_process+0x100c>
      }
      if(uip_len > 0) {
    9e42:	4b3d      	ldr	r3, [pc, #244]	; (9f38 <uip_process+0x10e0>)
    9e44:	881b      	ldrh	r3, [r3, #0]
    9e46:	2b00      	cmp	r3, #0
    9e48:	d10c      	bne.n	9e64 <uip_process+0x100c>
    9e4a:	e08b      	b.n	9f64 <uip_process+0x110c>

    case UIP_TIME_WAIT:
      goto tcp_send_ack;
    
    case UIP_CLOSING:
      if(uip_flags & UIP_ACKDATA) {
    9e4c:	4b3c      	ldr	r3, [pc, #240]	; (9f40 <uip_process+0x10e8>)
    9e4e:	781b      	ldrb	r3, [r3, #0]
    9e50:	07db      	lsls	r3, r3, #31
    9e52:	d400      	bmi.n	9e56 <uip_process+0xffe>
    9e54:	e086      	b.n	9f64 <uip_process+0x110c>
        uip_connr->tcpstateflags = UIP_TIME_WAIT;
    9e56:	2207      	movs	r2, #7
    9e58:	2325      	movs	r3, #37	; 0x25
    9e5a:	54ea      	strb	r2, [r5, r3]
        uip_connr->timer = 0;
    9e5c:	2200      	movs	r2, #0
    9e5e:	3301      	adds	r3, #1
    9e60:	54ea      	strb	r2, [r5, r3]
    9e62:	e07f      	b.n	9f64 <uip_process+0x110c>
  goto drop;
  
  /* We jump here when we are ready to send the packet, and just want
     to set the appropriate TCP sequence numbers in the TCP header. */
 tcp_send_ack:
  UIP_TCP_BUF->flags = TCP_ACK;
    9e64:	2110      	movs	r1, #16
    9e66:	2335      	movs	r3, #53	; 0x35
    9e68:	4a32      	ldr	r2, [pc, #200]	; (9f34 <uip_process+0x10dc>)
    9e6a:	54d1      	strb	r1, [r2, r3]

 tcp_send_nodata:
  uip_len = UIP_IPTCPH_LEN;
    9e6c:	223c      	movs	r2, #60	; 0x3c
    9e6e:	4b32      	ldr	r3, [pc, #200]	; (9f38 <uip_process+0x10e0>)
    9e70:	801a      	strh	r2, [r3, #0]

 tcp_send_noopts:
  UIP_TCP_BUF->tcpoffset = (UIP_TCPH_LEN / 4) << 4;
    9e72:	2150      	movs	r1, #80	; 0x50
    9e74:	2334      	movs	r3, #52	; 0x34
    9e76:	4a2f      	ldr	r2, [pc, #188]	; (9f34 <uip_process+0x10dc>)
    9e78:	54d1      	strb	r1, [r2, r3]
     headers before calculating the checksum and finally send the
     packet. */
 tcp_send:
  PRINTF("In tcp_send\n\r");
   
  UIP_TCP_BUF->ackno[0] = uip_connr->rcv_nxt[0];
    9e7a:	7d22      	ldrb	r2, [r4, #20]
    9e7c:	482d      	ldr	r0, [pc, #180]	; (9f34 <uip_process+0x10dc>)
    9e7e:	2330      	movs	r3, #48	; 0x30
    9e80:	54c2      	strb	r2, [r0, r3]
  UIP_TCP_BUF->ackno[1] = uip_connr->rcv_nxt[1];
    9e82:	7d62      	ldrb	r2, [r4, #21]
    9e84:	3301      	adds	r3, #1
    9e86:	54c2      	strb	r2, [r0, r3]
  UIP_TCP_BUF->ackno[2] = uip_connr->rcv_nxt[2];
    9e88:	7da2      	ldrb	r2, [r4, #22]
    9e8a:	3301      	adds	r3, #1
    9e8c:	54c2      	strb	r2, [r0, r3]
  UIP_TCP_BUF->ackno[3] = uip_connr->rcv_nxt[3];
    9e8e:	7de2      	ldrb	r2, [r4, #23]
    9e90:	3301      	adds	r3, #1
    9e92:	54c2      	strb	r2, [r0, r3]
  
  UIP_TCP_BUF->seqno[0] = uip_connr->snd_nxt[0];
    9e94:	7e22      	ldrb	r2, [r4, #24]
    9e96:	3b07      	subs	r3, #7
    9e98:	54c2      	strb	r2, [r0, r3]
  UIP_TCP_BUF->seqno[1] = uip_connr->snd_nxt[1];
    9e9a:	7e62      	ldrb	r2, [r4, #25]
    9e9c:	3301      	adds	r3, #1
    9e9e:	54c2      	strb	r2, [r0, r3]
  UIP_TCP_BUF->seqno[2] = uip_connr->snd_nxt[2];
    9ea0:	7ea2      	ldrb	r2, [r4, #26]
    9ea2:	3301      	adds	r3, #1
    9ea4:	54c2      	strb	r2, [r0, r3]
  UIP_TCP_BUF->seqno[3] = uip_connr->snd_nxt[3];
    9ea6:	7ee2      	ldrb	r2, [r4, #27]
    9ea8:	3301      	adds	r3, #1
    9eaa:	54c2      	strb	r2, [r0, r3]

  UIP_IP_BUF->proto = UIP_PROTO_TCP;
    9eac:	3b29      	subs	r3, #41	; 0x29
    9eae:	7183      	strb	r3, [r0, #6]

  UIP_TCP_BUF->srcport  = uip_connr->lport;
    9eb0:	8a23      	ldrh	r3, [r4, #16]
    9eb2:	8503      	strh	r3, [r0, #40]	; 0x28
  UIP_TCP_BUF->destport = uip_connr->rport;
    9eb4:	8a63      	ldrh	r3, [r4, #18]
    9eb6:	8543      	strh	r3, [r0, #42]	; 0x2a

  uip_ipaddr_copy(&UIP_IP_BUF->destipaddr, &uip_connr->ripaddr);
    9eb8:	1c03      	adds	r3, r0, #0
    9eba:	3318      	adds	r3, #24
    9ebc:	1c22      	adds	r2, r4, #0
    9ebe:	ca62      	ldmia	r2!, {r1, r5, r6}
    9ec0:	c362      	stmia	r3!, {r1, r5, r6}
    9ec2:	6812      	ldr	r2, [r2, #0]
    9ec4:	601a      	str	r2, [r3, #0]
  uip_ds6_select_src(&UIP_IP_BUF->srcipaddr, &UIP_IP_BUF->destipaddr);
    9ec6:	3008      	adds	r0, #8
    9ec8:	1c01      	adds	r1, r0, #0
    9eca:	3110      	adds	r1, #16
    9ecc:	4b22      	ldr	r3, [pc, #136]	; (9f58 <uip_process+0x1100>)
    9ece:	4798      	blx	r3
  PRINT6ADDR(&UIP_IP_BUF->destipaddr);
  PRINTF(" from ");
  PRINT6ADDR(&UIP_IP_BUF->srcipaddr);
  PRINTF("\n\r");

  if(uip_connr->tcpstateflags & UIP_STOPPED) {
    9ed0:	2325      	movs	r3, #37	; 0x25
    9ed2:	5ce3      	ldrb	r3, [r4, r3]
    9ed4:	06db      	lsls	r3, r3, #27
    9ed6:	d506      	bpl.n	9ee6 <uip_process+0x108e>
    /* If the connection has issued uip_stop(), we advertise a zero
       window so that the remote host will stop sending data. */
    UIP_TCP_BUF->wnd[0] = UIP_TCP_BUF->wnd[1] = 0;
    9ed8:	4b16      	ldr	r3, [pc, #88]	; (9f34 <uip_process+0x10dc>)
    9eda:	2200      	movs	r2, #0
    9edc:	2137      	movs	r1, #55	; 0x37
    9ede:	545a      	strb	r2, [r3, r1]
    9ee0:	3901      	subs	r1, #1
    9ee2:	545a      	strb	r2, [r3, r1]
    9ee4:	e006      	b.n	9ef4 <uip_process+0x109c>
  } else {
    UIP_TCP_BUF->wnd[0] = ((UIP_RECEIVE_WINDOW) >> 8);
    9ee6:	4b13      	ldr	r3, [pc, #76]	; (9f34 <uip_process+0x10dc>)
    9ee8:	2101      	movs	r1, #1
    9eea:	2236      	movs	r2, #54	; 0x36
    9eec:	5499      	strb	r1, [r3, r2]
    UIP_TCP_BUF->wnd[1] = ((UIP_RECEIVE_WINDOW) & 0xff);
    9eee:	3153      	adds	r1, #83	; 0x53
    9ef0:	3201      	adds	r2, #1
    9ef2:	5499      	strb	r1, [r3, r2]
  }

 tcp_send_noconn:
  UIP_IP_BUF->ttl = uip_ds6_if.cur_hop_limit;
    9ef4:	4c0f      	ldr	r4, [pc, #60]	; (9f34 <uip_process+0x10dc>)
    9ef6:	4b19      	ldr	r3, [pc, #100]	; (9f5c <uip_process+0x1104>)
    9ef8:	791b      	ldrb	r3, [r3, #4]
    9efa:	71e3      	strb	r3, [r4, #7]
  UIP_IP_BUF->len[0] = ((uip_len - UIP_IPH_LEN) >> 8);
    9efc:	4b0e      	ldr	r3, [pc, #56]	; (9f38 <uip_process+0x10e0>)
    9efe:	881b      	ldrh	r3, [r3, #0]
    9f00:	1c1a      	adds	r2, r3, #0
    9f02:	3a28      	subs	r2, #40	; 0x28
    9f04:	1212      	asrs	r2, r2, #8
    9f06:	7122      	strb	r2, [r4, #4]
  UIP_IP_BUF->len[1] = ((uip_len - UIP_IPH_LEN) & 0xff);
    9f08:	3b28      	subs	r3, #40	; 0x28
    9f0a:	7163      	strb	r3, [r4, #5]

  UIP_TCP_BUF->urgp[0] = UIP_TCP_BUF->urgp[1] = 0;
    9f0c:	2300      	movs	r3, #0
    9f0e:	223b      	movs	r2, #59	; 0x3b
    9f10:	54a3      	strb	r3, [r4, r2]
    9f12:	3a01      	subs	r2, #1
    9f14:	54a3      	strb	r3, [r4, r2]
  
  /* Calculate TCP checksum. */
  UIP_TCP_BUF->tcpchksum = 0;
    9f16:	8723      	strh	r3, [r4, #56]	; 0x38
  UIP_TCP_BUF->tcpchksum = ~(uip_tcpchksum());
    9f18:	4b11      	ldr	r3, [pc, #68]	; (9f60 <uip_process+0x1108>)
    9f1a:	4798      	blx	r3
    9f1c:	43c0      	mvns	r0, r0
    9f1e:	8720      	strh	r0, [r4, #56]	; 0x38

#endif /* UIP_TCP */
#if UIP_UDP
 ip_send_nolen:
#endif
  UIP_IP_BUF->vtc = 0x60;
    9f20:	4b04      	ldr	r3, [pc, #16]	; (9f34 <uip_process+0x10dc>)
    9f22:	2260      	movs	r2, #96	; 0x60
    9f24:	701a      	strb	r2, [r3, #0]
  UIP_IP_BUF->tcflow = 0x00;
    9f26:	2200      	movs	r2, #0
    9f28:	705a      	strb	r2, [r3, #1]
  UIP_IP_BUF->flow = 0x00;
    9f2a:	805a      	strh	r2, [r3, #2]
  PRINTF("Sending packet with length %d (%d)\n\r", uip_len,
         (UIP_IP_BUF->len[0] << 8) | UIP_IP_BUF->len[1]);
  
  UIP_STAT(++uip_stat.ip.sent);
  /* Return and let the caller do the actual transmission. */
  uip_flags = 0;
    9f2c:	2200      	movs	r2, #0
    9f2e:	4b04      	ldr	r3, [pc, #16]	; (9f40 <uip_process+0x10e8>)
    9f30:	701a      	strb	r2, [r3, #0]
  return;
    9f32:	e033      	b.n	9f9c <uip_process+0x1144>
    9f34:	20002cd4 	.word	0x20002cd4
    9f38:	20002cc0 	.word	0x20002cc0
    9f3c:	00008ba1 	.word	0x00008ba1
    9f40:	20002e64 	.word	0x20002e64
    9f44:	0000aa69 	.word	0x0000aa69
    9f48:	20002e70 	.word	0x20002e70
    9f4c:	20000b10 	.word	0x20000b10
    9f50:	20003088 	.word	0x20003088
    9f54:	20002cc4 	.word	0x20002cc4
    9f58:	0000770d 	.word	0x0000770d
    9f5c:	20002b68 	.word	0x20002b68
    9f60:	00008be1 	.word	0x00008be1

 drop:
  uip_len = 0;
    9f64:	2200      	movs	r2, #0
    9f66:	4b0f      	ldr	r3, [pc, #60]	; (9fa4 <uip_process+0x114c>)
    9f68:	801a      	strh	r2, [r3, #0]
  uip_ext_len = 0;
    9f6a:	2300      	movs	r3, #0
    9f6c:	4a0e      	ldr	r2, [pc, #56]	; (9fa8 <uip_process+0x1150>)
    9f6e:	2100      	movs	r1, #0
    9f70:	7011      	strb	r1, [r2, #0]
  uip_ext_bitmap = 0;
    9f72:	4a0e      	ldr	r2, [pc, #56]	; (9fac <uip_process+0x1154>)
    9f74:	7013      	strb	r3, [r2, #0]
  uip_flags = 0;
    9f76:	4a0e      	ldr	r2, [pc, #56]	; (9fb0 <uip_process+0x1158>)
    9f78:	7013      	strb	r3, [r2, #0]
  return;
    9f7a:	e00f      	b.n	9f9c <uip_process+0x1144>
    PRINTF("udp: zero port.\n\r");
    goto drop;
  }

  /* Demultiplex this UDP packet between the UDP "connections". */
  for(uip_udp_conn = &uip_udp_conns[0];
    9f7c:	4a0d      	ldr	r2, [pc, #52]	; (9fb4 <uip_process+0x115c>)
    9f7e:	4b0e      	ldr	r3, [pc, #56]	; (9fb8 <uip_process+0x1160>)
    9f80:	601a      	str	r2, [r3, #0]
    9f82:	f7ff fa5c 	bl	943e <uip_process+0x5e6>
#else /* UIP_UDP_CHECKSUMS */
  uip_len = uip_len - UIP_IPUDPH_LEN;
#endif /* UIP_UDP_CHECKSUMS */

  /* Make sure that the UDP destination port number is not zero. */
  if(UIP_UDP_BUF->destport == 0) {
    9f86:	4b0d      	ldr	r3, [pc, #52]	; (9fbc <uip_process+0x1164>)
    9f88:	8d5e      	ldrh	r6, [r3, #42]	; 0x2a
    9f8a:	2e00      	cmp	r6, #0
    9f8c:	d0ea      	beq.n	9f64 <uip_process+0x110c>
    9f8e:	e7f5      	b.n	9f7c <uip_process+0x1124>
      
    case UIP_FIN_WAIT_2:
      if(uip_len > 0) {
        uip_add_rcv_nxt(uip_len);
      }
      if(UIP_TCP_BUF->flags & TCP_FIN) {
    9f90:	2335      	movs	r3, #53	; 0x35
    9f92:	4a0a      	ldr	r2, [pc, #40]	; (9fbc <uip_process+0x1164>)
    9f94:	5cd3      	ldrb	r3, [r2, r3]
    9f96:	07db      	lsls	r3, r3, #31
    9f98:	d5e4      	bpl.n	9f64 <uip_process+0x110c>
    9f9a:	e743      	b.n	9e24 <uip_process+0xfcc>
  uip_len = 0;
  uip_ext_len = 0;
  uip_ext_bitmap = 0;
  uip_flags = 0;
  return;
}
    9f9c:	bc0c      	pop	{r2, r3}
    9f9e:	4690      	mov	r8, r2
    9fa0:	4699      	mov	r9, r3
    9fa2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    9fa4:	20002cc0 	.word	0x20002cc0
    9fa8:	20000b12 	.word	0x20000b12
    9fac:	20000b13 	.word	0x20000b13
    9fb0:	20002e64 	.word	0x20002e64
    9fb4:	2000308c 	.word	0x2000308c
    9fb8:	20002e6c 	.word	0x20002e6c
    9fbc:	20002cd4 	.word	0x20002cd4

00009fc0 <uip_htons>:
/*---------------------------------------------------------------------------*/
uint16_t
uip_htons(uint16_t val)
{
  return UIP_HTONS(val);
    9fc0:	0203      	lsls	r3, r0, #8
    9fc2:	0a00      	lsrs	r0, r0, #8
    9fc4:	4318      	orrs	r0, r3
    9fc6:	b280      	uxth	r0, r0
}
    9fc8:	4770      	bx	lr
    9fca:	46c0      	nop			; (mov r8, r8)

00009fcc <uip_htonl>:

uint32_t
uip_htonl(uint32_t val)
{
  return UIP_HTONL(val);
    9fcc:	0c03      	lsrs	r3, r0, #16
    9fce:	0402      	lsls	r2, r0, #16
    9fd0:	b280      	uxth	r0, r0
    9fd2:	4310      	orrs	r0, r2
    9fd4:	0a00      	lsrs	r0, r0, #8
    9fd6:	0400      	lsls	r0, r0, #16
    9fd8:	0a1a      	lsrs	r2, r3, #8
    9fda:	021b      	lsls	r3, r3, #8
    9fdc:	4313      	orrs	r3, r2
    9fde:	b29b      	uxth	r3, r3
    9fe0:	4318      	orrs	r0, r3
}
    9fe2:	4770      	bx	lr

00009fe4 <uip_send>:
/*---------------------------------------------------------------------------*/
void
uip_send(const void *data, int len)
{
    9fe4:	b510      	push	{r4, lr}
    9fe6:	1c04      	adds	r4, r0, #0
  int copylen;
#define MIN(a,b) ((a) < (b)? (a): (b))

  if(uip_sappdata != NULL) {
    9fe8:	4b13      	ldr	r3, [pc, #76]	; (a038 <uip_send+0x54>)
    9fea:	6818      	ldr	r0, [r3, #0]
    9fec:	2800      	cmp	r0, #0
    9fee:	d008      	beq.n	a002 <uip_send+0x1e>
    copylen = MIN(len, UIP_BUFSIZE - UIP_LLH_LEN - UIP_TCPIP_HLEN -
    9ff0:	4b12      	ldr	r3, [pc, #72]	; (a03c <uip_send+0x58>)
    9ff2:	3355      	adds	r3, #85	; 0x55
    9ff4:	33ff      	adds	r3, #255	; 0xff
    9ff6:	1a1b      	subs	r3, r3, r0
    9ff8:	1e0a      	subs	r2, r1, #0
    9ffa:	429a      	cmp	r2, r3
    9ffc:	dd07      	ble.n	a00e <uip_send+0x2a>
    9ffe:	1c1a      	adds	r2, r3, #0
    a000:	e005      	b.n	a00e <uip_send+0x2a>
                  (int)((char *)uip_sappdata -
                        (char *)&uip_buf[UIP_LLH_LEN + UIP_TCPIP_HLEN]));
  } else {
    copylen = MIN(len, UIP_BUFSIZE - UIP_LLH_LEN - UIP_TCPIP_HLEN);
    a002:	1c0a      	adds	r2, r1, #0
    a004:	23aa      	movs	r3, #170	; 0xaa
    a006:	005b      	lsls	r3, r3, #1
    a008:	4299      	cmp	r1, r3
    a00a:	dd00      	ble.n	a00e <uip_send+0x2a>
    a00c:	1c1a      	adds	r2, r3, #0
  }
  if(copylen > 0) {
    a00e:	2a00      	cmp	r2, #0
    a010:	dd10      	ble.n	a034 <uip_send+0x50>
    uip_slen = copylen;
    a012:	4b0b      	ldr	r3, [pc, #44]	; (a040 <uip_send+0x5c>)
    a014:	801a      	strh	r2, [r3, #0]
    if(data != uip_sappdata) {
    a016:	42a0      	cmp	r0, r4
    a018:	d00c      	beq.n	a034 <uip_send+0x50>
    a01a:	1c21      	adds	r1, r4, #0
      if(uip_sappdata == NULL) {
    a01c:	2800      	cmp	r0, #0
    a01e:	d105      	bne.n	a02c <uip_send+0x48>
    a020:	0412      	lsls	r2, r2, #16
    a022:	0c12      	lsrs	r2, r2, #16
        memcpy((char *)&uip_buf[UIP_LLH_LEN + UIP_TCPIP_HLEN],
    a024:	4805      	ldr	r0, [pc, #20]	; (a03c <uip_send+0x58>)
    a026:	4b07      	ldr	r3, [pc, #28]	; (a044 <uip_send+0x60>)
    a028:	4798      	blx	r3
    a02a:	e003      	b.n	a034 <uip_send+0x50>
    a02c:	0412      	lsls	r2, r2, #16
    a02e:	0c12      	lsrs	r2, r2, #16
               (data), uip_slen);
      } else {
        memcpy(uip_sappdata, (data), uip_slen);
    a030:	4b04      	ldr	r3, [pc, #16]	; (a044 <uip_send+0x60>)
    a032:	4798      	blx	r3
      }
    }
  }
}
    a034:	bd10      	pop	{r4, pc}
    a036:	46c0      	nop			; (mov r8, r8)
    a038:	20002cc4 	.word	0x20002cc4
    a03c:	20002d10 	.word	0x20002d10
    a040:	20003088 	.word	0x20003088
    a044:	000108e7 	.word	0x000108e7

0000a048 <call_event>:
/*---------------------------------------------------------------------------*/
PROCESS(tcp_socket_process, "TCP socket process");
/*---------------------------------------------------------------------------*/
static void
call_event(struct tcp_socket *s, tcp_socket_event_t event)
{
    a048:	b508      	push	{r3, lr}
  if(s != NULL && s->event_callback != NULL) {
    a04a:	2800      	cmp	r0, #0
    a04c:	d005      	beq.n	a05a <call_event+0x12>
    a04e:	6883      	ldr	r3, [r0, #8]
    a050:	2b00      	cmp	r3, #0
    a052:	d002      	beq.n	a05a <call_event+0x12>
    a054:	1c0a      	adds	r2, r1, #0
    s->event_callback(s, s->ptr, event);
    a056:	68c1      	ldr	r1, [r0, #12]
    a058:	4798      	blx	r3
  }
}
    a05a:	bd08      	pop	{r3, pc}

0000a05c <relisten>:
}
/*---------------------------------------------------------------------------*/
static void
relisten(struct tcp_socket *s)
{
	if(s != NULL && s->listen_port != 0) {
    a05c:	2800      	cmp	r0, #0
    a05e:	d007      	beq.n	a070 <relisten+0x14>
    a060:	8d83      	ldrh	r3, [r0, #44]	; 0x2c
    a062:	2b00      	cmp	r3, #0
    a064:	d004      	beq.n	a070 <relisten+0x14>
		s->flags |= TCP_SOCKET_FLAGS_LISTENING;
    a066:	222a      	movs	r2, #42	; 0x2a
    a068:	5c81      	ldrb	r1, [r0, r2]
    a06a:	2301      	movs	r3, #1
    a06c:	430b      	orrs	r3, r1
    a06e:	5483      	strb	r3, [r0, r2]
	}
}
    a070:	4770      	bx	lr
    a072:	46c0      	nop			; (mov r8, r8)

0000a074 <newdata>:
}

/*---------------------------------------------------------------------------*/
static void
newdata(struct tcp_socket *s)
{
    a074:	b5f0      	push	{r4, r5, r6, r7, lr}
    a076:	4647      	mov	r7, r8
    a078:	b480      	push	{r7}
    a07a:	1c05      	adds	r5, r0, #0
  uint16_t len, copylen, bytesleft;
  uint8_t *dataptr;
  len = uip_datalen();
    a07c:	4b14      	ldr	r3, [pc, #80]	; (a0d0 <newdata+0x5c>)
    a07e:	881f      	ldrh	r7, [r3, #0]
  dataptr = uip_appdata;
    a080:	4b14      	ldr	r3, [pc, #80]	; (a0d4 <newdata+0x60>)
    a082:	681e      	ldr	r6, [r3, #0]
     should be retained in the buffer, or zero if all data should be
     consumed. If there is data to be retained, the highest bytes of
     data are copied down into the input buffer. */
  do {
    copylen = MIN(len, s->input_data_maxlen);
    memcpy(s->input_data_ptr, dataptr, copylen);
    a084:	4b14      	ldr	r3, [pc, #80]	; (a0d8 <newdata+0x64>)
    a086:	4698      	mov	r8, r3
     function. The input callback returns the number of bytes that
     should be retained in the buffer, or zero if all data should be
     consumed. If there is data to be retained, the highest bytes of
     data are copied down into the input buffer. */
  do {
    copylen = MIN(len, s->input_data_maxlen);
    a088:	8bab      	ldrh	r3, [r5, #28]
    a08a:	1c3c      	adds	r4, r7, #0
    a08c:	b29a      	uxth	r2, r3
    a08e:	4297      	cmp	r7, r2
    a090:	d900      	bls.n	a094 <newdata+0x20>
    a092:	1c1c      	adds	r4, r3, #0
    a094:	b2a4      	uxth	r4, r4
    memcpy(s->input_data_ptr, dataptr, copylen);
    a096:	6968      	ldr	r0, [r5, #20]
    a098:	1c31      	adds	r1, r6, #0
    a09a:	1c22      	adds	r2, r4, #0
    a09c:	47c0      	blx	r8
    if(s->input_callback) {
    a09e:	686b      	ldr	r3, [r5, #4]
    a0a0:	469c      	mov	ip, r3
    a0a2:	2b00      	cmp	r3, #0
    a0a4:	d00c      	beq.n	a0c0 <newdata+0x4c>
      bytesleft = s->input_callback(s, s->ptr,
    a0a6:	1c28      	adds	r0, r5, #0
    a0a8:	68e9      	ldr	r1, [r5, #12]
    a0aa:	696a      	ldr	r2, [r5, #20]
    a0ac:	1c23      	adds	r3, r4, #0
    a0ae:	47e0      	blx	ip
				    s->input_data_ptr, copylen);
    } else {
      bytesleft = 0;
    }
    if(bytesleft > 0) {
    a0b0:	b283      	uxth	r3, r0
    a0b2:	2b00      	cmp	r3, #0
    a0b4:	d004      	beq.n	a0c0 <newdata+0x4c>
      printf("tcp: newdata, bytesleft > 0 (%d) not implemented\n\r", bytesleft);
    a0b6:	0400      	lsls	r0, r0, #16
    a0b8:	0c01      	lsrs	r1, r0, #16
    a0ba:	4808      	ldr	r0, [pc, #32]	; (a0dc <newdata+0x68>)
    a0bc:	4b08      	ldr	r3, [pc, #32]	; (a0e0 <newdata+0x6c>)
    a0be:	4798      	blx	r3
    }
    dataptr += copylen;
    a0c0:	1936      	adds	r6, r6, r4
    len -= copylen;
    a0c2:	1b3c      	subs	r4, r7, r4
    a0c4:	b2a7      	uxth	r7, r4

  } while(len > 0);
    a0c6:	2f00      	cmp	r7, #0
    a0c8:	d1de      	bne.n	a088 <newdata+0x14>
}
    a0ca:	bc04      	pop	{r2}
    a0cc:	4690      	mov	r8, r2
    a0ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
    a0d0:	20002cc0 	.word	0x20002cc0
    a0d4:	20002e70 	.word	0x20002e70
    a0d8:	000108e7 	.word	0x000108e7
    a0dc:	00012b20 	.word	0x00012b20
    a0e0:	00010931 	.word	0x00010931

0000a0e4 <senddata>:
  }
}
/*---------------------------------------------------------------------------*/
static void
senddata(struct tcp_socket *s)
{
    a0e4:	b510      	push	{r4, lr}
  int len = MIN(s->output_data_max_seg, uip_mss());
    a0e6:	4b0a      	ldr	r3, [pc, #40]	; (a110 <senddata+0x2c>)
    a0e8:	681b      	ldr	r3, [r3, #0]
    a0ea:	8bdc      	ldrh	r4, [r3, #30]
    a0ec:	8d02      	ldrh	r2, [r0, #40]	; 0x28

  if(s->output_senddata_len > 0) {
    a0ee:	8cc3      	ldrh	r3, [r0, #38]	; 0x26
    a0f0:	2b00      	cmp	r3, #0
    a0f2:	d00b      	beq.n	a10c <senddata+0x28>
}
/*---------------------------------------------------------------------------*/
static void
senddata(struct tcp_socket *s)
{
  int len = MIN(s->output_data_max_seg, uip_mss());
    a0f4:	1c11      	adds	r1, r2, #0
    a0f6:	42a2      	cmp	r2, r4
    a0f8:	d900      	bls.n	a0fc <senddata+0x18>
    a0fa:	1c21      	adds	r1, r4, #0
    a0fc:	b289      	uxth	r1, r1

  if(s->output_senddata_len > 0) {
    len = MIN(s->output_senddata_len, len);
    a0fe:	4299      	cmp	r1, r3
    a100:	dd00      	ble.n	a104 <senddata+0x20>
    a102:	1c19      	adds	r1, r3, #0
    s->output_data_send_nxt = len;
    a104:	8481      	strh	r1, [r0, #36]	; 0x24
    uip_send(s->output_data_ptr, len);
    a106:	6980      	ldr	r0, [r0, #24]
    a108:	4b02      	ldr	r3, [pc, #8]	; (a114 <senddata+0x30>)
    a10a:	4798      	blx	r3
  }
}
    a10c:	bd10      	pop	{r4, pc}
    a10e:	46c0      	nop			; (mov r8, r8)
    a110:	20002e74 	.word	0x20002e74
    a114:	00009fe5 	.word	0x00009fe5

0000a118 <process_thread_tcp_socket_process>:
    relisten(s);
  }
}
/*---------------------------------------------------------------------------*/
PROCESS_THREAD(tcp_socket_process, ev, data)
{
    a118:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    a11a:	464f      	mov	r7, r9
    a11c:	4646      	mov	r6, r8
    a11e:	b4c0      	push	{r6, r7}
    a120:	1c04      	adds	r4, r0, #0
    a122:	1c15      	adds	r5, r2, #0
  PROCESS_BEGIN();
    a124:	8803      	ldrh	r3, [r0, #0]
    a126:	2b00      	cmp	r3, #0
    a128:	d002      	beq.n	a130 <process_thread_tcp_socket_process+0x18>
    a12a:	2bef      	cmp	r3, #239	; 0xef
    a12c:	d004      	beq.n	a138 <process_thread_tcp_socket_process+0x20>
    a12e:	e0ee      	b.n	a30e <process_thread_tcp_socket_process+0x1f6>
  while(1) {
    PROCESS_WAIT_EVENT();
    a130:	23ef      	movs	r3, #239	; 0xef
    a132:	8023      	strh	r3, [r4, #0]
    a134:	2001      	movs	r0, #1
    a136:	e0fc      	b.n	a332 <process_thread_tcp_socket_process+0x21a>

    if(ev == tcpip_event) {
    a138:	4b80      	ldr	r3, [pc, #512]	; (a33c <process_thread_tcp_socket_process+0x224>)
    a13a:	781b      	ldrb	r3, [r3, #0]
    a13c:	428b      	cmp	r3, r1
    a13e:	d1f7      	bne.n	a130 <process_thread_tcp_socket_process+0x18>
static void
appcall(void *state)
{
  struct tcp_socket *s = state;

  if(s != NULL && s->c != NULL && s->c != uip_conn) {
    a140:	2a00      	cmp	r2, #0
    a142:	d100      	bne.n	a146 <process_thread_tcp_socket_process+0x2e>
    a144:	e0ed      	b.n	a322 <process_thread_tcp_socket_process+0x20a>
    a146:	6b13      	ldr	r3, [r2, #48]	; 0x30
    a148:	2b00      	cmp	r3, #0
    a14a:	d100      	bne.n	a14e <process_thread_tcp_socket_process+0x36>
    a14c:	e0e3      	b.n	a316 <process_thread_tcp_socket_process+0x1fe>
    a14e:	4a7c      	ldr	r2, [pc, #496]	; (a340 <process_thread_tcp_socket_process+0x228>)
    a150:	6812      	ldr	r2, [r2, #0]
    a152:	4293      	cmp	r3, r2
    a154:	d1ec      	bne.n	a130 <process_thread_tcp_socket_process+0x18>
    a156:	e0de      	b.n	a316 <process_thread_tcp_socket_process+0x1fe>
       socket. We do this by checking the state pointer - if NULL,
       this is an incoming listen connection. If so, we need to
       connect the socket to the uip_conn and call the event
       function. */
    if(s == NULL) {
      for(s = list_head(socketlist);
    a158:	487a      	ldr	r0, [pc, #488]	; (a344 <process_thread_tcp_socket_process+0x22c>)
    a15a:	4b7b      	ldr	r3, [pc, #492]	; (a348 <process_thread_tcp_socket_process+0x230>)
    a15c:	4798      	blx	r3
    a15e:	1e05      	subs	r5, r0, #0
    a160:	d032      	beq.n	a1c8 <process_thread_tcp_socket_process+0xb0>
	  s != NULL;
	  s = list_item_next(s)) {
	if((s->flags & TCP_SOCKET_FLAGS_LISTENING) != 0 &&
	   s->listen_port != 0 &&
	   s->listen_port == uip_htons(uip_conn->lport)) {
    a162:	4b77      	ldr	r3, [pc, #476]	; (a340 <process_thread_tcp_socket_process+0x228>)
    a164:	4699      	mov	r9, r3
    a166:	4b79      	ldr	r3, [pc, #484]	; (a34c <process_thread_tcp_socket_process+0x234>)
    a168:	4698      	mov	r8, r3
       connect the socket to the uip_conn and call the event
       function. */
    if(s == NULL) {
      for(s = list_head(socketlist);
	  s != NULL;
	  s = list_item_next(s)) {
    a16a:	4f79      	ldr	r7, [pc, #484]	; (a350 <process_thread_tcp_socket_process+0x238>)
	if((s->flags & TCP_SOCKET_FLAGS_LISTENING) != 0 &&
    a16c:	232a      	movs	r3, #42	; 0x2a
    a16e:	5ceb      	ldrb	r3, [r5, r3]
    a170:	07db      	lsls	r3, r3, #31
    a172:	d51b      	bpl.n	a1ac <process_thread_tcp_socket_process+0x94>
	   s->listen_port != 0 &&
    a174:	8dae      	ldrh	r6, [r5, #44]	; 0x2c
       function. */
    if(s == NULL) {
      for(s = list_head(socketlist);
	  s != NULL;
	  s = list_item_next(s)) {
	if((s->flags & TCP_SOCKET_FLAGS_LISTENING) != 0 &&
    a176:	2e00      	cmp	r6, #0
    a178:	d018      	beq.n	a1ac <process_thread_tcp_socket_process+0x94>
	   s->listen_port != 0 &&
	   s->listen_port == uip_htons(uip_conn->lport)) {
    a17a:	464b      	mov	r3, r9
    a17c:	681b      	ldr	r3, [r3, #0]
    a17e:	8a18      	ldrh	r0, [r3, #16]
    a180:	47c0      	blx	r8
    if(s == NULL) {
      for(s = list_head(socketlist);
	  s != NULL;
	  s = list_item_next(s)) {
	if((s->flags & TCP_SOCKET_FLAGS_LISTENING) != 0 &&
	   s->listen_port != 0 &&
    a182:	4286      	cmp	r6, r0
    a184:	d112      	bne.n	a1ac <process_thread_tcp_socket_process+0x94>
	   s->listen_port == uip_htons(uip_conn->lport)) {
	  s->flags &= ~TCP_SOCKET_FLAGS_LISTENING;
    a186:	222a      	movs	r2, #42	; 0x2a
    a188:	5cab      	ldrb	r3, [r5, r2]
    a18a:	2101      	movs	r1, #1
    a18c:	438b      	bics	r3, r1
    a18e:	54ab      	strb	r3, [r5, r2]
          s->output_data_max_seg = uip_mss();
    a190:	4b6b      	ldr	r3, [pc, #428]	; (a340 <process_thread_tcp_socket_process+0x228>)
    a192:	6818      	ldr	r0, [r3, #0]
    a194:	8bc3      	ldrh	r3, [r0, #30]
    a196:	852b      	strh	r3, [r5, #40]	; 0x28
	  tcp_markconn(uip_conn, s);
    a198:	1c29      	adds	r1, r5, #0
    a19a:	4b6e      	ldr	r3, [pc, #440]	; (a354 <process_thread_tcp_socket_process+0x23c>)
    a19c:	4798      	blx	r3
	  call_event(s, TCP_SOCKET_CONNECTED);
    a19e:	1c28      	adds	r0, r5, #0
    a1a0:	2100      	movs	r1, #0
    a1a2:	4b6d      	ldr	r3, [pc, #436]	; (a358 <process_thread_tcp_socket_process+0x240>)
    a1a4:	4798      	blx	r3
    } else {
      s->output_data_max_seg = uip_mss();
      call_event(s, TCP_SOCKET_CONNECTED);
    }

    if(s == NULL) {
    a1a6:	2d00      	cmp	r5, #0
    a1a8:	d112      	bne.n	a1d0 <process_thread_tcp_socket_process+0xb8>
    a1aa:	e00d      	b.n	a1c8 <process_thread_tcp_socket_process+0xb0>
       connect the socket to the uip_conn and call the event
       function. */
    if(s == NULL) {
      for(s = list_head(socketlist);
	  s != NULL;
	  s = list_item_next(s)) {
    a1ac:	1c28      	adds	r0, r5, #0
    a1ae:	47b8      	blx	r7
    a1b0:	1e05      	subs	r5, r0, #0
       socket. We do this by checking the state pointer - if NULL,
       this is an incoming listen connection. If so, we need to
       connect the socket to the uip_conn and call the event
       function. */
    if(s == NULL) {
      for(s = list_head(socketlist);
    a1b2:	d1db      	bne.n	a16c <process_thread_tcp_socket_process+0x54>
    a1b4:	e008      	b.n	a1c8 <process_thread_tcp_socket_process+0xb0>
	  call_event(s, TCP_SOCKET_CONNECTED);
	  break;
	}
      }
    } else {
      s->output_data_max_seg = uip_mss();
    a1b6:	4b62      	ldr	r3, [pc, #392]	; (a340 <process_thread_tcp_socket_process+0x228>)
    a1b8:	681b      	ldr	r3, [r3, #0]
    a1ba:	8bdb      	ldrh	r3, [r3, #30]
    a1bc:	852b      	strh	r3, [r5, #40]	; 0x28
      call_event(s, TCP_SOCKET_CONNECTED);
    a1be:	1c28      	adds	r0, r5, #0
    a1c0:	2100      	movs	r1, #0
    a1c2:	4b65      	ldr	r3, [pc, #404]	; (a358 <process_thread_tcp_socket_process+0x240>)
    a1c4:	4798      	blx	r3
    a1c6:	e003      	b.n	a1d0 <process_thread_tcp_socket_process+0xb8>
    }

    if(s == NULL) {
      uip_abort();
    a1c8:	2220      	movs	r2, #32
    a1ca:	4b64      	ldr	r3, [pc, #400]	; (a35c <process_thread_tcp_socket_process+0x244>)
    a1cc:	701a      	strb	r2, [r3, #0]
    a1ce:	e7af      	b.n	a130 <process_thread_tcp_socket_process+0x18>
    } else {
      if(uip_newdata()) {
    a1d0:	4b62      	ldr	r3, [pc, #392]	; (a35c <process_thread_tcp_socket_process+0x244>)
    a1d2:	781b      	ldrb	r3, [r3, #0]
    a1d4:	079b      	lsls	r3, r3, #30
    a1d6:	d502      	bpl.n	a1de <process_thread_tcp_socket_process+0xc6>
        newdata(s);
    a1d8:	1c28      	adds	r0, r5, #0
    a1da:	4b61      	ldr	r3, [pc, #388]	; (a360 <process_thread_tcp_socket_process+0x248>)
    a1dc:	4798      	blx	r3
      }
      senddata(s);
    a1de:	1c28      	adds	r0, r5, #0
    a1e0:	4b60      	ldr	r3, [pc, #384]	; (a364 <process_thread_tcp_socket_process+0x24c>)
    a1e2:	4798      	blx	r3
    a1e4:	e7a4      	b.n	a130 <process_thread_tcp_socket_process+0x18>
    }
    return;
  }

  if(uip_timedout()) {
    a1e6:	b25b      	sxtb	r3, r3
    a1e8:	2b00      	cmp	r3, #0
    a1ea:	da06      	bge.n	a1fa <process_thread_tcp_socket_process+0xe2>
    call_event(s, TCP_SOCKET_TIMEDOUT);
    a1ec:	1c28      	adds	r0, r5, #0
    a1ee:	2102      	movs	r1, #2
    a1f0:	4b59      	ldr	r3, [pc, #356]	; (a358 <process_thread_tcp_socket_process+0x240>)
    a1f2:	4798      	blx	r3
    relisten(s);
    a1f4:	1c28      	adds	r0, r5, #0
    a1f6:	4b5c      	ldr	r3, [pc, #368]	; (a368 <process_thread_tcp_socket_process+0x250>)
    a1f8:	4798      	blx	r3
  }

  if(uip_aborted()) {
    a1fa:	4b58      	ldr	r3, [pc, #352]	; (a35c <process_thread_tcp_socket_process+0x244>)
    a1fc:	781b      	ldrb	r3, [r3, #0]
    a1fe:	069b      	lsls	r3, r3, #26
    a200:	d50b      	bpl.n	a21a <process_thread_tcp_socket_process+0x102>
    tcp_markconn(uip_conn, NULL);
    a202:	4b4f      	ldr	r3, [pc, #316]	; (a340 <process_thread_tcp_socket_process+0x228>)
    a204:	6818      	ldr	r0, [r3, #0]
    a206:	2100      	movs	r1, #0
    a208:	4b52      	ldr	r3, [pc, #328]	; (a354 <process_thread_tcp_socket_process+0x23c>)
    a20a:	4798      	blx	r3
    call_event(s, TCP_SOCKET_ABORTED);
    a20c:	1c28      	adds	r0, r5, #0
    a20e:	2103      	movs	r1, #3
    a210:	4b51      	ldr	r3, [pc, #324]	; (a358 <process_thread_tcp_socket_process+0x240>)
    a212:	4798      	blx	r3
    relisten(s);
    a214:	1c28      	adds	r0, r5, #0
    a216:	4b54      	ldr	r3, [pc, #336]	; (a368 <process_thread_tcp_socket_process+0x250>)
    a218:	4798      	blx	r3

  }

  if(s == NULL) {
    a21a:	2d00      	cmp	r5, #0
    a21c:	d103      	bne.n	a226 <process_thread_tcp_socket_process+0x10e>
    uip_abort();
    a21e:	2220      	movs	r2, #32
    a220:	4b4e      	ldr	r3, [pc, #312]	; (a35c <process_thread_tcp_socket_process+0x244>)
    a222:	701a      	strb	r2, [r3, #0]
    a224:	e784      	b.n	a130 <process_thread_tcp_socket_process+0x18>
    return;
  }

  if(uip_acked()) {
    a226:	4b4d      	ldr	r3, [pc, #308]	; (a35c <process_thread_tcp_socket_process+0x244>)
    a228:	781b      	ldrb	r3, [r3, #0]
    a22a:	07db      	lsls	r3, r3, #31
    a22c:	d52e      	bpl.n	a28c <process_thread_tcp_socket_process+0x174>
/*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*/
static void
acked(struct tcp_socket *s)
{
  if(s->output_senddata_len > 0) {
    a22e:	8ceb      	ldrh	r3, [r5, #38]	; 0x26
    a230:	2b00      	cmp	r3, #0
    a232:	d02b      	beq.n	a28c <process_thread_tcp_socket_process+0x174>
    /* Copy the data in the outputbuf down and update outputbufptr and
       outputbuf_lastsent */

    if(s->output_data_send_nxt > 0) {
    a234:	8cab      	ldrh	r3, [r5, #36]	; 0x24
    a236:	2b00      	cmp	r3, #0
    a238:	d079      	beq.n	a32e <process_thread_tcp_socket_process+0x216>
      memcpy(&s->output_data_ptr[0],
             &s->output_data_ptr[s->output_data_send_nxt],
             s->output_data_maxlen - s->output_data_send_nxt);
    a23a:	8c2a      	ldrh	r2, [r5, #32]
    a23c:	1ad2      	subs	r2, r2, r3
    /* Copy the data in the outputbuf down and update outputbufptr and
       outputbuf_lastsent */

    if(s->output_data_send_nxt > 0) {
      memcpy(&s->output_data_ptr[0],
             &s->output_data_ptr[s->output_data_send_nxt],
    a23e:	69a9      	ldr	r1, [r5, #24]
    a240:	18c9      	adds	r1, r1, r3
  if(s->output_senddata_len > 0) {
    /* Copy the data in the outputbuf down and update outputbufptr and
       outputbuf_lastsent */

    if(s->output_data_send_nxt > 0) {
      memcpy(&s->output_data_ptr[0],
    a242:	69a8      	ldr	r0, [r5, #24]
    a244:	4b49      	ldr	r3, [pc, #292]	; (a36c <process_thread_tcp_socket_process+0x254>)
    a246:	4798      	blx	r3
             &s->output_data_ptr[s->output_data_send_nxt],
             s->output_data_maxlen - s->output_data_send_nxt);
    }
    if(s->output_data_len < s->output_data_send_nxt) {
    a248:	8c69      	ldrh	r1, [r5, #34]	; 0x22
    a24a:	8cab      	ldrh	r3, [r5, #36]	; 0x24
    a24c:	4299      	cmp	r1, r3
    a24e:	d213      	bcs.n	a278 <process_thread_tcp_socket_process+0x160>
      printf("tcp: acked assertion failed s->output_data_len (%d) < s->output_data_send_nxt (%d)\n\r",
    a250:	4847      	ldr	r0, [pc, #284]	; (a370 <process_thread_tcp_socket_process+0x258>)
    a252:	1c1a      	adds	r2, r3, #0
    a254:	4b47      	ldr	r3, [pc, #284]	; (a374 <process_thread_tcp_socket_process+0x25c>)
    a256:	4798      	blx	r3
             s->output_data_len,
             s->output_data_send_nxt);
      tcp_markconn(uip_conn, NULL);
    a258:	4b39      	ldr	r3, [pc, #228]	; (a340 <process_thread_tcp_socket_process+0x228>)
    a25a:	6818      	ldr	r0, [r3, #0]
    a25c:	2100      	movs	r1, #0
    a25e:	4b3d      	ldr	r3, [pc, #244]	; (a354 <process_thread_tcp_socket_process+0x23c>)
    a260:	4798      	blx	r3
      uip_abort();
    a262:	2220      	movs	r2, #32
    a264:	4b3d      	ldr	r3, [pc, #244]	; (a35c <process_thread_tcp_socket_process+0x244>)
    a266:	701a      	strb	r2, [r3, #0]
      call_event(s, TCP_SOCKET_ABORTED);
    a268:	1c28      	adds	r0, r5, #0
    a26a:	2103      	movs	r1, #3
    a26c:	4b3a      	ldr	r3, [pc, #232]	; (a358 <process_thread_tcp_socket_process+0x240>)
    a26e:	4798      	blx	r3
      relisten(s);
    a270:	1c28      	adds	r0, r5, #0
    a272:	4b3d      	ldr	r3, [pc, #244]	; (a368 <process_thread_tcp_socket_process+0x250>)
    a274:	4798      	blx	r3
    a276:	e009      	b.n	a28c <process_thread_tcp_socket_process+0x174>
      return;
    }
    s->output_data_len -= s->output_data_send_nxt;
    a278:	1acb      	subs	r3, r1, r3
    a27a:	b29b      	uxth	r3, r3
    a27c:	846b      	strh	r3, [r5, #34]	; 0x22
    s->output_senddata_len = s->output_data_len;
    a27e:	84eb      	strh	r3, [r5, #38]	; 0x26
    s->output_data_send_nxt = 0;
    a280:	2300      	movs	r3, #0
    a282:	84ab      	strh	r3, [r5, #36]	; 0x24

    call_event(s, TCP_SOCKET_DATA_SENT);
    a284:	1c28      	adds	r0, r5, #0
    a286:	2104      	movs	r1, #4
    a288:	4b33      	ldr	r3, [pc, #204]	; (a358 <process_thread_tcp_socket_process+0x240>)
    a28a:	4798      	blx	r3
  }

  if(uip_acked()) {
    acked(s);
  }
  if(uip_newdata()) {
    a28c:	4b33      	ldr	r3, [pc, #204]	; (a35c <process_thread_tcp_socket_process+0x244>)
    a28e:	781b      	ldrb	r3, [r3, #0]
    a290:	079b      	lsls	r3, r3, #30
    a292:	d502      	bpl.n	a29a <process_thread_tcp_socket_process+0x182>
    newdata(s);
    a294:	1c28      	adds	r0, r5, #0
    a296:	4b32      	ldr	r3, [pc, #200]	; (a360 <process_thread_tcp_socket_process+0x248>)
    a298:	4798      	blx	r3
  }

  if(uip_rexmit() ||
    a29a:	4b30      	ldr	r3, [pc, #192]	; (a35c <process_thread_tcp_socket_process+0x244>)
    a29c:	781b      	ldrb	r3, [r3, #0]
     uip_newdata() ||
    a29e:	075a      	lsls	r2, r3, #29
    a2a0:	d003      	beq.n	a2aa <process_thread_tcp_socket_process+0x192>
     uip_acked()) {
    senddata(s);
    a2a2:	1c28      	adds	r0, r5, #0
    a2a4:	4b2f      	ldr	r3, [pc, #188]	; (a364 <process_thread_tcp_socket_process+0x24c>)
    a2a6:	4798      	blx	r3
    a2a8:	e004      	b.n	a2b4 <process_thread_tcp_socket_process+0x19c>
  } else if(uip_poll()) {
    a2aa:	071b      	lsls	r3, r3, #28
    a2ac:	d502      	bpl.n	a2b4 <process_thread_tcp_socket_process+0x19c>
    senddata(s);
    a2ae:	1c28      	adds	r0, r5, #0
    a2b0:	4b2c      	ldr	r3, [pc, #176]	; (a364 <process_thread_tcp_socket_process+0x24c>)
    a2b2:	4798      	blx	r3
  }

  if(s->output_data_len == 0 && s->flags & TCP_SOCKET_FLAGS_CLOSING) {
    a2b4:	8c6b      	ldrh	r3, [r5, #34]	; 0x22
    a2b6:	2b00      	cmp	r3, #0
    a2b8:	d115      	bne.n	a2e6 <process_thread_tcp_socket_process+0x1ce>
    a2ba:	332a      	adds	r3, #42	; 0x2a
    a2bc:	5ceb      	ldrb	r3, [r5, r3]
    a2be:	079a      	lsls	r2, r3, #30
    a2c0:	d511      	bpl.n	a2e6 <process_thread_tcp_socket_process+0x1ce>
    s->flags &= ~TCP_SOCKET_FLAGS_CLOSING;
    a2c2:	2202      	movs	r2, #2
    a2c4:	4393      	bics	r3, r2
    a2c6:	3228      	adds	r2, #40	; 0x28
    a2c8:	54ab      	strb	r3, [r5, r2]
    uip_close();
    a2ca:	3a1a      	subs	r2, #26
    a2cc:	4b23      	ldr	r3, [pc, #140]	; (a35c <process_thread_tcp_socket_process+0x244>)
    a2ce:	701a      	strb	r2, [r3, #0]
    s->c = NULL;
    a2d0:	2600      	movs	r6, #0
    a2d2:	632e      	str	r6, [r5, #48]	; 0x30
    tcp_markconn(uip_conn, NULL);
    a2d4:	4b1a      	ldr	r3, [pc, #104]	; (a340 <process_thread_tcp_socket_process+0x228>)
    a2d6:	6818      	ldr	r0, [r3, #0]
    a2d8:	2100      	movs	r1, #0
    a2da:	4b1e      	ldr	r3, [pc, #120]	; (a354 <process_thread_tcp_socket_process+0x23c>)
    a2dc:	4798      	blx	r3
    s->c = NULL;
    a2de:	632e      	str	r6, [r5, #48]	; 0x30
    /*call_event(s, TCP_SOCKET_CLOSED);*/
    relisten(s);
    a2e0:	1c28      	adds	r0, r5, #0
    a2e2:	4b21      	ldr	r3, [pc, #132]	; (a368 <process_thread_tcp_socket_process+0x250>)
    a2e4:	4798      	blx	r3
  }

  if(uip_closed()) {
    a2e6:	4b1d      	ldr	r3, [pc, #116]	; (a35c <process_thread_tcp_socket_process+0x244>)
    a2e8:	781b      	ldrb	r3, [r3, #0]
    a2ea:	06db      	lsls	r3, r3, #27
    a2ec:	d400      	bmi.n	a2f0 <process_thread_tcp_socket_process+0x1d8>
    a2ee:	e71f      	b.n	a130 <process_thread_tcp_socket_process+0x18>
    tcp_markconn(uip_conn, NULL);
    a2f0:	4b13      	ldr	r3, [pc, #76]	; (a340 <process_thread_tcp_socket_process+0x228>)
    a2f2:	6818      	ldr	r0, [r3, #0]
    a2f4:	2100      	movs	r1, #0
    a2f6:	4b17      	ldr	r3, [pc, #92]	; (a354 <process_thread_tcp_socket_process+0x23c>)
    a2f8:	4798      	blx	r3
    s->c = NULL;
    a2fa:	2300      	movs	r3, #0
    a2fc:	632b      	str	r3, [r5, #48]	; 0x30
    call_event(s, TCP_SOCKET_CLOSED);
    a2fe:	1c28      	adds	r0, r5, #0
    a300:	2101      	movs	r1, #1
    a302:	4b15      	ldr	r3, [pc, #84]	; (a358 <process_thread_tcp_socket_process+0x240>)
    a304:	4798      	blx	r3
    relisten(s);
    a306:	1c28      	adds	r0, r5, #0
    a308:	4b17      	ldr	r3, [pc, #92]	; (a368 <process_thread_tcp_socket_process+0x250>)
    a30a:	4798      	blx	r3
    a30c:	e710      	b.n	a130 <process_thread_tcp_socket_process+0x18>

    if(ev == tcpip_event) {
      appcall(data);
    }
  }
  PROCESS_END();
    a30e:	2300      	movs	r3, #0
    a310:	8003      	strh	r3, [r0, #0]
    a312:	2003      	movs	r0, #3
    a314:	e00d      	b.n	a332 <process_thread_tcp_socket_process+0x21a>
  if(s != NULL && s->c != NULL && s->c != uip_conn) {
    /* Safe-guard: this should not happen, as the incoming event relates to
     * a previous connection */
    return;
  }
  if(uip_connected()) {
    a316:	4b11      	ldr	r3, [pc, #68]	; (a35c <process_thread_tcp_socket_process+0x244>)
    a318:	781b      	ldrb	r3, [r3, #0]
    a31a:	065a      	lsls	r2, r3, #25
    a31c:	d500      	bpl.n	a320 <process_thread_tcp_socket_process+0x208>
    a31e:	e74a      	b.n	a1b6 <process_thread_tcp_socket_process+0x9e>
    a320:	e761      	b.n	a1e6 <process_thread_tcp_socket_process+0xce>
    a322:	4b0e      	ldr	r3, [pc, #56]	; (a35c <process_thread_tcp_socket_process+0x244>)
    a324:	781b      	ldrb	r3, [r3, #0]
    a326:	065a      	lsls	r2, r3, #25
    a328:	d500      	bpl.n	a32c <process_thread_tcp_socket_process+0x214>
    a32a:	e715      	b.n	a158 <process_thread_tcp_socket_process+0x40>
    a32c:	e75b      	b.n	a1e6 <process_thread_tcp_socket_process+0xce>
    if(s->output_data_send_nxt > 0) {
      memcpy(&s->output_data_ptr[0],
             &s->output_data_ptr[s->output_data_send_nxt],
             s->output_data_maxlen - s->output_data_send_nxt);
    }
    if(s->output_data_len < s->output_data_send_nxt) {
    a32e:	8c69      	ldrh	r1, [r5, #34]	; 0x22
    a330:	e7a2      	b.n	a278 <process_thread_tcp_socket_process+0x160>
    if(ev == tcpip_event) {
      appcall(data);
    }
  }
  PROCESS_END();
}
    a332:	bc0c      	pop	{r2, r3}
    a334:	4690      	mov	r8, r2
    a336:	4699      	mov	r9, r3
    a338:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    a33a:	46c0      	nop			; (mov r8, r8)
    a33c:	200031cc 	.word	0x200031cc
    a340:	20002e74 	.word	0x20002e74
    a344:	20000b20 	.word	0x20000b20
    a348:	00005709 	.word	0x00005709
    a34c:	00009fc1 	.word	0x00009fc1
    a350:	000057b1 	.word	0x000057b1
    a354:	0000a5c1 	.word	0x0000a5c1
    a358:	0000a049 	.word	0x0000a049
    a35c:	20002e64 	.word	0x20002e64
    a360:	0000a075 	.word	0x0000a075
    a364:	0000a0e5 	.word	0x0000a0e5
    a368:	0000a05d 	.word	0x0000a05d
    a36c:	000108e7 	.word	0x000108e7
    a370:	00012b54 	.word	0x00012b54
    a374:	00010931 	.word	0x00010931

0000a378 <tcp_socket_register>:
tcp_socket_register(struct tcp_socket *s, void *ptr,
		    uint8_t *input_databuf, int input_databuf_len,
		    uint8_t *output_databuf, int output_databuf_len,
		    tcp_socket_data_callback_t input_callback,
		    tcp_socket_event_callback_t event_callback)
{
    a378:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    a37a:	1c04      	adds	r4, r0, #0
    a37c:	1c0f      	adds	r7, r1, #0
    a37e:	1c16      	adds	r6, r2, #0
    a380:	1c1d      	adds	r5, r3, #0
/*---------------------------------------------------------------------------*/
static void
init(void)
{
  static uint8_t inited = 0;
  if(!inited) {
    a382:	4b15      	ldr	r3, [pc, #84]	; (a3d8 <tcp_socket_register+0x60>)
    a384:	781b      	ldrb	r3, [r3, #0]
    a386:	2b00      	cmp	r3, #0
    a388:	d109      	bne.n	a39e <tcp_socket_register+0x26>
    list_init(socketlist);
    a38a:	4814      	ldr	r0, [pc, #80]	; (a3dc <tcp_socket_register+0x64>)
    a38c:	4b14      	ldr	r3, [pc, #80]	; (a3e0 <tcp_socket_register+0x68>)
    a38e:	4798      	blx	r3
    process_start(&tcp_socket_process, NULL);
    a390:	4814      	ldr	r0, [pc, #80]	; (a3e4 <tcp_socket_register+0x6c>)
    a392:	2100      	movs	r1, #0
    a394:	4b14      	ldr	r3, [pc, #80]	; (a3e8 <tcp_socket_register+0x70>)
    a396:	4798      	blx	r3
    inited = 1;
    a398:	2201      	movs	r2, #1
    a39a:	4b0f      	ldr	r3, [pc, #60]	; (a3d8 <tcp_socket_register+0x60>)
    a39c:	701a      	strb	r2, [r3, #0]
		    tcp_socket_event_callback_t event_callback)
{

  init();

  if(s == NULL) {
    a39e:	2c00      	cmp	r4, #0
    a3a0:	d016      	beq.n	a3d0 <tcp_socket_register+0x58>
    return -1;
  }
  s->ptr = ptr;
    a3a2:	60e7      	str	r7, [r4, #12]
  s->input_data_ptr = input_databuf;
    a3a4:	6166      	str	r6, [r4, #20]
  s->input_data_maxlen = input_databuf_len;
    a3a6:	83a5      	strh	r5, [r4, #28]
  s->output_data_len = 0;
    a3a8:	2500      	movs	r5, #0
    a3aa:	8465      	strh	r5, [r4, #34]	; 0x22
  s->output_data_ptr = output_databuf;
    a3ac:	9b06      	ldr	r3, [sp, #24]
    a3ae:	61a3      	str	r3, [r4, #24]
  s->output_data_maxlen = output_databuf_len;
    a3b0:	9b07      	ldr	r3, [sp, #28]
    a3b2:	8423      	strh	r3, [r4, #32]
  s->input_callback = input_callback;
    a3b4:	9b08      	ldr	r3, [sp, #32]
    a3b6:	6063      	str	r3, [r4, #4]
  s->event_callback = event_callback;
    a3b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
    a3ba:	60a3      	str	r3, [r4, #8]
  list_add(socketlist, s);
    a3bc:	4807      	ldr	r0, [pc, #28]	; (a3dc <tcp_socket_register+0x64>)
    a3be:	1c21      	adds	r1, r4, #0
    a3c0:	4b0a      	ldr	r3, [pc, #40]	; (a3ec <tcp_socket_register+0x74>)
    a3c2:	4798      	blx	r3

  s->listen_port = 0;
    a3c4:	85a5      	strh	r5, [r4, #44]	; 0x2c
  s->flags = TCP_SOCKET_FLAGS_NONE;
    a3c6:	232a      	movs	r3, #42	; 0x2a
    a3c8:	2200      	movs	r2, #0
    a3ca:	54e2      	strb	r2, [r4, r3]
  return 1;
    a3cc:	2001      	movs	r0, #1
    a3ce:	e001      	b.n	a3d4 <tcp_socket_register+0x5c>
{

  init();

  if(s == NULL) {
    return -1;
    a3d0:	2001      	movs	r0, #1
    a3d2:	4240      	negs	r0, r0
  list_add(socketlist, s);

  s->listen_port = 0;
  s->flags = TCP_SOCKET_FLAGS_NONE;
  return 1;
}
    a3d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    a3d6:	46c0      	nop			; (mov r8, r8)
    a3d8:	20000b1e 	.word	0x20000b1e
    a3dc:	20000b20 	.word	0x20000b20
    a3e0:	00005701 	.word	0x00005701
    a3e4:	200000b0 	.word	0x200000b0
    a3e8:	0000ec69 	.word	0x0000ec69
    a3ec:	00005759 	.word	0x00005759

0000a3f0 <tcp_socket_connect>:
/*---------------------------------------------------------------------------*/
int
tcp_socket_connect(struct tcp_socket *s,
                   const uip_ipaddr_t *ipaddr,
                   uint16_t port)
{
    a3f0:	b5f0      	push	{r4, r5, r6, r7, lr}
    a3f2:	b083      	sub	sp, #12
  if(s == NULL) {
    a3f4:	2800      	cmp	r0, #0
    a3f6:	d01c      	beq.n	a432 <tcp_socket_connect+0x42>
    a3f8:	1c16      	adds	r6, r2, #0
    a3fa:	9101      	str	r1, [sp, #4]
    a3fc:	1c04      	adds	r4, r0, #0
    return -1;
  }
  if(s->c != NULL) {
    a3fe:	6b00      	ldr	r0, [r0, #48]	; 0x30
    a400:	2800      	cmp	r0, #0
    a402:	d002      	beq.n	a40a <tcp_socket_connect+0x1a>
    tcp_markconn(s->c, NULL);
    a404:	2100      	movs	r1, #0
    a406:	4b0d      	ldr	r3, [pc, #52]	; (a43c <tcp_socket_connect+0x4c>)
    a408:	4798      	blx	r3
  }
  PROCESS_CONTEXT_BEGIN(&tcp_socket_process);
    a40a:	4f0d      	ldr	r7, [pc, #52]	; (a440 <tcp_socket_connect+0x50>)
    a40c:	683d      	ldr	r5, [r7, #0]
    a40e:	4b0d      	ldr	r3, [pc, #52]	; (a444 <tcp_socket_connect+0x54>)
    a410:	603b      	str	r3, [r7, #0]
  s->c = tcp_connect(ipaddr, uip_htons(port), s);
    a412:	1c30      	adds	r0, r6, #0
    a414:	4b0c      	ldr	r3, [pc, #48]	; (a448 <tcp_socket_connect+0x58>)
    a416:	4798      	blx	r3
    a418:	1c01      	adds	r1, r0, #0
    a41a:	9801      	ldr	r0, [sp, #4]
    a41c:	1c22      	adds	r2, r4, #0
    a41e:	4b0b      	ldr	r3, [pc, #44]	; (a44c <tcp_socket_connect+0x5c>)
    a420:	4798      	blx	r3
    a422:	6320      	str	r0, [r4, #48]	; 0x30
  PROCESS_CONTEXT_END();
    a424:	603d      	str	r5, [r7, #0]
  if(s->c == NULL) {
    return -1;
  } else {
    return 1;
    a426:	4243      	negs	r3, r0
    a428:	4158      	adcs	r0, r3
    a42a:	4240      	negs	r0, r0
    a42c:	2301      	movs	r3, #1
    a42e:	4318      	orrs	r0, r3
    a430:	e001      	b.n	a436 <tcp_socket_connect+0x46>
tcp_socket_connect(struct tcp_socket *s,
                   const uip_ipaddr_t *ipaddr,
                   uint16_t port)
{
  if(s == NULL) {
    return -1;
    a432:	2001      	movs	r0, #1
    a434:	4240      	negs	r0, r0
  if(s->c == NULL) {
    return -1;
  } else {
    return 1;
  }
}
    a436:	b003      	add	sp, #12
    a438:	bdf0      	pop	{r4, r5, r6, r7, pc}
    a43a:	46c0      	nop			; (mov r8, r8)
    a43c:	0000a5c1 	.word	0x0000a5c1
    a440:	20001d2c 	.word	0x20001d2c
    a444:	200000b0 	.word	0x200000b0
    a448:	00009fc1 	.word	0x00009fc1
    a44c:	0000aa41 	.word	0x0000aa41

0000a450 <tcp_socket_unlisten>:
  return 1;
}
/*---------------------------------------------------------------------------*/
int
tcp_socket_unlisten(struct tcp_socket *s)
{
    a450:	b570      	push	{r4, r5, r6, lr}
  if(s == NULL) {
    a452:	2800      	cmp	r0, #0
    a454:	d013      	beq.n	a47e <tcp_socket_unlisten+0x2e>
    a456:	1c04      	adds	r4, r0, #0
    return -1;
  }

  PROCESS_CONTEXT_BEGIN(&tcp_socket_process);
    a458:	4d0a      	ldr	r5, [pc, #40]	; (a484 <tcp_socket_unlisten+0x34>)
    a45a:	682e      	ldr	r6, [r5, #0]
    a45c:	4b0a      	ldr	r3, [pc, #40]	; (a488 <tcp_socket_unlisten+0x38>)
    a45e:	602b      	str	r3, [r5, #0]
  tcp_unlisten(uip_htons(s->listen_port));
    a460:	8d80      	ldrh	r0, [r0, #44]	; 0x2c
    a462:	4b0a      	ldr	r3, [pc, #40]	; (a48c <tcp_socket_unlisten+0x3c>)
    a464:	4798      	blx	r3
    a466:	4b0a      	ldr	r3, [pc, #40]	; (a490 <tcp_socket_unlisten+0x40>)
    a468:	4798      	blx	r3
  PROCESS_CONTEXT_END();
    a46a:	602e      	str	r6, [r5, #0]
  s->listen_port = 0;
    a46c:	2300      	movs	r3, #0
    a46e:	85a3      	strh	r3, [r4, #44]	; 0x2c
  s->flags &= ~TCP_SOCKET_FLAGS_LISTENING;
    a470:	222a      	movs	r2, #42	; 0x2a
    a472:	5ca3      	ldrb	r3, [r4, r2]
    a474:	2101      	movs	r1, #1
    a476:	438b      	bics	r3, r1
    a478:	54a3      	strb	r3, [r4, r2]
  return 1;
    a47a:	2001      	movs	r0, #1
    a47c:	e001      	b.n	a482 <tcp_socket_unlisten+0x32>
/*---------------------------------------------------------------------------*/
int
tcp_socket_unlisten(struct tcp_socket *s)
{
  if(s == NULL) {
    return -1;
    a47e:	2001      	movs	r0, #1
    a480:	4240      	negs	r0, r0
  tcp_unlisten(uip_htons(s->listen_port));
  PROCESS_CONTEXT_END();
  s->listen_port = 0;
  s->flags &= ~TCP_SOCKET_FLAGS_LISTENING;
  return 1;
}
    a482:	bd70      	pop	{r4, r5, r6, pc}
    a484:	20001d2c 	.word	0x20001d2c
    a488:	200000b0 	.word	0x200000b0
    a48c:	00009fc1 	.word	0x00009fc1
    a490:	0000a56d 	.word	0x0000a56d

0000a494 <tcp_socket_send>:
/*---------------------------------------------------------------------------*/
int
tcp_socket_send(struct tcp_socket *s,
                const uint8_t *data, int datalen)
{
    a494:	b538      	push	{r3, r4, r5, lr}
  int len;

  if(s == NULL) {
    a496:	2800      	cmp	r0, #0
    a498:	d016      	beq.n	a4c8 <tcp_socket_send+0x34>
    return -1;
  }

  len = MIN(datalen, s->output_data_maxlen - s->output_data_len);
    a49a:	8c43      	ldrh	r3, [r0, #34]	; 0x22
    a49c:	8c04      	ldrh	r4, [r0, #32]
    a49e:	1ae4      	subs	r4, r4, r3
    a4a0:	1e15      	subs	r5, r2, #0
    a4a2:	42a5      	cmp	r5, r4
    a4a4:	dd00      	ble.n	a4a8 <tcp_socket_send+0x14>
    a4a6:	1c25      	adds	r5, r4, #0
    a4a8:	1c04      	adds	r4, r0, #0

  memcpy(&s->output_data_ptr[s->output_data_len], data, len);
    a4aa:	6982      	ldr	r2, [r0, #24]
    a4ac:	18d0      	adds	r0, r2, r3
    a4ae:	1c2a      	adds	r2, r5, #0
    a4b0:	4b07      	ldr	r3, [pc, #28]	; (a4d0 <tcp_socket_send+0x3c>)
    a4b2:	4798      	blx	r3
  s->output_data_len += len;
    a4b4:	8c63      	ldrh	r3, [r4, #34]	; 0x22
    a4b6:	18eb      	adds	r3, r5, r3
    a4b8:	b29b      	uxth	r3, r3
    a4ba:	8463      	strh	r3, [r4, #34]	; 0x22

  if(s->output_senddata_len == 0) {
    a4bc:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
    s->output_senddata_len = s->output_data_len;
  }

  return len;
    a4be:	1c28      	adds	r0, r5, #0
  len = MIN(datalen, s->output_data_maxlen - s->output_data_len);

  memcpy(&s->output_data_ptr[s->output_data_len], data, len);
  s->output_data_len += len;

  if(s->output_senddata_len == 0) {
    a4c0:	2a00      	cmp	r2, #0
    a4c2:	d103      	bne.n	a4cc <tcp_socket_send+0x38>
    s->output_senddata_len = s->output_data_len;
    a4c4:	84e3      	strh	r3, [r4, #38]	; 0x26
    a4c6:	e001      	b.n	a4cc <tcp_socket_send+0x38>
                const uint8_t *data, int datalen)
{
  int len;

  if(s == NULL) {
    return -1;
    a4c8:	2001      	movs	r0, #1
    a4ca:	4240      	negs	r0, r0
  if(s->output_senddata_len == 0) {
    s->output_senddata_len = s->output_data_len;
  }

  return len;
}
    a4cc:	bd38      	pop	{r3, r4, r5, pc}
    a4ce:	46c0      	nop			; (mov r8, r8)
    a4d0:	000108e7 	.word	0x000108e7

0000a4d4 <tcp_socket_close>:
}
/*---------------------------------------------------------------------------*/
int
tcp_socket_close(struct tcp_socket *s)
{
  if(s == NULL) {
    a4d4:	2800      	cmp	r0, #0
    a4d6:	d006      	beq.n	a4e6 <tcp_socket_close+0x12>
    return -1;
  }

  s->flags |= TCP_SOCKET_FLAGS_CLOSING;
    a4d8:	222a      	movs	r2, #42	; 0x2a
    a4da:	5c81      	ldrb	r1, [r0, r2]
    a4dc:	2302      	movs	r3, #2
    a4de:	430b      	orrs	r3, r1
    a4e0:	5483      	strb	r3, [r0, r2]
  return 1;
    a4e2:	2001      	movs	r0, #1
    a4e4:	e001      	b.n	a4ea <tcp_socket_close+0x16>
/*---------------------------------------------------------------------------*/
int
tcp_socket_close(struct tcp_socket *s)
{
  if(s == NULL) {
    return -1;
    a4e6:	2001      	movs	r0, #1
    a4e8:	4240      	negs	r0, r0
  }

  s->flags |= TCP_SOCKET_FLAGS_CLOSING;
  return 1;
}
    a4ea:	4770      	bx	lr

0000a4ec <tcp_socket_unregister>:
/*---------------------------------------------------------------------------*/
int
tcp_socket_unregister(struct tcp_socket *s)
{
    a4ec:	b510      	push	{r4, lr}
  if(s == NULL) {
    a4ee:	2800      	cmp	r0, #0
    a4f0:	d00e      	beq.n	a510 <tcp_socket_unregister+0x24>
    a4f2:	1c04      	adds	r4, r0, #0
    return -1;
  }

  tcp_socket_unlisten(s);
    a4f4:	4b08      	ldr	r3, [pc, #32]	; (a518 <tcp_socket_unregister+0x2c>)
    a4f6:	4798      	blx	r3
  if(s->c != NULL) {
    a4f8:	6b20      	ldr	r0, [r4, #48]	; 0x30
    a4fa:	2800      	cmp	r0, #0
    a4fc:	d002      	beq.n	a504 <tcp_socket_unregister+0x18>
    tcp_attach(s->c, NULL);
    a4fe:	2100      	movs	r1, #0
    a500:	4b06      	ldr	r3, [pc, #24]	; (a51c <tcp_socket_unregister+0x30>)
    a502:	4798      	blx	r3
  }
  list_remove(socketlist, s);
    a504:	4806      	ldr	r0, [pc, #24]	; (a520 <tcp_socket_unregister+0x34>)
    a506:	1c21      	adds	r1, r4, #0
    a508:	4b06      	ldr	r3, [pc, #24]	; (a524 <tcp_socket_unregister+0x38>)
    a50a:	4798      	blx	r3
  return 1;
    a50c:	2001      	movs	r0, #1
    a50e:	e001      	b.n	a514 <tcp_socket_unregister+0x28>
/*---------------------------------------------------------------------------*/
int
tcp_socket_unregister(struct tcp_socket *s)
{
  if(s == NULL) {
    return -1;
    a510:	2001      	movs	r0, #1
    a512:	4240      	negs	r0, r0
  if(s->c != NULL) {
    tcp_attach(s->c, NULL);
  }
  list_remove(socketlist, s);
  return 1;
}
    a514:	bd10      	pop	{r4, pc}
    a516:	46c0      	nop			; (mov r8, r8)
    a518:	0000a451 	.word	0x0000a451
    a51c:	0000a5c1 	.word	0x0000a5c1
    a520:	20000b20 	.word	0x20000b20
    a524:	00005725 	.word	0x00005725

0000a528 <start_periodic_tcp_timer>:
PROCESS(tcpip_process, "TCP/IP stack");

/*---------------------------------------------------------------------------*/
static void
start_periodic_tcp_timer(void)
{
    a528:	b508      	push	{r3, lr}
  if(etimer_expired(&periodic)) {
    a52a:	4804      	ldr	r0, [pc, #16]	; (a53c <start_periodic_tcp_timer+0x14>)
    a52c:	4b04      	ldr	r3, [pc, #16]	; (a540 <start_periodic_tcp_timer+0x18>)
    a52e:	4798      	blx	r3
    a530:	2800      	cmp	r0, #0
    a532:	d002      	beq.n	a53a <start_periodic_tcp_timer+0x12>
    etimer_restart(&periodic);
    a534:	4801      	ldr	r0, [pc, #4]	; (a53c <start_periodic_tcp_timer+0x14>)
    a536:	4b03      	ldr	r3, [pc, #12]	; (a544 <start_periodic_tcp_timer+0x1c>)
    a538:	4798      	blx	r3
  }
}
    a53a:	bd08      	pop	{r3, pc}
    a53c:	20000bd0 	.word	0x20000bd0
    a540:	0000e955 	.word	0x0000e955
    a544:	0000e93d 	.word	0x0000e93d

0000a548 <tcpip_output>:

static uint8_t (* outputfunc)(const uip_lladdr_t *a);

uint8_t
tcpip_output(const uip_lladdr_t *a)
{
    a548:	b508      	push	{r3, lr}
  int ret;
  if(outputfunc != NULL) {
    a54a:	4b04      	ldr	r3, [pc, #16]	; (a55c <tcpip_output+0x14>)
    a54c:	681b      	ldr	r3, [r3, #0]
    a54e:	2b00      	cmp	r3, #0
    a550:	d001      	beq.n	a556 <tcpip_output+0xe>
    ret = outputfunc(a);
    a552:	4798      	blx	r3
    return ret;
    a554:	e000      	b.n	a558 <tcpip_output+0x10>
  }
  UIP_LOG("tcpip_output: Use tcpip_set_outputfunc() to set an output function");
  return 0;
    a556:	2000      	movs	r0, #0
}
    a558:	bd08      	pop	{r3, pc}
    a55a:	46c0      	nop			; (mov r8, r8)
    a55c:	20000be0 	.word	0x20000be0

0000a560 <tcpip_set_outputfunc>:

void
tcpip_set_outputfunc(uint8_t (*f)(const uip_lladdr_t *))
{
  outputfunc = f;
    a560:	4b01      	ldr	r3, [pc, #4]	; (a568 <tcpip_set_outputfunc+0x8>)
    a562:	6018      	str	r0, [r3, #0]
}
    a564:	4770      	bx	lr
    a566:	46c0      	nop			; (mov r8, r8)
    a568:	20000be0 	.word	0x20000be0

0000a56c <tcp_unlisten>:
}
#endif /* UIP_ACTIVE_OPEN */
/*---------------------------------------------------------------------------*/
void
tcp_unlisten(uint16_t port)
{
    a56c:	b538      	push	{r3, r4, r5, lr}
  static unsigned char i;
  struct listenport *l;

  l = s.listenports;
  for(i = 0; i < UIP_LISTENPORTS; ++i) {
    a56e:	2200      	movs	r2, #0
    a570:	4b0f      	ldr	r3, [pc, #60]	; (a5b0 <tcp_unlisten+0x44>)
    a572:	701a      	strb	r2, [r3, #0]
    if(l->port == port &&
       l->p == PROCESS_CURRENT()) {
    a574:	4b0f      	ldr	r3, [pc, #60]	; (a5b4 <tcp_unlisten+0x48>)
    a576:	681d      	ldr	r5, [r3, #0]
    a578:	2101      	movs	r1, #1
    a57a:	2400      	movs	r4, #0
    a57c:	4a0e      	ldr	r2, [pc, #56]	; (a5b8 <tcp_unlisten+0x4c>)
    a57e:	e000      	b.n	a582 <tcp_unlisten+0x16>
    a580:	1c19      	adds	r1, r3, #0
  static unsigned char i;
  struct listenport *l;

  l = s.listenports;
  for(i = 0; i < UIP_LISTENPORTS; ++i) {
    if(l->port == port &&
    a582:	8813      	ldrh	r3, [r2, #0]
    a584:	4283      	cmp	r3, r0
    a586:	d109      	bne.n	a59c <tcp_unlisten+0x30>
    a588:	6853      	ldr	r3, [r2, #4]
    a58a:	42ab      	cmp	r3, r5
    a58c:	d106      	bne.n	a59c <tcp_unlisten+0x30>
    a58e:	4b08      	ldr	r3, [pc, #32]	; (a5b0 <tcp_unlisten+0x44>)
    a590:	701c      	strb	r4, [r3, #0]
       l->p == PROCESS_CURRENT()) {
      l->port = 0;
    a592:	2300      	movs	r3, #0
    a594:	8013      	strh	r3, [r2, #0]
      uip_unlisten(port);
    a596:	4b09      	ldr	r3, [pc, #36]	; (a5bc <tcp_unlisten+0x50>)
    a598:	4798      	blx	r3
      break;
    a59a:	e007      	b.n	a5ac <tcp_unlisten+0x40>
    }
    ++l;
    a59c:	3208      	adds	r2, #8
    a59e:	1c4b      	adds	r3, r1, #1
    a5a0:	b2db      	uxtb	r3, r3
{
  static unsigned char i;
  struct listenport *l;

  l = s.listenports;
  for(i = 0; i < UIP_LISTENPORTS; ++i) {
    a5a2:	1c0c      	adds	r4, r1, #0
    a5a4:	2b15      	cmp	r3, #21
    a5a6:	d1eb      	bne.n	a580 <tcp_unlisten+0x14>
    a5a8:	4b01      	ldr	r3, [pc, #4]	; (a5b0 <tcp_unlisten+0x44>)
    a5aa:	7019      	strb	r1, [r3, #0]
      uip_unlisten(port);
      break;
    }
    ++l;
  }
}
    a5ac:	bd38      	pop	{r3, r4, r5, pc}
    a5ae:	46c0      	nop			; (mov r8, r8)
    a5b0:	20000bcd 	.word	0x20000bcd
    a5b4:	20001d2c 	.word	0x20001d2c
    a5b8:	20000b28 	.word	0x20000b28
    a5bc:	00008e01 	.word	0x00008e01

0000a5c0 <tcp_attach>:
	   void *appstate)
{
  uip_tcp_appstate_t *s;

  s = &conn->appstate;
  s->p = PROCESS_CURRENT();
    a5c0:	4b02      	ldr	r3, [pc, #8]	; (a5cc <tcp_attach+0xc>)
    a5c2:	681b      	ldr	r3, [r3, #0]
    a5c4:	6283      	str	r3, [r0, #40]	; 0x28
  s->state = appstate;
    a5c6:	62c1      	str	r1, [r0, #44]	; 0x2c
}
    a5c8:	4770      	bx	lr
    a5ca:	46c0      	nop			; (mov r8, r8)
    a5cc:	20001d2c 	.word	0x20001d2c

0000a5d0 <tcpip_icmp6_call>:
  return 1;
}

void
tcpip_icmp6_call(uint8_t type)
{
    a5d0:	b500      	push	{lr}
    a5d2:	b083      	sub	sp, #12
    a5d4:	466b      	mov	r3, sp
    a5d6:	71d8      	strb	r0, [r3, #7]
  if(uip_icmp6_conns.appstate.p != PROCESS_NONE) {
    a5d8:	4b05      	ldr	r3, [pc, #20]	; (a5f0 <tcpip_icmp6_call+0x20>)
    a5da:	6818      	ldr	r0, [r3, #0]
    a5dc:	2800      	cmp	r0, #0
    a5de:	d005      	beq.n	a5ec <tcpip_icmp6_call+0x1c>
    /* XXX: This is a hack that needs to be updated. Passing a pointer (&type)
       like this only works with process_post_synch. */
    process_post_synch(uip_icmp6_conns.appstate.p, tcpip_icmp6_event, &type);
    a5e0:	4b04      	ldr	r3, [pc, #16]	; (a5f4 <tcpip_icmp6_call+0x24>)
    a5e2:	7819      	ldrb	r1, [r3, #0]
    a5e4:	466b      	mov	r3, sp
    a5e6:	1dda      	adds	r2, r3, #7
    a5e8:	4b03      	ldr	r3, [pc, #12]	; (a5f8 <tcpip_icmp6_call+0x28>)
    a5ea:	4798      	blx	r3
  }
  return;
}
    a5ec:	b003      	add	sp, #12
    a5ee:	bd00      	pop	{pc}
    a5f0:	20003058 	.word	0x20003058
    a5f4:	200031cd 	.word	0x200031cd
    a5f8:	0000ec51 	.word	0x0000ec51

0000a5fc <tcpip_input>:
  };
}
/*---------------------------------------------------------------------------*/
void
tcpip_input(void)
{
    a5fc:	b508      	push	{r3, lr}
  process_post_synch(&tcpip_process, PACKET_INPUT, NULL);
    a5fe:	4805      	ldr	r0, [pc, #20]	; (a614 <tcpip_input+0x18>)
    a600:	2102      	movs	r1, #2
    a602:	2200      	movs	r2, #0
    a604:	4b04      	ldr	r3, [pc, #16]	; (a618 <tcpip_input+0x1c>)
    a606:	4798      	blx	r3
  uip_len = 0;
    a608:	2200      	movs	r2, #0
    a60a:	4b04      	ldr	r3, [pc, #16]	; (a61c <tcpip_input+0x20>)
    a60c:	801a      	strh	r2, [r3, #0]
#if UIP_CONF_IPV6
  uip_ext_len = 0;
    a60e:	4b04      	ldr	r3, [pc, #16]	; (a620 <tcpip_input+0x24>)
    a610:	701a      	strb	r2, [r3, #0]
#endif /*UIP_CONF_IPV6*/
}
    a612:	bd08      	pop	{r3, pc}
    a614:	200000c0 	.word	0x200000c0
    a618:	0000ec51 	.word	0x0000ec51
    a61c:	20002cc0 	.word	0x20002cc0
    a620:	20000b12 	.word	0x20000b12

0000a624 <tcpip_ipv6_output>:
/*---------------------------------------------------------------------------*/
#if UIP_CONF_IPV6
void
tcpip_ipv6_output(void)
{
    a624:	b538      	push	{r3, r4, r5, lr}
  uip_ds6_nbr_t *nbr = NULL;
  uip_ipaddr_t *nexthop;

  if(uip_len == 0) {
    a626:	4b5c      	ldr	r3, [pc, #368]	; (a798 <tcpip_ipv6_output+0x174>)
    a628:	881b      	ldrh	r3, [r3, #0]
    a62a:	2b00      	cmp	r3, #0
    a62c:	d100      	bne.n	a630 <tcpip_ipv6_output+0xc>
    a62e:	e0b1      	b.n	a794 <tcpip_ipv6_output+0x170>
    return;
  }

  if(uip_len > UIP_LINK_MTU) {
    a630:	22a0      	movs	r2, #160	; 0xa0
    a632:	00d2      	lsls	r2, r2, #3
    a634:	4293      	cmp	r3, r2
    a636:	d903      	bls.n	a640 <tcpip_ipv6_output+0x1c>
    UIP_LOG("tcpip_ipv6_output: Packet to big");
    uip_len = 0;
    a638:	2200      	movs	r2, #0
    a63a:	4b57      	ldr	r3, [pc, #348]	; (a798 <tcpip_ipv6_output+0x174>)
    a63c:	801a      	strh	r2, [r3, #0]
    return;
    a63e:	e0a9      	b.n	a794 <tcpip_ipv6_output+0x170>
  }

  if(uip_is_addr_unspecified(&UIP_IP_BUF->destipaddr)){
    a640:	4b56      	ldr	r3, [pc, #344]	; (a79c <tcpip_ipv6_output+0x178>)
    a642:	8b1b      	ldrh	r3, [r3, #24]
    a644:	2b00      	cmp	r3, #0
    a646:	d11f      	bne.n	a688 <tcpip_ipv6_output+0x64>
    a648:	4b54      	ldr	r3, [pc, #336]	; (a79c <tcpip_ipv6_output+0x178>)
    a64a:	8b5b      	ldrh	r3, [r3, #26]
    a64c:	2b00      	cmp	r3, #0
    a64e:	d11b      	bne.n	a688 <tcpip_ipv6_output+0x64>
    a650:	4b52      	ldr	r3, [pc, #328]	; (a79c <tcpip_ipv6_output+0x178>)
    a652:	8b9b      	ldrh	r3, [r3, #28]
    a654:	2b00      	cmp	r3, #0
    a656:	d117      	bne.n	a688 <tcpip_ipv6_output+0x64>
    a658:	4b50      	ldr	r3, [pc, #320]	; (a79c <tcpip_ipv6_output+0x178>)
    a65a:	8bdb      	ldrh	r3, [r3, #30]
    a65c:	2b00      	cmp	r3, #0
    a65e:	d113      	bne.n	a688 <tcpip_ipv6_output+0x64>
    a660:	4b4e      	ldr	r3, [pc, #312]	; (a79c <tcpip_ipv6_output+0x178>)
    a662:	8c1b      	ldrh	r3, [r3, #32]
    a664:	2b00      	cmp	r3, #0
    a666:	d10f      	bne.n	a688 <tcpip_ipv6_output+0x64>
    a668:	4b4c      	ldr	r3, [pc, #304]	; (a79c <tcpip_ipv6_output+0x178>)
    a66a:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
    a66c:	2b00      	cmp	r3, #0
    a66e:	d10b      	bne.n	a688 <tcpip_ipv6_output+0x64>
    a670:	4b4a      	ldr	r3, [pc, #296]	; (a79c <tcpip_ipv6_output+0x178>)
    a672:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
    a674:	2b00      	cmp	r3, #0
    a676:	d107      	bne.n	a688 <tcpip_ipv6_output+0x64>
    a678:	4b48      	ldr	r3, [pc, #288]	; (a79c <tcpip_ipv6_output+0x178>)
    a67a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
    a67c:	2b00      	cmp	r3, #0
    a67e:	d103      	bne.n	a688 <tcpip_ipv6_output+0x64>
    UIP_LOG("tcpip_ipv6_output: Destination address unspecified");
    uip_len = 0;
    a680:	2200      	movs	r2, #0
    a682:	4b45      	ldr	r3, [pc, #276]	; (a798 <tcpip_ipv6_output+0x174>)
    a684:	801a      	strh	r2, [r3, #0]
    return;
    a686:	e085      	b.n	a794 <tcpip_ipv6_output+0x170>
  }

  if(!uip_is_addr_mcast(&UIP_IP_BUF->destipaddr)) {
    a688:	4b44      	ldr	r3, [pc, #272]	; (a79c <tcpip_ipv6_output+0x178>)
    a68a:	7e1b      	ldrb	r3, [r3, #24]
    a68c:	2bff      	cmp	r3, #255	; 0xff
    a68e:	d079      	beq.n	a784 <tcpip_ipv6_output+0x160>
    nbr = NULL;

    /* We first check if the destination address is on our immediate
       link. If so, we simply use the destination address as our
       nexthop address. */
    if(uip_ds6_is_addr_onlink(&UIP_IP_BUF->destipaddr)){
    a690:	4843      	ldr	r0, [pc, #268]	; (a7a0 <tcpip_ipv6_output+0x17c>)
    a692:	4b44      	ldr	r3, [pc, #272]	; (a7a4 <tcpip_ipv6_output+0x180>)
    a694:	4798      	blx	r3
    a696:	2800      	cmp	r0, #0
    a698:	d11c      	bne.n	a6d4 <tcpip_ipv6_output+0xb0>
      nexthop = &UIP_IP_BUF->destipaddr;
    } else {
      uip_ds6_route_t *route;
      /* Check if we have a route to the destination address. */
      route = uip_ds6_route_lookup(&UIP_IP_BUF->destipaddr);
    a69a:	4841      	ldr	r0, [pc, #260]	; (a7a0 <tcpip_ipv6_output+0x17c>)
    a69c:	4b42      	ldr	r3, [pc, #264]	; (a7a8 <tcpip_ipv6_output+0x184>)
    a69e:	4798      	blx	r3
    a6a0:	1e05      	subs	r5, r0, #0

      /* No route was found - we send to the default route instead. */
      if(route == NULL) {
    a6a2:	d107      	bne.n	a6b4 <tcpip_ipv6_output+0x90>
        PRINTF("tcpip_ipv6_output: no route found, using default route\n\r");
        nexthop = uip_ds6_defrt_choose();
    a6a4:	4b41      	ldr	r3, [pc, #260]	; (a7ac <tcpip_ipv6_output+0x188>)
    a6a6:	4798      	blx	r3
    a6a8:	1e04      	subs	r4, r0, #0
        if(nexthop == NULL) {
    a6aa:	d114      	bne.n	a6d6 <tcpip_ipv6_output+0xb2>
	  }
	  UIP_FALLBACK_INTERFACE.output();
#else
          PRINTF("tcpip_ipv6_output: Destination off-link but no route\n\r");
#endif /* !UIP_FALLBACK_INTERFACE */
          uip_len = 0;
    a6ac:	2200      	movs	r2, #0
    a6ae:	4b3a      	ldr	r3, [pc, #232]	; (a798 <tcpip_ipv6_output+0x174>)
    a6b0:	801a      	strh	r2, [r3, #0]
          return;
    a6b2:	e06f      	b.n	a794 <tcpip_ipv6_output+0x170>
        }

      } else {
        /* A route was found, so we look up the nexthop neighbor for
           the route. */
        nexthop = uip_ds6_route_nexthop(route);
    a6b4:	4b3e      	ldr	r3, [pc, #248]	; (a7b0 <tcpip_ipv6_output+0x18c>)
    a6b6:	4798      	blx	r3
    a6b8:	1e04      	subs	r4, r0, #0

        /* If the nexthop is dead, for example because the neighbor
           never responded to link-layer acks, we drop its route. */
        if(nexthop == NULL) {
    a6ba:	d10c      	bne.n	a6d6 <tcpip_ipv6_output+0xb2>
             network, we'll trigger a global repair berfore we remove
             the route. */
          rpl_dag_t *dag;
          rpl_instance_t *instance;

          dag = (rpl_dag_t *)route->state.dag;
    a6bc:	69eb      	ldr	r3, [r5, #28]
          if(dag != NULL) {
    a6be:	2b00      	cmp	r3, #0
    a6c0:	d004      	beq.n	a6cc <tcpip_ipv6_output+0xa8>
            instance = dag->instance;

            rpl_repair_root(instance->instance_id);
    a6c2:	6a1a      	ldr	r2, [r3, #32]
    a6c4:	238c      	movs	r3, #140	; 0x8c
    a6c6:	5cd0      	ldrb	r0, [r2, r3]
    a6c8:	4b3a      	ldr	r3, [pc, #232]	; (a7b4 <tcpip_ipv6_output+0x190>)
    a6ca:	4798      	blx	r3
          }
#endif /* UIP_CONF_RPL */
          uip_ds6_route_rm(route);
    a6cc:	1c28      	adds	r0, r5, #0
    a6ce:	4b3a      	ldr	r3, [pc, #232]	; (a7b8 <tcpip_ipv6_output+0x194>)
    a6d0:	4798      	blx	r3

          /* We don't have a nexthop to send the packet to, so we drop
             it. */
          return;
    a6d2:	e05f      	b.n	a794 <tcpip_ipv6_output+0x170>

    /* We first check if the destination address is on our immediate
       link. If so, we simply use the destination address as our
       nexthop address. */
    if(uip_ds6_is_addr_onlink(&UIP_IP_BUF->destipaddr)){
      nexthop = &UIP_IP_BUF->destipaddr;
    a6d4:	4c32      	ldr	r4, [pc, #200]	; (a7a0 <tcpip_ipv6_output+0x17c>)
    }

    /* End of next hop determination */

#if UIP_CONF_IPV6_RPL
    if(rpl_update_header_final(nexthop)) {
    a6d6:	1c20      	adds	r0, r4, #0
    a6d8:	4b38      	ldr	r3, [pc, #224]	; (a7bc <tcpip_ipv6_output+0x198>)
    a6da:	4798      	blx	r3
    a6dc:	2800      	cmp	r0, #0
    a6de:	d003      	beq.n	a6e8 <tcpip_ipv6_output+0xc4>
      uip_len = 0;
    a6e0:	2200      	movs	r2, #0
    a6e2:	4b2d      	ldr	r3, [pc, #180]	; (a798 <tcpip_ipv6_output+0x174>)
    a6e4:	801a      	strh	r2, [r3, #0]
      return;
    a6e6:	e055      	b.n	a794 <tcpip_ipv6_output+0x170>
    }
#endif /* UIP_CONF_IPV6_RPL */
    nbr = uip_ds6_nbr_lookup(nexthop);
    a6e8:	1c20      	adds	r0, r4, #0
    a6ea:	4b35      	ldr	r3, [pc, #212]	; (a7c0 <tcpip_ipv6_output+0x19c>)
    a6ec:	4798      	blx	r3
    a6ee:	1e05      	subs	r5, r0, #0
    if(nbr == NULL) {
    a6f0:	d12b      	bne.n	a74a <tcpip_ipv6_output+0x126>
#if UIP_ND6_SEND_NA
      if((nbr = uip_ds6_nbr_add(nexthop, NULL, 0, NBR_INCOMPLETE)) == NULL) {
    a6f2:	1c20      	adds	r0, r4, #0
    a6f4:	2100      	movs	r1, #0
    a6f6:	2200      	movs	r2, #0
    a6f8:	2300      	movs	r3, #0
    a6fa:	4c32      	ldr	r4, [pc, #200]	; (a7c4 <tcpip_ipv6_output+0x1a0>)
    a6fc:	47a0      	blx	r4
    a6fe:	1e04      	subs	r4, r0, #0
    a700:	d103      	bne.n	a70a <tcpip_ipv6_output+0xe6>
        uip_len = 0;
    a702:	2200      	movs	r2, #0
    a704:	4b24      	ldr	r3, [pc, #144]	; (a798 <tcpip_ipv6_output+0x174>)
    a706:	801a      	strh	r2, [r3, #0]
        return;
    a708:	e044      	b.n	a794 <tcpip_ipv6_output+0x170>
       * "If the source address of the packet prompting the solicitation is the
       * same as one of the addresses assigned to the outgoing interface, that
       * address SHOULD be placed in the IP Source Address of the outgoing
       * solicitation.  Otherwise, any one of the addresses assigned to the
       * interface should be used."*/
       if(uip_ds6_is_my_addr(&UIP_IP_BUF->srcipaddr)){
    a70a:	482f      	ldr	r0, [pc, #188]	; (a7c8 <tcpip_ipv6_output+0x1a4>)
    a70c:	4b2f      	ldr	r3, [pc, #188]	; (a7cc <tcpip_ipv6_output+0x1a8>)
    a70e:	4798      	blx	r3
    a710:	2800      	cmp	r0, #0
    a712:	d005      	beq.n	a720 <tcpip_ipv6_output+0xfc>
          uip_nd6_ns_output(&UIP_IP_BUF->srcipaddr, NULL, &nbr->ipaddr);
    a714:	482c      	ldr	r0, [pc, #176]	; (a7c8 <tcpip_ipv6_output+0x1a4>)
    a716:	2100      	movs	r1, #0
    a718:	1c22      	adds	r2, r4, #0
    a71a:	4b2d      	ldr	r3, [pc, #180]	; (a7d0 <tcpip_ipv6_output+0x1ac>)
    a71c:	4798      	blx	r3
    a71e:	e004      	b.n	a72a <tcpip_ipv6_output+0x106>
        } else {
          uip_nd6_ns_output(NULL, NULL, &nbr->ipaddr);
    a720:	2000      	movs	r0, #0
    a722:	1c01      	adds	r1, r0, #0
    a724:	1c22      	adds	r2, r4, #0
    a726:	4b2a      	ldr	r3, [pc, #168]	; (a7d0 <tcpip_ipv6_output+0x1ac>)
    a728:	4798      	blx	r3
        }

        stimer_set(&nbr->sendns, uip_ds6_if.retrans_timer / 1000);
    a72a:	1c25      	adds	r5, r4, #0
    a72c:	3518      	adds	r5, #24
    a72e:	4b29      	ldr	r3, [pc, #164]	; (a7d4 <tcpip_ipv6_output+0x1b0>)
    a730:	6918      	ldr	r0, [r3, #16]
    a732:	21fa      	movs	r1, #250	; 0xfa
    a734:	0089      	lsls	r1, r1, #2
    a736:	4b28      	ldr	r3, [pc, #160]	; (a7d8 <tcpip_ipv6_output+0x1b4>)
    a738:	4798      	blx	r3
    a73a:	1c01      	adds	r1, r0, #0
    a73c:	1c28      	adds	r0, r5, #0
    a73e:	4b27      	ldr	r3, [pc, #156]	; (a7dc <tcpip_ipv6_output+0x1b8>)
    a740:	4798      	blx	r3
        nbr->nscount = 1;
    a742:	2201      	movs	r2, #1
    a744:	2320      	movs	r3, #32
    a746:	54e2      	strb	r2, [r4, r3]
#endif /*UIP_CONF_IPV6_QUEUE_PKT*/

      uip_len = 0;
      return;
    }
    return;
    a748:	e024      	b.n	a794 <tcpip_ipv6_output+0x170>
        nbr->nscount = 1;
      }
#endif /* UIP_ND6_SEND_NA */
    } else {
#if UIP_ND6_SEND_NA
      if(nbr->state == NBR_INCOMPLETE) {
    a74a:	2322      	movs	r3, #34	; 0x22
    a74c:	5cc3      	ldrb	r3, [r0, r3]
    a74e:	2b00      	cmp	r3, #0
    a750:	d103      	bne.n	a75a <tcpip_ipv6_output+0x136>
        if(uip_packetqueue_alloc(&nbr->packethandle, UIP_DS6_NBR_PACKET_LIFETIME) != NULL) {
          memcpy(uip_packetqueue_buf(&nbr->packethandle), UIP_IP_BUF, uip_len);
          uip_packetqueue_set_buflen(&nbr->packethandle, uip_len);
        }
#endif /*UIP_CONF_IPV6_QUEUE_PKT*/
        uip_len = 0;
    a752:	2200      	movs	r2, #0
    a754:	4b10      	ldr	r3, [pc, #64]	; (a798 <tcpip_ipv6_output+0x174>)
    a756:	801a      	strh	r2, [r3, #0]
        return;
    a758:	e01c      	b.n	a794 <tcpip_ipv6_output+0x170>
      }
      /* Send in parallel if we are running NUD (nbc state is either STALE,
         DELAY, or PROBE). See RFC 4861, section 7.3.3 on node behavior. */
      if(nbr->state == NBR_STALE) {
    a75a:	2b02      	cmp	r3, #2
    a75c:	d109      	bne.n	a772 <tcpip_ipv6_output+0x14e>
        nbr->state = NBR_DELAY;
    a75e:	2203      	movs	r2, #3
    a760:	3320      	adds	r3, #32
    a762:	54c2      	strb	r2, [r0, r3]
        stimer_set(&nbr->reachable, UIP_ND6_DELAY_FIRST_PROBE_TIME);
    a764:	3010      	adds	r0, #16
    a766:	2105      	movs	r1, #5
    a768:	4b1c      	ldr	r3, [pc, #112]	; (a7dc <tcpip_ipv6_output+0x1b8>)
    a76a:	4798      	blx	r3
        nbr->nscount = 0;
    a76c:	2200      	movs	r2, #0
    a76e:	2320      	movs	r3, #32
    a770:	54ea      	strb	r2, [r5, r3]
        PRINTF("tcpip_ipv6_output: nbr cache entry stale moving to delay\n\r");
      }
#endif /* UIP_ND6_SEND_NA */

      tcpip_output(uip_ds6_nbr_get_ll(nbr));
    a772:	1c28      	adds	r0, r5, #0
    a774:	4b1a      	ldr	r3, [pc, #104]	; (a7e0 <tcpip_ipv6_output+0x1bc>)
    a776:	4798      	blx	r3
    a778:	4b1a      	ldr	r3, [pc, #104]	; (a7e4 <tcpip_ipv6_output+0x1c0>)
    a77a:	4798      	blx	r3
        uip_packetqueue_free(&nbr->packethandle);
        tcpip_output(uip_ds6_nbr_get_ll(nbr));
      }
#endif /*UIP_CONF_IPV6_QUEUE_PKT*/

      uip_len = 0;
    a77c:	2200      	movs	r2, #0
    a77e:	4b06      	ldr	r3, [pc, #24]	; (a798 <tcpip_ipv6_output+0x174>)
    a780:	801a      	strh	r2, [r3, #0]
      return;
    a782:	e007      	b.n	a794 <tcpip_ipv6_output+0x170>
    }
    return;
  }
  /* Multicast IP destination address. */
  tcpip_output(NULL);
    a784:	2000      	movs	r0, #0
    a786:	4b17      	ldr	r3, [pc, #92]	; (a7e4 <tcpip_ipv6_output+0x1c0>)
    a788:	4798      	blx	r3
  uip_len = 0;
    a78a:	2200      	movs	r2, #0
    a78c:	4b02      	ldr	r3, [pc, #8]	; (a798 <tcpip_ipv6_output+0x174>)
    a78e:	801a      	strh	r2, [r3, #0]
  uip_ext_len = 0;
    a790:	4b15      	ldr	r3, [pc, #84]	; (a7e8 <tcpip_ipv6_output+0x1c4>)
    a792:	701a      	strb	r2, [r3, #0]
}
    a794:	bd38      	pop	{r3, r4, r5, pc}
    a796:	46c0      	nop			; (mov r8, r8)
    a798:	20002cc0 	.word	0x20002cc0
    a79c:	20002cd4 	.word	0x20002cd4
    a7a0:	20002cec 	.word	0x20002cec
    a7a4:	000073f1 	.word	0x000073f1
    a7a8:	00006e69 	.word	0x00006e69
    a7ac:	0000724d 	.word	0x0000724d
    a7b0:	00006e1d 	.word	0x00006e1d
    a7b4:	0000c9d9 	.word	0x0000c9d9
    a7b8:	00006eed 	.word	0x00006eed
    a7bc:	0000d355 	.word	0x0000d355
    a7c0:	00006b55 	.word	0x00006b55
    a7c4:	00006ae1 	.word	0x00006ae1
    a7c8:	20002cdc 	.word	0x20002cdc
    a7cc:	00007439 	.word	0x00007439
    a7d0:	000086c1 	.word	0x000086c1
    a7d4:	20002b68 	.word	0x20002b68
    a7d8:	00010525 	.word	0x00010525
    a7dc:	0000ecfd 	.word	0x0000ecfd
    a7e0:	00006b3d 	.word	0x00006b3d
    a7e4:	0000a549 	.word	0x0000a549
    a7e8:	20000b12 	.word	0x20000b12

0000a7ec <process_thread_tcpip_process>:
    process_post_synch(ts->p, tcpip_event, ts->state);
  }
}
/*---------------------------------------------------------------------------*/
PROCESS_THREAD(tcpip_process, ev, data)
{
    a7ec:	b5f0      	push	{r4, r5, r6, r7, lr}
    a7ee:	4647      	mov	r7, r8
    a7f0:	b480      	push	{r7}
    a7f2:	1c04      	adds	r4, r0, #0
    a7f4:	1c15      	adds	r5, r2, #0
  PROCESS_BEGIN();
    a7f6:	8803      	ldrh	r3, [r0, #0]
    a7f8:	2b00      	cmp	r3, #0
    a7fa:	d004      	beq.n	a806 <process_thread_tcpip_process+0x1a>
    a7fc:	22cf      	movs	r2, #207	; 0xcf
    a7fe:	0092      	lsls	r2, r2, #2
    a800:	4293      	cmp	r3, r2
    a802:	d024      	beq.n	a84e <process_thread_tcpip_process+0x62>
    a804:	e0d3      	b.n	a9ae <process_thread_tcpip_process+0x1c2>
    a806:	4b6d      	ldr	r3, [pc, #436]	; (a9bc <process_thread_tcpip_process+0x1d0>)
    a808:	1c19      	adds	r1, r3, #0
    a80a:	31a0      	adds	r1, #160	; 0xa0
#if UIP_TCP
 {
   static unsigned char i;
   
   for(i = 0; i < UIP_LISTENPORTS; ++i) {
     s.listenports[i].port = 0;
    a80c:	2200      	movs	r2, #0
    a80e:	801a      	strh	r2, [r3, #0]
    a810:	3308      	adds	r3, #8
  
#if UIP_TCP
 {
   static unsigned char i;
   
   for(i = 0; i < UIP_LISTENPORTS; ++i) {
    a812:	428b      	cmp	r3, r1
    a814:	d1fb      	bne.n	a80e <process_thread_tcpip_process+0x22>
    a816:	2214      	movs	r2, #20
    a818:	4b69      	ldr	r3, [pc, #420]	; (a9c0 <process_thread_tcpip_process+0x1d4>)
    a81a:	701a      	strb	r2, [r3, #0]
     s.listenports[i].port = 0;
   }
   s.p = PROCESS_CURRENT();
    a81c:	4b69      	ldr	r3, [pc, #420]	; (a9c4 <process_thread_tcpip_process+0x1d8>)
    a81e:	6819      	ldr	r1, [r3, #0]
    a820:	23a0      	movs	r3, #160	; 0xa0
    a822:	4a66      	ldr	r2, [pc, #408]	; (a9bc <process_thread_tcpip_process+0x1d0>)
    a824:	50d1      	str	r1, [r2, r3]
 }
#endif

  tcpip_event = process_alloc_event();
    a826:	4d68      	ldr	r5, [pc, #416]	; (a9c8 <process_thread_tcpip_process+0x1dc>)
    a828:	47a8      	blx	r5
    a82a:	4b68      	ldr	r3, [pc, #416]	; (a9cc <process_thread_tcpip_process+0x1e0>)
    a82c:	7018      	strb	r0, [r3, #0]
#if UIP_CONF_ICMP6
  tcpip_icmp6_event = process_alloc_event();
    a82e:	47a8      	blx	r5
    a830:	4b67      	ldr	r3, [pc, #412]	; (a9d0 <process_thread_tcpip_process+0x1e4>)
    a832:	7018      	strb	r0, [r3, #0]
#endif /* UIP_CONF_ICMP6 */
  etimer_set(&periodic, CLOCK_SECOND / 2);
    a834:	4867      	ldr	r0, [pc, #412]	; (a9d4 <process_thread_tcpip_process+0x1e8>)
    a836:	2140      	movs	r1, #64	; 0x40
    a838:	4b67      	ldr	r3, [pc, #412]	; (a9d8 <process_thread_tcpip_process+0x1ec>)
    a83a:	4798      	blx	r3

  uip_init();
    a83c:	4b67      	ldr	r3, [pc, #412]	; (a9dc <process_thread_tcpip_process+0x1f0>)
    a83e:	4798      	blx	r3
#ifdef UIP_FALLBACK_INTERFACE
  UIP_FALLBACK_INTERFACE.init();
#endif
/* initialize RPL if configured for using RPL */
#if UIP_CONF_IPV6 && UIP_CONF_IPV6_RPL
  rpl_init();
    a840:	4b67      	ldr	r3, [pc, #412]	; (a9e0 <process_thread_tcpip_process+0x1f4>)
    a842:	4798      	blx	r3
#endif /* UIP_CONF_IPV6_RPL */

  while(1) {
    PROCESS_YIELD();
    a844:	23cf      	movs	r3, #207	; 0xcf
    a846:	009b      	lsls	r3, r3, #2
    a848:	8023      	strh	r3, [r4, #0]
    a84a:	2001      	movs	r0, #1
    a84c:	e0b2      	b.n	a9b4 <process_thread_tcpip_process+0x1c8>
  static unsigned char i;
  register struct listenport *l;
#endif /*UIP_TCP*/
  struct process *p;

  switch(ev) {
    a84e:	2902      	cmp	r1, #2
    a850:	d100      	bne.n	a854 <process_thread_tcpip_process+0x68>
    a852:	e091      	b.n	a978 <process_thread_tcpip_process+0x18c>
    a854:	d805      	bhi.n	a862 <process_thread_tcpip_process+0x76>
    a856:	2900      	cmp	r1, #0
    a858:	d076      	beq.n	a948 <process_thread_tcpip_process+0x15c>
    a85a:	2901      	cmp	r1, #1
    a85c:	d100      	bne.n	a860 <process_thread_tcpip_process+0x74>
    a85e:	e080      	b.n	a962 <process_thread_tcpip_process+0x176>
    a860:	e7f0      	b.n	a844 <process_thread_tcpip_process+0x58>
    a862:	2987      	cmp	r1, #135	; 0x87
    a864:	d002      	beq.n	a86c <process_thread_tcpip_process+0x80>
    a866:	2988      	cmp	r1, #136	; 0x88
    a868:	d031      	beq.n	a8ce <process_thread_tcpip_process+0xe2>
    a86a:	e7eb      	b.n	a844 <process_thread_tcpip_process+0x58>
         connections. */

      p = (struct process *)data;
#if UIP_TCP
      l = s.listenports;
      for(i = 0; i < UIP_LISTENPORTS; ++i) {
    a86c:	2200      	movs	r2, #0
    a86e:	4b5d      	ldr	r3, [pc, #372]	; (a9e4 <process_thread_tcpip_process+0x1f8>)
    a870:	701a      	strb	r2, [r3, #0]
    a872:	4e52      	ldr	r6, [pc, #328]	; (a9bc <process_thread_tcpip_process+0x1d0>)
        if(l->p == p) {
          uip_unlisten(l->port);
          l->port = 0;
    a874:	2300      	movs	r3, #0
    a876:	4698      	mov	r8, r3
         connections. */

      p = (struct process *)data;
#if UIP_TCP
      l = s.listenports;
      for(i = 0; i < UIP_LISTENPORTS; ++i) {
    a878:	4f5a      	ldr	r7, [pc, #360]	; (a9e4 <process_thread_tcpip_process+0x1f8>)
        if(l->p == p) {
    a87a:	6873      	ldr	r3, [r6, #4]
    a87c:	429d      	cmp	r5, r3
    a87e:	d106      	bne.n	a88e <process_thread_tcpip_process+0xa2>
          uip_unlisten(l->port);
    a880:	8830      	ldrh	r0, [r6, #0]
    a882:	4b59      	ldr	r3, [pc, #356]	; (a9e8 <process_thread_tcpip_process+0x1fc>)
    a884:	4798      	blx	r3
          l->port = 0;
    a886:	4643      	mov	r3, r8
    a888:	8033      	strh	r3, [r6, #0]
          l->p = PROCESS_NONE;
    a88a:	4643      	mov	r3, r8
    a88c:	6073      	str	r3, [r6, #4]
        }
        ++l;
    a88e:	3608      	adds	r6, #8
         connections. */

      p = (struct process *)data;
#if UIP_TCP
      l = s.listenports;
      for(i = 0; i < UIP_LISTENPORTS; ++i) {
    a890:	783b      	ldrb	r3, [r7, #0]
    a892:	3301      	adds	r3, #1
    a894:	b2db      	uxtb	r3, r3
    a896:	703b      	strb	r3, [r7, #0]
    a898:	2b13      	cmp	r3, #19
    a89a:	d9ee      	bls.n	a87a <process_thread_tcpip_process+0x8e>
    a89c:	4b53      	ldr	r3, [pc, #332]	; (a9ec <process_thread_tcpip_process+0x200>)
    a89e:	1c19      	adds	r1, r3, #0
    a8a0:	3181      	adds	r1, #129	; 0x81
    a8a2:	31ff      	adds	r1, #255	; 0xff
      {
        struct uip_conn *cptr;
	    
        for(cptr = &uip_conns[0]; cptr < &uip_conns[UIP_CONNS]; ++cptr) {
          if(cptr->appstate.p == p) {
            cptr->appstate.p = PROCESS_NONE;
    a8a4:	2000      	movs	r0, #0
    a8a6:	1cda      	adds	r2, r3, #3
	 
      {
        struct uip_conn *cptr;
	    
        for(cptr = &uip_conns[0]; cptr < &uip_conns[UIP_CONNS]; ++cptr) {
          if(cptr->appstate.p == p) {
    a8a8:	6816      	ldr	r6, [r2, #0]
    a8aa:	42b5      	cmp	r5, r6
    a8ac:	d101      	bne.n	a8b2 <process_thread_tcpip_process+0xc6>
            cptr->appstate.p = PROCESS_NONE;
    a8ae:	6010      	str	r0, [r2, #0]
            cptr->tcpstateflags = UIP_CLOSED;
    a8b0:	7018      	strb	r0, [r3, #0]
    a8b2:	3330      	adds	r3, #48	; 0x30
      }
	 
      {
        struct uip_conn *cptr;
	    
        for(cptr = &uip_conns[0]; cptr < &uip_conns[UIP_CONNS]; ++cptr) {
    a8b4:	428b      	cmp	r3, r1
    a8b6:	d1f6      	bne.n	a8a6 <process_thread_tcpip_process+0xba>
    a8b8:	4b4d      	ldr	r3, [pc, #308]	; (a9f0 <process_thread_tcpip_process+0x204>)
        struct uip_udp_conn *cptr;

        for(cptr = &uip_udp_conns[0];
            cptr < &uip_udp_conns[UIP_UDP_CONNS]; ++cptr) {
          if(cptr->appstate.p == p) {
            cptr->lport = 0;
    a8ba:	2100      	movs	r1, #0
#endif /* UIP_TCP */
#if UIP_UDP
      {
        struct uip_udp_conn *cptr;

        for(cptr = &uip_udp_conns[0];
    a8bc:	4a4d      	ldr	r2, [pc, #308]	; (a9f4 <process_thread_tcpip_process+0x208>)
            cptr < &uip_udp_conns[UIP_UDP_CONNS]; ++cptr) {
          if(cptr->appstate.p == p) {
    a8be:	6998      	ldr	r0, [r3, #24]
    a8c0:	4285      	cmp	r5, r0
    a8c2:	d100      	bne.n	a8c6 <process_thread_tcpip_process+0xda>
            cptr->lport = 0;
    a8c4:	8219      	strh	r1, [r3, #16]
#if UIP_UDP
      {
        struct uip_udp_conn *cptr;

        for(cptr = &uip_udp_conns[0];
            cptr < &uip_udp_conns[UIP_UDP_CONNS]; ++cptr) {
    a8c6:	3320      	adds	r3, #32
#endif /* UIP_TCP */
#if UIP_UDP
      {
        struct uip_udp_conn *cptr;

        for(cptr = &uip_udp_conns[0];
    a8c8:	4293      	cmp	r3, r2
    a8ca:	d1f8      	bne.n	a8be <process_thread_tcpip_process+0xd2>
    a8cc:	e7ba      	b.n	a844 <process_thread_tcpip_process+0x58>
      }
#endif /* UIP_UDP */
      break;

    case PROCESS_EVENT_TIMER:
      uip_len = 0;
    a8ce:	2200      	movs	r2, #0
    a8d0:	4b49      	ldr	r3, [pc, #292]	; (a9f8 <process_thread_tcpip_process+0x20c>)
    a8d2:	801a      	strh	r2, [r3, #0]
      /* We get this event if one of our timers have expired. */
      {
        /* Check the clock so see if we should call the periodic uIP
           processing. */
        if(data == &periodic &&
    a8d4:	4b3f      	ldr	r3, [pc, #252]	; (a9d4 <process_thread_tcpip_process+0x1e8>)
    a8d6:	429d      	cmp	r5, r3
    a8d8:	d129      	bne.n	a92e <process_thread_tcpip_process+0x142>
           etimer_expired(&periodic)) {
    a8da:	1c18      	adds	r0, r3, #0
    a8dc:	4b47      	ldr	r3, [pc, #284]	; (a9fc <process_thread_tcpip_process+0x210>)
    a8de:	4798      	blx	r3
      uip_len = 0;
      /* We get this event if one of our timers have expired. */
      {
        /* Check the clock so see if we should call the periodic uIP
           processing. */
        if(data == &periodic &&
    a8e0:	2800      	cmp	r0, #0
    a8e2:	d024      	beq.n	a92e <process_thread_tcpip_process+0x142>
           etimer_expired(&periodic)) {
#if UIP_TCP
          for(i = 0; i < UIP_CONNS; ++i) {
    a8e4:	2200      	movs	r2, #0
    a8e6:	4b3f      	ldr	r3, [pc, #252]	; (a9e4 <process_thread_tcpip_process+0x1f8>)
    a8e8:	701a      	strb	r2, [r3, #0]
    a8ea:	2300      	movs	r3, #0
            if(uip_conn_active(i)) {
    a8ec:	4e44      	ldr	r6, [pc, #272]	; (aa00 <process_thread_tcpip_process+0x214>)
    a8ee:	005a      	lsls	r2, r3, #1
    a8f0:	18d3      	adds	r3, r2, r3
    a8f2:	011b      	lsls	r3, r3, #4
    a8f4:	18f3      	adds	r3, r6, r3
    a8f6:	3320      	adds	r3, #32
    a8f8:	795b      	ldrb	r3, [r3, #5]
    a8fa:	2b00      	cmp	r3, #0
    a8fc:	d010      	beq.n	a920 <process_thread_tcpip_process+0x134>
              /* Only restart the timer if there are active
                 connections. */
              etimer_restart(&periodic);
    a8fe:	4835      	ldr	r0, [pc, #212]	; (a9d4 <process_thread_tcpip_process+0x1e8>)
    a900:	4b40      	ldr	r3, [pc, #256]	; (aa04 <process_thread_tcpip_process+0x218>)
    a902:	4798      	blx	r3
              uip_periodic(i);
    a904:	4b37      	ldr	r3, [pc, #220]	; (a9e4 <process_thread_tcpip_process+0x1f8>)
    a906:	781b      	ldrb	r3, [r3, #0]
    a908:	005a      	lsls	r2, r3, #1
    a90a:	18d3      	adds	r3, r2, r3
    a90c:	011b      	lsls	r3, r3, #4
    a90e:	4a3c      	ldr	r2, [pc, #240]	; (aa00 <process_thread_tcpip_process+0x214>)
    a910:	189b      	adds	r3, r3, r2
    a912:	4a3d      	ldr	r2, [pc, #244]	; (aa08 <process_thread_tcpip_process+0x21c>)
    a914:	6013      	str	r3, [r2, #0]
    a916:	2002      	movs	r0, #2
    a918:	4b3c      	ldr	r3, [pc, #240]	; (aa0c <process_thread_tcpip_process+0x220>)
    a91a:	4798      	blx	r3
#if UIP_CONF_IPV6
              tcpip_ipv6_output();
    a91c:	4b3c      	ldr	r3, [pc, #240]	; (aa10 <process_thread_tcpip_process+0x224>)
    a91e:	4798      	blx	r3
        /* Check the clock so see if we should call the periodic uIP
           processing. */
        if(data == &periodic &&
           etimer_expired(&periodic)) {
#if UIP_TCP
          for(i = 0; i < UIP_CONNS; ++i) {
    a920:	4a30      	ldr	r2, [pc, #192]	; (a9e4 <process_thread_tcpip_process+0x1f8>)
    a922:	7813      	ldrb	r3, [r2, #0]
    a924:	3301      	adds	r3, #1
    a926:	b2db      	uxtb	r3, r3
    a928:	7013      	strb	r3, [r2, #0]
    a92a:	2b07      	cmp	r3, #7
    a92c:	d9df      	bls.n	a8ee <process_thread_tcpip_process+0x102>
           etimer_expired(&uip_ds6_timer_rs)) {
          uip_ds6_send_rs();
          tcpip_ipv6_output();
        }
#endif /* !UIP_CONF_ROUTER */
        if(data == &uip_ds6_timer_periodic &&
    a92e:	4b39      	ldr	r3, [pc, #228]	; (aa14 <process_thread_tcpip_process+0x228>)
    a930:	429d      	cmp	r5, r3
    a932:	d187      	bne.n	a844 <process_thread_tcpip_process+0x58>
           etimer_expired(&uip_ds6_timer_periodic)) {
    a934:	1c18      	adds	r0, r3, #0
    a936:	4b31      	ldr	r3, [pc, #196]	; (a9fc <process_thread_tcpip_process+0x210>)
    a938:	4798      	blx	r3
           etimer_expired(&uip_ds6_timer_rs)) {
          uip_ds6_send_rs();
          tcpip_ipv6_output();
        }
#endif /* !UIP_CONF_ROUTER */
        if(data == &uip_ds6_timer_periodic &&
    a93a:	2800      	cmp	r0, #0
    a93c:	d082      	beq.n	a844 <process_thread_tcpip_process+0x58>
           etimer_expired(&uip_ds6_timer_periodic)) {
          uip_ds6_periodic();
    a93e:	4b36      	ldr	r3, [pc, #216]	; (aa18 <process_thread_tcpip_process+0x22c>)
    a940:	4798      	blx	r3
          tcpip_ipv6_output();
    a942:	4b33      	ldr	r3, [pc, #204]	; (aa10 <process_thread_tcpip_process+0x224>)
    a944:	4798      	blx	r3
    a946:	e77d      	b.n	a844 <process_thread_tcpip_process+0x58>
      }
      break;
	 
#if UIP_TCP
    case TCP_POLL:
      if(data != NULL) {
    a948:	2d00      	cmp	r5, #0
    a94a:	d100      	bne.n	a94e <process_thread_tcpip_process+0x162>
    a94c:	e77a      	b.n	a844 <process_thread_tcpip_process+0x58>
        uip_poll_conn(data);
    a94e:	4b2e      	ldr	r3, [pc, #184]	; (aa08 <process_thread_tcpip_process+0x21c>)
    a950:	601d      	str	r5, [r3, #0]
    a952:	2003      	movs	r0, #3
    a954:	4b2d      	ldr	r3, [pc, #180]	; (aa0c <process_thread_tcpip_process+0x220>)
    a956:	4798      	blx	r3
#if UIP_CONF_IPV6
        tcpip_ipv6_output();
    a958:	4b2d      	ldr	r3, [pc, #180]	; (aa10 <process_thread_tcpip_process+0x224>)
    a95a:	4798      	blx	r3
	  PRINTF("tcpip_output from tcp poll len %d\n\r", uip_len);
          tcpip_output();
        }
#endif /* UIP_CONF_IPV6 */
        /* Start the periodic polling, if it isn't already active. */
        start_periodic_tcp_timer();
    a95c:	4b2f      	ldr	r3, [pc, #188]	; (aa1c <process_thread_tcpip_process+0x230>)
    a95e:	4798      	blx	r3
    a960:	e770      	b.n	a844 <process_thread_tcpip_process+0x58>
      }
      break;
#endif /* UIP_TCP */
#if UIP_UDP
    case UDP_POLL:
      if(data != NULL) {
    a962:	2d00      	cmp	r5, #0
    a964:	d100      	bne.n	a968 <process_thread_tcpip_process+0x17c>
    a966:	e76d      	b.n	a844 <process_thread_tcpip_process+0x58>
        uip_udp_periodic_conn(data);
    a968:	4b2d      	ldr	r3, [pc, #180]	; (aa20 <process_thread_tcpip_process+0x234>)
    a96a:	601d      	str	r5, [r3, #0]
    a96c:	2005      	movs	r0, #5
    a96e:	4b27      	ldr	r3, [pc, #156]	; (aa0c <process_thread_tcpip_process+0x220>)
    a970:	4798      	blx	r3
#if UIP_CONF_IPV6
        tcpip_ipv6_output();
    a972:	4b27      	ldr	r3, [pc, #156]	; (aa10 <process_thread_tcpip_process+0x224>)
    a974:	4798      	blx	r3
    a976:	e765      	b.n	a844 <process_thread_tcpip_process+0x58>
      }
    }
    tcpip_is_forwarding = 0;
  }
#else /* UIP_CONF_IP_FORWARD */
  if(uip_len > 0) {
    a978:	4b1f      	ldr	r3, [pc, #124]	; (a9f8 <process_thread_tcpip_process+0x20c>)
    a97a:	881b      	ldrh	r3, [r3, #0]
    a97c:	2b00      	cmp	r3, #0
    a97e:	d100      	bne.n	a982 <process_thread_tcpip_process+0x196>
    a980:	e760      	b.n	a844 <process_thread_tcpip_process+0x58>
     an incoming packet contains a SYN: since uIP does not inform the
     application if a SYN arrives, we have no other way of starting
     this timer.  This function is called for every incoming IP packet
     to check for such SYNs. */
#define TCP_SYN 0x02
  if(UIP_IP_BUF->proto == UIP_PROTO_TCP &&
    a982:	4b28      	ldr	r3, [pc, #160]	; (aa24 <process_thread_tcpip_process+0x238>)
    a984:	799b      	ldrb	r3, [r3, #6]
    a986:	2b06      	cmp	r3, #6
    a988:	d106      	bne.n	a998 <process_thread_tcpip_process+0x1ac>
     (UIP_TCP_BUF->flags & TCP_SYN) == TCP_SYN) {
    a98a:	332f      	adds	r3, #47	; 0x2f
    a98c:	4a25      	ldr	r2, [pc, #148]	; (aa24 <process_thread_tcpip_process+0x238>)
    a98e:	5cd3      	ldrb	r3, [r2, r3]
     an incoming packet contains a SYN: since uIP does not inform the
     application if a SYN arrives, we have no other way of starting
     this timer.  This function is called for every incoming IP packet
     to check for such SYNs. */
#define TCP_SYN 0x02
  if(UIP_IP_BUF->proto == UIP_PROTO_TCP &&
    a990:	079b      	lsls	r3, r3, #30
    a992:	d501      	bpl.n	a998 <process_thread_tcpip_process+0x1ac>
     (UIP_TCP_BUF->flags & TCP_SYN) == TCP_SYN) {
    start_periodic_tcp_timer();
    a994:	4b21      	ldr	r3, [pc, #132]	; (aa1c <process_thread_tcpip_process+0x230>)
    a996:	4798      	blx	r3
    tcpip_is_forwarding = 0;
  }
#else /* UIP_CONF_IP_FORWARD */
  if(uip_len > 0) {
    check_for_tcp_syn();
    uip_input();
    a998:	2001      	movs	r0, #1
    a99a:	4b1c      	ldr	r3, [pc, #112]	; (aa0c <process_thread_tcpip_process+0x220>)
    a99c:	4798      	blx	r3
    if(uip_len > 0) {
    a99e:	4b16      	ldr	r3, [pc, #88]	; (a9f8 <process_thread_tcpip_process+0x20c>)
    a9a0:	881b      	ldrh	r3, [r3, #0]
    a9a2:	2b00      	cmp	r3, #0
    a9a4:	d100      	bne.n	a9a8 <process_thread_tcpip_process+0x1bc>
    a9a6:	e74d      	b.n	a844 <process_thread_tcpip_process+0x58>
#if UIP_CONF_TCP_SPLIT
      uip_split_output();
#else /* UIP_CONF_TCP_SPLIT */
#if UIP_CONF_IPV6
      tcpip_ipv6_output();
    a9a8:	4b19      	ldr	r3, [pc, #100]	; (aa10 <process_thread_tcpip_process+0x224>)
    a9aa:	4798      	blx	r3
    a9ac:	e74a      	b.n	a844 <process_thread_tcpip_process+0x58>
  while(1) {
    PROCESS_YIELD();
    eventhandler(ev, data);
  }
  
  PROCESS_END();
    a9ae:	2300      	movs	r3, #0
    a9b0:	8003      	strh	r3, [r0, #0]
    a9b2:	2003      	movs	r0, #3
}
    a9b4:	bc04      	pop	{r2}
    a9b6:	4690      	mov	r8, r2
    a9b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    a9ba:	46c0      	nop			; (mov r8, r8)
    a9bc:	20000b28 	.word	0x20000b28
    a9c0:	20000bcc 	.word	0x20000bcc
    a9c4:	20001d2c 	.word	0x20001d2c
    a9c8:	0000eaed 	.word	0x0000eaed
    a9cc:	200031cc 	.word	0x200031cc
    a9d0:	200031cd 	.word	0x200031cd
    a9d4:	20000bd0 	.word	0x20000bd0
    a9d8:	0000e90d 	.word	0x0000e90d
    a9dc:	00008c01 	.word	0x00008c01
    a9e0:	0000e4c9 	.word	0x0000e4c9
    a9e4:	20000bce 	.word	0x20000bce
    a9e8:	00008e01 	.word	0x00008e01
    a9ec:	20002e9d 	.word	0x20002e9d
    a9f0:	2000308c 	.word	0x2000308c
    a9f4:	200031cc 	.word	0x200031cc
    a9f8:	20002cc0 	.word	0x20002cc0
    a9fc:	0000e955 	.word	0x0000e955
    aa00:	20002e78 	.word	0x20002e78
    aa04:	0000e93d 	.word	0x0000e93d
    aa08:	20002e74 	.word	0x20002e74
    aa0c:	00008e59 	.word	0x00008e59
    aa10:	0000a625 	.word	0x0000a625
    aa14:	20002cb0 	.word	0x20002cb0
    aa18:	00007895 	.word	0x00007895
    aa1c:	0000a529 	.word	0x0000a529
    aa20:	20002e6c 	.word	0x20002e6c
    aa24:	20002cd4 	.word	0x20002cd4

0000aa28 <tcpip_poll_tcp>:
#endif /* UIP_UDP */
/*---------------------------------------------------------------------------*/
#if UIP_TCP
void
tcpip_poll_tcp(struct uip_conn *conn)
{
    aa28:	b508      	push	{r3, lr}
    aa2a:	1c02      	adds	r2, r0, #0
  process_post(&tcpip_process, TCP_POLL, conn);
    aa2c:	4802      	ldr	r0, [pc, #8]	; (aa38 <tcpip_poll_tcp+0x10>)
    aa2e:	2100      	movs	r1, #0
    aa30:	4b02      	ldr	r3, [pc, #8]	; (aa3c <tcpip_poll_tcp+0x14>)
    aa32:	4798      	blx	r3
}
    aa34:	bd08      	pop	{r3, pc}
    aa36:	46c0      	nop			; (mov r8, r8)
    aa38:	200000c0 	.word	0x200000c0
    aa3c:	0000ebf9 	.word	0x0000ebf9

0000aa40 <tcp_connect>:
/*---------------------------------------------------------------------------*/
#if UIP_TCP
#if UIP_ACTIVE_OPEN
struct uip_conn *
tcp_connect(uip_ipaddr_t *ripaddr, uint16_t port, void *appstate)
{
    aa40:	b538      	push	{r3, r4, r5, lr}
    aa42:	1c15      	adds	r5, r2, #0
  struct uip_conn *c;
  
  c = uip_connect(ripaddr, port);
    aa44:	4b05      	ldr	r3, [pc, #20]	; (aa5c <tcp_connect+0x1c>)
    aa46:	4798      	blx	r3
    aa48:	1e04      	subs	r4, r0, #0
  if(c == NULL) {
    aa4a:	d005      	beq.n	aa58 <tcp_connect+0x18>
    return NULL;
  }

  c->appstate.p = PROCESS_CURRENT();
    aa4c:	4b04      	ldr	r3, [pc, #16]	; (aa60 <tcp_connect+0x20>)
    aa4e:	681b      	ldr	r3, [r3, #0]
    aa50:	6283      	str	r3, [r0, #40]	; 0x28
  c->appstate.state = appstate;
    aa52:	62c5      	str	r5, [r0, #44]	; 0x2c
  
  tcpip_poll_tcp(c);
    aa54:	4b03      	ldr	r3, [pc, #12]	; (aa64 <tcp_connect+0x24>)
    aa56:	4798      	blx	r3
  
  return c;
}
    aa58:	1c20      	adds	r0, r4, #0
    aa5a:	bd38      	pop	{r3, r4, r5, pc}
    aa5c:	00008c75 	.word	0x00008c75
    aa60:	20001d2c 	.word	0x20001d2c
    aa64:	0000aa29 	.word	0x0000aa29

0000aa68 <tcpip_uipcall>:
}
#endif /* UIP_TCP */
/*---------------------------------------------------------------------------*/
void
tcpip_uipcall(void)
{
    aa68:	b538      	push	{r3, r4, r5, lr}
  uip_udp_appstate_t *ts;
  
#if UIP_UDP
  if(uip_conn != NULL) {
    aa6a:	4b1b      	ldr	r3, [pc, #108]	; (aad8 <tcpip_uipcall+0x70>)
    aa6c:	681b      	ldr	r3, [r3, #0]
    aa6e:	2b00      	cmp	r3, #0
    aa70:	d002      	beq.n	aa78 <tcpip_uipcall+0x10>
    ts = &uip_conn->appstate;
    aa72:	1c1d      	adds	r5, r3, #0
    aa74:	3528      	adds	r5, #40	; 0x28
    aa76:	e002      	b.n	aa7e <tcpip_uipcall+0x16>
  } else {
    ts = &uip_udp_conn->appstate;
    aa78:	4a18      	ldr	r2, [pc, #96]	; (aadc <tcpip_uipcall+0x74>)
    aa7a:	6815      	ldr	r5, [r2, #0]
    aa7c:	3518      	adds	r5, #24
   static unsigned char i;
   struct listenport *l;
   
   /* If this is a connection request for a listening port, we must
      mark the connection with the right process ID. */
   if(uip_connected()) {
    aa7e:	4a18      	ldr	r2, [pc, #96]	; (aae0 <tcpip_uipcall+0x78>)
    aa80:	7812      	ldrb	r2, [r2, #0]
    aa82:	0652      	lsls	r2, r2, #25
    aa84:	d51e      	bpl.n	aac4 <tcpip_uipcall+0x5c>
     l = &s.listenports[0];
     for(i = 0; i < UIP_LISTENPORTS; ++i) {
    aa86:	2100      	movs	r1, #0
    aa88:	4a16      	ldr	r2, [pc, #88]	; (aae4 <tcpip_uipcall+0x7c>)
    aa8a:	7011      	strb	r1, [r2, #0]
       if(l->port == uip_conn->lport &&
    aa8c:	8a1c      	ldrh	r4, [r3, #16]
    aa8e:	3101      	adds	r1, #1
    aa90:	2000      	movs	r0, #0
    aa92:	4a15      	ldr	r2, [pc, #84]	; (aae8 <tcpip_uipcall+0x80>)
    aa94:	e000      	b.n	aa98 <tcpip_uipcall+0x30>
    aa96:	1c19      	adds	r1, r3, #0
    aa98:	8813      	ldrh	r3, [r2, #0]
    aa9a:	42a3      	cmp	r3, r4
    aa9c:	d108      	bne.n	aab0 <tcpip_uipcall+0x48>
	  l->p != PROCESS_NONE) {
    aa9e:	6853      	ldr	r3, [r2, #4]
   /* If this is a connection request for a listening port, we must
      mark the connection with the right process ID. */
   if(uip_connected()) {
     l = &s.listenports[0];
     for(i = 0; i < UIP_LISTENPORTS; ++i) {
       if(l->port == uip_conn->lport &&
    aaa0:	2b00      	cmp	r3, #0
    aaa2:	d005      	beq.n	aab0 <tcpip_uipcall+0x48>
    aaa4:	4a0f      	ldr	r2, [pc, #60]	; (aae4 <tcpip_uipcall+0x7c>)
    aaa6:	7010      	strb	r0, [r2, #0]
	  l->p != PROCESS_NONE) {
	 ts->p = l->p;
    aaa8:	602b      	str	r3, [r5, #0]
	 ts->state = NULL;
    aaaa:	2300      	movs	r3, #0
    aaac:	606b      	str	r3, [r5, #4]
	 break;
    aaae:	e007      	b.n	aac0 <tcpip_uipcall+0x58>
       }
       ++l;
    aab0:	3208      	adds	r2, #8
    aab2:	1c4b      	adds	r3, r1, #1
    aab4:	b2db      	uxtb	r3, r3
   
   /* If this is a connection request for a listening port, we must
      mark the connection with the right process ID. */
   if(uip_connected()) {
     l = &s.listenports[0];
     for(i = 0; i < UIP_LISTENPORTS; ++i) {
    aab6:	1c08      	adds	r0, r1, #0
    aab8:	2b15      	cmp	r3, #21
    aaba:	d1ec      	bne.n	aa96 <tcpip_uipcall+0x2e>
    aabc:	4b09      	ldr	r3, [pc, #36]	; (aae4 <tcpip_uipcall+0x7c>)
    aabe:	7019      	strb	r1, [r3, #0]
       }
       ++l;
     }
     
     /* Start the periodic polling, if it isn't already active. */
     start_periodic_tcp_timer();
    aac0:	4b0a      	ldr	r3, [pc, #40]	; (aaec <tcpip_uipcall+0x84>)
    aac2:	4798      	blx	r3
   }
 }
#endif /* UIP_TCP */
  
  if(ts->p != NULL) {
    aac4:	6828      	ldr	r0, [r5, #0]
    aac6:	2800      	cmp	r0, #0
    aac8:	d004      	beq.n	aad4 <tcpip_uipcall+0x6c>
    process_post_synch(ts->p, tcpip_event, ts->state);
    aaca:	4b09      	ldr	r3, [pc, #36]	; (aaf0 <tcpip_uipcall+0x88>)
    aacc:	7819      	ldrb	r1, [r3, #0]
    aace:	686a      	ldr	r2, [r5, #4]
    aad0:	4b08      	ldr	r3, [pc, #32]	; (aaf4 <tcpip_uipcall+0x8c>)
    aad2:	4798      	blx	r3
  }
}
    aad4:	bd38      	pop	{r3, r4, r5, pc}
    aad6:	46c0      	nop			; (mov r8, r8)
    aad8:	20002e74 	.word	0x20002e74
    aadc:	20002e6c 	.word	0x20002e6c
    aae0:	20002e64 	.word	0x20002e64
    aae4:	20000b24 	.word	0x20000b24
    aae8:	20000b28 	.word	0x20000b28
    aaec:	0000a529 	.word	0x0000a529
    aaf0:	200031cc 	.word	0x200031cc
    aaf4:	0000ec51 	.word	0x0000ec51

0000aaf8 <uip_debug_ipaddr_print>:
#include "net/ip/uip-debug.h"

/*---------------------------------------------------------------------------*/
void
uip_debug_ipaddr_print(const uip_ipaddr_t *addr)
{
    aaf8:	b5f0      	push	{r4, r5, r6, r7, lr}
    aafa:	4647      	mov	r7, r8
    aafc:	b480      	push	{r7}
  if(addr == NULL || addr->u8 == NULL) {
    aafe:	2800      	cmp	r0, #0
    ab00:	d000      	beq.n	ab04 <uip_debug_ipaddr_print+0xc>
    ab02:	d103      	bne.n	ab0c <uip_debug_ipaddr_print+0x14>
    printf("(NULL IP addr)");
    ab04:	4817      	ldr	r0, [pc, #92]	; (ab64 <uip_debug_ipaddr_print+0x6c>)
    ab06:	4b18      	ldr	r3, [pc, #96]	; (ab68 <uip_debug_ipaddr_print+0x70>)
    ab08:	4798      	blx	r3
    return;
    ab0a:	e028      	b.n	ab5e <uip_debug_ipaddr_print+0x66>
    ab0c:	1c05      	adds	r5, r0, #0

/*---------------------------------------------------------------------------*/
void
uip_debug_ipaddr_print(const uip_ipaddr_t *addr)
{
  if(addr == NULL || addr->u8 == NULL) {
    ab0e:	2700      	movs	r7, #0
    ab10:	2600      	movs	r6, #0
      if(f > 0) {
        f = -1;
      } else if(i > 0) {
        PRINTA(":");
      }
      PRINTA("%x", a);
    ab12:	4b15      	ldr	r3, [pc, #84]	; (ab68 <uip_debug_ipaddr_print+0x70>)
    ab14:	4698      	mov	r8, r3
#if UIP_CONF_IPV6
  uint16_t a;
  unsigned int i;
  int f;
  for(i = 0, f = 0; i < sizeof(uip_ipaddr_t); i += 2) {
    a = (addr->u8[i] << 8) + addr->u8[i + 1];
    ab16:	782c      	ldrb	r4, [r5, #0]
    ab18:	0224      	lsls	r4, r4, #8
    ab1a:	786b      	ldrb	r3, [r5, #1]
    ab1c:	191c      	adds	r4, r3, r4
    ab1e:	b2a4      	uxth	r4, r4
    if(a == 0 && f >= 0) {
    ab20:	2c00      	cmp	r4, #0
    ab22:	d109      	bne.n	ab38 <uip_debug_ipaddr_print+0x40>
    ab24:	2f00      	cmp	r7, #0
    ab26:	db07      	blt.n	ab38 <uip_debug_ipaddr_print+0x40>
      if(f++ == 0) {
    ab28:	1c7c      	adds	r4, r7, #1
    ab2a:	2f00      	cmp	r7, #0
    ab2c:	d112      	bne.n	ab54 <uip_debug_ipaddr_print+0x5c>
        PRINTA("::");
    ab2e:	480f      	ldr	r0, [pc, #60]	; (ab6c <uip_debug_ipaddr_print+0x74>)
    ab30:	4b0d      	ldr	r3, [pc, #52]	; (ab68 <uip_debug_ipaddr_print+0x70>)
    ab32:	4798      	blx	r3
  unsigned int i;
  int f;
  for(i = 0, f = 0; i < sizeof(uip_ipaddr_t); i += 2) {
    a = (addr->u8[i] << 8) + addr->u8[i + 1];
    if(a == 0 && f >= 0) {
      if(f++ == 0) {
    ab34:	1c27      	adds	r7, r4, #0
    ab36:	e00e      	b.n	ab56 <uip_debug_ipaddr_print+0x5e>
        PRINTA("::");
      }
    } else {
      if(f > 0) {
    ab38:	2f00      	cmp	r7, #0
    ab3a:	dc05      	bgt.n	ab48 <uip_debug_ipaddr_print+0x50>
        f = -1;
      } else if(i > 0) {
    ab3c:	2e00      	cmp	r6, #0
    ab3e:	d005      	beq.n	ab4c <uip_debug_ipaddr_print+0x54>
        PRINTA(":");
    ab40:	203a      	movs	r0, #58	; 0x3a
    ab42:	4b0b      	ldr	r3, [pc, #44]	; (ab70 <uip_debug_ipaddr_print+0x78>)
    ab44:	4798      	blx	r3
    ab46:	e001      	b.n	ab4c <uip_debug_ipaddr_print+0x54>
      if(f++ == 0) {
        PRINTA("::");
      }
    } else {
      if(f > 0) {
        f = -1;
    ab48:	2701      	movs	r7, #1
    ab4a:	427f      	negs	r7, r7
      } else if(i > 0) {
        PRINTA(":");
      }
      PRINTA("%x", a);
    ab4c:	4809      	ldr	r0, [pc, #36]	; (ab74 <uip_debug_ipaddr_print+0x7c>)
    ab4e:	1c21      	adds	r1, r4, #0
    ab50:	47c0      	blx	r8
    ab52:	e000      	b.n	ab56 <uip_debug_ipaddr_print+0x5e>
  unsigned int i;
  int f;
  for(i = 0, f = 0; i < sizeof(uip_ipaddr_t); i += 2) {
    a = (addr->u8[i] << 8) + addr->u8[i + 1];
    if(a == 0 && f >= 0) {
      if(f++ == 0) {
    ab54:	1c27      	adds	r7, r4, #0
  }
#if UIP_CONF_IPV6
  uint16_t a;
  unsigned int i;
  int f;
  for(i = 0, f = 0; i < sizeof(uip_ipaddr_t); i += 2) {
    ab56:	3602      	adds	r6, #2
    ab58:	3502      	adds	r5, #2
    ab5a:	2e10      	cmp	r6, #16
    ab5c:	d1db      	bne.n	ab16 <uip_debug_ipaddr_print+0x1e>
    }
  }
#else /* UIP_CONF_IPV6 */
  PRINTA("%u.%u.%u.%u", addr->u8[0], addr->u8[1], addr->u8[2], addr->u8[3]);
#endif /* UIP_CONF_IPV6 */
}
    ab5e:	bc04      	pop	{r2}
    ab60:	4690      	mov	r8, r2
    ab62:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ab64:	00012bd0 	.word	0x00012bd0
    ab68:	00010931 	.word	0x00010931
    ab6c:	00012be0 	.word	0x00012be0
    ab70:	00010965 	.word	0x00010965
    ab74:	00012be4 	.word	0x00012be4

0000ab78 <uiplib_ip6addrconv>:

/*-----------------------------------------------------------------------------------*/
#if UIP_CONF_IPV6
int
uiplib_ip6addrconv(const char *addrstr, uip_ip6addr_t *ipaddr)
{
    ab78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  unsigned int len;
  char c = 0;  //gcc warning if not initialized

  value = 0;
  zero = -1;
  if(*addrstr == '[') addrstr++;
    ab7a:	7803      	ldrb	r3, [r0, #0]
    ab7c:	3b5b      	subs	r3, #91	; 0x5b
    ab7e:	425a      	negs	r2, r3
    ab80:	4153      	adcs	r3, r2
    ab82:	18c0      	adds	r0, r0, r3

/*-----------------------------------------------------------------------------------*/
#if UIP_CONF_IPV6
int
uiplib_ip6addrconv(const char *addrstr, uip_ip6addr_t *ipaddr)
{
    ab84:	2400      	movs	r4, #0
    ab86:	2201      	movs	r2, #1
    ab88:	4252      	negs	r2, r2
    ab8a:	2500      	movs	r5, #0
        tmp = c - 'A' + 10;
      } else {
        PRINTF("uiplib: illegal char: '%c'\n\r", c);
        return 0;
      }
      value = (value << 4) + (tmp & 0xf);
    ab8c:	270f      	movs	r7, #15
  value = 0;
  zero = -1;
  if(*addrstr == '[') addrstr++;

  for(len = 0; len < sizeof(uip_ip6addr_t) - 1; addrstr++) {
    c = *addrstr;
    ab8e:	7803      	ldrb	r3, [r0, #0]
    if(c == ':' || c == '\0' || c == ']' || c == '/') {
    ab90:	2b3a      	cmp	r3, #58	; 0x3a
    ab92:	d04e      	beq.n	ac32 <uiplib_ip6addrconv+0xba>
    ab94:	2b00      	cmp	r3, #0
    ab96:	d046      	beq.n	ac26 <uiplib_ip6addrconv+0xae>
    ab98:	2b5d      	cmp	r3, #93	; 0x5d
    ab9a:	d03e      	beq.n	ac1a <uiplib_ip6addrconv+0xa2>
    ab9c:	2b2f      	cmp	r3, #47	; 0x2f
    ab9e:	d106      	bne.n	abae <uiplib_ip6addrconv+0x36>
    aba0:	e051      	b.n	ac46 <uiplib_ip6addrconv+0xce>
        break;
      }

      if(*(addrstr + 1) == ':') {
        /* Zero compression */
        if(zero < 0) {
    aba2:	2a00      	cmp	r2, #0
    aba4:	da00      	bge.n	aba8 <uiplib_ip6addrconv+0x30>
          zero = len;
    aba6:	1c22      	adds	r2, r4, #0
        }
        addrstr++;
    aba8:	3001      	adds	r0, #1
    c = *addrstr;
    if(c == ':' || c == '\0' || c == ']' || c == '/') {
      ipaddr->u8[len] = (value >> 8) & 0xff;
      ipaddr->u8[len + 1] = value & 0xff;
      len += 2;
      value = 0;
    abaa:	2500      	movs	r5, #0
    abac:	e012      	b.n	abd4 <uiplib_ip6addrconv+0x5c>
          zero = len;
        }
        addrstr++;
      }
    } else {
      if(c >= '0' && c <= '9') {
    abae:	1c1e      	adds	r6, r3, #0
    abb0:	3e30      	subs	r6, #48	; 0x30
    abb2:	2e09      	cmp	r6, #9
    abb4:	d90a      	bls.n	abcc <uiplib_ip6addrconv+0x54>
        tmp = c - '0';
      } else if(c >= 'a' && c <= 'f') {
    abb6:	1c1e      	adds	r6, r3, #0
    abb8:	3e61      	subs	r6, #97	; 0x61
    abba:	2e05      	cmp	r6, #5
    abbc:	d801      	bhi.n	abc2 <uiplib_ip6addrconv+0x4a>
        tmp = c - 'a' + 10;
    abbe:	360a      	adds	r6, #10
    abc0:	e004      	b.n	abcc <uiplib_ip6addrconv+0x54>
      } else if(c >= 'A' && c <= 'F') {
    abc2:	1c1e      	adds	r6, r3, #0
    abc4:	3e41      	subs	r6, #65	; 0x41
    abc6:	2e05      	cmp	r6, #5
    abc8:	d823      	bhi.n	ac12 <uiplib_ip6addrconv+0x9a>
        tmp = c - 'A' + 10;
    abca:	360a      	adds	r6, #10
      } else {
        PRINTF("uiplib: illegal char: '%c'\n\r", c);
        return 0;
      }
      value = (value << 4) + (tmp & 0xf);
    abcc:	012d      	lsls	r5, r5, #4
    abce:	403e      	ands	r6, r7
    abd0:	19ad      	adds	r5, r5, r6
    abd2:	b2ad      	uxth	r5, r5

  value = 0;
  zero = -1;
  if(*addrstr == '[') addrstr++;

  for(len = 0; len < sizeof(uip_ip6addr_t) - 1; addrstr++) {
    abd4:	3001      	adds	r0, #1
    abd6:	2c0e      	cmp	r4, #14
    abd8:	d9d9      	bls.n	ab8e <uiplib_ip6addrconv+0x16>
        return 0;
      }
      value = (value << 4) + (tmp & 0xf);
    }
  }
  if(c != '\0' && c != ']' && c != '/') {
    abda:	2b00      	cmp	r3, #0
    abdc:	d004      	beq.n	abe8 <uiplib_ip6addrconv+0x70>
    abde:	2b5d      	cmp	r3, #93	; 0x5d
    abe0:	d002      	beq.n	abe8 <uiplib_ip6addrconv+0x70>
    PRINTF("uiplib: too large address\n\r");
    return 0;
    abe2:	2000      	movs	r0, #0
        return 0;
      }
      value = (value << 4) + (tmp & 0xf);
    }
  }
  if(c != '\0' && c != ']' && c != '/') {
    abe4:	2b2f      	cmp	r3, #47	; 0x2f
    abe6:	d134      	bne.n	ac52 <uiplib_ip6addrconv+0xda>
    memmove(&ipaddr->u8[zero + sizeof(uip_ip6addr_t) - len],
            &ipaddr->u8[zero], len - zero);
    memset(&ipaddr->u8[zero], 0, sizeof(uip_ip6addr_t) - len);
  }

  return 1;
    abe8:	2001      	movs	r0, #1
  }
  if(c != '\0' && c != ']' && c != '/') {
    PRINTF("uiplib: too large address\n\r");
    return 0;
  }
  if(len < sizeof(uip_ip6addr_t)) {
    abea:	2c0f      	cmp	r4, #15
    abec:	d831      	bhi.n	ac52 <uiplib_ip6addrconv+0xda>
    if(zero < 0) {
    abee:	2a00      	cmp	r2, #0
    abf0:	db11      	blt.n	ac16 <uiplib_ip6addrconv+0x9e>
      PRINTF("uiplib: too short address\n\r");
      return 0;
    }
    memmove(&ipaddr->u8[zero + sizeof(uip_ip6addr_t) - len],
            &ipaddr->u8[zero], len - zero);
    abf2:	188d      	adds	r5, r1, r2
  if(len < sizeof(uip_ip6addr_t)) {
    if(zero < 0) {
      PRINTF("uiplib: too short address\n\r");
      return 0;
    }
    memmove(&ipaddr->u8[zero + sizeof(uip_ip6addr_t) - len],
    abf4:	1b10      	subs	r0, r2, r4
    abf6:	3010      	adds	r0, #16
    abf8:	1808      	adds	r0, r1, r0
    abfa:	1aa2      	subs	r2, r4, r2
    abfc:	1c29      	adds	r1, r5, #0
    abfe:	4b15      	ldr	r3, [pc, #84]	; (ac54 <uiplib_ip6addrconv+0xdc>)
    ac00:	4798      	blx	r3
            &ipaddr->u8[zero], len - zero);
    memset(&ipaddr->u8[zero], 0, sizeof(uip_ip6addr_t) - len);
    ac02:	2210      	movs	r2, #16
    ac04:	1b12      	subs	r2, r2, r4
    ac06:	1c28      	adds	r0, r5, #0
    ac08:	2100      	movs	r1, #0
    ac0a:	4b13      	ldr	r3, [pc, #76]	; (ac58 <uiplib_ip6addrconv+0xe0>)
    ac0c:	4798      	blx	r3
  }

  return 1;
    ac0e:	2001      	movs	r0, #1
    ac10:	e01f      	b.n	ac52 <uiplib_ip6addrconv+0xda>
        tmp = c - 'a' + 10;
      } else if(c >= 'A' && c <= 'F') {
        tmp = c - 'A' + 10;
      } else {
        PRINTF("uiplib: illegal char: '%c'\n\r", c);
        return 0;
    ac12:	2000      	movs	r0, #0
    ac14:	e01d      	b.n	ac52 <uiplib_ip6addrconv+0xda>
    return 0;
  }
  if(len < sizeof(uip_ip6addr_t)) {
    if(zero < 0) {
      PRINTF("uiplib: too short address\n\r");
      return 0;
    ac16:	2000      	movs	r0, #0
    ac18:	e01b      	b.n	ac52 <uiplib_ip6addrconv+0xda>
  if(*addrstr == '[') addrstr++;

  for(len = 0; len < sizeof(uip_ip6addr_t) - 1; addrstr++) {
    c = *addrstr;
    if(c == ':' || c == '\0' || c == ']' || c == '/') {
      ipaddr->u8[len] = (value >> 8) & 0xff;
    ac1a:	0a2b      	lsrs	r3, r5, #8
    ac1c:	550b      	strb	r3, [r1, r4]
      ipaddr->u8[len + 1] = value & 0xff;
    ac1e:	190b      	adds	r3, r1, r4
    ac20:	705d      	strb	r5, [r3, #1]
      len += 2;
    ac22:	3402      	adds	r4, #2
    ac24:	e7e0      	b.n	abe8 <uiplib_ip6addrconv+0x70>
  if(*addrstr == '[') addrstr++;

  for(len = 0; len < sizeof(uip_ip6addr_t) - 1; addrstr++) {
    c = *addrstr;
    if(c == ':' || c == '\0' || c == ']' || c == '/') {
      ipaddr->u8[len] = (value >> 8) & 0xff;
    ac26:	0a2b      	lsrs	r3, r5, #8
    ac28:	550b      	strb	r3, [r1, r4]
      ipaddr->u8[len + 1] = value & 0xff;
    ac2a:	190b      	adds	r3, r1, r4
    ac2c:	705d      	strb	r5, [r3, #1]
      len += 2;
    ac2e:	3402      	adds	r4, #2
    ac30:	e7da      	b.n	abe8 <uiplib_ip6addrconv+0x70>
  if(*addrstr == '[') addrstr++;

  for(len = 0; len < sizeof(uip_ip6addr_t) - 1; addrstr++) {
    c = *addrstr;
    if(c == ':' || c == '\0' || c == ']' || c == '/') {
      ipaddr->u8[len] = (value >> 8) & 0xff;
    ac32:	0a2e      	lsrs	r6, r5, #8
    ac34:	550e      	strb	r6, [r1, r4]
      ipaddr->u8[len + 1] = value & 0xff;
    ac36:	190e      	adds	r6, r1, r4
    ac38:	7075      	strb	r5, [r6, #1]
      len += 2;
    ac3a:	3402      	adds	r4, #2

      if(c == '\0' || c == ']' || c == '/') {
        break;
      }

      if(*(addrstr + 1) == ':') {
    ac3c:	7845      	ldrb	r5, [r0, #1]
    ac3e:	2d3a      	cmp	r5, #58	; 0x3a
    ac40:	d0af      	beq.n	aba2 <uiplib_ip6addrconv+0x2a>
    c = *addrstr;
    if(c == ':' || c == '\0' || c == ']' || c == '/') {
      ipaddr->u8[len] = (value >> 8) & 0xff;
      ipaddr->u8[len + 1] = value & 0xff;
      len += 2;
      value = 0;
    ac42:	2500      	movs	r5, #0
    ac44:	e7c6      	b.n	abd4 <uiplib_ip6addrconv+0x5c>
  if(*addrstr == '[') addrstr++;

  for(len = 0; len < sizeof(uip_ip6addr_t) - 1; addrstr++) {
    c = *addrstr;
    if(c == ':' || c == '\0' || c == ']' || c == '/') {
      ipaddr->u8[len] = (value >> 8) & 0xff;
    ac46:	0a2b      	lsrs	r3, r5, #8
    ac48:	550b      	strb	r3, [r1, r4]
      ipaddr->u8[len + 1] = value & 0xff;
    ac4a:	190b      	adds	r3, r1, r4
    ac4c:	705d      	strb	r5, [r3, #1]
      len += 2;
    ac4e:	3402      	adds	r4, #2
    ac50:	e7ca      	b.n	abe8 <uiplib_ip6addrconv+0x70>
            &ipaddr->u8[zero], len - zero);
    memset(&ipaddr->u8[zero], 0, sizeof(uip_ip6addr_t) - len);
  }

  return 1;
}
    ac52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ac54:	000108f9 	.word	0x000108f9
    ac58:	00010921 	.word	0x00010921

0000ac5c <linkaddr_copy>:


/*---------------------------------------------------------------------------*/
void
linkaddr_copy(linkaddr_t *dest, const linkaddr_t *src)
{
    ac5c:	b508      	push	{r3, lr}
	memcpy(dest, src, LINKADDR_SIZE);
    ac5e:	2208      	movs	r2, #8
    ac60:	4b01      	ldr	r3, [pc, #4]	; (ac68 <linkaddr_copy+0xc>)
    ac62:	4798      	blx	r3
}
    ac64:	bd08      	pop	{r3, pc}
    ac66:	46c0      	nop			; (mov r8, r8)
    ac68:	000108e7 	.word	0x000108e7

0000ac6c <linkaddr_cmp>:
/*---------------------------------------------------------------------------*/
int
linkaddr_cmp(const linkaddr_t *addr1, const linkaddr_t *addr2)
{
    ac6c:	b508      	push	{r3, lr}
	return (memcmp(addr1, addr2, LINKADDR_SIZE) == 0);
    ac6e:	2208      	movs	r2, #8
    ac70:	4b02      	ldr	r3, [pc, #8]	; (ac7c <linkaddr_cmp+0x10>)
    ac72:	4798      	blx	r3
    ac74:	4243      	negs	r3, r0
    ac76:	4158      	adcs	r0, r3
}
    ac78:	bd08      	pop	{r3, pc}
    ac7a:	46c0      	nop			; (mov r8, r8)
    ac7c:	000108c9 	.word	0x000108c9

0000ac80 <linkaddr_set_node_addr>:
/*---------------------------------------------------------------------------*/
void
linkaddr_set_node_addr(linkaddr_t *t)
{
    ac80:	b508      	push	{r3, lr}
    ac82:	1c01      	adds	r1, r0, #0
  linkaddr_copy(&linkaddr_node_addr, t);
    ac84:	4801      	ldr	r0, [pc, #4]	; (ac8c <linkaddr_set_node_addr+0xc>)
    ac86:	4b02      	ldr	r3, [pc, #8]	; (ac90 <linkaddr_set_node_addr+0x10>)
    ac88:	4798      	blx	r3
}
    ac8a:	bd08      	pop	{r3, pc}
    ac8c:	200031d0 	.word	0x200031d0
    ac90:	0000ac5d 	.word	0x0000ac5d

0000ac94 <input_packet>:
  mac_call_sent_callback(sent, ptr, MAC_TX_ERR, 1);
}
/*---------------------------------------------------------------------------*/
static void
input_packet(void)
{
    ac94:	b508      	push	{r3, lr}
  NETSTACK_NETWORK.input();
    ac96:	4b02      	ldr	r3, [pc, #8]	; (aca0 <input_packet+0xc>)
    ac98:	689b      	ldr	r3, [r3, #8]
    ac9a:	4798      	blx	r3
}
    ac9c:	bd08      	pop	{r3, pc}
    ac9e:	46c0      	nop			; (mov r8, r8)
    aca0:	000129a0 	.word	0x000129a0

0000aca4 <on>:
/*---------------------------------------------------------------------------*/
static int
on(void)
{
    aca4:	b508      	push	{r3, lr}
  return NETSTACK_RDC.on();
    aca6:	4b02      	ldr	r3, [pc, #8]	; (acb0 <on+0xc>)
    aca8:	695b      	ldr	r3, [r3, #20]
    acaa:	4798      	blx	r3
}
    acac:	bd08      	pop	{r3, pc}
    acae:	46c0      	nop			; (mov r8, r8)
    acb0:	00012c24 	.word	0x00012c24

0000acb4 <off>:
/*---------------------------------------------------------------------------*/
static int
off(int keep_radio_on)
{
    acb4:	b508      	push	{r3, lr}
  return NETSTACK_RDC.off(keep_radio_on);
    acb6:	4b02      	ldr	r3, [pc, #8]	; (acc0 <off+0xc>)
    acb8:	699b      	ldr	r3, [r3, #24]
    acba:	4798      	blx	r3
}
    acbc:	bd08      	pop	{r3, pc}
    acbe:	46c0      	nop			; (mov r8, r8)
    acc0:	00012c24 	.word	0x00012c24

0000acc4 <channel_check_interval>:
/*---------------------------------------------------------------------------*/
static unsigned short
channel_check_interval(void)
{
    acc4:	b508      	push	{r3, lr}
  if(NETSTACK_RDC.channel_check_interval) {
    acc6:	4b04      	ldr	r3, [pc, #16]	; (acd8 <channel_check_interval+0x14>)
    acc8:	69db      	ldr	r3, [r3, #28]
    acca:	2b00      	cmp	r3, #0
    accc:	d001      	beq.n	acd2 <channel_check_interval+0xe>
    return NETSTACK_RDC.channel_check_interval();
    acce:	4798      	blx	r3
    acd0:	e000      	b.n	acd4 <channel_check_interval+0x10>
  }
  return 0;
    acd2:	2000      	movs	r0, #0
}
    acd4:	bd08      	pop	{r3, pc}
    acd6:	46c0      	nop			; (mov r8, r8)
    acd8:	00012c24 	.word	0x00012c24

0000acdc <transmit_packet_list>:
  return time;
}
/*---------------------------------------------------------------------------*/
static void
transmit_packet_list(void *ptr)
{
    acdc:	b510      	push	{r4, lr}
  struct neighbor_queue *n = ptr;
  if(n) {
    acde:	2800      	cmp	r0, #0
    ace0:	d00a      	beq.n	acf8 <transmit_packet_list+0x1c>
    ace2:	1c04      	adds	r4, r0, #0
    struct rdc_buf_list *q = list_head(n->queued_packet_list);
    ace4:	6b40      	ldr	r0, [r0, #52]	; 0x34
    ace6:	4b05      	ldr	r3, [pc, #20]	; (acfc <transmit_packet_list+0x20>)
    ace8:	4798      	blx	r3
    acea:	1e02      	subs	r2, r0, #0
    if(q != NULL) {
    acec:	d004      	beq.n	acf8 <transmit_packet_list+0x1c>
      PRINTF("csma: preparing number %d %p, queue len %d\n\r", n->transmissions, q,
          list_length(n->queued_packet_list));
      /* Send packets in the neighbor's list */
      NETSTACK_RDC.send_list(packet_sent, n, q);
    acee:	4b04      	ldr	r3, [pc, #16]	; (ad00 <transmit_packet_list+0x24>)
    acf0:	68db      	ldr	r3, [r3, #12]
    acf2:	4804      	ldr	r0, [pc, #16]	; (ad04 <transmit_packet_list+0x28>)
    acf4:	1c21      	adds	r1, r4, #0
    acf6:	4798      	blx	r3
    }
  }
}
    acf8:	bd10      	pop	{r4, pc}
    acfa:	46c0      	nop			; (mov r8, r8)
    acfc:	00005709 	.word	0x00005709
    ad00:	00012c24 	.word	0x00012c24
    ad04:	0000af75 	.word	0x0000af75

0000ad08 <free_packet>:
/*---------------------------------------------------------------------------*/
static void
free_packet(struct neighbor_queue *n, struct rdc_buf_list *p)
{
    ad08:	b570      	push	{r4, r5, r6, lr}
  if(p != NULL) {
    ad0a:	2900      	cmp	r1, #0
    ad0c:	d034      	beq.n	ad78 <free_packet+0x70>
    ad0e:	1c0d      	adds	r5, r1, #0
    ad10:	1c04      	adds	r4, r0, #0
    /* Remove packet from list and deallocate */
    list_remove(n->queued_packet_list, p);
    ad12:	6b40      	ldr	r0, [r0, #52]	; 0x34
    ad14:	4b19      	ldr	r3, [pc, #100]	; (ad7c <free_packet+0x74>)
    ad16:	4798      	blx	r3

    queuebuf_free(p->buf);
    ad18:	6868      	ldr	r0, [r5, #4]
    ad1a:	4b19      	ldr	r3, [pc, #100]	; (ad80 <free_packet+0x78>)
    ad1c:	4798      	blx	r3
    memb_free(&metadata_memb, p->ptr);
    ad1e:	4819      	ldr	r0, [pc, #100]	; (ad84 <free_packet+0x7c>)
    ad20:	68a9      	ldr	r1, [r5, #8]
    ad22:	4e19      	ldr	r6, [pc, #100]	; (ad88 <free_packet+0x80>)
    ad24:	47b0      	blx	r6
    memb_free(&packet_memb, p);
    ad26:	4819      	ldr	r0, [pc, #100]	; (ad8c <free_packet+0x84>)
    ad28:	1c29      	adds	r1, r5, #0
    ad2a:	47b0      	blx	r6
    PRINTF("csma: free_queued_packet, queue length %d\n\r",
        list_length(n->queued_packet_list));
    if(list_head(n->queued_packet_list) != NULL) {
    ad2c:	6b60      	ldr	r0, [r4, #52]	; 0x34
    ad2e:	4b18      	ldr	r3, [pc, #96]	; (ad90 <free_packet+0x88>)
    ad30:	4798      	blx	r3
    ad32:	2800      	cmp	r0, #0
    ad34:	d014      	beq.n	ad60 <free_packet+0x58>
      /* There is a next packet. We reset current tx information */
      n->transmissions = 0;
    ad36:	2300      	movs	r3, #0
    ad38:	222c      	movs	r2, #44	; 0x2c
    ad3a:	54a3      	strb	r3, [r4, r2]
      n->collisions = 0;
    ad3c:	3201      	adds	r2, #1
    ad3e:	54a3      	strb	r3, [r4, r2]
      n->deferrals = 0;
    ad40:	3201      	adds	r2, #1
    ad42:	54a3      	strb	r3, [r4, r2]
      /* Set a timer for next transmissions */
      ctimer_set(&n->transmit_timer, default_timebase(),
    ad44:	1c25      	adds	r5, r4, #0
    ad46:	350c      	adds	r5, #12
default_timebase(void)
{
  clock_time_t time;
  /* The retransmission time must be proportional to the channel
     check interval of the underlying radio duty cycling layer. */
  time = NETSTACK_RDC.channel_check_interval();
    ad48:	4b12      	ldr	r3, [pc, #72]	; (ad94 <free_packet+0x8c>)
    ad4a:	69db      	ldr	r3, [r3, #28]
    ad4c:	4798      	blx	r3
    ad4e:	1e01      	subs	r1, r0, #0

  /* If the radio duty cycle has no channel check interval (i.e., it
     does not turn the radio off), we make the retransmission time
     proportional to the configured MAC channel check rate. */
  if(time == 0) {
    ad50:	d100      	bne.n	ad54 <free_packet+0x4c>
    time = CLOCK_SECOND / NETSTACK_RDC_CHANNEL_CHECK_RATE;
    ad52:	3104      	adds	r1, #4
      /* There is a next packet. We reset current tx information */
      n->transmissions = 0;
      n->collisions = 0;
      n->deferrals = 0;
      /* Set a timer for next transmissions */
      ctimer_set(&n->transmit_timer, default_timebase(),
    ad54:	1c28      	adds	r0, r5, #0
    ad56:	4a10      	ldr	r2, [pc, #64]	; (ad98 <free_packet+0x90>)
    ad58:	1c23      	adds	r3, r4, #0
    ad5a:	4c10      	ldr	r4, [pc, #64]	; (ad9c <free_packet+0x94>)
    ad5c:	47a0      	blx	r4
    ad5e:	e00b      	b.n	ad78 <free_packet+0x70>
                 transmit_packet_list, n);
    } else {
      /* This was the last packet in the queue, we free the neighbor */
      ctimer_stop(&n->transmit_timer);
    ad60:	1c20      	adds	r0, r4, #0
    ad62:	300c      	adds	r0, #12
    ad64:	4b0e      	ldr	r3, [pc, #56]	; (ada0 <free_packet+0x98>)
    ad66:	4798      	blx	r3
      list_remove(neighbor_list, n);
    ad68:	480e      	ldr	r0, [pc, #56]	; (ada4 <free_packet+0x9c>)
    ad6a:	1c21      	adds	r1, r4, #0
    ad6c:	4b03      	ldr	r3, [pc, #12]	; (ad7c <free_packet+0x74>)
    ad6e:	4798      	blx	r3
      memb_free(&neighbor_memb, n);
    ad70:	480d      	ldr	r0, [pc, #52]	; (ada8 <free_packet+0xa0>)
    ad72:	1c21      	adds	r1, r4, #0
    ad74:	4b04      	ldr	r3, [pc, #16]	; (ad88 <free_packet+0x80>)
    ad76:	4798      	blx	r3
    }
  }
}
    ad78:	bd70      	pop	{r4, r5, r6, pc}
    ad7a:	46c0      	nop			; (mov r8, r8)
    ad7c:	00005725 	.word	0x00005725
    ad80:	0000c129 	.word	0x0000c129
    ad84:	200000d0 	.word	0x200000d0
    ad88:	00005821 	.word	0x00005821
    ad8c:	200000e8 	.word	0x200000e8
    ad90:	00005709 	.word	0x00005709
    ad94:	00012c24 	.word	0x00012c24
    ad98:	0000acdd 	.word	0x0000acdd
    ad9c:	0000e615 	.word	0x0000e615
    ada0:	0000e705 	.word	0x0000e705
    ada4:	20000c90 	.word	0x20000c90
    ada8:	200000dc 	.word	0x200000dc

0000adac <send_packet>:
  }
}
/*---------------------------------------------------------------------------*/
static void
send_packet(mac_callback_t sent, void *ptr)
{
    adac:	b5f0      	push	{r4, r5, r6, r7, lr}
    adae:	b083      	sub	sp, #12
    adb0:	9000      	str	r0, [sp, #0]
    adb2:	9101      	str	r1, [sp, #4]
  struct neighbor_queue *n;
  static uint8_t initialized = 0;
  static uint16_t seqno;
  const linkaddr_t *addr = packetbuf_addr(PACKETBUF_ADDR_RECEIVER);

  if(!initialized) {
    adb4:	4b4e      	ldr	r3, [pc, #312]	; (aef0 <send_packet+0x144>)
    adb6:	781b      	ldrb	r3, [r3, #0]
    adb8:	2b00      	cmp	r3, #0
    adba:	d106      	bne.n	adca <send_packet+0x1e>
    initialized = 1;
    adbc:	2201      	movs	r2, #1
    adbe:	4b4c      	ldr	r3, [pc, #304]	; (aef0 <send_packet+0x144>)
    adc0:	701a      	strb	r2, [r3, #0]
    /* Initialize the sequence number to a random value as per 802.15.4. */
    seqno = random_rand();
    adc2:	4b4c      	ldr	r3, [pc, #304]	; (aef4 <send_packet+0x148>)
    adc4:	4798      	blx	r3
    adc6:	4b4c      	ldr	r3, [pc, #304]	; (aef8 <send_packet+0x14c>)
    adc8:	8018      	strh	r0, [r3, #0]
  }

  if(seqno == 0) {
    adca:	4b4b      	ldr	r3, [pc, #300]	; (aef8 <send_packet+0x14c>)
    adcc:	881b      	ldrh	r3, [r3, #0]
    adce:	2b00      	cmp	r3, #0
    add0:	d102      	bne.n	add8 <send_packet+0x2c>
    /* PACKETBUF_ATTR_MAC_SEQNO cannot be zero, due to a pecuilarity
       in framer-802154.c. */
    seqno++;
    add2:	2201      	movs	r2, #1
    add4:	4b48      	ldr	r3, [pc, #288]	; (aef8 <send_packet+0x14c>)
    add6:	801a      	strh	r2, [r3, #0]
  }
  packetbuf_set_attr(PACKETBUF_ATTR_MAC_SEQNO, seqno++);
    add8:	4a47      	ldr	r2, [pc, #284]	; (aef8 <send_packet+0x14c>)
    adda:	8813      	ldrh	r3, [r2, #0]
    addc:	1c59      	adds	r1, r3, #1
    adde:	8011      	strh	r1, [r2, #0]

static inline int
packetbuf_set_attr(uint8_t type, const packetbuf_attr_t val)
{
/*   packetbuf_attrs[type].type = type; */
  packetbuf_attrs[type].val = val;
    ade0:	4a46      	ldr	r2, [pc, #280]	; (aefc <send_packet+0x150>)
    ade2:	82d3      	strh	r3, [r2, #22]

/*---------------------------------------------------------------------------*/
static struct neighbor_queue *
neighbor_queue_from_addr(const linkaddr_t *addr)
{
  struct neighbor_queue *n = list_head(neighbor_list);
    ade4:	4846      	ldr	r0, [pc, #280]	; (af00 <send_packet+0x154>)
    ade6:	4b47      	ldr	r3, [pc, #284]	; (af04 <send_packet+0x158>)
    ade8:	4798      	blx	r3
    adea:	1e04      	subs	r4, r0, #0
  while(n != NULL) {
    adec:	d00e      	beq.n	ae0c <send_packet+0x60>
    if(linkaddr_cmp(&n->addr, addr)) {
    adee:	4d46      	ldr	r5, [pc, #280]	; (af08 <send_packet+0x15c>)
    adf0:	4f46      	ldr	r7, [pc, #280]	; (af0c <send_packet+0x160>)
      return n;
    }
    n = list_item_next(n);
    adf2:	4e47      	ldr	r6, [pc, #284]	; (af10 <send_packet+0x164>)
static struct neighbor_queue *
neighbor_queue_from_addr(const linkaddr_t *addr)
{
  struct neighbor_queue *n = list_head(neighbor_list);
  while(n != NULL) {
    if(linkaddr_cmp(&n->addr, addr)) {
    adf4:	1d20      	adds	r0, r4, #4
    adf6:	1c29      	adds	r1, r5, #0
    adf8:	47b8      	blx	r7
    adfa:	2800      	cmp	r0, #0
    adfc:	d002      	beq.n	ae04 <send_packet+0x58>
  }
  packetbuf_set_attr(PACKETBUF_ATTR_MAC_SEQNO, seqno++);

  /* Look for the neighbor entry */
  n = neighbor_queue_from_addr(addr);
  if(n == NULL) {
    adfe:	2c00      	cmp	r4, #0
    ae00:	d16d      	bne.n	aede <send_packet+0x132>
    ae02:	e003      	b.n	ae0c <send_packet+0x60>
  struct neighbor_queue *n = list_head(neighbor_list);
  while(n != NULL) {
    if(linkaddr_cmp(&n->addr, addr)) {
      return n;
    }
    n = list_item_next(n);
    ae04:	1c20      	adds	r0, r4, #0
    ae06:	47b0      	blx	r6
    ae08:	1e04      	subs	r4, r0, #0
/*---------------------------------------------------------------------------*/
static struct neighbor_queue *
neighbor_queue_from_addr(const linkaddr_t *addr)
{
  struct neighbor_queue *n = list_head(neighbor_list);
  while(n != NULL) {
    ae0a:	d1f3      	bne.n	adf4 <send_packet+0x48>

  /* Look for the neighbor entry */
  n = neighbor_queue_from_addr(addr);
  if(n == NULL) {
    /* Allocate a new neighbor entry */
    n = memb_alloc(&neighbor_memb);
    ae0c:	4841      	ldr	r0, [pc, #260]	; (af14 <send_packet+0x168>)
    ae0e:	4b42      	ldr	r3, [pc, #264]	; (af18 <send_packet+0x16c>)
    ae10:	4798      	blx	r3
    ae12:	1e04      	subs	r4, r0, #0
    if(n != NULL) {
    ae14:	d05c      	beq.n	aed0 <send_packet+0x124>
      /* Init neighbor entry */
      linkaddr_copy(&n->addr, addr);
    ae16:	3004      	adds	r0, #4
    ae18:	493b      	ldr	r1, [pc, #236]	; (af08 <send_packet+0x15c>)
    ae1a:	4b40      	ldr	r3, [pc, #256]	; (af1c <send_packet+0x170>)
    ae1c:	4798      	blx	r3
      n->transmissions = 0;
    ae1e:	2300      	movs	r3, #0
    ae20:	222c      	movs	r2, #44	; 0x2c
    ae22:	54a3      	strb	r3, [r4, r2]
      n->collisions = 0;
    ae24:	3201      	adds	r2, #1
    ae26:	54a3      	strb	r3, [r4, r2]
      n->deferrals = 0;
    ae28:	3201      	adds	r2, #1
    ae2a:	54a3      	strb	r3, [r4, r2]
      /* Init packet list for this neighbor */
      LIST_STRUCT_INIT(n, queued_packet_list);
    ae2c:	1c20      	adds	r0, r4, #0
    ae2e:	3030      	adds	r0, #48	; 0x30
    ae30:	6360      	str	r0, [r4, #52]	; 0x34
    ae32:	6323      	str	r3, [r4, #48]	; 0x30
    ae34:	4b3a      	ldr	r3, [pc, #232]	; (af20 <send_packet+0x174>)
    ae36:	4798      	blx	r3
      /* Add neighbor to the list */
      list_add(neighbor_list, n);
    ae38:	4831      	ldr	r0, [pc, #196]	; (af00 <send_packet+0x154>)
    ae3a:	1c21      	adds	r1, r4, #0
    ae3c:	4b39      	ldr	r3, [pc, #228]	; (af24 <send_packet+0x178>)
    ae3e:	4798      	blx	r3
    ae40:	e04d      	b.n	aede <send_packet+0x132>

  if(n != NULL) {
    /* Add packet to the neighbor's queue */
    q = memb_alloc(&packet_memb);
    if(q != NULL) {
      q->ptr = memb_alloc(&metadata_memb);
    ae42:	4839      	ldr	r0, [pc, #228]	; (af28 <send_packet+0x17c>)
    ae44:	4b34      	ldr	r3, [pc, #208]	; (af18 <send_packet+0x16c>)
    ae46:	4798      	blx	r3
    ae48:	60a8      	str	r0, [r5, #8]
      if(q->ptr != NULL) {
    ae4a:	2800      	cmp	r0, #0
    ae4c:	d02f      	beq.n	aeae <send_packet+0x102>
	q->buf = queuebuf_new_from_packetbuf();
    ae4e:	4b37      	ldr	r3, [pc, #220]	; (af2c <send_packet+0x180>)
    ae50:	4798      	blx	r3
    ae52:	6068      	str	r0, [r5, #4]
	if(q->buf != NULL) {
    ae54:	2800      	cmp	r0, #0
    ae56:	d026      	beq.n	aea6 <send_packet+0xfa>
	  struct qbuf_metadata *metadata = (struct qbuf_metadata *)q->ptr;
    ae58:	68ab      	ldr	r3, [r5, #8]
  return 1;
}
static inline packetbuf_attr_t
packetbuf_attr(uint8_t type)
{
  return packetbuf_attrs[type].val;
    ae5a:	4a28      	ldr	r2, [pc, #160]	; (aefc <send_packet+0x150>)
    ae5c:	8a92      	ldrh	r2, [r2, #20]
	  /* Neighbor and packet successfully allocated */
	  if(packetbuf_attr(PACKETBUF_ATTR_MAX_MAC_TRANSMISSIONS) == 0) {
    ae5e:	2a00      	cmp	r2, #0
    ae60:	d102      	bne.n	ae68 <send_packet+0xbc>
	    /* Use default configuration for max transmissions */
	    metadata->max_transmissions = CSMA_MAX_MAC_TRANSMISSIONS;
    ae62:	3203      	adds	r2, #3
    ae64:	721a      	strb	r2, [r3, #8]
    ae66:	e000      	b.n	ae6a <send_packet+0xbe>
	  } else {
	    metadata->max_transmissions =
    ae68:	721a      	strb	r2, [r3, #8]
                  packetbuf_attr(PACKETBUF_ATTR_MAX_MAC_TRANSMISSIONS);
	  }
	  metadata->sent = sent;
    ae6a:	9a00      	ldr	r2, [sp, #0]
    ae6c:	601a      	str	r2, [r3, #0]
	  metadata->cptr = ptr;
    ae6e:	9a01      	ldr	r2, [sp, #4]
    ae70:	605a      	str	r2, [r3, #4]
    ae72:	4b22      	ldr	r3, [pc, #136]	; (aefc <send_packet+0x150>)

	  if(packetbuf_attr(PACKETBUF_ATTR_PACKET_TYPE) ==
    ae74:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
    ae76:	2b01      	cmp	r3, #1
    ae78:	d104      	bne.n	ae84 <send_packet+0xd8>
	     PACKETBUF_ATTR_PACKET_TYPE_ACK) {
	    list_push(n->queued_packet_list, q);
    ae7a:	6b60      	ldr	r0, [r4, #52]	; 0x34
    ae7c:	1c29      	adds	r1, r5, #0
    ae7e:	4b2c      	ldr	r3, [pc, #176]	; (af30 <send_packet+0x184>)
    ae80:	4798      	blx	r3
    ae82:	e003      	b.n	ae8c <send_packet+0xe0>
	  } else {
	    list_add(n->queued_packet_list, q);
    ae84:	6b60      	ldr	r0, [r4, #52]	; 0x34
    ae86:	1c29      	adds	r1, r5, #0
    ae88:	4b26      	ldr	r3, [pc, #152]	; (af24 <send_packet+0x178>)
    ae8a:	4798      	blx	r3
	  }

	  /* If q is the first packet in the neighbor's queue, send asap */
	  if(list_head(n->queued_packet_list) == q) {
    ae8c:	6b60      	ldr	r0, [r4, #52]	; 0x34
    ae8e:	4b1d      	ldr	r3, [pc, #116]	; (af04 <send_packet+0x158>)
    ae90:	4798      	blx	r3
    ae92:	42a8      	cmp	r0, r5
    ae94:	d129      	bne.n	aeea <send_packet+0x13e>
	    ctimer_set(&n->transmit_timer, 0, transmit_packet_list, n);
    ae96:	1c20      	adds	r0, r4, #0
    ae98:	300c      	adds	r0, #12
    ae9a:	2100      	movs	r1, #0
    ae9c:	4a25      	ldr	r2, [pc, #148]	; (af34 <send_packet+0x188>)
    ae9e:	1c23      	adds	r3, r4, #0
    aea0:	4c25      	ldr	r4, [pc, #148]	; (af38 <send_packet+0x18c>)
    aea2:	47a0      	blx	r4
    aea4:	e021      	b.n	aeea <send_packet+0x13e>
	  }
	  return;
	}
	memb_free(&metadata_memb, q->ptr);
    aea6:	4820      	ldr	r0, [pc, #128]	; (af28 <send_packet+0x17c>)
    aea8:	68a9      	ldr	r1, [r5, #8]
    aeaa:	4b24      	ldr	r3, [pc, #144]	; (af3c <send_packet+0x190>)
    aeac:	4798      	blx	r3
	PRINTF("csma: could not allocate queuebuf, dropping packet\n\r");
      }
      memb_free(&packet_memb, q);
    aeae:	4824      	ldr	r0, [pc, #144]	; (af40 <send_packet+0x194>)
    aeb0:	1c29      	adds	r1, r5, #0
    aeb2:	4b22      	ldr	r3, [pc, #136]	; (af3c <send_packet+0x190>)
    aeb4:	4798      	blx	r3
      PRINTF("csma: could not allocate queuebuf, dropping packet\n\r");
    }
    /* The packet allocation failed. Remove and free neighbor entry if empty. */
    if(list_length(n->queued_packet_list) == 0) {
    aeb6:	6b60      	ldr	r0, [r4, #52]	; 0x34
    aeb8:	4b22      	ldr	r3, [pc, #136]	; (af44 <send_packet+0x198>)
    aeba:	4798      	blx	r3
    aebc:	2800      	cmp	r0, #0
    aebe:	d107      	bne.n	aed0 <send_packet+0x124>
      list_remove(neighbor_list, n);
    aec0:	480f      	ldr	r0, [pc, #60]	; (af00 <send_packet+0x154>)
    aec2:	1c21      	adds	r1, r4, #0
    aec4:	4b20      	ldr	r3, [pc, #128]	; (af48 <send_packet+0x19c>)
    aec6:	4798      	blx	r3
      memb_free(&neighbor_memb, n);
    aec8:	4812      	ldr	r0, [pc, #72]	; (af14 <send_packet+0x168>)
    aeca:	1c21      	adds	r1, r4, #0
    aecc:	4b1b      	ldr	r3, [pc, #108]	; (af3c <send_packet+0x190>)
    aece:	4798      	blx	r3
    }
    PRINTF("csma: could not allocate packet, dropping packet\n\r");
  } else {
    PRINTF("csma: could not allocate neighbor, dropping packet\n\r");
  }
  mac_call_sent_callback(sent, ptr, MAC_TX_ERR, 1);
    aed0:	9800      	ldr	r0, [sp, #0]
    aed2:	9901      	ldr	r1, [sp, #4]
    aed4:	2205      	movs	r2, #5
    aed6:	2301      	movs	r3, #1
    aed8:	4c1c      	ldr	r4, [pc, #112]	; (af4c <send_packet+0x1a0>)
    aeda:	47a0      	blx	r4
    aedc:	e005      	b.n	aeea <send_packet+0x13e>
    }
  }

  if(n != NULL) {
    /* Add packet to the neighbor's queue */
    q = memb_alloc(&packet_memb);
    aede:	4818      	ldr	r0, [pc, #96]	; (af40 <send_packet+0x194>)
    aee0:	4b0d      	ldr	r3, [pc, #52]	; (af18 <send_packet+0x16c>)
    aee2:	4798      	blx	r3
    aee4:	1e05      	subs	r5, r0, #0
    if(q != NULL) {
    aee6:	d1ac      	bne.n	ae42 <send_packet+0x96>
    aee8:	e7e5      	b.n	aeb6 <send_packet+0x10a>
    PRINTF("csma: could not allocate packet, dropping packet\n\r");
  } else {
    PRINTF("csma: could not allocate neighbor, dropping packet\n\r");
  }
  mac_call_sent_callback(sent, ptr, MAC_TX_ERR, 1);
}
    aeea:	b003      	add	sp, #12
    aeec:	bdf0      	pop	{r4, r5, r6, r7, pc}
    aeee:	46c0      	nop			; (mov r8, r8)
    aef0:	20000c8c 	.word	0x20000c8c
    aef4:	00005895 	.word	0x00005895
    aef8:	20000e08 	.word	0x20000e08
    aefc:	200031f8 	.word	0x200031f8
    af00:	20000c90 	.word	0x20000c90
    af04:	00005709 	.word	0x00005709
    af08:	200031e0 	.word	0x200031e0
    af0c:	0000ac6d 	.word	0x0000ac6d
    af10:	000057b1 	.word	0x000057b1
    af14:	200000dc 	.word	0x200000dc
    af18:	000057dd 	.word	0x000057dd
    af1c:	0000ac5d 	.word	0x0000ac5d
    af20:	00005701 	.word	0x00005701
    af24:	00005759 	.word	0x00005759
    af28:	200000d0 	.word	0x200000d0
    af2c:	0000c071 	.word	0x0000c071
    af30:	00005781 	.word	0x00005781
    af34:	0000acdd 	.word	0x0000acdd
    af38:	0000e615 	.word	0x0000e615
    af3c:	00005821 	.word	0x00005821
    af40:	200000e8 	.word	0x200000e8
    af44:	00005799 	.word	0x00005799
    af48:	00005725 	.word	0x00005725
    af4c:	0000b681 	.word	0x0000b681

0000af50 <init>:
  return 0;
}
/*---------------------------------------------------------------------------*/
static void
init(void)
{
    af50:	b510      	push	{r4, lr}
  memb_init(&packet_memb);
    af52:	4804      	ldr	r0, [pc, #16]	; (af64 <init+0x14>)
    af54:	4c04      	ldr	r4, [pc, #16]	; (af68 <init+0x18>)
    af56:	47a0      	blx	r4
  memb_init(&metadata_memb);
    af58:	4804      	ldr	r0, [pc, #16]	; (af6c <init+0x1c>)
    af5a:	47a0      	blx	r4
  memb_init(&neighbor_memb);
    af5c:	4804      	ldr	r0, [pc, #16]	; (af70 <init+0x20>)
    af5e:	47a0      	blx	r4
}
    af60:	bd10      	pop	{r4, pc}
    af62:	46c0      	nop			; (mov r8, r8)
    af64:	200000e8 	.word	0x200000e8
    af68:	000057bd 	.word	0x000057bd
    af6c:	200000d0 	.word	0x200000d0
    af70:	200000dc 	.word	0x200000dc

0000af74 <packet_sent>:
  }
}
/*---------------------------------------------------------------------------*/
static void
packet_sent(void *ptr, int status, int num_transmissions)
{
    af74:	b5f0      	push	{r4, r5, r6, r7, lr}
    af76:	465f      	mov	r7, fp
    af78:	4656      	mov	r6, sl
    af7a:	464d      	mov	r5, r9
    af7c:	4644      	mov	r4, r8
    af7e:	b4f0      	push	{r4, r5, r6, r7}
    af80:	b085      	sub	sp, #20
  int num_tx;
  int backoff_exponent;
  int backoff_transmissions;

  n = ptr;
  if(n == NULL) {
    af82:	2800      	cmp	r0, #0
    af84:	d100      	bne.n	af88 <packet_sent+0x14>
    af86:	e091      	b.n	b0ac <packet_sent+0x138>
    return;
  }
  switch(status) {
    af88:	2901      	cmp	r1, #1
    af8a:	d00d      	beq.n	afa8 <packet_sent+0x34>
    af8c:	dc02      	bgt.n	af94 <packet_sent+0x20>
    af8e:	2900      	cmp	r1, #0
    af90:	d005      	beq.n	af9e <packet_sent+0x2a>
    af92:	e012      	b.n	afba <packet_sent+0x46>
    af94:	2902      	cmp	r1, #2
    af96:	d002      	beq.n	af9e <packet_sent+0x2a>
    af98:	2903      	cmp	r1, #3
    af9a:	d00a      	beq.n	afb2 <packet_sent+0x3e>
    af9c:	e00d      	b.n	afba <packet_sent+0x46>
  case MAC_TX_OK:
  case MAC_TX_NOACK:
    n->transmissions += num_transmissions;
    af9e:	242c      	movs	r4, #44	; 0x2c
    afa0:	5d03      	ldrb	r3, [r0, r4]
    afa2:	18d3      	adds	r3, r2, r3
    afa4:	5503      	strb	r3, [r0, r4]
    break;
    afa6:	e008      	b.n	afba <packet_sent+0x46>
  case MAC_TX_COLLISION:
    n->collisions += num_transmissions;
    afa8:	242d      	movs	r4, #45	; 0x2d
    afaa:	5d03      	ldrb	r3, [r0, r4]
    afac:	18d3      	adds	r3, r2, r3
    afae:	5503      	strb	r3, [r0, r4]
    break;
    afb0:	e003      	b.n	afba <packet_sent+0x46>
  case MAC_TX_DEFERRED:
    n->deferrals += num_transmissions;
    afb2:	242e      	movs	r4, #46	; 0x2e
    afb4:	5d03      	ldrb	r3, [r0, r4]
    afb6:	18d3      	adds	r3, r2, r3
    afb8:	5503      	strb	r3, [r0, r4]
    afba:	9203      	str	r2, [sp, #12]
    afbc:	9101      	str	r1, [sp, #4]
    afbe:	9000      	str	r0, [sp, #0]
    break;
  }

  /* Find out what packet this callback refers to */
  for(q = list_head(n->queued_packet_list);
    afc0:	6b43      	ldr	r3, [r0, #52]	; 0x34
    afc2:	9302      	str	r3, [sp, #8]
    afc4:	1c18      	adds	r0, r3, #0
    afc6:	4b3d      	ldr	r3, [pc, #244]	; (b0bc <packet_sent+0x148>)
    afc8:	4798      	blx	r3
    afca:	1e04      	subs	r4, r0, #0
    afcc:	d06e      	beq.n	b0ac <packet_sent+0x138>
      q != NULL; q = list_item_next(q)) {
    if(queuebuf_attr(q->buf, PACKETBUF_ATTR_MAC_SEQNO) ==
    afce:	4d3c      	ldr	r5, [pc, #240]	; (b0c0 <packet_sent+0x14c>)
    afd0:	4f3c      	ldr	r7, [pc, #240]	; (b0c4 <packet_sent+0x150>)
    break;
  }

  /* Find out what packet this callback refers to */
  for(q = list_head(n->queued_packet_list);
      q != NULL; q = list_item_next(q)) {
    afd2:	4e3d      	ldr	r6, [pc, #244]	; (b0c8 <packet_sent+0x154>)
    if(queuebuf_attr(q->buf, PACKETBUF_ATTR_MAC_SEQNO) ==
    afd4:	6860      	ldr	r0, [r4, #4]
    afd6:	210b      	movs	r1, #11
    afd8:	47a8      	blx	r5
    afda:	8afb      	ldrh	r3, [r7, #22]
    afdc:	4283      	cmp	r3, r0
    afde:	d004      	beq.n	afea <packet_sent+0x76>
    break;
  }

  /* Find out what packet this callback refers to */
  for(q = list_head(n->queued_packet_list);
      q != NULL; q = list_item_next(q)) {
    afe0:	1c20      	adds	r0, r4, #0
    afe2:	47b0      	blx	r6
    afe4:	1e04      	subs	r4, r0, #0
    n->deferrals += num_transmissions;
    break;
  }

  /* Find out what packet this callback refers to */
  for(q = list_head(n->queued_packet_list);
    afe6:	d1f5      	bne.n	afd4 <packet_sent+0x60>
    afe8:	e060      	b.n	b0ac <packet_sent+0x138>
       packetbuf_attr(PACKETBUF_ATTR_MAC_SEQNO)) {
      break;
    }
  }

  if(q != NULL) {
    afea:	2c00      	cmp	r4, #0
    afec:	d05e      	beq.n	b0ac <packet_sent+0x138>
    metadata = (struct qbuf_metadata *)q->ptr;
    afee:	68a7      	ldr	r7, [r4, #8]

    if(metadata != NULL) {
    aff0:	2f00      	cmp	r7, #0
    aff2:	d05b      	beq.n	b0ac <packet_sent+0x138>
      sent = metadata->sent;
    aff4:	683b      	ldr	r3, [r7, #0]
    aff6:	469a      	mov	sl, r3
      cptr = metadata->cptr;
    aff8:	687b      	ldr	r3, [r7, #4]
    affa:	469b      	mov	fp, r3
      num_tx = n->transmissions;
    affc:	232c      	movs	r3, #44	; 0x2c
    affe:	9a00      	ldr	r2, [sp, #0]
    b000:	5cd3      	ldrb	r3, [r2, r3]
    b002:	4699      	mov	r9, r3
      if(status == MAC_TX_COLLISION ||
    b004:	9a01      	ldr	r2, [sp, #4]
    b006:	1c13      	adds	r3, r2, #0
    b008:	3b01      	subs	r3, #1
    b00a:	2b01      	cmp	r3, #1
    b00c:	d902      	bls.n	b014 <packet_sent+0xa0>
         status == MAC_TX_NOACK ||
    b00e:	2a04      	cmp	r2, #4
    b010:	d136      	bne.n	b080 <packet_sent+0x10c>
    b012:	e043      	b.n	b09c <packet_sent+0x128>
default_timebase(void)
{
  clock_time_t time;
  /* The retransmission time must be proportional to the channel
     check interval of the underlying radio duty cycling layer. */
  time = NETSTACK_RDC.channel_check_interval();
    b014:	4b2d      	ldr	r3, [pc, #180]	; (b0cc <packet_sent+0x158>)
    b016:	69db      	ldr	r3, [r3, #28]
    b018:	4798      	blx	r3
    b01a:	4680      	mov	r8, r0

  /* If the radio duty cycle has no channel check interval (i.e., it
     does not turn the radio off), we make the retransmission time
     proportional to the configured MAC channel check rate. */
  if(time == 0) {
    b01c:	1e03      	subs	r3, r0, #0
    b01e:	d101      	bne.n	b024 <packet_sent+0xb0>
    time = CLOCK_SECOND / NETSTACK_RDC_CHANNEL_CHECK_RATE;
    b020:	3304      	adds	r3, #4
    b022:	4698      	mov	r8, r3
        /* Proceed to exponentiation. */
        backoff_transmissions = 1 << backoff_exponent;

        /* Pick a time for next transmission, within the interval:
         * [time, time + 2^backoff_exponent * time[ */
        time = time + (random_rand() % (backoff_transmissions * time));
    b024:	4b2a      	ldr	r3, [pc, #168]	; (b0d0 <packet_sent+0x15c>)
    b026:	4798      	blx	r3

        if(status == MAC_TX_AGAIN) {
    b028:	9b01      	ldr	r3, [sp, #4]
    b02a:	2b04      	cmp	r3, #4
    b02c:	d00c      	beq.n	b048 <packet_sent+0xd4>
    b02e:	4649      	mov	r1, r9
    b030:	2903      	cmp	r1, #3
    b032:	dd00      	ble.n	b036 <packet_sent+0xc2>
    b034:	2103      	movs	r1, #3
        if(backoff_exponent > CSMA_MAX_BACKOFF_EXPONENT) {
          backoff_exponent = CSMA_MAX_BACKOFF_EXPONENT;
        }

        /* Proceed to exponentiation. */
        backoff_transmissions = 1 << backoff_exponent;
    b036:	2301      	movs	r3, #1
    b038:	408b      	lsls	r3, r1
    b03a:	1c19      	adds	r1, r3, #0

        /* Pick a time for next transmission, within the interval:
         * [time, time + 2^backoff_exponent * time[ */
        time = time + (random_rand() % (backoff_transmissions * time));
    b03c:	4643      	mov	r3, r8
    b03e:	4359      	muls	r1, r3
    b040:	4b24      	ldr	r3, [pc, #144]	; (b0d4 <packet_sent+0x160>)
    b042:	4798      	blx	r3
    b044:	4441      	add	r1, r8
    b046:	e000      	b.n	b04a <packet_sent+0xd6>

        if(status == MAC_TX_AGAIN) {
        	time = (clock_time_t) num_transmissions;
    b048:	9903      	ldr	r1, [sp, #12]
        }

        if(n->transmissions < metadata->max_transmissions) {
    b04a:	232c      	movs	r3, #44	; 0x2c
    b04c:	9a00      	ldr	r2, [sp, #0]
    b04e:	5cd2      	ldrb	r2, [r2, r3]
    b050:	7a3b      	ldrb	r3, [r7, #8]
    b052:	429a      	cmp	r2, r3
    b054:	d209      	bcs.n	b06a <packet_sent+0xf6>
          PRINTF("csma: retransmitting with time %lu %p\n\r", time, q);
          ctimer_set(&n->transmit_timer, time,
    b056:	9b00      	ldr	r3, [sp, #0]
    b058:	1c18      	adds	r0, r3, #0
    b05a:	300c      	adds	r0, #12
    b05c:	4a1e      	ldr	r2, [pc, #120]	; (b0d8 <packet_sent+0x164>)
    b05e:	4d1f      	ldr	r5, [pc, #124]	; (b0dc <packet_sent+0x168>)
    b060:	47a8      	blx	r5
                     transmit_packet_list, n);
          /* This is needed to correctly attribute energy that we spent
             transmitting this packet. */
          queuebuf_update_attr_from_packetbuf(q->buf);
    b062:	6860      	ldr	r0, [r4, #4]
    b064:	4b1e      	ldr	r3, [pc, #120]	; (b0e0 <packet_sent+0x16c>)
    b066:	4798      	blx	r3
    b068:	e020      	b.n	b0ac <packet_sent+0x138>
        } else {
          PRINTF("csma: drop with status %d after %d transmissions, %d collisions\n\r",
                 status, n->transmissions, n->collisions);
          free_packet(n, q);
    b06a:	9800      	ldr	r0, [sp, #0]
    b06c:	1c21      	adds	r1, r4, #0
    b06e:	4b1d      	ldr	r3, [pc, #116]	; (b0e4 <packet_sent+0x170>)
    b070:	4798      	blx	r3
          mac_call_sent_callback(sent, cptr, status, num_tx);
    b072:	4650      	mov	r0, sl
    b074:	4659      	mov	r1, fp
    b076:	9a01      	ldr	r2, [sp, #4]
    b078:	464b      	mov	r3, r9
    b07a:	4c1b      	ldr	r4, [pc, #108]	; (b0e8 <packet_sent+0x174>)
    b07c:	47a0      	blx	r4
    b07e:	e015      	b.n	b0ac <packet_sent+0x138>
        if(status == MAC_TX_OK) {
          PRINTF("csma: rexmit ok %d\n\r", n->transmissions);
        } else {
          PRINTF("csma: rexmit failed %d: %d\n\r", n->transmissions, status);
        }
        free_packet(n, q);
    b080:	9800      	ldr	r0, [sp, #0]
    b082:	1c21      	adds	r1, r4, #0
    b084:	4b17      	ldr	r3, [pc, #92]	; (b0e4 <packet_sent+0x170>)
    b086:	4798      	blx	r3
        mac_call_sent_callback(sent, cptr, status, num_tx);
    b088:	4650      	mov	r0, sl
    b08a:	4659      	mov	r1, fp
    b08c:	9a01      	ldr	r2, [sp, #4]
    b08e:	464b      	mov	r3, r9
    b090:	4c15      	ldr	r4, [pc, #84]	; (b0e8 <packet_sent+0x174>)
    b092:	47a0      	blx	r4
    b094:	e00a      	b.n	b0ac <packet_sent+0x138>
        /* Proceed to exponentiation. */
        backoff_transmissions = 1 << backoff_exponent;

        /* Pick a time for next transmission, within the interval:
         * [time, time + 2^backoff_exponent * time[ */
        time = time + (random_rand() % (backoff_transmissions * time));
    b096:	4b0e      	ldr	r3, [pc, #56]	; (b0d0 <packet_sent+0x15c>)
    b098:	4798      	blx	r3
    b09a:	e7d5      	b.n	b048 <packet_sent+0xd4>
default_timebase(void)
{
  clock_time_t time;
  /* The retransmission time must be proportional to the channel
     check interval of the underlying radio duty cycling layer. */
  time = NETSTACK_RDC.channel_check_interval();
    b09c:	4b0b      	ldr	r3, [pc, #44]	; (b0cc <packet_sent+0x158>)
    b09e:	69db      	ldr	r3, [r3, #28]
    b0a0:	4798      	blx	r3

  /* If the radio duty cycle has no channel check interval (i.e., it
     does not turn the radio off), we make the retransmission time
     proportional to the configured MAC channel check rate. */
  if(time == 0) {
    b0a2:	2800      	cmp	r0, #0
    b0a4:	d0f7      	beq.n	b096 <packet_sent+0x122>
        /* Proceed to exponentiation. */
        backoff_transmissions = 1 << backoff_exponent;

        /* Pick a time for next transmission, within the interval:
         * [time, time + 2^backoff_exponent * time[ */
        time = time + (random_rand() % (backoff_transmissions * time));
    b0a6:	4b0a      	ldr	r3, [pc, #40]	; (b0d0 <packet_sent+0x15c>)
    b0a8:	4798      	blx	r3
    b0aa:	e7cd      	b.n	b048 <packet_sent+0xd4>
        free_packet(n, q);
        mac_call_sent_callback(sent, cptr, status, num_tx);
      }
    }
  }
}
    b0ac:	b005      	add	sp, #20
    b0ae:	bc3c      	pop	{r2, r3, r4, r5}
    b0b0:	4690      	mov	r8, r2
    b0b2:	4699      	mov	r9, r3
    b0b4:	46a2      	mov	sl, r4
    b0b6:	46ab      	mov	fp, r5
    b0b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    b0ba:	46c0      	nop			; (mov r8, r8)
    b0bc:	00005709 	.word	0x00005709
    b0c0:	0000c1f1 	.word	0x0000c1f1
    b0c4:	200031f8 	.word	0x200031f8
    b0c8:	000057b1 	.word	0x000057b1
    b0cc:	00012c24 	.word	0x00012c24
    b0d0:	00005895 	.word	0x00005895
    b0d4:	00010631 	.word	0x00010631
    b0d8:	0000acdd 	.word	0x0000acdd
    b0dc:	0000e615 	.word	0x0000e615
    b0e0:	0000c115 	.word	0x0000c115
    b0e4:	0000ad09 	.word	0x0000ad09
    b0e8:	0000b681 	.word	0x0000b681

0000b0ec <field_len>:
/*----------------------------------------------------------------------------*/
static void
field_len(frame802154_t *p, field_length_t *flen)
{
  /* init flen to zeros */
  memset(flen, 0, sizeof(field_length_t));
    b0ec:	2300      	movs	r3, #0
    b0ee:	700b      	strb	r3, [r1, #0]
    b0f0:	704b      	strb	r3, [r1, #1]
    b0f2:	708b      	strb	r3, [r1, #2]
    b0f4:	70cb      	strb	r3, [r1, #3]
    b0f6:	710b      	strb	r3, [r1, #4]

  /* Determine lengths of each field based on fcf and other args */
  if(p->fcf.dest_addr_mode & 3) {
    b0f8:	7943      	ldrb	r3, [r0, #5]
    b0fa:	079b      	lsls	r3, r3, #30
    b0fc:	d001      	beq.n	b102 <field_len+0x16>
    flen->dest_pid_len = 2;
    b0fe:	2302      	movs	r3, #2
    b100:	700b      	strb	r3, [r1, #0]
  }
  if(p->fcf.src_addr_mode & 3) {
    b102:	79c3      	ldrb	r3, [r0, #7]
    b104:	079b      	lsls	r3, r3, #30
    b106:	d010      	beq.n	b12a <field_len+0x3e>
    flen->src_pid_len = 2;
    b108:	2302      	movs	r3, #2
    b10a:	708b      	strb	r3, [r1, #2]
  }

  /* Set PAN ID compression bit if src pan id matches dest pan id. */
  if(p->fcf.dest_addr_mode & 3 && p->fcf.src_addr_mode & 3 &&
    b10c:	7943      	ldrb	r3, [r0, #5]
    b10e:	079b      	lsls	r3, r3, #30
    b110:	d00b      	beq.n	b12a <field_len+0x3e>
    b112:	79c3      	ldrb	r3, [r0, #7]
    b114:	079b      	lsls	r3, r3, #30
    b116:	d008      	beq.n	b12a <field_len+0x3e>
    b118:	8a82      	ldrh	r2, [r0, #20]
    b11a:	8943      	ldrh	r3, [r0, #10]
    b11c:	429a      	cmp	r2, r3
    b11e:	d104      	bne.n	b12a <field_len+0x3e>
     p->src_pid == p->dest_pid) {
    p->fcf.panid_compression = 1;
    b120:	2301      	movs	r3, #1
    b122:	7103      	strb	r3, [r0, #4]

    /* compressed header, only do dest pid */
    flen->src_pid_len = 0;
    b124:	2300      	movs	r3, #0
    b126:	708b      	strb	r3, [r1, #2]
    b128:	e001      	b.n	b12e <field_len+0x42>
  } else {
    p->fcf.panid_compression = 0;
    b12a:	2300      	movs	r3, #0
    b12c:	7103      	strb	r3, [r0, #4]
  }

  /* determine address lengths */
  flen->dest_addr_len = addr_len(p->fcf.dest_addr_mode & 3);
    b12e:	7943      	ldrb	r3, [r0, #5]
    b130:	2203      	movs	r2, #3
    b132:	4013      	ands	r3, r2

/*----------------------------------------------------------------------------*/
CC_INLINE static uint8_t
addr_len(uint8_t mode)
{
  switch(mode) {
    b134:	2b02      	cmp	r3, #2
    b136:	d003      	beq.n	b140 <field_len+0x54>
  case FRAME802154_SHORTADDRMODE:  /* 16-bit address */
    return 2;
  case FRAME802154_LONGADDRMODE:   /* 64-bit address */
    return 8;
  default:
    return 0;
    b138:	3b03      	subs	r3, #3
    b13a:	425a      	negs	r2, r3
    b13c:	4153      	adcs	r3, r2
    b13e:	00db      	lsls	r3, r3, #3
  } else {
    p->fcf.panid_compression = 0;
  }

  /* determine address lengths */
  flen->dest_addr_len = addr_len(p->fcf.dest_addr_mode & 3);
    b140:	704b      	strb	r3, [r1, #1]
  flen->src_addr_len = addr_len(p->fcf.src_addr_mode & 3);
    b142:	79c3      	ldrb	r3, [r0, #7]
    b144:	2203      	movs	r2, #3
    b146:	4013      	ands	r3, r2

/*----------------------------------------------------------------------------*/
CC_INLINE static uint8_t
addr_len(uint8_t mode)
{
  switch(mode) {
    b148:	2b02      	cmp	r3, #2
    b14a:	d003      	beq.n	b154 <field_len+0x68>
  case FRAME802154_SHORTADDRMODE:  /* 16-bit address */
    return 2;
  case FRAME802154_LONGADDRMODE:   /* 64-bit address */
    return 8;
  default:
    return 0;
    b14c:	3b03      	subs	r3, #3
    b14e:	425a      	negs	r2, r3
    b150:	4153      	adcs	r3, r2
    b152:	00db      	lsls	r3, r3, #3
    p->fcf.panid_compression = 0;
  }

  /* determine address lengths */
  flen->dest_addr_len = addr_len(p->fcf.dest_addr_mode & 3);
  flen->src_addr_len = addr_len(p->fcf.src_addr_mode & 3);
    b154:	70cb      	strb	r3, [r1, #3]
    default:
      break;
    }
#endif
  }
}
    b156:	4770      	bx	lr

0000b158 <frame802154_hdrlen>:
 *
 *   \return The length of the frame header.
*/
int
frame802154_hdrlen(frame802154_t *p)
{
    b158:	b500      	push	{lr}
    b15a:	b083      	sub	sp, #12
  field_length_t flen;
  field_len(p, &flen);
    b15c:	4669      	mov	r1, sp
    b15e:	4b09      	ldr	r3, [pc, #36]	; (b184 <frame802154_hdrlen+0x2c>)
    b160:	4798      	blx	r3
  return 3 + flen.dest_pid_len + flen.dest_addr_len +
    b162:	466b      	mov	r3, sp
    b164:	7818      	ldrb	r0, [r3, #0]
    b166:	3003      	adds	r0, #3
    b168:	785b      	ldrb	r3, [r3, #1]
    b16a:	18c0      	adds	r0, r0, r3
    b16c:	466b      	mov	r3, sp
    b16e:	789b      	ldrb	r3, [r3, #2]
    b170:	18c0      	adds	r0, r0, r3
    flen.src_pid_len + flen.src_addr_len + flen.aux_sec_len;
    b172:	466b      	mov	r3, sp
    b174:	78db      	ldrb	r3, [r3, #3]
    b176:	18c0      	adds	r0, r0, r3
    b178:	466b      	mov	r3, sp
    b17a:	791b      	ldrb	r3, [r3, #4]
int
frame802154_hdrlen(frame802154_t *p)
{
  field_length_t flen;
  field_len(p, &flen);
  return 3 + flen.dest_pid_len + flen.dest_addr_len +
    b17c:	18c0      	adds	r0, r0, r3
    flen.src_pid_len + flen.src_addr_len + flen.aux_sec_len;
}
    b17e:	b003      	add	sp, #12
    b180:	bd00      	pop	{pc}
    b182:	46c0      	nop			; (mov r8, r8)
    b184:	0000b0ed 	.word	0x0000b0ed

0000b188 <frame802154_create>:
 *   \return The length of the frame header or 0 if there was
 *   insufficient space in the buffer for the frame headers.
*/
int
frame802154_create(frame802154_t *p, uint8_t *buf, int buf_len)
{
    b188:	b5f0      	push	{r4, r5, r6, r7, lr}
    b18a:	465f      	mov	r7, fp
    b18c:	4656      	mov	r6, sl
    b18e:	464d      	mov	r5, r9
    b190:	4644      	mov	r4, r8
    b192:	b4f0      	push	{r4, r5, r6, r7}
    b194:	b085      	sub	sp, #20
    b196:	1c05      	adds	r5, r0, #0
    b198:	1c0c      	adds	r4, r1, #0
    b19a:	4690      	mov	r8, r2
  int c;
  field_length_t flen;
  uint8_t *tx_frame_buffer;
  uint8_t pos;

  field_len(p, &flen);
    b19c:	a902      	add	r1, sp, #8
    b19e:	4b3e      	ldr	r3, [pc, #248]	; (b298 <frame802154_create+0x110>)
    b1a0:	4798      	blx	r3

  if(3 + flen.dest_pid_len + flen.dest_addr_len +
    b1a2:	ab02      	add	r3, sp, #8
    b1a4:	7819      	ldrb	r1, [r3, #0]
    b1a6:	785b      	ldrb	r3, [r3, #1]
    b1a8:	469b      	mov	fp, r3
    b1aa:	1c1e      	adds	r6, r3, #0
     flen.src_pid_len + flen.src_addr_len + flen.aux_sec_len > buf_len) {
    b1ac:	ab02      	add	r3, sp, #8
    b1ae:	789b      	ldrb	r3, [r3, #2]
    b1b0:	469c      	mov	ip, r3
    b1b2:	ab02      	add	r3, sp, #8
    b1b4:	78db      	ldrb	r3, [r3, #3]
    b1b6:	4699      	mov	r9, r3
    b1b8:	9301      	str	r3, [sp, #4]
  uint8_t *tx_frame_buffer;
  uint8_t pos;

  field_len(p, &flen);

  if(3 + flen.dest_pid_len + flen.dest_addr_len +
    b1ba:	1cca      	adds	r2, r1, #3
    b1bc:	445a      	add	r2, fp
    b1be:	4462      	add	r2, ip
     flen.src_pid_len + flen.src_addr_len + flen.aux_sec_len > buf_len) {
    b1c0:	444a      	add	r2, r9
    b1c2:	ab02      	add	r3, sp, #8
    b1c4:	7918      	ldrb	r0, [r3, #4]
    b1c6:	1812      	adds	r2, r2, r0
    /* Too little space for headers. */
    return 0;
    b1c8:	2000      	movs	r0, #0
  uint8_t *tx_frame_buffer;
  uint8_t pos;

  field_len(p, &flen);

  if(3 + flen.dest_pid_len + flen.dest_addr_len +
    b1ca:	4542      	cmp	r2, r8
    b1cc:	dc5c      	bgt.n	b288 <frame802154_create+0x100>

  /* OK, now we have field lengths.  Time to actually construct */
  /* the outgoing frame, and store it in tx_frame_buffer */
  tx_frame_buffer = buf;
  tx_frame_buffer[0] = (p->fcf.frame_type & 7) |
    ((p->fcf.security_enabled & 1) << 3) |
    b1ce:	7868      	ldrb	r0, [r5, #1]
    b1d0:	2301      	movs	r3, #1
    b1d2:	4018      	ands	r0, r3
    b1d4:	00c0      	lsls	r0, r0, #3
    ((p->fcf.frame_pending & 1) << 4) |
    b1d6:	78aa      	ldrb	r2, [r5, #2]
    b1d8:	401a      	ands	r2, r3
    b1da:	0112      	lsls	r2, r2, #4
    b1dc:	4310      	orrs	r0, r2
  }

  /* OK, now we have field lengths.  Time to actually construct */
  /* the outgoing frame, and store it in tx_frame_buffer */
  tx_frame_buffer = buf;
  tx_frame_buffer[0] = (p->fcf.frame_type & 7) |
    b1de:	782a      	ldrb	r2, [r5, #0]
    b1e0:	2707      	movs	r7, #7
    b1e2:	403a      	ands	r2, r7
    b1e4:	4310      	orrs	r0, r2
    ((p->fcf.security_enabled & 1) << 3) |
    ((p->fcf.frame_pending & 1) << 4) |
    ((p->fcf.ack_required & 1) << 5) |
    b1e6:	78ea      	ldrb	r2, [r5, #3]
    b1e8:	401a      	ands	r2, r3
    b1ea:	0152      	lsls	r2, r2, #5
  }

  /* OK, now we have field lengths.  Time to actually construct */
  /* the outgoing frame, and store it in tx_frame_buffer */
  tx_frame_buffer = buf;
  tx_frame_buffer[0] = (p->fcf.frame_type & 7) |
    b1ec:	4302      	orrs	r2, r0
    ((p->fcf.security_enabled & 1) << 3) |
    ((p->fcf.frame_pending & 1) << 4) |
    ((p->fcf.ack_required & 1) << 5) |
    ((p->fcf.panid_compression & 1) << 6);
    b1ee:	7928      	ldrb	r0, [r5, #4]
    b1f0:	4018      	ands	r0, r3
    b1f2:	0180      	lsls	r0, r0, #6
  }

  /* OK, now we have field lengths.  Time to actually construct */
  /* the outgoing frame, and store it in tx_frame_buffer */
  tx_frame_buffer = buf;
  tx_frame_buffer[0] = (p->fcf.frame_type & 7) |
    b1f4:	4302      	orrs	r2, r0
    b1f6:	7022      	strb	r2, [r4, #0]
    ((p->fcf.security_enabled & 1) << 3) |
    ((p->fcf.frame_pending & 1) << 4) |
    ((p->fcf.ack_required & 1) << 5) |
    ((p->fcf.panid_compression & 1) << 6);
  tx_frame_buffer[1] = ((p->fcf.dest_addr_mode & 3) << 2) |
    b1f8:	7968      	ldrb	r0, [r5, #5]
    b1fa:	2203      	movs	r2, #3
    b1fc:	4010      	ands	r0, r2
    b1fe:	0083      	lsls	r3, r0, #2
    ((p->fcf.frame_version & 3) << 4) |
    b200:	79a8      	ldrb	r0, [r5, #6]
    b202:	4002      	ands	r2, r0
    b204:	0112      	lsls	r2, r2, #4
  tx_frame_buffer[0] = (p->fcf.frame_type & 7) |
    ((p->fcf.security_enabled & 1) << 3) |
    ((p->fcf.frame_pending & 1) << 4) |
    ((p->fcf.ack_required & 1) << 5) |
    ((p->fcf.panid_compression & 1) << 6);
  tx_frame_buffer[1] = ((p->fcf.dest_addr_mode & 3) << 2) |
    b206:	431a      	orrs	r2, r3
    ((p->fcf.frame_version & 3) << 4) |
    ((p->fcf.src_addr_mode & 3) << 6);
    b208:	79e8      	ldrb	r0, [r5, #7]
    b20a:	0180      	lsls	r0, r0, #6
  tx_frame_buffer[0] = (p->fcf.frame_type & 7) |
    ((p->fcf.security_enabled & 1) << 3) |
    ((p->fcf.frame_pending & 1) << 4) |
    ((p->fcf.ack_required & 1) << 5) |
    ((p->fcf.panid_compression & 1) << 6);
  tx_frame_buffer[1] = ((p->fcf.dest_addr_mode & 3) << 2) |
    b20c:	4302      	orrs	r2, r0
    b20e:	7062      	strb	r2, [r4, #1]
    ((p->fcf.frame_version & 3) << 4) |
    ((p->fcf.src_addr_mode & 3) << 6);

  /* sequence number */
  tx_frame_buffer[2] = p->seq;
    b210:	7a2a      	ldrb	r2, [r5, #8]
    b212:	70a2      	strb	r2, [r4, #2]
  pos = 3;
    b214:	2003      	movs	r0, #3

  /* Destination PAN ID */
  if(flen.dest_pid_len == 2) {
    b216:	2902      	cmp	r1, #2
    b218:	d105      	bne.n	b226 <frame802154_create+0x9e>
    tx_frame_buffer[pos++] = p->dest_pid & 0xff;
    b21a:	896a      	ldrh	r2, [r5, #10]
    b21c:	70e2      	strb	r2, [r4, #3]
    tx_frame_buffer[pos++] = (p->dest_pid >> 8) & 0xff;
    b21e:	896a      	ldrh	r2, [r5, #10]
    b220:	0a12      	lsrs	r2, r2, #8
    b222:	7122      	strb	r2, [r4, #4]
    b224:	3002      	adds	r0, #2
  }

  /* Destination address */
  for(c = flen.dest_addr_len; c > 0; c--) {
    b226:	2e00      	cmp	r6, #0
    b228:	dd0f      	ble.n	b24a <frame802154_create+0xc2>
    b22a:	465a      	mov	r2, fp
    b22c:	320b      	adds	r2, #11
    b22e:	18aa      	adds	r2, r5, r2
    b230:	465b      	mov	r3, fp
    b232:	18c3      	adds	r3, r0, r3
    b234:	b2d9      	uxtb	r1, r3
    b236:	1c03      	adds	r3, r0, #0
    tx_frame_buffer[pos++] = p->dest_addr[c - 1];
    b238:	1c5e      	adds	r6, r3, #1
    b23a:	7817      	ldrb	r7, [r2, #0]
    b23c:	54e7      	strb	r7, [r4, r3]
    b23e:	3a01      	subs	r2, #1
    b240:	b2f3      	uxtb	r3, r6
    tx_frame_buffer[pos++] = p->dest_pid & 0xff;
    tx_frame_buffer[pos++] = (p->dest_pid >> 8) & 0xff;
  }

  /* Destination address */
  for(c = flen.dest_addr_len; c > 0; c--) {
    b242:	428b      	cmp	r3, r1
    b244:	d1f8      	bne.n	b238 <frame802154_create+0xb0>
    b246:	4458      	add	r0, fp
    b248:	b2c0      	uxtb	r0, r0
    tx_frame_buffer[pos++] = p->dest_addr[c - 1];
  }

  /* Source PAN ID */
  if(flen.src_pid_len == 2) {
    b24a:	4663      	mov	r3, ip
    b24c:	2b02      	cmp	r3, #2
    b24e:	d108      	bne.n	b262 <frame802154_create+0xda>
    tx_frame_buffer[pos++] = p->src_pid & 0xff;
    b250:	1c43      	adds	r3, r0, #1
    b252:	b2db      	uxtb	r3, r3
    b254:	8aaa      	ldrh	r2, [r5, #20]
    b256:	5422      	strb	r2, [r4, r0]
    tx_frame_buffer[pos++] = (p->src_pid >> 8) & 0xff;
    b258:	3002      	adds	r0, #2
    b25a:	b2c0      	uxtb	r0, r0
    b25c:	8aaa      	ldrh	r2, [r5, #20]
    b25e:	0a12      	lsrs	r2, r2, #8
    b260:	54e2      	strb	r2, [r4, r3]
  }

  /* Source address */
  for(c = flen.src_addr_len; c > 0; c--) {
    b262:	9b01      	ldr	r3, [sp, #4]
    b264:	2b00      	cmp	r3, #0
    b266:	dd0f      	ble.n	b288 <frame802154_create+0x100>
    b268:	464a      	mov	r2, r9
    b26a:	3215      	adds	r2, #21
    b26c:	18aa      	adds	r2, r5, r2
    b26e:	464b      	mov	r3, r9
    b270:	18c7      	adds	r7, r0, r3
    b272:	b2ff      	uxtb	r7, r7
    b274:	1c03      	adds	r3, r0, #0
    tx_frame_buffer[pos++] = p->src_addr[c - 1];
    b276:	1c59      	adds	r1, r3, #1
    b278:	7815      	ldrb	r5, [r2, #0]
    b27a:	54e5      	strb	r5, [r4, r3]
    b27c:	3a01      	subs	r2, #1
    b27e:	b2cb      	uxtb	r3, r1
    tx_frame_buffer[pos++] = p->src_pid & 0xff;
    tx_frame_buffer[pos++] = (p->src_pid >> 8) & 0xff;
  }

  /* Source address */
  for(c = flen.src_addr_len; c > 0; c--) {
    b280:	42bb      	cmp	r3, r7
    b282:	d1f8      	bne.n	b276 <frame802154_create+0xee>
    b284:	4448      	add	r0, r9
    b286:	b2c0      	uxtb	r0, r0
    /* TODO Aux security header not yet implemented */
/*     pos += flen.aux_sec_len; */
  }

  return (int)pos;
}
    b288:	b005      	add	sp, #20
    b28a:	bc3c      	pop	{r2, r3, r4, r5}
    b28c:	4690      	mov	r8, r2
    b28e:	4699      	mov	r9, r3
    b290:	46a2      	mov	sl, r4
    b292:	46ab      	mov	fp, r5
    b294:	bdf0      	pop	{r4, r5, r6, r7, pc}
    b296:	46c0      	nop			; (mov r8, r8)
    b298:	0000b0ed 	.word	0x0000b0ed

0000b29c <frame802154_parse>:
 *   \param len The size of the input data
 *   \param pf The frame802154_t struct to store the parsed frame information.
 */
int
frame802154_parse(uint8_t *data, int len, frame802154_t *pf)
{
    b29c:	b5f0      	push	{r4, r5, r6, r7, lr}
    b29e:	4657      	mov	r7, sl
    b2a0:	464e      	mov	r6, r9
    b2a2:	4645      	mov	r5, r8
    b2a4:	b4e0      	push	{r5, r6, r7}
  uint8_t *p;
  frame802154_fcf_t fcf;
  int c;

  if(len < 3) {
    return 0;
    b2a6:	2300      	movs	r3, #0
{
  uint8_t *p;
  frame802154_fcf_t fcf;
  int c;

  if(len < 3) {
    b2a8:	2902      	cmp	r1, #2
    b2aa:	dc00      	bgt.n	b2ae <frame802154_parse+0x12>
    b2ac:	e08b      	b.n	b3c6 <frame802154_parse+0x12a>
    b2ae:	1c14      	adds	r4, r2, #0
    b2b0:	468a      	mov	sl, r1
    b2b2:	1c05      	adds	r5, r0, #0
  }

  p = data;

  /* decode the FCF */
  fcf.frame_type = p[0] & 7;
    b2b4:	7803      	ldrb	r3, [r0, #0]
  fcf.security_enabled = (p[0] >> 3) & 1;
  fcf.frame_pending = (p[0] >> 4) & 1;
  fcf.ack_required = (p[0] >> 5) & 1;
  fcf.panid_compression = (p[0] >> 6) & 1;
    b2b6:	099f      	lsrs	r7, r3, #6
    b2b8:	2001      	movs	r0, #1
    b2ba:	4007      	ands	r7, r0

  fcf.dest_addr_mode = (p[1] >> 2) & 3;
    b2bc:	786a      	ldrb	r2, [r5, #1]
    b2be:	0891      	lsrs	r1, r2, #2
    b2c0:	2603      	movs	r6, #3
    b2c2:	46b4      	mov	ip, r6
    b2c4:	4031      	ands	r1, r6
  fcf.frame_version = (p[1] >> 4) & 3;
  fcf.src_addr_mode = (p[1] >> 6) & 3;
    b2c6:	0996      	lsrs	r6, r2, #6
    b2c8:	46b0      	mov	r8, r6
  }

  p = data;

  /* decode the FCF */
  fcf.frame_type = p[0] & 7;
    b2ca:	2607      	movs	r6, #7
    b2cc:	401e      	ands	r6, r3
  fcf.dest_addr_mode = (p[1] >> 2) & 3;
  fcf.frame_version = (p[1] >> 4) & 3;
  fcf.src_addr_mode = (p[1] >> 6) & 3;

  /* copy fcf and seqNum */
  memcpy(&pf->fcf, &fcf, sizeof(frame802154_fcf_t));
    b2ce:	7026      	strb	r6, [r4, #0]

  p = data;

  /* decode the FCF */
  fcf.frame_type = p[0] & 7;
  fcf.security_enabled = (p[0] >> 3) & 1;
    b2d0:	08de      	lsrs	r6, r3, #3
    b2d2:	4006      	ands	r6, r0
  fcf.dest_addr_mode = (p[1] >> 2) & 3;
  fcf.frame_version = (p[1] >> 4) & 3;
  fcf.src_addr_mode = (p[1] >> 6) & 3;

  /* copy fcf and seqNum */
  memcpy(&pf->fcf, &fcf, sizeof(frame802154_fcf_t));
    b2d4:	7066      	strb	r6, [r4, #1]
  p = data;

  /* decode the FCF */
  fcf.frame_type = p[0] & 7;
  fcf.security_enabled = (p[0] >> 3) & 1;
  fcf.frame_pending = (p[0] >> 4) & 1;
    b2d6:	091e      	lsrs	r6, r3, #4
    b2d8:	4006      	ands	r6, r0
  fcf.dest_addr_mode = (p[1] >> 2) & 3;
  fcf.frame_version = (p[1] >> 4) & 3;
  fcf.src_addr_mode = (p[1] >> 6) & 3;

  /* copy fcf and seqNum */
  memcpy(&pf->fcf, &fcf, sizeof(frame802154_fcf_t));
    b2da:	70a6      	strb	r6, [r4, #2]

  /* decode the FCF */
  fcf.frame_type = p[0] & 7;
  fcf.security_enabled = (p[0] >> 3) & 1;
  fcf.frame_pending = (p[0] >> 4) & 1;
  fcf.ack_required = (p[0] >> 5) & 1;
    b2dc:	095b      	lsrs	r3, r3, #5
    b2de:	4003      	ands	r3, r0
  fcf.dest_addr_mode = (p[1] >> 2) & 3;
  fcf.frame_version = (p[1] >> 4) & 3;
  fcf.src_addr_mode = (p[1] >> 6) & 3;

  /* copy fcf and seqNum */
  memcpy(&pf->fcf, &fcf, sizeof(frame802154_fcf_t));
    b2e0:	70e3      	strb	r3, [r4, #3]
    b2e2:	7127      	strb	r7, [r4, #4]
    b2e4:	7161      	strb	r1, [r4, #5]
  fcf.frame_pending = (p[0] >> 4) & 1;
  fcf.ack_required = (p[0] >> 5) & 1;
  fcf.panid_compression = (p[0] >> 6) & 1;

  fcf.dest_addr_mode = (p[1] >> 2) & 3;
  fcf.frame_version = (p[1] >> 4) & 3;
    b2e6:	0912      	lsrs	r2, r2, #4
    b2e8:	4663      	mov	r3, ip
    b2ea:	401a      	ands	r2, r3
  fcf.src_addr_mode = (p[1] >> 6) & 3;

  /* copy fcf and seqNum */
  memcpy(&pf->fcf, &fcf, sizeof(frame802154_fcf_t));
    b2ec:	71a2      	strb	r2, [r4, #6]
    b2ee:	4643      	mov	r3, r8
    b2f0:	71e3      	strb	r3, [r4, #7]
  pf->seq = p[2];
    b2f2:	78ab      	ldrb	r3, [r5, #2]
    b2f4:	7223      	strb	r3, [r4, #8]
  p += 3;                             /* Skip first three bytes */

  /* Destination address, if any */
  if(fcf.dest_addr_mode) {
    b2f6:	2900      	cmp	r1, #0
    b2f8:	d022      	beq.n	b340 <frame802154_parse+0xa4>
    /* Destination PAN */
    pf->dest_pid = p[0] + (p[1] << 8);
    b2fa:	792b      	ldrb	r3, [r5, #4]
    b2fc:	021b      	lsls	r3, r3, #8
    b2fe:	78ea      	ldrb	r2, [r5, #3]
    b300:	18d3      	adds	r3, r2, r3
    b302:	8163      	strh	r3, [r4, #10]
    p += 2;
    b304:	1d6e      	adds	r6, r5, #5
/*     l = addr_len(fcf.dest_addr_mode); */
/*     for(c = 0; c < l; c++) { */
/*       pf->dest_addr.u8[c] = p[l - c - 1]; */
/*     } */
/*     p += l; */
    if(fcf.dest_addr_mode == FRAME802154_SHORTADDRMODE) {
    b306:	2902      	cmp	r1, #2
    b308:	d10a      	bne.n	b320 <frame802154_parse+0x84>
      linkaddr_copy((linkaddr_t *)&(pf->dest_addr), &linkaddr_null);
    b30a:	1c20      	adds	r0, r4, #0
    b30c:	300c      	adds	r0, #12
    b30e:	4931      	ldr	r1, [pc, #196]	; (b3d4 <frame802154_parse+0x138>)
    b310:	4b31      	ldr	r3, [pc, #196]	; (b3d8 <frame802154_parse+0x13c>)
    b312:	4798      	blx	r3
      pf->dest_addr[0] = p[1];
    b314:	79ab      	ldrb	r3, [r5, #6]
    b316:	7323      	strb	r3, [r4, #12]
      pf->dest_addr[1] = p[0];
    b318:	796b      	ldrb	r3, [r5, #5]
    b31a:	7363      	strb	r3, [r4, #13]
      p += 2;
    b31c:	1dee      	adds	r6, r5, #7
    b31e:	e017      	b.n	b350 <frame802154_parse+0xb4>
    } else if(fcf.dest_addr_mode == FRAME802154_LONGADDRMODE) {
    b320:	2903      	cmp	r1, #3
    b322:	d115      	bne.n	b350 <frame802154_parse+0xb4>
    b324:	1c2b      	adds	r3, r5, #0
    b326:	330c      	adds	r3, #12
    b328:	1c22      	adds	r2, r4, #0
    b32a:	320c      	adds	r2, #12
    b32c:	1d28      	adds	r0, r5, #4
      for(c = 0; c < 8; c++) {
        pf->dest_addr[c] = p[7 - c];
    b32e:	7819      	ldrb	r1, [r3, #0]
    b330:	7011      	strb	r1, [r2, #0]
    b332:	3b01      	subs	r3, #1
    b334:	3201      	adds	r2, #1
      linkaddr_copy((linkaddr_t *)&(pf->dest_addr), &linkaddr_null);
      pf->dest_addr[0] = p[1];
      pf->dest_addr[1] = p[0];
      p += 2;
    } else if(fcf.dest_addr_mode == FRAME802154_LONGADDRMODE) {
      for(c = 0; c < 8; c++) {
    b336:	4283      	cmp	r3, r0
    b338:	d1f9      	bne.n	b32e <frame802154_parse+0x92>
        pf->dest_addr[c] = p[7 - c];
      }
      p += 8;
    b33a:	1c2e      	adds	r6, r5, #0
    b33c:	360d      	adds	r6, #13
    b33e:	e007      	b.n	b350 <frame802154_parse+0xb4>
  fcf.src_addr_mode = (p[1] >> 6) & 3;

  /* copy fcf and seqNum */
  memcpy(&pf->fcf, &fcf, sizeof(frame802154_fcf_t));
  pf->seq = p[2];
  p += 3;                             /* Skip first three bytes */
    b340:	1cee      	adds	r6, r5, #3
        pf->dest_addr[c] = p[7 - c];
      }
      p += 8;
    }
  } else {
    linkaddr_copy((linkaddr_t *)&(pf->dest_addr), &linkaddr_null);
    b342:	1c20      	adds	r0, r4, #0
    b344:	300c      	adds	r0, #12
    b346:	4923      	ldr	r1, [pc, #140]	; (b3d4 <frame802154_parse+0x138>)
    b348:	4b23      	ldr	r3, [pc, #140]	; (b3d8 <frame802154_parse+0x13c>)
    b34a:	4798      	blx	r3
    pf->dest_pid = 0;
    b34c:	2300      	movs	r3, #0
    b34e:	8163      	strh	r3, [r4, #10]
  }

  /* Source address, if any */
  if(fcf.src_addr_mode) {
    b350:	4643      	mov	r3, r8
    b352:	2b00      	cmp	r3, #0
    b354:	d027      	beq.n	b3a6 <frame802154_parse+0x10a>
    /* Source PAN */
    if(!fcf.panid_compression) {
    b356:	2f00      	cmp	r7, #0
    b358:	d106      	bne.n	b368 <frame802154_parse+0xcc>
      pf->src_pid = p[0] + (p[1] << 8);
    b35a:	7873      	ldrb	r3, [r6, #1]
    b35c:	021b      	lsls	r3, r3, #8
    b35e:	7832      	ldrb	r2, [r6, #0]
    b360:	18d3      	adds	r3, r2, r3
    b362:	82a3      	strh	r3, [r4, #20]
      p += 2;
    b364:	3602      	adds	r6, #2
    b366:	e001      	b.n	b36c <frame802154_parse+0xd0>
    } else {
      pf->src_pid = pf->dest_pid;
    b368:	8963      	ldrh	r3, [r4, #10]
    b36a:	82a3      	strh	r3, [r4, #20]
/*     l = addr_len(fcf.src_addr_mode); */
/*     for(c = 0; c < l; c++) { */
/*       pf->src_addr.u8[c] = p[l - c - 1]; */
/*     } */
/*     p += l; */
    if(fcf.src_addr_mode == FRAME802154_SHORTADDRMODE) {
    b36c:	4643      	mov	r3, r8
    b36e:	2b02      	cmp	r3, #2
    b370:	d10a      	bne.n	b388 <frame802154_parse+0xec>
      linkaddr_copy((linkaddr_t *)&(pf->src_addr), &linkaddr_null);
    b372:	1c20      	adds	r0, r4, #0
    b374:	3016      	adds	r0, #22
    b376:	4917      	ldr	r1, [pc, #92]	; (b3d4 <frame802154_parse+0x138>)
    b378:	4b17      	ldr	r3, [pc, #92]	; (b3d8 <frame802154_parse+0x13c>)
    b37a:	4798      	blx	r3
      pf->src_addr[0] = p[1];
    b37c:	7873      	ldrb	r3, [r6, #1]
    b37e:	75a3      	strb	r3, [r4, #22]
      pf->src_addr[1] = p[0];
    b380:	7833      	ldrb	r3, [r6, #0]
    b382:	75e3      	strb	r3, [r4, #23]
      p += 2;
    b384:	3602      	adds	r6, #2
    b386:	e015      	b.n	b3b4 <frame802154_parse+0x118>
    } else if(fcf.src_addr_mode == FRAME802154_LONGADDRMODE) {
    b388:	4643      	mov	r3, r8
    b38a:	2b03      	cmp	r3, #3
    b38c:	d112      	bne.n	b3b4 <frame802154_parse+0x118>
    b38e:	1df3      	adds	r3, r6, #7
    b390:	1c22      	adds	r2, r4, #0
    b392:	3216      	adds	r2, #22
    b394:	1e70      	subs	r0, r6, #1
      for(c = 0; c < 8; c++) {
        pf->src_addr[c] = p[7 - c];
    b396:	7819      	ldrb	r1, [r3, #0]
    b398:	7011      	strb	r1, [r2, #0]
    b39a:	3b01      	subs	r3, #1
    b39c:	3201      	adds	r2, #1
      linkaddr_copy((linkaddr_t *)&(pf->src_addr), &linkaddr_null);
      pf->src_addr[0] = p[1];
      pf->src_addr[1] = p[0];
      p += 2;
    } else if(fcf.src_addr_mode == FRAME802154_LONGADDRMODE) {
      for(c = 0; c < 8; c++) {
    b39e:	4283      	cmp	r3, r0
    b3a0:	d1f9      	bne.n	b396 <frame802154_parse+0xfa>
        pf->src_addr[c] = p[7 - c];
      }
      p += 8;
    b3a2:	3608      	adds	r6, #8
    b3a4:	e006      	b.n	b3b4 <frame802154_parse+0x118>
    }
  } else {
    linkaddr_copy((linkaddr_t *)&(pf->src_addr), &linkaddr_null);
    b3a6:	1c20      	adds	r0, r4, #0
    b3a8:	3016      	adds	r0, #22
    b3aa:	490a      	ldr	r1, [pc, #40]	; (b3d4 <frame802154_parse+0x138>)
    b3ac:	4b0a      	ldr	r3, [pc, #40]	; (b3d8 <frame802154_parse+0x13c>)
    b3ae:	4798      	blx	r3
    pf->src_pid = 0;
    b3b0:	2300      	movs	r3, #0
    b3b2:	82a3      	strh	r3, [r4, #20]
    /* TODO aux security header, not yet implemented */
/*     return 0; */
  }

  /* header length */
  c = p - data;
    b3b4:	1b75      	subs	r5, r6, r5
  /* payload length */
  pf->payload_len = (len - c);
    b3b6:	4653      	mov	r3, sl
    b3b8:	1b5b      	subs	r3, r3, r5
    b3ba:	63a3      	str	r3, [r4, #56]	; 0x38
  /* payload */
  pf->payload = p;
    b3bc:	6366      	str	r6, [r4, #52]	; 0x34

  /* return header length if successful */
  return c > len ? 0 : c;
    b3be:	2300      	movs	r3, #0
    b3c0:	45aa      	cmp	sl, r5
    b3c2:	db00      	blt.n	b3c6 <frame802154_parse+0x12a>
    b3c4:	1c2b      	adds	r3, r5, #0
}
    b3c6:	1c18      	adds	r0, r3, #0
    b3c8:	bc1c      	pop	{r2, r3, r4}
    b3ca:	4690      	mov	r8, r2
    b3cc:	4699      	mov	r9, r3
    b3ce:	46a2      	mov	sl, r4
    b3d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    b3d2:	46c0      	nop			; (mov r8, r8)
    b3d4:	00012be8 	.word	0x00012be8
    b3d8:	0000ac5d 	.word	0x0000ac5d

0000b3dc <parse>:
  }
}
/*---------------------------------------------------------------------------*/
static int
parse(void)
{
    b3dc:	b530      	push	{r4, r5, lr}
    b3de:	b091      	sub	sp, #68	; 0x44
  frame802154_t frame;
  int len;
  len = packetbuf_datalen();
    b3e0:	4b24      	ldr	r3, [pc, #144]	; (b474 <parse+0x98>)
    b3e2:	4798      	blx	r3
    b3e4:	1c04      	adds	r4, r0, #0
  if(frame802154_parse(packetbuf_dataptr(), len, &frame) &&
    b3e6:	4b24      	ldr	r3, [pc, #144]	; (b478 <parse+0x9c>)
    b3e8:	4798      	blx	r3
    b3ea:	1c21      	adds	r1, r4, #0
    b3ec:	aa01      	add	r2, sp, #4
    b3ee:	4b23      	ldr	r3, [pc, #140]	; (b47c <parse+0xa0>)
    b3f0:	4798      	blx	r3
    b3f2:	2800      	cmp	r0, #0
    b3f4:	d02d      	beq.n	b452 <parse+0x76>
     packetbuf_hdrreduce(len - frame.payload_len)) {
    b3f6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    b3f8:	1ae0      	subs	r0, r4, r3
    b3fa:	4b21      	ldr	r3, [pc, #132]	; (b480 <parse+0xa4>)
    b3fc:	4798      	blx	r3
parse(void)
{
  frame802154_t frame;
  int len;
  len = packetbuf_datalen();
  if(frame802154_parse(packetbuf_dataptr(), len, &frame) &&
    b3fe:	2800      	cmp	r0, #0
    b400:	d02a      	beq.n	b458 <parse+0x7c>
     packetbuf_hdrreduce(len - frame.payload_len)) {
    if(frame.fcf.dest_addr_mode) {
    b402:	ab01      	add	r3, sp, #4
    b404:	795b      	ldrb	r3, [r3, #5]
    b406:	2b00      	cmp	r3, #0
    b408:	d015      	beq.n	b436 <parse+0x5a>
      if(frame.dest_pid != mac_src_pan_id &&
    b40a:	aa01      	add	r2, sp, #4
    b40c:	8952      	ldrh	r2, [r2, #10]
    b40e:	491d      	ldr	r1, [pc, #116]	; (b484 <parse+0xa8>)
    b410:	428a      	cmp	r2, r1
    b412:	d002      	beq.n	b41a <parse+0x3e>
    b414:	491c      	ldr	r1, [pc, #112]	; (b488 <parse+0xac>)
    b416:	428a      	cmp	r2, r1
    b418:	d121      	bne.n	b45e <parse+0x82>

/*---------------------------------------------------------------------------*/
static int
is_broadcast_addr(uint8_t mode, uint8_t *addr)
{
  int i = mode == FRAME802154_SHORTADDRMODE ? 2 : 8;
    b41a:	2b02      	cmp	r3, #2
    b41c:	d008      	beq.n	b430 <parse+0x54>
    b41e:	2308      	movs	r3, #8
    b420:	e007      	b.n	b432 <parse+0x56>
    b422:	3b01      	subs	r3, #1
    b424:	aa01      	add	r2, sp, #4
    b426:	18d2      	adds	r2, r2, r3
  while(i-- > 0) {
    if(addr[i] != 0xff) {
    b428:	7b12      	ldrb	r2, [r2, #12]
    b42a:	2aff      	cmp	r2, #255	; 0xff
    b42c:	d001      	beq.n	b432 <parse+0x56>
    b42e:	e019      	b.n	b464 <parse+0x88>

/*---------------------------------------------------------------------------*/
static int
is_broadcast_addr(uint8_t mode, uint8_t *addr)
{
  int i = mode == FRAME802154_SHORTADDRMODE ? 2 : 8;
    b430:	2302      	movs	r3, #2
  while(i-- > 0) {
    b432:	2b00      	cmp	r3, #0
    b434:	dcf5      	bgt.n	b422 <parse+0x46>

static inline int
packetbuf_set_addr(uint8_t type, const linkaddr_t *addr)
{
/*   packetbuf_addrs[type - PACKETBUF_ADDR_FIRST].type = type; */
  linkaddr_copy(&packetbuf_addrs[type - PACKETBUF_ADDR_FIRST].addr, addr);
    b436:	ad01      	add	r5, sp, #4
    b438:	4814      	ldr	r0, [pc, #80]	; (b48c <parse+0xb0>)
    b43a:	211a      	movs	r1, #26
    b43c:	4469      	add	r1, sp
    b43e:	4b14      	ldr	r3, [pc, #80]	; (b490 <parse+0xb4>)
    b440:	4798      	blx	r3

static inline int
packetbuf_set_attr(uint8_t type, const packetbuf_attr_t val)
{
/*   packetbuf_attrs[type].type = type; */
  packetbuf_attrs[type].val = val;
    b442:	4b14      	ldr	r3, [pc, #80]	; (b494 <parse+0xb8>)
      if(!is_broadcast_addr(frame.fcf.dest_addr_mode, frame.dest_addr)) {
        packetbuf_set_addr(PACKETBUF_ADDR_RECEIVER, (linkaddr_t *)&frame.dest_addr);
      }
    }
    packetbuf_set_addr(PACKETBUF_ADDR_SENDER, (linkaddr_t *)&frame.src_addr);
    packetbuf_set_attr(PACKETBUF_ATTR_PENDING, frame.fcf.frame_pending);
    b444:	78aa      	ldrb	r2, [r5, #2]
    b446:	859a      	strh	r2, [r3, #44]	; 0x2c
    /*    packetbuf_set_attr(PACKETBUF_ATTR_RELIABLE, frame.fcf.ack_required);*/
    packetbuf_set_attr(PACKETBUF_ATTR_PACKET_ID, frame.seq);
    b448:	7a2a      	ldrb	r2, [r5, #8]
    b44a:	845a      	strh	r2, [r3, #34]	; 0x22
    PRINTF("15.4-IN: %2X", frame.fcf.frame_type);
    PRINTADDR(packetbuf_addr(PACKETBUF_ADDR_SENDER));
    PRINTADDR(packetbuf_addr(PACKETBUF_ADDR_RECEIVER));
    PRINTF("%u (%u)\n\r", packetbuf_datalen(), len);

    return len - frame.payload_len;
    b44c:	6ba8      	ldr	r0, [r5, #56]	; 0x38
    b44e:	1a20      	subs	r0, r4, r0
    b450:	e00d      	b.n	b46e <parse+0x92>
  }
  return FRAMER_FAILED;
    b452:	2001      	movs	r0, #1
    b454:	4240      	negs	r0, r0
    b456:	e00a      	b.n	b46e <parse+0x92>
    b458:	2001      	movs	r0, #1
    b45a:	4240      	negs	r0, r0
    b45c:	e007      	b.n	b46e <parse+0x92>
    if(frame.fcf.dest_addr_mode) {
      if(frame.dest_pid != mac_src_pan_id &&
         frame.dest_pid != FRAME802154_BROADCASTPANDID) {
        /* Packet to another PAN */
        PRINTF("15.4: for another pan %u\n\r", frame.dest_pid);
        return FRAMER_FAILED;
    b45e:	2001      	movs	r0, #1
    b460:	4240      	negs	r0, r0
    b462:	e004      	b.n	b46e <parse+0x92>

static inline int
packetbuf_set_addr(uint8_t type, const linkaddr_t *addr)
{
/*   packetbuf_addrs[type - PACKETBUF_ADDR_FIRST].type = type; */
  linkaddr_copy(&packetbuf_addrs[type - PACKETBUF_ADDR_FIRST].addr, addr);
    b464:	480c      	ldr	r0, [pc, #48]	; (b498 <parse+0xbc>)
    b466:	a904      	add	r1, sp, #16
    b468:	4b09      	ldr	r3, [pc, #36]	; (b490 <parse+0xb4>)
    b46a:	4798      	blx	r3
    b46c:	e7e3      	b.n	b436 <parse+0x5a>
    PRINTF("%u (%u)\n\r", packetbuf_datalen(), len);

    return len - frame.payload_len;
  }
  return FRAMER_FAILED;
}
    b46e:	b011      	add	sp, #68	; 0x44
    b470:	bd30      	pop	{r4, r5, pc}
    b472:	46c0      	nop			; (mov r8, r8)
    b474:	0000bf01 	.word	0x0000bf01
    b478:	0000beb5 	.word	0x0000beb5
    b47c:	0000b29d 	.word	0x0000b29d
    b480:	0000be81 	.word	0x0000be81
    b484:	0000aacd 	.word	0x0000aacd
    b488:	0000ffff 	.word	0x0000ffff
    b48c:	200031d8 	.word	0x200031d8
    b490:	0000ac5d 	.word	0x0000ac5d
    b494:	200031f8 	.word	0x200031f8
    b498:	200031e0 	.word	0x200031e0

0000b49c <create>:
  return 1;
}
/*---------------------------------------------------------------------------*/
static int
create(void)
{
    b49c:	b510      	push	{r4, lr}
    b49e:	b090      	sub	sp, #64	; 0x40
  frame802154_t params;
  int len;

  /* init to zeros */
  memset(&params, 0, sizeof(params));
    b4a0:	a801      	add	r0, sp, #4
    b4a2:	2100      	movs	r1, #0
    b4a4:	223c      	movs	r2, #60	; 0x3c
    b4a6:	4b39      	ldr	r3, [pc, #228]	; (b58c <create+0xf0>)
    b4a8:	4798      	blx	r3

  if(!initialized) {
    b4aa:	4b39      	ldr	r3, [pc, #228]	; (b590 <create+0xf4>)
    b4ac:	781b      	ldrb	r3, [r3, #0]
    b4ae:	2b00      	cmp	r3, #0
    b4b0:	d106      	bne.n	b4c0 <create+0x24>
    initialized = 1;
    b4b2:	2201      	movs	r2, #1
    b4b4:	4b36      	ldr	r3, [pc, #216]	; (b590 <create+0xf4>)
    b4b6:	701a      	strb	r2, [r3, #0]
    mac_dsn = random_rand() & 0xff;
    b4b8:	4b36      	ldr	r3, [pc, #216]	; (b594 <create+0xf8>)
    b4ba:	4798      	blx	r3
    b4bc:	4b36      	ldr	r3, [pc, #216]	; (b598 <create+0xfc>)
    b4be:	7018      	strb	r0, [r3, #0]
  }

  /* Build the FCF. */
  params.fcf.frame_type = FRAME802154_DATAFRAME;
    b4c0:	ab01      	add	r3, sp, #4
    b4c2:	2201      	movs	r2, #1
    b4c4:	701a      	strb	r2, [r3, #0]
  params.fcf.security_enabled = 0;
    b4c6:	2200      	movs	r2, #0
    b4c8:	705a      	strb	r2, [r3, #1]
  return 1;
}
static inline packetbuf_attr_t
packetbuf_attr(uint8_t type)
{
  return packetbuf_attrs[type].val;
    b4ca:	4a34      	ldr	r2, [pc, #208]	; (b59c <create+0x100>)
  params.fcf.frame_pending = packetbuf_attr(PACKETBUF_ATTR_PENDING);
    b4cc:	8d92      	ldrh	r2, [r2, #44]	; 0x2c
    b4ce:	709a      	strb	r2, [r3, #2]
  if(linkaddr_cmp(packetbuf_addr(PACKETBUF_ADDR_RECEIVER), &linkaddr_null)) {
    b4d0:	4833      	ldr	r0, [pc, #204]	; (b5a0 <create+0x104>)
    b4d2:	4934      	ldr	r1, [pc, #208]	; (b5a4 <create+0x108>)
    b4d4:	4b34      	ldr	r3, [pc, #208]	; (b5a8 <create+0x10c>)
    b4d6:	4798      	blx	r3
    b4d8:	2800      	cmp	r0, #0
    b4da:	d003      	beq.n	b4e4 <create+0x48>
    params.fcf.ack_required = 0;
    b4dc:	2200      	movs	r2, #0
    b4de:	ab01      	add	r3, sp, #4
    b4e0:	70da      	strb	r2, [r3, #3]
    b4e2:	e003      	b.n	b4ec <create+0x50>
    b4e4:	4b2d      	ldr	r3, [pc, #180]	; (b59c <create+0x100>)
  } else {
    params.fcf.ack_required = packetbuf_attr(PACKETBUF_ATTR_MAC_ACK);
    b4e6:	8b1a      	ldrh	r2, [r3, #24]
    b4e8:	ab01      	add	r3, sp, #4
    b4ea:	70da      	strb	r2, [r3, #3]
  }
  params.fcf.panid_compression = 0;
    b4ec:	ab01      	add	r3, sp, #4
    b4ee:	2200      	movs	r2, #0
    b4f0:	711a      	strb	r2, [r3, #4]

  /* Insert IEEE 802.15.4 (2003) version bit. */
  params.fcf.frame_version = FRAME802154_IEEE802154_2003;
    b4f2:	719a      	strb	r2, [r3, #6]
    b4f4:	4b29      	ldr	r3, [pc, #164]	; (b59c <create+0x100>)
    b4f6:	8adb      	ldrh	r3, [r3, #22]

  /* Increment and set the data sequence number. */
  if(packetbuf_attr(PACKETBUF_ATTR_MAC_SEQNO)) {
    b4f8:	2b00      	cmp	r3, #0
    b4fa:	d002      	beq.n	b502 <create+0x66>
    params.seq = packetbuf_attr(PACKETBUF_ATTR_MAC_SEQNO);
    b4fc:	aa01      	add	r2, sp, #4
    b4fe:	7213      	strb	r3, [r2, #8]
    b500:	e007      	b.n	b512 <create+0x76>
  } else {
    params.seq = mac_dsn++;
    b502:	4a25      	ldr	r2, [pc, #148]	; (b598 <create+0xfc>)
    b504:	7813      	ldrb	r3, [r2, #0]
    b506:	1c59      	adds	r1, r3, #1
    b508:	7011      	strb	r1, [r2, #0]
    b50a:	aa01      	add	r2, sp, #4
    b50c:	7213      	strb	r3, [r2, #8]

static inline int
packetbuf_set_attr(uint8_t type, const packetbuf_attr_t val)
{
/*   packetbuf_attrs[type].type = type; */
  packetbuf_attrs[type].val = val;
    b50e:	4a23      	ldr	r2, [pc, #140]	; (b59c <create+0x100>)
    b510:	82d3      	strh	r3, [r2, #22]
  */
  if(sizeof(linkaddr_t) == 2) {
    /* Use short address mode if linkaddr size is short. */
    params.fcf.src_addr_mode = FRAME802154_SHORTADDRMODE;
  } else {
    params.fcf.src_addr_mode = FRAME802154_LONGADDRMODE;
    b512:	ab01      	add	r3, sp, #4
    b514:	2203      	movs	r2, #3
    b516:	71da      	strb	r2, [r3, #7]
  }
  params.dest_pid = mac_dst_pan_id;
    b518:	4a24      	ldr	r2, [pc, #144]	; (b5ac <create+0x110>)
    b51a:	815a      	strh	r2, [r3, #10]

  /*
   *  If the output address is NULL in the Rime buf, then it is broadcast
   *  on the 802.15.4 network.
   */
  if(linkaddr_cmp(packetbuf_addr(PACKETBUF_ADDR_RECEIVER), &linkaddr_null)) {
    b51c:	4820      	ldr	r0, [pc, #128]	; (b5a0 <create+0x104>)
    b51e:	4921      	ldr	r1, [pc, #132]	; (b5a4 <create+0x108>)
    b520:	4b21      	ldr	r3, [pc, #132]	; (b5a8 <create+0x10c>)
    b522:	4798      	blx	r3
    b524:	2800      	cmp	r0, #0
    b526:	d006      	beq.n	b536 <create+0x9a>
    /* Broadcast requires short address mode. */
    params.fcf.dest_addr_mode = FRAME802154_SHORTADDRMODE;
    b528:	ab01      	add	r3, sp, #4
    b52a:	2202      	movs	r2, #2
    b52c:	715a      	strb	r2, [r3, #5]
    params.dest_addr[0] = 0xFF;
    b52e:	32fd      	adds	r2, #253	; 0xfd
    b530:	731a      	strb	r2, [r3, #12]
    params.dest_addr[1] = 0xFF;
    b532:	735a      	strb	r2, [r3, #13]
    b534:	e006      	b.n	b544 <create+0xa8>

  } else {
    linkaddr_copy((linkaddr_t *)&params.dest_addr,
    b536:	a804      	add	r0, sp, #16
    b538:	4919      	ldr	r1, [pc, #100]	; (b5a0 <create+0x104>)
    b53a:	4b1d      	ldr	r3, [pc, #116]	; (b5b0 <create+0x114>)
    b53c:	4798      	blx	r3
                  packetbuf_addr(PACKETBUF_ADDR_RECEIVER));
    /* Use short address mode if linkaddr size is small */
    if(sizeof(linkaddr_t) == 2) {
      params.fcf.dest_addr_mode = FRAME802154_SHORTADDRMODE;
    } else {
      params.fcf.dest_addr_mode = FRAME802154_LONGADDRMODE;
    b53e:	2203      	movs	r2, #3
    b540:	ab01      	add	r3, sp, #4
    b542:	715a      	strb	r2, [r3, #5]
    }
  }

  /* Set the source PAN ID to the global variable. */
  params.src_pid = mac_src_pan_id;
    b544:	ac01      	add	r4, sp, #4
    b546:	4b19      	ldr	r3, [pc, #100]	; (b5ac <create+0x110>)
    b548:	82a3      	strh	r3, [r4, #20]

  /*
   * Set up the source address using only the long address mode for
   * phase 1.
   */
  linkaddr_copy((linkaddr_t *)&params.src_addr, &linkaddr_node_addr);
    b54a:	201a      	movs	r0, #26
    b54c:	4468      	add	r0, sp
    b54e:	4919      	ldr	r1, [pc, #100]	; (b5b4 <create+0x118>)
    b550:	4b17      	ldr	r3, [pc, #92]	; (b5b0 <create+0x114>)
    b552:	4798      	blx	r3

  params.payload = packetbuf_dataptr();
    b554:	4b18      	ldr	r3, [pc, #96]	; (b5b8 <create+0x11c>)
    b556:	4798      	blx	r3
    b558:	6360      	str	r0, [r4, #52]	; 0x34
  params.payload_len = packetbuf_datalen();
    b55a:	4b18      	ldr	r3, [pc, #96]	; (b5bc <create+0x120>)
    b55c:	4798      	blx	r3
    b55e:	63a0      	str	r0, [r4, #56]	; 0x38
  len = frame802154_hdrlen(&params);
    b560:	1c20      	adds	r0, r4, #0
    b562:	4b17      	ldr	r3, [pc, #92]	; (b5c0 <create+0x124>)
    b564:	4798      	blx	r3
    b566:	1c04      	adds	r4, r0, #0
  if(packetbuf_hdralloc(len)) {
    b568:	4b16      	ldr	r3, [pc, #88]	; (b5c4 <create+0x128>)
    b56a:	4798      	blx	r3
    b56c:	2800      	cmp	r0, #0
    b56e:	d008      	beq.n	b582 <create+0xe6>
    frame802154_create(&params, packetbuf_hdrptr(), len);
    b570:	4b15      	ldr	r3, [pc, #84]	; (b5c8 <create+0x12c>)
    b572:	4798      	blx	r3
    b574:	1c01      	adds	r1, r0, #0
    b576:	a801      	add	r0, sp, #4
    b578:	1c22      	adds	r2, r4, #0
    b57a:	4b14      	ldr	r3, [pc, #80]	; (b5cc <create+0x130>)
    b57c:	4798      	blx	r3

    PRINTF("15.4-OUT: %2X", params.fcf.frame_type);
    PRINTADDR(params.dest_addr);
    PRINTF("%d %u (%u)\n\r", len, packetbuf_datalen(), packetbuf_totlen());

    return len;
    b57e:	1c20      	adds	r0, r4, #0
    b580:	e001      	b.n	b586 <create+0xea>
  } else {
    PRINTF("15.4-OUT: too large header: %u\n\r", len);
    return FRAMER_FAILED;
    b582:	2001      	movs	r0, #1
    b584:	4240      	negs	r0, r0
  }
}
    b586:	b010      	add	sp, #64	; 0x40
    b588:	bd10      	pop	{r4, pc}
    b58a:	46c0      	nop			; (mov r8, r8)
    b58c:	00010921 	.word	0x00010921
    b590:	20000e0b 	.word	0x20000e0b
    b594:	00005895 	.word	0x00005895
    b598:	20000e0a 	.word	0x20000e0a
    b59c:	200031f8 	.word	0x200031f8
    b5a0:	200031e0 	.word	0x200031e0
    b5a4:	00012be8 	.word	0x00012be8
    b5a8:	0000ac6d 	.word	0x0000ac6d
    b5ac:	ffffaacd 	.word	0xffffaacd
    b5b0:	0000ac5d 	.word	0x0000ac5d
    b5b4:	200031d0 	.word	0x200031d0
    b5b8:	0000beb5 	.word	0x0000beb5
    b5bc:	0000bf01 	.word	0x0000bf01
    b5c0:	0000b159 	.word	0x0000b159
    b5c4:	0000bf29 	.word	0x0000bf29
    b5c8:	0000bec9 	.word	0x0000bec9
    b5cc:	0000b189 	.word	0x0000b189

0000b5d0 <mac_sequence_is_duplicate>:
static struct seqno received_seqnos[MAX_SEQNOS];

/*---------------------------------------------------------------------------*/
int
mac_sequence_is_duplicate(void)
{
    b5d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    b5d2:	4d0c      	ldr	r5, [pc, #48]	; (b604 <mac_sequence_is_duplicate+0x34>)

  /*
   * Check for duplicate packet by comparing the sequence number of the incoming
   * packet with the last few ones we saw.
   */
  for(i = 0; i < MAX_SEQNOS; ++i) {
    b5d4:	2400      	movs	r4, #0
    if(linkaddr_cmp(packetbuf_addr(PACKETBUF_ADDR_SENDER),
    b5d6:	4e0c      	ldr	r6, [pc, #48]	; (b608 <mac_sequence_is_duplicate+0x38>)
    b5d8:	4f0c      	ldr	r7, [pc, #48]	; (b60c <mac_sequence_is_duplicate+0x3c>)
    b5da:	1c30      	adds	r0, r6, #0
    b5dc:	1c29      	adds	r1, r5, #0
    b5de:	47b8      	blx	r7
    b5e0:	2800      	cmp	r0, #0
    b5e2:	d00a      	beq.n	b5fa <mac_sequence_is_duplicate+0x2a>
                    &received_seqnos[i].sender)) {
      if(packetbuf_attr(PACKETBUF_ATTR_PACKET_ID) == received_seqnos[i].seqno) {
    b5e4:	00e3      	lsls	r3, r4, #3
    b5e6:	191c      	adds	r4, r3, r4
    b5e8:	4b06      	ldr	r3, [pc, #24]	; (b604 <mac_sequence_is_duplicate+0x34>)
    b5ea:	191c      	adds	r4, r3, r4
    b5ec:	7a23      	ldrb	r3, [r4, #8]
    b5ee:	4a08      	ldr	r2, [pc, #32]	; (b610 <mac_sequence_is_duplicate+0x40>)
    b5f0:	8c50      	ldrh	r0, [r2, #34]	; 0x22
    b5f2:	1a18      	subs	r0, r3, r0
        /* Duplicate packet. */
        return 1;
    b5f4:	4243      	negs	r3, r0
    b5f6:	4158      	adcs	r0, r3
    b5f8:	e003      	b.n	b602 <mac_sequence_is_duplicate+0x32>

  /*
   * Check for duplicate packet by comparing the sequence number of the incoming
   * packet with the last few ones we saw.
   */
  for(i = 0; i < MAX_SEQNOS; ++i) {
    b5fa:	3401      	adds	r4, #1
    b5fc:	3509      	adds	r5, #9
    b5fe:	2c10      	cmp	r4, #16
    b600:	d1eb      	bne.n	b5da <mac_sequence_is_duplicate+0xa>
      }
      break;
    }
  }
  return 0;
}
    b602:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    b604:	20000e0c 	.word	0x20000e0c
    b608:	200031d8 	.word	0x200031d8
    b60c:	0000ac6d 	.word	0x0000ac6d
    b610:	200031f8 	.word	0x200031f8

0000b614 <mac_sequence_register_seqno>:
/*---------------------------------------------------------------------------*/
void
mac_sequence_register_seqno(void)
{
    b614:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    b616:	4d14      	ldr	r5, [pc, #80]	; (b668 <mac_sequence_register_seqno+0x54>)
  int i, j;

  /* Locate possible previous sequence number for this address. */
  for(i = 0; i < MAX_SEQNOS; ++i) {
    b618:	2400      	movs	r4, #0
    if(linkaddr_cmp(packetbuf_addr(PACKETBUF_ADDR_SENDER),
    b61a:	4e14      	ldr	r6, [pc, #80]	; (b66c <mac_sequence_register_seqno+0x58>)
    b61c:	4f14      	ldr	r7, [pc, #80]	; (b670 <mac_sequence_register_seqno+0x5c>)
    b61e:	1c30      	adds	r0, r6, #0
    b620:	1c29      	adds	r1, r5, #0
    b622:	47b8      	blx	r7
    b624:	2800      	cmp	r0, #0
    b626:	d003      	beq.n	b630 <mac_sequence_register_seqno+0x1c>
                    &received_seqnos[i].sender)) {
      i++;
    b628:	1c63      	adds	r3, r4, #1
      break;
    }
  }

  /* Keep the last sequence number for each address as per 802.15.4e. */
  for(j = i - 1; j > 0; --j) {
    b62a:	2c00      	cmp	r4, #0
    b62c:	dc05      	bgt.n	b63a <mac_sequence_register_seqno+0x26>
    b62e:	e013      	b.n	b658 <mac_sequence_register_seqno+0x44>
mac_sequence_register_seqno(void)
{
  int i, j;

  /* Locate possible previous sequence number for this address. */
  for(i = 0; i < MAX_SEQNOS; ++i) {
    b630:	3401      	adds	r4, #1
    b632:	3509      	adds	r5, #9
    b634:	2c10      	cmp	r4, #16
    b636:	d1f2      	bne.n	b61e <mac_sequence_register_seqno+0xa>
    b638:	2310      	movs	r3, #16
    b63a:	4d0b      	ldr	r5, [pc, #44]	; (b668 <mac_sequence_register_seqno+0x54>)
    b63c:	00dc      	lsls	r4, r3, #3
    b63e:	18e4      	adds	r4, r4, r3
    b640:	3c12      	subs	r4, #18
    b642:	192c      	adds	r4, r5, r4
    b644:	3d09      	subs	r5, #9
    }
  }

  /* Keep the last sequence number for each address as per 802.15.4e. */
  for(j = i - 1; j > 0; --j) {
    memcpy(&received_seqnos[j], &received_seqnos[j - 1], sizeof(struct seqno));
    b646:	4e0b      	ldr	r6, [pc, #44]	; (b674 <mac_sequence_register_seqno+0x60>)
    b648:	1c20      	adds	r0, r4, #0
    b64a:	3009      	adds	r0, #9
    b64c:	1c21      	adds	r1, r4, #0
    b64e:	2209      	movs	r2, #9
    b650:	47b0      	blx	r6
    b652:	3c09      	subs	r4, #9
      break;
    }
  }

  /* Keep the last sequence number for each address as per 802.15.4e. */
  for(j = i - 1; j > 0; --j) {
    b654:	42ac      	cmp	r4, r5
    b656:	d1f7      	bne.n	b648 <mac_sequence_register_seqno+0x34>
    memcpy(&received_seqnos[j], &received_seqnos[j - 1], sizeof(struct seqno));
  }
  received_seqnos[0].seqno = packetbuf_attr(PACKETBUF_ATTR_PACKET_ID);
    b658:	4803      	ldr	r0, [pc, #12]	; (b668 <mac_sequence_register_seqno+0x54>)
  return 1;
}
static inline packetbuf_attr_t
packetbuf_attr(uint8_t type)
{
  return packetbuf_attrs[type].val;
    b65a:	4b07      	ldr	r3, [pc, #28]	; (b678 <mac_sequence_register_seqno+0x64>)
    b65c:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
    b65e:	7203      	strb	r3, [r0, #8]
  linkaddr_copy(&received_seqnos[0].sender,
    b660:	4902      	ldr	r1, [pc, #8]	; (b66c <mac_sequence_register_seqno+0x58>)
    b662:	4b06      	ldr	r3, [pc, #24]	; (b67c <mac_sequence_register_seqno+0x68>)
    b664:	4798      	blx	r3
                packetbuf_addr(PACKETBUF_ADDR_SENDER));
}
    b666:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    b668:	20000e0c 	.word	0x20000e0c
    b66c:	200031d8 	.word	0x200031d8
    b670:	0000ac6d 	.word	0x0000ac6d
    b674:	000108e7 	.word	0x000108e7
    b678:	200031f8 	.word	0x200031f8
    b67c:	0000ac5d 	.word	0x0000ac5d

0000b680 <mac_call_sent_callback>:
#endif /* DEBUG */

/*---------------------------------------------------------------------------*/
void
mac_call_sent_callback(mac_callback_t sent, void *ptr, int status, int num_tx)
{
    b680:	b510      	push	{r4, lr}
    break;
  default:
    PRINTF("mac: error %d after %d tx\n\r", status, num_tx);
  }

  if(sent) {
    b682:	2800      	cmp	r0, #0
    b684:	d004      	beq.n	b690 <mac_call_sent_callback+0x10>
    b686:	1c04      	adds	r4, r0, #0
    sent(ptr, status, num_tx);
    b688:	1c08      	adds	r0, r1, #0
    b68a:	1c11      	adds	r1, r2, #0
    b68c:	1c1a      	adds	r2, r3, #0
    b68e:	47a0      	blx	r4
  }
}
    b690:	bd10      	pop	{r4, pc}
    b692:	46c0      	nop			; (mov r8, r8)

0000b694 <on>:
  }
}
/*---------------------------------------------------------------------------*/
static int
on(void)
{
    b694:	b508      	push	{r3, lr}
  return NETSTACK_RADIO.on();
    b696:	4b02      	ldr	r3, [pc, #8]	; (b6a0 <on+0xc>)
    b698:	6a1b      	ldr	r3, [r3, #32]
    b69a:	4798      	blx	r3
}
    b69c:	bd08      	pop	{r3, pc}
    b69e:	46c0      	nop			; (mov r8, r8)
    b6a0:	00012c88 	.word	0x00012c88

0000b6a4 <off>:
/*---------------------------------------------------------------------------*/
static int
off(int keep_radio_on)
{
    b6a4:	b508      	push	{r3, lr}
  if(keep_radio_on) {
    b6a6:	2800      	cmp	r0, #0
    b6a8:	d003      	beq.n	b6b2 <off+0xe>
    return NETSTACK_RADIO.on();
    b6aa:	4b04      	ldr	r3, [pc, #16]	; (b6bc <off+0x18>)
    b6ac:	6a1b      	ldr	r3, [r3, #32]
    b6ae:	4798      	blx	r3
    b6b0:	e002      	b.n	b6b8 <off+0x14>
  } else {
    return NETSTACK_RADIO.off();
    b6b2:	4b02      	ldr	r3, [pc, #8]	; (b6bc <off+0x18>)
    b6b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    b6b6:	4798      	blx	r3
  }
}
    b6b8:	bd08      	pop	{r3, pc}
    b6ba:	46c0      	nop			; (mov r8, r8)
    b6bc:	00012c88 	.word	0x00012c88

0000b6c0 <channel_check_interval>:
/*---------------------------------------------------------------------------*/
static unsigned short
channel_check_interval(void)
{
  return 0;
}
    b6c0:	2000      	movs	r0, #0
    b6c2:	4770      	bx	lr

0000b6c4 <init>:
/*---------------------------------------------------------------------------*/
static void
init(void)
{
    b6c4:	b508      	push	{r3, lr}
  on();
    b6c6:	4b01      	ldr	r3, [pc, #4]	; (b6cc <init+0x8>)
    b6c8:	4798      	blx	r3
}
    b6ca:	bd08      	pop	{r3, pc}
    b6cc:	0000b695 	.word	0x0000b695

0000b6d0 <packet_input>:
  }
}
/*---------------------------------------------------------------------------*/
static void
packet_input(void)
{
    b6d0:	b5f0      	push	{r4, r5, r6, r7, lr}
    b6d2:	b091      	sub	sp, #68	; 0x44
  int original_datalen;
  uint8_t *original_dataptr;

  original_datalen = packetbuf_datalen();
    b6d4:	4c2b      	ldr	r4, [pc, #172]	; (b784 <packet_input+0xb4>)
    b6d6:	47a0      	blx	r4
    b6d8:	1c05      	adds	r5, r0, #0
  original_dataptr = packetbuf_dataptr();
    b6da:	4b2b      	ldr	r3, [pc, #172]	; (b788 <packet_input+0xb8>)
    b6dc:	4798      	blx	r3
    b6de:	1c06      	adds	r6, r0, #0
#ifdef NETSTACK_DECRYPT
    NETSTACK_DECRYPT();
#endif /* NETSTACK_DECRYPT */

#if NULLRDC_802154_AUTOACK
  if(packetbuf_datalen() == ACK_LEN) {
    b6e0:	47a0      	blx	r4
    b6e2:	2803      	cmp	r0, #3
    b6e4:	d04c      	beq.n	b780 <packet_input+0xb0>
    /* Ignore ack packets */
    PRINTF("nullrdc: ignored ack\n\r"); 
  } else
#endif /* NULLRDC_802154_AUTOACK */
  if(NETSTACK_FRAMER.parse() < 0) {
    b6e6:	4b29      	ldr	r3, [pc, #164]	; (b78c <packet_input+0xbc>)
    b6e8:	685b      	ldr	r3, [r3, #4]
    b6ea:	4798      	blx	r3
    b6ec:	2800      	cmp	r0, #0
    b6ee:	db47      	blt.n	b780 <packet_input+0xb0>
    PRINTF("nullrdc: failed to parse %u\n\r", packetbuf_datalen());
#if NULLRDC_ADDRESS_FILTER
  } else if(!linkaddr_cmp(packetbuf_addr(PACKETBUF_ADDR_RECEIVER),
    b6f0:	4827      	ldr	r0, [pc, #156]	; (b790 <packet_input+0xc0>)
    b6f2:	4928      	ldr	r1, [pc, #160]	; (b794 <packet_input+0xc4>)
    b6f4:	4b28      	ldr	r3, [pc, #160]	; (b798 <packet_input+0xc8>)
    b6f6:	4798      	blx	r3
    b6f8:	2800      	cmp	r0, #0
    b6fa:	d105      	bne.n	b708 <packet_input+0x38>
                                         &linkaddr_node_addr) &&
            !linkaddr_cmp(packetbuf_addr(PACKETBUF_ADDR_RECEIVER),
    b6fc:	4824      	ldr	r0, [pc, #144]	; (b790 <packet_input+0xc0>)
    b6fe:	4927      	ldr	r1, [pc, #156]	; (b79c <packet_input+0xcc>)
    b700:	4b25      	ldr	r3, [pc, #148]	; (b798 <packet_input+0xc8>)
    b702:	4798      	blx	r3
#endif /* NULLRDC_802154_AUTOACK */
  if(NETSTACK_FRAMER.parse() < 0) {
    PRINTF("nullrdc: failed to parse %u\n\r", packetbuf_datalen());
#if NULLRDC_ADDRESS_FILTER
  } else if(!linkaddr_cmp(packetbuf_addr(PACKETBUF_ADDR_RECEIVER),
                                         &linkaddr_node_addr) &&
    b704:	2800      	cmp	r0, #0
    b706:	d03b      	beq.n	b780 <packet_input+0xb0>
  } else {
    int duplicate = 0;

#if NULLRDC_802154_AUTOACK || NULLRDC_802154_AUTOACK_HW
    /* Check for duplicate packet. */
    duplicate = mac_sequence_is_duplicate();
    b708:	4b25      	ldr	r3, [pc, #148]	; (b7a0 <packet_input+0xd0>)
    b70a:	4798      	blx	r3
    b70c:	1e04      	subs	r4, r0, #0
    if(duplicate) {
    b70e:	d124      	bne.n	b75a <packet_input+0x8a>
      /* Drop the packet. */
      PRINTF("nullrdc: drop duplicate link layer packet %u\n\r",
             packetbuf_attr(PACKETBUF_ATTR_PACKET_ID));
    } else {
      mac_sequence_register_seqno();
    b710:	4b24      	ldr	r3, [pc, #144]	; (b7a4 <packet_input+0xd4>)
    b712:	4798      	blx	r3
    }
#endif /* NULLRDC_802154_AUTOACK */

    if(NULLRDC_SEND_802154_ACK) {
      frame802154_t info154;
      frame802154_parse(original_dataptr, original_datalen, &info154);
    b714:	af01      	add	r7, sp, #4
    b716:	1c30      	adds	r0, r6, #0
    b718:	1c29      	adds	r1, r5, #0
    b71a:	1c3a      	adds	r2, r7, #0
    b71c:	4b22      	ldr	r3, [pc, #136]	; (b7a8 <packet_input+0xd8>)
    b71e:	4798      	blx	r3
      if(info154.fcf.frame_type == FRAME802154_DATAFRAME &&
    b720:	783b      	ldrb	r3, [r7, #0]
    b722:	2b01      	cmp	r3, #1
    b724:	d115      	bne.n	b752 <packet_input+0x82>
    b726:	e022      	b.n	b76e <packet_input+0x9e>
         info154.fcf.ack_required != 0 &&
         linkaddr_cmp((linkaddr_t *)&info154.dest_addr,
    b728:	a804      	add	r0, sp, #16
    b72a:	491a      	ldr	r1, [pc, #104]	; (b794 <packet_input+0xc4>)
    b72c:	4b1a      	ldr	r3, [pc, #104]	; (b798 <packet_input+0xc8>)
    b72e:	4798      	blx	r3

    if(NULLRDC_SEND_802154_ACK) {
      frame802154_t info154;
      frame802154_parse(original_dataptr, original_datalen, &info154);
      if(info154.fcf.frame_type == FRAME802154_DATAFRAME &&
         info154.fcf.ack_required != 0 &&
    b730:	2800      	cmp	r0, #0
    b732:	d00c      	beq.n	b74e <packet_input+0x7e>
         linkaddr_cmp((linkaddr_t *)&info154.dest_addr,
                      &linkaddr_node_addr)) {
        uint8_t ackdata[ACK_LEN] = {0, 0, 0};
    b734:	2300      	movs	r3, #0
    b736:	466a      	mov	r2, sp
    b738:	7053      	strb	r3, [r2, #1]

        ackdata[0] = FRAME802154_ACKFRAME;
    b73a:	3302      	adds	r3, #2
    b73c:	7013      	strb	r3, [r2, #0]
        ackdata[1] = 0;
        ackdata[2] = info154.seq;
    b73e:	ab01      	add	r3, sp, #4
    b740:	7a1b      	ldrb	r3, [r3, #8]
    b742:	7093      	strb	r3, [r2, #2]
        NETSTACK_RADIO.send(ackdata, ACK_LEN);
    b744:	4b19      	ldr	r3, [pc, #100]	; (b7ac <packet_input+0xdc>)
    b746:	68db      	ldr	r3, [r3, #12]
    b748:	4668      	mov	r0, sp
    b74a:	2103      	movs	r1, #3
    b74c:	4798      	blx	r3
      }
    }

    if(!duplicate) {
    b74e:	2c00      	cmp	r4, #0
    b750:	d116      	bne.n	b780 <packet_input+0xb0>
      NETSTACK_MAC.input();
    b752:	4b17      	ldr	r3, [pc, #92]	; (b7b0 <packet_input+0xe0>)
    b754:	68db      	ldr	r3, [r3, #12]
    b756:	4798      	blx	r3
    b758:	e012      	b.n	b780 <packet_input+0xb0>
    }
#endif /* NULLRDC_802154_AUTOACK */

    if(NULLRDC_SEND_802154_ACK) {
      frame802154_t info154;
      frame802154_parse(original_dataptr, original_datalen, &info154);
    b75a:	af01      	add	r7, sp, #4
    b75c:	1c30      	adds	r0, r6, #0
    b75e:	1c29      	adds	r1, r5, #0
    b760:	1c3a      	adds	r2, r7, #0
    b762:	4b11      	ldr	r3, [pc, #68]	; (b7a8 <packet_input+0xd8>)
    b764:	4798      	blx	r3
      if(info154.fcf.frame_type == FRAME802154_DATAFRAME &&
    b766:	783b      	ldrb	r3, [r7, #0]
    b768:	2b01      	cmp	r3, #1
    b76a:	d109      	bne.n	b780 <packet_input+0xb0>
    b76c:	e004      	b.n	b778 <packet_input+0xa8>
         info154.fcf.ack_required != 0 &&
    b76e:	ab01      	add	r3, sp, #4
#endif /* NULLRDC_802154_AUTOACK */

    if(NULLRDC_SEND_802154_ACK) {
      frame802154_t info154;
      frame802154_parse(original_dataptr, original_datalen, &info154);
      if(info154.fcf.frame_type == FRAME802154_DATAFRAME &&
    b770:	78db      	ldrb	r3, [r3, #3]
    b772:	2b00      	cmp	r3, #0
    b774:	d0ed      	beq.n	b752 <packet_input+0x82>
    b776:	e7d7      	b.n	b728 <packet_input+0x58>
         info154.fcf.ack_required != 0 &&
    b778:	ab01      	add	r3, sp, #4
#endif /* NULLRDC_802154_AUTOACK */

    if(NULLRDC_SEND_802154_ACK) {
      frame802154_t info154;
      frame802154_parse(original_dataptr, original_datalen, &info154);
      if(info154.fcf.frame_type == FRAME802154_DATAFRAME &&
    b77a:	78db      	ldrb	r3, [r3, #3]
    b77c:	2b00      	cmp	r3, #0
    b77e:	d1d3      	bne.n	b728 <packet_input+0x58>

    if(!duplicate) {
      NETSTACK_MAC.input();
    }
  }
}
    b780:	b011      	add	sp, #68	; 0x44
    b782:	bdf0      	pop	{r4, r5, r6, r7, pc}
    b784:	0000bf01 	.word	0x0000bf01
    b788:	0000beb5 	.word	0x0000beb5
    b78c:	00012c14 	.word	0x00012c14
    b790:	200031e0 	.word	0x200031e0
    b794:	200031d0 	.word	0x200031d0
    b798:	0000ac6d 	.word	0x0000ac6d
    b79c:	00012be8 	.word	0x00012be8
    b7a0:	0000b5d1 	.word	0x0000b5d1
    b7a4:	0000b615 	.word	0x0000b615
    b7a8:	0000b29d 	.word	0x0000b29d
    b7ac:	00012c88 	.word	0x00012c88
    b7b0:	00012bf8 	.word	0x00012bf8

0000b7b4 <send_one_packet>:
#define ACK_LEN 3

/*---------------------------------------------------------------------------*/
static int
send_one_packet(mac_callback_t sent, void *ptr)
{
    b7b4:	b5f0      	push	{r4, r5, r6, r7, lr}
    b7b6:	b085      	sub	sp, #20
    b7b8:	9000      	str	r0, [sp, #0]
    b7ba:	9101      	str	r1, [sp, #4]

static inline int
packetbuf_set_addr(uint8_t type, const linkaddr_t *addr)
{
/*   packetbuf_addrs[type - PACKETBUF_ADDR_FIRST].type = type; */
  linkaddr_copy(&packetbuf_addrs[type - PACKETBUF_ADDR_FIRST].addr, addr);
    b7bc:	4848      	ldr	r0, [pc, #288]	; (b8e0 <send_one_packet+0x12c>)
    b7be:	4949      	ldr	r1, [pc, #292]	; (b8e4 <send_one_packet+0x130>)
    b7c0:	4b49      	ldr	r3, [pc, #292]	; (b8e8 <send_one_packet+0x134>)
    b7c2:	4798      	blx	r3

static inline int
packetbuf_set_attr(uint8_t type, const packetbuf_attr_t val)
{
/*   packetbuf_attrs[type].type = type; */
  packetbuf_attrs[type].val = val;
    b7c4:	2201      	movs	r2, #1
    b7c6:	4b49      	ldr	r3, [pc, #292]	; (b8ec <send_one_packet+0x138>)
    b7c8:	831a      	strh	r2, [r3, #24]
  packetbuf_set_addr(PACKETBUF_ADDR_SENDER, &linkaddr_node_addr);
#if NULLRDC_802154_AUTOACK || NULLRDC_802154_AUTOACK_HW
  packetbuf_set_attr(PACKETBUF_ATTR_MAC_ACK, 1);
#endif /* NULLRDC_802154_AUTOACK || NULLRDC_802154_AUTOACK_HW */

  if(NETSTACK_FRAMER.create() < 0) {
    b7ca:	4b49      	ldr	r3, [pc, #292]	; (b8f0 <send_one_packet+0x13c>)
    b7cc:	681b      	ldr	r3, [r3, #0]
    b7ce:	4798      	blx	r3
    /* Failed to allocate space for headers */
    PRINTF("nullrdc: send failed, too large header\n\r");
    ret = MAC_TX_ERR_FATAL;
    b7d0:	2406      	movs	r4, #6
  packetbuf_set_addr(PACKETBUF_ADDR_SENDER, &linkaddr_node_addr);
#if NULLRDC_802154_AUTOACK || NULLRDC_802154_AUTOACK_HW
  packetbuf_set_attr(PACKETBUF_ATTR_MAC_ACK, 1);
#endif /* NULLRDC_802154_AUTOACK || NULLRDC_802154_AUTOACK_HW */

  if(NETSTACK_FRAMER.create() < 0) {
    b7d2:	2800      	cmp	r0, #0
    b7d4:	db79      	blt.n	b8ca <send_one_packet+0x116>
#endif /* NETSTACK_ENCRYPT */

#if NULLRDC_802154_AUTOACK
    int is_broadcast;
    uint8_t dsn;
    dsn = ((uint8_t *)packetbuf_hdrptr())[2] & 0xff;
    b7d6:	4f47      	ldr	r7, [pc, #284]	; (b8f4 <send_one_packet+0x140>)
    b7d8:	47b8      	blx	r7
    b7da:	7885      	ldrb	r5, [r0, #2]

    NETSTACK_RADIO.prepare(packetbuf_hdrptr(), packetbuf_totlen());
    b7dc:	4c46      	ldr	r4, [pc, #280]	; (b8f8 <send_one_packet+0x144>)
    b7de:	6866      	ldr	r6, [r4, #4]
    b7e0:	47b8      	blx	r7
    b7e2:	1c07      	adds	r7, r0, #0
    b7e4:	4b45      	ldr	r3, [pc, #276]	; (b8fc <send_one_packet+0x148>)
    b7e6:	4798      	blx	r3
    b7e8:	1c01      	adds	r1, r0, #0
    b7ea:	1c38      	adds	r0, r7, #0
    b7ec:	47b0      	blx	r6

    is_broadcast = linkaddr_cmp(packetbuf_addr(PACKETBUF_ADDR_RECEIVER),
    b7ee:	4844      	ldr	r0, [pc, #272]	; (b900 <send_one_packet+0x14c>)
    b7f0:	4944      	ldr	r1, [pc, #272]	; (b904 <send_one_packet+0x150>)
    b7f2:	4b45      	ldr	r3, [pc, #276]	; (b908 <send_one_packet+0x154>)
    b7f4:	4798      	blx	r3
    b7f6:	1c07      	adds	r7, r0, #0
                                &linkaddr_null);

    if(NETSTACK_RADIO.receiving_packet() ||
    b7f8:	69a6      	ldr	r6, [r4, #24]
    b7fa:	47b0      	blx	r6
       (!is_broadcast && NETSTACK_RADIO.pending_packet())) {

      /* Currently receiving a packet over air or the radio has
         already received a packet that needs to be read before
         sending with auto ack. */
      ret = MAC_TX_COLLISION;
    b7fc:	2401      	movs	r4, #1
    NETSTACK_RADIO.prepare(packetbuf_hdrptr(), packetbuf_totlen());

    is_broadcast = linkaddr_cmp(packetbuf_addr(PACKETBUF_ADDR_RECEIVER),
                                &linkaddr_null);

    if(NETSTACK_RADIO.receiving_packet() ||
    b7fe:	2800      	cmp	r0, #0
    b800:	d163      	bne.n	b8ca <send_one_packet+0x116>
    b802:	2f00      	cmp	r7, #0
    b804:	d105      	bne.n	b812 <send_one_packet+0x5e>
       (!is_broadcast && NETSTACK_RADIO.pending_packet())) {
    b806:	4b3c      	ldr	r3, [pc, #240]	; (b8f8 <send_one_packet+0x144>)
    b808:	69db      	ldr	r3, [r3, #28]
    b80a:	4798      	blx	r3
    b80c:	2800      	cmp	r0, #0
    b80e:	d15c      	bne.n	b8ca <send_one_packet+0x116>
    b810:	e04d      	b.n	b8ae <send_one_packet+0xfa>
    } else {
      if(!is_broadcast) {
        RIMESTATS_ADD(reliabletx);
      }

      switch(NETSTACK_RADIO.transmit(packetbuf_totlen())) {
    b812:	4b39      	ldr	r3, [pc, #228]	; (b8f8 <send_one_packet+0x144>)
    b814:	689c      	ldr	r4, [r3, #8]
    b816:	4b39      	ldr	r3, [pc, #228]	; (b8fc <send_one_packet+0x148>)
    b818:	4798      	blx	r3
    b81a:	47a0      	blx	r4
    b81c:	2800      	cmp	r0, #0
    b81e:	d044      	beq.n	b8aa <send_one_packet+0xf6>
	    PRINTF("nullrdc tx noack\n\r");
	  }
        }
        break;
      case RADIO_TX_COLLISION:
        ret = MAC_TX_COLLISION;
    b820:	2401      	movs	r4, #1
    } else {
      if(!is_broadcast) {
        RIMESTATS_ADD(reliabletx);
      }

      switch(NETSTACK_RADIO.transmit(packetbuf_totlen())) {
    b822:	2802      	cmp	r0, #2
    b824:	d051      	beq.n	b8ca <send_one_packet+0x116>
    b826:	e03e      	b.n	b8a6 <send_one_packet+0xf2>
          ret = MAC_TX_OK;
        } else {
          rtimer_clock_t wt;

          /* Check for ack */
          wt = RTIMER_NOW();
    b828:	4b38      	ldr	r3, [pc, #224]	; (b90c <send_one_packet+0x158>)
    b82a:	4798      	blx	r3
    b82c:	1c04      	adds	r4, r0, #0
          wdt_reset_count();//watchdog_periodic();
    b82e:	4b38      	ldr	r3, [pc, #224]	; (b910 <send_one_packet+0x15c>)
    b830:	4798      	blx	r3
          while(RTIMER_CLOCK_LT(RTIMER_NOW(), wt + ACK_WAIT_TIME)) {
    b832:	4f36      	ldr	r7, [pc, #216]	; (b90c <send_one_packet+0x158>)
    b834:	4b37      	ldr	r3, [pc, #220]	; (b914 <send_one_packet+0x160>)
    b836:	1b1c      	subs	r4, r3, r4
    b838:	47b8      	blx	r7
    b83a:	1820      	adds	r0, r4, r0
    b83c:	0403      	lsls	r3, r0, #16
    b83e:	d4fb      	bmi.n	b838 <send_one_packet+0x84>
            cooja_mt_yield();
#endif /* CONTIKI_TARGET_COOJA */
          }

          ret = MAC_TX_NOACK;
          if(NETSTACK_RADIO.receiving_packet() ||
    b840:	47b0      	blx	r6
    b842:	2800      	cmp	r0, #0
    b844:	d10a      	bne.n	b85c <send_one_packet+0xa8>
             NETSTACK_RADIO.pending_packet() ||
    b846:	4b2c      	ldr	r3, [pc, #176]	; (b8f8 <send_one_packet+0x144>)
    b848:	69db      	ldr	r3, [r3, #28]
    b84a:	4798      	blx	r3
            cooja_mt_yield();
#endif /* CONTIKI_TARGET_COOJA */
          }

          ret = MAC_TX_NOACK;
          if(NETSTACK_RADIO.receiving_packet() ||
    b84c:	2800      	cmp	r0, #0
    b84e:	d105      	bne.n	b85c <send_one_packet+0xa8>
             NETSTACK_RADIO.pending_packet() ||
             NETSTACK_RADIO.channel_clear() == 0) {
    b850:	4b29      	ldr	r3, [pc, #164]	; (b8f8 <send_one_packet+0x144>)
    b852:	695b      	ldr	r3, [r3, #20]
    b854:	4798      	blx	r3
            simProcessRunValue = 1;
            cooja_mt_yield();
#endif /* CONTIKI_TARGET_COOJA */
          }

          ret = MAC_TX_NOACK;
    b856:	2402      	movs	r4, #2
          if(NETSTACK_RADIO.receiving_packet() ||
             NETSTACK_RADIO.pending_packet() ||
    b858:	2800      	cmp	r0, #0
    b85a:	d136      	bne.n	b8ca <send_one_packet+0x116>
             NETSTACK_RADIO.channel_clear() == 0) {
            int len;
            uint8_t ackbuf[ACK_LEN];

            if(AFTER_ACK_DETECTED_WAIT_TIME > 0) {
              wt = RTIMER_NOW();
    b85c:	4b2b      	ldr	r3, [pc, #172]	; (b90c <send_one_packet+0x158>)
    b85e:	4798      	blx	r3
    b860:	1c04      	adds	r4, r0, #0
              //watchdog_periodic();
			  wdt_reset_count();
    b862:	4b2b      	ldr	r3, [pc, #172]	; (b910 <send_one_packet+0x15c>)
    b864:	4798      	blx	r3
              while(RTIMER_CLOCK_LT(RTIMER_NOW(),
    b866:	4f29      	ldr	r7, [pc, #164]	; (b90c <send_one_packet+0x158>)
    b868:	2314      	movs	r3, #20
    b86a:	425b      	negs	r3, r3
    b86c:	1b1c      	subs	r4, r3, r4
    b86e:	47b8      	blx	r7
    b870:	1820      	adds	r0, r4, r0
    b872:	0403      	lsls	r3, r0, #16
    b874:	d4fb      	bmi.n	b86e <send_one_packet+0xba>
                  cooja_mt_yield();
      #endif /* CONTIKI_TARGET_COOJA */
              }
            }

            if(NETSTACK_RADIO.pending_packet()) {
    b876:	4b20      	ldr	r3, [pc, #128]	; (b8f8 <send_one_packet+0x144>)
    b878:	69db      	ldr	r3, [r3, #28]
    b87a:	4798      	blx	r3
            simProcessRunValue = 1;
            cooja_mt_yield();
#endif /* CONTIKI_TARGET_COOJA */
          }

          ret = MAC_TX_NOACK;
    b87c:	2402      	movs	r4, #2
                  cooja_mt_yield();
      #endif /* CONTIKI_TARGET_COOJA */
              }
            }

            if(NETSTACK_RADIO.pending_packet()) {
    b87e:	2800      	cmp	r0, #0
    b880:	d023      	beq.n	b8ca <send_one_packet+0x116>
              len = NETSTACK_RADIO.read(ackbuf, ACK_LEN);
    b882:	4b1d      	ldr	r3, [pc, #116]	; (b8f8 <send_one_packet+0x144>)
    b884:	691b      	ldr	r3, [r3, #16]
    b886:	a803      	add	r0, sp, #12
    b888:	2103      	movs	r1, #3
    b88a:	4798      	blx	r3
                /* Ack received */
                RIMESTATS_ADD(ackrx);
                ret = MAC_TX_OK;
              } else {
                /* Not an ack or ack not for us: collision */
                ret = MAC_TX_COLLISION;
    b88c:	3c01      	subs	r4, #1
              }
            }

            if(NETSTACK_RADIO.pending_packet()) {
              len = NETSTACK_RADIO.read(ackbuf, ACK_LEN);
              if(len == ACK_LEN && ackbuf[2] == dsn) {
    b88e:	2803      	cmp	r0, #3
    b890:	d11b      	bne.n	b8ca <send_one_packet+0x116>
    b892:	ab03      	add	r3, sp, #12
    b894:	789b      	ldrb	r3, [r3, #2]
    b896:	42ab      	cmp	r3, r5
    b898:	d117      	bne.n	b8ca <send_one_packet+0x116>
                /* Ack received */
                RIMESTATS_ADD(ackrx);
    b89a:	4a1f      	ldr	r2, [pc, #124]	; (b918 <send_one_packet+0x164>)
    b89c:	69d3      	ldr	r3, [r2, #28]
    b89e:	191b      	adds	r3, r3, r4
    b8a0:	61d3      	str	r3, [r2, #28]
                ret = MAC_TX_OK;
    b8a2:	2400      	movs	r4, #0
    b8a4:	e011      	b.n	b8ca <send_one_packet+0x116>
        break;
      case RADIO_TX_COLLISION:
        ret = MAC_TX_COLLISION;
        break;
      default:
        ret = MAC_TX_ERR;
    b8a6:	2405      	movs	r4, #5
        break;
    b8a8:	e00f      	b.n	b8ca <send_one_packet+0x116>
      }

      switch(NETSTACK_RADIO.transmit(packetbuf_totlen())) {
      case RADIO_TX_OK:
        if(is_broadcast) {
          ret = MAC_TX_OK;
    b8aa:	2400      	movs	r4, #0
    b8ac:	e00d      	b.n	b8ca <send_one_packet+0x116>
         already received a packet that needs to be read before
         sending with auto ack. */
      ret = MAC_TX_COLLISION;
    } else {
      if(!is_broadcast) {
        RIMESTATS_ADD(reliabletx);
    b8ae:	4a1a      	ldr	r2, [pc, #104]	; (b918 <send_one_packet+0x164>)
    b8b0:	6893      	ldr	r3, [r2, #8]
    b8b2:	3301      	adds	r3, #1
    b8b4:	6093      	str	r3, [r2, #8]
      }

      switch(NETSTACK_RADIO.transmit(packetbuf_totlen())) {
    b8b6:	4b10      	ldr	r3, [pc, #64]	; (b8f8 <send_one_packet+0x144>)
    b8b8:	689c      	ldr	r4, [r3, #8]
    b8ba:	4b10      	ldr	r3, [pc, #64]	; (b8fc <send_one_packet+0x148>)
    b8bc:	4798      	blx	r3
    b8be:	47a0      	blx	r4
    b8c0:	2800      	cmp	r0, #0
    b8c2:	d0b1      	beq.n	b828 <send_one_packet+0x74>
	    PRINTF("nullrdc tx noack\n\r");
	  }
        }
        break;
      case RADIO_TX_COLLISION:
        ret = MAC_TX_COLLISION;
    b8c4:	2401      	movs	r4, #1
    } else {
      if(!is_broadcast) {
        RIMESTATS_ADD(reliabletx);
      }

      switch(NETSTACK_RADIO.transmit(packetbuf_totlen())) {
    b8c6:	2802      	cmp	r0, #2
    b8c8:	d1ed      	bne.n	b8a6 <send_one_packet+0xf2>
#endif /* ! NULLRDC_802154_AUTOACK */
  }
  if(ret == MAC_TX_OK) {
    last_sent_ok = 1;
  }
  mac_call_sent_callback(sent, ptr, ret, 1);
    b8ca:	9800      	ldr	r0, [sp, #0]
    b8cc:	9901      	ldr	r1, [sp, #4]
    b8ce:	1c22      	adds	r2, r4, #0
    b8d0:	2301      	movs	r3, #1
    b8d2:	4d12      	ldr	r5, [pc, #72]	; (b91c <send_one_packet+0x168>)
    b8d4:	47a8      	blx	r5
      break;
    }

#endif /* ! NULLRDC_802154_AUTOACK */
  }
  if(ret == MAC_TX_OK) {
    b8d6:	4260      	negs	r0, r4
    b8d8:	4160      	adcs	r0, r4
    last_sent_ok = 1;
  }
  mac_call_sent_callback(sent, ptr, ret, 1);
  return last_sent_ok;
}
    b8da:	b005      	add	sp, #20
    b8dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    b8de:	46c0      	nop			; (mov r8, r8)
    b8e0:	200031d8 	.word	0x200031d8
    b8e4:	200031d0 	.word	0x200031d0
    b8e8:	0000ac5d 	.word	0x0000ac5d
    b8ec:	200031f8 	.word	0x200031f8
    b8f0:	00012c14 	.word	0x00012c14
    b8f4:	0000bec9 	.word	0x0000bec9
    b8f8:	00012c88 	.word	0x00012c88
    b8fc:	0000bf0d 	.word	0x0000bf0d
    b900:	200031e0 	.word	0x200031e0
    b904:	00012be8 	.word	0x00012be8
    b908:	0000ac6d 	.word	0x0000ac6d
    b90c:	0000f88d 	.word	0x0000f88d
    b910:	00002719 	.word	0x00002719
    b914:	fffff9e6 	.word	0xfffff9e6
    b918:	20003230 	.word	0x20003230
    b91c:	0000b681 	.word	0x0000b681

0000b920 <send_list>:
  send_one_packet(sent, ptr);
}
/*---------------------------------------------------------------------------*/
static void
send_list(mac_callback_t sent, void *ptr, struct rdc_buf_list *buf_list)
{
    b920:	b5f0      	push	{r4, r5, r6, r7, lr}
    b922:	b083      	sub	sp, #12
    b924:	9001      	str	r0, [sp, #4]
    b926:	1c0d      	adds	r5, r1, #0
  while(buf_list != NULL) {
    b928:	2a00      	cmp	r2, #0
    b92a:	d00b      	beq.n	b944 <send_list+0x24>
    /* We backup the next pointer, as it may be nullified by
     * mac_call_sent_callback() */
    struct rdc_buf_list *next = buf_list->next;
    int last_sent_ok;

    queuebuf_to_packetbuf(buf_list->buf);
    b92c:	4c06      	ldr	r4, [pc, #24]	; (b948 <send_list+0x28>)
    last_sent_ok = send_one_packet(sent, ptr);
    b92e:	4f07      	ldr	r7, [pc, #28]	; (b94c <send_list+0x2c>)
send_list(mac_callback_t sent, void *ptr, struct rdc_buf_list *buf_list)
{
  while(buf_list != NULL) {
    /* We backup the next pointer, as it may be nullified by
     * mac_call_sent_callback() */
    struct rdc_buf_list *next = buf_list->next;
    b930:	6816      	ldr	r6, [r2, #0]
    int last_sent_ok;

    queuebuf_to_packetbuf(buf_list->buf);
    b932:	6850      	ldr	r0, [r2, #4]
    b934:	47a0      	blx	r4
    last_sent_ok = send_one_packet(sent, ptr);
    b936:	9801      	ldr	r0, [sp, #4]
    b938:	1c29      	adds	r1, r5, #0
    b93a:	47b8      	blx	r7

    /* If packet transmission was not successful, we should back off and let
     * upper layers retransmit, rather than potentially sending out-of-order
     * packet fragments. */
    if(!last_sent_ok) {
    b93c:	2800      	cmp	r0, #0
    b93e:	d001      	beq.n	b944 <send_list+0x24>
      return;
    }
    buf_list = next;
    b940:	1e32      	subs	r2, r6, #0
}
/*---------------------------------------------------------------------------*/
static void
send_list(mac_callback_t sent, void *ptr, struct rdc_buf_list *buf_list)
{
  while(buf_list != NULL) {
    b942:	d1f5      	bne.n	b930 <send_list+0x10>
    if(!last_sent_ok) {
      return;
    }
    buf_list = next;
  }
}
    b944:	b003      	add	sp, #12
    b946:	bdf0      	pop	{r4, r5, r6, r7, pc}
    b948:	0000c175 	.word	0x0000c175
    b94c:	0000b7b5 	.word	0x0000b7b5

0000b950 <send_packet>:
  return last_sent_ok;
}
/*---------------------------------------------------------------------------*/
static void
send_packet(mac_callback_t sent, void *ptr)
{
    b950:	b508      	push	{r3, lr}
  send_one_packet(sent, ptr);
    b952:	4b01      	ldr	r3, [pc, #4]	; (b958 <send_packet+0x8>)
    b954:	4798      	blx	r3
}
    b956:	bd08      	pop	{r3, pc}
    b958:	0000b7b5 	.word	0x0000b7b5

0000b95c <item_from_index>:
/*---------------------------------------------------------------------------*/
/* Get an item from its neighbor index */
static nbr_table_item_t *
item_from_index(nbr_table_t *table, int index)
{
  return table != NULL && index != -1 ? (char *)table->data + index * table->item_size : NULL;
    b95c:	2800      	cmp	r0, #0
    b95e:	d006      	beq.n	b96e <item_from_index+0x12>
    b960:	1c4b      	adds	r3, r1, #1
    b962:	d006      	beq.n	b972 <item_from_index+0x16>
    b964:	6843      	ldr	r3, [r0, #4]
    b966:	4359      	muls	r1, r3
    b968:	68c0      	ldr	r0, [r0, #12]
    b96a:	1840      	adds	r0, r0, r1
    b96c:	e002      	b.n	b974 <item_from_index+0x18>
    b96e:	2000      	movs	r0, #0
    b970:	e000      	b.n	b974 <item_from_index+0x18>
    b972:	2000      	movs	r0, #0
}
    b974:	4770      	bx	lr
    b976:	46c0      	nop			; (mov r8, r8)

0000b978 <index_from_key>:
/*---------------------------------------------------------------------------*/
/* Get the neighbor index of an item */
static int
index_from_key(nbr_table_key_t *key)
{
  return key != NULL ? key - (nbr_table_key_t *)neighbor_addr_mem.mem : -1;
    b978:	2800      	cmp	r0, #0
    b97a:	d006      	beq.n	b98a <index_from_key+0x12>
    b97c:	4b04      	ldr	r3, [pc, #16]	; (b990 <index_from_key+0x18>)
    b97e:	689b      	ldr	r3, [r3, #8]
    b980:	1ac0      	subs	r0, r0, r3
    b982:	1080      	asrs	r0, r0, #2
    b984:	4b03      	ldr	r3, [pc, #12]	; (b994 <index_from_key+0x1c>)
    b986:	4358      	muls	r0, r3
    b988:	e001      	b.n	b98e <index_from_key+0x16>
    b98a:	2001      	movs	r0, #1
    b98c:	4240      	negs	r0, r0
}
    b98e:	4770      	bx	lr
    b990:	200000f4 	.word	0x200000f4
    b994:	aaaaaaab 	.word	0xaaaaaaab

0000b998 <index_from_item>:
/*---------------------------------------------------------------------------*/
/* Get the neighbor index of an item */
static int
index_from_item(nbr_table_t *table, const nbr_table_item_t *item)
{
    b998:	b508      	push	{r3, lr}
  return table != NULL && item != NULL ? ((int)((char *)item - (char *)table->data)) / table->item_size : -1;
    b99a:	2800      	cmp	r0, #0
    b99c:	d008      	beq.n	b9b0 <index_from_item+0x18>
    b99e:	2900      	cmp	r1, #0
    b9a0:	d009      	beq.n	b9b6 <index_from_item+0x1e>
    b9a2:	1c03      	adds	r3, r0, #0
    b9a4:	68c2      	ldr	r2, [r0, #12]
    b9a6:	1a88      	subs	r0, r1, r2
    b9a8:	6859      	ldr	r1, [r3, #4]
    b9aa:	4b04      	ldr	r3, [pc, #16]	; (b9bc <index_from_item+0x24>)
    b9ac:	4798      	blx	r3
    b9ae:	e004      	b.n	b9ba <index_from_item+0x22>
    b9b0:	2001      	movs	r0, #1
    b9b2:	4240      	negs	r0, r0
    b9b4:	e001      	b.n	b9ba <index_from_item+0x22>
    b9b6:	2001      	movs	r0, #1
    b9b8:	4240      	negs	r0, r0
}
    b9ba:	bd08      	pop	{r3, pc}
    b9bc:	00010645 	.word	0x00010645

0000b9c0 <nbr_get_bit>:
}
/*---------------------------------------------------------------------------*/
/* Get bit from "used" or "locked" bitmap */
static int
nbr_get_bit(uint8_t *bitmap, nbr_table_t *table, nbr_table_item_t *item)
{
    b9c0:	b538      	push	{r3, r4, r5, lr}
    b9c2:	1c05      	adds	r5, r0, #0
    b9c4:	1c0c      	adds	r4, r1, #0
  int item_index = index_from_item(table, item);
    b9c6:	1c08      	adds	r0, r1, #0
    b9c8:	1c11      	adds	r1, r2, #0
    b9ca:	4b08      	ldr	r3, [pc, #32]	; (b9ec <nbr_get_bit+0x2c>)
    b9cc:	4798      	blx	r3
  if(table != NULL && item_index != -1) {
    b9ce:	2c00      	cmp	r4, #0
    b9d0:	d008      	beq.n	b9e4 <nbr_get_bit+0x24>
    b9d2:	1c43      	adds	r3, r0, #1
    b9d4:	d008      	beq.n	b9e8 <nbr_get_bit+0x28>
    return (bitmap[item_index] & (1 << table->index)) != 0;
    b9d6:	5c2b      	ldrb	r3, [r5, r0]
    b9d8:	6820      	ldr	r0, [r4, #0]
    b9da:	4103      	asrs	r3, r0
    b9dc:	1c18      	adds	r0, r3, #0
    b9de:	2301      	movs	r3, #1
    b9e0:	4018      	ands	r0, r3
    b9e2:	e002      	b.n	b9ea <nbr_get_bit+0x2a>
  } else {
    return 0;
    b9e4:	2000      	movs	r0, #0
    b9e6:	e000      	b.n	b9ea <nbr_get_bit+0x2a>
    b9e8:	2000      	movs	r0, #0
  }
  return 0;
}
    b9ea:	bd38      	pop	{r3, r4, r5, pc}
    b9ec:	0000b999 	.word	0x0000b999

0000b9f0 <nbr_set_bit>:
/*---------------------------------------------------------------------------*/
/* Set bit in "used" or "locked" bitmap */
static int
nbr_set_bit(uint8_t *bitmap, nbr_table_t *table, nbr_table_item_t *item, int value)
{
    b9f0:	b570      	push	{r4, r5, r6, lr}
    b9f2:	1c05      	adds	r5, r0, #0
    b9f4:	1c0c      	adds	r4, r1, #0
    b9f6:	1c1e      	adds	r6, r3, #0
  int item_index = index_from_item(table, item);
    b9f8:	1c08      	adds	r0, r1, #0
    b9fa:	1c11      	adds	r1, r2, #0
    b9fc:	4b0f      	ldr	r3, [pc, #60]	; (ba3c <nbr_set_bit+0x4c>)
    b9fe:	4798      	blx	r3
  if(table != NULL && item_index != -1) {
    ba00:	2c00      	cmp	r4, #0
    ba02:	d016      	beq.n	ba32 <nbr_set_bit+0x42>
    ba04:	1c43      	adds	r3, r0, #1
    ba06:	d016      	beq.n	ba36 <nbr_set_bit+0x46>
    if(value) {
    ba08:	2e00      	cmp	r6, #0
    ba0a:	d008      	beq.n	ba1e <nbr_set_bit+0x2e>
      bitmap[item_index] |= 1 << table->index;
    ba0c:	1828      	adds	r0, r5, r0
    ba0e:	6822      	ldr	r2, [r4, #0]
    ba10:	2301      	movs	r3, #1
    ba12:	4093      	lsls	r3, r2
    ba14:	7802      	ldrb	r2, [r0, #0]
    ba16:	4313      	orrs	r3, r2
    ba18:	7003      	strb	r3, [r0, #0]
    } else {
      bitmap[item_index] &= ~(1 << table->index);
    }
    return 1;
    ba1a:	2001      	movs	r0, #1
    ba1c:	e00c      	b.n	ba38 <nbr_set_bit+0x48>
  int item_index = index_from_item(table, item);
  if(table != NULL && item_index != -1) {
    if(value) {
      bitmap[item_index] |= 1 << table->index;
    } else {
      bitmap[item_index] &= ~(1 << table->index);
    ba1e:	1828      	adds	r0, r5, r0
    ba20:	6822      	ldr	r2, [r4, #0]
    ba22:	2301      	movs	r3, #1
    ba24:	4093      	lsls	r3, r2
    ba26:	1c1a      	adds	r2, r3, #0
    ba28:	7803      	ldrb	r3, [r0, #0]
    ba2a:	4393      	bics	r3, r2
    ba2c:	7003      	strb	r3, [r0, #0]
    }
    return 1;
    ba2e:	2001      	movs	r0, #1
    ba30:	e002      	b.n	ba38 <nbr_set_bit+0x48>
  } else {
    return 0;
    ba32:	2000      	movs	r0, #0
    ba34:	e000      	b.n	ba38 <nbr_set_bit+0x48>
    ba36:	2000      	movs	r0, #0
  }
  return 0;
}
    ba38:	bd70      	pop	{r4, r5, r6, pc}
    ba3a:	46c0      	nop			; (mov r8, r8)
    ba3c:	0000b999 	.word	0x0000b999

0000ba40 <index_from_lladdr>:
}
/*---------------------------------------------------------------------------*/
/* Get the index of a neighbor from its link-layer address */
static int
index_from_lladdr(const linkaddr_t *lladdr)
{
    ba40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    ba42:	1e05      	subs	r5, r0, #0
  nbr_table_key_t *key;
  /* Allow lladdr-free insertion, useful e.g. for IPv6 ND.
   * Only one such entry is possible at a time, indexed by linkaddr_null. */
  if(lladdr == NULL) {
    ba44:	d100      	bne.n	ba48 <index_from_lladdr+0x8>
    lladdr = &linkaddr_null;
    ba46:	4d0e      	ldr	r5, [pc, #56]	; (ba80 <index_from_lladdr+0x40>)
  }
  key = list_head(nbr_table_keys);
    ba48:	480e      	ldr	r0, [pc, #56]	; (ba84 <index_from_lladdr+0x44>)
    ba4a:	4b0f      	ldr	r3, [pc, #60]	; (ba88 <index_from_lladdr+0x48>)
    ba4c:	4798      	blx	r3
    ba4e:	1e04      	subs	r4, r0, #0
  while(key != NULL) {
    ba50:	d013      	beq.n	ba7a <index_from_lladdr+0x3a>
    if(lladdr && linkaddr_cmp(lladdr, &key->lladdr)) {
    ba52:	4f0e      	ldr	r7, [pc, #56]	; (ba8c <index_from_lladdr+0x4c>)
      return index_from_key(key);
    }
    key = list_item_next(key);
    ba54:	4e0e      	ldr	r6, [pc, #56]	; (ba90 <index_from_lladdr+0x50>)
  if(lladdr == NULL) {
    lladdr = &linkaddr_null;
  }
  key = list_head(nbr_table_keys);
  while(key != NULL) {
    if(lladdr && linkaddr_cmp(lladdr, &key->lladdr)) {
    ba56:	2d00      	cmp	r5, #0
    ba58:	d008      	beq.n	ba6c <index_from_lladdr+0x2c>
    ba5a:	1d21      	adds	r1, r4, #4
    ba5c:	1c28      	adds	r0, r5, #0
    ba5e:	47b8      	blx	r7
    ba60:	2800      	cmp	r0, #0
    ba62:	d003      	beq.n	ba6c <index_from_lladdr+0x2c>
      return index_from_key(key);
    ba64:	1c20      	adds	r0, r4, #0
    ba66:	4b0b      	ldr	r3, [pc, #44]	; (ba94 <index_from_lladdr+0x54>)
    ba68:	4798      	blx	r3
    ba6a:	e008      	b.n	ba7e <index_from_lladdr+0x3e>
    }
    key = list_item_next(key);
    ba6c:	1c20      	adds	r0, r4, #0
    ba6e:	47b0      	blx	r6
    ba70:	1e04      	subs	r4, r0, #0
   * Only one such entry is possible at a time, indexed by linkaddr_null. */
  if(lladdr == NULL) {
    lladdr = &linkaddr_null;
  }
  key = list_head(nbr_table_keys);
  while(key != NULL) {
    ba72:	d1f0      	bne.n	ba56 <index_from_lladdr+0x16>
    if(lladdr && linkaddr_cmp(lladdr, &key->lladdr)) {
      return index_from_key(key);
    }
    key = list_item_next(key);
  }
  return -1;
    ba74:	2001      	movs	r0, #1
    ba76:	4240      	negs	r0, r0
    ba78:	e001      	b.n	ba7e <index_from_lladdr+0x3e>
    ba7a:	2001      	movs	r0, #1
    ba7c:	4240      	negs	r0, r0
}
    ba7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ba80:	00012be8 	.word	0x00012be8
    ba84:	20000ec4 	.word	0x20000ec4
    ba88:	00005709 	.word	0x00005709
    ba8c:	0000ac6d 	.word	0x0000ac6d
    ba90:	000057b1 	.word	0x000057b1
    ba94:	0000b979 	.word	0x0000b979

0000ba98 <nbr_table_register>:
/*---------------------------------------------------------------------------*/
/* Register a new neighbor table. To be used at initialization by modules
 * using a neighbor table */
int
nbr_table_register(nbr_table_t *table, nbr_table_callback *callback)
{
    ba98:	b510      	push	{r4, lr}
  if(num_tables < MAX_NUM_TABLES) {
    ba9a:	4b08      	ldr	r3, [pc, #32]	; (babc <nbr_table_register+0x24>)
    ba9c:	681b      	ldr	r3, [r3, #0]
    table->callback = callback;
    all_tables[table->index] = table;
    return 1;
  } else {
    /* Maximum number of tables exceeded */
    return 0;
    ba9e:	2200      	movs	r2, #0
/* Register a new neighbor table. To be used at initialization by modules
 * using a neighbor table */
int
nbr_table_register(nbr_table_t *table, nbr_table_callback *callback)
{
  if(num_tables < MAX_NUM_TABLES) {
    baa0:	2b07      	cmp	r3, #7
    baa2:	d808      	bhi.n	bab6 <nbr_table_register+0x1e>
    table->index = num_tables++;
    baa4:	1c5c      	adds	r4, r3, #1
    baa6:	4a05      	ldr	r2, [pc, #20]	; (babc <nbr_table_register+0x24>)
    baa8:	6014      	str	r4, [r2, #0]
    baaa:	6003      	str	r3, [r0, #0]
    table->callback = callback;
    baac:	6081      	str	r1, [r0, #8]
    all_tables[table->index] = table;
    baae:	009b      	lsls	r3, r3, #2
    bab0:	4a03      	ldr	r2, [pc, #12]	; (bac0 <nbr_table_register+0x28>)
    bab2:	5098      	str	r0, [r3, r2]
    return 1;
    bab4:	2201      	movs	r2, #1
  } else {
    /* Maximum number of tables exceeded */
    return 0;
  }
}
    bab6:	1c10      	adds	r0, r2, #0
    bab8:	bd10      	pop	{r4, pc}
    baba:	46c0      	nop			; (mov r8, r8)
    babc:	20000fec 	.word	0x20000fec
    bac0:	20000fcc 	.word	0x20000fcc

0000bac4 <nbr_table_next>:
}
/*---------------------------------------------------------------------------*/
/* Iterates over the current table */
nbr_table_item_t *
nbr_table_next(nbr_table_t *table, nbr_table_item_t *item)
{
    bac4:	b5f0      	push	{r4, r5, r6, r7, lr}
    bac6:	b083      	sub	sp, #12
    bac8:	9001      	str	r0, [sp, #4]
    baca:	1c0d      	adds	r5, r1, #0
/*---------------------------------------------------------------------------*/
/* Get the key af an item */
static nbr_table_key_t *
key_from_item(nbr_table_t *table, const nbr_table_item_t *item)
{
  return key_from_index(index_from_item(table, item));
    bacc:	4f11      	ldr	r7, [pc, #68]	; (bb14 <nbr_table_next+0x50>)
/*---------------------------------------------------------------------------*/
/* Get a key from a neighbor index */
static nbr_table_key_t *
key_from_index(int index)
{
  return index != -1 ? &((nbr_table_key_t *)neighbor_addr_mem.mem)[index] : NULL;
    bace:	4c12      	ldr	r4, [pc, #72]	; (bb18 <nbr_table_next+0x54>)
nbr_table_item_t *
nbr_table_next(nbr_table_t *table, nbr_table_item_t *item)
{
  do {
    void *key = key_from_item(table, item);
    key = list_item_next(key);
    bad0:	4e12      	ldr	r6, [pc, #72]	; (bb1c <nbr_table_next+0x58>)
/*---------------------------------------------------------------------------*/
/* Get the key af an item */
static nbr_table_key_t *
key_from_item(nbr_table_t *table, const nbr_table_item_t *item)
{
  return key_from_index(index_from_item(table, item));
    bad2:	9801      	ldr	r0, [sp, #4]
    bad4:	1c29      	adds	r1, r5, #0
    bad6:	47b8      	blx	r7
/*---------------------------------------------------------------------------*/
/* Get a key from a neighbor index */
static nbr_table_key_t *
key_from_index(int index)
{
  return index != -1 ? &((nbr_table_key_t *)neighbor_addr_mem.mem)[index] : NULL;
    bad8:	1c43      	adds	r3, r0, #1
    bada:	d006      	beq.n	baea <nbr_table_next+0x26>
    badc:	0043      	lsls	r3, r0, #1
    bade:	1818      	adds	r0, r3, r0
    bae0:	0080      	lsls	r0, r0, #2
    bae2:	68a3      	ldr	r3, [r4, #8]
    bae4:	469c      	mov	ip, r3
    bae6:	4460      	add	r0, ip
    bae8:	e000      	b.n	baec <nbr_table_next+0x28>
    baea:	2000      	movs	r0, #0
nbr_table_item_t *
nbr_table_next(nbr_table_t *table, nbr_table_item_t *item)
{
  do {
    void *key = key_from_item(table, item);
    key = list_item_next(key);
    baec:	47b0      	blx	r6
/*---------------------------------------------------------------------------*/
/* Get an item from its key */
static nbr_table_item_t *
item_from_key(nbr_table_t *table, nbr_table_key_t *key)
{
  return item_from_index(table, index_from_key(key));
    baee:	4b0c      	ldr	r3, [pc, #48]	; (bb20 <nbr_table_next+0x5c>)
    baf0:	4798      	blx	r3
    baf2:	1c01      	adds	r1, r0, #0
    baf4:	9801      	ldr	r0, [sp, #4]
    baf6:	4b0b      	ldr	r3, [pc, #44]	; (bb24 <nbr_table_next+0x60>)
    baf8:	4798      	blx	r3
    bafa:	1e05      	subs	r5, r0, #0
  do {
    void *key = key_from_item(table, item);
    key = list_item_next(key);
    /* Loop until the next item is in the current table */
    item = item_from_key(table, key);
  } while(item && !nbr_get_bit(used_map, table, item));
    bafc:	d006      	beq.n	bb0c <nbr_table_next+0x48>
    bafe:	480a      	ldr	r0, [pc, #40]	; (bb28 <nbr_table_next+0x64>)
    bb00:	9901      	ldr	r1, [sp, #4]
    bb02:	1c2a      	adds	r2, r5, #0
    bb04:	4b09      	ldr	r3, [pc, #36]	; (bb2c <nbr_table_next+0x68>)
    bb06:	4798      	blx	r3
    bb08:	2800      	cmp	r0, #0
    bb0a:	d0e2      	beq.n	bad2 <nbr_table_next+0xe>
  return item;
}
    bb0c:	1c28      	adds	r0, r5, #0
    bb0e:	b003      	add	sp, #12
    bb10:	bdf0      	pop	{r4, r5, r6, r7, pc}
    bb12:	46c0      	nop			; (mov r8, r8)
    bb14:	0000b999 	.word	0x0000b999
    bb18:	200000f4 	.word	0x200000f4
    bb1c:	000057b1 	.word	0x000057b1
    bb20:	0000b979 	.word	0x0000b979
    bb24:	0000b95d 	.word	0x0000b95d
    bb28:	20000fb8 	.word	0x20000fb8
    bb2c:	0000b9c1 	.word	0x0000b9c1

0000bb30 <nbr_table_head>:
}
/*---------------------------------------------------------------------------*/
/* Returns the first item of the current table */
nbr_table_item_t *
nbr_table_head(nbr_table_t *table)
{
    bb30:	b538      	push	{r3, r4, r5, lr}
    bb32:	1c05      	adds	r5, r0, #0
  /* Get item from first key */
  nbr_table_item_t *item = item_from_key(table, list_head(nbr_table_keys));
    bb34:	480b      	ldr	r0, [pc, #44]	; (bb64 <nbr_table_head+0x34>)
    bb36:	4b0c      	ldr	r3, [pc, #48]	; (bb68 <nbr_table_head+0x38>)
    bb38:	4798      	blx	r3
/*---------------------------------------------------------------------------*/
/* Get an item from its key */
static nbr_table_item_t *
item_from_key(nbr_table_t *table, nbr_table_key_t *key)
{
  return item_from_index(table, index_from_key(key));
    bb3a:	4b0c      	ldr	r3, [pc, #48]	; (bb6c <nbr_table_head+0x3c>)
    bb3c:	4798      	blx	r3
    bb3e:	1c01      	adds	r1, r0, #0
    bb40:	1c28      	adds	r0, r5, #0
    bb42:	4b0b      	ldr	r3, [pc, #44]	; (bb70 <nbr_table_head+0x40>)
    bb44:	4798      	blx	r3
    bb46:	1c04      	adds	r4, r0, #0
nbr_table_head(nbr_table_t *table)
{
  /* Get item from first key */
  nbr_table_item_t *item = item_from_key(table, list_head(nbr_table_keys));
  /* Item is the first neighbor, now check is it is in the current table */
  if(nbr_get_bit(used_map, table, item)) {
    bb48:	480a      	ldr	r0, [pc, #40]	; (bb74 <nbr_table_head+0x44>)
    bb4a:	1c29      	adds	r1, r5, #0
    bb4c:	1c22      	adds	r2, r4, #0
    bb4e:	4b0a      	ldr	r3, [pc, #40]	; (bb78 <nbr_table_head+0x48>)
    bb50:	4798      	blx	r3
    bb52:	2800      	cmp	r0, #0
    bb54:	d104      	bne.n	bb60 <nbr_table_head+0x30>
    return item;
  } else {
    return nbr_table_next(table, item);
    bb56:	1c28      	adds	r0, r5, #0
    bb58:	1c21      	adds	r1, r4, #0
    bb5a:	4b08      	ldr	r3, [pc, #32]	; (bb7c <nbr_table_head+0x4c>)
    bb5c:	4798      	blx	r3
    bb5e:	1c04      	adds	r4, r0, #0
  }
}
    bb60:	1c20      	adds	r0, r4, #0
    bb62:	bd38      	pop	{r3, r4, r5, pc}
    bb64:	20000ec4 	.word	0x20000ec4
    bb68:	00005709 	.word	0x00005709
    bb6c:	0000b979 	.word	0x0000b979
    bb70:	0000b95d 	.word	0x0000b95d
    bb74:	20000fb8 	.word	0x20000fb8
    bb78:	0000b9c1 	.word	0x0000b9c1
    bb7c:	0000bac5 	.word	0x0000bac5

0000bb80 <nbr_table_add_lladdr>:
}
/*---------------------------------------------------------------------------*/
/* Add a neighbor indexed with its link-layer address */
nbr_table_item_t *
nbr_table_add_lladdr(nbr_table_t *table, const linkaddr_t *lladdr)
{
    bb80:	b5f0      	push	{r4, r5, r6, r7, lr}
    bb82:	4657      	mov	r7, sl
    bb84:	464e      	mov	r6, r9
    bb86:	4645      	mov	r5, r8
    bb88:	b4e0      	push	{r5, r6, r7}
    bb8a:	b082      	sub	sp, #8
    bb8c:	1c04      	adds	r4, r0, #0
    bb8e:	1e0d      	subs	r5, r1, #0
  nbr_table_item_t *item;
  nbr_table_key_t *key;

  /* Allow lladdr-free insertion, useful e.g. for IPv6 ND.
   * Only one such entry is possible at a time, indexed by linkaddr_null. */
  if(lladdr == NULL) {
    bb90:	d100      	bne.n	bb94 <nbr_table_add_lladdr+0x14>
    lladdr = &linkaddr_null;
    bb92:	4d4b      	ldr	r5, [pc, #300]	; (bcc0 <nbr_table_add_lladdr+0x140>)
  }

  if((index = index_from_lladdr(lladdr)) == -1) {
    bb94:	1c28      	adds	r0, r5, #0
    bb96:	4b4b      	ldr	r3, [pc, #300]	; (bcc4 <nbr_table_add_lladdr+0x144>)
    bb98:	4798      	blx	r3
    bb9a:	1c07      	adds	r7, r0, #0
    bb9c:	1c43      	adds	r3, r0, #1
    bb9e:	d159      	bne.n	bc54 <nbr_table_add_lladdr+0xd4>
{
  nbr_table_key_t *key;
  int least_used_count = 0;
  nbr_table_key_t *least_used_key = NULL;

  key = memb_alloc(&neighbor_addr_mem);
    bba0:	4849      	ldr	r0, [pc, #292]	; (bcc8 <nbr_table_add_lladdr+0x148>)
    bba2:	4b4a      	ldr	r3, [pc, #296]	; (bccc <nbr_table_add_lladdr+0x14c>)
    bba4:	4798      	blx	r3
  if(key != NULL) {
    return key;
    bba6:	1e06      	subs	r6, r0, #0
  nbr_table_key_t *key;
  int least_used_count = 0;
  nbr_table_key_t *least_used_key = NULL;

  key = memb_alloc(&neighbor_addr_mem);
  if(key != NULL) {
    bba8:	d172      	bne.n	bc90 <nbr_table_add_lladdr+0x110>
            * (1) not locked
            * (2) used by fewest tables
            * (3) oldest (the list is ordered by insertion time)
            * */
    /* Get item from first key */
    key = list_head(nbr_table_keys);
    bbaa:	4849      	ldr	r0, [pc, #292]	; (bcd0 <nbr_table_add_lladdr+0x150>)
    bbac:	4b49      	ldr	r3, [pc, #292]	; (bcd4 <nbr_table_add_lladdr+0x154>)
    bbae:	4798      	blx	r3
    bbb0:	1e07      	subs	r7, r0, #0
    while(key != NULL) {
    bbb2:	d04d      	beq.n	bc50 <nbr_table_add_lladdr+0xd0>
    bbb4:	2300      	movs	r3, #0
    bbb6:	469a      	mov	sl, r3
    bbb8:	9300      	str	r3, [sp, #0]
      int item_index = index_from_key(key);
    bbba:	4b47      	ldr	r3, [pc, #284]	; (bcd8 <nbr_table_add_lladdr+0x158>)
    bbbc:	4699      	mov	r9, r3
      int locked = locked_map[item_index];
    bbbe:	4e47      	ldr	r6, [pc, #284]	; (bcdc <nbr_table_add_lladdr+0x15c>)
            * (3) oldest (the list is ordered by insertion time)
            * */
    /* Get item from first key */
    key = list_head(nbr_table_keys);
    while(key != NULL) {
      int item_index = index_from_key(key);
    bbc0:	1c38      	adds	r0, r7, #0
    bbc2:	47c8      	blx	r9
      int locked = locked_map[item_index];
      /* Never delete a locked item */
      if(!locked) {
    bbc4:	5c33      	ldrb	r3, [r6, r0]
    bbc6:	2b00      	cmp	r3, #0
    bbc8:	d116      	bne.n	bbf8 <nbr_table_add_lladdr+0x78>
        int used = used_map[item_index];
    bbca:	4b45      	ldr	r3, [pc, #276]	; (bce0 <nbr_table_add_lladdr+0x160>)
    bbcc:	5c1b      	ldrb	r3, [r3, r0]
        int used_count = 0;
        /* Count how many tables are using this item */
        while(used != 0) {
    bbce:	2b00      	cmp	r3, #0
    bbd0:	d06b      	beq.n	bcaa <nbr_table_add_lladdr+0x12a>
    bbd2:	2200      	movs	r2, #0
          if((used & 1) == 1) {
    bbd4:	2001      	movs	r0, #1
            used_count++;
    bbd6:	1c01      	adds	r1, r0, #0
    bbd8:	4019      	ands	r1, r3
    bbda:	1852      	adds	r2, r2, r1
          }
          used >>= 1;
    bbdc:	105b      	asrs	r3, r3, #1
      /* Never delete a locked item */
      if(!locked) {
        int used = used_map[item_index];
        int used_count = 0;
        /* Count how many tables are using this item */
        while(used != 0) {
    bbde:	d1fa      	bne.n	bbd6 <nbr_table_add_lladdr+0x56>
            used_count++;
          }
          used >>= 1;
        }
        /* Find least used item */
        if(least_used_key == NULL || used_count < least_used_count) {
    bbe0:	9b00      	ldr	r3, [sp, #0]
    bbe2:	2b00      	cmp	r3, #0
    bbe4:	d003      	beq.n	bbee <nbr_table_add_lladdr+0x6e>
    bbe6:	4552      	cmp	r2, sl
    bbe8:	da06      	bge.n	bbf8 <nbr_table_add_lladdr+0x78>
    bbea:	4692      	mov	sl, r2
    bbec:	e000      	b.n	bbf0 <nbr_table_add_lladdr+0x70>
    bbee:	4692      	mov	sl, r2
          least_used_key = key;
          least_used_count = used_count;
          if(used_count == 0) { /* We won't find any least used item */
    bbf0:	4653      	mov	r3, sl
    bbf2:	2b00      	cmp	r3, #0
    bbf4:	d03f      	beq.n	bc76 <nbr_table_add_lladdr+0xf6>
    bbf6:	9700      	str	r7, [sp, #0]
            break;
          }
        }
      }
      key = list_item_next(key);
    bbf8:	1c38      	adds	r0, r7, #0
    bbfa:	4b3a      	ldr	r3, [pc, #232]	; (bce4 <nbr_table_add_lladdr+0x164>)
    bbfc:	4798      	blx	r3
    bbfe:	1e07      	subs	r7, r0, #0
            * (2) used by fewest tables
            * (3) oldest (the list is ordered by insertion time)
            * */
    /* Get item from first key */
    key = list_head(nbr_table_keys);
    while(key != NULL) {
    bc00:	d1de      	bne.n	bbc0 <nbr_table_add_lladdr+0x40>
    bc02:	e03b      	b.n	bc7c <nbr_table_add_lladdr+0xfc>
      return NULL;
    } else {
      /* Reuse least used item */
      int i;
      for(i = 0; i<MAX_NUM_TABLES; i++) {
        if(all_tables[i] != NULL && all_tables[i]->callback != NULL) {
    bc04:	6837      	ldr	r7, [r6, #0]
    bc06:	2f00      	cmp	r7, #0
    bc08:	d013      	beq.n	bc32 <nbr_table_add_lladdr+0xb2>
    bc0a:	68bb      	ldr	r3, [r7, #8]
    bc0c:	469a      	mov	sl, r3
    bc0e:	2b00      	cmp	r3, #0
    bc10:	d00f      	beq.n	bc32 <nbr_table_add_lladdr+0xb2>
/*---------------------------------------------------------------------------*/
/* Get an item from its key */
static nbr_table_item_t *
item_from_key(nbr_table_t *table, nbr_table_key_t *key)
{
  return item_from_index(table, index_from_key(key));
    bc12:	9800      	ldr	r0, [sp, #0]
    bc14:	4b30      	ldr	r3, [pc, #192]	; (bcd8 <nbr_table_add_lladdr+0x158>)
    bc16:	4798      	blx	r3
    bc18:	1c01      	adds	r1, r0, #0
    bc1a:	1c38      	adds	r0, r7, #0
    bc1c:	47c0      	blx	r8
    bc1e:	1c02      	adds	r2, r0, #0
    bc20:	9001      	str	r0, [sp, #4]
      int i;
      for(i = 0; i<MAX_NUM_TABLES; i++) {
        if(all_tables[i] != NULL && all_tables[i]->callback != NULL) {
          /* Call table callback for each table that uses this item */
          nbr_table_item_t *removed_item = item_from_key(all_tables[i], least_used_key);
          if(nbr_get_bit(used_map, all_tables[i], removed_item) == 1) {
    bc22:	482f      	ldr	r0, [pc, #188]	; (bce0 <nbr_table_add_lladdr+0x160>)
    bc24:	1c39      	adds	r1, r7, #0
    bc26:	4b30      	ldr	r3, [pc, #192]	; (bce8 <nbr_table_add_lladdr+0x168>)
    bc28:	4798      	blx	r3
    bc2a:	2801      	cmp	r0, #1
    bc2c:	d101      	bne.n	bc32 <nbr_table_add_lladdr+0xb2>
            all_tables[i]->callback(removed_item);
    bc2e:	9801      	ldr	r0, [sp, #4]
    bc30:	47d0      	blx	sl
    bc32:	3604      	adds	r6, #4
      /* We haven't found any unlocked item, allocation fails */
      return NULL;
    } else {
      /* Reuse least used item */
      int i;
      for(i = 0; i<MAX_NUM_TABLES; i++) {
    bc34:	454e      	cmp	r6, r9
    bc36:	d1e5      	bne.n	bc04 <nbr_table_add_lladdr+0x84>
            all_tables[i]->callback(removed_item);
          }
        }
      }
      /* Empty used map */
      used_map[index_from_key(least_used_key)] = 0;
    bc38:	9e00      	ldr	r6, [sp, #0]
    bc3a:	1c30      	adds	r0, r6, #0
    bc3c:	4b26      	ldr	r3, [pc, #152]	; (bcd8 <nbr_table_add_lladdr+0x158>)
    bc3e:	4798      	blx	r3
    bc40:	2200      	movs	r2, #0
    bc42:	4b27      	ldr	r3, [pc, #156]	; (bce0 <nbr_table_add_lladdr+0x160>)
    bc44:	541a      	strb	r2, [r3, r0]
      /* Remove neighbor from list */
      list_remove(nbr_table_keys, least_used_key);
    bc46:	4822      	ldr	r0, [pc, #136]	; (bcd0 <nbr_table_add_lladdr+0x150>)
    bc48:	1c31      	adds	r1, r6, #0
    bc4a:	4b28      	ldr	r3, [pc, #160]	; (bcec <nbr_table_add_lladdr+0x16c>)
    bc4c:	4798      	blx	r3
    bc4e:	e01f      	b.n	bc90 <nbr_table_add_lladdr+0x110>
     /* Neighbor not yet in table, let's try to allocate one */
    key = nbr_table_allocate();

    /* No space available for new entry */
    if(key == NULL) {
      return NULL;
    bc50:	2000      	movs	r0, #0
    bc52:	e02f      	b.n	bcb4 <nbr_table_add_lladdr+0x134>
    /* Set link-layer address */
    linkaddr_copy(&key->lladdr, lladdr);
  }

  /* Get item in the current table */
  item = item_from_index(table, index);
    bc54:	1c20      	adds	r0, r4, #0
    bc56:	1c39      	adds	r1, r7, #0
    bc58:	4b25      	ldr	r3, [pc, #148]	; (bcf0 <nbr_table_add_lladdr+0x170>)
    bc5a:	4798      	blx	r3
    bc5c:	1c05      	adds	r5, r0, #0

  /* Initialize item data and set "used" bit */
  memset(item, 0, table->item_size);
    bc5e:	2100      	movs	r1, #0
    bc60:	6862      	ldr	r2, [r4, #4]
    bc62:	4b24      	ldr	r3, [pc, #144]	; (bcf4 <nbr_table_add_lladdr+0x174>)
    bc64:	4798      	blx	r3
  nbr_set_bit(used_map, table, item, 1);
    bc66:	481e      	ldr	r0, [pc, #120]	; (bce0 <nbr_table_add_lladdr+0x160>)
    bc68:	1c21      	adds	r1, r4, #0
    bc6a:	1c2a      	adds	r2, r5, #0
    bc6c:	2301      	movs	r3, #1
    bc6e:	4c22      	ldr	r4, [pc, #136]	; (bcf8 <nbr_table_add_lladdr+0x178>)
    bc70:	47a0      	blx	r4

  return item;
    bc72:	1c28      	adds	r0, r5, #0
    bc74:	e01e      	b.n	bcb4 <nbr_table_add_lladdr+0x134>
        }
        /* Find least used item */
        if(least_used_key == NULL || used_count < least_used_count) {
          least_used_key = key;
          least_used_count = used_count;
          if(used_count == 0) { /* We won't find any least used item */
    bc76:	9700      	str	r7, [sp, #0]
    bc78:	e000      	b.n	bc7c <nbr_table_add_lladdr+0xfc>
            used_count++;
          }
          used >>= 1;
        }
        /* Find least used item */
        if(least_used_key == NULL || used_count < least_used_count) {
    bc7a:	9700      	str	r7, [sp, #0]
          }
        }
      }
      key = list_item_next(key);
    }
    if(least_used_key == NULL) {
    bc7c:	9b00      	ldr	r3, [sp, #0]
    bc7e:	2b00      	cmp	r3, #0
    bc80:	d0e6      	beq.n	bc50 <nbr_table_add_lladdr+0xd0>
    bc82:	4e1e      	ldr	r6, [pc, #120]	; (bcfc <nbr_table_add_lladdr+0x17c>)
    bc84:	2320      	movs	r3, #32
    bc86:	4699      	mov	r9, r3
    bc88:	44b1      	add	r9, r6
/*---------------------------------------------------------------------------*/
/* Get an item from its key */
static nbr_table_item_t *
item_from_key(nbr_table_t *table, nbr_table_key_t *key)
{
  return item_from_index(table, index_from_key(key));
    bc8a:	4b19      	ldr	r3, [pc, #100]	; (bcf0 <nbr_table_add_lladdr+0x170>)
    bc8c:	4698      	mov	r8, r3
    bc8e:	e7b9      	b.n	bc04 <nbr_table_add_lladdr+0x84>
    if(key == NULL) {
      return NULL;
    }

    /* Add neighbor to list */
    list_add(nbr_table_keys, key);
    bc90:	480f      	ldr	r0, [pc, #60]	; (bcd0 <nbr_table_add_lladdr+0x150>)
    bc92:	1c31      	adds	r1, r6, #0
    bc94:	4b1a      	ldr	r3, [pc, #104]	; (bd00 <nbr_table_add_lladdr+0x180>)
    bc96:	4798      	blx	r3

    /* Get index from newly allocated neighbor */
    index = index_from_key(key);
    bc98:	1c30      	adds	r0, r6, #0
    bc9a:	4b0f      	ldr	r3, [pc, #60]	; (bcd8 <nbr_table_add_lladdr+0x158>)
    bc9c:	4798      	blx	r3
    bc9e:	1c07      	adds	r7, r0, #0

    /* Set link-layer address */
    linkaddr_copy(&key->lladdr, lladdr);
    bca0:	1d30      	adds	r0, r6, #4
    bca2:	1c29      	adds	r1, r5, #0
    bca4:	4b17      	ldr	r3, [pc, #92]	; (bd04 <nbr_table_add_lladdr+0x184>)
    bca6:	4798      	blx	r3
    bca8:	e7d4      	b.n	bc54 <nbr_table_add_lladdr+0xd4>
            used_count++;
          }
          used >>= 1;
        }
        /* Find least used item */
        if(least_used_key == NULL || used_count < least_used_count) {
    bcaa:	9b00      	ldr	r3, [sp, #0]
    bcac:	2b00      	cmp	r3, #0
    bcae:	d0e4      	beq.n	bc7a <nbr_table_add_lladdr+0xfa>
      int item_index = index_from_key(key);
      int locked = locked_map[item_index];
      /* Never delete a locked item */
      if(!locked) {
        int used = used_map[item_index];
        int used_count = 0;
    bcb0:	2200      	movs	r2, #0
    bcb2:	e798      	b.n	bbe6 <nbr_table_add_lladdr+0x66>
  /* Initialize item data and set "used" bit */
  memset(item, 0, table->item_size);
  nbr_set_bit(used_map, table, item, 1);

  return item;
}
    bcb4:	b002      	add	sp, #8
    bcb6:	bc1c      	pop	{r2, r3, r4}
    bcb8:	4690      	mov	r8, r2
    bcba:	4699      	mov	r9, r3
    bcbc:	46a2      	mov	sl, r4
    bcbe:	bdf0      	pop	{r4, r5, r6, r7, pc}
    bcc0:	00012be8 	.word	0x00012be8
    bcc4:	0000ba41 	.word	0x0000ba41
    bcc8:	200000f4 	.word	0x200000f4
    bccc:	000057dd 	.word	0x000057dd
    bcd0:	20000ec4 	.word	0x20000ec4
    bcd4:	00005709 	.word	0x00005709
    bcd8:	0000b979 	.word	0x0000b979
    bcdc:	20000eb0 	.word	0x20000eb0
    bce0:	20000fb8 	.word	0x20000fb8
    bce4:	000057b1 	.word	0x000057b1
    bce8:	0000b9c1 	.word	0x0000b9c1
    bcec:	00005725 	.word	0x00005725
    bcf0:	0000b95d 	.word	0x0000b95d
    bcf4:	00010921 	.word	0x00010921
    bcf8:	0000b9f1 	.word	0x0000b9f1
    bcfc:	20000fcc 	.word	0x20000fcc
    bd00:	00005759 	.word	0x00005759
    bd04:	0000ac5d 	.word	0x0000ac5d

0000bd08 <nbr_table_get_from_lladdr>:
/*---------------------------------------------------------------------------*/
/* Get an item from its link-layer address */
void *
nbr_table_get_from_lladdr(nbr_table_t *table, const linkaddr_t *lladdr)
{
    bd08:	b538      	push	{r3, r4, r5, lr}
    bd0a:	1c05      	adds	r5, r0, #0
  void *item = item_from_index(table, index_from_lladdr(lladdr));
    bd0c:	1c08      	adds	r0, r1, #0
    bd0e:	4b09      	ldr	r3, [pc, #36]	; (bd34 <nbr_table_get_from_lladdr+0x2c>)
    bd10:	4798      	blx	r3
    bd12:	1c01      	adds	r1, r0, #0
    bd14:	1c28      	adds	r0, r5, #0
    bd16:	4b08      	ldr	r3, [pc, #32]	; (bd38 <nbr_table_get_from_lladdr+0x30>)
    bd18:	4798      	blx	r3
    bd1a:	1c04      	adds	r4, r0, #0
  return nbr_get_bit(used_map, table, item) ? item : NULL;
    bd1c:	4807      	ldr	r0, [pc, #28]	; (bd3c <nbr_table_get_from_lladdr+0x34>)
    bd1e:	1c29      	adds	r1, r5, #0
    bd20:	1c22      	adds	r2, r4, #0
    bd22:	4b07      	ldr	r3, [pc, #28]	; (bd40 <nbr_table_get_from_lladdr+0x38>)
    bd24:	4798      	blx	r3
    bd26:	2800      	cmp	r0, #0
    bd28:	d001      	beq.n	bd2e <nbr_table_get_from_lladdr+0x26>
    bd2a:	1c20      	adds	r0, r4, #0
    bd2c:	e000      	b.n	bd30 <nbr_table_get_from_lladdr+0x28>
    bd2e:	2000      	movs	r0, #0
}
    bd30:	bd38      	pop	{r3, r4, r5, pc}
    bd32:	46c0      	nop			; (mov r8, r8)
    bd34:	0000ba41 	.word	0x0000ba41
    bd38:	0000b95d 	.word	0x0000b95d
    bd3c:	20000fb8 	.word	0x20000fb8
    bd40:	0000b9c1 	.word	0x0000b9c1

0000bd44 <nbr_table_remove>:
/*---------------------------------------------------------------------------*/
/* Removes a neighbor from the current table (unset "used" bit) */
int
nbr_table_remove(nbr_table_t *table, void *item)
{
    bd44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    bd46:	1c06      	adds	r6, r0, #0
    bd48:	1c0d      	adds	r5, r1, #0
  int ret = nbr_set_bit(used_map, table, item, 0);
    bd4a:	4807      	ldr	r0, [pc, #28]	; (bd68 <nbr_table_remove+0x24>)
    bd4c:	1c31      	adds	r1, r6, #0
    bd4e:	1c2a      	adds	r2, r5, #0
    bd50:	2300      	movs	r3, #0
    bd52:	4c06      	ldr	r4, [pc, #24]	; (bd6c <nbr_table_remove+0x28>)
    bd54:	47a0      	blx	r4
    bd56:	1c07      	adds	r7, r0, #0
  nbr_set_bit(locked_map, table, item, 0);
    bd58:	4805      	ldr	r0, [pc, #20]	; (bd70 <nbr_table_remove+0x2c>)
    bd5a:	1c31      	adds	r1, r6, #0
    bd5c:	1c2a      	adds	r2, r5, #0
    bd5e:	2300      	movs	r3, #0
    bd60:	47a0      	blx	r4
  return ret;
}
    bd62:	1c38      	adds	r0, r7, #0
    bd64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    bd66:	46c0      	nop			; (mov r8, r8)
    bd68:	20000fb8 	.word	0x20000fb8
    bd6c:	0000b9f1 	.word	0x0000b9f1
    bd70:	20000eb0 	.word	0x20000eb0

0000bd74 <nbr_table_lock>:
/*---------------------------------------------------------------------------*/
/* Lock a neighbor for the current table (set "locked" bit) */
int
nbr_table_lock(nbr_table_t *table, void *item)
{
    bd74:	b510      	push	{r4, lr}
    bd76:	1c03      	adds	r3, r0, #0
    bd78:	1c0a      	adds	r2, r1, #0
  return nbr_set_bit(locked_map, table, item, 1);
    bd7a:	4803      	ldr	r0, [pc, #12]	; (bd88 <nbr_table_lock+0x14>)
    bd7c:	1c19      	adds	r1, r3, #0
    bd7e:	2301      	movs	r3, #1
    bd80:	4c02      	ldr	r4, [pc, #8]	; (bd8c <nbr_table_lock+0x18>)
    bd82:	47a0      	blx	r4
}
    bd84:	bd10      	pop	{r4, pc}
    bd86:	46c0      	nop			; (mov r8, r8)
    bd88:	20000eb0 	.word	0x20000eb0
    bd8c:	0000b9f1 	.word	0x0000b9f1

0000bd90 <nbr_table_unlock>:
/*---------------------------------------------------------------------------*/
/* Release the lock on a neighbor for the current table (unset "locked" bit) */
int
nbr_table_unlock(nbr_table_t *table, void *item)
{
    bd90:	b510      	push	{r4, lr}
    bd92:	1c03      	adds	r3, r0, #0
    bd94:	1c0a      	adds	r2, r1, #0
  return nbr_set_bit(locked_map, table, item, 0);
    bd96:	4803      	ldr	r0, [pc, #12]	; (bda4 <nbr_table_unlock+0x14>)
    bd98:	1c19      	adds	r1, r3, #0
    bd9a:	2300      	movs	r3, #0
    bd9c:	4c02      	ldr	r4, [pc, #8]	; (bda8 <nbr_table_unlock+0x18>)
    bd9e:	47a0      	blx	r4
}
    bda0:	bd10      	pop	{r4, pc}
    bda2:	46c0      	nop			; (mov r8, r8)
    bda4:	20000eb0 	.word	0x20000eb0
    bda8:	0000b9f1 	.word	0x0000b9f1

0000bdac <nbr_table_get_lladdr>:
/*---------------------------------------------------------------------------*/
/* Get link-layer address of an item */
linkaddr_t *
nbr_table_get_lladdr(nbr_table_t *table, const void *item)
{
    bdac:	b508      	push	{r3, lr}
/*---------------------------------------------------------------------------*/
/* Get the key af an item */
static nbr_table_key_t *
key_from_item(nbr_table_t *table, const nbr_table_item_t *item)
{
  return key_from_index(index_from_item(table, item));
    bdae:	4b08      	ldr	r3, [pc, #32]	; (bdd0 <nbr_table_get_lladdr+0x24>)
    bdb0:	4798      	blx	r3
/*---------------------------------------------------------------------------*/
/* Get a key from a neighbor index */
static nbr_table_key_t *
key_from_index(int index)
{
  return index != -1 ? &((nbr_table_key_t *)neighbor_addr_mem.mem)[index] : NULL;
    bdb2:	1c43      	adds	r3, r0, #1
    bdb4:	d00a      	beq.n	bdcc <nbr_table_get_lladdr+0x20>
    bdb6:	0043      	lsls	r3, r0, #1
    bdb8:	1818      	adds	r0, r3, r0
    bdba:	0080      	lsls	r0, r0, #2
    bdbc:	4b05      	ldr	r3, [pc, #20]	; (bdd4 <nbr_table_get_lladdr+0x28>)
    bdbe:	689b      	ldr	r3, [r3, #8]
    bdc0:	181b      	adds	r3, r3, r0
/* Get link-layer address of an item */
linkaddr_t *
nbr_table_get_lladdr(nbr_table_t *table, const void *item)
{
  nbr_table_key_t *key = key_from_item(table, item);
  return key != NULL ? &key->lladdr : NULL;
    bdc2:	2000      	movs	r0, #0
    bdc4:	2b00      	cmp	r3, #0
    bdc6:	d002      	beq.n	bdce <nbr_table_get_lladdr+0x22>
    bdc8:	1d18      	adds	r0, r3, #4
    bdca:	e000      	b.n	bdce <nbr_table_get_lladdr+0x22>
    bdcc:	2000      	movs	r0, #0
}
    bdce:	bd08      	pop	{r3, pc}
    bdd0:	0000b999 	.word	0x0000b999
    bdd4:	200000f4 	.word	0x200000f4

0000bdd8 <netstack_init>:

#include "net/netstack.h"
/*---------------------------------------------------------------------------*/
void
netstack_init(void)
{
    bdd8:	b508      	push	{r3, lr}
  NETSTACK_RADIO.init();
    bdda:	4b06      	ldr	r3, [pc, #24]	; (bdf4 <netstack_init+0x1c>)
    bddc:	681b      	ldr	r3, [r3, #0]
    bdde:	4798      	blx	r3
  NETSTACK_RDC.init();
    bde0:	4b05      	ldr	r3, [pc, #20]	; (bdf8 <netstack_init+0x20>)
    bde2:	685b      	ldr	r3, [r3, #4]
    bde4:	4798      	blx	r3
  NETSTACK_MAC.init();
    bde6:	4b05      	ldr	r3, [pc, #20]	; (bdfc <netstack_init+0x24>)
    bde8:	685b      	ldr	r3, [r3, #4]
    bdea:	4798      	blx	r3
  NETSTACK_NETWORK.init();
    bdec:	4b04      	ldr	r3, [pc, #16]	; (be00 <netstack_init+0x28>)
    bdee:	685b      	ldr	r3, [r3, #4]
    bdf0:	4798      	blx	r3

#ifdef NETSTACK_ENCRYPTION_INIT
  NETSTACK_ENCRYPTION_INIT();
#endif /* NETSTACK_ENCRYPTION_INIT */
}
    bdf2:	bd08      	pop	{r3, pc}
    bdf4:	00012c88 	.word	0x00012c88
    bdf8:	00012c24 	.word	0x00012c24
    bdfc:	00012bf8 	.word	0x00012bf8
    be00:	000129a0 	.word	0x000129a0

0000be04 <packetbuf_copyto_hdr>:
  }
}
/*---------------------------------------------------------------------------*/
int
packetbuf_copyto_hdr(uint8_t *to)
{
    be04:	b510      	push	{r4, lr}
      PRINTF("0x%02x, ", packetbuf[i]);
    }
    PRINTF("\n\r");
  }
#endif /* DEBUG_LEVEL */
  memcpy(to, packetbuf + hdrptr, PACKETBUF_HDR_SIZE - hdrptr);
    be06:	4b05      	ldr	r3, [pc, #20]	; (be1c <packetbuf_copyto_hdr+0x18>)
    be08:	781b      	ldrb	r3, [r3, #0]
    be0a:	2430      	movs	r4, #48	; 0x30
    be0c:	1ae4      	subs	r4, r4, r3
    be0e:	4904      	ldr	r1, [pc, #16]	; (be20 <packetbuf_copyto_hdr+0x1c>)
    be10:	18c9      	adds	r1, r1, r3
    be12:	1c22      	adds	r2, r4, #0
    be14:	4b03      	ldr	r3, [pc, #12]	; (be24 <packetbuf_copyto_hdr+0x20>)
    be16:	4798      	blx	r3
  return PACKETBUF_HDR_SIZE - hdrptr;
}
    be18:	1c20      	adds	r0, r4, #0
    be1a:	bd10      	pop	{r4, pc}
    be1c:	20000ff4 	.word	0x20000ff4
    be20:	20000ff8 	.word	0x20000ff8
    be24:	000108e7 	.word	0x000108e7

0000be28 <packetbuf_copyto>:
/*---------------------------------------------------------------------------*/
int
packetbuf_copyto(void *to)
{
    be28:	b5f0      	push	{r4, r5, r6, r7, lr}
    be2a:	b083      	sub	sp, #12
      bufferptr += sprintf(bufferptr, "0x%02x, ", packetbufptr[i]);
    }
    PRINTF("packetbuf_write: data: %s\n\r", buffer);
  }
#endif /* DEBUG_LEVEL */
  if(PACKETBUF_HDR_SIZE - hdrptr + buflen > PACKETBUF_SIZE) {
    be2c:	4b0e      	ldr	r3, [pc, #56]	; (be68 <packetbuf_copyto+0x40>)
    be2e:	781e      	ldrb	r6, [r3, #0]
    be30:	2230      	movs	r2, #48	; 0x30
    be32:	1b92      	subs	r2, r2, r6
    be34:	4b0d      	ldr	r3, [pc, #52]	; (be6c <packetbuf_copyto+0x44>)
    be36:	881f      	ldrh	r7, [r3, #0]
    be38:	19d5      	adds	r5, r2, r7
    be3a:	2d80      	cmp	r5, #128	; 0x80
    be3c:	dc0f      	bgt.n	be5e <packetbuf_copyto+0x36>
    /* Too large packet */
    return 0;
  }
  memcpy(to, packetbuf + hdrptr, PACKETBUF_HDR_SIZE - hdrptr);
    be3e:	490c      	ldr	r1, [pc, #48]	; (be70 <packetbuf_copyto+0x48>)
    be40:	1989      	adds	r1, r1, r6
    be42:	9001      	str	r0, [sp, #4]
    be44:	4c0b      	ldr	r4, [pc, #44]	; (be74 <packetbuf_copyto+0x4c>)
    be46:	47a0      	blx	r4
  memcpy((uint8_t *)to + PACKETBUF_HDR_SIZE - hdrptr, packetbufptr + bufptr,
    be48:	9b01      	ldr	r3, [sp, #4]
    be4a:	1b98      	subs	r0, r3, r6
    be4c:	3030      	adds	r0, #48	; 0x30
    be4e:	4b0a      	ldr	r3, [pc, #40]	; (be78 <packetbuf_copyto+0x50>)
    be50:	881b      	ldrh	r3, [r3, #0]
    be52:	4a0a      	ldr	r2, [pc, #40]	; (be7c <packetbuf_copyto+0x54>)
    be54:	6811      	ldr	r1, [r2, #0]
    be56:	18c9      	adds	r1, r1, r3
    be58:	1c3a      	adds	r2, r7, #0
    be5a:	47a0      	blx	r4
	 buflen);
  return PACKETBUF_HDR_SIZE - hdrptr + buflen;
    be5c:	e000      	b.n	be60 <packetbuf_copyto+0x38>
    PRINTF("packetbuf_write: data: %s\n\r", buffer);
  }
#endif /* DEBUG_LEVEL */
  if(PACKETBUF_HDR_SIZE - hdrptr + buflen > PACKETBUF_SIZE) {
    /* Too large packet */
    return 0;
    be5e:	2500      	movs	r5, #0
  }
  memcpy(to, packetbuf + hdrptr, PACKETBUF_HDR_SIZE - hdrptr);
  memcpy((uint8_t *)to + PACKETBUF_HDR_SIZE - hdrptr, packetbufptr + bufptr,
	 buflen);
  return PACKETBUF_HDR_SIZE - hdrptr + buflen;
}
    be60:	1c28      	adds	r0, r5, #0
    be62:	b003      	add	sp, #12
    be64:	bdf0      	pop	{r4, r5, r6, r7, pc}
    be66:	46c0      	nop			; (mov r8, r8)
    be68:	20000ff4 	.word	0x20000ff4
    be6c:	20000ff6 	.word	0x20000ff6
    be70:	20000ff8 	.word	0x20000ff8
    be74:	000108e7 	.word	0x000108e7
    be78:	200010aa 	.word	0x200010aa
    be7c:	20000ff0 	.word	0x20000ff0

0000be80 <packetbuf_hdrreduce>:
  hdrptr += size;
}
/*---------------------------------------------------------------------------*/
int
packetbuf_hdrreduce(int size)
{
    be80:	1c03      	adds	r3, r0, #0
  if(buflen < size) {
    be82:	4a07      	ldr	r2, [pc, #28]	; (bea0 <packetbuf_hdrreduce+0x20>)
    be84:	8812      	ldrh	r2, [r2, #0]
    return 0;
    be86:	2000      	movs	r0, #0
}
/*---------------------------------------------------------------------------*/
int
packetbuf_hdrreduce(int size)
{
  if(buflen < size) {
    be88:	429a      	cmp	r2, r3
    be8a:	db08      	blt.n	be9e <packetbuf_hdrreduce+0x1e>
    return 0;
  }

  bufptr += size;
    be8c:	b29b      	uxth	r3, r3
    be8e:	4805      	ldr	r0, [pc, #20]	; (bea4 <packetbuf_hdrreduce+0x24>)
    be90:	8801      	ldrh	r1, [r0, #0]
    be92:	1859      	adds	r1, r3, r1
    be94:	8001      	strh	r1, [r0, #0]
  buflen -= size;
    be96:	1ad3      	subs	r3, r2, r3
    be98:	4a01      	ldr	r2, [pc, #4]	; (bea0 <packetbuf_hdrreduce+0x20>)
    be9a:	8013      	strh	r3, [r2, #0]
  return 1;
    be9c:	2001      	movs	r0, #1
}
    be9e:	4770      	bx	lr
    bea0:	20000ff6 	.word	0x20000ff6
    bea4:	200010aa 	.word	0x200010aa

0000bea8 <packetbuf_set_datalen>:
/*---------------------------------------------------------------------------*/
void
packetbuf_set_datalen(uint16_t len)
{
  PRINTF("packetbuf_set_len: len %d\n\r", len);
  buflen = len;
    bea8:	4b01      	ldr	r3, [pc, #4]	; (beb0 <packetbuf_set_datalen+0x8>)
    beaa:	8018      	strh	r0, [r3, #0]
}
    beac:	4770      	bx	lr
    beae:	46c0      	nop			; (mov r8, r8)
    beb0:	20000ff6 	.word	0x20000ff6

0000beb4 <packetbuf_dataptr>:
/*---------------------------------------------------------------------------*/
void *
packetbuf_dataptr(void)
{
  return (void *)(&packetbuf[bufptr + PACKETBUF_HDR_SIZE]);
    beb4:	4b02      	ldr	r3, [pc, #8]	; (bec0 <packetbuf_dataptr+0xc>)
    beb6:	8818      	ldrh	r0, [r3, #0]
    beb8:	3030      	adds	r0, #48	; 0x30
    beba:	4b02      	ldr	r3, [pc, #8]	; (bec4 <packetbuf_dataptr+0x10>)
    bebc:	1818      	adds	r0, r3, r0
}
    bebe:	4770      	bx	lr
    bec0:	200010aa 	.word	0x200010aa
    bec4:	20000ff8 	.word	0x20000ff8

0000bec8 <packetbuf_hdrptr>:
/*---------------------------------------------------------------------------*/
void *
packetbuf_hdrptr(void)
{
  return (void *)(&packetbuf[hdrptr]);
    bec8:	4b02      	ldr	r3, [pc, #8]	; (bed4 <packetbuf_hdrptr+0xc>)
    beca:	781b      	ldrb	r3, [r3, #0]
    becc:	4802      	ldr	r0, [pc, #8]	; (bed8 <packetbuf_hdrptr+0x10>)
    bece:	18c0      	adds	r0, r0, r3
}
    bed0:	4770      	bx	lr
    bed2:	46c0      	nop			; (mov r8, r8)
    bed4:	20000ff4 	.word	0x20000ff4
    bed8:	20000ff8 	.word	0x20000ff8

0000bedc <packetbuf_is_reference>:
}
/*---------------------------------------------------------------------------*/
int
packetbuf_is_reference(void)
{
  return packetbufptr != &packetbuf[PACKETBUF_HDR_SIZE];
    bedc:	4b03      	ldr	r3, [pc, #12]	; (beec <packetbuf_is_reference+0x10>)
    bede:	681b      	ldr	r3, [r3, #0]
    bee0:	4803      	ldr	r0, [pc, #12]	; (bef0 <packetbuf_is_reference+0x14>)
    bee2:	3030      	adds	r0, #48	; 0x30
    bee4:	1a18      	subs	r0, r3, r0
    bee6:	1e43      	subs	r3, r0, #1
    bee8:	4198      	sbcs	r0, r3
}
    beea:	4770      	bx	lr
    beec:	20000ff0 	.word	0x20000ff0
    bef0:	20000ff8 	.word	0x20000ff8

0000bef4 <packetbuf_reference_ptr>:
/*---------------------------------------------------------------------------*/
void *
packetbuf_reference_ptr(void)
{
  return packetbufptr;
    bef4:	4b01      	ldr	r3, [pc, #4]	; (befc <packetbuf_reference_ptr+0x8>)
    bef6:	6818      	ldr	r0, [r3, #0]
}
    bef8:	4770      	bx	lr
    befa:	46c0      	nop			; (mov r8, r8)
    befc:	20000ff0 	.word	0x20000ff0

0000bf00 <packetbuf_datalen>:
/*---------------------------------------------------------------------------*/
uint16_t
packetbuf_datalen(void)
{
  return buflen;
    bf00:	4b01      	ldr	r3, [pc, #4]	; (bf08 <packetbuf_datalen+0x8>)
    bf02:	8818      	ldrh	r0, [r3, #0]
}
    bf04:	4770      	bx	lr
    bf06:	46c0      	nop			; (mov r8, r8)
    bf08:	20000ff6 	.word	0x20000ff6

0000bf0c <packetbuf_totlen>:
/*---------------------------------------------------------------------------*/
uint8_t
packetbuf_hdrlen(void)
{
  return PACKETBUF_HDR_SIZE - hdrptr;
    bf0c:	4b04      	ldr	r3, [pc, #16]	; (bf20 <packetbuf_totlen+0x14>)
    bf0e:	7818      	ldrb	r0, [r3, #0]
    bf10:	2330      	movs	r3, #48	; 0x30
    bf12:	1a18      	subs	r0, r3, r0
}
/*---------------------------------------------------------------------------*/
uint16_t
packetbuf_totlen(void)
{
  return packetbuf_hdrlen() + packetbuf_datalen();
    bf14:	b2c0      	uxtb	r0, r0
}
/*---------------------------------------------------------------------------*/
uint16_t
packetbuf_datalen(void)
{
  return buflen;
    bf16:	4b03      	ldr	r3, [pc, #12]	; (bf24 <packetbuf_totlen+0x18>)
}
/*---------------------------------------------------------------------------*/
uint16_t
packetbuf_totlen(void)
{
  return packetbuf_hdrlen() + packetbuf_datalen();
    bf18:	881b      	ldrh	r3, [r3, #0]
    bf1a:	18c0      	adds	r0, r0, r3
    bf1c:	b280      	uxth	r0, r0
}
    bf1e:	4770      	bx	lr
    bf20:	20000ff4 	.word	0x20000ff4
    bf24:	20000ff6 	.word	0x20000ff6

0000bf28 <packetbuf_hdralloc>:
  return PACKETBUF_HDR_SIZE - hdrptr + buflen;
}
/*---------------------------------------------------------------------------*/
int
packetbuf_hdralloc(int size)
{
    bf28:	b538      	push	{r3, r4, r5, lr}
  if(hdrptr >= size && packetbuf_totlen() + size <= PACKETBUF_SIZE) {
    bf2a:	4b09      	ldr	r3, [pc, #36]	; (bf50 <packetbuf_hdralloc+0x28>)
    bf2c:	781d      	ldrb	r5, [r3, #0]
    hdrptr -= size;
    return 1;
  }
  return 0;
    bf2e:	2300      	movs	r3, #0
}
/*---------------------------------------------------------------------------*/
int
packetbuf_hdralloc(int size)
{
  if(hdrptr >= size && packetbuf_totlen() + size <= PACKETBUF_SIZE) {
    bf30:	4285      	cmp	r5, r0
    bf32:	db0a      	blt.n	bf4a <packetbuf_hdralloc+0x22>
    bf34:	1c04      	adds	r4, r0, #0
    bf36:	4b07      	ldr	r3, [pc, #28]	; (bf54 <packetbuf_hdralloc+0x2c>)
    bf38:	4798      	blx	r3
    bf3a:	1900      	adds	r0, r0, r4
    hdrptr -= size;
    return 1;
  }
  return 0;
    bf3c:	2300      	movs	r3, #0
}
/*---------------------------------------------------------------------------*/
int
packetbuf_hdralloc(int size)
{
  if(hdrptr >= size && packetbuf_totlen() + size <= PACKETBUF_SIZE) {
    bf3e:	2880      	cmp	r0, #128	; 0x80
    bf40:	dc03      	bgt.n	bf4a <packetbuf_hdralloc+0x22>
    hdrptr -= size;
    bf42:	1b28      	subs	r0, r5, r4
    bf44:	4b02      	ldr	r3, [pc, #8]	; (bf50 <packetbuf_hdralloc+0x28>)
    bf46:	7018      	strb	r0, [r3, #0]
    return 1;
    bf48:	2301      	movs	r3, #1
  }
  return 0;
}
    bf4a:	1c18      	adds	r0, r3, #0
    bf4c:	bd38      	pop	{r3, r4, r5, pc}
    bf4e:	46c0      	nop			; (mov r8, r8)
    bf50:	20000ff4 	.word	0x20000ff4
    bf54:	0000bf0d 	.word	0x0000bf0d

0000bf58 <packetbuf_attr_clear>:
  return packetbuf_hdrlen() + packetbuf_datalen();
}
/*---------------------------------------------------------------------------*/
void
packetbuf_attr_clear(void)
{
    bf58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    bf5a:	4b09      	ldr	r3, [pc, #36]	; (bf80 <packetbuf_attr_clear+0x28>)
    bf5c:	1c19      	adds	r1, r3, #0
    bf5e:	3138      	adds	r1, #56	; 0x38
  int i;
  for(i = 0; i < PACKETBUF_NUM_ATTRS; ++i) {
    packetbuf_attrs[i].val = 0;
    bf60:	2200      	movs	r2, #0
    bf62:	801a      	strh	r2, [r3, #0]
    bf64:	3302      	adds	r3, #2
/*---------------------------------------------------------------------------*/
void
packetbuf_attr_clear(void)
{
  int i;
  for(i = 0; i < PACKETBUF_NUM_ATTRS; ++i) {
    bf66:	428b      	cmp	r3, r1
    bf68:	d1fb      	bne.n	bf62 <packetbuf_attr_clear+0xa>
    bf6a:	2400      	movs	r4, #0
    bf6c:	4f05      	ldr	r7, [pc, #20]	; (bf84 <packetbuf_attr_clear+0x2c>)
    packetbuf_attrs[i].val = 0;
  }
  for(i = 0; i < PACKETBUF_NUM_ADDRS; ++i) {
    linkaddr_copy(&packetbuf_addrs[i].addr, &linkaddr_null);
    bf6e:	4e06      	ldr	r6, [pc, #24]	; (bf88 <packetbuf_attr_clear+0x30>)
    bf70:	4d06      	ldr	r5, [pc, #24]	; (bf8c <packetbuf_attr_clear+0x34>)
    bf72:	19e0      	adds	r0, r4, r7
    bf74:	1c31      	adds	r1, r6, #0
    bf76:	47a8      	blx	r5
    bf78:	3408      	adds	r4, #8
{
  int i;
  for(i = 0; i < PACKETBUF_NUM_ATTRS; ++i) {
    packetbuf_attrs[i].val = 0;
  }
  for(i = 0; i < PACKETBUF_NUM_ADDRS; ++i) {
    bf7a:	2c20      	cmp	r4, #32
    bf7c:	d1f9      	bne.n	bf72 <packetbuf_attr_clear+0x1a>
    linkaddr_copy(&packetbuf_addrs[i].addr, &linkaddr_null);
  }
}
    bf7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    bf80:	200031f8 	.word	0x200031f8
    bf84:	200031d8 	.word	0x200031d8
    bf88:	00012be8 	.word	0x00012be8
    bf8c:	0000ac5d 	.word	0x0000ac5d

0000bf90 <packetbuf_clear>:
#endif

/*---------------------------------------------------------------------------*/
void
packetbuf_clear(void)
{
    bf90:	b508      	push	{r3, lr}
  buflen = bufptr = 0;
    bf92:	2300      	movs	r3, #0
    bf94:	4a06      	ldr	r2, [pc, #24]	; (bfb0 <packetbuf_clear+0x20>)
    bf96:	8013      	strh	r3, [r2, #0]
    bf98:	4a06      	ldr	r2, [pc, #24]	; (bfb4 <packetbuf_clear+0x24>)
    bf9a:	8013      	strh	r3, [r2, #0]
  hdrptr = PACKETBUF_HDR_SIZE;
    bf9c:	2230      	movs	r2, #48	; 0x30
    bf9e:	4b06      	ldr	r3, [pc, #24]	; (bfb8 <packetbuf_clear+0x28>)
    bfa0:	701a      	strb	r2, [r3, #0]

  packetbufptr = &packetbuf[PACKETBUF_HDR_SIZE];
    bfa2:	4b06      	ldr	r3, [pc, #24]	; (bfbc <packetbuf_clear+0x2c>)
    bfa4:	3330      	adds	r3, #48	; 0x30
    bfa6:	4a06      	ldr	r2, [pc, #24]	; (bfc0 <packetbuf_clear+0x30>)
    bfa8:	6013      	str	r3, [r2, #0]
  packetbuf_attr_clear();
    bfaa:	4b06      	ldr	r3, [pc, #24]	; (bfc4 <packetbuf_clear+0x34>)
    bfac:	4798      	blx	r3
}
    bfae:	bd08      	pop	{r3, pc}
    bfb0:	200010aa 	.word	0x200010aa
    bfb4:	20000ff6 	.word	0x20000ff6
    bfb8:	20000ff4 	.word	0x20000ff4
    bfbc:	20000ff8 	.word	0x20000ff8
    bfc0:	20000ff0 	.word	0x20000ff0
    bfc4:	0000bf59 	.word	0x0000bf59

0000bfc8 <packetbuf_copyfrom>:
  hdrptr = PACKETBUF_HDR_SIZE;
}
/*---------------------------------------------------------------------------*/
int
packetbuf_copyfrom(const void *from, uint16_t len)
{
    bfc8:	b570      	push	{r4, r5, r6, lr}
    bfca:	1c06      	adds	r6, r0, #0
    bfcc:	1c0d      	adds	r5, r1, #0
  uint16_t l;

  packetbuf_clear();
    bfce:	4b08      	ldr	r3, [pc, #32]	; (bff0 <packetbuf_copyfrom+0x28>)
    bfd0:	4798      	blx	r3
  l = len > PACKETBUF_SIZE? PACKETBUF_SIZE: len;
    bfd2:	1c2c      	adds	r4, r5, #0
    bfd4:	2d80      	cmp	r5, #128	; 0x80
    bfd6:	d900      	bls.n	bfda <packetbuf_copyfrom+0x12>
    bfd8:	2480      	movs	r4, #128	; 0x80
    bfda:	b2a5      	uxth	r5, r4
  memcpy(packetbufptr, from, l);
    bfdc:	4b05      	ldr	r3, [pc, #20]	; (bff4 <packetbuf_copyfrom+0x2c>)
    bfde:	6818      	ldr	r0, [r3, #0]
    bfe0:	1c31      	adds	r1, r6, #0
    bfe2:	1c2a      	adds	r2, r5, #0
    bfe4:	4b04      	ldr	r3, [pc, #16]	; (bff8 <packetbuf_copyfrom+0x30>)
    bfe6:	4798      	blx	r3
  buflen = l;
    bfe8:	4b04      	ldr	r3, [pc, #16]	; (bffc <packetbuf_copyfrom+0x34>)
    bfea:	801c      	strh	r4, [r3, #0]
  return l;
}
    bfec:	1c28      	adds	r0, r5, #0
    bfee:	bd70      	pop	{r4, r5, r6, pc}
    bff0:	0000bf91 	.word	0x0000bf91
    bff4:	20000ff0 	.word	0x20000ff0
    bff8:	000108e7 	.word	0x000108e7
    bffc:	20000ff6 	.word	0x20000ff6

0000c000 <packetbuf_attr_copyto>:
}
/*---------------------------------------------------------------------------*/
void
packetbuf_attr_copyto(struct packetbuf_attr *attrs,
		    struct packetbuf_addr *addrs)
{
    c000:	b538      	push	{r3, r4, r5, lr}
    c002:	1c0d      	adds	r5, r1, #0
  memcpy(attrs, packetbuf_attrs, sizeof(packetbuf_attrs));
    c004:	4904      	ldr	r1, [pc, #16]	; (c018 <packetbuf_attr_copyto+0x18>)
    c006:	2238      	movs	r2, #56	; 0x38
    c008:	4c04      	ldr	r4, [pc, #16]	; (c01c <packetbuf_attr_copyto+0x1c>)
    c00a:	47a0      	blx	r4
  memcpy(addrs, packetbuf_addrs, sizeof(packetbuf_addrs));
    c00c:	1c28      	adds	r0, r5, #0
    c00e:	4904      	ldr	r1, [pc, #16]	; (c020 <packetbuf_attr_copyto+0x20>)
    c010:	2220      	movs	r2, #32
    c012:	47a0      	blx	r4
}
    c014:	bd38      	pop	{r3, r4, r5, pc}
    c016:	46c0      	nop			; (mov r8, r8)
    c018:	200031f8 	.word	0x200031f8
    c01c:	000108e7 	.word	0x000108e7
    c020:	200031d8 	.word	0x200031d8

0000c024 <packetbuf_attr_copyfrom>:
/*---------------------------------------------------------------------------*/
void
packetbuf_attr_copyfrom(struct packetbuf_attr *attrs,
		      struct packetbuf_addr *addrs)
{
    c024:	b538      	push	{r3, r4, r5, lr}
    c026:	1c03      	adds	r3, r0, #0
    c028:	1c0d      	adds	r5, r1, #0
  memcpy(packetbuf_attrs, attrs, sizeof(packetbuf_attrs));
    c02a:	4805      	ldr	r0, [pc, #20]	; (c040 <packetbuf_attr_copyfrom+0x1c>)
    c02c:	1c19      	adds	r1, r3, #0
    c02e:	2238      	movs	r2, #56	; 0x38
    c030:	4c04      	ldr	r4, [pc, #16]	; (c044 <packetbuf_attr_copyfrom+0x20>)
    c032:	47a0      	blx	r4
  memcpy(packetbuf_addrs, addrs, sizeof(packetbuf_addrs));
    c034:	4804      	ldr	r0, [pc, #16]	; (c048 <packetbuf_attr_copyfrom+0x24>)
    c036:	1c29      	adds	r1, r5, #0
    c038:	2220      	movs	r2, #32
    c03a:	47a0      	blx	r4
}
    c03c:	bd38      	pop	{r3, r4, r5, pc}
    c03e:	46c0      	nop			; (mov r8, r8)
    c040:	200031f8 	.word	0x200031f8
    c044:	000108e7 	.word	0x000108e7
    c048:	200031d8 	.word	0x200031d8

0000c04c <queuebuf_init>:
}
#endif /* WITH_SWAP */
/*---------------------------------------------------------------------------*/
void
queuebuf_init(void)
{
    c04c:	b510      	push	{r4, lr}
  for(i=0; i<NQBUF_FILES; i++) {
    qbuf_files[i].renewable = 1;
    qbuf_renew_file(i);
  }
#endif
  memb_init(&buframmem);
    c04e:	4804      	ldr	r0, [pc, #16]	; (c060 <queuebuf_init+0x14>)
    c050:	4c04      	ldr	r4, [pc, #16]	; (c064 <queuebuf_init+0x18>)
    c052:	47a0      	blx	r4
  memb_init(&bufmem);
    c054:	4804      	ldr	r0, [pc, #16]	; (c068 <queuebuf_init+0x1c>)
    c056:	47a0      	blx	r4
  memb_init(&refbufmem);
    c058:	4804      	ldr	r0, [pc, #16]	; (c06c <queuebuf_init+0x20>)
    c05a:	47a0      	blx	r4
#if QUEUEBUF_STATS
  queuebuf_max_len = QUEUEBUF_NUM;
#endif /* QUEUEBUF_STATS */
}
    c05c:	bd10      	pop	{r4, pc}
    c05e:	46c0      	nop			; (mov r8, r8)
    c060:	20000118 	.word	0x20000118
    c064:	000057bd 	.word	0x000057bd
    c068:	20000100 	.word	0x20000100
    c06c:	2000010c 	.word	0x2000010c

0000c070 <queuebuf_new_from_packetbuf>:
queuebuf_new_from_packetbuf_debug(const char *file, int line)
#else /* QUEUEBUF_DEBUG */
struct queuebuf *
queuebuf_new_from_packetbuf(void)
#endif /* QUEUEBUF_DEBUG */
{
    c070:	b538      	push	{r3, r4, r5, lr}
  struct queuebuf *buf;
  struct queuebuf_ref *rbuf;

  if(packetbuf_is_reference()) {
    c072:	4b1d      	ldr	r3, [pc, #116]	; (c0e8 <queuebuf_new_from_packetbuf+0x78>)
    c074:	4798      	blx	r3
    c076:	2800      	cmp	r0, #0
    c078:	d012      	beq.n	c0a0 <queuebuf_new_from_packetbuf+0x30>
    rbuf = memb_alloc(&refbufmem);
    c07a:	481c      	ldr	r0, [pc, #112]	; (c0ec <queuebuf_new_from_packetbuf+0x7c>)
    c07c:	4b1c      	ldr	r3, [pc, #112]	; (c0f0 <queuebuf_new_from_packetbuf+0x80>)
    c07e:	4798      	blx	r3
    c080:	1e04      	subs	r4, r0, #0
    if(rbuf != NULL) {
    c082:	d02a      	beq.n	c0da <queuebuf_new_from_packetbuf+0x6a>
#if QUEUEBUF_STATS
      ++queuebuf_ref_len;
#endif /* QUEUEBUF_STATS */
      rbuf->len = packetbuf_datalen();
    c084:	4b1b      	ldr	r3, [pc, #108]	; (c0f4 <queuebuf_new_from_packetbuf+0x84>)
    c086:	4798      	blx	r3
    c088:	8020      	strh	r0, [r4, #0]
      rbuf->ref = packetbuf_reference_ptr();
    c08a:	4b1b      	ldr	r3, [pc, #108]	; (c0f8 <queuebuf_new_from_packetbuf+0x88>)
    c08c:	4798      	blx	r3
    c08e:	6060      	str	r0, [r4, #4]
      rbuf->hdrlen = packetbuf_copyto_hdr(rbuf->hdr);
    c090:	1c20      	adds	r0, r4, #0
    c092:	3008      	adds	r0, #8
    c094:	4b19      	ldr	r3, [pc, #100]	; (c0fc <queuebuf_new_from_packetbuf+0x8c>)
    c096:	4798      	blx	r3
    c098:	2338      	movs	r3, #56	; 0x38
    c09a:	54e0      	strb	r0, [r4, r3]
    } else {
      PRINTF("queuebuf_new_from_packetbuf: could not allocate a reference queuebuf\n\r");
    }
    return (struct queuebuf *)rbuf;
    c09c:	1c20      	adds	r0, r4, #0
    c09e:	e022      	b.n	c0e6 <queuebuf_new_from_packetbuf+0x76>
  } else {
    struct queuebuf_data *buframptr;
    buf = memb_alloc(&bufmem);
    c0a0:	4817      	ldr	r0, [pc, #92]	; (c100 <queuebuf_new_from_packetbuf+0x90>)
    c0a2:	4b13      	ldr	r3, [pc, #76]	; (c0f0 <queuebuf_new_from_packetbuf+0x80>)
    c0a4:	4798      	blx	r3
    c0a6:	1e04      	subs	r4, r0, #0
    if(buf != NULL) {
    c0a8:	d018      	beq.n	c0dc <queuebuf_new_from_packetbuf+0x6c>
      list_add(queuebuf_list, buf);
      buf->file = file;
      buf->line = line;
      buf->time = clock_time();
#endif /* QUEUEBUF_DEBUG */
      buf->ram_ptr = memb_alloc(&buframmem);
    c0aa:	4816      	ldr	r0, [pc, #88]	; (c104 <queuebuf_new_from_packetbuf+0x94>)
    c0ac:	4b10      	ldr	r3, [pc, #64]	; (c0f0 <queuebuf_new_from_packetbuf+0x80>)
    c0ae:	4798      	blx	r3
    c0b0:	1e05      	subs	r5, r0, #0
    c0b2:	6020      	str	r0, [r4, #0]
        buf->swap_id = -1;
        tmpdata_qbuf = buf;
        buframptr = &tmpdata;
      }
#else
      if(buf->ram_ptr == NULL) {
    c0b4:	d105      	bne.n	c0c2 <queuebuf_new_from_packetbuf+0x52>
        PRINTF("queuebuf_new_from_packetbuf: could not queuebuf data\n\r");
        RIMESTATS_ADD(queuebuf_outofbuf);
    c0b6:	4a14      	ldr	r2, [pc, #80]	; (c108 <queuebuf_new_from_packetbuf+0x98>)
    c0b8:	6c93      	ldr	r3, [r2, #72]	; 0x48
    c0ba:	3301      	adds	r3, #1
    c0bc:	6493      	str	r3, [r2, #72]	; 0x48
        return NULL;
    c0be:	2000      	movs	r0, #0
    c0c0:	e011      	b.n	c0e6 <queuebuf_new_from_packetbuf+0x76>
      }
      buframptr = buf->ram_ptr;
#endif

      buframptr->len = packetbuf_copyto(buframptr->data);
    c0c2:	3002      	adds	r0, #2
    c0c4:	4b11      	ldr	r3, [pc, #68]	; (c10c <queuebuf_new_from_packetbuf+0x9c>)
    c0c6:	4798      	blx	r3
    c0c8:	8028      	strh	r0, [r5, #0]
      packetbuf_attr_copyto(buframptr->attrs, buframptr->addrs);
    c0ca:	1c28      	adds	r0, r5, #0
    c0cc:	3082      	adds	r0, #130	; 0x82
    c0ce:	1c29      	adds	r1, r5, #0
    c0d0:	31ba      	adds	r1, #186	; 0xba
    c0d2:	4b0f      	ldr	r3, [pc, #60]	; (c110 <queuebuf_new_from_packetbuf+0xa0>)
    c0d4:	4798      	blx	r3
      PRINTF("queuebuf_new_from_packetbuf: could not allocate a queuebuf\n\r");
    }
    if(buf == NULL) {
      RIMESTATS_ADD(queuebuf_outofbuf);
    }
    return buf;
    c0d6:	1c20      	adds	r0, r4, #0
    c0d8:	e005      	b.n	c0e6 <queuebuf_new_from_packetbuf+0x76>
    c0da:	e004      	b.n	c0e6 <queuebuf_new_from_packetbuf+0x76>

    } else {
      PRINTF("queuebuf_new_from_packetbuf: could not allocate a queuebuf\n\r");
    }
    if(buf == NULL) {
      RIMESTATS_ADD(queuebuf_outofbuf);
    c0dc:	4a0a      	ldr	r2, [pc, #40]	; (c108 <queuebuf_new_from_packetbuf+0x98>)
    c0de:	6c93      	ldr	r3, [r2, #72]	; 0x48
    c0e0:	3301      	adds	r3, #1
    c0e2:	6493      	str	r3, [r2, #72]	; 0x48
    }
    return buf;
    c0e4:	2000      	movs	r0, #0
  }
}
    c0e6:	bd38      	pop	{r3, r4, r5, pc}
    c0e8:	0000bedd 	.word	0x0000bedd
    c0ec:	2000010c 	.word	0x2000010c
    c0f0:	000057dd 	.word	0x000057dd
    c0f4:	0000bf01 	.word	0x0000bf01
    c0f8:	0000bef5 	.word	0x0000bef5
    c0fc:	0000be05 	.word	0x0000be05
    c100:	20000100 	.word	0x20000100
    c104:	20000118 	.word	0x20000118
    c108:	20003230 	.word	0x20003230
    c10c:	0000be29 	.word	0x0000be29
    c110:	0000c001 	.word	0x0000c001

0000c114 <queuebuf_update_attr_from_packetbuf>:
/*---------------------------------------------------------------------------*/
void
queuebuf_update_attr_from_packetbuf(struct queuebuf *buf)
{
    c114:	b508      	push	{r3, lr}
#else /* WITH_SWAP */
/*---------------------------------------------------------------------------*/
static struct queuebuf_data *
queuebuf_load_to_ram(struct queuebuf *b)
{
  return b->ram_ptr;
    c116:	6801      	ldr	r1, [r0, #0]
/*---------------------------------------------------------------------------*/
void
queuebuf_update_attr_from_packetbuf(struct queuebuf *buf)
{
  struct queuebuf_data *buframptr = queuebuf_load_to_ram(buf);
  packetbuf_attr_copyto(buframptr->attrs, buframptr->addrs);
    c118:	1c08      	adds	r0, r1, #0
    c11a:	3082      	adds	r0, #130	; 0x82
    c11c:	31ba      	adds	r1, #186	; 0xba
    c11e:	4b01      	ldr	r3, [pc, #4]	; (c124 <queuebuf_update_attr_from_packetbuf+0x10>)
    c120:	4798      	blx	r3
#if WITH_SWAP
  if(buf->location == IN_CFS) {
    queuebuf_flush_tmpdata();
  }
#endif
}
    c122:	bd08      	pop	{r3, pc}
    c124:	0000c001 	.word	0x0000c001

0000c128 <queuebuf_free>:
/*---------------------------------------------------------------------------*/
void
queuebuf_free(struct queuebuf *buf)
{
    c128:	b538      	push	{r3, r4, r5, lr}
    c12a:	1c04      	adds	r4, r0, #0
  if(memb_inmemb(&bufmem, buf)) {
    c12c:	480c      	ldr	r0, [pc, #48]	; (c160 <queuebuf_free+0x38>)
    c12e:	1c21      	adds	r1, r4, #0
    c130:	4b0c      	ldr	r3, [pc, #48]	; (c164 <queuebuf_free+0x3c>)
    c132:	4798      	blx	r3
    c134:	2800      	cmp	r0, #0
    c136:	d007      	beq.n	c148 <queuebuf_free+0x20>
      memb_free(&buframmem, buf->ram_ptr);
    } else {
      queuebuf_remove_from_file(buf->swap_id);
    }
#else
    memb_free(&buframmem, buf->ram_ptr);
    c138:	480b      	ldr	r0, [pc, #44]	; (c168 <queuebuf_free+0x40>)
    c13a:	6821      	ldr	r1, [r4, #0]
    c13c:	4d0b      	ldr	r5, [pc, #44]	; (c16c <queuebuf_free+0x44>)
    c13e:	47a8      	blx	r5
#endif
    memb_free(&bufmem, buf);
    c140:	4807      	ldr	r0, [pc, #28]	; (c160 <queuebuf_free+0x38>)
    c142:	1c21      	adds	r1, r4, #0
    c144:	47a8      	blx	r5
    c146:	e009      	b.n	c15c <queuebuf_free+0x34>
    printf("#A q=%d\n\r", queuebuf_len);
#endif /* QUEUEBUF_STATS */
#if QUEUEBUF_DEBUG
    list_remove(queuebuf_list, buf);
#endif /* QUEUEBUF_DEBUG */
  } else if(memb_inmemb(&refbufmem, buf)) {
    c148:	4809      	ldr	r0, [pc, #36]	; (c170 <queuebuf_free+0x48>)
    c14a:	1c21      	adds	r1, r4, #0
    c14c:	4b05      	ldr	r3, [pc, #20]	; (c164 <queuebuf_free+0x3c>)
    c14e:	4798      	blx	r3
    c150:	2800      	cmp	r0, #0
    c152:	d003      	beq.n	c15c <queuebuf_free+0x34>
    memb_free(&refbufmem, buf);
    c154:	4806      	ldr	r0, [pc, #24]	; (c170 <queuebuf_free+0x48>)
    c156:	1c21      	adds	r1, r4, #0
    c158:	4b04      	ldr	r3, [pc, #16]	; (c16c <queuebuf_free+0x44>)
    c15a:	4798      	blx	r3
#if QUEUEBUF_STATS
    --queuebuf_ref_len;
#endif /* QUEUEBUF_STATS */
  }
}
    c15c:	bd38      	pop	{r3, r4, r5, pc}
    c15e:	46c0      	nop			; (mov r8, r8)
    c160:	20000100 	.word	0x20000100
    c164:	0000586d 	.word	0x0000586d
    c168:	20000118 	.word	0x20000118
    c16c:	00005821 	.word	0x00005821
    c170:	2000010c 	.word	0x2000010c

0000c174 <queuebuf_to_packetbuf>:
/*---------------------------------------------------------------------------*/
void
queuebuf_to_packetbuf(struct queuebuf *b)
{
    c174:	b538      	push	{r3, r4, r5, lr}
    c176:	1c04      	adds	r4, r0, #0
  struct queuebuf_ref *r;
  if(memb_inmemb(&bufmem, b)) {
    c178:	4814      	ldr	r0, [pc, #80]	; (c1cc <queuebuf_to_packetbuf+0x58>)
    c17a:	1c21      	adds	r1, r4, #0
    c17c:	4b14      	ldr	r3, [pc, #80]	; (c1d0 <queuebuf_to_packetbuf+0x5c>)
    c17e:	4798      	blx	r3
    c180:	2800      	cmp	r0, #0
    c182:	d00b      	beq.n	c19c <queuebuf_to_packetbuf+0x28>
#else /* WITH_SWAP */
/*---------------------------------------------------------------------------*/
static struct queuebuf_data *
queuebuf_load_to_ram(struct queuebuf *b)
{
  return b->ram_ptr;
    c184:	6824      	ldr	r4, [r4, #0]
queuebuf_to_packetbuf(struct queuebuf *b)
{
  struct queuebuf_ref *r;
  if(memb_inmemb(&bufmem, b)) {
    struct queuebuf_data *buframptr = queuebuf_load_to_ram(b);
    packetbuf_copyfrom(buframptr->data, buframptr->len);
    c186:	1ca0      	adds	r0, r4, #2
    c188:	8821      	ldrh	r1, [r4, #0]
    c18a:	4b12      	ldr	r3, [pc, #72]	; (c1d4 <queuebuf_to_packetbuf+0x60>)
    c18c:	4798      	blx	r3
    packetbuf_attr_copyfrom(buframptr->attrs, buframptr->addrs);
    c18e:	1c20      	adds	r0, r4, #0
    c190:	3082      	adds	r0, #130	; 0x82
    c192:	1c21      	adds	r1, r4, #0
    c194:	31ba      	adds	r1, #186	; 0xba
    c196:	4b10      	ldr	r3, [pc, #64]	; (c1d8 <queuebuf_to_packetbuf+0x64>)
    c198:	4798      	blx	r3
    c19a:	e016      	b.n	c1ca <queuebuf_to_packetbuf+0x56>
  } else if(memb_inmemb(&refbufmem, b)) {
    c19c:	480f      	ldr	r0, [pc, #60]	; (c1dc <queuebuf_to_packetbuf+0x68>)
    c19e:	1c21      	adds	r1, r4, #0
    c1a0:	4b0b      	ldr	r3, [pc, #44]	; (c1d0 <queuebuf_to_packetbuf+0x5c>)
    c1a2:	4798      	blx	r3
    c1a4:	2800      	cmp	r0, #0
    c1a6:	d010      	beq.n	c1ca <queuebuf_to_packetbuf+0x56>
    r = (struct queuebuf_ref *)b;
    packetbuf_clear();
    c1a8:	4b0d      	ldr	r3, [pc, #52]	; (c1e0 <queuebuf_to_packetbuf+0x6c>)
    c1aa:	4798      	blx	r3
    packetbuf_copyfrom(r->ref, r->len);
    c1ac:	8821      	ldrh	r1, [r4, #0]
    c1ae:	6860      	ldr	r0, [r4, #4]
    c1b0:	4b08      	ldr	r3, [pc, #32]	; (c1d4 <queuebuf_to_packetbuf+0x60>)
    c1b2:	4798      	blx	r3
    packetbuf_hdralloc(r->hdrlen);
    c1b4:	2538      	movs	r5, #56	; 0x38
    c1b6:	5d60      	ldrb	r0, [r4, r5]
    c1b8:	4b0a      	ldr	r3, [pc, #40]	; (c1e4 <queuebuf_to_packetbuf+0x70>)
    c1ba:	4798      	blx	r3
    memcpy(packetbuf_hdrptr(), r->hdr, r->hdrlen);
    c1bc:	4b0a      	ldr	r3, [pc, #40]	; (c1e8 <queuebuf_to_packetbuf+0x74>)
    c1be:	4798      	blx	r3
    c1c0:	5d62      	ldrb	r2, [r4, r5]
    c1c2:	1c21      	adds	r1, r4, #0
    c1c4:	3108      	adds	r1, #8
    c1c6:	4b09      	ldr	r3, [pc, #36]	; (c1ec <queuebuf_to_packetbuf+0x78>)
    c1c8:	4798      	blx	r3
  }
}
    c1ca:	bd38      	pop	{r3, r4, r5, pc}
    c1cc:	20000100 	.word	0x20000100
    c1d0:	0000586d 	.word	0x0000586d
    c1d4:	0000bfc9 	.word	0x0000bfc9
    c1d8:	0000c025 	.word	0x0000c025
    c1dc:	2000010c 	.word	0x2000010c
    c1e0:	0000bf91 	.word	0x0000bf91
    c1e4:	0000bf29 	.word	0x0000bf29
    c1e8:	0000bec9 	.word	0x0000bec9
    c1ec:	000108e7 	.word	0x000108e7

0000c1f0 <queuebuf_attr>:
/*---------------------------------------------------------------------------*/
packetbuf_attr_t
queuebuf_attr(struct queuebuf *b, uint8_t type)
{
  struct queuebuf_data *buframptr = queuebuf_load_to_ram(b);
  return buframptr->attrs[type].val;
    c1f0:	6803      	ldr	r3, [r0, #0]
    c1f2:	3140      	adds	r1, #64	; 0x40
    c1f4:	0049      	lsls	r1, r1, #1
    c1f6:	1859      	adds	r1, r3, r1
    c1f8:	8848      	ldrh	r0, [r1, #2]
}
    c1fa:	4770      	bx	lr

0000c1fc <lollipop_greater_than>:
/*---------------------------------------------------------------------------*/
static int
lollipop_greater_than(int a, int b)
{
  /* Check if we are comparing an initial value with an old value */
  if(a > RPL_LOLLIPOP_CIRCULAR_REGION && b <= RPL_LOLLIPOP_CIRCULAR_REGION) {
    c1fc:	287f      	cmp	r0, #127	; 0x7f
    c1fe:	dd09      	ble.n	c214 <lollipop_greater_than+0x18>
    c200:	297f      	cmp	r1, #127	; 0x7f
    c202:	dc07      	bgt.n	c214 <lollipop_greater_than+0x18>
    return (RPL_LOLLIPOP_MAX_VALUE + 1 + b - a) > RPL_LOLLIPOP_SEQUENCE_WINDOWS;
    c204:	3101      	adds	r1, #1
    c206:	31ff      	adds	r1, #255	; 0xff
    c208:	1a09      	subs	r1, r1, r0
    c20a:	2301      	movs	r3, #1
    c20c:	2910      	cmp	r1, #16
    c20e:	dc0f      	bgt.n	c230 <lollipop_greater_than+0x34>
    c210:	2300      	movs	r3, #0
    c212:	e00d      	b.n	c230 <lollipop_greater_than+0x34>
  }
  /* Otherwise check if a > b and comparable => ok, or
     if they have wrapped and are still comparable */
  return (a > b && (a - b) < RPL_LOLLIPOP_SEQUENCE_WINDOWS) ||
    c214:	4288      	cmp	r0, r1
    c216:	dd03      	ble.n	c220 <lollipop_greater_than+0x24>
    c218:	1a42      	subs	r2, r0, r1
    c21a:	2301      	movs	r3, #1
    c21c:	2a0f      	cmp	r2, #15
    c21e:	dd07      	ble.n	c230 <lollipop_greater_than+0x34>
    c220:	2300      	movs	r3, #0
    c222:	4288      	cmp	r0, r1
    c224:	da04      	bge.n	c230 <lollipop_greater_than+0x34>
    (a < b && (b - a) > (RPL_LOLLIPOP_CIRCULAR_REGION + 1-
    c226:	1a09      	subs	r1, r1, r0
    c228:	3301      	adds	r3, #1
    c22a:	2970      	cmp	r1, #112	; 0x70
    c22c:	dc00      	bgt.n	c230 <lollipop_greater_than+0x34>
    c22e:	2300      	movs	r3, #0
			 RPL_LOLLIPOP_SEQUENCE_WINDOWS));
}
    c230:	1c18      	adds	r0, r3, #0
    c232:	4770      	bx	lr

0000c234 <rpl_set_preferred_parent>:
  return uip_ds6_nbr_ipaddr_from_lladdr((uip_lladdr_t *)lladdr);
}
/*---------------------------------------------------------------------------*/
static void
rpl_set_preferred_parent(rpl_dag_t *dag, rpl_parent_t *p)
{
    c234:	b570      	push	{r4, r5, r6, lr}
    c236:	1c0b      	adds	r3, r1, #0
  if(dag != NULL && dag->preferred_parent != p) {
    c238:	2800      	cmp	r0, #0
    c23a:	d00d      	beq.n	c258 <rpl_set_preferred_parent+0x24>
    c23c:	6981      	ldr	r1, [r0, #24]
    c23e:	4299      	cmp	r1, r3
    c240:	d00a      	beq.n	c258 <rpl_set_preferred_parent+0x24>
    c242:	1c1d      	adds	r5, r3, #0
    c244:	1c04      	adds	r4, r0, #0
    }
    PRINTF("\n\r");

    /* Always keep the preferred parent locked, so it remains in the
     * neighbor table. */
    nbr_table_unlock(rpl_parents, dag->preferred_parent);
    c246:	4e05      	ldr	r6, [pc, #20]	; (c25c <rpl_set_preferred_parent+0x28>)
    c248:	1c30      	adds	r0, r6, #0
    c24a:	4b05      	ldr	r3, [pc, #20]	; (c260 <rpl_set_preferred_parent+0x2c>)
    c24c:	4798      	blx	r3
    nbr_table_lock(rpl_parents, p);
    c24e:	1c30      	adds	r0, r6, #0
    c250:	1c29      	adds	r1, r5, #0
    c252:	4b04      	ldr	r3, [pc, #16]	; (c264 <rpl_set_preferred_parent+0x30>)
    c254:	4798      	blx	r3
    dag->preferred_parent = p;
    c256:	61a5      	str	r5, [r4, #24]
  }
}
    c258:	bd70      	pop	{r4, r5, r6, pc}
    c25a:	46c0      	nop			; (mov r8, r8)
    c25c:	20000124 	.word	0x20000124
    c260:	0000bd91 	.word	0x0000bd91
    c264:	0000bd75 	.word	0x0000bd75

0000c268 <set_ip_from_prefix>:
  return 1;
}
/*---------------------------------------------------------------------------*/
static void
set_ip_from_prefix(uip_ipaddr_t *ipaddr, rpl_prefix_t *prefix)
{
    c268:	b538      	push	{r3, r4, r5, lr}
    c26a:	1c04      	adds	r4, r0, #0
    c26c:	1c0d      	adds	r5, r1, #0
  memset(ipaddr, 0, sizeof(uip_ipaddr_t));
    c26e:	2100      	movs	r1, #0
    c270:	2210      	movs	r2, #16
    c272:	4b07      	ldr	r3, [pc, #28]	; (c290 <set_ip_from_prefix+0x28>)
    c274:	4798      	blx	r3
  memcpy(ipaddr, &prefix->prefix, (prefix->length + 7) / 8);
    c276:	7d2a      	ldrb	r2, [r5, #20]
    c278:	3207      	adds	r2, #7
    c27a:	10d2      	asrs	r2, r2, #3
    c27c:	1c20      	adds	r0, r4, #0
    c27e:	1c29      	adds	r1, r5, #0
    c280:	4b04      	ldr	r3, [pc, #16]	; (c294 <set_ip_from_prefix+0x2c>)
    c282:	4798      	blx	r3
  uip_ds6_set_addr_iid(ipaddr, &uip_lladdr);
    c284:	1c20      	adds	r0, r4, #0
    c286:	4904      	ldr	r1, [pc, #16]	; (c298 <set_ip_from_prefix+0x30>)
    c288:	4b04      	ldr	r3, [pc, #16]	; (c29c <set_ip_from_prefix+0x34>)
    c28a:	4798      	blx	r3
}
    c28c:	bd38      	pop	{r3, r4, r5, pc}
    c28e:	46c0      	nop			; (mov r8, r8)
    c290:	00010921 	.word	0x00010921
    c294:	000108e7 	.word	0x000108e7
    c298:	20002ccc 	.word	0x20002ccc
    c29c:	00007695 	.word	0x00007695

0000c2a0 <check_prefix>:
/*---------------------------------------------------------------------------*/
static void
check_prefix(rpl_prefix_t *last_prefix, rpl_prefix_t *new_prefix)
{
    c2a0:	b530      	push	{r4, r5, lr}
    c2a2:	b085      	sub	sp, #20
    c2a4:	1c05      	adds	r5, r0, #0
    c2a6:	1c0c      	adds	r4, r1, #0
  uip_ipaddr_t ipaddr;
  uip_ds6_addr_t *rep;

  if(last_prefix != NULL && new_prefix != NULL &&
    c2a8:	2800      	cmp	r0, #0
    c2aa:	d011      	beq.n	c2d0 <check_prefix+0x30>
    c2ac:	2900      	cmp	r1, #0
    c2ae:	d02a      	beq.n	c306 <check_prefix+0x66>
     last_prefix->length == new_prefix->length &&
    c2b0:	7d02      	ldrb	r2, [r0, #20]
check_prefix(rpl_prefix_t *last_prefix, rpl_prefix_t *new_prefix)
{
  uip_ipaddr_t ipaddr;
  uip_ds6_addr_t *rep;

  if(last_prefix != NULL && new_prefix != NULL &&
    c2b2:	7d0b      	ldrb	r3, [r1, #20]
    c2b4:	4293      	cmp	r3, r2
    c2b6:	d11c      	bne.n	c2f2 <check_prefix+0x52>
     last_prefix->length == new_prefix->length &&
     uip_ipaddr_prefixcmp(&last_prefix->prefix, &new_prefix->prefix, new_prefix->length) &&
    c2b8:	08d2      	lsrs	r2, r2, #3
    c2ba:	4b18      	ldr	r3, [pc, #96]	; (c31c <check_prefix+0x7c>)
    c2bc:	4798      	blx	r3
{
  uip_ipaddr_t ipaddr;
  uip_ds6_addr_t *rep;

  if(last_prefix != NULL && new_prefix != NULL &&
     last_prefix->length == new_prefix->length &&
    c2be:	2800      	cmp	r0, #0
    c2c0:	d117      	bne.n	c2f2 <check_prefix+0x52>
     uip_ipaddr_prefixcmp(&last_prefix->prefix, &new_prefix->prefix, new_prefix->length) &&
    c2c2:	7d6a      	ldrb	r2, [r5, #21]
    c2c4:	7d63      	ldrb	r3, [r4, #21]
    c2c6:	429a      	cmp	r2, r3
    c2c8:	d113      	bne.n	c2f2 <check_prefix+0x52>
    c2ca:	e025      	b.n	c318 <check_prefix+0x78>
    rep = uip_ds6_addr_lookup(&ipaddr);
    if(rep != NULL) {
      PRINTF("RPL: removing global IP address ");
      PRINT6ADDR(&ipaddr);
      PRINTF("\n\r");
      uip_ds6_addr_rm(rep);
    c2cc:	4b14      	ldr	r3, [pc, #80]	; (c320 <check_prefix+0x80>)
    c2ce:	4798      	blx	r3
    }
  }
  
  if(new_prefix != NULL) {
    c2d0:	2c00      	cmp	r4, #0
    c2d2:	d021      	beq.n	c318 <check_prefix+0x78>
    set_ip_from_prefix(&ipaddr, new_prefix);
    c2d4:	4668      	mov	r0, sp
    c2d6:	1c21      	adds	r1, r4, #0
    c2d8:	4b12      	ldr	r3, [pc, #72]	; (c324 <check_prefix+0x84>)
    c2da:	4798      	blx	r3
    if(uip_ds6_addr_lookup(&ipaddr) == NULL) {
    c2dc:	4668      	mov	r0, sp
    c2de:	4b12      	ldr	r3, [pc, #72]	; (c328 <check_prefix+0x88>)
    c2e0:	4798      	blx	r3
    c2e2:	2800      	cmp	r0, #0
    c2e4:	d118      	bne.n	c318 <check_prefix+0x78>
      PRINTF("RPL: adding global IP address ");
      PRINT6ADDR(&ipaddr);
      PRINTF("\n\r");
      uip_ds6_addr_add(&ipaddr, 0, ADDR_AUTOCONF);
    c2e6:	4668      	mov	r0, sp
    c2e8:	2100      	movs	r1, #0
    c2ea:	2201      	movs	r2, #1
    c2ec:	4b0f      	ldr	r3, [pc, #60]	; (c32c <check_prefix+0x8c>)
    c2ee:	4798      	blx	r3
    c2f0:	e012      	b.n	c318 <check_prefix+0x78>
    /* Nothing has changed. */
    return;
  }

  if(last_prefix != NULL) {
    set_ip_from_prefix(&ipaddr, last_prefix);
    c2f2:	4668      	mov	r0, sp
    c2f4:	1c29      	adds	r1, r5, #0
    c2f6:	4b0b      	ldr	r3, [pc, #44]	; (c324 <check_prefix+0x84>)
    c2f8:	4798      	blx	r3
    rep = uip_ds6_addr_lookup(&ipaddr);
    c2fa:	4668      	mov	r0, sp
    c2fc:	4b0a      	ldr	r3, [pc, #40]	; (c328 <check_prefix+0x88>)
    c2fe:	4798      	blx	r3
    if(rep != NULL) {
    c300:	2800      	cmp	r0, #0
    c302:	d1e3      	bne.n	c2cc <check_prefix+0x2c>
    c304:	e7e6      	b.n	c2d4 <check_prefix+0x34>
    /* Nothing has changed. */
    return;
  }

  if(last_prefix != NULL) {
    set_ip_from_prefix(&ipaddr, last_prefix);
    c306:	4668      	mov	r0, sp
    c308:	1c29      	adds	r1, r5, #0
    c30a:	4b06      	ldr	r3, [pc, #24]	; (c324 <check_prefix+0x84>)
    c30c:	4798      	blx	r3
    rep = uip_ds6_addr_lookup(&ipaddr);
    c30e:	4668      	mov	r0, sp
    c310:	4b05      	ldr	r3, [pc, #20]	; (c328 <check_prefix+0x88>)
    c312:	4798      	blx	r3
    if(rep != NULL) {
    c314:	2800      	cmp	r0, #0
    c316:	d1d9      	bne.n	c2cc <check_prefix+0x2c>
      PRINT6ADDR(&ipaddr);
      PRINTF("\n\r");
      uip_ds6_addr_add(&ipaddr, 0, ADDR_AUTOCONF);
    }
  }
}
    c318:	b005      	add	sp, #20
    c31a:	bd30      	pop	{r4, r5, pc}
    c31c:	000108c9 	.word	0x000108c9
    c320:	0000763d 	.word	0x0000763d
    c324:	0000c269 	.word	0x0000c269
    c328:	00007439 	.word	0x00007439
    c32c:	00007551 	.word	0x00007551

0000c330 <find_parent_any_dag_any_instance>:
  return p;
}
/*---------------------------------------------------------------------------*/
static rpl_parent_t *
find_parent_any_dag_any_instance(uip_ipaddr_t *addr)
{
    c330:	b508      	push	{r3, lr}
  uip_ds6_nbr_t *ds6_nbr = uip_ds6_nbr_lookup(addr);
    c332:	4b04      	ldr	r3, [pc, #16]	; (c344 <find_parent_any_dag_any_instance+0x14>)
    c334:	4798      	blx	r3
  const uip_lladdr_t *lladdr = uip_ds6_nbr_get_ll(ds6_nbr);
    c336:	4b04      	ldr	r3, [pc, #16]	; (c348 <find_parent_any_dag_any_instance+0x18>)
    c338:	4798      	blx	r3
    c33a:	1c01      	adds	r1, r0, #0
  return nbr_table_get_from_lladdr(rpl_parents, (linkaddr_t *)lladdr);
    c33c:	4803      	ldr	r0, [pc, #12]	; (c34c <find_parent_any_dag_any_instance+0x1c>)
    c33e:	4b04      	ldr	r3, [pc, #16]	; (c350 <find_parent_any_dag_any_instance+0x20>)
    c340:	4798      	blx	r3
}
    c342:	bd08      	pop	{r3, pc}
    c344:	00006b55 	.word	0x00006b55
    c348:	00006b3d 	.word	0x00006b3d
    c34c:	20000124 	.word	0x20000124
    c350:	0000bd09 	.word	0x0000bd09

0000c354 <rpl_dag_init>:
  rpl_remove_parent(ptr);
}

void
rpl_dag_init(void)
{
    c354:	b508      	push	{r3, lr}
  nbr_table_register(rpl_parents, (nbr_table_callback *)nbr_callback);
    c356:	4802      	ldr	r0, [pc, #8]	; (c360 <rpl_dag_init+0xc>)
    c358:	4902      	ldr	r1, [pc, #8]	; (c364 <rpl_dag_init+0x10>)
    c35a:	4b03      	ldr	r3, [pc, #12]	; (c368 <rpl_dag_init+0x14>)
    c35c:	4798      	blx	r3
}
    c35e:	bd08      	pop	{r3, pc}
    c360:	20000124 	.word	0x20000124
    c364:	0000c7e5 	.word	0x0000c7e5
    c368:	0000ba99 	.word	0x0000ba99

0000c36c <rpl_get_parent_ipaddr>:
  }
}
/*---------------------------------------------------------------------------*/
uip_ipaddr_t *
rpl_get_parent_ipaddr(rpl_parent_t *p)
{
    c36c:	b508      	push	{r3, lr}
    c36e:	1c01      	adds	r1, r0, #0
  linkaddr_t *lladdr = nbr_table_get_lladdr(rpl_parents, p);
    c370:	4802      	ldr	r0, [pc, #8]	; (c37c <rpl_get_parent_ipaddr+0x10>)
    c372:	4b03      	ldr	r3, [pc, #12]	; (c380 <rpl_get_parent_ipaddr+0x14>)
    c374:	4798      	blx	r3
  return uip_ds6_nbr_ipaddr_from_lladdr((uip_lladdr_t *)lladdr);
    c376:	4b03      	ldr	r3, [pc, #12]	; (c384 <rpl_get_parent_ipaddr+0x18>)
    c378:	4798      	blx	r3
}
    c37a:	bd08      	pop	{r3, pc}
    c37c:	20000124 	.word	0x20000124
    c380:	0000bdad 	.word	0x0000bdad
    c384:	00006bc5 	.word	0x00006bc5

0000c388 <rpl_set_prefix>:
  }
}
/*---------------------------------------------------------------------------*/
int
rpl_set_prefix(rpl_dag_t *dag, uip_ipaddr_t *prefix, unsigned len)
{
    c388:	b5f0      	push	{r4, r5, r6, r7, lr}
    c38a:	b089      	sub	sp, #36	; 0x24
    c38c:	1c04      	adds	r4, r0, #0
    c38e:	9101      	str	r1, [sp, #4]
    c390:	1c15      	adds	r5, r2, #0
  rpl_prefix_t last_prefix;
  uint8_t last_len = dag->prefix_info.length;
    c392:	2338      	movs	r3, #56	; 0x38
    c394:	5cc3      	ldrb	r3, [r0, r3]
  
  if(len > 128) {
    return 0;
    c396:	2000      	movs	r0, #0
rpl_set_prefix(rpl_dag_t *dag, uip_ipaddr_t *prefix, unsigned len)
{
  rpl_prefix_t last_prefix;
  uint8_t last_len = dag->prefix_info.length;
  
  if(len > 128) {
    c398:	2a80      	cmp	r2, #128	; 0x80
    c39a:	d834      	bhi.n	c406 <rpl_set_prefix+0x7e>
    return 0;
  }
  if(dag->prefix_info.length != 0) {
    c39c:	2b00      	cmp	r3, #0
    c39e:	d01b      	beq.n	c3d8 <rpl_set_prefix+0x50>
    memcpy(&last_prefix, &dag->prefix_info, sizeof(rpl_prefix_t));
    c3a0:	1c27      	adds	r7, r4, #0
    c3a2:	3724      	adds	r7, #36	; 0x24
    c3a4:	a802      	add	r0, sp, #8
    c3a6:	1c39      	adds	r1, r7, #0
    c3a8:	2218      	movs	r2, #24
    c3aa:	4e18      	ldr	r6, [pc, #96]	; (c40c <rpl_set_prefix+0x84>)
    c3ac:	47b0      	blx	r6
  }
  memset(&dag->prefix_info.prefix, 0, sizeof(dag->prefix_info.prefix));
    c3ae:	1c38      	adds	r0, r7, #0
    c3b0:	2100      	movs	r1, #0
    c3b2:	2210      	movs	r2, #16
    c3b4:	4b16      	ldr	r3, [pc, #88]	; (c410 <rpl_set_prefix+0x88>)
    c3b6:	4798      	blx	r3
  memcpy(&dag->prefix_info.prefix, prefix, (len + 7) / 8);
    c3b8:	1dea      	adds	r2, r5, #7
    c3ba:	08d2      	lsrs	r2, r2, #3
    c3bc:	1c38      	adds	r0, r7, #0
    c3be:	9901      	ldr	r1, [sp, #4]
    c3c0:	47b0      	blx	r6
  dag->prefix_info.length = len;
    c3c2:	2338      	movs	r3, #56	; 0x38
    c3c4:	54e5      	strb	r5, [r4, r3]
  dag->prefix_info.flags = UIP_ND6_RA_FLAG_AUTONOMOUS;
    c3c6:	2240      	movs	r2, #64	; 0x40
    c3c8:	3301      	adds	r3, #1
    c3ca:	54e2      	strb	r2, [r4, r3]
  if(last_len == 0) {
    PRINTF("rpl_set_prefix - prefix NULL\n\r");
    check_prefix(NULL, &dag->prefix_info);
  } else { 
    PRINTF("rpl_set_prefix - prefix NON-NULL\n\r");
    check_prefix(&last_prefix, &dag->prefix_info);
    c3cc:	a802      	add	r0, sp, #8
    c3ce:	1c39      	adds	r1, r7, #0
    c3d0:	4b10      	ldr	r3, [pc, #64]	; (c414 <rpl_set_prefix+0x8c>)
    c3d2:	4798      	blx	r3
  }
  return 1;
    c3d4:	2001      	movs	r0, #1
    c3d6:	e016      	b.n	c406 <rpl_set_prefix+0x7e>
    return 0;
  }
  if(dag->prefix_info.length != 0) {
    memcpy(&last_prefix, &dag->prefix_info, sizeof(rpl_prefix_t));
  }
  memset(&dag->prefix_info.prefix, 0, sizeof(dag->prefix_info.prefix));
    c3d8:	1c27      	adds	r7, r4, #0
    c3da:	3724      	adds	r7, #36	; 0x24
    c3dc:	1c38      	adds	r0, r7, #0
    c3de:	2100      	movs	r1, #0
    c3e0:	2210      	movs	r2, #16
    c3e2:	4b0b      	ldr	r3, [pc, #44]	; (c410 <rpl_set_prefix+0x88>)
    c3e4:	4798      	blx	r3
  memcpy(&dag->prefix_info.prefix, prefix, (len + 7) / 8);
    c3e6:	1dea      	adds	r2, r5, #7
    c3e8:	08d2      	lsrs	r2, r2, #3
    c3ea:	1c38      	adds	r0, r7, #0
    c3ec:	9901      	ldr	r1, [sp, #4]
    c3ee:	4b07      	ldr	r3, [pc, #28]	; (c40c <rpl_set_prefix+0x84>)
    c3f0:	4798      	blx	r3
  dag->prefix_info.length = len;
    c3f2:	2338      	movs	r3, #56	; 0x38
    c3f4:	54e5      	strb	r5, [r4, r3]
  dag->prefix_info.flags = UIP_ND6_RA_FLAG_AUTONOMOUS;
    c3f6:	2240      	movs	r2, #64	; 0x40
    c3f8:	3301      	adds	r3, #1
    c3fa:	54e2      	strb	r2, [r4, r3]
  PRINTF("RPL: Prefix set - will announce this in DIOs\n\r");
  /* Autoconfigure an address if this node does not already have an address
     with this prefix. Otherwise, update the prefix */
  if(last_len == 0) {
    PRINTF("rpl_set_prefix - prefix NULL\n\r");
    check_prefix(NULL, &dag->prefix_info);
    c3fc:	2000      	movs	r0, #0
    c3fe:	1c39      	adds	r1, r7, #0
    c400:	4b04      	ldr	r3, [pc, #16]	; (c414 <rpl_set_prefix+0x8c>)
    c402:	4798      	blx	r3
  } else { 
    PRINTF("rpl_set_prefix - prefix NON-NULL\n\r");
    check_prefix(&last_prefix, &dag->prefix_info);
  }
  return 1;
    c404:	2001      	movs	r0, #1
}
    c406:	b009      	add	sp, #36	; 0x24
    c408:	bdf0      	pop	{r4, r5, r6, r7, pc}
    c40a:	46c0      	nop			; (mov r8, r8)
    c40c:	000108e7 	.word	0x000108e7
    c410:	00010921 	.word	0x00010921
    c414:	0000c2a1 	.word	0x0000c2a1

0000c418 <rpl_set_default_route>:
/*---------------------------------------------------------------------------*/
int
rpl_set_default_route(rpl_instance_t *instance, uip_ipaddr_t *from)
{
    c418:	b538      	push	{r3, r4, r5, lr}
    c41a:	1c04      	adds	r4, r0, #0
    c41c:	1c0d      	adds	r5, r1, #0
  if(instance->def_route != NULL) {
    c41e:	2388      	movs	r3, #136	; 0x88
    c420:	58c0      	ldr	r0, [r0, r3]
    c422:	2800      	cmp	r0, #0
    c424:	d012      	beq.n	c44c <rpl_set_default_route+0x34>
    PRINTF("RPL: Removing default route through ");
    PRINT6ADDR(&instance->def_route->ipaddr);
    PRINTF("\n\r");
    uip_ds6_defrt_rm(instance->def_route);
    c426:	4b0b      	ldr	r3, [pc, #44]	; (c454 <rpl_set_default_route+0x3c>)
    c428:	4798      	blx	r3
    instance->def_route = NULL;
    c42a:	2200      	movs	r2, #0
    c42c:	2388      	movs	r3, #136	; 0x88
    c42e:	50e2      	str	r2, [r4, r3]
    c430:	e00c      	b.n	c44c <rpl_set_default_route+0x34>
  if(from != NULL) {
    PRINTF("RPL: Adding default route through ");
    PRINT6ADDR(from);
    PRINTF("\n\r");
    instance->def_route = uip_ds6_defrt_add(from,
        RPL_LIFETIME(instance,
    c432:	2393      	movs	r3, #147	; 0x93

  if(from != NULL) {
    PRINTF("RPL: Adding default route through ");
    PRINT6ADDR(from);
    PRINTF("\n\r");
    instance->def_route = uip_ds6_defrt_add(from,
    c434:	5ce1      	ldrb	r1, [r4, r3]
        RPL_LIFETIME(instance,
    c436:	3309      	adds	r3, #9
    c438:	5ae3      	ldrh	r3, [r4, r3]

  if(from != NULL) {
    PRINTF("RPL: Adding default route through ");
    PRINT6ADDR(from);
    PRINTF("\n\r");
    instance->def_route = uip_ds6_defrt_add(from,
    c43a:	4359      	muls	r1, r3
    c43c:	1c28      	adds	r0, r5, #0
    c43e:	4b06      	ldr	r3, [pc, #24]	; (c458 <rpl_set_default_route+0x40>)
    c440:	4798      	blx	r3
    c442:	2388      	movs	r3, #136	; 0x88
    c444:	50e0      	str	r0, [r4, r3]
        RPL_LIFETIME(instance,
            instance->default_lifetime));
    if(instance->def_route == NULL) {
      return 0;
    c446:	1e43      	subs	r3, r0, #1
    c448:	4198      	sbcs	r0, r3
    c44a:	e002      	b.n	c452 <rpl_set_default_route+0x3a>
    PRINTF("\n\r");
    uip_ds6_defrt_rm(instance->def_route);
    instance->def_route = NULL;
  }

  if(from != NULL) {
    c44c:	2d00      	cmp	r5, #0
    c44e:	d1f0      	bne.n	c432 <rpl_set_default_route+0x1a>
      uip_ds6_defrt_rm(instance->def_route);
    } else {
      PRINTF("RPL: Not actually removing default route, since instance had no default route\n\r");
    }
  }
  return 1;
    c450:	2001      	movs	r0, #1
}
    c452:	bd38      	pop	{r3, r4, r5, pc}
    c454:	0000711d 	.word	0x0000711d
    c458:	000071bd 	.word	0x000071bd

0000c45c <rpl_alloc_instance>:
/*---------------------------------------------------------------------------*/
rpl_instance_t *
rpl_alloc_instance(uint8_t instance_id)
{
    c45c:	b538      	push	{r3, r4, r5, lr}
    c45e:	1c05      	adds	r5, r0, #0
  rpl_instance_t *instance, *end;

  for(instance = &instance_table[0], end = instance + RPL_MAX_INSTANCES;
      instance < end; ++instance) {
    if(instance->used == 0) {
    c460:	238d      	movs	r3, #141	; 0x8d
    c462:	4a0b      	ldr	r2, [pc, #44]	; (c490 <rpl_alloc_instance+0x34>)
    c464:	5cd3      	ldrb	r3, [r2, r3]
      instance->def_route = NULL;
      instance->used = 1;
      return instance;
    }
  }
  return NULL;
    c466:	2000      	movs	r0, #0
{
  rpl_instance_t *instance, *end;

  for(instance = &instance_table[0], end = instance + RPL_MAX_INSTANCES;
      instance < end; ++instance) {
    if(instance->used == 0) {
    c468:	2b00      	cmp	r3, #0
    c46a:	d10f      	bne.n	c48c <rpl_alloc_instance+0x30>
      memset(instance, 0, sizeof(*instance));
    c46c:	1c14      	adds	r4, r2, #0
    c46e:	1c10      	adds	r0, r2, #0
    c470:	2100      	movs	r1, #0
    c472:	2282      	movs	r2, #130	; 0x82
    c474:	0052      	lsls	r2, r2, #1
    c476:	4b07      	ldr	r3, [pc, #28]	; (c494 <rpl_alloc_instance+0x38>)
    c478:	4798      	blx	r3
      instance->instance_id = instance_id;
    c47a:	238c      	movs	r3, #140	; 0x8c
    c47c:	54e5      	strb	r5, [r4, r3]
      instance->def_route = NULL;
    c47e:	2200      	movs	r2, #0
    c480:	3b04      	subs	r3, #4
    c482:	50e2      	str	r2, [r4, r3]
      instance->used = 1;
    c484:	3201      	adds	r2, #1
    c486:	3305      	adds	r3, #5
    c488:	54e2      	strb	r2, [r4, r3]
      return instance;
    c48a:	1c20      	adds	r0, r4, #0
    }
  }
  return NULL;
}
    c48c:	bd38      	pop	{r3, r4, r5, pc}
    c48e:	46c0      	nop			; (mov r8, r8)
    c490:	20003288 	.word	0x20003288
    c494:	00010921 	.word	0x00010921

0000c498 <rpl_add_parent>:
  dag->used = 0;
}
/*---------------------------------------------------------------------------*/
rpl_parent_t *
rpl_add_parent(rpl_dag_t *dag, rpl_dio_t *dio, uip_ipaddr_t *addr)
{
    c498:	b538      	push	{r3, r4, r5, lr}
    c49a:	1c05      	adds	r5, r0, #0
    c49c:	1c0c      	adds	r4, r1, #0
  rpl_parent_t *p = NULL;
  /* Is the parent known by ds6? Drop this request if not.
   * Typically, the parent is added upon receiving a DIO. */
  const uip_lladdr_t *lladdr = uip_ds6_nbr_lladdr_from_ipaddr(addr);
    c49e:	1c10      	adds	r0, r2, #0
    c4a0:	4b09      	ldr	r3, [pc, #36]	; (c4c8 <rpl_add_parent+0x30>)
    c4a2:	4798      	blx	r3
    c4a4:	1e01      	subs	r1, r0, #0

  PRINTF("RPL: rpl_add_parent lladdr %p ", lladdr);
  PRINT6ADDR(addr);
  PRINTF("\n\r");
  if(lladdr != NULL) {
    c4a6:	d00d      	beq.n	c4c4 <rpl_add_parent+0x2c>
    /* Add parent in rpl_parents */
    p = nbr_table_add_lladdr(rpl_parents, (linkaddr_t *)lladdr);
    c4a8:	4808      	ldr	r0, [pc, #32]	; (c4cc <rpl_add_parent+0x34>)
    c4aa:	4b09      	ldr	r3, [pc, #36]	; (c4d0 <rpl_add_parent+0x38>)
    c4ac:	4798      	blx	r3
    if(p == NULL) {
    c4ae:	2800      	cmp	r0, #0
    c4b0:	d009      	beq.n	c4c6 <rpl_add_parent+0x2e>
      PRINTF("RPL: rpl_add_parent p NULL\n\r");
    } else {
      p->dag = dag;
    c4b2:	6045      	str	r5, [r0, #4]
      p->rank = dio->rank;
    c4b4:	8a63      	ldrh	r3, [r4, #18]
    c4b6:	8103      	strh	r3, [r0, #8]
      p->dtsn = dio->dtsn;
    c4b8:	7e63      	ldrb	r3, [r4, #25]
    c4ba:	7303      	strb	r3, [r0, #12]
      p->link_metric = RPL_INIT_LINK_METRIC * RPL_DAG_MC_ETX_DIVISOR;
    c4bc:	23c0      	movs	r3, #192	; 0xc0
    c4be:	009b      	lsls	r3, r3, #2
    c4c0:	8143      	strh	r3, [r0, #10]
    c4c2:	e000      	b.n	c4c6 <rpl_add_parent+0x2e>
}
/*---------------------------------------------------------------------------*/
rpl_parent_t *
rpl_add_parent(rpl_dag_t *dag, rpl_dio_t *dio, uip_ipaddr_t *addr)
{
  rpl_parent_t *p = NULL;
    c4c4:	2000      	movs	r0, #0
#endif /* RPL_DAG_MC != RPL_DAG_MC_NONE */
    }
  }

  return p;
}
    c4c6:	bd38      	pop	{r3, r4, r5, pc}
    c4c8:	00006bd1 	.word	0x00006bd1
    c4cc:	20000124 	.word	0x20000124
    c4d0:	0000bb81 	.word	0x0000bb81

0000c4d4 <rpl_find_parent>:
  return nbr_table_get_from_lladdr(rpl_parents, (linkaddr_t *)lladdr);
}
/*---------------------------------------------------------------------------*/
rpl_parent_t *
rpl_find_parent(rpl_dag_t *dag, uip_ipaddr_t *addr)
{
    c4d4:	b510      	push	{r4, lr}
    c4d6:	1c04      	adds	r4, r0, #0
  rpl_parent_t *p = find_parent_any_dag_any_instance(addr);
    c4d8:	1c08      	adds	r0, r1, #0
    c4da:	4b06      	ldr	r3, [pc, #24]	; (c4f4 <rpl_find_parent+0x20>)
    c4dc:	4798      	blx	r3
  if(p != NULL && p->dag == dag) {
    c4de:	2800      	cmp	r0, #0
    c4e0:	d005      	beq.n	c4ee <rpl_find_parent+0x1a>
    return p;
  } else {
    return NULL;
    c4e2:	2300      	movs	r3, #0
/*---------------------------------------------------------------------------*/
rpl_parent_t *
rpl_find_parent(rpl_dag_t *dag, uip_ipaddr_t *addr)
{
  rpl_parent_t *p = find_parent_any_dag_any_instance(addr);
  if(p != NULL && p->dag == dag) {
    c4e4:	6842      	ldr	r2, [r0, #4]
    c4e6:	42a2      	cmp	r2, r4
    c4e8:	d102      	bne.n	c4f0 <rpl_find_parent+0x1c>
    return p;
    c4ea:	1c03      	adds	r3, r0, #0
    c4ec:	e000      	b.n	c4f0 <rpl_find_parent+0x1c>
  } else {
    return NULL;
    c4ee:	2300      	movs	r3, #0
  }
}
    c4f0:	1c18      	adds	r0, r3, #0
    c4f2:	bd10      	pop	{r4, pc}
    c4f4:	0000c331 	.word	0x0000c331

0000c4f8 <rpl_find_parent_any_dag>:
  }
}
/*---------------------------------------------------------------------------*/
rpl_parent_t *
rpl_find_parent_any_dag(rpl_instance_t *instance, uip_ipaddr_t *addr)
{
    c4f8:	b510      	push	{r4, lr}
    c4fa:	1c04      	adds	r4, r0, #0
  rpl_parent_t *p = find_parent_any_dag_any_instance(addr);
    c4fc:	1c08      	adds	r0, r1, #0
    c4fe:	4b09      	ldr	r3, [pc, #36]	; (c524 <rpl_find_parent_any_dag+0x2c>)
    c500:	4798      	blx	r3
  if(p && p->dag && p->dag->instance == instance) {
    c502:	2800      	cmp	r0, #0
    c504:	d008      	beq.n	c518 <rpl_find_parent_any_dag+0x20>
    c506:	6843      	ldr	r3, [r0, #4]
    c508:	2b00      	cmp	r3, #0
    c50a:	d007      	beq.n	c51c <rpl_find_parent_any_dag+0x24>
    c50c:	6a1a      	ldr	r2, [r3, #32]
    return p;
  } else {
    return NULL;
    c50e:	2300      	movs	r3, #0
/*---------------------------------------------------------------------------*/
rpl_parent_t *
rpl_find_parent_any_dag(rpl_instance_t *instance, uip_ipaddr_t *addr)
{
  rpl_parent_t *p = find_parent_any_dag_any_instance(addr);
  if(p && p->dag && p->dag->instance == instance) {
    c510:	42a2      	cmp	r2, r4
    c512:	d104      	bne.n	c51e <rpl_find_parent_any_dag+0x26>
    return p;
    c514:	1c03      	adds	r3, r0, #0
    c516:	e002      	b.n	c51e <rpl_find_parent_any_dag+0x26>
  } else {
    return NULL;
    c518:	2300      	movs	r3, #0
    c51a:	e000      	b.n	c51e <rpl_find_parent_any_dag+0x26>
    c51c:	2300      	movs	r3, #0
  }
}
    c51e:	1c18      	adds	r0, r3, #0
    c520:	bd10      	pop	{r4, pc}
    c522:	46c0      	nop			; (mov r8, r8)
    c524:	0000c331 	.word	0x0000c331

0000c528 <rpl_select_parent>:
  return best;
}
/*---------------------------------------------------------------------------*/
rpl_parent_t *
rpl_select_parent(rpl_dag_t *dag)
{
    c528:	b5f0      	push	{r4, r5, r6, r7, lr}
    c52a:	4647      	mov	r7, r8
    c52c:	b480      	push	{r7}
    c52e:	1c06      	adds	r6, r0, #0
{
  rpl_parent_t *p, *best;

  best = NULL;

  p = nbr_table_head(rpl_parents);
    c530:	4813      	ldr	r0, [pc, #76]	; (c580 <rpl_select_parent+0x58>)
    c532:	4b14      	ldr	r3, [pc, #80]	; (c584 <rpl_select_parent+0x5c>)
    c534:	4798      	blx	r3
    c536:	1e04      	subs	r4, r0, #0
  while(p != NULL) {
    c538:	d01d      	beq.n	c576 <rpl_select_parent+0x4e>
    c53a:	2500      	movs	r5, #0
    if(p->rank == INFINITE_RANK) {
    c53c:	4b12      	ldr	r3, [pc, #72]	; (c588 <rpl_select_parent+0x60>)
    c53e:	4698      	mov	r8, r3
    } else if(best == NULL) {
      best = p;
    } else {
      best = dag->instance->of->best_parent(best, p);
    }
    p = nbr_table_next(rpl_parents, p);
    c540:	4f12      	ldr	r7, [pc, #72]	; (c58c <rpl_select_parent+0x64>)

  best = NULL;

  p = nbr_table_head(rpl_parents);
  while(p != NULL) {
    if(p->rank == INFINITE_RANK) {
    c542:	8923      	ldrh	r3, [r4, #8]
    c544:	4543      	cmp	r3, r8
    c546:	d00a      	beq.n	c55e <rpl_select_parent+0x36>
      /* ignore this neighbor */
    } else if(best == NULL) {
    c548:	2d00      	cmp	r5, #0
    c54a:	d007      	beq.n	c55c <rpl_select_parent+0x34>
      best = p;
    } else {
      best = dag->instance->of->best_parent(best, p);
    c54c:	6a33      	ldr	r3, [r6, #32]
    c54e:	689b      	ldr	r3, [r3, #8]
    c550:	689b      	ldr	r3, [r3, #8]
    c552:	1c28      	adds	r0, r5, #0
    c554:	1c21      	adds	r1, r4, #0
    c556:	4798      	blx	r3
    c558:	1c05      	adds	r5, r0, #0
    c55a:	e000      	b.n	c55e <rpl_select_parent+0x36>

  p = nbr_table_head(rpl_parents);
  while(p != NULL) {
    if(p->rank == INFINITE_RANK) {
      /* ignore this neighbor */
    } else if(best == NULL) {
    c55c:	1c25      	adds	r5, r4, #0
      best = p;
    } else {
      best = dag->instance->of->best_parent(best, p);
    }
    p = nbr_table_next(rpl_parents, p);
    c55e:	4808      	ldr	r0, [pc, #32]	; (c580 <rpl_select_parent+0x58>)
    c560:	1c21      	adds	r1, r4, #0
    c562:	47b8      	blx	r7
    c564:	1e04      	subs	r4, r0, #0
  rpl_parent_t *p, *best;

  best = NULL;

  p = nbr_table_head(rpl_parents);
  while(p != NULL) {
    c566:	d1ec      	bne.n	c542 <rpl_select_parent+0x1a>
rpl_parent_t *
rpl_select_parent(rpl_dag_t *dag)
{
  rpl_parent_t *best = best_parent(dag);

  if(best != NULL) {
    c568:	2d00      	cmp	r5, #0
    c56a:	d005      	beq.n	c578 <rpl_select_parent+0x50>
    rpl_set_preferred_parent(dag, best);
    c56c:	1c30      	adds	r0, r6, #0
    c56e:	1c29      	adds	r1, r5, #0
    c570:	4b07      	ldr	r3, [pc, #28]	; (c590 <rpl_select_parent+0x68>)
    c572:	4798      	blx	r3
    c574:	e000      	b.n	c578 <rpl_select_parent+0x50>
static rpl_parent_t *
best_parent(rpl_dag_t *dag)
{
  rpl_parent_t *p, *best;

  best = NULL;
    c576:	1c05      	adds	r5, r0, #0
  if(best != NULL) {
    rpl_set_preferred_parent(dag, best);
  }

  return best;
}
    c578:	1c28      	adds	r0, r5, #0
    c57a:	bc04      	pop	{r2}
    c57c:	4690      	mov	r8, r2
    c57e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    c580:	20000124 	.word	0x20000124
    c584:	0000bb31 	.word	0x0000bb31
    c588:	0000ffff 	.word	0x0000ffff
    c58c:	0000bac5 	.word	0x0000bac5
    c590:	0000c235 	.word	0x0000c235

0000c594 <rpl_select_dag>:
  }
}
/*---------------------------------------------------------------------------*/
rpl_dag_t *
rpl_select_dag(rpl_instance_t *instance, rpl_parent_t *p)
{
    c594:	b5f0      	push	{r4, r5, r6, r7, lr}
    c596:	4657      	mov	r7, sl
    c598:	464e      	mov	r6, r9
    c59a:	4645      	mov	r5, r8
    c59c:	b4e0      	push	{r5, r6, r7}
    c59e:	b082      	sub	sp, #8
    c5a0:	1c05      	adds	r5, r0, #0
    c5a2:	1c0e      	adds	r6, r1, #0
  rpl_parent_t *last_parent;
  rpl_dag_t *dag, *end, *best_dag;
  rpl_rank_t old_rank;

  old_rank = instance->current_dag->rank;
  last_parent = instance->current_dag->preferred_parent;
    c5a4:	68c4      	ldr	r4, [r0, #12]
    c5a6:	69a7      	ldr	r7, [r4, #24]

  best_dag = instance->current_dag;
  if(best_dag->rank != ROOT_RANK(instance)) {
    c5a8:	8ba2      	ldrh	r2, [r4, #28]
    c5aa:	239a      	movs	r3, #154	; 0x9a
    c5ac:	5ac3      	ldrh	r3, [r0, r3]
    c5ae:	429a      	cmp	r2, r3
    c5b0:	d100      	bne.n	c5b4 <rpl_select_dag+0x20>
    c5b2:	e0b5      	b.n	c720 <rpl_select_dag+0x18c>
    if(rpl_select_parent(p->dag) != NULL) {
    c5b4:	6848      	ldr	r0, [r1, #4]
    c5b6:	4b63      	ldr	r3, [pc, #396]	; (c744 <rpl_select_dag+0x1b0>)
    c5b8:	4798      	blx	r3
    c5ba:	2800      	cmp	r0, #0
    c5bc:	d008      	beq.n	c5d0 <rpl_select_dag+0x3c>
      if(p->dag != best_dag) {
    c5be:	6871      	ldr	r1, [r6, #4]
    c5c0:	428c      	cmp	r4, r1
    c5c2:	d02a      	beq.n	c61a <rpl_select_dag+0x86>
        best_dag = instance->of->best_dag(best_dag, p->dag);
    c5c4:	68ab      	ldr	r3, [r5, #8]
    c5c6:	68db      	ldr	r3, [r3, #12]
    c5c8:	1c20      	adds	r0, r4, #0
    c5ca:	4798      	blx	r3
    c5cc:	1c04      	adds	r4, r0, #0
    c5ce:	e025      	b.n	c61c <rpl_select_dag+0x88>
      }
    } else if(p->dag == best_dag) {
    c5d0:	6873      	ldr	r3, [r6, #4]
    c5d2:	429c      	cmp	r4, r3
    c5d4:	d122      	bne.n	c61c <rpl_select_dag+0x88>
      best_dag = NULL;
      for(dag = &instance->dag_table[0], end = dag + RPL_MAX_DAG_PER_INSTANCE; dag < end; ++dag) {
    c5d6:	1c2e      	adds	r6, r5, #0
    c5d8:	3610      	adds	r6, #16
    c5da:	2388      	movs	r3, #136	; 0x88
    c5dc:	4698      	mov	r8, r3
    c5de:	44a8      	add	r8, r5
    c5e0:	4546      	cmp	r6, r8
    c5e2:	d300      	bcc.n	c5e6 <rpl_select_dag+0x52>
    c5e4:	e094      	b.n	c710 <rpl_select_dag+0x17c>
    c5e6:	2400      	movs	r4, #0
        if(dag->used && dag->preferred_parent != NULL && dag->preferred_parent->rank != INFINITE_RANK) {
    c5e8:	4b57      	ldr	r3, [pc, #348]	; (c748 <rpl_select_dag+0x1b4>)
    c5ea:	4699      	mov	r9, r3
    c5ec:	7d73      	ldrb	r3, [r6, #21]
    c5ee:	2b00      	cmp	r3, #0
    c5f0:	d00f      	beq.n	c612 <rpl_select_dag+0x7e>
    c5f2:	69b3      	ldr	r3, [r6, #24]
    c5f4:	2b00      	cmp	r3, #0
    c5f6:	d00c      	beq.n	c612 <rpl_select_dag+0x7e>
    c5f8:	891b      	ldrh	r3, [r3, #8]
    c5fa:	454b      	cmp	r3, r9
    c5fc:	d009      	beq.n	c612 <rpl_select_dag+0x7e>
          if(best_dag == NULL) {
    c5fe:	2c00      	cmp	r4, #0
    c600:	d006      	beq.n	c610 <rpl_select_dag+0x7c>
            best_dag = dag;
          } else {
            best_dag = instance->of->best_dag(best_dag, dag);
    c602:	68ab      	ldr	r3, [r5, #8]
    c604:	68db      	ldr	r3, [r3, #12]
    c606:	1c20      	adds	r0, r4, #0
    c608:	1c31      	adds	r1, r6, #0
    c60a:	4798      	blx	r3
    c60c:	1c04      	adds	r4, r0, #0
    c60e:	e000      	b.n	c612 <rpl_select_dag+0x7e>
    c610:	1c34      	adds	r4, r6, #0
      if(p->dag != best_dag) {
        best_dag = instance->of->best_dag(best_dag, p->dag);
      }
    } else if(p->dag == best_dag) {
      best_dag = NULL;
      for(dag = &instance->dag_table[0], end = dag + RPL_MAX_DAG_PER_INSTANCE; dag < end; ++dag) {
    c612:	363c      	adds	r6, #60	; 0x3c
    c614:	45b0      	cmp	r8, r6
    c616:	d8e9      	bhi.n	c5ec <rpl_select_dag+0x58>
    c618:	e000      	b.n	c61c <rpl_select_dag+0x88>
  rpl_rank_t old_rank;

  old_rank = instance->current_dag->rank;
  last_parent = instance->current_dag->preferred_parent;

  best_dag = instance->current_dag;
    c61a:	1c0c      	adds	r4, r1, #0
        }
      }
    }
  }

  if(best_dag == NULL) {
    c61c:	2c00      	cmp	r4, #0
    c61e:	d079      	beq.n	c714 <rpl_select_dag+0x180>
    /* No parent found: the calling function handle this problem. */
    return NULL;
  }

  if(instance->current_dag != best_dag) {
    c620:	68e8      	ldr	r0, [r5, #12]
    c622:	42a0      	cmp	r0, r4
    c624:	d01b      	beq.n	c65e <rpl_select_dag+0xca>
    /* Remove routes installed by DAOs. */
    rpl_remove_routes(instance->current_dag);
    c626:	4b49      	ldr	r3, [pc, #292]	; (c74c <rpl_select_dag+0x1b8>)
    c628:	4798      	blx	r3

    PRINTF("RPL: New preferred DAG: ");
    PRINT6ADDR(&best_dag->dag_id);
    PRINTF("\n\r");

    if(best_dag->prefix_info.flags & UIP_ND6_RA_FLAG_AUTONOMOUS) {
    c62a:	2339      	movs	r3, #57	; 0x39
    c62c:	5ce3      	ldrb	r3, [r4, r3]
    c62e:	065b      	lsls	r3, r3, #25
    c630:	d506      	bpl.n	c640 <rpl_select_dag+0xac>
      check_prefix(&instance->current_dag->prefix_info, &best_dag->prefix_info);
    c632:	68e8      	ldr	r0, [r5, #12]
    c634:	3024      	adds	r0, #36	; 0x24
    c636:	1c21      	adds	r1, r4, #0
    c638:	3124      	adds	r1, #36	; 0x24
    c63a:	4b45      	ldr	r3, [pc, #276]	; (c750 <rpl_select_dag+0x1bc>)
    c63c:	4798      	blx	r3
    c63e:	e008      	b.n	c652 <rpl_select_dag+0xbe>
    } else if(instance->current_dag->prefix_info.flags & UIP_ND6_RA_FLAG_AUTONOMOUS) {
    c640:	68e8      	ldr	r0, [r5, #12]
    c642:	2339      	movs	r3, #57	; 0x39
    c644:	5cc3      	ldrb	r3, [r0, r3]
    c646:	065b      	lsls	r3, r3, #25
    c648:	d503      	bpl.n	c652 <rpl_select_dag+0xbe>
      check_prefix(&instance->current_dag->prefix_info, NULL);
    c64a:	3024      	adds	r0, #36	; 0x24
    c64c:	2100      	movs	r1, #0
    c64e:	4b40      	ldr	r3, [pc, #256]	; (c750 <rpl_select_dag+0x1bc>)
    c650:	4798      	blx	r3
    }

    best_dag->joined = 1;
    c652:	2301      	movs	r3, #1
    c654:	75a3      	strb	r3, [r4, #22]
    instance->current_dag->joined = 0;
    c656:	2300      	movs	r3, #0
    c658:	68ea      	ldr	r2, [r5, #12]
    c65a:	7593      	strb	r3, [r2, #22]
    instance->current_dag = best_dag;
    c65c:	60ec      	str	r4, [r5, #12]
  }

  instance->of->update_metric_container(instance);
    c65e:	68ab      	ldr	r3, [r5, #8]
    c660:	695b      	ldr	r3, [r3, #20]
    c662:	1c28      	adds	r0, r5, #0
    c664:	4798      	blx	r3
  /* Update the DAG rank. */
  best_dag->rank = instance->of->calculate_rank(best_dag->preferred_parent, 0);
    c666:	68ab      	ldr	r3, [r5, #8]
    c668:	691b      	ldr	r3, [r3, #16]
    c66a:	69a0      	ldr	r0, [r4, #24]
    c66c:	2100      	movs	r1, #0
    c66e:	4798      	blx	r3
    c670:	83a0      	strh	r0, [r4, #28]
  if(last_parent == NULL || best_dag->rank < best_dag->min_rank) {
    c672:	2f00      	cmp	r7, #0
    c674:	d002      	beq.n	c67c <rpl_select_dag+0xe8>
    c676:	8a26      	ldrh	r6, [r4, #16]
    c678:	42b0      	cmp	r0, r6
    c67a:	d201      	bcs.n	c680 <rpl_select_dag+0xec>
    best_dag->min_rank = best_dag->rank;
    c67c:	8220      	strh	r0, [r4, #16]
    c67e:	e01e      	b.n	c6be <rpl_select_dag+0x12a>
}
/*---------------------------------------------------------------------------*/
static int
acceptable_rank(rpl_dag_t *dag, rpl_rank_t rank)
{
  return rank != INFINITE_RANK &&
    c680:	4a31      	ldr	r2, [pc, #196]	; (c748 <rpl_select_dag+0x1b4>)
    c682:	4290      	cmp	r0, r2
    c684:	d04f      	beq.n	c726 <rpl_select_dag+0x192>
    ((dag->instance->max_rankinc == 0) ||
    c686:	6a23      	ldr	r3, [r4, #32]
    c688:	2298      	movs	r2, #152	; 0x98
    c68a:	5a9a      	ldrh	r2, [r3, r2]
    c68c:	4690      	mov	r8, r2
}
/*---------------------------------------------------------------------------*/
static int
acceptable_rank(rpl_dag_t *dag, rpl_rank_t rank)
{
  return rank != INFINITE_RANK &&
    c68e:	2a00      	cmp	r2, #0
    c690:	d015      	beq.n	c6be <rpl_select_dag+0x12a>
    ((dag->instance->max_rankinc == 0) ||
     DAG_RANK(rank, dag->instance) <= DAG_RANK(dag->min_rank + dag->instance->max_rankinc, dag->instance));
    c692:	229a      	movs	r2, #154	; 0x9a
    c694:	5a9b      	ldrh	r3, [r3, r2]
    c696:	9301      	str	r3, [sp, #4]
    c698:	1c19      	adds	r1, r3, #0
    c69a:	4b2e      	ldr	r3, [pc, #184]	; (c754 <rpl_select_dag+0x1c0>)
    c69c:	4798      	blx	r3
    c69e:	b282      	uxth	r2, r0
    c6a0:	4692      	mov	sl, r2
    c6a2:	1c30      	adds	r0, r6, #0
    c6a4:	4440      	add	r0, r8
    c6a6:	9901      	ldr	r1, [sp, #4]
    c6a8:	4b2b      	ldr	r3, [pc, #172]	; (c758 <rpl_select_dag+0x1c4>)
    c6aa:	4798      	blx	r3
/*---------------------------------------------------------------------------*/
static int
acceptable_rank(rpl_dag_t *dag, rpl_rank_t rank)
{
  return rank != INFINITE_RANK &&
    ((dag->instance->max_rankinc == 0) ||
    c6ac:	4582      	cmp	sl, r0
    c6ae:	dc3a      	bgt.n	c726 <rpl_select_dag+0x192>
    c6b0:	e005      	b.n	c6be <rpl_select_dag+0x12a>
  } else if(!acceptable_rank(best_dag, best_dag->rank)) {
    PRINTF("RPL: New rank unacceptable!\n\r");
    rpl_set_preferred_parent(instance->current_dag, NULL);
    if(instance->mop != RPL_MOP_NO_DOWNWARD_ROUTES && last_parent != NULL) {
      /* Send a No-Path DAO to the removed preferred parent. */
      dao_output(last_parent, RPL_ZERO_LIFETIME);
    c6b2:	1c38      	adds	r0, r7, #0
    c6b4:	2100      	movs	r1, #0
    c6b6:	4b29      	ldr	r3, [pc, #164]	; (c75c <rpl_select_dag+0x1c8>)
    c6b8:	4798      	blx	r3
    }
    return NULL;
    c6ba:	2000      	movs	r0, #0
    c6bc:	e03c      	b.n	c738 <rpl_select_dag+0x1a4>
  }

  if(best_dag->preferred_parent != last_parent) {
    c6be:	69a0      	ldr	r0, [r4, #24]
    c6c0:	42b8      	cmp	r0, r7
    c6c2:	d029      	beq.n	c718 <rpl_select_dag+0x184>
    rpl_set_default_route(instance, rpl_get_parent_ipaddr(best_dag->preferred_parent));
    c6c4:	4b26      	ldr	r3, [pc, #152]	; (c760 <rpl_select_dag+0x1cc>)
    c6c6:	4798      	blx	r3
    c6c8:	1c01      	adds	r1, r0, #0
    c6ca:	1c28      	adds	r0, r5, #0
    c6cc:	4b25      	ldr	r3, [pc, #148]	; (c764 <rpl_select_dag+0x1d0>)
    c6ce:	4798      	blx	r3
    PRINTF("RPL: Changed preferred parent, rank changed from %u to %u\n\r",
  	(unsigned)old_rank, best_dag->rank);
    RPL_STAT(rpl_stats.parent_switch++);
    if(instance->mop != RPL_MOP_NO_DOWNWARD_ROUTES) {
    c6d0:	238f      	movs	r3, #143	; 0x8f
    c6d2:	5ceb      	ldrb	r3, [r5, r3]
    c6d4:	2b00      	cmp	r3, #0
    c6d6:	d016      	beq.n	c706 <rpl_select_dag+0x172>
      if(last_parent != NULL) {
    c6d8:	2f00      	cmp	r7, #0
    c6da:	d003      	beq.n	c6e4 <rpl_select_dag+0x150>
        /* Send a No-Path DAO to the removed preferred parent. */
        dao_output(last_parent, RPL_ZERO_LIFETIME);
    c6dc:	1c38      	adds	r0, r7, #0
    c6de:	2100      	movs	r1, #0
    c6e0:	4b1e      	ldr	r3, [pc, #120]	; (c75c <rpl_select_dag+0x1c8>)
    c6e2:	4798      	blx	r3
      }
      /* The DAO parent set changed - schedule a DAO transmission. */
      RPL_LOLLIPOP_INCREMENT(instance->dtsn_out);
    c6e4:	238e      	movs	r3, #142	; 0x8e
    c6e6:	5ceb      	ldrb	r3, [r5, r3]
    c6e8:	b25a      	sxtb	r2, r3
    c6ea:	2a00      	cmp	r2, #0
    c6ec:	da03      	bge.n	c6f6 <rpl_select_dag+0x162>
    c6ee:	3301      	adds	r3, #1
    c6f0:	228e      	movs	r2, #142	; 0x8e
    c6f2:	54ab      	strb	r3, [r5, r2]
    c6f4:	e004      	b.n	c700 <rpl_select_dag+0x16c>
    c6f6:	3301      	adds	r3, #1
    c6f8:	227f      	movs	r2, #127	; 0x7f
    c6fa:	4013      	ands	r3, r2
    c6fc:	320f      	adds	r2, #15
    c6fe:	54ab      	strb	r3, [r5, r2]
      rpl_schedule_dao(instance);
    c700:	1c28      	adds	r0, r5, #0
    c702:	4b19      	ldr	r3, [pc, #100]	; (c768 <rpl_select_dag+0x1d4>)
    c704:	4798      	blx	r3
    }
    rpl_reset_dio_timer(instance);
    c706:	1c28      	adds	r0, r5, #0
    c708:	4b18      	ldr	r3, [pc, #96]	; (c76c <rpl_select_dag+0x1d8>)
    c70a:	4798      	blx	r3
    c70c:	1c20      	adds	r0, r4, #0
    c70e:	e013      	b.n	c738 <rpl_select_dag+0x1a4>
    }
  }

  if(best_dag == NULL) {
    /* No parent found: the calling function handle this problem. */
    return NULL;
    c710:	2000      	movs	r0, #0
    c712:	e011      	b.n	c738 <rpl_select_dag+0x1a4>
    c714:	2000      	movs	r0, #0
    c716:	e00f      	b.n	c738 <rpl_select_dag+0x1a4>
    c718:	1c20      	adds	r0, r4, #0
    c71a:	e00d      	b.n	c738 <rpl_select_dag+0x1a4>
    c71c:	2000      	movs	r0, #0
    c71e:	e00b      	b.n	c738 <rpl_select_dag+0x1a4>
        }
      }
    }
  }

  if(best_dag == NULL) {
    c720:	2c00      	cmp	r4, #0
    c722:	d19c      	bne.n	c65e <rpl_select_dag+0xca>
    c724:	e7fa      	b.n	c71c <rpl_select_dag+0x188>
  best_dag->rank = instance->of->calculate_rank(best_dag->preferred_parent, 0);
  if(last_parent == NULL || best_dag->rank < best_dag->min_rank) {
    best_dag->min_rank = best_dag->rank;
  } else if(!acceptable_rank(best_dag, best_dag->rank)) {
    PRINTF("RPL: New rank unacceptable!\n\r");
    rpl_set_preferred_parent(instance->current_dag, NULL);
    c726:	68e8      	ldr	r0, [r5, #12]
    c728:	2100      	movs	r1, #0
    c72a:	4b11      	ldr	r3, [pc, #68]	; (c770 <rpl_select_dag+0x1dc>)
    c72c:	4798      	blx	r3
    if(instance->mop != RPL_MOP_NO_DOWNWARD_ROUTES && last_parent != NULL) {
    c72e:	238f      	movs	r3, #143	; 0x8f
    c730:	5ceb      	ldrb	r3, [r5, r3]
    c732:	2b00      	cmp	r3, #0
    c734:	d1bd      	bne.n	c6b2 <rpl_select_dag+0x11e>
      /* Send a No-Path DAO to the removed preferred parent. */
      dao_output(last_parent, RPL_ZERO_LIFETIME);
    }
    return NULL;
    c736:	2000      	movs	r0, #0
  } else if(best_dag->rank != old_rank) {
    PRINTF("RPL: Preferred parent update, rank changed from %u to %u\n\r",
  	(unsigned)old_rank, best_dag->rank);
  }
  return best_dag;
}
    c738:	b002      	add	sp, #8
    c73a:	bc1c      	pop	{r2, r3, r4}
    c73c:	4690      	mov	r8, r2
    c73e:	4699      	mov	r9, r3
    c740:	46a2      	mov	sl, r4
    c742:	bdf0      	pop	{r4, r5, r6, r7, pc}
    c744:	0000c529 	.word	0x0000c529
    c748:	0000ffff 	.word	0x0000ffff
    c74c:	0000e33d 	.word	0x0000e33d
    c750:	0000c2a1 	.word	0x0000c2a1
    c754:	00010525 	.word	0x00010525
    c758:	00010645 	.word	0x00010645
    c75c:	0000db0d 	.word	0x0000db0d
    c760:	0000c36d 	.word	0x0000c36d
    c764:	0000c419 	.word	0x0000c419
    c768:	0000e295 	.word	0x0000e295
    c76c:	0000e271 	.word	0x0000e271
    c770:	0000c235 	.word	0x0000c235

0000c774 <rpl_nullify_parent>:
  nbr_table_remove(rpl_parents, parent);
}
/*---------------------------------------------------------------------------*/
void
rpl_nullify_parent(rpl_parent_t *parent)
{
    c774:	b538      	push	{r3, r4, r5, lr}
  rpl_dag_t *dag = parent->dag;
    c776:	6845      	ldr	r5, [r0, #4]
  /* This function can be called when the preferred parent is NULL, so we
     need to handle this condition in order to trigger uip_ds6_defrt_rm. */
  if(parent == dag->preferred_parent || dag->preferred_parent == NULL) {
    c778:	69ab      	ldr	r3, [r5, #24]
    c77a:	4283      	cmp	r3, r0
    c77c:	d001      	beq.n	c782 <rpl_nullify_parent+0xe>
    c77e:	2b00      	cmp	r3, #0
    c780:	d119      	bne.n	c7b6 <rpl_nullify_parent+0x42>
    c782:	1c04      	adds	r4, r0, #0
    rpl_set_preferred_parent(dag, NULL);
    c784:	1c28      	adds	r0, r5, #0
    c786:	2100      	movs	r1, #0
    c788:	4b0b      	ldr	r3, [pc, #44]	; (c7b8 <rpl_nullify_parent+0x44>)
    c78a:	4798      	blx	r3
    dag->rank = INFINITE_RANK;
    c78c:	2301      	movs	r3, #1
    c78e:	425b      	negs	r3, r3
    c790:	83ab      	strh	r3, [r5, #28]
    if(dag->joined) {
    c792:	7dab      	ldrb	r3, [r5, #22]
    c794:	2b00      	cmp	r3, #0
    c796:	d00e      	beq.n	c7b6 <rpl_nullify_parent+0x42>
      if(dag->instance->def_route != NULL) {
    c798:	2388      	movs	r3, #136	; 0x88
    c79a:	6a2a      	ldr	r2, [r5, #32]
    c79c:	58d0      	ldr	r0, [r2, r3]
    c79e:	2800      	cmp	r0, #0
    c7a0:	d005      	beq.n	c7ae <rpl_nullify_parent+0x3a>
        PRINTF("RPL: Removing default route ");
        PRINT6ADDR(rpl_get_parent_ipaddr(parent));
        PRINTF("\n\r");
        uip_ds6_defrt_rm(dag->instance->def_route);
    c7a2:	4b06      	ldr	r3, [pc, #24]	; (c7bc <rpl_nullify_parent+0x48>)
    c7a4:	4798      	blx	r3
        dag->instance->def_route = NULL;
    c7a6:	6a2a      	ldr	r2, [r5, #32]
    c7a8:	2100      	movs	r1, #0
    c7aa:	2388      	movs	r3, #136	; 0x88
    c7ac:	50d1      	str	r1, [r2, r3]
      }
      dao_output(parent, RPL_ZERO_LIFETIME);
    c7ae:	1c20      	adds	r0, r4, #0
    c7b0:	2100      	movs	r1, #0
    c7b2:	4b03      	ldr	r3, [pc, #12]	; (c7c0 <rpl_nullify_parent+0x4c>)
    c7b4:	4798      	blx	r3
  }

  PRINTF("RPL: Nullifying parent ");
  PRINT6ADDR(rpl_get_parent_ipaddr(parent));
  PRINTF("\n\r");
}
    c7b6:	bd38      	pop	{r3, r4, r5, pc}
    c7b8:	0000c235 	.word	0x0000c235
    c7bc:	0000711d 	.word	0x0000711d
    c7c0:	0000db0d 	.word	0x0000db0d

0000c7c4 <rpl_remove_parent>:
  return best;
}
/*---------------------------------------------------------------------------*/
void
rpl_remove_parent(rpl_parent_t *parent)
{
    c7c4:	b510      	push	{r4, lr}
    c7c6:	1c04      	adds	r4, r0, #0
  PRINTF("RPL: Removing parent ");
  PRINT6ADDR(rpl_get_parent_ipaddr(parent));
  PRINTF("\n\r");

  rpl_nullify_parent(parent);
    c7c8:	4b03      	ldr	r3, [pc, #12]	; (c7d8 <rpl_remove_parent+0x14>)
    c7ca:	4798      	blx	r3

  nbr_table_remove(rpl_parents, parent);
    c7cc:	4803      	ldr	r0, [pc, #12]	; (c7dc <rpl_remove_parent+0x18>)
    c7ce:	1c21      	adds	r1, r4, #0
    c7d0:	4b03      	ldr	r3, [pc, #12]	; (c7e0 <rpl_remove_parent+0x1c>)
    c7d2:	4798      	blx	r3
}
    c7d4:	bd10      	pop	{r4, pc}
    c7d6:	46c0      	nop			; (mov r8, r8)
    c7d8:	0000c775 	.word	0x0000c775
    c7dc:	20000124 	.word	0x20000124
    c7e0:	0000bd45 	.word	0x0000bd45

0000c7e4 <nbr_callback>:
rpl_instance_t instance_table[RPL_MAX_INSTANCES];
rpl_instance_t *default_instance;
/*---------------------------------------------------------------------------*/
static void
nbr_callback(void *ptr)
{
    c7e4:	b508      	push	{r3, lr}
  rpl_remove_parent(ptr);
    c7e6:	4b01      	ldr	r3, [pc, #4]	; (c7ec <nbr_callback+0x8>)
    c7e8:	4798      	blx	r3
}
    c7ea:	bd08      	pop	{r3, pc}
    c7ec:	0000c7c5 	.word	0x0000c7c5

0000c7f0 <remove_parents>:
}
/*---------------------------------------------------------------------------*/
/* Remove DAG parents with a rank that is at least the same as minimum_rank. */
static void
remove_parents(rpl_dag_t *dag, rpl_rank_t minimum_rank)
{
    c7f0:	b5f0      	push	{r4, r5, r6, r7, lr}
    c7f2:	4647      	mov	r7, r8
    c7f4:	b480      	push	{r7}
    c7f6:	1c05      	adds	r5, r0, #0
    c7f8:	4688      	mov	r8, r1
  rpl_parent_t *p;

  PRINTF("RPL: Removing parents (minimum rank %u)\n\r",
	minimum_rank);

  p = nbr_table_head(rpl_parents);
    c7fa:	480c      	ldr	r0, [pc, #48]	; (c82c <remove_parents+0x3c>)
    c7fc:	4b0c      	ldr	r3, [pc, #48]	; (c830 <remove_parents+0x40>)
    c7fe:	4798      	blx	r3
    c800:	1e04      	subs	r4, r0, #0
  while(p != NULL) {
    c802:	d00f      	beq.n	c824 <remove_parents+0x34>
    if(dag == p->dag && p->rank >= minimum_rank) {
      rpl_remove_parent(p);
    }
    p = nbr_table_next(rpl_parents, p);
    c804:	4f09      	ldr	r7, [pc, #36]	; (c82c <remove_parents+0x3c>)
    c806:	4e0b      	ldr	r6, [pc, #44]	; (c834 <remove_parents+0x44>)
  PRINTF("RPL: Removing parents (minimum rank %u)\n\r",
	minimum_rank);

  p = nbr_table_head(rpl_parents);
  while(p != NULL) {
    if(dag == p->dag && p->rank >= minimum_rank) {
    c808:	6863      	ldr	r3, [r4, #4]
    c80a:	42ab      	cmp	r3, r5
    c80c:	d105      	bne.n	c81a <remove_parents+0x2a>
    c80e:	8923      	ldrh	r3, [r4, #8]
    c810:	4543      	cmp	r3, r8
    c812:	d302      	bcc.n	c81a <remove_parents+0x2a>
      rpl_remove_parent(p);
    c814:	1c20      	adds	r0, r4, #0
    c816:	4b08      	ldr	r3, [pc, #32]	; (c838 <remove_parents+0x48>)
    c818:	4798      	blx	r3
    }
    p = nbr_table_next(rpl_parents, p);
    c81a:	1c38      	adds	r0, r7, #0
    c81c:	1c21      	adds	r1, r4, #0
    c81e:	47b0      	blx	r6
    c820:	1e04      	subs	r4, r0, #0

  PRINTF("RPL: Removing parents (minimum rank %u)\n\r",
	minimum_rank);

  p = nbr_table_head(rpl_parents);
  while(p != NULL) {
    c822:	d1f1      	bne.n	c808 <remove_parents+0x18>
    if(dag == p->dag && p->rank >= minimum_rank) {
      rpl_remove_parent(p);
    }
    p = nbr_table_next(rpl_parents, p);
  }
}
    c824:	bc04      	pop	{r2}
    c826:	4690      	mov	r8, r2
    c828:	bdf0      	pop	{r4, r5, r6, r7, pc}
    c82a:	46c0      	nop			; (mov r8, r8)
    c82c:	20000124 	.word	0x20000124
    c830:	0000bb31 	.word	0x0000bb31
    c834:	0000bac5 	.word	0x0000bac5
    c838:	0000c7c5 	.word	0x0000c7c5

0000c83c <rpl_free_dag>:
  instance->used = 0;
}
/*---------------------------------------------------------------------------*/
void
rpl_free_dag(rpl_dag_t *dag)
{
    c83c:	b510      	push	{r4, lr}
    c83e:	1c04      	adds	r4, r0, #0
  if(dag->joined) {
    c840:	7d83      	ldrb	r3, [r0, #22]
    c842:	2b00      	cmp	r3, #0
    c844:	d010      	beq.n	c868 <rpl_free_dag+0x2c>
    PRINTF("RPL: Leaving the DAG ");
    PRINT6ADDR(&dag->dag_id);
    PRINTF("\n\r");
    dag->joined = 0;
    c846:	2300      	movs	r3, #0
    c848:	7583      	strb	r3, [r0, #22]

    /* Remove routes installed by DAOs. */
    rpl_remove_routes(dag);
    c84a:	4b09      	ldr	r3, [pc, #36]	; (c870 <rpl_free_dag+0x34>)
    c84c:	4798      	blx	r3

   /* Remove autoconfigured address */
    if((dag->prefix_info.flags & UIP_ND6_RA_FLAG_AUTONOMOUS)) {
    c84e:	2339      	movs	r3, #57	; 0x39
    c850:	5ce3      	ldrb	r3, [r4, r3]
    c852:	065b      	lsls	r3, r3, #25
    c854:	d504      	bpl.n	c860 <rpl_free_dag+0x24>
      check_prefix(&dag->prefix_info, NULL);
    c856:	1c20      	adds	r0, r4, #0
    c858:	3024      	adds	r0, #36	; 0x24
    c85a:	2100      	movs	r1, #0
    c85c:	4b05      	ldr	r3, [pc, #20]	; (c874 <rpl_free_dag+0x38>)
    c85e:	4798      	blx	r3
    }

    remove_parents(dag, 0);
    c860:	1c20      	adds	r0, r4, #0
    c862:	2100      	movs	r1, #0
    c864:	4b04      	ldr	r3, [pc, #16]	; (c878 <rpl_free_dag+0x3c>)
    c866:	4798      	blx	r3
  }
  dag->used = 0;
    c868:	2300      	movs	r3, #0
    c86a:	7563      	strb	r3, [r4, #21]
}
    c86c:	bd10      	pop	{r4, pc}
    c86e:	46c0      	nop			; (mov r8, r8)
    c870:	0000e33d 	.word	0x0000e33d
    c874:	0000c2a1 	.word	0x0000c2a1
    c878:	0000c7f1 	.word	0x0000c7f1

0000c87c <rpl_free_instance>:
  default_instance = instance;
}
/*---------------------------------------------------------------------------*/
void
rpl_free_instance(rpl_instance_t *instance)
{
    c87c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    c87e:	1c07      	adds	r7, r0, #0
  rpl_dag_t *end;

  PRINTF("RPL: Leaving the instance %u\n\r", instance->instance_id);

  /* Remove any DAG inside this instance */
  for(dag = &instance->dag_table[0], end = dag + RPL_MAX_DAG_PER_INSTANCE; dag < end; ++dag) {
    c880:	1c04      	adds	r4, r0, #0
    c882:	3410      	adds	r4, #16
    c884:	1c05      	adds	r5, r0, #0
    c886:	3588      	adds	r5, #136	; 0x88
    c888:	42ac      	cmp	r4, r5
    c88a:	d208      	bcs.n	c89e <rpl_free_instance+0x22>
    if(dag->used) {
      rpl_free_dag(dag);
    c88c:	4e0f      	ldr	r6, [pc, #60]	; (c8cc <rpl_free_instance+0x50>)

  PRINTF("RPL: Leaving the instance %u\n\r", instance->instance_id);

  /* Remove any DAG inside this instance */
  for(dag = &instance->dag_table[0], end = dag + RPL_MAX_DAG_PER_INSTANCE; dag < end; ++dag) {
    if(dag->used) {
    c88e:	7d63      	ldrb	r3, [r4, #21]
    c890:	2b00      	cmp	r3, #0
    c892:	d001      	beq.n	c898 <rpl_free_instance+0x1c>
      rpl_free_dag(dag);
    c894:	1c20      	adds	r0, r4, #0
    c896:	47b0      	blx	r6
  rpl_dag_t *end;

  PRINTF("RPL: Leaving the instance %u\n\r", instance->instance_id);

  /* Remove any DAG inside this instance */
  for(dag = &instance->dag_table[0], end = dag + RPL_MAX_DAG_PER_INSTANCE; dag < end; ++dag) {
    c898:	343c      	adds	r4, #60	; 0x3c
    c89a:	42a5      	cmp	r5, r4
    c89c:	d8f7      	bhi.n	c88e <rpl_free_instance+0x12>
    if(dag->used) {
      rpl_free_dag(dag);
    }
  }

  rpl_set_default_route(instance, NULL);
    c89e:	1c38      	adds	r0, r7, #0
    c8a0:	2100      	movs	r1, #0
    c8a2:	4b0b      	ldr	r3, [pc, #44]	; (c8d0 <rpl_free_instance+0x54>)
    c8a4:	4798      	blx	r3

  ctimer_stop(&instance->dio_timer);
    c8a6:	1c38      	adds	r0, r7, #0
    c8a8:	30a4      	adds	r0, #164	; 0xa4
    c8aa:	4c0a      	ldr	r4, [pc, #40]	; (c8d4 <rpl_free_instance+0x58>)
    c8ac:	47a0      	blx	r4
  ctimer_stop(&instance->dao_timer);
    c8ae:	1c38      	adds	r0, r7, #0
    c8b0:	30c4      	adds	r0, #196	; 0xc4
    c8b2:	47a0      	blx	r4

  if(default_instance == instance) {
    c8b4:	4b08      	ldr	r3, [pc, #32]	; (c8d8 <rpl_free_instance+0x5c>)
    c8b6:	681b      	ldr	r3, [r3, #0]
    c8b8:	42bb      	cmp	r3, r7
    c8ba:	d102      	bne.n	c8c2 <rpl_free_instance+0x46>
    default_instance = NULL;
    c8bc:	2200      	movs	r2, #0
    c8be:	4b06      	ldr	r3, [pc, #24]	; (c8d8 <rpl_free_instance+0x5c>)
    c8c0:	601a      	str	r2, [r3, #0]
  }

  instance->used = 0;
    c8c2:	2200      	movs	r2, #0
    c8c4:	238d      	movs	r3, #141	; 0x8d
    c8c6:	54fa      	strb	r2, [r7, r3]
}
    c8c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    c8ca:	46c0      	nop			; (mov r8, r8)
    c8cc:	0000c83d 	.word	0x0000c83d
    c8d0:	0000c419 	.word	0x0000c419
    c8d4:	0000e705 	.word	0x0000e705
    c8d8:	20003284 	.word	0x20003284

0000c8dc <rpl_move_parent>:
  PRINTF("\n\r");
}
/*---------------------------------------------------------------------------*/
void
rpl_move_parent(rpl_dag_t *dag_src, rpl_dag_t *dag_dst, rpl_parent_t *parent)
{
    c8dc:	b570      	push	{r4, r5, r6, lr}
    c8de:	1c04      	adds	r4, r0, #0
    c8e0:	1c0e      	adds	r6, r1, #0
    c8e2:	1c15      	adds	r5, r2, #0
  if(parent == dag_src->preferred_parent) {
    c8e4:	6983      	ldr	r3, [r0, #24]
    c8e6:	4293      	cmp	r3, r2
    c8e8:	d114      	bne.n	c914 <rpl_move_parent+0x38>
      rpl_set_preferred_parent(dag_src, NULL);
    c8ea:	2100      	movs	r1, #0
    c8ec:	4b0f      	ldr	r3, [pc, #60]	; (c92c <rpl_move_parent+0x50>)
    c8ee:	4798      	blx	r3
      dag_src->rank = INFINITE_RANK;
    c8f0:	2301      	movs	r3, #1
    c8f2:	425b      	negs	r3, r3
    c8f4:	83a3      	strh	r3, [r4, #28]
    if(dag_src->joined && dag_src->instance->def_route != NULL) {
    c8f6:	7da3      	ldrb	r3, [r4, #22]
    c8f8:	2b00      	cmp	r3, #0
    c8fa:	d014      	beq.n	c926 <rpl_move_parent+0x4a>
    c8fc:	2388      	movs	r3, #136	; 0x88
    c8fe:	6a22      	ldr	r2, [r4, #32]
    c900:	58d0      	ldr	r0, [r2, r3]
    c902:	2800      	cmp	r0, #0
    c904:	d00f      	beq.n	c926 <rpl_move_parent+0x4a>
      PRINTF("RPL: Removing default route ");
      PRINT6ADDR(rpl_get_parent_ipaddr(parent));
      PRINTF("\n\r");
      PRINTF("rpl_move_parent\n\r");
      uip_ds6_defrt_rm(dag_src->instance->def_route);
    c906:	4b0a      	ldr	r3, [pc, #40]	; (c930 <rpl_move_parent+0x54>)
    c908:	4798      	blx	r3
      dag_src->instance->def_route = NULL;
    c90a:	6a22      	ldr	r2, [r4, #32]
    c90c:	2100      	movs	r1, #0
    c90e:	2388      	movs	r3, #136	; 0x88
    c910:	50d1      	str	r1, [r2, r3]
    c912:	e008      	b.n	c926 <rpl_move_parent+0x4a>
    }
  } else if(dag_src->joined) {
    c914:	7d83      	ldrb	r3, [r0, #22]
    c916:	2b00      	cmp	r3, #0
    c918:	d005      	beq.n	c926 <rpl_move_parent+0x4a>
    /* Remove uIPv6 routes that have this parent as the next hop. */
    rpl_remove_routes_by_nexthop(rpl_get_parent_ipaddr(parent), dag_src);
    c91a:	1c10      	adds	r0, r2, #0
    c91c:	4b05      	ldr	r3, [pc, #20]	; (c934 <rpl_move_parent+0x58>)
    c91e:	4798      	blx	r3
    c920:	1c21      	adds	r1, r4, #0
    c922:	4b05      	ldr	r3, [pc, #20]	; (c938 <rpl_move_parent+0x5c>)
    c924:	4798      	blx	r3

  PRINTF("RPL: Moving parent ");
  PRINT6ADDR(rpl_get_parent_ipaddr(parent));
  PRINTF("\n\r");

  parent->dag = dag_dst;
    c926:	606e      	str	r6, [r5, #4]
}
    c928:	bd70      	pop	{r4, r5, r6, pc}
    c92a:	46c0      	nop			; (mov r8, r8)
    c92c:	0000c235 	.word	0x0000c235
    c930:	0000711d 	.word	0x0000711d
    c934:	0000c36d 	.word	0x0000c36d
    c938:	0000e371 	.word	0x0000e371

0000c93c <rpl_get_any_dag>:
rpl_get_any_dag(void)
{
  int i;

  for(i = 0; i < RPL_MAX_INSTANCES; ++i) {
    if(instance_table[i].used && instance_table[i].current_dag->joined) {
    c93c:	238d      	movs	r3, #141	; 0x8d
    c93e:	4a06      	ldr	r2, [pc, #24]	; (c958 <rpl_get_any_dag+0x1c>)
    c940:	5cd3      	ldrb	r3, [r2, r3]
      return instance_table[i].current_dag;
    }
  }
  return NULL;
    c942:	2000      	movs	r0, #0
rpl_get_any_dag(void)
{
  int i;

  for(i = 0; i < RPL_MAX_INSTANCES; ++i) {
    if(instance_table[i].used && instance_table[i].current_dag->joined) {
    c944:	2b00      	cmp	r3, #0
    c946:	d005      	beq.n	c954 <rpl_get_any_dag+0x18>
    c948:	68d0      	ldr	r0, [r2, #12]
    c94a:	7d83      	ldrb	r3, [r0, #22]
      return instance_table[i].current_dag;
    }
  }
  return NULL;
    c94c:	1e5a      	subs	r2, r3, #1
    c94e:	4193      	sbcs	r3, r2
    c950:	425b      	negs	r3, r3
    c952:	4018      	ands	r0, r3
}
    c954:	4770      	bx	lr
    c956:	46c0      	nop			; (mov r8, r8)
    c958:	20003288 	.word	0x20003288

0000c95c <rpl_get_instance>:
rpl_get_instance(uint8_t instance_id)
{
  int i;

  for(i = 0; i < RPL_MAX_INSTANCES; ++i) {
    if(instance_table[i].used && instance_table[i].instance_id == instance_id) {
    c95c:	238d      	movs	r3, #141	; 0x8d
    c95e:	4a07      	ldr	r2, [pc, #28]	; (c97c <rpl_get_instance+0x20>)
    c960:	5cd2      	ldrb	r2, [r2, r3]
      return &instance_table[i];
    }
  }
  return NULL;
    c962:	2300      	movs	r3, #0
rpl_get_instance(uint8_t instance_id)
{
  int i;

  for(i = 0; i < RPL_MAX_INSTANCES; ++i) {
    if(instance_table[i].used && instance_table[i].instance_id == instance_id) {
    c964:	2a00      	cmp	r2, #0
    c966:	d006      	beq.n	c976 <rpl_get_instance+0x1a>
    c968:	338c      	adds	r3, #140	; 0x8c
    c96a:	4a04      	ldr	r2, [pc, #16]	; (c97c <rpl_get_instance+0x20>)
    c96c:	5cd2      	ldrb	r2, [r2, r3]
      return &instance_table[i];
    }
  }
  return NULL;
    c96e:	2300      	movs	r3, #0
rpl_get_instance(uint8_t instance_id)
{
  int i;

  for(i = 0; i < RPL_MAX_INSTANCES; ++i) {
    if(instance_table[i].used && instance_table[i].instance_id == instance_id) {
    c970:	4282      	cmp	r2, r0
    c972:	d100      	bne.n	c976 <rpl_get_instance+0x1a>
      return &instance_table[i];
    c974:	4b01      	ldr	r3, [pc, #4]	; (c97c <rpl_get_instance+0x20>)
    }
  }
  return NULL;
}
    c976:	1c18      	adds	r0, r3, #0
    c978:	4770      	bx	lr
    c97a:	46c0      	nop			; (mov r8, r8)
    c97c:	20003288 	.word	0x20003288

0000c980 <get_dag>:
     DAG_RANK(rank, dag->instance) <= DAG_RANK(dag->min_rank + dag->instance->max_rankinc, dag->instance));
}
/*---------------------------------------------------------------------------*/
static rpl_dag_t *
get_dag(uint8_t instance_id, uip_ipaddr_t *dag_id)
{
    c980:	b570      	push	{r4, r5, r6, lr}
    c982:	1c0d      	adds	r5, r1, #0
  rpl_instance_t *instance;
  rpl_dag_t *dag;
  int i;

  instance = rpl_get_instance(instance_id);
    c984:	4b12      	ldr	r3, [pc, #72]	; (c9d0 <get_dag+0x50>)
    c986:	4798      	blx	r3
    c988:	1e04      	subs	r4, r0, #0
  if(instance == NULL) {
    c98a:	d01e      	beq.n	c9ca <get_dag+0x4a>
    return NULL;
  }

  for(i = 0; i < RPL_MAX_DAG_PER_INSTANCE; ++i) {
    dag = &instance->dag_table[i];
    if(dag->used && uip_ipaddr_cmp(&dag->dag_id, dag_id)) {
    c98c:	2325      	movs	r3, #37	; 0x25
    c98e:	5cc3      	ldrb	r3, [r0, r3]
    c990:	2b00      	cmp	r3, #0
    c992:	d008      	beq.n	c9a6 <get_dag+0x26>
  if(instance == NULL) {
    return NULL;
  }

  for(i = 0; i < RPL_MAX_DAG_PER_INSTANCE; ++i) {
    dag = &instance->dag_table[i];
    c994:	1c06      	adds	r6, r0, #0
    c996:	3610      	adds	r6, #16
    if(dag->used && uip_ipaddr_cmp(&dag->dag_id, dag_id)) {
    c998:	1c30      	adds	r0, r6, #0
    c99a:	1c29      	adds	r1, r5, #0
    c99c:	2210      	movs	r2, #16
    c99e:	4b0d      	ldr	r3, [pc, #52]	; (c9d4 <get_dag+0x54>)
    c9a0:	4798      	blx	r3
    c9a2:	2800      	cmp	r0, #0
    c9a4:	d00f      	beq.n	c9c6 <get_dag+0x46>
    c9a6:	2361      	movs	r3, #97	; 0x61
    c9a8:	5ce3      	ldrb	r3, [r4, r3]
      return dag;
    }
  }

  return NULL;
    c9aa:	2000      	movs	r0, #0
    return NULL;
  }

  for(i = 0; i < RPL_MAX_DAG_PER_INSTANCE; ++i) {
    dag = &instance->dag_table[i];
    if(dag->used && uip_ipaddr_cmp(&dag->dag_id, dag_id)) {
    c9ac:	2b00      	cmp	r3, #0
    c9ae:	d00d      	beq.n	c9cc <get_dag+0x4c>
  if(instance == NULL) {
    return NULL;
  }

  for(i = 0; i < RPL_MAX_DAG_PER_INSTANCE; ++i) {
    dag = &instance->dag_table[i];
    c9b0:	344c      	adds	r4, #76	; 0x4c
    c9b2:	1c26      	adds	r6, r4, #0
    if(dag->used && uip_ipaddr_cmp(&dag->dag_id, dag_id)) {
    c9b4:	1c20      	adds	r0, r4, #0
    c9b6:	1c29      	adds	r1, r5, #0
    c9b8:	2210      	movs	r2, #16
    c9ba:	4b06      	ldr	r3, [pc, #24]	; (c9d4 <get_dag+0x54>)
    c9bc:	4798      	blx	r3
    c9be:	1c03      	adds	r3, r0, #0
      return dag;
    }
  }

  return NULL;
    c9c0:	2000      	movs	r0, #0
    return NULL;
  }

  for(i = 0; i < RPL_MAX_DAG_PER_INSTANCE; ++i) {
    dag = &instance->dag_table[i];
    if(dag->used && uip_ipaddr_cmp(&dag->dag_id, dag_id)) {
    c9c2:	2b00      	cmp	r3, #0
    c9c4:	d102      	bne.n	c9cc <get_dag+0x4c>
  if(instance == NULL) {
    return NULL;
  }

  for(i = 0; i < RPL_MAX_DAG_PER_INSTANCE; ++i) {
    dag = &instance->dag_table[i];
    c9c6:	1c30      	adds	r0, r6, #0
    c9c8:	e000      	b.n	c9cc <get_dag+0x4c>
  rpl_dag_t *dag;
  int i;

  instance = rpl_get_instance(instance_id);
  if(instance == NULL) {
    return NULL;
    c9ca:	2000      	movs	r0, #0
      return dag;
    }
  }

  return NULL;
}
    c9cc:	bd70      	pop	{r4, r5, r6, pc}
    c9ce:	46c0      	nop			; (mov r8, r8)
    c9d0:	0000c95d 	.word	0x0000c95d
    c9d4:	000108c9 	.word	0x000108c9

0000c9d8 <rpl_repair_root>:
  return dag;
}
/*---------------------------------------------------------------------------*/
int
rpl_repair_root(uint8_t instance_id)
{
    c9d8:	b510      	push	{r4, lr}
  rpl_instance_t *instance;

  instance = rpl_get_instance(instance_id);
    c9da:	4b15      	ldr	r3, [pc, #84]	; (ca30 <rpl_repair_root+0x58>)
    c9dc:	4798      	blx	r3
  if(instance == NULL ||
    c9de:	2800      	cmp	r0, #0
    c9e0:	d023      	beq.n	ca2a <rpl_repair_root+0x52>
     instance->current_dag->rank != ROOT_RANK(instance)) {
    c9e2:	68c3      	ldr	r3, [r0, #12]
rpl_repair_root(uint8_t instance_id)
{
  rpl_instance_t *instance;

  instance = rpl_get_instance(instance_id);
  if(instance == NULL ||
    c9e4:	8b9c      	ldrh	r4, [r3, #28]
    c9e6:	229a      	movs	r2, #154	; 0x9a
    c9e8:	5a81      	ldrh	r1, [r0, r2]
     instance->current_dag->rank != ROOT_RANK(instance)) {
    PRINTF("RPL: rpl_repair_root triggered but not root\n\r");
    return 0;
    c9ea:	2200      	movs	r2, #0
rpl_repair_root(uint8_t instance_id)
{
  rpl_instance_t *instance;

  instance = rpl_get_instance(instance_id);
  if(instance == NULL ||
    c9ec:	428c      	cmp	r4, r1
    c9ee:	d11d      	bne.n	ca2c <rpl_repair_root+0x54>
     instance->current_dag->rank != ROOT_RANK(instance)) {
    PRINTF("RPL: rpl_repair_root triggered but not root\n\r");
    return 0;
  }

  RPL_LOLLIPOP_INCREMENT(instance->current_dag->version);
    c9f0:	7c9a      	ldrb	r2, [r3, #18]
    c9f2:	b251      	sxtb	r1, r2
    c9f4:	2900      	cmp	r1, #0
    c9f6:	da02      	bge.n	c9fe <rpl_repair_root+0x26>
    c9f8:	3201      	adds	r2, #1
    c9fa:	749a      	strb	r2, [r3, #18]
    c9fc:	e003      	b.n	ca06 <rpl_repair_root+0x2e>
    c9fe:	3201      	adds	r2, #1
    ca00:	217f      	movs	r1, #127	; 0x7f
    ca02:	400a      	ands	r2, r1
    ca04:	749a      	strb	r2, [r3, #18]
  RPL_LOLLIPOP_INCREMENT(instance->dtsn_out);
    ca06:	238e      	movs	r3, #142	; 0x8e
    ca08:	5cc3      	ldrb	r3, [r0, r3]
    ca0a:	b25a      	sxtb	r2, r3
    ca0c:	2a00      	cmp	r2, #0
    ca0e:	da03      	bge.n	ca18 <rpl_repair_root+0x40>
    ca10:	3301      	adds	r3, #1
    ca12:	228e      	movs	r2, #142	; 0x8e
    ca14:	5483      	strb	r3, [r0, r2]
    ca16:	e004      	b.n	ca22 <rpl_repair_root+0x4a>
    ca18:	3301      	adds	r3, #1
    ca1a:	227f      	movs	r2, #127	; 0x7f
    ca1c:	4013      	ands	r3, r2
    ca1e:	320f      	adds	r2, #15
    ca20:	5483      	strb	r3, [r0, r2]
  PRINTF("RPL: rpl_repair_root initiating global repair with version %d\n\r", instance->current_dag->version);
  rpl_reset_dio_timer(instance);
    ca22:	4b04      	ldr	r3, [pc, #16]	; (ca34 <rpl_repair_root+0x5c>)
    ca24:	4798      	blx	r3
  return 1;
    ca26:	2201      	movs	r2, #1
    ca28:	e000      	b.n	ca2c <rpl_repair_root+0x54>

  instance = rpl_get_instance(instance_id);
  if(instance == NULL ||
     instance->current_dag->rank != ROOT_RANK(instance)) {
    PRINTF("RPL: rpl_repair_root triggered but not root\n\r");
    return 0;
    ca2a:	2200      	movs	r2, #0
  RPL_LOLLIPOP_INCREMENT(instance->current_dag->version);
  RPL_LOLLIPOP_INCREMENT(instance->dtsn_out);
  PRINTF("RPL: rpl_repair_root initiating global repair with version %d\n\r", instance->current_dag->version);
  rpl_reset_dio_timer(instance);
  return 1;
}
    ca2c:	1c10      	adds	r0, r2, #0
    ca2e:	bd10      	pop	{r4, pc}
    ca30:	0000c95d 	.word	0x0000c95d
    ca34:	0000e271 	.word	0x0000e271

0000ca38 <rpl_alloc_dag>:
  return NULL;
}
/*---------------------------------------------------------------------------*/
rpl_dag_t *
rpl_alloc_dag(uint8_t instance_id, uip_ipaddr_t *dag_id)
{
    ca38:	b538      	push	{r3, r4, r5, lr}
    ca3a:	1c04      	adds	r4, r0, #0
  rpl_dag_t *dag, *end;
  rpl_instance_t *instance;

  instance = rpl_get_instance(instance_id);
    ca3c:	4b16      	ldr	r3, [pc, #88]	; (ca98 <rpl_alloc_dag+0x60>)
    ca3e:	4798      	blx	r3
    ca40:	1e05      	subs	r5, r0, #0
  if(instance == NULL) {
    ca42:	d104      	bne.n	ca4e <rpl_alloc_dag+0x16>
    instance = rpl_alloc_instance(instance_id);
    ca44:	1c20      	adds	r0, r4, #0
    ca46:	4b15      	ldr	r3, [pc, #84]	; (ca9c <rpl_alloc_dag+0x64>)
    ca48:	4798      	blx	r3
    ca4a:	1e05      	subs	r5, r0, #0
    if(instance == NULL) {
    ca4c:	d022      	beq.n	ca94 <rpl_alloc_dag+0x5c>
      RPL_STAT(rpl_stats.mem_overflows++);
      return NULL;
    }
  }

  for(dag = &instance->dag_table[0], end = dag + RPL_MAX_DAG_PER_INSTANCE; dag < end; ++dag) {
    ca4e:	1c2c      	adds	r4, r5, #0
    ca50:	3410      	adds	r4, #16
    ca52:	1c2a      	adds	r2, r5, #0
    ca54:	3288      	adds	r2, #136	; 0x88
    ca56:	4294      	cmp	r4, r2
    ca58:	d217      	bcs.n	ca8a <rpl_alloc_dag+0x52>
    if(!dag->used) {
    ca5a:	2325      	movs	r3, #37	; 0x25
    ca5c:	5ceb      	ldrb	r3, [r5, r3]
    ca5e:	2b00      	cmp	r3, #0
    ca60:	d110      	bne.n	ca84 <rpl_alloc_dag+0x4c>
    ca62:	e002      	b.n	ca6a <rpl_alloc_dag+0x32>
    ca64:	7d63      	ldrb	r3, [r4, #21]
    ca66:	2b00      	cmp	r3, #0
    ca68:	d10c      	bne.n	ca84 <rpl_alloc_dag+0x4c>
      memset(dag, 0, sizeof(*dag));
    ca6a:	1c20      	adds	r0, r4, #0
    ca6c:	2100      	movs	r1, #0
    ca6e:	223c      	movs	r2, #60	; 0x3c
    ca70:	4b0b      	ldr	r3, [pc, #44]	; (caa0 <rpl_alloc_dag+0x68>)
    ca72:	4798      	blx	r3
      dag->used = 1;
    ca74:	2301      	movs	r3, #1
    ca76:	7563      	strb	r3, [r4, #21]
      dag->rank = INFINITE_RANK;
    ca78:	3b02      	subs	r3, #2
    ca7a:	83a3      	strh	r3, [r4, #28]
      dag->min_rank = INFINITE_RANK;
    ca7c:	8223      	strh	r3, [r4, #16]
      dag->instance = instance;
    ca7e:	6225      	str	r5, [r4, #32]
      return dag;
    ca80:	1c20      	adds	r0, r4, #0
    ca82:	e008      	b.n	ca96 <rpl_alloc_dag+0x5e>
      RPL_STAT(rpl_stats.mem_overflows++);
      return NULL;
    }
  }

  for(dag = &instance->dag_table[0], end = dag + RPL_MAX_DAG_PER_INSTANCE; dag < end; ++dag) {
    ca84:	343c      	adds	r4, #60	; 0x3c
    ca86:	42a2      	cmp	r2, r4
    ca88:	d8ec      	bhi.n	ca64 <rpl_alloc_dag+0x2c>
      return dag;
    }
  }

  RPL_STAT(rpl_stats.mem_overflows++);
  rpl_free_instance(instance);
    ca8a:	1c28      	adds	r0, r5, #0
    ca8c:	4b05      	ldr	r3, [pc, #20]	; (caa4 <rpl_alloc_dag+0x6c>)
    ca8e:	4798      	blx	r3
  return NULL;
    ca90:	2000      	movs	r0, #0
    ca92:	e000      	b.n	ca96 <rpl_alloc_dag+0x5e>
  instance = rpl_get_instance(instance_id);
  if(instance == NULL) {
    instance = rpl_alloc_instance(instance_id);
    if(instance == NULL) {
      RPL_STAT(rpl_stats.mem_overflows++);
      return NULL;
    ca94:	2000      	movs	r0, #0
  }

  RPL_STAT(rpl_stats.mem_overflows++);
  rpl_free_instance(instance);
  return NULL;
}
    ca96:	bd38      	pop	{r3, r4, r5, pc}
    ca98:	0000c95d 	.word	0x0000c95d
    ca9c:	0000c45d 	.word	0x0000c45d
    caa0:	00010921 	.word	0x00010921
    caa4:	0000c87d 	.word	0x0000c87d

0000caa8 <rpl_find_of>:
  unsigned int i;

  for(i = 0;
      i < sizeof(objective_functions) / sizeof(objective_functions[0]);
      i++) {
    if(objective_functions[i]->ocp == ocp) {
    caa8:	4b03      	ldr	r3, [pc, #12]	; (cab8 <rpl_find_of+0x10>)
    caaa:	8b1b      	ldrh	r3, [r3, #24]
    caac:	4283      	cmp	r3, r0
    caae:	d001      	beq.n	cab4 <rpl_find_of+0xc>
      return objective_functions[i];
    }
  }

  return NULL;
    cab0:	2000      	movs	r0, #0
    cab2:	e000      	b.n	cab6 <rpl_find_of+0xe>

  for(i = 0;
      i < sizeof(objective_functions) / sizeof(objective_functions[0]);
      i++) {
    if(objective_functions[i]->ocp == ocp) {
      return objective_functions[i];
    cab4:	4800      	ldr	r0, [pc, #0]	; (cab8 <rpl_find_of+0x10>)
    }
  }

  return NULL;
}
    cab6:	4770      	bx	lr
    cab8:	20000168 	.word	0x20000168

0000cabc <rpl_join_instance>:
/*---------------------------------------------------------------------------*/
void
rpl_join_instance(uip_ipaddr_t *from, rpl_dio_t *dio)
{
    cabc:	b5f0      	push	{r4, r5, r6, r7, lr}
    cabe:	464f      	mov	r7, r9
    cac0:	b480      	push	{r7}
    cac2:	b082      	sub	sp, #8
    cac4:	1c05      	adds	r5, r0, #0
    cac6:	9001      	str	r0, [sp, #4]
    cac8:	1c0c      	adds	r4, r1, #0
  rpl_instance_t *instance;
  rpl_dag_t *dag;
  rpl_parent_t *p;
  rpl_of_t *of;

  dag = rpl_alloc_dag(dio->instance_id, &dio->dag_id);
    caca:	7e08      	ldrb	r0, [r1, #24]
    cacc:	4b41      	ldr	r3, [pc, #260]	; (cbd4 <rpl_join_instance+0x118>)
    cace:	4798      	blx	r3
    cad0:	1e06      	subs	r6, r0, #0
  if(dag == NULL) {
    cad2:	d07a      	beq.n	cbca <rpl_join_instance+0x10e>
    PRINTF("RPL: Failed to allocate a DAG object!\n\r");
    return;
  }

  instance = dag->instance;
    cad4:	6a07      	ldr	r7, [r0, #32]

  p = rpl_add_parent(dag, dio, from);
    cad6:	1c21      	adds	r1, r4, #0
    cad8:	1c2a      	adds	r2, r5, #0
    cada:	4b3f      	ldr	r3, [pc, #252]	; (cbd8 <rpl_join_instance+0x11c>)
    cadc:	4798      	blx	r3
    cade:	1e05      	subs	r5, r0, #0
  PRINTF("RPL: Adding ");
  PRINT6ADDR(from);
  PRINTF(" as a parent: ");
  if(p == NULL) {
    cae0:	d103      	bne.n	caea <rpl_join_instance+0x2e>
    PRINTF("failed\n\r");
    instance->used = 0;
    cae2:	2200      	movs	r2, #0
    cae4:	238d      	movs	r3, #141	; 0x8d
    cae6:	54fa      	strb	r2, [r7, r3]
    return;
    cae8:	e06f      	b.n	cbca <rpl_join_instance+0x10e>
  }
  p->dtsn = dio->dtsn;
    caea:	7e63      	ldrb	r3, [r4, #25]
    caec:	7303      	strb	r3, [r0, #12]
  PRINTF("succeeded\n\r");

  /* Determine the objective function by using the
     objective code point of the DIO. */
  of = rpl_find_of(dio->ocp);
    caee:	8a20      	ldrh	r0, [r4, #16]
    caf0:	4b3a      	ldr	r3, [pc, #232]	; (cbdc <rpl_join_instance+0x120>)
    caf2:	4798      	blx	r3
    caf4:	4681      	mov	r9, r0
  if(of == NULL) {
    caf6:	2800      	cmp	r0, #0
    caf8:	d106      	bne.n	cb08 <rpl_join_instance+0x4c>
    PRINTF("RPL: DIO for DAG instance %u does not specify a supported OF\n\r",
        dio->instance_id);
    rpl_remove_parent(p);
    cafa:	1c28      	adds	r0, r5, #0
    cafc:	4b38      	ldr	r3, [pc, #224]	; (cbe0 <rpl_join_instance+0x124>)
    cafe:	4798      	blx	r3
    instance->used = 0;
    cb00:	2200      	movs	r2, #0
    cb02:	238d      	movs	r3, #141	; 0x8d
    cb04:	54fa      	strb	r2, [r7, r3]
    return;
    cb06:	e060      	b.n	cbca <rpl_join_instance+0x10e>
  }

  /* Autoconfigure an address if this node does not already have an address
     with this prefix. */
  if(dio->prefix_info.flags & UIP_ND6_RA_FLAG_AUTONOMOUS) {
    cb08:	2351      	movs	r3, #81	; 0x51
    cb0a:	5ce3      	ldrb	r3, [r4, r3]
    cb0c:	065b      	lsls	r3, r3, #25
    cb0e:	d504      	bpl.n	cb1a <rpl_join_instance+0x5e>
    check_prefix(NULL, &dio->prefix_info);
    cb10:	1c21      	adds	r1, r4, #0
    cb12:	313c      	adds	r1, #60	; 0x3c
    cb14:	2000      	movs	r0, #0
    cb16:	4b33      	ldr	r3, [pc, #204]	; (cbe4 <rpl_join_instance+0x128>)
    cb18:	4798      	blx	r3
  }

  dag->joined = 1;
    cb1a:	2301      	movs	r3, #1
    cb1c:	75b3      	strb	r3, [r6, #22]
  dag->preference = dio->preference;
    cb1e:	7da3      	ldrb	r3, [r4, #22]
    cb20:	7533      	strb	r3, [r6, #20]
  dag->grounded = dio->grounded;
    cb22:	7d23      	ldrb	r3, [r4, #20]
    cb24:	74f3      	strb	r3, [r6, #19]
  dag->version = dio->version;
    cb26:	7de3      	ldrb	r3, [r4, #23]
    cb28:	74b3      	strb	r3, [r6, #18]

  instance->of = of;
    cb2a:	464b      	mov	r3, r9
    cb2c:	60bb      	str	r3, [r7, #8]
  instance->mop = dio->mop;
    cb2e:	7d62      	ldrb	r2, [r4, #21]
    cb30:	238f      	movs	r3, #143	; 0x8f
    cb32:	54fa      	strb	r2, [r7, r3]
  instance->current_dag = dag;
    cb34:	60fe      	str	r6, [r7, #12]
  instance->dtsn_out = RPL_LOLLIPOP_INIT;
    cb36:	22f0      	movs	r2, #240	; 0xf0
    cb38:	3b01      	subs	r3, #1
    cb3a:	54fa      	strb	r2, [r7, r3]

  instance->max_rankinc = dio->dag_max_rankinc;
    cb3c:	8c22      	ldrh	r2, [r4, #32]
    cb3e:	330a      	adds	r3, #10
    cb40:	52fa      	strh	r2, [r7, r3]
  instance->min_hoprankinc = dio->dag_min_hoprankinc;
    cb42:	8c62      	ldrh	r2, [r4, #34]	; 0x22
    cb44:	3302      	adds	r3, #2
    cb46:	52fa      	strh	r2, [r7, r3]
  instance->dio_intdoubl = dio->dag_intdoubl;
    cb48:	7ea3      	ldrb	r3, [r4, #26]
    cb4a:	2290      	movs	r2, #144	; 0x90
    cb4c:	54bb      	strb	r3, [r7, r2]
  instance->dio_intmin = dio->dag_intmin;
    cb4e:	7ee2      	ldrb	r2, [r4, #27]
    cb50:	2191      	movs	r1, #145	; 0x91
    cb52:	547a      	strb	r2, [r7, r1]
  instance->dio_intcurrent = instance->dio_intmin + instance->dio_intdoubl;
    cb54:	18d3      	adds	r3, r2, r3
    cb56:	2294      	movs	r2, #148	; 0x94
    cb58:	54bb      	strb	r3, [r7, r2]
  instance->dio_redundancy = dio->dag_redund;
    cb5a:	7f22      	ldrb	r2, [r4, #28]
    cb5c:	2392      	movs	r3, #146	; 0x92
    cb5e:	54fa      	strb	r2, [r7, r3]
  instance->default_lifetime = dio->default_lifetime;
    cb60:	7f62      	ldrb	r2, [r4, #29]
    cb62:	3301      	adds	r3, #1
    cb64:	54fa      	strb	r2, [r7, r3]
  instance->lifetime_unit = dio->lifetime_unit;
    cb66:	8be2      	ldrh	r2, [r4, #30]
    cb68:	3309      	adds	r3, #9
    cb6a:	52fa      	strh	r2, [r7, r3]

  memcpy(&dag->dag_id, &dio->dag_id, sizeof(dio->dag_id));
    cb6c:	1c30      	adds	r0, r6, #0
    cb6e:	1c21      	adds	r1, r4, #0
    cb70:	2210      	movs	r2, #16
    cb72:	4b1d      	ldr	r3, [pc, #116]	; (cbe8 <rpl_join_instance+0x12c>)
    cb74:	4699      	mov	r9, r3
    cb76:	4798      	blx	r3

  /* Copy prefix information from the DIO into the DAG object. */
  memcpy(&dag->prefix_info, &dio->prefix_info, sizeof(rpl_prefix_t));
    cb78:	1c30      	adds	r0, r6, #0
    cb7a:	3024      	adds	r0, #36	; 0x24
    cb7c:	1c21      	adds	r1, r4, #0
    cb7e:	313c      	adds	r1, #60	; 0x3c
    cb80:	2218      	movs	r2, #24
    cb82:	47c8      	blx	r9

  rpl_set_preferred_parent(dag, p);
    cb84:	1c30      	adds	r0, r6, #0
    cb86:	1c29      	adds	r1, r5, #0
    cb88:	4b18      	ldr	r3, [pc, #96]	; (cbec <rpl_join_instance+0x130>)
    cb8a:	4798      	blx	r3
  instance->of->update_metric_container(instance);
    cb8c:	68bb      	ldr	r3, [r7, #8]
    cb8e:	695b      	ldr	r3, [r3, #20]
    cb90:	1c38      	adds	r0, r7, #0
    cb92:	4798      	blx	r3
  dag->rank = instance->of->calculate_rank(p, 0);
    cb94:	68bb      	ldr	r3, [r7, #8]
    cb96:	691b      	ldr	r3, [r3, #16]
    cb98:	1c28      	adds	r0, r5, #0
    cb9a:	2100      	movs	r1, #0
    cb9c:	4798      	blx	r3
    cb9e:	83b0      	strh	r0, [r6, #28]
  /* So far this is the lowest rank we are aware of. */
  dag->min_rank = dag->rank;
    cba0:	8230      	strh	r0, [r6, #16]

  if(default_instance == NULL) {
    cba2:	4b13      	ldr	r3, [pc, #76]	; (cbf0 <rpl_join_instance+0x134>)
    cba4:	681b      	ldr	r3, [r3, #0]
    cba6:	2b00      	cmp	r3, #0
    cba8:	d101      	bne.n	cbae <rpl_join_instance+0xf2>
    default_instance = instance;
    cbaa:	4b11      	ldr	r3, [pc, #68]	; (cbf0 <rpl_join_instance+0x134>)
    cbac:	601f      	str	r7, [r3, #0]
  PRINT6ADDR(&dag->dag_id);
  PRINTF("\n\r");

  ANNOTATE("#A join=%u\n\r", dag->dag_id.u8[sizeof(dag->dag_id) - 1]);

  rpl_reset_dio_timer(instance);
    cbae:	1c38      	adds	r0, r7, #0
    cbb0:	4b10      	ldr	r3, [pc, #64]	; (cbf4 <rpl_join_instance+0x138>)
    cbb2:	4798      	blx	r3
  rpl_set_default_route(instance, from);
    cbb4:	1c38      	adds	r0, r7, #0
    cbb6:	9901      	ldr	r1, [sp, #4]
    cbb8:	4b0f      	ldr	r3, [pc, #60]	; (cbf8 <rpl_join_instance+0x13c>)
    cbba:	4798      	blx	r3

  if(instance->mop != RPL_MOP_NO_DOWNWARD_ROUTES) {
    cbbc:	238f      	movs	r3, #143	; 0x8f
    cbbe:	5cfb      	ldrb	r3, [r7, r3]
    cbc0:	2b00      	cmp	r3, #0
    cbc2:	d002      	beq.n	cbca <rpl_join_instance+0x10e>
    rpl_schedule_dao(instance);
    cbc4:	1c38      	adds	r0, r7, #0
    cbc6:	4b0d      	ldr	r3, [pc, #52]	; (cbfc <rpl_join_instance+0x140>)
    cbc8:	4798      	blx	r3
  } else {
    PRINTF("RPL: The DIO does not meet the prerequisites for sending a DAO\n\r");
  }
}
    cbca:	b002      	add	sp, #8
    cbcc:	bc04      	pop	{r2}
    cbce:	4691      	mov	r9, r2
    cbd0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    cbd2:	46c0      	nop			; (mov r8, r8)
    cbd4:	0000ca39 	.word	0x0000ca39
    cbd8:	0000c499 	.word	0x0000c499
    cbdc:	0000caa9 	.word	0x0000caa9
    cbe0:	0000c7c5 	.word	0x0000c7c5
    cbe4:	0000c2a1 	.word	0x0000c2a1
    cbe8:	000108e7 	.word	0x000108e7
    cbec:	0000c235 	.word	0x0000c235
    cbf0:	20003284 	.word	0x20003284
    cbf4:	0000e271 	.word	0x0000e271
    cbf8:	0000c419 	.word	0x0000c419
    cbfc:	0000e295 	.word	0x0000e295

0000cc00 <rpl_local_repair>:
  RPL_STAT(rpl_stats.global_repairs++);
}
/*---------------------------------------------------------------------------*/
void
rpl_local_repair(rpl_instance_t *instance)
{
    cc00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    cc02:	4657      	mov	r7, sl
    cc04:	4646      	mov	r6, r8
    cc06:	b4c0      	push	{r6, r7}
  int i;

  if(instance == NULL) {
    cc08:	2800      	cmp	r0, #0
    cc0a:	d023      	beq.n	cc54 <rpl_local_repair+0x54>
    cc0c:	4680      	mov	r8, r0
    cc0e:	1c05      	adds	r5, r0, #0
    cc10:	3510      	adds	r5, #16
    cc12:	2388      	movs	r3, #136	; 0x88
    cc14:	4443      	add	r3, r8
    cc16:	469a      	mov	sl, r3
    cc18:	1c2e      	adds	r6, r5, #0
    PRINTF("RPL: local repair requested for instance NULL\n\r");
    return;
  }
  PRINTF("RPL: Starting a local instance repair\n\r");
  for(i = 0; i < RPL_MAX_DAG_PER_INSTANCE; i++) {
    if(instance->dag_table[i].used) {
    cc1a:	7d6b      	ldrb	r3, [r5, #21]
    cc1c:	2b00      	cmp	r3, #0
    cc1e:	d013      	beq.n	cc48 <rpl_local_repair+0x48>
      instance->dag_table[i].rank = INFINITE_RANK;
    cc20:	2301      	movs	r3, #1
    cc22:	425b      	negs	r3, r3
    cc24:	83ab      	strh	r3, [r5, #28]
  rpl_parent_t *p;

  PRINTF("RPL: Nullifying parents (minimum rank %u)\n\r",
	minimum_rank);

  p = nbr_table_head(rpl_parents);
    cc26:	480d      	ldr	r0, [pc, #52]	; (cc5c <rpl_local_repair+0x5c>)
    cc28:	4b0d      	ldr	r3, [pc, #52]	; (cc60 <rpl_local_repair+0x60>)
    cc2a:	4798      	blx	r3
    cc2c:	1e04      	subs	r4, r0, #0
  while(p != NULL) {
    cc2e:	d00b      	beq.n	cc48 <rpl_local_repair+0x48>
    if(dag == p->dag && p->rank >= minimum_rank) {
      rpl_nullify_parent(p);
    }
    p = nbr_table_next(rpl_parents, p);
    cc30:	4f0c      	ldr	r7, [pc, #48]	; (cc64 <rpl_local_repair+0x64>)
  PRINTF("RPL: Nullifying parents (minimum rank %u)\n\r",
	minimum_rank);

  p = nbr_table_head(rpl_parents);
  while(p != NULL) {
    if(dag == p->dag && p->rank >= minimum_rank) {
    cc32:	6863      	ldr	r3, [r4, #4]
    cc34:	42b3      	cmp	r3, r6
    cc36:	d102      	bne.n	cc3e <rpl_local_repair+0x3e>
      rpl_nullify_parent(p);
    cc38:	1c20      	adds	r0, r4, #0
    cc3a:	4b0b      	ldr	r3, [pc, #44]	; (cc68 <rpl_local_repair+0x68>)
    cc3c:	4798      	blx	r3
    }
    p = nbr_table_next(rpl_parents, p);
    cc3e:	4807      	ldr	r0, [pc, #28]	; (cc5c <rpl_local_repair+0x5c>)
    cc40:	1c21      	adds	r1, r4, #0
    cc42:	47b8      	blx	r7
    cc44:	1e04      	subs	r4, r0, #0

  PRINTF("RPL: Nullifying parents (minimum rank %u)\n\r",
	minimum_rank);

  p = nbr_table_head(rpl_parents);
  while(p != NULL) {
    cc46:	d1f4      	bne.n	cc32 <rpl_local_repair+0x32>
    cc48:	353c      	adds	r5, #60	; 0x3c
  if(instance == NULL) {
    PRINTF("RPL: local repair requested for instance NULL\n\r");
    return;
  }
  PRINTF("RPL: Starting a local instance repair\n\r");
  for(i = 0; i < RPL_MAX_DAG_PER_INSTANCE; i++) {
    cc4a:	4555      	cmp	r5, sl
    cc4c:	d1e4      	bne.n	cc18 <rpl_local_repair+0x18>
      instance->dag_table[i].rank = INFINITE_RANK;
      nullify_parents(&instance->dag_table[i], 0);
    }
  }

  rpl_reset_dio_timer(instance);
    cc4e:	4640      	mov	r0, r8
    cc50:	4b06      	ldr	r3, [pc, #24]	; (cc6c <rpl_local_repair+0x6c>)
    cc52:	4798      	blx	r3

  RPL_STAT(rpl_stats.local_repairs++);
}
    cc54:	bc0c      	pop	{r2, r3}
    cc56:	4690      	mov	r8, r2
    cc58:	469a      	mov	sl, r3
    cc5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    cc5c:	20000124 	.word	0x20000124
    cc60:	0000bb31 	.word	0x0000bb31
    cc64:	0000bac5 	.word	0x0000bac5
    cc68:	0000c775 	.word	0x0000c775
    cc6c:	0000e271 	.word	0x0000e271

0000cc70 <rpl_process_parent_event>:
  }
}
/*---------------------------------------------------------------------------*/
int
rpl_process_parent_event(rpl_instance_t *instance, rpl_parent_t *p)
{
    cc70:	b5f0      	push	{r4, r5, r6, r7, lr}
    cc72:	464f      	mov	r7, r9
    cc74:	b480      	push	{r7}
    cc76:	b082      	sub	sp, #8
    cc78:	1c07      	adds	r7, r0, #0
    cc7a:	1c0c      	adds	r4, r1, #0
  old_rank = instance->current_dag->rank;
#endif /* DEBUG */

  return_value = 1;

  if(!acceptable_rank(p->dag, p->rank)) {
    cc7c:	684e      	ldr	r6, [r1, #4]
    cc7e:	8908      	ldrh	r0, [r1, #8]
}
/*---------------------------------------------------------------------------*/
static int
acceptable_rank(rpl_dag_t *dag, rpl_rank_t rank)
{
  return rank != INFINITE_RANK &&
    cc80:	4b19      	ldr	r3, [pc, #100]	; (cce8 <rpl_process_parent_event+0x78>)
    cc82:	4298      	cmp	r0, r3
    cc84:	d022      	beq.n	cccc <rpl_process_parent_event+0x5c>
    ((dag->instance->max_rankinc == 0) ||
    cc86:	6a33      	ldr	r3, [r6, #32]
    cc88:	2298      	movs	r2, #152	; 0x98
    cc8a:	5a9d      	ldrh	r5, [r3, r2]
}
/*---------------------------------------------------------------------------*/
static int
acceptable_rank(rpl_dag_t *dag, rpl_rank_t rank)
{
  return rank != INFINITE_RANK &&
    cc8c:	2d00      	cmp	r5, #0
    cc8e:	d010      	beq.n	ccb2 <rpl_process_parent_event+0x42>
    ((dag->instance->max_rankinc == 0) ||
     DAG_RANK(rank, dag->instance) <= DAG_RANK(dag->min_rank + dag->instance->max_rankinc, dag->instance));
    cc90:	3202      	adds	r2, #2
    cc92:	5a9b      	ldrh	r3, [r3, r2]
    cc94:	9301      	str	r3, [sp, #4]
    cc96:	1c19      	adds	r1, r3, #0
    cc98:	4b14      	ldr	r3, [pc, #80]	; (ccec <rpl_process_parent_event+0x7c>)
    cc9a:	4798      	blx	r3
    cc9c:	b282      	uxth	r2, r0
    cc9e:	4691      	mov	r9, r2
    cca0:	8a30      	ldrh	r0, [r6, #16]
    cca2:	1940      	adds	r0, r0, r5
    cca4:	9901      	ldr	r1, [sp, #4]
    cca6:	4b12      	ldr	r3, [pc, #72]	; (ccf0 <rpl_process_parent_event+0x80>)
    cca8:	4798      	blx	r3
#if DEBUG
  rpl_rank_t old_rank;
  old_rank = instance->current_dag->rank;
#endif /* DEBUG */

  return_value = 1;
    ccaa:	2501      	movs	r5, #1
/*---------------------------------------------------------------------------*/
static int
acceptable_rank(rpl_dag_t *dag, rpl_rank_t rank)
{
  return rank != INFINITE_RANK &&
    ((dag->instance->max_rankinc == 0) ||
    ccac:	4581      	cmp	r9, r0
    ccae:	dd01      	ble.n	ccb4 <rpl_process_parent_event+0x44>
    ccb0:	e00c      	b.n	cccc <rpl_process_parent_event+0x5c>
#if DEBUG
  rpl_rank_t old_rank;
  old_rank = instance->current_dag->rank;
#endif /* DEBUG */

  return_value = 1;
    ccb2:	2501      	movs	r5, #1
    } else {
      return_value = 0;
    }
  }

  if(rpl_select_dag(instance, p) == NULL) {
    ccb4:	1c38      	adds	r0, r7, #0
    ccb6:	1c21      	adds	r1, r4, #0
    ccb8:	4b0e      	ldr	r3, [pc, #56]	; (ccf4 <rpl_process_parent_event+0x84>)
    ccba:	4798      	blx	r3
      PRINTF("RPL: We don't have any parent");
    }
  }
#endif /* DEBUG */

  return return_value;
    ccbc:	1c2b      	adds	r3, r5, #0
    } else {
      return_value = 0;
    }
  }

  if(rpl_select_dag(instance, p) == NULL) {
    ccbe:	2800      	cmp	r0, #0
    ccc0:	d10d      	bne.n	ccde <rpl_process_parent_event+0x6e>
    /* No suitable parent; trigger a local repair. */
    PRINTF("RPL: No parents found in any DAG\n\r");
    rpl_local_repair(instance);
    ccc2:	1c38      	adds	r0, r7, #0
    ccc4:	4b0c      	ldr	r3, [pc, #48]	; (ccf8 <rpl_process_parent_event+0x88>)
    ccc6:	4798      	blx	r3
    return 0;
    ccc8:	2300      	movs	r3, #0
    ccca:	e008      	b.n	ccde <rpl_process_parent_event+0x6e>

  if(!acceptable_rank(p->dag, p->rank)) {
    /* The candidate parent is no longer valid: the rank increase resulting
       from the choice of it as a parent would be too high. */
    PRINTF("RPL: Unacceptable rank %u\n\r", (unsigned)p->rank);
    rpl_nullify_parent(p);
    cccc:	1c20      	adds	r0, r4, #0
    ccce:	4b0b      	ldr	r3, [pc, #44]	; (ccfc <rpl_process_parent_event+0x8c>)
    ccd0:	4798      	blx	r3
    if(p != instance->current_dag->preferred_parent) {
    ccd2:	68fb      	ldr	r3, [r7, #12]
    ccd4:	699a      	ldr	r2, [r3, #24]
      return 0;
    ccd6:	2300      	movs	r3, #0
    } else {
      return_value = 0;
    ccd8:	2500      	movs	r5, #0
  if(!acceptable_rank(p->dag, p->rank)) {
    /* The candidate parent is no longer valid: the rank increase resulting
       from the choice of it as a parent would be too high. */
    PRINTF("RPL: Unacceptable rank %u\n\r", (unsigned)p->rank);
    rpl_nullify_parent(p);
    if(p != instance->current_dag->preferred_parent) {
    ccda:	42a2      	cmp	r2, r4
    ccdc:	d0ea      	beq.n	ccb4 <rpl_process_parent_event+0x44>
    }
  }
#endif /* DEBUG */

  return return_value;
}
    ccde:	1c18      	adds	r0, r3, #0
    cce0:	b002      	add	sp, #8
    cce2:	bc04      	pop	{r2}
    cce4:	4691      	mov	r9, r2
    cce6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    cce8:	0000ffff 	.word	0x0000ffff
    ccec:	00010525 	.word	0x00010525
    ccf0:	00010645 	.word	0x00010645
    ccf4:	0000c595 	.word	0x0000c595
    ccf8:	0000cc01 	.word	0x0000cc01
    ccfc:	0000c775 	.word	0x0000c775

0000cd00 <rpl_add_dag>:
}

/*---------------------------------------------------------------------------*/
void
rpl_add_dag(uip_ipaddr_t *from, rpl_dio_t *dio)
{
    cd00:	b5f0      	push	{r4, r5, r6, r7, lr}
    cd02:	b083      	sub	sp, #12
    cd04:	1c07      	adds	r7, r0, #0
    cd06:	9001      	str	r0, [sp, #4]
    cd08:	1c0c      	adds	r4, r1, #0
  rpl_instance_t *instance;
  rpl_dag_t *dag, *previous_dag;
  rpl_parent_t *p;
  rpl_of_t *of;

  dag = rpl_alloc_dag(dio->instance_id, &dio->dag_id);
    cd0a:	7e08      	ldrb	r0, [r1, #24]
    cd0c:	4b37      	ldr	r3, [pc, #220]	; (cdec <rpl_add_dag+0xec>)
    cd0e:	4798      	blx	r3
    cd10:	1e05      	subs	r5, r0, #0
  if(dag == NULL) {
    cd12:	d068      	beq.n	cde6 <rpl_add_dag+0xe6>
    PRINTF("RPL: Failed to allocate a DAG object!\n\r");
    return;
  }

  instance = dag->instance;
    cd14:	6a06      	ldr	r6, [r0, #32]
}
/*---------------------------------------------------------------------------*/
static rpl_dag_t *
find_parent_dag(rpl_instance_t *instance, uip_ipaddr_t *addr)
{
  rpl_parent_t *p = find_parent_any_dag_any_instance(addr);
    cd16:	1c38      	adds	r0, r7, #0
    cd18:	4b35      	ldr	r3, [pc, #212]	; (cdf0 <rpl_add_dag+0xf0>)
    cd1a:	4798      	blx	r3
  if(p != NULL) {
    cd1c:	2800      	cmp	r0, #0
    cd1e:	d002      	beq.n	cd26 <rpl_add_dag+0x26>
    return p->dag;
    cd20:	6847      	ldr	r7, [r0, #4]
  }

  instance = dag->instance;

  previous_dag = find_parent_dag(instance, from);
  if(previous_dag == NULL) {
    cd22:	2f00      	cmp	r7, #0
    cd24:	d109      	bne.n	cd3a <rpl_add_dag+0x3a>
    PRINTF("RPL: Adding ");
    PRINT6ADDR(from);
    PRINTF(" as a parent: ");
    p = rpl_add_parent(dag, dio, from);
    cd26:	1c28      	adds	r0, r5, #0
    cd28:	1c21      	adds	r1, r4, #0
    cd2a:	9a01      	ldr	r2, [sp, #4]
    cd2c:	4b31      	ldr	r3, [pc, #196]	; (cdf4 <rpl_add_dag+0xf4>)
    cd2e:	4798      	blx	r3
    cd30:	9001      	str	r0, [sp, #4]
    if(p == NULL) {
    cd32:	2800      	cmp	r0, #0
    cd34:	d10d      	bne.n	cd52 <rpl_add_dag+0x52>
      PRINTF("failed\n\r");
      dag->used = 0;
    cd36:	7568      	strb	r0, [r5, #21]
      return;
    cd38:	e055      	b.n	cde6 <rpl_add_dag+0xe6>
    }
    PRINTF("succeeded\n\r");
  } else {
    p = rpl_find_parent(previous_dag, from);
    cd3a:	1c38      	adds	r0, r7, #0
    cd3c:	9901      	ldr	r1, [sp, #4]
    cd3e:	4b2e      	ldr	r3, [pc, #184]	; (cdf8 <rpl_add_dag+0xf8>)
    cd40:	4798      	blx	r3
    cd42:	1e03      	subs	r3, r0, #0
    cd44:	9001      	str	r0, [sp, #4]
    if(p != NULL) {
    cd46:	d004      	beq.n	cd52 <rpl_add_dag+0x52>
      rpl_move_parent(previous_dag, dag, p);
    cd48:	1c38      	adds	r0, r7, #0
    cd4a:	1c29      	adds	r1, r5, #0
    cd4c:	1c1a      	adds	r2, r3, #0
    cd4e:	4b2b      	ldr	r3, [pc, #172]	; (cdfc <rpl_add_dag+0xfc>)
    cd50:	4798      	blx	r3
    }
  }

  /* Determine the objective function by using the
     objective code point of the DIO. */
  of = rpl_find_of(dio->ocp);
    cd52:	8a20      	ldrh	r0, [r4, #16]
    cd54:	4b2a      	ldr	r3, [pc, #168]	; (ce00 <rpl_add_dag+0x100>)
    cd56:	4798      	blx	r3
  if(of != instance->of ||
    cd58:	68b3      	ldr	r3, [r6, #8]
    cd5a:	4283      	cmp	r3, r0
    cd5c:	d118      	bne.n	cd90 <rpl_add_dag+0x90>
     instance->mop != dio->mop ||
    cd5e:	238f      	movs	r3, #143	; 0x8f
  }

  /* Determine the objective function by using the
     objective code point of the DIO. */
  of = rpl_find_of(dio->ocp);
  if(of != instance->of ||
    cd60:	5cf2      	ldrb	r2, [r6, r3]
    cd62:	7d63      	ldrb	r3, [r4, #21]
    cd64:	429a      	cmp	r2, r3
    cd66:	d113      	bne.n	cd90 <rpl_add_dag+0x90>
     instance->mop != dio->mop ||
     instance->max_rankinc != dio->dag_max_rankinc ||
    cd68:	2398      	movs	r3, #152	; 0x98
    cd6a:	58f3      	ldr	r3, [r6, r3]
    cd6c:	6a22      	ldr	r2, [r4, #32]
    cd6e:	4293      	cmp	r3, r2
    cd70:	d10e      	bne.n	cd90 <rpl_add_dag+0x90>
     instance->min_hoprankinc != dio->dag_min_hoprankinc ||
     instance->dio_intdoubl != dio->dag_intdoubl ||
    cd72:	2390      	movs	r3, #144	; 0x90
    cd74:	5af2      	ldrh	r2, [r6, r3]
    cd76:	8b63      	ldrh	r3, [r4, #26]
    cd78:	429a      	cmp	r2, r3
    cd7a:	d109      	bne.n	cd90 <rpl_add_dag+0x90>
     instance->dio_intmin != dio->dag_intmin ||
     instance->dio_redundancy != dio->dag_redund ||
    cd7c:	2392      	movs	r3, #146	; 0x92
    cd7e:	5af2      	ldrh	r2, [r6, r3]
    cd80:	8ba3      	ldrh	r3, [r4, #28]
    cd82:	429a      	cmp	r2, r3
    cd84:	d104      	bne.n	cd90 <rpl_add_dag+0x90>
     instance->default_lifetime != dio->default_lifetime ||
     instance->lifetime_unit != dio->lifetime_unit) {
    cd86:	239c      	movs	r3, #156	; 0x9c
     instance->max_rankinc != dio->dag_max_rankinc ||
     instance->min_hoprankinc != dio->dag_min_hoprankinc ||
     instance->dio_intdoubl != dio->dag_intdoubl ||
     instance->dio_intmin != dio->dag_intmin ||
     instance->dio_redundancy != dio->dag_redund ||
     instance->default_lifetime != dio->default_lifetime ||
    cd88:	5af2      	ldrh	r2, [r6, r3]
    cd8a:	8be3      	ldrh	r3, [r4, #30]
    cd8c:	429a      	cmp	r2, r3
    cd8e:	d005      	beq.n	cd9c <rpl_add_dag+0x9c>
     instance->lifetime_unit != dio->lifetime_unit) {
    PRINTF("RPL: DIO for DAG instance %u incompatible with previous DIO\n\r",
	   dio->instance_id);
    rpl_remove_parent(p);
    cd90:	9801      	ldr	r0, [sp, #4]
    cd92:	4b1c      	ldr	r3, [pc, #112]	; (ce04 <rpl_add_dag+0x104>)
    cd94:	4798      	blx	r3
    dag->used = 0;
    cd96:	2300      	movs	r3, #0
    cd98:	756b      	strb	r3, [r5, #21]
    return;
    cd9a:	e024      	b.n	cde6 <rpl_add_dag+0xe6>
  }

  dag->used = 1;
    cd9c:	2301      	movs	r3, #1
    cd9e:	756b      	strb	r3, [r5, #21]
  dag->grounded = dio->grounded;
    cda0:	7d23      	ldrb	r3, [r4, #20]
    cda2:	74eb      	strb	r3, [r5, #19]
  dag->preference = dio->preference;
    cda4:	7da3      	ldrb	r3, [r4, #22]
    cda6:	752b      	strb	r3, [r5, #20]
  dag->version = dio->version;
    cda8:	7de3      	ldrb	r3, [r4, #23]
    cdaa:	74ab      	strb	r3, [r5, #18]

  memcpy(&dag->dag_id, &dio->dag_id, sizeof(dio->dag_id));
    cdac:	1c28      	adds	r0, r5, #0
    cdae:	1c21      	adds	r1, r4, #0
    cdb0:	2210      	movs	r2, #16
    cdb2:	4f15      	ldr	r7, [pc, #84]	; (ce08 <rpl_add_dag+0x108>)
    cdb4:	47b8      	blx	r7

  /* copy prefix information into the dag */
  memcpy(&dag->prefix_info, &dio->prefix_info, sizeof(rpl_prefix_t));
    cdb6:	1c28      	adds	r0, r5, #0
    cdb8:	3024      	adds	r0, #36	; 0x24
    cdba:	1c21      	adds	r1, r4, #0
    cdbc:	313c      	adds	r1, #60	; 0x3c
    cdbe:	2218      	movs	r2, #24
    cdc0:	47b8      	blx	r7

  rpl_set_preferred_parent(dag, p);
    cdc2:	1c28      	adds	r0, r5, #0
    cdc4:	9f01      	ldr	r7, [sp, #4]
    cdc6:	1c39      	adds	r1, r7, #0
    cdc8:	4b10      	ldr	r3, [pc, #64]	; (ce0c <rpl_add_dag+0x10c>)
    cdca:	4798      	blx	r3
  dag->rank = instance->of->calculate_rank(p, 0);
    cdcc:	68b3      	ldr	r3, [r6, #8]
    cdce:	691b      	ldr	r3, [r3, #16]
    cdd0:	1c38      	adds	r0, r7, #0
    cdd2:	2100      	movs	r1, #0
    cdd4:	4798      	blx	r3
    cdd6:	83a8      	strh	r0, [r5, #28]
  dag->min_rank = dag->rank; /* So far this is the lowest rank we know of. */
    cdd8:	8228      	strh	r0, [r5, #16]
  PRINT6ADDR(&dag->dag_id);
  PRINTF("\n\r");

  ANNOTATE("#A join=%u\n\r", dag->dag_id.u8[sizeof(dag->dag_id) - 1]);

  rpl_process_parent_event(instance, p);
    cdda:	1c30      	adds	r0, r6, #0
    cddc:	1c39      	adds	r1, r7, #0
    cdde:	4b0c      	ldr	r3, [pc, #48]	; (ce10 <rpl_add_dag+0x110>)
    cde0:	4798      	blx	r3
  p->dtsn = dio->dtsn;
    cde2:	7e63      	ldrb	r3, [r4, #25]
    cde4:	733b      	strb	r3, [r7, #12]
}
    cde6:	b003      	add	sp, #12
    cde8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    cdea:	46c0      	nop			; (mov r8, r8)
    cdec:	0000ca39 	.word	0x0000ca39
    cdf0:	0000c331 	.word	0x0000c331
    cdf4:	0000c499 	.word	0x0000c499
    cdf8:	0000c4d5 	.word	0x0000c4d5
    cdfc:	0000c8dd 	.word	0x0000c8dd
    ce00:	0000caa9 	.word	0x0000caa9
    ce04:	0000c7c5 	.word	0x0000c7c5
    ce08:	000108e7 	.word	0x000108e7
    ce0c:	0000c235 	.word	0x0000c235
    ce10:	0000cc71 	.word	0x0000cc71

0000ce14 <rpl_recalculate_ranks>:
  RPL_STAT(rpl_stats.local_repairs++);
}
/*---------------------------------------------------------------------------*/
void
rpl_recalculate_ranks(void)
{
    ce14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  /*
   * We recalculate ranks when we receive feedback from the system rather
   * than RPL protocol messages. This periodical recalculation is called
   * from a timer in order to keep the stack depth reasonably low.
   */
  p = nbr_table_head(rpl_parents);
    ce16:	480e      	ldr	r0, [pc, #56]	; (ce50 <rpl_recalculate_ranks+0x3c>)
    ce18:	4b0e      	ldr	r3, [pc, #56]	; (ce54 <rpl_recalculate_ranks+0x40>)
    ce1a:	4798      	blx	r3
    ce1c:	1e04      	subs	r4, r0, #0
  while(p != NULL) {
    ce1e:	d015      	beq.n	ce4c <rpl_recalculate_ranks+0x38>
    if(p->dag != NULL && p->dag->instance && p->updated) {
      p->updated = 0;
      PRINTF("RPL: rpl_process_parent_event recalculate_ranks\n\r");
      if(!rpl_process_parent_event(p->dag->instance, p)) {
    ce20:	4e0d      	ldr	r6, [pc, #52]	; (ce58 <rpl_recalculate_ranks+0x44>)
        PRINTF("RPL: A parent was dropped\n\r");
      }
    }
    p = nbr_table_next(rpl_parents, p);
    ce22:	4d0b      	ldr	r5, [pc, #44]	; (ce50 <rpl_recalculate_ranks+0x3c>)
    ce24:	4f0d      	ldr	r7, [pc, #52]	; (ce5c <rpl_recalculate_ranks+0x48>)
   * than RPL protocol messages. This periodical recalculation is called
   * from a timer in order to keep the stack depth reasonably low.
   */
  p = nbr_table_head(rpl_parents);
  while(p != NULL) {
    if(p->dag != NULL && p->dag->instance && p->updated) {
    ce26:	6863      	ldr	r3, [r4, #4]
    ce28:	2b00      	cmp	r3, #0
    ce2a:	d00a      	beq.n	ce42 <rpl_recalculate_ranks+0x2e>
    ce2c:	6a1a      	ldr	r2, [r3, #32]
    ce2e:	2a00      	cmp	r2, #0
    ce30:	d007      	beq.n	ce42 <rpl_recalculate_ranks+0x2e>
    ce32:	7b62      	ldrb	r2, [r4, #13]
    ce34:	2a00      	cmp	r2, #0
    ce36:	d004      	beq.n	ce42 <rpl_recalculate_ranks+0x2e>
      p->updated = 0;
    ce38:	2200      	movs	r2, #0
    ce3a:	7362      	strb	r2, [r4, #13]
      PRINTF("RPL: rpl_process_parent_event recalculate_ranks\n\r");
      if(!rpl_process_parent_event(p->dag->instance, p)) {
    ce3c:	6a18      	ldr	r0, [r3, #32]
    ce3e:	1c21      	adds	r1, r4, #0
    ce40:	47b0      	blx	r6
        PRINTF("RPL: A parent was dropped\n\r");
      }
    }
    p = nbr_table_next(rpl_parents, p);
    ce42:	1c28      	adds	r0, r5, #0
    ce44:	1c21      	adds	r1, r4, #0
    ce46:	47b8      	blx	r7
    ce48:	1e04      	subs	r4, r0, #0
   * We recalculate ranks when we receive feedback from the system rather
   * than RPL protocol messages. This periodical recalculation is called
   * from a timer in order to keep the stack depth reasonably low.
   */
  p = nbr_table_head(rpl_parents);
  while(p != NULL) {
    ce4a:	d1ec      	bne.n	ce26 <rpl_recalculate_ranks+0x12>
        PRINTF("RPL: A parent was dropped\n\r");
      }
    }
    p = nbr_table_next(rpl_parents, p);
  }
}
    ce4c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ce4e:	46c0      	nop			; (mov r8, r8)
    ce50:	20000124 	.word	0x20000124
    ce54:	0000bb31 	.word	0x0000bb31
    ce58:	0000cc71 	.word	0x0000cc71
    ce5c:	0000bac5 	.word	0x0000bac5

0000ce60 <rpl_process_dio>:
  return return_value;
}
/*---------------------------------------------------------------------------*/
void
rpl_process_dio(uip_ipaddr_t *from, rpl_dio_t *dio)
{
    ce60:	b5f0      	push	{r4, r5, r6, r7, lr}
    ce62:	464f      	mov	r7, r9
    ce64:	b480      	push	{r7}
    ce66:	b082      	sub	sp, #8
#if RPL_CONF_MULTICAST
  /* If the root is advertising MOP 2 but we support MOP 3 we can still join
   * In that scenario, we suppress DAOs for multicast targets */
  if(dio->mop < RPL_MOP_STORING_NO_MULTICAST) {
#else
  if(dio->mop != RPL_MOP_DEFAULT) {
    ce68:	7d4b      	ldrb	r3, [r1, #21]
    ce6a:	2b02      	cmp	r3, #2
    ce6c:	d000      	beq.n	ce70 <rpl_process_dio+0x10>
    ce6e:	e12e      	b.n	d0ce <rpl_process_dio+0x26e>
    ce70:	1c0d      	adds	r5, r1, #0
    ce72:	9000      	str	r0, [sp, #0]
#endif
    PRINTF("RPL: Ignoring a DIO with an unsupported MOP: %d\n\r", dio->mop);
    return;
  }

  dag = get_dag(dio->instance_id, &dio->dag_id);
    ce74:	7e0f      	ldrb	r7, [r1, #24]
    ce76:	1c38      	adds	r0, r7, #0
    ce78:	4b97      	ldr	r3, [pc, #604]	; (d0d8 <rpl_process_dio+0x278>)
    ce7a:	4798      	blx	r3
    ce7c:	1c04      	adds	r4, r0, #0
  instance = rpl_get_instance(dio->instance_id);
    ce7e:	1c38      	adds	r0, r7, #0
    ce80:	4b96      	ldr	r3, [pc, #600]	; (d0dc <rpl_process_dio+0x27c>)
    ce82:	4798      	blx	r3
    ce84:	1c06      	adds	r6, r0, #0

  if(dag != NULL && instance != NULL) {
    ce86:	2c00      	cmp	r4, #0
    ce88:	d06e      	beq.n	cf68 <rpl_process_dio+0x108>
    ce8a:	2800      	cmp	r0, #0
    ce8c:	d06f      	beq.n	cf6e <rpl_process_dio+0x10e>
    if(lollipop_greater_than(dio->version, dag->version)) {
    ce8e:	7def      	ldrb	r7, [r5, #23]
    ce90:	7ca3      	ldrb	r3, [r4, #18]
    ce92:	9301      	str	r3, [sp, #4]
    ce94:	1c38      	adds	r0, r7, #0
    ce96:	1c19      	adds	r1, r3, #0
    ce98:	4b91      	ldr	r3, [pc, #580]	; (d0e0 <rpl_process_dio+0x280>)
    ce9a:	4798      	blx	r3
    ce9c:	2800      	cmp	r0, #0
    ce9e:	d054      	beq.n	cf4a <rpl_process_dio+0xea>
      if(dag->rank == ROOT_RANK(instance)) {
    cea0:	8ba2      	ldrh	r2, [r4, #28]
    cea2:	239a      	movs	r3, #154	; 0x9a
    cea4:	5af3      	ldrh	r3, [r6, r3]
    cea6:	429a      	cmp	r2, r3
    cea8:	d10e      	bne.n	cec8 <rpl_process_dio+0x68>
	PRINTF("RPL: Root received inconsistent DIO version number\n\r");
	dag->version = dio->version;
    ceaa:	74a7      	strb	r7, [r4, #18]
	RPL_LOLLIPOP_INCREMENT(dag->version);
    ceac:	b27b      	sxtb	r3, r7
    ceae:	2b00      	cmp	r3, #0
    ceb0:	da02      	bge.n	ceb8 <rpl_process_dio+0x58>
    ceb2:	1c7b      	adds	r3, r7, #1
    ceb4:	74a3      	strb	r3, [r4, #18]
    ceb6:	e003      	b.n	cec0 <rpl_process_dio+0x60>
    ceb8:	1c7b      	adds	r3, r7, #1
    ceba:	227f      	movs	r2, #127	; 0x7f
    cebc:	4013      	ands	r3, r2
    cebe:	74a3      	strb	r3, [r4, #18]
	rpl_reset_dio_timer(instance);
    cec0:	1c30      	adds	r0, r6, #0
    cec2:	4b88      	ldr	r3, [pc, #544]	; (d0e4 <rpl_process_dio+0x284>)
    cec4:	4798      	blx	r3
    cec6:	e102      	b.n	d0ce <rpl_process_dio+0x26e>
      } else {
        PRINTF("RPL: Global repair\n\r");
        if(dio->prefix_info.length != 0) {
    cec8:	2350      	movs	r3, #80	; 0x50
    ceca:	5cea      	ldrb	r2, [r5, r3]
    cecc:	2a00      	cmp	r2, #0
    cece:	d008      	beq.n	cee2 <rpl_process_dio+0x82>
          if(dio->prefix_info.flags & UIP_ND6_RA_FLAG_AUTONOMOUS) {
    ced0:	3301      	adds	r3, #1
    ced2:	5ceb      	ldrb	r3, [r5, r3]
    ced4:	065b      	lsls	r3, r3, #25
    ced6:	d504      	bpl.n	cee2 <rpl_process_dio+0x82>
            PRINTF("RPL : Prefix announced in DIO\n\r");
            rpl_set_prefix(dag, &dio->prefix_info.prefix, dio->prefix_info.length);
    ced8:	1c29      	adds	r1, r5, #0
    ceda:	313c      	adds	r1, #60	; 0x3c
    cedc:	1c20      	adds	r0, r4, #0
    cede:	4b82      	ldr	r3, [pc, #520]	; (d0e8 <rpl_process_dio+0x288>)
    cee0:	4798      	blx	r3
static void
global_repair(uip_ipaddr_t *from, rpl_dag_t *dag, rpl_dio_t *dio)
{
  rpl_parent_t *p;

  remove_parents(dag, 0);
    cee2:	1c20      	adds	r0, r4, #0
    cee4:	2100      	movs	r1, #0
    cee6:	4b81      	ldr	r3, [pc, #516]	; (d0ec <rpl_process_dio+0x28c>)
    cee8:	4798      	blx	r3
  dag->version = dio->version;
    ceea:	7deb      	ldrb	r3, [r5, #23]
    ceec:	74a3      	strb	r3, [r4, #18]
  dag->instance->of->reset(dag);
    ceee:	6a23      	ldr	r3, [r4, #32]
    cef0:	689b      	ldr	r3, [r3, #8]
    cef2:	681b      	ldr	r3, [r3, #0]
    cef4:	1c20      	adds	r0, r4, #0
    cef6:	4798      	blx	r3
  dag->min_rank = INFINITE_RANK;
    cef8:	2301      	movs	r3, #1
    cefa:	425b      	negs	r3, r3
    cefc:	8223      	strh	r3, [r4, #16]
  RPL_LOLLIPOP_INCREMENT(dag->instance->dtsn_out);
    cefe:	6a22      	ldr	r2, [r4, #32]
    cf00:	338f      	adds	r3, #143	; 0x8f
    cf02:	5cd3      	ldrb	r3, [r2, r3]
    cf04:	b259      	sxtb	r1, r3
    cf06:	2900      	cmp	r1, #0
    cf08:	da03      	bge.n	cf12 <rpl_process_dio+0xb2>
    cf0a:	3301      	adds	r3, #1
    cf0c:	218e      	movs	r1, #142	; 0x8e
    cf0e:	5453      	strb	r3, [r2, r1]
    cf10:	e004      	b.n	cf1c <rpl_process_dio+0xbc>
    cf12:	3301      	adds	r3, #1
    cf14:	217f      	movs	r1, #127	; 0x7f
    cf16:	400b      	ands	r3, r1
    cf18:	310f      	adds	r1, #15
    cf1a:	5453      	strb	r3, [r2, r1]

  p = rpl_add_parent(dag, dio, from);
    cf1c:	1c20      	adds	r0, r4, #0
    cf1e:	1c29      	adds	r1, r5, #0
    cf20:	9a00      	ldr	r2, [sp, #0]
    cf22:	4b73      	ldr	r3, [pc, #460]	; (d0f0 <rpl_process_dio+0x290>)
    cf24:	4798      	blx	r3
    cf26:	1e05      	subs	r5, r0, #0
  if(p == NULL) {
    cf28:	d103      	bne.n	cf32 <rpl_process_dio+0xd2>
    PRINTF("RPL: Failed to add a parent during the global repair\n\r");
    dag->rank = INFINITE_RANK;
    cf2a:	2301      	movs	r3, #1
    cf2c:	425b      	negs	r3, r3
    cf2e:	83a3      	strh	r3, [r4, #28]
    cf30:	e0cd      	b.n	d0ce <rpl_process_dio+0x26e>
  } else {
    dag->rank = dag->instance->of->calculate_rank(p, 0);
    cf32:	6a23      	ldr	r3, [r4, #32]
    cf34:	689b      	ldr	r3, [r3, #8]
    cf36:	691b      	ldr	r3, [r3, #16]
    cf38:	2100      	movs	r1, #0
    cf3a:	4798      	blx	r3
    cf3c:	83a0      	strh	r0, [r4, #28]
    dag->min_rank = dag->rank;
    cf3e:	8220      	strh	r0, [r4, #16]
    PRINTF("RPL: rpl_process_parent_event global repair\n\r");
    rpl_process_parent_event(dag->instance, p);
    cf40:	6a20      	ldr	r0, [r4, #32]
    cf42:	1c29      	adds	r1, r5, #0
    cf44:	4b6b      	ldr	r3, [pc, #428]	; (d0f4 <rpl_process_dio+0x294>)
    cf46:	4798      	blx	r3
    cf48:	e0c1      	b.n	d0ce <rpl_process_dio+0x26e>
	global_repair(from, dag, dio);
      }
      return;
    }

    if(lollipop_greater_than(dag->version, dio->version)) {
    cf4a:	9801      	ldr	r0, [sp, #4]
    cf4c:	1c39      	adds	r1, r7, #0
    cf4e:	4b64      	ldr	r3, [pc, #400]	; (d0e0 <rpl_process_dio+0x280>)
    cf50:	4798      	blx	r3
    cf52:	2800      	cmp	r0, #0
    cf54:	d100      	bne.n	cf58 <rpl_process_dio+0xf8>
    cf56:	e0b2      	b.n	d0be <rpl_process_dio+0x25e>
      /* The DIO sender is on an older version of the DAG. */
      PRINTF("RPL: old version received => inconsistency detected\n\r");
      if(dag->joined) {
    cf58:	7da3      	ldrb	r3, [r4, #22]
    cf5a:	2b00      	cmp	r3, #0
    cf5c:	d100      	bne.n	cf60 <rpl_process_dio+0x100>
    cf5e:	e0ae      	b.n	d0be <rpl_process_dio+0x25e>
        rpl_reset_dio_timer(instance);
    cf60:	1c30      	adds	r0, r6, #0
    cf62:	4b60      	ldr	r3, [pc, #384]	; (d0e4 <rpl_process_dio+0x284>)
    cf64:	4798      	blx	r3
        return;
    cf66:	e0b2      	b.n	d0ce <rpl_process_dio+0x26e>
      }
    }
  }

  if(instance == NULL) {
    cf68:	2800      	cmp	r0, #0
    cf6a:	d000      	beq.n	cf6e <rpl_process_dio+0x10e>
    cf6c:	e09f      	b.n	d0ae <rpl_process_dio+0x24e>
    PRINTF("RPL: New instance detected: Joining...\n\r");
    rpl_join_instance(from, dio);
    cf6e:	9800      	ldr	r0, [sp, #0]
    cf70:	1c29      	adds	r1, r5, #0
    cf72:	4b61      	ldr	r3, [pc, #388]	; (d0f8 <rpl_process_dio+0x298>)
    cf74:	4798      	blx	r3
    return;
    cf76:	e0aa      	b.n	d0ce <rpl_process_dio+0x26e>
  }

  if(instance->current_dag->rank == ROOT_RANK(instance) && instance->current_dag != dag) {
    cf78:	4294      	cmp	r4, r2
    cf7a:	d000      	beq.n	cf7e <rpl_process_dio+0x11e>
    cf7c:	e0a7      	b.n	d0ce <rpl_process_dio+0x26e>
    PRINTF("RPL: Root ignored DIO for different DAG\n\r");
    return;
  }

  if(dag == NULL) {
    cf7e:	2c00      	cmp	r4, #0
    cf80:	d104      	bne.n	cf8c <rpl_process_dio+0x12c>
    PRINTF("RPL: Adding new DAG to known instance.\n\r");
    rpl_add_dag(from, dio);
    cf82:	9800      	ldr	r0, [sp, #0]
    cf84:	1c29      	adds	r1, r5, #0
    cf86:	4b5d      	ldr	r3, [pc, #372]	; (d0fc <rpl_process_dio+0x29c>)
    cf88:	4798      	blx	r3
    return;
    cf8a:	e0a0      	b.n	d0ce <rpl_process_dio+0x26e>
  }


  if(dio->rank < ROOT_RANK(instance)) {
    cf8c:	8a6a      	ldrh	r2, [r5, #18]
    cf8e:	4293      	cmp	r3, r2
    cf90:	d900      	bls.n	cf94 <rpl_process_dio+0x134>
    cf92:	e09c      	b.n	d0ce <rpl_process_dio+0x26e>
    PRINTF("RPL: Ignoring DIO with too low rank: %u\n\r",
           (unsigned)dio->rank);
    return;
  } else if(dio->rank == INFINITE_RANK && dag->joined) {
    cf94:	4b5a      	ldr	r3, [pc, #360]	; (d100 <rpl_process_dio+0x2a0>)
    cf96:	429a      	cmp	r2, r3
    cf98:	d105      	bne.n	cfa6 <rpl_process_dio+0x146>
    cf9a:	7da3      	ldrb	r3, [r4, #22]
    cf9c:	2b00      	cmp	r3, #0
    cf9e:	d002      	beq.n	cfa6 <rpl_process_dio+0x146>
    rpl_reset_dio_timer(instance);
    cfa0:	1c30      	adds	r0, r6, #0
    cfa2:	4b50      	ldr	r3, [pc, #320]	; (d0e4 <rpl_process_dio+0x284>)
    cfa4:	4798      	blx	r3
  }

  /* Prefix Information Option treated to add new prefix */
  if(dio->prefix_info.length != 0) {
    cfa6:	2350      	movs	r3, #80	; 0x50
    cfa8:	5cea      	ldrb	r2, [r5, r3]
    cfaa:	2a00      	cmp	r2, #0
    cfac:	d008      	beq.n	cfc0 <rpl_process_dio+0x160>
    if(dio->prefix_info.flags & UIP_ND6_RA_FLAG_AUTONOMOUS) {
    cfae:	3301      	adds	r3, #1
    cfb0:	5ceb      	ldrb	r3, [r5, r3]
    cfb2:	065b      	lsls	r3, r3, #25
    cfb4:	d504      	bpl.n	cfc0 <rpl_process_dio+0x160>
      PRINTF("RPL : Prefix announced in DIO\n\r");
      rpl_set_prefix(dag, &dio->prefix_info.prefix, dio->prefix_info.length);
    cfb6:	1c29      	adds	r1, r5, #0
    cfb8:	313c      	adds	r1, #60	; 0x3c
    cfba:	1c20      	adds	r0, r4, #0
    cfbc:	4b4a      	ldr	r3, [pc, #296]	; (d0e8 <rpl_process_dio+0x288>)
    cfbe:	4798      	blx	r3
    }
  }

  if(dag->rank == ROOT_RANK(instance)) {
    cfc0:	8ba2      	ldrh	r2, [r4, #28]
    cfc2:	239a      	movs	r3, #154	; 0x9a
    cfc4:	5af3      	ldrh	r3, [r6, r3]
    cfc6:	429a      	cmp	r2, r3
    cfc8:	d109      	bne.n	cfde <rpl_process_dio+0x17e>
    if(dio->rank != INFINITE_RANK) {
    cfca:	8a6a      	ldrh	r2, [r5, #18]
    cfcc:	4b4c      	ldr	r3, [pc, #304]	; (d100 <rpl_process_dio+0x2a0>)
    cfce:	429a      	cmp	r2, r3
    cfd0:	d100      	bne.n	cfd4 <rpl_process_dio+0x174>
    cfd2:	e07c      	b.n	d0ce <rpl_process_dio+0x26e>
      instance->dio_counter++;
    cfd4:	2296      	movs	r2, #150	; 0x96
    cfd6:	5cb3      	ldrb	r3, [r6, r2]
    cfd8:	3301      	adds	r3, #1
    cfda:	54b3      	strb	r3, [r6, r2]
    cfdc:	e077      	b.n	d0ce <rpl_process_dio+0x26e>
   * we are already part of. We consider the sender of the DIO to be
   * a candidate parent, and let rpl_process_parent_event decide
   * whether to keep it in the set.
   */

  p = rpl_find_parent(dag, from);
    cfde:	1c20      	adds	r0, r4, #0
    cfe0:	9900      	ldr	r1, [sp, #0]
    cfe2:	4b48      	ldr	r3, [pc, #288]	; (d104 <rpl_process_dio+0x2a4>)
    cfe4:	4798      	blx	r3
    cfe6:	1e07      	subs	r7, r0, #0
  if(p == NULL) {
    cfe8:	d11c      	bne.n	d024 <rpl_process_dio+0x1c4>
}
/*---------------------------------------------------------------------------*/
static rpl_dag_t *
find_parent_dag(rpl_instance_t *instance, uip_ipaddr_t *addr)
{
  rpl_parent_t *p = find_parent_any_dag_any_instance(addr);
    cfea:	9800      	ldr	r0, [sp, #0]
    cfec:	4b46      	ldr	r3, [pc, #280]	; (d108 <rpl_process_dio+0x2a8>)
    cfee:	4798      	blx	r3
  if(p != NULL) {
    cff0:	2800      	cmp	r0, #0
    cff2:	d003      	beq.n	cffc <rpl_process_dio+0x19c>
    return p->dag;
    cff4:	6843      	ldr	r3, [r0, #4]
    cff6:	4699      	mov	r9, r3
   */

  p = rpl_find_parent(dag, from);
  if(p == NULL) {
    previous_dag = find_parent_dag(instance, from);
    if(previous_dag == NULL) {
    cff8:	2b00      	cmp	r3, #0
    cffa:	d107      	bne.n	d00c <rpl_process_dio+0x1ac>
      /* Add the DIO sender as a candidate parent. */
      p = rpl_add_parent(dag, dio, from);
    cffc:	1c20      	adds	r0, r4, #0
    cffe:	1c29      	adds	r1, r5, #0
    d000:	9a00      	ldr	r2, [sp, #0]
    d002:	4b3b      	ldr	r3, [pc, #236]	; (d0f0 <rpl_process_dio+0x290>)
    d004:	4798      	blx	r3
    d006:	1e07      	subs	r7, r0, #0
      if(p == NULL) {
    d008:	d119      	bne.n	d03e <rpl_process_dio+0x1de>
    d00a:	e060      	b.n	d0ce <rpl_process_dio+0x26e>
      }
      PRINTF("RPL: New candidate parent with rank %u: ", (unsigned)p->rank);
      PRINT6ADDR(from);
      PRINTF("\n\r");
    } else {
      p = rpl_find_parent(previous_dag, from);
    d00c:	1c18      	adds	r0, r3, #0
    d00e:	9900      	ldr	r1, [sp, #0]
    d010:	4b3c      	ldr	r3, [pc, #240]	; (d104 <rpl_process_dio+0x2a4>)
    d012:	4798      	blx	r3
    d014:	1e07      	subs	r7, r0, #0
      if(p != NULL) {
    d016:	d012      	beq.n	d03e <rpl_process_dio+0x1de>
        rpl_move_parent(previous_dag, dag, p);
    d018:	4648      	mov	r0, r9
    d01a:	1c21      	adds	r1, r4, #0
    d01c:	1c3a      	adds	r2, r7, #0
    d01e:	4b3b      	ldr	r3, [pc, #236]	; (d10c <rpl_process_dio+0x2ac>)
    d020:	4798      	blx	r3
    d022:	e00c      	b.n	d03e <rpl_process_dio+0x1de>
      }
    }
  } else {
    if(p->rank == dio->rank) {
    d024:	8a6b      	ldrh	r3, [r5, #18]
    d026:	8902      	ldrh	r2, [r0, #8]
    d028:	429a      	cmp	r2, r3
    d02a:	d107      	bne.n	d03c <rpl_process_dio+0x1dc>
      PRINTF("RPL: Received consistent DIO\n\r");
      if(dag->joined) {
    d02c:	7da3      	ldrb	r3, [r4, #22]
    d02e:	2b00      	cmp	r3, #0
    d030:	d005      	beq.n	d03e <rpl_process_dio+0x1de>
        instance->dio_counter++;
    d032:	2296      	movs	r2, #150	; 0x96
    d034:	5cb3      	ldrb	r3, [r6, r2]
    d036:	3301      	adds	r3, #1
    d038:	54b3      	strb	r3, [r6, r2]
    d03a:	e000      	b.n	d03e <rpl_process_dio+0x1de>
      }
    } else {
      p->rank=dio->rank;
    d03c:	8103      	strh	r3, [r0, #8]
  /* We have allocated a candidate parent; process the DIO further. */

#if RPL_DAG_MC != RPL_DAG_MC_NONE
  memcpy(&p->mc, &dio->mc, sizeof(p->mc));
#endif /* RPL_DAG_MC != RPL_DAG_MC_NONE */
  if(rpl_process_parent_event(instance, p) == 0) {
    d03e:	1c30      	adds	r0, r6, #0
    d040:	1c39      	adds	r1, r7, #0
    d042:	4b2c      	ldr	r3, [pc, #176]	; (d0f4 <rpl_process_dio+0x294>)
    d044:	4798      	blx	r3
    d046:	2800      	cmp	r0, #0
    d048:	d041      	beq.n	d0ce <rpl_process_dio+0x26e>
    PRINTF("RPL: The candidate parent is rejected\n\r");
    return;
  }

  /* We don't use route control, so we can have only one official parent. */
  if(dag->joined && p == dag->preferred_parent) {
    d04a:	7da3      	ldrb	r3, [r4, #22]
    d04c:	2b00      	cmp	r3, #0
    d04e:	d025      	beq.n	d09c <rpl_process_dio+0x23c>
    d050:	69a3      	ldr	r3, [r4, #24]
    d052:	42bb      	cmp	r3, r7
    d054:	d122      	bne.n	d09c <rpl_process_dio+0x23c>
/*---------------------------------------------------------------------------*/
static int
should_send_dao(rpl_instance_t *instance, rpl_dio_t *dio, rpl_parent_t *p)
{
  /* if MOP is set to no downward routes no DAO should be sent */
  if(instance->mop == RPL_MOP_NO_DOWNWARD_ROUTES) {
    d056:	228f      	movs	r2, #143	; 0x8f
    d058:	5cb2      	ldrb	r2, [r6, r2]
    d05a:	2a00      	cmp	r2, #0
    d05c:	d016      	beq.n	d08c <rpl_process_dio+0x22c>
    return 0;
  }
  /* check if the new DTSN is more recent */
  return p == instance->current_dag->preferred_parent &&
    d05e:	68f2      	ldr	r2, [r6, #12]
    d060:	6992      	ldr	r2, [r2, #24]
    d062:	4293      	cmp	r3, r2
    d064:	d112      	bne.n	d08c <rpl_process_dio+0x22c>
    (lollipop_greater_than(dio->dtsn, p->dtsn));
    d066:	7e68      	ldrb	r0, [r5, #25]
    d068:	7b19      	ldrb	r1, [r3, #12]
    d06a:	4b1d      	ldr	r3, [pc, #116]	; (d0e0 <rpl_process_dio+0x280>)
    d06c:	4798      	blx	r3
  /* if MOP is set to no downward routes no DAO should be sent */
  if(instance->mop == RPL_MOP_NO_DOWNWARD_ROUTES) {
    return 0;
  }
  /* check if the new DTSN is more recent */
  return p == instance->current_dag->preferred_parent &&
    d06e:	2800      	cmp	r0, #0
    d070:	d117      	bne.n	d0a2 <rpl_process_dio+0x242>
    d072:	e00b      	b.n	d08c <rpl_process_dio+0x22c>
  }

  /* We don't use route control, so we can have only one official parent. */
  if(dag->joined && p == dag->preferred_parent) {
    if(should_send_dao(instance, dio, p)) {
      RPL_LOLLIPOP_INCREMENT(instance->dtsn_out);
    d074:	3301      	adds	r3, #1
    d076:	228e      	movs	r2, #142	; 0x8e
    d078:	54b3      	strb	r3, [r6, r2]
    d07a:	e004      	b.n	d086 <rpl_process_dio+0x226>
    d07c:	3301      	adds	r3, #1
    d07e:	227f      	movs	r2, #127	; 0x7f
    d080:	4013      	ands	r3, r2
    d082:	320f      	adds	r2, #15
    d084:	54b3      	strb	r3, [r6, r2]
      rpl_schedule_dao(instance);
    d086:	1c30      	adds	r0, r6, #0
    d088:	4b21      	ldr	r3, [pc, #132]	; (d110 <rpl_process_dio+0x2b0>)
    d08a:	4798      	blx	r3
    }
    /* We received a new DIO from our preferred parent.
     * Call uip_ds6_defrt_add to set a fresh value for the lifetime counter */
    uip_ds6_defrt_add(from, RPL_LIFETIME(instance, instance->default_lifetime));
    d08c:	2393      	movs	r3, #147	; 0x93
    d08e:	5cf1      	ldrb	r1, [r6, r3]
    d090:	3309      	adds	r3, #9
    d092:	5af3      	ldrh	r3, [r6, r3]
    d094:	4359      	muls	r1, r3
    d096:	9800      	ldr	r0, [sp, #0]
    d098:	4b1e      	ldr	r3, [pc, #120]	; (d114 <rpl_process_dio+0x2b4>)
    d09a:	4798      	blx	r3
  }
  p->dtsn = dio->dtsn;
    d09c:	7e6b      	ldrb	r3, [r5, #25]
    d09e:	733b      	strb	r3, [r7, #12]
    d0a0:	e015      	b.n	d0ce <rpl_process_dio+0x26e>
  }

  /* We don't use route control, so we can have only one official parent. */
  if(dag->joined && p == dag->preferred_parent) {
    if(should_send_dao(instance, dio, p)) {
      RPL_LOLLIPOP_INCREMENT(instance->dtsn_out);
    d0a2:	238e      	movs	r3, #142	; 0x8e
    d0a4:	5cf3      	ldrb	r3, [r6, r3]
    d0a6:	b25a      	sxtb	r2, r3
    d0a8:	2a00      	cmp	r2, #0
    d0aa:	dae7      	bge.n	d07c <rpl_process_dio+0x21c>
    d0ac:	e7e2      	b.n	d074 <rpl_process_dio+0x214>
    PRINTF("RPL: New instance detected: Joining...\n\r");
    rpl_join_instance(from, dio);
    return;
  }

  if(instance->current_dag->rank == ROOT_RANK(instance) && instance->current_dag != dag) {
    d0ae:	68c2      	ldr	r2, [r0, #12]
    d0b0:	239a      	movs	r3, #154	; 0x9a
    d0b2:	5ac3      	ldrh	r3, [r0, r3]
    d0b4:	8b91      	ldrh	r1, [r2, #28]
    d0b6:	4299      	cmp	r1, r3
    d0b8:	d000      	beq.n	d0bc <rpl_process_dio+0x25c>
    d0ba:	e762      	b.n	cf82 <rpl_process_dio+0x122>
    d0bc:	e75c      	b.n	cf78 <rpl_process_dio+0x118>
    d0be:	68f2      	ldr	r2, [r6, #12]
    d0c0:	239a      	movs	r3, #154	; 0x9a
    d0c2:	5af3      	ldrh	r3, [r6, r3]
    d0c4:	8b91      	ldrh	r1, [r2, #28]
    d0c6:	4299      	cmp	r1, r3
    d0c8:	d000      	beq.n	d0cc <rpl_process_dio+0x26c>
    d0ca:	e75f      	b.n	cf8c <rpl_process_dio+0x12c>
    d0cc:	e754      	b.n	cf78 <rpl_process_dio+0x118>
    /* We received a new DIO from our preferred parent.
     * Call uip_ds6_defrt_add to set a fresh value for the lifetime counter */
    uip_ds6_defrt_add(from, RPL_LIFETIME(instance, instance->default_lifetime));
  }
  p->dtsn = dio->dtsn;
}
    d0ce:	b002      	add	sp, #8
    d0d0:	bc04      	pop	{r2}
    d0d2:	4691      	mov	r9, r2
    d0d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    d0d6:	46c0      	nop			; (mov r8, r8)
    d0d8:	0000c981 	.word	0x0000c981
    d0dc:	0000c95d 	.word	0x0000c95d
    d0e0:	0000c1fd 	.word	0x0000c1fd
    d0e4:	0000e271 	.word	0x0000e271
    d0e8:	0000c389 	.word	0x0000c389
    d0ec:	0000c7f1 	.word	0x0000c7f1
    d0f0:	0000c499 	.word	0x0000c499
    d0f4:	0000cc71 	.word	0x0000cc71
    d0f8:	0000cabd 	.word	0x0000cabd
    d0fc:	0000cd01 	.word	0x0000cd01
    d100:	0000ffff 	.word	0x0000ffff
    d104:	0000c4d5 	.word	0x0000c4d5
    d108:	0000c331 	.word	0x0000c331
    d10c:	0000c8dd 	.word	0x0000c8dd
    d110:	0000e295 	.word	0x0000e295
    d114:	000071bd 	.word	0x000071bd

0000d118 <rpl_lock_parent>:
/*---------------------------------------------------------------------------*/
void
rpl_lock_parent(rpl_parent_t *p)
{
    d118:	b508      	push	{r3, lr}
    d11a:	1c01      	adds	r1, r0, #0
  nbr_table_lock(rpl_parents, p);
    d11c:	4801      	ldr	r0, [pc, #4]	; (d124 <rpl_lock_parent+0xc>)
    d11e:	4b02      	ldr	r3, [pc, #8]	; (d128 <rpl_lock_parent+0x10>)
    d120:	4798      	blx	r3
}
    d122:	bd08      	pop	{r3, pc}
    d124:	20000124 	.word	0x20000124
    d128:	0000bd75 	.word	0x0000bd75

0000d12c <rpl_verify_header>:
#define UIP_EXT_HDR_OPT_RPL_BUF   ((struct uip_ext_hdr_opt_rpl *)&uip_buf[uip_l2_l3_hdr_len + uip_ext_opt_offset])
/*---------------------------------------------------------------------------*/
#if UIP_CONF_IPV6
int
rpl_verify_header(int uip_ext_opt_offset)
{
    d12c:	b538      	push	{r3, r4, r5, lr}
  rpl_instance_t *instance;
  int down;
  uint8_t sender_closer;
  uip_ds6_route_t *route;

  if(UIP_EXT_HDR_OPT_RPL_BUF->opt_len != RPL_HDR_OPT_LEN) {
    d12e:	4b2b      	ldr	r3, [pc, #172]	; (d1dc <rpl_verify_header+0xb0>)
    d130:	781b      	ldrb	r3, [r3, #0]
    d132:	3328      	adds	r3, #40	; 0x28
    d134:	181b      	adds	r3, r3, r0
    d136:	4a2a      	ldr	r2, [pc, #168]	; (d1e0 <rpl_verify_header+0xb4>)
    d138:	189b      	adds	r3, r3, r2
    d13a:	7859      	ldrb	r1, [r3, #1]
    PRINTF("RPL: Bad header option! (wrong length)\n\r");
    return 1;
    d13c:	2201      	movs	r2, #1
  rpl_instance_t *instance;
  int down;
  uint8_t sender_closer;
  uip_ds6_route_t *route;

  if(UIP_EXT_HDR_OPT_RPL_BUF->opt_len != RPL_HDR_OPT_LEN) {
    d13e:	2904      	cmp	r1, #4
    d140:	d149      	bne.n	d1d6 <rpl_verify_header+0xaa>
    d142:	1c04      	adds	r4, r0, #0
    PRINTF("RPL: Bad header option! (wrong length)\n\r");
    return 1;
  }

  instance = rpl_get_instance(UIP_EXT_HDR_OPT_RPL_BUF->instance);
    d144:	78d8      	ldrb	r0, [r3, #3]
    d146:	4b27      	ldr	r3, [pc, #156]	; (d1e4 <rpl_verify_header+0xb8>)
    d148:	4798      	blx	r3
    d14a:	1e05      	subs	r5, r0, #0
  if(instance == NULL) {
    d14c:	d042      	beq.n	d1d4 <rpl_verify_header+0xa8>
    PRINTF("RPL: Unknown instance: %u\n\r",
           UIP_EXT_HDR_OPT_RPL_BUF->instance);
    return 1;
  }

  if(UIP_EXT_HDR_OPT_RPL_BUF->flags & RPL_HDR_OPT_FWD_ERR) {
    d14e:	4b23      	ldr	r3, [pc, #140]	; (d1dc <rpl_verify_header+0xb0>)
    d150:	781b      	ldrb	r3, [r3, #0]
    d152:	3328      	adds	r3, #40	; 0x28
    d154:	191b      	adds	r3, r3, r4
    d156:	4a22      	ldr	r2, [pc, #136]	; (d1e0 <rpl_verify_header+0xb4>)
    d158:	189b      	adds	r3, r3, r2
    d15a:	7898      	ldrb	r0, [r3, #2]
    d15c:	0682      	lsls	r2, r0, #26
    d15e:	d516      	bpl.n	d18e <rpl_verify_header+0x62>
    PRINTF("RPL: Forward error!\n\r");
    /* We should try to repair it by removing the neighbor that caused
       the packet to be forwareded in the first place. We drop any
       routes that go through the neighbor that sent the packet to
       us. */
    route = uip_ds6_route_lookup(&UIP_IP_BUF->destipaddr);
    d160:	4821      	ldr	r0, [pc, #132]	; (d1e8 <rpl_verify_header+0xbc>)
    d162:	4b22      	ldr	r3, [pc, #136]	; (d1ec <rpl_verify_header+0xc0>)
    d164:	4798      	blx	r3
    if(route != NULL) {
    d166:	2800      	cmp	r0, #0
    d168:	d005      	beq.n	d176 <rpl_verify_header+0x4a>
      uip_ds6_route_rm(route);
    d16a:	4b21      	ldr	r3, [pc, #132]	; (d1f0 <rpl_verify_header+0xc4>)
    d16c:	4798      	blx	r3
      /* If we are the root and just needed to remove a DAO route,
         chances are that the network needs to be repaired. The
         rpl_repair_root() function will cause a global repair if we
         happen to be the root node of the dag. */
      PRINTF("RPL: initiate global repair\n\r");
      rpl_repair_root(instance->instance_id);
    d16e:	238c      	movs	r3, #140	; 0x8c
    d170:	5ce8      	ldrb	r0, [r5, r3]
    d172:	4b20      	ldr	r3, [pc, #128]	; (d1f4 <rpl_verify_header+0xc8>)
    d174:	4798      	blx	r3
    }

    /* Remove the forwarding error flag and return 0 to let the packet
       be forwarded again. */
    UIP_EXT_HDR_OPT_RPL_BUF->flags &= ~RPL_HDR_OPT_FWD_ERR;
    d176:	4b19      	ldr	r3, [pc, #100]	; (d1dc <rpl_verify_header+0xb0>)
    d178:	7818      	ldrb	r0, [r3, #0]
    d17a:	3028      	adds	r0, #40	; 0x28
    d17c:	1900      	adds	r0, r0, r4
    d17e:	4c18      	ldr	r4, [pc, #96]	; (d1e0 <rpl_verify_header+0xb4>)
    d180:	1900      	adds	r0, r0, r4
    d182:	7883      	ldrb	r3, [r0, #2]
    d184:	2220      	movs	r2, #32
    d186:	4393      	bics	r3, r2
    d188:	7083      	strb	r3, [r0, #2]
    return 0;
    d18a:	2200      	movs	r2, #0
    d18c:	e023      	b.n	d1d6 <rpl_verify_header+0xaa>
  }

  if(!instance->current_dag->joined) {
    d18e:	68ec      	ldr	r4, [r5, #12]
    d190:	7da1      	ldrb	r1, [r4, #22]
    PRINTF("RPL: No DAG in the instance\n\r");
    return 1;
    d192:	2201      	movs	r2, #1
       be forwarded again. */
    UIP_EXT_HDR_OPT_RPL_BUF->flags &= ~RPL_HDR_OPT_FWD_ERR;
    return 0;
  }

  if(!instance->current_dag->joined) {
    d194:	2900      	cmp	r1, #0
    d196:	d01e      	beq.n	d1d6 <rpl_verify_header+0xaa>
  down = 0;
  if(UIP_EXT_HDR_OPT_RPL_BUF->flags & RPL_HDR_OPT_DOWN) {
    down = 1;
  }

  sender_closer = UIP_EXT_HDR_OPT_RPL_BUF->senderrank < instance->current_dag->rank;
    d198:	7919      	ldrb	r1, [r3, #4]
    d19a:	795a      	ldrb	r2, [r3, #5]
    d19c:	0212      	lsls	r2, r2, #8
    d19e:	8ba4      	ldrh	r4, [r4, #28]
    d1a0:	430a      	orrs	r2, r1
    d1a2:	42a2      	cmp	r2, r4
    d1a4:	4192      	sbcs	r2, r2
    d1a6:	4251      	negs	r1, r2
	 sender_closer,
	 UIP_EXT_HDR_OPT_RPL_BUF->senderrank,
	 instance->current_dag->rank
	 );

  if((down && !sender_closer) || (!down && sender_closer)) {
    d1a8:	b242      	sxtb	r2, r0
    d1aa:	2a00      	cmp	r2, #0
    d1ac:	da03      	bge.n	d1b6 <rpl_verify_header+0x8a>
    return 0;
  }

  PRINTF("RPL: Rank OK\n\r");

  return 0;
    d1ae:	2200      	movs	r2, #0
	 sender_closer,
	 UIP_EXT_HDR_OPT_RPL_BUF->senderrank,
	 instance->current_dag->rank
	 );

  if((down && !sender_closer) || (!down && sender_closer)) {
    d1b0:	2900      	cmp	r1, #0
    d1b2:	d110      	bne.n	d1d6 <rpl_verify_header+0xaa>
    d1b4:	e002      	b.n	d1bc <rpl_verify_header+0x90>
    return 0;
  }

  PRINTF("RPL: Rank OK\n\r");

  return 0;
    d1b6:	2200      	movs	r2, #0
	 sender_closer,
	 UIP_EXT_HDR_OPT_RPL_BUF->senderrank,
	 instance->current_dag->rank
	 );

  if((down && !sender_closer) || (!down && sender_closer)) {
    d1b8:	2900      	cmp	r1, #0
    d1ba:	d00c      	beq.n	d1d6 <rpl_verify_header+0xaa>
    PRINTF("RPL: Loop detected - senderrank: %d my-rank: %d sender_closer: %d\n\r",
	   UIP_EXT_HDR_OPT_RPL_BUF->senderrank, instance->current_dag->rank,
	   sender_closer);
    if(UIP_EXT_HDR_OPT_RPL_BUF->flags & RPL_HDR_OPT_RANK_ERR) {
    d1bc:	0642      	lsls	r2, r0, #25
    d1be:	d504      	bpl.n	d1ca <rpl_verify_header+0x9e>
      PRINTF("RPL: Rank error signalled in RPL option!\n\r");
      /* We should try to repair it, not implemented for the moment */
      rpl_reset_dio_timer(instance);
    d1c0:	1c28      	adds	r0, r5, #0
    d1c2:	4b0d      	ldr	r3, [pc, #52]	; (d1f8 <rpl_verify_header+0xcc>)
    d1c4:	4798      	blx	r3
      /* Forward the packet anyway. */
      return 0;
    d1c6:	2200      	movs	r2, #0
    d1c8:	e005      	b.n	d1d6 <rpl_verify_header+0xaa>
    }
    PRINTF("RPL: Single error tolerated\n\r");
    UIP_EXT_HDR_OPT_RPL_BUF->flags |= RPL_HDR_OPT_RANK_ERR;
    d1ca:	2240      	movs	r2, #64	; 0x40
    d1cc:	4310      	orrs	r0, r2
    d1ce:	7098      	strb	r0, [r3, #2]
    return 0;
    d1d0:	2200      	movs	r2, #0
    d1d2:	e000      	b.n	d1d6 <rpl_verify_header+0xaa>

  instance = rpl_get_instance(UIP_EXT_HDR_OPT_RPL_BUF->instance);
  if(instance == NULL) {
    PRINTF("RPL: Unknown instance: %u\n\r",
           UIP_EXT_HDR_OPT_RPL_BUF->instance);
    return 1;
    d1d4:	2201      	movs	r2, #1
  }

  PRINTF("RPL: Rank OK\n\r");

  return 0;
}
    d1d6:	1c10      	adds	r0, r2, #0
    d1d8:	bd38      	pop	{r3, r4, r5, pc}
    d1da:	46c0      	nop			; (mov r8, r8)
    d1dc:	20000b12 	.word	0x20000b12
    d1e0:	20002cd4 	.word	0x20002cd4
    d1e4:	0000c95d 	.word	0x0000c95d
    d1e8:	20002cec 	.word	0x20002cec
    d1ec:	00006e69 	.word	0x00006e69
    d1f0:	00006eed 	.word	0x00006eed
    d1f4:	0000c9d9 	.word	0x0000c9d9
    d1f8:	0000e271 	.word	0x0000e271

0000d1fc <rpl_update_header_empty>:
  }
}
/*---------------------------------------------------------------------------*/
void
rpl_update_header_empty(void)
{
    d1fc:	b570      	push	{r4, r5, r6, lr}
  rpl_instance_t *instance;
  int uip_ext_opt_offset;
  int last_uip_ext_len;

  last_uip_ext_len = uip_ext_len;
    d1fe:	4b4d      	ldr	r3, [pc, #308]	; (d334 <rpl_update_header_empty+0x138>)
    d200:	781c      	ldrb	r4, [r3, #0]
  uip_ext_len = 0;
    d202:	2200      	movs	r2, #0
    d204:	701a      	strb	r2, [r3, #0]
  uip_ext_opt_offset = 2;

  PRINTF("RPL: Verifying the presence of the RPL header option\n\r");

  switch(UIP_IP_BUF->proto) {
    d206:	4b4c      	ldr	r3, [pc, #304]	; (d338 <rpl_update_header_empty+0x13c>)
    d208:	799b      	ldrb	r3, [r3, #6]
    d20a:	2b00      	cmp	r3, #0
    d20c:	d118      	bne.n	d240 <rpl_update_header_empty+0x44>
  case UIP_PROTO_HBHO:
    if(UIP_HBHO_BUF->len != RPL_HOP_BY_HOP_LEN - 8) {
    d20e:	3329      	adds	r3, #41	; 0x29
    d210:	4a49      	ldr	r2, [pc, #292]	; (d338 <rpl_update_header_empty+0x13c>)
    d212:	5cd3      	ldrb	r3, [r2, r3]
    d214:	2b00      	cmp	r3, #0
    d216:	d002      	beq.n	d21e <rpl_update_header_empty+0x22>
      PRINTF("RPL: Non RPL Hop-by-hop options support not implemented\n\r");
      uip_ext_len = last_uip_ext_len;
    d218:	4b46      	ldr	r3, [pc, #280]	; (d334 <rpl_update_header_empty+0x138>)
    d21a:	701c      	strb	r4, [r3, #0]
      return;
    d21c:	e089      	b.n	d332 <rpl_update_header_empty+0x136>
    }
    instance = rpl_get_instance(UIP_EXT_HDR_OPT_RPL_BUF->instance);
    d21e:	232d      	movs	r3, #45	; 0x2d
    d220:	4a45      	ldr	r2, [pc, #276]	; (d338 <rpl_update_header_empty+0x13c>)
    d222:	5cd0      	ldrb	r0, [r2, r3]
    d224:	4b45      	ldr	r3, [pc, #276]	; (d33c <rpl_update_header_empty+0x140>)
    d226:	4798      	blx	r3
    if(instance == NULL || !instance->used || !instance->current_dag->joined) {
    d228:	2800      	cmp	r0, #0
    d22a:	d100      	bne.n	d22e <rpl_update_header_empty+0x32>
    d22c:	e081      	b.n	d332 <rpl_update_header_empty+0x136>
    d22e:	238d      	movs	r3, #141	; 0x8d
    d230:	5cc3      	ldrb	r3, [r0, r3]
    d232:	2b00      	cmp	r3, #0
    d234:	d07d      	beq.n	d332 <rpl_update_header_empty+0x136>
    d236:	68c1      	ldr	r1, [r0, #12]
    d238:	7d8b      	ldrb	r3, [r1, #22]
    d23a:	2b00      	cmp	r3, #0
    d23c:	d13a      	bne.n	d2b4 <rpl_update_header_empty+0xb8>
    d23e:	e078      	b.n	d332 <rpl_update_header_empty+0x136>
      return;
    }
    break;
  default:
    PRINTF("RPL: No hop-by-hop option found, creating it\n\r");
    if(uip_len + RPL_HOP_BY_HOP_LEN > UIP_BUFSIZE) {
    d240:	4b3f      	ldr	r3, [pc, #252]	; (d340 <rpl_update_header_empty+0x144>)
    d242:	881e      	ldrh	r6, [r3, #0]
    d244:	1c32      	adds	r2, r6, #0
    d246:	3208      	adds	r2, #8
    d248:	23c8      	movs	r3, #200	; 0xc8
    d24a:	005b      	lsls	r3, r3, #1
    d24c:	429a      	cmp	r2, r3
    d24e:	dd02      	ble.n	d256 <rpl_update_header_empty+0x5a>
      PRINTF("RPL: Packet too long: impossible to add hop-by-hop option\n\r");
      uip_ext_len = last_uip_ext_len;
    d250:	4b38      	ldr	r3, [pc, #224]	; (d334 <rpl_update_header_empty+0x138>)
    d252:	701c      	strb	r4, [r3, #0]
      return;
    d254:	e06d      	b.n	d332 <rpl_update_header_empty+0x136>
static void
set_rpl_opt(unsigned uip_ext_opt_offset)
{
  uint8_t temp_len;

  memmove(UIP_HBHO_NEXT_BUF, UIP_EXT_BUF, uip_len - UIP_IPH_LEN);
    d256:	4d3b      	ldr	r5, [pc, #236]	; (d344 <rpl_update_header_empty+0x148>)
    d258:	1c29      	adds	r1, r5, #0
    d25a:	3908      	subs	r1, #8
    d25c:	1c32      	adds	r2, r6, #0
    d25e:	3a28      	subs	r2, #40	; 0x28
    d260:	1c28      	adds	r0, r5, #0
    d262:	4b39      	ldr	r3, [pc, #228]	; (d348 <rpl_update_header_empty+0x14c>)
    d264:	4798      	blx	r3
  memset(UIP_HBHO_BUF, 0, RPL_HOP_BY_HOP_LEN);
    d266:	2300      	movs	r3, #0
  UIP_HBHO_BUF->next = UIP_IP_BUF->proto;
    d268:	1c28      	adds	r0, r5, #0
    d26a:	3830      	subs	r0, #48	; 0x30
    d26c:	7981      	ldrb	r1, [r0, #6]
    d26e:	2228      	movs	r2, #40	; 0x28
    d270:	5481      	strb	r1, [r0, r2]
  UIP_IP_BUF->proto = UIP_PROTO_HBHO;
    d272:	7183      	strb	r3, [r0, #6]
  UIP_HBHO_BUF->len = RPL_HOP_BY_HOP_LEN - 8;
    d274:	3201      	adds	r2, #1
    d276:	5483      	strb	r3, [r0, r2]
  UIP_EXT_HDR_OPT_RPL_BUF->opt_type = UIP_EXT_HDR_OPT_RPL;
    d278:	2163      	movs	r1, #99	; 0x63
    d27a:	3201      	adds	r2, #1
    d27c:	5481      	strb	r1, [r0, r2]
  UIP_EXT_HDR_OPT_RPL_BUF->opt_len = RPL_HDR_OPT_LEN;
    d27e:	395f      	subs	r1, #95	; 0x5f
    d280:	3201      	adds	r2, #1
    d282:	5481      	strb	r1, [r0, r2]
  UIP_EXT_HDR_OPT_RPL_BUF->flags = 0;
    d284:	3201      	adds	r2, #1
    d286:	5483      	strb	r3, [r0, r2]
  UIP_EXT_HDR_OPT_RPL_BUF->instance = 0;
    d288:	3201      	adds	r2, #1
    d28a:	5483      	strb	r3, [r0, r2]
  UIP_EXT_HDR_OPT_RPL_BUF->senderrank = 0;
    d28c:	85c3      	strh	r3, [r0, #46]	; 0x2e
  uip_len += RPL_HOP_BY_HOP_LEN;
    d28e:	1c33      	adds	r3, r6, #0
    d290:	3308      	adds	r3, #8
    d292:	4a2b      	ldr	r2, [pc, #172]	; (d340 <rpl_update_header_empty+0x144>)
    d294:	8013      	strh	r3, [r2, #0]
  temp_len = UIP_IP_BUF->len[1];
    d296:	7942      	ldrb	r2, [r0, #5]
  UIP_IP_BUF->len[1] += UIP_HBHO_BUF->len + 8;
    d298:	1c13      	adds	r3, r2, #0
    d29a:	3308      	adds	r3, #8
    d29c:	b2db      	uxtb	r3, r3
    d29e:	7143      	strb	r3, [r0, #5]
  if(UIP_IP_BUF->len[1] < temp_len) {
    d2a0:	429a      	cmp	r2, r3
    d2a2:	d903      	bls.n	d2ac <rpl_update_header_empty+0xb0>
    UIP_IP_BUF->len[0]++;
    d2a4:	4a24      	ldr	r2, [pc, #144]	; (d338 <rpl_update_header_empty+0x13c>)
    d2a6:	7913      	ldrb	r3, [r2, #4]
    d2a8:	3301      	adds	r3, #1
    d2aa:	7113      	strb	r3, [r2, #4]
      PRINTF("RPL: Packet too long: impossible to add hop-by-hop option\n\r");
      uip_ext_len = last_uip_ext_len;
      return;
    }
    set_rpl_opt(uip_ext_opt_offset);
    uip_ext_len = last_uip_ext_len + RPL_HOP_BY_HOP_LEN;
    d2ac:	3408      	adds	r4, #8
    d2ae:	4b21      	ldr	r3, [pc, #132]	; (d334 <rpl_update_header_empty+0x138>)
    d2b0:	701c      	strb	r4, [r3, #0]
    return;
    d2b2:	e03e      	b.n	d332 <rpl_update_header_empty+0x136>
  }

  switch(UIP_EXT_HDR_OPT_BUF->type) {
    d2b4:	4b1f      	ldr	r3, [pc, #124]	; (d334 <rpl_update_header_empty+0x138>)
    d2b6:	781b      	ldrb	r3, [r3, #0]
    d2b8:	332a      	adds	r3, #42	; 0x2a
    d2ba:	4a1f      	ldr	r2, [pc, #124]	; (d338 <rpl_update_header_empty+0x13c>)
    d2bc:	189b      	adds	r3, r3, r2
    d2be:	781a      	ldrb	r2, [r3, #0]
    d2c0:	2a63      	cmp	r2, #99	; 0x63
    d2c2:	d134      	bne.n	d32e <rpl_update_header_empty+0x132>
  case UIP_EXT_HDR_OPT_RPL:
    PRINTF("RPL: Updating RPL option\n\r");
    UIP_EXT_HDR_OPT_RPL_BUF->senderrank = instance->current_dag->rank;
    d2c4:	8b8a      	ldrh	r2, [r1, #28]
    d2c6:	7f09      	ldrb	r1, [r1, #28]
    d2c8:	7119      	strb	r1, [r3, #4]
    d2ca:	0a12      	lsrs	r2, r2, #8
    d2cc:	715a      	strb	r2, [r3, #5]

    /* Check the direction of the down flag, as per Section 11.2.2.3,
       which states that if a packet is going down it should in
       general not go back up again. If this happens, a
       RPL_HDR_OPT_FWD_ERR should be flagged. */
    if((UIP_EXT_HDR_OPT_RPL_BUF->flags & RPL_HDR_OPT_DOWN)) {
    d2ce:	789b      	ldrb	r3, [r3, #2]
    d2d0:	2b7f      	cmp	r3, #127	; 0x7f
    d2d2:	d90f      	bls.n	d2f4 <rpl_update_header_empty+0xf8>
      if(uip_ds6_route_lookup(&UIP_IP_BUF->destipaddr) == NULL) {
    d2d4:	481d      	ldr	r0, [pc, #116]	; (d34c <rpl_update_header_empty+0x150>)
    d2d6:	4b1e      	ldr	r3, [pc, #120]	; (d350 <rpl_update_header_empty+0x154>)
    d2d8:	4798      	blx	r3
    d2da:	2800      	cmp	r0, #0
    d2dc:	d124      	bne.n	d328 <rpl_update_header_empty+0x12c>
        UIP_EXT_HDR_OPT_RPL_BUF->flags |= RPL_HDR_OPT_FWD_ERR;
    d2de:	4b15      	ldr	r3, [pc, #84]	; (d334 <rpl_update_header_empty+0x138>)
    d2e0:	781b      	ldrb	r3, [r3, #0]
    d2e2:	332a      	adds	r3, #42	; 0x2a
    d2e4:	1c1a      	adds	r2, r3, #0
    d2e6:	4b14      	ldr	r3, [pc, #80]	; (d338 <rpl_update_header_empty+0x13c>)
    d2e8:	18d3      	adds	r3, r2, r3
    d2ea:	7899      	ldrb	r1, [r3, #2]
    d2ec:	2220      	movs	r2, #32
    d2ee:	430a      	orrs	r2, r1
    d2f0:	709a      	strb	r2, [r3, #2]
    d2f2:	e019      	b.n	d328 <rpl_update_header_empty+0x12c>
      }
    } else {
      /* Set the down extension flag correctly as described in Section
         11.2 of RFC6550. If the packet progresses along a DAO route,
         the down flag should be set. */
      if(uip_ds6_route_lookup(&UIP_IP_BUF->destipaddr) == NULL) {
    d2f4:	4815      	ldr	r0, [pc, #84]	; (d34c <rpl_update_header_empty+0x150>)
    d2f6:	4b16      	ldr	r3, [pc, #88]	; (d350 <rpl_update_header_empty+0x154>)
    d2f8:	4798      	blx	r3
    d2fa:	2800      	cmp	r0, #0
    d2fc:	d10a      	bne.n	d314 <rpl_update_header_empty+0x118>
        /* No route was found, so this packet will go towards the RPL
           root. If so, we should not set the down flag. */
        UIP_EXT_HDR_OPT_RPL_BUF->flags &= ~RPL_HDR_OPT_DOWN;
    d2fe:	4b0d      	ldr	r3, [pc, #52]	; (d334 <rpl_update_header_empty+0x138>)
    d300:	781b      	ldrb	r3, [r3, #0]
    d302:	332a      	adds	r3, #42	; 0x2a
    d304:	1c1a      	adds	r2, r3, #0
    d306:	4b0c      	ldr	r3, [pc, #48]	; (d338 <rpl_update_header_empty+0x13c>)
    d308:	18d3      	adds	r3, r2, r3
    d30a:	789a      	ldrb	r2, [r3, #2]
    d30c:	217f      	movs	r1, #127	; 0x7f
    d30e:	400a      	ands	r2, r1
    d310:	709a      	strb	r2, [r3, #2]
    d312:	e009      	b.n	d328 <rpl_update_header_empty+0x12c>
        PRINTF("RPL option going up\n\r");
      } else {
        /* A DAO route was found so we set the down flag. */
        UIP_EXT_HDR_OPT_RPL_BUF->flags |= RPL_HDR_OPT_DOWN;
    d314:	4b07      	ldr	r3, [pc, #28]	; (d334 <rpl_update_header_empty+0x138>)
    d316:	781b      	ldrb	r3, [r3, #0]
    d318:	332a      	adds	r3, #42	; 0x2a
    d31a:	4a07      	ldr	r2, [pc, #28]	; (d338 <rpl_update_header_empty+0x13c>)
    d31c:	189b      	adds	r3, r3, r2
    d31e:	789a      	ldrb	r2, [r3, #2]
    d320:	2180      	movs	r1, #128	; 0x80
    d322:	4249      	negs	r1, r1
    d324:	430a      	orrs	r2, r1
    d326:	709a      	strb	r2, [r3, #2]
        PRINTF("RPL option going down\n\r");
      }
    }

    uip_ext_len = last_uip_ext_len;
    d328:	4b02      	ldr	r3, [pc, #8]	; (d334 <rpl_update_header_empty+0x138>)
    d32a:	701c      	strb	r4, [r3, #0]
    return;
    d32c:	e001      	b.n	d332 <rpl_update_header_empty+0x136>
  default:
    PRINTF("RPL: Multi Hop-by-hop options not implemented\n\r");
    uip_ext_len = last_uip_ext_len;
    d32e:	4b01      	ldr	r3, [pc, #4]	; (d334 <rpl_update_header_empty+0x138>)
    d330:	701c      	strb	r4, [r3, #0]
    return;
  }
}
    d332:	bd70      	pop	{r4, r5, r6, pc}
    d334:	20000b12 	.word	0x20000b12
    d338:	20002cd4 	.word	0x20002cd4
    d33c:	0000c95d 	.word	0x0000c95d
    d340:	20002cc0 	.word	0x20002cc0
    d344:	20002d04 	.word	0x20002d04
    d348:	000108f9 	.word	0x000108f9
    d34c:	20002cec 	.word	0x20002cec
    d350:	00006e69 	.word	0x00006e69

0000d354 <rpl_update_header_final>:
/*---------------------------------------------------------------------------*/
int
rpl_update_header_final(uip_ipaddr_t *addr)
{
    d354:	b510      	push	{r4, lr}
  rpl_parent_t *parent;
  int uip_ext_opt_offset;
  int last_uip_ext_len;

  last_uip_ext_len = uip_ext_len;
    d356:	4b28      	ldr	r3, [pc, #160]	; (d3f8 <rpl_update_header_final+0xa4>)
    d358:	781c      	ldrb	r4, [r3, #0]
  uip_ext_len = 0;
    d35a:	2200      	movs	r2, #0
    d35c:	701a      	strb	r2, [r3, #0]
  uip_ext_opt_offset = 2;

  if(UIP_IP_BUF->proto == UIP_PROTO_HBHO) {
    d35e:	4b27      	ldr	r3, [pc, #156]	; (d3fc <rpl_update_header_final+0xa8>)
    d360:	799a      	ldrb	r2, [r3, #6]
        UIP_EXT_HDR_OPT_RPL_BUF->senderrank = default_instance->current_dag->rank;
        uip_ext_len = last_uip_ext_len;
      }
    }
  }
  return 0;
    d362:	2300      	movs	r3, #0

  last_uip_ext_len = uip_ext_len;
  uip_ext_len = 0;
  uip_ext_opt_offset = 2;

  if(UIP_IP_BUF->proto == UIP_PROTO_HBHO) {
    d364:	2a00      	cmp	r2, #0
    d366:	d145      	bne.n	d3f4 <rpl_update_header_final+0xa0>
    if(UIP_HBHO_BUF->len != RPL_HOP_BY_HOP_LEN - 8) {
    d368:	3329      	adds	r3, #41	; 0x29
    d36a:	4a24      	ldr	r2, [pc, #144]	; (d3fc <rpl_update_header_final+0xa8>)
    d36c:	5cd3      	ldrb	r3, [r2, r3]
    d36e:	2b00      	cmp	r3, #0
    d370:	d003      	beq.n	d37a <rpl_update_header_final+0x26>
      PRINTF("RPL: Non RPL Hop-by-hop options support not implemented\n\r");
      uip_ext_len = last_uip_ext_len;
    d372:	4b21      	ldr	r3, [pc, #132]	; (d3f8 <rpl_update_header_final+0xa4>)
    d374:	701c      	strb	r4, [r3, #0]
      return 0;
    d376:	2300      	movs	r3, #0
    d378:	e03c      	b.n	d3f4 <rpl_update_header_final+0xa0>
    }

    if(UIP_EXT_HDR_OPT_BUF->type == UIP_EXT_HDR_OPT_RPL) {
    d37a:	232a      	movs	r3, #42	; 0x2a
    d37c:	4a1f      	ldr	r2, [pc, #124]	; (d3fc <rpl_update_header_final+0xa8>)
    d37e:	5cd2      	ldrb	r2, [r2, r3]
        UIP_EXT_HDR_OPT_RPL_BUF->senderrank = default_instance->current_dag->rank;
        uip_ext_len = last_uip_ext_len;
      }
    }
  }
  return 0;
    d380:	2300      	movs	r3, #0
      PRINTF("RPL: Non RPL Hop-by-hop options support not implemented\n\r");
      uip_ext_len = last_uip_ext_len;
      return 0;
    }

    if(UIP_EXT_HDR_OPT_BUF->type == UIP_EXT_HDR_OPT_RPL) {
    d382:	2a63      	cmp	r2, #99	; 0x63
    d384:	d136      	bne.n	d3f4 <rpl_update_header_final+0xa0>
      if(UIP_EXT_HDR_OPT_RPL_BUF->senderrank == 0) {
    d386:	4b1d      	ldr	r3, [pc, #116]	; (d3fc <rpl_update_header_final+0xa8>)
    d388:	8dda      	ldrh	r2, [r3, #46]	; 0x2e
        UIP_EXT_HDR_OPT_RPL_BUF->senderrank = default_instance->current_dag->rank;
        uip_ext_len = last_uip_ext_len;
      }
    }
  }
  return 0;
    d38a:	2300      	movs	r3, #0
      uip_ext_len = last_uip_ext_len;
      return 0;
    }

    if(UIP_EXT_HDR_OPT_BUF->type == UIP_EXT_HDR_OPT_RPL) {
      if(UIP_EXT_HDR_OPT_RPL_BUF->senderrank == 0) {
    d38c:	2a00      	cmp	r2, #0
    d38e:	d131      	bne.n	d3f4 <rpl_update_header_final+0xa0>
        PRINTF("RPL: Updating RPL option\n\r");
        if(default_instance == NULL || !default_instance->used || !default_instance->current_dag->joined) {
    d390:	4b1b      	ldr	r3, [pc, #108]	; (d400 <rpl_update_header_final+0xac>)
    d392:	681a      	ldr	r2, [r3, #0]
    d394:	2a00      	cmp	r2, #0
    d396:	d02c      	beq.n	d3f2 <rpl_update_header_final+0x9e>
    d398:	238d      	movs	r3, #141	; 0x8d
    d39a:	5cd1      	ldrb	r1, [r2, r3]
          PRINTF("RPL: Unable to add hop-by-hop extension header: incorrect default instance\n\r");
          return 1;
    d39c:	3b8c      	subs	r3, #140	; 0x8c
    }

    if(UIP_EXT_HDR_OPT_BUF->type == UIP_EXT_HDR_OPT_RPL) {
      if(UIP_EXT_HDR_OPT_RPL_BUF->senderrank == 0) {
        PRINTF("RPL: Updating RPL option\n\r");
        if(default_instance == NULL || !default_instance->used || !default_instance->current_dag->joined) {
    d39e:	2900      	cmp	r1, #0
    d3a0:	d028      	beq.n	d3f4 <rpl_update_header_final+0xa0>
    d3a2:	68d2      	ldr	r2, [r2, #12]
    d3a4:	7d91      	ldrb	r1, [r2, #22]
    d3a6:	2900      	cmp	r1, #0
    d3a8:	d024      	beq.n	d3f4 <rpl_update_header_final+0xa0>
    d3aa:	1c01      	adds	r1, r0, #0
          PRINTF("RPL: Unable to add hop-by-hop extension header: incorrect default instance\n\r");
          return 1;
        }
        parent = rpl_find_parent(default_instance->current_dag, addr);
    d3ac:	1c10      	adds	r0, r2, #0
    d3ae:	4b15      	ldr	r3, [pc, #84]	; (d404 <rpl_update_header_final+0xb0>)
    d3b0:	4798      	blx	r3
        if(parent == NULL || parent != parent->dag->preferred_parent) {
    d3b2:	2800      	cmp	r0, #0
    d3b4:	d003      	beq.n	d3be <rpl_update_header_final+0x6a>
    d3b6:	6843      	ldr	r3, [r0, #4]
    d3b8:	699b      	ldr	r3, [r3, #24]
    d3ba:	4283      	cmp	r3, r0
    d3bc:	d006      	beq.n	d3cc <rpl_update_header_final+0x78>
          UIP_EXT_HDR_OPT_RPL_BUF->flags = RPL_HDR_OPT_DOWN;
    d3be:	4b0e      	ldr	r3, [pc, #56]	; (d3f8 <rpl_update_header_final+0xa4>)
    d3c0:	781b      	ldrb	r3, [r3, #0]
    d3c2:	332a      	adds	r3, #42	; 0x2a
    d3c4:	4a0d      	ldr	r2, [pc, #52]	; (d3fc <rpl_update_header_final+0xa8>)
    d3c6:	189b      	adds	r3, r3, r2
    d3c8:	2280      	movs	r2, #128	; 0x80
    d3ca:	709a      	strb	r2, [r3, #2]
        }
        UIP_EXT_HDR_OPT_RPL_BUF->instance = default_instance->instance_id;
    d3cc:	490a      	ldr	r1, [pc, #40]	; (d3f8 <rpl_update_header_final+0xa4>)
    d3ce:	780b      	ldrb	r3, [r1, #0]
    d3d0:	332a      	adds	r3, #42	; 0x2a
    d3d2:	4a0a      	ldr	r2, [pc, #40]	; (d3fc <rpl_update_header_final+0xa8>)
    d3d4:	189b      	adds	r3, r3, r2
    d3d6:	4a0a      	ldr	r2, [pc, #40]	; (d400 <rpl_update_header_final+0xac>)
    d3d8:	6812      	ldr	r2, [r2, #0]
    d3da:	208c      	movs	r0, #140	; 0x8c
    d3dc:	5c10      	ldrb	r0, [r2, r0]
    d3de:	70d8      	strb	r0, [r3, #3]
        UIP_EXT_HDR_OPT_RPL_BUF->senderrank = default_instance->current_dag->rank;
    d3e0:	68d0      	ldr	r0, [r2, #12]
    d3e2:	8b82      	ldrh	r2, [r0, #28]
    d3e4:	7f00      	ldrb	r0, [r0, #28]
    d3e6:	7118      	strb	r0, [r3, #4]
    d3e8:	0a12      	lsrs	r2, r2, #8
    d3ea:	715a      	strb	r2, [r3, #5]
        uip_ext_len = last_uip_ext_len;
    d3ec:	700c      	strb	r4, [r1, #0]
      }
    }
  }
  return 0;
    d3ee:	2300      	movs	r3, #0
    d3f0:	e000      	b.n	d3f4 <rpl_update_header_final+0xa0>
    if(UIP_EXT_HDR_OPT_BUF->type == UIP_EXT_HDR_OPT_RPL) {
      if(UIP_EXT_HDR_OPT_RPL_BUF->senderrank == 0) {
        PRINTF("RPL: Updating RPL option\n\r");
        if(default_instance == NULL || !default_instance->used || !default_instance->current_dag->joined) {
          PRINTF("RPL: Unable to add hop-by-hop extension header: incorrect default instance\n\r");
          return 1;
    d3f2:	2301      	movs	r3, #1
        uip_ext_len = last_uip_ext_len;
      }
    }
  }
  return 0;
}
    d3f4:	1c18      	adds	r0, r3, #0
    d3f6:	bd10      	pop	{r4, pc}
    d3f8:	20000b12 	.word	0x20000b12
    d3fc:	20002cd4 	.word	0x20002cd4
    d400:	20003284 	.word	0x20003284
    d404:	0000c4d5 	.word	0x0000c4d5

0000d408 <rpl_invert_header>:
  }
}
/*---------------------------------------------------------------------------*/
uint8_t
rpl_invert_header(void)
{
    d408:	b538      	push	{r3, r4, r5, lr}
  uint8_t uip_ext_opt_offset;
  uint8_t last_uip_ext_len;

  last_uip_ext_len = uip_ext_len;
    d40a:	4b13      	ldr	r3, [pc, #76]	; (d458 <rpl_invert_header+0x50>)
    d40c:	781c      	ldrb	r4, [r3, #0]
  uip_ext_len = 0;
    d40e:	2200      	movs	r2, #0
    d410:	701a      	strb	r2, [r3, #0]
  uip_ext_opt_offset = 2;

  PRINTF("RPL: Verifying the presence of the RPL header option\n\r");
  switch(UIP_IP_BUF->proto) {
    d412:	4b12      	ldr	r3, [pc, #72]	; (d45c <rpl_invert_header+0x54>)
    d414:	7998      	ldrb	r0, [r3, #6]
    d416:	2800      	cmp	r0, #0
    d418:	d003      	beq.n	d422 <rpl_invert_header+0x1a>
  case UIP_PROTO_HBHO:
    break;
  default:
    PRINTF("RPL: No hop-by-hop Option found\n\r");
    uip_ext_len = last_uip_ext_len;
    d41a:	4b0f      	ldr	r3, [pc, #60]	; (d458 <rpl_invert_header+0x50>)
    d41c:	701c      	strb	r4, [r3, #0]
    return 0;
    d41e:	2000      	movs	r0, #0
    d420:	e019      	b.n	d456 <rpl_invert_header+0x4e>
  }

  switch (UIP_EXT_HDR_OPT_BUF->type) {
    d422:	232a      	movs	r3, #42	; 0x2a
    d424:	4a0d      	ldr	r2, [pc, #52]	; (d45c <rpl_invert_header+0x54>)
    d426:	5cd3      	ldrb	r3, [r2, r3]
    d428:	2b63      	cmp	r3, #99	; 0x63
    d42a:	d112      	bne.n	d452 <rpl_invert_header+0x4a>
  case UIP_EXT_HDR_OPT_RPL:
    PRINTF("RPL: Updating RPL option (switching direction)\n\r");
    UIP_EXT_HDR_OPT_RPL_BUF->flags &= RPL_HDR_OPT_DOWN;
    UIP_EXT_HDR_OPT_RPL_BUF->flags ^= RPL_HDR_OPT_DOWN;
    d42c:	1c15      	adds	r5, r2, #0
  }

  switch (UIP_EXT_HDR_OPT_BUF->type) {
  case UIP_EXT_HDR_OPT_RPL:
    PRINTF("RPL: Updating RPL option (switching direction)\n\r");
    UIP_EXT_HDR_OPT_RPL_BUF->flags &= RPL_HDR_OPT_DOWN;
    d42e:	222c      	movs	r2, #44	; 0x2c
    d430:	5cab      	ldrb	r3, [r5, r2]
    d432:	217f      	movs	r1, #127	; 0x7f
    d434:	438b      	bics	r3, r1
    UIP_EXT_HDR_OPT_RPL_BUF->flags ^= RPL_HDR_OPT_DOWN;
    d436:	39ff      	subs	r1, #255	; 0xff
    d438:	404b      	eors	r3, r1
    d43a:	54ab      	strb	r3, [r5, r2]
    UIP_EXT_HDR_OPT_RPL_BUF->senderrank = rpl_get_instance(UIP_EXT_HDR_OPT_RPL_BUF->instance)->current_dag->rank;
    d43c:	232d      	movs	r3, #45	; 0x2d
    d43e:	5ce8      	ldrb	r0, [r5, r3]
    d440:	4b07      	ldr	r3, [pc, #28]	; (d460 <rpl_invert_header+0x58>)
    d442:	4798      	blx	r3
    d444:	68c3      	ldr	r3, [r0, #12]
    d446:	8b9b      	ldrh	r3, [r3, #28]
    d448:	85eb      	strh	r3, [r5, #46]	; 0x2e
    uip_ext_len = last_uip_ext_len;
    d44a:	4b03      	ldr	r3, [pc, #12]	; (d458 <rpl_invert_header+0x50>)
    d44c:	701c      	strb	r4, [r3, #0]
    return RPL_HOP_BY_HOP_LEN;
    d44e:	2008      	movs	r0, #8
    d450:	e001      	b.n	d456 <rpl_invert_header+0x4e>
  default:
    PRINTF("RPL: Multi Hop-by-hop options not implemented\n\r");
    uip_ext_len = last_uip_ext_len;
    d452:	4b01      	ldr	r3, [pc, #4]	; (d458 <rpl_invert_header+0x50>)
    d454:	701c      	strb	r4, [r3, #0]
    return 0;
  }
}
    d456:	bd38      	pop	{r3, r4, r5, pc}
    d458:	20000b12 	.word	0x20000b12
    d45c:	20002cd4 	.word	0x20002cd4
    d460:	0000c95d 	.word	0x0000c95d

0000d464 <rpl_insert_header>:
/*---------------------------------------------------------------------------*/
void
rpl_insert_header(void)
{
    d464:	b508      	push	{r3, lr}
  uint8_t uip_ext_opt_offset;
  if(default_instance != NULL) {
    d466:	4b07      	ldr	r3, [pc, #28]	; (d484 <rpl_insert_header+0x20>)
    d468:	681b      	ldr	r3, [r3, #0]
    d46a:	2b00      	cmp	r3, #0
    d46c:	d008      	beq.n	d480 <rpl_insert_header+0x1c>
    uip_ext_opt_offset = 2;
    if(UIP_EXT_HDR_OPT_BUF->type == UIP_EXT_HDR_OPT_RPL) {
    d46e:	4b06      	ldr	r3, [pc, #24]	; (d488 <rpl_insert_header+0x24>)
    d470:	781b      	ldrb	r3, [r3, #0]
    d472:	332a      	adds	r3, #42	; 0x2a
    d474:	4a05      	ldr	r2, [pc, #20]	; (d48c <rpl_insert_header+0x28>)
    d476:	5cd3      	ldrb	r3, [r2, r3]
    d478:	2b63      	cmp	r3, #99	; 0x63
    d47a:	d101      	bne.n	d480 <rpl_insert_header+0x1c>
      rpl_update_header_empty();
    d47c:	4b04      	ldr	r3, [pc, #16]	; (d490 <rpl_insert_header+0x2c>)
    d47e:	4798      	blx	r3
    }
  }
}
    d480:	bd08      	pop	{r3, pc}
    d482:	46c0      	nop			; (mov r8, r8)
    d484:	20003284 	.word	0x20003284
    d488:	20000b12 	.word	0x20000b12
    d48c:	20002cd4 	.word	0x20002cd4
    d490:	0000d1fd 	.word	0x0000d1fd

0000d494 <get32>:
  return 0;
}
/*---------------------------------------------------------------------------*/
static uint32_t
get32(uint8_t *buffer, int pos)
{
    d494:	b510      	push	{r4, lr}
  return (uint32_t)buffer[pos] << 24 | (uint32_t)buffer[pos + 1] << 16 |
         (uint32_t)buffer[pos + 2] << 8 | buffer[pos + 3];
    d496:	1842      	adds	r2, r0, r1
    d498:	78d4      	ldrb	r4, [r2, #3]
}
/*---------------------------------------------------------------------------*/
static uint32_t
get32(uint8_t *buffer, int pos)
{
  return (uint32_t)buffer[pos] << 24 | (uint32_t)buffer[pos + 1] << 16 |
    d49a:	5c40      	ldrb	r0, [r0, r1]
    d49c:	0600      	lsls	r0, r0, #24
    d49e:	4320      	orrs	r0, r4
    d4a0:	7853      	ldrb	r3, [r2, #1]
    d4a2:	041b      	lsls	r3, r3, #16
    d4a4:	4318      	orrs	r0, r3
         (uint32_t)buffer[pos + 2] << 8 | buffer[pos + 3];
    d4a6:	7893      	ldrb	r3, [r2, #2]
    d4a8:	021b      	lsls	r3, r3, #8
}
/*---------------------------------------------------------------------------*/
static uint32_t
get32(uint8_t *buffer, int pos)
{
  return (uint32_t)buffer[pos] << 24 | (uint32_t)buffer[pos + 1] << 16 |
    d4aa:	4318      	orrs	r0, r3
         (uint32_t)buffer[pos + 2] << 8 | buffer[pos + 3];
}
    d4ac:	bd10      	pop	{r4, pc}
    d4ae:	46c0      	nop			; (mov r8, r8)

0000d4b0 <set32>:
/*---------------------------------------------------------------------------*/
static void
set32(uint8_t *buffer, int pos, uint32_t value)
{
  buffer[pos++] = value >> 24;
    d4b0:	0e13      	lsrs	r3, r2, #24
    d4b2:	5443      	strb	r3, [r0, r1]
  buffer[pos++] = (value >> 16) & 0xff;
    d4b4:	1841      	adds	r1, r0, r1
    d4b6:	0c13      	lsrs	r3, r2, #16
    d4b8:	704b      	strb	r3, [r1, #1]
  buffer[pos++] = (value >> 8) & 0xff;
    d4ba:	0a13      	lsrs	r3, r2, #8
    d4bc:	708b      	strb	r3, [r1, #2]
  buffer[pos++] = value & 0xff;
    d4be:	70ca      	strb	r2, [r1, #3]
}
    d4c0:	4770      	bx	lr
    d4c2:	46c0      	nop			; (mov r8, r8)

0000d4c4 <get16>:
/*---------------------------------------------------------------------------*/
static uint16_t
get16(uint8_t *buffer, int pos)
{
  return (uint16_t)buffer[pos] << 8 | buffer[pos + 1];
    d4c4:	5c43      	ldrb	r3, [r0, r1]
    d4c6:	021b      	lsls	r3, r3, #8
    d4c8:	1841      	adds	r1, r0, r1
    d4ca:	7848      	ldrb	r0, [r1, #1]
    d4cc:	4318      	orrs	r0, r3
}
    d4ce:	4770      	bx	lr

0000d4d0 <set16>:
/*---------------------------------------------------------------------------*/
static void
set16(uint8_t *buffer, int pos, uint16_t value)
{
  buffer[pos++] = value >> 8;
    d4d0:	0a13      	lsrs	r3, r2, #8
    d4d2:	5443      	strb	r3, [r0, r1]
  buffer[pos++] = value & 0xff;
    d4d4:	1841      	adds	r1, r0, r1
    d4d6:	704a      	strb	r2, [r1, #1]
}
    d4d8:	4770      	bx	lr
    d4da:	46c0      	nop			; (mov r8, r8)

0000d4dc <dao_ack_input>:
  PRINTF("RPL: Received a DAO ACK with sequence number %d and status %d from ",
    sequence, status);
  PRINT6ADDR(&UIP_IP_BUF->srcipaddr);
  PRINTF("\n\r");
#endif /* DEBUG */
  uip_len = 0;
    d4dc:	2200      	movs	r2, #0
    d4de:	4b01      	ldr	r3, [pc, #4]	; (d4e4 <dao_ack_input+0x8>)
    d4e0:	801a      	strh	r2, [r3, #0]
}
    d4e2:	4770      	bx	lr
    d4e4:	20002cc0 	.word	0x20002cc0

0000d4e8 <dio_input>:
  uip_icmp6_send(addr, ICMP6_RPL, RPL_CODE_DIS, 2);
}
/*---------------------------------------------------------------------------*/
static void
dio_input(void)
{
    d4e8:	b5f0      	push	{r4, r5, r6, r7, lr}
    d4ea:	465f      	mov	r7, fp
    d4ec:	4656      	mov	r6, sl
    d4ee:	464d      	mov	r5, r9
    d4f0:	4644      	mov	r4, r8
    d4f2:	b4f0      	push	{r4, r5, r6, r7}
    d4f4:	b09f      	sub	sp, #124	; 0x7c
  int i;
  int len;
  uip_ipaddr_t from;
  uip_ds6_nbr_t *nbr;

  memset(&dio, 0, sizeof(dio));
    d4f6:	ac07      	add	r4, sp, #28
    d4f8:	1c20      	adds	r0, r4, #0
    d4fa:	2100      	movs	r1, #0
    d4fc:	225c      	movs	r2, #92	; 0x5c
    d4fe:	4b95      	ldr	r3, [pc, #596]	; (d754 <dio_input+0x26c>)
    d500:	4798      	blx	r3

  /* Set default values in case the DIO configuration option is missing. */
  dio.dag_intdoubl = RPL_DIO_INTERVAL_DOUBLINGS;
    d502:	2308      	movs	r3, #8
    d504:	76a3      	strb	r3, [r4, #26]
  dio.dag_intmin = RPL_DIO_INTERVAL_MIN;
    d506:	3304      	adds	r3, #4
    d508:	76e3      	strb	r3, [r4, #27]
  dio.dag_redund = RPL_DIO_REDUNDANCY;
    d50a:	3b02      	subs	r3, #2
    d50c:	7723      	strb	r3, [r4, #28]
  dio.dag_min_hoprankinc = RPL_MIN_HOPRANKINC;
    d50e:	33f6      	adds	r3, #246	; 0xf6
    d510:	8463      	strh	r3, [r4, #34]	; 0x22
  dio.dag_max_rankinc = RPL_MAX_RANKINC;
    d512:	23e0      	movs	r3, #224	; 0xe0
    d514:	00db      	lsls	r3, r3, #3
    d516:	8423      	strh	r3, [r4, #32]
  dio.ocp = RPL_OF.ocp;
    d518:	4b8f      	ldr	r3, [pc, #572]	; (d758 <dio_input+0x270>)
    d51a:	8b1b      	ldrh	r3, [r3, #24]
    d51c:	8223      	strh	r3, [r4, #16]
  dio.default_lifetime = RPL_DEFAULT_LIFETIME;
    d51e:	23ff      	movs	r3, #255	; 0xff
    d520:	7763      	strb	r3, [r4, #29]
  dio.lifetime_unit = RPL_DEFAULT_LIFETIME_UNIT;
    d522:	3b01      	subs	r3, #1
    d524:	3bff      	subs	r3, #255	; 0xff
    d526:	83e3      	strh	r3, [r4, #30]

  uip_ipaddr_copy(&from, &UIP_IP_BUF->srcipaddr);
    d528:	a803      	add	r0, sp, #12
    d52a:	4b8c      	ldr	r3, [pc, #560]	; (d75c <dio_input+0x274>)
    d52c:	3308      	adds	r3, #8
    d52e:	1c02      	adds	r2, r0, #0
    d530:	cb32      	ldmia	r3!, {r1, r4, r5}
    d532:	c232      	stmia	r2!, {r1, r4, r5}
    d534:	681b      	ldr	r3, [r3, #0]
    d536:	6013      	str	r3, [r2, #0]
  /* DAG Information Object */
  PRINTF("RPL: Received a DIO from ");
  PRINT6ADDR(&from);
  PRINTF("\n\r");

  if((nbr = uip_ds6_nbr_lookup(&from)) == NULL) {
    d538:	4b89      	ldr	r3, [pc, #548]	; (d760 <dio_input+0x278>)
    d53a:	4798      	blx	r3
    d53c:	2800      	cmp	r0, #0
    d53e:	d10c      	bne.n	d55a <dio_input+0x72>
    if((nbr = uip_ds6_nbr_add(&from, (uip_lladdr_t *)
    d540:	a803      	add	r0, sp, #12
    d542:	4988      	ldr	r1, [pc, #544]	; (d764 <dio_input+0x27c>)
    d544:	2200      	movs	r2, #0
    d546:	2301      	movs	r3, #1
    d548:	4c87      	ldr	r4, [pc, #540]	; (d768 <dio_input+0x280>)
    d54a:	47a0      	blx	r4
    d54c:	2800      	cmp	r0, #0
    d54e:	d100      	bne.n	d552 <dio_input+0x6a>
    d550:	e0f9      	b.n	d746 <dio_input+0x25e>
                              packetbuf_addr(PACKETBUF_ADDR_SENDER),
                              0, NBR_REACHABLE)) != NULL) {
      /* set reachable timer */
      stimer_set(&nbr->reachable, UIP_ND6_REACHABLE_TIME / 1000);
    d552:	3010      	adds	r0, #16
    d554:	211e      	movs	r1, #30
    d556:	4b85      	ldr	r3, [pc, #532]	; (d76c <dio_input+0x284>)
    d558:	4798      	blx	r3
    }
  } else {
    PRINTF("RPL: Neighbor already in neighbor cache\n\r");
  }

  buffer_length = uip_len - uip_l3_icmp_hdr_len;
    d55a:	4b85      	ldr	r3, [pc, #532]	; (d770 <dio_input+0x288>)
    d55c:	781b      	ldrb	r3, [r3, #0]
    d55e:	4a85      	ldr	r2, [pc, #532]	; (d774 <dio_input+0x28c>)
    d560:	8812      	ldrh	r2, [r2, #0]
    d562:	1ad2      	subs	r2, r2, r3
    d564:	3a2c      	subs	r2, #44	; 0x2c
    d566:	b2d2      	uxtb	r2, r2
    d568:	4692      	mov	sl, r2

  /* Process the DIO base option. */
  i = 0;
  buffer = UIP_ICMP_PAYLOAD;
    d56a:	332c      	adds	r3, #44	; 0x2c
    d56c:	4a7b      	ldr	r2, [pc, #492]	; (d75c <dio_input+0x274>)
    d56e:	189e      	adds	r6, r3, r2

  dio.instance_id = buffer[i++];
    d570:	ac07      	add	r4, sp, #28
    d572:	5cd3      	ldrb	r3, [r2, r3]
    d574:	7623      	strb	r3, [r4, #24]
  dio.version = buffer[i++];
    d576:	7873      	ldrb	r3, [r6, #1]
    d578:	75e3      	strb	r3, [r4, #23]
  dio.rank = get16(buffer, i);
    d57a:	1c30      	adds	r0, r6, #0
    d57c:	2102      	movs	r1, #2
    d57e:	4b7e      	ldr	r3, [pc, #504]	; (d778 <dio_input+0x290>)
    d580:	4798      	blx	r3
    d582:	8260      	strh	r0, [r4, #18]
  PRINTF("RPL: Incoming DIO (id, ver, rank) = (%u,%u,%u)\n\r",
         (unsigned)dio.instance_id,
         (unsigned)dio.version, 
         (unsigned)dio.rank);

  dio.grounded = buffer[i] & RPL_DIO_GROUNDED;
    d584:	7933      	ldrb	r3, [r6, #4]
    d586:	227f      	movs	r2, #127	; 0x7f
    d588:	1c19      	adds	r1, r3, #0
    d58a:	4391      	bics	r1, r2
    d58c:	7521      	strb	r1, [r4, #20]
  dio.mop = (buffer[i]& RPL_DIO_MOP_MASK) >> RPL_DIO_MOP_SHIFT;
    d58e:	069a      	lsls	r2, r3, #26
    d590:	0f52      	lsrs	r2, r2, #29
    d592:	7562      	strb	r2, [r4, #21]
  dio.preference = buffer[i++] & RPL_DIO_PREFERENCE_MASK;
    d594:	2207      	movs	r2, #7
    d596:	4013      	ands	r3, r2
    d598:	75a3      	strb	r3, [r4, #22]

  dio.dtsn = buffer[i++];
    d59a:	7973      	ldrb	r3, [r6, #5]
    d59c:	7663      	strb	r3, [r4, #25]
  /* two reserved bytes */
  i += 2;

  memcpy(&dio.dag_id, buffer + i, sizeof(dio.dag_id));
    d59e:	1c31      	adds	r1, r6, #0
    d5a0:	3108      	adds	r1, #8
    d5a2:	1c20      	adds	r0, r4, #0
    d5a4:	3209      	adds	r2, #9
    d5a6:	4b75      	ldr	r3, [pc, #468]	; (d77c <dio_input+0x294>)
    d5a8:	4798      	blx	r3
  i += sizeof(dio.dag_id);
    d5aa:	2418      	movs	r4, #24

      /* Path control field not yet implemented - at i + 2 */
      dio.dag_intdoubl = buffer[i + 3];
      dio.dag_intmin = buffer[i + 4];
      dio.dag_redund = buffer[i + 5];
      dio.dag_max_rankinc = get16(buffer, i + 6);
    d5ac:	4b72      	ldr	r3, [pc, #456]	; (d778 <dio_input+0x290>)
    d5ae:	4699      	mov	r9, r3
  PRINTF("RPL: Incoming DIO (dag_id, pref) = (");
  PRINT6ADDR(&dio.dag_id);
  PRINTF(", %u)\n\r", dio.preference);

  /* Check if there are any DIO suboptions. */
  for(; i < buffer_length; i += len) {
    d5b0:	e0ba      	b.n	d728 <dio_input+0x240>
    subopt_type = buffer[i];
    d5b2:	9401      	str	r4, [sp, #4]
    d5b4:	5d33      	ldrb	r3, [r6, r4]
    if(subopt_type == RPL_OPTION_PAD1) {
    d5b6:	2b00      	cmp	r3, #0
    d5b8:	d100      	bne.n	d5bc <dio_input+0xd4>
    d5ba:	e0c1      	b.n	d740 <dio_input+0x258>
      len = 1;
    } else {
      /* Suboption with a two-byte header + payload */
      len = 2 + buffer[i + 1];
    d5bc:	1931      	adds	r1, r6, r4
    d5be:	7849      	ldrb	r1, [r1, #1]
    d5c0:	1c8f      	adds	r7, r1, #2
    }

    if(len + i > buffer_length) {
    d5c2:	19e5      	adds	r5, r4, r7
    d5c4:	42aa      	cmp	r2, r5
    d5c6:	da00      	bge.n	d5ca <dio_input+0xe2>
    d5c8:	e0bd      	b.n	d746 <dio_input+0x25e>
      return;
    }

    PRINTF("RPL: DIO option %u, length: %u\n\r", subopt_type, len - 2);

    switch(subopt_type) {
    d5ca:	2b03      	cmp	r3, #3
    d5cc:	d043      	beq.n	d656 <dio_input+0x16e>
    d5ce:	d802      	bhi.n	d5d6 <dio_input+0xee>
    d5d0:	2b02      	cmp	r3, #2
    d5d2:	d006      	beq.n	d5e2 <dio_input+0xfa>
    d5d4:	e0a7      	b.n	d726 <dio_input+0x23e>
    d5d6:	2b04      	cmp	r3, #4
    d5d8:	d065      	beq.n	d6a6 <dio_input+0x1be>
    d5da:	2b08      	cmp	r3, #8
    d5dc:	d100      	bne.n	d5e0 <dio_input+0xf8>
    d5de:	e088      	b.n	d6f2 <dio_input+0x20a>
    d5e0:	e0a1      	b.n	d726 <dio_input+0x23e>
    case RPL_OPTION_DAG_METRIC_CONTAINER:
      if(len < 6) {
    d5e2:	2f05      	cmp	r7, #5
    d5e4:	dc00      	bgt.n	d5e8 <dio_input+0x100>
    d5e6:	e0ae      	b.n	d746 <dio_input+0x25e>
        PRINTF("RPL: Invalid DAG MC, len = %d\n\r", len);
	RPL_STAT(rpl_stats.malformed_msgs++);
        return;
      }
      dio.mc.type = buffer[i + 2];
    d5e8:	9b01      	ldr	r3, [sp, #4]
    d5ea:	18f0      	adds	r0, r6, r3
    d5ec:	7883      	ldrb	r3, [r0, #2]
    d5ee:	4698      	mov	r8, r3
    d5f0:	ab07      	add	r3, sp, #28
    d5f2:	2254      	movs	r2, #84	; 0x54
    d5f4:	4641      	mov	r1, r8
    d5f6:	5499      	strb	r1, [r3, r2]
      dio.mc.flags = buffer[i + 3] << 1;
      dio.mc.flags |= buffer[i + 4] >> 7;
    d5f8:	7902      	ldrb	r2, [r0, #4]
    d5fa:	09d1      	lsrs	r1, r2, #7
    d5fc:	468c      	mov	ip, r1
        PRINTF("RPL: Invalid DAG MC, len = %d\n\r", len);
	RPL_STAT(rpl_stats.malformed_msgs++);
        return;
      }
      dio.mc.type = buffer[i + 2];
      dio.mc.flags = buffer[i + 3] << 1;
    d5fe:	78c1      	ldrb	r1, [r0, #3]
    d600:	0049      	lsls	r1, r1, #1
      dio.mc.flags |= buffer[i + 4] >> 7;
    d602:	4667      	mov	r7, ip
    d604:	4339      	orrs	r1, r7
    d606:	2755      	movs	r7, #85	; 0x55
    d608:	55d9      	strb	r1, [r3, r7]
      dio.mc.aggr = (buffer[i + 4] >> 4) & 0x3;
    d60a:	0691      	lsls	r1, r2, #26
    d60c:	0f89      	lsrs	r1, r1, #30
    d60e:	3701      	adds	r7, #1
    d610:	55d9      	strb	r1, [r3, r7]
      dio.mc.prec = buffer[i + 4] & 0xf;
    d612:	210f      	movs	r1, #15
    d614:	400a      	ands	r2, r1
    d616:	3148      	adds	r1, #72	; 0x48
    d618:	545a      	strb	r2, [r3, r1]
      dio.mc.length = buffer[i + 5];
    d61a:	7941      	ldrb	r1, [r0, #5]
    d61c:	2258      	movs	r2, #88	; 0x58
    d61e:	5499      	strb	r1, [r3, r2]

      if(dio.mc.type == RPL_DAG_MC_NONE) {
    d620:	4643      	mov	r3, r8
    d622:	2b00      	cmp	r3, #0
    d624:	d07f      	beq.n	d726 <dio_input+0x23e>
        /* No metric container: do nothing */
      } else if(dio.mc.type == RPL_DAG_MC_ETX) {
    d626:	2b07      	cmp	r3, #7
    d628:	d107      	bne.n	d63a <dio_input+0x152>
        dio.mc.obj.etx = get16(buffer, i + 6);
    d62a:	1da1      	adds	r1, r4, #6
    d62c:	1c30      	adds	r0, r6, #0
    d62e:	4b52      	ldr	r3, [pc, #328]	; (d778 <dio_input+0x290>)
    d630:	4798      	blx	r3
    d632:	235a      	movs	r3, #90	; 0x5a
    d634:	aa07      	add	r2, sp, #28
    d636:	52d0      	strh	r0, [r2, r3]
    d638:	e075      	b.n	d726 <dio_input+0x23e>
	       (unsigned)dio.mc.flags, 
	       (unsigned)dio.mc.aggr, 
	       (unsigned)dio.mc.prec, 
	       (unsigned)dio.mc.length, 
	       (unsigned)dio.mc.obj.etx);
      } else if(dio.mc.type == RPL_DAG_MC_ENERGY) {
    d63a:	4643      	mov	r3, r8
    d63c:	2b02      	cmp	r3, #2
    d63e:	d000      	beq.n	d642 <dio_input+0x15a>
    d640:	e081      	b.n	d746 <dio_input+0x25e>
        dio.mc.obj.energy.flags = buffer[i + 6];
    d642:	ab07      	add	r3, sp, #28
    d644:	9a01      	ldr	r2, [sp, #4]
    d646:	18b1      	adds	r1, r6, r2
    d648:	7988      	ldrb	r0, [r1, #6]
    d64a:	225a      	movs	r2, #90	; 0x5a
    d64c:	5498      	strb	r0, [r3, r2]
        dio.mc.obj.energy.energy_est = buffer[i + 7];
    d64e:	79c9      	ldrb	r1, [r1, #7]
    d650:	3201      	adds	r2, #1
    d652:	5499      	strb	r1, [r3, r2]
    d654:	e067      	b.n	d726 <dio_input+0x23e>
       PRINTF("RPL: Unhandled DAG MC type: %u\n\r", (unsigned)dio.mc.type);
       return;
      }
      break;
    case RPL_OPTION_ROUTE_INFO:
      if(len < 9) {
    d656:	2f08      	cmp	r7, #8
    d658:	dd75      	ble.n	d746 <dio_input+0x25e>
	RPL_STAT(rpl_stats.malformed_msgs++);
        return;
      }

      /* The flags field includes the preference value. */
      dio.destination_prefix.length = buffer[i + 2];
    d65a:	9b01      	ldr	r3, [sp, #4]
    d65c:	18f3      	adds	r3, r6, r3
    d65e:	789a      	ldrb	r2, [r3, #2]
    d660:	4693      	mov	fp, r2
    d662:	2238      	movs	r2, #56	; 0x38
    d664:	a802      	add	r0, sp, #8
    d666:	2114      	movs	r1, #20
    d668:	1840      	adds	r0, r0, r1
    d66a:	4659      	mov	r1, fp
    d66c:	5481      	strb	r1, [r0, r2]
      dio.destination_prefix.flags = buffer[i + 3];
    d66e:	78da      	ldrb	r2, [r3, #3]
    d670:	2339      	movs	r3, #57	; 0x39
    d672:	a802      	add	r0, sp, #8
    d674:	2114      	movs	r1, #20
    d676:	1840      	adds	r0, r0, r1
    d678:	54c2      	strb	r2, [r0, r3]
      dio.destination_prefix.lifetime = get32(buffer, i + 4);
    d67a:	1d21      	adds	r1, r4, #4
    d67c:	1c30      	adds	r0, r6, #0
    d67e:	4a40      	ldr	r2, [pc, #256]	; (d780 <dio_input+0x298>)
    d680:	4790      	blx	r2
    d682:	9014      	str	r0, [sp, #80]	; 0x50

      if(((dio.destination_prefix.length + 7) / 8) + 8 <= len &&
    d684:	465a      	mov	r2, fp
    d686:	3207      	adds	r2, #7
    d688:	10d2      	asrs	r2, r2, #3
    d68a:	1c13      	adds	r3, r2, #0
    d68c:	3308      	adds	r3, #8
    d68e:	429f      	cmp	r7, r3
    d690:	db59      	blt.n	d746 <dio_input+0x25e>
    d692:	4658      	mov	r0, fp
    d694:	2880      	cmp	r0, #128	; 0x80
    d696:	d856      	bhi.n	d746 <dio_input+0x25e>
         dio.destination_prefix.length <= 128) {
        PRINTF("RPL: Copying destination prefix\n\r");
        memcpy(&dio.destination_prefix.prefix, &buffer[i + 8],
    d698:	9901      	ldr	r1, [sp, #4]
    d69a:	3108      	adds	r1, #8
    d69c:	1871      	adds	r1, r6, r1
    d69e:	a810      	add	r0, sp, #64	; 0x40
    d6a0:	4b36      	ldr	r3, [pc, #216]	; (d77c <dio_input+0x294>)
    d6a2:	4798      	blx	r3
        PRINTF("RPL: Invalid route info option, len = %d\n\r", len);
	RPL_STAT(rpl_stats.malformed_msgs++);
	return;
      }

      break;
    d6a4:	e03f      	b.n	d726 <dio_input+0x23e>
    case RPL_OPTION_DAG_CONF:
      if(len != 16) {
    d6a6:	2f10      	cmp	r7, #16
    d6a8:	d14d      	bne.n	d746 <dio_input+0x25e>
	RPL_STAT(rpl_stats.malformed_msgs++);
        return;
      }

      /* Path control field not yet implemented - at i + 2 */
      dio.dag_intdoubl = buffer[i + 3];
    d6aa:	af07      	add	r7, sp, #28
    d6ac:	9b01      	ldr	r3, [sp, #4]
    d6ae:	4698      	mov	r8, r3
    d6b0:	44b0      	add	r8, r6
    d6b2:	4643      	mov	r3, r8
    d6b4:	78db      	ldrb	r3, [r3, #3]
    d6b6:	76bb      	strb	r3, [r7, #26]
      dio.dag_intmin = buffer[i + 4];
    d6b8:	4643      	mov	r3, r8
    d6ba:	791b      	ldrb	r3, [r3, #4]
    d6bc:	76fb      	strb	r3, [r7, #27]
      dio.dag_redund = buffer[i + 5];
    d6be:	4643      	mov	r3, r8
    d6c0:	795b      	ldrb	r3, [r3, #5]
    d6c2:	773b      	strb	r3, [r7, #28]
      dio.dag_max_rankinc = get16(buffer, i + 6);
    d6c4:	1da1      	adds	r1, r4, #6
    d6c6:	1c30      	adds	r0, r6, #0
    d6c8:	47c8      	blx	r9
    d6ca:	8438      	strh	r0, [r7, #32]
      dio.dag_min_hoprankinc = get16(buffer, i + 8);
    d6cc:	1c21      	adds	r1, r4, #0
    d6ce:	3108      	adds	r1, #8
    d6d0:	1c30      	adds	r0, r6, #0
    d6d2:	47c8      	blx	r9
    d6d4:	8478      	strh	r0, [r7, #34]	; 0x22
      dio.ocp = get16(buffer, i + 10);
    d6d6:	1c21      	adds	r1, r4, #0
    d6d8:	310a      	adds	r1, #10
    d6da:	1c30      	adds	r0, r6, #0
    d6dc:	47c8      	blx	r9
    d6de:	8238      	strh	r0, [r7, #16]
      /* buffer + 12 is reserved */
      dio.default_lifetime = buffer[i + 13];
    d6e0:	4643      	mov	r3, r8
    d6e2:	7b5b      	ldrb	r3, [r3, #13]
    d6e4:	777b      	strb	r3, [r7, #29]
      dio.lifetime_unit = get16(buffer, i + 14);
    d6e6:	1c21      	adds	r1, r4, #0
    d6e8:	310e      	adds	r1, #14
    d6ea:	1c30      	adds	r0, r6, #0
    d6ec:	47c8      	blx	r9
    d6ee:	83f8      	strh	r0, [r7, #30]
      PRINTF("RPL: DAG conf:dbl=%d, min=%d red=%d maxinc=%d mininc=%d ocp=%d d_l=%u l_u=%u\n\r",
             dio.dag_intdoubl, dio.dag_intmin, dio.dag_redund,
             dio.dag_max_rankinc, dio.dag_min_hoprankinc, dio.ocp,
             dio.default_lifetime, dio.lifetime_unit);
      break;
    d6f0:	e019      	b.n	d726 <dio_input+0x23e>
    case RPL_OPTION_PREFIX_INFO:
      if(len != 32) {
    d6f2:	2f20      	cmp	r7, #32
    d6f4:	d127      	bne.n	d746 <dio_input+0x25e>
        PRINTF("RPL: Invalid DAG prefix info, len != 32\n\r");
	RPL_STAT(rpl_stats.malformed_msgs++);
        return;
      }
      dio.prefix_info.length = buffer[i + 2];
    d6f6:	af07      	add	r7, sp, #28
    d6f8:	9b01      	ldr	r3, [sp, #4]
    d6fa:	4698      	mov	r8, r3
    d6fc:	44b0      	add	r8, r6
    d6fe:	4643      	mov	r3, r8
    d700:	789a      	ldrb	r2, [r3, #2]
    d702:	2350      	movs	r3, #80	; 0x50
    d704:	54fa      	strb	r2, [r7, r3]
      dio.prefix_info.flags = buffer[i + 3];
    d706:	4643      	mov	r3, r8
    d708:	78da      	ldrb	r2, [r3, #3]
    d70a:	2351      	movs	r3, #81	; 0x51
    d70c:	54fa      	strb	r2, [r7, r3]
      /* valid lifetime is ingnored for now - at i + 4 */
      /* preferred lifetime stored in lifetime */
      dio.prefix_info.lifetime = get32(buffer, i + 8);
    d70e:	1c21      	adds	r1, r4, #0
    d710:	3108      	adds	r1, #8
    d712:	1c30      	adds	r0, r6, #0
    d714:	4b1a      	ldr	r3, [pc, #104]	; (d780 <dio_input+0x298>)
    d716:	4798      	blx	r3
    d718:	64f8      	str	r0, [r7, #76]	; 0x4c
      /* 32-bit reserved at i + 12 */
      PRINTF("RPL: Copying prefix information\n\r");
      memcpy(&dio.prefix_info.prefix, &buffer[i + 16], 16);
    d71a:	4641      	mov	r1, r8
    d71c:	3110      	adds	r1, #16
    d71e:	a816      	add	r0, sp, #88	; 0x58
    d720:	2210      	movs	r2, #16
    d722:	4b16      	ldr	r3, [pc, #88]	; (d77c <dio_input+0x294>)
    d724:	4798      	blx	r3
  uip_icmp6_send(addr, ICMP6_RPL, RPL_CODE_DIS, 2);
}
/*---------------------------------------------------------------------------*/
static void
dio_input(void)
{
    d726:	1c2c      	adds	r4, r5, #0
  PRINTF("RPL: Incoming DIO (dag_id, pref) = (");
  PRINT6ADDR(&dio.dag_id);
  PRINTF(", %u)\n\r", dio.preference);

  /* Check if there are any DIO suboptions. */
  for(; i < buffer_length; i += len) {
    d728:	4652      	mov	r2, sl
    d72a:	4554      	cmp	r4, sl
    d72c:	da00      	bge.n	d730 <dio_input+0x248>
    d72e:	e740      	b.n	d5b2 <dio_input+0xca>

#ifdef RPL_DEBUG_DIO_INPUT
  RPL_DEBUG_DIO_INPUT(&from, &dio);
#endif

  rpl_process_dio(&from, &dio);
    d730:	a803      	add	r0, sp, #12
    d732:	a907      	add	r1, sp, #28
    d734:	4b13      	ldr	r3, [pc, #76]	; (d784 <dio_input+0x29c>)
    d736:	4798      	blx	r3

  uip_len = 0;
    d738:	2200      	movs	r2, #0
    d73a:	4b0e      	ldr	r3, [pc, #56]	; (d774 <dio_input+0x28c>)
    d73c:	801a      	strh	r2, [r3, #0]
    d73e:	e002      	b.n	d746 <dio_input+0x25e>
    } else {
      /* Suboption with a two-byte header + payload */
      len = 2 + buffer[i + 1];
    }

    if(len + i > buffer_length) {
    d740:	1c65      	adds	r5, r4, #1
    d742:	42aa      	cmp	r2, r5
    d744:	daef      	bge.n	d726 <dio_input+0x23e>
#endif

  rpl_process_dio(&from, &dio);

  uip_len = 0;
}
    d746:	b01f      	add	sp, #124	; 0x7c
    d748:	bc3c      	pop	{r2, r3, r4, r5}
    d74a:	4690      	mov	r8, r2
    d74c:	4699      	mov	r9, r3
    d74e:	46a2      	mov	sl, r4
    d750:	46ab      	mov	fp, r5
    d752:	bdf0      	pop	{r4, r5, r6, r7, pc}
    d754:	00010921 	.word	0x00010921
    d758:	20000168 	.word	0x20000168
    d75c:	20002cd4 	.word	0x20002cd4
    d760:	00006b55 	.word	0x00006b55
    d764:	200031d8 	.word	0x200031d8
    d768:	00006ae1 	.word	0x00006ae1
    d76c:	0000ecfd 	.word	0x0000ecfd
    d770:	20000b12 	.word	0x20000b12
    d774:	20002cc0 	.word	0x20002cc0
    d778:	0000d4c5 	.word	0x0000d4c5
    d77c:	000108e7 	.word	0x000108e7
    d780:	0000d495 	.word	0x0000d495
    d784:	0000ce61 	.word	0x0000ce61

0000d788 <dis_output>:
  uip_len = 0;
}
/*---------------------------------------------------------------------------*/
void
dis_output(uip_ipaddr_t *addr)
{
    d788:	b510      	push	{r4, lr}
    d78a:	b084      	sub	sp, #16
   *     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   *     |     Flags     |   Reserved    |   Option(s)...
   *     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   */

  buffer = UIP_ICMP_PAYLOAD;
    d78c:	4b0f      	ldr	r3, [pc, #60]	; (d7cc <dis_output+0x44>)
    d78e:	781b      	ldrb	r3, [r3, #0]
    d790:	332c      	adds	r3, #44	; 0x2c
  buffer[0] = buffer[1] = 0;
    d792:	4a0f      	ldr	r2, [pc, #60]	; (d7d0 <dis_output+0x48>)
    d794:	189c      	adds	r4, r3, r2
    d796:	2100      	movs	r1, #0
    d798:	7061      	strb	r1, [r4, #1]
    d79a:	54d1      	strb	r1, [r2, r3]

  if(addr == NULL) {
    d79c:	2800      	cmp	r0, #0
    d79e:	d10d      	bne.n	d7bc <dis_output+0x34>
    uip_create_linklocal_rplnodes_mcast(&tmpaddr);
    d7a0:	4b0c      	ldr	r3, [pc, #48]	; (d7d4 <dis_output+0x4c>)
    d7a2:	466a      	mov	r2, sp
    d7a4:	8013      	strh	r3, [r2, #0]
    d7a6:	2300      	movs	r3, #0
    d7a8:	8053      	strh	r3, [r2, #2]
    d7aa:	8093      	strh	r3, [r2, #4]
    d7ac:	80d3      	strh	r3, [r2, #6]
    d7ae:	8113      	strh	r3, [r2, #8]
    d7b0:	8153      	strh	r3, [r2, #10]
    d7b2:	8193      	strh	r3, [r2, #12]
    d7b4:	23d0      	movs	r3, #208	; 0xd0
    d7b6:	015b      	lsls	r3, r3, #5
    d7b8:	81d3      	strh	r3, [r2, #14]
    addr = &tmpaddr;
    d7ba:	4668      	mov	r0, sp

  PRINTF("RPL: Sending a DIS to ");
  PRINT6ADDR(addr);
  PRINTF("\n\r");

  uip_icmp6_send(addr, ICMP6_RPL, RPL_CODE_DIS, 2);
    d7bc:	219b      	movs	r1, #155	; 0x9b
    d7be:	2200      	movs	r2, #0
    d7c0:	2302      	movs	r3, #2
    d7c2:	4c05      	ldr	r4, [pc, #20]	; (d7d8 <dis_output+0x50>)
    d7c4:	47a0      	blx	r4
}
    d7c6:	b004      	add	sp, #16
    d7c8:	bd10      	pop	{r4, pc}
    d7ca:	46c0      	nop			; (mov r8, r8)
    d7cc:	20000b12 	.word	0x20000b12
    d7d0:	20002cd4 	.word	0x20002cd4
    d7d4:	000002ff 	.word	0x000002ff
    d7d8:	00007ec1 	.word	0x00007ec1

0000d7dc <dio_output>:
  uip_len = 0;
}
/*---------------------------------------------------------------------------*/
void
dio_output(rpl_instance_t *instance, uip_ipaddr_t *uc_addr)
{
    d7dc:	b5f0      	push	{r4, r5, r6, r7, lr}
    d7de:	465f      	mov	r7, fp
    d7e0:	4656      	mov	r6, sl
    d7e2:	4645      	mov	r5, r8
    d7e4:	b4e0      	push	{r5, r6, r7}
    d7e6:	b086      	sub	sp, #24
    d7e8:	1c05      	adds	r5, r0, #0
    d7ea:	9101      	str	r1, [sp, #4]
  unsigned char *buffer;
  int pos;
  rpl_dag_t *dag = instance->current_dag;
    d7ec:	68c7      	ldr	r7, [r0, #12]
#endif /* RPL_LEAF_ONLY */

  /* DAG Information Object */
  pos = 0;

  buffer = UIP_ICMP_PAYLOAD;
    d7ee:	4b77      	ldr	r3, [pc, #476]	; (d9cc <dio_output+0x1f0>)
    d7f0:	781b      	ldrb	r3, [r3, #0]
    d7f2:	332c      	adds	r3, #44	; 0x2c
    d7f4:	4a76      	ldr	r2, [pc, #472]	; (d9d0 <dio_output+0x1f4>)
    d7f6:	189c      	adds	r4, r3, r2
  buffer[pos++] = instance->instance_id;
    d7f8:	218c      	movs	r1, #140	; 0x8c
    d7fa:	5c41      	ldrb	r1, [r0, r1]
    d7fc:	54d1      	strb	r1, [r2, r3]
  buffer[pos++] = dag->version;
    d7fe:	7cbb      	ldrb	r3, [r7, #18]
    d800:	7063      	strb	r3, [r4, #1]

#if RPL_LEAF_ONLY
  PRINTF("RPL: LEAF ONLY DIO rank set to INFINITE_RANK\n\r");
  set16(buffer, pos, INFINITE_RANK);
#else /* RPL_LEAF_ONLY */
  set16(buffer, pos, dag->rank);
    d802:	8bba      	ldrh	r2, [r7, #28]
    d804:	1c20      	adds	r0, r4, #0
    d806:	2102      	movs	r1, #2
    d808:	4b72      	ldr	r3, [pc, #456]	; (d9d4 <dio_output+0x1f8>)
    d80a:	4798      	blx	r3
#endif /* RPL_LEAF_ONLY */
  pos += 2;

  buffer[pos] = 0;
    d80c:	2300      	movs	r3, #0
    d80e:	7123      	strb	r3, [r4, #4]
  if(dag->grounded) {
    d810:	7cfa      	ldrb	r2, [r7, #19]
    d812:	2a00      	cmp	r2, #0
    d814:	d000      	beq.n	d818 <dio_output+0x3c>
    buffer[pos] |= RPL_DIO_GROUNDED;
    d816:	2280      	movs	r2, #128	; 0x80
    d818:	7122      	strb	r2, [r4, #4]
  }

  buffer[pos] |= instance->mop << RPL_DIO_MOP_SHIFT;
    d81a:	238f      	movs	r3, #143	; 0x8f
    d81c:	5ceb      	ldrb	r3, [r5, r3]
    d81e:	00db      	lsls	r3, r3, #3
    d820:	4313      	orrs	r3, r2
    d822:	b2db      	uxtb	r3, r3
    d824:	7123      	strb	r3, [r4, #4]
  buffer[pos] |= dag->preference & RPL_DIO_PREFERENCE_MASK;
    d826:	7d3a      	ldrb	r2, [r7, #20]
    d828:	2107      	movs	r1, #7
    d82a:	400a      	ands	r2, r1
    d82c:	4313      	orrs	r3, r2
    d82e:	7123      	strb	r3, [r4, #4]
  pos++;

  buffer[pos++] = instance->dtsn_out;
    d830:	238e      	movs	r3, #142	; 0x8e
    d832:	5cea      	ldrb	r2, [r5, r3]
    d834:	7162      	strb	r2, [r4, #5]

  /* always request new DAO to refresh route */
  RPL_LOLLIPOP_INCREMENT(instance->dtsn_out);
    d836:	5ceb      	ldrb	r3, [r5, r3]
    d838:	b25a      	sxtb	r2, r3
    d83a:	2a00      	cmp	r2, #0
    d83c:	da03      	bge.n	d846 <dio_output+0x6a>
    d83e:	3301      	adds	r3, #1
    d840:	228e      	movs	r2, #142	; 0x8e
    d842:	54ab      	strb	r3, [r5, r2]
    d844:	e004      	b.n	d850 <dio_output+0x74>
    d846:	3301      	adds	r3, #1
    d848:	227f      	movs	r2, #127	; 0x7f
    d84a:	4013      	ands	r3, r2
    d84c:	320f      	adds	r2, #15
    d84e:	54ab      	strb	r3, [r5, r2]

  /* reserved 2 bytes */
  buffer[pos++] = 0; /* flags */
    d850:	2300      	movs	r3, #0
    d852:	71a3      	strb	r3, [r4, #6]
  buffer[pos++] = 0; /* reserved */
    d854:	71e3      	strb	r3, [r4, #7]

  memcpy(buffer + pos, &dag->dag_id, sizeof(dag->dag_id));
    d856:	1c20      	adds	r0, r4, #0
    d858:	3008      	adds	r0, #8
    d85a:	1c39      	adds	r1, r7, #0
    d85c:	2210      	movs	r2, #16
    d85e:	4b5e      	ldr	r3, [pc, #376]	; (d9d8 <dio_output+0x1fc>)
    d860:	4798      	blx	r3
  pos += 16;

#if !RPL_LEAF_ONLY
  if(instance->mc.type != RPL_DAG_MC_NONE) {
    d862:	782b      	ldrb	r3, [r5, #0]
    d864:	2b00      	cmp	r3, #0
    d866:	d02b      	beq.n	d8c0 <dio_output+0xe4>
    instance->of->update_metric_container(instance);
    d868:	68ab      	ldr	r3, [r5, #8]
    d86a:	695b      	ldr	r3, [r3, #20]
    d86c:	1c28      	adds	r0, r5, #0
    d86e:	4798      	blx	r3

    buffer[pos++] = RPL_OPTION_DAG_METRIC_CONTAINER;
    d870:	2302      	movs	r3, #2
    d872:	7623      	strb	r3, [r4, #24]
    buffer[pos++] = 6;
    d874:	3304      	adds	r3, #4
    d876:	7663      	strb	r3, [r4, #25]
    buffer[pos++] = instance->mc.type;
    d878:	782b      	ldrb	r3, [r5, #0]
    d87a:	76a3      	strb	r3, [r4, #26]
    buffer[pos++] = instance->mc.flags >> 1;
    d87c:	786b      	ldrb	r3, [r5, #1]
    d87e:	085b      	lsrs	r3, r3, #1
    d880:	76e3      	strb	r3, [r4, #27]
    buffer[pos] = (instance->mc.flags & 1) << 7;
    d882:	786b      	ldrb	r3, [r5, #1]
    d884:	01da      	lsls	r2, r3, #7
    d886:	7722      	strb	r2, [r4, #28]
    buffer[pos++] |= (instance->mc.aggr << 4) | instance->mc.prec;
    d888:	78ab      	ldrb	r3, [r5, #2]
    d88a:	011b      	lsls	r3, r3, #4
    d88c:	4313      	orrs	r3, r2
    d88e:	78ea      	ldrb	r2, [r5, #3]
    d890:	4313      	orrs	r3, r2
    d892:	7723      	strb	r3, [r4, #28]
    if(instance->mc.type == RPL_DAG_MC_ETX) {
    d894:	782b      	ldrb	r3, [r5, #0]
    d896:	2b07      	cmp	r3, #7
    d898:	d108      	bne.n	d8ac <dio_output+0xd0>
      buffer[pos++] = 2;
    d89a:	3b05      	subs	r3, #5
    d89c:	7763      	strb	r3, [r4, #29]
      set16(buffer, pos, instance->mc.obj.etx);
    d89e:	88ea      	ldrh	r2, [r5, #6]
    d8a0:	1c20      	adds	r0, r4, #0
    d8a2:	211e      	movs	r1, #30
    d8a4:	4b4b      	ldr	r3, [pc, #300]	; (d9d4 <dio_output+0x1f8>)
    d8a6:	4798      	blx	r3
      pos += 2;
    d8a8:	2620      	movs	r6, #32
    d8aa:	e00a      	b.n	d8c2 <dio_output+0xe6>
    } else if(instance->mc.type == RPL_DAG_MC_ENERGY) {
    d8ac:	2b02      	cmp	r3, #2
    d8ae:	d000      	beq.n	d8b2 <dio_output+0xd6>
    d8b0:	e085      	b.n	d9be <dio_output+0x1e2>
      buffer[pos++] = 2;
    d8b2:	7763      	strb	r3, [r4, #29]
      buffer[pos++] = instance->mc.obj.energy.flags;
    d8b4:	79ab      	ldrb	r3, [r5, #6]
    d8b6:	77a3      	strb	r3, [r4, #30]
      buffer[pos++] = instance->mc.obj.energy.energy_est;
    d8b8:	79eb      	ldrb	r3, [r5, #7]
    d8ba:	77e3      	strb	r3, [r4, #31]
    d8bc:	2620      	movs	r6, #32
    d8be:	e000      	b.n	d8c2 <dio_output+0xe6>
  /* reserved 2 bytes */
  buffer[pos++] = 0; /* flags */
  buffer[pos++] = 0; /* reserved */

  memcpy(buffer + pos, &dag->dag_id, sizeof(dag->dag_id));
  pos += 16;
    d8c0:	2618      	movs	r6, #24
    }
  }
#endif /* !RPL_LEAF_ONLY */

  /* Always add a DAG configuration option. */
  buffer[pos++] = RPL_OPTION_DAG_CONF;
    d8c2:	2304      	movs	r3, #4
    d8c4:	55a3      	strb	r3, [r4, r6]
  buffer[pos++] = 14;
    d8c6:	19a2      	adds	r2, r4, r6
    d8c8:	330a      	adds	r3, #10
    d8ca:	4690      	mov	r8, r2
    d8cc:	7053      	strb	r3, [r2, #1]
  buffer[pos++] = 0; /* No Auth, PCS = 0 */
    d8ce:	2300      	movs	r3, #0
    d8d0:	469b      	mov	fp, r3
    d8d2:	1c13      	adds	r3, r2, #0
    d8d4:	465a      	mov	r2, fp
    d8d6:	709a      	strb	r2, [r3, #2]
  buffer[pos++] = instance->dio_intdoubl;
    d8d8:	2390      	movs	r3, #144	; 0x90
    d8da:	5ceb      	ldrb	r3, [r5, r3]
    d8dc:	4642      	mov	r2, r8
    d8de:	70d3      	strb	r3, [r2, #3]
  buffer[pos++] = instance->dio_intmin;
    d8e0:	2391      	movs	r3, #145	; 0x91
    d8e2:	5ceb      	ldrb	r3, [r5, r3]
    d8e4:	7113      	strb	r3, [r2, #4]
  buffer[pos++] = instance->dio_redundancy;
    d8e6:	2392      	movs	r3, #146	; 0x92
    d8e8:	5ceb      	ldrb	r3, [r5, r3]
    d8ea:	7153      	strb	r3, [r2, #5]
    d8ec:	1db1      	adds	r1, r6, #6
  set16(buffer, pos, instance->max_rankinc);
    d8ee:	2398      	movs	r3, #152	; 0x98
    d8f0:	5aea      	ldrh	r2, [r5, r3]
    d8f2:	1c20      	adds	r0, r4, #0
    d8f4:	4b37      	ldr	r3, [pc, #220]	; (d9d4 <dio_output+0x1f8>)
    d8f6:	469a      	mov	sl, r3
    d8f8:	4798      	blx	r3
  pos += 2;
    d8fa:	1c31      	adds	r1, r6, #0
    d8fc:	3108      	adds	r1, #8
  set16(buffer, pos, instance->min_hoprankinc);
    d8fe:	239a      	movs	r3, #154	; 0x9a
    d900:	5aea      	ldrh	r2, [r5, r3]
    d902:	1c20      	adds	r0, r4, #0
    d904:	47d0      	blx	sl
  pos += 2;
  /* OCP is in the DAG_CONF option */
  set16(buffer, pos, instance->of->ocp);
    d906:	68ab      	ldr	r3, [r5, #8]
    d908:	8b1a      	ldrh	r2, [r3, #24]
    d90a:	1c20      	adds	r0, r4, #0
    d90c:	1c31      	adds	r1, r6, #0
    d90e:	310a      	adds	r1, #10
    d910:	47d0      	blx	sl
  pos += 2;
  buffer[pos++] = 0; /* reserved */
    d912:	4643      	mov	r3, r8
    d914:	465a      	mov	r2, fp
    d916:	731a      	strb	r2, [r3, #12]
  buffer[pos++] = instance->default_lifetime;
    d918:	2393      	movs	r3, #147	; 0x93
    d91a:	5ceb      	ldrb	r3, [r5, r3]
    d91c:	4642      	mov	r2, r8
    d91e:	7353      	strb	r3, [r2, #13]
  set16(buffer, pos, instance->lifetime_unit);
    d920:	239c      	movs	r3, #156	; 0x9c
    d922:	5aea      	ldrh	r2, [r5, r3]
    d924:	1c20      	adds	r0, r4, #0
    d926:	1c31      	adds	r1, r6, #0
    d928:	310e      	adds	r1, #14
    d92a:	47d0      	blx	sl
  pos += 2;
    d92c:	1c33      	adds	r3, r6, #0
    d92e:	3310      	adds	r3, #16

  /* Check if we have a prefix to send also. */
  if(dag->prefix_info.length > 0) {
    d930:	2238      	movs	r2, #56	; 0x38
    d932:	5cba      	ldrb	r2, [r7, r2]
    d934:	2a00      	cmp	r2, #0
    d936:	d027      	beq.n	d988 <dio_output+0x1ac>
    buffer[pos++] = RPL_OPTION_PREFIX_INFO;
    d938:	2208      	movs	r2, #8
    d93a:	54e2      	strb	r2, [r4, r3]
    buffer[pos++] = 30; /* always 30 bytes + 2 long */
    d93c:	4643      	mov	r3, r8
    d93e:	3216      	adds	r2, #22
    d940:	745a      	strb	r2, [r3, #17]
    buffer[pos++] = dag->prefix_info.length;
    d942:	321a      	adds	r2, #26
    d944:	5cba      	ldrb	r2, [r7, r2]
    d946:	749a      	strb	r2, [r3, #18]
    buffer[pos++] = dag->prefix_info.flags;
    d948:	2239      	movs	r2, #57	; 0x39
    d94a:	5cba      	ldrb	r2, [r7, r2]
    d94c:	74da      	strb	r2, [r3, #19]
    d94e:	1c31      	adds	r1, r6, #0
    d950:	3114      	adds	r1, #20
    set32(buffer, pos, dag->prefix_info.lifetime);
    d952:	1c20      	adds	r0, r4, #0
    d954:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    d956:	4d21      	ldr	r5, [pc, #132]	; (d9dc <dio_output+0x200>)
    d958:	47a8      	blx	r5
    pos += 4;
    d95a:	1c31      	adds	r1, r6, #0
    d95c:	3118      	adds	r1, #24
    set32(buffer, pos, dag->prefix_info.lifetime);
    d95e:	1c20      	adds	r0, r4, #0
    d960:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    d962:	47a8      	blx	r5
    pos += 4;
    d964:	1c33      	adds	r3, r6, #0
    d966:	331c      	adds	r3, #28
    memset(&buffer[pos], 0, 4);
    d968:	18e3      	adds	r3, r4, r3
    d96a:	2200      	movs	r2, #0
    d96c:	701a      	strb	r2, [r3, #0]
    d96e:	705a      	strb	r2, [r3, #1]
    d970:	709a      	strb	r2, [r3, #2]
    d972:	70da      	strb	r2, [r3, #3]
    pos += 4;
    d974:	1c30      	adds	r0, r6, #0
    d976:	3020      	adds	r0, #32
    memcpy(&buffer[pos], &dag->prefix_info.prefix, 16);
    d978:	1820      	adds	r0, r4, r0
    d97a:	1c39      	adds	r1, r7, #0
    d97c:	3124      	adds	r1, #36	; 0x24
    d97e:	3210      	adds	r2, #16
    d980:	4b15      	ldr	r3, [pc, #84]	; (d9d8 <dio_output+0x1fc>)
    d982:	4798      	blx	r3
    pos += 16;
    d984:	1c33      	adds	r3, r6, #0
    d986:	3330      	adds	r3, #48	; 0x30
  PRINT6ADDR(uc_addr);
  PRINTF("\n\r");
  uip_icmp6_send(uc_addr, ICMP6_RPL, RPL_CODE_DIO, pos);
#else /* RPL_LEAF_ONLY */
  /* Unicast requests get unicast replies! */
  if(uc_addr == NULL) {
    d988:	9a01      	ldr	r2, [sp, #4]
    d98a:	2a00      	cmp	r2, #0
    d98c:	d112      	bne.n	d9b4 <dio_output+0x1d8>
    PRINTF("RPL: Sending a multicast-DIO with rank %u\n\r",
        (unsigned)instance->current_dag->rank);
    uip_create_linklocal_rplnodes_mcast(&addr);
    d98e:	4a14      	ldr	r2, [pc, #80]	; (d9e0 <dio_output+0x204>)
    d990:	a902      	add	r1, sp, #8
    d992:	800a      	strh	r2, [r1, #0]
    d994:	2200      	movs	r2, #0
    d996:	804a      	strh	r2, [r1, #2]
    d998:	808a      	strh	r2, [r1, #4]
    d99a:	80ca      	strh	r2, [r1, #6]
    d99c:	810a      	strh	r2, [r1, #8]
    d99e:	814a      	strh	r2, [r1, #10]
    d9a0:	818a      	strh	r2, [r1, #12]
    d9a2:	22d0      	movs	r2, #208	; 0xd0
    d9a4:	0152      	lsls	r2, r2, #5
    d9a6:	81ca      	strh	r2, [r1, #14]
    uip_icmp6_send(&addr, ICMP6_RPL, RPL_CODE_DIO, pos);
    d9a8:	1c08      	adds	r0, r1, #0
    d9aa:	219b      	movs	r1, #155	; 0x9b
    d9ac:	2201      	movs	r2, #1
    d9ae:	4c0d      	ldr	r4, [pc, #52]	; (d9e4 <dio_output+0x208>)
    d9b0:	47a0      	blx	r4
    d9b2:	e004      	b.n	d9be <dio_output+0x1e2>
  } else {
    PRINTF("RPL: Sending unicast-DIO with rank %u to ",
        (unsigned)instance->current_dag->rank);
    PRINT6ADDR(uc_addr);
    PRINTF("\n\r");
    uip_icmp6_send(uc_addr, ICMP6_RPL, RPL_CODE_DIO, pos);
    d9b4:	9801      	ldr	r0, [sp, #4]
    d9b6:	219b      	movs	r1, #155	; 0x9b
    d9b8:	2201      	movs	r2, #1
    d9ba:	4c0a      	ldr	r4, [pc, #40]	; (d9e4 <dio_output+0x208>)
    d9bc:	47a0      	blx	r4
  }
#endif /* RPL_LEAF_ONLY */
}
    d9be:	b006      	add	sp, #24
    d9c0:	bc1c      	pop	{r2, r3, r4}
    d9c2:	4690      	mov	r8, r2
    d9c4:	469a      	mov	sl, r3
    d9c6:	46a3      	mov	fp, r4
    d9c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    d9ca:	46c0      	nop			; (mov r8, r8)
    d9cc:	20000b12 	.word	0x20000b12
    d9d0:	20002cd4 	.word	0x20002cd4
    d9d4:	0000d4d1 	.word	0x0000d4d1
    d9d8:	000108e7 	.word	0x000108e7
    d9dc:	0000d4b1 	.word	0x0000d4b1
    d9e0:	000002ff 	.word	0x000002ff
    d9e4:	00007ec1 	.word	0x00007ec1

0000d9e8 <dis_input>:
  buffer[pos++] = value & 0xff;
}
/*---------------------------------------------------------------------------*/
static void
dis_input(void)
{
    d9e8:	b508      	push	{r3, lr}
  PRINT6ADDR(&UIP_IP_BUF->srcipaddr);
  PRINTF("\n\r");

  for(instance = &instance_table[0], end = instance + RPL_MAX_INSTANCES;
      instance < end; ++instance) {
    if(instance->used == 1) {
    d9ea:	238d      	movs	r3, #141	; 0x8d
    d9ec:	4a09      	ldr	r2, [pc, #36]	; (da14 <dis_input+0x2c>)
    d9ee:	5cd3      	ldrb	r3, [r2, r3]
    d9f0:	2b01      	cmp	r3, #1
    d9f2:	d10b      	bne.n	da0c <dis_input+0x24>
#if RPL_LEAF_ONLY
      if(!uip_is_addr_mcast(&UIP_IP_BUF->destipaddr)) {
	PRINTF("RPL: LEAF ONLY Multicast DIS will NOT reset DIO timer\n\r");
#else /* !RPL_LEAF_ONLY */
      if(uip_is_addr_mcast(&UIP_IP_BUF->destipaddr)) {
    d9f4:	4b08      	ldr	r3, [pc, #32]	; (da18 <dis_input+0x30>)
    d9f6:	7e1b      	ldrb	r3, [r3, #24]
    d9f8:	2bff      	cmp	r3, #255	; 0xff
    d9fa:	d103      	bne.n	da04 <dis_input+0x1c>
        PRINTF("RPL: Multicast DIS => reset DIO timer\n\r");
        rpl_reset_dio_timer(instance);
    d9fc:	1c10      	adds	r0, r2, #0
    d9fe:	4b07      	ldr	r3, [pc, #28]	; (da1c <dis_input+0x34>)
    da00:	4798      	blx	r3
    da02:	e003      	b.n	da0c <dis_input+0x24>
      } else {
#endif /* !RPL_LEAF_ONLY */
        PRINTF("RPL: Unicast DIS, reply to sender\n\r");
        dio_output(instance, &UIP_IP_BUF->srcipaddr);
    da04:	4803      	ldr	r0, [pc, #12]	; (da14 <dis_input+0x2c>)
    da06:	4906      	ldr	r1, [pc, #24]	; (da20 <dis_input+0x38>)
    da08:	4b06      	ldr	r3, [pc, #24]	; (da24 <dis_input+0x3c>)
    da0a:	4798      	blx	r3
      }
    }
  }
  uip_len = 0;
    da0c:	2200      	movs	r2, #0
    da0e:	4b06      	ldr	r3, [pc, #24]	; (da28 <dis_input+0x40>)
    da10:	801a      	strh	r2, [r3, #0]
}
    da12:	bd08      	pop	{r3, pc}
    da14:	20003288 	.word	0x20003288
    da18:	20002cd4 	.word	0x20002cd4
    da1c:	0000e271 	.word	0x0000e271
    da20:	20002cdc 	.word	0x20002cdc
    da24:	0000d7dd 	.word	0x0000d7dd
    da28:	20002cc0 	.word	0x20002cc0

0000da2c <dao_output_target>:
  dao_output_target(parent, &prefix, lifetime);
}
/*---------------------------------------------------------------------------*/
void
dao_output_target(rpl_parent_t *parent, uip_ipaddr_t *prefix, uint8_t lifetime)
{
    da2c:	b5f0      	push	{r4, r5, r6, r7, lr}
    da2e:	b083      	sub	sp, #12
    da30:	1c05      	adds	r5, r0, #0
    da32:	1c0c      	adds	r4, r1, #0
    da34:	9100      	str	r1, [sp, #0]
    da36:	9201      	str	r2, [sp, #4]
  int pos;

  /* Destination Advertisement Object */

  /* If we are in feather mode, we should not send any DAOs */
  if(rpl_get_mode() == RPL_MODE_FEATHER) {
    da38:	4b2d      	ldr	r3, [pc, #180]	; (daf0 <dao_output_target+0xc4>)
    da3a:	4798      	blx	r3
    da3c:	2801      	cmp	r0, #1
    da3e:	d054      	beq.n	daea <dao_output_target+0xbe>
    return;
  }

  if(parent == NULL) {
    da40:	2d00      	cmp	r5, #0
    da42:	d052      	beq.n	daea <dao_output_target+0xbe>
    PRINTF("RPL dao_output_target error parent NULL\n\r");
    return;
  }

  dag = parent->dag;
    da44:	6869      	ldr	r1, [r5, #4]
  if(dag == NULL) {
    da46:	2900      	cmp	r1, #0
    da48:	d04f      	beq.n	daea <dao_output_target+0xbe>
    PRINTF("RPL dao_output_target error dag NULL\n\r");
    return;
  }

  instance = dag->instance;
    da4a:	6a08      	ldr	r0, [r1, #32]

  if(instance == NULL) {
    da4c:	2800      	cmp	r0, #0
    da4e:	d04c      	beq.n	daea <dao_output_target+0xbe>
    PRINTF("RPL dao_output_target error instance NULL\n\r");
    return;
  }
  if(prefix == NULL) {
    da50:	2c00      	cmp	r4, #0
    da52:	d04a      	beq.n	daea <dao_output_target+0xbe>
  }
#ifdef RPL_DEBUG_DAO_OUTPUT
  RPL_DEBUG_DAO_OUTPUT(parent);
#endif

  buffer = UIP_ICMP_PAYLOAD;
    da54:	4b27      	ldr	r3, [pc, #156]	; (daf4 <dao_output_target+0xc8>)
    da56:	781a      	ldrb	r2, [r3, #0]
    da58:	322c      	adds	r2, #44	; 0x2c
    da5a:	4c27      	ldr	r4, [pc, #156]	; (daf8 <dao_output_target+0xcc>)
    da5c:	1914      	adds	r4, r2, r4

  RPL_LOLLIPOP_INCREMENT(dao_sequence);
    da5e:	4b27      	ldr	r3, [pc, #156]	; (dafc <dao_output_target+0xd0>)
    da60:	781b      	ldrb	r3, [r3, #0]
    da62:	b25e      	sxtb	r6, r3
    da64:	2e00      	cmp	r6, #0
    da66:	da03      	bge.n	da70 <dao_output_target+0x44>
    da68:	3301      	adds	r3, #1
    da6a:	4e24      	ldr	r6, [pc, #144]	; (dafc <dao_output_target+0xd0>)
    da6c:	7033      	strb	r3, [r6, #0]
    da6e:	e004      	b.n	da7a <dao_output_target+0x4e>
    da70:	3301      	adds	r3, #1
    da72:	267f      	movs	r6, #127	; 0x7f
    da74:	4033      	ands	r3, r6
    da76:	4e21      	ldr	r6, [pc, #132]	; (dafc <dao_output_target+0xd0>)
    da78:	7033      	strb	r3, [r6, #0]
  pos = 0;

  buffer[pos++] = instance->instance_id;
    da7a:	238c      	movs	r3, #140	; 0x8c
    da7c:	5cc0      	ldrb	r0, [r0, r3]
    da7e:	4b1e      	ldr	r3, [pc, #120]	; (daf8 <dao_output_target+0xcc>)
    da80:	5498      	strb	r0, [r3, r2]
  buffer[pos] = 0;
#if RPL_DAO_SPECIFY_DAG
  buffer[pos] |= RPL_DAO_D_FLAG;
    da82:	2340      	movs	r3, #64	; 0x40
    da84:	7063      	strb	r3, [r4, #1]
#endif /* RPL_DAO_SPECIFY_DAG */
#if RPL_CONF_DAO_ACK
  buffer[pos] |= RPL_DAO_K_FLAG;
#endif /* RPL_CONF_DAO_ACK */
  ++pos;
  buffer[pos++] = 0; /* reserved */
    da86:	2700      	movs	r7, #0
    da88:	70a7      	strb	r7, [r4, #2]
  buffer[pos++] = dao_sequence;
    da8a:	4b1c      	ldr	r3, [pc, #112]	; (dafc <dao_output_target+0xd0>)
    da8c:	781b      	ldrb	r3, [r3, #0]
    da8e:	70e3      	strb	r3, [r4, #3]
#if RPL_DAO_SPECIFY_DAG
  memcpy(buffer + pos, &dag->dag_id, sizeof(dag->dag_id));
    da90:	1d20      	adds	r0, r4, #4
    da92:	2210      	movs	r2, #16
    da94:	4e1a      	ldr	r6, [pc, #104]	; (db00 <dao_output_target+0xd4>)
    da96:	47b0      	blx	r6
  pos+=sizeof(dag->dag_id);
#endif /* RPL_DAO_SPECIFY_DAG */

  /* create target subopt */
  prefixlen = sizeof(*prefix) * CHAR_BIT;
  buffer[pos++] = RPL_OPTION_TARGET;
    da98:	2305      	movs	r3, #5
    da9a:	7523      	strb	r3, [r4, #20]
  buffer[pos++] = 2 + ((prefixlen + 7) / CHAR_BIT);
    da9c:	330d      	adds	r3, #13
    da9e:	7563      	strb	r3, [r4, #21]
  buffer[pos++] = 0; /* reserved */
    daa0:	75a7      	strb	r7, [r4, #22]
  buffer[pos++] = prefixlen;
    daa2:	336e      	adds	r3, #110	; 0x6e
    daa4:	75e3      	strb	r3, [r4, #23]
  memcpy(buffer + pos, prefix, (prefixlen + 7) / CHAR_BIT);
    daa6:	1c20      	adds	r0, r4, #0
    daa8:	3018      	adds	r0, #24
    daaa:	9900      	ldr	r1, [sp, #0]
    daac:	2210      	movs	r2, #16
    daae:	47b0      	blx	r6
  pos += ((prefixlen + 7) / CHAR_BIT);

  /* Create a transit information sub-option. */
  buffer[pos++] = RPL_OPTION_TRANSIT;
    dab0:	2206      	movs	r2, #6
    dab2:	2328      	movs	r3, #40	; 0x28
    dab4:	54e2      	strb	r2, [r4, r3]
  buffer[pos++] = 4;
    dab6:	3a02      	subs	r2, #2
    dab8:	3301      	adds	r3, #1
    daba:	54e2      	strb	r2, [r4, r3]
  buffer[pos++] = 0; /* flags - ignored */
    dabc:	3301      	adds	r3, #1
    dabe:	54e7      	strb	r7, [r4, r3]
  buffer[pos++] = 0; /* path control - ignored */
    dac0:	3301      	adds	r3, #1
    dac2:	54e7      	strb	r7, [r4, r3]
  buffer[pos++] = 0; /* path seq - ignored */
    dac4:	3301      	adds	r3, #1
    dac6:	54e7      	strb	r7, [r4, r3]
  buffer[pos++] = lifetime;
    dac8:	3301      	adds	r3, #1
    daca:	466a      	mov	r2, sp
    dacc:	7912      	ldrb	r2, [r2, #4]
    dace:	54e2      	strb	r2, [r4, r3]
  PRINT6ADDR(prefix);
  PRINTF(" to ");
  PRINT6ADDR(rpl_get_parent_ipaddr(parent));
  PRINTF("\n\r");

  if(rpl_get_parent_ipaddr(parent) != NULL) {
    dad0:	1c28      	adds	r0, r5, #0
    dad2:	4b0c      	ldr	r3, [pc, #48]	; (db04 <dao_output_target+0xd8>)
    dad4:	4798      	blx	r3
    dad6:	2800      	cmp	r0, #0
    dad8:	d007      	beq.n	daea <dao_output_target+0xbe>
    uip_icmp6_send(rpl_get_parent_ipaddr(parent), ICMP6_RPL, RPL_CODE_DAO, pos);
    dada:	1c28      	adds	r0, r5, #0
    dadc:	4b09      	ldr	r3, [pc, #36]	; (db04 <dao_output_target+0xd8>)
    dade:	4798      	blx	r3
    dae0:	219b      	movs	r1, #155	; 0x9b
    dae2:	2202      	movs	r2, #2
    dae4:	232e      	movs	r3, #46	; 0x2e
    dae6:	4c08      	ldr	r4, [pc, #32]	; (db08 <dao_output_target+0xdc>)
    dae8:	47a0      	blx	r4
  }
}
    daea:	b003      	add	sp, #12
    daec:	bdf0      	pop	{r4, r5, r6, r7, pc}
    daee:	46c0      	nop			; (mov r8, r8)
    daf0:	0000e2a5 	.word	0x0000e2a5
    daf4:	20000b12 	.word	0x20000b12
    daf8:	20002cd4 	.word	0x20002cd4
    dafc:	20000140 	.word	0x20000140
    db00:	000108e7 	.word	0x000108e7
    db04:	0000c36d 	.word	0x0000c36d
    db08:	00007ec1 	.word	0x00007ec1

0000db0c <dao_output>:
  uip_len = 0;
}
/*---------------------------------------------------------------------------*/
void
dao_output(rpl_parent_t *parent, uint8_t lifetime)
{
    db0c:	b5f0      	push	{r4, r5, r6, r7, lr}
    db0e:	b085      	sub	sp, #20
    db10:	4b12      	ldr	r3, [pc, #72]	; (db5c <dao_output+0x50>)
get_global_addr(uip_ipaddr_t *addr)
{
  int i;
  int state;

  for(i = 0; i < UIP_DS6_ADDR_NB; i++) {
    db12:	2400      	movs	r4, #0
    state = uip_ds6_if.addr_list[i].state;
    db14:	7c5e      	ldrb	r6, [r3, #17]
    if(uip_ds6_if.addr_list[i].isused &&
    db16:	781d      	ldrb	r5, [r3, #0]
    db18:	2d00      	cmp	r5, #0
    db1a:	d019      	beq.n	db50 <dao_output+0x44>
    db1c:	2e01      	cmp	r6, #1
    db1e:	d817      	bhi.n	db50 <dao_output+0x44>
       (state == ADDR_TENTATIVE || state == ADDR_PREFERRED)) {
      if(!uip_is_addr_link_local(&uip_ds6_if.addr_list[i].ipaddr)) {
    db20:	785a      	ldrb	r2, [r3, #1]
    db22:	2afe      	cmp	r2, #254	; 0xfe
    db24:	d102      	bne.n	db2c <dao_output+0x20>
    db26:	789a      	ldrb	r2, [r3, #2]
    db28:	2a80      	cmp	r2, #128	; 0x80
    db2a:	d011      	beq.n	db50 <dao_output+0x44>
    db2c:	1c0d      	adds	r5, r1, #0
    db2e:	1c06      	adds	r6, r0, #0
        memcpy(addr, &uip_ds6_if.addr_list[i].ipaddr, sizeof(uip_ipaddr_t));
    db30:	00e1      	lsls	r1, r4, #3
    db32:	1b09      	subs	r1, r1, r4
    db34:	008c      	lsls	r4, r1, #2
    db36:	490a      	ldr	r1, [pc, #40]	; (db60 <dao_output+0x54>)
    db38:	1909      	adds	r1, r1, r4
    db3a:	3119      	adds	r1, #25
    db3c:	4668      	mov	r0, sp
    db3e:	2210      	movs	r2, #16
    db40:	4b08      	ldr	r3, [pc, #32]	; (db64 <dao_output+0x58>)
    db42:	4798      	blx	r3
    PRINTF("RPL: No global address set for this node - suppressing DAO\n\r");
    return;
  }

  /* Sending a DAO with own prefix as target */
  dao_output_target(parent, &prefix, lifetime);
    db44:	1c30      	adds	r0, r6, #0
    db46:	4669      	mov	r1, sp
    db48:	1c2a      	adds	r2, r5, #0
    db4a:	4b07      	ldr	r3, [pc, #28]	; (db68 <dao_output+0x5c>)
    db4c:	4798      	blx	r3
    db4e:	e003      	b.n	db58 <dao_output+0x4c>
get_global_addr(uip_ipaddr_t *addr)
{
  int i;
  int state;

  for(i = 0; i < UIP_DS6_ADDR_NB; i++) {
    db50:	3401      	adds	r4, #1
    db52:	331c      	adds	r3, #28
    db54:	2c03      	cmp	r4, #3
    db56:	d1dd      	bne.n	db14 <dao_output+0x8>
    return;
  }

  /* Sending a DAO with own prefix as target */
  dao_output_target(parent, &prefix, lifetime);
}
    db58:	b005      	add	sp, #20
    db5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    db5c:	20002b80 	.word	0x20002b80
    db60:	20002b68 	.word	0x20002b68
    db64:	000108e7 	.word	0x000108e7
    db68:	0000da2d 	.word	0x0000da2d

0000db6c <dao_ack_output>:
  uip_len = 0;
}
/*---------------------------------------------------------------------------*/
void
dao_ack_output(rpl_instance_t *instance, uip_ipaddr_t *dest, uint8_t sequence)
{
    db6c:	b570      	push	{r4, r5, r6, lr}

  PRINTF("RPL: Sending a DAO ACK with sequence number %d to ", sequence);
  PRINT6ADDR(dest);
  PRINTF("\n\r");

  buffer = UIP_ICMP_PAYLOAD;
    db6e:	4b09      	ldr	r3, [pc, #36]	; (db94 <dao_ack_output+0x28>)
    db70:	781b      	ldrb	r3, [r3, #0]
    db72:	332c      	adds	r3, #44	; 0x2c
    db74:	4d08      	ldr	r5, [pc, #32]	; (db98 <dao_ack_output+0x2c>)
    db76:	195c      	adds	r4, r3, r5

  buffer[0] = instance->instance_id;
    db78:	268c      	movs	r6, #140	; 0x8c
    db7a:	5d80      	ldrb	r0, [r0, r6]
    db7c:	54e8      	strb	r0, [r5, r3]
  buffer[1] = 0;
    db7e:	2300      	movs	r3, #0
    db80:	7063      	strb	r3, [r4, #1]
  buffer[2] = sequence;
    db82:	70a2      	strb	r2, [r4, #2]
  buffer[3] = 0;
    db84:	70e3      	strb	r3, [r4, #3]

  uip_icmp6_send(dest, ICMP6_RPL, RPL_CODE_DAO_ACK, 4);
    db86:	1c08      	adds	r0, r1, #0
    db88:	219b      	movs	r1, #155	; 0x9b
    db8a:	2203      	movs	r2, #3
    db8c:	3304      	adds	r3, #4
    db8e:	4c03      	ldr	r4, [pc, #12]	; (db9c <dao_ack_output+0x30>)
    db90:	47a0      	blx	r4
}
    db92:	bd70      	pop	{r4, r5, r6, pc}
    db94:	20000b12 	.word	0x20000b12
    db98:	20002cd4 	.word	0x20002cd4
    db9c:	00007ec1 	.word	0x00007ec1

0000dba0 <dao_input>:
#endif /* RPL_LEAF_ONLY */
}
/*---------------------------------------------------------------------------*/
static void
dao_input(void)
{
    dba0:	b5f0      	push	{r4, r5, r6, r7, lr}
    dba2:	465f      	mov	r7, fp
    dba4:	4656      	mov	r6, sl
    dba6:	464d      	mov	r5, r9
    dba8:	4644      	mov	r4, r8
    dbaa:	b4f0      	push	{r4, r5, r6, r7}
    dbac:	b08f      	sub	sp, #60	; 0x3c
  uip_ds6_nbr_t *nbr;

  prefixlen = 0;
  parent = NULL;

  uip_ipaddr_copy(&dao_sender_addr, &UIP_IP_BUF->srcipaddr);
    dbae:	aa0a      	add	r2, sp, #40	; 0x28
    dbb0:	49a9      	ldr	r1, [pc, #676]	; (de58 <dao_input+0x2b8>)
    dbb2:	1c0b      	adds	r3, r1, #0
    dbb4:	3308      	adds	r3, #8
    dbb6:	cb31      	ldmia	r3!, {r0, r4, r5}
    dbb8:	c231      	stmia	r2!, {r0, r4, r5}
    dbba:	681b      	ldr	r3, [r3, #0]
    dbbc:	6013      	str	r3, [r2, #0]
  /* Destination Advertisement Object */
  PRINTF("RPL: Received a DAO from ");
  PRINT6ADDR(&dao_sender_addr);
  PRINTF("\n\r");

  buffer = UIP_ICMP_PAYLOAD;
    dbbe:	4ba7      	ldr	r3, [pc, #668]	; (de5c <dao_input+0x2bc>)
    dbc0:	781b      	ldrb	r3, [r3, #0]
    dbc2:	9302      	str	r3, [sp, #8]
    dbc4:	332c      	adds	r3, #44	; 0x2c
    dbc6:	185d      	adds	r5, r3, r1
  buffer_length = uip_len - uip_l3_icmp_hdr_len;
    dbc8:	4aa5      	ldr	r2, [pc, #660]	; (de60 <dao_input+0x2c0>)
    dbca:	8814      	ldrh	r4, [r2, #0]

  pos = 0;
  instance_id = buffer[pos++];

  instance = rpl_get_instance(instance_id);
    dbcc:	5cc8      	ldrb	r0, [r1, r3]
    dbce:	4ba5      	ldr	r3, [pc, #660]	; (de64 <dao_input+0x2c4>)
    dbd0:	4798      	blx	r3
    dbd2:	4680      	mov	r8, r0
  if(instance == NULL) {
    dbd4:	2800      	cmp	r0, #0
    dbd6:	d100      	bne.n	dbda <dao_input+0x3a>
    dbd8:	e136      	b.n	de48 <dao_input+0x2a8>
    PRINTF("RPL: Ignoring a DAO for an unknown RPL instance(%u)\n\r",
           instance_id);
    return;
  }

  lifetime = instance->default_lifetime;
    dbda:	2393      	movs	r3, #147	; 0x93
    dbdc:	5cc3      	ldrb	r3, [r0, r3]
    dbde:	4699      	mov	r9, r3

  flags = buffer[pos++];
    dbe0:	786b      	ldrb	r3, [r5, #1]
    dbe2:	469b      	mov	fp, r3
  /* reserved */
  pos++;
  sequence = buffer[pos++];
    dbe4:	78eb      	ldrb	r3, [r5, #3]
    dbe6:	9303      	str	r3, [sp, #12]

  dag = instance->current_dag;
    dbe8:	68c3      	ldr	r3, [r0, #12]
    dbea:	9301      	str	r3, [sp, #4]
  /* Is the DAG ID present? */
  if(flags & RPL_DAO_D_FLAG) {
    dbec:	465b      	mov	r3, fp
    dbee:	065b      	lsls	r3, r3, #25
    dbf0:	d508      	bpl.n	dc04 <dao_input+0x64>
    if(memcmp(&dag->dag_id, &buffer[pos], sizeof(dag->dag_id))) {
    dbf2:	1d29      	adds	r1, r5, #4
    dbf4:	9801      	ldr	r0, [sp, #4]
    dbf6:	2210      	movs	r2, #16
    dbf8:	4b9b      	ldr	r3, [pc, #620]	; (de68 <dao_input+0x2c8>)
    dbfa:	4798      	blx	r3
      PRINTF("RPL: Ignoring a DAO for a DAG different from ours\n\r");
      return;
    }
    pos += 16;
    dbfc:	2614      	movs	r6, #20
  sequence = buffer[pos++];

  dag = instance->current_dag;
  /* Is the DAG ID present? */
  if(flags & RPL_DAO_D_FLAG) {
    if(memcmp(&dag->dag_id, &buffer[pos], sizeof(dag->dag_id))) {
    dbfe:	2800      	cmp	r0, #0
    dc00:	d001      	beq.n	dc06 <dao_input+0x66>
    dc02:	e121      	b.n	de48 <dao_input+0x2a8>
  lifetime = instance->default_lifetime;

  flags = buffer[pos++];
  /* reserved */
  pos++;
  sequence = buffer[pos++];
    dc04:	2604      	movs	r6, #4
      return;
    }
    pos += 16;
  }

  learned_from = uip_is_addr_mcast(&dao_sender_addr) ?
    dc06:	ab0a      	add	r3, sp, #40	; 0x28
                 RPL_ROUTE_FROM_MULTICAST_DAO : RPL_ROUTE_FROM_UNICAST_DAO;
    dc08:	781b      	ldrb	r3, [r3, #0]
    dc0a:	2bff      	cmp	r3, #255	; 0xff
    dc0c:	d000      	beq.n	dc10 <dao_input+0x70>
    dc0e:	e103      	b.n	de18 <dao_input+0x278>
    dc10:	e018      	b.n	dc44 <dao_input+0xa4>
    /* Check whether this is a DAO forwarding loop. */
    parent = rpl_find_parent(dag, &dao_sender_addr);
    /* check if this is a new DAO registration with an "illegal" rank */
    /* if we already route to this node it is likely */
    if(parent != NULL &&
       DAG_RANK(parent->rank, instance) < DAG_RANK(dag->rank, instance)) {
    dc12:	239a      	movs	r3, #154	; 0x9a
    dc14:	4642      	mov	r2, r8
    dc16:	5ad3      	ldrh	r3, [r2, r3]
    dc18:	8938      	ldrh	r0, [r7, #8]
    dc1a:	4a94      	ldr	r2, [pc, #592]	; (de6c <dao_input+0x2cc>)
    dc1c:	4692      	mov	sl, r2
    dc1e:	9304      	str	r3, [sp, #16]
    dc20:	1c19      	adds	r1, r3, #0
    dc22:	4790      	blx	r2
    dc24:	9005      	str	r0, [sp, #20]
    dc26:	9a01      	ldr	r2, [sp, #4]
    dc28:	8b90      	ldrh	r0, [r2, #28]
    dc2a:	9904      	ldr	r1, [sp, #16]
    dc2c:	47d0      	blx	sl
  if(learned_from == RPL_ROUTE_FROM_UNICAST_DAO) {
    /* Check whether this is a DAO forwarding loop. */
    parent = rpl_find_parent(dag, &dao_sender_addr);
    /* check if this is a new DAO registration with an "illegal" rank */
    /* if we already route to this node it is likely */
    if(parent != NULL &&
    dc2e:	466b      	mov	r3, sp
    dc30:	8a9b      	ldrh	r3, [r3, #20]
    dc32:	b280      	uxth	r0, r0
    dc34:	4283      	cmp	r3, r0
    dc36:	d20e      	bcs.n	dc56 <dao_input+0xb6>
       DAG_RANK(parent->rank, instance) < DAG_RANK(dag->rank, instance)) {
      PRINTF("RPL: Loop detected when receiving a unicast DAO from a node with a lower rank! (%u < %u)\n\r",
          DAG_RANK(parent->rank, instance), DAG_RANK(dag->rank, instance));
      parent->rank = INFINITE_RANK;
    dc38:	2301      	movs	r3, #1
    dc3a:	425b      	negs	r3, r3
    dc3c:	813b      	strh	r3, [r7, #8]
      parent->updated = 1;
    dc3e:	3302      	adds	r3, #2
    dc40:	737b      	strb	r3, [r7, #13]
      return;
    dc42:	e101      	b.n	de48 <dao_input+0x2a8>
  PRINTF("RPL: Received a DAO from ");
  PRINT6ADDR(&dao_sender_addr);
  PRINTF("\n\r");

  buffer = UIP_ICMP_PAYLOAD;
  buffer_length = uip_len - uip_l3_icmp_hdr_len;
    dc44:	9b02      	ldr	r3, [sp, #8]
    dc46:	1ae4      	subs	r4, r4, r3
    dc48:	3c2c      	subs	r4, #44	; 0x2c
      return;
    }
  }

  /* Check if there are any RPL options present. */
  for(i = pos; i < buffer_length; i += len) {
    dc4a:	b2e4      	uxtb	r4, r4
    dc4c:	2300      	movs	r3, #0
    dc4e:	469a      	mov	sl, r3
    dc50:	42a6      	cmp	r6, r4
    dc52:	db0a      	blt.n	dc6a <dao_input+0xca>
    dc54:	e02d      	b.n	dcb2 <dao_input+0x112>
      parent->updated = 1;
      return;
    }

    /* If we get the DAO from our parent, we also have a loop. */
    if(parent != NULL && parent == dag->preferred_parent) {
    dc56:	9b01      	ldr	r3, [sp, #4]
    dc58:	699b      	ldr	r3, [r3, #24]
    dc5a:	42bb      	cmp	r3, r7
    dc5c:	d1f2      	bne.n	dc44 <dao_input+0xa4>
      PRINTF("RPL: Loop detected when receiving a unicast DAO from our parent\n\r");
      parent->rank = INFINITE_RANK;
    dc5e:	2201      	movs	r2, #1
    dc60:	4252      	negs	r2, r2
    dc62:	811a      	strh	r2, [r3, #8]
      parent->updated = 1;
    dc64:	3202      	adds	r2, #2
    dc66:	735a      	strb	r2, [r3, #13]
      return;
    dc68:	e0ee      	b.n	de48 <dao_input+0x2a8>
    }
  }

  /* Check if there are any RPL options present. */
  for(i = pos; i < buffer_length; i += len) {
    subopt_type = buffer[i];
    dc6a:	1c31      	adds	r1, r6, #0
    dc6c:	5dab      	ldrb	r3, [r5, r6]
    if(subopt_type == RPL_OPTION_PAD1) {
      len = 1;
    dc6e:	2701      	movs	r7, #1
  }

  /* Check if there are any RPL options present. */
  for(i = pos; i < buffer_length; i += len) {
    subopt_type = buffer[i];
    if(subopt_type == RPL_OPTION_PAD1) {
    dc70:	2b00      	cmp	r3, #0
    dc72:	d01b      	beq.n	dcac <dao_input+0x10c>
      len = 1;
    } else {
      /* The option consists of a two-byte header and a payload. */
      len = 2 + buffer[i + 1];
    dc74:	19aa      	adds	r2, r5, r6
    dc76:	7857      	ldrb	r7, [r2, #1]
    dc78:	3702      	adds	r7, #2
    }

    switch(subopt_type) {
    dc7a:	2b05      	cmp	r3, #5
    dc7c:	d002      	beq.n	dc84 <dao_input+0xe4>
    dc7e:	2b06      	cmp	r3, #6
    dc80:	d011      	beq.n	dca6 <dao_input+0x106>
    dc82:	e013      	b.n	dcac <dao_input+0x10c>
    case RPL_OPTION_TARGET:
      /* Handle the target option. */
      prefixlen = buffer[i + 3];
    dc84:	19ab      	adds	r3, r5, r6
    dc86:	78db      	ldrb	r3, [r3, #3]
    dc88:	469a      	mov	sl, r3
      memset(&prefix, 0, sizeof(prefix));
    dc8a:	2300      	movs	r3, #0
    dc8c:	9306      	str	r3, [sp, #24]
    dc8e:	9307      	str	r3, [sp, #28]
    dc90:	9308      	str	r3, [sp, #32]
    dc92:	9309      	str	r3, [sp, #36]	; 0x24
      memcpy(&prefix, buffer + i + 4, (prefixlen + 7) / CHAR_BIT);
    dc94:	4653      	mov	r3, sl
    dc96:	1dda      	adds	r2, r3, #7
    dc98:	10d2      	asrs	r2, r2, #3
    dc9a:	3104      	adds	r1, #4
    dc9c:	1869      	adds	r1, r5, r1
    dc9e:	a806      	add	r0, sp, #24
    dca0:	4b73      	ldr	r3, [pc, #460]	; (de70 <dao_input+0x2d0>)
    dca2:	4798      	blx	r3
      break;
    dca4:	e002      	b.n	dcac <dao_input+0x10c>
    case RPL_OPTION_TRANSIT:
      /* The path sequence and control are ignored. */
      /*      pathcontrol = buffer[i + 3];
              pathsequence = buffer[i + 4];*/
      lifetime = buffer[i + 5];
    dca6:	19a9      	adds	r1, r5, r6
    dca8:	794b      	ldrb	r3, [r1, #5]
    dcaa:	4699      	mov	r9, r3
      return;
    }
  }

  /* Check if there are any RPL options present. */
  for(i = pos; i < buffer_length; i += len) {
    dcac:	19f6      	adds	r6, r6, r7
    dcae:	42a6      	cmp	r6, r4
    dcb0:	dbdb      	blt.n	dc6a <dao_input+0xca>
    }
    goto fwd_dao;
  }
#endif

  rep = uip_ds6_route_lookup(&prefix);
    dcb2:	a806      	add	r0, sp, #24
    dcb4:	4b6f      	ldr	r3, [pc, #444]	; (de74 <dao_input+0x2d4>)
    dcb6:	4798      	blx	r3
    dcb8:	1c06      	adds	r6, r0, #0

  if(lifetime == RPL_ZERO_LIFETIME) {
    dcba:	464b      	mov	r3, r9
    dcbc:	2b00      	cmp	r3, #0
    dcbe:	d13e      	bne.n	dd3e <dao_input+0x19e>
    PRINTF("RPL: No-Path DAO received\n\r");
    /* No-Path DAO received; invoke the route purging routine. */
    if(rep != NULL &&
    dcc0:	2800      	cmp	r0, #0
    dcc2:	d100      	bne.n	dcc6 <dao_input+0x126>
    dcc4:	e0c0      	b.n	de48 <dao_input+0x2a8>
       rep->state.nopath_received == 0 &&
    dcc6:	3321      	adds	r3, #33	; 0x21
  rep = uip_ds6_route_lookup(&prefix);

  if(lifetime == RPL_ZERO_LIFETIME) {
    PRINTF("RPL: No-Path DAO received\n\r");
    /* No-Path DAO received; invoke the route purging routine. */
    if(rep != NULL &&
    dcc8:	5cc3      	ldrb	r3, [r0, r3]
    dcca:	2b00      	cmp	r3, #0
    dccc:	d000      	beq.n	dcd0 <dao_input+0x130>
    dcce:	e0bb      	b.n	de48 <dao_input+0x2a8>
       rep->state.nopath_received == 0 &&
       rep->length == prefixlen &&
    dcd0:	3324      	adds	r3, #36	; 0x24

  if(lifetime == RPL_ZERO_LIFETIME) {
    PRINTF("RPL: No-Path DAO received\n\r");
    /* No-Path DAO received; invoke the route purging routine. */
    if(rep != NULL &&
       rep->state.nopath_received == 0 &&
    dcd2:	5cc3      	ldrb	r3, [r0, r3]
    dcd4:	4553      	cmp	r3, sl
    dcd6:	d000      	beq.n	dcda <dao_input+0x13a>
    dcd8:	e0b6      	b.n	de48 <dao_input+0x2a8>
       rep->length == prefixlen &&
       uip_ds6_route_nexthop(rep) != NULL &&
    dcda:	4b67      	ldr	r3, [pc, #412]	; (de78 <dao_input+0x2d8>)
    dcdc:	4798      	blx	r3
  if(lifetime == RPL_ZERO_LIFETIME) {
    PRINTF("RPL: No-Path DAO received\n\r");
    /* No-Path DAO received; invoke the route purging routine. */
    if(rep != NULL &&
       rep->state.nopath_received == 0 &&
       rep->length == prefixlen &&
    dcde:	2800      	cmp	r0, #0
    dce0:	d100      	bne.n	dce4 <dao_input+0x144>
    dce2:	e0b1      	b.n	de48 <dao_input+0x2a8>
       uip_ds6_route_nexthop(rep) != NULL &&
       uip_ipaddr_cmp(uip_ds6_route_nexthop(rep), &dao_sender_addr)) {
    dce4:	1c30      	adds	r0, r6, #0
    dce6:	4b64      	ldr	r3, [pc, #400]	; (de78 <dao_input+0x2d8>)
    dce8:	4798      	blx	r3
    dcea:	a90a      	add	r1, sp, #40	; 0x28
    dcec:	2210      	movs	r2, #16
    dcee:	4b5e      	ldr	r3, [pc, #376]	; (de68 <dao_input+0x2c8>)
    dcf0:	4798      	blx	r3
    PRINTF("RPL: No-Path DAO received\n\r");
    /* No-Path DAO received; invoke the route purging routine. */
    if(rep != NULL &&
       rep->state.nopath_received == 0 &&
       rep->length == prefixlen &&
       uip_ds6_route_nexthop(rep) != NULL &&
    dcf2:	2800      	cmp	r0, #0
    dcf4:	d000      	beq.n	dcf8 <dao_input+0x158>
    dcf6:	e0a7      	b.n	de48 <dao_input+0x2a8>
       uip_ipaddr_cmp(uip_ds6_route_nexthop(rep), &dao_sender_addr)) {
      PRINTF("RPL: Setting expiration timer for prefix ");
      PRINT6ADDR(&prefix);
      PRINTF("\n\r");
      rep->state.nopath_received = 1;
    dcf8:	2201      	movs	r2, #1
    dcfa:	2321      	movs	r3, #33	; 0x21
    dcfc:	54f2      	strb	r2, [r6, r3]
      rep->state.lifetime = DAO_EXPIRATION_TIMEOUT;
    dcfe:	331b      	adds	r3, #27
    dd00:	61b3      	str	r3, [r6, #24]

      /* We forward the incoming no-path DAO to our parent, if we have
         one. */
      if(dag->preferred_parent != NULL &&
    dd02:	9d01      	ldr	r5, [sp, #4]
    dd04:	69a8      	ldr	r0, [r5, #24]
    dd06:	2800      	cmp	r0, #0
    dd08:	d00b      	beq.n	dd22 <dao_input+0x182>
         rpl_get_parent_ipaddr(dag->preferred_parent) != NULL) {
    dd0a:	4b5c      	ldr	r3, [pc, #368]	; (de7c <dao_input+0x2dc>)
    dd0c:	4798      	blx	r3
      rep->state.nopath_received = 1;
      rep->state.lifetime = DAO_EXPIRATION_TIMEOUT;

      /* We forward the incoming no-path DAO to our parent, if we have
         one. */
      if(dag->preferred_parent != NULL &&
    dd0e:	2800      	cmp	r0, #0
    dd10:	d007      	beq.n	dd22 <dao_input+0x182>
         rpl_get_parent_ipaddr(dag->preferred_parent) != NULL) {
        PRINTF("RPL: Forwarding no-path DAO to parent ");
        PRINT6ADDR(rpl_get_parent_ipaddr(dag->preferred_parent));
        PRINTF("\n\r");
        uip_icmp6_send(rpl_get_parent_ipaddr(dag->preferred_parent),
    dd12:	69a8      	ldr	r0, [r5, #24]
    dd14:	4b59      	ldr	r3, [pc, #356]	; (de7c <dao_input+0x2dc>)
    dd16:	4798      	blx	r3
    dd18:	219b      	movs	r1, #155	; 0x9b
    dd1a:	2202      	movs	r2, #2
    dd1c:	1c23      	adds	r3, r4, #0
    dd1e:	4c58      	ldr	r4, [pc, #352]	; (de80 <dao_input+0x2e0>)
    dd20:	47a0      	blx	r4
                       ICMP6_RPL, RPL_CODE_DAO, buffer_length);
      }
      if(flags & RPL_DAO_K_FLAG) {
    dd22:	465b      	mov	r3, fp
    dd24:	466a      	mov	r2, sp
    dd26:	7113      	strb	r3, [r2, #4]
    dd28:	7913      	ldrb	r3, [r2, #4]
    dd2a:	b25b      	sxtb	r3, r3
    dd2c:	2b00      	cmp	r3, #0
    dd2e:	db00      	blt.n	dd32 <dao_input+0x192>
    dd30:	e08a      	b.n	de48 <dao_input+0x2a8>
        dao_ack_output(instance, &dao_sender_addr, sequence);
    dd32:	4640      	mov	r0, r8
    dd34:	a90a      	add	r1, sp, #40	; 0x28
    dd36:	9a03      	ldr	r2, [sp, #12]
    dd38:	4b52      	ldr	r3, [pc, #328]	; (de84 <dao_input+0x2e4>)
    dd3a:	4798      	blx	r3
    dd3c:	e084      	b.n	de48 <dao_input+0x2a8>
      }
    }
    return;
  }

  learned_from = uip_is_addr_mcast(&dao_sender_addr) ?
    dd3e:	ab0a      	add	r3, sp, #40	; 0x28
                 RPL_ROUTE_FROM_MULTICAST_DAO : RPL_ROUTE_FROM_UNICAST_DAO;
    dd40:	781b      	ldrb	r3, [r3, #0]
    dd42:	2bff      	cmp	r3, #255	; 0xff
    dd44:	d170      	bne.n	de28 <dao_input+0x288>
    dd46:	e078      	b.n	de3a <dao_input+0x29a>
  if(learned_from == RPL_ROUTE_FROM_UNICAST_DAO) {
    /* Check whether this is a DAO forwarding loop. */
    /* check if this is a new DAO registration with an "illegal" rank */
    /* if we already route to this node it is likely */
    if(parent != NULL &&
       DAG_RANK(parent->rank, instance) < DAG_RANK(dag->rank, instance)) {
    dd48:	239a      	movs	r3, #154	; 0x9a
    dd4a:	4642      	mov	r2, r8
    dd4c:	5ad6      	ldrh	r6, [r2, r3]
    dd4e:	8938      	ldrh	r0, [r7, #8]
    dd50:	4d46      	ldr	r5, [pc, #280]	; (de6c <dao_input+0x2cc>)
    dd52:	1c31      	adds	r1, r6, #0
    dd54:	47a8      	blx	r5
    dd56:	9002      	str	r0, [sp, #8]
    dd58:	9b01      	ldr	r3, [sp, #4]
    dd5a:	8b98      	ldrh	r0, [r3, #28]
    dd5c:	1c31      	adds	r1, r6, #0
    dd5e:	47a8      	blx	r5
  parent = rpl_find_parent(dag, &dao_sender_addr);
  if(learned_from == RPL_ROUTE_FROM_UNICAST_DAO) {
    /* Check whether this is a DAO forwarding loop. */
    /* check if this is a new DAO registration with an "illegal" rank */
    /* if we already route to this node it is likely */
    if(parent != NULL &&
    dd60:	466b      	mov	r3, sp
    dd62:	891e      	ldrh	r6, [r3, #8]
    dd64:	b280      	uxth	r0, r0
    dd66:	4286      	cmp	r6, r0
    dd68:	d205      	bcs.n	dd76 <dao_input+0x1d6>
       DAG_RANK(parent->rank, instance) < DAG_RANK(dag->rank, instance)) {
      PRINTF("RPL: Loop detected when receiving a unicast DAO from a node with a lower rank! (%u < %u)\n\r",
             DAG_RANK(parent->rank, instance), DAG_RANK(dag->rank, instance));
      parent->rank = INFINITE_RANK;
    dd6a:	2301      	movs	r3, #1
    dd6c:	425b      	negs	r3, r3
    dd6e:	813b      	strh	r3, [r7, #8]
      parent->updated = 1;
    dd70:	3302      	adds	r3, #2
    dd72:	737b      	strb	r3, [r7, #13]
      return;
    dd74:	e068      	b.n	de48 <dao_input+0x2a8>
    }

    /* If we get the DAO from our parent, we also have a loop. */
    if(parent != NULL && parent == dag->preferred_parent) {
    dd76:	9b01      	ldr	r3, [sp, #4]
    dd78:	699b      	ldr	r3, [r3, #24]
    }
    return;
  }

  learned_from = uip_is_addr_mcast(&dao_sender_addr) ?
                 RPL_ROUTE_FROM_MULTICAST_DAO : RPL_ROUTE_FROM_UNICAST_DAO;
    dd7a:	2601      	movs	r6, #1
      parent->updated = 1;
      return;
    }

    /* If we get the DAO from our parent, we also have a loop. */
    if(parent != NULL && parent == dag->preferred_parent) {
    dd7c:	42bb      	cmp	r3, r7
    dd7e:	d105      	bne.n	dd8c <dao_input+0x1ec>
      PRINTF("RPL: Loop detected when receiving a unicast DAO from our parent\n\r");
      parent->rank = INFINITE_RANK;
    dd80:	2201      	movs	r2, #1
    dd82:	4252      	negs	r2, r2
    dd84:	811a      	strh	r2, [r3, #8]
      parent->updated = 1;
    dd86:	3202      	adds	r2, #2
    dd88:	735a      	strb	r2, [r3, #13]
      return;
    dd8a:	e05d      	b.n	de48 <dao_input+0x2a8>
    }
  }

  PRINTF("RPL: adding DAO route\n\r");

  if((nbr = uip_ds6_nbr_lookup(&dao_sender_addr)) == NULL) {
    dd8c:	a80a      	add	r0, sp, #40	; 0x28
    dd8e:	4b3e      	ldr	r3, [pc, #248]	; (de88 <dao_input+0x2e8>)
    dd90:	4798      	blx	r3
    dd92:	2800      	cmp	r0, #0
    dd94:	d10b      	bne.n	ddae <dao_input+0x20e>
    if((nbr = uip_ds6_nbr_add(&dao_sender_addr,
    dd96:	a80a      	add	r0, sp, #40	; 0x28
    dd98:	493c      	ldr	r1, [pc, #240]	; (de8c <dao_input+0x2ec>)
    dd9a:	2200      	movs	r2, #0
    dd9c:	2301      	movs	r3, #1
    dd9e:	4d3c      	ldr	r5, [pc, #240]	; (de90 <dao_input+0x2f0>)
    dda0:	47a8      	blx	r5
    dda2:	2800      	cmp	r0, #0
    dda4:	d050      	beq.n	de48 <dao_input+0x2a8>
                              (uip_lladdr_t *)packetbuf_addr(PACKETBUF_ADDR_SENDER),
                              0, NBR_REACHABLE)) != NULL) {
      /* set reachable timer */
      stimer_set(&nbr->reachable, UIP_ND6_REACHABLE_TIME / 1000);
    dda6:	3010      	adds	r0, #16
    dda8:	211e      	movs	r1, #30
    ddaa:	4b3a      	ldr	r3, [pc, #232]	; (de94 <dao_input+0x2f4>)
    ddac:	4798      	blx	r3
    }
  } else {
    PRINTF("RPL: Neighbor already in neighbor cache\n\r");
  }

  rpl_lock_parent(parent);
    ddae:	1c38      	adds	r0, r7, #0
    ddb0:	4b39      	ldr	r3, [pc, #228]	; (de98 <dao_input+0x2f8>)
    ddb2:	4798      	blx	r3

  rep = rpl_add_route(dag, &prefix, prefixlen, &dao_sender_addr);
    ddb4:	9801      	ldr	r0, [sp, #4]
    ddb6:	a906      	add	r1, sp, #24
    ddb8:	4652      	mov	r2, sl
    ddba:	ab0a      	add	r3, sp, #40	; 0x28
    ddbc:	4d37      	ldr	r5, [pc, #220]	; (de9c <dao_input+0x2fc>)
    ddbe:	47a8      	blx	r5
  if(rep == NULL) {
    ddc0:	2800      	cmp	r0, #0
    ddc2:	d041      	beq.n	de48 <dao_input+0x2a8>
    RPL_STAT(rpl_stats.mem_overflows++);
    PRINTF("RPL: Could not add a route after receiving a DAO\n\r");
    return;
  }

  rep->state.lifetime = RPL_LIFETIME(instance, lifetime);
    ddc4:	239c      	movs	r3, #156	; 0x9c
    ddc6:	4642      	mov	r2, r8
    ddc8:	5ad3      	ldrh	r3, [r2, r3]
    ddca:	464a      	mov	r2, r9
    ddcc:	4353      	muls	r3, r2
    ddce:	6183      	str	r3, [r0, #24]
  rep->state.learned_from = learned_from;
    ddd0:	2320      	movs	r3, #32
    ddd2:	54c6      	strb	r6, [r0, r3]

#if RPL_CONF_MULTICAST
fwd_dao:
#endif

  if(learned_from == RPL_ROUTE_FROM_UNICAST_DAO) {
    ddd4:	2e01      	cmp	r6, #1
    ddd6:	d11b      	bne.n	de10 <dao_input+0x270>
    if(dag->preferred_parent != NULL &&
    ddd8:	9d01      	ldr	r5, [sp, #4]
    ddda:	69a8      	ldr	r0, [r5, #24]
    dddc:	2800      	cmp	r0, #0
    ddde:	d00b      	beq.n	ddf8 <dao_input+0x258>
       rpl_get_parent_ipaddr(dag->preferred_parent) != NULL) {
    dde0:	4b26      	ldr	r3, [pc, #152]	; (de7c <dao_input+0x2dc>)
    dde2:	4798      	blx	r3
#if RPL_CONF_MULTICAST
fwd_dao:
#endif

  if(learned_from == RPL_ROUTE_FROM_UNICAST_DAO) {
    if(dag->preferred_parent != NULL &&
    dde4:	2800      	cmp	r0, #0
    dde6:	d007      	beq.n	ddf8 <dao_input+0x258>
       rpl_get_parent_ipaddr(dag->preferred_parent) != NULL) {
      PRINTF("RPL: Forwarding DAO to parent ");
      PRINT6ADDR(rpl_get_parent_ipaddr(dag->preferred_parent));
      PRINTF("\n\r");
      uip_icmp6_send(rpl_get_parent_ipaddr(dag->preferred_parent),
    dde8:	69a8      	ldr	r0, [r5, #24]
    ddea:	4b24      	ldr	r3, [pc, #144]	; (de7c <dao_input+0x2dc>)
    ddec:	4798      	blx	r3
    ddee:	219b      	movs	r1, #155	; 0x9b
    ddf0:	2202      	movs	r2, #2
    ddf2:	1c23      	adds	r3, r4, #0
    ddf4:	4c22      	ldr	r4, [pc, #136]	; (de80 <dao_input+0x2e0>)
    ddf6:	47a0      	blx	r4
                     ICMP6_RPL, RPL_CODE_DAO, buffer_length);
    }
    if(flags & RPL_DAO_K_FLAG) {
    ddf8:	465b      	mov	r3, fp
    ddfa:	466a      	mov	r2, sp
    ddfc:	7113      	strb	r3, [r2, #4]
    ddfe:	7913      	ldrb	r3, [r2, #4]
    de00:	b25b      	sxtb	r3, r3
    de02:	2b00      	cmp	r3, #0
    de04:	da04      	bge.n	de10 <dao_input+0x270>
      dao_ack_output(instance, &dao_sender_addr, sequence);
    de06:	4640      	mov	r0, r8
    de08:	a90a      	add	r1, sp, #40	; 0x28
    de0a:	9a03      	ldr	r2, [sp, #12]
    de0c:	4b1d      	ldr	r3, [pc, #116]	; (de84 <dao_input+0x2e4>)
    de0e:	4798      	blx	r3
    }
  }
  uip_len = 0;
    de10:	2200      	movs	r2, #0
    de12:	4b13      	ldr	r3, [pc, #76]	; (de60 <dao_input+0x2c0>)
    de14:	801a      	strh	r2, [r3, #0]
    de16:	e017      	b.n	de48 <dao_input+0x2a8>

  PRINTF("RPL: DAO from %s\n\r",
         learned_from == RPL_ROUTE_FROM_UNICAST_DAO? "unicast": "multicast");
  if(learned_from == RPL_ROUTE_FROM_UNICAST_DAO) {
    /* Check whether this is a DAO forwarding loop. */
    parent = rpl_find_parent(dag, &dao_sender_addr);
    de18:	9801      	ldr	r0, [sp, #4]
    de1a:	a90a      	add	r1, sp, #40	; 0x28
    de1c:	4b20      	ldr	r3, [pc, #128]	; (dea0 <dao_input+0x300>)
    de1e:	4798      	blx	r3
    de20:	1e07      	subs	r7, r0, #0
    /* check if this is a new DAO registration with an "illegal" rank */
    /* if we already route to this node it is likely */
    if(parent != NULL &&
    de22:	d000      	beq.n	de26 <dao_input+0x286>
    de24:	e6f5      	b.n	dc12 <dao_input+0x72>
    de26:	e70d      	b.n	dc44 <dao_input+0xa4>
  learned_from = uip_is_addr_mcast(&dao_sender_addr) ?
                 RPL_ROUTE_FROM_MULTICAST_DAO : RPL_ROUTE_FROM_UNICAST_DAO;

  PRINTF("RPL: DAO from %s\n\r",
         learned_from == RPL_ROUTE_FROM_UNICAST_DAO? "unicast": "multicast");
  parent = rpl_find_parent(dag, &dao_sender_addr);
    de28:	9801      	ldr	r0, [sp, #4]
    de2a:	a90a      	add	r1, sp, #40	; 0x28
    de2c:	4b1c      	ldr	r3, [pc, #112]	; (dea0 <dao_input+0x300>)
    de2e:	4798      	blx	r3
    de30:	1c07      	adds	r7, r0, #0
    }
    return;
  }

  learned_from = uip_is_addr_mcast(&dao_sender_addr) ?
                 RPL_ROUTE_FROM_MULTICAST_DAO : RPL_ROUTE_FROM_UNICAST_DAO;
    de32:	2601      	movs	r6, #1
  parent = rpl_find_parent(dag, &dao_sender_addr);
  if(learned_from == RPL_ROUTE_FROM_UNICAST_DAO) {
    /* Check whether this is a DAO forwarding loop. */
    /* check if this is a new DAO registration with an "illegal" rank */
    /* if we already route to this node it is likely */
    if(parent != NULL &&
    de34:	2800      	cmp	r0, #0
    de36:	d0a9      	beq.n	dd8c <dao_input+0x1ec>
    de38:	e786      	b.n	dd48 <dao_input+0x1a8>
  learned_from = uip_is_addr_mcast(&dao_sender_addr) ?
                 RPL_ROUTE_FROM_MULTICAST_DAO : RPL_ROUTE_FROM_UNICAST_DAO;

  PRINTF("RPL: DAO from %s\n\r",
         learned_from == RPL_ROUTE_FROM_UNICAST_DAO? "unicast": "multicast");
  parent = rpl_find_parent(dag, &dao_sender_addr);
    de3a:	9801      	ldr	r0, [sp, #4]
    de3c:	a90a      	add	r1, sp, #40	; 0x28
    de3e:	4b18      	ldr	r3, [pc, #96]	; (dea0 <dao_input+0x300>)
    de40:	4798      	blx	r3
    de42:	1c07      	adds	r7, r0, #0
    }
    return;
  }

  learned_from = uip_is_addr_mcast(&dao_sender_addr) ?
                 RPL_ROUTE_FROM_MULTICAST_DAO : RPL_ROUTE_FROM_UNICAST_DAO;
    de44:	2602      	movs	r6, #2
    de46:	e7a1      	b.n	dd8c <dao_input+0x1ec>
    if(flags & RPL_DAO_K_FLAG) {
      dao_ack_output(instance, &dao_sender_addr, sequence);
    }
  }
  uip_len = 0;
}
    de48:	b00f      	add	sp, #60	; 0x3c
    de4a:	bc3c      	pop	{r2, r3, r4, r5}
    de4c:	4690      	mov	r8, r2
    de4e:	4699      	mov	r9, r3
    de50:	46a2      	mov	sl, r4
    de52:	46ab      	mov	fp, r5
    de54:	bdf0      	pop	{r4, r5, r6, r7, pc}
    de56:	46c0      	nop			; (mov r8, r8)
    de58:	20002cd4 	.word	0x20002cd4
    de5c:	20000b12 	.word	0x20000b12
    de60:	20002cc0 	.word	0x20002cc0
    de64:	0000c95d 	.word	0x0000c95d
    de68:	000108c9 	.word	0x000108c9
    de6c:	00010525 	.word	0x00010525
    de70:	000108e7 	.word	0x000108e7
    de74:	00006e69 	.word	0x00006e69
    de78:	00006e1d 	.word	0x00006e1d
    de7c:	0000c36d 	.word	0x0000c36d
    de80:	00007ec1 	.word	0x00007ec1
    de84:	0000db6d 	.word	0x0000db6d
    de88:	00006b55 	.word	0x00006b55
    de8c:	200031d8 	.word	0x200031d8
    de90:	00006ae1 	.word	0x00006ae1
    de94:	0000ecfd 	.word	0x0000ecfd
    de98:	0000d119 	.word	0x0000d119
    de9c:	0000e3cd 	.word	0x0000e3cd
    dea0:	0000c4d5 	.word	0x0000c4d5

0000dea4 <rpl_icmp6_register_handlers>:
  uip_icmp6_send(dest, ICMP6_RPL, RPL_CODE_DAO_ACK, 4);
}
/*---------------------------------------------------------------------------*/
void
rpl_icmp6_register_handlers()
{
    dea4:	b510      	push	{r4, lr}
  uip_icmp6_register_input_handler(&dis_handler);
    dea6:	4805      	ldr	r0, [pc, #20]	; (debc <rpl_icmp6_register_handlers+0x18>)
    dea8:	4c05      	ldr	r4, [pc, #20]	; (dec0 <rpl_icmp6_register_handlers+0x1c>)
    deaa:	47a0      	blx	r4
  uip_icmp6_register_input_handler(&dio_handler);
    deac:	4805      	ldr	r0, [pc, #20]	; (dec4 <rpl_icmp6_register_handlers+0x20>)
    deae:	47a0      	blx	r4
  uip_icmp6_register_input_handler(&dao_handler);
    deb0:	4805      	ldr	r0, [pc, #20]	; (dec8 <rpl_icmp6_register_handlers+0x24>)
    deb2:	47a0      	blx	r4
  uip_icmp6_register_input_handler(&dao_ack_handler);
    deb4:	4805      	ldr	r0, [pc, #20]	; (decc <rpl_icmp6_register_handlers+0x28>)
    deb6:	47a0      	blx	r4
}
    deb8:	bd10      	pop	{r4, pc}
    deba:	46c0      	nop			; (mov r8, r8)
    debc:	20000144 	.word	0x20000144
    dec0:	00007ce9 	.word	0x00007ce9
    dec4:	2000015c 	.word	0x2000015c
    dec8:	20000150 	.word	0x20000150
    decc:	20000134 	.word	0x20000134

0000ded0 <reset>:

static void
reset(rpl_dag_t *dag)
{
  PRINTF("RPL: Reset MRHOF\n\r");
}
    ded0:	4770      	bx	lr
    ded2:	46c0      	nop			; (mov r8, r8)

0000ded4 <neighbor_link_callback>:

static void
neighbor_link_callback(rpl_parent_t *p, int status, int numtx)
{
    ded4:	b510      	push	{r4, lr}
    ded6:	1c03      	adds	r3, r0, #0
  uint16_t recorded_etx = p->link_metric;
    ded8:	8940      	ldrh	r0, [r0, #10]
  uint16_t packet_etx = numtx * RPL_DAG_MC_ETX_DIVISOR;
  uint16_t new_etx;

  /* Do not penalize the ETX when collisions or transmission errors occur. */
  if(status == MAC_TX_OK || status == MAC_TX_NOACK) {
    deda:	2900      	cmp	r1, #0
    dedc:	d102      	bne.n	dee4 <neighbor_link_callback+0x10>

static void
neighbor_link_callback(rpl_parent_t *p, int status, int numtx)
{
  uint16_t recorded_etx = p->link_metric;
  uint16_t packet_etx = numtx * RPL_DAG_MC_ETX_DIVISOR;
    dede:	0212      	lsls	r2, r2, #8
    dee0:	b292      	uxth	r2, r2
    dee2:	e003      	b.n	deec <neighbor_link_callback+0x18>
  uint16_t new_etx;

  /* Do not penalize the ETX when collisions or transmission errors occur. */
  if(status == MAC_TX_OK || status == MAC_TX_NOACK) {
    dee4:	2902      	cmp	r1, #2
    dee6:	d10c      	bne.n	df02 <neighbor_link_callback+0x2e>
    if(status == MAC_TX_NOACK) {
      packet_etx = MAX_LINK_METRIC * RPL_DAG_MC_ETX_DIVISOR;
    dee8:	22a0      	movs	r2, #160	; 0xa0
    deea:	0112      	lsls	r2, r2, #4
    deec:	1c1c      	adds	r4, r3, #0
    }

    new_etx = ((uint32_t)recorded_etx * ETX_ALPHA +
               (uint32_t)packet_etx * (ETX_SCALE - ETX_ALPHA)) / ETX_SCALE;
    deee:	0093      	lsls	r3, r2, #2
    def0:	189a      	adds	r2, r3, r2
    def2:	0052      	lsls	r2, r2, #1
  if(status == MAC_TX_OK || status == MAC_TX_NOACK) {
    if(status == MAC_TX_NOACK) {
      packet_etx = MAX_LINK_METRIC * RPL_DAG_MC_ETX_DIVISOR;
    }

    new_etx = ((uint32_t)recorded_etx * ETX_ALPHA +
    def4:	235a      	movs	r3, #90	; 0x5a
    def6:	4358      	muls	r0, r3
    def8:	1810      	adds	r0, r2, r0
               (uint32_t)packet_etx * (ETX_SCALE - ETX_ALPHA)) / ETX_SCALE;
    defa:	2164      	movs	r1, #100	; 0x64
    defc:	4b01      	ldr	r3, [pc, #4]	; (df04 <neighbor_link_callback+0x30>)
    defe:	4798      	blx	r3

    PRINTF("RPL: ETX changed from %u to %u (packet ETX = %u)\n\r",
        (unsigned)(recorded_etx / RPL_DAG_MC_ETX_DIVISOR),
        (unsigned)(new_etx  / RPL_DAG_MC_ETX_DIVISOR),
        (unsigned)(packet_etx / RPL_DAG_MC_ETX_DIVISOR));
    p->link_metric = new_etx;
    df00:	8160      	strh	r0, [r4, #10]
  }
}
    df02:	bd10      	pop	{r4, pc}
    df04:	00010525 	.word	0x00010525

0000df08 <calculate_rank>:
calculate_rank(rpl_parent_t *p, rpl_rank_t base_rank)
{
  rpl_rank_t new_rank;
  rpl_rank_t rank_increase;

  if(p == NULL) {
    df08:	2800      	cmp	r0, #0
    df0a:	d104      	bne.n	df16 <calculate_rank+0xe>
    if(base_rank == 0) {
    df0c:	2900      	cmp	r1, #0
    df0e:	d00d      	beq.n	df2c <calculate_rank+0x24>
      return INFINITE_RANK;
    }
    rank_increase = RPL_INIT_LINK_METRIC * RPL_DAG_MC_ETX_DIVISOR;
    df10:	22c0      	movs	r2, #192	; 0xc0
    df12:	0092      	lsls	r2, r2, #2
    df14:	e003      	b.n	df1e <calculate_rank+0x16>
  } else {
    rank_increase = p->link_metric;
    df16:	8942      	ldrh	r2, [r0, #10]
    if(base_rank == 0) {
    df18:	2900      	cmp	r1, #0
    df1a:	d100      	bne.n	df1e <calculate_rank+0x16>
      base_rank = p->rank;
    df1c:	8901      	ldrh	r1, [r0, #8]
    }
  }

  if(INFINITE_RANK - base_rank < rank_increase) {
    df1e:	4b05      	ldr	r3, [pc, #20]	; (df34 <calculate_rank+0x2c>)
    df20:	1a5b      	subs	r3, r3, r1
    df22:	4293      	cmp	r3, r2
    df24:	db04      	blt.n	df30 <calculate_rank+0x28>
    /* Reached the maximum rank. */
    new_rank = INFINITE_RANK;
  } else {
   /* Calculate the rank based on the new rank information from DIO or
      stored otherwise. */
    new_rank = base_rank + rank_increase;
    df26:	1851      	adds	r1, r2, r1
    df28:	b288      	uxth	r0, r1
    df2a:	e002      	b.n	df32 <calculate_rank+0x2a>
  rpl_rank_t new_rank;
  rpl_rank_t rank_increase;

  if(p == NULL) {
    if(base_rank == 0) {
      return INFINITE_RANK;
    df2c:	4801      	ldr	r0, [pc, #4]	; (df34 <calculate_rank+0x2c>)
    df2e:	e000      	b.n	df32 <calculate_rank+0x2a>
    }
  }

  if(INFINITE_RANK - base_rank < rank_increase) {
    /* Reached the maximum rank. */
    new_rank = INFINITE_RANK;
    df30:	4800      	ldr	r0, [pc, #0]	; (df34 <calculate_rank+0x2c>)
      stored otherwise. */
    new_rank = base_rank + rank_increase;
  }

  return new_rank;
}
    df32:	4770      	bx	lr
    df34:	0000ffff 	.word	0x0000ffff

0000df38 <best_dag>:

static rpl_dag_t *
best_dag(rpl_dag_t *d1, rpl_dag_t *d2)
{
  if(d1->grounded != d2->grounded) {
    df38:	7cc3      	ldrb	r3, [r0, #19]
    df3a:	7cca      	ldrb	r2, [r1, #19]
    df3c:	429a      	cmp	r2, r3
    df3e:	d003      	beq.n	df48 <best_dag+0x10>
    return d1->grounded ? d1 : d2;
    df40:	2b00      	cmp	r3, #0
    df42:	d10d      	bne.n	df60 <best_dag+0x28>
    df44:	1c08      	adds	r0, r1, #0
    df46:	e00b      	b.n	df60 <best_dag+0x28>
  }

  if(d1->preference != d2->preference) {
    df48:	7d02      	ldrb	r2, [r0, #20]
    df4a:	7d0b      	ldrb	r3, [r1, #20]
    df4c:	429a      	cmp	r2, r3
    df4e:	d002      	beq.n	df56 <best_dag+0x1e>
    return d1->preference > d2->preference ? d1 : d2;
    df50:	d806      	bhi.n	df60 <best_dag+0x28>
    df52:	1c08      	adds	r0, r1, #0
    df54:	e004      	b.n	df60 <best_dag+0x28>
  }

  return d1->rank < d2->rank ? d1 : d2;
    df56:	8b82      	ldrh	r2, [r0, #28]
    df58:	8b8b      	ldrh	r3, [r1, #28]
    df5a:	429a      	cmp	r2, r3
    df5c:	d300      	bcc.n	df60 <best_dag+0x28>
    df5e:	1c08      	adds	r0, r1, #0
}
    df60:	4770      	bx	lr
    df62:	46c0      	nop			; (mov r8, r8)

0000df64 <update_metric_container>:

#if RPL_DAG_MC == RPL_DAG_MC_NONE
static void
update_metric_container(rpl_instance_t *instance)
{
  instance->mc.type = RPL_DAG_MC;
    df64:	2300      	movs	r3, #0
    df66:	7003      	strb	r3, [r0, #0]
}
    df68:	4770      	bx	lr
    df6a:	46c0      	nop			; (mov r8, r8)

0000df6c <best_parent>:
  return d1->rank < d2->rank ? d1 : d2;
}

static rpl_parent_t *
best_parent(rpl_parent_t *p1, rpl_parent_t *p2)
{
    df6c:	b570      	push	{r4, r5, r6, lr}
    df6e:	1e03      	subs	r3, r0, #0
  rpl_dag_t *dag;
  rpl_path_metric_t min_diff;
  rpl_path_metric_t p1_metric;
  rpl_path_metric_t p2_metric;

  dag = p1->dag; /* Both parents are in the same DAG. */
    df70:	6845      	ldr	r5, [r0, #4]
typedef uint16_t rpl_path_metric_t;

static rpl_path_metric_t
calculate_path_metric(rpl_parent_t *p)
{
  if(p == NULL) {
    df72:	d004      	beq.n	df7e <best_parent+0x12>
    return MAX_PATH_COST * RPL_DAG_MC_ETX_DIVISOR;
  }

#if RPL_DAG_MC == RPL_DAG_MC_NONE
  return p->rank + (uint16_t)p->link_metric;
    df74:	8940      	ldrh	r0, [r0, #10]
    df76:	891a      	ldrh	r2, [r3, #8]
    df78:	1882      	adds	r2, r0, r2
    df7a:	b292      	uxth	r2, r2
    df7c:	e001      	b.n	df82 <best_parent+0x16>

static rpl_path_metric_t
calculate_path_metric(rpl_parent_t *p)
{
  if(p == NULL) {
    return MAX_PATH_COST * RPL_DAG_MC_ETX_DIVISOR;
    df7e:	22c8      	movs	r2, #200	; 0xc8
    df80:	01d2      	lsls	r2, r2, #7
typedef uint16_t rpl_path_metric_t;

static rpl_path_metric_t
calculate_path_metric(rpl_parent_t *p)
{
  if(p == NULL) {
    df82:	2900      	cmp	r1, #0
    df84:	d004      	beq.n	df90 <best_parent+0x24>
    return MAX_PATH_COST * RPL_DAG_MC_ETX_DIVISOR;
  }

#if RPL_DAG_MC == RPL_DAG_MC_NONE
  return p->rank + (uint16_t)p->link_metric;
    df86:	894c      	ldrh	r4, [r1, #10]
    df88:	8908      	ldrh	r0, [r1, #8]
    df8a:	1824      	adds	r4, r4, r0
    df8c:	b2a4      	uxth	r4, r4
    df8e:	e001      	b.n	df94 <best_parent+0x28>

static rpl_path_metric_t
calculate_path_metric(rpl_parent_t *p)
{
  if(p == NULL) {
    return MAX_PATH_COST * RPL_DAG_MC_ETX_DIVISOR;
    df90:	24c8      	movs	r4, #200	; 0xc8
    df92:	01e4      	lsls	r4, r4, #7

  p1_metric = calculate_path_metric(p1);
  p2_metric = calculate_path_metric(p2);

  /* Maintain stability of the preferred parent in case of similar ranks. */
  if(p1 == dag->preferred_parent || p2 == dag->preferred_parent) {
    df94:	69a8      	ldr	r0, [r5, #24]
    df96:	4298      	cmp	r0, r3
    df98:	d001      	beq.n	df9e <best_parent+0x32>
    df9a:	4281      	cmp	r1, r0
    df9c:	d107      	bne.n	dfae <best_parent+0x42>
    if(p1_metric < p2_metric + min_diff &&
    df9e:	1c25      	adds	r5, r4, #0
    dfa0:	3580      	adds	r5, #128	; 0x80
    dfa2:	42aa      	cmp	r2, r5
    dfa4:	da03      	bge.n	dfae <best_parent+0x42>
       p1_metric > p2_metric - min_diff) {
    dfa6:	3d01      	subs	r5, #1
    dfa8:	3dff      	subs	r5, #255	; 0xff
  p1_metric = calculate_path_metric(p1);
  p2_metric = calculate_path_metric(p2);

  /* Maintain stability of the preferred parent in case of similar ranks. */
  if(p1 == dag->preferred_parent || p2 == dag->preferred_parent) {
    if(p1_metric < p2_metric + min_diff &&
    dfaa:	42aa      	cmp	r2, r5
    dfac:	dc03      	bgt.n	dfb6 <best_parent+0x4a>
             p2_metric + min_diff);
      return dag->preferred_parent;
    }
  }

  return p1_metric < p2_metric ? p1 : p2;
    dfae:	1c18      	adds	r0, r3, #0
    dfb0:	42a2      	cmp	r2, r4
    dfb2:	d300      	bcc.n	dfb6 <best_parent+0x4a>
    dfb4:	1c08      	adds	r0, r1, #0
}
    dfb6:	bd70      	pop	{r4, r5, r6, pc}

0000dfb8 <new_dio_interval>:
  ctimer_reset(&periodic_timer);
}
/*---------------------------------------------------------------------------*/
static void
new_dio_interval(rpl_instance_t *instance)
{
    dfb8:	b5f0      	push	{r4, r5, r6, r7, lr}
    dfba:	4647      	mov	r7, r8
    dfbc:	b480      	push	{r7}
    dfbe:	1c04      	adds	r4, r0, #0
  uint32_t time;
  clock_time_t ticks;

  /* TODO: too small timer intervals for many cases */
  time = 1UL << instance->dio_intcurrent;
    dfc0:	2394      	movs	r3, #148	; 0x94
    dfc2:	5cc0      	ldrb	r0, [r0, r3]
    dfc4:	2701      	movs	r7, #1
    dfc6:	1c3b      	adds	r3, r7, #0
    dfc8:	4083      	lsls	r3, r0

  /* Convert from milliseconds to CLOCK_TICKS. */
  ticks = (time * CLOCK_SECOND) / 1000;
    dfca:	01d8      	lsls	r0, r3, #7
    dfcc:	4b0f      	ldr	r3, [pc, #60]	; (e00c <new_dio_interval+0x54>)
    dfce:	4698      	mov	r8, r3
    dfd0:	21fa      	movs	r1, #250	; 0xfa
    dfd2:	0089      	lsls	r1, r1, #2
    dfd4:	4798      	blx	r3
  instance->dio_next_delay = ticks;
    dfd6:	26a0      	movs	r6, #160	; 0xa0
    dfd8:	51a0      	str	r0, [r4, r6]

  /* random number between I/2 and I */
  ticks = ticks / 2 + (ticks / 2 * (uint32_t)random_rand()) / RANDOM_RAND_MAX;
    dfda:	0845      	lsrs	r5, r0, #1
    dfdc:	4b0c      	ldr	r3, [pc, #48]	; (e010 <new_dio_interval+0x58>)
    dfde:	4798      	blx	r3
    dfe0:	4368      	muls	r0, r5
    dfe2:	490c      	ldr	r1, [pc, #48]	; (e014 <new_dio_interval+0x5c>)
    dfe4:	47c0      	blx	r8
    dfe6:	1941      	adds	r1, r0, r5
  /*
   * The intervals must be equally long among the nodes for Trickle to
   * operate efficiently. Therefore we need to calculate the delay between
   * the randomized time and the start time of the next interval.
   */
  instance->dio_next_delay -= ticks;
    dfe8:	59a3      	ldr	r3, [r4, r6]
    dfea:	1a5b      	subs	r3, r3, r1
    dfec:	51a3      	str	r3, [r4, r6]
  instance->dio_send = 1;
    dfee:	2395      	movs	r3, #149	; 0x95
    dff0:	54e7      	strb	r7, [r4, r3]
           instance->dio_totrecv,instance->dio_intcurrent,
	   instance->current_dag->rank == ROOT_RANK(instance) ? "BLUE" : "ORANGE");
#endif /* RPL_CONF_STATS */

  /* reset the redundancy counter */
  instance->dio_counter = 0;
    dff2:	2200      	movs	r2, #0
    dff4:	3301      	adds	r3, #1
    dff6:	54e2      	strb	r2, [r4, r3]

  /* schedule the timer */
  PRINTF("RPL: Scheduling DIO timer %lu ticks in future (Interval)\n\r", ticks);
  ctimer_set(&instance->dio_timer, ticks, &handle_dio_timer, instance);
    dff8:	1c20      	adds	r0, r4, #0
    dffa:	30a4      	adds	r0, #164	; 0xa4
    dffc:	4a06      	ldr	r2, [pc, #24]	; (e018 <new_dio_interval+0x60>)
    dffe:	1c23      	adds	r3, r4, #0
    e000:	4c06      	ldr	r4, [pc, #24]	; (e01c <new_dio_interval+0x64>)
    e002:	47a0      	blx	r4
}
    e004:	bc04      	pop	{r2}
    e006:	4690      	mov	r8, r2
    e008:	bdf0      	pop	{r4, r5, r6, r7, pc}
    e00a:	46c0      	nop			; (mov r8, r8)
    e00c:	00010525 	.word	0x00010525
    e010:	00005895 	.word	0x00005895
    e014:	0000ffff 	.word	0x0000ffff
    e018:	0000e071 	.word	0x0000e071
    e01c:	0000e615 	.word	0x0000e615

0000e020 <handle_periodic_timer>:
static uint8_t dio_send_ok;

/*---------------------------------------------------------------------------*/
static void
handle_periodic_timer(void *ptr)
{
    e020:	b508      	push	{r3, lr}
  rpl_purge_routes();
    e022:	4b0c      	ldr	r3, [pc, #48]	; (e054 <handle_periodic_timer+0x34>)
    e024:	4798      	blx	r3
  rpl_recalculate_ranks();
    e026:	4b0c      	ldr	r3, [pc, #48]	; (e058 <handle_periodic_timer+0x38>)
    e028:	4798      	blx	r3

  /* handle DIS */
#if RPL_DIS_SEND
  next_dis++;
    e02a:	4a0c      	ldr	r2, [pc, #48]	; (e05c <handle_periodic_timer+0x3c>)
    e02c:	8813      	ldrh	r3, [r2, #0]
    e02e:	3301      	adds	r3, #1
    e030:	8013      	strh	r3, [r2, #0]
  if(rpl_get_any_dag() == NULL && next_dis >= RPL_DIS_INTERVAL) {
    e032:	4b0b      	ldr	r3, [pc, #44]	; (e060 <handle_periodic_timer+0x40>)
    e034:	4798      	blx	r3
    e036:	2800      	cmp	r0, #0
    e038:	d108      	bne.n	e04c <handle_periodic_timer+0x2c>
    e03a:	4b08      	ldr	r3, [pc, #32]	; (e05c <handle_periodic_timer+0x3c>)
    e03c:	881b      	ldrh	r3, [r3, #0]
    e03e:	2b3b      	cmp	r3, #59	; 0x3b
    e040:	d904      	bls.n	e04c <handle_periodic_timer+0x2c>
    next_dis = 0;
    e042:	2200      	movs	r2, #0
    e044:	4b05      	ldr	r3, [pc, #20]	; (e05c <handle_periodic_timer+0x3c>)
    e046:	801a      	strh	r2, [r3, #0]
    dis_output(NULL);
    e048:	4b06      	ldr	r3, [pc, #24]	; (e064 <handle_periodic_timer+0x44>)
    e04a:	4798      	blx	r3
  }
#endif
  ctimer_reset(&periodic_timer);
    e04c:	4806      	ldr	r0, [pc, #24]	; (e068 <handle_periodic_timer+0x48>)
    e04e:	4b07      	ldr	r3, [pc, #28]	; (e06c <handle_periodic_timer+0x4c>)
    e050:	4798      	blx	r3
}
    e052:	bd08      	pop	{r3, pc}
    e054:	0000e2b1 	.word	0x0000e2b1
    e058:	0000ce15 	.word	0x0000ce15
    e05c:	20001d08 	.word	0x20001d08
    e060:	0000c93d 	.word	0x0000c93d
    e064:	0000d789 	.word	0x0000d789
    e068:	20001ce8 	.word	0x20001ce8
    e06c:	0000e66d 	.word	0x0000e66d

0000e070 <handle_dio_timer>:
  ctimer_set(&instance->dio_timer, ticks, &handle_dio_timer, instance);
}
/*---------------------------------------------------------------------------*/
static void
handle_dio_timer(void *ptr)
{
    e070:	b510      	push	{r4, lr}
    e072:	1c04      	adds	r4, r0, #0
  rpl_instance_t *instance;

  instance = (rpl_instance_t *)ptr;

  PRINTF("RPL: DIO Timer triggered\n\r");
  if(!dio_send_ok) {
    e074:	4b1f      	ldr	r3, [pc, #124]	; (e0f4 <handle_dio_timer+0x84>)
    e076:	781b      	ldrb	r3, [r3, #0]
    e078:	2b00      	cmp	r3, #0
    e07a:	d110      	bne.n	e09e <handle_dio_timer+0x2e>
    if(uip_ds6_get_link_local(ADDR_PREFERRED) != NULL) {
    e07c:	2001      	movs	r0, #1
    e07e:	4b1e      	ldr	r3, [pc, #120]	; (e0f8 <handle_dio_timer+0x88>)
    e080:	4798      	blx	r3
    e082:	2800      	cmp	r0, #0
    e084:	d003      	beq.n	e08e <handle_dio_timer+0x1e>
      dio_send_ok = 1;
    e086:	2201      	movs	r2, #1
    e088:	4b1a      	ldr	r3, [pc, #104]	; (e0f4 <handle_dio_timer+0x84>)
    e08a:	701a      	strb	r2, [r3, #0]
    e08c:	e007      	b.n	e09e <handle_dio_timer+0x2e>
    } else {
      PRINTF("RPL: Postponing DIO transmission since link local address is not ok\n\r");
      ctimer_set(&instance->dio_timer, CLOCK_SECOND, &handle_dio_timer, instance);
    e08e:	1c20      	adds	r0, r4, #0
    e090:	30a4      	adds	r0, #164	; 0xa4
    e092:	2180      	movs	r1, #128	; 0x80
    e094:	4a19      	ldr	r2, [pc, #100]	; (e0fc <handle_dio_timer+0x8c>)
    e096:	1c23      	adds	r3, r4, #0
    e098:	4c19      	ldr	r4, [pc, #100]	; (e100 <handle_dio_timer+0x90>)
    e09a:	47a0      	blx	r4
      return;
    e09c:	e028      	b.n	e0f0 <handle_dio_timer+0x80>
    }
  }

  if(instance->dio_send) {
    e09e:	2395      	movs	r3, #149	; 0x95
    e0a0:	5ce3      	ldrb	r3, [r4, r3]
    e0a2:	2b00      	cmp	r3, #0
    e0a4:	d015      	beq.n	e0d2 <handle_dio_timer+0x62>
    /* send DIO if counter is less than desired redundancy */
    if(instance->dio_counter < instance->dio_redundancy) {
    e0a6:	2396      	movs	r3, #150	; 0x96
    e0a8:	5ce2      	ldrb	r2, [r4, r3]
    e0aa:	3b04      	subs	r3, #4
    e0ac:	5ce3      	ldrb	r3, [r4, r3]
    e0ae:	429a      	cmp	r2, r3
    e0b0:	d203      	bcs.n	e0ba <handle_dio_timer+0x4a>
#if RPL_CONF_STATS
      instance->dio_totsend++;
#endif /* RPL_CONF_STATS */
      dio_output(instance, NULL);
    e0b2:	1c20      	adds	r0, r4, #0
    e0b4:	2100      	movs	r1, #0
    e0b6:	4b13      	ldr	r3, [pc, #76]	; (e104 <handle_dio_timer+0x94>)
    e0b8:	4798      	blx	r3
    } else {
      PRINTF("RPL: Supressing DIO transmission (%d >= %d)\n\r",
             instance->dio_counter, instance->dio_redundancy);
    }
    instance->dio_send = 0;
    e0ba:	2200      	movs	r2, #0
    e0bc:	2395      	movs	r3, #149	; 0x95
    e0be:	54e2      	strb	r2, [r4, r3]
    PRINTF("RPL: Scheduling DIO timer %lu ticks in future (sent)\n\r",
           instance->dio_next_delay);
    ctimer_set(&instance->dio_timer, instance->dio_next_delay, handle_dio_timer, instance);
    e0c0:	1c20      	adds	r0, r4, #0
    e0c2:	30a4      	adds	r0, #164	; 0xa4
    e0c4:	330b      	adds	r3, #11
    e0c6:	58e1      	ldr	r1, [r4, r3]
    e0c8:	4a0c      	ldr	r2, [pc, #48]	; (e0fc <handle_dio_timer+0x8c>)
    e0ca:	1c23      	adds	r3, r4, #0
    e0cc:	4c0c      	ldr	r4, [pc, #48]	; (e100 <handle_dio_timer+0x90>)
    e0ce:	47a0      	blx	r4
    e0d0:	e00e      	b.n	e0f0 <handle_dio_timer+0x80>
  } else {
    /* check if we need to double interval */
    if(instance->dio_intcurrent < instance->dio_intmin + instance->dio_intdoubl) {
    e0d2:	2394      	movs	r3, #148	; 0x94
    e0d4:	5ce2      	ldrb	r2, [r4, r3]
    e0d6:	3b03      	subs	r3, #3
    e0d8:	5ce1      	ldrb	r1, [r4, r3]
    e0da:	3b01      	subs	r3, #1
    e0dc:	5ce3      	ldrb	r3, [r4, r3]
    e0de:	18cb      	adds	r3, r1, r3
    e0e0:	429a      	cmp	r2, r3
    e0e2:	da02      	bge.n	e0ea <handle_dio_timer+0x7a>
      instance->dio_intcurrent++;
    e0e4:	3201      	adds	r2, #1
    e0e6:	2394      	movs	r3, #148	; 0x94
    e0e8:	54e2      	strb	r2, [r4, r3]
      PRINTF("RPL: DIO Timer interval doubled %d\n\r", instance->dio_intcurrent);
    }
    new_dio_interval(instance);
    e0ea:	1c20      	adds	r0, r4, #0
    e0ec:	4b06      	ldr	r3, [pc, #24]	; (e108 <handle_dio_timer+0x98>)
    e0ee:	4798      	blx	r3
  }
}
    e0f0:	bd10      	pop	{r4, pc}
    e0f2:	46c0      	nop			; (mov r8, r8)
    e0f4:	20001d0a 	.word	0x20001d0a
    e0f8:	0000746d 	.word	0x0000746d
    e0fc:	0000e071 	.word	0x0000e071
    e100:	0000e615 	.word	0x0000e615
    e104:	0000d7dd 	.word	0x0000d7dd
    e108:	0000dfb9 	.word	0x0000dfb9

0000e10c <set_dao_lifetime_timer>:
}
/*---------------------------------------------------------------------------*/
static void handle_dao_timer(void *ptr);
static void
set_dao_lifetime_timer(rpl_instance_t *instance)
{
    e10c:	b510      	push	{r4, lr}
    e10e:	1c04      	adds	r4, r0, #0
  if(rpl_get_mode() == RPL_MODE_FEATHER) {
    e110:	4b0a      	ldr	r3, [pc, #40]	; (e13c <set_dao_lifetime_timer+0x30>)
    e112:	4798      	blx	r3
    e114:	2801      	cmp	r0, #1
    e116:	d010      	beq.n	e13a <set_dao_lifetime_timer+0x2e>
    return;
  }

  /* Set up another DAO within half the expiration time, if such a
     time has been configured */
  if(instance->lifetime_unit != 0xffff && instance->default_lifetime != 0xff) {
    e118:	239c      	movs	r3, #156	; 0x9c
    e11a:	5ae3      	ldrh	r3, [r4, r3]
    e11c:	4a08      	ldr	r2, [pc, #32]	; (e140 <set_dao_lifetime_timer+0x34>)
    e11e:	4293      	cmp	r3, r2
    e120:	d00b      	beq.n	e13a <set_dao_lifetime_timer+0x2e>
    e122:	2293      	movs	r2, #147	; 0x93
    e124:	5ca1      	ldrb	r1, [r4, r2]
    e126:	29ff      	cmp	r1, #255	; 0xff
    e128:	d007      	beq.n	e13a <set_dao_lifetime_timer+0x2e>
    expiration_time = (clock_time_t)instance->default_lifetime *
      (clock_time_t)instance->lifetime_unit *
      CLOCK_SECOND / 2;
    PRINTF("RPL: Scheduling DAO lifetime timer %u ticks in the future\n\r",
           (unsigned)expiration_time);
    ctimer_set(&instance->dao_lifetime_timer, expiration_time,
    e12a:	1c20      	adds	r0, r4, #0
    e12c:	30e4      	adds	r0, #228	; 0xe4
  /* Set up another DAO within half the expiration time, if such a
     time has been configured */
  if(instance->lifetime_unit != 0xffff && instance->default_lifetime != 0xff) {
    clock_time_t expiration_time;
    expiration_time = (clock_time_t)instance->default_lifetime *
      (clock_time_t)instance->lifetime_unit *
    e12e:	4359      	muls	r1, r3

  /* Set up another DAO within half the expiration time, if such a
     time has been configured */
  if(instance->lifetime_unit != 0xffff && instance->default_lifetime != 0xff) {
    clock_time_t expiration_time;
    expiration_time = (clock_time_t)instance->default_lifetime *
    e130:	0189      	lsls	r1, r1, #6
      (clock_time_t)instance->lifetime_unit *
      CLOCK_SECOND / 2;
    PRINTF("RPL: Scheduling DAO lifetime timer %u ticks in the future\n\r",
           (unsigned)expiration_time);
    ctimer_set(&instance->dao_lifetime_timer, expiration_time,
    e132:	4a04      	ldr	r2, [pc, #16]	; (e144 <set_dao_lifetime_timer+0x38>)
    e134:	1c23      	adds	r3, r4, #0
    e136:	4c04      	ldr	r4, [pc, #16]	; (e148 <set_dao_lifetime_timer+0x3c>)
    e138:	47a0      	blx	r4
               handle_dao_timer, instance);
  }
}
    e13a:	bd10      	pop	{r4, pc}
    e13c:	0000e2a5 	.word	0x0000e2a5
    e140:	0000ffff 	.word	0x0000ffff
    e144:	0000e1b9 	.word	0x0000e1b9
    e148:	0000e615 	.word	0x0000e615

0000e14c <schedule_dao>:
  }
}
/*---------------------------------------------------------------------------*/
static void
schedule_dao(rpl_instance_t *instance, clock_time_t latency)
{
    e14c:	b570      	push	{r4, r5, r6, lr}
    e14e:	1c04      	adds	r4, r0, #0
    e150:	1c0d      	adds	r5, r1, #0
  clock_time_t expiration_time;

  if(rpl_get_mode() == RPL_MODE_FEATHER) {
    e152:	4b11      	ldr	r3, [pc, #68]	; (e198 <schedule_dao+0x4c>)
    e154:	4798      	blx	r3
    e156:	2801      	cmp	r0, #1
    e158:	d01c      	beq.n	e194 <schedule_dao+0x48>
    return;
  }

  expiration_time = etimer_expiration_time(&instance->dao_timer.etimer);
    e15a:	1c26      	adds	r6, r4, #0
    e15c:	36c8      	adds	r6, #200	; 0xc8
    e15e:	1c30      	adds	r0, r6, #0
    e160:	4b0e      	ldr	r3, [pc, #56]	; (e19c <schedule_dao+0x50>)
    e162:	4798      	blx	r3

  if(!etimer_expired(&instance->dao_timer.etimer)) {
    e164:	1c30      	adds	r0, r6, #0
    e166:	4b0e      	ldr	r3, [pc, #56]	; (e1a0 <schedule_dao+0x54>)
    e168:	4798      	blx	r3
    e16a:	2800      	cmp	r0, #0
    e16c:	d012      	beq.n	e194 <schedule_dao+0x48>
  } else {
    if(latency != 0) {
      expiration_time = latency / 2 +
        (random_rand() % (latency));
    } else {
      expiration_time = 0;
    e16e:	2100      	movs	r1, #0
  expiration_time = etimer_expiration_time(&instance->dao_timer.etimer);

  if(!etimer_expired(&instance->dao_timer.etimer)) {
    PRINTF("RPL: DAO timer already scheduled\n\r");
  } else {
    if(latency != 0) {
    e170:	2d00      	cmp	r5, #0
    e172:	d006      	beq.n	e182 <schedule_dao+0x36>
      expiration_time = latency / 2 +
        (random_rand() % (latency));
    e174:	4b0b      	ldr	r3, [pc, #44]	; (e1a4 <schedule_dao+0x58>)
    e176:	4798      	blx	r3
    e178:	1c29      	adds	r1, r5, #0
    e17a:	4b0b      	ldr	r3, [pc, #44]	; (e1a8 <schedule_dao+0x5c>)
    e17c:	4798      	blx	r3

  if(!etimer_expired(&instance->dao_timer.etimer)) {
    PRINTF("RPL: DAO timer already scheduled\n\r");
  } else {
    if(latency != 0) {
      expiration_time = latency / 2 +
    e17e:	086d      	lsrs	r5, r5, #1
    e180:	1949      	adds	r1, r1, r5
    } else {
      expiration_time = 0;
    }
    PRINTF("RPL: Scheduling DAO timer %u ticks in the future\n\r",
           (unsigned)expiration_time);
    ctimer_set(&instance->dao_timer, expiration_time,
    e182:	1c20      	adds	r0, r4, #0
    e184:	30c4      	adds	r0, #196	; 0xc4
    e186:	4a09      	ldr	r2, [pc, #36]	; (e1ac <schedule_dao+0x60>)
    e188:	1c23      	adds	r3, r4, #0
    e18a:	4d09      	ldr	r5, [pc, #36]	; (e1b0 <schedule_dao+0x64>)
    e18c:	47a8      	blx	r5
               handle_dao_timer, instance);

    set_dao_lifetime_timer(instance);
    e18e:	1c20      	adds	r0, r4, #0
    e190:	4b08      	ldr	r3, [pc, #32]	; (e1b4 <schedule_dao+0x68>)
    e192:	4798      	blx	r3
  }
}
    e194:	bd70      	pop	{r4, r5, r6, pc}
    e196:	46c0      	nop			; (mov r8, r8)
    e198:	0000e2a5 	.word	0x0000e2a5
    e19c:	0000e95d 	.word	0x0000e95d
    e1a0:	0000e955 	.word	0x0000e955
    e1a4:	00005895 	.word	0x00005895
    e1a8:	00010631 	.word	0x00010631
    e1ac:	0000e1b9 	.word	0x0000e1b9
    e1b0:	0000e615 	.word	0x0000e615
    e1b4:	0000e10d 	.word	0x0000e10d

0000e1b8 <handle_dao_timer>:
  }
}
/*---------------------------------------------------------------------------*/
static void
handle_dao_timer(void *ptr)
{
    e1b8:	b510      	push	{r4, lr}
    e1ba:	1c04      	adds	r4, r0, #0
  uint8_t i;
#endif

  instance = (rpl_instance_t *)ptr;

  if(!dio_send_ok && uip_ds6_get_link_local(ADDR_PREFERRED) == NULL) {
    e1bc:	4b13      	ldr	r3, [pc, #76]	; (e20c <handle_dao_timer+0x54>)
    e1be:	781b      	ldrb	r3, [r3, #0]
    e1c0:	2b00      	cmp	r3, #0
    e1c2:	d10c      	bne.n	e1de <handle_dao_timer+0x26>
    e1c4:	2001      	movs	r0, #1
    e1c6:	4b12      	ldr	r3, [pc, #72]	; (e210 <handle_dao_timer+0x58>)
    e1c8:	4798      	blx	r3
    e1ca:	2800      	cmp	r0, #0
    e1cc:	d107      	bne.n	e1de <handle_dao_timer+0x26>
    PRINTF("RPL: Postpone DAO transmission\n\r");
    ctimer_set(&instance->dao_timer, CLOCK_SECOND, handle_dao_timer, instance);
    e1ce:	1c20      	adds	r0, r4, #0
    e1d0:	30c4      	adds	r0, #196	; 0xc4
    e1d2:	2180      	movs	r1, #128	; 0x80
    e1d4:	4a0f      	ldr	r2, [pc, #60]	; (e214 <handle_dao_timer+0x5c>)
    e1d6:	1c23      	adds	r3, r4, #0
    e1d8:	4c0f      	ldr	r4, [pc, #60]	; (e218 <handle_dao_timer+0x60>)
    e1da:	47a0      	blx	r4
    return;
    e1dc:	e014      	b.n	e208 <handle_dao_timer+0x50>
  }

  /* Send the DAO to the DAO parent set -- the preferred parent in our case. */
  if(instance->current_dag->preferred_parent != NULL) {
    e1de:	68e3      	ldr	r3, [r4, #12]
    e1e0:	6998      	ldr	r0, [r3, #24]
    e1e2:	2800      	cmp	r0, #0
    e1e4:	d003      	beq.n	e1ee <handle_dao_timer+0x36>
    PRINTF("RPL: handle_dao_timer - sending DAO\n\r");
    /* Set the route lifetime to the default value. */
    dao_output(instance->current_dag->preferred_parent, instance->default_lifetime);
    e1e6:	2393      	movs	r3, #147	; 0x93
    e1e8:	5ce1      	ldrb	r1, [r4, r3]
    e1ea:	4b0c      	ldr	r3, [pc, #48]	; (e21c <handle_dao_timer+0x64>)
    e1ec:	4798      	blx	r3
#endif
  } else {
    PRINTF("RPL: No suitable DAO parent\n\r");
  }

  ctimer_stop(&instance->dao_timer);
    e1ee:	1c20      	adds	r0, r4, #0
    e1f0:	30c4      	adds	r0, #196	; 0xc4
    e1f2:	4b0b      	ldr	r3, [pc, #44]	; (e220 <handle_dao_timer+0x68>)
    e1f4:	4798      	blx	r3

  if(etimer_expired(&instance->dao_lifetime_timer.etimer)) {
    e1f6:	1c20      	adds	r0, r4, #0
    e1f8:	30e8      	adds	r0, #232	; 0xe8
    e1fa:	4b0a      	ldr	r3, [pc, #40]	; (e224 <handle_dao_timer+0x6c>)
    e1fc:	4798      	blx	r3
    e1fe:	2800      	cmp	r0, #0
    e200:	d002      	beq.n	e208 <handle_dao_timer+0x50>
    set_dao_lifetime_timer(instance);
    e202:	1c20      	adds	r0, r4, #0
    e204:	4b08      	ldr	r3, [pc, #32]	; (e228 <handle_dao_timer+0x70>)
    e206:	4798      	blx	r3
  }
}
    e208:	bd10      	pop	{r4, pc}
    e20a:	46c0      	nop			; (mov r8, r8)
    e20c:	20001d0a 	.word	0x20001d0a
    e210:	0000746d 	.word	0x0000746d
    e214:	0000e1b9 	.word	0x0000e1b9
    e218:	0000e615 	.word	0x0000e615
    e21c:	0000db0d 	.word	0x0000db0d
    e220:	0000e705 	.word	0x0000e705
    e224:	0000e955 	.word	0x0000e955
    e228:	0000e10d 	.word	0x0000e10d

0000e22c <rpl_reset_periodic_timer>:
  }
}
/*---------------------------------------------------------------------------*/
void
rpl_reset_periodic_timer(void)
{
    e22c:	b510      	push	{r4, lr}
  next_dis = RPL_DIS_INTERVAL / 2 +
    ((uint32_t)RPL_DIS_INTERVAL * (uint32_t)random_rand()) / RANDOM_RAND_MAX -
    e22e:	4b09      	ldr	r3, [pc, #36]	; (e254 <rpl_reset_periodic_timer+0x28>)
    e230:	4798      	blx	r3
    e232:	0103      	lsls	r3, r0, #4
    e234:	1a18      	subs	r0, r3, r0
    e236:	0080      	lsls	r0, r0, #2
    e238:	4907      	ldr	r1, [pc, #28]	; (e258 <rpl_reset_periodic_timer+0x2c>)
    e23a:	4b08      	ldr	r3, [pc, #32]	; (e25c <rpl_reset_periodic_timer+0x30>)
    e23c:	4798      	blx	r3
}
/*---------------------------------------------------------------------------*/
void
rpl_reset_periodic_timer(void)
{
  next_dis = RPL_DIS_INTERVAL / 2 +
    e23e:	3019      	adds	r0, #25
    e240:	4b07      	ldr	r3, [pc, #28]	; (e260 <rpl_reset_periodic_timer+0x34>)
    e242:	8018      	strh	r0, [r3, #0]
    ((uint32_t)RPL_DIS_INTERVAL * (uint32_t)random_rand()) / RANDOM_RAND_MAX -
    RPL_DIS_START_DELAY;
  ctimer_set(&periodic_timer, CLOCK_SECOND, handle_periodic_timer, NULL);
    e244:	4807      	ldr	r0, [pc, #28]	; (e264 <rpl_reset_periodic_timer+0x38>)
    e246:	2180      	movs	r1, #128	; 0x80
    e248:	4a07      	ldr	r2, [pc, #28]	; (e268 <rpl_reset_periodic_timer+0x3c>)
    e24a:	2300      	movs	r3, #0
    e24c:	4c07      	ldr	r4, [pc, #28]	; (e26c <rpl_reset_periodic_timer+0x40>)
    e24e:	47a0      	blx	r4
}
    e250:	bd10      	pop	{r4, pc}
    e252:	46c0      	nop			; (mov r8, r8)
    e254:	00005895 	.word	0x00005895
    e258:	0000ffff 	.word	0x0000ffff
    e25c:	00010525 	.word	0x00010525
    e260:	20001d08 	.word	0x20001d08
    e264:	20001ce8 	.word	0x20001ce8
    e268:	0000e021 	.word	0x0000e021
    e26c:	0000e615 	.word	0x0000e615

0000e270 <rpl_reset_dio_timer>:
/*---------------------------------------------------------------------------*/
/* Resets the DIO timer in the instance to its minimal interval. */
void
rpl_reset_dio_timer(rpl_instance_t *instance)
{
    e270:	b508      	push	{r3, lr}
#if !RPL_LEAF_ONLY
  /* Do not reset if we are already on the minimum interval,
     unless forced to do so. */
  if(instance->dio_intcurrent > instance->dio_intmin) {
    e272:	2391      	movs	r3, #145	; 0x91
    e274:	5cc3      	ldrb	r3, [r0, r3]
    e276:	2294      	movs	r2, #148	; 0x94
    e278:	5c82      	ldrb	r2, [r0, r2]
    e27a:	429a      	cmp	r2, r3
    e27c:	d906      	bls.n	e28c <rpl_reset_dio_timer+0x1c>
    instance->dio_counter = 0;
    e27e:	2100      	movs	r1, #0
    e280:	2296      	movs	r2, #150	; 0x96
    e282:	5481      	strb	r1, [r0, r2]
    instance->dio_intcurrent = instance->dio_intmin;
    e284:	3a02      	subs	r2, #2
    e286:	5483      	strb	r3, [r0, r2]
    new_dio_interval(instance);
    e288:	4b01      	ldr	r3, [pc, #4]	; (e290 <rpl_reset_dio_timer+0x20>)
    e28a:	4798      	blx	r3
  }
#if RPL_CONF_STATS
  rpl_stats.resets++;
#endif /* RPL_CONF_STATS */
#endif /* RPL_LEAF_ONLY */
}
    e28c:	bd08      	pop	{r3, pc}
    e28e:	46c0      	nop			; (mov r8, r8)
    e290:	0000dfb9 	.word	0x0000dfb9

0000e294 <rpl_schedule_dao>:
  }
}
/*---------------------------------------------------------------------------*/
void
rpl_schedule_dao(rpl_instance_t *instance)
{
    e294:	b508      	push	{r3, lr}
  schedule_dao(instance, RPL_DAO_LATENCY);
    e296:	2180      	movs	r1, #128	; 0x80
    e298:	0089      	lsls	r1, r1, #2
    e29a:	4b01      	ldr	r3, [pc, #4]	; (e2a0 <rpl_schedule_dao+0xc>)
    e29c:	4798      	blx	r3
}
    e29e:	bd08      	pop	{r3, pc}
    e2a0:	0000e14d 	.word	0x0000e14d

0000e2a4 <rpl_get_mode>:
static enum rpl_mode mode = RPL_MODE_MESH;
/*---------------------------------------------------------------------------*/
enum rpl_mode
rpl_get_mode(void)
{
  return mode;
    e2a4:	4b01      	ldr	r3, [pc, #4]	; (e2ac <rpl_get_mode+0x8>)
    e2a6:	7818      	ldrb	r0, [r3, #0]
}
    e2a8:	4770      	bx	lr
    e2aa:	46c0      	nop			; (mov r8, r8)
    e2ac:	20001d0b 	.word	0x20001d0b

0000e2b0 <rpl_purge_routes>:
  return oldmode;
}
/*---------------------------------------------------------------------------*/
void
rpl_purge_routes(void)
{
    e2b0:	b5f0      	push	{r4, r5, r6, r7, lr}
    e2b2:	4647      	mov	r7, r8
    e2b4:	b480      	push	{r7}
    e2b6:	b084      	sub	sp, #16
#if RPL_CONF_MULTICAST
  uip_mcast6_route_t *mcast_route;
#endif

  /* First pass, decrement lifetime */
  r = uip_ds6_route_head();
    e2b8:	4b1b      	ldr	r3, [pc, #108]	; (e328 <rpl_purge_routes+0x78>)
    e2ba:	4798      	blx	r3

  while(r != NULL) {
    e2bc:	2800      	cmp	r0, #0
    e2be:	d008      	beq.n	e2d2 <rpl_purge_routes+0x22>
       * immediate removal below. This achieves the same as the original code,
       * which would delete lifetime <= 1
       */
      r->state.lifetime--;
    }
    r = uip_ds6_route_next(r);
    e2c0:	4c1a      	ldr	r4, [pc, #104]	; (e32c <rpl_purge_routes+0x7c>)

  /* First pass, decrement lifetime */
  r = uip_ds6_route_head();

  while(r != NULL) {
    if(r->state.lifetime >= 1) {
    e2c2:	6983      	ldr	r3, [r0, #24]
    e2c4:	2b00      	cmp	r3, #0
    e2c6:	d001      	beq.n	e2cc <rpl_purge_routes+0x1c>
      /*
       * If a route is at lifetime == 1, set it to 0, scheduling it for
       * immediate removal below. This achieves the same as the original code,
       * which would delete lifetime <= 1
       */
      r->state.lifetime--;
    e2c8:	3b01      	subs	r3, #1
    e2ca:	6183      	str	r3, [r0, #24]
    }
    r = uip_ds6_route_next(r);
    e2cc:	47a0      	blx	r4
#endif

  /* First pass, decrement lifetime */
  r = uip_ds6_route_head();

  while(r != NULL) {
    e2ce:	2800      	cmp	r0, #0
    e2d0:	d1f7      	bne.n	e2c2 <rpl_purge_routes+0x12>
    }
    r = uip_ds6_route_next(r);
  }

  /* Second pass, remove dead routes */
  r = uip_ds6_route_head();
    e2d2:	4b15      	ldr	r3, [pc, #84]	; (e328 <rpl_purge_routes+0x78>)
    e2d4:	4798      	blx	r3

  while(r != NULL) {
    e2d6:	2800      	cmp	r0, #0
    e2d8:	d021      	beq.n	e31e <rpl_purge_routes+0x6e>
    if(r->state.lifetime < 1) {
      /* Routes with lifetime == 1 have only just been decremented from 2 to 1,
       * thus we want to keep them. Hence < and not <= */
      uip_ipaddr_copy(&prefix, &r->ipaddr);
      uip_ds6_route_rm(r);
    e2da:	4e15      	ldr	r6, [pc, #84]	; (e330 <rpl_purge_routes+0x80>)
      r = uip_ds6_route_head();
    e2dc:	4d12      	ldr	r5, [pc, #72]	; (e328 <rpl_purge_routes+0x78>)
      PRINTF("No more routes to ");
      PRINT6ADDR(&prefix);
      dag = default_instance->current_dag;
    e2de:	4b15      	ldr	r3, [pc, #84]	; (e334 <rpl_purge_routes+0x84>)
    e2e0:	4698      	mov	r8, r3

  /* Second pass, remove dead routes */
  r = uip_ds6_route_head();

  while(r != NULL) {
    if(r->state.lifetime < 1) {
    e2e2:	6983      	ldr	r3, [r0, #24]
    e2e4:	2b00      	cmp	r3, #0
    e2e6:	d116      	bne.n	e316 <rpl_purge_routes+0x66>
      /* Routes with lifetime == 1 have only just been decremented from 2 to 1,
       * thus we want to keep them. Hence < and not <= */
      uip_ipaddr_copy(&prefix, &r->ipaddr);
    e2e8:	466a      	mov	r2, sp
    e2ea:	1c03      	adds	r3, r0, #0
    e2ec:	3308      	adds	r3, #8
    e2ee:	cb92      	ldmia	r3!, {r1, r4, r7}
    e2f0:	c292      	stmia	r2!, {r1, r4, r7}
    e2f2:	681b      	ldr	r3, [r3, #0]
    e2f4:	6013      	str	r3, [r2, #0]
      uip_ds6_route_rm(r);
    e2f6:	47b0      	blx	r6
      r = uip_ds6_route_head();
    e2f8:	47a8      	blx	r5
      PRINTF("No more routes to ");
      PRINT6ADDR(&prefix);
      dag = default_instance->current_dag;
    e2fa:	4643      	mov	r3, r8
    e2fc:	681b      	ldr	r3, [r3, #0]
    e2fe:	68da      	ldr	r2, [r3, #12]
      /* Propagate this information with a No-Path DAO to preferred parent if we are not a RPL Root */
      if(dag->rank != ROOT_RANK(default_instance)) {
    e300:	8b91      	ldrh	r1, [r2, #28]
    e302:	279a      	movs	r7, #154	; 0x9a
    e304:	5bdb      	ldrh	r3, [r3, r7]
    e306:	4299      	cmp	r1, r3
    e308:	d007      	beq.n	e31a <rpl_purge_routes+0x6a>
        PRINTF(" -> generate No-Path DAO\n\r");
        dao_output_target(dag->preferred_parent, &prefix, RPL_ZERO_LIFETIME);
    e30a:	6990      	ldr	r0, [r2, #24]
    e30c:	4669      	mov	r1, sp
    e30e:	2200      	movs	r2, #0
    e310:	4b09      	ldr	r3, [pc, #36]	; (e338 <rpl_purge_routes+0x88>)
    e312:	4798      	blx	r3
    e314:	e003      	b.n	e31e <rpl_purge_routes+0x6e>
        /* Don't schedule more than 1 No-Path DAO, let next iteration handle that */
        return;
      }
      PRINTF("\n\r");
    } else {
      r = uip_ds6_route_next(r);
    e316:	4b05      	ldr	r3, [pc, #20]	; (e32c <rpl_purge_routes+0x7c>)
    e318:	4798      	blx	r3
  }

  /* Second pass, remove dead routes */
  r = uip_ds6_route_head();

  while(r != NULL) {
    e31a:	2800      	cmp	r0, #0
    e31c:	d1e1      	bne.n	e2e2 <rpl_purge_routes+0x32>
      mcast_route->lifetime--;
      mcast_route = list_item_next(mcast_route);
    }
  }
#endif
}
    e31e:	b004      	add	sp, #16
    e320:	bc04      	pop	{r2}
    e322:	4690      	mov	r8, r2
    e324:	bdf0      	pop	{r4, r5, r6, r7, pc}
    e326:	46c0      	nop			; (mov r8, r8)
    e328:	00006e41 	.word	0x00006e41
    e32c:	00006e55 	.word	0x00006e55
    e330:	00006eed 	.word	0x00006eed
    e334:	20003284 	.word	0x20003284
    e338:	0000da2d 	.word	0x0000da2d

0000e33c <rpl_remove_routes>:
/*---------------------------------------------------------------------------*/
void
rpl_remove_routes(rpl_dag_t *dag)
{
    e33c:	b538      	push	{r3, r4, r5, lr}
    e33e:	1c04      	adds	r4, r0, #0
  uip_ds6_route_t *r;
#if RPL_CONF_MULTICAST
  uip_mcast6_route_t *mcast_route;
#endif

  r = uip_ds6_route_head();
    e340:	4b08      	ldr	r3, [pc, #32]	; (e364 <rpl_remove_routes+0x28>)
    e342:	4798      	blx	r3

  while(r != NULL) {
    e344:	2800      	cmp	r0, #0
    e346:	d00b      	beq.n	e360 <rpl_remove_routes+0x24>
    if(r->state.dag == dag) {
      uip_ds6_route_rm(r);
      r = uip_ds6_route_head();
    } else {
      r = uip_ds6_route_next(r);
    e348:	4d07      	ldr	r5, [pc, #28]	; (e368 <rpl_remove_routes+0x2c>)
#endif

  r = uip_ds6_route_head();

  while(r != NULL) {
    if(r->state.dag == dag) {
    e34a:	69c3      	ldr	r3, [r0, #28]
    e34c:	42a3      	cmp	r3, r4
    e34e:	d104      	bne.n	e35a <rpl_remove_routes+0x1e>
      uip_ds6_route_rm(r);
    e350:	4b06      	ldr	r3, [pc, #24]	; (e36c <rpl_remove_routes+0x30>)
    e352:	4798      	blx	r3
      r = uip_ds6_route_head();
    e354:	4b03      	ldr	r3, [pc, #12]	; (e364 <rpl_remove_routes+0x28>)
    e356:	4798      	blx	r3
    e358:	e000      	b.n	e35c <rpl_remove_routes+0x20>
    } else {
      r = uip_ds6_route_next(r);
    e35a:	47a8      	blx	r5
  uip_mcast6_route_t *mcast_route;
#endif

  r = uip_ds6_route_head();

  while(r != NULL) {
    e35c:	2800      	cmp	r0, #0
    e35e:	d1f4      	bne.n	e34a <rpl_remove_routes+0xe>
    } else {
      mcast_route = list_item_next(mcast_route);
    }
  }
#endif
}
    e360:	bd38      	pop	{r3, r4, r5, pc}
    e362:	46c0      	nop			; (mov r8, r8)
    e364:	00006e41 	.word	0x00006e41
    e368:	00006e55 	.word	0x00006e55
    e36c:	00006eed 	.word	0x00006eed

0000e370 <rpl_remove_routes_by_nexthop>:
/*---------------------------------------------------------------------------*/
void
rpl_remove_routes_by_nexthop(uip_ipaddr_t *nexthop, rpl_dag_t *dag)
{
    e370:	b5f0      	push	{r4, r5, r6, r7, lr}
    e372:	b083      	sub	sp, #12
    e374:	9001      	str	r0, [sp, #4]
    e376:	1c0d      	adds	r5, r1, #0
  uip_ds6_route_t *r;

  r = uip_ds6_route_head();
    e378:	4b0f      	ldr	r3, [pc, #60]	; (e3b8 <rpl_remove_routes_by_nexthop+0x48>)
    e37a:	4798      	blx	r3
    e37c:	1e04      	subs	r4, r0, #0

  while(r != NULL) {
    e37e:	d018      	beq.n	e3b2 <rpl_remove_routes_by_nexthop+0x42>
    if(uip_ipaddr_cmp(uip_ds6_route_nexthop(r), nexthop) &&
    e380:	4f0e      	ldr	r7, [pc, #56]	; (e3bc <rpl_remove_routes_by_nexthop+0x4c>)
    e382:	4e0f      	ldr	r6, [pc, #60]	; (e3c0 <rpl_remove_routes_by_nexthop+0x50>)
    e384:	1c20      	adds	r0, r4, #0
    e386:	47b8      	blx	r7
    e388:	9901      	ldr	r1, [sp, #4]
    e38a:	2210      	movs	r2, #16
    e38c:	47b0      	blx	r6
    e38e:	2800      	cmp	r0, #0
    e390:	d109      	bne.n	e3a6 <rpl_remove_routes_by_nexthop+0x36>
    e392:	69e3      	ldr	r3, [r4, #28]
    e394:	42ab      	cmp	r3, r5
    e396:	d106      	bne.n	e3a6 <rpl_remove_routes_by_nexthop+0x36>
       r->state.dag == dag) {
      uip_ds6_route_rm(r);
    e398:	1c20      	adds	r0, r4, #0
    e39a:	4b0a      	ldr	r3, [pc, #40]	; (e3c4 <rpl_remove_routes_by_nexthop+0x54>)
    e39c:	4798      	blx	r3
      r = uip_ds6_route_head();
    e39e:	4b06      	ldr	r3, [pc, #24]	; (e3b8 <rpl_remove_routes_by_nexthop+0x48>)
    e3a0:	4798      	blx	r3
    e3a2:	1c04      	adds	r4, r0, #0
    e3a4:	e003      	b.n	e3ae <rpl_remove_routes_by_nexthop+0x3e>
    } else {
      r = uip_ds6_route_next(r);
    e3a6:	1c20      	adds	r0, r4, #0
    e3a8:	4b07      	ldr	r3, [pc, #28]	; (e3c8 <rpl_remove_routes_by_nexthop+0x58>)
    e3aa:	4798      	blx	r3
    e3ac:	1c04      	adds	r4, r0, #0
{
  uip_ds6_route_t *r;

  r = uip_ds6_route_head();

  while(r != NULL) {
    e3ae:	2c00      	cmp	r4, #0
    e3b0:	d1e8      	bne.n	e384 <rpl_remove_routes_by_nexthop+0x14>
    } else {
      r = uip_ds6_route_next(r);
    }
  }
  ANNOTATE("#L %u 0\n\r", nexthop->u8[sizeof(uip_ipaddr_t) - 1]);
}
    e3b2:	b003      	add	sp, #12
    e3b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    e3b6:	46c0      	nop			; (mov r8, r8)
    e3b8:	00006e41 	.word	0x00006e41
    e3bc:	00006e1d 	.word	0x00006e1d
    e3c0:	000108c9 	.word	0x000108c9
    e3c4:	00006eed 	.word	0x00006eed
    e3c8:	00006e55 	.word	0x00006e55

0000e3cc <rpl_add_route>:
/*---------------------------------------------------------------------------*/
uip_ds6_route_t *
rpl_add_route(rpl_dag_t *dag, uip_ipaddr_t *prefix, int prefix_len,
              uip_ipaddr_t *next_hop)
{
    e3cc:	b5f0      	push	{r4, r5, r6, r7, lr}
    e3ce:	b083      	sub	sp, #12
    e3d0:	1c05      	adds	r5, r0, #0
    e3d2:	1c0f      	adds	r7, r1, #0
    e3d4:	1c16      	adds	r6, r2, #0
    e3d6:	9301      	str	r3, [sp, #4]
  uip_ds6_route_t *rep;

  if((rep = uip_ds6_route_add(prefix, prefix_len, next_hop)) == NULL) {
    e3d8:	b2d1      	uxtb	r1, r2
    e3da:	1c38      	adds	r0, r7, #0
    e3dc:	1c1a      	adds	r2, r3, #0
    e3de:	4b0f      	ldr	r3, [pc, #60]	; (e41c <rpl_add_route+0x50>)
    e3e0:	4798      	blx	r3
    e3e2:	1e04      	subs	r4, r0, #0
    e3e4:	d017      	beq.n	e416 <rpl_add_route+0x4a>
    PRINTF("RPL: No space for more route entries\n\r");
    return NULL;
  }

  rep->state.dag = dag;
    e3e6:	61c5      	str	r5, [r0, #28]
  rep->state.lifetime = RPL_LIFETIME(dag->instance, dag->instance->default_lifetime);
    e3e8:	6a2a      	ldr	r2, [r5, #32]
    e3ea:	2393      	movs	r3, #147	; 0x93
    e3ec:	5cd1      	ldrb	r1, [r2, r3]
    e3ee:	3309      	adds	r3, #9
    e3f0:	5ad3      	ldrh	r3, [r2, r3]
    e3f2:	434b      	muls	r3, r1
    e3f4:	6183      	str	r3, [r0, #24]
  rep->state.learned_from = RPL_ROUTE_FROM_INTERNAL;
    e3f6:	2200      	movs	r2, #0
    e3f8:	2320      	movs	r3, #32
    e3fa:	54c2      	strb	r2, [r0, r3]

  printf("\r\nRPL: Added a route to ");
    e3fc:	4808      	ldr	r0, [pc, #32]	; (e420 <rpl_add_route+0x54>)
    e3fe:	4d09      	ldr	r5, [pc, #36]	; (e424 <rpl_add_route+0x58>)
    e400:	47a8      	blx	r5
  uip_debug_ipaddr_print(prefix);
    e402:	1c38      	adds	r0, r7, #0
    e404:	4f08      	ldr	r7, [pc, #32]	; (e428 <rpl_add_route+0x5c>)
    e406:	47b8      	blx	r7
  printf("/%d via ", prefix_len);
    e408:	4808      	ldr	r0, [pc, #32]	; (e42c <rpl_add_route+0x60>)
    e40a:	1c31      	adds	r1, r6, #0
    e40c:	47a8      	blx	r5
  uip_debug_ipaddr_print(next_hop);
    e40e:	9801      	ldr	r0, [sp, #4]
    e410:	47b8      	blx	r7
  printf("\n\r");
    e412:	4807      	ldr	r0, [pc, #28]	; (e430 <rpl_add_route+0x64>)
    e414:	47a8      	blx	r5

  return rep;
}
    e416:	1c20      	adds	r0, r4, #0
    e418:	b003      	add	sp, #12
    e41a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    e41c:	00007001 	.word	0x00007001
    e420:	00012c44 	.word	0x00012c44
    e424:	00010931 	.word	0x00010931
    e428:	0000aaf9 	.word	0x0000aaf9
    e42c:	00012c60 	.word	0x00012c60
    e430:	00012df4 	.word	0x00012df4

0000e434 <rpl_link_neighbor_callback>:
/*---------------------------------------------------------------------------*/
void
rpl_link_neighbor_callback(const linkaddr_t *addr, int status, int numtx)
{
    e434:	b570      	push	{r4, r5, r6, lr}
    e436:	b084      	sub	sp, #16
    e438:	1c06      	adds	r6, r0, #0
    e43a:	1c0d      	adds	r5, r1, #0
    e43c:	1c14      	adds	r4, r2, #0
  uip_ipaddr_t ipaddr;
  rpl_parent_t *parent;
  rpl_instance_t *instance;
  rpl_instance_t *end;

  uip_ip6addr(&ipaddr, 0xfe80, 0, 0, 0, 0, 0, 0, 0);
    e43e:	4b13      	ldr	r3, [pc, #76]	; (e48c <rpl_link_neighbor_callback+0x58>)
    e440:	466a      	mov	r2, sp
    e442:	8013      	strh	r3, [r2, #0]
    e444:	2300      	movs	r3, #0
    e446:	8053      	strh	r3, [r2, #2]
    e448:	8093      	strh	r3, [r2, #4]
    e44a:	80d3      	strh	r3, [r2, #6]
    e44c:	8113      	strh	r3, [r2, #8]
    e44e:	8153      	strh	r3, [r2, #10]
    e450:	8193      	strh	r3, [r2, #12]
    e452:	81d3      	strh	r3, [r2, #14]
  uip_ds6_set_addr_iid(&ipaddr, (uip_lladdr_t *)addr);
    e454:	4668      	mov	r0, sp
    e456:	1c31      	adds	r1, r6, #0
    e458:	4b0d      	ldr	r3, [pc, #52]	; (e490 <rpl_link_neighbor_callback+0x5c>)
    e45a:	4798      	blx	r3

  for(instance = &instance_table[0], end = instance + RPL_MAX_INSTANCES; instance < end; ++instance) {
    if(instance->used == 1 ) {
    e45c:	238d      	movs	r3, #141	; 0x8d
    e45e:	4a0d      	ldr	r2, [pc, #52]	; (e494 <rpl_link_neighbor_callback+0x60>)
    e460:	5cd3      	ldrb	r3, [r2, r3]
    e462:	2b01      	cmp	r3, #1
    e464:	d10f      	bne.n	e486 <rpl_link_neighbor_callback+0x52>
      parent = rpl_find_parent_any_dag(instance, &ipaddr);
    e466:	1c10      	adds	r0, r2, #0
    e468:	4669      	mov	r1, sp
    e46a:	4b0b      	ldr	r3, [pc, #44]	; (e498 <rpl_link_neighbor_callback+0x64>)
    e46c:	4798      	blx	r3
      if(parent != NULL) {
    e46e:	2800      	cmp	r0, #0
    e470:	d009      	beq.n	e486 <rpl_link_neighbor_callback+0x52>
        /* Trigger DAG rank recalculation. */
        PRINTF("RPL: rpl_link_neighbor_callback triggering update\n\r");
        parent->updated = 1;
    e472:	2301      	movs	r3, #1
    e474:	7343      	strb	r3, [r0, #13]
        if(instance->of->neighbor_link_callback != NULL) {
    e476:	4b07      	ldr	r3, [pc, #28]	; (e494 <rpl_link_neighbor_callback+0x60>)
    e478:	689b      	ldr	r3, [r3, #8]
    e47a:	685b      	ldr	r3, [r3, #4]
    e47c:	2b00      	cmp	r3, #0
    e47e:	d002      	beq.n	e486 <rpl_link_neighbor_callback+0x52>
          instance->of->neighbor_link_callback(parent, status, numtx);
    e480:	1c29      	adds	r1, r5, #0
    e482:	1c22      	adds	r2, r4, #0
    e484:	4798      	blx	r3
        }
      }
    }
  }
}
    e486:	b004      	add	sp, #16
    e488:	bd70      	pop	{r4, r5, r6, pc}
    e48a:	46c0      	nop			; (mov r8, r8)
    e48c:	ffff80fe 	.word	0xffff80fe
    e490:	00007695 	.word	0x00007695
    e494:	20003288 	.word	0x20003288
    e498:	0000c4f9 	.word	0x0000c4f9

0000e49c <rpl_ipv6_neighbor_callback>:
/*---------------------------------------------------------------------------*/
void
rpl_ipv6_neighbor_callback(uip_ds6_nbr_t *nbr)
{
    e49c:	b508      	push	{r3, lr}

  PRINTF("RPL: Removing neighbor ");
  PRINT6ADDR(&nbr->ipaddr);
  PRINTF("\n\r");
  for(instance = &instance_table[0], end = instance + RPL_MAX_INSTANCES; instance < end; ++instance) {
    if(instance->used == 1 ) {
    e49e:	238d      	movs	r3, #141	; 0x8d
    e4a0:	4a07      	ldr	r2, [pc, #28]	; (e4c0 <rpl_ipv6_neighbor_callback+0x24>)
    e4a2:	5cd3      	ldrb	r3, [r2, r3]
    e4a4:	2b01      	cmp	r3, #1
    e4a6:	d10a      	bne.n	e4be <rpl_ipv6_neighbor_callback+0x22>
    e4a8:	1c01      	adds	r1, r0, #0
      p = rpl_find_parent_any_dag(instance, &nbr->ipaddr);
    e4aa:	1c10      	adds	r0, r2, #0
    e4ac:	4b05      	ldr	r3, [pc, #20]	; (e4c4 <rpl_ipv6_neighbor_callback+0x28>)
    e4ae:	4798      	blx	r3
      if(p != NULL) {
    e4b0:	2800      	cmp	r0, #0
    e4b2:	d004      	beq.n	e4be <rpl_ipv6_neighbor_callback+0x22>
        p->rank = INFINITE_RANK;
    e4b4:	2301      	movs	r3, #1
    e4b6:	425b      	negs	r3, r3
    e4b8:	8103      	strh	r3, [r0, #8]
        /* Trigger DAG rank recalculation. */
        PRINTF("RPL: rpl_ipv6_neighbor_callback infinite rank\n\r");
        p->updated = 1;
    e4ba:	3302      	adds	r3, #2
    e4bc:	7343      	strb	r3, [r0, #13]
      }
    }
  }
}
    e4be:	bd08      	pop	{r3, pc}
    e4c0:	20003288 	.word	0x20003288
    e4c4:	0000c4f9 	.word	0x0000c4f9

0000e4c8 <rpl_init>:
/*---------------------------------------------------------------------------*/
void
rpl_init(void)
{
    e4c8:	b510      	push	{r4, lr}
    e4ca:	b084      	sub	sp, #16
  uip_ipaddr_t rplmaddr;
  PRINTF("RPL started\n\r");
  default_instance = NULL;
    e4cc:	2400      	movs	r4, #0
    e4ce:	4b0e      	ldr	r3, [pc, #56]	; (e508 <rpl_init+0x40>)
    e4d0:	601c      	str	r4, [r3, #0]

  rpl_dag_init();
    e4d2:	4b0e      	ldr	r3, [pc, #56]	; (e50c <rpl_init+0x44>)
    e4d4:	4798      	blx	r3
  rpl_reset_periodic_timer();
    e4d6:	4b0e      	ldr	r3, [pc, #56]	; (e510 <rpl_init+0x48>)
    e4d8:	4798      	blx	r3
  rpl_icmp6_register_handlers();
    e4da:	4b0e      	ldr	r3, [pc, #56]	; (e514 <rpl_init+0x4c>)
    e4dc:	4798      	blx	r3

  /* add rpl multicast address */
  uip_create_linklocal_rplnodes_mcast(&rplmaddr);
    e4de:	4b0e      	ldr	r3, [pc, #56]	; (e518 <rpl_init+0x50>)
    e4e0:	466a      	mov	r2, sp
    e4e2:	8013      	strh	r3, [r2, #0]
    e4e4:	8054      	strh	r4, [r2, #2]
    e4e6:	8094      	strh	r4, [r2, #4]
    e4e8:	80d4      	strh	r4, [r2, #6]
    e4ea:	8114      	strh	r4, [r2, #8]
    e4ec:	8154      	strh	r4, [r2, #10]
    e4ee:	8194      	strh	r4, [r2, #12]
    e4f0:	23d0      	movs	r3, #208	; 0xd0
    e4f2:	015b      	lsls	r3, r3, #5
    e4f4:	81d3      	strh	r3, [r2, #14]
  uip_ds6_maddr_add(&rplmaddr);
    e4f6:	4668      	mov	r0, sp
    e4f8:	4b08      	ldr	r3, [pc, #32]	; (e51c <rpl_init+0x54>)
    e4fa:	4798      	blx	r3

#if RPL_CONF_STATS
  memset(&rpl_stats, 0, sizeof(rpl_stats));
#endif

  RPL_OF.reset(NULL);
    e4fc:	4b08      	ldr	r3, [pc, #32]	; (e520 <rpl_init+0x58>)
    e4fe:	681b      	ldr	r3, [r3, #0]
    e500:	2000      	movs	r0, #0
    e502:	4798      	blx	r3
}
    e504:	b004      	add	sp, #16
    e506:	bd10      	pop	{r4, pc}
    e508:	20003284 	.word	0x20003284
    e50c:	0000c355 	.word	0x0000c355
    e510:	0000e22d 	.word	0x0000e22d
    e514:	0000dea5 	.word	0x0000dea5
    e518:	000002ff 	.word	0x000002ff
    e51c:	00007505 	.word	0x00007505
    e520:	20000168 	.word	0x20000168

0000e524 <autostart_start>:
#endif

/*---------------------------------------------------------------------------*/
void
autostart_start(struct process * const processes[])
{
    e524:	b538      	push	{r3, r4, r5, lr}
    e526:	1c04      	adds	r4, r0, #0
  int i;
  
  for(i = 0; processes[i] != NULL; ++i) {
    e528:	6800      	ldr	r0, [r0, #0]
    e52a:	2800      	cmp	r0, #0
    e52c:	d008      	beq.n	e540 <autostart_start+0x1c>
    e52e:	3404      	adds	r4, #4
    process_start(processes[i], NULL);
    e530:	4d04      	ldr	r5, [pc, #16]	; (e544 <autostart_start+0x20>)
    e532:	2100      	movs	r1, #0
    e534:	47a8      	blx	r5
    e536:	3404      	adds	r4, #4
    e538:	1f23      	subs	r3, r4, #4
void
autostart_start(struct process * const processes[])
{
  int i;
  
  for(i = 0; processes[i] != NULL; ++i) {
    e53a:	6818      	ldr	r0, [r3, #0]
    e53c:	2800      	cmp	r0, #0
    e53e:	d1f8      	bne.n	e532 <autostart_start+0xe>
    process_start(processes[i], NULL);
    PRINTF("autostart_start: starting process '%s'\n\r", processes[i]->name);
  }
}
    e540:	bd38      	pop	{r3, r4, r5, pc}
    e542:	46c0      	nop			; (mov r8, r8)
    e544:	0000ec69 	.word	0x0000ec69

0000e548 <process_thread_ctimer_process>:
#endif

/*---------------------------------------------------------------------------*/
PROCESS(ctimer_process, "Ctimer process");
PROCESS_THREAD(ctimer_process, ev, data)
{
    e548:	b570      	push	{r4, r5, r6, lr}
    e54a:	1c06      	adds	r6, r0, #0
    e54c:	1c15      	adds	r5, r2, #0
  struct ctimer *c;
  PROCESS_BEGIN();
    e54e:	8803      	ldrh	r3, [r0, #0]
    e550:	2b00      	cmp	r3, #0
    e552:	d002      	beq.n	e55a <process_thread_ctimer_process+0x12>
    e554:	2b4a      	cmp	r3, #74	; 0x4a
    e556:	d013      	beq.n	e580 <process_thread_ctimer_process+0x38>
    e558:	e035      	b.n	e5c6 <process_thread_ctimer_process+0x7e>

  for(c = list_head(ctimer_list); c != NULL; c = c->next) {
    e55a:	481d      	ldr	r0, [pc, #116]	; (e5d0 <process_thread_ctimer_process+0x88>)
    e55c:	4b1d      	ldr	r3, [pc, #116]	; (e5d4 <process_thread_ctimer_process+0x8c>)
    e55e:	4798      	blx	r3
    e560:	1e04      	subs	r4, r0, #0
    e562:	d006      	beq.n	e572 <process_thread_ctimer_process+0x2a>
    etimer_set(&c->etimer, c->etimer.timer.interval);
    e564:	4d1c      	ldr	r5, [pc, #112]	; (e5d8 <process_thread_ctimer_process+0x90>)
    e566:	1d20      	adds	r0, r4, #4
    e568:	68a1      	ldr	r1, [r4, #8]
    e56a:	47a8      	blx	r5
PROCESS_THREAD(ctimer_process, ev, data)
{
  struct ctimer *c;
  PROCESS_BEGIN();

  for(c = list_head(ctimer_list); c != NULL; c = c->next) {
    e56c:	6824      	ldr	r4, [r4, #0]
    e56e:	2c00      	cmp	r4, #0
    e570:	d1f9      	bne.n	e566 <process_thread_ctimer_process+0x1e>
    etimer_set(&c->etimer, c->etimer.timer.interval);
  }
  initialized = 1;
    e572:	2201      	movs	r2, #1
    e574:	4b19      	ldr	r3, [pc, #100]	; (e5dc <process_thread_ctimer_process+0x94>)
    e576:	701a      	strb	r2, [r3, #0]

  while(1) {
    PROCESS_YIELD_UNTIL(ev == PROCESS_EVENT_TIMER);
    e578:	234a      	movs	r3, #74	; 0x4a
    e57a:	8033      	strh	r3, [r6, #0]
    e57c:	2001      	movs	r0, #1
    e57e:	e025      	b.n	e5cc <process_thread_ctimer_process+0x84>
    e580:	2001      	movs	r0, #1
    e582:	2988      	cmp	r1, #136	; 0x88
    e584:	d122      	bne.n	e5cc <process_thread_ctimer_process+0x84>
    for(c = list_head(ctimer_list); c != NULL; c = c->next) {
    e586:	4812      	ldr	r0, [pc, #72]	; (e5d0 <process_thread_ctimer_process+0x88>)
    e588:	4b12      	ldr	r3, [pc, #72]	; (e5d4 <process_thread_ctimer_process+0x8c>)
    e58a:	4798      	blx	r3
    e58c:	1e04      	subs	r4, r0, #0
    e58e:	d0f3      	beq.n	e578 <process_thread_ctimer_process+0x30>
      if(&c->etimer == data) {
    e590:	1d03      	adds	r3, r0, #4
    e592:	429d      	cmp	r5, r3
    e594:	d113      	bne.n	e5be <process_thread_ctimer_process+0x76>
    e596:	e002      	b.n	e59e <process_thread_ctimer_process+0x56>
    e598:	1d23      	adds	r3, r4, #4
    e59a:	429d      	cmp	r5, r3
    e59c:	d10f      	bne.n	e5be <process_thread_ctimer_process+0x76>
	list_remove(ctimer_list, c);
    e59e:	480c      	ldr	r0, [pc, #48]	; (e5d0 <process_thread_ctimer_process+0x88>)
    e5a0:	1c21      	adds	r1, r4, #0
    e5a2:	4b0f      	ldr	r3, [pc, #60]	; (e5e0 <process_thread_ctimer_process+0x98>)
    e5a4:	4798      	blx	r3
	PROCESS_CONTEXT_BEGIN(c->p);
    e5a6:	4b0f      	ldr	r3, [pc, #60]	; (e5e4 <process_thread_ctimer_process+0x9c>)
    e5a8:	681d      	ldr	r5, [r3, #0]
    e5aa:	6962      	ldr	r2, [r4, #20]
    e5ac:	601a      	str	r2, [r3, #0]
	if(c->f != NULL) {
    e5ae:	69a3      	ldr	r3, [r4, #24]
    e5b0:	2b00      	cmp	r3, #0
    e5b2:	d001      	beq.n	e5b8 <process_thread_ctimer_process+0x70>
	  c->f(c->ptr);
    e5b4:	69e0      	ldr	r0, [r4, #28]
    e5b6:	4798      	blx	r3
	}
	PROCESS_CONTEXT_END(c->p);
    e5b8:	4b0a      	ldr	r3, [pc, #40]	; (e5e4 <process_thread_ctimer_process+0x9c>)
    e5ba:	601d      	str	r5, [r3, #0]
	break;
    e5bc:	e7dc      	b.n	e578 <process_thread_ctimer_process+0x30>
  }
  initialized = 1;

  while(1) {
    PROCESS_YIELD_UNTIL(ev == PROCESS_EVENT_TIMER);
    for(c = list_head(ctimer_list); c != NULL; c = c->next) {
    e5be:	6824      	ldr	r4, [r4, #0]
    e5c0:	2c00      	cmp	r4, #0
    e5c2:	d1e9      	bne.n	e598 <process_thread_ctimer_process+0x50>
    e5c4:	e7d8      	b.n	e578 <process_thread_ctimer_process+0x30>
	PROCESS_CONTEXT_END(c->p);
	break;
      }
    }
  }
  PROCESS_END();
    e5c6:	2300      	movs	r3, #0
    e5c8:	8003      	strh	r3, [r0, #0]
    e5ca:	2003      	movs	r0, #3
}
    e5cc:	bd70      	pop	{r4, r5, r6, pc}
    e5ce:	46c0      	nop			; (mov r8, r8)
    e5d0:	20001d0c 	.word	0x20001d0c
    e5d4:	00005709 	.word	0x00005709
    e5d8:	0000e90d 	.word	0x0000e90d
    e5dc:	20001d10 	.word	0x20001d10
    e5e0:	00005725 	.word	0x00005725
    e5e4:	20001d2c 	.word	0x20001d2c

0000e5e8 <ctimer_init>:
/*---------------------------------------------------------------------------*/
void
ctimer_init(void)
{
    e5e8:	b508      	push	{r3, lr}
  initialized = 0;
    e5ea:	2200      	movs	r2, #0
    e5ec:	4b04      	ldr	r3, [pc, #16]	; (e600 <ctimer_init+0x18>)
    e5ee:	701a      	strb	r2, [r3, #0]
  list_init(ctimer_list);
    e5f0:	4804      	ldr	r0, [pc, #16]	; (e604 <ctimer_init+0x1c>)
    e5f2:	4b05      	ldr	r3, [pc, #20]	; (e608 <ctimer_init+0x20>)
    e5f4:	4798      	blx	r3
  process_start(&ctimer_process, NULL);
    e5f6:	4805      	ldr	r0, [pc, #20]	; (e60c <ctimer_init+0x24>)
    e5f8:	2100      	movs	r1, #0
    e5fa:	4b05      	ldr	r3, [pc, #20]	; (e610 <ctimer_init+0x28>)
    e5fc:	4798      	blx	r3
}
    e5fe:	bd08      	pop	{r3, pc}
    e600:	20001d10 	.word	0x20001d10
    e604:	20001d0c 	.word	0x20001d0c
    e608:	00005701 	.word	0x00005701
    e60c:	20000184 	.word	0x20000184
    e610:	0000ec69 	.word	0x0000ec69

0000e614 <ctimer_set>:
/*---------------------------------------------------------------------------*/
void
ctimer_set(struct ctimer *c, clock_time_t t,
	   void (*f)(void *), void *ptr)
{
    e614:	b570      	push	{r4, r5, r6, lr}
    e616:	1c04      	adds	r4, r0, #0
  PRINTF("ctimer_set %p %u\n\r", c, (unsigned)t);
  c->p = PROCESS_CURRENT();
    e618:	480d      	ldr	r0, [pc, #52]	; (e650 <ctimer_set+0x3c>)
    e61a:	6805      	ldr	r5, [r0, #0]
    e61c:	6165      	str	r5, [r4, #20]
  c->f = f;
    e61e:	61a2      	str	r2, [r4, #24]
  c->ptr = ptr;
    e620:	61e3      	str	r3, [r4, #28]
  if(initialized) {
    e622:	4b0c      	ldr	r3, [pc, #48]	; (e654 <ctimer_set+0x40>)
    e624:	781b      	ldrb	r3, [r3, #0]
    e626:	2b00      	cmp	r3, #0
    e628:	d007      	beq.n	e63a <ctimer_set+0x26>
    PROCESS_CONTEXT_BEGIN(&ctimer_process);
    e62a:	1c06      	adds	r6, r0, #0
    e62c:	4b0a      	ldr	r3, [pc, #40]	; (e658 <ctimer_set+0x44>)
    e62e:	6003      	str	r3, [r0, #0]
    etimer_set(&c->etimer, t);
    e630:	1d20      	adds	r0, r4, #4
    e632:	4b0a      	ldr	r3, [pc, #40]	; (e65c <ctimer_set+0x48>)
    e634:	4798      	blx	r3
    PROCESS_CONTEXT_END(&ctimer_process);
    e636:	6035      	str	r5, [r6, #0]
    e638:	e000      	b.n	e63c <ctimer_set+0x28>
  } else {
    c->etimer.timer.interval = t;
    e63a:	60a1      	str	r1, [r4, #8]
  }

  list_remove(ctimer_list, c);
    e63c:	4d08      	ldr	r5, [pc, #32]	; (e660 <ctimer_set+0x4c>)
    e63e:	1c28      	adds	r0, r5, #0
    e640:	1c21      	adds	r1, r4, #0
    e642:	4b08      	ldr	r3, [pc, #32]	; (e664 <ctimer_set+0x50>)
    e644:	4798      	blx	r3
  list_add(ctimer_list, c);
    e646:	1c28      	adds	r0, r5, #0
    e648:	1c21      	adds	r1, r4, #0
    e64a:	4b07      	ldr	r3, [pc, #28]	; (e668 <ctimer_set+0x54>)
    e64c:	4798      	blx	r3
}
    e64e:	bd70      	pop	{r4, r5, r6, pc}
    e650:	20001d2c 	.word	0x20001d2c
    e654:	20001d10 	.word	0x20001d10
    e658:	20000184 	.word	0x20000184
    e65c:	0000e90d 	.word	0x0000e90d
    e660:	20001d0c 	.word	0x20001d0c
    e664:	00005725 	.word	0x00005725
    e668:	00005759 	.word	0x00005759

0000e66c <ctimer_reset>:
/*---------------------------------------------------------------------------*/
void
ctimer_reset(struct ctimer *c)
{
    e66c:	b570      	push	{r4, r5, r6, lr}
    e66e:	1c04      	adds	r4, r0, #0
  if(initialized) {
    e670:	4b0a      	ldr	r3, [pc, #40]	; (e69c <ctimer_reset+0x30>)
    e672:	781b      	ldrb	r3, [r3, #0]
    e674:	2b00      	cmp	r3, #0
    e676:	d007      	beq.n	e688 <ctimer_reset+0x1c>
    PROCESS_CONTEXT_BEGIN(&ctimer_process);
    e678:	4d09      	ldr	r5, [pc, #36]	; (e6a0 <ctimer_reset+0x34>)
    e67a:	682e      	ldr	r6, [r5, #0]
    e67c:	4b09      	ldr	r3, [pc, #36]	; (e6a4 <ctimer_reset+0x38>)
    e67e:	602b      	str	r3, [r5, #0]
    etimer_reset(&c->etimer);
    e680:	3004      	adds	r0, #4
    e682:	4b09      	ldr	r3, [pc, #36]	; (e6a8 <ctimer_reset+0x3c>)
    e684:	4798      	blx	r3
    PROCESS_CONTEXT_END(&ctimer_process);
    e686:	602e      	str	r6, [r5, #0]
  }

  list_remove(ctimer_list, c);
    e688:	4d08      	ldr	r5, [pc, #32]	; (e6ac <ctimer_reset+0x40>)
    e68a:	1c28      	adds	r0, r5, #0
    e68c:	1c21      	adds	r1, r4, #0
    e68e:	4b08      	ldr	r3, [pc, #32]	; (e6b0 <ctimer_reset+0x44>)
    e690:	4798      	blx	r3
  list_add(ctimer_list, c);
    e692:	1c28      	adds	r0, r5, #0
    e694:	1c21      	adds	r1, r4, #0
    e696:	4b07      	ldr	r3, [pc, #28]	; (e6b4 <ctimer_reset+0x48>)
    e698:	4798      	blx	r3
}
    e69a:	bd70      	pop	{r4, r5, r6, pc}
    e69c:	20001d10 	.word	0x20001d10
    e6a0:	20001d2c 	.word	0x20001d2c
    e6a4:	20000184 	.word	0x20000184
    e6a8:	0000e925 	.word	0x0000e925
    e6ac:	20001d0c 	.word	0x20001d0c
    e6b0:	00005725 	.word	0x00005725
    e6b4:	00005759 	.word	0x00005759

0000e6b8 <ctimer_restart>:
/*---------------------------------------------------------------------------*/
void
ctimer_restart(struct ctimer *c)
{
    e6b8:	b570      	push	{r4, r5, r6, lr}
    e6ba:	1c04      	adds	r4, r0, #0
  if(initialized) {
    e6bc:	4b0a      	ldr	r3, [pc, #40]	; (e6e8 <ctimer_restart+0x30>)
    e6be:	781b      	ldrb	r3, [r3, #0]
    e6c0:	2b00      	cmp	r3, #0
    e6c2:	d007      	beq.n	e6d4 <ctimer_restart+0x1c>
    PROCESS_CONTEXT_BEGIN(&ctimer_process);
    e6c4:	4d09      	ldr	r5, [pc, #36]	; (e6ec <ctimer_restart+0x34>)
    e6c6:	682e      	ldr	r6, [r5, #0]
    e6c8:	4b09      	ldr	r3, [pc, #36]	; (e6f0 <ctimer_restart+0x38>)
    e6ca:	602b      	str	r3, [r5, #0]
    etimer_restart(&c->etimer);
    e6cc:	3004      	adds	r0, #4
    e6ce:	4b09      	ldr	r3, [pc, #36]	; (e6f4 <ctimer_restart+0x3c>)
    e6d0:	4798      	blx	r3
    PROCESS_CONTEXT_END(&ctimer_process);
    e6d2:	602e      	str	r6, [r5, #0]
  }

  list_remove(ctimer_list, c);
    e6d4:	4d08      	ldr	r5, [pc, #32]	; (e6f8 <ctimer_restart+0x40>)
    e6d6:	1c28      	adds	r0, r5, #0
    e6d8:	1c21      	adds	r1, r4, #0
    e6da:	4b08      	ldr	r3, [pc, #32]	; (e6fc <ctimer_restart+0x44>)
    e6dc:	4798      	blx	r3
  list_add(ctimer_list, c);
    e6de:	1c28      	adds	r0, r5, #0
    e6e0:	1c21      	adds	r1, r4, #0
    e6e2:	4b07      	ldr	r3, [pc, #28]	; (e700 <ctimer_restart+0x48>)
    e6e4:	4798      	blx	r3
}
    e6e6:	bd70      	pop	{r4, r5, r6, pc}
    e6e8:	20001d10 	.word	0x20001d10
    e6ec:	20001d2c 	.word	0x20001d2c
    e6f0:	20000184 	.word	0x20000184
    e6f4:	0000e93d 	.word	0x0000e93d
    e6f8:	20001d0c 	.word	0x20001d0c
    e6fc:	00005725 	.word	0x00005725
    e700:	00005759 	.word	0x00005759

0000e704 <ctimer_stop>:
/*---------------------------------------------------------------------------*/
void
ctimer_stop(struct ctimer *c)
{
    e704:	b510      	push	{r4, lr}
    e706:	1c04      	adds	r4, r0, #0
  if(initialized) {
    e708:	4b07      	ldr	r3, [pc, #28]	; (e728 <ctimer_stop+0x24>)
    e70a:	781b      	ldrb	r3, [r3, #0]
    e70c:	2b00      	cmp	r3, #0
    e70e:	d003      	beq.n	e718 <ctimer_stop+0x14>
    etimer_stop(&c->etimer);
    e710:	3004      	adds	r0, #4
    e712:	4b06      	ldr	r3, [pc, #24]	; (e72c <ctimer_stop+0x28>)
    e714:	4798      	blx	r3
    e716:	e002      	b.n	e71e <ctimer_stop+0x1a>
  } else {
    c->etimer.next = NULL;
    e718:	2300      	movs	r3, #0
    e71a:	60c3      	str	r3, [r0, #12]
    c->etimer.p = PROCESS_NONE;
    e71c:	6103      	str	r3, [r0, #16]
  }
  list_remove(ctimer_list, c);
    e71e:	4804      	ldr	r0, [pc, #16]	; (e730 <ctimer_stop+0x2c>)
    e720:	1c21      	adds	r1, r4, #0
    e722:	4b04      	ldr	r3, [pc, #16]	; (e734 <ctimer_stop+0x30>)
    e724:	4798      	blx	r3
}
    e726:	bd10      	pop	{r4, pc}
    e728:	20001d10 	.word	0x20001d10
    e72c:	0000e975 	.word	0x0000e975
    e730:	20001d0c 	.word	0x20001d0c
    e734:	00005725 	.word	0x00005725

0000e738 <energest_init>:
unsigned char energest_current_mode[ENERGEST_TYPE_MAX];

/*---------------------------------------------------------------------------*/
void
energest_init(void)
{
    e738:	b530      	push	{r4, r5, lr}
    e73a:	4907      	ldr	r1, [pc, #28]	; (e758 <energest_init+0x20>)
    e73c:	2300      	movs	r3, #0
  int i;
  for(i = 0; i < ENERGEST_TYPE_MAX; ++i) {
    energest_total_time[i].current = energest_current_time[i] = 0;
    e73e:	4d07      	ldr	r5, [pc, #28]	; (e75c <energest_init+0x24>)
    e740:	2200      	movs	r2, #0
    e742:	4c07      	ldr	r4, [pc, #28]	; (e760 <energest_init+0x28>)
    e744:	1958      	adds	r0, r3, r5
    e746:	6002      	str	r2, [r0, #0]
    e748:	1918      	adds	r0, r3, r4
    e74a:	6002      	str	r2, [r0, #0]
    energest_current_mode[i] = 0;
    e74c:	700a      	strb	r2, [r1, #0]
    e74e:	3304      	adds	r3, #4
    e750:	3101      	adds	r1, #1
/*---------------------------------------------------------------------------*/
void
energest_init(void)
{
  int i;
  for(i = 0; i < ENERGEST_TYPE_MAX; ++i) {
    e752:	2b30      	cmp	r3, #48	; 0x30
    e754:	d1f6      	bne.n	e744 <energest_init+0xc>
#ifdef ENERGEST_CONF_LEVELDEVICE_LEVELS
  for(i = 0; i < ENERGEST_CONF_LEVELDEVICE_LEVELS; ++i) {
    energest_leveldevice_current_leveltime[i].current = 0;
  }
#endif
}
    e756:	bd30      	pop	{r4, r5, pc}
    e758:	200033c0 	.word	0x200033c0
    e75c:	200033cc 	.word	0x200033cc
    e760:	2000338c 	.word	0x2000338c

0000e764 <update_time>:

PROCESS(etimer_process, "Event timer");
/*---------------------------------------------------------------------------*/
static void
update_time(void)
{
    e764:	b510      	push	{r4, lr}
  clock_time_t tdist;
  clock_time_t now;
  struct etimer *t;

  if (timerlist == NULL) {
    e766:	4b11      	ldr	r3, [pc, #68]	; (e7ac <update_time+0x48>)
    e768:	681b      	ldr	r3, [r3, #0]
    e76a:	2b00      	cmp	r3, #0
    e76c:	d103      	bne.n	e776 <update_time+0x12>
    next_expiration = 0;
    e76e:	2200      	movs	r2, #0
    e770:	4b0f      	ldr	r3, [pc, #60]	; (e7b0 <update_time+0x4c>)
    e772:	601a      	str	r2, [r3, #0]
    e774:	e019      	b.n	e7aa <update_time+0x46>
  } else {
    now = clock_time();
    e776:	4b0f      	ldr	r3, [pc, #60]	; (e7b4 <update_time+0x50>)
    e778:	4798      	blx	r3
    t = timerlist;
    e77a:	4b0c      	ldr	r3, [pc, #48]	; (e7ac <update_time+0x48>)
    e77c:	681b      	ldr	r3, [r3, #0]
    /* Must calculate distance to next time into account due to wraps */
    tdist = t->timer.start + t->timer.interval - now;
    e77e:	685a      	ldr	r2, [r3, #4]
    e780:	681c      	ldr	r4, [r3, #0]
    e782:	46a4      	mov	ip, r4
    e784:	4462      	add	r2, ip
    e786:	1a11      	subs	r1, r2, r0
    for(t = t->next; t != NULL; t = t->next) {
    e788:	689a      	ldr	r2, [r3, #8]
    e78a:	2a00      	cmp	r2, #0
    e78c:	d00a      	beq.n	e7a4 <update_time+0x40>
      if(t->timer.start + t->timer.interval - now < tdist) {
    e78e:	6853      	ldr	r3, [r2, #4]
    e790:	6814      	ldr	r4, [r2, #0]
    e792:	46a4      	mov	ip, r4
    e794:	4463      	add	r3, ip
    e796:	1a1b      	subs	r3, r3, r0
    e798:	4299      	cmp	r1, r3
    e79a:	d900      	bls.n	e79e <update_time+0x3a>
    e79c:	1c19      	adds	r1, r3, #0
  } else {
    now = clock_time();
    t = timerlist;
    /* Must calculate distance to next time into account due to wraps */
    tdist = t->timer.start + t->timer.interval - now;
    for(t = t->next; t != NULL; t = t->next) {
    e79e:	6892      	ldr	r2, [r2, #8]
    e7a0:	2a00      	cmp	r2, #0
    e7a2:	d1f4      	bne.n	e78e <update_time+0x2a>
      if(t->timer.start + t->timer.interval - now < tdist) {
	tdist = t->timer.start + t->timer.interval - now;
      }
    }
    next_expiration = now + tdist;
    e7a4:	1808      	adds	r0, r1, r0
    e7a6:	4b02      	ldr	r3, [pc, #8]	; (e7b0 <update_time+0x4c>)
    e7a8:	6018      	str	r0, [r3, #0]
  }
}
    e7aa:	bd10      	pop	{r4, pc}
    e7ac:	20001d14 	.word	0x20001d14
    e7b0:	20001d18 	.word	0x20001d18
    e7b4:	0000f701 	.word	0x0000f701

0000e7b8 <etimer_request_poll>:
  PROCESS_END();
}
/*---------------------------------------------------------------------------*/
void
etimer_request_poll(void)
{
    e7b8:	b508      	push	{r3, lr}
  process_poll(&etimer_process);
    e7ba:	4802      	ldr	r0, [pc, #8]	; (e7c4 <etimer_request_poll+0xc>)
    e7bc:	4b02      	ldr	r3, [pc, #8]	; (e7c8 <etimer_request_poll+0x10>)
    e7be:	4798      	blx	r3
}
    e7c0:	bd08      	pop	{r3, pc}
    e7c2:	46c0      	nop			; (mov r8, r8)
    e7c4:	20000194 	.word	0x20000194
    e7c8:	0000eca9 	.word	0x0000eca9

0000e7cc <process_thread_etimer_process>:
    next_expiration = now + tdist;
  }
}
/*---------------------------------------------------------------------------*/
PROCESS_THREAD(etimer_process, ev, data)
{
    e7cc:	b5f0      	push	{r4, r5, r6, r7, lr}
    e7ce:	4657      	mov	r7, sl
    e7d0:	b480      	push	{r7}
    e7d2:	b082      	sub	sp, #8
    e7d4:	1c07      	adds	r7, r0, #0
  struct etimer *t, *u;
	
  PROCESS_BEGIN();
    e7d6:	8803      	ldrh	r3, [r0, #0]
    e7d8:	2b00      	cmp	r3, #0
    e7da:	d002      	beq.n	e7e2 <process_thread_etimer_process+0x16>
    e7dc:	2b59      	cmp	r3, #89	; 0x59
    e7de:	d007      	beq.n	e7f0 <process_thread_etimer_process+0x24>
    e7e0:	e056      	b.n	e890 <process_thread_etimer_process+0xc4>

  timerlist = NULL;
    e7e2:	2200      	movs	r2, #0
    e7e4:	4b2e      	ldr	r3, [pc, #184]	; (e8a0 <process_thread_etimer_process+0xd4>)
    e7e6:	601a      	str	r2, [r3, #0]
  
  while(1) {
    PROCESS_YIELD();
    e7e8:	2359      	movs	r3, #89	; 0x59
    e7ea:	803b      	strh	r3, [r7, #0]
    e7ec:	2001      	movs	r0, #1
    e7ee:	e052      	b.n	e896 <process_thread_etimer_process+0xca>

    if(ev == PROCESS_EVENT_EXITED) {
    e7f0:	2987      	cmp	r1, #135	; 0x87
    e7f2:	d11e      	bne.n	e832 <process_thread_etimer_process+0x66>
      struct process *p = data;

      while(timerlist != NULL && timerlist->p == p) {
    e7f4:	4b2a      	ldr	r3, [pc, #168]	; (e8a0 <process_thread_etimer_process+0xd4>)
    e7f6:	681b      	ldr	r3, [r3, #0]
    e7f8:	2b00      	cmp	r3, #0
    e7fa:	d0f5      	beq.n	e7e8 <process_thread_etimer_process+0x1c>
    e7fc:	68d9      	ldr	r1, [r3, #12]
    e7fe:	428a      	cmp	r2, r1
    e800:	d113      	bne.n	e82a <process_thread_etimer_process+0x5e>
	timerlist = timerlist->next;
    e802:	689b      	ldr	r3, [r3, #8]
    PROCESS_YIELD();

    if(ev == PROCESS_EVENT_EXITED) {
      struct process *p = data;

      while(timerlist != NULL && timerlist->p == p) {
    e804:	2b00      	cmp	r3, #0
    e806:	d103      	bne.n	e810 <process_thread_etimer_process+0x44>
    e808:	2200      	movs	r2, #0
    e80a:	4b25      	ldr	r3, [pc, #148]	; (e8a0 <process_thread_etimer_process+0xd4>)
    e80c:	601a      	str	r2, [r3, #0]
    e80e:	e7eb      	b.n	e7e8 <process_thread_etimer_process+0x1c>
    e810:	68d9      	ldr	r1, [r3, #12]
    e812:	428a      	cmp	r2, r1
    e814:	d0f5      	beq.n	e802 <process_thread_etimer_process+0x36>
    e816:	4922      	ldr	r1, [pc, #136]	; (e8a0 <process_thread_etimer_process+0xd4>)
    e818:	600b      	str	r3, [r1, #0]
	timerlist = timerlist->next;
      }

      if(timerlist != NULL) {
	t = timerlist;
	while(t->next != NULL) {
    e81a:	e006      	b.n	e82a <process_thread_etimer_process+0x5e>
	  if(t->next->p == p) {
    e81c:	68c8      	ldr	r0, [r1, #12]
    e81e:	4282      	cmp	r2, r0
    e820:	d102      	bne.n	e828 <process_thread_etimer_process+0x5c>
	    t->next = t->next->next;
    e822:	6889      	ldr	r1, [r1, #8]
    e824:	6099      	str	r1, [r3, #8]
    e826:	e000      	b.n	e82a <process_thread_etimer_process+0x5e>
	timerlist = timerlist->next;
      }

      if(timerlist != NULL) {
	t = timerlist;
	while(t->next != NULL) {
    e828:	1c0b      	adds	r3, r1, #0
    e82a:	6899      	ldr	r1, [r3, #8]
    e82c:	2900      	cmp	r1, #0
    e82e:	d1f5      	bne.n	e81c <process_thread_etimer_process+0x50>
    e830:	e7da      	b.n	e7e8 <process_thread_etimer_process+0x1c>
	  } else
	    t = t->next;
	}
      }
      continue;
    } else if(ev != PROCESS_EVENT_POLL) {
    e832:	2982      	cmp	r1, #130	; 0x82
    e834:	d1d8      	bne.n	e7e8 <process_thread_etimer_process+0x1c>

  again:
    
    u = NULL;
    
    for(t = timerlist; t != NULL; t = t->next) {
    e836:	4b1a      	ldr	r3, [pc, #104]	; (e8a0 <process_thread_etimer_process+0xd4>)
    e838:	469a      	mov	sl, r3
      if(timer_expired(&t->timer)) {
    e83a:	4d1a      	ldr	r5, [pc, #104]	; (e8a4 <process_thread_etimer_process+0xd8>)
	if(process_post(t->p, PROCESS_EVENT_TIMER, t) == PROCESS_ERR_OK) {
    e83c:	4e1a      	ldr	r6, [pc, #104]	; (e8a8 <process_thread_etimer_process+0xdc>)

  again:
    
    u = NULL;
    
    for(t = timerlist; t != NULL; t = t->next) {
    e83e:	4653      	mov	r3, sl
    e840:	681c      	ldr	r4, [r3, #0]
    e842:	2c00      	cmp	r4, #0
    e844:	d0d0      	beq.n	e7e8 <process_thread_etimer_process+0x1c>
    e846:	2300      	movs	r3, #0
    e848:	9301      	str	r3, [sp, #4]
    e84a:	e000      	b.n	e84e <process_thread_etimer_process+0x82>
    e84c:	1c1c      	adds	r4, r3, #0
      if(timer_expired(&t->timer)) {
    e84e:	1c20      	adds	r0, r4, #0
    e850:	47a8      	blx	r5
    e852:	2800      	cmp	r0, #0
    e854:	d017      	beq.n	e886 <process_thread_etimer_process+0xba>
	if(process_post(t->p, PROCESS_EVENT_TIMER, t) == PROCESS_ERR_OK) {
    e856:	68e0      	ldr	r0, [r4, #12]
    e858:	2188      	movs	r1, #136	; 0x88
    e85a:	1c22      	adds	r2, r4, #0
    e85c:	47b0      	blx	r6
    e85e:	2800      	cmp	r0, #0
    e860:	d10f      	bne.n	e882 <process_thread_etimer_process+0xb6>
	  
	  /* Reset the process ID of the event timer, to signal that the
	     etimer has expired. This is later checked in the
	     etimer_expired() function. */
	  t->p = PROCESS_NONE;
    e862:	2300      	movs	r3, #0
    e864:	60e3      	str	r3, [r4, #12]
	  if(u != NULL) {
    e866:	9b01      	ldr	r3, [sp, #4]
    e868:	2b00      	cmp	r3, #0
    e86a:	d002      	beq.n	e872 <process_thread_etimer_process+0xa6>
	    u->next = t->next;
    e86c:	68a2      	ldr	r2, [r4, #8]
    e86e:	609a      	str	r2, [r3, #8]
    e870:	e002      	b.n	e878 <process_thread_etimer_process+0xac>
	  } else {
	    timerlist = t->next;
    e872:	4b0b      	ldr	r3, [pc, #44]	; (e8a0 <process_thread_etimer_process+0xd4>)
    e874:	68a2      	ldr	r2, [r4, #8]
    e876:	601a      	str	r2, [r3, #0]
	  }
	  t->next = NULL;
    e878:	2300      	movs	r3, #0
    e87a:	60a3      	str	r3, [r4, #8]
	  update_time();
    e87c:	4b0b      	ldr	r3, [pc, #44]	; (e8ac <process_thread_etimer_process+0xe0>)
    e87e:	4798      	blx	r3
	  goto again;
    e880:	e7dd      	b.n	e83e <process_thread_etimer_process+0x72>
	} else {
	  etimer_request_poll();
    e882:	4b0b      	ldr	r3, [pc, #44]	; (e8b0 <process_thread_etimer_process+0xe4>)
    e884:	4798      	blx	r3

  again:
    
    u = NULL;
    
    for(t = timerlist; t != NULL; t = t->next) {
    e886:	68a3      	ldr	r3, [r4, #8]
    e888:	9401      	str	r4, [sp, #4]
    e88a:	2b00      	cmp	r3, #0
    e88c:	d1de      	bne.n	e84c <process_thread_etimer_process+0x80>
    e88e:	e7ab      	b.n	e7e8 <process_thread_etimer_process+0x1c>
      u = t;
    }
    
  }
  
  PROCESS_END();
    e890:	2300      	movs	r3, #0
    e892:	8003      	strh	r3, [r0, #0]
    e894:	2003      	movs	r0, #3
}
    e896:	b002      	add	sp, #8
    e898:	bc04      	pop	{r2}
    e89a:	4692      	mov	sl, r2
    e89c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    e89e:	46c0      	nop			; (mov r8, r8)
    e8a0:	20001d14 	.word	0x20001d14
    e8a4:	0000ed8d 	.word	0x0000ed8d
    e8a8:	0000ebf9 	.word	0x0000ebf9
    e8ac:	0000e765 	.word	0x0000e765
    e8b0:	0000e7b9 	.word	0x0000e7b9

0000e8b4 <add_timer>:
  process_poll(&etimer_process);
}
/*---------------------------------------------------------------------------*/
static void
add_timer(struct etimer *timer)
{
    e8b4:	b510      	push	{r4, lr}
    e8b6:	1c04      	adds	r4, r0, #0
  struct etimer *t;

  etimer_request_poll();
    e8b8:	4b10      	ldr	r3, [pc, #64]	; (e8fc <add_timer+0x48>)
    e8ba:	4798      	blx	r3

  if(timer->p != PROCESS_NONE) {
    e8bc:	68e3      	ldr	r3, [r4, #12]
    e8be:	2b00      	cmp	r3, #0
    e8c0:	d011      	beq.n	e8e6 <add_timer+0x32>
    for(t = timerlist; t != NULL; t = t->next) {
    e8c2:	4b0f      	ldr	r3, [pc, #60]	; (e900 <add_timer+0x4c>)
    e8c4:	681b      	ldr	r3, [r3, #0]
    e8c6:	2b00      	cmp	r3, #0
    e8c8:	d00d      	beq.n	e8e6 <add_timer+0x32>
      if(t == timer) {
    e8ca:	429c      	cmp	r4, r3
    e8cc:	d108      	bne.n	e8e0 <add_timer+0x2c>
    e8ce:	e001      	b.n	e8d4 <add_timer+0x20>
    e8d0:	429c      	cmp	r4, r3
    e8d2:	d105      	bne.n	e8e0 <add_timer+0x2c>
	/* Timer already on list, bail out. */
        timer->p = PROCESS_CURRENT();
    e8d4:	4b0b      	ldr	r3, [pc, #44]	; (e904 <add_timer+0x50>)
    e8d6:	681b      	ldr	r3, [r3, #0]
    e8d8:	60e3      	str	r3, [r4, #12]
	update_time();
    e8da:	4b0b      	ldr	r3, [pc, #44]	; (e908 <add_timer+0x54>)
    e8dc:	4798      	blx	r3
	return;
    e8de:	e00b      	b.n	e8f8 <add_timer+0x44>
  struct etimer *t;

  etimer_request_poll();

  if(timer->p != PROCESS_NONE) {
    for(t = timerlist; t != NULL; t = t->next) {
    e8e0:	689b      	ldr	r3, [r3, #8]
    e8e2:	2b00      	cmp	r3, #0
    e8e4:	d1f4      	bne.n	e8d0 <add_timer+0x1c>
      }
    }
  }

  /* Timer not on list. */
  timer->p = PROCESS_CURRENT();
    e8e6:	4b07      	ldr	r3, [pc, #28]	; (e904 <add_timer+0x50>)
    e8e8:	681b      	ldr	r3, [r3, #0]
    e8ea:	60e3      	str	r3, [r4, #12]
  timer->next = timerlist;
    e8ec:	4b04      	ldr	r3, [pc, #16]	; (e900 <add_timer+0x4c>)
    e8ee:	681a      	ldr	r2, [r3, #0]
    e8f0:	60a2      	str	r2, [r4, #8]
  timerlist = timer;
    e8f2:	601c      	str	r4, [r3, #0]

  update_time();
    e8f4:	4b04      	ldr	r3, [pc, #16]	; (e908 <add_timer+0x54>)
    e8f6:	4798      	blx	r3
}
    e8f8:	bd10      	pop	{r4, pc}
    e8fa:	46c0      	nop			; (mov r8, r8)
    e8fc:	0000e7b9 	.word	0x0000e7b9
    e900:	20001d14 	.word	0x20001d14
    e904:	20001d2c 	.word	0x20001d2c
    e908:	0000e765 	.word	0x0000e765

0000e90c <etimer_set>:
/*---------------------------------------------------------------------------*/
void
etimer_set(struct etimer *et, clock_time_t interval)
{
    e90c:	b510      	push	{r4, lr}
    e90e:	1c04      	adds	r4, r0, #0
  timer_set(&et->timer, interval);
    e910:	4b02      	ldr	r3, [pc, #8]	; (e91c <etimer_set+0x10>)
    e912:	4798      	blx	r3
  add_timer(et);
    e914:	1c20      	adds	r0, r4, #0
    e916:	4b02      	ldr	r3, [pc, #8]	; (e920 <etimer_set+0x14>)
    e918:	4798      	blx	r3
}
    e91a:	bd10      	pop	{r4, pc}
    e91c:	0000ed5d 	.word	0x0000ed5d
    e920:	0000e8b5 	.word	0x0000e8b5

0000e924 <etimer_reset>:
/*---------------------------------------------------------------------------*/
void
etimer_reset(struct etimer *et)
{
    e924:	b510      	push	{r4, lr}
    e926:	1c04      	adds	r4, r0, #0
  timer_reset(&et->timer);
    e928:	4b02      	ldr	r3, [pc, #8]	; (e934 <etimer_reset+0x10>)
    e92a:	4798      	blx	r3
  add_timer(et);
    e92c:	1c20      	adds	r0, r4, #0
    e92e:	4b02      	ldr	r3, [pc, #8]	; (e938 <etimer_reset+0x14>)
    e930:	4798      	blx	r3
}
    e932:	bd10      	pop	{r4, pc}
    e934:	0000ed71 	.word	0x0000ed71
    e938:	0000e8b5 	.word	0x0000e8b5

0000e93c <etimer_restart>:
/*---------------------------------------------------------------------------*/
void
etimer_restart(struct etimer *et)
{
    e93c:	b510      	push	{r4, lr}
    e93e:	1c04      	adds	r4, r0, #0
  timer_restart(&et->timer);
    e940:	4b02      	ldr	r3, [pc, #8]	; (e94c <etimer_restart+0x10>)
    e942:	4798      	blx	r3
  add_timer(et);
    e944:	1c20      	adds	r0, r4, #0
    e946:	4b02      	ldr	r3, [pc, #8]	; (e950 <etimer_restart+0x14>)
    e948:	4798      	blx	r3
}
    e94a:	bd10      	pop	{r4, pc}
    e94c:	0000ed7d 	.word	0x0000ed7d
    e950:	0000e8b5 	.word	0x0000e8b5

0000e954 <etimer_expired>:
}
/*---------------------------------------------------------------------------*/
int
etimer_expired(struct etimer *et)
{
  return et->p == PROCESS_NONE;
    e954:	68c0      	ldr	r0, [r0, #12]
    e956:	4243      	negs	r3, r0
    e958:	4158      	adcs	r0, r3
}
    e95a:	4770      	bx	lr

0000e95c <etimer_expiration_time>:
/*---------------------------------------------------------------------------*/
clock_time_t
etimer_expiration_time(struct etimer *et)
{
  return et->timer.start + et->timer.interval;
    e95c:	6842      	ldr	r2, [r0, #4]
    e95e:	6803      	ldr	r3, [r0, #0]
    e960:	18d0      	adds	r0, r2, r3
}
    e962:	4770      	bx	lr

0000e964 <etimer_pending>:
}
/*---------------------------------------------------------------------------*/
int
etimer_pending(void)
{
  return timerlist != NULL;
    e964:	4b02      	ldr	r3, [pc, #8]	; (e970 <etimer_pending+0xc>)
    e966:	6818      	ldr	r0, [r3, #0]
    e968:	1e43      	subs	r3, r0, #1
    e96a:	4198      	sbcs	r0, r3
}
    e96c:	4770      	bx	lr
    e96e:	46c0      	nop			; (mov r8, r8)
    e970:	20001d14 	.word	0x20001d14

0000e974 <etimer_stop>:
  return etimer_pending() ? next_expiration : 0;
}
/*---------------------------------------------------------------------------*/
void
etimer_stop(struct etimer *et)
{
    e974:	b510      	push	{r4, lr}
    e976:	1e04      	subs	r4, r0, #0
  struct etimer *t;

  /* First check if et is the first event timer on the list. */
  if(et == timerlist) {
    e978:	4b0f      	ldr	r3, [pc, #60]	; (e9b8 <etimer_stop+0x44>)
    e97a:	681a      	ldr	r2, [r3, #0]
    e97c:	4294      	cmp	r4, r2
    e97e:	d104      	bne.n	e98a <etimer_stop+0x16>
    timerlist = timerlist->next;
    e980:	6882      	ldr	r2, [r0, #8]
    e982:	601a      	str	r2, [r3, #0]
    update_time();
    e984:	4b0d      	ldr	r3, [pc, #52]	; (e9bc <etimer_stop+0x48>)
    e986:	4798      	blx	r3
    e988:	e00c      	b.n	e9a4 <etimer_stop+0x30>
  } else {
    /* Else walk through the list and try to find the item before the
       et timer. */
    for(t = timerlist; t != NULL && t->next != et; t = t->next);
    e98a:	2a00      	cmp	r2, #0
    e98c:	d00a      	beq.n	e9a4 <etimer_stop+0x30>
    e98e:	6893      	ldr	r3, [r2, #8]
    e990:	4283      	cmp	r3, r0
    e992:	d105      	bne.n	e9a0 <etimer_stop+0x2c>
    e994:	1c13      	adds	r3, r2, #0
    e996:	e009      	b.n	e9ac <etimer_stop+0x38>
    e998:	689a      	ldr	r2, [r3, #8]
    e99a:	42a2      	cmp	r2, r4
    e99c:	d006      	beq.n	e9ac <etimer_stop+0x38>
    e99e:	1c13      	adds	r3, r2, #0
    e9a0:	2b00      	cmp	r3, #0
    e9a2:	d1f9      	bne.n	e998 <etimer_stop+0x24>
      update_time();
    }
  }

  /* Remove the next pointer from the item to be removed. */
  et->next = NULL;
    e9a4:	2300      	movs	r3, #0
    e9a6:	60a3      	str	r3, [r4, #8]
  /* Set the timer as expired */
  et->p = PROCESS_NONE;
    e9a8:	60e3      	str	r3, [r4, #12]
    e9aa:	e004      	b.n	e9b6 <etimer_stop+0x42>

    if(t != NULL) {
      /* We've found the item before the event timer that we are about
	 to remove. We point the items next pointer to the event after
	 the removed item. */
      t->next = et->next;
    e9ac:	68a2      	ldr	r2, [r4, #8]
    e9ae:	609a      	str	r2, [r3, #8]

      update_time();
    e9b0:	4b02      	ldr	r3, [pc, #8]	; (e9bc <etimer_stop+0x48>)
    e9b2:	4798      	blx	r3
    e9b4:	e7f6      	b.n	e9a4 <etimer_stop+0x30>

  /* Remove the next pointer from the item to be removed. */
  et->next = NULL;
  /* Set the timer as expired */
  et->p = PROCESS_NONE;
}
    e9b6:	bd10      	pop	{r4, pc}
    e9b8:	20001d14 	.word	0x20001d14
    e9bc:	0000e765 	.word	0x0000e765

0000e9c0 <exit_process>:
  process_post_synch(p, PROCESS_EVENT_INIT, (process_data_t)arg);
}
/*---------------------------------------------------------------------------*/
static void
exit_process(struct process *p, struct process *fromprocess)
{
    e9c0:	b5f0      	push	{r4, r5, r6, r7, lr}
    e9c2:	b083      	sub	sp, #12
  register struct process *q;
  struct process *old_current = process_current;
    e9c4:	4b26      	ldr	r3, [pc, #152]	; (ea60 <exit_process+0xa0>)
    e9c6:	681f      	ldr	r7, [r3, #0]

  PRINTF("process: exit_process '%s'\n\r", PROCESS_NAME_STRING(p));

  /* Make sure the process is in the process list before we try to
     exit it. */
  for(q = process_list; q != p && q != NULL; q = q->next);
    e9c8:	4b26      	ldr	r3, [pc, #152]	; (ea64 <exit_process+0xa4>)
    e9ca:	681d      	ldr	r5, [r3, #0]
    e9cc:	4285      	cmp	r5, r0
    e9ce:	d008      	beq.n	e9e2 <exit_process+0x22>
    e9d0:	2d00      	cmp	r5, #0
    e9d2:	d043      	beq.n	ea5c <exit_process+0x9c>
    e9d4:	1c2b      	adds	r3, r5, #0
    e9d6:	681b      	ldr	r3, [r3, #0]
    e9d8:	4298      	cmp	r0, r3
    e9da:	d003      	beq.n	e9e4 <exit_process+0x24>
    e9dc:	2b00      	cmp	r3, #0
    e9de:	d1fa      	bne.n	e9d6 <exit_process+0x16>
    e9e0:	e03c      	b.n	ea5c <exit_process+0x9c>
    e9e2:	1c03      	adds	r3, r0, #0
  if(q == NULL) {
    e9e4:	2b00      	cmp	r3, #0
    e9e6:	d039      	beq.n	ea5c <exit_process+0x9c>
    e9e8:	9101      	str	r1, [sp, #4]
    e9ea:	1c04      	adds	r4, r0, #0
    return;
  }

  if(process_is_running(p)) {
    e9ec:	7b83      	ldrb	r3, [r0, #14]
    e9ee:	2b00      	cmp	r3, #0
    e9f0:	d01a      	beq.n	ea28 <exit_process+0x68>
    /* Process was running */
    p->state = PROCESS_STATE_NONE;
    e9f2:	2300      	movs	r3, #0
    e9f4:	7383      	strb	r3, [r0, #14]
    /*
     * Post a synchronous event to all processes to inform them that
     * this process is about to exit. This will allow services to
     * deallocate state associated with this process.
     */
    for(q = process_list; q != NULL; q = q->next) {
    e9f6:	2d00      	cmp	r5, #0
    e9f8:	d009      	beq.n	ea0e <exit_process+0x4e>
      if(p != q) {
	call_process(q, PROCESS_EVENT_EXITED, (process_data_t)p);
    e9fa:	4e1b      	ldr	r6, [pc, #108]	; (ea68 <exit_process+0xa8>)
     * Post a synchronous event to all processes to inform them that
     * this process is about to exit. This will allow services to
     * deallocate state associated with this process.
     */
    for(q = process_list; q != NULL; q = q->next) {
      if(p != q) {
    e9fc:	42ac      	cmp	r4, r5
    e9fe:	d003      	beq.n	ea08 <exit_process+0x48>
	call_process(q, PROCESS_EVENT_EXITED, (process_data_t)p);
    ea00:	1c28      	adds	r0, r5, #0
    ea02:	2187      	movs	r1, #135	; 0x87
    ea04:	1c22      	adds	r2, r4, #0
    ea06:	47b0      	blx	r6
    /*
     * Post a synchronous event to all processes to inform them that
     * this process is about to exit. This will allow services to
     * deallocate state associated with this process.
     */
    for(q = process_list; q != NULL; q = q->next) {
    ea08:	682d      	ldr	r5, [r5, #0]
    ea0a:	2d00      	cmp	r5, #0
    ea0c:	d1f6      	bne.n	e9fc <exit_process+0x3c>
      if(p != q) {
	call_process(q, PROCESS_EVENT_EXITED, (process_data_t)p);
      }
    }

    if(p->thread != NULL && p != fromprocess) {
    ea0e:	68a3      	ldr	r3, [r4, #8]
    ea10:	2b00      	cmp	r3, #0
    ea12:	d009      	beq.n	ea28 <exit_process+0x68>
    ea14:	9a01      	ldr	r2, [sp, #4]
    ea16:	4294      	cmp	r4, r2
    ea18:	d006      	beq.n	ea28 <exit_process+0x68>
      /* Post the exit event to the process that is about to exit. */
      process_current = p;
    ea1a:	4a11      	ldr	r2, [pc, #68]	; (ea60 <exit_process+0xa0>)
    ea1c:	6014      	str	r4, [r2, #0]
      p->thread(&p->pt, PROCESS_EVENT_EXIT, NULL);
    ea1e:	1c20      	adds	r0, r4, #0
    ea20:	300c      	adds	r0, #12
    ea22:	2183      	movs	r1, #131	; 0x83
    ea24:	2200      	movs	r2, #0
    ea26:	4798      	blx	r3
    }
  }

  if(p == process_list) {
    ea28:	4b0e      	ldr	r3, [pc, #56]	; (ea64 <exit_process+0xa4>)
    ea2a:	681a      	ldr	r2, [r3, #0]
    ea2c:	4294      	cmp	r4, r2
    ea2e:	d10d      	bne.n	ea4c <exit_process+0x8c>
    process_list = process_list->next;
    ea30:	6822      	ldr	r2, [r4, #0]
    ea32:	601a      	str	r2, [r3, #0]
    ea34:	e010      	b.n	ea58 <exit_process+0x98>
  } else {
    for(q = process_list; q != NULL; q = q->next) {
      if(q->next == p) {
    ea36:	681a      	ldr	r2, [r3, #0]
    ea38:	42a2      	cmp	r2, r4
    ea3a:	d004      	beq.n	ea46 <exit_process+0x86>
    ea3c:	1c13      	adds	r3, r2, #0
  }

  if(p == process_list) {
    process_list = process_list->next;
  } else {
    for(q = process_list; q != NULL; q = q->next) {
    ea3e:	2b00      	cmp	r3, #0
    ea40:	d1f9      	bne.n	ea36 <exit_process+0x76>
    ea42:	e009      	b.n	ea58 <exit_process+0x98>
      if(q->next == p) {
    ea44:	1c13      	adds	r3, r2, #0
	q->next = p->next;
    ea46:	6822      	ldr	r2, [r4, #0]
    ea48:	601a      	str	r2, [r3, #0]
	break;
    ea4a:	e005      	b.n	ea58 <exit_process+0x98>
  }

  if(p == process_list) {
    process_list = process_list->next;
  } else {
    for(q = process_list; q != NULL; q = q->next) {
    ea4c:	2a00      	cmp	r2, #0
    ea4e:	d003      	beq.n	ea58 <exit_process+0x98>
      if(q->next == p) {
    ea50:	6813      	ldr	r3, [r2, #0]
    ea52:	42a3      	cmp	r3, r4
    ea54:	d1f3      	bne.n	ea3e <exit_process+0x7e>
    ea56:	e7f5      	b.n	ea44 <exit_process+0x84>
	break;
      }
    }
  }

  process_current = old_current;
    ea58:	4b01      	ldr	r3, [pc, #4]	; (ea60 <exit_process+0xa0>)
    ea5a:	601f      	str	r7, [r3, #0]
}
    ea5c:	b003      	add	sp, #12
    ea5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ea60:	20001d2c 	.word	0x20001d2c
    ea64:	20001d30 	.word	0x20001d30
    ea68:	0000ea6d 	.word	0x0000ea6d

0000ea6c <call_process>:
/*---------------------------------------------------------------------------*/
static void
call_process(struct process *p, process_event_t ev, process_data_t data)
{
    ea6c:	b538      	push	{r3, r4, r5, lr}
  if(p->state == PROCESS_STATE_CALLED) {
    printf("process: process '%s' called again with event %d\n\r", PROCESS_NAME_STRING(p), ev);
  }
#endif /* DEBUG */
  
  if((p->state & PROCESS_STATE_RUNNING) &&
    ea6e:	7b83      	ldrb	r3, [r0, #14]
    ea70:	07db      	lsls	r3, r3, #31
    ea72:	d517      	bpl.n	eaa4 <call_process+0x38>
     p->thread != NULL) {
    ea74:	6883      	ldr	r3, [r0, #8]
  if(p->state == PROCESS_STATE_CALLED) {
    printf("process: process '%s' called again with event %d\n\r", PROCESS_NAME_STRING(p), ev);
  }
#endif /* DEBUG */
  
  if((p->state & PROCESS_STATE_RUNNING) &&
    ea76:	2b00      	cmp	r3, #0
    ea78:	d014      	beq.n	eaa4 <call_process+0x38>
    ea7a:	1c0d      	adds	r5, r1, #0
    ea7c:	1c04      	adds	r4, r0, #0
     p->thread != NULL) {
    PRINTF("process: calling process '%s' with event %d\n\r", PROCESS_NAME_STRING(p), ev);
    process_current = p;
    ea7e:	490a      	ldr	r1, [pc, #40]	; (eaa8 <call_process+0x3c>)
    ea80:	6008      	str	r0, [r1, #0]
    p->state = PROCESS_STATE_CALLED;
    ea82:	2102      	movs	r1, #2
    ea84:	7381      	strb	r1, [r0, #14]
    ret = p->thread(&p->pt, ev, data);
    ea86:	300c      	adds	r0, #12
    ea88:	1c29      	adds	r1, r5, #0
    ea8a:	4798      	blx	r3
    if(ret == PT_EXITED ||
    ea8c:	3802      	subs	r0, #2
    ea8e:	2801      	cmp	r0, #1
    ea90:	d901      	bls.n	ea96 <call_process+0x2a>
       ret == PT_ENDED ||
    ea92:	2d83      	cmp	r5, #131	; 0x83
    ea94:	d104      	bne.n	eaa0 <call_process+0x34>
       ev == PROCESS_EVENT_EXIT) {
      exit_process(p, p);
    ea96:	1c20      	adds	r0, r4, #0
    ea98:	1c21      	adds	r1, r4, #0
    ea9a:	4b04      	ldr	r3, [pc, #16]	; (eaac <call_process+0x40>)
    ea9c:	4798      	blx	r3
    ea9e:	e001      	b.n	eaa4 <call_process+0x38>
    } else {
      p->state = PROCESS_STATE_RUNNING;
    eaa0:	2301      	movs	r3, #1
    eaa2:	73a3      	strb	r3, [r4, #14]
    }
  }
}
    eaa4:	bd38      	pop	{r3, r4, r5, pc}
    eaa6:	46c0      	nop			; (mov r8, r8)
    eaa8:	20001d2c 	.word	0x20001d2c
    eaac:	0000e9c1 	.word	0x0000e9c1

0000eab0 <do_poll>:
 * Call each process' poll handler.
 */
/*---------------------------------------------------------------------------*/
static void
do_poll(void)
{
    eab0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  struct process *p;

  poll_requested = 0;
    eab2:	2200      	movs	r2, #0
    eab4:	4b0a      	ldr	r3, [pc, #40]	; (eae0 <do_poll+0x30>)
    eab6:	701a      	strb	r2, [r3, #0]
  /* Call the processes that needs to be polled. */
  for(p = process_list; p != NULL; p = p->next) {
    eab8:	4b0a      	ldr	r3, [pc, #40]	; (eae4 <do_poll+0x34>)
    eaba:	681c      	ldr	r4, [r3, #0]
    eabc:	2c00      	cmp	r4, #0
    eabe:	d00e      	beq.n	eade <do_poll+0x2e>
    if(p->needspoll) {
      p->state = PROCESS_STATE_RUNNING;
    eac0:	2701      	movs	r7, #1
      p->needspoll = 0;
    eac2:	2500      	movs	r5, #0
      call_process(p, PROCESS_EVENT_POLL, NULL);
    eac4:	4e08      	ldr	r6, [pc, #32]	; (eae8 <do_poll+0x38>)
  struct process *p;

  poll_requested = 0;
  /* Call the processes that needs to be polled. */
  for(p = process_list; p != NULL; p = p->next) {
    if(p->needspoll) {
    eac6:	7be3      	ldrb	r3, [r4, #15]
    eac8:	2b00      	cmp	r3, #0
    eaca:	d005      	beq.n	ead8 <do_poll+0x28>
      p->state = PROCESS_STATE_RUNNING;
    eacc:	73a7      	strb	r7, [r4, #14]
      p->needspoll = 0;
    eace:	73e5      	strb	r5, [r4, #15]
      call_process(p, PROCESS_EVENT_POLL, NULL);
    ead0:	1c20      	adds	r0, r4, #0
    ead2:	2182      	movs	r1, #130	; 0x82
    ead4:	1c2a      	adds	r2, r5, #0
    ead6:	47b0      	blx	r6
{
  struct process *p;

  poll_requested = 0;
  /* Call the processes that needs to be polled. */
  for(p = process_list; p != NULL; p = p->next) {
    ead8:	6824      	ldr	r4, [r4, #0]
    eada:	2c00      	cmp	r4, #0
    eadc:	d1f3      	bne.n	eac6 <do_poll+0x16>
      p->state = PROCESS_STATE_RUNNING;
      p->needspoll = 0;
      call_process(p, PROCESS_EVENT_POLL, NULL);
    }
  }
}
    eade:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    eae0:	20001d28 	.word	0x20001d28
    eae4:	20001d30 	.word	0x20001d30
    eae8:	0000ea6d 	.word	0x0000ea6d

0000eaec <process_alloc_event>:

/*---------------------------------------------------------------------------*/
process_event_t
process_alloc_event(void)
{
  return lastevent++;
    eaec:	4b02      	ldr	r3, [pc, #8]	; (eaf8 <process_alloc_event+0xc>)
    eaee:	7818      	ldrb	r0, [r3, #0]
    eaf0:	1c42      	adds	r2, r0, #1
    eaf2:	701a      	strb	r2, [r3, #0]
}
    eaf4:	4770      	bx	lr
    eaf6:	46c0      	nop			; (mov r8, r8)
    eaf8:	20001ebc 	.word	0x20001ebc

0000eafc <process_init>:
}
/*---------------------------------------------------------------------------*/
void
process_init(void)
{
  lastevent = PROCESS_EVENT_MAX;
    eafc:	228a      	movs	r2, #138	; 0x8a
    eafe:	4b07      	ldr	r3, [pc, #28]	; (eb1c <process_init+0x20>)
    eb00:	701a      	strb	r2, [r3, #0]

  nevents = fevent = 0;
    eb02:	2300      	movs	r3, #0
    eb04:	4a06      	ldr	r2, [pc, #24]	; (eb20 <process_init+0x24>)
    eb06:	7013      	strb	r3, [r2, #0]
    eb08:	4a06      	ldr	r2, [pc, #24]	; (eb24 <process_init+0x28>)
    eb0a:	7013      	strb	r3, [r2, #0]
#if PROCESS_CONF_STATS
  process_maxevents = 0;
    eb0c:	4a06      	ldr	r2, [pc, #24]	; (eb28 <process_init+0x2c>)
    eb0e:	7013      	strb	r3, [r2, #0]
#endif /* PROCESS_CONF_STATS */

  process_current = process_list = NULL;
    eb10:	4a06      	ldr	r2, [pc, #24]	; (eb2c <process_init+0x30>)
    eb12:	6013      	str	r3, [r2, #0]
    eb14:	4a06      	ldr	r2, [pc, #24]	; (eb30 <process_init+0x34>)
    eb16:	6013      	str	r3, [r2, #0]
}
    eb18:	4770      	bx	lr
    eb1a:	46c0      	nop			; (mov r8, r8)
    eb1c:	20001ebc 	.word	0x20001ebc
    eb20:	20001d20 	.word	0x20001d20
    eb24:	20001d22 	.word	0x20001d22
    eb28:	200033fc 	.word	0x200033fc
    eb2c:	20001d30 	.word	0x20001d30
    eb30:	20001d2c 	.word	0x20001d2c

0000eb34 <process_run>:
  }
}
/*---------------------------------------------------------------------------*/
int
process_run(void)
{
    eb34:	b570      	push	{r4, r5, r6, lr}
  /* Process poll events. */
  if(poll_requested) {
    eb36:	4b25      	ldr	r3, [pc, #148]	; (ebcc <process_run+0x98>)
    eb38:	781b      	ldrb	r3, [r3, #0]
    eb3a:	2b00      	cmp	r3, #0
    eb3c:	d001      	beq.n	eb42 <process_run+0xe>
    do_poll();
    eb3e:	4b24      	ldr	r3, [pc, #144]	; (ebd0 <process_run+0x9c>)
    eb40:	4798      	blx	r3
   * delivered to any of them. If so, we call the event handler
   * function for the process. We only process one event at a time and
   * call the poll handlers inbetween.
   */

  if(nevents > 0) {
    eb42:	4b24      	ldr	r3, [pc, #144]	; (ebd4 <process_run+0xa0>)
    eb44:	781d      	ldrb	r5, [r3, #0]
    eb46:	2d00      	cmp	r5, #0
    eb48:	d03a      	beq.n	ebc0 <process_run+0x8c>
    
    /* There are events that we should deliver. */
    ev = events[fevent].ev;
    eb4a:	4e23      	ldr	r6, [pc, #140]	; (ebd8 <process_run+0xa4>)
    eb4c:	7834      	ldrb	r4, [r6, #0]
    eb4e:	4b23      	ldr	r3, [pc, #140]	; (ebdc <process_run+0xa8>)
    eb50:	0062      	lsls	r2, r4, #1
    eb52:	1911      	adds	r1, r2, r4
    eb54:	0089      	lsls	r1, r1, #2
    eb56:	5cc9      	ldrb	r1, [r1, r3]
    eb58:	4821      	ldr	r0, [pc, #132]	; (ebe0 <process_run+0xac>)
    eb5a:	7001      	strb	r1, [r0, #0]
    
    data = events[fevent].data;
    eb5c:	1912      	adds	r2, r2, r4
    eb5e:	0092      	lsls	r2, r2, #2
    eb60:	189b      	adds	r3, r3, r2
    eb62:	685a      	ldr	r2, [r3, #4]
    eb64:	481f      	ldr	r0, [pc, #124]	; (ebe4 <process_run+0xb0>)
    eb66:	6002      	str	r2, [r0, #0]
    receiver = events[fevent].p;
    eb68:	6898      	ldr	r0, [r3, #8]
    eb6a:	4b1f      	ldr	r3, [pc, #124]	; (ebe8 <process_run+0xb4>)
    eb6c:	6018      	str	r0, [r3, #0]

    /* Since we have seen the new event, we move pointer upwards
       and decrese the number of events. */
    fevent = (fevent + 1) % PROCESS_CONF_NUMEVENTS;
    eb6e:	3401      	adds	r4, #1
    eb70:	231f      	movs	r3, #31
    eb72:	401c      	ands	r4, r3
    eb74:	7034      	strb	r4, [r6, #0]
    --nevents;
    eb76:	3d01      	subs	r5, #1
    eb78:	4b16      	ldr	r3, [pc, #88]	; (ebd4 <process_run+0xa0>)
    eb7a:	701d      	strb	r5, [r3, #0]

    /* If this is a broadcast event, we deliver it to all events, in
       order of their priority. */
    if(receiver == PROCESS_BROADCAST) {
    eb7c:	2800      	cmp	r0, #0
    eb7e:	d119      	bne.n	ebb4 <process_run+0x80>
      for(p = process_list; p != NULL; p = p->next) {
    eb80:	4b1a      	ldr	r3, [pc, #104]	; (ebec <process_run+0xb8>)
    eb82:	681b      	ldr	r3, [r3, #0]
    eb84:	4a1a      	ldr	r2, [pc, #104]	; (ebf0 <process_run+0xbc>)
    eb86:	6013      	str	r3, [r2, #0]
    eb88:	2b00      	cmp	r3, #0
    eb8a:	d019      	beq.n	ebc0 <process_run+0x8c>

	/* If we have been requested to poll a process, we do this in
	   between processing the broadcast event. */
	if(poll_requested) {
    eb8c:	4e0f      	ldr	r6, [pc, #60]	; (ebcc <process_run+0x98>)
	  do_poll();
    eb8e:	4d10      	ldr	r5, [pc, #64]	; (ebd0 <process_run+0x9c>)
	}
	call_process(p, ev, data);
    eb90:	1c14      	adds	r4, r2, #0
    if(receiver == PROCESS_BROADCAST) {
      for(p = process_list; p != NULL; p = p->next) {

	/* If we have been requested to poll a process, we do this in
	   between processing the broadcast event. */
	if(poll_requested) {
    eb92:	7833      	ldrb	r3, [r6, #0]
    eb94:	2b00      	cmp	r3, #0
    eb96:	d000      	beq.n	eb9a <process_run+0x66>
	  do_poll();
    eb98:	47a8      	blx	r5
	}
	call_process(p, ev, data);
    eb9a:	4b11      	ldr	r3, [pc, #68]	; (ebe0 <process_run+0xac>)
    eb9c:	7819      	ldrb	r1, [r3, #0]
    eb9e:	4b11      	ldr	r3, [pc, #68]	; (ebe4 <process_run+0xb0>)
    eba0:	681a      	ldr	r2, [r3, #0]
    eba2:	6820      	ldr	r0, [r4, #0]
    eba4:	4b13      	ldr	r3, [pc, #76]	; (ebf4 <process_run+0xc0>)
    eba6:	4798      	blx	r3
    --nevents;

    /* If this is a broadcast event, we deliver it to all events, in
       order of their priority. */
    if(receiver == PROCESS_BROADCAST) {
      for(p = process_list; p != NULL; p = p->next) {
    eba8:	6823      	ldr	r3, [r4, #0]
    ebaa:	681b      	ldr	r3, [r3, #0]
    ebac:	6023      	str	r3, [r4, #0]
    ebae:	2b00      	cmp	r3, #0
    ebb0:	d1ef      	bne.n	eb92 <process_run+0x5e>
    ebb2:	e005      	b.n	ebc0 <process_run+0x8c>
    } else {
      /* This is not a broadcast event, so we deliver it to the
	 specified process. */
      /* If the event was an INIT event, we should also update the
	 state of the process. */
      if(ev == PROCESS_EVENT_INIT) {
    ebb4:	2981      	cmp	r1, #129	; 0x81
    ebb6:	d101      	bne.n	ebbc <process_run+0x88>
	receiver->state = PROCESS_STATE_RUNNING;
    ebb8:	2301      	movs	r3, #1
    ebba:	7383      	strb	r3, [r0, #14]
      }

      /* Make sure that the process actually is running. */
      call_process(receiver, ev, data);
    ebbc:	4b0d      	ldr	r3, [pc, #52]	; (ebf4 <process_run+0xc0>)
    ebbe:	4798      	blx	r3
  }

  /* Process one event from the queue */
  do_event();

  return nevents + poll_requested;
    ebc0:	4b02      	ldr	r3, [pc, #8]	; (ebcc <process_run+0x98>)
    ebc2:	7818      	ldrb	r0, [r3, #0]
    ebc4:	4b03      	ldr	r3, [pc, #12]	; (ebd4 <process_run+0xa0>)
    ebc6:	781b      	ldrb	r3, [r3, #0]
    ebc8:	18c0      	adds	r0, r0, r3
}
    ebca:	bd70      	pop	{r4, r5, r6, pc}
    ebcc:	20001d28 	.word	0x20001d28
    ebd0:	0000eab1 	.word	0x0000eab1
    ebd4:	20001d22 	.word	0x20001d22
    ebd8:	20001d20 	.word	0x20001d20
    ebdc:	20001d38 	.word	0x20001d38
    ebe0:	20001d34 	.word	0x20001d34
    ebe4:	20001d1c 	.word	0x20001d1c
    ebe8:	20001eb8 	.word	0x20001eb8
    ebec:	20001d30 	.word	0x20001d30
    ebf0:	20001d24 	.word	0x20001d24
    ebf4:	0000ea6d 	.word	0x0000ea6d

0000ebf8 <process_post>:
  return nevents + poll_requested;
}
/*---------------------------------------------------------------------------*/
int
process_post(struct process *p, process_event_t ev, process_data_t data)
{
    ebf8:	b5f0      	push	{r4, r5, r6, r7, lr}
    PRINTF("process_post: Process '%s' posts event %d to process '%s', nevents %d\n\r",
	   PROCESS_NAME_STRING(PROCESS_CURRENT()), ev,
	   p == PROCESS_BROADCAST? "<broadcast>": PROCESS_NAME_STRING(p), nevents);
  }
  
  if(nevents == PROCESS_CONF_NUMEVENTS) {
    ebfa:	4b10      	ldr	r3, [pc, #64]	; (ec3c <process_post+0x44>)
    ebfc:	781c      	ldrb	r4, [r3, #0]
    ebfe:	2c20      	cmp	r4, #32
    ec00:	d01a      	beq.n	ec38 <process_post+0x40>
    }
#endif /* DEBUG */
    return PROCESS_ERR_FULL;
  }
  
  snum = (process_num_events_t)(fevent + nevents) % PROCESS_CONF_NUMEVENTS;
    ec02:	4b0f      	ldr	r3, [pc, #60]	; (ec40 <process_post+0x48>)
    ec04:	781b      	ldrb	r3, [r3, #0]
    ec06:	18e3      	adds	r3, r4, r3
    ec08:	251f      	movs	r5, #31
    ec0a:	402b      	ands	r3, r5
    ec0c:	4d0d      	ldr	r5, [pc, #52]	; (ec44 <process_post+0x4c>)
    ec0e:	702b      	strb	r3, [r5, #0]
  events[snum].ev = ev;
    ec10:	4d0d      	ldr	r5, [pc, #52]	; (ec48 <process_post+0x50>)
    ec12:	005e      	lsls	r6, r3, #1
    ec14:	18f7      	adds	r7, r6, r3
    ec16:	00bf      	lsls	r7, r7, #2
    ec18:	5579      	strb	r1, [r7, r5]
  events[snum].data = data;
    ec1a:	19e9      	adds	r1, r5, r7
    ec1c:	604a      	str	r2, [r1, #4]
  events[snum].p = p;
    ec1e:	6088      	str	r0, [r1, #8]
  ++nevents;
    ec20:	3401      	adds	r4, #1
    ec22:	b2e4      	uxtb	r4, r4
    ec24:	4b05      	ldr	r3, [pc, #20]	; (ec3c <process_post+0x44>)
    ec26:	701c      	strb	r4, [r3, #0]

#if PROCESS_CONF_STATS
  if(nevents > process_maxevents) {
    ec28:	4b08      	ldr	r3, [pc, #32]	; (ec4c <process_post+0x54>)
    ec2a:	781b      	ldrb	r3, [r3, #0]
    process_maxevents = nevents;
  }
#endif /* PROCESS_CONF_STATS */
  
  return PROCESS_ERR_OK;
    ec2c:	2000      	movs	r0, #0
  events[snum].data = data;
  events[snum].p = p;
  ++nevents;

#if PROCESS_CONF_STATS
  if(nevents > process_maxevents) {
    ec2e:	42a3      	cmp	r3, r4
    ec30:	d203      	bcs.n	ec3a <process_post+0x42>
    process_maxevents = nevents;
    ec32:	4b06      	ldr	r3, [pc, #24]	; (ec4c <process_post+0x54>)
    ec34:	701c      	strb	r4, [r3, #0]
    ec36:	e000      	b.n	ec3a <process_post+0x42>
      printf("soft panic: event queue is full when broadcast event %d was posted from %s\n\r", ev, PROCESS_NAME_STRING(process_current));
    } else {
      printf("soft panic: event queue is full when event %d was posted to %s frpm %s\n\r", ev, PROCESS_NAME_STRING(p), PROCESS_NAME_STRING(process_current));
    }
#endif /* DEBUG */
    return PROCESS_ERR_FULL;
    ec38:	2001      	movs	r0, #1
    process_maxevents = nevents;
  }
#endif /* PROCESS_CONF_STATS */
  
  return PROCESS_ERR_OK;
}
    ec3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ec3c:	20001d22 	.word	0x20001d22
    ec40:	20001d20 	.word	0x20001d20
    ec44:	20001d21 	.word	0x20001d21
    ec48:	20001d38 	.word	0x20001d38
    ec4c:	200033fc 	.word	0x200033fc

0000ec50 <process_post_synch>:
/*---------------------------------------------------------------------------*/
void
process_post_synch(struct process *p, process_event_t ev, process_data_t data)
{
    ec50:	b538      	push	{r3, r4, r5, lr}
  struct process *caller = process_current;
    ec52:	4c03      	ldr	r4, [pc, #12]	; (ec60 <process_post_synch+0x10>)
    ec54:	6825      	ldr	r5, [r4, #0]

  call_process(p, ev, data);
    ec56:	4b03      	ldr	r3, [pc, #12]	; (ec64 <process_post_synch+0x14>)
    ec58:	4798      	blx	r3
  process_current = caller;
    ec5a:	6025      	str	r5, [r4, #0]
}
    ec5c:	bd38      	pop	{r3, r4, r5, pc}
    ec5e:	46c0      	nop			; (mov r8, r8)
    ec60:	20001d2c 	.word	0x20001d2c
    ec64:	0000ea6d 	.word	0x0000ea6d

0000ec68 <process_start>:
  return lastevent++;
}
/*---------------------------------------------------------------------------*/
void
process_start(struct process *p, const char *arg)
{
    ec68:	b510      	push	{r4, lr}
  struct process *q;

  /* First make sure that we don't try to start a process that is
     already running. */
  for(q = process_list; q != p && q != NULL; q = q->next);
    ec6a:	4b0d      	ldr	r3, [pc, #52]	; (eca0 <process_start+0x38>)
    ec6c:	681c      	ldr	r4, [r3, #0]
    ec6e:	4284      	cmp	r4, r0
    ec70:	d014      	beq.n	ec9c <process_start+0x34>
    ec72:	2c00      	cmp	r4, #0
    ec74:	d005      	beq.n	ec82 <process_start+0x1a>
    ec76:	1c23      	adds	r3, r4, #0
    ec78:	681b      	ldr	r3, [r3, #0]
    ec7a:	4298      	cmp	r0, r3
    ec7c:	d00e      	beq.n	ec9c <process_start+0x34>
    ec7e:	2b00      	cmp	r3, #0
    ec80:	d1fa      	bne.n	ec78 <process_start+0x10>

  /* If we found the process on the process list, we bail out. */
  if(q == p) {
    ec82:	2800      	cmp	r0, #0
    ec84:	d00a      	beq.n	ec9c <process_start+0x34>
    ec86:	1c0a      	adds	r2, r1, #0
    return;
  }
  /* Put on the procs list.*/
  p->next = process_list;
    ec88:	6004      	str	r4, [r0, #0]
  process_list = p;
    ec8a:	4b05      	ldr	r3, [pc, #20]	; (eca0 <process_start+0x38>)
    ec8c:	6018      	str	r0, [r3, #0]
  p->state = PROCESS_STATE_RUNNING;
    ec8e:	2301      	movs	r3, #1
    ec90:	7383      	strb	r3, [r0, #14]
  PT_INIT(&p->pt);
    ec92:	2300      	movs	r3, #0
    ec94:	8183      	strh	r3, [r0, #12]

  PRINTF("process: starting '%s'\n\r", PROCESS_NAME_STRING(p));

  /* Post a synchronous initialization event to the process. */
  process_post_synch(p, PROCESS_EVENT_INIT, (process_data_t)arg);
    ec96:	2181      	movs	r1, #129	; 0x81
    ec98:	4b02      	ldr	r3, [pc, #8]	; (eca4 <process_start+0x3c>)
    ec9a:	4798      	blx	r3
}
    ec9c:	bd10      	pop	{r4, pc}
    ec9e:	46c0      	nop			; (mov r8, r8)
    eca0:	20001d30 	.word	0x20001d30
    eca4:	0000ec51 	.word	0x0000ec51

0000eca8 <process_poll>:
}
/*---------------------------------------------------------------------------*/
void
process_poll(struct process *p)
{
  if(p != NULL) {
    eca8:	2800      	cmp	r0, #0
    ecaa:	d007      	beq.n	ecbc <process_poll+0x14>
    if(p->state == PROCESS_STATE_RUNNING ||
    ecac:	7b83      	ldrb	r3, [r0, #14]
    ecae:	3b01      	subs	r3, #1
    ecb0:	2b01      	cmp	r3, #1
    ecb2:	d803      	bhi.n	ecbc <process_poll+0x14>
       p->state == PROCESS_STATE_CALLED) {
      p->needspoll = 1;
    ecb4:	2301      	movs	r3, #1
    ecb6:	73c3      	strb	r3, [r0, #15]
      poll_requested = 1;
    ecb8:	4a01      	ldr	r2, [pc, #4]	; (ecc0 <process_poll+0x18>)
    ecba:	7013      	strb	r3, [r2, #0]
    }
  }
}
    ecbc:	4770      	bx	lr
    ecbe:	46c0      	nop			; (mov r8, r8)
    ecc0:	20001d28 	.word	0x20001d28

0000ecc4 <rtimer_init>:
static struct rtimer *next_rtimer;

/*---------------------------------------------------------------------------*/
void
rtimer_init(void)
{
    ecc4:	b508      	push	{r3, lr}
  rtimer_arch_init();
    ecc6:	4b01      	ldr	r3, [pc, #4]	; (eccc <rtimer_init+0x8>)
    ecc8:	4798      	blx	r3
}
    ecca:	bd08      	pop	{r3, pc}
    eccc:	0000f7bd 	.word	0x0000f7bd

0000ecd0 <rtimer_run_next>:
  return RTIMER_OK;
}
/*---------------------------------------------------------------------------*/
void
rtimer_run_next(void)
{
    ecd0:	b510      	push	{r4, lr}
  struct rtimer *t;
  if(next_rtimer == NULL) {
    ecd2:	4b08      	ldr	r3, [pc, #32]	; (ecf4 <rtimer_run_next+0x24>)
    ecd4:	6818      	ldr	r0, [r3, #0]
    ecd6:	2800      	cmp	r0, #0
    ecd8:	d00b      	beq.n	ecf2 <rtimer_run_next+0x22>
    return;
  }
  t = next_rtimer;
  next_rtimer = NULL;
    ecda:	1c1c      	adds	r4, r3, #0
    ecdc:	2300      	movs	r3, #0
    ecde:	6023      	str	r3, [r4, #0]
  t->func(t, t->ptr);
    ece0:	6881      	ldr	r1, [r0, #8]
    ece2:	6843      	ldr	r3, [r0, #4]
    ece4:	4798      	blx	r3
  if(next_rtimer != NULL) {
    ece6:	6823      	ldr	r3, [r4, #0]
    ece8:	2b00      	cmp	r3, #0
    ecea:	d002      	beq.n	ecf2 <rtimer_run_next+0x22>
    rtimer_arch_schedule(next_rtimer->time);
    ecec:	6818      	ldr	r0, [r3, #0]
    ecee:	4b02      	ldr	r3, [pc, #8]	; (ecf8 <rtimer_run_next+0x28>)
    ecf0:	4798      	blx	r3
  }
  return;
}
    ecf2:	bd10      	pop	{r4, pc}
    ecf4:	20001ec0 	.word	0x20001ec0
    ecf8:	0000f8a1 	.word	0x0000f8a1

0000ecfc <stimer_set>:
 * \param interval The interval before the timer expires.
 *
 */
void
stimer_set(struct stimer *t, unsigned long interval)
{
    ecfc:	b510      	push	{r4, lr}
    ecfe:	1c04      	adds	r4, r0, #0
  t->interval = interval;
    ed00:	6041      	str	r1, [r0, #4]
  t->start = clock_seconds();
    ed02:	4b02      	ldr	r3, [pc, #8]	; (ed0c <stimer_set+0x10>)
    ed04:	4798      	blx	r3
    ed06:	6020      	str	r0, [r4, #0]
}
    ed08:	bd10      	pop	{r4, pc}
    ed0a:	46c0      	nop			; (mov r8, r8)
    ed0c:	0000f721 	.word	0x0000f721

0000ed10 <stimer_expired>:
 * \return Non-zero if the timer has expired, zero otherwise.
 *
 */
int
stimer_expired(struct stimer *t)
{
    ed10:	b510      	push	{r4, lr}
    ed12:	1c04      	adds	r4, r0, #0
  return SCLOCK_GEQ(clock_seconds(), t->start + t->interval);
    ed14:	4b05      	ldr	r3, [pc, #20]	; (ed2c <stimer_expired+0x1c>)
    ed16:	4798      	blx	r3
    ed18:	6822      	ldr	r2, [r4, #0]
    ed1a:	6863      	ldr	r3, [r4, #4]
    ed1c:	18d3      	adds	r3, r2, r3
    ed1e:	1ac3      	subs	r3, r0, r3
    ed20:	2000      	movs	r0, #0
    ed22:	4a03      	ldr	r2, [pc, #12]	; (ed30 <stimer_expired+0x20>)
    ed24:	429a      	cmp	r2, r3
    ed26:	4140      	adcs	r0, r0
}
    ed28:	bd10      	pop	{r4, pc}
    ed2a:	46c0      	nop			; (mov r8, r8)
    ed2c:	0000f721 	.word	0x0000f721
    ed30:	7ffffffe 	.word	0x7ffffffe

0000ed34 <stimer_remaining>:
 * \return The time until the timer expires
 *
 */
unsigned long
stimer_remaining(struct stimer *t)
{
    ed34:	b510      	push	{r4, lr}
  return t->start + t->interval - clock_seconds();
    ed36:	6844      	ldr	r4, [r0, #4]
    ed38:	6803      	ldr	r3, [r0, #0]
    ed3a:	18e4      	adds	r4, r4, r3
    ed3c:	4b01      	ldr	r3, [pc, #4]	; (ed44 <stimer_remaining+0x10>)
    ed3e:	4798      	blx	r3
    ed40:	1a20      	subs	r0, r4, r0
}
    ed42:	bd10      	pop	{r4, pc}
    ed44:	0000f721 	.word	0x0000f721

0000ed48 <stimer_elapsed>:
 * \return The time elapsed since the last start of the timer
 *
 */
unsigned long
stimer_elapsed(struct stimer *t)
{
    ed48:	b510      	push	{r4, lr}
    ed4a:	1c04      	adds	r4, r0, #0
  return clock_seconds() - t->start;
    ed4c:	4b02      	ldr	r3, [pc, #8]	; (ed58 <stimer_elapsed+0x10>)
    ed4e:	4798      	blx	r3
    ed50:	6823      	ldr	r3, [r4, #0]
    ed52:	1ac0      	subs	r0, r0, r3
}
    ed54:	bd10      	pop	{r4, pc}
    ed56:	46c0      	nop			; (mov r8, r8)
    ed58:	0000f721 	.word	0x0000f721

0000ed5c <timer_set>:
 * \param interval The interval before the timer expires.
 *
 */
void
timer_set(struct timer *t, clock_time_t interval)
{
    ed5c:	b510      	push	{r4, lr}
    ed5e:	1c04      	adds	r4, r0, #0
  t->interval = interval;
    ed60:	6041      	str	r1, [r0, #4]
  t->start = clock_time();
    ed62:	4b02      	ldr	r3, [pc, #8]	; (ed6c <timer_set+0x10>)
    ed64:	4798      	blx	r3
    ed66:	6020      	str	r0, [r4, #0]
}
    ed68:	bd10      	pop	{r4, pc}
    ed6a:	46c0      	nop			; (mov r8, r8)
    ed6c:	0000f701 	.word	0x0000f701

0000ed70 <timer_reset>:
 * \sa timer_restart()
 */
void
timer_reset(struct timer *t)
{
  t->start += t->interval;
    ed70:	6803      	ldr	r3, [r0, #0]
    ed72:	6842      	ldr	r2, [r0, #4]
    ed74:	4694      	mov	ip, r2
    ed76:	4463      	add	r3, ip
    ed78:	6003      	str	r3, [r0, #0]
}
    ed7a:	4770      	bx	lr

0000ed7c <timer_restart>:
 *
 * \sa timer_reset()
 */
void
timer_restart(struct timer *t)
{
    ed7c:	b510      	push	{r4, lr}
    ed7e:	1c04      	adds	r4, r0, #0
  t->start = clock_time();
    ed80:	4b01      	ldr	r3, [pc, #4]	; (ed88 <timer_restart+0xc>)
    ed82:	4798      	blx	r3
    ed84:	6020      	str	r0, [r4, #0]
}
    ed86:	bd10      	pop	{r4, pc}
    ed88:	0000f701 	.word	0x0000f701

0000ed8c <timer_expired>:
 * \return Non-zero if the timer has expired, zero otherwise.
 *
 */
int
timer_expired(struct timer *t)
{
    ed8c:	b510      	push	{r4, lr}
    ed8e:	1c04      	adds	r4, r0, #0
  /* Note: Can not return diff >= t->interval so we add 1 to diff and return
     t->interval < diff - required to avoid an internal error in mspgcc. */
  clock_time_t diff = (clock_time() - t->start) + 1;
    ed90:	4b04      	ldr	r3, [pc, #16]	; (eda4 <timer_expired+0x18>)
    ed92:	4798      	blx	r3
    ed94:	6823      	ldr	r3, [r4, #0]
    ed96:	1ac0      	subs	r0, r0, r3
    ed98:	3001      	adds	r0, #1
  return t->interval < diff;
    ed9a:	6863      	ldr	r3, [r4, #4]
    ed9c:	4283      	cmp	r3, r0
    ed9e:	4180      	sbcs	r0, r0
    eda0:	4240      	negs	r0, r0

}
    eda2:	bd10      	pop	{r4, pc}
    eda4:	0000f701 	.word	0x0000f701

0000eda8 <rf233_pending_packet>:
 */
int
rf233_pending_packet(void)
{
  PRINTF("RF233: Frame %spending\n\r", pending_frame ? "" : "not ");
  return pending_frame;
    eda8:	4b01      	ldr	r3, [pc, #4]	; (edb0 <rf233_pending_packet+0x8>)
    edaa:	6818      	ldr	r0, [r3, #0]
}
    edac:	4770      	bx	lr
    edae:	46c0      	nop			; (mov r8, r8)
    edb0:	20001ed0 	.word	0x20001ed0

0000edb4 <rf233_interrupt_poll>:
 *             interrupt handler to poll the radio process
 * \retval 0   success
 */
int
rf233_interrupt_poll(void)
{  
    edb4:	b500      	push	{lr}
    edb6:	b083      	sub	sp, #12
	volatile uint8_t irq_source;
	 /* handle IRQ source (for what IRQs are enabled, see rf233-config.h) */
	 irq_source = trx_reg_read(RF233_REG_IRQ_STATUS);
    edb8:	200f      	movs	r0, #15
    edba:	4b17      	ldr	r3, [pc, #92]	; (ee18 <rf233_interrupt_poll+0x64>)
    edbc:	4798      	blx	r3
    edbe:	466b      	mov	r3, sp
    edc0:	71d8      	strb	r0, [r3, #7]
    edc2:	3307      	adds	r3, #7
	 if(irq_source & IRQ_TRX_DONE) {
    edc4:	781b      	ldrb	r3, [r3, #0]
    edc6:	071b      	lsls	r3, r3, #28
    edc8:	d51f      	bpl.n	ee0a <rf233_interrupt_poll+0x56>
		 
		 if(flag_transmit==1)
    edca:	4b14      	ldr	r3, [pc, #80]	; (ee1c <rf233_interrupt_poll+0x68>)
    edcc:	781b      	ldrb	r3, [r3, #0]
    edce:	2b01      	cmp	r3, #1
    edd0:	d105      	bne.n	edde <rf233_interrupt_poll+0x2a>
		 {
			 flag_transmit=0;
    edd2:	2300      	movs	r3, #0
    edd4:	4a11      	ldr	r2, [pc, #68]	; (ee1c <rf233_interrupt_poll+0x68>)
    edd6:	7013      	strb	r3, [r2, #0]
			 interrupt_callback_in_progress = 0;
    edd8:	4a11      	ldr	r2, [pc, #68]	; (ee20 <rf233_interrupt_poll+0x6c>)
    edda:	6013      	str	r3, [r2, #0]
			 return 0;
    eddc:	e018      	b.n	ee10 <rf233_interrupt_poll+0x5c>
		 }
  
  if( interrupt_callback_in_progress) {
    edde:	4b10      	ldr	r3, [pc, #64]	; (ee20 <rf233_interrupt_poll+0x6c>)
    ede0:	681b      	ldr	r3, [r3, #0]
    ede2:	2b00      	cmp	r3, #0
    ede4:	d006      	beq.n	edf4 <rf233_interrupt_poll+0x40>
    /* we cannot read out info from radio now, return here later (through a poll) */
    interrupt_callback_wants_poll = 1;
    ede6:	2201      	movs	r2, #1
    ede8:	4b0e      	ldr	r3, [pc, #56]	; (ee24 <rf233_interrupt_poll+0x70>)
    edea:	601a      	str	r2, [r3, #0]
    process_poll(&rf233_radio_process);
    edec:	480e      	ldr	r0, [pc, #56]	; (ee28 <rf233_interrupt_poll+0x74>)
    edee:	4b0f      	ldr	r3, [pc, #60]	; (ee2c <rf233_interrupt_poll+0x78>)
    edf0:	4798      	blx	r3
    PRINTF("RF233: irq but busy, returns later.\n\r");
    return 0;
    edf2:	e00d      	b.n	ee10 <rf233_interrupt_poll+0x5c>
  }

  interrupt_callback_wants_poll = 0;
    edf4:	2200      	movs	r2, #0
    edf6:	4b0b      	ldr	r3, [pc, #44]	; (ee24 <rf233_interrupt_poll+0x70>)
    edf8:	601a      	str	r2, [r3, #0]
  interrupt_callback_in_progress = 1;
    edfa:	2301      	movs	r3, #1
    edfc:	4a08      	ldr	r2, [pc, #32]	; (ee20 <rf233_interrupt_poll+0x6c>)
    edfe:	6013      	str	r3, [r2, #0]

 
    /* we have started receiving a frame, len can be read */
    pending_frame = 1;
    ee00:	4a0b      	ldr	r2, [pc, #44]	; (ee30 <rf233_interrupt_poll+0x7c>)
    ee02:	6013      	str	r3, [r2, #0]
	//delay_cycles_ms(1);
    process_poll(&rf233_radio_process);
    ee04:	4808      	ldr	r0, [pc, #32]	; (ee28 <rf233_interrupt_poll+0x74>)
    ee06:	4b09      	ldr	r3, [pc, #36]	; (ee2c <rf233_interrupt_poll+0x78>)
    ee08:	4798      	blx	r3
  if(irq_source & IRQ_PLL_LOCK) {
    /* PLL lock */
  }
#endif

  interrupt_callback_in_progress = 0;
    ee0a:	2200      	movs	r2, #0
    ee0c:	4b04      	ldr	r3, [pc, #16]	; (ee20 <rf233_interrupt_poll+0x6c>)
    ee0e:	601a      	str	r2, [r3, #0]
  return 0;
}
    ee10:	2000      	movs	r0, #0
    ee12:	b003      	add	sp, #12
    ee14:	bd00      	pop	{pc}
    ee16:	46c0      	nop			; (mov r8, r8)
    ee18:	00002be1 	.word	0x00002be1
    ee1c:	20001edd 	.word	0x20001edd
    ee20:	20001ed4 	.word	0x20001ed4
    ee24:	20001ed8 	.word	0x20001ed8
    ee28:	200001a4 	.word	0x200001a4
    ee2c:	0000eca9 	.word	0x0000eca9
    ee30:	20001ed0 	.word	0x20001ed0

0000ee34 <rf233_read>:
 * \retval -3  Failed, too large frame for buffer
 * \retval -4  Failed, CRC/FCS failed (if USE_HW_FCS_CHECK is true)
 */
int
rf233_read(void *buf, unsigned short bufsize)
{
    ee34:	b570      	push	{r4, r5, r6, lr}
    ee36:	b082      	sub	sp, #8
    ee38:	1c04      	adds	r4, r0, #0
  
  uint8_t ed;       /* frame metadata */
  uint8_t frame_len = 0;
    ee3a:	2200      	movs	r2, #0
    ee3c:	466b      	mov	r3, sp
    ee3e:	71da      	strb	r2, [r3, #7]
  int rssi;
#if DEBUG_PRINTDATA
  uint8_t tempreadlen;
#endif  /* DEBUG_PRINTDATA */

  if(pending_frame == 0) {
    ee40:	4b1c      	ldr	r3, [pc, #112]	; (eeb4 <rf233_read+0x80>)
    ee42:	6818      	ldr	r0, [r3, #0]
    ee44:	2800      	cmp	r0, #0
    ee46:	d033      	beq.n	eeb0 <rf233_read+0x7c>
    ee48:	1c0e      	adds	r6, r1, #0
    ee4a:	1c25      	adds	r5, r4, #0
    return 0;
  }
  pending_frame = 0;
    ee4c:	601a      	str	r2, [r3, #0]
    }
  }
*/

  /* get length of data in FIFO */
  trx_frame_read(&frame_len, 1);
    ee4e:	466b      	mov	r3, sp
    ee50:	1ddc      	adds	r4, r3, #7
    ee52:	1c20      	adds	r0, r4, #0
    ee54:	2101      	movs	r1, #1
    ee56:	4b18      	ldr	r3, [pc, #96]	; (eeb8 <rf233_read+0x84>)
    ee58:	4798      	blx	r3
#if DEBUG_PRINTDATA
  tempreadlen = frame_len;
#endif  /* DEBUG_PRINTDATA */
  if(frame_len == 1) {
    ee5a:	7823      	ldrb	r3, [r4, #0]
    ee5c:	2b01      	cmp	r3, #1
    ee5e:	d024      	beq.n	eeaa <rf233_read+0x76>
  }

  len = frame_len;
#if USE_HW_FCS_CHECK
  /* FCS has already been stripped */
  len = frame_len - 2;
    ee60:	1e98      	subs	r0, r3, #2
    ee62:	b2c4      	uxtb	r4, r0
#endif  /* USE_HW_FCS_CHECK */

  if(frame_len == 0) {
    ee64:	2b00      	cmp	r3, #0
    ee66:	d022      	beq.n	eeae <rf233_read+0x7a>
    return 0;
  }
  if(len > bufsize) {
    ee68:	b2a3      	uxth	r3, r4
    ee6a:	42b3      	cmp	r3, r6
    ee6c:	d909      	bls.n	ee82 <rf233_read+0x4e>
 */
static void
flush_buffer(void)
{
  /* NB: tentative untested implementation */
  uint8_t temp = 0;
    ee6e:	466b      	mov	r3, sp
    ee70:	1d98      	adds	r0, r3, #6
    ee72:	2300      	movs	r3, #0
    ee74:	7003      	strb	r3, [r0, #0]
  trx_frame_write(&temp, 1);
    ee76:	2101      	movs	r1, #1
    ee78:	4b10      	ldr	r3, [pc, #64]	; (eebc <rf233_read+0x88>)
    ee7a:	4798      	blx	r3
  }
  if(len > bufsize) {
    /* too large frame for the buffer, drop */
    PRINTF("RF233: too large frame for buffer, dropping (%u > %u).\n\r", frame_len, bufsize);
    flush_buffer();
    return -3;
    ee7c:	2003      	movs	r0, #3
    ee7e:	4240      	negs	r0, r0
    ee80:	e016      	b.n	eeb0 <rf233_read+0x7c>
  }
  PRINTF("RF233 read %u B\n\r", frame_len);

  /* read out the data into the buffer, disregarding the length and metadata bytes */
  trx_sram_read(1,(uint8_t *)buf, len);
    ee82:	2001      	movs	r0, #1
    ee84:	1c29      	adds	r1, r5, #0
    ee86:	1c22      	adds	r2, r4, #0
    ee88:	4b0d      	ldr	r3, [pc, #52]	; (eec0 <rf233_read+0x8c>)
    ee8a:	4798      	blx	r3
   * resolution of 1dB and accuracy of +/- 5dB. 0xFF means invalid measurement.
   * 0x00 means <= RSSI(base_val), which is -91dBm (typ). See datasheet 12.7.
   * Ergo, real RSSI is (ed-91) dBm or less.
   */
  #define RSSI_OFFSET       (91)
  ed = trx_reg_read(RF233_REG_PHY_ED_LEVEL);
    ee8c:	2007      	movs	r0, #7
    ee8e:	4b0d      	ldr	r3, [pc, #52]	; (eec4 <rf233_read+0x90>)
    ee90:	4798      	blx	r3
  rssi = (int) ed - RSSI_OFFSET;
    ee92:	385b      	subs	r0, #91	; 0x5b
    ee94:	4b0c      	ldr	r3, [pc, #48]	; (eec8 <rf233_read+0x94>)
    ee96:	8118      	strh	r0, [r3, #8]
 */
static void
flush_buffer(void)
{
  /* NB: tentative untested implementation */
  uint8_t temp = 0;
    ee98:	466b      	mov	r3, sp
    ee9a:	1d98      	adds	r0, r3, #6
    ee9c:	2300      	movs	r3, #0
    ee9e:	7003      	strb	r3, [r0, #0]
  trx_frame_write(&temp, 1);
    eea0:	2101      	movs	r1, #1
    eea2:	4b06      	ldr	r3, [pc, #24]	; (eebc <rf233_read+0x88>)
    eea4:	4798      	blx	r3
      return -4;
    }
  }
#endif  / * USE_HW_FCS_CHECK * /*/

  return len;
    eea6:	1c20      	adds	r0, r4, #0
    eea8:	e002      	b.n	eeb0 <rf233_read+0x7c>
  /* FCS has already been stripped */
  len = frame_len - 2;
#endif  /* USE_HW_FCS_CHECK */

  if(frame_len == 0) {
    return 0;
    eeaa:	2000      	movs	r0, #0
    eeac:	e000      	b.n	eeb0 <rf233_read+0x7c>
    eeae:	2000      	movs	r0, #0
    }
  }
#endif  / * USE_HW_FCS_CHECK * /*/

  return len;
}
    eeb0:	b002      	add	sp, #8
    eeb2:	bd70      	pop	{r4, r5, r6, pc}
    eeb4:	20001ed0 	.word	0x20001ed0
    eeb8:	00002df9 	.word	0x00002df9
    eebc:	00002f35 	.word	0x00002f35
    eec0:	00003059 	.word	0x00003059
    eec4:	00002be1 	.word	0x00002be1
    eec8:	200031f8 	.word	0x200031f8

0000eecc <process_thread_rf233_radio_process>:
/**
 * \brief      Radio RF233 process, infinitely awaits a poll, then checks radio
 *             state and handles received data.
 */
PROCESS_THREAD(rf233_radio_process, ev, data)
{
    eecc:	b510      	push	{r4, lr}
    eece:	1c04      	adds	r4, r0, #0
  int len;
  PROCESS_BEGIN();
    eed0:	8803      	ldrh	r3, [r0, #0]
    eed2:	2b00      	cmp	r3, #0
    eed4:	d003      	beq.n	eede <process_thread_rf233_radio_process+0x12>
    eed6:	4a12      	ldr	r2, [pc, #72]	; (ef20 <process_thread_rf233_radio_process+0x54>)
    eed8:	4293      	cmp	r3, r2
    eeda:	d004      	beq.n	eee6 <process_thread_rf233_radio_process+0x1a>
    eedc:	e01c      	b.n	ef18 <process_thread_rf233_radio_process+0x4c>
  PRINTF("RF233: started.\n\r");

  while(1) {
    PROCESS_YIELD_UNTIL(ev == PROCESS_EVENT_POLL);
    eede:	4b10      	ldr	r3, [pc, #64]	; (ef20 <process_thread_rf233_radio_process+0x54>)
    eee0:	8023      	strh	r3, [r4, #0]
    eee2:	2001      	movs	r0, #1
    eee4:	e01b      	b.n	ef1e <process_thread_rf233_radio_process+0x52>
    eee6:	2001      	movs	r0, #1
    eee8:	2982      	cmp	r1, #130	; 0x82
    eeea:	d118      	bne.n	ef1e <process_thread_rf233_radio_process+0x52>
    PRINTF("RF233: polled.\n\r");

    if(interrupt_callback_wants_poll) {
    eeec:	4b0d      	ldr	r3, [pc, #52]	; (ef24 <process_thread_rf233_radio_process+0x58>)
    eeee:	681b      	ldr	r3, [r3, #0]
    eef0:	2b00      	cmp	r3, #0
    eef2:	d001      	beq.n	eef8 <process_thread_rf233_radio_process+0x2c>
      rf233_interrupt_poll();
    eef4:	4b0c      	ldr	r3, [pc, #48]	; (ef28 <process_thread_rf233_radio_process+0x5c>)
    eef6:	4798      	blx	r3
    }

    packetbuf_clear();
    eef8:	4b0c      	ldr	r3, [pc, #48]	; (ef2c <process_thread_rf233_radio_process+0x60>)
    eefa:	4798      	blx	r3
    // packetbuf_set_attr(PACKETBUF_ATTR_TIMESTAMP, last_packet_timestamp);
    len = rf233_read(packetbuf_dataptr(), PACKETBUF_SIZE);
    eefc:	4b0c      	ldr	r3, [pc, #48]	; (ef30 <process_thread_rf233_radio_process+0x64>)
    eefe:	4798      	blx	r3
    ef00:	2180      	movs	r1, #128	; 0x80
    ef02:	4b0c      	ldr	r3, [pc, #48]	; (ef34 <process_thread_rf233_radio_process+0x68>)
    ef04:	4798      	blx	r3
    if(len > 0) {
    ef06:	2800      	cmp	r0, #0
    ef08:	dde9      	ble.n	eede <process_thread_rf233_radio_process+0x12>
      packetbuf_set_datalen(len);
    ef0a:	b280      	uxth	r0, r0
    ef0c:	4b0a      	ldr	r3, [pc, #40]	; (ef38 <process_thread_rf233_radio_process+0x6c>)
    ef0e:	4798      	blx	r3
      NETSTACK_RDC.input();
    ef10:	4b0a      	ldr	r3, [pc, #40]	; (ef3c <process_thread_rf233_radio_process+0x70>)
    ef12:	691b      	ldr	r3, [r3, #16]
    ef14:	4798      	blx	r3
    ef16:	e7e2      	b.n	eede <process_thread_rf233_radio_process+0x12>
    } else {
      PRINTF("RF233: error while reading: %d\n\r", len);
    }
  }
  PROCESS_END();
    ef18:	2300      	movs	r3, #0
    ef1a:	8003      	strh	r3, [r0, #0]
    ef1c:	2003      	movs	r0, #3
}
    ef1e:	bd10      	pop	{r4, pc}
    ef20:	000002a6 	.word	0x000002a6
    ef24:	20001ed8 	.word	0x20001ed8
    ef28:	0000edb5 	.word	0x0000edb5
    ef2c:	0000bf91 	.word	0x0000bf91
    ef30:	0000beb5 	.word	0x0000beb5
    ef34:	0000ee35 	.word	0x0000ee35
    ef38:	0000bea9 	.word	0x0000bea9
    ef3c:	00012c24 	.word	0x00012c24

0000ef40 <rf_get_channel>:
 * \brief      Get radio channel
 * \return     The radio channel
 */
int
rf_get_channel(void)
{
    ef40:	b508      	push	{r3, lr}
	uint8_t channel;
  channel=trx_reg_read(RF233_REG_PHY_CC_CCA) & PHY_CC_CCA_CHANNEL;
    ef42:	2008      	movs	r0, #8
    ef44:	4b02      	ldr	r3, [pc, #8]	; (ef50 <rf_get_channel+0x10>)
    ef46:	4798      	blx	r3
  //printf("rf233 channel%d\n\r",channel);
  return (int)channel;
    ef48:	231f      	movs	r3, #31
    ef4a:	4018      	ands	r0, r3
}
    ef4c:	bd08      	pop	{r3, pc}
    ef4e:	46c0      	nop			; (mov r8, r8)
    ef50:	00002be1 	.word	0x00002be1

0000ef54 <rf_set_channel>:
 * \retval -1  Fail: channel number out of bounds
 * \retval 0   Success
 */
int
rf_set_channel(uint8_t ch)
{
    ef54:	b510      	push	{r4, lr}
  uint8_t temp;
  PRINTF("RF233: setting channel %u\n\r", ch);
  if(ch > 26 || ch < 11) {
    ef56:	1c03      	adds	r3, r0, #0
    ef58:	3b0b      	subs	r3, #11
    ef5a:	2b0f      	cmp	r3, #15
    ef5c:	d80c      	bhi.n	ef78 <rf_set_channel+0x24>
    ef5e:	1c04      	adds	r4, r0, #0
    return -1;
  }

  /* read-modify-write to conserve other settings */
  temp = trx_reg_read(RF233_REG_PHY_CC_CCA);
    ef60:	2008      	movs	r0, #8
    ef62:	4b07      	ldr	r3, [pc, #28]	; (ef80 <rf_set_channel+0x2c>)
    ef64:	4798      	blx	r3
  temp &=~ PHY_CC_CCA_CHANNEL;
    ef66:	23e0      	movs	r3, #224	; 0xe0
    ef68:	1c01      	adds	r1, r0, #0
    ef6a:	4019      	ands	r1, r3
  temp |= ch;
  trx_reg_write(RF233_REG_PHY_CC_CCA, temp);
    ef6c:	4321      	orrs	r1, r4
    ef6e:	2008      	movs	r0, #8
    ef70:	4b04      	ldr	r3, [pc, #16]	; (ef84 <rf_set_channel+0x30>)
    ef72:	4798      	blx	r3
  return 0;
    ef74:	2000      	movs	r0, #0
    ef76:	e001      	b.n	ef7c <rf_set_channel+0x28>
rf_set_channel(uint8_t ch)
{
  uint8_t temp;
  PRINTF("RF233: setting channel %u\n\r", ch);
  if(ch > 26 || ch < 11) {
    return -1;
    ef78:	2001      	movs	r0, #1
    ef7a:	4240      	negs	r0, r0
  temp = trx_reg_read(RF233_REG_PHY_CC_CCA);
  temp &=~ PHY_CC_CCA_CHANNEL;
  temp |= ch;
  trx_reg_write(RF233_REG_PHY_CC_CCA, temp);
  return 0;
}
    ef7c:	bd10      	pop	{r4, pc}
    ef7e:	46c0      	nop			; (mov r8, r8)
    ef80:	00002be1 	.word	0x00002be1
    ef84:	00002cd9 	.word	0x00002cd9

0000ef88 <rf233_status>:
   */
  port_pin_set_output_level(AT86RFX_SLP_PIN, false);
}

uint8_t rf233_status()
{
    ef88:	b508      	push	{r3, lr}
	return (trx_reg_read(RF233_REG_TRX_STATUS) & TRX_STATUS);
    ef8a:	2001      	movs	r0, #1
    ef8c:	4b02      	ldr	r3, [pc, #8]	; (ef98 <rf233_status+0x10>)
    ef8e:	4798      	blx	r3
    ef90:	231f      	movs	r3, #31
    ef92:	4018      	ands	r0, r3
}
    ef94:	bd08      	pop	{r3, pc}
    ef96:	46c0      	nop			; (mov r8, r8)
    ef98:	00002be1 	.word	0x00002be1

0000ef9c <rf233_init>:
 * \return     Returns success/fail
 * \retval 0   Success
 */
int
rf233_init(void)
{
    ef9c:	b570      	push	{r4, r5, r6, lr}
    ef9e:	b082      	sub	sp, #8
  volatile uint8_t radio_state;  /* don't optimize this away, it's important */
  PRINTF("RF233: init.\n\r");

  /* init SPI and GPIOs, wake up from sleep/power up. */
  //rf233_arch_init();
  trx_spi_init();
    efa0:	4b2c      	ldr	r3, [pc, #176]	; (f054 <rf233_init+0xb8>)
    efa2:	4798      	blx	r3
	} else {
		port_base->OUTCLR.reg = pin_mask;
    efa4:	2280      	movs	r2, #128	; 0x80
    efa6:	0352      	lsls	r2, r2, #13
    efa8:	4b2b      	ldr	r3, [pc, #172]	; (f058 <rf233_init+0xbc>)
    efaa:	615a      	str	r2, [r3, #20]
  port_pin_set_output_level(AT86RFX_SLP_PIN, false); /*wakeup from sleep*/

  /* before enabling interrupts, make sure we have cleared IRQ status */
  regtemp = trx_reg_read(RF233_REG_IRQ_STATUS);
    efac:	200f      	movs	r0, #15
    efae:	4b2b      	ldr	r3, [pc, #172]	; (f05c <rf233_init+0xc0>)
    efb0:	4798      	blx	r3
    efb2:	466b      	mov	r3, sp
    efb4:	71d8      	strb	r0, [r3, #7]
  printf("After wake from sleep\n\r");
    efb6:	482a      	ldr	r0, [pc, #168]	; (f060 <rf233_init+0xc4>)
    efb8:	4d2a      	ldr	r5, [pc, #168]	; (f064 <rf233_init+0xc8>)
    efba:	47a8      	blx	r5
  radio_state = rf233_status();
    efbc:	4b2a      	ldr	r3, [pc, #168]	; (f068 <rf233_init+0xcc>)
    efbe:	4798      	blx	r3
    efc0:	466b      	mov	r3, sp
    efc2:	1d9c      	adds	r4, r3, #6
    efc4:	7198      	strb	r0, [r3, #6]
  printf("After arch read reg: state 0x%04x\n\r", radio_state);
    efc6:	7999      	ldrb	r1, [r3, #6]
    efc8:	b2c9      	uxtb	r1, r1
    efca:	4828      	ldr	r0, [pc, #160]	; (f06c <rf233_init+0xd0>)
    efcc:	47a8      	blx	r5

  if(radio_state == STATE_P_ON) {
    efce:	7823      	ldrb	r3, [r4, #0]
    efd0:	2b00      	cmp	r3, #0
    efd2:	d104      	bne.n	efde <rf233_init+0x42>
	  trx_reg_write(RF233_REG_TRX_STATE, TRXCMD_TRX_OFF);
    efd4:	2002      	movs	r0, #2
    efd6:	2108      	movs	r1, #8
    efd8:	4b25      	ldr	r3, [pc, #148]	; (f070 <rf233_init+0xd4>)
    efda:	4798      	blx	r3
    efdc:	e009      	b.n	eff2 <rf233_init+0x56>
    efde:	4d25      	ldr	r5, [pc, #148]	; (f074 <rf233_init+0xd8>)
    efe0:	2680      	movs	r6, #128	; 0x80
    efe2:	0236      	lsls	r6, r6, #8
    efe4:	616e      	str	r6, [r5, #20]
	  } else {
	  /* reset will put us into TRX_OFF state */
	  /* reset the radio core */
	  port_pin_set_output_level(AT86RFX_RST_PIN, false);
	  delay_cycles_ms(10);
    efe6:	200a      	movs	r0, #10
    efe8:	4c23      	ldr	r4, [pc, #140]	; (f078 <rf233_init+0xdc>)
    efea:	47a0      	blx	r4
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
    efec:	61ae      	str	r6, [r5, #24]
	  port_pin_set_output_level(AT86RFX_RST_PIN, true);
	  delay_cycles_ms(2);  /* datasheet: max 1 ms */
    efee:	2002      	movs	r0, #2
    eff0:	47a0      	blx	r4
 *
 * Enables global interrupts in the device to fire any enabled interrupt handlers.
 */
static inline void system_interrupt_enable_global(void)
{
	cpu_irq_enable();
    eff2:	2201      	movs	r2, #1
    eff4:	4b21      	ldr	r3, [pc, #132]	; (f07c <rf233_init+0xe0>)
    eff6:	701a      	strb	r2, [r3, #0]
    eff8:	f3bf 8f5f 	dmb	sy
    effc:	b662      	cpsie	i
	  /* Radio is now in state TRX_OFF */
  }
  system_interrupt_enable_global();
  printf("REB233 radio configured to use EXT%u\n\r", REB233XPRO_HEADER);
    effe:	4820      	ldr	r0, [pc, #128]	; (f080 <rf233_init+0xe4>)
    f000:	2104      	movs	r1, #4
    f002:	4b18      	ldr	r3, [pc, #96]	; (f064 <rf233_init+0xc8>)
    f004:	4798      	blx	r3
  /* Assign regtemp to regtemp to avoid compiler warnings */
  regtemp = regtemp;
    f006:	466b      	mov	r3, sp
    f008:	1ddd      	adds	r5, r3, #7
    f00a:	79db      	ldrb	r3, [r3, #7]
    f00c:	b2db      	uxtb	r3, r3
    f00e:	702b      	strb	r3, [r5, #0]
  trx_irq_init((FUNC_PTR)rf233_interrupt_poll);
    f010:	481c      	ldr	r0, [pc, #112]	; (f084 <rf233_init+0xe8>)
    f012:	4b1d      	ldr	r3, [pc, #116]	; (f088 <rf233_init+0xec>)
    f014:	4798      	blx	r3
  /* Configure the radio using the default values except these. */
  trx_reg_write(RF233_REG_TRX_CTRL_1,      RF233_REG_TRX_CTRL_1_CONF);
    f016:	2004      	movs	r0, #4
    f018:	21a4      	movs	r1, #164	; 0xa4
    f01a:	4c15      	ldr	r4, [pc, #84]	; (f070 <rf233_init+0xd4>)
    f01c:	47a0      	blx	r4
  trx_reg_write(RF233_REG_PHY_CC_CCA,      RF233_REG_PHY_CC_CCA_CONF);
    f01e:	2008      	movs	r0, #8
    f020:	210b      	movs	r1, #11
    f022:	47a0      	blx	r4
  trx_reg_write(RF233_REG_PHY_TX_PWR, RF233_REG_PHY_TX_PWR_CONF);
    f024:	2005      	movs	r0, #5
    f026:	2107      	movs	r1, #7
    f028:	47a0      	blx	r4
  trx_reg_write(RF233_REG_TRX_CTRL_2,      RF233_REG_TRX_CTRL_2_CONF);
    f02a:	200c      	movs	r0, #12
    f02c:	2180      	movs	r1, #128	; 0x80
    f02e:	47a0      	blx	r4
  trx_reg_write(RF233_REG_IRQ_MASK,        RF233_REG_IRQ_MASK_CONF);
    f030:	200e      	movs	r0, #14
    f032:	2148      	movs	r1, #72	; 0x48
    f034:	47a0      	blx	r4
  /* 11_09_rel */
  trx_reg_write(RF233_REG_TRX_RPC,0xFF); /* Enable RPC feature by default */
    f036:	2016      	movs	r0, #22
    f038:	21ff      	movs	r1, #255	; 0xff
    f03a:	47a0      	blx	r4
  regtemp = trx_reg_read(RF233_REG_PHY_TX_PWR);
    f03c:	2005      	movs	r0, #5
    f03e:	4b07      	ldr	r3, [pc, #28]	; (f05c <rf233_init+0xc0>)
    f040:	4798      	blx	r3
    f042:	7028      	strb	r0, [r5, #0]

  /* start the radio process */
  process_start(&rf233_radio_process, NULL);
    f044:	4811      	ldr	r0, [pc, #68]	; (f08c <rf233_init+0xf0>)
    f046:	2100      	movs	r1, #0
    f048:	4b11      	ldr	r3, [pc, #68]	; (f090 <rf233_init+0xf4>)
    f04a:	4798      	blx	r3
  return 0;
}
    f04c:	2000      	movs	r0, #0
    f04e:	b002      	add	sp, #8
    f050:	bd70      	pop	{r4, r5, r6, pc}
    f052:	46c0      	nop			; (mov r8, r8)
    f054:	00002ad1 	.word	0x00002ad1
    f058:	41004400 	.word	0x41004400
    f05c:	00002be1 	.word	0x00002be1
    f060:	00012cb4 	.word	0x00012cb4
    f064:	00010931 	.word	0x00010931
    f068:	0000ef89 	.word	0x0000ef89
    f06c:	00012ccc 	.word	0x00012ccc
    f070:	00002cd9 	.word	0x00002cd9
    f074:	41004480 	.word	0x41004480
    f078:	00000179 	.word	0x00000179
    f07c:	20000008 	.word	0x20000008
    f080:	00012cf0 	.word	0x00012cf0
    f084:	0000edb5 	.word	0x0000edb5
    f088:	00002dd5 	.word	0x00002dd5
    f08c:	200001a4 	.word	0x200001a4
    f090:	0000ec69 	.word	0x0000ec69

0000f094 <rf233_prepare>:
 * \param payload_len     length of data to copy
 * \return     Returns success/fail, refer to radio.h for explanation
 */
int
rf233_prepare(const void *payload, unsigned short payload_len)
{
    f094:	b530      	push	{r4, r5, lr}
    f096:	b0a3      	sub	sp, #140	; 0x8c
    f098:	1c03      	adds	r3, r0, #0
    f09a:	1c0d      	adds	r5, r1, #0
  uint8_t radio_status;
  uint8_t data[130];

#if USE_HW_FCS_CHECK
  /* Add length of the FCS (2 bytes) */
  templen = payload_len + 2;
    f09c:	b2cc      	uxtb	r4, r1
    f09e:	1ca2      	adds	r2, r4, #2
    f0a0:	b2d2      	uxtb	r2, r2
	data++;
	data =(uint8_t *)(payload + i);
	
}*/
//memcpy(data,&templen,1);
data[0] = templen;
    f0a2:	a901      	add	r1, sp, #4
    f0a4:	700a      	strb	r2, [r1, #0]
memcpy(&data[1],payload,templen);
    f0a6:	4669      	mov	r1, sp
    f0a8:	1d48      	adds	r0, r1, #5
    f0aa:	1c19      	adds	r1, r3, #0
    f0ac:	4b0a      	ldr	r3, [pc, #40]	; (f0d8 <rf233_prepare+0x44>)
    f0ae:	4798      	blx	r3
#endif  /* DEBUG_PRINTDATA */
   
  PRINTF("RF233: prepare %u\n\r", payload_len);
  if(payload_len > MAX_PACKET_LEN) {
    PRINTF("RF233: error, frame too large to tx\n\r");
    return RADIO_TX_ERR;
    f0b0:	2001      	movs	r0, #1
  }
  PRINTF("\n\r");
#endif  /* DEBUG_PRINTDATA */
   
  PRINTF("RF233: prepare %u\n\r", payload_len);
  if(payload_len > MAX_PACKET_LEN) {
    f0b2:	2d7f      	cmp	r5, #127	; 0x7f
    f0b4:	d80d      	bhi.n	f0d2 <rf233_prepare+0x3e>
    PRINTF("RF233: error, frame too large to tx\n\r");
    return RADIO_TX_ERR;
  }

  /* check that the FIFO is clear to access */
  radio_status=rf233_status();
    f0b6:	4b09      	ldr	r3, [pc, #36]	; (f0dc <rf233_prepare+0x48>)
    f0b8:	4798      	blx	r3
  if(radio_status == STATE_BUSY_RX || radio_status == STATE_BUSY_TX) {
    f0ba:	3801      	subs	r0, #1
    f0bc:	b2c0      	uxtb	r0, r0
    f0be:	2801      	cmp	r0, #1
    f0c0:	d906      	bls.n	f0d0 <rf233_prepare+0x3c>
    return RADIO_TX_ERR;
  }

  /* Write packet to TX FIFO. */
  PRINTF("RF233 len = %u\n\r", payload_len);
  trx_frame_write((uint8_t *)data, templen+1);
    f0c2:	3403      	adds	r4, #3
    f0c4:	b2e1      	uxtb	r1, r4
    f0c6:	a801      	add	r0, sp, #4
    f0c8:	4b05      	ldr	r3, [pc, #20]	; (f0e0 <rf233_prepare+0x4c>)
    f0ca:	4798      	blx	r3
  return RADIO_TX_OK;
    f0cc:	2000      	movs	r0, #0
    f0ce:	e000      	b.n	f0d2 <rf233_prepare+0x3e>

  /* check that the FIFO is clear to access */
  radio_status=rf233_status();
  if(radio_status == STATE_BUSY_RX || radio_status == STATE_BUSY_TX) {
    PRINTF("RF233: TRX buffer unavailable: prep when %s\n\r", radio_status == STATE_BUSY_RX ? "rx" : "tx");
    return RADIO_TX_ERR;
    f0d0:	2001      	movs	r0, #1

  /* Write packet to TX FIFO. */
  PRINTF("RF233 len = %u\n\r", payload_len);
  trx_frame_write((uint8_t *)data, templen+1);
  return RADIO_TX_OK;
}
    f0d2:	b023      	add	sp, #140	; 0x8c
    f0d4:	bd30      	pop	{r4, r5, pc}
    f0d6:	46c0      	nop			; (mov r8, r8)
    f0d8:	000108e7 	.word	0x000108e7
    f0dc:	0000ef89 	.word	0x0000ef89
    f0e0:	00002f35 	.word	0x00002f35

0000f0e4 <rf233_transmit>:
 * \param payload_len    Length of the frame to send
 * \return     Returns success/fail, refer to radio.h for explanation
 */
int
rf233_transmit(unsigned short payload_len)
{
    f0e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  static uint8_t status_now;
  PRINTF("RF233: tx %u\n\r", payload_len);

  /* prepare for TX */
  
  status_now = rf233_status();
    f0e6:	4b43      	ldr	r3, [pc, #268]	; (f1f4 <rf233_transmit+0x110>)
    f0e8:	4798      	blx	r3
    f0ea:	1c02      	adds	r2, r0, #0
    f0ec:	4b42      	ldr	r3, [pc, #264]	; (f1f8 <rf233_transmit+0x114>)
    f0ee:	7018      	strb	r0, [r3, #0]
   //status_now = trx_reg_read(RF233_REG_TRX_RPC);
  if(status_now == STATE_BUSY_RX || status_now == STATE_BUSY_TX) {
    f0f0:	3801      	subs	r0, #1
    f0f2:	b2c0      	uxtb	r0, r0
    f0f4:	2801      	cmp	r0, #1
    f0f6:	d97b      	bls.n	f1f0 <rf233_transmit+0x10c>
    PRINTF("RF233: collision, was receiving 0x%02X\n\r",status_now);
    /* NOTE: to avoid loops */
    return RADIO_TX_ERR;;
    // return RADIO_TX_COLLISION;
  }
  if(status_now != STATE_PLL_ON) {
    f0f8:	2a09      	cmp	r2, #9
    f0fa:	d00c      	beq.n	f116 <rf233_transmit+0x32>
    /* prepare for going to state TX, should take max 80 us */
    //RF233_COMMAND(TRXCMD_PLL_ON);
	trx_reg_write(RF233_REG_TRX_STATE,0x09);
    f0fc:	2002      	movs	r0, #2
    f0fe:	2109      	movs	r1, #9
    f100:	4b3e      	ldr	r3, [pc, #248]	; (f1fc <rf233_transmit+0x118>)
    f102:	4798      	blx	r3
   // BUSYWAIT_UNTIL(trx_reg_read(RF233_REG_TRX_STATUS) == STATE_PLL_ON, 1 * RTIMER_SECOND/1000);
   //delay_ms(10);
   //status_now = trx_reg_read(RF233_REG_TRX_STATE);
   do 
   {
	   status_now = trx_bit_read(0x01, 0x1F, 0);
    f104:	4d3e      	ldr	r5, [pc, #248]	; (f200 <rf233_transmit+0x11c>)
    f106:	4c3c      	ldr	r4, [pc, #240]	; (f1f8 <rf233_transmit+0x114>)
    f108:	2001      	movs	r0, #1
    f10a:	211f      	movs	r1, #31
    f10c:	2200      	movs	r2, #0
    f10e:	47a8      	blx	r5
    f110:	7020      	strb	r0, [r4, #0]
   } while (status_now == 0x1f);
    f112:	281f      	cmp	r0, #31
    f114:	d0f8      	beq.n	f108 <rf233_transmit+0x24>
  }

  if(rf233_status() != STATE_PLL_ON) {
    f116:	4b37      	ldr	r3, [pc, #220]	; (f1f4 <rf233_transmit+0x110>)
    f118:	4798      	blx	r3
    f11a:	2809      	cmp	r0, #9
    f11c:	d00b      	beq.n	f136 <rf233_transmit+0x52>
    /* failed moving into PLL_ON state, gracefully try to recover */
    PRINTF("RF233: failed going to PLLON\n\r");
    RF233_COMMAND(TRXCMD_PLL_ON);   /* try again */
    f11e:	2002      	movs	r0, #2
    f120:	2109      	movs	r1, #9
    f122:	4b36      	ldr	r3, [pc, #216]	; (f1fc <rf233_transmit+0x118>)
    f124:	4798      	blx	r3
	static uint8_t state;
	state = rf233_status();
    f126:	4b33      	ldr	r3, [pc, #204]	; (f1f4 <rf233_transmit+0x110>)
    f128:	4798      	blx	r3
    f12a:	1c03      	adds	r3, r0, #0
    f12c:	4a35      	ldr	r2, [pc, #212]	; (f204 <rf233_transmit+0x120>)
    f12e:	7010      	strb	r0, [r2, #0]
    if(state != STATE_PLL_ON) {
      /* give up and signal big fail (should perhaps reset radio core instead?) */
      PRINTF("RF233: graceful recovery (in tx) failed, giving up. State: 0x%02X\n\r", rf233_status());
      return RADIO_TX_ERR;
    f130:	2001      	movs	r0, #1
    /* failed moving into PLL_ON state, gracefully try to recover */
    PRINTF("RF233: failed going to PLLON\n\r");
    RF233_COMMAND(TRXCMD_PLL_ON);   /* try again */
	static uint8_t state;
	state = rf233_status();
    if(state != STATE_PLL_ON) {
    f132:	2b09      	cmp	r3, #9
    f134:	d15d      	bne.n	f1f2 <rf233_transmit+0x10e>
      return RADIO_TX_ERR;
    }
  }

  /* perform transmission */
  ENERGEST_OFF(ENERGEST_TYPE_LISTEN);
    f136:	4b34      	ldr	r3, [pc, #208]	; (f208 <rf233_transmit+0x124>)
    f138:	79db      	ldrb	r3, [r3, #7]
    f13a:	2b00      	cmp	r3, #0
    f13c:	d00b      	beq.n	f156 <rf233_transmit+0x72>
    f13e:	4b33      	ldr	r3, [pc, #204]	; (f20c <rf233_transmit+0x128>)
    f140:	4798      	blx	r3
    f142:	4a33      	ldr	r2, [pc, #204]	; (f210 <rf233_transmit+0x12c>)
    f144:	4b33      	ldr	r3, [pc, #204]	; (f214 <rf233_transmit+0x130>)
    f146:	69db      	ldr	r3, [r3, #28]
    f148:	69d1      	ldr	r1, [r2, #28]
    f14a:	1acb      	subs	r3, r1, r3
    f14c:	1818      	adds	r0, r3, r0
    f14e:	61d0      	str	r0, [r2, #28]
    f150:	2200      	movs	r2, #0
    f152:	4b2d      	ldr	r3, [pc, #180]	; (f208 <rf233_transmit+0x124>)
    f154:	71da      	strb	r2, [r3, #7]
  ENERGEST_ON(ENERGEST_TYPE_TRANSMIT);
    f156:	4c2d      	ldr	r4, [pc, #180]	; (f20c <rf233_transmit+0x128>)
    f158:	47a0      	blx	r4
    f15a:	4b2e      	ldr	r3, [pc, #184]	; (f214 <rf233_transmit+0x130>)
    f15c:	6198      	str	r0, [r3, #24]
    f15e:	2501      	movs	r5, #1
    f160:	4b29      	ldr	r3, [pc, #164]	; (f208 <rf233_transmit+0x124>)
    f162:	719d      	strb	r5, [r3, #6]
  RF233_COMMAND(TRXCMD_TX_START);
    f164:	2002      	movs	r0, #2
    f166:	2102      	movs	r1, #2
    f168:	4b24      	ldr	r3, [pc, #144]	; (f1fc <rf233_transmit+0x118>)
    f16a:	4798      	blx	r3
   flag_transmit=1;
    f16c:	4b2a      	ldr	r3, [pc, #168]	; (f218 <rf233_transmit+0x134>)
    f16e:	701d      	strb	r5, [r3, #0]
   //delay_ms(5);
  //printf("RTIMER value %d",RTIMER_NOW());
  BUSYWAIT_UNTIL(rf233_status() == STATE_BUSY_TX, RTIMER_SECOND/2000);
    f170:	47a0      	blx	r4
    f172:	1c07      	adds	r7, r0, #0
    f174:	4c1f      	ldr	r4, [pc, #124]	; (f1f4 <rf233_transmit+0x110>)
    f176:	4e25      	ldr	r6, [pc, #148]	; (f20c <rf233_transmit+0x128>)
    f178:	3d10      	subs	r5, #16
    f17a:	47a0      	blx	r4
    f17c:	2802      	cmp	r0, #2
    f17e:	d004      	beq.n	f18a <rf233_transmit+0xa6>
    f180:	47b0      	blx	r6
    f182:	1beb      	subs	r3, r5, r7
    f184:	1818      	adds	r0, r3, r0
    f186:	0403      	lsls	r3, r0, #16
    f188:	d4f7      	bmi.n	f17a <rf233_transmit+0x96>
  //printf("RTIMER value1 %d",RTIMER_NOW());
  //printf("\r\nSTATE_BUSY_TX");
  BUSYWAIT_UNTIL(rf233_status() != STATE_BUSY_TX, 10 * RTIMER_SECOND/1000);
    f18a:	4b20      	ldr	r3, [pc, #128]	; (f20c <rf233_transmit+0x128>)
    f18c:	4798      	blx	r3
    f18e:	1c07      	adds	r7, r0, #0
    f190:	4c18      	ldr	r4, [pc, #96]	; (f1f4 <rf233_transmit+0x110>)
    f192:	4e1e      	ldr	r6, [pc, #120]	; (f20c <rf233_transmit+0x128>)
    f194:	4d21      	ldr	r5, [pc, #132]	; (f21c <rf233_transmit+0x138>)
    f196:	47a0      	blx	r4
    f198:	2802      	cmp	r0, #2
    f19a:	d104      	bne.n	f1a6 <rf233_transmit+0xc2>
    f19c:	47b0      	blx	r6
    f19e:	1beb      	subs	r3, r5, r7
    f1a0:	1818      	adds	r0, r3, r0
    f1a2:	0403      	lsls	r3, r0, #16
    f1a4:	d4f7      	bmi.n	f196 <rf233_transmit+0xb2>
  //printf("RTIMER value2 %d",RTIMER_NOW());
  ENERGEST_OFF(ENERGEST_TYPE_TRANSMIT);
    f1a6:	4b18      	ldr	r3, [pc, #96]	; (f208 <rf233_transmit+0x124>)
    f1a8:	799b      	ldrb	r3, [r3, #6]
    f1aa:	2b00      	cmp	r3, #0
    f1ac:	d00b      	beq.n	f1c6 <rf233_transmit+0xe2>
    f1ae:	4b17      	ldr	r3, [pc, #92]	; (f20c <rf233_transmit+0x128>)
    f1b0:	4798      	blx	r3
    f1b2:	4a17      	ldr	r2, [pc, #92]	; (f210 <rf233_transmit+0x12c>)
    f1b4:	4b17      	ldr	r3, [pc, #92]	; (f214 <rf233_transmit+0x130>)
    f1b6:	699b      	ldr	r3, [r3, #24]
    f1b8:	6991      	ldr	r1, [r2, #24]
    f1ba:	1acb      	subs	r3, r1, r3
    f1bc:	1818      	adds	r0, r3, r0
    f1be:	6190      	str	r0, [r2, #24]
    f1c0:	2200      	movs	r2, #0
    f1c2:	4b11      	ldr	r3, [pc, #68]	; (f208 <rf233_transmit+0x124>)
    f1c4:	719a      	strb	r2, [r3, #6]
  ENERGEST_ON(ENERGEST_TYPE_LISTEN);
    f1c6:	4b11      	ldr	r3, [pc, #68]	; (f20c <rf233_transmit+0x128>)
    f1c8:	4798      	blx	r3
    f1ca:	4b12      	ldr	r3, [pc, #72]	; (f214 <rf233_transmit+0x130>)
    f1cc:	61d8      	str	r0, [r3, #28]
    f1ce:	2201      	movs	r2, #1
    f1d0:	4b0d      	ldr	r3, [pc, #52]	; (f208 <rf233_transmit+0x124>)
    f1d2:	71da      	strb	r2, [r3, #7]
   if(rf233_status() != STATE_PLL_ON) {
    f1d4:	4b07      	ldr	r3, [pc, #28]	; (f1f4 <rf233_transmit+0x110>)
    f1d6:	4798      	blx	r3
    f1d8:	2809      	cmp	r0, #9
    f1da:	d003      	beq.n	f1e4 <rf233_transmit+0x100>
 * Does a full reset and re-init.
 */
static void
radiocore_hard_recovery(void)
{
  rf233_init();
    f1dc:	4b10      	ldr	r3, [pc, #64]	; (f220 <rf233_transmit+0x13c>)
    f1de:	4798      	blx	r3
  ENERGEST_ON(ENERGEST_TYPE_LISTEN);
   if(rf233_status() != STATE_PLL_ON) {
    /* something has failed */
    PRINTF("RF233: radio fatal err after tx\n\r");
    radiocore_hard_recovery();
    return RADIO_TX_ERR;
    f1e0:	2001      	movs	r0, #1
    f1e2:	e006      	b.n	f1f2 <rf233_transmit+0x10e>
  }

  PRINTF("RF233: tx ok\n\r");
  RF233_COMMAND(TRXCMD_RX_ON);
    f1e4:	2002      	movs	r0, #2
    f1e6:	2106      	movs	r1, #6
    f1e8:	4b04      	ldr	r3, [pc, #16]	; (f1fc <rf233_transmit+0x118>)
    f1ea:	4798      	blx	r3
  return RADIO_TX_OK;
    f1ec:	2000      	movs	r0, #0
    f1ee:	e000      	b.n	f1f2 <rf233_transmit+0x10e>
  status_now = rf233_status();
   //status_now = trx_reg_read(RF233_REG_TRX_RPC);
  if(status_now == STATE_BUSY_RX || status_now == STATE_BUSY_TX) {
    PRINTF("RF233: collision, was receiving 0x%02X\n\r",status_now);
    /* NOTE: to avoid loops */
    return RADIO_TX_ERR;;
    f1f0:	2001      	movs	r0, #1
  }

  PRINTF("RF233: tx ok\n\r");
  RF233_COMMAND(TRXCMD_RX_ON);
  return RADIO_TX_OK;
}
    f1f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    f1f4:	0000ef89 	.word	0x0000ef89
    f1f8:	20001ec8 	.word	0x20001ec8
    f1fc:	00002cd9 	.word	0x00002cd9
    f200:	00002de1 	.word	0x00002de1
    f204:	20001edc 	.word	0x20001edc
    f208:	200033c0 	.word	0x200033c0
    f20c:	0000f88d 	.word	0x0000f88d
    f210:	2000338c 	.word	0x2000338c
    f214:	200033cc 	.word	0x200033cc
    f218:	20001edd 	.word	0x20001edd
    f21c:	fffffec8 	.word	0xfffffec8
    f220:	0000ef9d 	.word	0x0000ef9d

0000f224 <rf233_send>:
 * \param payload_len     length of data to copy
 * \return     Returns success/fail, refer to radio.h for explanation
 */
int
rf233_send(const void *payload, unsigned short payload_len)
{
    f224:	b510      	push	{r4, lr}
    f226:	1c0c      	adds	r4, r1, #0
  PRINTF("RF233: send %u\n\r", payload_len);
  if(rf233_prepare(payload, payload_len) == RADIO_TX_ERR) {
    f228:	4b03      	ldr	r3, [pc, #12]	; (f238 <rf233_send+0x14>)
    f22a:	4798      	blx	r3
    f22c:	2801      	cmp	r0, #1
    f22e:	d002      	beq.n	f236 <rf233_send+0x12>
  return RADIO_TX_ERR;
  } 
  return rf233_transmit(payload_len);
    f230:	1c20      	adds	r0, r4, #0
    f232:	4b02      	ldr	r3, [pc, #8]	; (f23c <rf233_send+0x18>)
    f234:	4798      	blx	r3
}
    f236:	bd10      	pop	{r4, pc}
    f238:	0000f095 	.word	0x0000f095
    f23c:	0000f0e5 	.word	0x0000f0e5

0000f240 <rf233_channel_clear>:
 * \retval >0  Channel is clear
 * \retval 0   Channel is not clear
 */
int
rf233_channel_clear(void)
{
    f240:	b5f0      	push	{r4, r5, r6, r7, lr}
    f242:	4647      	mov	r7, r8
    f244:	b480      	push	{r7}
  uint8_t regsave;
  int was_off = 0;
  
  if(rf233_status() != STATE_RX_ON) {
    f246:	4b1e      	ldr	r3, [pc, #120]	; (f2c0 <rf233_channel_clear+0x80>)
    f248:	4798      	blx	r3
 */
int
rf233_channel_clear(void)
{
  uint8_t regsave;
  int was_off = 0;
    f24a:	2300      	movs	r3, #0
    f24c:	4698      	mov	r8, r3
  
  if(rf233_status() != STATE_RX_ON) {
    f24e:	2806      	cmp	r0, #6
    f250:	d005      	beq.n	f25e <rf233_channel_clear+0x1e>
    /* CCA can only be performed in RX state */
    was_off = 1;
    RF233_COMMAND(TRXCMD_RX_ON);
    f252:	2002      	movs	r0, #2
    f254:	2106      	movs	r1, #6
    f256:	4b1b      	ldr	r3, [pc, #108]	; (f2c4 <rf233_channel_clear+0x84>)
    f258:	4798      	blx	r3
  uint8_t regsave;
  int was_off = 0;
  
  if(rf233_status() != STATE_RX_ON) {
    /* CCA can only be performed in RX state */
    was_off = 1;
    f25a:	2301      	movs	r3, #1
    f25c:	4698      	mov	r8, r3
    RF233_COMMAND(TRXCMD_RX_ON);
  }
   delay_us(200);
    f25e:	20c8      	movs	r0, #200	; 0xc8
    f260:	4b19      	ldr	r3, [pc, #100]	; (f2c8 <rf233_channel_clear+0x88>)
    f262:	4798      	blx	r3
  /* request a CCA, storing the channel number (set with the same reg) */
  regsave = trx_reg_read(RF233_REG_PHY_CC_CCA);
    f264:	2008      	movs	r0, #8
    f266:	4b19      	ldr	r3, [pc, #100]	; (f2cc <rf233_channel_clear+0x8c>)
    f268:	4798      	blx	r3
  regsave |= PHY_CC_CCA_DO_CCA | PHY_CC_CCA_MODE_CS_OR_ED;
    f26a:	2180      	movs	r1, #128	; 0x80
    f26c:	4249      	negs	r1, r1
    f26e:	4308      	orrs	r0, r1
  trx_reg_write(RF233_REG_PHY_CC_CCA, regsave);
    f270:	b2c1      	uxtb	r1, r0
    f272:	2008      	movs	r0, #8
    f274:	4b13      	ldr	r3, [pc, #76]	; (f2c4 <rf233_channel_clear+0x84>)
    f276:	4798      	blx	r3
  
  BUSYWAIT_UNTIL(trx_reg_read(RF233_REG_TRX_STATUS) & TRX_CCA_DONE,
    f278:	4b15      	ldr	r3, [pc, #84]	; (f2d0 <rf233_channel_clear+0x90>)
    f27a:	4798      	blx	r3
    f27c:	1c07      	adds	r7, r0, #0
    f27e:	4c13      	ldr	r4, [pc, #76]	; (f2cc <rf233_channel_clear+0x8c>)
    f280:	4e13      	ldr	r6, [pc, #76]	; (f2d0 <rf233_channel_clear+0x90>)
    f282:	251f      	movs	r5, #31
    f284:	426d      	negs	r5, r5
    f286:	2001      	movs	r0, #1
    f288:	47a0      	blx	r4
    f28a:	0603      	lsls	r3, r0, #24
    f28c:	d404      	bmi.n	f298 <rf233_channel_clear+0x58>
    f28e:	47b0      	blx	r6
    f290:	1beb      	subs	r3, r5, r7
    f292:	1818      	adds	r0, r3, r0
    f294:	0403      	lsls	r3, r0, #16
    f296:	d4f6      	bmi.n	f286 <rf233_channel_clear+0x46>
      RTIMER_SECOND / 1000);
  //regsave = rf233_status();
  regsave = trx_reg_read(RF233_REG_TRX_STATUS);
    f298:	2001      	movs	r0, #1
    f29a:	4b0c      	ldr	r3, [pc, #48]	; (f2cc <rf233_channel_clear+0x8c>)
    f29c:	4798      	blx	r3
    f29e:	1c04      	adds	r4, r0, #0
  /* return to previous state */
  if(was_off) {
    f2a0:	4643      	mov	r3, r8
    f2a2:	2b00      	cmp	r3, #0
    f2a4:	d003      	beq.n	f2ae <rf233_channel_clear+0x6e>
    RF233_COMMAND(TRXCMD_TRX_OFF);
    f2a6:	2002      	movs	r0, #2
    f2a8:	2108      	movs	r1, #8
    f2aa:	4b06      	ldr	r3, [pc, #24]	; (f2c4 <rf233_channel_clear+0x84>)
    f2ac:	4798      	blx	r3
  if((regsave & TRX_CCA_DONE) && (regsave & TRX_CCA_STATUS)) {
    PRINTF("RF233: CCA 1\n\r");
    return 1;
  }
  PRINTF("RF233: CCA 0\n\r");
  return 0;
    f2ae:	2000      	movs	r0, #0
  if(was_off) {
    RF233_COMMAND(TRXCMD_TRX_OFF);
  }

  /* check CCA */
  if((regsave & TRX_CCA_DONE) && (regsave & TRX_CCA_STATUS)) {
    f2b0:	0623      	lsls	r3, r4, #24
    f2b2:	d501      	bpl.n	f2b8 <rf233_channel_clear+0x78>
    f2b4:	0664      	lsls	r4, r4, #25
    f2b6:	0fe0      	lsrs	r0, r4, #31
    PRINTF("RF233: CCA 1\n\r");
    return 1;
  }
  PRINTF("RF233: CCA 0\n\r");
  return 0;
}
    f2b8:	bc04      	pop	{r2}
    f2ba:	4690      	mov	r8, r2
    f2bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    f2be:	46c0      	nop			; (mov r8, r8)
    f2c0:	0000ef89 	.word	0x0000ef89
    f2c4:	00002cd9 	.word	0x00002cd9
    f2c8:	0000014d 	.word	0x0000014d
    f2cc:	00002be1 	.word	0x00002be1
    f2d0:	0000f88d 	.word	0x0000f88d

0000f2d4 <rf233_receiving_packet>:
 * \retval >0  we are currently receiving a frame 
 * \retval 0   we are not currently receiving a frame 
 */
int
rf233_receiving_packet(void)
{ 
    f2d4:	b508      	push	{r3, lr}
  uint8_t trx_state;
  trx_state=rf233_status();
    f2d6:	4b03      	ldr	r3, [pc, #12]	; (f2e4 <rf233_receiving_packet+0x10>)
    f2d8:	4798      	blx	r3
  if(trx_state == STATE_BUSY_RX) {
    f2da:	3801      	subs	r0, #1
    f2dc:	4243      	negs	r3, r0
    f2de:	4158      	adcs	r0, r3
    PRINTF("RF233: Receiving frame\n\r");
    return 1;
  }
  PRINTF("RF233: not Receiving frame\n\r");
  return 0;
}
    f2e0:	bd08      	pop	{r3, pc}
    f2e2:	46c0      	nop			; (mov r8, r8)
    f2e4:	0000ef89 	.word	0x0000ef89

0000f2e8 <rf233_on>:
 * \brief      switch the radio on to listen (rx) mode 
 * \retval 0   Success
 */
int
rf233_on(void)
{
    f2e8:	b510      	push	{r4, lr}
/* switch the radio on */
int
on(void)
{
  /* Check whether radio is in sleep */
  if(sleep_on)
    f2ea:	4b11      	ldr	r3, [pc, #68]	; (f330 <rf233_on+0x48>)
    f2ec:	681b      	ldr	r3, [r3, #0]
    f2ee:	2b00      	cmp	r3, #0
    f2f0:	d009      	beq.n	f306 <rf233_on+0x1e>
	} else {
		port_base->OUTCLR.reg = pin_mask;
    f2f2:	2280      	movs	r2, #128	; 0x80
    f2f4:	0352      	lsls	r2, r2, #13
    f2f6:	4b0f      	ldr	r3, [pc, #60]	; (f334 <rf233_on+0x4c>)
    f2f8:	615a      	str	r2, [r3, #20]
  {
     /* Wake the radio. It'll move to TRX_OFF state */
	
  	 wake_from_sleep();
	 delay_ms(1);
    f2fa:	2001      	movs	r0, #1
    f2fc:	4b0e      	ldr	r3, [pc, #56]	; (f338 <rf233_on+0x50>)
    f2fe:	4798      	blx	r3
	 //printf("\r\nWake from sleep %d",rf233_get_channel());
	 sleep_on = 0;
    f300:	2200      	movs	r2, #0
    f302:	4b0b      	ldr	r3, [pc, #44]	; (f330 <rf233_on+0x48>)
    f304:	601a      	str	r2, [r3, #0]
  }
  uint8_t state_now = rf233_status();
    f306:	4b0d      	ldr	r3, [pc, #52]	; (f33c <rf233_on+0x54>)
    f308:	4798      	blx	r3
  if(state_now != STATE_PLL_ON && state_now != STATE_TRX_OFF) {
    f30a:	3808      	subs	r0, #8
    f30c:	b2c0      	uxtb	r0, r0
    f30e:	2801      	cmp	r0, #1
    f310:	d80c      	bhi.n	f32c <rf233_on+0x44>
    /* fail, we need the radio transceiver to be in either of those states */
    return -1;
  }

  /* go to RX_ON state */
  ENERGEST_ON(ENERGEST_TYPE_LISTEN);
    f312:	4b0b      	ldr	r3, [pc, #44]	; (f340 <rf233_on+0x58>)
    f314:	4798      	blx	r3
    f316:	4b0b      	ldr	r3, [pc, #44]	; (f344 <rf233_on+0x5c>)
    f318:	61d8      	str	r0, [r3, #28]
    f31a:	2401      	movs	r4, #1
    f31c:	4b0a      	ldr	r3, [pc, #40]	; (f348 <rf233_on+0x60>)
    f31e:	71dc      	strb	r4, [r3, #7]
  RF233_COMMAND(TRXCMD_RX_ON);
    f320:	2002      	movs	r0, #2
    f322:	2106      	movs	r1, #6
    f324:	4b09      	ldr	r3, [pc, #36]	; (f34c <rf233_on+0x64>)
    f326:	4798      	blx	r3
  radio_is_on = 1;
    f328:	4b09      	ldr	r3, [pc, #36]	; (f350 <rf233_on+0x68>)
    f32a:	601c      	str	r4, [r3, #0]
rf233_on(void)
{
  PRINTF("RF233: on\n\r");
  on();
  return 0;
}
    f32c:	2000      	movs	r0, #0
    f32e:	bd10      	pop	{r4, pc}
    f330:	20001ec4 	.word	0x20001ec4
    f334:	41004400 	.word	0x41004400
    f338:	00000179 	.word	0x00000179
    f33c:	0000ef89 	.word	0x0000ef89
    f340:	0000f88d 	.word	0x0000f88d
    f344:	200033cc 	.word	0x200033cc
    f348:	200033c0 	.word	0x200033c0
    f34c:	00002cd9 	.word	0x00002cd9
    f350:	20001ecc 	.word	0x20001ecc

0000f354 <rf233_off>:
 * \brief      switch the radio off 
 * \retval 0   Success
 */
int
rf233_off(void)
{
    f354:	b508      	push	{r3, lr}
/*---------------------------------------------------------------------------*/
/* switch the radio off */
int
off(void)
{
  if(rf233_status() != STATE_RX_ON) {
    f356:	4b0e      	ldr	r3, [pc, #56]	; (f390 <rf233_off+0x3c>)
    f358:	4798      	blx	r3
    f35a:	2806      	cmp	r0, #6
    f35c:	d116      	bne.n	f38c <rf233_off+0x38>
    /* fail, we need the radio transceiver to be in this state */
    return -1;
  }

  /* turn off the radio transceiver */
  ENERGEST_OFF(ENERGEST_TYPE_LISTEN);
    f35e:	4b0d      	ldr	r3, [pc, #52]	; (f394 <rf233_off+0x40>)
    f360:	79db      	ldrb	r3, [r3, #7]
    f362:	2b00      	cmp	r3, #0
    f364:	d00b      	beq.n	f37e <rf233_off+0x2a>
    f366:	4b0c      	ldr	r3, [pc, #48]	; (f398 <rf233_off+0x44>)
    f368:	4798      	blx	r3
    f36a:	4a0c      	ldr	r2, [pc, #48]	; (f39c <rf233_off+0x48>)
    f36c:	4b0c      	ldr	r3, [pc, #48]	; (f3a0 <rf233_off+0x4c>)
    f36e:	69db      	ldr	r3, [r3, #28]
    f370:	69d1      	ldr	r1, [r2, #28]
    f372:	1acb      	subs	r3, r1, r3
    f374:	1818      	adds	r0, r3, r0
    f376:	61d0      	str	r0, [r2, #28]
    f378:	2200      	movs	r2, #0
    f37a:	4b06      	ldr	r3, [pc, #24]	; (f394 <rf233_off+0x40>)
    f37c:	71da      	strb	r2, [r3, #7]
  RF233_COMMAND(TRXCMD_TRX_OFF);
    f37e:	2002      	movs	r0, #2
    f380:	2108      	movs	r1, #8
    f382:	4b08      	ldr	r3, [pc, #32]	; (f3a4 <rf233_off+0x50>)
    f384:	4798      	blx	r3
  radio_is_on = 0;
    f386:	2200      	movs	r2, #0
    f388:	4b07      	ldr	r3, [pc, #28]	; (f3a8 <rf233_off+0x54>)
    f38a:	601a      	str	r2, [r3, #0]
rf233_off(void)
{
  PRINTF("RF233: off\n\r");
  off();
  return 0;
}
    f38c:	2000      	movs	r0, #0
    f38e:	bd08      	pop	{r3, pc}
    f390:	0000ef89 	.word	0x0000ef89
    f394:	200033c0 	.word	0x200033c0
    f398:	0000f88d 	.word	0x0000f88d
    f39c:	2000338c 	.word	0x2000338c
    f3a0:	200033cc 	.word	0x200033cc
    f3a4:	00002cd9 	.word	0x00002cd9
    f3a8:	20001ecc 	.word	0x20001ecc

0000f3ac <rf233_sleep>:
/*---------------------------------------------------------------------------*/
/* Put the Radio in sleep mode */

int 
rf233_sleep(void)
{
    f3ac:	b508      	push	{r3, lr}
	int status;
	/* Check whether we're already sleeping */
	if (!sleep_on) {
    f3ae:	4b08      	ldr	r3, [pc, #32]	; (f3d0 <rf233_sleep+0x24>)
    f3b0:	681b      	ldr	r3, [r3, #0]
    f3b2:	2b00      	cmp	r3, #0
    f3b4:	d10a      	bne.n	f3cc <rf233_sleep+0x20>
	//printf("\r\n goto sleep %d",rf233_get_channel());
	//delay_ms(1);
	sleep_on = 1;
    f3b6:	2201      	movs	r2, #1
    f3b8:	4b05      	ldr	r3, [pc, #20]	; (f3d0 <rf233_sleep+0x24>)
    f3ba:	601a      	str	r2, [r3, #0]
	/* Turn off the Radio */
	status = rf233_off();
    f3bc:	4b05      	ldr	r3, [pc, #20]	; (f3d4 <rf233_sleep+0x28>)
    f3be:	4798      	blx	r3
	/* Set the SLP_PIN to high */
	  if(status == 0) {
    f3c0:	2800      	cmp	r0, #0
    f3c2:	d103      	bne.n	f3cc <rf233_sleep+0x20>
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
    f3c4:	2280      	movs	r2, #128	; 0x80
    f3c6:	0352      	lsls	r2, r2, #13
    f3c8:	4b03      	ldr	r3, [pc, #12]	; (f3d8 <rf233_sleep+0x2c>)
    f3ca:	619a      	str	r2, [r3, #24]
	  }
	}
	
	return 0;
	
}
    f3cc:	2000      	movs	r0, #0
    f3ce:	bd08      	pop	{r3, pc}
    f3d0:	20001ec4 	.word	0x20001ec4
    f3d4:	0000f355 	.word	0x0000f355
    f3d8:	41004400 	.word	0x41004400

0000f3dc <button_sensor_value>:
		const uint8_t gpio_pin)
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	return (port_base->IN.reg & pin_mask);
    f3dc:	4b02      	ldr	r3, [pc, #8]	; (f3e8 <button_sensor_value+0xc>)
    f3de:	6a18      	ldr	r0, [r3, #32]
    f3e0:	00c0      	lsls	r0, r0, #3
    f3e2:	0fc0      	lsrs	r0, r0, #31
static int
button_sensor_value(int type)
{
  bool PinLvl = port_pin_get_input_level(BUTTON_0_PIN);
  return PinLvl;
}
    f3e4:	4770      	bx	lr
    f3e6:	46c0      	nop			; (mov r8, r8)
    f3e8:	41004400 	.word	0x41004400

0000f3ec <button_sensor_status>:
}
/*---------------------------------------------------------------------------*/
static int
button_sensor_status(int type)
{
  return enabled;
    f3ec:	4b01      	ldr	r3, [pc, #4]	; (f3f4 <button_sensor_status+0x8>)
    f3ee:	6818      	ldr	r0, [r3, #0]
}
    f3f0:	4770      	bx	lr
    f3f2:	46c0      	nop			; (mov r8, r8)
    f3f4:	20001ee0 	.word	0x20001ee0

0000f3f8 <button_sensor_configure>:
}
/*---------------------------------------------------------------------------*/
static int enabled = 0;
static int
button_sensor_configure(int type, int value)
{
    f3f8:	b500      	push	{lr}
    f3fa:	b085      	sub	sp, #20
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->gpio_pin            = 0;
	config->gpio_pin_mux        = 0;
    f3fc:	ab01      	add	r3, sp, #4
    f3fe:	2200      	movs	r2, #0
    f400:	9202      	str	r2, [sp, #8]
	config->gpio_pin_pull       = EXTINT_PULL_UP;
    f402:	2001      	movs	r0, #1
    f404:	7218      	strb	r0, [r3, #8]
	config->wake_if_sleeping    = true;
    f406:	7258      	strb	r0, [r3, #9]
	config->filter_input_signal = false;
    f408:	729a      	strb	r2, [r3, #10]
	config->detection_criteria  = EXTINT_DETECT_FALLING;
    f40a:	3202      	adds	r2, #2
    f40c:	72da      	strb	r2, [r3, #11]
  struct extint_chan_conf config_extint_chan;
  extint_chan_get_config_defaults(&config_extint_chan);
  config_extint_chan.gpio_pin           = BUTTON_0_EIC_PIN;
    f40e:	231c      	movs	r3, #28
    f410:	9301      	str	r3, [sp, #4]
  config_extint_chan.gpio_pin_mux       = BUTTON_0_EIC_MUX;
  config_extint_chan.gpio_pin_pull      = EXTINT_PULL_UP;

  if(value == 1) {
    f412:	2901      	cmp	r1, #1
    f414:	d103      	bne.n	f41e <button_sensor_configure+0x26>
    /* Enable the sensor */
    config_extint_chan.detection_criteria = EXTINT_DETECT_FALLING;
    //config_extint_chan.detection_criteria = EXTINT_DETECT_BOTH;
    enabled = 1;
    f416:	3a01      	subs	r2, #1
    f418:	4b07      	ldr	r3, [pc, #28]	; (f438 <button_sensor_configure+0x40>)
    f41a:	601a      	str	r2, [r3, #0]
    f41c:	e004      	b.n	f428 <button_sensor_configure+0x30>
  } else {
    /* Disable the sensor */
    config_extint_chan.detection_criteria = EXTINT_DETECT_NONE;
    f41e:	2300      	movs	r3, #0
    f420:	aa01      	add	r2, sp, #4
    f422:	72d3      	strb	r3, [r2, #11]
    enabled = 0;
    f424:	4a04      	ldr	r2, [pc, #16]	; (f438 <button_sensor_configure+0x40>)
    f426:	6013      	str	r3, [r2, #0]
  }
  extint_chan_set_config(BUTTON_0_EIC_LINE, &config_extint_chan);
    f428:	2008      	movs	r0, #8
    f42a:	a901      	add	r1, sp, #4
    f42c:	4b03      	ldr	r3, [pc, #12]	; (f43c <button_sensor_configure+0x44>)
    f42e:	4798      	blx	r3

  return 0;
}
    f430:	2000      	movs	r0, #0
    f432:	b005      	add	sp, #20
    f434:	bd00      	pop	{pc}
    f436:	46c0      	nop			; (mov r8, r8)
    f438:	20001ee0 	.word	0x20001ee0
    f43c:	00000369 	.word	0x00000369

0000f440 <edbg_eui_read_eui64>:
#define LEN_EUI    256
uint8_t readbuf[LEN_EUI];

uint8_t *
edbg_eui_read_eui64(void)
{
    f440:	b570      	push	{r4, r5, r6, lr}
    f442:	b090      	sub	sp, #64	; 0x40
static inline void i2c_master_get_config_defaults(
		struct i2c_master_config *const config)
{
	/*Sanity check argument. */
	Assert(config);
	config->baud_rate        = I2C_MASTER_BAUD_RATE_100KHZ;
    f444:	aa04      	add	r2, sp, #16
    f446:	2364      	movs	r3, #100	; 0x64
    f448:	9304      	str	r3, [sp, #16]
#ifdef FEATURE_I2C_FAST_MODE_PLUS_AND_HIGH_SPEED
	config->baud_rate_high_speed = I2C_MASTER_BAUD_RATE_3400KHZ;
    f44a:	4b33      	ldr	r3, [pc, #204]	; (f518 <edbg_eui_read_eui64+0xd8>)
    f44c:	6053      	str	r3, [r2, #4]
	config->transfer_speed       = I2C_MASTER_SPEED_STANDARD_AND_FAST;
    f44e:	2300      	movs	r3, #0
    f450:	6093      	str	r3, [r2, #8]
#endif
	config->generator_source = GCLK_GENERATOR_0;
    f452:	7313      	strb	r3, [r2, #12]
	config->run_in_standby   = false;
    f454:	7613      	strb	r3, [r2, #24]
	config->start_hold_time  = I2C_MASTER_START_HOLD_TIME_300NS_600NS;
    f456:	2180      	movs	r1, #128	; 0x80
    f458:	0389      	lsls	r1, r1, #14
    f45a:	6111      	str	r1, [r2, #16]
	config->buffer_timeout   = 65535;
    f45c:	2101      	movs	r1, #1
    f45e:	4249      	negs	r1, r1
    f460:	82d1      	strh	r1, [r2, #22]
	config->unknown_bus_state_timeout = 65535;
    f462:	8291      	strh	r1, [r2, #20]
	config->pinmux_pad0      = PINMUX_DEFAULT;
	config->pinmux_pad1      = PINMUX_DEFAULT;
	config->scl_low_timeout  = false;
    f464:	3125      	adds	r1, #37	; 0x25
    f466:	5453      	strb	r3, [r2, r1]
	config->inactive_timeout = I2C_MASTER_INACTIVE_TIMEOUT_DISABLED;
    f468:	6293      	str	r3, [r2, #40]	; 0x28
#ifdef FEATURE_I2C_SCL_STRETCH_MODE
	config->scl_stretch_only_after_ack_bit = false;
    f46a:	3108      	adds	r1, #8
    f46c:	5453      	strb	r3, [r2, r1]
#endif
#ifdef FEATURE_I2C_SCL_EXTEND_TIMEOUT
	config->slave_scl_low_extend_timeout   = false;
    f46e:	3101      	adds	r1, #1
    f470:	5453      	strb	r3, [r2, r1]
	config->master_scl_low_extend_timeout  = false;
    f472:	3101      	adds	r1, #1
    f474:	5453      	strb	r3, [r2, r1]
  //int i;
  int timeout = 0;

  struct i2c_master_config config_i2c_master;
  i2c_master_get_config_defaults(&config_i2c_master);
  config_i2c_master.pinmux_pad0  = EDBG_I2C_SERCOM_PINMUX_PAD0;
    f476:	4b29      	ldr	r3, [pc, #164]	; (f51c <edbg_eui_read_eui64+0xdc>)
    f478:	61d3      	str	r3, [r2, #28]
  config_i2c_master.pinmux_pad1  = EDBG_I2C_SERCOM_PINMUX_PAD1;
    f47a:	4b29      	ldr	r3, [pc, #164]	; (f520 <edbg_eui_read_eui64+0xe0>)
    f47c:	6213      	str	r3, [r2, #32]

  i2c_master_init(&i2c_master_instance, EDBG_I2C_MODULE, &config_i2c_master);
    f47e:	4c29      	ldr	r4, [pc, #164]	; (f524 <edbg_eui_read_eui64+0xe4>)
    f480:	1c20      	adds	r0, r4, #0
    f482:	4929      	ldr	r1, [pc, #164]	; (f528 <edbg_eui_read_eui64+0xe8>)
    f484:	4b29      	ldr	r3, [pc, #164]	; (f52c <edbg_eui_read_eui64+0xec>)
    f486:	4798      	blx	r3
{
	/* Sanity check of arguments. */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    f488:	6822      	ldr	r2, [r4, #0]
	SercomI2cm *const i2c_hw = &(module->hw->I2CM);

#if defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_1)
	return (i2c_hw->STATUS.reg & SERCOM_I2CM_STATUS_SYNCBUSY);
#elif defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_2)
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
    f48a:	2107      	movs	r1, #7
    f48c:	69d3      	ldr	r3, [r2, #28]
		const struct i2c_master_module *const module)
{
	/* Sanity check. */
	Assert(module);

	while (i2c_master_is_syncing(module)) {
    f48e:	4219      	tst	r1, r3
    f490:	d1fc      	bne.n	f48c <edbg_eui_read_eui64+0x4c>

	/* Wait for module to sync. */
	_i2c_master_wait_for_sync(module);

	/* Enable module. */
	i2c_module->CTRLA.reg |= SERCOM_I2CM_CTRLA_ENABLE;
    f492:	6811      	ldr	r1, [r2, #0]
    f494:	2302      	movs	r3, #2
    f496:	430b      	orrs	r3, r1
    f498:	6013      	str	r3, [r2, #0]
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
#endif
	/* Start timeout if bus state is unknown. */
	while (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(1))) {
		timeout_counter++;
		if(timeout_counter >= (module->unknown_bus_state_timeout)) {
    f49a:	4b22      	ldr	r3, [pc, #136]	; (f524 <edbg_eui_read_eui64+0xe4>)
    f49c:	88dc      	ldrh	r4, [r3, #6]
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);

	/* Timeout counter used to force bus state. */
	uint32_t timeout_counter = 0;
    f49e:	2300      	movs	r3, #0
#if I2C_MASTER_CALLBACK_MODE == true
	/* Enable module interrupts */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
#endif
	/* Start timeout if bus state is unknown. */
	while (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(1))) {
    f4a0:	2010      	movs	r0, #16
    f4a2:	e005      	b.n	f4b0 <edbg_eui_read_eui64+0x70>
		timeout_counter++;
    f4a4:	3301      	adds	r3, #1
		if(timeout_counter >= (module->unknown_bus_state_timeout)) {
    f4a6:	42a3      	cmp	r3, r4
    f4a8:	d302      	bcc.n	f4b0 <edbg_eui_read_eui64+0x70>
			/* Timeout, force bus state to idle. */
			i2c_module->STATUS.reg = SERCOM_I2CM_STATUS_BUSSTATE(1);
    f4aa:	2310      	movs	r3, #16
    f4ac:	8353      	strh	r3, [r2, #26]
    f4ae:	e002      	b.n	f4b6 <edbg_eui_read_eui64+0x76>
#if I2C_MASTER_CALLBACK_MODE == true
	/* Enable module interrupts */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
#endif
	/* Start timeout if bus state is unknown. */
	while (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(1))) {
    f4b0:	8b51      	ldrh	r1, [r2, #26]
    f4b2:	4201      	tst	r1, r0
    f4b4:	d0f6      	beq.n	f4a4 <edbg_eui_read_eui64+0x64>

  i2c_master_enable(&i2c_master_instance);

  struct i2c_master_packet packet = {
    f4b6:	aa01      	add	r2, sp, #4
    f4b8:	4b1d      	ldr	r3, [pc, #116]	; (f530 <edbg_eui_read_eui64+0xf0>)
    f4ba:	cb13      	ldmia	r3!, {r0, r1, r4}
    f4bc:	c213      	stmia	r2!, {r0, r1, r4}

uint8_t *
edbg_eui_read_eui64(void)
{
  //int i;
  int timeout = 0;
    f4be:	2400      	movs	r4, #0
    .ten_bit_address = false,
    .high_speed      = false,
    .hs_master_code  = 0x0,
  };

  while(i2c_master_write_packet_wait_no_stop(&i2c_master_instance, &packet) !=
    f4c0:	4d18      	ldr	r5, [pc, #96]	; (f524 <edbg_eui_read_eui64+0xe4>)
    f4c2:	4e1c      	ldr	r6, [pc, #112]	; (f534 <edbg_eui_read_eui64+0xf4>)
    f4c4:	e007      	b.n	f4d6 <edbg_eui_read_eui64+0x96>
         STATUS_OK) {
    /* Increment timeout counter and check if timed out. */
    if(timeout++ == TIMEOUT) {
    f4c6:	3401      	adds	r4, #1
    f4c8:	4b1b      	ldr	r3, [pc, #108]	; (f538 <edbg_eui_read_eui64+0xf8>)
    f4ca:	429c      	cmp	r4, r3
    f4cc:	d103      	bne.n	f4d6 <edbg_eui_read_eui64+0x96>
      printf("Timeout 1\n\r");
    f4ce:	481b      	ldr	r0, [pc, #108]	; (f53c <edbg_eui_read_eui64+0xfc>)
    f4d0:	4b1b      	ldr	r3, [pc, #108]	; (f540 <edbg_eui_read_eui64+0x100>)
    f4d2:	4798      	blx	r3
      break;
    f4d4:	e004      	b.n	f4e0 <edbg_eui_read_eui64+0xa0>
    .ten_bit_address = false,
    .high_speed      = false,
    .hs_master_code  = 0x0,
  };

  while(i2c_master_write_packet_wait_no_stop(&i2c_master_instance, &packet) !=
    f4d6:	1c28      	adds	r0, r5, #0
    f4d8:	a901      	add	r1, sp, #4
    f4da:	47b0      	blx	r6
    f4dc:	2800      	cmp	r0, #0
    f4de:	d1f2      	bne.n	f4c6 <edbg_eui_read_eui64+0x86>
      printf("Timeout 1\n\r");
      break;
    }
  }

  packet.data = readbuf;
    f4e0:	ab01      	add	r3, sp, #4
    f4e2:	4a18      	ldr	r2, [pc, #96]	; (f544 <edbg_eui_read_eui64+0x104>)
    f4e4:	9202      	str	r2, [sp, #8]
  packet.data_length = sizeof(readbuf);
    f4e6:	2280      	movs	r2, #128	; 0x80
    f4e8:	0052      	lsls	r2, r2, #1
    f4ea:	805a      	strh	r2, [r3, #2]
  while(i2c_master_read_packet_wait(&i2c_master_instance, &packet) !=
    f4ec:	4d0d      	ldr	r5, [pc, #52]	; (f524 <edbg_eui_read_eui64+0xe4>)
    f4ee:	4e16      	ldr	r6, [pc, #88]	; (f548 <edbg_eui_read_eui64+0x108>)
    f4f0:	e007      	b.n	f502 <edbg_eui_read_eui64+0xc2>
         STATUS_OK) {
    /* Increment timeout counter and check if timed out. */
    if(timeout++ == TIMEOUT) {
    f4f2:	3401      	adds	r4, #1
    f4f4:	4b10      	ldr	r3, [pc, #64]	; (f538 <edbg_eui_read_eui64+0xf8>)
    f4f6:	429c      	cmp	r4, r3
    f4f8:	d103      	bne.n	f502 <edbg_eui_read_eui64+0xc2>
      printf("Timeout 2\n\r");
    f4fa:	4814      	ldr	r0, [pc, #80]	; (f54c <edbg_eui_read_eui64+0x10c>)
    f4fc:	4b10      	ldr	r3, [pc, #64]	; (f540 <edbg_eui_read_eui64+0x100>)
    f4fe:	4798      	blx	r3
      break;
    f500:	e004      	b.n	f50c <edbg_eui_read_eui64+0xcc>
    }
  }

  packet.data = readbuf;
  packet.data_length = sizeof(readbuf);
  while(i2c_master_read_packet_wait(&i2c_master_instance, &packet) !=
    f502:	1c28      	adds	r0, r5, #0
    f504:	a901      	add	r1, sp, #4
    f506:	47b0      	blx	r6
    f508:	2800      	cmp	r0, #0
    f50a:	d1f2      	bne.n	f4f2 <edbg_eui_read_eui64+0xb2>
  /*  for(i = 0; i < LEN_EUI; i++) {
    printf("0x%02x ", readbuf[i]);
  }
  
  printf("\n\r");*/
  i2c_master_reset(&i2c_master_instance);
    f50c:	4805      	ldr	r0, [pc, #20]	; (f524 <edbg_eui_read_eui64+0xe4>)
    f50e:	4b10      	ldr	r3, [pc, #64]	; (f550 <edbg_eui_read_eui64+0x110>)
    f510:	4798      	blx	r3
  return readbuf;
}
    f512:	480c      	ldr	r0, [pc, #48]	; (f544 <edbg_eui_read_eui64+0x104>)
    f514:	b010      	add	sp, #64	; 0x40
    f516:	bd70      	pop	{r4, r5, r6, pc}
    f518:	00000d48 	.word	0x00000d48
    f51c:	00100002 	.word	0x00100002
    f520:	00110002 	.word	0x00110002
    f524:	20003500 	.word	0x20003500
    f528:	42000c00 	.word	0x42000c00
    f52c:	00000765 	.word	0x00000765
    f530:	00012d4c 	.word	0x00012d4c
    f534:	00000c39 	.word	0x00000c39
    f538:	000003e9 	.word	0x000003e9
    f53c:	00012d58 	.word	0x00012d58
    f540:	00010931 	.word	0x00010931
    f544:	20003400 	.word	0x20003400
    f548:	00000c29 	.word	0x00000c29
    f54c:	00012d64 	.word	0x00012d64
    f550:	0000091d 	.word	0x0000091d

0000f554 <flash_init>:
#define PRINTF(...)
#endif
/*---------------------------------------------------------------------------*/
void
flash_init(void)
{
    f554:	b500      	push	{lr}
    f556:	b083      	sub	sp, #12
{
	/* Sanity check the parameters */
	Assert(config);

	/* Write the default configuration for the NVM configuration */
	config->sleep_power_mode  = NVM_SLEEP_POWER_MODE_WAKEONACCESS;
    f558:	2200      	movs	r2, #0
    f55a:	466b      	mov	r3, sp
    f55c:	701a      	strb	r2, [r3, #0]
	config->manual_page_write = false;
    f55e:	705a      	strb	r2, [r3, #1]
	config->wait_states       = NVMCTRL->CTRLB.bit.RWS;
    f560:	4b06      	ldr	r3, [pc, #24]	; (f57c <flash_init+0x28>)
    f562:	685b      	ldr	r3, [r3, #4]
    f564:	06db      	lsls	r3, r3, #27
    f566:	0f1b      	lsrs	r3, r3, #28
    f568:	4669      	mov	r1, sp
    f56a:	708b      	strb	r3, [r1, #2]
	config->disable_cache     = false;
    f56c:	70ca      	strb	r2, [r1, #3]
	config->cache_readmode    = NVM_CACHE_READMODE_NO_MISS_PENALTY;
    f56e:	710a      	strb	r2, [r1, #4]
#if 1
  struct nvm_config nvm_conf;
  nvm_get_config_defaults(&nvm_conf);
  nvm_set_config(&nvm_conf);
    f570:	4668      	mov	r0, sp
    f572:	4b03      	ldr	r3, [pc, #12]	; (f580 <flash_init+0x2c>)
    f574:	4798      	blx	r3
#endif
}
    f576:	b003      	add	sp, #12
    f578:	bd00      	pop	{pc}
    f57a:	46c0      	nop			; (mov r8, r8)
    f57c:	41004000 	.word	0x41004000
    f580:	00000495 	.word	0x00000495

0000f584 <leds_arch_init>:
#include "port.h"
//#include "samr21_xplained_pro.h"
/*---------------------------------------------------------------------------*/
void
leds_arch_init(void)
{
    f584:	b500      	push	{lr}
    f586:	b083      	sub	sp, #12
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
	config->input_pull = PORT_PIN_PULL_UP;
    f588:	a901      	add	r1, sp, #4
    f58a:	2301      	movs	r3, #1
    f58c:	704b      	strb	r3, [r1, #1]
	config->powersave  = false;
    f58e:	2200      	movs	r2, #0
    f590:	708a      	strb	r2, [r1, #2]
  /* Configure pins as output, turn LED off */
  struct port_config pin_conf;
  port_get_config_defaults(&pin_conf);
  pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
    f592:	700b      	strb	r3, [r1, #0]
  port_pin_set_config(LED_0_PIN, &pin_conf);
    f594:	2013      	movs	r0, #19
    f596:	4b04      	ldr	r3, [pc, #16]	; (f5a8 <leds_arch_init+0x24>)
    f598:	4798      	blx	r3
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
    f59a:	2280      	movs	r2, #128	; 0x80
    f59c:	0312      	lsls	r2, r2, #12
    f59e:	4b03      	ldr	r3, [pc, #12]	; (f5ac <leds_arch_init+0x28>)
    f5a0:	619a      	str	r2, [r3, #24]
  port_pin_set_output_level(LED_0_PIN, LED_0_INACTIVE);
}
    f5a2:	b003      	add	sp, #12
    f5a4:	bd00      	pop	{pc}
    f5a6:	46c0      	nop			; (mov r8, r8)
    f5a8:	0000051d 	.word	0x0000051d
    f5ac:	41004400 	.word	0x41004400

0000f5b0 <leds_arch_set>:
}
/*---------------------------------------------------------------------------*/
void
leds_arch_set(unsigned char leds)
{
  if((leds & (LEDS_ALL)) != 0) {
    f5b0:	0783      	lsls	r3, r0, #30
    f5b2:	d004      	beq.n	f5be <leds_arch_set+0xe>
	} else {
		port_base->OUTCLR.reg = pin_mask;
    f5b4:	2280      	movs	r2, #128	; 0x80
    f5b6:	0312      	lsls	r2, r2, #12
    f5b8:	4b03      	ldr	r3, [pc, #12]	; (f5c8 <leds_arch_set+0x18>)
    f5ba:	615a      	str	r2, [r3, #20]
    f5bc:	e003      	b.n	f5c6 <leds_arch_set+0x16>
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
    f5be:	2280      	movs	r2, #128	; 0x80
    f5c0:	0312      	lsls	r2, r2, #12
    f5c2:	4b01      	ldr	r3, [pc, #4]	; (f5c8 <leds_arch_set+0x18>)
    f5c4:	619a      	str	r2, [r3, #24]
    port_pin_set_output_level(LED_0_PIN, 0);
  } else {
    /* Turn off */
    port_pin_set_output_level(LED_0_PIN, 1);
  }
}
    f5c6:	4770      	bx	lr
    f5c8:	41004400 	.word	0x41004400

0000f5cc <node_id_restore>:
static const uint8_t magic_bytes[] = {0xde, 0xad, 0xbe, 0xef};
/*---------------------------------------------------------------------------*/
void
node_id_restore(void)
{
  if(node_id != 0) {
    f5cc:	4b11      	ldr	r3, [pc, #68]	; (f614 <node_id_restore+0x48>)
    f5ce:	881b      	ldrh	r3, [r3, #0]
    f5d0:	2b00      	cmp	r3, #0
    f5d2:	d004      	beq.n	f5de <node_id_restore+0x12>
    node_mac[6] = node_id >> 8;
    f5d4:	4a10      	ldr	r2, [pc, #64]	; (f618 <node_id_restore+0x4c>)
    f5d6:	0a19      	lsrs	r1, r3, #8
    f5d8:	7191      	strb	r1, [r2, #6]
    node_mac[7] = node_id & 0xff;;
    f5da:	71d3      	strb	r3, [r2, #7]
    return;
    f5dc:	e018      	b.n	f610 <node_id_restore+0x44>
  }
  /* set node ID */
  node_id = node_mac[7] | (node_mac[6] << 2);
    f5de:	4b0e      	ldr	r3, [pc, #56]	; (f618 <node_id_restore+0x4c>)
    f5e0:	799a      	ldrb	r2, [r3, #6]
    f5e2:	0092      	lsls	r2, r2, #2
    f5e4:	79d9      	ldrb	r1, [r3, #7]
    f5e6:	430a      	orrs	r2, r1
    f5e8:	490a      	ldr	r1, [pc, #40]	; (f614 <node_id_restore+0x48>)
    f5ea:	800a      	strh	r2, [r1, #0]

  node_mac[0] = (*SAMR21_ADDR0) >> 24;
    f5ec:	490b      	ldr	r1, [pc, #44]	; (f61c <node_id_restore+0x50>)
    f5ee:	2200      	movs	r2, #0
    f5f0:	701a      	strb	r2, [r3, #0]
  node_mac[1] = (*SAMR21_ADDR0) >> 16;
    f5f2:	705a      	strb	r2, [r3, #1]
  node_mac[2] = (*SAMR21_ADDR0) >> 8;
    f5f4:	880a      	ldrh	r2, [r1, #0]
    f5f6:	0a12      	lsrs	r2, r2, #8
    f5f8:	709a      	strb	r2, [r3, #2]
  node_mac[3] = (*SAMR21_ADDR0) & 0xff;
    f5fa:	880a      	ldrh	r2, [r1, #0]
    f5fc:	70da      	strb	r2, [r3, #3]
  node_mac[4] = (*SAMR21_ADDR1) >> 24;
    f5fe:	4908      	ldr	r1, [pc, #32]	; (f620 <node_id_restore+0x54>)
    f600:	2200      	movs	r2, #0
    f602:	711a      	strb	r2, [r3, #4]
  node_mac[5] = (*SAMR21_ADDR1) >> 16;
    f604:	715a      	strb	r2, [r3, #5]
  node_mac[6] = (*SAMR21_ADDR1) >> 8;
    f606:	880a      	ldrh	r2, [r1, #0]
    f608:	0a12      	lsrs	r2, r2, #8
    f60a:	719a      	strb	r2, [r3, #6]
  node_mac[7] = (*SAMR21_ADDR1) & 0xff;
    f60c:	880a      	ldrh	r2, [r1, #0]
    f60e:	71da      	strb	r2, [r3, #7]
  PRINTF("Node MAC is %u.%u.%u.%u.%u.%u.%u.%u.\n\r", 
    node_mac[0], node_mac[1], node_mac[2], node_mac[3], node_mac[4], node_mac[5],
    node_mac[6], node_mac[7]);
  PRINTF("Node ID is %u\n\r", node_id);
}
    f610:	4770      	bx	lr
    f612:	46c0      	nop			; (mov r8, r8)
    f614:	20001ee4 	.word	0x20001ee4
    f618:	2000350c 	.word	0x2000350c
    f61c:	0080a00c 	.word	0x0080a00c
    f620:	0080a040 	.word	0x0080a040

0000f624 <clock_irq_callback>:
void _TC3_Handler(void);
#define TC3_WAIT_BUSY() while(REG_TC3_STATUS & TC_STATUS_SYNCBUSY)//rtc
/*---------------------------------------------------------------------------*/
static void
clock_irq_callback( struct tc_module *const module_inst)
{ 
    f624:	b508      	push	{r3, lr}
 // ENERGEST_ON(ENERGEST_TYPE_IRQ);

  ticks++;
    f626:	4b09      	ldr	r3, [pc, #36]	; (f64c <clock_irq_callback+0x28>)
    f628:	681a      	ldr	r2, [r3, #0]
    f62a:	3201      	adds	r2, #1
    f62c:	601a      	str	r2, [r3, #0]
  //port_pin_toggle_output_level(PIN_PA23);
  if((ticks % CLOCK_SECOND) == 0) {
    f62e:	681b      	ldr	r3, [r3, #0]
    f630:	065b      	lsls	r3, r3, #25
    f632:	d103      	bne.n	f63c <clock_irq_callback+0x18>
    seconds++;
    f634:	4a06      	ldr	r2, [pc, #24]	; (f650 <clock_irq_callback+0x2c>)
    f636:	6813      	ldr	r3, [r2, #0]
    f638:	3301      	adds	r3, #1
    f63a:	6013      	str	r3, [r2, #0]
   //energest_flush();
    //    printf("seconds, ticks %d\n\r", tc_get_count_value(&tc_instance));
  }
  if(etimer_pending()) {
    f63c:	4b05      	ldr	r3, [pc, #20]	; (f654 <clock_irq_callback+0x30>)
    f63e:	4798      	blx	r3
    f640:	2800      	cmp	r0, #0
    f642:	d001      	beq.n	f648 <clock_irq_callback+0x24>
    etimer_request_poll();
    f644:	4b04      	ldr	r3, [pc, #16]	; (f658 <clock_irq_callback+0x34>)
    f646:	4798      	blx	r3
  }

  //ENERGEST_OFF(ENERGEST_TYPE_IRQ);
  
}
    f648:	bd08      	pop	{r3, pc}
    f64a:	46c0      	nop			; (mov r8, r8)
    f64c:	20001eec 	.word	0x20001eec
    f650:	20001ee8 	.word	0x20001ee8
    f654:	0000e965 	.word	0x0000e965
    f658:	0000e7b9 	.word	0x0000e7b9

0000f65c <clock_init>:
/*---------------------------------------------------------------------------*/
void
clock_init(void)
{
    f65c:	b510      	push	{r4, lr}
    f65e:	b08e      	sub	sp, #56	; 0x38
	/* Sanity check arguments */
	Assert(config);

	/* Write default config to config struct */
	config->clock_source               = GCLK_GENERATOR_0;
	config->counter_size               = TC_COUNTER_SIZE_16BIT;
    f660:	aa01      	add	r2, sp, #4
    f662:	2300      	movs	r3, #0
    f664:	7093      	strb	r3, [r2, #2]
	config->clock_prescaler            = TC_CLOCK_PRESCALER_DIV1;
    f666:	2100      	movs	r1, #0
    f668:	8093      	strh	r3, [r2, #4]
	config->wave_generation            = TC_WAVE_GENERATION_NORMAL_FREQ;
    f66a:	7191      	strb	r1, [r2, #6]
	config->reload_action              = TC_RELOAD_ACTION_GCLK;
    f66c:	8113      	strh	r3, [r2, #8]
	config->run_in_standby             = false;
    f66e:	7051      	strb	r1, [r2, #1]

	config->waveform_invert_output     = TC_WAVEFORM_INVERT_OUTPUT_NONE;
    f670:	7291      	strb	r1, [r2, #10]
	config->enable_capture_on_channel[TC_COMPARE_CAPTURE_CHANNEL_0] = false;
    f672:	72d1      	strb	r1, [r2, #11]
	config->enable_capture_on_channel[TC_COMPARE_CAPTURE_CHANNEL_1] = false;
    f674:	7311      	strb	r1, [r2, #12]

	config->count_direction            = TC_COUNT_DIRECTION_UP;
    f676:	7391      	strb	r1, [r2, #14]
	config->oneshot                    = false;
    f678:	7351      	strb	r1, [r2, #13]

	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].enabled = false;
    f67a:	7411      	strb	r1, [r2, #16]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].pin_out = 0;
    f67c:	6153      	str	r3, [r2, #20]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].pin_mux = 0;
    f67e:	6193      	str	r3, [r2, #24]

	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].enabled = false;
    f680:	7711      	strb	r1, [r2, #28]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].pin_out = 0;
    f682:	6213      	str	r3, [r2, #32]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].pin_mux = 0;
    f684:	6253      	str	r3, [r2, #36]	; 0x24

	config->counter_16_bit.value                   = 0x0000;
    f686:	8513      	strh	r3, [r2, #40]	; 0x28
	config->counter_16_bit.compare_capture_channel\
		[TC_COMPARE_CAPTURE_CHANNEL_0]                        = 0x0000;
	config->counter_16_bit.compare_capture_channel\
		[TC_COMPARE_CAPTURE_CHANNEL_1]                        = 0x0000;
    f688:	8593      	strh	r3, [r2, #44]	; 0x2c
#define TIMER         TC3
  
  struct tc_config cfg;
  tc_get_config_defaults(&cfg);

  cfg.clock_source = GCLK_GENERATOR_5;
    f68a:	3305      	adds	r3, #5
    f68c:	7013      	strb	r3, [r2, #0]
  cfg.clock_prescaler = TC_CLOCK_PRESCALER_DIV1;
  cfg.run_in_standby = false;

  cfg.counter_16_bit.compare_capture_channel[0] = TIMER_PERIOD;
    f68e:	3b06      	subs	r3, #6
    f690:	8553      	strh	r3, [r2, #42]	; 0x2a
  tc_init(&tc_instance, TIMER, &cfg);
    f692:	4c13      	ldr	r4, [pc, #76]	; (f6e0 <clock_init+0x84>)
    f694:	1c20      	adds	r0, r4, #0
    f696:	4913      	ldr	r1, [pc, #76]	; (f6e4 <clock_init+0x88>)
    f698:	4b13      	ldr	r3, [pc, #76]	; (f6e8 <clock_init+0x8c>)
    f69a:	4798      	blx	r3
  /*  tc_register_callback(&tc_instance, clock_irq_callback, TC_CALLBACK_OVERFLOW);*/
  tc_register_callback(&tc_instance, clock_irq_callback, TC_CALLBACK_CC_CHANNEL0);
    f69c:	1c20      	adds	r0, r4, #0
    f69e:	4913      	ldr	r1, [pc, #76]	; (f6ec <clock_init+0x90>)
    f6a0:	2202      	movs	r2, #2
    f6a2:	4b13      	ldr	r3, [pc, #76]	; (f6f0 <clock_init+0x94>)
    f6a4:	4798      	blx	r3
	/* Sanity check arguments */
	Assert(module);


	/* Enable interrupts for this TC module */
	system_interrupt_enable(_tc_interrupt_get_interrupt_vector(_tc_get_inst_index(module->hw)));
    f6a6:	6820      	ldr	r0, [r4, #0]
    f6a8:	4b12      	ldr	r3, [pc, #72]	; (f6f4 <clock_init+0x98>)
    f6aa:	4798      	blx	r3
	static uint8_t tc_interrupt_vectors[TC_INST_NUM] =
		{
			MRECURSION(TC_INST_NUM, _TC_INTERRUPT_VECT_NUM, TC_INST_MAX_ID)
		};

	return (enum system_interrupt_vector)tc_interrupt_vectors[inst_num];
    f6ac:	4b12      	ldr	r3, [pc, #72]	; (f6f8 <clock_init+0x9c>)
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    f6ae:	5c1b      	ldrb	r3, [r3, r0]
    f6b0:	221f      	movs	r2, #31
    f6b2:	4013      	ands	r3, r2
    f6b4:	3a1e      	subs	r2, #30
    f6b6:	409a      	lsls	r2, r3
    f6b8:	1c13      	adds	r3, r2, #0
    f6ba:	4a10      	ldr	r2, [pc, #64]	; (f6fc <clock_init+0xa0>)
    f6bc:	6013      	str	r3, [r2, #0]
	/* Enable interrupts for this TC module */
	system_interrupt_enable(_tc_interrupt_get_interrupt_vector(_tc_get_inst_index(module->hw)));

	/* Enable callback */
	if (callback_type == TC_CALLBACK_CC_CHANNEL0) {
		module->enable_callback_mask |= TC_INTFLAG_MC(1);
    f6be:	7e62      	ldrb	r2, [r4, #25]
    f6c0:	2310      	movs	r3, #16
    f6c2:	4313      	orrs	r3, r2
    f6c4:	7663      	strb	r3, [r4, #25]
		module->hw->COUNT8.INTENSET.reg = TC_INTFLAG_MC(1);
    f6c6:	6822      	ldr	r2, [r4, #0]
    f6c8:	2310      	movs	r3, #16
    f6ca:	7353      	strb	r3, [r2, #13]
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);

	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    f6cc:	217f      	movs	r1, #127	; 0x7f
    f6ce:	7bd3      	ldrb	r3, [r2, #15]
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);

	while (tc_is_syncing(module_inst)) {
    f6d0:	438b      	bics	r3, r1
    f6d2:	d1fc      	bne.n	f6ce <clock_init+0x72>
		/* Wait for sync */
	}

	/* Enable TC module */
	tc_module->CTRLA.reg |= TC_CTRLA_ENABLE;
    f6d4:	8811      	ldrh	r1, [r2, #0]
    f6d6:	3302      	adds	r3, #2
    f6d8:	430b      	orrs	r3, r1
    f6da:	8013      	strh	r3, [r2, #0]
      tc_enable_callback(&tc_instance, TC_CALLBACK_ERROR);*/
  
  tc_enable(&tc_instance);

 
}
    f6dc:	b00e      	add	sp, #56	; 0x38
    f6de:	bd10      	pop	{r4, pc}
    f6e0:	20001ef0 	.word	0x20001ef0
    f6e4:	42002c00 	.word	0x42002c00
    f6e8:	0000235d 	.word	0x0000235d
    f6ec:	0000f625 	.word	0x0000f625
    f6f0:	00002659 	.word	0x00002659
    f6f4:	00002325 	.word	0x00002325
    f6f8:	00012d70 	.word	0x00012d70
    f6fc:	e000e100 	.word	0xe000e100

0000f700 <clock_time>:
/*---------------------------------------------------------------------------*/
clock_time_t
clock_time(void)
{
    f700:	b510      	push	{r4, lr}
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    f702:	4b04      	ldr	r3, [pc, #16]	; (f714 <clock_time+0x14>)
    f704:	4798      	blx	r3
  //  printf("0x%04x\n\r", tc_get_count_value(&tc_instance));
  //  printf("clock_time ticks %d\n\r", ticks);
  clock_time_t t;

  system_interrupt_enter_critical_section();
  t = ticks;
    f706:	4b04      	ldr	r3, [pc, #16]	; (f718 <clock_time+0x18>)
    f708:	681c      	ldr	r4, [r3, #0]
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    f70a:	4b04      	ldr	r3, [pc, #16]	; (f71c <clock_time+0x1c>)
    f70c:	4798      	blx	r3
  system_interrupt_leave_critical_section();
  return t;
}
    f70e:	1c20      	adds	r0, r4, #0
    f710:	bd10      	pop	{r4, pc}
    f712:	46c0      	nop			; (mov r8, r8)
    f714:	000001a5 	.word	0x000001a5
    f718:	20001eec 	.word	0x20001eec
    f71c:	000001e5 	.word	0x000001e5

0000f720 <clock_seconds>:
/*---------------------------------------------------------------------------*/
unsigned long 
clock_seconds(void)
{
  return seconds;
    f720:	4b01      	ldr	r3, [pc, #4]	; (f728 <clock_seconds+0x8>)
    f722:	6818      	ldr	r0, [r3, #0]
}
    f724:	4770      	bx	lr
    f726:	46c0      	nop			; (mov r8, r8)
    f728:	20001ee8 	.word	0x20001ee8

0000f72c <rtc_overflow_callback>:
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
    f72c:	4b07      	ldr	r3, [pc, #28]	; (f74c <rtc_overflow_callback+0x20>)
    f72e:	681a      	ldr	r2, [r3, #0]
 * \param[in] vector  Interrupt vector to disable
 */
static inline void system_interrupt_disable(
		const enum system_interrupt_vector vector)
{
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    f730:	2008      	movs	r0, #8
    f732:	2380      	movs	r3, #128	; 0x80
    f734:	4906      	ldr	r1, [pc, #24]	; (f750 <rtc_overflow_callback+0x24>)
    f736:	50c8      	str	r0, [r1, r3]
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;

        if (rtc_module->MODE0.STATUS.reg & RTC_STATUS_SYNCBUSY) {
    f738:	7a93      	ldrb	r3, [r2, #10]

#if RTC_COUNT_ASYNC == true
	system_interrupt_disable(SYSTEM_INTERRUPT_MODULE_RTC);
#endif

	while (rtc_count_is_syncing(module)) {
    f73a:	b25b      	sxtb	r3, r3
    f73c:	2b00      	cmp	r3, #0
    f73e:	dbfb      	blt.n	f738 <rtc_overflow_callback+0xc>
		/* Wait for synchronization */
	}

	/* Disable RTC module. */
	rtc_module->MODE0.CTRL.reg &= ~RTC_MODE0_CTRL_ENABLE;
    f740:	8813      	ldrh	r3, [r2, #0]
    f742:	2102      	movs	r1, #2
    f744:	438b      	bics	r3, r1
    f746:	8013      	strh	r3, [r2, #0]
	//ENERGEST_ON(ENERGEST_TYPE_IRQ);	
	rtc_count_disable(&rtc_instance);
	//ENERGEST_OFF(ENERGEST_TYPE_IRQ);
	
	//! [overflow_act]
}
    f748:	4770      	bx	lr
    f74a:	46c0      	nop			; (mov r8, r8)
    f74c:	20003518 	.word	0x20003518
    f750:	e000e100 	.word	0xe000e100

0000f754 <rtimer_irq_callback>:
	//! [en_callback]
}

static void
rtimer_irq_callback( struct tc_module *const module_inst)
{
    f754:	b508      	push	{r3, lr}
	//ENERGEST_ON(ENERGEST_TYPE_IRQ);
  // rtimer_expired=1;
	rtimer_run_next();
    f756:	4b01      	ldr	r3, [pc, #4]	; (f75c <rtimer_irq_callback+0x8>)
    f758:	4798      	blx	r3
	//ENERGEST_OFF(ENERGEST_TYPE_IRQ);
}
    f75a:	bd08      	pop	{r3, pc}
    f75c:	0000ecd1 	.word	0x0000ecd1

0000f760 <configure_rtc_count>:
}
//! [callback]

//! [initialize_rtc]
void configure_rtc_count(void)
{
    f760:	b500      	push	{lr}
    f762:	b085      	sub	sp, #20
	config->prescaler           = RTC_COUNT_PRESCALER_DIV_1024;
	config->mode                = RTC_COUNT_MODE_32BIT;
	config->clear_on_match      = false;
	config->continuously_update = false;
	for (uint8_t i = 0; i < RTC_NUM_OF_COMP16; i++) {
		config->compare_values[i] = 0;
    f764:	2300      	movs	r3, #0
    f766:	9302      	str	r3, [sp, #8]
    f768:	9303      	str	r3, [sp, #12]
	struct rtc_count_config config_rtc_count;
	rtc_count_get_config_defaults(&config_rtc_count);
	//! [init_conf]

	//! [set_config]
	config_rtc_count.prescaler           = RTC_COUNT_PRESCALER_DIV_32;
    f76a:	22a0      	movs	r2, #160	; 0xa0
    f76c:	00d2      	lsls	r2, r2, #3
    f76e:	4669      	mov	r1, sp
    f770:	800a      	strh	r2, [r1, #0]
	config_rtc_count.mode                = RTC_COUNT_MODE_16BIT;
    f772:	466a      	mov	r2, sp
    f774:	708b      	strb	r3, [r1, #2]
	config_rtc_count.clear_on_match      = true;
    f776:	3301      	adds	r3, #1
    f778:	70cb      	strb	r3, [r1, #3]
	config_rtc_count.continuously_update = true;
    f77a:	710b      	strb	r3, [r1, #4]
	//! [set_config]
	//! [init_rtc]
	rtc_count_init(&rtc_instance, RTC, &config_rtc_count);
    f77c:	4802      	ldr	r0, [pc, #8]	; (f788 <configure_rtc_count+0x28>)
    f77e:	4903      	ldr	r1, [pc, #12]	; (f78c <configure_rtc_count+0x2c>)
    f780:	4b03      	ldr	r3, [pc, #12]	; (f790 <configure_rtc_count+0x30>)
    f782:	4798      	blx	r3
	//! [init_rtc]

	//! [enable]
	
	//! [enable]
}
    f784:	b005      	add	sp, #20
    f786:	bd00      	pop	{pc}
    f788:	20003518 	.word	0x20003518
    f78c:	40001400 	.word	0x40001400
    f790:	000005c5 	.word	0x000005c5

0000f794 <configure_rtc_callbacks>:
//! [initialize_rtc]

//! [setup_callback]
void configure_rtc_callbacks(void)
{
    f794:	b510      	push	{r4, lr}
	//! [reg_callback]
	rtc_count_register_callback(
    f796:	4c05      	ldr	r4, [pc, #20]	; (f7ac <configure_rtc_callbacks+0x18>)
    f798:	1c20      	adds	r0, r4, #0
    f79a:	4905      	ldr	r1, [pc, #20]	; (f7b0 <configure_rtc_callbacks+0x1c>)
    f79c:	2202      	movs	r2, #2
    f79e:	4b05      	ldr	r3, [pc, #20]	; (f7b4 <configure_rtc_callbacks+0x20>)
    f7a0:	4798      	blx	r3
	&rtc_instance, rtc_overflow_callback, RTC_COUNT_CALLBACK_OVERFLOW);
	//! [reg_callback]
	//! [en_callback]
	rtc_count_enable_callback(&rtc_instance, RTC_COUNT_CALLBACK_OVERFLOW);
    f7a2:	1c20      	adds	r0, r4, #0
    f7a4:	2102      	movs	r1, #2
    f7a6:	4b04      	ldr	r3, [pc, #16]	; (f7b8 <configure_rtc_callbacks+0x24>)
    f7a8:	4798      	blx	r3
	//! [en_callback]
}
    f7aa:	bd10      	pop	{r4, pc}
    f7ac:	20003518 	.word	0x20003518
    f7b0:	0000f72d 	.word	0x0000f72d
    f7b4:	000006a5 	.word	0x000006a5
    f7b8:	000006e1 	.word	0x000006e1

0000f7bc <rtimer_arch_init>:

	ENERGEST_OFF(ENERGEST_TYPE_IRQ);
}
void
rtimer_arch_init(void)
{
    f7bc:	b5f0      	push	{r4, r5, r6, r7, lr}
    f7be:	b08f      	sub	sp, #60	; 0x3c

	/* Write default config to config struct */
	config->clock_source               = GCLK_GENERATOR_0;
	config->counter_size               = TC_COUNTER_SIZE_16BIT;
	config->clock_prescaler            = TC_CLOCK_PRESCALER_DIV1;
	config->wave_generation            = TC_WAVE_GENERATION_NORMAL_FREQ;
    f7c0:	aa01      	add	r2, sp, #4
    f7c2:	2300      	movs	r3, #0
    f7c4:	2100      	movs	r1, #0
    f7c6:	7193      	strb	r3, [r2, #6]
	config->reload_action              = TC_RELOAD_ACTION_GCLK;
    f7c8:	8113      	strh	r3, [r2, #8]
	config->run_in_standby             = false;
    f7ca:	2000      	movs	r0, #0
    f7cc:	7050      	strb	r0, [r2, #1]

	config->waveform_invert_output     = TC_WAVEFORM_INVERT_OUTPUT_NONE;
    f7ce:	7291      	strb	r1, [r2, #10]
	config->enable_capture_on_channel[TC_COMPARE_CAPTURE_CHANNEL_0] = false;
    f7d0:	72d1      	strb	r1, [r2, #11]
	config->enable_capture_on_channel[TC_COMPARE_CAPTURE_CHANNEL_1] = false;
    f7d2:	7311      	strb	r1, [r2, #12]

	config->count_direction            = TC_COUNT_DIRECTION_UP;
    f7d4:	7391      	strb	r1, [r2, #14]
	config->oneshot                    = false;
    f7d6:	7351      	strb	r1, [r2, #13]

	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].enabled = false;
    f7d8:	7411      	strb	r1, [r2, #16]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].pin_out = 0;
    f7da:	6153      	str	r3, [r2, #20]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].pin_mux = 0;
    f7dc:	6193      	str	r3, [r2, #24]

	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].enabled = false;
    f7de:	7711      	strb	r1, [r2, #28]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].pin_out = 0;
    f7e0:	6213      	str	r3, [r2, #32]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].pin_mux = 0;
    f7e2:	6253      	str	r3, [r2, #36]	; 0x24

	config->counter_16_bit.value                   = 0x0000;
    f7e4:	8513      	strh	r3, [r2, #40]	; 0x28
	config->counter_16_bit.compare_capture_channel\
		[TC_COMPARE_CAPTURE_CHANNEL_0]                        = 0x0000;
    f7e6:	8553      	strh	r3, [r2, #42]	; 0x2a
	config->counter_16_bit.compare_capture_channel\
		[TC_COMPARE_CAPTURE_CHANNEL_1]                        = 0x0000;
    f7e8:	8593      	strh	r3, [r2, #44]	; 0x2c
#define TIMER         TC4

  struct tc_config cfg;
  tc_get_config_defaults(&cfg);

  cfg.clock_source = GCLK_GENERATOR_5;
    f7ea:	3305      	adds	r3, #5
    f7ec:	7013      	strb	r3, [r2, #0]
  cfg.clock_prescaler = TC_CLOCK_PRESCALER_DIV256;
    f7ee:	23c0      	movs	r3, #192	; 0xc0
    f7f0:	00db      	lsls	r3, r3, #3
    f7f2:	8093      	strh	r3, [r2, #4]
  cfg.run_in_standby = false;
  cfg.counter_size = TC_COUNTER_SIZE_32BIT;
    f7f4:	2308      	movs	r3, #8
    f7f6:	7093      	strb	r3, [r2, #2]

  int ret = tc_init(&tc_instance, TIMER, &cfg);
    f7f8:	4c19      	ldr	r4, [pc, #100]	; (f860 <rtimer_arch_init+0xa4>)
    f7fa:	4d1a      	ldr	r5, [pc, #104]	; (f864 <rtimer_arch_init+0xa8>)
    f7fc:	1c20      	adds	r0, r4, #0
    f7fe:	1c29      	adds	r1, r5, #0
    f800:	4b19      	ldr	r3, [pc, #100]	; (f868 <rtimer_arch_init+0xac>)
    f802:	4798      	blx	r3
  tc_register_callback(&tc_instance, rtimer_irq_callback, TC_CALLBACK_CC_CHANNEL0);
    f804:	1c20      	adds	r0, r4, #0
    f806:	4919      	ldr	r1, [pc, #100]	; (f86c <rtimer_arch_init+0xb0>)
    f808:	2202      	movs	r2, #2
    f80a:	4b19      	ldr	r3, [pc, #100]	; (f870 <rtimer_arch_init+0xb4>)
    f80c:	4798      	blx	r3
	/* Sanity check arguments */
	Assert(module);


	/* Enable interrupts for this TC module */
	system_interrupt_enable(_tc_interrupt_get_interrupt_vector(_tc_get_inst_index(module->hw)));
    f80e:	6820      	ldr	r0, [r4, #0]
    f810:	4f18      	ldr	r7, [pc, #96]	; (f874 <rtimer_arch_init+0xb8>)
    f812:	47b8      	blx	r7
	static uint8_t tc_interrupt_vectors[TC_INST_NUM] =
		{
			MRECURSION(TC_INST_NUM, _TC_INTERRUPT_VECT_NUM, TC_INST_MAX_ID)
		};

	return (enum system_interrupt_vector)tc_interrupt_vectors[inst_num];
    f814:	4e18      	ldr	r6, [pc, #96]	; (f878 <rtimer_arch_init+0xbc>)
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    f816:	5c33      	ldrb	r3, [r6, r0]
    f818:	221f      	movs	r2, #31
    f81a:	4013      	ands	r3, r2
    f81c:	3a1e      	subs	r2, #30
    f81e:	409a      	lsls	r2, r3
    f820:	1c13      	adds	r3, r2, #0
    f822:	4a16      	ldr	r2, [pc, #88]	; (f87c <rtimer_arch_init+0xc0>)
    f824:	6013      	str	r3, [r2, #0]
	/* Enable interrupts for this TC module */
	system_interrupt_enable(_tc_interrupt_get_interrupt_vector(_tc_get_inst_index(module->hw)));

	/* Enable callback */
	if (callback_type == TC_CALLBACK_CC_CHANNEL0) {
		module->enable_callback_mask |= TC_INTFLAG_MC(1);
    f826:	7e62      	ldrb	r2, [r4, #25]
    f828:	2310      	movs	r3, #16
    f82a:	4313      	orrs	r3, r2
    f82c:	7663      	strb	r3, [r4, #25]
		module->hw->COUNT8.INTENSET.reg = TC_INTFLAG_MC(1);
    f82e:	2310      	movs	r3, #16
    f830:	6822      	ldr	r2, [r4, #0]
    f832:	7353      	strb	r3, [r2, #13]
  tc_enable_callback(&tc_instance, TC_CALLBACK_CC_CHANNEL0);
  system_interrupt_set_priority(_tc_interrupt_get_interrupt_vector(_tc_get_inst_index(TC4)),SYSTEM_INTERRUPT_PRIORITY_LEVEL_1);//tc4 priority  
    f834:	1c28      	adds	r0, r5, #0
    f836:	47b8      	blx	r7
    f838:	5630      	ldrsb	r0, [r6, r0]
    f83a:	2101      	movs	r1, #1
    f83c:	4b10      	ldr	r3, [pc, #64]	; (f880 <rtimer_arch_init+0xc4>)
    f83e:	4798      	blx	r3
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    f840:	6822      	ldr	r2, [r4, #0]
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);

	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    f842:	217f      	movs	r1, #127	; 0x7f
    f844:	7bd3      	ldrb	r3, [r2, #15]
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);

	while (tc_is_syncing(module_inst)) {
    f846:	438b      	bics	r3, r1
    f848:	d1fc      	bne.n	f844 <rtimer_arch_init+0x88>
		/* Wait for sync */
	}

	/* Enable TC module */
	tc_module->CTRLA.reg |= TC_CTRLA_ENABLE;
    f84a:	8811      	ldrh	r1, [r2, #0]
    f84c:	3302      	adds	r3, #2
    f84e:	430b      	orrs	r3, r1
    f850:	8013      	strh	r3, [r2, #0]
  tc_enable(&tc_instance);
  /* RTC Init */
  configure_rtc_count();
    f852:	4b0c      	ldr	r3, [pc, #48]	; (f884 <rtimer_arch_init+0xc8>)
    f854:	4798      	blx	r3
  configure_rtc_callbacks();
    f856:	4b0c      	ldr	r3, [pc, #48]	; (f888 <rtimer_arch_init+0xcc>)
    f858:	4798      	blx	r3
  //  printf("----------------------- rtimer_arch_init ret %02x\n\r", ret);
  ret = ret;  // dummy
}
    f85a:	b00f      	add	sp, #60	; 0x3c
    f85c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    f85e:	46c0      	nop			; (mov r8, r8)
    f860:	20001f0c 	.word	0x20001f0c
    f864:	42003000 	.word	0x42003000
    f868:	0000235d 	.word	0x0000235d
    f86c:	0000f755 	.word	0x0000f755
    f870:	00002659 	.word	0x00002659
    f874:	00002325 	.word	0x00002325
    f878:	00012d74 	.word	0x00012d74
    f87c:	e000e100 	.word	0xe000e100
    f880:	000021cd 	.word	0x000021cd
    f884:	0000f761 	.word	0x0000f761
    f888:	0000f795 	.word	0x0000f795

0000f88c <rtimer_arch_now>:
/*---------------------------------------------------------------------------*/
rtimer_clock_t
rtimer_arch_now(void)
{
    f88c:	b508      	push	{r3, lr}
  rtimer_clock_t t = tc_get_count_value(&tc_instance);
    f88e:	4802      	ldr	r0, [pc, #8]	; (f898 <rtimer_arch_now+0xc>)
    f890:	4b02      	ldr	r3, [pc, #8]	; (f89c <rtimer_arch_now+0x10>)
    f892:	4798      	blx	r3
  //  printf("rtimer_arch_now: t 0x%08x\n\r", t);
  return t;
}
    f894:	bd08      	pop	{r3, pc}
    f896:	46c0      	nop			; (mov r8, r8)
    f898:	20001f0c 	.word	0x20001f0c
    f89c:	000025d5 	.word	0x000025d5

0000f8a0 <rtimer_arch_schedule>:
/*---------------------------------------------------------------------------*/
void
rtimer_arch_schedule(rtimer_clock_t t)
{
    f8a0:	b510      	push	{r4, lr}
	uint32_t expiry = t + RTIMER_SYNC_VALUE- RTIMER_COMPENSATION_TICKS;
    f8a2:	300a      	adds	r0, #10
    f8a4:	1c04      	adds	r4, r0, #0
	
	
	if(RTIMER_CLOCK_LT(expiry, rtimer_arch_now())) {
    f8a6:	4b0a      	ldr	r3, [pc, #40]	; (f8d0 <rtimer_arch_schedule+0x30>)
    f8a8:	4798      	blx	r3
    f8aa:	1a20      	subs	r0, r4, r0
    f8ac:	0403      	lsls	r3, r0, #16
    f8ae:	d509      	bpl.n	f8c4 <rtimer_arch_schedule+0x24>
		/* too soon, run now instead */
		printf("rtimer: schedule too soon, executing now! %lu %lu\n\r",expiry,(uint32_t)rtimer_arch_now());
    f8b0:	4b07      	ldr	r3, [pc, #28]	; (f8d0 <rtimer_arch_schedule+0x30>)
    f8b2:	4798      	blx	r3
    f8b4:	1c02      	adds	r2, r0, #0
    f8b6:	4807      	ldr	r0, [pc, #28]	; (f8d4 <rtimer_arch_schedule+0x34>)
    f8b8:	1c21      	adds	r1, r4, #0
    f8ba:	4b07      	ldr	r3, [pc, #28]	; (f8d8 <rtimer_arch_schedule+0x38>)
    f8bc:	4798      	blx	r3
		rtimer_run_next();
    f8be:	4b07      	ldr	r3, [pc, #28]	; (f8dc <rtimer_arch_schedule+0x3c>)
    f8c0:	4798      	blx	r3
		return;
    f8c2:	e004      	b.n	f8ce <rtimer_arch_schedule+0x2e>
	///* set compare match on time t */
	//TC45_WAIT_BUSY();
	//REG_TC4_COUNT32_CC0 = expiry;
	///* enable interrupts */
	//REG_TC4_INTENSET = TC_INT_MC0;
	tc_set_compare_value(&tc_instance,TC_COMPARE_CAPTURE_CHANNEL_0,expiry);
    f8c4:	4806      	ldr	r0, [pc, #24]	; (f8e0 <rtimer_arch_schedule+0x40>)
    f8c6:	2100      	movs	r1, #0
    f8c8:	1c22      	adds	r2, r4, #0
    f8ca:	4b06      	ldr	r3, [pc, #24]	; (f8e4 <rtimer_arch_schedule+0x44>)
    f8cc:	4798      	blx	r3
}
    f8ce:	bd10      	pop	{r4, pc}
    f8d0:	0000f88d 	.word	0x0000f88d
    f8d4:	00012d78 	.word	0x00012d78
    f8d8:	00010931 	.word	0x00010931
    f8dc:	0000ecd1 	.word	0x0000ecd1
    f8e0:	20001f0c 	.word	0x20001f0c
    f8e4:	00002605 	.word	0x00002605

0000f8e8 <main>:

/*---------------------------------------------------------------------------*/

int
main(int argc, char *argv[])
{
    f8e8:	b5f0      	push	{r4, r5, r6, r7, lr}
    f8ea:	464f      	mov	r7, r9
    f8ec:	4646      	mov	r6, r8
    f8ee:	b4c0      	push	{r6, r7}
    f8f0:	b085      	sub	sp, #20
  uint8_t *eui64 = NULL;
  /* init system: clocks, board etc */

  system_init();
    f8f2:	4bb8      	ldr	r3, [pc, #736]	; (fbd4 <main+0x2ec>)
    f8f4:	4798      	blx	r3

  //init_serial();
  sio2host_init();
    f8f6:	4bb8      	ldr	r3, [pc, #736]	; (fbd8 <main+0x2f0>)
    f8f8:	4798      	blx	r3

  leds_init();
    f8fa:	4bb8      	ldr	r3, [pc, #736]	; (fbdc <main+0x2f4>)
    f8fc:	4798      	blx	r3
  leds_on(LEDS_ALL);
    f8fe:	2003      	movs	r0, #3
    f900:	4bb7      	ldr	r3, [pc, #732]	; (fbe0 <main+0x2f8>)
    f902:	4798      	blx	r3
 *
 * Enables global interrupts in the device to fire any enabled interrupt handlers.
 */
static inline void system_interrupt_enable_global(void)
{
	cpu_irq_enable();
    f904:	2201      	movs	r2, #1
    f906:	4bb7      	ldr	r3, [pc, #732]	; (fbe4 <main+0x2fc>)
    f908:	701a      	strb	r2, [r3, #0]
    f90a:	f3bf 8f5f 	dmb	sy
    f90e:	b662      	cpsie	i

  system_interrupt_enable_global();
  //system_set_sleepmode(SYSTEM_SLEEPMODE_IDLE_0); //sleepmode 2 for rtc
  flash_init();
    f910:	4bb5      	ldr	r3, [pc, #724]	; (fbe8 <main+0x300>)
    f912:	4798      	blx	r3

  delay_init();
    f914:	4bb5      	ldr	r3, [pc, #724]	; (fbec <main+0x304>)
    f916:	4798      	blx	r3
  /* Initialize Contiki and our processes. */
  
  #ifdef LOW_POWER_MODE
  configure_tc3();
  #else
  clock_init();
    f918:	4bb5      	ldr	r3, [pc, #724]	; (fbf0 <main+0x308>)
    f91a:	4798      	blx	r3
  #endif

  ctimer_init();
    f91c:	4bb5      	ldr	r3, [pc, #724]	; (fbf4 <main+0x30c>)
    f91e:	4798      	blx	r3
 

  rtimer_init();
    f920:	4bb5      	ldr	r3, [pc, #724]	; (fbf8 <main+0x310>)
    f922:	4798      	blx	r3
 //printf("\r\n B4 Watchdog init");
  
 //printf("\r\n Aft Watchdog init");
  process_init();
    f924:	4bb5      	ldr	r3, [pc, #724]	; (fbfc <main+0x314>)
    f926:	4798      	blx	r3
  process_start(&etimer_process, NULL);
    f928:	48b5      	ldr	r0, [pc, #724]	; (fc00 <main+0x318>)
    f92a:	2100      	movs	r1, #0
    f92c:	4bb5      	ldr	r3, [pc, #724]	; (fc04 <main+0x31c>)
    f92e:	4798      	blx	r3
  node_id_burn(node_id);
#endif /* BURN_NODEID */
#else/* NODE_ID */
#endif /* NODE_ID */

  node_id_restore();
    f930:	4bb5      	ldr	r3, [pc, #724]	; (fc08 <main+0x320>)
    f932:	4798      	blx	r3
  printf("\r\n\n\n\n Starting the SmartConnect-6LoWPAN \r\n Platform : Atmel IoT device \r\n\r");
    f934:	48b5      	ldr	r0, [pc, #724]	; (fc0c <main+0x324>)
    f936:	4db6      	ldr	r5, [pc, #728]	; (fc10 <main+0x328>)
    f938:	47a8      	blx	r5
 * \return     Returns nothing
 */
static void
print_reset_causes(void)
{
  uint8_t rcause = *((uint8_t *)REG_RCAUSE);
    f93a:	4bb6      	ldr	r3, [pc, #728]	; (fc14 <main+0x32c>)
    f93c:	781c      	ldrb	r4, [r3, #0]
  printf("Last reset cause: ");
    f93e:	48b6      	ldr	r0, [pc, #728]	; (fc18 <main+0x330>)
    f940:	47a8      	blx	r5
  if(rcause & (1 << 6)) {
    f942:	0663      	lsls	r3, r4, #25
    f944:	d502      	bpl.n	f94c <main+0x64>
    printf("System Reset Request\n\r");
    f946:	48b5      	ldr	r0, [pc, #724]	; (fc1c <main+0x334>)
    f948:	4bb1      	ldr	r3, [pc, #708]	; (fc10 <main+0x328>)
    f94a:	4798      	blx	r3
  }
  if(rcause & (1 << 5)) {
    f94c:	06a3      	lsls	r3, r4, #26
    f94e:	d502      	bpl.n	f956 <main+0x6e>
    printf("Watchdog Reset\n\r");
    f950:	48b3      	ldr	r0, [pc, #716]	; (fc20 <main+0x338>)
    f952:	4baf      	ldr	r3, [pc, #700]	; (fc10 <main+0x328>)
    f954:	4798      	blx	r3
  }
  if(rcause & (1 << 4)) {
    f956:	06e3      	lsls	r3, r4, #27
    f958:	d502      	bpl.n	f960 <main+0x78>
    printf("External Reset\n\r");
    f95a:	48b2      	ldr	r0, [pc, #712]	; (fc24 <main+0x33c>)
    f95c:	4bac      	ldr	r3, [pc, #688]	; (fc10 <main+0x328>)
    f95e:	4798      	blx	r3
  }
  if(rcause & (1 << 2)) {
    f960:	0763      	lsls	r3, r4, #29
    f962:	d502      	bpl.n	f96a <main+0x82>
    printf("Brown Out 33 Detector Reset\n\r");
    f964:	48b0      	ldr	r0, [pc, #704]	; (fc28 <main+0x340>)
    f966:	4baa      	ldr	r3, [pc, #680]	; (fc10 <main+0x328>)
    f968:	4798      	blx	r3
  }
  if(rcause & (1 << 1)) {
    f96a:	07a3      	lsls	r3, r4, #30
    f96c:	d502      	bpl.n	f974 <main+0x8c>
    printf("Brown Out 12 Detector Reset\n\r");
    f96e:	48af      	ldr	r0, [pc, #700]	; (fc2c <main+0x344>)
    f970:	4ba7      	ldr	r3, [pc, #668]	; (fc10 <main+0x328>)
    f972:	4798      	blx	r3
  }
  if(rcause & (1 << 0)) {
    f974:	07e3      	lsls	r3, r4, #31
    f976:	d400      	bmi.n	f97a <main+0x92>
    f978:	e10e      	b.n	fb98 <main+0x2b0>
    printf("Power-On Reset\n\r");
    f97a:	48ad      	ldr	r0, [pc, #692]	; (fc30 <main+0x348>)
    f97c:	4ba4      	ldr	r3, [pc, #656]	; (fc10 <main+0x328>)
    f97e:	4798      	blx	r3
    f980:	e10a      	b.n	fb98 <main+0x2b0>
  }
#endif  /* UIP_CONF_IPV6 */
  linkaddr_set_node_addr(&addr);
  printf("Link layer addr ");
  for(i = 0; i < sizeof(addr.u8) - 1; i++) {
    printf("%u:", addr.u8[i]);
    f982:	466b      	mov	r3, sp
    f984:	5ce1      	ldrb	r1, [r4, r3]
    f986:	1c38      	adds	r0, r7, #0
    f988:	47b0      	blx	r6
    addr.u8[1] = node_id >> 8;
  }
#endif  /* UIP_CONF_IPV6 */
  linkaddr_set_node_addr(&addr);
  printf("Link layer addr ");
  for(i = 0; i < sizeof(addr.u8) - 1; i++) {
    f98a:	3401      	adds	r4, #1
    f98c:	2c07      	cmp	r4, #7
    f98e:	d1f8      	bne.n	f982 <main+0x9a>
    f990:	e117      	b.n	fbc2 <main+0x2da>
    printf("%u:", addr.u8[i]);
  }
  printf("%u, ", addr.u8[i]);
  for(i = 0; i < sizeof(addr.u8) - 1; i++) {
    printf("%02x:", addr.u8[i]);
    f992:	466b      	mov	r3, sp
    f994:	5ce1      	ldrb	r1, [r4, r3]
    f996:	1c38      	adds	r0, r7, #0
    f998:	47b0      	blx	r6
  printf("Link layer addr ");
  for(i = 0; i < sizeof(addr.u8) - 1; i++) {
    printf("%u:", addr.u8[i]);
  }
  printf("%u, ", addr.u8[i]);
  for(i = 0; i < sizeof(addr.u8) - 1; i++) {
    f99a:	3401      	adds	r4, #1
    f99c:	2c07      	cmp	r4, #7
    f99e:	d1f8      	bne.n	f992 <main+0xaa>
    printf("%02x:", addr.u8[i]);
  }
  printf("%02x\n\r", addr.u8[i]);
    f9a0:	466b      	mov	r3, sp
    f9a2:	79d9      	ldrb	r1, [r3, #7]
    f9a4:	48a3      	ldr	r0, [pc, #652]	; (fc34 <main+0x34c>)
    f9a6:	4e9a      	ldr	r6, [pc, #616]	; (fc10 <main+0x328>)
    f9a8:	47b0      	blx	r6
  print_reset_causes();
#if SAMR21 
  eui64 = edbg_eui_read_eui64();
#endif
  set_link_addr(eui64);
  random_init(node_id);
    f9aa:	4ca3      	ldr	r4, [pc, #652]	; (fc38 <main+0x350>)
    f9ac:	8820      	ldrh	r0, [r4, #0]
    f9ae:	4ba3      	ldr	r3, [pc, #652]	; (fc3c <main+0x354>)
    f9b0:	4798      	blx	r3

  netstack_init();
    f9b2:	4ba3      	ldr	r3, [pc, #652]	; (fc40 <main+0x358>)
    f9b4:	4798      	blx	r3
  rf_set_channel(RF_CHANNEL);
    f9b6:	200b      	movs	r0, #11
    f9b8:	4ba2      	ldr	r3, [pc, #648]	; (fc44 <main+0x35c>)
    f9ba:	4798      	blx	r3
  printf("rf channel: %d\n\r", rf_get_channel());
    f9bc:	4ba2      	ldr	r3, [pc, #648]	; (fc48 <main+0x360>)
    f9be:	4798      	blx	r3
    f9c0:	1c01      	adds	r1, r0, #0
    f9c2:	48a2      	ldr	r0, [pc, #648]	; (fc4c <main+0x364>)
    f9c4:	47b0      	blx	r6
  leds_off(LEDS_ALL);
    f9c6:	2003      	movs	r0, #3
    f9c8:	4ba1      	ldr	r3, [pc, #644]	; (fc50 <main+0x368>)
    f9ca:	4798      	blx	r3
  /*  temp_sensor_init();
      voltage_sensor_init();*/
 // button_sensor_init();
 process_start(&sensors_process, NULL);
    f9cc:	48a1      	ldr	r0, [pc, #644]	; (fc54 <main+0x36c>)
    f9ce:	2100      	movs	r1, #0
    f9d0:	4b8c      	ldr	r3, [pc, #560]	; (fc04 <main+0x31c>)
    f9d2:	4798      	blx	r3
  energest_init();
    f9d4:	4ba0      	ldr	r3, [pc, #640]	; (fc58 <main+0x370>)
    f9d6:	4798      	blx	r3

  ENERGEST_ON(ENERGEST_TYPE_CPU);
    f9d8:	4ba0      	ldr	r3, [pc, #640]	; (fc5c <main+0x374>)
    f9da:	4798      	blx	r3
    f9dc:	4ba0      	ldr	r3, [pc, #640]	; (fc60 <main+0x378>)
    f9de:	6018      	str	r0, [r3, #0]
    f9e0:	2201      	movs	r2, #1
    f9e2:	4ba0      	ldr	r3, [pc, #640]	; (fc64 <main+0x37c>)
    f9e4:	701a      	strb	r2, [r3, #0]
  if(node_id > 0) {
    f9e6:	8821      	ldrh	r1, [r4, #0]
    f9e8:	2900      	cmp	r1, #0
    f9ea:	d003      	beq.n	f9f4 <main+0x10c>
    printf("Node id %u.\n\r", node_id);
    f9ec:	489e      	ldr	r0, [pc, #632]	; (fc68 <main+0x380>)
    f9ee:	4b88      	ldr	r3, [pc, #544]	; (fc10 <main+0x328>)
    f9f0:	4798      	blx	r3
    f9f2:	e002      	b.n	f9fa <main+0x112>
  } else {
    printf("Node id not set.\n\r");
    f9f4:	489d      	ldr	r0, [pc, #628]	; (fc6c <main+0x384>)
    f9f6:	4b86      	ldr	r3, [pc, #536]	; (fc10 <main+0x328>)
    f9f8:	4798      	blx	r3

  /* Setup nullmac-like MAC for 802.15.4 */
  #if SAMD
  memcpy(&uip_lladdr.addr, node_mac, sizeof(uip_lladdr.addr));
  #else 
  memcpy(&uip_lladdr.addr, eui64, sizeof(uip_lladdr.addr));
    f9fa:	489d      	ldr	r0, [pc, #628]	; (fc70 <main+0x388>)
    f9fc:	1c29      	adds	r1, r5, #0
    f9fe:	2208      	movs	r2, #8
    fa00:	4b9c      	ldr	r3, [pc, #624]	; (fc74 <main+0x38c>)
    fa02:	4798      	blx	r3
  #endif
   
  queuebuf_init();
    fa04:	4b9c      	ldr	r3, [pc, #624]	; (fc78 <main+0x390>)
    fa06:	4798      	blx	r3
  printf("%s %lu %d\n\r",
    fa08:	4b9c      	ldr	r3, [pc, #624]	; (fc7c <main+0x394>)
    fa0a:	681d      	ldr	r5, [r3, #0]
         NETSTACK_RDC.name,
         (uint32_t) (CLOCK_SECOND / (NETSTACK_RDC.channel_check_interval() == 0 ? 1:
    fa0c:	69dc      	ldr	r4, [r3, #28]
    fa0e:	47a0      	blx	r4
  #else 
  memcpy(&uip_lladdr.addr, eui64, sizeof(uip_lladdr.addr));
  #endif
   
  queuebuf_init();
  printf("%s %lu %d\n\r",
    fa10:	2280      	movs	r2, #128	; 0x80
    fa12:	2800      	cmp	r0, #0
    fa14:	d005      	beq.n	fa22 <main+0x13a>
         NETSTACK_RDC.name,
         (uint32_t) (CLOCK_SECOND / (NETSTACK_RDC.channel_check_interval() == 0 ? 1:
                         NETSTACK_RDC.channel_check_interval())),
    fa16:	47a0      	blx	r4
    fa18:	1c01      	adds	r1, r0, #0
  #endif
   
  queuebuf_init();
  printf("%s %lu %d\n\r",
         NETSTACK_RDC.name,
         (uint32_t) (CLOCK_SECOND / (NETSTACK_RDC.channel_check_interval() == 0 ? 1:
    fa1a:	2080      	movs	r0, #128	; 0x80
    fa1c:	4b98      	ldr	r3, [pc, #608]	; (fc80 <main+0x398>)
    fa1e:	4798      	blx	r3
    fa20:	1c02      	adds	r2, r0, #0
  #else 
  memcpy(&uip_lladdr.addr, eui64, sizeof(uip_lladdr.addr));
  #endif
   
  queuebuf_init();
  printf("%s %lu %d\n\r",
    fa22:	4898      	ldr	r0, [pc, #608]	; (fc84 <main+0x39c>)
    fa24:	1c29      	adds	r1, r5, #0
    fa26:	230b      	movs	r3, #11
    fa28:	4c79      	ldr	r4, [pc, #484]	; (fc10 <main+0x328>)
    fa2a:	47a0      	blx	r4
         NETSTACK_RDC.name,
         (uint32_t) (CLOCK_SECOND / (NETSTACK_RDC.channel_check_interval() == 0 ? 1:
                         NETSTACK_RDC.channel_check_interval())),
         RF_CHANNEL);

  process_start(&tcpip_process, NULL);
    fa2c:	4896      	ldr	r0, [pc, #600]	; (fc88 <main+0x3a0>)
    fa2e:	2100      	movs	r1, #0
    fa30:	4b74      	ldr	r3, [pc, #464]	; (fc04 <main+0x31c>)
    fa32:	4798      	blx	r3
  printf("IPv6 ");
    fa34:	4895      	ldr	r0, [pc, #596]	; (fc8c <main+0x3a4>)
    fa36:	47a0      	blx	r4
  {
    uip_ds6_addr_t *lladdr;
    int i;
    lladdr = uip_ds6_get_link_local(-1);
    fa38:	2001      	movs	r0, #1
    fa3a:	4240      	negs	r0, r0
    fa3c:	4b94      	ldr	r3, [pc, #592]	; (fc90 <main+0x3a8>)
    fa3e:	4798      	blx	r3
    fa40:	1c05      	adds	r5, r0, #0
    fa42:	1c44      	adds	r4, r0, #1
    fa44:	230f      	movs	r3, #15
    fa46:	4698      	mov	r8, r3
    fa48:	4480      	add	r8, r0
    for(i = 0; i < 7; ++i) {
      printf("%02x%02x:", lladdr->ipaddr.u8[i * 2],
    fa4a:	4f92      	ldr	r7, [pc, #584]	; (fc94 <main+0x3ac>)
    fa4c:	4e70      	ldr	r6, [pc, #448]	; (fc10 <main+0x328>)
    fa4e:	7821      	ldrb	r1, [r4, #0]
    fa50:	7862      	ldrb	r2, [r4, #1]
    fa52:	1c38      	adds	r0, r7, #0
    fa54:	47b0      	blx	r6
    fa56:	3402      	adds	r4, #2
  printf("IPv6 ");
  {
    uip_ds6_addr_t *lladdr;
    int i;
    lladdr = uip_ds6_get_link_local(-1);
    for(i = 0; i < 7; ++i) {
    fa58:	4544      	cmp	r4, r8
    fa5a:	d1f8      	bne.n	fa4e <main+0x166>
      printf("%02x%02x:", lladdr->ipaddr.u8[i * 2],
             lladdr->ipaddr.u8[i * 2 + 1]);
    }
    printf("%02x%02x\n\r", lladdr->ipaddr.u8[14], lladdr->ipaddr.u8[15]);
    fa5c:	7be9      	ldrb	r1, [r5, #15]
    fa5e:	7c2a      	ldrb	r2, [r5, #16]
    fa60:	488d      	ldr	r0, [pc, #564]	; (fc98 <main+0x3b0>)
    fa62:	4c6b      	ldr	r4, [pc, #428]	; (fc10 <main+0x328>)
    fa64:	47a0      	blx	r4
  }

  {
    uip_ipaddr_t ipaddr;
    int i;
    uip_ip6addr(&ipaddr, 0xaaaa, 0, 0, 0, 0, 0, 0, 0);
    fa66:	4b8d      	ldr	r3, [pc, #564]	; (fc9c <main+0x3b4>)
    fa68:	466a      	mov	r2, sp
    fa6a:	8013      	strh	r3, [r2, #0]
    fa6c:	2300      	movs	r3, #0
    fa6e:	8053      	strh	r3, [r2, #2]
    fa70:	8093      	strh	r3, [r2, #4]
    fa72:	80d3      	strh	r3, [r2, #6]
    fa74:	8113      	strh	r3, [r2, #8]
    fa76:	8153      	strh	r3, [r2, #10]
    fa78:	8193      	strh	r3, [r2, #12]
    fa7a:	81d3      	strh	r3, [r2, #14]
    uip_ds6_set_addr_iid(&ipaddr, &uip_lladdr);
    fa7c:	4668      	mov	r0, sp
    fa7e:	497c      	ldr	r1, [pc, #496]	; (fc70 <main+0x388>)
    fa80:	4b87      	ldr	r3, [pc, #540]	; (fca0 <main+0x3b8>)
    fa82:	4798      	blx	r3
    uip_ds6_addr_add(&ipaddr, 0, ADDR_TENTATIVE);
    fa84:	4668      	mov	r0, sp
    fa86:	2100      	movs	r1, #0
    fa88:	2200      	movs	r2, #0
    fa8a:	4b86      	ldr	r3, [pc, #536]	; (fca4 <main+0x3bc>)
    fa8c:	4798      	blx	r3
    printf("Tentative global IPv6 address ");
    fa8e:	4886      	ldr	r0, [pc, #536]	; (fca8 <main+0x3c0>)
    fa90:	47a0      	blx	r4
    fa92:	466c      	mov	r4, sp
    fa94:	270e      	movs	r7, #14
    fa96:	446f      	add	r7, sp
    for(i = 0; i < 7; ++i) {
      printf("%02x%02x:",
    fa98:	4e7e      	ldr	r6, [pc, #504]	; (fc94 <main+0x3ac>)
    fa9a:	4d5d      	ldr	r5, [pc, #372]	; (fc10 <main+0x328>)
    fa9c:	7821      	ldrb	r1, [r4, #0]
    fa9e:	7862      	ldrb	r2, [r4, #1]
    faa0:	1c30      	adds	r0, r6, #0
    faa2:	47a8      	blx	r5
    faa4:	3402      	adds	r4, #2
    int i;
    uip_ip6addr(&ipaddr, 0xaaaa, 0, 0, 0, 0, 0, 0, 0);
    uip_ds6_set_addr_iid(&ipaddr, &uip_lladdr);
    uip_ds6_addr_add(&ipaddr, 0, ADDR_TENTATIVE);
    printf("Tentative global IPv6 address ");
    for(i = 0; i < 7; ++i) {
    faa6:	42bc      	cmp	r4, r7
    faa8:	d1f8      	bne.n	fa9c <main+0x1b4>
      printf("%02x%02x:",
             ipaddr.u8[i * 2], ipaddr.u8[i * 2 + 1]);
    }
    printf("%02x%02x\r\n\r",
    faaa:	466b      	mov	r3, sp
    faac:	7b99      	ldrb	r1, [r3, #14]
    faae:	7bda      	ldrb	r2, [r3, #15]
    fab0:	487e      	ldr	r0, [pc, #504]	; (fcac <main+0x3c4>)
    fab2:	4c57      	ldr	r4, [pc, #348]	; (fc10 <main+0x328>)
    fab4:	47a0      	blx	r4
}
/*---------------------------------------------------------------------------*/
static void
print_processes(struct process * const processes[])
{
  printf("Starting");
    fab6:	487e      	ldr	r0, [pc, #504]	; (fcb0 <main+0x3c8>)
    fab8:	47a0      	blx	r4
  while(*processes != NULL) {
    faba:	4b7e      	ldr	r3, [pc, #504]	; (fcb4 <main+0x3cc>)
    fabc:	681b      	ldr	r3, [r3, #0]
    fabe:	2b00      	cmp	r3, #0
    fac0:	d009      	beq.n	fad6 <main+0x1ee>
    fac2:	4c7c      	ldr	r4, [pc, #496]	; (fcb4 <main+0x3cc>)
    printf(" %s", (*processes)->name);
    fac4:	4e7c      	ldr	r6, [pc, #496]	; (fcb8 <main+0x3d0>)
    fac6:	4d52      	ldr	r5, [pc, #328]	; (fc10 <main+0x328>)
    fac8:	6859      	ldr	r1, [r3, #4]
    faca:	1c30      	adds	r0, r6, #0
    facc:	47a8      	blx	r5
    processes++;
    face:	3404      	adds	r4, #4
/*---------------------------------------------------------------------------*/
static void
print_processes(struct process * const processes[])
{
  printf("Starting");
  while(*processes != NULL) {
    fad0:	6823      	ldr	r3, [r4, #0]
    fad2:	2b00      	cmp	r3, #0
    fad4:	d1f8      	bne.n	fac8 <main+0x1e0>
    printf(" %s", (*processes)->name);
    processes++;
  }
  putchar('\n');
    fad6:	4b79      	ldr	r3, [pc, #484]	; (fcbc <main+0x3d4>)
    fad8:	6818      	ldr	r0, [r3, #0]
    fada:	6882      	ldr	r2, [r0, #8]
    fadc:	6893      	ldr	r3, [r2, #8]
    fade:	3b01      	subs	r3, #1
    fae0:	6093      	str	r3, [r2, #8]
    fae2:	2b00      	cmp	r3, #0
    fae4:	da19      	bge.n	fb1a <main+0x232>
    fae6:	6882      	ldr	r2, [r0, #8]
    fae8:	6893      	ldr	r3, [r2, #8]
    faea:	6991      	ldr	r1, [r2, #24]
    faec:	428b      	cmp	r3, r1
    faee:	db10      	blt.n	fb12 <main+0x22a>
    faf0:	6813      	ldr	r3, [r2, #0]
    faf2:	220a      	movs	r2, #10
    faf4:	701a      	strb	r2, [r3, #0]
    faf6:	4b71      	ldr	r3, [pc, #452]	; (fcbc <main+0x3d4>)
    faf8:	6818      	ldr	r0, [r3, #0]
    fafa:	6882      	ldr	r2, [r0, #8]
    fafc:	6813      	ldr	r3, [r2, #0]
    fafe:	7819      	ldrb	r1, [r3, #0]
    fb00:	290a      	cmp	r1, #10
    fb02:	d002      	beq.n	fb0a <main+0x222>
    fb04:	3301      	adds	r3, #1
    fb06:	6013      	str	r3, [r2, #0]
    fb08:	e011      	b.n	fb2e <main+0x246>
    fb0a:	210a      	movs	r1, #10
    fb0c:	4b6c      	ldr	r3, [pc, #432]	; (fcc0 <main+0x3d8>)
    fb0e:	4798      	blx	r3
    fb10:	e00d      	b.n	fb2e <main+0x246>
    fb12:	210a      	movs	r1, #10
    fb14:	4b6a      	ldr	r3, [pc, #424]	; (fcc0 <main+0x3d8>)
    fb16:	4798      	blx	r3
    fb18:	e009      	b.n	fb2e <main+0x246>
    fb1a:	6883      	ldr	r3, [r0, #8]
    fb1c:	681b      	ldr	r3, [r3, #0]
    fb1e:	220a      	movs	r2, #10
    fb20:	701a      	strb	r2, [r3, #0]
    fb22:	4b66      	ldr	r3, [pc, #408]	; (fcbc <main+0x3d4>)
    fb24:	681b      	ldr	r3, [r3, #0]
    fb26:	689a      	ldr	r2, [r3, #8]
    fb28:	6813      	ldr	r3, [r2, #0]
    fb2a:	3301      	adds	r3, #1
    fb2c:	6013      	str	r3, [r2, #0]
    const uint8_t key[] = NETSTACK_AES_KEY;
    netstack_aes_set_key(key);
  }
  printf("AES encryption is enabled\n\r");
#else /* ((THSQ_CONF_NETSTACK) & THSQ_CONF_AES) */
  printf("\r\n Warning: AES encryption is disabled\n\r");
    fb2e:	4865      	ldr	r0, [pc, #404]	; (fcc4 <main+0x3dc>)
    fb30:	4b37      	ldr	r3, [pc, #220]	; (fc10 <main+0x328>)
    fb32:	4798      	blx	r3
#endif /* ((THSQ_CONF_NETSTACK) & THSQ_CONF_AES) */
   
  autostart_start(autostart_processes);
    fb34:	485f      	ldr	r0, [pc, #380]	; (fcb4 <main+0x3cc>)
    fb36:	4b64      	ldr	r3, [pc, #400]	; (fcc8 <main+0x3e0>)
    fb38:	4798      	blx	r3
	serial_data_handler();
#endif
  do {
      //printf(".");
     
     r = process_run();
    fb3a:	4c64      	ldr	r4, [pc, #400]	; (fccc <main+0x3e4>)
	//wdt_reset_count();
	 // if(r <= 0) printf("\n PRVN No process to run\n\r");
    } while(r > 0);
    /* sleep*/
   // watchdog_stop();
    ENERGEST_OFF(ENERGEST_TYPE_CPU);
    fb3c:	4b49      	ldr	r3, [pc, #292]	; (fc64 <main+0x37c>)
    fb3e:	4699      	mov	r9, r3
    fb40:	4b46      	ldr	r3, [pc, #280]	; (fc5c <main+0x374>)
    fb42:	4698      	mov	r8, r3
	serial_data_handler();
#endif
  do {
      //printf(".");
     
     r = process_run();
    fb44:	47a0      	blx	r4
	//wdt_reset_count();
	 // if(r <= 0) printf("\n PRVN No process to run\n\r");
    } while(r > 0);
    fb46:	2800      	cmp	r0, #0
    fb48:	dcfc      	bgt.n	fb44 <main+0x25c>
    /* sleep*/
   // watchdog_stop();
    ENERGEST_OFF(ENERGEST_TYPE_CPU);
    fb4a:	464b      	mov	r3, r9
    fb4c:	781b      	ldrb	r3, [r3, #0]
    fb4e:	2b00      	cmp	r3, #0
    fb50:	d00a      	beq.n	fb68 <main+0x280>
    fb52:	47c0      	blx	r8
    fb54:	4a5e      	ldr	r2, [pc, #376]	; (fcd0 <main+0x3e8>)
    fb56:	4b42      	ldr	r3, [pc, #264]	; (fc60 <main+0x378>)
    fb58:	681b      	ldr	r3, [r3, #0]
    fb5a:	6811      	ldr	r1, [r2, #0]
    fb5c:	1acb      	subs	r3, r1, r3
    fb5e:	1818      	adds	r0, r3, r0
    fb60:	6010      	str	r0, [r2, #0]
    fb62:	2200      	movs	r2, #0
    fb64:	4b3f      	ldr	r3, [pc, #252]	; (fc64 <main+0x37c>)
    fb66:	701a      	strb	r2, [r3, #0]
    ENERGEST_ON(ENERGEST_TYPE_LPM);
    fb68:	4e3c      	ldr	r6, [pc, #240]	; (fc5c <main+0x374>)
    fb6a:	47b0      	blx	r6
    fb6c:	4f3c      	ldr	r7, [pc, #240]	; (fc60 <main+0x378>)
    fb6e:	6078      	str	r0, [r7, #4]
    fb70:	4d3c      	ldr	r5, [pc, #240]	; (fc64 <main+0x37c>)
    fb72:	2301      	movs	r3, #1
    fb74:	706b      	strb	r3, [r5, #1]
	//#endif
    //watchdog_start();


    /* woke up */
    ENERGEST_OFF(ENERGEST_TYPE_LPM);
    fb76:	47b0      	blx	r6
    fb78:	4a55      	ldr	r2, [pc, #340]	; (fcd0 <main+0x3e8>)
    fb7a:	687b      	ldr	r3, [r7, #4]
    fb7c:	6851      	ldr	r1, [r2, #4]
    fb7e:	1acb      	subs	r3, r1, r3
    fb80:	1818      	adds	r0, r3, r0
    fb82:	6050      	str	r0, [r2, #4]
    fb84:	2300      	movs	r3, #0
    fb86:	706b      	strb	r3, [r5, #1]
    ENERGEST_ON(ENERGEST_TYPE_CPU);
    fb88:	4b34      	ldr	r3, [pc, #208]	; (fc5c <main+0x374>)
    fb8a:	4798      	blx	r3
    fb8c:	4b34      	ldr	r3, [pc, #208]	; (fc60 <main+0x378>)
    fb8e:	6018      	str	r0, [r3, #0]
    fb90:	2201      	movs	r2, #1
    fb92:	4b34      	ldr	r3, [pc, #208]	; (fc64 <main+0x37c>)
    fb94:	701a      	strb	r2, [r3, #0]
  }
    fb96:	e7d5      	b.n	fb44 <main+0x25c>

  node_id_restore();
  printf("\r\n\n\n\n Starting the SmartConnect-6LoWPAN \r\n Platform : Atmel IoT device \r\n\r");
  print_reset_causes();
#if SAMR21 
  eui64 = edbg_eui_read_eui64();
    fb98:	4b4e      	ldr	r3, [pc, #312]	; (fcd4 <main+0x3ec>)
    fb9a:	4798      	blx	r3
    fb9c:	1c05      	adds	r5, r0, #0
set_link_addr(uint8_t *eui64)
{
  linkaddr_t addr;
  int i;

  memset(&addr, 0, sizeof(linkaddr_t));
    fb9e:	2300      	movs	r3, #0
    fba0:	9300      	str	r3, [sp, #0]
    fba2:	9301      	str	r3, [sp, #4]
#if UIP_CONF_IPV6
  #if SAMD
  memcpy(addr.u8, node_mac, sizeof(addr.u8));
  #else 
  memcpy(addr.u8, eui64, sizeof(addr.u8));
    fba4:	4668      	mov	r0, sp
    fba6:	1c29      	adds	r1, r5, #0
    fba8:	2208      	movs	r2, #8
    fbaa:	4b32      	ldr	r3, [pc, #200]	; (fc74 <main+0x38c>)
    fbac:	4798      	blx	r3
  } else {
    addr.u8[0] = node_id & 0xff;
    addr.u8[1] = node_id >> 8;
  }
#endif  /* UIP_CONF_IPV6 */
  linkaddr_set_node_addr(&addr);
    fbae:	4668      	mov	r0, sp
    fbb0:	4b49      	ldr	r3, [pc, #292]	; (fcd8 <main+0x3f0>)
    fbb2:	4798      	blx	r3
  printf("Link layer addr ");
    fbb4:	4849      	ldr	r0, [pc, #292]	; (fcdc <main+0x3f4>)
    fbb6:	4b16      	ldr	r3, [pc, #88]	; (fc10 <main+0x328>)
    fbb8:	4798      	blx	r3
    fbba:	2400      	movs	r4, #0
  for(i = 0; i < sizeof(addr.u8) - 1; i++) {
    printf("%u:", addr.u8[i]);
    fbbc:	4f48      	ldr	r7, [pc, #288]	; (fce0 <main+0x3f8>)
    fbbe:	4e14      	ldr	r6, [pc, #80]	; (fc10 <main+0x328>)
    fbc0:	e6df      	b.n	f982 <main+0x9a>
  }
  printf("%u, ", addr.u8[i]);
    fbc2:	466b      	mov	r3, sp
    fbc4:	79d9      	ldrb	r1, [r3, #7]
    fbc6:	4847      	ldr	r0, [pc, #284]	; (fce4 <main+0x3fc>)
    fbc8:	4b11      	ldr	r3, [pc, #68]	; (fc10 <main+0x328>)
    fbca:	4798      	blx	r3
    fbcc:	2400      	movs	r4, #0
  for(i = 0; i < sizeof(addr.u8) - 1; i++) {
    printf("%02x:", addr.u8[i]);
    fbce:	4f46      	ldr	r7, [pc, #280]	; (fce8 <main+0x400>)
    fbd0:	4e0f      	ldr	r6, [pc, #60]	; (fc10 <main+0x328>)
    fbd2:	e6de      	b.n	f992 <main+0xaa>
    fbd4:	00002301 	.word	0x00002301
    fbd8:	00002971 	.word	0x00002971
    fbdc:	000056a9 	.word	0x000056a9
    fbe0:	000056c9 	.word	0x000056c9
    fbe4:	20000008 	.word	0x20000008
    fbe8:	0000f555 	.word	0x0000f555
    fbec:	00000111 	.word	0x00000111
    fbf0:	0000f65d 	.word	0x0000f65d
    fbf4:	0000e5e9 	.word	0x0000e5e9
    fbf8:	0000ecc5 	.word	0x0000ecc5
    fbfc:	0000eafd 	.word	0x0000eafd
    fc00:	20000194 	.word	0x20000194
    fc04:	0000ec69 	.word	0x0000ec69
    fc08:	0000f5cd 	.word	0x0000f5cd
    fc0c:	00012dac 	.word	0x00012dac
    fc10:	00010931 	.word	0x00010931
    fc14:	40000438 	.word	0x40000438
    fc18:	00012df8 	.word	0x00012df8
    fc1c:	00012e0c 	.word	0x00012e0c
    fc20:	00012e24 	.word	0x00012e24
    fc24:	00012e38 	.word	0x00012e38
    fc28:	00012e4c 	.word	0x00012e4c
    fc2c:	00012e6c 	.word	0x00012e6c
    fc30:	00012e8c 	.word	0x00012e8c
    fc34:	00012f00 	.word	0x00012f00
    fc38:	20001ee4 	.word	0x20001ee4
    fc3c:	00005889 	.word	0x00005889
    fc40:	0000bdd9 	.word	0x0000bdd9
    fc44:	0000ef55 	.word	0x0000ef55
    fc48:	0000ef41 	.word	0x0000ef41
    fc4c:	00012ea4 	.word	0x00012ea4
    fc50:	000056e5 	.word	0x000056e5
    fc54:	2000001c 	.word	0x2000001c
    fc58:	0000e739 	.word	0x0000e739
    fc5c:	0000f88d 	.word	0x0000f88d
    fc60:	200033cc 	.word	0x200033cc
    fc64:	200033c0 	.word	0x200033c0
    fc68:	00012eb8 	.word	0x00012eb8
    fc6c:	00012ec8 	.word	0x00012ec8
    fc70:	20002ccc 	.word	0x20002ccc
    fc74:	000108e7 	.word	0x000108e7
    fc78:	0000c04d 	.word	0x0000c04d
    fc7c:	00012c24 	.word	0x00012c24
    fc80:	00010645 	.word	0x00010645
    fc84:	00012edc 	.word	0x00012edc
    fc88:	200000c0 	.word	0x200000c0
    fc8c:	00012ee8 	.word	0x00012ee8
    fc90:	0000746d 	.word	0x0000746d
    fc94:	00012ef0 	.word	0x00012ef0
    fc98:	00012efc 	.word	0x00012efc
    fc9c:	ffffaaaa 	.word	0xffffaaaa
    fca0:	00007695 	.word	0x00007695
    fca4:	00007551 	.word	0x00007551
    fca8:	00012f08 	.word	0x00012f08
    fcac:	00012f28 	.word	0x00012f28
    fcb0:	00012f34 	.word	0x00012f34
    fcb4:	00012fb8 	.word	0x00012fb8
    fcb8:	00012f40 	.word	0x00012f40
    fcbc:	20000234 	.word	0x20000234
    fcc0:	00010c6d 	.word	0x00010c6d
    fcc4:	00012f44 	.word	0x00012f44
    fcc8:	0000e525 	.word	0x0000e525
    fccc:	0000eb35 	.word	0x0000eb35
    fcd0:	2000338c 	.word	0x2000338c
    fcd4:	0000f441 	.word	0x0000f441
    fcd8:	0000ac81 	.word	0x0000ac81
    fcdc:	00012f70 	.word	0x00012f70
    fce0:	00012ea0 	.word	0x00012ea0
    fce4:	00012f84 	.word	0x00012f84
    fce8:	00012ef4 	.word	0x00012ef4

0000fcec <echo_reply_handler>:
}
/*---------------------------------------------------------------------------*/
static void
echo_reply_handler(uip_ipaddr_t *source, uint8_t ttl, uint8_t *data,
                   uint16_t datalen)
{
    fcec:	b510      	push	{r4, lr}
    fcee:	1c04      	adds	r4, r0, #0
  if(uip_ip6addr_cmp(source, uip_ds6_defrt_choose())) {
    fcf0:	4b06      	ldr	r3, [pc, #24]	; (fd0c <echo_reply_handler+0x20>)
    fcf2:	4798      	blx	r3
    fcf4:	1c01      	adds	r1, r0, #0
    fcf6:	1c20      	adds	r0, r4, #0
    fcf8:	2210      	movs	r2, #16
    fcfa:	4b05      	ldr	r3, [pc, #20]	; (fd10 <echo_reply_handler+0x24>)
    fcfc:	4798      	blx	r3
    fcfe:	2800      	cmp	r0, #0
    fd00:	d103      	bne.n	fd0a <echo_reply_handler+0x1e>
    def_rt_rssi = sicslowpan_get_last_rssi();
    fd02:	4b04      	ldr	r3, [pc, #16]	; (fd14 <echo_reply_handler+0x28>)
    fd04:	4798      	blx	r3
    fd06:	4b04      	ldr	r3, [pc, #16]	; (fd18 <echo_reply_handler+0x2c>)
    fd08:	6018      	str	r0, [r3, #0]
  }
}
    fd0a:	bd10      	pop	{r4, pc}
    fd0c:	0000724d 	.word	0x0000724d
    fd10:	000108c9 	.word	0x000108c9
    fd14:	00006a95 	.word	0x00006a95
    fd18:	20002a7c 	.word	0x20002a7c

0000fd1c <publish_led_off>:
/*---------------------------------------------------------------------------*/
static void
publish_led_off(void *d)
{
    fd1c:	b508      	push	{r3, lr}
  leds_off(STATUS_LED);
    fd1e:	2001      	movs	r0, #1
    fd20:	4b01      	ldr	r3, [pc, #4]	; (fd28 <publish_led_off+0xc>)
    fd22:	4798      	blx	r3
}
    fd24:	bd08      	pop	{r3, pc}
    fd26:	46c0      	nop			; (mov r8, r8)
    fd28:	000056e5 	.word	0x000056e5

0000fd2c <mqtt_event>:
  }
}
/*---------------------------------------------------------------------------*/
static void
mqtt_event(struct mqtt_connection *m, mqtt_event_t event, void *data)
{
    fd2c:	b5f0      	push	{r4, r5, r6, r7, lr}
    fd2e:	4657      	mov	r7, sl
    fd30:	464e      	mov	r6, r9
    fd32:	4645      	mov	r5, r8
    fd34:	b4e0      	push	{r5, r6, r7}
  switch(event) {
    fd36:	2905      	cmp	r1, #5
    fd38:	d876      	bhi.n	fe28 <mqtt_event+0xfc>
    fd3a:	0089      	lsls	r1, r1, #2
    fd3c:	4b3e      	ldr	r3, [pc, #248]	; (fe38 <mqtt_event+0x10c>)
    fd3e:	585b      	ldr	r3, [r3, r1]
    fd40:	469f      	mov	pc, r3
  case MQTT_EVENT_CONNECTED: {
    DBG("APP - Application has a MQTT connection\n\r");
    fd42:	483e      	ldr	r0, [pc, #248]	; (fe3c <mqtt_event+0x110>)
    fd44:	4b3e      	ldr	r3, [pc, #248]	; (fe40 <mqtt_event+0x114>)
    fd46:	4798      	blx	r3
    timer_set(&connection_life, CONNECTION_STABLE_TIME);
    fd48:	483e      	ldr	r0, [pc, #248]	; (fe44 <mqtt_event+0x118>)
    fd4a:	21a0      	movs	r1, #160	; 0xa0
    fd4c:	0089      	lsls	r1, r1, #2
    fd4e:	4b3e      	ldr	r3, [pc, #248]	; (fe48 <mqtt_event+0x11c>)
    fd50:	4798      	blx	r3
    state = STATE_CONNECTED;
    fd52:	2203      	movs	r2, #3
    fd54:	4b3d      	ldr	r3, [pc, #244]	; (fe4c <mqtt_event+0x120>)
    fd56:	701a      	strb	r2, [r3, #0]
    break;
    fd58:	e069      	b.n	fe2e <mqtt_event+0x102>
  }
  case MQTT_EVENT_DISCONNECTED: {
    DBG("APP - MQTT Disconnect. Reason %u\n\r", *((mqtt_event_t *)data));
    fd5a:	7811      	ldrb	r1, [r2, #0]
    fd5c:	483c      	ldr	r0, [pc, #240]	; (fe50 <mqtt_event+0x124>)
    fd5e:	4b38      	ldr	r3, [pc, #224]	; (fe40 <mqtt_event+0x114>)
    fd60:	4798      	blx	r3

    state = STATE_DISCONNECTED;
    fd62:	2205      	movs	r2, #5
    fd64:	4b39      	ldr	r3, [pc, #228]	; (fe4c <mqtt_event+0x120>)
    fd66:	701a      	strb	r2, [r3, #0]
    process_poll(&mqtt_demo_process);
    fd68:	483a      	ldr	r0, [pc, #232]	; (fe54 <mqtt_event+0x128>)
    fd6a:	4b3b      	ldr	r3, [pc, #236]	; (fe58 <mqtt_event+0x12c>)
    fd6c:	4798      	blx	r3
    break;
    fd6e:	e05e      	b.n	fe2e <mqtt_event+0x102>
  }
  case MQTT_EVENT_PUBLISH: {
    msg_ptr = data;
    fd70:	4b3a      	ldr	r3, [pc, #232]	; (fe5c <mqtt_event+0x130>)
    fd72:	601a      	str	r2, [r3, #0]

    /* Implement first_flag in publish message? */
    if(msg_ptr->first_chunk) {
    fd74:	234e      	movs	r3, #78	; 0x4e
    fd76:	5cd3      	ldrb	r3, [r2, r3]
    fd78:	2b00      	cmp	r3, #0
    fd7a:	d008      	beq.n	fd8e <mqtt_event+0x62>
      msg_ptr->first_chunk = 0;
    fd7c:	2100      	movs	r1, #0
    fd7e:	234e      	movs	r3, #78	; 0x4e
    fd80:	54d1      	strb	r1, [r2, r3]
      DBG("APP - Application received a publish on topic '%s'. Payload "
    fd82:	1d11      	adds	r1, r2, #4
    fd84:	3302      	adds	r3, #2
    fd86:	5ad2      	ldrh	r2, [r2, r3]
    fd88:	4835      	ldr	r0, [pc, #212]	; (fe60 <mqtt_event+0x134>)
    fd8a:	4b2d      	ldr	r3, [pc, #180]	; (fe40 <mqtt_event+0x114>)
    fd8c:	4798      	blx	r3
          "size is %i bytes. Content:\n\n\r",
          msg_ptr->topic, msg_ptr->payload_length);
    }

    pub_handler(msg_ptr->topic, strlen(msg_ptr->topic), msg_ptr->payload_chunk,
    fd8e:	4b33      	ldr	r3, [pc, #204]	; (fe5c <mqtt_event+0x130>)
    fd90:	681f      	ldr	r7, [r3, #0]
    fd92:	1d3d      	adds	r5, r7, #4
    fd94:	1c28      	adds	r0, r5, #0
    fd96:	4b33      	ldr	r3, [pc, #204]	; (fe64 <mqtt_event+0x138>)
    fd98:	4798      	blx	r3
    fd9a:	1c06      	adds	r6, r0, #0
    fd9c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    fd9e:	4698      	mov	r8, r3
    fda0:	2350      	movs	r3, #80	; 0x50
    fda2:	5afb      	ldrh	r3, [r7, r3]
    fda4:	4699      	mov	r9, r3
    fda6:	0404      	lsls	r4, r0, #16
    fda8:	0c23      	lsrs	r3, r4, #16
    fdaa:	469a      	mov	sl, r3
/*---------------------------------------------------------------------------*/
static void
pub_handler(const char *topic, uint16_t topic_len, const uint8_t *chunk,
            uint16_t chunk_len)
{
  DBG("Pub Handler: topic='%s' (len=%u), chunk_len=%u\n\r", topic, topic_len,
    fdac:	482e      	ldr	r0, [pc, #184]	; (fe68 <mqtt_event+0x13c>)
    fdae:	1c29      	adds	r1, r5, #0
    fdb0:	1c1a      	adds	r2, r3, #0
    fdb2:	464b      	mov	r3, r9
    fdb4:	4c22      	ldr	r4, [pc, #136]	; (fe40 <mqtt_event+0x114>)
    fdb6:	47a0      	blx	r4
      chunk_len);

  /* If we don't like the length, ignore */
  if(topic_len != 23 || chunk_len != 1) {
    fdb8:	b2b6      	uxth	r6, r6
    fdba:	2e17      	cmp	r6, #23
    fdbc:	d102      	bne.n	fdc4 <mqtt_event+0x98>
    fdbe:	464b      	mov	r3, r9
    fdc0:	2b01      	cmp	r3, #1
    fdc2:	d003      	beq.n	fdcc <mqtt_event+0xa0>
    printf("Incorrect topic or chunk len. Ignored\n\r");
    fdc4:	4829      	ldr	r0, [pc, #164]	; (fe6c <mqtt_event+0x140>)
    fdc6:	4b1e      	ldr	r3, [pc, #120]	; (fe40 <mqtt_event+0x114>)
    fdc8:	4798      	blx	r3
    fdca:	e030      	b.n	fe2e <mqtt_event+0x102>
    return;
  }

  /* If the format != json, ignore */
  if(strncmp(&topic[topic_len - 4], "json", 4) != 0) {
    fdcc:	4654      	mov	r4, sl
    fdce:	3c04      	subs	r4, #4
    fdd0:	1928      	adds	r0, r5, r4
    fdd2:	4927      	ldr	r1, [pc, #156]	; (fe70 <mqtt_event+0x144>)
    fdd4:	2204      	movs	r2, #4
    fdd6:	4b27      	ldr	r3, [pc, #156]	; (fe74 <mqtt_event+0x148>)
    fdd8:	4798      	blx	r3
    fdda:	2800      	cmp	r0, #0
    fddc:	d002      	beq.n	fde4 <mqtt_event+0xb8>
    printf("Incorrect format\n\r");
    fdde:	4826      	ldr	r0, [pc, #152]	; (fe78 <mqtt_event+0x14c>)
    fde0:	4b17      	ldr	r3, [pc, #92]	; (fe40 <mqtt_event+0x114>)
    fde2:	4798      	blx	r3
  }

  if(strncmp(&topic[10], "leds", 4) == 0) {
    fde4:	1c38      	adds	r0, r7, #0
    fde6:	300e      	adds	r0, #14
    fde8:	4924      	ldr	r1, [pc, #144]	; (fe7c <mqtt_event+0x150>)
    fdea:	2204      	movs	r2, #4
    fdec:	4b21      	ldr	r3, [pc, #132]	; (fe74 <mqtt_event+0x148>)
    fdee:	4798      	blx	r3
    fdf0:	2800      	cmp	r0, #0
    fdf2:	d11c      	bne.n	fe2e <mqtt_event+0x102>
    if(chunk[0] == '1') {
    fdf4:	4643      	mov	r3, r8
    fdf6:	781b      	ldrb	r3, [r3, #0]
    fdf8:	2b31      	cmp	r3, #49	; 0x31
    fdfa:	d103      	bne.n	fe04 <mqtt_event+0xd8>
      leds_on(LEDS_RED);
    fdfc:	3001      	adds	r0, #1
    fdfe:	4b20      	ldr	r3, [pc, #128]	; (fe80 <mqtt_event+0x154>)
    fe00:	4798      	blx	r3
    fe02:	e014      	b.n	fe2e <mqtt_event+0x102>
    } else if(chunk[0] == '0') {
    fe04:	2b30      	cmp	r3, #48	; 0x30
    fe06:	d112      	bne.n	fe2e <mqtt_event+0x102>
      leds_off(LEDS_RED);
    fe08:	2001      	movs	r0, #1
    fe0a:	4b1e      	ldr	r3, [pc, #120]	; (fe84 <mqtt_event+0x158>)
    fe0c:	4798      	blx	r3
    fe0e:	e00e      	b.n	fe2e <mqtt_event+0x102>
    pub_handler(msg_ptr->topic, strlen(msg_ptr->topic), msg_ptr->payload_chunk,
                msg_ptr->payload_length);
    break;
  }
  case MQTT_EVENT_SUBACK: {
    DBG("APP - Application is subscribed to topic successfully\n\r");
    fe10:	481d      	ldr	r0, [pc, #116]	; (fe88 <mqtt_event+0x15c>)
    fe12:	4b0b      	ldr	r3, [pc, #44]	; (fe40 <mqtt_event+0x114>)
    fe14:	4798      	blx	r3
    break;
    fe16:	e00a      	b.n	fe2e <mqtt_event+0x102>
  }
  case MQTT_EVENT_UNSUBACK: {
    DBG("APP - Application is unsubscribed to topic successfully\n\r");
    fe18:	481c      	ldr	r0, [pc, #112]	; (fe8c <mqtt_event+0x160>)
    fe1a:	4b09      	ldr	r3, [pc, #36]	; (fe40 <mqtt_event+0x114>)
    fe1c:	4798      	blx	r3
    break;
    fe1e:	e006      	b.n	fe2e <mqtt_event+0x102>
  }
  case MQTT_EVENT_PUBACK: {
    DBG("APP - Publishing complete.\n\r");
    fe20:	481b      	ldr	r0, [pc, #108]	; (fe90 <mqtt_event+0x164>)
    fe22:	4b07      	ldr	r3, [pc, #28]	; (fe40 <mqtt_event+0x114>)
    fe24:	4798      	blx	r3
    break;
    fe26:	e002      	b.n	fe2e <mqtt_event+0x102>
  }
  default:
    DBG("APP - Application got a unhandled MQTT event: %i\n\r", event);
    fe28:	481a      	ldr	r0, [pc, #104]	; (fe94 <mqtt_event+0x168>)
    fe2a:	4b05      	ldr	r3, [pc, #20]	; (fe40 <mqtt_event+0x114>)
    fe2c:	4798      	blx	r3
    break;
  }
}
    fe2e:	bc1c      	pop	{r2, r3, r4}
    fe30:	4690      	mov	r8, r2
    fe32:	4699      	mov	r9, r3
    fe34:	46a2      	mov	sl, r4
    fe36:	bdf0      	pop	{r4, r5, r6, r7, pc}
    fe38:	00012fa0 	.word	0x00012fa0
    fe3c:	00012fc0 	.word	0x00012fc0
    fe40:	00010931 	.word	0x00010931
    fe44:	20002a34 	.word	0x20002a34
    fe48:	0000ed5d 	.word	0x0000ed5d
    fe4c:	2000203c 	.word	0x2000203c
    fe50:	00012fec 	.word	0x00012fec
    fe54:	200001c0 	.word	0x200001c0
    fe58:	0000eca9 	.word	0x0000eca9
    fe5c:	20002804 	.word	0x20002804
    fe60:	00013010 	.word	0x00013010
    fe64:	00010be9 	.word	0x00010be9
    fe68:	0001306c 	.word	0x0001306c
    fe6c:	000130a0 	.word	0x000130a0
    fe70:	000130c8 	.word	0x000130c8
    fe74:	00010c45 	.word	0x00010c45
    fe78:	000130d0 	.word	0x000130d0
    fe7c:	000130e4 	.word	0x000130e4
    fe80:	000056c9 	.word	0x000056c9
    fe84:	000056e5 	.word	0x000056e5
    fe88:	000130ec 	.word	0x000130ec
    fe8c:	00013124 	.word	0x00013124
    fe90:	00013160 	.word	0x00013160
    fe94:	00013180 	.word	0x00013180

0000fe98 <ping_parent>:
  state = STATE_CONNECTING;
}
/*---------------------------------------------------------------------------*/
static void
ping_parent(void)
{
    fe98:	b510      	push	{r4, lr}
  if(uip_ds6_get_global(ADDR_PREFERRED) == NULL) {
    fe9a:	2001      	movs	r0, #1
    fe9c:	4b05      	ldr	r3, [pc, #20]	; (feb4 <ping_parent+0x1c>)
    fe9e:	4798      	blx	r3
    fea0:	2800      	cmp	r0, #0
    fea2:	d006      	beq.n	feb2 <ping_parent+0x1a>
    return;
  }

  uip_icmp6_send(uip_ds6_defrt_choose(), ICMP6_ECHO_REQUEST, 0,
    fea4:	4b04      	ldr	r3, [pc, #16]	; (feb8 <ping_parent+0x20>)
    fea6:	4798      	blx	r3
    fea8:	2180      	movs	r1, #128	; 0x80
    feaa:	2200      	movs	r2, #0
    feac:	2314      	movs	r3, #20
    feae:	4c03      	ldr	r4, [pc, #12]	; (febc <ping_parent+0x24>)
    feb0:	47a0      	blx	r4
                 ECHO_REQ_PAYLOAD_LEN);
}
    feb2:	bd10      	pop	{r4, pc}
    feb4:	000074b9 	.word	0x000074b9
    feb8:	0000724d 	.word	0x0000724d
    febc:	00007ec1 	.word	0x00007ec1

0000fec0 <ipaddr_sprintf>:
/*---------------------------------------------------------------------------*/
PROCESS(mqtt_demo_process, "MQTT Demo");
/*---------------------------------------------------------------------------*/
int
ipaddr_sprintf(char *buf, uint8_t buf_len, const uip_ipaddr_t *addr)
{
    fec0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    fec2:	465f      	mov	r7, fp
    fec4:	4656      	mov	r6, sl
    fec6:	464d      	mov	r5, r9
    fec8:	4644      	mov	r4, r8
    feca:	b4f0      	push	{r4, r5, r6, r7}
    fecc:	4682      	mov	sl, r0
    fece:	4689      	mov	r9, r1
    fed0:	1c15      	adds	r5, r2, #0
    fed2:	2300      	movs	r3, #0
    fed4:	4698      	mov	r8, r3
    fed6:	2700      	movs	r7, #0
    fed8:	2600      	movs	r6, #0
      if(f > 0) {
        f = -1;
      } else if(i > 0) {
        len += snprintf(&buf[len], buf_len - len, ":");
      }
      len += snprintf(&buf[len], buf_len - len, "%x", a);
    feda:	4b21      	ldr	r3, [pc, #132]	; (ff60 <ipaddr_sprintf+0xa0>)
    fedc:	469b      	mov	fp, r3
{
  uint16_t a;
  uint8_t len = 0;
  int i, f;
  for(i = 0, f = 0; i < sizeof(uip_ipaddr_t); i += 2) {
    a = (addr->u8[i] << 8) + addr->u8[i + 1];
    fede:	782c      	ldrb	r4, [r5, #0]
    fee0:	0224      	lsls	r4, r4, #8
    fee2:	786b      	ldrb	r3, [r5, #1]
    fee4:	191c      	adds	r4, r3, r4
    fee6:	b2a4      	uxth	r4, r4
    if(a == 0 && f >= 0) {
    fee8:	2c00      	cmp	r4, #0
    feea:	d111      	bne.n	ff10 <ipaddr_sprintf+0x50>
    feec:	4643      	mov	r3, r8
    feee:	2b00      	cmp	r3, #0
    fef0:	db0e      	blt.n	ff10 <ipaddr_sprintf+0x50>
      if(f++ == 0) {
    fef2:	1c5c      	adds	r4, r3, #1
    fef4:	46a0      	mov	r8, r4
    fef6:	2b00      	cmp	r3, #0
    fef8:	d126      	bne.n	ff48 <ipaddr_sprintf+0x88>
        len += snprintf(&buf[len], buf_len - len, "::");
    fefa:	4653      	mov	r3, sl
    fefc:	1998      	adds	r0, r3, r6
    fefe:	464b      	mov	r3, r9
    ff00:	1b99      	subs	r1, r3, r6
    ff02:	4a18      	ldr	r2, [pc, #96]	; (ff64 <ipaddr_sprintf+0xa4>)
    ff04:	4b16      	ldr	r3, [pc, #88]	; (ff60 <ipaddr_sprintf+0xa0>)
    ff06:	4798      	blx	r3
    ff08:	1836      	adds	r6, r6, r0
    ff0a:	b2f6      	uxtb	r6, r6
  uint8_t len = 0;
  int i, f;
  for(i = 0, f = 0; i < sizeof(uip_ipaddr_t); i += 2) {
    a = (addr->u8[i] << 8) + addr->u8[i + 1];
    if(a == 0 && f >= 0) {
      if(f++ == 0) {
    ff0c:	46a0      	mov	r8, r4
    ff0e:	e01b      	b.n	ff48 <ipaddr_sprintf+0x88>
        len += snprintf(&buf[len], buf_len - len, "::");
      }
    } else {
      if(f > 0) {
    ff10:	4643      	mov	r3, r8
    ff12:	2b00      	cmp	r3, #0
    ff14:	dc0b      	bgt.n	ff2e <ipaddr_sprintf+0x6e>
        f = -1;
      } else if(i > 0) {
    ff16:	2f00      	cmp	r7, #0
    ff18:	dd0c      	ble.n	ff34 <ipaddr_sprintf+0x74>
        len += snprintf(&buf[len], buf_len - len, ":");
    ff1a:	4653      	mov	r3, sl
    ff1c:	1998      	adds	r0, r3, r6
    ff1e:	464b      	mov	r3, r9
    ff20:	1b99      	subs	r1, r3, r6
    ff22:	4a11      	ldr	r2, [pc, #68]	; (ff68 <ipaddr_sprintf+0xa8>)
    ff24:	4b0e      	ldr	r3, [pc, #56]	; (ff60 <ipaddr_sprintf+0xa0>)
    ff26:	4798      	blx	r3
    ff28:	1836      	adds	r6, r6, r0
    ff2a:	b2f6      	uxtb	r6, r6
    ff2c:	e002      	b.n	ff34 <ipaddr_sprintf+0x74>
      if(f++ == 0) {
        len += snprintf(&buf[len], buf_len - len, "::");
      }
    } else {
      if(f > 0) {
        f = -1;
    ff2e:	2301      	movs	r3, #1
    ff30:	425b      	negs	r3, r3
    ff32:	4698      	mov	r8, r3
      } else if(i > 0) {
        len += snprintf(&buf[len], buf_len - len, ":");
      }
      len += snprintf(&buf[len], buf_len - len, "%x", a);
    ff34:	4653      	mov	r3, sl
    ff36:	1998      	adds	r0, r3, r6
    ff38:	464b      	mov	r3, r9
    ff3a:	1b99      	subs	r1, r3, r6
    ff3c:	4a0b      	ldr	r2, [pc, #44]	; (ff6c <ipaddr_sprintf+0xac>)
    ff3e:	1c23      	adds	r3, r4, #0
    ff40:	47d8      	blx	fp
    ff42:	1836      	adds	r6, r6, r0
    ff44:	b2f6      	uxtb	r6, r6
    ff46:	e7ff      	b.n	ff48 <ipaddr_sprintf+0x88>
ipaddr_sprintf(char *buf, uint8_t buf_len, const uip_ipaddr_t *addr)
{
  uint16_t a;
  uint8_t len = 0;
  int i, f;
  for(i = 0, f = 0; i < sizeof(uip_ipaddr_t); i += 2) {
    ff48:	3702      	adds	r7, #2
    ff4a:	3502      	adds	r5, #2
    ff4c:	2f10      	cmp	r7, #16
    ff4e:	d1c6      	bne.n	fede <ipaddr_sprintf+0x1e>
      len += snprintf(&buf[len], buf_len - len, "%x", a);
    }
  }

  return len;
}
    ff50:	1c30      	adds	r0, r6, #0
    ff52:	bc3c      	pop	{r2, r3, r4, r5}
    ff54:	4690      	mov	r8, r2
    ff56:	4699      	mov	r9, r3
    ff58:	46a2      	mov	sl, r4
    ff5a:	46ab      	mov	fp, r5
    ff5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ff5e:	46c0      	nop			; (mov r8, r8)
    ff60:	00010b81 	.word	0x00010b81
    ff64:	00012be0 	.word	0x00012be0
    ff68:	00012ef8 	.word	0x00012ef8
    ff6c:	00012be4 	.word	0x00012be4

0000ff70 <process_thread_mqtt_demo_process>:
  /* If we didn't return so far, reschedule ourselves */
  etimer_set(&publish_periodic_timer, STATE_MACHINE_PERIODIC);
}
/*---------------------------------------------------------------------------*/
PROCESS_THREAD(mqtt_demo_process, ev, data)
{
    ff70:	b5f0      	push	{r4, r5, r6, r7, lr}
    ff72:	464f      	mov	r7, r9
    ff74:	4646      	mov	r6, r8
    ff76:	b4c0      	push	{r6, r7}
    ff78:	b099      	sub	sp, #100	; 0x64
    ff7a:	1c05      	adds	r5, r0, #0
    ff7c:	1c0c      	adds	r4, r1, #0
    ff7e:	1c16      	adds	r6, r2, #0

  PROCESS_BEGIN();
    ff80:	8803      	ldrh	r3, [r0, #0]
    ff82:	2b00      	cmp	r3, #0
    ff84:	d003      	beq.n	ff8e <process_thread_mqtt_demo_process+0x1e>
    ff86:	4ad6      	ldr	r2, [pc, #856]	; (102e0 <process_thread_mqtt_demo_process+0x370>)
    ff88:	4293      	cmp	r3, r2
    ff8a:	d077      	beq.n	1007c <process_thread_mqtt_demo_process+0x10c>
    ff8c:	e26f      	b.n	1046e <process_thread_mqtt_demo_process+0x4fe>

  printf("MQTT Demo Process\n\r");
    ff8e:	48d5      	ldr	r0, [pc, #852]	; (102e4 <process_thread_mqtt_demo_process+0x374>)
    ff90:	4bd5      	ldr	r3, [pc, #852]	; (102e8 <process_thread_mqtt_demo_process+0x378>)
    ff92:	4798      	blx	r3
/*---------------------------------------------------------------------------*/
static int
init_config()
{
  /* Populate configuration with default values */
  memset(&conf, 0, sizeof(mqtt_client_config_t));
    ff94:	4cd5      	ldr	r4, [pc, #852]	; (102ec <process_thread_mqtt_demo_process+0x37c>)
    ff96:	1c20      	adds	r0, r4, #0
    ff98:	2100      	movs	r1, #0
    ff9a:	22d4      	movs	r2, #212	; 0xd4
    ff9c:	4bd4      	ldr	r3, [pc, #848]	; (102f0 <process_thread_mqtt_demo_process+0x380>)
    ff9e:	4798      	blx	r3

  memcpy(conf.org_id, DEFAULT_ORG_ID, strlen(DEFAULT_ORG_ID));
    ffa0:	4bd4      	ldr	r3, [pc, #848]	; (102f4 <process_thread_mqtt_demo_process+0x384>)
    ffa2:	1c22      	adds	r2, r4, #0
    ffa4:	cb43      	ldmia	r3!, {r0, r1, r6}
    ffa6:	c243      	stmia	r2!, {r0, r1, r6}
  memcpy(conf.type_id, DEFAULT_TYPE_ID, strlen(DEFAULT_TYPE_ID));
    ffa8:	1c21      	adds	r1, r4, #0
    ffaa:	4bd3      	ldr	r3, [pc, #844]	; (102f8 <process_thread_mqtt_demo_process+0x388>)
    ffac:	681a      	ldr	r2, [r3, #0]
    ffae:	6222      	str	r2, [r4, #32]
    ffb0:	889b      	ldrh	r3, [r3, #4]
    ffb2:	84a3      	strh	r3, [r4, #36]	; 0x24
    ffb4:	3120      	adds	r1, #32
  memcpy(conf.auth_token, DEFAULT_AUTH_TOKEN, strlen(DEFAULT_AUTH_TOKEN));
    ffb6:	1c22      	adds	r2, r4, #0
    ffb8:	3240      	adds	r2, #64	; 0x40
    ffba:	4bd0      	ldr	r3, [pc, #832]	; (102fc <process_thread_mqtt_demo_process+0x38c>)
    ffbc:	6818      	ldr	r0, [r3, #0]
    ffbe:	6420      	str	r0, [r4, #64]	; 0x40
    ffc0:	791b      	ldrb	r3, [r3, #4]
    ffc2:	7113      	strb	r3, [r2, #4]
  memcpy(conf.event_type_id, DEFAULT_EVENT_TYPE_ID,
    ffc4:	1c22      	adds	r2, r4, #0
    ffc6:	3260      	adds	r2, #96	; 0x60
    ffc8:	4bcd      	ldr	r3, [pc, #820]	; (10300 <process_thread_mqtt_demo_process+0x390>)
    ffca:	6818      	ldr	r0, [r3, #0]
    ffcc:	6620      	str	r0, [r4, #96]	; 0x60
    ffce:	889b      	ldrh	r3, [r3, #4]
    ffd0:	8093      	strh	r3, [r2, #4]
         strlen(DEFAULT_EVENT_TYPE_ID));
  memcpy(conf.broker_ip, broker_ip, strlen(broker_ip));
    ffd2:	1c23      	adds	r3, r4, #0
    ffd4:	3380      	adds	r3, #128	; 0x80
    ffd6:	4acb      	ldr	r2, [pc, #812]	; (10304 <process_thread_mqtt_demo_process+0x394>)
    ffd8:	6810      	ldr	r0, [r2, #0]
    ffda:	6018      	str	r0, [r3, #0]
    ffdc:	8890      	ldrh	r0, [r2, #4]
    ffde:	8098      	strh	r0, [r3, #4]
    ffe0:	7992      	ldrb	r2, [r2, #6]
    ffe2:	719a      	strb	r2, [r3, #6]
  memcpy(conf.cmd_type, DEFAULT_SUBSCRIBE_CMD_TYPE, 1);
    ffe4:	222b      	movs	r2, #43	; 0x2b
    ffe6:	23c0      	movs	r3, #192	; 0xc0
    ffe8:	54e2      	strb	r2, [r4, r3]

  conf.broker_port = DEFAULT_BROKER_PORT;
    ffea:	4ac7      	ldr	r2, [pc, #796]	; (10308 <process_thread_mqtt_demo_process+0x398>)
    ffec:	3310      	adds	r3, #16
    ffee:	52e2      	strh	r2, [r4, r3]
  conf.pub_interval = DEFAULT_PUBLISH_INTERVAL;
    fff0:	3b50      	subs	r3, #80	; 0x50
    fff2:	22c8      	movs	r2, #200	; 0xc8
    fff4:	50a3      	str	r3, [r4, r2]
  conf.def_rt_ping_interval = DEFAULT_RSSI_MEAS_INTERVAL;
    fff6:	3204      	adds	r2, #4
    fff8:	50a3      	str	r3, [r4, r2]
}
/*---------------------------------------------------------------------------*/
static int
construct_client_id(void)
{
  int len = snprintf(client_id, BUFFER_SIZE, "d:%s:%s:%02x%02x%02x%02x%02x%02x",
    fffa:	9100      	str	r1, [sp, #0]
                     conf.org_id, conf.type_id,
                     linkaddr_node_addr.u8[0], linkaddr_node_addr.u8[1],
    fffc:	4bc3      	ldr	r3, [pc, #780]	; (1030c <process_thread_mqtt_demo_process+0x39c>)
}
/*---------------------------------------------------------------------------*/
static int
construct_client_id(void)
{
  int len = snprintf(client_id, BUFFER_SIZE, "d:%s:%s:%02x%02x%02x%02x%02x%02x",
    fffe:	781a      	ldrb	r2, [r3, #0]
   10000:	9201      	str	r2, [sp, #4]
   10002:	785a      	ldrb	r2, [r3, #1]
   10004:	9202      	str	r2, [sp, #8]
   10006:	789a      	ldrb	r2, [r3, #2]
   10008:	9203      	str	r2, [sp, #12]
   1000a:	795a      	ldrb	r2, [r3, #5]
   1000c:	9204      	str	r2, [sp, #16]
   1000e:	799a      	ldrb	r2, [r3, #6]
   10010:	9205      	str	r2, [sp, #20]
   10012:	79db      	ldrb	r3, [r3, #7]
   10014:	9306      	str	r3, [sp, #24]
   10016:	48be      	ldr	r0, [pc, #760]	; (10310 <process_thread_mqtt_demo_process+0x3a0>)
   10018:	2140      	movs	r1, #64	; 0x40
   1001a:	4abe      	ldr	r2, [pc, #760]	; (10314 <process_thread_mqtt_demo_process+0x3a4>)
   1001c:	1c23      	adds	r3, r4, #0
   1001e:	4cbe      	ldr	r4, [pc, #760]	; (10318 <process_thread_mqtt_demo_process+0x3a8>)
   10020:	47a0      	blx	r4
   10022:	1e01      	subs	r1, r0, #0
                     linkaddr_node_addr.u8[0], linkaddr_node_addr.u8[1],
                     linkaddr_node_addr.u8[2], linkaddr_node_addr.u8[5],
                     linkaddr_node_addr.u8[6], linkaddr_node_addr.u8[7]);

  /* len < 0: Error. Len >= BUFFER_SIZE: Buffer too small */
  if(len < 0 || len >= BUFFER_SIZE) {
   10024:	293f      	cmp	r1, #63	; 0x3f
   10026:	d800      	bhi.n	1002a <process_thread_mqtt_demo_process+0xba>
   10028:	e225      	b.n	10476 <process_thread_mqtt_demo_process+0x506>
    printf("Client ID: %d, Buffer %d\n\r", len, BUFFER_SIZE);
   1002a:	48bc      	ldr	r0, [pc, #752]	; (1031c <process_thread_mqtt_demo_process+0x3ac>)
   1002c:	2240      	movs	r2, #64	; 0x40
   1002e:	4bae      	ldr	r3, [pc, #696]	; (102e8 <process_thread_mqtt_demo_process+0x378>)
   10030:	4798      	blx	r3
static void
update_config(void)
{
  if(construct_client_id() == 0) {
    /* Fatal error. Client ID larger than the buffer */
    state = STATE_CONFIG_ERROR;
   10032:	22fe      	movs	r2, #254	; 0xfe
   10034:	4bba      	ldr	r3, [pc, #744]	; (10320 <process_thread_mqtt_demo_process+0x3b0>)
   10036:	701a      	strb	r2, [r3, #0]
   10038:	e00e      	b.n	10058 <process_thread_mqtt_demo_process+0xe8>
  int len = snprintf(sub_topic, BUFFER_SIZE, "iot-2/cmd/%s/fmt/json",
                     conf.cmd_type);

  /* len < 0: Error. Len >= BUFFER_SIZE: Buffer too small */
  if(len < 0 || len >= BUFFER_SIZE) {
    printf("Sub Topic: %d, Buffer %d\n\r", len, BUFFER_SIZE);
   1003a:	48ba      	ldr	r0, [pc, #744]	; (10324 <process_thread_mqtt_demo_process+0x3b4>)
   1003c:	2240      	movs	r2, #64	; 0x40
   1003e:	4baa      	ldr	r3, [pc, #680]	; (102e8 <process_thread_mqtt_demo_process+0x378>)
   10040:	4798      	blx	r3
    return;
  }

  if(construct_sub_topic() == 0) {
    /* Fatal error. Topic larger than the buffer */
    state = STATE_CONFIG_ERROR;
   10042:	22fe      	movs	r2, #254	; 0xfe
   10044:	4bb6      	ldr	r3, [pc, #728]	; (10320 <process_thread_mqtt_demo_process+0x3b0>)
   10046:	701a      	strb	r2, [r3, #0]
   10048:	e006      	b.n	10058 <process_thread_mqtt_demo_process+0xe8>
  int len = snprintf(pub_topic, BUFFER_SIZE, "iot-2/evt/%s/fmt/json",
                     conf.event_type_id);

  /* len < 0: Error. Len >= BUFFER_SIZE: Buffer too small */
  if(len < 0 || len >= BUFFER_SIZE) {
    printf("Pub Topic: %d, Buffer %d\n\r", len, BUFFER_SIZE);
   1004a:	48b7      	ldr	r0, [pc, #732]	; (10328 <process_thread_mqtt_demo_process+0x3b8>)
   1004c:	2240      	movs	r2, #64	; 0x40
   1004e:	4ba6      	ldr	r3, [pc, #664]	; (102e8 <process_thread_mqtt_demo_process+0x378>)
   10050:	4798      	blx	r3
    return;
  }

  if(construct_pub_topic() == 0) {
    /* Fatal error. Topic larger than the buffer */
    state = STATE_CONFIG_ERROR;
   10052:	22fe      	movs	r2, #254	; 0xfe
   10054:	4bb2      	ldr	r3, [pc, #712]	; (10320 <process_thread_mqtt_demo_process+0x3b0>)
   10056:	701a      	strb	r2, [r3, #0]
    PROCESS_EXIT();
  }

  update_config();

  def_rt_rssi = 0x8000000;
   10058:	2280      	movs	r2, #128	; 0x80
   1005a:	0512      	lsls	r2, r2, #20
   1005c:	4bb3      	ldr	r3, [pc, #716]	; (1032c <process_thread_mqtt_demo_process+0x3bc>)
   1005e:	601a      	str	r2, [r3, #0]
  uip_icmp6_echo_reply_callback_add(&echo_reply_notification,
   10060:	48b3      	ldr	r0, [pc, #716]	; (10330 <process_thread_mqtt_demo_process+0x3c0>)
   10062:	49b4      	ldr	r1, [pc, #720]	; (10334 <process_thread_mqtt_demo_process+0x3c4>)
   10064:	4bb4      	ldr	r3, [pc, #720]	; (10338 <process_thread_mqtt_demo_process+0x3c8>)
   10066:	4798      	blx	r3
                                    echo_reply_handler);
  etimer_set(&echo_request_timer, conf.def_rt_ping_interval);
   10068:	23cc      	movs	r3, #204	; 0xcc
   1006a:	4aa0      	ldr	r2, [pc, #640]	; (102ec <process_thread_mqtt_demo_process+0x37c>)
   1006c:	58d1      	ldr	r1, [r2, r3]
   1006e:	48b3      	ldr	r0, [pc, #716]	; (1033c <process_thread_mqtt_demo_process+0x3cc>)
   10070:	4bb3      	ldr	r3, [pc, #716]	; (10340 <process_thread_mqtt_demo_process+0x3d0>)
   10072:	4798      	blx	r3

  /* Main loop */
  while(1) {

    PROCESS_YIELD();
   10074:	4b9a      	ldr	r3, [pc, #616]	; (102e0 <process_thread_mqtt_demo_process+0x370>)
   10076:	802b      	strh	r3, [r5, #0]
   10078:	2001      	movs	r0, #1
   1007a:	e223      	b.n	104c4 <process_thread_mqtt_demo_process+0x554>

    if(ev == sensors_event && data == PUBLISH_TRIGGER) {
   1007c:	4bb1      	ldr	r3, [pc, #708]	; (10344 <process_thread_mqtt_demo_process+0x3d4>)
   1007e:	781b      	ldrb	r3, [r3, #0]
   10080:	4299      	cmp	r1, r3
   10082:	d10b      	bne.n	1009c <process_thread_mqtt_demo_process+0x12c>
   10084:	4ab0      	ldr	r2, [pc, #704]	; (10348 <process_thread_mqtt_demo_process+0x3d8>)
   10086:	4296      	cmp	r6, r2
   10088:	d108      	bne.n	1009c <process_thread_mqtt_demo_process+0x12c>
      if(state == STATE_ERROR) {
   1008a:	4aa5      	ldr	r2, [pc, #660]	; (10320 <process_thread_mqtt_demo_process+0x3b0>)
   1008c:	7812      	ldrb	r2, [r2, #0]
   1008e:	2aff      	cmp	r2, #255	; 0xff
   10090:	d104      	bne.n	1009c <process_thread_mqtt_demo_process+0x12c>
        connect_attempt = 1;
   10092:	3afe      	subs	r2, #254	; 0xfe
   10094:	49ad      	ldr	r1, [pc, #692]	; (1034c <process_thread_mqtt_demo_process+0x3dc>)
   10096:	700a      	strb	r2, [r1, #0]
        state = STATE_REGISTERED;
   10098:	49a1      	ldr	r1, [pc, #644]	; (10320 <process_thread_mqtt_demo_process+0x3b0>)
   1009a:	700a      	strb	r2, [r1, #0]
      }
    }

    if((ev == PROCESS_EVENT_TIMER && data == &publish_periodic_timer) ||
   1009c:	2c88      	cmp	r4, #136	; 0x88
   1009e:	d104      	bne.n	100aa <process_thread_mqtt_demo_process+0x13a>
   100a0:	4aab      	ldr	r2, [pc, #684]	; (10350 <process_thread_mqtt_demo_process+0x3e0>)
   100a2:	4296      	cmp	r6, r2
   100a4:	d000      	beq.n	100a8 <process_thread_mqtt_demo_process+0x138>
   100a6:	e20a      	b.n	104be <process_thread_mqtt_demo_process+0x54e>
   100a8:	e007      	b.n	100ba <process_thread_mqtt_demo_process+0x14a>
   100aa:	2c82      	cmp	r4, #130	; 0x82
   100ac:	d000      	beq.n	100b0 <process_thread_mqtt_demo_process+0x140>
   100ae:	e202      	b.n	104b6 <process_thread_mqtt_demo_process+0x546>
   100b0:	e003      	b.n	100ba <process_thread_mqtt_demo_process+0x14a>
       ev == PROCESS_EVENT_POLL ||
       (ev == sensors_event && data == PUBLISH_TRIGGER)) {
   100b2:	4ba5      	ldr	r3, [pc, #660]	; (10348 <process_thread_mqtt_demo_process+0x3d8>)
   100b4:	429e      	cmp	r6, r3
   100b6:	d000      	beq.n	100ba <process_thread_mqtt_demo_process+0x14a>
   100b8:	e1c9      	b.n	1044e <process_thread_mqtt_demo_process+0x4de>
}
/*---------------------------------------------------------------------------*/
static void
state_machine(void)
{
  switch(state) {
   100ba:	4b99      	ldr	r3, [pc, #612]	; (10320 <process_thread_mqtt_demo_process+0x3b0>)
   100bc:	781b      	ldrb	r3, [r3, #0]
   100be:	2b03      	cmp	r3, #3
   100c0:	d07a      	beq.n	101b8 <process_thread_mqtt_demo_process+0x248>
   100c2:	b2da      	uxtb	r2, r3
   100c4:	2a03      	cmp	r2, #3
   100c6:	d804      	bhi.n	100d2 <process_thread_mqtt_demo_process+0x162>
   100c8:	2b01      	cmp	r3, #1
   100ca:	d03b      	beq.n	10144 <process_thread_mqtt_demo_process+0x1d4>
   100cc:	2a01      	cmp	r2, #1
   100ce:	d90a      	bls.n	100e6 <process_thread_mqtt_demo_process+0x176>
   100d0:	e063      	b.n	1019a <process_thread_mqtt_demo_process+0x22a>
   100d2:	2b05      	cmp	r3, #5
   100d4:	d100      	bne.n	100d8 <process_thread_mqtt_demo_process+0x168>
   100d6:	e18b      	b.n	103f0 <process_thread_mqtt_demo_process+0x480>
   100d8:	b2da      	uxtb	r2, r3
   100da:	2a05      	cmp	r2, #5
   100dc:	d37d      	bcc.n	101da <process_thread_mqtt_demo_process+0x26a>
   100de:	2afe      	cmp	r2, #254	; 0xfe
   100e0:	d100      	bne.n	100e4 <process_thread_mqtt_demo_process+0x174>
   100e2:	e1a3      	b.n	1042c <process_thread_mqtt_demo_process+0x4bc>
   100e4:	e1a6      	b.n	10434 <process_thread_mqtt_demo_process+0x4c4>
  case STATE_INIT:
    /* If we have just been configured register MQTT connection */
    mqtt_register(&conn, &mqtt_demo_process, client_id, mqtt_event,
   100e6:	2320      	movs	r3, #32
   100e8:	9300      	str	r3, [sp, #0]
   100ea:	489a      	ldr	r0, [pc, #616]	; (10354 <process_thread_mqtt_demo_process+0x3e4>)
   100ec:	499a      	ldr	r1, [pc, #616]	; (10358 <process_thread_mqtt_demo_process+0x3e8>)
   100ee:	4a88      	ldr	r2, [pc, #544]	; (10310 <process_thread_mqtt_demo_process+0x3a0>)
   100f0:	4b9a      	ldr	r3, [pc, #616]	; (1035c <process_thread_mqtt_demo_process+0x3ec>)
   100f2:	4f9b      	ldr	r7, [pc, #620]	; (10360 <process_thread_mqtt_demo_process+0x3f0>)
   100f4:	47b8      	blx	r7

    /*
     * If we are not using the quickstart service (thus we are an IBM
     * registered device), we need to provide user name and password
     */
    if(strncasecmp(conf.org_id, QUICKSTART, strlen(conf.org_id)) != 0) {
   100f6:	4f7d      	ldr	r7, [pc, #500]	; (102ec <process_thread_mqtt_demo_process+0x37c>)
   100f8:	1c38      	adds	r0, r7, #0
   100fa:	4b9a      	ldr	r3, [pc, #616]	; (10364 <process_thread_mqtt_demo_process+0x3f4>)
   100fc:	4798      	blx	r3
   100fe:	1c02      	adds	r2, r0, #0
   10100:	1c38      	adds	r0, r7, #0
   10102:	4999      	ldr	r1, [pc, #612]	; (10368 <process_thread_mqtt_demo_process+0x3f8>)
   10104:	4b99      	ldr	r3, [pc, #612]	; (1036c <process_thread_mqtt_demo_process+0x3fc>)
   10106:	4798      	blx	r3
   10108:	2800      	cmp	r0, #0
   1010a:	d010      	beq.n	1012e <process_thread_mqtt_demo_process+0x1be>
      if(strlen(conf.auth_token) == 0) {
   1010c:	2340      	movs	r3, #64	; 0x40
   1010e:	5cfb      	ldrb	r3, [r7, r3]
   10110:	2b00      	cmp	r3, #0
   10112:	d106      	bne.n	10122 <process_thread_mqtt_demo_process+0x1b2>
        printf("User name set, but empty auth token\n\r");
   10114:	4896      	ldr	r0, [pc, #600]	; (10370 <process_thread_mqtt_demo_process+0x400>)
   10116:	4b74      	ldr	r3, [pc, #464]	; (102e8 <process_thread_mqtt_demo_process+0x378>)
   10118:	4798      	blx	r3
        state = STATE_ERROR;
   1011a:	22ff      	movs	r2, #255	; 0xff
   1011c:	4b80      	ldr	r3, [pc, #512]	; (10320 <process_thread_mqtt_demo_process+0x3b0>)
   1011e:	701a      	strb	r2, [r3, #0]
   10120:	e191      	b.n	10446 <process_thread_mqtt_demo_process+0x4d6>
        break;
      } else {
        mqtt_set_username_password(&conn, "use-token-auth",
   10122:	488c      	ldr	r0, [pc, #560]	; (10354 <process_thread_mqtt_demo_process+0x3e4>)
   10124:	4993      	ldr	r1, [pc, #588]	; (10374 <process_thread_mqtt_demo_process+0x404>)
   10126:	4a71      	ldr	r2, [pc, #452]	; (102ec <process_thread_mqtt_demo_process+0x37c>)
   10128:	3240      	adds	r2, #64	; 0x40
   1012a:	4b93      	ldr	r3, [pc, #588]	; (10378 <process_thread_mqtt_demo_process+0x408>)
   1012c:	4798      	blx	r3
                                   conf.auth_token);
      }
    }

    /* _register() will set auto_reconnect. We don't want that. */
    conn.auto_reconnect = 0;
   1012e:	2200      	movs	r2, #0
   10130:	4b88      	ldr	r3, [pc, #544]	; (10354 <process_thread_mqtt_demo_process+0x3e4>)
   10132:	755a      	strb	r2, [r3, #21]
    connect_attempt = 1;
   10134:	2301      	movs	r3, #1
   10136:	4a85      	ldr	r2, [pc, #532]	; (1034c <process_thread_mqtt_demo_process+0x3dc>)
   10138:	7013      	strb	r3, [r2, #0]

    state = STATE_REGISTERED;
   1013a:	4a79      	ldr	r2, [pc, #484]	; (10320 <process_thread_mqtt_demo_process+0x3b0>)
   1013c:	7013      	strb	r3, [r2, #0]
    DBG("Init\n\r");
   1013e:	488f      	ldr	r0, [pc, #572]	; (1037c <process_thread_mqtt_demo_process+0x40c>)
   10140:	4b69      	ldr	r3, [pc, #420]	; (102e8 <process_thread_mqtt_demo_process+0x378>)
   10142:	4798      	blx	r3
    /* Continue */
  case STATE_REGISTERED:
    if(uip_ds6_get_global(ADDR_PREFERRED) != NULL) {
   10144:	2001      	movs	r0, #1
   10146:	4b8e      	ldr	r3, [pc, #568]	; (10380 <process_thread_mqtt_demo_process+0x410>)
   10148:	4798      	blx	r3
   1014a:	2800      	cmp	r0, #0
   1014c:	d017      	beq.n	1017e <process_thread_mqtt_demo_process+0x20e>
      /* Registered and with a public IP. Connect */
      DBG("Registered. Connect attempt %u\n\r", connect_attempt);
   1014e:	4b7f      	ldr	r3, [pc, #508]	; (1034c <process_thread_mqtt_demo_process+0x3dc>)
   10150:	7819      	ldrb	r1, [r3, #0]
   10152:	488c      	ldr	r0, [pc, #560]	; (10384 <process_thread_mqtt_demo_process+0x414>)
   10154:	4b64      	ldr	r3, [pc, #400]	; (102e8 <process_thread_mqtt_demo_process+0x378>)
   10156:	4798      	blx	r3
      ping_parent();
   10158:	4b8b      	ldr	r3, [pc, #556]	; (10388 <process_thread_mqtt_demo_process+0x418>)
   1015a:	4798      	blx	r3
/*---------------------------------------------------------------------------*/
static void
connect_to_broker(void)
{
  /* Connect to MQTT server */
  mqtt_connect(&conn, conf.broker_ip, conf.broker_port,
   1015c:	4b63      	ldr	r3, [pc, #396]	; (102ec <process_thread_mqtt_demo_process+0x37c>)
   1015e:	1c19      	adds	r1, r3, #0
   10160:	3180      	adds	r1, #128	; 0x80
   10162:	22d0      	movs	r2, #208	; 0xd0
   10164:	5a9a      	ldrh	r2, [r3, r2]
               conf.pub_interval * 3);
   10166:	20c8      	movs	r0, #200	; 0xc8
/*---------------------------------------------------------------------------*/
static void
connect_to_broker(void)
{
  /* Connect to MQTT server */
  mqtt_connect(&conn, conf.broker_ip, conf.broker_port,
   10168:	5818      	ldr	r0, [r3, r0]
   1016a:	0043      	lsls	r3, r0, #1
   1016c:	18c3      	adds	r3, r0, r3
   1016e:	b29b      	uxth	r3, r3
   10170:	4878      	ldr	r0, [pc, #480]	; (10354 <process_thread_mqtt_demo_process+0x3e4>)
   10172:	4f86      	ldr	r7, [pc, #536]	; (1038c <process_thread_mqtt_demo_process+0x41c>)
   10174:	47b8      	blx	r7
               conf.pub_interval * 3);
	//DBG("broker_ip: %s \n\rbroker_port: %s\n\r",conf.broker_ip,conf.broker_port);
  state = STATE_CONNECTING;
   10176:	2202      	movs	r2, #2
   10178:	4b69      	ldr	r3, [pc, #420]	; (10320 <process_thread_mqtt_demo_process+0x3b0>)
   1017a:	701a      	strb	r2, [r3, #0]
   1017c:	e008      	b.n	10190 <process_thread_mqtt_demo_process+0x220>
      /* Registered and with a public IP. Connect */
      DBG("Registered. Connect attempt %u\n\r", connect_attempt);
      ping_parent();
      connect_to_broker();
    } else {
      leds_on(STATUS_LED);
   1017e:	2001      	movs	r0, #1
   10180:	4b83      	ldr	r3, [pc, #524]	; (10390 <process_thread_mqtt_demo_process+0x420>)
   10182:	4798      	blx	r3
      ctimer_set(&ct, NO_NET_LED_DURATION, publish_led_off, NULL);
   10184:	4883      	ldr	r0, [pc, #524]	; (10394 <process_thread_mqtt_demo_process+0x424>)
   10186:	2110      	movs	r1, #16
   10188:	4a83      	ldr	r2, [pc, #524]	; (10398 <process_thread_mqtt_demo_process+0x428>)
   1018a:	2300      	movs	r3, #0
   1018c:	4f83      	ldr	r7, [pc, #524]	; (1039c <process_thread_mqtt_demo_process+0x42c>)
   1018e:	47b8      	blx	r7
    }
    //AWGES etimer_set(&publish_periodic_timer, NET_CONNECT_PERIODIC >> 1);
	etimer_set(&publish_periodic_timer, 0);
   10190:	486f      	ldr	r0, [pc, #444]	; (10350 <process_thread_mqtt_demo_process+0x3e0>)
   10192:	2100      	movs	r1, #0
   10194:	4b6a      	ldr	r3, [pc, #424]	; (10340 <process_thread_mqtt_demo_process+0x3d0>)
   10196:	4798      	blx	r3
   10198:	e159      	b.n	1044e <process_thread_mqtt_demo_process+0x4de>
	return;
    break;
  case STATE_CONNECTING:
    leds_on(STATUS_LED);
   1019a:	2001      	movs	r0, #1
   1019c:	4b7c      	ldr	r3, [pc, #496]	; (10390 <process_thread_mqtt_demo_process+0x420>)
   1019e:	4798      	blx	r3
    ctimer_set(&ct, CONNECTING_LED_DURATION, publish_led_off, NULL);
   101a0:	487c      	ldr	r0, [pc, #496]	; (10394 <process_thread_mqtt_demo_process+0x424>)
   101a2:	2120      	movs	r1, #32
   101a4:	4a7c      	ldr	r2, [pc, #496]	; (10398 <process_thread_mqtt_demo_process+0x428>)
   101a6:	2300      	movs	r3, #0
   101a8:	4f7c      	ldr	r7, [pc, #496]	; (1039c <process_thread_mqtt_demo_process+0x42c>)
   101aa:	47b8      	blx	r7
    /* Not connected yet. Wait */
    DBG("Connecting (%u)\n\r", connect_attempt);
   101ac:	4b67      	ldr	r3, [pc, #412]	; (1034c <process_thread_mqtt_demo_process+0x3dc>)
   101ae:	7819      	ldrb	r1, [r3, #0]
   101b0:	487b      	ldr	r0, [pc, #492]	; (103a0 <process_thread_mqtt_demo_process+0x430>)
   101b2:	4b4d      	ldr	r3, [pc, #308]	; (102e8 <process_thread_mqtt_demo_process+0x378>)
   101b4:	4798      	blx	r3
   101b6:	e146      	b.n	10446 <process_thread_mqtt_demo_process+0x4d6>
    break;
  case STATE_CONNECTED:
    /* Don't subscribe unless we are a registered device */
    if(strncasecmp(conf.org_id, QUICKSTART, strlen(conf.org_id)) == 0) {
   101b8:	4f4c      	ldr	r7, [pc, #304]	; (102ec <process_thread_mqtt_demo_process+0x37c>)
   101ba:	1c38      	adds	r0, r7, #0
   101bc:	4b69      	ldr	r3, [pc, #420]	; (10364 <process_thread_mqtt_demo_process+0x3f4>)
   101be:	4798      	blx	r3
   101c0:	1c02      	adds	r2, r0, #0
   101c2:	1c38      	adds	r0, r7, #0
   101c4:	4968      	ldr	r1, [pc, #416]	; (10368 <process_thread_mqtt_demo_process+0x3f8>)
   101c6:	4b69      	ldr	r3, [pc, #420]	; (1036c <process_thread_mqtt_demo_process+0x3fc>)
   101c8:	4798      	blx	r3
   101ca:	2800      	cmp	r0, #0
   101cc:	d105      	bne.n	101da <process_thread_mqtt_demo_process+0x26a>
      DBG("Using 'quickstart': Skipping subscribe\n\r");
   101ce:	4875      	ldr	r0, [pc, #468]	; (103a4 <process_thread_mqtt_demo_process+0x434>)
   101d0:	4b45      	ldr	r3, [pc, #276]	; (102e8 <process_thread_mqtt_demo_process+0x378>)
   101d2:	4798      	blx	r3
	  //subscribe();
      state = STATE_PUBLISHING;
   101d4:	2204      	movs	r2, #4
   101d6:	4b52      	ldr	r3, [pc, #328]	; (10320 <process_thread_mqtt_demo_process+0x3b0>)
   101d8:	701a      	strb	r2, [r3, #0]
    }
    /* Continue */
  case STATE_PUBLISHING:
    /* If the timer expired, the connection is stable. */
    if(timer_expired(&connection_life)) {
   101da:	4873      	ldr	r0, [pc, #460]	; (103a8 <process_thread_mqtt_demo_process+0x438>)
   101dc:	4b73      	ldr	r3, [pc, #460]	; (103ac <process_thread_mqtt_demo_process+0x43c>)
   101de:	4798      	blx	r3
   101e0:	2800      	cmp	r0, #0
   101e2:	d002      	beq.n	101ea <process_thread_mqtt_demo_process+0x27a>
      /*
       * Intentionally using 0 here instead of 1: We want RECONNECT_ATTEMPTS
       * attempts if we disconnect after a successful connect
       */
      connect_attempt = 0;
   101e4:	2200      	movs	r2, #0
   101e6:	4b59      	ldr	r3, [pc, #356]	; (1034c <process_thread_mqtt_demo_process+0x3dc>)
   101e8:	701a      	strb	r2, [r3, #0]
    }

    if(mqtt_ready(&conn) && conn.out_buffer_sent) {
   101ea:	236a      	movs	r3, #106	; 0x6a
   101ec:	4a59      	ldr	r2, [pc, #356]	; (10354 <process_thread_mqtt_demo_process+0x3e4>)
   101ee:	5cd2      	ldrb	r2, [r2, r3]
   101f0:	2a00      	cmp	r2, #0
   101f2:	d16d      	bne.n	102d0 <process_thread_mqtt_demo_process+0x360>
   101f4:	3b0a      	subs	r3, #10
   101f6:	4957      	ldr	r1, [pc, #348]	; (10354 <process_thread_mqtt_demo_process+0x3e4>)
   101f8:	5ccb      	ldrb	r3, [r1, r3]
   101fa:	2b08      	cmp	r3, #8
   101fc:	d168      	bne.n	102d0 <process_thread_mqtt_demo_process+0x360>
   101fe:	239d      	movs	r3, #157	; 0x9d
   10200:	009b      	lsls	r3, r3, #2
   10202:	5ccb      	ldrb	r3, [r1, r3]
   10204:	2b00      	cmp	r3, #0
   10206:	d063      	beq.n	102d0 <process_thread_mqtt_demo_process+0x360>
      /* Connected. Publish */
      if(state == STATE_CONNECTED) {
   10208:	4b45      	ldr	r3, [pc, #276]	; (10320 <process_thread_mqtt_demo_process+0x3b0>)
   1020a:	781b      	ldrb	r3, [r3, #0]
   1020c:	2b03      	cmp	r3, #3
   1020e:	d116      	bne.n	1023e <process_thread_mqtt_demo_process+0x2ce>
subscribe(void)
{
  /* Publish MQTT topic in IBM quickstart format */
  mqtt_status_t status;

  status = mqtt_subscribe(&conn, NULL, sub_topic, MQTT_QOS_LEVEL_1);
   10210:	1c08      	adds	r0, r1, #0
   10212:	2100      	movs	r1, #0
   10214:	4a66      	ldr	r2, [pc, #408]	; (103b0 <process_thread_mqtt_demo_process+0x440>)
   10216:	3b02      	subs	r3, #2
   10218:	4f66      	ldr	r7, [pc, #408]	; (103b4 <process_thread_mqtt_demo_process+0x444>)
   1021a:	47b8      	blx	r7
   1021c:	1c07      	adds	r7, r0, #0

  DBG("APP - Subscribing!\n\r");
   1021e:	4866      	ldr	r0, [pc, #408]	; (103b8 <process_thread_mqtt_demo_process+0x448>)
   10220:	4b31      	ldr	r3, [pc, #196]	; (102e8 <process_thread_mqtt_demo_process+0x378>)
   10222:	4798      	blx	r3
  if(status == MQTT_STATUS_OUT_QUEUE_FULL) {
   10224:	2f01      	cmp	r7, #1
   10226:	d102      	bne.n	1022e <process_thread_mqtt_demo_process+0x2be>
    DBG("APP - Tried to subscribe but command queue was full!\n\r");
   10228:	4864      	ldr	r0, [pc, #400]	; (103bc <process_thread_mqtt_demo_process+0x44c>)
   1022a:	4b2f      	ldr	r3, [pc, #188]	; (102e8 <process_thread_mqtt_demo_process+0x378>)
   1022c:	4798      	blx	r3
  }
  DBG("\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\rSubscribed on:%s \n\r", sub_topic);
   1022e:	4864      	ldr	r0, [pc, #400]	; (103c0 <process_thread_mqtt_demo_process+0x450>)
   10230:	495f      	ldr	r1, [pc, #380]	; (103b0 <process_thread_mqtt_demo_process+0x440>)
   10232:	4b2d      	ldr	r3, [pc, #180]	; (102e8 <process_thread_mqtt_demo_process+0x378>)
   10234:	4798      	blx	r3

    if(mqtt_ready(&conn) && conn.out_buffer_sent) {
      /* Connected. Publish */
      if(state == STATE_CONNECTED) {
        subscribe();
        state = STATE_PUBLISHING;
   10236:	2204      	movs	r2, #4
   10238:	4b39      	ldr	r3, [pc, #228]	; (10320 <process_thread_mqtt_demo_process+0x3b0>)
   1023a:	701a      	strb	r2, [r3, #0]
   1023c:	e03e      	b.n	102bc <process_thread_mqtt_demo_process+0x34c>
      } else {
        leds_on(STATUS_LED);
   1023e:	2001      	movs	r0, #1
   10240:	4b53      	ldr	r3, [pc, #332]	; (10390 <process_thread_mqtt_demo_process+0x420>)
   10242:	4798      	blx	r3
        ctimer_set(&ct, PUBLISH_LED_ON_DURATION, publish_led_off, NULL);
   10244:	4853      	ldr	r0, [pc, #332]	; (10394 <process_thread_mqtt_demo_process+0x424>)
   10246:	2180      	movs	r1, #128	; 0x80
   10248:	4a53      	ldr	r2, [pc, #332]	; (10398 <process_thread_mqtt_demo_process+0x428>)
   1024a:	2300      	movs	r3, #0
   1024c:	4f53      	ldr	r7, [pc, #332]	; (1039c <process_thread_mqtt_demo_process+0x42c>)
   1024e:	47b8      	blx	r7
{
  /* Publish MQTT topic in IBM quickstart format */
  int len;
  int remaining = APP_BUFFER_SIZE;

  seq_nr_value++;
   10250:	4a5c      	ldr	r2, [pc, #368]	; (103c4 <process_thread_mqtt_demo_process+0x454>)
   10252:	8813      	ldrh	r3, [r2, #0]
   10254:	3301      	adds	r3, #1
   10256:	8013      	strh	r3, [r2, #0]

  buf_ptr = app_buffer;

  len = snprintf(buf_ptr, remaining,"YuriBoardAWGES");
   10258:	4b5b      	ldr	r3, [pc, #364]	; (103c8 <process_thread_mqtt_demo_process+0x458>)
   1025a:	4699      	mov	r9, r3
   1025c:	4b5b      	ldr	r3, [pc, #364]	; (103cc <process_thread_mqtt_demo_process+0x45c>)
   1025e:	464a      	mov	r2, r9
   10260:	cb83      	ldmia	r3!, {r0, r1, r7}
   10262:	c283      	stmia	r2!, {r0, r1, r7}
   10264:	8819      	ldrh	r1, [r3, #0]
   10266:	8011      	strh	r1, [r2, #0]
   10268:	789b      	ldrb	r3, [r3, #2]
   1026a:	7093      	strb	r3, [r2, #2]
    printf("Buffer too short. Have %d, need %d + \\0\n\r", remaining, len);
    return;
  }

  remaining -= len;
  buf_ptr += len;
   1026c:	4b58      	ldr	r3, [pc, #352]	; (103d0 <process_thread_mqtt_demo_process+0x460>)
   1026e:	4698      	mov	r8, r3
   10270:	464b      	mov	r3, r9
   10272:	330e      	adds	r3, #14
   10274:	4642      	mov	r2, r8
   10276:	6013      	str	r3, [r2, #0]

  /* Put our Default route's string representation in a buffer */
  char def_rt_str[64];
  memset(def_rt_str, 0, sizeof(def_rt_str));
   10278:	a808      	add	r0, sp, #32
   1027a:	2100      	movs	r1, #0
   1027c:	2240      	movs	r2, #64	; 0x40
   1027e:	4b1c      	ldr	r3, [pc, #112]	; (102f0 <process_thread_mqtt_demo_process+0x380>)
   10280:	4798      	blx	r3
  ipaddr_sprintf(def_rt_str, sizeof(def_rt_str), uip_ds6_defrt_choose());
   10282:	4b54      	ldr	r3, [pc, #336]	; (103d4 <process_thread_mqtt_demo_process+0x464>)
   10284:	4798      	blx	r3
   10286:	1c02      	adds	r2, r0, #0
   10288:	a808      	add	r0, sp, #32
   1028a:	2140      	movs	r1, #64	; 0x40
   1028c:	4b52      	ldr	r3, [pc, #328]	; (103d8 <process_thread_mqtt_demo_process+0x468>)
   1028e:	4798      	blx	r3
  if(len < 0 || len >= remaining) {
    printf("Buffer too short. Have %d, need %d + \\0\n\r", remaining, len);
    return;
  }
  remaining -= len;
  buf_ptr += len;
   10290:	4643      	mov	r3, r8
   10292:	681b      	ldr	r3, [r3, #0]
   10294:	332a      	adds	r3, #42	; 0x2a
   10296:	4642      	mov	r2, r8
   10298:	6013      	str	r3, [r2, #0]
    printf("Buffer too short. Have %d, need %d + \\0\n\r", remaining, len);
    return;
  }

  mqtt_publish(&conn, NULL, pub_topic, (uint8_t *)app_buffer,
               strlen(app_buffer), MQTT_QOS_LEVEL_1, MQTT_RETAIN_OFF);
   1029a:	4648      	mov	r0, r9
   1029c:	4b31      	ldr	r3, [pc, #196]	; (10364 <process_thread_mqtt_demo_process+0x3f4>)
   1029e:	4798      	blx	r3
  if(len < 0 || len >= remaining) {
    printf("Buffer too short. Have %d, need %d + \\0\n\r", remaining, len);
    return;
  }

  mqtt_publish(&conn, NULL, pub_topic, (uint8_t *)app_buffer,
   102a0:	9000      	str	r0, [sp, #0]
   102a2:	2301      	movs	r3, #1
   102a4:	9301      	str	r3, [sp, #4]
   102a6:	2300      	movs	r3, #0
   102a8:	9302      	str	r3, [sp, #8]
   102aa:	482a      	ldr	r0, [pc, #168]	; (10354 <process_thread_mqtt_demo_process+0x3e4>)
   102ac:	2100      	movs	r1, #0
   102ae:	4a4b      	ldr	r2, [pc, #300]	; (103dc <process_thread_mqtt_demo_process+0x46c>)
   102b0:	464b      	mov	r3, r9
   102b2:	4f4b      	ldr	r7, [pc, #300]	; (103e0 <process_thread_mqtt_demo_process+0x470>)
   102b4:	47b8      	blx	r7
               strlen(app_buffer), MQTT_QOS_LEVEL_1, MQTT_RETAIN_OFF);

  DBG("APP - Publish!\n\r");
   102b6:	484b      	ldr	r0, [pc, #300]	; (103e4 <process_thread_mqtt_demo_process+0x474>)
   102b8:	4b0b      	ldr	r3, [pc, #44]	; (102e8 <process_thread_mqtt_demo_process+0x378>)
   102ba:	4798      	blx	r3
      } else {
        leds_on(STATUS_LED);
        ctimer_set(&ct, PUBLISH_LED_ON_DURATION, publish_led_off, NULL);
        publish();
      }
      etimer_set(&publish_periodic_timer, conf.pub_interval);
   102bc:	23c8      	movs	r3, #200	; 0xc8
   102be:	4a0b      	ldr	r2, [pc, #44]	; (102ec <process_thread_mqtt_demo_process+0x37c>)
   102c0:	58d1      	ldr	r1, [r2, r3]
   102c2:	4823      	ldr	r0, [pc, #140]	; (10350 <process_thread_mqtt_demo_process+0x3e0>)
   102c4:	4b1e      	ldr	r3, [pc, #120]	; (10340 <process_thread_mqtt_demo_process+0x3d0>)
   102c6:	4798      	blx	r3

      DBG("Publishing\n\r");
   102c8:	4847      	ldr	r0, [pc, #284]	; (103e8 <process_thread_mqtt_demo_process+0x478>)
   102ca:	4b07      	ldr	r3, [pc, #28]	; (102e8 <process_thread_mqtt_demo_process+0x378>)
   102cc:	4798      	blx	r3
   102ce:	e0be      	b.n	1044e <process_thread_mqtt_demo_process+0x4de>
       * This can mean that we have lost connectivity to our broker or that
       * simply there is some network delay. In both cases, we refuse to
       * trigger a new message and we wait for TCP to either ACK the entire
       * packet after retries, or to timeout and notify us.
       */
      DBG("Publishing... (MQTT state=%d, q=%u)\n\r", conn.state,
   102d0:	2360      	movs	r3, #96	; 0x60
   102d2:	4920      	ldr	r1, [pc, #128]	; (10354 <process_thread_mqtt_demo_process+0x3e4>)
   102d4:	5cc9      	ldrb	r1, [r1, r3]
   102d6:	4845      	ldr	r0, [pc, #276]	; (103ec <process_thread_mqtt_demo_process+0x47c>)
   102d8:	4b03      	ldr	r3, [pc, #12]	; (102e8 <process_thread_mqtt_demo_process+0x378>)
   102da:	4798      	blx	r3
   102dc:	e0b3      	b.n	10446 <process_thread_mqtt_demo_process+0x4d6>
   102de:	46c0      	nop			; (mov r8, r8)
   102e0:	000002bf 	.word	0x000002bf
   102e4:	000131b4 	.word	0x000131b4
   102e8:	00010931 	.word	0x00010931
   102ec:	20001f28 	.word	0x20001f28
   102f0:	00010921 	.word	0x00010921
   102f4:	000131c8 	.word	0x000131c8
   102f8:	000131d8 	.word	0x000131d8
   102fc:	000131e0 	.word	0x000131e0
   10300:	000131e8 	.word	0x000131e8
   10304:	000131f0 	.word	0x000131f0
   10308:	0000075b 	.word	0x0000075b
   1030c:	200031d0 	.word	0x200031d0
   10310:	20002a3c 	.word	0x20002a3c
   10314:	000131f8 	.word	0x000131f8
   10318:	00010b81 	.word	0x00010b81
   1031c:	0001321c 	.word	0x0001321c
   10320:	2000203c 	.word	0x2000203c
   10324:	00013238 	.word	0x00013238
   10328:	00013254 	.word	0x00013254
   1032c:	20002a7c 	.word	0x20002a7c
   10330:	20002a2c 	.word	0x20002a2c
   10334:	0000fced 	.word	0x0000fced
   10338:	00007f61 	.word	0x00007f61
   1033c:	200027f4 	.word	0x200027f4
   10340:	0000e90d 	.word	0x0000e90d
   10344:	20002b55 	.word	0x20002b55
   10348:	00012d2c 	.word	0x00012d2c
   1034c:	20002828 	.word	0x20002828
   10350:	200027a0 	.word	0x200027a0
   10354:	20002040 	.word	0x20002040
   10358:	200001c0 	.word	0x200001c0
   1035c:	0000fd2d 	.word	0x0000fd2d
   10360:	00003c29 	.word	0x00003c29
   10364:	00010be9 	.word	0x00010be9
   10368:	00013270 	.word	0x00013270
   1036c:	00010bf9 	.word	0x00010bf9
   10370:	0001327c 	.word	0x0001327c
   10374:	000132a4 	.word	0x000132a4
   10378:	00005551 	.word	0x00005551
   1037c:	000132b4 	.word	0x000132b4
   10380:	000074b9 	.word	0x000074b9
   10384:	000132bc 	.word	0x000132bc
   10388:	0000fe99 	.word	0x0000fe99
   1038c:	00003cc1 	.word	0x00003cc1
   10390:	000056c9 	.word	0x000056c9
   10394:	20002808 	.word	0x20002808
   10398:	0000fd1d 	.word	0x0000fd1d
   1039c:	0000e615 	.word	0x0000e615
   103a0:	000132e0 	.word	0x000132e0
   103a4:	000132f4 	.word	0x000132f4
   103a8:	20002a34 	.word	0x20002a34
   103ac:	0000ed8d 	.word	0x0000ed8d
   103b0:	200027b0 	.word	0x200027b0
   103b4:	00005401 	.word	0x00005401
   103b8:	00013320 	.word	0x00013320
   103bc:	00013338 	.word	0x00013338
   103c0:	00013370 	.word	0x00013370
   103c4:	2000203e 	.word	0x2000203e
   103c8:	2000282c 	.word	0x2000282c
   103cc:	000133a0 	.word	0x000133a0
   103d0:	200027f0 	.word	0x200027f0
   103d4:	0000724d 	.word	0x0000724d
   103d8:	0000fec1 	.word	0x0000fec1
   103dc:	20001ffc 	.word	0x20001ffc
   103e0:	00005499 	.word	0x00005499
   103e4:	000133b0 	.word	0x000133b0
   103e8:	000133c4 	.word	0x000133c4
   103ec:	000133d4 	.word	0x000133d4
          conn.out_queue_full);
    }
    break;
  case STATE_DISCONNECTED:
    DBG("Disconnected\n\r");
   103f0:	4837      	ldr	r0, [pc, #220]	; (104d0 <process_thread_mqtt_demo_process+0x560>)
   103f2:	4b38      	ldr	r3, [pc, #224]	; (104d4 <process_thread_mqtt_demo_process+0x564>)
   103f4:	4798      	blx	r3
    if(connect_attempt < RECONNECT_ATTEMPTS ||
       RECONNECT_ATTEMPTS == RETRY_FOREVER) {
      /* Disconnect and backoff */
      clock_time_t interval;
      mqtt_disconnect(&conn);
   103f6:	4838      	ldr	r0, [pc, #224]	; (104d8 <process_thread_mqtt_demo_process+0x568>)
   103f8:	4b38      	ldr	r3, [pc, #224]	; (104dc <process_thread_mqtt_demo_process+0x56c>)
   103fa:	4798      	blx	r3
      connect_attempt++;
   103fc:	4b38      	ldr	r3, [pc, #224]	; (104e0 <process_thread_mqtt_demo_process+0x570>)
   103fe:	7819      	ldrb	r1, [r3, #0]
   10400:	3101      	adds	r1, #1
   10402:	b2c9      	uxtb	r1, r1
   10404:	7019      	strb	r1, [r3, #0]

      interval = connect_attempt < 3 ? RECONNECT_INTERVAL << connect_attempt :
   10406:	2902      	cmp	r1, #2
   10408:	d803      	bhi.n	10412 <process_thread_mqtt_demo_process+0x4a2>
   1040a:	2280      	movs	r2, #128	; 0x80
   1040c:	0052      	lsls	r2, r2, #1
   1040e:	408a      	lsls	r2, r1
   10410:	e001      	b.n	10416 <process_thread_mqtt_demo_process+0x4a6>
   10412:	2280      	movs	r2, #128	; 0x80
   10414:	0112      	lsls	r2, r2, #4
        RECONNECT_INTERVAL << 3;

      DBG("Disconnected. Attempt %u in %lu ticks\n\r", connect_attempt, interval);
   10416:	4833      	ldr	r0, [pc, #204]	; (104e4 <process_thread_mqtt_demo_process+0x574>)
   10418:	4b2e      	ldr	r3, [pc, #184]	; (104d4 <process_thread_mqtt_demo_process+0x564>)
   1041a:	4798      	blx	r3

      //etimer_set(&publish_periodic_timer, interval);
		etimer_set(&publish_periodic_timer, CLOCK_SECOND);
   1041c:	4832      	ldr	r0, [pc, #200]	; (104e8 <process_thread_mqtt_demo_process+0x578>)
   1041e:	2180      	movs	r1, #128	; 0x80
   10420:	4b32      	ldr	r3, [pc, #200]	; (104ec <process_thread_mqtt_demo_process+0x57c>)
   10422:	4798      	blx	r3

      state = STATE_REGISTERED;
   10424:	2201      	movs	r2, #1
   10426:	4b32      	ldr	r3, [pc, #200]	; (104f0 <process_thread_mqtt_demo_process+0x580>)
   10428:	701a      	strb	r2, [r3, #0]
   1042a:	e010      	b.n	1044e <process_thread_mqtt_demo_process+0x4de>
      DBG("Aborting connection after %u attempts\n\r", connect_attempt - 1);
    }
    break;
  case STATE_CONFIG_ERROR:
    /* Idle away. The only way out is a new config */
    printf("Bad configuration.\n\r");
   1042c:	4831      	ldr	r0, [pc, #196]	; (104f4 <process_thread_mqtt_demo_process+0x584>)
   1042e:	4b29      	ldr	r3, [pc, #164]	; (104d4 <process_thread_mqtt_demo_process+0x564>)
   10430:	4798      	blx	r3
   10432:	e00c      	b.n	1044e <process_thread_mqtt_demo_process+0x4de>
    return;
  case STATE_ERROR:
  default:
    leds_on(STATUS_LED);
   10434:	2001      	movs	r0, #1
   10436:	4b30      	ldr	r3, [pc, #192]	; (104f8 <process_thread_mqtt_demo_process+0x588>)
   10438:	4798      	blx	r3
     * 'default' should never happen.
     *
     * If we enter here it's because of some error. Stop timers. The only thing
     * that can bring us out is a new config event
     */
    printf("Default case: State=0x%02x\n\r", state);
   1043a:	4b2d      	ldr	r3, [pc, #180]	; (104f0 <process_thread_mqtt_demo_process+0x580>)
   1043c:	7819      	ldrb	r1, [r3, #0]
   1043e:	482f      	ldr	r0, [pc, #188]	; (104fc <process_thread_mqtt_demo_process+0x58c>)
   10440:	4b24      	ldr	r3, [pc, #144]	; (104d4 <process_thread_mqtt_demo_process+0x564>)
   10442:	4798      	blx	r3
   10444:	e003      	b.n	1044e <process_thread_mqtt_demo_process+0x4de>
    return;
  }

  /* If we didn't return so far, reschedule ourselves */
  etimer_set(&publish_periodic_timer, STATE_MACHINE_PERIODIC);
   10446:	4828      	ldr	r0, [pc, #160]	; (104e8 <process_thread_mqtt_demo_process+0x578>)
   10448:	2140      	movs	r1, #64	; 0x40
   1044a:	4b28      	ldr	r3, [pc, #160]	; (104ec <process_thread_mqtt_demo_process+0x57c>)
   1044c:	4798      	blx	r3
       ev == PROCESS_EVENT_POLL ||
       (ev == sensors_event && data == PUBLISH_TRIGGER)) {
      state_machine();
    }

    if(ev == PROCESS_EVENT_TIMER && data == &echo_request_timer) {
   1044e:	2c88      	cmp	r4, #136	; 0x88
   10450:	d000      	beq.n	10454 <process_thread_mqtt_demo_process+0x4e4>
   10452:	e60f      	b.n	10074 <process_thread_mqtt_demo_process+0x104>
   10454:	4b2a      	ldr	r3, [pc, #168]	; (10500 <process_thread_mqtt_demo_process+0x590>)
   10456:	429e      	cmp	r6, r3
   10458:	d000      	beq.n	1045c <process_thread_mqtt_demo_process+0x4ec>
   1045a:	e60b      	b.n	10074 <process_thread_mqtt_demo_process+0x104>
      ping_parent();
   1045c:	4b29      	ldr	r3, [pc, #164]	; (10504 <process_thread_mqtt_demo_process+0x594>)
   1045e:	4798      	blx	r3
      etimer_set(&echo_request_timer, conf.def_rt_ping_interval);
   10460:	23cc      	movs	r3, #204	; 0xcc
   10462:	4a29      	ldr	r2, [pc, #164]	; (10508 <process_thread_mqtt_demo_process+0x598>)
   10464:	58d1      	ldr	r1, [r2, r3]
   10466:	4826      	ldr	r0, [pc, #152]	; (10500 <process_thread_mqtt_demo_process+0x590>)
   10468:	4b20      	ldr	r3, [pc, #128]	; (104ec <process_thread_mqtt_demo_process+0x57c>)
   1046a:	4798      	blx	r3
   1046c:	e602      	b.n	10074 <process_thread_mqtt_demo_process+0x104>
    }
  }

  PROCESS_END();
   1046e:	2300      	movs	r3, #0
   10470:	8003      	strh	r3, [r0, #0]
   10472:	2003      	movs	r0, #3
   10474:	e026      	b.n	104c4 <process_thread_mqtt_demo_process+0x554>
}
/*---------------------------------------------------------------------------*/
static int
construct_sub_topic(void)
{
  int len = snprintf(sub_topic, BUFFER_SIZE, "iot-2/cmd/%s/fmt/json",
   10476:	4825      	ldr	r0, [pc, #148]	; (1050c <process_thread_mqtt_demo_process+0x59c>)
   10478:	2140      	movs	r1, #64	; 0x40
   1047a:	4a25      	ldr	r2, [pc, #148]	; (10510 <process_thread_mqtt_demo_process+0x5a0>)
   1047c:	4b22      	ldr	r3, [pc, #136]	; (10508 <process_thread_mqtt_demo_process+0x598>)
   1047e:	33c0      	adds	r3, #192	; 0xc0
   10480:	4c24      	ldr	r4, [pc, #144]	; (10514 <process_thread_mqtt_demo_process+0x5a4>)
   10482:	47a0      	blx	r4
   10484:	1e01      	subs	r1, r0, #0
                     conf.cmd_type);

  /* len < 0: Error. Len >= BUFFER_SIZE: Buffer too small */
  if(len < 0 || len >= BUFFER_SIZE) {
   10486:	293f      	cmp	r1, #63	; 0x3f
   10488:	d900      	bls.n	1048c <process_thread_mqtt_demo_process+0x51c>
   1048a:	e5d6      	b.n	1003a <process_thread_mqtt_demo_process+0xca>
}
/*---------------------------------------------------------------------------*/
static int
construct_pub_topic(void)
{
  int len = snprintf(pub_topic, BUFFER_SIZE, "iot-2/evt/%s/fmt/json",
   1048c:	4822      	ldr	r0, [pc, #136]	; (10518 <process_thread_mqtt_demo_process+0x5a8>)
   1048e:	2140      	movs	r1, #64	; 0x40
   10490:	4a22      	ldr	r2, [pc, #136]	; (1051c <process_thread_mqtt_demo_process+0x5ac>)
   10492:	4b1d      	ldr	r3, [pc, #116]	; (10508 <process_thread_mqtt_demo_process+0x598>)
   10494:	3360      	adds	r3, #96	; 0x60
   10496:	4c1f      	ldr	r4, [pc, #124]	; (10514 <process_thread_mqtt_demo_process+0x5a4>)
   10498:	47a0      	blx	r4
   1049a:	1e01      	subs	r1, r0, #0
                     conf.event_type_id);

  /* len < 0: Error. Len >= BUFFER_SIZE: Buffer too small */
  if(len < 0 || len >= BUFFER_SIZE) {
   1049c:	293f      	cmp	r1, #63	; 0x3f
   1049e:	d900      	bls.n	104a2 <process_thread_mqtt_demo_process+0x532>
   104a0:	e5d3      	b.n	1004a <process_thread_mqtt_demo_process+0xda>
    state = STATE_CONFIG_ERROR;
    return;
  }

  /* Reset the counter */
  seq_nr_value = 0;
   104a2:	2200      	movs	r2, #0
   104a4:	4b1e      	ldr	r3, [pc, #120]	; (10520 <process_thread_mqtt_demo_process+0x5b0>)
   104a6:	801a      	strh	r2, [r3, #0]

  state = STATE_INIT;
   104a8:	4b11      	ldr	r3, [pc, #68]	; (104f0 <process_thread_mqtt_demo_process+0x580>)
   104aa:	701a      	strb	r2, [r3, #0]
   * If we entered an error state then we won't do anything when it fires.
   *
   * Since the error at this stage is a config error, we will only exit this
   * error state if we get a new config.
   */
  etimer_set(&publish_periodic_timer, 0);
   104ac:	480e      	ldr	r0, [pc, #56]	; (104e8 <process_thread_mqtt_demo_process+0x578>)
   104ae:	2100      	movs	r1, #0
   104b0:	4b0e      	ldr	r3, [pc, #56]	; (104ec <process_thread_mqtt_demo_process+0x57c>)
   104b2:	4798      	blx	r3
   104b4:	e5d0      	b.n	10058 <process_thread_mqtt_demo_process+0xe8>
        state = STATE_REGISTERED;
      }
    }

    if((ev == PROCESS_EVENT_TIMER && data == &publish_periodic_timer) ||
       ev == PROCESS_EVENT_POLL ||
   104b6:	42a3      	cmp	r3, r4
   104b8:	d000      	beq.n	104bc <process_thread_mqtt_demo_process+0x54c>
   104ba:	e5db      	b.n	10074 <process_thread_mqtt_demo_process+0x104>
   104bc:	e5f9      	b.n	100b2 <process_thread_mqtt_demo_process+0x142>
   104be:	42a3      	cmp	r3, r4
   104c0:	d1c8      	bne.n	10454 <process_thread_mqtt_demo_process+0x4e4>
   104c2:	e5f6      	b.n	100b2 <process_thread_mqtt_demo_process+0x142>
      etimer_set(&echo_request_timer, conf.def_rt_ping_interval);
    }
  }

  PROCESS_END();
}
   104c4:	b019      	add	sp, #100	; 0x64
   104c6:	bc0c      	pop	{r2, r3}
   104c8:	4690      	mov	r8, r2
   104ca:	4699      	mov	r9, r3
   104cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
   104ce:	46c0      	nop			; (mov r8, r8)
   104d0:	000133fc 	.word	0x000133fc
   104d4:	00010931 	.word	0x00010931
   104d8:	20002040 	.word	0x20002040
   104dc:	00003d31 	.word	0x00003d31
   104e0:	20002828 	.word	0x20002828
   104e4:	0001340c 	.word	0x0001340c
   104e8:	200027a0 	.word	0x200027a0
   104ec:	0000e90d 	.word	0x0000e90d
   104f0:	2000203c 	.word	0x2000203c
   104f4:	00013434 	.word	0x00013434
   104f8:	000056c9 	.word	0x000056c9
   104fc:	0001344c 	.word	0x0001344c
   10500:	200027f4 	.word	0x200027f4
   10504:	0000fe99 	.word	0x0000fe99
   10508:	20001f28 	.word	0x20001f28
   1050c:	200027b0 	.word	0x200027b0
   10510:	0001346c 	.word	0x0001346c
   10514:	00010b81 	.word	0x00010b81
   10518:	20001ffc 	.word	0x20001ffc
   1051c:	00013484 	.word	0x00013484
   10520:	2000203e 	.word	0x2000203e

00010524 <__aeabi_uidiv>:
   10524:	2200      	movs	r2, #0
   10526:	0843      	lsrs	r3, r0, #1
   10528:	428b      	cmp	r3, r1
   1052a:	d374      	bcc.n	10616 <__aeabi_uidiv+0xf2>
   1052c:	0903      	lsrs	r3, r0, #4
   1052e:	428b      	cmp	r3, r1
   10530:	d35f      	bcc.n	105f2 <__aeabi_uidiv+0xce>
   10532:	0a03      	lsrs	r3, r0, #8
   10534:	428b      	cmp	r3, r1
   10536:	d344      	bcc.n	105c2 <__aeabi_uidiv+0x9e>
   10538:	0b03      	lsrs	r3, r0, #12
   1053a:	428b      	cmp	r3, r1
   1053c:	d328      	bcc.n	10590 <__aeabi_uidiv+0x6c>
   1053e:	0c03      	lsrs	r3, r0, #16
   10540:	428b      	cmp	r3, r1
   10542:	d30d      	bcc.n	10560 <__aeabi_uidiv+0x3c>
   10544:	22ff      	movs	r2, #255	; 0xff
   10546:	0209      	lsls	r1, r1, #8
   10548:	ba12      	rev	r2, r2
   1054a:	0c03      	lsrs	r3, r0, #16
   1054c:	428b      	cmp	r3, r1
   1054e:	d302      	bcc.n	10556 <__aeabi_uidiv+0x32>
   10550:	1212      	asrs	r2, r2, #8
   10552:	0209      	lsls	r1, r1, #8
   10554:	d065      	beq.n	10622 <__aeabi_uidiv+0xfe>
   10556:	0b03      	lsrs	r3, r0, #12
   10558:	428b      	cmp	r3, r1
   1055a:	d319      	bcc.n	10590 <__aeabi_uidiv+0x6c>
   1055c:	e000      	b.n	10560 <__aeabi_uidiv+0x3c>
   1055e:	0a09      	lsrs	r1, r1, #8
   10560:	0bc3      	lsrs	r3, r0, #15
   10562:	428b      	cmp	r3, r1
   10564:	d301      	bcc.n	1056a <__aeabi_uidiv+0x46>
   10566:	03cb      	lsls	r3, r1, #15
   10568:	1ac0      	subs	r0, r0, r3
   1056a:	4152      	adcs	r2, r2
   1056c:	0b83      	lsrs	r3, r0, #14
   1056e:	428b      	cmp	r3, r1
   10570:	d301      	bcc.n	10576 <__aeabi_uidiv+0x52>
   10572:	038b      	lsls	r3, r1, #14
   10574:	1ac0      	subs	r0, r0, r3
   10576:	4152      	adcs	r2, r2
   10578:	0b43      	lsrs	r3, r0, #13
   1057a:	428b      	cmp	r3, r1
   1057c:	d301      	bcc.n	10582 <__aeabi_uidiv+0x5e>
   1057e:	034b      	lsls	r3, r1, #13
   10580:	1ac0      	subs	r0, r0, r3
   10582:	4152      	adcs	r2, r2
   10584:	0b03      	lsrs	r3, r0, #12
   10586:	428b      	cmp	r3, r1
   10588:	d301      	bcc.n	1058e <__aeabi_uidiv+0x6a>
   1058a:	030b      	lsls	r3, r1, #12
   1058c:	1ac0      	subs	r0, r0, r3
   1058e:	4152      	adcs	r2, r2
   10590:	0ac3      	lsrs	r3, r0, #11
   10592:	428b      	cmp	r3, r1
   10594:	d301      	bcc.n	1059a <__aeabi_uidiv+0x76>
   10596:	02cb      	lsls	r3, r1, #11
   10598:	1ac0      	subs	r0, r0, r3
   1059a:	4152      	adcs	r2, r2
   1059c:	0a83      	lsrs	r3, r0, #10
   1059e:	428b      	cmp	r3, r1
   105a0:	d301      	bcc.n	105a6 <__aeabi_uidiv+0x82>
   105a2:	028b      	lsls	r3, r1, #10
   105a4:	1ac0      	subs	r0, r0, r3
   105a6:	4152      	adcs	r2, r2
   105a8:	0a43      	lsrs	r3, r0, #9
   105aa:	428b      	cmp	r3, r1
   105ac:	d301      	bcc.n	105b2 <__aeabi_uidiv+0x8e>
   105ae:	024b      	lsls	r3, r1, #9
   105b0:	1ac0      	subs	r0, r0, r3
   105b2:	4152      	adcs	r2, r2
   105b4:	0a03      	lsrs	r3, r0, #8
   105b6:	428b      	cmp	r3, r1
   105b8:	d301      	bcc.n	105be <__aeabi_uidiv+0x9a>
   105ba:	020b      	lsls	r3, r1, #8
   105bc:	1ac0      	subs	r0, r0, r3
   105be:	4152      	adcs	r2, r2
   105c0:	d2cd      	bcs.n	1055e <__aeabi_uidiv+0x3a>
   105c2:	09c3      	lsrs	r3, r0, #7
   105c4:	428b      	cmp	r3, r1
   105c6:	d301      	bcc.n	105cc <__aeabi_uidiv+0xa8>
   105c8:	01cb      	lsls	r3, r1, #7
   105ca:	1ac0      	subs	r0, r0, r3
   105cc:	4152      	adcs	r2, r2
   105ce:	0983      	lsrs	r3, r0, #6
   105d0:	428b      	cmp	r3, r1
   105d2:	d301      	bcc.n	105d8 <__aeabi_uidiv+0xb4>
   105d4:	018b      	lsls	r3, r1, #6
   105d6:	1ac0      	subs	r0, r0, r3
   105d8:	4152      	adcs	r2, r2
   105da:	0943      	lsrs	r3, r0, #5
   105dc:	428b      	cmp	r3, r1
   105de:	d301      	bcc.n	105e4 <__aeabi_uidiv+0xc0>
   105e0:	014b      	lsls	r3, r1, #5
   105e2:	1ac0      	subs	r0, r0, r3
   105e4:	4152      	adcs	r2, r2
   105e6:	0903      	lsrs	r3, r0, #4
   105e8:	428b      	cmp	r3, r1
   105ea:	d301      	bcc.n	105f0 <__aeabi_uidiv+0xcc>
   105ec:	010b      	lsls	r3, r1, #4
   105ee:	1ac0      	subs	r0, r0, r3
   105f0:	4152      	adcs	r2, r2
   105f2:	08c3      	lsrs	r3, r0, #3
   105f4:	428b      	cmp	r3, r1
   105f6:	d301      	bcc.n	105fc <__aeabi_uidiv+0xd8>
   105f8:	00cb      	lsls	r3, r1, #3
   105fa:	1ac0      	subs	r0, r0, r3
   105fc:	4152      	adcs	r2, r2
   105fe:	0883      	lsrs	r3, r0, #2
   10600:	428b      	cmp	r3, r1
   10602:	d301      	bcc.n	10608 <__aeabi_uidiv+0xe4>
   10604:	008b      	lsls	r3, r1, #2
   10606:	1ac0      	subs	r0, r0, r3
   10608:	4152      	adcs	r2, r2
   1060a:	0843      	lsrs	r3, r0, #1
   1060c:	428b      	cmp	r3, r1
   1060e:	d301      	bcc.n	10614 <__aeabi_uidiv+0xf0>
   10610:	004b      	lsls	r3, r1, #1
   10612:	1ac0      	subs	r0, r0, r3
   10614:	4152      	adcs	r2, r2
   10616:	1a41      	subs	r1, r0, r1
   10618:	d200      	bcs.n	1061c <__aeabi_uidiv+0xf8>
   1061a:	4601      	mov	r1, r0
   1061c:	4152      	adcs	r2, r2
   1061e:	4610      	mov	r0, r2
   10620:	4770      	bx	lr
   10622:	e7ff      	b.n	10624 <__aeabi_uidiv+0x100>
   10624:	b501      	push	{r0, lr}
   10626:	2000      	movs	r0, #0
   10628:	f000 f8fc 	bl	10824 <__aeabi_idiv0>
   1062c:	bd02      	pop	{r1, pc}
   1062e:	46c0      	nop			; (mov r8, r8)

00010630 <__aeabi_uidivmod>:
   10630:	2900      	cmp	r1, #0
   10632:	d0f7      	beq.n	10624 <__aeabi_uidiv+0x100>
   10634:	b503      	push	{r0, r1, lr}
   10636:	f7ff ff75 	bl	10524 <__aeabi_uidiv>
   1063a:	bc0e      	pop	{r1, r2, r3}
   1063c:	4342      	muls	r2, r0
   1063e:	1a89      	subs	r1, r1, r2
   10640:	4718      	bx	r3
   10642:	46c0      	nop			; (mov r8, r8)

00010644 <__aeabi_idiv>:
   10644:	4603      	mov	r3, r0
   10646:	430b      	orrs	r3, r1
   10648:	d47f      	bmi.n	1074a <__aeabi_idiv+0x106>
   1064a:	2200      	movs	r2, #0
   1064c:	0843      	lsrs	r3, r0, #1
   1064e:	428b      	cmp	r3, r1
   10650:	d374      	bcc.n	1073c <__aeabi_idiv+0xf8>
   10652:	0903      	lsrs	r3, r0, #4
   10654:	428b      	cmp	r3, r1
   10656:	d35f      	bcc.n	10718 <__aeabi_idiv+0xd4>
   10658:	0a03      	lsrs	r3, r0, #8
   1065a:	428b      	cmp	r3, r1
   1065c:	d344      	bcc.n	106e8 <__aeabi_idiv+0xa4>
   1065e:	0b03      	lsrs	r3, r0, #12
   10660:	428b      	cmp	r3, r1
   10662:	d328      	bcc.n	106b6 <__aeabi_idiv+0x72>
   10664:	0c03      	lsrs	r3, r0, #16
   10666:	428b      	cmp	r3, r1
   10668:	d30d      	bcc.n	10686 <__aeabi_idiv+0x42>
   1066a:	22ff      	movs	r2, #255	; 0xff
   1066c:	0209      	lsls	r1, r1, #8
   1066e:	ba12      	rev	r2, r2
   10670:	0c03      	lsrs	r3, r0, #16
   10672:	428b      	cmp	r3, r1
   10674:	d302      	bcc.n	1067c <__aeabi_idiv+0x38>
   10676:	1212      	asrs	r2, r2, #8
   10678:	0209      	lsls	r1, r1, #8
   1067a:	d065      	beq.n	10748 <__aeabi_idiv+0x104>
   1067c:	0b03      	lsrs	r3, r0, #12
   1067e:	428b      	cmp	r3, r1
   10680:	d319      	bcc.n	106b6 <__aeabi_idiv+0x72>
   10682:	e000      	b.n	10686 <__aeabi_idiv+0x42>
   10684:	0a09      	lsrs	r1, r1, #8
   10686:	0bc3      	lsrs	r3, r0, #15
   10688:	428b      	cmp	r3, r1
   1068a:	d301      	bcc.n	10690 <__aeabi_idiv+0x4c>
   1068c:	03cb      	lsls	r3, r1, #15
   1068e:	1ac0      	subs	r0, r0, r3
   10690:	4152      	adcs	r2, r2
   10692:	0b83      	lsrs	r3, r0, #14
   10694:	428b      	cmp	r3, r1
   10696:	d301      	bcc.n	1069c <__aeabi_idiv+0x58>
   10698:	038b      	lsls	r3, r1, #14
   1069a:	1ac0      	subs	r0, r0, r3
   1069c:	4152      	adcs	r2, r2
   1069e:	0b43      	lsrs	r3, r0, #13
   106a0:	428b      	cmp	r3, r1
   106a2:	d301      	bcc.n	106a8 <__aeabi_idiv+0x64>
   106a4:	034b      	lsls	r3, r1, #13
   106a6:	1ac0      	subs	r0, r0, r3
   106a8:	4152      	adcs	r2, r2
   106aa:	0b03      	lsrs	r3, r0, #12
   106ac:	428b      	cmp	r3, r1
   106ae:	d301      	bcc.n	106b4 <__aeabi_idiv+0x70>
   106b0:	030b      	lsls	r3, r1, #12
   106b2:	1ac0      	subs	r0, r0, r3
   106b4:	4152      	adcs	r2, r2
   106b6:	0ac3      	lsrs	r3, r0, #11
   106b8:	428b      	cmp	r3, r1
   106ba:	d301      	bcc.n	106c0 <__aeabi_idiv+0x7c>
   106bc:	02cb      	lsls	r3, r1, #11
   106be:	1ac0      	subs	r0, r0, r3
   106c0:	4152      	adcs	r2, r2
   106c2:	0a83      	lsrs	r3, r0, #10
   106c4:	428b      	cmp	r3, r1
   106c6:	d301      	bcc.n	106cc <__aeabi_idiv+0x88>
   106c8:	028b      	lsls	r3, r1, #10
   106ca:	1ac0      	subs	r0, r0, r3
   106cc:	4152      	adcs	r2, r2
   106ce:	0a43      	lsrs	r3, r0, #9
   106d0:	428b      	cmp	r3, r1
   106d2:	d301      	bcc.n	106d8 <__aeabi_idiv+0x94>
   106d4:	024b      	lsls	r3, r1, #9
   106d6:	1ac0      	subs	r0, r0, r3
   106d8:	4152      	adcs	r2, r2
   106da:	0a03      	lsrs	r3, r0, #8
   106dc:	428b      	cmp	r3, r1
   106de:	d301      	bcc.n	106e4 <__aeabi_idiv+0xa0>
   106e0:	020b      	lsls	r3, r1, #8
   106e2:	1ac0      	subs	r0, r0, r3
   106e4:	4152      	adcs	r2, r2
   106e6:	d2cd      	bcs.n	10684 <__aeabi_idiv+0x40>
   106e8:	09c3      	lsrs	r3, r0, #7
   106ea:	428b      	cmp	r3, r1
   106ec:	d301      	bcc.n	106f2 <__aeabi_idiv+0xae>
   106ee:	01cb      	lsls	r3, r1, #7
   106f0:	1ac0      	subs	r0, r0, r3
   106f2:	4152      	adcs	r2, r2
   106f4:	0983      	lsrs	r3, r0, #6
   106f6:	428b      	cmp	r3, r1
   106f8:	d301      	bcc.n	106fe <__aeabi_idiv+0xba>
   106fa:	018b      	lsls	r3, r1, #6
   106fc:	1ac0      	subs	r0, r0, r3
   106fe:	4152      	adcs	r2, r2
   10700:	0943      	lsrs	r3, r0, #5
   10702:	428b      	cmp	r3, r1
   10704:	d301      	bcc.n	1070a <__aeabi_idiv+0xc6>
   10706:	014b      	lsls	r3, r1, #5
   10708:	1ac0      	subs	r0, r0, r3
   1070a:	4152      	adcs	r2, r2
   1070c:	0903      	lsrs	r3, r0, #4
   1070e:	428b      	cmp	r3, r1
   10710:	d301      	bcc.n	10716 <__aeabi_idiv+0xd2>
   10712:	010b      	lsls	r3, r1, #4
   10714:	1ac0      	subs	r0, r0, r3
   10716:	4152      	adcs	r2, r2
   10718:	08c3      	lsrs	r3, r0, #3
   1071a:	428b      	cmp	r3, r1
   1071c:	d301      	bcc.n	10722 <__aeabi_idiv+0xde>
   1071e:	00cb      	lsls	r3, r1, #3
   10720:	1ac0      	subs	r0, r0, r3
   10722:	4152      	adcs	r2, r2
   10724:	0883      	lsrs	r3, r0, #2
   10726:	428b      	cmp	r3, r1
   10728:	d301      	bcc.n	1072e <__aeabi_idiv+0xea>
   1072a:	008b      	lsls	r3, r1, #2
   1072c:	1ac0      	subs	r0, r0, r3
   1072e:	4152      	adcs	r2, r2
   10730:	0843      	lsrs	r3, r0, #1
   10732:	428b      	cmp	r3, r1
   10734:	d301      	bcc.n	1073a <__aeabi_idiv+0xf6>
   10736:	004b      	lsls	r3, r1, #1
   10738:	1ac0      	subs	r0, r0, r3
   1073a:	4152      	adcs	r2, r2
   1073c:	1a41      	subs	r1, r0, r1
   1073e:	d200      	bcs.n	10742 <__aeabi_idiv+0xfe>
   10740:	4601      	mov	r1, r0
   10742:	4152      	adcs	r2, r2
   10744:	4610      	mov	r0, r2
   10746:	4770      	bx	lr
   10748:	e05d      	b.n	10806 <__aeabi_idiv+0x1c2>
   1074a:	0fca      	lsrs	r2, r1, #31
   1074c:	d000      	beq.n	10750 <__aeabi_idiv+0x10c>
   1074e:	4249      	negs	r1, r1
   10750:	1003      	asrs	r3, r0, #32
   10752:	d300      	bcc.n	10756 <__aeabi_idiv+0x112>
   10754:	4240      	negs	r0, r0
   10756:	4053      	eors	r3, r2
   10758:	2200      	movs	r2, #0
   1075a:	469c      	mov	ip, r3
   1075c:	0903      	lsrs	r3, r0, #4
   1075e:	428b      	cmp	r3, r1
   10760:	d32d      	bcc.n	107be <__aeabi_idiv+0x17a>
   10762:	0a03      	lsrs	r3, r0, #8
   10764:	428b      	cmp	r3, r1
   10766:	d312      	bcc.n	1078e <__aeabi_idiv+0x14a>
   10768:	22fc      	movs	r2, #252	; 0xfc
   1076a:	0189      	lsls	r1, r1, #6
   1076c:	ba12      	rev	r2, r2
   1076e:	0a03      	lsrs	r3, r0, #8
   10770:	428b      	cmp	r3, r1
   10772:	d30c      	bcc.n	1078e <__aeabi_idiv+0x14a>
   10774:	0189      	lsls	r1, r1, #6
   10776:	1192      	asrs	r2, r2, #6
   10778:	428b      	cmp	r3, r1
   1077a:	d308      	bcc.n	1078e <__aeabi_idiv+0x14a>
   1077c:	0189      	lsls	r1, r1, #6
   1077e:	1192      	asrs	r2, r2, #6
   10780:	428b      	cmp	r3, r1
   10782:	d304      	bcc.n	1078e <__aeabi_idiv+0x14a>
   10784:	0189      	lsls	r1, r1, #6
   10786:	d03a      	beq.n	107fe <__aeabi_idiv+0x1ba>
   10788:	1192      	asrs	r2, r2, #6
   1078a:	e000      	b.n	1078e <__aeabi_idiv+0x14a>
   1078c:	0989      	lsrs	r1, r1, #6
   1078e:	09c3      	lsrs	r3, r0, #7
   10790:	428b      	cmp	r3, r1
   10792:	d301      	bcc.n	10798 <__aeabi_idiv+0x154>
   10794:	01cb      	lsls	r3, r1, #7
   10796:	1ac0      	subs	r0, r0, r3
   10798:	4152      	adcs	r2, r2
   1079a:	0983      	lsrs	r3, r0, #6
   1079c:	428b      	cmp	r3, r1
   1079e:	d301      	bcc.n	107a4 <__aeabi_idiv+0x160>
   107a0:	018b      	lsls	r3, r1, #6
   107a2:	1ac0      	subs	r0, r0, r3
   107a4:	4152      	adcs	r2, r2
   107a6:	0943      	lsrs	r3, r0, #5
   107a8:	428b      	cmp	r3, r1
   107aa:	d301      	bcc.n	107b0 <__aeabi_idiv+0x16c>
   107ac:	014b      	lsls	r3, r1, #5
   107ae:	1ac0      	subs	r0, r0, r3
   107b0:	4152      	adcs	r2, r2
   107b2:	0903      	lsrs	r3, r0, #4
   107b4:	428b      	cmp	r3, r1
   107b6:	d301      	bcc.n	107bc <__aeabi_idiv+0x178>
   107b8:	010b      	lsls	r3, r1, #4
   107ba:	1ac0      	subs	r0, r0, r3
   107bc:	4152      	adcs	r2, r2
   107be:	08c3      	lsrs	r3, r0, #3
   107c0:	428b      	cmp	r3, r1
   107c2:	d301      	bcc.n	107c8 <__aeabi_idiv+0x184>
   107c4:	00cb      	lsls	r3, r1, #3
   107c6:	1ac0      	subs	r0, r0, r3
   107c8:	4152      	adcs	r2, r2
   107ca:	0883      	lsrs	r3, r0, #2
   107cc:	428b      	cmp	r3, r1
   107ce:	d301      	bcc.n	107d4 <__aeabi_idiv+0x190>
   107d0:	008b      	lsls	r3, r1, #2
   107d2:	1ac0      	subs	r0, r0, r3
   107d4:	4152      	adcs	r2, r2
   107d6:	d2d9      	bcs.n	1078c <__aeabi_idiv+0x148>
   107d8:	0843      	lsrs	r3, r0, #1
   107da:	428b      	cmp	r3, r1
   107dc:	d301      	bcc.n	107e2 <__aeabi_idiv+0x19e>
   107de:	004b      	lsls	r3, r1, #1
   107e0:	1ac0      	subs	r0, r0, r3
   107e2:	4152      	adcs	r2, r2
   107e4:	1a41      	subs	r1, r0, r1
   107e6:	d200      	bcs.n	107ea <__aeabi_idiv+0x1a6>
   107e8:	4601      	mov	r1, r0
   107ea:	4663      	mov	r3, ip
   107ec:	4152      	adcs	r2, r2
   107ee:	105b      	asrs	r3, r3, #1
   107f0:	4610      	mov	r0, r2
   107f2:	d301      	bcc.n	107f8 <__aeabi_idiv+0x1b4>
   107f4:	4240      	negs	r0, r0
   107f6:	2b00      	cmp	r3, #0
   107f8:	d500      	bpl.n	107fc <__aeabi_idiv+0x1b8>
   107fa:	4249      	negs	r1, r1
   107fc:	4770      	bx	lr
   107fe:	4663      	mov	r3, ip
   10800:	105b      	asrs	r3, r3, #1
   10802:	d300      	bcc.n	10806 <__aeabi_idiv+0x1c2>
   10804:	4240      	negs	r0, r0
   10806:	b501      	push	{r0, lr}
   10808:	2000      	movs	r0, #0
   1080a:	f000 f80b 	bl	10824 <__aeabi_idiv0>
   1080e:	bd02      	pop	{r1, pc}

00010810 <__aeabi_idivmod>:
   10810:	2900      	cmp	r1, #0
   10812:	d0f8      	beq.n	10806 <__aeabi_idiv+0x1c2>
   10814:	b503      	push	{r0, r1, lr}
   10816:	f7ff ff15 	bl	10644 <__aeabi_idiv>
   1081a:	bc0e      	pop	{r1, r2, r3}
   1081c:	4342      	muls	r2, r0
   1081e:	1a89      	subs	r1, r1, r2
   10820:	4718      	bx	r3
   10822:	46c0      	nop			; (mov r8, r8)

00010824 <__aeabi_idiv0>:
   10824:	4770      	bx	lr
   10826:	46c0      	nop			; (mov r8, r8)

00010828 <__aeabi_lmul>:
   10828:	b5f0      	push	{r4, r5, r6, r7, lr}
   1082a:	464f      	mov	r7, r9
   1082c:	4646      	mov	r6, r8
   1082e:	0405      	lsls	r5, r0, #16
   10830:	0c2d      	lsrs	r5, r5, #16
   10832:	1c2c      	adds	r4, r5, #0
   10834:	b4c0      	push	{r6, r7}
   10836:	0417      	lsls	r7, r2, #16
   10838:	0c16      	lsrs	r6, r2, #16
   1083a:	0c3f      	lsrs	r7, r7, #16
   1083c:	4699      	mov	r9, r3
   1083e:	0c03      	lsrs	r3, r0, #16
   10840:	437c      	muls	r4, r7
   10842:	4375      	muls	r5, r6
   10844:	435f      	muls	r7, r3
   10846:	4373      	muls	r3, r6
   10848:	197d      	adds	r5, r7, r5
   1084a:	0c26      	lsrs	r6, r4, #16
   1084c:	19ad      	adds	r5, r5, r6
   1084e:	469c      	mov	ip, r3
   10850:	42af      	cmp	r7, r5
   10852:	d903      	bls.n	1085c <__aeabi_lmul+0x34>
   10854:	2380      	movs	r3, #128	; 0x80
   10856:	025b      	lsls	r3, r3, #9
   10858:	4698      	mov	r8, r3
   1085a:	44c4      	add	ip, r8
   1085c:	464b      	mov	r3, r9
   1085e:	4351      	muls	r1, r2
   10860:	4343      	muls	r3, r0
   10862:	0424      	lsls	r4, r4, #16
   10864:	0c2e      	lsrs	r6, r5, #16
   10866:	0c24      	lsrs	r4, r4, #16
   10868:	042d      	lsls	r5, r5, #16
   1086a:	4466      	add	r6, ip
   1086c:	192c      	adds	r4, r5, r4
   1086e:	1859      	adds	r1, r3, r1
   10870:	1989      	adds	r1, r1, r6
   10872:	1c20      	adds	r0, r4, #0
   10874:	bc0c      	pop	{r2, r3}
   10876:	4690      	mov	r8, r2
   10878:	4699      	mov	r9, r3
   1087a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0001087c <__libc_init_array>:
   1087c:	4b0e      	ldr	r3, [pc, #56]	; (108b8 <__libc_init_array+0x3c>)
   1087e:	b570      	push	{r4, r5, r6, lr}
   10880:	2500      	movs	r5, #0
   10882:	1c1e      	adds	r6, r3, #0
   10884:	4c0d      	ldr	r4, [pc, #52]	; (108bc <__libc_init_array+0x40>)
   10886:	1ae4      	subs	r4, r4, r3
   10888:	10a4      	asrs	r4, r4, #2
   1088a:	42a5      	cmp	r5, r4
   1088c:	d004      	beq.n	10898 <__libc_init_array+0x1c>
   1088e:	00ab      	lsls	r3, r5, #2
   10890:	58f3      	ldr	r3, [r6, r3]
   10892:	4798      	blx	r3
   10894:	3501      	adds	r5, #1
   10896:	e7f8      	b.n	1088a <__libc_init_array+0xe>
   10898:	f002 fed4 	bl	13644 <_init>
   1089c:	4b08      	ldr	r3, [pc, #32]	; (108c0 <__libc_init_array+0x44>)
   1089e:	2500      	movs	r5, #0
   108a0:	1c1e      	adds	r6, r3, #0
   108a2:	4c08      	ldr	r4, [pc, #32]	; (108c4 <__libc_init_array+0x48>)
   108a4:	1ae4      	subs	r4, r4, r3
   108a6:	10a4      	asrs	r4, r4, #2
   108a8:	42a5      	cmp	r5, r4
   108aa:	d004      	beq.n	108b6 <__libc_init_array+0x3a>
   108ac:	00ab      	lsls	r3, r5, #2
   108ae:	58f3      	ldr	r3, [r6, r3]
   108b0:	4798      	blx	r3
   108b2:	3501      	adds	r5, #1
   108b4:	e7f8      	b.n	108a8 <__libc_init_array+0x2c>
   108b6:	bd70      	pop	{r4, r5, r6, pc}
   108b8:	00013650 	.word	0x00013650
   108bc:	00013650 	.word	0x00013650
   108c0:	00013650 	.word	0x00013650
   108c4:	00013654 	.word	0x00013654

000108c8 <memcmp>:
   108c8:	b530      	push	{r4, r5, lr}
   108ca:	2400      	movs	r4, #0
   108cc:	4294      	cmp	r4, r2
   108ce:	d008      	beq.n	108e2 <memcmp+0x1a>
   108d0:	5d03      	ldrb	r3, [r0, r4]
   108d2:	1c65      	adds	r5, r4, #1
   108d4:	5d0c      	ldrb	r4, [r1, r4]
   108d6:	42a3      	cmp	r3, r4
   108d8:	d001      	beq.n	108de <memcmp+0x16>
   108da:	1b18      	subs	r0, r3, r4
   108dc:	e002      	b.n	108e4 <memcmp+0x1c>
   108de:	1c2c      	adds	r4, r5, #0
   108e0:	e7f4      	b.n	108cc <memcmp+0x4>
   108e2:	2000      	movs	r0, #0
   108e4:	bd30      	pop	{r4, r5, pc}

000108e6 <memcpy>:
   108e6:	2300      	movs	r3, #0
   108e8:	b510      	push	{r4, lr}
   108ea:	4293      	cmp	r3, r2
   108ec:	d003      	beq.n	108f6 <memcpy+0x10>
   108ee:	5ccc      	ldrb	r4, [r1, r3]
   108f0:	54c4      	strb	r4, [r0, r3]
   108f2:	3301      	adds	r3, #1
   108f4:	e7f9      	b.n	108ea <memcpy+0x4>
   108f6:	bd10      	pop	{r4, pc}

000108f8 <memmove>:
   108f8:	b510      	push	{r4, lr}
   108fa:	4281      	cmp	r1, r0
   108fc:	d208      	bcs.n	10910 <memmove+0x18>
   108fe:	188b      	adds	r3, r1, r2
   10900:	4298      	cmp	r0, r3
   10902:	d205      	bcs.n	10910 <memmove+0x18>
   10904:	1a9b      	subs	r3, r3, r2
   10906:	3a01      	subs	r2, #1
   10908:	d309      	bcc.n	1091e <memmove+0x26>
   1090a:	5c99      	ldrb	r1, [r3, r2]
   1090c:	5481      	strb	r1, [r0, r2]
   1090e:	e7fa      	b.n	10906 <memmove+0xe>
   10910:	2300      	movs	r3, #0
   10912:	4293      	cmp	r3, r2
   10914:	d003      	beq.n	1091e <memmove+0x26>
   10916:	5ccc      	ldrb	r4, [r1, r3]
   10918:	54c4      	strb	r4, [r0, r3]
   1091a:	3301      	adds	r3, #1
   1091c:	e7f9      	b.n	10912 <memmove+0x1a>
   1091e:	bd10      	pop	{r4, pc}

00010920 <memset>:
   10920:	1c03      	adds	r3, r0, #0
   10922:	1882      	adds	r2, r0, r2
   10924:	4293      	cmp	r3, r2
   10926:	d002      	beq.n	1092e <memset+0xe>
   10928:	7019      	strb	r1, [r3, #0]
   1092a:	3301      	adds	r3, #1
   1092c:	e7fa      	b.n	10924 <memset+0x4>
   1092e:	4770      	bx	lr

00010930 <iprintf>:
   10930:	b40f      	push	{r0, r1, r2, r3}
   10932:	4b0b      	ldr	r3, [pc, #44]	; (10960 <iprintf+0x30>)
   10934:	b513      	push	{r0, r1, r4, lr}
   10936:	681c      	ldr	r4, [r3, #0]
   10938:	2c00      	cmp	r4, #0
   1093a:	d005      	beq.n	10948 <iprintf+0x18>
   1093c:	69a3      	ldr	r3, [r4, #24]
   1093e:	2b00      	cmp	r3, #0
   10940:	d102      	bne.n	10948 <iprintf+0x18>
   10942:	1c20      	adds	r0, r4, #0
   10944:	f000 fb56 	bl	10ff4 <__sinit>
   10948:	ab05      	add	r3, sp, #20
   1094a:	1c20      	adds	r0, r4, #0
   1094c:	68a1      	ldr	r1, [r4, #8]
   1094e:	9a04      	ldr	r2, [sp, #16]
   10950:	9301      	str	r3, [sp, #4]
   10952:	f000 fe5f 	bl	11614 <_vfiprintf_r>
   10956:	bc16      	pop	{r1, r2, r4}
   10958:	bc08      	pop	{r3}
   1095a:	b004      	add	sp, #16
   1095c:	4718      	bx	r3
   1095e:	46c0      	nop			; (mov r8, r8)
   10960:	20000234 	.word	0x20000234

00010964 <putchar>:
   10964:	b538      	push	{r3, r4, r5, lr}
   10966:	4b08      	ldr	r3, [pc, #32]	; (10988 <putchar+0x24>)
   10968:	1c05      	adds	r5, r0, #0
   1096a:	681c      	ldr	r4, [r3, #0]
   1096c:	2c00      	cmp	r4, #0
   1096e:	d005      	beq.n	1097c <putchar+0x18>
   10970:	69a3      	ldr	r3, [r4, #24]
   10972:	2b00      	cmp	r3, #0
   10974:	d102      	bne.n	1097c <putchar+0x18>
   10976:	1c20      	adds	r0, r4, #0
   10978:	f000 fb3c 	bl	10ff4 <__sinit>
   1097c:	1c29      	adds	r1, r5, #0
   1097e:	1c20      	adds	r0, r4, #0
   10980:	68a2      	ldr	r2, [r4, #8]
   10982:	f001 f8dd 	bl	11b40 <_putc_r>
   10986:	bd38      	pop	{r3, r4, r5, pc}
   10988:	20000234 	.word	0x20000234

0001098c <srand>:
   1098c:	b538      	push	{r3, r4, r5, lr}
   1098e:	4b10      	ldr	r3, [pc, #64]	; (109d0 <srand+0x44>)
   10990:	1c05      	adds	r5, r0, #0
   10992:	681c      	ldr	r4, [r3, #0]
   10994:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   10996:	2b00      	cmp	r3, #0
   10998:	d115      	bne.n	109c6 <srand+0x3a>
   1099a:	2018      	movs	r0, #24
   1099c:	f000 fc14 	bl	111c8 <malloc>
   109a0:	4b0c      	ldr	r3, [pc, #48]	; (109d4 <srand+0x48>)
   109a2:	63a0      	str	r0, [r4, #56]	; 0x38
   109a4:	8003      	strh	r3, [r0, #0]
   109a6:	4b0c      	ldr	r3, [pc, #48]	; (109d8 <srand+0x4c>)
   109a8:	2201      	movs	r2, #1
   109aa:	8043      	strh	r3, [r0, #2]
   109ac:	4b0b      	ldr	r3, [pc, #44]	; (109dc <srand+0x50>)
   109ae:	8083      	strh	r3, [r0, #4]
   109b0:	4b0b      	ldr	r3, [pc, #44]	; (109e0 <srand+0x54>)
   109b2:	80c3      	strh	r3, [r0, #6]
   109b4:	4b0b      	ldr	r3, [pc, #44]	; (109e4 <srand+0x58>)
   109b6:	8103      	strh	r3, [r0, #8]
   109b8:	2305      	movs	r3, #5
   109ba:	8143      	strh	r3, [r0, #10]
   109bc:	3306      	adds	r3, #6
   109be:	8183      	strh	r3, [r0, #12]
   109c0:	2300      	movs	r3, #0
   109c2:	6102      	str	r2, [r0, #16]
   109c4:	6143      	str	r3, [r0, #20]
   109c6:	2200      	movs	r2, #0
   109c8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   109ca:	611d      	str	r5, [r3, #16]
   109cc:	615a      	str	r2, [r3, #20]
   109ce:	bd38      	pop	{r3, r4, r5, pc}
   109d0:	20000234 	.word	0x20000234
   109d4:	0000330e 	.word	0x0000330e
   109d8:	ffffabcd 	.word	0xffffabcd
   109dc:	00001234 	.word	0x00001234
   109e0:	ffffe66d 	.word	0xffffe66d
   109e4:	ffffdeec 	.word	0xffffdeec

000109e8 <rand>:
   109e8:	4b15      	ldr	r3, [pc, #84]	; (10a40 <rand+0x58>)
   109ea:	b510      	push	{r4, lr}
   109ec:	681c      	ldr	r4, [r3, #0]
   109ee:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   109f0:	2b00      	cmp	r3, #0
   109f2:	d115      	bne.n	10a20 <rand+0x38>
   109f4:	2018      	movs	r0, #24
   109f6:	f000 fbe7 	bl	111c8 <malloc>
   109fa:	4b12      	ldr	r3, [pc, #72]	; (10a44 <rand+0x5c>)
   109fc:	63a0      	str	r0, [r4, #56]	; 0x38
   109fe:	8003      	strh	r3, [r0, #0]
   10a00:	4b11      	ldr	r3, [pc, #68]	; (10a48 <rand+0x60>)
   10a02:	2201      	movs	r2, #1
   10a04:	8043      	strh	r3, [r0, #2]
   10a06:	4b11      	ldr	r3, [pc, #68]	; (10a4c <rand+0x64>)
   10a08:	8083      	strh	r3, [r0, #4]
   10a0a:	4b11      	ldr	r3, [pc, #68]	; (10a50 <rand+0x68>)
   10a0c:	80c3      	strh	r3, [r0, #6]
   10a0e:	4b11      	ldr	r3, [pc, #68]	; (10a54 <rand+0x6c>)
   10a10:	8103      	strh	r3, [r0, #8]
   10a12:	2305      	movs	r3, #5
   10a14:	8143      	strh	r3, [r0, #10]
   10a16:	3306      	adds	r3, #6
   10a18:	8183      	strh	r3, [r0, #12]
   10a1a:	2300      	movs	r3, #0
   10a1c:	6102      	str	r2, [r0, #16]
   10a1e:	6143      	str	r3, [r0, #20]
   10a20:	6ba4      	ldr	r4, [r4, #56]	; 0x38
   10a22:	4a0d      	ldr	r2, [pc, #52]	; (10a58 <rand+0x70>)
   10a24:	6920      	ldr	r0, [r4, #16]
   10a26:	6961      	ldr	r1, [r4, #20]
   10a28:	4b0c      	ldr	r3, [pc, #48]	; (10a5c <rand+0x74>)
   10a2a:	f7ff fefd 	bl	10828 <__aeabi_lmul>
   10a2e:	2201      	movs	r2, #1
   10a30:	2300      	movs	r3, #0
   10a32:	1880      	adds	r0, r0, r2
   10a34:	4159      	adcs	r1, r3
   10a36:	6120      	str	r0, [r4, #16]
   10a38:	6161      	str	r1, [r4, #20]
   10a3a:	0048      	lsls	r0, r1, #1
   10a3c:	0840      	lsrs	r0, r0, #1
   10a3e:	bd10      	pop	{r4, pc}
   10a40:	20000234 	.word	0x20000234
   10a44:	0000330e 	.word	0x0000330e
   10a48:	ffffabcd 	.word	0xffffabcd
   10a4c:	00001234 	.word	0x00001234
   10a50:	ffffe66d 	.word	0xffffe66d
   10a54:	ffffdeec 	.word	0xffffdeec
   10a58:	4c957f2d 	.word	0x4c957f2d
   10a5c:	5851f42d 	.word	0x5851f42d

00010a60 <setbuf>:
   10a60:	b508      	push	{r3, lr}
   10a62:	424a      	negs	r2, r1
   10a64:	414a      	adcs	r2, r1
   10a66:	2380      	movs	r3, #128	; 0x80
   10a68:	0052      	lsls	r2, r2, #1
   10a6a:	00db      	lsls	r3, r3, #3
   10a6c:	f000 f802 	bl	10a74 <setvbuf>
   10a70:	bd08      	pop	{r3, pc}
	...

00010a74 <setvbuf>:
   10a74:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   10a76:	1c1e      	adds	r6, r3, #0
   10a78:	4b3c      	ldr	r3, [pc, #240]	; (10b6c <setvbuf+0xf8>)
   10a7a:	1c04      	adds	r4, r0, #0
   10a7c:	681d      	ldr	r5, [r3, #0]
   10a7e:	1c0f      	adds	r7, r1, #0
   10a80:	9201      	str	r2, [sp, #4]
   10a82:	2d00      	cmp	r5, #0
   10a84:	d005      	beq.n	10a92 <setvbuf+0x1e>
   10a86:	69ab      	ldr	r3, [r5, #24]
   10a88:	2b00      	cmp	r3, #0
   10a8a:	d102      	bne.n	10a92 <setvbuf+0x1e>
   10a8c:	1c28      	adds	r0, r5, #0
   10a8e:	f000 fab1 	bl	10ff4 <__sinit>
   10a92:	4b37      	ldr	r3, [pc, #220]	; (10b70 <setvbuf+0xfc>)
   10a94:	429c      	cmp	r4, r3
   10a96:	d101      	bne.n	10a9c <setvbuf+0x28>
   10a98:	686c      	ldr	r4, [r5, #4]
   10a9a:	e008      	b.n	10aae <setvbuf+0x3a>
   10a9c:	4b35      	ldr	r3, [pc, #212]	; (10b74 <setvbuf+0x100>)
   10a9e:	429c      	cmp	r4, r3
   10aa0:	d101      	bne.n	10aa6 <setvbuf+0x32>
   10aa2:	68ac      	ldr	r4, [r5, #8]
   10aa4:	e003      	b.n	10aae <setvbuf+0x3a>
   10aa6:	4b34      	ldr	r3, [pc, #208]	; (10b78 <setvbuf+0x104>)
   10aa8:	429c      	cmp	r4, r3
   10aaa:	d100      	bne.n	10aae <setvbuf+0x3a>
   10aac:	68ec      	ldr	r4, [r5, #12]
   10aae:	9b01      	ldr	r3, [sp, #4]
   10ab0:	2b02      	cmp	r3, #2
   10ab2:	d858      	bhi.n	10b66 <setvbuf+0xf2>
   10ab4:	2e00      	cmp	r6, #0
   10ab6:	db56      	blt.n	10b66 <setvbuf+0xf2>
   10ab8:	1c28      	adds	r0, r5, #0
   10aba:	1c21      	adds	r1, r4, #0
   10abc:	f000 fa2c 	bl	10f18 <_fflush_r>
   10ac0:	2300      	movs	r3, #0
   10ac2:	6063      	str	r3, [r4, #4]
   10ac4:	61a3      	str	r3, [r4, #24]
   10ac6:	89a3      	ldrh	r3, [r4, #12]
   10ac8:	061b      	lsls	r3, r3, #24
   10aca:	d503      	bpl.n	10ad4 <setvbuf+0x60>
   10acc:	1c28      	adds	r0, r5, #0
   10ace:	6921      	ldr	r1, [r4, #16]
   10ad0:	f000 fb84 	bl	111dc <_free_r>
   10ad4:	2283      	movs	r2, #131	; 0x83
   10ad6:	89a3      	ldrh	r3, [r4, #12]
   10ad8:	4393      	bics	r3, r2
   10ada:	81a3      	strh	r3, [r4, #12]
   10adc:	9b01      	ldr	r3, [sp, #4]
   10ade:	2b02      	cmp	r3, #2
   10ae0:	d013      	beq.n	10b0a <setvbuf+0x96>
   10ae2:	2f00      	cmp	r7, #0
   10ae4:	d125      	bne.n	10b32 <setvbuf+0xbe>
   10ae6:	2e00      	cmp	r6, #0
   10ae8:	d101      	bne.n	10aee <setvbuf+0x7a>
   10aea:	2680      	movs	r6, #128	; 0x80
   10aec:	00f6      	lsls	r6, r6, #3
   10aee:	1c30      	adds	r0, r6, #0
   10af0:	f000 fb6a 	bl	111c8 <malloc>
   10af4:	1e07      	subs	r7, r0, #0
   10af6:	d118      	bne.n	10b2a <setvbuf+0xb6>
   10af8:	2080      	movs	r0, #128	; 0x80
   10afa:	00c0      	lsls	r0, r0, #3
   10afc:	f000 fb64 	bl	111c8 <malloc>
   10b00:	1e07      	subs	r7, r0, #0
   10b02:	d110      	bne.n	10b26 <setvbuf+0xb2>
   10b04:	2001      	movs	r0, #1
   10b06:	4240      	negs	r0, r0
   10b08:	e000      	b.n	10b0c <setvbuf+0x98>
   10b0a:	2000      	movs	r0, #0
   10b0c:	2202      	movs	r2, #2
   10b0e:	89a3      	ldrh	r3, [r4, #12]
   10b10:	4313      	orrs	r3, r2
   10b12:	81a3      	strh	r3, [r4, #12]
   10b14:	2300      	movs	r3, #0
   10b16:	60a3      	str	r3, [r4, #8]
   10b18:	1c23      	adds	r3, r4, #0
   10b1a:	3347      	adds	r3, #71	; 0x47
   10b1c:	6023      	str	r3, [r4, #0]
   10b1e:	6123      	str	r3, [r4, #16]
   10b20:	2301      	movs	r3, #1
   10b22:	6163      	str	r3, [r4, #20]
   10b24:	e021      	b.n	10b6a <setvbuf+0xf6>
   10b26:	2680      	movs	r6, #128	; 0x80
   10b28:	00f6      	lsls	r6, r6, #3
   10b2a:	2280      	movs	r2, #128	; 0x80
   10b2c:	89a3      	ldrh	r3, [r4, #12]
   10b2e:	4313      	orrs	r3, r2
   10b30:	81a3      	strh	r3, [r4, #12]
   10b32:	9b01      	ldr	r3, [sp, #4]
   10b34:	2b01      	cmp	r3, #1
   10b36:	d105      	bne.n	10b44 <setvbuf+0xd0>
   10b38:	89a3      	ldrh	r3, [r4, #12]
   10b3a:	9a01      	ldr	r2, [sp, #4]
   10b3c:	431a      	orrs	r2, r3
   10b3e:	4273      	negs	r3, r6
   10b40:	81a2      	strh	r2, [r4, #12]
   10b42:	61a3      	str	r3, [r4, #24]
   10b44:	4b0d      	ldr	r3, [pc, #52]	; (10b7c <setvbuf+0x108>)
   10b46:	2000      	movs	r0, #0
   10b48:	62ab      	str	r3, [r5, #40]	; 0x28
   10b4a:	89a2      	ldrh	r2, [r4, #12]
   10b4c:	6027      	str	r7, [r4, #0]
   10b4e:	6127      	str	r7, [r4, #16]
   10b50:	6166      	str	r6, [r4, #20]
   10b52:	0713      	lsls	r3, r2, #28
   10b54:	d509      	bpl.n	10b6a <setvbuf+0xf6>
   10b56:	2303      	movs	r3, #3
   10b58:	401a      	ands	r2, r3
   10b5a:	4253      	negs	r3, r2
   10b5c:	4153      	adcs	r3, r2
   10b5e:	425b      	negs	r3, r3
   10b60:	401e      	ands	r6, r3
   10b62:	60a6      	str	r6, [r4, #8]
   10b64:	e001      	b.n	10b6a <setvbuf+0xf6>
   10b66:	2001      	movs	r0, #1
   10b68:	4240      	negs	r0, r0
   10b6a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
   10b6c:	20000234 	.word	0x20000234
   10b70:	000135b0 	.word	0x000135b0
   10b74:	000135d0 	.word	0x000135d0
   10b78:	000135f0 	.word	0x000135f0
   10b7c:	00010f71 	.word	0x00010f71

00010b80 <sniprintf>:
   10b80:	b40c      	push	{r2, r3}
   10b82:	b530      	push	{r4, r5, lr}
   10b84:	4b17      	ldr	r3, [pc, #92]	; (10be4 <sniprintf+0x64>)
   10b86:	b09d      	sub	sp, #116	; 0x74
   10b88:	681d      	ldr	r5, [r3, #0]
   10b8a:	2900      	cmp	r1, #0
   10b8c:	da04      	bge.n	10b98 <sniprintf+0x18>
   10b8e:	238b      	movs	r3, #139	; 0x8b
   10b90:	2001      	movs	r0, #1
   10b92:	602b      	str	r3, [r5, #0]
   10b94:	4240      	negs	r0, r0
   10b96:	e01f      	b.n	10bd8 <sniprintf+0x58>
   10b98:	2382      	movs	r3, #130	; 0x82
   10b9a:	aa02      	add	r2, sp, #8
   10b9c:	009b      	lsls	r3, r3, #2
   10b9e:	8193      	strh	r3, [r2, #12]
   10ba0:	2300      	movs	r3, #0
   10ba2:	9002      	str	r0, [sp, #8]
   10ba4:	6110      	str	r0, [r2, #16]
   10ba6:	4299      	cmp	r1, r3
   10ba8:	d000      	beq.n	10bac <sniprintf+0x2c>
   10baa:	1e4b      	subs	r3, r1, #1
   10bac:	6093      	str	r3, [r2, #8]
   10bae:	6153      	str	r3, [r2, #20]
   10bb0:	2301      	movs	r3, #1
   10bb2:	425b      	negs	r3, r3
   10bb4:	81d3      	strh	r3, [r2, #14]
   10bb6:	1c0c      	adds	r4, r1, #0
   10bb8:	ab21      	add	r3, sp, #132	; 0x84
   10bba:	1c11      	adds	r1, r2, #0
   10bbc:	1c28      	adds	r0, r5, #0
   10bbe:	9a20      	ldr	r2, [sp, #128]	; 0x80
   10bc0:	9301      	str	r3, [sp, #4]
   10bc2:	f000 fc09 	bl	113d8 <_svfiprintf_r>
   10bc6:	1c43      	adds	r3, r0, #1
   10bc8:	da01      	bge.n	10bce <sniprintf+0x4e>
   10bca:	238b      	movs	r3, #139	; 0x8b
   10bcc:	602b      	str	r3, [r5, #0]
   10bce:	2c00      	cmp	r4, #0
   10bd0:	d002      	beq.n	10bd8 <sniprintf+0x58>
   10bd2:	2300      	movs	r3, #0
   10bd4:	9a02      	ldr	r2, [sp, #8]
   10bd6:	7013      	strb	r3, [r2, #0]
   10bd8:	b01d      	add	sp, #116	; 0x74
   10bda:	bc30      	pop	{r4, r5}
   10bdc:	bc08      	pop	{r3}
   10bde:	b002      	add	sp, #8
   10be0:	4718      	bx	r3
   10be2:	46c0      	nop			; (mov r8, r8)
   10be4:	20000234 	.word	0x20000234

00010be8 <strlen>:
   10be8:	2300      	movs	r3, #0
   10bea:	5cc2      	ldrb	r2, [r0, r3]
   10bec:	3301      	adds	r3, #1
   10bee:	2a00      	cmp	r2, #0
   10bf0:	d1fb      	bne.n	10bea <strlen+0x2>
   10bf2:	1e58      	subs	r0, r3, #1
   10bf4:	4770      	bx	lr
	...

00010bf8 <strncasecmp>:
   10bf8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   10bfa:	2500      	movs	r5, #0
   10bfc:	4b10      	ldr	r3, [pc, #64]	; (10c40 <strncasecmp+0x48>)
   10bfe:	9201      	str	r2, [sp, #4]
   10c00:	681e      	ldr	r6, [r3, #0]
   10c02:	9b01      	ldr	r3, [sp, #4]
   10c04:	429d      	cmp	r5, r3
   10c06:	d017      	beq.n	10c38 <strncasecmp+0x40>
   10c08:	5d43      	ldrb	r3, [r0, r5]
   10c0a:	18f4      	adds	r4, r6, r3
   10c0c:	7867      	ldrb	r7, [r4, #1]
   10c0e:	2403      	movs	r4, #3
   10c10:	403c      	ands	r4, r7
   10c12:	2c01      	cmp	r4, #1
   10c14:	d100      	bne.n	10c18 <strncasecmp+0x20>
   10c16:	3320      	adds	r3, #32
   10c18:	5d4c      	ldrb	r4, [r1, r5]
   10c1a:	1937      	adds	r7, r6, r4
   10c1c:	787f      	ldrb	r7, [r7, #1]
   10c1e:	46bc      	mov	ip, r7
   10c20:	2703      	movs	r7, #3
   10c22:	4662      	mov	r2, ip
   10c24:	4017      	ands	r7, r2
   10c26:	2f01      	cmp	r7, #1
   10c28:	d100      	bne.n	10c2c <strncasecmp+0x34>
   10c2a:	3420      	adds	r4, #32
   10c2c:	1b1b      	subs	r3, r3, r4
   10c2e:	d104      	bne.n	10c3a <strncasecmp+0x42>
   10c30:	3501      	adds	r5, #1
   10c32:	2c00      	cmp	r4, #0
   10c34:	d1e5      	bne.n	10c02 <strncasecmp+0xa>
   10c36:	e000      	b.n	10c3a <strncasecmp+0x42>
   10c38:	2300      	movs	r3, #0
   10c3a:	1c18      	adds	r0, r3, #0
   10c3c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
   10c3e:	46c0      	nop			; (mov r8, r8)
   10c40:	200001d0 	.word	0x200001d0

00010c44 <strncmp>:
   10c44:	2300      	movs	r3, #0
   10c46:	b530      	push	{r4, r5, lr}
   10c48:	429a      	cmp	r2, r3
   10c4a:	d00d      	beq.n	10c68 <strncmp+0x24>
   10c4c:	3a01      	subs	r2, #1
   10c4e:	5cc4      	ldrb	r4, [r0, r3]
   10c50:	5ccd      	ldrb	r5, [r1, r3]
   10c52:	42ac      	cmp	r4, r5
   10c54:	d102      	bne.n	10c5c <strncmp+0x18>
   10c56:	4293      	cmp	r3, r2
   10c58:	d102      	bne.n	10c60 <strncmp+0x1c>
   10c5a:	1c25      	adds	r5, r4, #0
   10c5c:	1b63      	subs	r3, r4, r5
   10c5e:	e003      	b.n	10c68 <strncmp+0x24>
   10c60:	3301      	adds	r3, #1
   10c62:	2c00      	cmp	r4, #0
   10c64:	d1f3      	bne.n	10c4e <strncmp+0xa>
   10c66:	e7f8      	b.n	10c5a <strncmp+0x16>
   10c68:	1c18      	adds	r0, r3, #0
   10c6a:	bd30      	pop	{r4, r5, pc}

00010c6c <__swbuf_r>:
   10c6c:	b570      	push	{r4, r5, r6, lr}
   10c6e:	1c05      	adds	r5, r0, #0
   10c70:	1c0e      	adds	r6, r1, #0
   10c72:	1c14      	adds	r4, r2, #0
   10c74:	2800      	cmp	r0, #0
   10c76:	d004      	beq.n	10c82 <__swbuf_r+0x16>
   10c78:	6983      	ldr	r3, [r0, #24]
   10c7a:	2b00      	cmp	r3, #0
   10c7c:	d101      	bne.n	10c82 <__swbuf_r+0x16>
   10c7e:	f000 f9b9 	bl	10ff4 <__sinit>
   10c82:	4b23      	ldr	r3, [pc, #140]	; (10d10 <__swbuf_r+0xa4>)
   10c84:	429c      	cmp	r4, r3
   10c86:	d101      	bne.n	10c8c <__swbuf_r+0x20>
   10c88:	686c      	ldr	r4, [r5, #4]
   10c8a:	e008      	b.n	10c9e <__swbuf_r+0x32>
   10c8c:	4b21      	ldr	r3, [pc, #132]	; (10d14 <__swbuf_r+0xa8>)
   10c8e:	429c      	cmp	r4, r3
   10c90:	d101      	bne.n	10c96 <__swbuf_r+0x2a>
   10c92:	68ac      	ldr	r4, [r5, #8]
   10c94:	e003      	b.n	10c9e <__swbuf_r+0x32>
   10c96:	4b20      	ldr	r3, [pc, #128]	; (10d18 <__swbuf_r+0xac>)
   10c98:	429c      	cmp	r4, r3
   10c9a:	d100      	bne.n	10c9e <__swbuf_r+0x32>
   10c9c:	68ec      	ldr	r4, [r5, #12]
   10c9e:	69a3      	ldr	r3, [r4, #24]
   10ca0:	60a3      	str	r3, [r4, #8]
   10ca2:	89a3      	ldrh	r3, [r4, #12]
   10ca4:	071b      	lsls	r3, r3, #28
   10ca6:	d50a      	bpl.n	10cbe <__swbuf_r+0x52>
   10ca8:	6923      	ldr	r3, [r4, #16]
   10caa:	2b00      	cmp	r3, #0
   10cac:	d007      	beq.n	10cbe <__swbuf_r+0x52>
   10cae:	6823      	ldr	r3, [r4, #0]
   10cb0:	6922      	ldr	r2, [r4, #16]
   10cb2:	b2f6      	uxtb	r6, r6
   10cb4:	1a98      	subs	r0, r3, r2
   10cb6:	6963      	ldr	r3, [r4, #20]
   10cb8:	4298      	cmp	r0, r3
   10cba:	db0f      	blt.n	10cdc <__swbuf_r+0x70>
   10cbc:	e008      	b.n	10cd0 <__swbuf_r+0x64>
   10cbe:	1c28      	adds	r0, r5, #0
   10cc0:	1c21      	adds	r1, r4, #0
   10cc2:	f000 f82b 	bl	10d1c <__swsetup_r>
   10cc6:	2800      	cmp	r0, #0
   10cc8:	d0f1      	beq.n	10cae <__swbuf_r+0x42>
   10cca:	2001      	movs	r0, #1
   10ccc:	4240      	negs	r0, r0
   10cce:	e01d      	b.n	10d0c <__swbuf_r+0xa0>
   10cd0:	1c28      	adds	r0, r5, #0
   10cd2:	1c21      	adds	r1, r4, #0
   10cd4:	f000 f920 	bl	10f18 <_fflush_r>
   10cd8:	2800      	cmp	r0, #0
   10cda:	d1f6      	bne.n	10cca <__swbuf_r+0x5e>
   10cdc:	68a3      	ldr	r3, [r4, #8]
   10cde:	3001      	adds	r0, #1
   10ce0:	3b01      	subs	r3, #1
   10ce2:	60a3      	str	r3, [r4, #8]
   10ce4:	6823      	ldr	r3, [r4, #0]
   10ce6:	1c5a      	adds	r2, r3, #1
   10ce8:	6022      	str	r2, [r4, #0]
   10cea:	701e      	strb	r6, [r3, #0]
   10cec:	6963      	ldr	r3, [r4, #20]
   10cee:	4298      	cmp	r0, r3
   10cf0:	d005      	beq.n	10cfe <__swbuf_r+0x92>
   10cf2:	89a3      	ldrh	r3, [r4, #12]
   10cf4:	1c30      	adds	r0, r6, #0
   10cf6:	07db      	lsls	r3, r3, #31
   10cf8:	d508      	bpl.n	10d0c <__swbuf_r+0xa0>
   10cfa:	2e0a      	cmp	r6, #10
   10cfc:	d106      	bne.n	10d0c <__swbuf_r+0xa0>
   10cfe:	1c28      	adds	r0, r5, #0
   10d00:	1c21      	adds	r1, r4, #0
   10d02:	f000 f909 	bl	10f18 <_fflush_r>
   10d06:	2800      	cmp	r0, #0
   10d08:	d1df      	bne.n	10cca <__swbuf_r+0x5e>
   10d0a:	1c30      	adds	r0, r6, #0
   10d0c:	bd70      	pop	{r4, r5, r6, pc}
   10d0e:	46c0      	nop			; (mov r8, r8)
   10d10:	000135b0 	.word	0x000135b0
   10d14:	000135d0 	.word	0x000135d0
   10d18:	000135f0 	.word	0x000135f0

00010d1c <__swsetup_r>:
   10d1c:	4b35      	ldr	r3, [pc, #212]	; (10df4 <__swsetup_r+0xd8>)
   10d1e:	b570      	push	{r4, r5, r6, lr}
   10d20:	681d      	ldr	r5, [r3, #0]
   10d22:	1c06      	adds	r6, r0, #0
   10d24:	1c0c      	adds	r4, r1, #0
   10d26:	2d00      	cmp	r5, #0
   10d28:	d005      	beq.n	10d36 <__swsetup_r+0x1a>
   10d2a:	69ab      	ldr	r3, [r5, #24]
   10d2c:	2b00      	cmp	r3, #0
   10d2e:	d102      	bne.n	10d36 <__swsetup_r+0x1a>
   10d30:	1c28      	adds	r0, r5, #0
   10d32:	f000 f95f 	bl	10ff4 <__sinit>
   10d36:	4b30      	ldr	r3, [pc, #192]	; (10df8 <__swsetup_r+0xdc>)
   10d38:	429c      	cmp	r4, r3
   10d3a:	d101      	bne.n	10d40 <__swsetup_r+0x24>
   10d3c:	686c      	ldr	r4, [r5, #4]
   10d3e:	e008      	b.n	10d52 <__swsetup_r+0x36>
   10d40:	4b2e      	ldr	r3, [pc, #184]	; (10dfc <__swsetup_r+0xe0>)
   10d42:	429c      	cmp	r4, r3
   10d44:	d101      	bne.n	10d4a <__swsetup_r+0x2e>
   10d46:	68ac      	ldr	r4, [r5, #8]
   10d48:	e003      	b.n	10d52 <__swsetup_r+0x36>
   10d4a:	4b2d      	ldr	r3, [pc, #180]	; (10e00 <__swsetup_r+0xe4>)
   10d4c:	429c      	cmp	r4, r3
   10d4e:	d100      	bne.n	10d52 <__swsetup_r+0x36>
   10d50:	68ec      	ldr	r4, [r5, #12]
   10d52:	89a3      	ldrh	r3, [r4, #12]
   10d54:	b29a      	uxth	r2, r3
   10d56:	0711      	lsls	r1, r2, #28
   10d58:	d423      	bmi.n	10da2 <__swsetup_r+0x86>
   10d5a:	06d1      	lsls	r1, r2, #27
   10d5c:	d407      	bmi.n	10d6e <__swsetup_r+0x52>
   10d5e:	2209      	movs	r2, #9
   10d60:	2001      	movs	r0, #1
   10d62:	6032      	str	r2, [r6, #0]
   10d64:	3237      	adds	r2, #55	; 0x37
   10d66:	4313      	orrs	r3, r2
   10d68:	81a3      	strh	r3, [r4, #12]
   10d6a:	4240      	negs	r0, r0
   10d6c:	e040      	b.n	10df0 <__swsetup_r+0xd4>
   10d6e:	0753      	lsls	r3, r2, #29
   10d70:	d513      	bpl.n	10d9a <__swsetup_r+0x7e>
   10d72:	6b61      	ldr	r1, [r4, #52]	; 0x34
   10d74:	2900      	cmp	r1, #0
   10d76:	d008      	beq.n	10d8a <__swsetup_r+0x6e>
   10d78:	1c23      	adds	r3, r4, #0
   10d7a:	3344      	adds	r3, #68	; 0x44
   10d7c:	4299      	cmp	r1, r3
   10d7e:	d002      	beq.n	10d86 <__swsetup_r+0x6a>
   10d80:	1c30      	adds	r0, r6, #0
   10d82:	f000 fa2b 	bl	111dc <_free_r>
   10d86:	2300      	movs	r3, #0
   10d88:	6363      	str	r3, [r4, #52]	; 0x34
   10d8a:	2224      	movs	r2, #36	; 0x24
   10d8c:	89a3      	ldrh	r3, [r4, #12]
   10d8e:	4393      	bics	r3, r2
   10d90:	81a3      	strh	r3, [r4, #12]
   10d92:	2300      	movs	r3, #0
   10d94:	6063      	str	r3, [r4, #4]
   10d96:	6923      	ldr	r3, [r4, #16]
   10d98:	6023      	str	r3, [r4, #0]
   10d9a:	2208      	movs	r2, #8
   10d9c:	89a3      	ldrh	r3, [r4, #12]
   10d9e:	4313      	orrs	r3, r2
   10da0:	81a3      	strh	r3, [r4, #12]
   10da2:	6923      	ldr	r3, [r4, #16]
   10da4:	2b00      	cmp	r3, #0
   10da6:	d10b      	bne.n	10dc0 <__swsetup_r+0xa4>
   10da8:	23a0      	movs	r3, #160	; 0xa0
   10daa:	89a2      	ldrh	r2, [r4, #12]
   10dac:	009b      	lsls	r3, r3, #2
   10dae:	4013      	ands	r3, r2
   10db0:	2280      	movs	r2, #128	; 0x80
   10db2:	0092      	lsls	r2, r2, #2
   10db4:	4293      	cmp	r3, r2
   10db6:	d003      	beq.n	10dc0 <__swsetup_r+0xa4>
   10db8:	1c30      	adds	r0, r6, #0
   10dba:	1c21      	adds	r1, r4, #0
   10dbc:	f000 f9ac 	bl	11118 <__smakebuf_r>
   10dc0:	2301      	movs	r3, #1
   10dc2:	89a2      	ldrh	r2, [r4, #12]
   10dc4:	4013      	ands	r3, r2
   10dc6:	d005      	beq.n	10dd4 <__swsetup_r+0xb8>
   10dc8:	2300      	movs	r3, #0
   10dca:	60a3      	str	r3, [r4, #8]
   10dcc:	6963      	ldr	r3, [r4, #20]
   10dce:	425b      	negs	r3, r3
   10dd0:	61a3      	str	r3, [r4, #24]
   10dd2:	e003      	b.n	10ddc <__swsetup_r+0xc0>
   10dd4:	0791      	lsls	r1, r2, #30
   10dd6:	d400      	bmi.n	10dda <__swsetup_r+0xbe>
   10dd8:	6963      	ldr	r3, [r4, #20]
   10dda:	60a3      	str	r3, [r4, #8]
   10ddc:	2000      	movs	r0, #0
   10dde:	6923      	ldr	r3, [r4, #16]
   10de0:	4283      	cmp	r3, r0
   10de2:	d105      	bne.n	10df0 <__swsetup_r+0xd4>
   10de4:	0613      	lsls	r3, r2, #24
   10de6:	d503      	bpl.n	10df0 <__swsetup_r+0xd4>
   10de8:	2340      	movs	r3, #64	; 0x40
   10dea:	431a      	orrs	r2, r3
   10dec:	81a2      	strh	r2, [r4, #12]
   10dee:	3801      	subs	r0, #1
   10df0:	bd70      	pop	{r4, r5, r6, pc}
   10df2:	46c0      	nop			; (mov r8, r8)
   10df4:	20000234 	.word	0x20000234
   10df8:	000135b0 	.word	0x000135b0
   10dfc:	000135d0 	.word	0x000135d0
   10e00:	000135f0 	.word	0x000135f0

00010e04 <__sflush_r>:
   10e04:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   10e06:	898a      	ldrh	r2, [r1, #12]
   10e08:	1c05      	adds	r5, r0, #0
   10e0a:	1c0c      	adds	r4, r1, #0
   10e0c:	0713      	lsls	r3, r2, #28
   10e0e:	d45e      	bmi.n	10ece <__sflush_r+0xca>
   10e10:	684b      	ldr	r3, [r1, #4]
   10e12:	2b00      	cmp	r3, #0
   10e14:	dc02      	bgt.n	10e1c <__sflush_r+0x18>
   10e16:	6c0b      	ldr	r3, [r1, #64]	; 0x40
   10e18:	2b00      	cmp	r3, #0
   10e1a:	dd1a      	ble.n	10e52 <__sflush_r+0x4e>
   10e1c:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
   10e1e:	2f00      	cmp	r7, #0
   10e20:	d017      	beq.n	10e52 <__sflush_r+0x4e>
   10e22:	2300      	movs	r3, #0
   10e24:	682e      	ldr	r6, [r5, #0]
   10e26:	602b      	str	r3, [r5, #0]
   10e28:	2380      	movs	r3, #128	; 0x80
   10e2a:	015b      	lsls	r3, r3, #5
   10e2c:	401a      	ands	r2, r3
   10e2e:	d001      	beq.n	10e34 <__sflush_r+0x30>
   10e30:	6d62      	ldr	r2, [r4, #84]	; 0x54
   10e32:	e015      	b.n	10e60 <__sflush_r+0x5c>
   10e34:	1c28      	adds	r0, r5, #0
   10e36:	6a21      	ldr	r1, [r4, #32]
   10e38:	2301      	movs	r3, #1
   10e3a:	47b8      	blx	r7
   10e3c:	1c02      	adds	r2, r0, #0
   10e3e:	1c43      	adds	r3, r0, #1
   10e40:	d10e      	bne.n	10e60 <__sflush_r+0x5c>
   10e42:	682b      	ldr	r3, [r5, #0]
   10e44:	2b00      	cmp	r3, #0
   10e46:	d00b      	beq.n	10e60 <__sflush_r+0x5c>
   10e48:	2b1d      	cmp	r3, #29
   10e4a:	d001      	beq.n	10e50 <__sflush_r+0x4c>
   10e4c:	2b16      	cmp	r3, #22
   10e4e:	d102      	bne.n	10e56 <__sflush_r+0x52>
   10e50:	602e      	str	r6, [r5, #0]
   10e52:	2000      	movs	r0, #0
   10e54:	e05e      	b.n	10f14 <__sflush_r+0x110>
   10e56:	2140      	movs	r1, #64	; 0x40
   10e58:	89a3      	ldrh	r3, [r4, #12]
   10e5a:	430b      	orrs	r3, r1
   10e5c:	81a3      	strh	r3, [r4, #12]
   10e5e:	e059      	b.n	10f14 <__sflush_r+0x110>
   10e60:	89a3      	ldrh	r3, [r4, #12]
   10e62:	075b      	lsls	r3, r3, #29
   10e64:	d506      	bpl.n	10e74 <__sflush_r+0x70>
   10e66:	6863      	ldr	r3, [r4, #4]
   10e68:	1ad2      	subs	r2, r2, r3
   10e6a:	6b63      	ldr	r3, [r4, #52]	; 0x34
   10e6c:	2b00      	cmp	r3, #0
   10e6e:	d001      	beq.n	10e74 <__sflush_r+0x70>
   10e70:	6c23      	ldr	r3, [r4, #64]	; 0x40
   10e72:	1ad2      	subs	r2, r2, r3
   10e74:	2300      	movs	r3, #0
   10e76:	1c28      	adds	r0, r5, #0
   10e78:	6a21      	ldr	r1, [r4, #32]
   10e7a:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
   10e7c:	47b8      	blx	r7
   10e7e:	89a3      	ldrh	r3, [r4, #12]
   10e80:	1c42      	adds	r2, r0, #1
   10e82:	d106      	bne.n	10e92 <__sflush_r+0x8e>
   10e84:	682a      	ldr	r2, [r5, #0]
   10e86:	2a00      	cmp	r2, #0
   10e88:	d003      	beq.n	10e92 <__sflush_r+0x8e>
   10e8a:	2a1d      	cmp	r2, #29
   10e8c:	d001      	beq.n	10e92 <__sflush_r+0x8e>
   10e8e:	2a16      	cmp	r2, #22
   10e90:	d119      	bne.n	10ec6 <__sflush_r+0xc2>
   10e92:	2200      	movs	r2, #0
   10e94:	6062      	str	r2, [r4, #4]
   10e96:	6922      	ldr	r2, [r4, #16]
   10e98:	6022      	str	r2, [r4, #0]
   10e9a:	04db      	lsls	r3, r3, #19
   10e9c:	d505      	bpl.n	10eaa <__sflush_r+0xa6>
   10e9e:	1c43      	adds	r3, r0, #1
   10ea0:	d102      	bne.n	10ea8 <__sflush_r+0xa4>
   10ea2:	682b      	ldr	r3, [r5, #0]
   10ea4:	2b00      	cmp	r3, #0
   10ea6:	d100      	bne.n	10eaa <__sflush_r+0xa6>
   10ea8:	6560      	str	r0, [r4, #84]	; 0x54
   10eaa:	6b61      	ldr	r1, [r4, #52]	; 0x34
   10eac:	602e      	str	r6, [r5, #0]
   10eae:	2900      	cmp	r1, #0
   10eb0:	d0cf      	beq.n	10e52 <__sflush_r+0x4e>
   10eb2:	1c23      	adds	r3, r4, #0
   10eb4:	3344      	adds	r3, #68	; 0x44
   10eb6:	4299      	cmp	r1, r3
   10eb8:	d002      	beq.n	10ec0 <__sflush_r+0xbc>
   10eba:	1c28      	adds	r0, r5, #0
   10ebc:	f000 f98e 	bl	111dc <_free_r>
   10ec0:	2000      	movs	r0, #0
   10ec2:	6360      	str	r0, [r4, #52]	; 0x34
   10ec4:	e026      	b.n	10f14 <__sflush_r+0x110>
   10ec6:	2240      	movs	r2, #64	; 0x40
   10ec8:	4313      	orrs	r3, r2
   10eca:	81a3      	strh	r3, [r4, #12]
   10ecc:	e022      	b.n	10f14 <__sflush_r+0x110>
   10ece:	690f      	ldr	r7, [r1, #16]
   10ed0:	2f00      	cmp	r7, #0
   10ed2:	d0be      	beq.n	10e52 <__sflush_r+0x4e>
   10ed4:	680b      	ldr	r3, [r1, #0]
   10ed6:	600f      	str	r7, [r1, #0]
   10ed8:	1bdb      	subs	r3, r3, r7
   10eda:	9301      	str	r3, [sp, #4]
   10edc:	2300      	movs	r3, #0
   10ede:	0792      	lsls	r2, r2, #30
   10ee0:	d100      	bne.n	10ee4 <__sflush_r+0xe0>
   10ee2:	694b      	ldr	r3, [r1, #20]
   10ee4:	60a3      	str	r3, [r4, #8]
   10ee6:	9b01      	ldr	r3, [sp, #4]
   10ee8:	2b00      	cmp	r3, #0
   10eea:	ddb2      	ble.n	10e52 <__sflush_r+0x4e>
   10eec:	1c28      	adds	r0, r5, #0
   10eee:	6a21      	ldr	r1, [r4, #32]
   10ef0:	1c3a      	adds	r2, r7, #0
   10ef2:	9b01      	ldr	r3, [sp, #4]
   10ef4:	6aa6      	ldr	r6, [r4, #40]	; 0x28
   10ef6:	47b0      	blx	r6
   10ef8:	2800      	cmp	r0, #0
   10efa:	dc06      	bgt.n	10f0a <__sflush_r+0x106>
   10efc:	2240      	movs	r2, #64	; 0x40
   10efe:	2001      	movs	r0, #1
   10f00:	89a3      	ldrh	r3, [r4, #12]
   10f02:	4240      	negs	r0, r0
   10f04:	4313      	orrs	r3, r2
   10f06:	81a3      	strh	r3, [r4, #12]
   10f08:	e004      	b.n	10f14 <__sflush_r+0x110>
   10f0a:	9b01      	ldr	r3, [sp, #4]
   10f0c:	183f      	adds	r7, r7, r0
   10f0e:	1a1b      	subs	r3, r3, r0
   10f10:	9301      	str	r3, [sp, #4]
   10f12:	e7e8      	b.n	10ee6 <__sflush_r+0xe2>
   10f14:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
	...

00010f18 <_fflush_r>:
   10f18:	b538      	push	{r3, r4, r5, lr}
   10f1a:	690b      	ldr	r3, [r1, #16]
   10f1c:	1c05      	adds	r5, r0, #0
   10f1e:	1c0c      	adds	r4, r1, #0
   10f20:	2b00      	cmp	r3, #0
   10f22:	d101      	bne.n	10f28 <_fflush_r+0x10>
   10f24:	2000      	movs	r0, #0
   10f26:	e01c      	b.n	10f62 <_fflush_r+0x4a>
   10f28:	2800      	cmp	r0, #0
   10f2a:	d004      	beq.n	10f36 <_fflush_r+0x1e>
   10f2c:	6983      	ldr	r3, [r0, #24]
   10f2e:	2b00      	cmp	r3, #0
   10f30:	d101      	bne.n	10f36 <_fflush_r+0x1e>
   10f32:	f000 f85f 	bl	10ff4 <__sinit>
   10f36:	4b0b      	ldr	r3, [pc, #44]	; (10f64 <_fflush_r+0x4c>)
   10f38:	429c      	cmp	r4, r3
   10f3a:	d101      	bne.n	10f40 <_fflush_r+0x28>
   10f3c:	686c      	ldr	r4, [r5, #4]
   10f3e:	e008      	b.n	10f52 <_fflush_r+0x3a>
   10f40:	4b09      	ldr	r3, [pc, #36]	; (10f68 <_fflush_r+0x50>)
   10f42:	429c      	cmp	r4, r3
   10f44:	d101      	bne.n	10f4a <_fflush_r+0x32>
   10f46:	68ac      	ldr	r4, [r5, #8]
   10f48:	e003      	b.n	10f52 <_fflush_r+0x3a>
   10f4a:	4b08      	ldr	r3, [pc, #32]	; (10f6c <_fflush_r+0x54>)
   10f4c:	429c      	cmp	r4, r3
   10f4e:	d100      	bne.n	10f52 <_fflush_r+0x3a>
   10f50:	68ec      	ldr	r4, [r5, #12]
   10f52:	220c      	movs	r2, #12
   10f54:	5ea3      	ldrsh	r3, [r4, r2]
   10f56:	2b00      	cmp	r3, #0
   10f58:	d0e4      	beq.n	10f24 <_fflush_r+0xc>
   10f5a:	1c28      	adds	r0, r5, #0
   10f5c:	1c21      	adds	r1, r4, #0
   10f5e:	f7ff ff51 	bl	10e04 <__sflush_r>
   10f62:	bd38      	pop	{r3, r4, r5, pc}
   10f64:	000135b0 	.word	0x000135b0
   10f68:	000135d0 	.word	0x000135d0
   10f6c:	000135f0 	.word	0x000135f0

00010f70 <_cleanup_r>:
   10f70:	b508      	push	{r3, lr}
   10f72:	4902      	ldr	r1, [pc, #8]	; (10f7c <_cleanup_r+0xc>)
   10f74:	f000 f8ae 	bl	110d4 <_fwalk_reent>
   10f78:	bd08      	pop	{r3, pc}
   10f7a:	46c0      	nop			; (mov r8, r8)
   10f7c:	00010f19 	.word	0x00010f19

00010f80 <std.isra.0>:
   10f80:	2300      	movs	r3, #0
   10f82:	b510      	push	{r4, lr}
   10f84:	1c04      	adds	r4, r0, #0
   10f86:	6003      	str	r3, [r0, #0]
   10f88:	6043      	str	r3, [r0, #4]
   10f8a:	6083      	str	r3, [r0, #8]
   10f8c:	8181      	strh	r1, [r0, #12]
   10f8e:	6643      	str	r3, [r0, #100]	; 0x64
   10f90:	81c2      	strh	r2, [r0, #14]
   10f92:	6103      	str	r3, [r0, #16]
   10f94:	6143      	str	r3, [r0, #20]
   10f96:	6183      	str	r3, [r0, #24]
   10f98:	1c19      	adds	r1, r3, #0
   10f9a:	2208      	movs	r2, #8
   10f9c:	305c      	adds	r0, #92	; 0x5c
   10f9e:	f7ff fcbf 	bl	10920 <memset>
   10fa2:	4b05      	ldr	r3, [pc, #20]	; (10fb8 <std.isra.0+0x38>)
   10fa4:	6224      	str	r4, [r4, #32]
   10fa6:	6263      	str	r3, [r4, #36]	; 0x24
   10fa8:	4b04      	ldr	r3, [pc, #16]	; (10fbc <std.isra.0+0x3c>)
   10faa:	62a3      	str	r3, [r4, #40]	; 0x28
   10fac:	4b04      	ldr	r3, [pc, #16]	; (10fc0 <std.isra.0+0x40>)
   10fae:	62e3      	str	r3, [r4, #44]	; 0x2c
   10fb0:	4b04      	ldr	r3, [pc, #16]	; (10fc4 <std.isra.0+0x44>)
   10fb2:	6323      	str	r3, [r4, #48]	; 0x30
   10fb4:	bd10      	pop	{r4, pc}
   10fb6:	46c0      	nop			; (mov r8, r8)
   10fb8:	00011bdd 	.word	0x00011bdd
   10fbc:	00011c05 	.word	0x00011c05
   10fc0:	00011c3d 	.word	0x00011c3d
   10fc4:	00011c69 	.word	0x00011c69

00010fc8 <__sfmoreglue>:
   10fc8:	b570      	push	{r4, r5, r6, lr}
   10fca:	2568      	movs	r5, #104	; 0x68
   10fcc:	1e4b      	subs	r3, r1, #1
   10fce:	435d      	muls	r5, r3
   10fd0:	1c0e      	adds	r6, r1, #0
   10fd2:	1c29      	adds	r1, r5, #0
   10fd4:	3174      	adds	r1, #116	; 0x74
   10fd6:	f000 f947 	bl	11268 <_malloc_r>
   10fda:	1e04      	subs	r4, r0, #0
   10fdc:	d008      	beq.n	10ff0 <__sfmoreglue+0x28>
   10fde:	2100      	movs	r1, #0
   10fe0:	1c2a      	adds	r2, r5, #0
   10fe2:	6001      	str	r1, [r0, #0]
   10fe4:	6046      	str	r6, [r0, #4]
   10fe6:	300c      	adds	r0, #12
   10fe8:	60a0      	str	r0, [r4, #8]
   10fea:	3268      	adds	r2, #104	; 0x68
   10fec:	f7ff fc98 	bl	10920 <memset>
   10ff0:	1c20      	adds	r0, r4, #0
   10ff2:	bd70      	pop	{r4, r5, r6, pc}

00010ff4 <__sinit>:
   10ff4:	6983      	ldr	r3, [r0, #24]
   10ff6:	b513      	push	{r0, r1, r4, lr}
   10ff8:	2b00      	cmp	r3, #0
   10ffa:	d128      	bne.n	1104e <__sinit+0x5a>
   10ffc:	6483      	str	r3, [r0, #72]	; 0x48
   10ffe:	64c3      	str	r3, [r0, #76]	; 0x4c
   11000:	6503      	str	r3, [r0, #80]	; 0x50
   11002:	4b13      	ldr	r3, [pc, #76]	; (11050 <__sinit+0x5c>)
   11004:	4a13      	ldr	r2, [pc, #76]	; (11054 <__sinit+0x60>)
   11006:	681b      	ldr	r3, [r3, #0]
   11008:	6282      	str	r2, [r0, #40]	; 0x28
   1100a:	9301      	str	r3, [sp, #4]
   1100c:	4298      	cmp	r0, r3
   1100e:	d101      	bne.n	11014 <__sinit+0x20>
   11010:	2301      	movs	r3, #1
   11012:	6183      	str	r3, [r0, #24]
   11014:	1c04      	adds	r4, r0, #0
   11016:	f000 f81f 	bl	11058 <__sfp>
   1101a:	6060      	str	r0, [r4, #4]
   1101c:	1c20      	adds	r0, r4, #0
   1101e:	f000 f81b 	bl	11058 <__sfp>
   11022:	60a0      	str	r0, [r4, #8]
   11024:	1c20      	adds	r0, r4, #0
   11026:	f000 f817 	bl	11058 <__sfp>
   1102a:	2104      	movs	r1, #4
   1102c:	60e0      	str	r0, [r4, #12]
   1102e:	2200      	movs	r2, #0
   11030:	6860      	ldr	r0, [r4, #4]
   11032:	f7ff ffa5 	bl	10f80 <std.isra.0>
   11036:	68a0      	ldr	r0, [r4, #8]
   11038:	2109      	movs	r1, #9
   1103a:	2201      	movs	r2, #1
   1103c:	f7ff ffa0 	bl	10f80 <std.isra.0>
   11040:	68e0      	ldr	r0, [r4, #12]
   11042:	2112      	movs	r1, #18
   11044:	2202      	movs	r2, #2
   11046:	f7ff ff9b 	bl	10f80 <std.isra.0>
   1104a:	2301      	movs	r3, #1
   1104c:	61a3      	str	r3, [r4, #24]
   1104e:	bd13      	pop	{r0, r1, r4, pc}
   11050:	000135ac 	.word	0x000135ac
   11054:	00010f71 	.word	0x00010f71

00011058 <__sfp>:
   11058:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1105a:	4b1d      	ldr	r3, [pc, #116]	; (110d0 <__sfp+0x78>)
   1105c:	1c06      	adds	r6, r0, #0
   1105e:	681d      	ldr	r5, [r3, #0]
   11060:	69ab      	ldr	r3, [r5, #24]
   11062:	2b00      	cmp	r3, #0
   11064:	d102      	bne.n	1106c <__sfp+0x14>
   11066:	1c28      	adds	r0, r5, #0
   11068:	f7ff ffc4 	bl	10ff4 <__sinit>
   1106c:	3548      	adds	r5, #72	; 0x48
   1106e:	68ac      	ldr	r4, [r5, #8]
   11070:	686b      	ldr	r3, [r5, #4]
   11072:	3b01      	subs	r3, #1
   11074:	d405      	bmi.n	11082 <__sfp+0x2a>
   11076:	220c      	movs	r2, #12
   11078:	5ea7      	ldrsh	r7, [r4, r2]
   1107a:	2f00      	cmp	r7, #0
   1107c:	d010      	beq.n	110a0 <__sfp+0x48>
   1107e:	3468      	adds	r4, #104	; 0x68
   11080:	e7f7      	b.n	11072 <__sfp+0x1a>
   11082:	682b      	ldr	r3, [r5, #0]
   11084:	2b00      	cmp	r3, #0
   11086:	d106      	bne.n	11096 <__sfp+0x3e>
   11088:	1c30      	adds	r0, r6, #0
   1108a:	2104      	movs	r1, #4
   1108c:	f7ff ff9c 	bl	10fc8 <__sfmoreglue>
   11090:	6028      	str	r0, [r5, #0]
   11092:	2800      	cmp	r0, #0
   11094:	d001      	beq.n	1109a <__sfp+0x42>
   11096:	682d      	ldr	r5, [r5, #0]
   11098:	e7e9      	b.n	1106e <__sfp+0x16>
   1109a:	230c      	movs	r3, #12
   1109c:	6033      	str	r3, [r6, #0]
   1109e:	e016      	b.n	110ce <__sfp+0x76>
   110a0:	2301      	movs	r3, #1
   110a2:	1c20      	adds	r0, r4, #0
   110a4:	425b      	negs	r3, r3
   110a6:	81e3      	strh	r3, [r4, #14]
   110a8:	3302      	adds	r3, #2
   110aa:	81a3      	strh	r3, [r4, #12]
   110ac:	6667      	str	r7, [r4, #100]	; 0x64
   110ae:	6027      	str	r7, [r4, #0]
   110b0:	60a7      	str	r7, [r4, #8]
   110b2:	6067      	str	r7, [r4, #4]
   110b4:	6127      	str	r7, [r4, #16]
   110b6:	6167      	str	r7, [r4, #20]
   110b8:	61a7      	str	r7, [r4, #24]
   110ba:	305c      	adds	r0, #92	; 0x5c
   110bc:	1c39      	adds	r1, r7, #0
   110be:	2208      	movs	r2, #8
   110c0:	f7ff fc2e 	bl	10920 <memset>
   110c4:	1c20      	adds	r0, r4, #0
   110c6:	6367      	str	r7, [r4, #52]	; 0x34
   110c8:	63a7      	str	r7, [r4, #56]	; 0x38
   110ca:	64a7      	str	r7, [r4, #72]	; 0x48
   110cc:	64e7      	str	r7, [r4, #76]	; 0x4c
   110ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   110d0:	000135ac 	.word	0x000135ac

000110d4 <_fwalk_reent>:
   110d4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   110d6:	1c04      	adds	r4, r0, #0
   110d8:	1c07      	adds	r7, r0, #0
   110da:	2600      	movs	r6, #0
   110dc:	9101      	str	r1, [sp, #4]
   110de:	3448      	adds	r4, #72	; 0x48
   110e0:	2c00      	cmp	r4, #0
   110e2:	d016      	beq.n	11112 <_fwalk_reent+0x3e>
   110e4:	6863      	ldr	r3, [r4, #4]
   110e6:	68a5      	ldr	r5, [r4, #8]
   110e8:	9300      	str	r3, [sp, #0]
   110ea:	9b00      	ldr	r3, [sp, #0]
   110ec:	3b01      	subs	r3, #1
   110ee:	9300      	str	r3, [sp, #0]
   110f0:	d40d      	bmi.n	1110e <_fwalk_reent+0x3a>
   110f2:	89ab      	ldrh	r3, [r5, #12]
   110f4:	2b01      	cmp	r3, #1
   110f6:	d908      	bls.n	1110a <_fwalk_reent+0x36>
   110f8:	220e      	movs	r2, #14
   110fa:	5eab      	ldrsh	r3, [r5, r2]
   110fc:	3301      	adds	r3, #1
   110fe:	d004      	beq.n	1110a <_fwalk_reent+0x36>
   11100:	1c38      	adds	r0, r7, #0
   11102:	1c29      	adds	r1, r5, #0
   11104:	9b01      	ldr	r3, [sp, #4]
   11106:	4798      	blx	r3
   11108:	4306      	orrs	r6, r0
   1110a:	3568      	adds	r5, #104	; 0x68
   1110c:	e7ed      	b.n	110ea <_fwalk_reent+0x16>
   1110e:	6824      	ldr	r4, [r4, #0]
   11110:	e7e6      	b.n	110e0 <_fwalk_reent+0xc>
   11112:	1c30      	adds	r0, r6, #0
   11114:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
	...

00011118 <__smakebuf_r>:
   11118:	b5f0      	push	{r4, r5, r6, r7, lr}
   1111a:	898b      	ldrh	r3, [r1, #12]
   1111c:	b091      	sub	sp, #68	; 0x44
   1111e:	079b      	lsls	r3, r3, #30
   11120:	d506      	bpl.n	11130 <__smakebuf_r+0x18>
   11122:	1c0b      	adds	r3, r1, #0
   11124:	3347      	adds	r3, #71	; 0x47
   11126:	600b      	str	r3, [r1, #0]
   11128:	610b      	str	r3, [r1, #16]
   1112a:	2301      	movs	r3, #1
   1112c:	614b      	str	r3, [r1, #20]
   1112e:	e045      	b.n	111bc <__smakebuf_r+0xa4>
   11130:	1c0c      	adds	r4, r1, #0
   11132:	230e      	movs	r3, #14
   11134:	5ec9      	ldrsh	r1, [r1, r3]
   11136:	1c06      	adds	r6, r0, #0
   11138:	2900      	cmp	r1, #0
   1113a:	da04      	bge.n	11146 <__smakebuf_r+0x2e>
   1113c:	2380      	movs	r3, #128	; 0x80
   1113e:	89a5      	ldrh	r5, [r4, #12]
   11140:	401d      	ands	r5, r3
   11142:	d110      	bne.n	11166 <__smakebuf_r+0x4e>
   11144:	e00c      	b.n	11160 <__smakebuf_r+0x48>
   11146:	aa01      	add	r2, sp, #4
   11148:	f000 fdba 	bl	11cc0 <_fstat_r>
   1114c:	2800      	cmp	r0, #0
   1114e:	dbf5      	blt.n	1113c <__smakebuf_r+0x24>
   11150:	23f0      	movs	r3, #240	; 0xf0
   11152:	9d02      	ldr	r5, [sp, #8]
   11154:	021b      	lsls	r3, r3, #8
   11156:	401d      	ands	r5, r3
   11158:	4b19      	ldr	r3, [pc, #100]	; (111c0 <__smakebuf_r+0xa8>)
   1115a:	18ed      	adds	r5, r5, r3
   1115c:	426b      	negs	r3, r5
   1115e:	415d      	adcs	r5, r3
   11160:	2780      	movs	r7, #128	; 0x80
   11162:	00ff      	lsls	r7, r7, #3
   11164:	e001      	b.n	1116a <__smakebuf_r+0x52>
   11166:	2500      	movs	r5, #0
   11168:	2740      	movs	r7, #64	; 0x40
   1116a:	1c30      	adds	r0, r6, #0
   1116c:	1c39      	adds	r1, r7, #0
   1116e:	f000 f87b 	bl	11268 <_malloc_r>
   11172:	2800      	cmp	r0, #0
   11174:	d10c      	bne.n	11190 <__smakebuf_r+0x78>
   11176:	89a3      	ldrh	r3, [r4, #12]
   11178:	059a      	lsls	r2, r3, #22
   1117a:	d41f      	bmi.n	111bc <__smakebuf_r+0xa4>
   1117c:	2202      	movs	r2, #2
   1117e:	4313      	orrs	r3, r2
   11180:	81a3      	strh	r3, [r4, #12]
   11182:	1c23      	adds	r3, r4, #0
   11184:	3347      	adds	r3, #71	; 0x47
   11186:	6023      	str	r3, [r4, #0]
   11188:	6123      	str	r3, [r4, #16]
   1118a:	2301      	movs	r3, #1
   1118c:	6163      	str	r3, [r4, #20]
   1118e:	e015      	b.n	111bc <__smakebuf_r+0xa4>
   11190:	2280      	movs	r2, #128	; 0x80
   11192:	4b0c      	ldr	r3, [pc, #48]	; (111c4 <__smakebuf_r+0xac>)
   11194:	62b3      	str	r3, [r6, #40]	; 0x28
   11196:	89a3      	ldrh	r3, [r4, #12]
   11198:	6020      	str	r0, [r4, #0]
   1119a:	4313      	orrs	r3, r2
   1119c:	81a3      	strh	r3, [r4, #12]
   1119e:	6120      	str	r0, [r4, #16]
   111a0:	6167      	str	r7, [r4, #20]
   111a2:	2d00      	cmp	r5, #0
   111a4:	d00a      	beq.n	111bc <__smakebuf_r+0xa4>
   111a6:	230e      	movs	r3, #14
   111a8:	5ee1      	ldrsh	r1, [r4, r3]
   111aa:	1c30      	adds	r0, r6, #0
   111ac:	f000 fd9a 	bl	11ce4 <_isatty_r>
   111b0:	2800      	cmp	r0, #0
   111b2:	d003      	beq.n	111bc <__smakebuf_r+0xa4>
   111b4:	2201      	movs	r2, #1
   111b6:	89a3      	ldrh	r3, [r4, #12]
   111b8:	4313      	orrs	r3, r2
   111ba:	81a3      	strh	r3, [r4, #12]
   111bc:	b011      	add	sp, #68	; 0x44
   111be:	bdf0      	pop	{r4, r5, r6, r7, pc}
   111c0:	ffffe000 	.word	0xffffe000
   111c4:	00010f71 	.word	0x00010f71

000111c8 <malloc>:
   111c8:	b508      	push	{r3, lr}
   111ca:	4b03      	ldr	r3, [pc, #12]	; (111d8 <malloc+0x10>)
   111cc:	1c01      	adds	r1, r0, #0
   111ce:	6818      	ldr	r0, [r3, #0]
   111d0:	f000 f84a 	bl	11268 <_malloc_r>
   111d4:	bd08      	pop	{r3, pc}
   111d6:	46c0      	nop			; (mov r8, r8)
   111d8:	20000234 	.word	0x20000234

000111dc <_free_r>:
   111dc:	b530      	push	{r4, r5, lr}
   111de:	2900      	cmp	r1, #0
   111e0:	d03e      	beq.n	11260 <_free_r+0x84>
   111e2:	3904      	subs	r1, #4
   111e4:	680b      	ldr	r3, [r1, #0]
   111e6:	2b00      	cmp	r3, #0
   111e8:	da00      	bge.n	111ec <_free_r+0x10>
   111ea:	18c9      	adds	r1, r1, r3
   111ec:	4a1d      	ldr	r2, [pc, #116]	; (11264 <_free_r+0x88>)
   111ee:	6813      	ldr	r3, [r2, #0]
   111f0:	1c14      	adds	r4, r2, #0
   111f2:	2b00      	cmp	r3, #0
   111f4:	d102      	bne.n	111fc <_free_r+0x20>
   111f6:	604b      	str	r3, [r1, #4]
   111f8:	6011      	str	r1, [r2, #0]
   111fa:	e031      	b.n	11260 <_free_r+0x84>
   111fc:	4299      	cmp	r1, r3
   111fe:	d20d      	bcs.n	1121c <_free_r+0x40>
   11200:	6808      	ldr	r0, [r1, #0]
   11202:	180a      	adds	r2, r1, r0
   11204:	429a      	cmp	r2, r3
   11206:	d103      	bne.n	11210 <_free_r+0x34>
   11208:	6813      	ldr	r3, [r2, #0]
   1120a:	18c3      	adds	r3, r0, r3
   1120c:	600b      	str	r3, [r1, #0]
   1120e:	6853      	ldr	r3, [r2, #4]
   11210:	604b      	str	r3, [r1, #4]
   11212:	6021      	str	r1, [r4, #0]
   11214:	e024      	b.n	11260 <_free_r+0x84>
   11216:	428a      	cmp	r2, r1
   11218:	d803      	bhi.n	11222 <_free_r+0x46>
   1121a:	1c13      	adds	r3, r2, #0
   1121c:	685a      	ldr	r2, [r3, #4]
   1121e:	2a00      	cmp	r2, #0
   11220:	d1f9      	bne.n	11216 <_free_r+0x3a>
   11222:	681d      	ldr	r5, [r3, #0]
   11224:	195c      	adds	r4, r3, r5
   11226:	428c      	cmp	r4, r1
   11228:	d10b      	bne.n	11242 <_free_r+0x66>
   1122a:	6809      	ldr	r1, [r1, #0]
   1122c:	1869      	adds	r1, r5, r1
   1122e:	1858      	adds	r0, r3, r1
   11230:	6019      	str	r1, [r3, #0]
   11232:	4290      	cmp	r0, r2
   11234:	d114      	bne.n	11260 <_free_r+0x84>
   11236:	6810      	ldr	r0, [r2, #0]
   11238:	6852      	ldr	r2, [r2, #4]
   1123a:	1809      	adds	r1, r1, r0
   1123c:	6019      	str	r1, [r3, #0]
   1123e:	605a      	str	r2, [r3, #4]
   11240:	e00e      	b.n	11260 <_free_r+0x84>
   11242:	428c      	cmp	r4, r1
   11244:	d902      	bls.n	1124c <_free_r+0x70>
   11246:	230c      	movs	r3, #12
   11248:	6003      	str	r3, [r0, #0]
   1124a:	e009      	b.n	11260 <_free_r+0x84>
   1124c:	6808      	ldr	r0, [r1, #0]
   1124e:	180c      	adds	r4, r1, r0
   11250:	4294      	cmp	r4, r2
   11252:	d103      	bne.n	1125c <_free_r+0x80>
   11254:	6814      	ldr	r4, [r2, #0]
   11256:	6852      	ldr	r2, [r2, #4]
   11258:	1900      	adds	r0, r0, r4
   1125a:	6008      	str	r0, [r1, #0]
   1125c:	604a      	str	r2, [r1, #4]
   1125e:	6059      	str	r1, [r3, #4]
   11260:	bd30      	pop	{r4, r5, pc}
   11262:	46c0      	nop			; (mov r8, r8)
   11264:	20002a84 	.word	0x20002a84

00011268 <_malloc_r>:
   11268:	2303      	movs	r3, #3
   1126a:	b570      	push	{r4, r5, r6, lr}
   1126c:	1ccc      	adds	r4, r1, #3
   1126e:	439c      	bics	r4, r3
   11270:	3408      	adds	r4, #8
   11272:	1c05      	adds	r5, r0, #0
   11274:	2c0c      	cmp	r4, #12
   11276:	d201      	bcs.n	1127c <_malloc_r+0x14>
   11278:	240c      	movs	r4, #12
   1127a:	e005      	b.n	11288 <_malloc_r+0x20>
   1127c:	2c00      	cmp	r4, #0
   1127e:	da03      	bge.n	11288 <_malloc_r+0x20>
   11280:	230c      	movs	r3, #12
   11282:	2000      	movs	r0, #0
   11284:	602b      	str	r3, [r5, #0]
   11286:	e042      	b.n	1130e <_malloc_r+0xa6>
   11288:	428c      	cmp	r4, r1
   1128a:	d3f9      	bcc.n	11280 <_malloc_r+0x18>
   1128c:	4a20      	ldr	r2, [pc, #128]	; (11310 <_malloc_r+0xa8>)
   1128e:	6813      	ldr	r3, [r2, #0]
   11290:	1c10      	adds	r0, r2, #0
   11292:	1c19      	adds	r1, r3, #0
   11294:	2900      	cmp	r1, #0
   11296:	d013      	beq.n	112c0 <_malloc_r+0x58>
   11298:	680a      	ldr	r2, [r1, #0]
   1129a:	1b12      	subs	r2, r2, r4
   1129c:	d40d      	bmi.n	112ba <_malloc_r+0x52>
   1129e:	2a0b      	cmp	r2, #11
   112a0:	d902      	bls.n	112a8 <_malloc_r+0x40>
   112a2:	600a      	str	r2, [r1, #0]
   112a4:	188b      	adds	r3, r1, r2
   112a6:	e01f      	b.n	112e8 <_malloc_r+0x80>
   112a8:	428b      	cmp	r3, r1
   112aa:	d102      	bne.n	112b2 <_malloc_r+0x4a>
   112ac:	685a      	ldr	r2, [r3, #4]
   112ae:	6002      	str	r2, [r0, #0]
   112b0:	e01b      	b.n	112ea <_malloc_r+0x82>
   112b2:	684a      	ldr	r2, [r1, #4]
   112b4:	605a      	str	r2, [r3, #4]
   112b6:	1c0b      	adds	r3, r1, #0
   112b8:	e017      	b.n	112ea <_malloc_r+0x82>
   112ba:	1c0b      	adds	r3, r1, #0
   112bc:	6849      	ldr	r1, [r1, #4]
   112be:	e7e9      	b.n	11294 <_malloc_r+0x2c>
   112c0:	4e14      	ldr	r6, [pc, #80]	; (11314 <_malloc_r+0xac>)
   112c2:	6833      	ldr	r3, [r6, #0]
   112c4:	2b00      	cmp	r3, #0
   112c6:	d103      	bne.n	112d0 <_malloc_r+0x68>
   112c8:	1c28      	adds	r0, r5, #0
   112ca:	f000 fc75 	bl	11bb8 <_sbrk_r>
   112ce:	6030      	str	r0, [r6, #0]
   112d0:	1c28      	adds	r0, r5, #0
   112d2:	1c21      	adds	r1, r4, #0
   112d4:	f000 fc70 	bl	11bb8 <_sbrk_r>
   112d8:	1c03      	adds	r3, r0, #0
   112da:	1c42      	adds	r2, r0, #1
   112dc:	d0d0      	beq.n	11280 <_malloc_r+0x18>
   112de:	2203      	movs	r2, #3
   112e0:	1cc6      	adds	r6, r0, #3
   112e2:	4396      	bics	r6, r2
   112e4:	4286      	cmp	r6, r0
   112e6:	d10a      	bne.n	112fe <_malloc_r+0x96>
   112e8:	601c      	str	r4, [r3, #0]
   112ea:	1c18      	adds	r0, r3, #0
   112ec:	2107      	movs	r1, #7
   112ee:	300b      	adds	r0, #11
   112f0:	1d1a      	adds	r2, r3, #4
   112f2:	4388      	bics	r0, r1
   112f4:	1a82      	subs	r2, r0, r2
   112f6:	d00a      	beq.n	1130e <_malloc_r+0xa6>
   112f8:	4251      	negs	r1, r2
   112fa:	5099      	str	r1, [r3, r2]
   112fc:	e007      	b.n	1130e <_malloc_r+0xa6>
   112fe:	1a31      	subs	r1, r6, r0
   11300:	1c28      	adds	r0, r5, #0
   11302:	f000 fc59 	bl	11bb8 <_sbrk_r>
   11306:	1c43      	adds	r3, r0, #1
   11308:	d0ba      	beq.n	11280 <_malloc_r+0x18>
   1130a:	1c33      	adds	r3, r6, #0
   1130c:	e7ec      	b.n	112e8 <_malloc_r+0x80>
   1130e:	bd70      	pop	{r4, r5, r6, pc}
   11310:	20002a84 	.word	0x20002a84
   11314:	20002a80 	.word	0x20002a80

00011318 <__ssputs_r>:
   11318:	b5f0      	push	{r4, r5, r6, r7, lr}
   1131a:	688e      	ldr	r6, [r1, #8]
   1131c:	b085      	sub	sp, #20
   1131e:	1c07      	adds	r7, r0, #0
   11320:	1c0c      	adds	r4, r1, #0
   11322:	9203      	str	r2, [sp, #12]
   11324:	9301      	str	r3, [sp, #4]
   11326:	42b3      	cmp	r3, r6
   11328:	d345      	bcc.n	113b6 <__ssputs_r+0x9e>
   1132a:	2390      	movs	r3, #144	; 0x90
   1132c:	898a      	ldrh	r2, [r1, #12]
   1132e:	00db      	lsls	r3, r3, #3
   11330:	421a      	tst	r2, r3
   11332:	d03d      	beq.n	113b0 <__ssputs_r+0x98>
   11334:	2503      	movs	r5, #3
   11336:	6909      	ldr	r1, [r1, #16]
   11338:	6823      	ldr	r3, [r4, #0]
   1133a:	9801      	ldr	r0, [sp, #4]
   1133c:	1a5b      	subs	r3, r3, r1
   1133e:	9302      	str	r3, [sp, #8]
   11340:	6963      	ldr	r3, [r4, #20]
   11342:	435d      	muls	r5, r3
   11344:	0feb      	lsrs	r3, r5, #31
   11346:	195d      	adds	r5, r3, r5
   11348:	9b02      	ldr	r3, [sp, #8]
   1134a:	106d      	asrs	r5, r5, #1
   1134c:	3301      	adds	r3, #1
   1134e:	181b      	adds	r3, r3, r0
   11350:	429d      	cmp	r5, r3
   11352:	d200      	bcs.n	11356 <__ssputs_r+0x3e>
   11354:	1c1d      	adds	r5, r3, #0
   11356:	1c38      	adds	r0, r7, #0
   11358:	0553      	lsls	r3, r2, #21
   1135a:	d50f      	bpl.n	1137c <__ssputs_r+0x64>
   1135c:	1c29      	adds	r1, r5, #0
   1135e:	f7ff ff83 	bl	11268 <_malloc_r>
   11362:	1e06      	subs	r6, r0, #0
   11364:	d013      	beq.n	1138e <__ssputs_r+0x76>
   11366:	9a02      	ldr	r2, [sp, #8]
   11368:	6921      	ldr	r1, [r4, #16]
   1136a:	f7ff fabc 	bl	108e6 <memcpy>
   1136e:	89a2      	ldrh	r2, [r4, #12]
   11370:	4b18      	ldr	r3, [pc, #96]	; (113d4 <__ssputs_r+0xbc>)
   11372:	4013      	ands	r3, r2
   11374:	2280      	movs	r2, #128	; 0x80
   11376:	4313      	orrs	r3, r2
   11378:	81a3      	strh	r3, [r4, #12]
   1137a:	e011      	b.n	113a0 <__ssputs_r+0x88>
   1137c:	1c2a      	adds	r2, r5, #0
   1137e:	f000 fce2 	bl	11d46 <_realloc_r>
   11382:	1e06      	subs	r6, r0, #0
   11384:	d10c      	bne.n	113a0 <__ssputs_r+0x88>
   11386:	1c38      	adds	r0, r7, #0
   11388:	6921      	ldr	r1, [r4, #16]
   1138a:	f7ff ff27 	bl	111dc <_free_r>
   1138e:	230c      	movs	r3, #12
   11390:	2240      	movs	r2, #64	; 0x40
   11392:	2001      	movs	r0, #1
   11394:	603b      	str	r3, [r7, #0]
   11396:	89a3      	ldrh	r3, [r4, #12]
   11398:	4240      	negs	r0, r0
   1139a:	4313      	orrs	r3, r2
   1139c:	81a3      	strh	r3, [r4, #12]
   1139e:	e017      	b.n	113d0 <__ssputs_r+0xb8>
   113a0:	9b02      	ldr	r3, [sp, #8]
   113a2:	6126      	str	r6, [r4, #16]
   113a4:	18f6      	adds	r6, r6, r3
   113a6:	6026      	str	r6, [r4, #0]
   113a8:	6165      	str	r5, [r4, #20]
   113aa:	9e01      	ldr	r6, [sp, #4]
   113ac:	1aed      	subs	r5, r5, r3
   113ae:	60a5      	str	r5, [r4, #8]
   113b0:	9b01      	ldr	r3, [sp, #4]
   113b2:	42b3      	cmp	r3, r6
   113b4:	d200      	bcs.n	113b8 <__ssputs_r+0xa0>
   113b6:	9e01      	ldr	r6, [sp, #4]
   113b8:	1c32      	adds	r2, r6, #0
   113ba:	6820      	ldr	r0, [r4, #0]
   113bc:	9903      	ldr	r1, [sp, #12]
   113be:	f7ff fa9b 	bl	108f8 <memmove>
   113c2:	2000      	movs	r0, #0
   113c4:	68a3      	ldr	r3, [r4, #8]
   113c6:	1b9b      	subs	r3, r3, r6
   113c8:	60a3      	str	r3, [r4, #8]
   113ca:	6823      	ldr	r3, [r4, #0]
   113cc:	199e      	adds	r6, r3, r6
   113ce:	6026      	str	r6, [r4, #0]
   113d0:	b005      	add	sp, #20
   113d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   113d4:	fffffb7f 	.word	0xfffffb7f

000113d8 <_svfiprintf_r>:
   113d8:	b5f0      	push	{r4, r5, r6, r7, lr}
   113da:	b09f      	sub	sp, #124	; 0x7c
   113dc:	9002      	str	r0, [sp, #8]
   113de:	9305      	str	r3, [sp, #20]
   113e0:	898b      	ldrh	r3, [r1, #12]
   113e2:	1c0e      	adds	r6, r1, #0
   113e4:	1c17      	adds	r7, r2, #0
   113e6:	061b      	lsls	r3, r3, #24
   113e8:	d510      	bpl.n	1140c <_svfiprintf_r+0x34>
   113ea:	690b      	ldr	r3, [r1, #16]
   113ec:	2b00      	cmp	r3, #0
   113ee:	d10d      	bne.n	1140c <_svfiprintf_r+0x34>
   113f0:	2140      	movs	r1, #64	; 0x40
   113f2:	f7ff ff39 	bl	11268 <_malloc_r>
   113f6:	6030      	str	r0, [r6, #0]
   113f8:	6130      	str	r0, [r6, #16]
   113fa:	2800      	cmp	r0, #0
   113fc:	d104      	bne.n	11408 <_svfiprintf_r+0x30>
   113fe:	230c      	movs	r3, #12
   11400:	9a02      	ldr	r2, [sp, #8]
   11402:	3801      	subs	r0, #1
   11404:	6013      	str	r3, [r2, #0]
   11406:	e0d0      	b.n	115aa <_svfiprintf_r+0x1d2>
   11408:	2340      	movs	r3, #64	; 0x40
   1140a:	6173      	str	r3, [r6, #20]
   1140c:	2300      	movs	r3, #0
   1140e:	ad06      	add	r5, sp, #24
   11410:	616b      	str	r3, [r5, #20]
   11412:	3320      	adds	r3, #32
   11414:	766b      	strb	r3, [r5, #25]
   11416:	3310      	adds	r3, #16
   11418:	76ab      	strb	r3, [r5, #26]
   1141a:	1c3c      	adds	r4, r7, #0
   1141c:	7823      	ldrb	r3, [r4, #0]
   1141e:	2b00      	cmp	r3, #0
   11420:	d103      	bne.n	1142a <_svfiprintf_r+0x52>
   11422:	1be3      	subs	r3, r4, r7
   11424:	9304      	str	r3, [sp, #16]
   11426:	d012      	beq.n	1144e <_svfiprintf_r+0x76>
   11428:	e003      	b.n	11432 <_svfiprintf_r+0x5a>
   1142a:	2b25      	cmp	r3, #37	; 0x25
   1142c:	d0f9      	beq.n	11422 <_svfiprintf_r+0x4a>
   1142e:	3401      	adds	r4, #1
   11430:	e7f4      	b.n	1141c <_svfiprintf_r+0x44>
   11432:	9b04      	ldr	r3, [sp, #16]
   11434:	9802      	ldr	r0, [sp, #8]
   11436:	1c31      	adds	r1, r6, #0
   11438:	1c3a      	adds	r2, r7, #0
   1143a:	f7ff ff6d 	bl	11318 <__ssputs_r>
   1143e:	1c43      	adds	r3, r0, #1
   11440:	d100      	bne.n	11444 <_svfiprintf_r+0x6c>
   11442:	e0ac      	b.n	1159e <_svfiprintf_r+0x1c6>
   11444:	696a      	ldr	r2, [r5, #20]
   11446:	9b04      	ldr	r3, [sp, #16]
   11448:	4694      	mov	ip, r2
   1144a:	4463      	add	r3, ip
   1144c:	616b      	str	r3, [r5, #20]
   1144e:	7823      	ldrb	r3, [r4, #0]
   11450:	2b00      	cmp	r3, #0
   11452:	d100      	bne.n	11456 <_svfiprintf_r+0x7e>
   11454:	e0a3      	b.n	1159e <_svfiprintf_r+0x1c6>
   11456:	2201      	movs	r2, #1
   11458:	2300      	movs	r3, #0
   1145a:	4252      	negs	r2, r2
   1145c:	606a      	str	r2, [r5, #4]
   1145e:	a902      	add	r1, sp, #8
   11460:	3254      	adds	r2, #84	; 0x54
   11462:	1852      	adds	r2, r2, r1
   11464:	3401      	adds	r4, #1
   11466:	602b      	str	r3, [r5, #0]
   11468:	60eb      	str	r3, [r5, #12]
   1146a:	60ab      	str	r3, [r5, #8]
   1146c:	7013      	strb	r3, [r2, #0]
   1146e:	65ab      	str	r3, [r5, #88]	; 0x58
   11470:	4f4f      	ldr	r7, [pc, #316]	; (115b0 <_svfiprintf_r+0x1d8>)
   11472:	7821      	ldrb	r1, [r4, #0]
   11474:	1c38      	adds	r0, r7, #0
   11476:	2205      	movs	r2, #5
   11478:	f000 fc5a 	bl	11d30 <memchr>
   1147c:	2800      	cmp	r0, #0
   1147e:	d008      	beq.n	11492 <_svfiprintf_r+0xba>
   11480:	1bc0      	subs	r0, r0, r7
   11482:	2701      	movs	r7, #1
   11484:	4087      	lsls	r7, r0
   11486:	1c38      	adds	r0, r7, #0
   11488:	682b      	ldr	r3, [r5, #0]
   1148a:	3401      	adds	r4, #1
   1148c:	4318      	orrs	r0, r3
   1148e:	6028      	str	r0, [r5, #0]
   11490:	e7ee      	b.n	11470 <_svfiprintf_r+0x98>
   11492:	682b      	ldr	r3, [r5, #0]
   11494:	06da      	lsls	r2, r3, #27
   11496:	d504      	bpl.n	114a2 <_svfiprintf_r+0xca>
   11498:	2253      	movs	r2, #83	; 0x53
   1149a:	2120      	movs	r1, #32
   1149c:	a802      	add	r0, sp, #8
   1149e:	1812      	adds	r2, r2, r0
   114a0:	7011      	strb	r1, [r2, #0]
   114a2:	071a      	lsls	r2, r3, #28
   114a4:	d504      	bpl.n	114b0 <_svfiprintf_r+0xd8>
   114a6:	2253      	movs	r2, #83	; 0x53
   114a8:	212b      	movs	r1, #43	; 0x2b
   114aa:	a802      	add	r0, sp, #8
   114ac:	1812      	adds	r2, r2, r0
   114ae:	7011      	strb	r1, [r2, #0]
   114b0:	7822      	ldrb	r2, [r4, #0]
   114b2:	2a2a      	cmp	r2, #42	; 0x2a
   114b4:	d001      	beq.n	114ba <_svfiprintf_r+0xe2>
   114b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
   114b8:	e00e      	b.n	114d8 <_svfiprintf_r+0x100>
   114ba:	9a05      	ldr	r2, [sp, #20]
   114bc:	1d11      	adds	r1, r2, #4
   114be:	6812      	ldr	r2, [r2, #0]
   114c0:	9105      	str	r1, [sp, #20]
   114c2:	2a00      	cmp	r2, #0
   114c4:	db01      	blt.n	114ca <_svfiprintf_r+0xf2>
   114c6:	9209      	str	r2, [sp, #36]	; 0x24
   114c8:	e004      	b.n	114d4 <_svfiprintf_r+0xfc>
   114ca:	4252      	negs	r2, r2
   114cc:	60ea      	str	r2, [r5, #12]
   114ce:	2202      	movs	r2, #2
   114d0:	4313      	orrs	r3, r2
   114d2:	602b      	str	r3, [r5, #0]
   114d4:	3401      	adds	r4, #1
   114d6:	e009      	b.n	114ec <_svfiprintf_r+0x114>
   114d8:	7822      	ldrb	r2, [r4, #0]
   114da:	3a30      	subs	r2, #48	; 0x30
   114dc:	2a09      	cmp	r2, #9
   114de:	d804      	bhi.n	114ea <_svfiprintf_r+0x112>
   114e0:	210a      	movs	r1, #10
   114e2:	434b      	muls	r3, r1
   114e4:	3401      	adds	r4, #1
   114e6:	189b      	adds	r3, r3, r2
   114e8:	e7f6      	b.n	114d8 <_svfiprintf_r+0x100>
   114ea:	9309      	str	r3, [sp, #36]	; 0x24
   114ec:	7823      	ldrb	r3, [r4, #0]
   114ee:	2b2e      	cmp	r3, #46	; 0x2e
   114f0:	d118      	bne.n	11524 <_svfiprintf_r+0x14c>
   114f2:	7863      	ldrb	r3, [r4, #1]
   114f4:	2b2a      	cmp	r3, #42	; 0x2a
   114f6:	d109      	bne.n	1150c <_svfiprintf_r+0x134>
   114f8:	9b05      	ldr	r3, [sp, #20]
   114fa:	3402      	adds	r4, #2
   114fc:	1d1a      	adds	r2, r3, #4
   114fe:	681b      	ldr	r3, [r3, #0]
   11500:	9205      	str	r2, [sp, #20]
   11502:	2b00      	cmp	r3, #0
   11504:	da0d      	bge.n	11522 <_svfiprintf_r+0x14a>
   11506:	2301      	movs	r3, #1
   11508:	425b      	negs	r3, r3
   1150a:	e00a      	b.n	11522 <_svfiprintf_r+0x14a>
   1150c:	2300      	movs	r3, #0
   1150e:	3401      	adds	r4, #1
   11510:	7822      	ldrb	r2, [r4, #0]
   11512:	3a30      	subs	r2, #48	; 0x30
   11514:	2a09      	cmp	r2, #9
   11516:	d804      	bhi.n	11522 <_svfiprintf_r+0x14a>
   11518:	210a      	movs	r1, #10
   1151a:	434b      	muls	r3, r1
   1151c:	3401      	adds	r4, #1
   1151e:	189b      	adds	r3, r3, r2
   11520:	e7f6      	b.n	11510 <_svfiprintf_r+0x138>
   11522:	9307      	str	r3, [sp, #28]
   11524:	4f23      	ldr	r7, [pc, #140]	; (115b4 <_svfiprintf_r+0x1dc>)
   11526:	7821      	ldrb	r1, [r4, #0]
   11528:	1c38      	adds	r0, r7, #0
   1152a:	2203      	movs	r2, #3
   1152c:	f000 fc00 	bl	11d30 <memchr>
   11530:	2800      	cmp	r0, #0
   11532:	d007      	beq.n	11544 <_svfiprintf_r+0x16c>
   11534:	1bc0      	subs	r0, r0, r7
   11536:	2740      	movs	r7, #64	; 0x40
   11538:	4087      	lsls	r7, r0
   1153a:	1c38      	adds	r0, r7, #0
   1153c:	682b      	ldr	r3, [r5, #0]
   1153e:	3401      	adds	r4, #1
   11540:	4318      	orrs	r0, r3
   11542:	6028      	str	r0, [r5, #0]
   11544:	7821      	ldrb	r1, [r4, #0]
   11546:	481c      	ldr	r0, [pc, #112]	; (115b8 <_svfiprintf_r+0x1e0>)
   11548:	2206      	movs	r2, #6
   1154a:	1c67      	adds	r7, r4, #1
   1154c:	7629      	strb	r1, [r5, #24]
   1154e:	f000 fbef 	bl	11d30 <memchr>
   11552:	2800      	cmp	r0, #0
   11554:	d012      	beq.n	1157c <_svfiprintf_r+0x1a4>
   11556:	4b19      	ldr	r3, [pc, #100]	; (115bc <_svfiprintf_r+0x1e4>)
   11558:	2b00      	cmp	r3, #0
   1155a:	d106      	bne.n	1156a <_svfiprintf_r+0x192>
   1155c:	2207      	movs	r2, #7
   1155e:	9b05      	ldr	r3, [sp, #20]
   11560:	3307      	adds	r3, #7
   11562:	4393      	bics	r3, r2
   11564:	3308      	adds	r3, #8
   11566:	9305      	str	r3, [sp, #20]
   11568:	e014      	b.n	11594 <_svfiprintf_r+0x1bc>
   1156a:	ab05      	add	r3, sp, #20
   1156c:	9300      	str	r3, [sp, #0]
   1156e:	9802      	ldr	r0, [sp, #8]
   11570:	1c29      	adds	r1, r5, #0
   11572:	1c32      	adds	r2, r6, #0
   11574:	4b12      	ldr	r3, [pc, #72]	; (115c0 <_svfiprintf_r+0x1e8>)
   11576:	e000      	b.n	1157a <_svfiprintf_r+0x1a2>
   11578:	bf00      	nop
   1157a:	e007      	b.n	1158c <_svfiprintf_r+0x1b4>
   1157c:	ab05      	add	r3, sp, #20
   1157e:	9300      	str	r3, [sp, #0]
   11580:	9802      	ldr	r0, [sp, #8]
   11582:	1c29      	adds	r1, r5, #0
   11584:	1c32      	adds	r2, r6, #0
   11586:	4b0e      	ldr	r3, [pc, #56]	; (115c0 <_svfiprintf_r+0x1e8>)
   11588:	f000 f9c2 	bl	11910 <_printf_i>
   1158c:	9003      	str	r0, [sp, #12]
   1158e:	9b03      	ldr	r3, [sp, #12]
   11590:	3301      	adds	r3, #1
   11592:	d004      	beq.n	1159e <_svfiprintf_r+0x1c6>
   11594:	696b      	ldr	r3, [r5, #20]
   11596:	9a03      	ldr	r2, [sp, #12]
   11598:	189b      	adds	r3, r3, r2
   1159a:	616b      	str	r3, [r5, #20]
   1159c:	e73d      	b.n	1141a <_svfiprintf_r+0x42>
   1159e:	89b3      	ldrh	r3, [r6, #12]
   115a0:	980b      	ldr	r0, [sp, #44]	; 0x2c
   115a2:	065b      	lsls	r3, r3, #25
   115a4:	d501      	bpl.n	115aa <_svfiprintf_r+0x1d2>
   115a6:	2001      	movs	r0, #1
   115a8:	4240      	negs	r0, r0
   115aa:	b01f      	add	sp, #124	; 0x7c
   115ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
   115ae:	46c0      	nop			; (mov r8, r8)
   115b0:	00013610 	.word	0x00013610
   115b4:	00013616 	.word	0x00013616
   115b8:	0001361a 	.word	0x0001361a
   115bc:	00000000 	.word	0x00000000
   115c0:	00011319 	.word	0x00011319

000115c4 <__sfputc_r>:
   115c4:	6893      	ldr	r3, [r2, #8]
   115c6:	b510      	push	{r4, lr}
   115c8:	3b01      	subs	r3, #1
   115ca:	6093      	str	r3, [r2, #8]
   115cc:	2b00      	cmp	r3, #0
   115ce:	da05      	bge.n	115dc <__sfputc_r+0x18>
   115d0:	6994      	ldr	r4, [r2, #24]
   115d2:	42a3      	cmp	r3, r4
   115d4:	db08      	blt.n	115e8 <__sfputc_r+0x24>
   115d6:	b2cb      	uxtb	r3, r1
   115d8:	2b0a      	cmp	r3, #10
   115da:	d005      	beq.n	115e8 <__sfputc_r+0x24>
   115dc:	6813      	ldr	r3, [r2, #0]
   115de:	1c58      	adds	r0, r3, #1
   115e0:	6010      	str	r0, [r2, #0]
   115e2:	7019      	strb	r1, [r3, #0]
   115e4:	b2c8      	uxtb	r0, r1
   115e6:	e001      	b.n	115ec <__sfputc_r+0x28>
   115e8:	f7ff fb40 	bl	10c6c <__swbuf_r>
   115ec:	bd10      	pop	{r4, pc}

000115ee <__sfputs_r>:
   115ee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   115f0:	1c06      	adds	r6, r0, #0
   115f2:	1c0f      	adds	r7, r1, #0
   115f4:	1c14      	adds	r4, r2, #0
   115f6:	18d5      	adds	r5, r2, r3
   115f8:	42ac      	cmp	r4, r5
   115fa:	d008      	beq.n	1160e <__sfputs_r+0x20>
   115fc:	7821      	ldrb	r1, [r4, #0]
   115fe:	1c30      	adds	r0, r6, #0
   11600:	1c3a      	adds	r2, r7, #0
   11602:	f7ff ffdf 	bl	115c4 <__sfputc_r>
   11606:	3401      	adds	r4, #1
   11608:	1c43      	adds	r3, r0, #1
   1160a:	d1f5      	bne.n	115f8 <__sfputs_r+0xa>
   1160c:	e000      	b.n	11610 <__sfputs_r+0x22>
   1160e:	2000      	movs	r0, #0
   11610:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

00011614 <_vfiprintf_r>:
   11614:	b5f0      	push	{r4, r5, r6, r7, lr}
   11616:	b09f      	sub	sp, #124	; 0x7c
   11618:	1c06      	adds	r6, r0, #0
   1161a:	1c0f      	adds	r7, r1, #0
   1161c:	9202      	str	r2, [sp, #8]
   1161e:	9305      	str	r3, [sp, #20]
   11620:	2800      	cmp	r0, #0
   11622:	d004      	beq.n	1162e <_vfiprintf_r+0x1a>
   11624:	6983      	ldr	r3, [r0, #24]
   11626:	2b00      	cmp	r3, #0
   11628:	d101      	bne.n	1162e <_vfiprintf_r+0x1a>
   1162a:	f7ff fce3 	bl	10ff4 <__sinit>
   1162e:	4b79      	ldr	r3, [pc, #484]	; (11814 <_vfiprintf_r+0x200>)
   11630:	429f      	cmp	r7, r3
   11632:	d101      	bne.n	11638 <_vfiprintf_r+0x24>
   11634:	6877      	ldr	r7, [r6, #4]
   11636:	e008      	b.n	1164a <_vfiprintf_r+0x36>
   11638:	4b77      	ldr	r3, [pc, #476]	; (11818 <_vfiprintf_r+0x204>)
   1163a:	429f      	cmp	r7, r3
   1163c:	d101      	bne.n	11642 <_vfiprintf_r+0x2e>
   1163e:	68b7      	ldr	r7, [r6, #8]
   11640:	e003      	b.n	1164a <_vfiprintf_r+0x36>
   11642:	4b76      	ldr	r3, [pc, #472]	; (1181c <_vfiprintf_r+0x208>)
   11644:	429f      	cmp	r7, r3
   11646:	d100      	bne.n	1164a <_vfiprintf_r+0x36>
   11648:	68f7      	ldr	r7, [r6, #12]
   1164a:	89bb      	ldrh	r3, [r7, #12]
   1164c:	071b      	lsls	r3, r3, #28
   1164e:	d50a      	bpl.n	11666 <_vfiprintf_r+0x52>
   11650:	693b      	ldr	r3, [r7, #16]
   11652:	2b00      	cmp	r3, #0
   11654:	d007      	beq.n	11666 <_vfiprintf_r+0x52>
   11656:	2300      	movs	r3, #0
   11658:	ad06      	add	r5, sp, #24
   1165a:	616b      	str	r3, [r5, #20]
   1165c:	3320      	adds	r3, #32
   1165e:	766b      	strb	r3, [r5, #25]
   11660:	3310      	adds	r3, #16
   11662:	76ab      	strb	r3, [r5, #26]
   11664:	e03d      	b.n	116e2 <_vfiprintf_r+0xce>
   11666:	1c30      	adds	r0, r6, #0
   11668:	1c39      	adds	r1, r7, #0
   1166a:	f7ff fb57 	bl	10d1c <__swsetup_r>
   1166e:	2800      	cmp	r0, #0
   11670:	d0f1      	beq.n	11656 <_vfiprintf_r+0x42>
   11672:	2001      	movs	r0, #1
   11674:	4240      	negs	r0, r0
   11676:	e0ca      	b.n	1180e <_vfiprintf_r+0x1fa>
   11678:	9a05      	ldr	r2, [sp, #20]
   1167a:	1d11      	adds	r1, r2, #4
   1167c:	6812      	ldr	r2, [r2, #0]
   1167e:	9105      	str	r1, [sp, #20]
   11680:	2a00      	cmp	r2, #0
   11682:	db7e      	blt.n	11782 <_vfiprintf_r+0x16e>
   11684:	9209      	str	r2, [sp, #36]	; 0x24
   11686:	3401      	adds	r4, #1
   11688:	7823      	ldrb	r3, [r4, #0]
   1168a:	2b2e      	cmp	r3, #46	; 0x2e
   1168c:	d100      	bne.n	11690 <_vfiprintf_r+0x7c>
   1168e:	e089      	b.n	117a4 <_vfiprintf_r+0x190>
   11690:	7821      	ldrb	r1, [r4, #0]
   11692:	4863      	ldr	r0, [pc, #396]	; (11820 <_vfiprintf_r+0x20c>)
   11694:	2203      	movs	r2, #3
   11696:	f000 fb4b 	bl	11d30 <memchr>
   1169a:	2800      	cmp	r0, #0
   1169c:	d008      	beq.n	116b0 <_vfiprintf_r+0x9c>
   1169e:	4b60      	ldr	r3, [pc, #384]	; (11820 <_vfiprintf_r+0x20c>)
   116a0:	3401      	adds	r4, #1
   116a2:	1ac0      	subs	r0, r0, r3
   116a4:	2340      	movs	r3, #64	; 0x40
   116a6:	4083      	lsls	r3, r0
   116a8:	1c18      	adds	r0, r3, #0
   116aa:	682b      	ldr	r3, [r5, #0]
   116ac:	4318      	orrs	r0, r3
   116ae:	6028      	str	r0, [r5, #0]
   116b0:	7821      	ldrb	r1, [r4, #0]
   116b2:	1c63      	adds	r3, r4, #1
   116b4:	485b      	ldr	r0, [pc, #364]	; (11824 <_vfiprintf_r+0x210>)
   116b6:	2206      	movs	r2, #6
   116b8:	9302      	str	r3, [sp, #8]
   116ba:	7629      	strb	r1, [r5, #24]
   116bc:	f000 fb38 	bl	11d30 <memchr>
   116c0:	2800      	cmp	r0, #0
   116c2:	d100      	bne.n	116c6 <_vfiprintf_r+0xb2>
   116c4:	e091      	b.n	117ea <_vfiprintf_r+0x1d6>
   116c6:	4b58      	ldr	r3, [pc, #352]	; (11828 <_vfiprintf_r+0x214>)
   116c8:	2b00      	cmp	r3, #0
   116ca:	d000      	beq.n	116ce <_vfiprintf_r+0xba>
   116cc:	e084      	b.n	117d8 <_vfiprintf_r+0x1c4>
   116ce:	2207      	movs	r2, #7
   116d0:	9b05      	ldr	r3, [sp, #20]
   116d2:	3307      	adds	r3, #7
   116d4:	4393      	bics	r3, r2
   116d6:	3308      	adds	r3, #8
   116d8:	9305      	str	r3, [sp, #20]
   116da:	696b      	ldr	r3, [r5, #20]
   116dc:	9a03      	ldr	r2, [sp, #12]
   116de:	189b      	adds	r3, r3, r2
   116e0:	616b      	str	r3, [r5, #20]
   116e2:	9c02      	ldr	r4, [sp, #8]
   116e4:	7823      	ldrb	r3, [r4, #0]
   116e6:	2b00      	cmp	r3, #0
   116e8:	d104      	bne.n	116f4 <_vfiprintf_r+0xe0>
   116ea:	9b02      	ldr	r3, [sp, #8]
   116ec:	1ae3      	subs	r3, r4, r3
   116ee:	9304      	str	r3, [sp, #16]
   116f0:	d011      	beq.n	11716 <_vfiprintf_r+0x102>
   116f2:	e003      	b.n	116fc <_vfiprintf_r+0xe8>
   116f4:	2b25      	cmp	r3, #37	; 0x25
   116f6:	d0f8      	beq.n	116ea <_vfiprintf_r+0xd6>
   116f8:	3401      	adds	r4, #1
   116fa:	e7f3      	b.n	116e4 <_vfiprintf_r+0xd0>
   116fc:	9b04      	ldr	r3, [sp, #16]
   116fe:	1c30      	adds	r0, r6, #0
   11700:	1c39      	adds	r1, r7, #0
   11702:	9a02      	ldr	r2, [sp, #8]
   11704:	f7ff ff73 	bl	115ee <__sfputs_r>
   11708:	1c43      	adds	r3, r0, #1
   1170a:	d07b      	beq.n	11804 <_vfiprintf_r+0x1f0>
   1170c:	696a      	ldr	r2, [r5, #20]
   1170e:	9b04      	ldr	r3, [sp, #16]
   11710:	4694      	mov	ip, r2
   11712:	4463      	add	r3, ip
   11714:	616b      	str	r3, [r5, #20]
   11716:	7823      	ldrb	r3, [r4, #0]
   11718:	2b00      	cmp	r3, #0
   1171a:	d073      	beq.n	11804 <_vfiprintf_r+0x1f0>
   1171c:	2201      	movs	r2, #1
   1171e:	2300      	movs	r3, #0
   11720:	4252      	negs	r2, r2
   11722:	606a      	str	r2, [r5, #4]
   11724:	a902      	add	r1, sp, #8
   11726:	3254      	adds	r2, #84	; 0x54
   11728:	1852      	adds	r2, r2, r1
   1172a:	3401      	adds	r4, #1
   1172c:	602b      	str	r3, [r5, #0]
   1172e:	60eb      	str	r3, [r5, #12]
   11730:	60ab      	str	r3, [r5, #8]
   11732:	7013      	strb	r3, [r2, #0]
   11734:	65ab      	str	r3, [r5, #88]	; 0x58
   11736:	7821      	ldrb	r1, [r4, #0]
   11738:	483c      	ldr	r0, [pc, #240]	; (1182c <_vfiprintf_r+0x218>)
   1173a:	2205      	movs	r2, #5
   1173c:	f000 faf8 	bl	11d30 <memchr>
   11740:	2800      	cmp	r0, #0
   11742:	d009      	beq.n	11758 <_vfiprintf_r+0x144>
   11744:	4b39      	ldr	r3, [pc, #228]	; (1182c <_vfiprintf_r+0x218>)
   11746:	3401      	adds	r4, #1
   11748:	1ac0      	subs	r0, r0, r3
   1174a:	2301      	movs	r3, #1
   1174c:	4083      	lsls	r3, r0
   1174e:	1c18      	adds	r0, r3, #0
   11750:	682b      	ldr	r3, [r5, #0]
   11752:	4318      	orrs	r0, r3
   11754:	6028      	str	r0, [r5, #0]
   11756:	e7ee      	b.n	11736 <_vfiprintf_r+0x122>
   11758:	682b      	ldr	r3, [r5, #0]
   1175a:	06da      	lsls	r2, r3, #27
   1175c:	d504      	bpl.n	11768 <_vfiprintf_r+0x154>
   1175e:	2253      	movs	r2, #83	; 0x53
   11760:	2120      	movs	r1, #32
   11762:	a802      	add	r0, sp, #8
   11764:	1812      	adds	r2, r2, r0
   11766:	7011      	strb	r1, [r2, #0]
   11768:	071a      	lsls	r2, r3, #28
   1176a:	d504      	bpl.n	11776 <_vfiprintf_r+0x162>
   1176c:	2253      	movs	r2, #83	; 0x53
   1176e:	212b      	movs	r1, #43	; 0x2b
   11770:	a802      	add	r0, sp, #8
   11772:	1812      	adds	r2, r2, r0
   11774:	7011      	strb	r1, [r2, #0]
   11776:	7822      	ldrb	r2, [r4, #0]
   11778:	2a2a      	cmp	r2, #42	; 0x2a
   1177a:	d100      	bne.n	1177e <_vfiprintf_r+0x16a>
   1177c:	e77c      	b.n	11678 <_vfiprintf_r+0x64>
   1177e:	9b09      	ldr	r3, [sp, #36]	; 0x24
   11780:	e005      	b.n	1178e <_vfiprintf_r+0x17a>
   11782:	4252      	negs	r2, r2
   11784:	60ea      	str	r2, [r5, #12]
   11786:	2202      	movs	r2, #2
   11788:	4313      	orrs	r3, r2
   1178a:	602b      	str	r3, [r5, #0]
   1178c:	e77b      	b.n	11686 <_vfiprintf_r+0x72>
   1178e:	7822      	ldrb	r2, [r4, #0]
   11790:	3a30      	subs	r2, #48	; 0x30
   11792:	2a09      	cmp	r2, #9
   11794:	d804      	bhi.n	117a0 <_vfiprintf_r+0x18c>
   11796:	210a      	movs	r1, #10
   11798:	434b      	muls	r3, r1
   1179a:	3401      	adds	r4, #1
   1179c:	189b      	adds	r3, r3, r2
   1179e:	e7f6      	b.n	1178e <_vfiprintf_r+0x17a>
   117a0:	9309      	str	r3, [sp, #36]	; 0x24
   117a2:	e771      	b.n	11688 <_vfiprintf_r+0x74>
   117a4:	7863      	ldrb	r3, [r4, #1]
   117a6:	2b2a      	cmp	r3, #42	; 0x2a
   117a8:	d109      	bne.n	117be <_vfiprintf_r+0x1aa>
   117aa:	9b05      	ldr	r3, [sp, #20]
   117ac:	3402      	adds	r4, #2
   117ae:	1d1a      	adds	r2, r3, #4
   117b0:	681b      	ldr	r3, [r3, #0]
   117b2:	9205      	str	r2, [sp, #20]
   117b4:	2b00      	cmp	r3, #0
   117b6:	da0d      	bge.n	117d4 <_vfiprintf_r+0x1c0>
   117b8:	2301      	movs	r3, #1
   117ba:	425b      	negs	r3, r3
   117bc:	e00a      	b.n	117d4 <_vfiprintf_r+0x1c0>
   117be:	2300      	movs	r3, #0
   117c0:	3401      	adds	r4, #1
   117c2:	7822      	ldrb	r2, [r4, #0]
   117c4:	3a30      	subs	r2, #48	; 0x30
   117c6:	2a09      	cmp	r2, #9
   117c8:	d804      	bhi.n	117d4 <_vfiprintf_r+0x1c0>
   117ca:	210a      	movs	r1, #10
   117cc:	434b      	muls	r3, r1
   117ce:	3401      	adds	r4, #1
   117d0:	189b      	adds	r3, r3, r2
   117d2:	e7f6      	b.n	117c2 <_vfiprintf_r+0x1ae>
   117d4:	9307      	str	r3, [sp, #28]
   117d6:	e75b      	b.n	11690 <_vfiprintf_r+0x7c>
   117d8:	ab05      	add	r3, sp, #20
   117da:	9300      	str	r3, [sp, #0]
   117dc:	1c30      	adds	r0, r6, #0
   117de:	1c29      	adds	r1, r5, #0
   117e0:	1c3a      	adds	r2, r7, #0
   117e2:	4b13      	ldr	r3, [pc, #76]	; (11830 <_vfiprintf_r+0x21c>)
   117e4:	e000      	b.n	117e8 <_vfiprintf_r+0x1d4>
   117e6:	bf00      	nop
   117e8:	e007      	b.n	117fa <_vfiprintf_r+0x1e6>
   117ea:	ab05      	add	r3, sp, #20
   117ec:	9300      	str	r3, [sp, #0]
   117ee:	1c30      	adds	r0, r6, #0
   117f0:	1c29      	adds	r1, r5, #0
   117f2:	1c3a      	adds	r2, r7, #0
   117f4:	4b0e      	ldr	r3, [pc, #56]	; (11830 <_vfiprintf_r+0x21c>)
   117f6:	f000 f88b 	bl	11910 <_printf_i>
   117fa:	9003      	str	r0, [sp, #12]
   117fc:	9b03      	ldr	r3, [sp, #12]
   117fe:	3301      	adds	r3, #1
   11800:	d000      	beq.n	11804 <_vfiprintf_r+0x1f0>
   11802:	e76a      	b.n	116da <_vfiprintf_r+0xc6>
   11804:	89bb      	ldrh	r3, [r7, #12]
   11806:	065b      	lsls	r3, r3, #25
   11808:	d500      	bpl.n	1180c <_vfiprintf_r+0x1f8>
   1180a:	e732      	b.n	11672 <_vfiprintf_r+0x5e>
   1180c:	980b      	ldr	r0, [sp, #44]	; 0x2c
   1180e:	b01f      	add	sp, #124	; 0x7c
   11810:	bdf0      	pop	{r4, r5, r6, r7, pc}
   11812:	46c0      	nop			; (mov r8, r8)
   11814:	000135b0 	.word	0x000135b0
   11818:	000135d0 	.word	0x000135d0
   1181c:	000135f0 	.word	0x000135f0
   11820:	00013616 	.word	0x00013616
   11824:	0001361a 	.word	0x0001361a
   11828:	00000000 	.word	0x00000000
   1182c:	00013610 	.word	0x00013610
   11830:	000115ef 	.word	0x000115ef

00011834 <_printf_common>:
   11834:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   11836:	1c17      	adds	r7, r2, #0
   11838:	9301      	str	r3, [sp, #4]
   1183a:	690a      	ldr	r2, [r1, #16]
   1183c:	688b      	ldr	r3, [r1, #8]
   1183e:	9000      	str	r0, [sp, #0]
   11840:	1c0c      	adds	r4, r1, #0
   11842:	4293      	cmp	r3, r2
   11844:	da00      	bge.n	11848 <_printf_common+0x14>
   11846:	1c13      	adds	r3, r2, #0
   11848:	1c22      	adds	r2, r4, #0
   1184a:	603b      	str	r3, [r7, #0]
   1184c:	3243      	adds	r2, #67	; 0x43
   1184e:	7812      	ldrb	r2, [r2, #0]
   11850:	2a00      	cmp	r2, #0
   11852:	d001      	beq.n	11858 <_printf_common+0x24>
   11854:	3301      	adds	r3, #1
   11856:	603b      	str	r3, [r7, #0]
   11858:	6823      	ldr	r3, [r4, #0]
   1185a:	069b      	lsls	r3, r3, #26
   1185c:	d502      	bpl.n	11864 <_printf_common+0x30>
   1185e:	683b      	ldr	r3, [r7, #0]
   11860:	3302      	adds	r3, #2
   11862:	603b      	str	r3, [r7, #0]
   11864:	2506      	movs	r5, #6
   11866:	6823      	ldr	r3, [r4, #0]
   11868:	401d      	ands	r5, r3
   1186a:	d01e      	beq.n	118aa <_printf_common+0x76>
   1186c:	1c23      	adds	r3, r4, #0
   1186e:	3343      	adds	r3, #67	; 0x43
   11870:	781b      	ldrb	r3, [r3, #0]
   11872:	1e5a      	subs	r2, r3, #1
   11874:	4193      	sbcs	r3, r2
   11876:	6822      	ldr	r2, [r4, #0]
   11878:	0692      	lsls	r2, r2, #26
   1187a:	d51c      	bpl.n	118b6 <_printf_common+0x82>
   1187c:	2030      	movs	r0, #48	; 0x30
   1187e:	18e1      	adds	r1, r4, r3
   11880:	3140      	adds	r1, #64	; 0x40
   11882:	70c8      	strb	r0, [r1, #3]
   11884:	1c21      	adds	r1, r4, #0
   11886:	1c5a      	adds	r2, r3, #1
   11888:	3145      	adds	r1, #69	; 0x45
   1188a:	7809      	ldrb	r1, [r1, #0]
   1188c:	18a2      	adds	r2, r4, r2
   1188e:	3240      	adds	r2, #64	; 0x40
   11890:	3302      	adds	r3, #2
   11892:	70d1      	strb	r1, [r2, #3]
   11894:	e00f      	b.n	118b6 <_printf_common+0x82>
   11896:	1c22      	adds	r2, r4, #0
   11898:	2301      	movs	r3, #1
   1189a:	9800      	ldr	r0, [sp, #0]
   1189c:	9901      	ldr	r1, [sp, #4]
   1189e:	3219      	adds	r2, #25
   118a0:	9e08      	ldr	r6, [sp, #32]
   118a2:	47b0      	blx	r6
   118a4:	1c43      	adds	r3, r0, #1
   118a6:	d00e      	beq.n	118c6 <_printf_common+0x92>
   118a8:	3501      	adds	r5, #1
   118aa:	68e3      	ldr	r3, [r4, #12]
   118ac:	683a      	ldr	r2, [r7, #0]
   118ae:	1a9b      	subs	r3, r3, r2
   118b0:	429d      	cmp	r5, r3
   118b2:	dbf0      	blt.n	11896 <_printf_common+0x62>
   118b4:	e7da      	b.n	1186c <_printf_common+0x38>
   118b6:	1c22      	adds	r2, r4, #0
   118b8:	9800      	ldr	r0, [sp, #0]
   118ba:	9901      	ldr	r1, [sp, #4]
   118bc:	3243      	adds	r2, #67	; 0x43
   118be:	9d08      	ldr	r5, [sp, #32]
   118c0:	47a8      	blx	r5
   118c2:	1c43      	adds	r3, r0, #1
   118c4:	d102      	bne.n	118cc <_printf_common+0x98>
   118c6:	2001      	movs	r0, #1
   118c8:	4240      	negs	r0, r0
   118ca:	e020      	b.n	1190e <_printf_common+0xda>
   118cc:	2306      	movs	r3, #6
   118ce:	6820      	ldr	r0, [r4, #0]
   118d0:	68e1      	ldr	r1, [r4, #12]
   118d2:	683a      	ldr	r2, [r7, #0]
   118d4:	4003      	ands	r3, r0
   118d6:	2500      	movs	r5, #0
   118d8:	2b04      	cmp	r3, #4
   118da:	d103      	bne.n	118e4 <_printf_common+0xb0>
   118dc:	1a8d      	subs	r5, r1, r2
   118de:	43eb      	mvns	r3, r5
   118e0:	17db      	asrs	r3, r3, #31
   118e2:	401d      	ands	r5, r3
   118e4:	68a3      	ldr	r3, [r4, #8]
   118e6:	6922      	ldr	r2, [r4, #16]
   118e8:	4293      	cmp	r3, r2
   118ea:	dd01      	ble.n	118f0 <_printf_common+0xbc>
   118ec:	1a9b      	subs	r3, r3, r2
   118ee:	18ed      	adds	r5, r5, r3
   118f0:	2700      	movs	r7, #0
   118f2:	42af      	cmp	r7, r5
   118f4:	da0a      	bge.n	1190c <_printf_common+0xd8>
   118f6:	1c22      	adds	r2, r4, #0
   118f8:	2301      	movs	r3, #1
   118fa:	9800      	ldr	r0, [sp, #0]
   118fc:	9901      	ldr	r1, [sp, #4]
   118fe:	321a      	adds	r2, #26
   11900:	9e08      	ldr	r6, [sp, #32]
   11902:	47b0      	blx	r6
   11904:	1c43      	adds	r3, r0, #1
   11906:	d0de      	beq.n	118c6 <_printf_common+0x92>
   11908:	3701      	adds	r7, #1
   1190a:	e7f2      	b.n	118f2 <_printf_common+0xbe>
   1190c:	2000      	movs	r0, #0
   1190e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

00011910 <_printf_i>:
   11910:	b5f0      	push	{r4, r5, r6, r7, lr}
   11912:	b08b      	sub	sp, #44	; 0x2c
   11914:	9206      	str	r2, [sp, #24]
   11916:	1c0a      	adds	r2, r1, #0
   11918:	3243      	adds	r2, #67	; 0x43
   1191a:	9307      	str	r3, [sp, #28]
   1191c:	9005      	str	r0, [sp, #20]
   1191e:	9204      	str	r2, [sp, #16]
   11920:	7e0a      	ldrb	r2, [r1, #24]
   11922:	1c0c      	adds	r4, r1, #0
   11924:	9b10      	ldr	r3, [sp, #64]	; 0x40
   11926:	2a6e      	cmp	r2, #110	; 0x6e
   11928:	d100      	bne.n	1192c <_printf_i+0x1c>
   1192a:	e0a8      	b.n	11a7e <_printf_i+0x16e>
   1192c:	d811      	bhi.n	11952 <_printf_i+0x42>
   1192e:	2a63      	cmp	r2, #99	; 0x63
   11930:	d022      	beq.n	11978 <_printf_i+0x68>
   11932:	d809      	bhi.n	11948 <_printf_i+0x38>
   11934:	2a00      	cmp	r2, #0
   11936:	d100      	bne.n	1193a <_printf_i+0x2a>
   11938:	e0b2      	b.n	11aa0 <_printf_i+0x190>
   1193a:	2a58      	cmp	r2, #88	; 0x58
   1193c:	d000      	beq.n	11940 <_printf_i+0x30>
   1193e:	e0c2      	b.n	11ac6 <_printf_i+0x1b6>
   11940:	3145      	adds	r1, #69	; 0x45
   11942:	700a      	strb	r2, [r1, #0]
   11944:	4a7c      	ldr	r2, [pc, #496]	; (11b38 <_printf_i+0x228>)
   11946:	e04f      	b.n	119e8 <_printf_i+0xd8>
   11948:	2a64      	cmp	r2, #100	; 0x64
   1194a:	d01d      	beq.n	11988 <_printf_i+0x78>
   1194c:	2a69      	cmp	r2, #105	; 0x69
   1194e:	d01b      	beq.n	11988 <_printf_i+0x78>
   11950:	e0b9      	b.n	11ac6 <_printf_i+0x1b6>
   11952:	2a73      	cmp	r2, #115	; 0x73
   11954:	d100      	bne.n	11958 <_printf_i+0x48>
   11956:	e0a7      	b.n	11aa8 <_printf_i+0x198>
   11958:	d809      	bhi.n	1196e <_printf_i+0x5e>
   1195a:	2a6f      	cmp	r2, #111	; 0x6f
   1195c:	d029      	beq.n	119b2 <_printf_i+0xa2>
   1195e:	2a70      	cmp	r2, #112	; 0x70
   11960:	d000      	beq.n	11964 <_printf_i+0x54>
   11962:	e0b0      	b.n	11ac6 <_printf_i+0x1b6>
   11964:	2220      	movs	r2, #32
   11966:	6809      	ldr	r1, [r1, #0]
   11968:	430a      	orrs	r2, r1
   1196a:	6022      	str	r2, [r4, #0]
   1196c:	e037      	b.n	119de <_printf_i+0xce>
   1196e:	2a75      	cmp	r2, #117	; 0x75
   11970:	d01f      	beq.n	119b2 <_printf_i+0xa2>
   11972:	2a78      	cmp	r2, #120	; 0x78
   11974:	d033      	beq.n	119de <_printf_i+0xce>
   11976:	e0a6      	b.n	11ac6 <_printf_i+0x1b6>
   11978:	1c0e      	adds	r6, r1, #0
   1197a:	681a      	ldr	r2, [r3, #0]
   1197c:	3642      	adds	r6, #66	; 0x42
   1197e:	1d11      	adds	r1, r2, #4
   11980:	6019      	str	r1, [r3, #0]
   11982:	6813      	ldr	r3, [r2, #0]
   11984:	7033      	strb	r3, [r6, #0]
   11986:	e0a1      	b.n	11acc <_printf_i+0x1bc>
   11988:	6821      	ldr	r1, [r4, #0]
   1198a:	681a      	ldr	r2, [r3, #0]
   1198c:	0608      	lsls	r0, r1, #24
   1198e:	d406      	bmi.n	1199e <_printf_i+0x8e>
   11990:	0649      	lsls	r1, r1, #25
   11992:	d504      	bpl.n	1199e <_printf_i+0x8e>
   11994:	1d11      	adds	r1, r2, #4
   11996:	6019      	str	r1, [r3, #0]
   11998:	2300      	movs	r3, #0
   1199a:	5ed5      	ldrsh	r5, [r2, r3]
   1199c:	e002      	b.n	119a4 <_printf_i+0x94>
   1199e:	1d11      	adds	r1, r2, #4
   119a0:	6019      	str	r1, [r3, #0]
   119a2:	6815      	ldr	r5, [r2, #0]
   119a4:	2d00      	cmp	r5, #0
   119a6:	da3b      	bge.n	11a20 <_printf_i+0x110>
   119a8:	232d      	movs	r3, #45	; 0x2d
   119aa:	9a04      	ldr	r2, [sp, #16]
   119ac:	426d      	negs	r5, r5
   119ae:	7013      	strb	r3, [r2, #0]
   119b0:	e036      	b.n	11a20 <_printf_i+0x110>
   119b2:	6821      	ldr	r1, [r4, #0]
   119b4:	681a      	ldr	r2, [r3, #0]
   119b6:	0608      	lsls	r0, r1, #24
   119b8:	d406      	bmi.n	119c8 <_printf_i+0xb8>
   119ba:	0649      	lsls	r1, r1, #25
   119bc:	d504      	bpl.n	119c8 <_printf_i+0xb8>
   119be:	6815      	ldr	r5, [r2, #0]
   119c0:	1d11      	adds	r1, r2, #4
   119c2:	6019      	str	r1, [r3, #0]
   119c4:	b2ad      	uxth	r5, r5
   119c6:	e002      	b.n	119ce <_printf_i+0xbe>
   119c8:	1d11      	adds	r1, r2, #4
   119ca:	6019      	str	r1, [r3, #0]
   119cc:	6815      	ldr	r5, [r2, #0]
   119ce:	4b5a      	ldr	r3, [pc, #360]	; (11b38 <_printf_i+0x228>)
   119d0:	7e22      	ldrb	r2, [r4, #24]
   119d2:	9303      	str	r3, [sp, #12]
   119d4:	270a      	movs	r7, #10
   119d6:	2a6f      	cmp	r2, #111	; 0x6f
   119d8:	d11d      	bne.n	11a16 <_printf_i+0x106>
   119da:	2708      	movs	r7, #8
   119dc:	e01b      	b.n	11a16 <_printf_i+0x106>
   119de:	1c22      	adds	r2, r4, #0
   119e0:	2178      	movs	r1, #120	; 0x78
   119e2:	3245      	adds	r2, #69	; 0x45
   119e4:	7011      	strb	r1, [r2, #0]
   119e6:	4a55      	ldr	r2, [pc, #340]	; (11b3c <_printf_i+0x22c>)
   119e8:	6819      	ldr	r1, [r3, #0]
   119ea:	9203      	str	r2, [sp, #12]
   119ec:	1d08      	adds	r0, r1, #4
   119ee:	6822      	ldr	r2, [r4, #0]
   119f0:	6018      	str	r0, [r3, #0]
   119f2:	680d      	ldr	r5, [r1, #0]
   119f4:	0610      	lsls	r0, r2, #24
   119f6:	d402      	bmi.n	119fe <_printf_i+0xee>
   119f8:	0650      	lsls	r0, r2, #25
   119fa:	d500      	bpl.n	119fe <_printf_i+0xee>
   119fc:	b2ad      	uxth	r5, r5
   119fe:	07d3      	lsls	r3, r2, #31
   11a00:	d502      	bpl.n	11a08 <_printf_i+0xf8>
   11a02:	2320      	movs	r3, #32
   11a04:	431a      	orrs	r2, r3
   11a06:	6022      	str	r2, [r4, #0]
   11a08:	2710      	movs	r7, #16
   11a0a:	2d00      	cmp	r5, #0
   11a0c:	d103      	bne.n	11a16 <_printf_i+0x106>
   11a0e:	2320      	movs	r3, #32
   11a10:	6822      	ldr	r2, [r4, #0]
   11a12:	439a      	bics	r2, r3
   11a14:	6022      	str	r2, [r4, #0]
   11a16:	1c23      	adds	r3, r4, #0
   11a18:	2200      	movs	r2, #0
   11a1a:	3343      	adds	r3, #67	; 0x43
   11a1c:	701a      	strb	r2, [r3, #0]
   11a1e:	e002      	b.n	11a26 <_printf_i+0x116>
   11a20:	270a      	movs	r7, #10
   11a22:	4b45      	ldr	r3, [pc, #276]	; (11b38 <_printf_i+0x228>)
   11a24:	9303      	str	r3, [sp, #12]
   11a26:	6863      	ldr	r3, [r4, #4]
   11a28:	60a3      	str	r3, [r4, #8]
   11a2a:	2b00      	cmp	r3, #0
   11a2c:	db03      	blt.n	11a36 <_printf_i+0x126>
   11a2e:	2204      	movs	r2, #4
   11a30:	6821      	ldr	r1, [r4, #0]
   11a32:	4391      	bics	r1, r2
   11a34:	6021      	str	r1, [r4, #0]
   11a36:	2d00      	cmp	r5, #0
   11a38:	d102      	bne.n	11a40 <_printf_i+0x130>
   11a3a:	9e04      	ldr	r6, [sp, #16]
   11a3c:	2b00      	cmp	r3, #0
   11a3e:	d00e      	beq.n	11a5e <_printf_i+0x14e>
   11a40:	9e04      	ldr	r6, [sp, #16]
   11a42:	1c28      	adds	r0, r5, #0
   11a44:	1c39      	adds	r1, r7, #0
   11a46:	f7fe fdf3 	bl	10630 <__aeabi_uidivmod>
   11a4a:	9b03      	ldr	r3, [sp, #12]
   11a4c:	3e01      	subs	r6, #1
   11a4e:	5c5b      	ldrb	r3, [r3, r1]
   11a50:	1c28      	adds	r0, r5, #0
   11a52:	7033      	strb	r3, [r6, #0]
   11a54:	1c39      	adds	r1, r7, #0
   11a56:	f7fe fd65 	bl	10524 <__aeabi_uidiv>
   11a5a:	1e05      	subs	r5, r0, #0
   11a5c:	d1f1      	bne.n	11a42 <_printf_i+0x132>
   11a5e:	2f08      	cmp	r7, #8
   11a60:	d109      	bne.n	11a76 <_printf_i+0x166>
   11a62:	6823      	ldr	r3, [r4, #0]
   11a64:	07db      	lsls	r3, r3, #31
   11a66:	d506      	bpl.n	11a76 <_printf_i+0x166>
   11a68:	6863      	ldr	r3, [r4, #4]
   11a6a:	6922      	ldr	r2, [r4, #16]
   11a6c:	4293      	cmp	r3, r2
   11a6e:	dc02      	bgt.n	11a76 <_printf_i+0x166>
   11a70:	2330      	movs	r3, #48	; 0x30
   11a72:	3e01      	subs	r6, #1
   11a74:	7033      	strb	r3, [r6, #0]
   11a76:	9b04      	ldr	r3, [sp, #16]
   11a78:	1b9b      	subs	r3, r3, r6
   11a7a:	6123      	str	r3, [r4, #16]
   11a7c:	e02b      	b.n	11ad6 <_printf_i+0x1c6>
   11a7e:	6809      	ldr	r1, [r1, #0]
   11a80:	681a      	ldr	r2, [r3, #0]
   11a82:	0608      	lsls	r0, r1, #24
   11a84:	d407      	bmi.n	11a96 <_printf_i+0x186>
   11a86:	0649      	lsls	r1, r1, #25
   11a88:	d505      	bpl.n	11a96 <_printf_i+0x186>
   11a8a:	1d11      	adds	r1, r2, #4
   11a8c:	6019      	str	r1, [r3, #0]
   11a8e:	6813      	ldr	r3, [r2, #0]
   11a90:	8aa2      	ldrh	r2, [r4, #20]
   11a92:	801a      	strh	r2, [r3, #0]
   11a94:	e004      	b.n	11aa0 <_printf_i+0x190>
   11a96:	1d11      	adds	r1, r2, #4
   11a98:	6019      	str	r1, [r3, #0]
   11a9a:	6813      	ldr	r3, [r2, #0]
   11a9c:	6962      	ldr	r2, [r4, #20]
   11a9e:	601a      	str	r2, [r3, #0]
   11aa0:	2300      	movs	r3, #0
   11aa2:	9e04      	ldr	r6, [sp, #16]
   11aa4:	6123      	str	r3, [r4, #16]
   11aa6:	e016      	b.n	11ad6 <_printf_i+0x1c6>
   11aa8:	681a      	ldr	r2, [r3, #0]
   11aaa:	1d11      	adds	r1, r2, #4
   11aac:	6019      	str	r1, [r3, #0]
   11aae:	6816      	ldr	r6, [r2, #0]
   11ab0:	2100      	movs	r1, #0
   11ab2:	1c30      	adds	r0, r6, #0
   11ab4:	6862      	ldr	r2, [r4, #4]
   11ab6:	f000 f93b 	bl	11d30 <memchr>
   11aba:	2800      	cmp	r0, #0
   11abc:	d001      	beq.n	11ac2 <_printf_i+0x1b2>
   11abe:	1b80      	subs	r0, r0, r6
   11ac0:	6060      	str	r0, [r4, #4]
   11ac2:	6863      	ldr	r3, [r4, #4]
   11ac4:	e003      	b.n	11ace <_printf_i+0x1be>
   11ac6:	1c26      	adds	r6, r4, #0
   11ac8:	3642      	adds	r6, #66	; 0x42
   11aca:	7032      	strb	r2, [r6, #0]
   11acc:	2301      	movs	r3, #1
   11ace:	6123      	str	r3, [r4, #16]
   11ad0:	2300      	movs	r3, #0
   11ad2:	9a04      	ldr	r2, [sp, #16]
   11ad4:	7013      	strb	r3, [r2, #0]
   11ad6:	9b07      	ldr	r3, [sp, #28]
   11ad8:	9805      	ldr	r0, [sp, #20]
   11ada:	9300      	str	r3, [sp, #0]
   11adc:	1c21      	adds	r1, r4, #0
   11ade:	9b06      	ldr	r3, [sp, #24]
   11ae0:	aa09      	add	r2, sp, #36	; 0x24
   11ae2:	f7ff fea7 	bl	11834 <_printf_common>
   11ae6:	1c43      	adds	r3, r0, #1
   11ae8:	d102      	bne.n	11af0 <_printf_i+0x1e0>
   11aea:	2001      	movs	r0, #1
   11aec:	4240      	negs	r0, r0
   11aee:	e021      	b.n	11b34 <_printf_i+0x224>
   11af0:	6923      	ldr	r3, [r4, #16]
   11af2:	9805      	ldr	r0, [sp, #20]
   11af4:	9906      	ldr	r1, [sp, #24]
   11af6:	1c32      	adds	r2, r6, #0
   11af8:	9d07      	ldr	r5, [sp, #28]
   11afa:	47a8      	blx	r5
   11afc:	1c43      	adds	r3, r0, #1
   11afe:	d0f4      	beq.n	11aea <_printf_i+0x1da>
   11b00:	6823      	ldr	r3, [r4, #0]
   11b02:	079b      	lsls	r3, r3, #30
   11b04:	d405      	bmi.n	11b12 <_printf_i+0x202>
   11b06:	9b09      	ldr	r3, [sp, #36]	; 0x24
   11b08:	68e0      	ldr	r0, [r4, #12]
   11b0a:	4298      	cmp	r0, r3
   11b0c:	da12      	bge.n	11b34 <_printf_i+0x224>
   11b0e:	1c18      	adds	r0, r3, #0
   11b10:	e010      	b.n	11b34 <_printf_i+0x224>
   11b12:	2500      	movs	r5, #0
   11b14:	68e3      	ldr	r3, [r4, #12]
   11b16:	9a09      	ldr	r2, [sp, #36]	; 0x24
   11b18:	1a9b      	subs	r3, r3, r2
   11b1a:	429d      	cmp	r5, r3
   11b1c:	daf3      	bge.n	11b06 <_printf_i+0x1f6>
   11b1e:	1c22      	adds	r2, r4, #0
   11b20:	2301      	movs	r3, #1
   11b22:	9805      	ldr	r0, [sp, #20]
   11b24:	9906      	ldr	r1, [sp, #24]
   11b26:	3219      	adds	r2, #25
   11b28:	9e07      	ldr	r6, [sp, #28]
   11b2a:	47b0      	blx	r6
   11b2c:	1c43      	adds	r3, r0, #1
   11b2e:	d0dc      	beq.n	11aea <_printf_i+0x1da>
   11b30:	3501      	adds	r5, #1
   11b32:	e7ef      	b.n	11b14 <_printf_i+0x204>
   11b34:	b00b      	add	sp, #44	; 0x2c
   11b36:	bdf0      	pop	{r4, r5, r6, r7, pc}
   11b38:	00013621 	.word	0x00013621
   11b3c:	00013632 	.word	0x00013632

00011b40 <_putc_r>:
   11b40:	b570      	push	{r4, r5, r6, lr}
   11b42:	1c05      	adds	r5, r0, #0
   11b44:	1c0e      	adds	r6, r1, #0
   11b46:	1c14      	adds	r4, r2, #0
   11b48:	2800      	cmp	r0, #0
   11b4a:	d004      	beq.n	11b56 <_putc_r+0x16>
   11b4c:	6983      	ldr	r3, [r0, #24]
   11b4e:	2b00      	cmp	r3, #0
   11b50:	d101      	bne.n	11b56 <_putc_r+0x16>
   11b52:	f7ff fa4f 	bl	10ff4 <__sinit>
   11b56:	4b15      	ldr	r3, [pc, #84]	; (11bac <_putc_r+0x6c>)
   11b58:	429c      	cmp	r4, r3
   11b5a:	d101      	bne.n	11b60 <_putc_r+0x20>
   11b5c:	686c      	ldr	r4, [r5, #4]
   11b5e:	e008      	b.n	11b72 <_putc_r+0x32>
   11b60:	4b13      	ldr	r3, [pc, #76]	; (11bb0 <_putc_r+0x70>)
   11b62:	429c      	cmp	r4, r3
   11b64:	d101      	bne.n	11b6a <_putc_r+0x2a>
   11b66:	68ac      	ldr	r4, [r5, #8]
   11b68:	e003      	b.n	11b72 <_putc_r+0x32>
   11b6a:	4b12      	ldr	r3, [pc, #72]	; (11bb4 <_putc_r+0x74>)
   11b6c:	429c      	cmp	r4, r3
   11b6e:	d100      	bne.n	11b72 <_putc_r+0x32>
   11b70:	68ec      	ldr	r4, [r5, #12]
   11b72:	68a3      	ldr	r3, [r4, #8]
   11b74:	3b01      	subs	r3, #1
   11b76:	60a3      	str	r3, [r4, #8]
   11b78:	2b00      	cmp	r3, #0
   11b7a:	da10      	bge.n	11b9e <_putc_r+0x5e>
   11b7c:	69a2      	ldr	r2, [r4, #24]
   11b7e:	4293      	cmp	r3, r2
   11b80:	db07      	blt.n	11b92 <_putc_r+0x52>
   11b82:	6823      	ldr	r3, [r4, #0]
   11b84:	701e      	strb	r6, [r3, #0]
   11b86:	6823      	ldr	r3, [r4, #0]
   11b88:	7819      	ldrb	r1, [r3, #0]
   11b8a:	290a      	cmp	r1, #10
   11b8c:	d10a      	bne.n	11ba4 <_putc_r+0x64>
   11b8e:	1c28      	adds	r0, r5, #0
   11b90:	e001      	b.n	11b96 <_putc_r+0x56>
   11b92:	1c28      	adds	r0, r5, #0
   11b94:	1c31      	adds	r1, r6, #0
   11b96:	1c22      	adds	r2, r4, #0
   11b98:	f7ff f868 	bl	10c6c <__swbuf_r>
   11b9c:	e005      	b.n	11baa <_putc_r+0x6a>
   11b9e:	6823      	ldr	r3, [r4, #0]
   11ba0:	701e      	strb	r6, [r3, #0]
   11ba2:	6823      	ldr	r3, [r4, #0]
   11ba4:	1c5a      	adds	r2, r3, #1
   11ba6:	6022      	str	r2, [r4, #0]
   11ba8:	7818      	ldrb	r0, [r3, #0]
   11baa:	bd70      	pop	{r4, r5, r6, pc}
   11bac:	000135b0 	.word	0x000135b0
   11bb0:	000135d0 	.word	0x000135d0
   11bb4:	000135f0 	.word	0x000135f0

00011bb8 <_sbrk_r>:
   11bb8:	b538      	push	{r3, r4, r5, lr}
   11bba:	2300      	movs	r3, #0
   11bbc:	4c06      	ldr	r4, [pc, #24]	; (11bd8 <_sbrk_r+0x20>)
   11bbe:	1c05      	adds	r5, r0, #0
   11bc0:	1c08      	adds	r0, r1, #0
   11bc2:	6023      	str	r3, [r4, #0]
   11bc4:	f7f0 fe5c 	bl	2880 <_sbrk>
   11bc8:	1c43      	adds	r3, r0, #1
   11bca:	d103      	bne.n	11bd4 <_sbrk_r+0x1c>
   11bcc:	6823      	ldr	r3, [r4, #0]
   11bce:	2b00      	cmp	r3, #0
   11bd0:	d000      	beq.n	11bd4 <_sbrk_r+0x1c>
   11bd2:	602b      	str	r3, [r5, #0]
   11bd4:	bd38      	pop	{r3, r4, r5, pc}
   11bd6:	46c0      	nop			; (mov r8, r8)
   11bd8:	20003534 	.word	0x20003534

00011bdc <__sread>:
   11bdc:	b538      	push	{r3, r4, r5, lr}
   11bde:	1c0c      	adds	r4, r1, #0
   11be0:	250e      	movs	r5, #14
   11be2:	5f49      	ldrsh	r1, [r1, r5]
   11be4:	f000 f8d6 	bl	11d94 <_read_r>
   11be8:	2800      	cmp	r0, #0
   11bea:	db03      	blt.n	11bf4 <__sread+0x18>
   11bec:	6d63      	ldr	r3, [r4, #84]	; 0x54
   11bee:	181b      	adds	r3, r3, r0
   11bf0:	6563      	str	r3, [r4, #84]	; 0x54
   11bf2:	e003      	b.n	11bfc <__sread+0x20>
   11bf4:	89a2      	ldrh	r2, [r4, #12]
   11bf6:	4b02      	ldr	r3, [pc, #8]	; (11c00 <__sread+0x24>)
   11bf8:	4013      	ands	r3, r2
   11bfa:	81a3      	strh	r3, [r4, #12]
   11bfc:	bd38      	pop	{r3, r4, r5, pc}
   11bfe:	46c0      	nop			; (mov r8, r8)
   11c00:	ffffefff 	.word	0xffffefff

00011c04 <__swrite>:
   11c04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   11c06:	1c1e      	adds	r6, r3, #0
   11c08:	898b      	ldrh	r3, [r1, #12]
   11c0a:	1c05      	adds	r5, r0, #0
   11c0c:	1c0c      	adds	r4, r1, #0
   11c0e:	1c17      	adds	r7, r2, #0
   11c10:	05db      	lsls	r3, r3, #23
   11c12:	d505      	bpl.n	11c20 <__swrite+0x1c>
   11c14:	230e      	movs	r3, #14
   11c16:	5ec9      	ldrsh	r1, [r1, r3]
   11c18:	2200      	movs	r2, #0
   11c1a:	2302      	movs	r3, #2
   11c1c:	f000 f874 	bl	11d08 <_lseek_r>
   11c20:	89a2      	ldrh	r2, [r4, #12]
   11c22:	4b05      	ldr	r3, [pc, #20]	; (11c38 <__swrite+0x34>)
   11c24:	1c28      	adds	r0, r5, #0
   11c26:	4013      	ands	r3, r2
   11c28:	81a3      	strh	r3, [r4, #12]
   11c2a:	1c3a      	adds	r2, r7, #0
   11c2c:	230e      	movs	r3, #14
   11c2e:	5ee1      	ldrsh	r1, [r4, r3]
   11c30:	1c33      	adds	r3, r6, #0
   11c32:	f000 f81f 	bl	11c74 <_write_r>
   11c36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   11c38:	ffffefff 	.word	0xffffefff

00011c3c <__sseek>:
   11c3c:	b538      	push	{r3, r4, r5, lr}
   11c3e:	1c0c      	adds	r4, r1, #0
   11c40:	250e      	movs	r5, #14
   11c42:	5f49      	ldrsh	r1, [r1, r5]
   11c44:	f000 f860 	bl	11d08 <_lseek_r>
   11c48:	89a3      	ldrh	r3, [r4, #12]
   11c4a:	1c42      	adds	r2, r0, #1
   11c4c:	d103      	bne.n	11c56 <__sseek+0x1a>
   11c4e:	4a05      	ldr	r2, [pc, #20]	; (11c64 <__sseek+0x28>)
   11c50:	4013      	ands	r3, r2
   11c52:	81a3      	strh	r3, [r4, #12]
   11c54:	e004      	b.n	11c60 <__sseek+0x24>
   11c56:	2280      	movs	r2, #128	; 0x80
   11c58:	0152      	lsls	r2, r2, #5
   11c5a:	4313      	orrs	r3, r2
   11c5c:	81a3      	strh	r3, [r4, #12]
   11c5e:	6560      	str	r0, [r4, #84]	; 0x54
   11c60:	bd38      	pop	{r3, r4, r5, pc}
   11c62:	46c0      	nop			; (mov r8, r8)
   11c64:	ffffefff 	.word	0xffffefff

00011c68 <__sclose>:
   11c68:	b508      	push	{r3, lr}
   11c6a:	230e      	movs	r3, #14
   11c6c:	5ec9      	ldrsh	r1, [r1, r3]
   11c6e:	f000 f815 	bl	11c9c <_close_r>
   11c72:	bd08      	pop	{r3, pc}

00011c74 <_write_r>:
   11c74:	b538      	push	{r3, r4, r5, lr}
   11c76:	1c05      	adds	r5, r0, #0
   11c78:	2000      	movs	r0, #0
   11c7a:	4c07      	ldr	r4, [pc, #28]	; (11c98 <_write_r+0x24>)
   11c7c:	6020      	str	r0, [r4, #0]
   11c7e:	1c08      	adds	r0, r1, #0
   11c80:	1c11      	adds	r1, r2, #0
   11c82:	1c1a      	adds	r2, r3, #0
   11c84:	f7f0 fdd4 	bl	2830 <_write>
   11c88:	1c43      	adds	r3, r0, #1
   11c8a:	d103      	bne.n	11c94 <_write_r+0x20>
   11c8c:	6823      	ldr	r3, [r4, #0]
   11c8e:	2b00      	cmp	r3, #0
   11c90:	d000      	beq.n	11c94 <_write_r+0x20>
   11c92:	602b      	str	r3, [r5, #0]
   11c94:	bd38      	pop	{r3, r4, r5, pc}
   11c96:	46c0      	nop			; (mov r8, r8)
   11c98:	20003534 	.word	0x20003534

00011c9c <_close_r>:
   11c9c:	b538      	push	{r3, r4, r5, lr}
   11c9e:	2300      	movs	r3, #0
   11ca0:	4c06      	ldr	r4, [pc, #24]	; (11cbc <_close_r+0x20>)
   11ca2:	1c05      	adds	r5, r0, #0
   11ca4:	1c08      	adds	r0, r1, #0
   11ca6:	6023      	str	r3, [r4, #0]
   11ca8:	f7f0 fdfc 	bl	28a4 <_close>
   11cac:	1c43      	adds	r3, r0, #1
   11cae:	d103      	bne.n	11cb8 <_close_r+0x1c>
   11cb0:	6823      	ldr	r3, [r4, #0]
   11cb2:	2b00      	cmp	r3, #0
   11cb4:	d000      	beq.n	11cb8 <_close_r+0x1c>
   11cb6:	602b      	str	r3, [r5, #0]
   11cb8:	bd38      	pop	{r3, r4, r5, pc}
   11cba:	46c0      	nop			; (mov r8, r8)
   11cbc:	20003534 	.word	0x20003534

00011cc0 <_fstat_r>:
   11cc0:	b538      	push	{r3, r4, r5, lr}
   11cc2:	2300      	movs	r3, #0
   11cc4:	4c06      	ldr	r4, [pc, #24]	; (11ce0 <_fstat_r+0x20>)
   11cc6:	1c05      	adds	r5, r0, #0
   11cc8:	1c08      	adds	r0, r1, #0
   11cca:	1c11      	adds	r1, r2, #0
   11ccc:	6023      	str	r3, [r4, #0]
   11cce:	f7f0 fded 	bl	28ac <_fstat>
   11cd2:	1c43      	adds	r3, r0, #1
   11cd4:	d103      	bne.n	11cde <_fstat_r+0x1e>
   11cd6:	6823      	ldr	r3, [r4, #0]
   11cd8:	2b00      	cmp	r3, #0
   11cda:	d000      	beq.n	11cde <_fstat_r+0x1e>
   11cdc:	602b      	str	r3, [r5, #0]
   11cde:	bd38      	pop	{r3, r4, r5, pc}
   11ce0:	20003534 	.word	0x20003534

00011ce4 <_isatty_r>:
   11ce4:	b538      	push	{r3, r4, r5, lr}
   11ce6:	2300      	movs	r3, #0
   11ce8:	4c06      	ldr	r4, [pc, #24]	; (11d04 <_isatty_r+0x20>)
   11cea:	1c05      	adds	r5, r0, #0
   11cec:	1c08      	adds	r0, r1, #0
   11cee:	6023      	str	r3, [r4, #0]
   11cf0:	f7f0 fde2 	bl	28b8 <_isatty>
   11cf4:	1c43      	adds	r3, r0, #1
   11cf6:	d103      	bne.n	11d00 <_isatty_r+0x1c>
   11cf8:	6823      	ldr	r3, [r4, #0]
   11cfa:	2b00      	cmp	r3, #0
   11cfc:	d000      	beq.n	11d00 <_isatty_r+0x1c>
   11cfe:	602b      	str	r3, [r5, #0]
   11d00:	bd38      	pop	{r3, r4, r5, pc}
   11d02:	46c0      	nop			; (mov r8, r8)
   11d04:	20003534 	.word	0x20003534

00011d08 <_lseek_r>:
   11d08:	b538      	push	{r3, r4, r5, lr}
   11d0a:	1c05      	adds	r5, r0, #0
   11d0c:	2000      	movs	r0, #0
   11d0e:	4c07      	ldr	r4, [pc, #28]	; (11d2c <_lseek_r+0x24>)
   11d10:	6020      	str	r0, [r4, #0]
   11d12:	1c08      	adds	r0, r1, #0
   11d14:	1c11      	adds	r1, r2, #0
   11d16:	1c1a      	adds	r2, r3, #0
   11d18:	f7f0 fdd0 	bl	28bc <_lseek>
   11d1c:	1c43      	adds	r3, r0, #1
   11d1e:	d103      	bne.n	11d28 <_lseek_r+0x20>
   11d20:	6823      	ldr	r3, [r4, #0]
   11d22:	2b00      	cmp	r3, #0
   11d24:	d000      	beq.n	11d28 <_lseek_r+0x20>
   11d26:	602b      	str	r3, [r5, #0]
   11d28:	bd38      	pop	{r3, r4, r5, pc}
   11d2a:	46c0      	nop			; (mov r8, r8)
   11d2c:	20003534 	.word	0x20003534

00011d30 <memchr>:
   11d30:	b2c9      	uxtb	r1, r1
   11d32:	1882      	adds	r2, r0, r2
   11d34:	4290      	cmp	r0, r2
   11d36:	d004      	beq.n	11d42 <memchr+0x12>
   11d38:	7803      	ldrb	r3, [r0, #0]
   11d3a:	428b      	cmp	r3, r1
   11d3c:	d002      	beq.n	11d44 <memchr+0x14>
   11d3e:	3001      	adds	r0, #1
   11d40:	e7f8      	b.n	11d34 <memchr+0x4>
   11d42:	2000      	movs	r0, #0
   11d44:	4770      	bx	lr

00011d46 <_realloc_r>:
   11d46:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   11d48:	1c06      	adds	r6, r0, #0
   11d4a:	1c0c      	adds	r4, r1, #0
   11d4c:	1c15      	adds	r5, r2, #0
   11d4e:	2900      	cmp	r1, #0
   11d50:	d104      	bne.n	11d5c <_realloc_r+0x16>
   11d52:	1c11      	adds	r1, r2, #0
   11d54:	f7ff fa88 	bl	11268 <_malloc_r>
   11d58:	1c04      	adds	r4, r0, #0
   11d5a:	e018      	b.n	11d8e <_realloc_r+0x48>
   11d5c:	2a00      	cmp	r2, #0
   11d5e:	d103      	bne.n	11d68 <_realloc_r+0x22>
   11d60:	f7ff fa3c 	bl	111dc <_free_r>
   11d64:	1c2c      	adds	r4, r5, #0
   11d66:	e012      	b.n	11d8e <_realloc_r+0x48>
   11d68:	f000 f828 	bl	11dbc <_malloc_usable_size_r>
   11d6c:	42a8      	cmp	r0, r5
   11d6e:	d20e      	bcs.n	11d8e <_realloc_r+0x48>
   11d70:	1c30      	adds	r0, r6, #0
   11d72:	1c29      	adds	r1, r5, #0
   11d74:	f7ff fa78 	bl	11268 <_malloc_r>
   11d78:	1e07      	subs	r7, r0, #0
   11d7a:	d007      	beq.n	11d8c <_realloc_r+0x46>
   11d7c:	1c21      	adds	r1, r4, #0
   11d7e:	1c2a      	adds	r2, r5, #0
   11d80:	f7fe fdb1 	bl	108e6 <memcpy>
   11d84:	1c30      	adds	r0, r6, #0
   11d86:	1c21      	adds	r1, r4, #0
   11d88:	f7ff fa28 	bl	111dc <_free_r>
   11d8c:	1c3c      	adds	r4, r7, #0
   11d8e:	1c20      	adds	r0, r4, #0
   11d90:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

00011d94 <_read_r>:
   11d94:	b538      	push	{r3, r4, r5, lr}
   11d96:	1c05      	adds	r5, r0, #0
   11d98:	2000      	movs	r0, #0
   11d9a:	4c07      	ldr	r4, [pc, #28]	; (11db8 <_read_r+0x24>)
   11d9c:	6020      	str	r0, [r4, #0]
   11d9e:	1c08      	adds	r0, r1, #0
   11da0:	1c11      	adds	r1, r2, #0
   11da2:	1c1a      	adds	r2, r3, #0
   11da4:	f7f0 fd22 	bl	27ec <_read>
   11da8:	1c43      	adds	r3, r0, #1
   11daa:	d103      	bne.n	11db4 <_read_r+0x20>
   11dac:	6823      	ldr	r3, [r4, #0]
   11dae:	2b00      	cmp	r3, #0
   11db0:	d000      	beq.n	11db4 <_read_r+0x20>
   11db2:	602b      	str	r3, [r5, #0]
   11db4:	bd38      	pop	{r3, r4, r5, pc}
   11db6:	46c0      	nop			; (mov r8, r8)
   11db8:	20003534 	.word	0x20003534

00011dbc <_malloc_usable_size_r>:
   11dbc:	1f0b      	subs	r3, r1, #4
   11dbe:	681a      	ldr	r2, [r3, #0]
   11dc0:	1f10      	subs	r0, r2, #4
   11dc2:	2a00      	cmp	r2, #0
   11dc4:	da04      	bge.n	11dd0 <_malloc_usable_size_r+0x14>
   11dc6:	1889      	adds	r1, r1, r2
   11dc8:	3904      	subs	r1, #4
   11dca:	680b      	ldr	r3, [r1, #0]
   11dcc:	18d0      	adds	r0, r2, r3
   11dce:	3804      	subs	r0, #4
   11dd0:	4770      	bx	lr
   11dd2:	0000      	movs	r0, r0
   11dd4:	42000800 	.word	0x42000800
   11dd8:	42000c00 	.word	0x42000c00
   11ddc:	42001000 	.word	0x42001000
   11de0:	42001400 	.word	0x42001400
   11de4:	42001800 	.word	0x42001800
   11de8:	42001c00 	.word	0x42001c00
   11dec:	0c0b0a09 	.word	0x0c0b0a09
   11df0:	00000e0d 	.word	0x00000e0d
   11df4:	00001af6 	.word	0x00001af6
   11df8:	00001af2 	.word	0x00001af2
   11dfc:	00001af2 	.word	0x00001af2
   11e00:	00001b52 	.word	0x00001b52
   11e04:	00001b52 	.word	0x00001b52
   11e08:	00001b0c 	.word	0x00001b0c
   11e0c:	00001afc 	.word	0x00001afc
   11e10:	00001b12 	.word	0x00001b12
   11e14:	00001b40 	.word	0x00001b40
   11e18:	00001d24 	.word	0x00001d24
   11e1c:	00001d04 	.word	0x00001d04
   11e20:	00001d04 	.word	0x00001d04
   11e24:	00001d84 	.word	0x00001d84
   11e28:	00001d16 	.word	0x00001d16
   11e2c:	00001d32 	.word	0x00001d32
   11e30:	00001d08 	.word	0x00001d08
   11e34:	00001d40 	.word	0x00001d40
   11e38:	00001d74 	.word	0x00001d74
   11e3c:	42002c00 	.word	0x42002c00
   11e40:	42003000 	.word	0x42003000
   11e44:	42003400 	.word	0x42003400
   11e48:	001c1c1b 	.word	0x001c1c1b
   11e4c:	10000800 	.word	0x10000800
   11e50:	00002000 	.word	0x00002000
   11e54:	5454514d 	.word	0x5454514d
   11e58:	45202d20 	.word	0x45202d20
   11e5c:	646f636e 	.word	0x646f636e
   11e60:	20676e69 	.word	0x20676e69
   11e64:	676e656c 	.word	0x676e656c
   11e68:	25206874 	.word	0x25206874
   11e6c:	0d0a756c 	.word	0x0d0a756c
   11e70:	00000000 	.word	0x00000000
   11e74:	5454514d 	.word	0x5454514d
   11e78:	45202d20 	.word	0x45202d20
   11e7c:	646f636e 	.word	0x646f636e
   11e80:	656c2065 	.word	0x656c2065
   11e84:	6964206e 	.word	0x6964206e
   11e88:	20746967 	.word	0x20746967
   11e8c:	27752527 	.word	0x27752527
   11e90:	6e656c20 	.word	0x6e656c20
   11e94:	20687467 	.word	0x20687467
   11e98:	756c2527 	.word	0x756c2527
   11e9c:	000d0a27 	.word	0x000d0a27
   11ea0:	5454514d 	.word	0x5454514d
   11ea4:	72202d20 	.word	0x72202d20
   11ea8:	69616d65 	.word	0x69616d65
   11eac:	676e696e 	.word	0x676e696e
   11eb0:	6e656c5f 	.word	0x6e656c5f
   11eb4:	5f687467 	.word	0x5f687467
   11eb8:	65747962 	.word	0x65747962
   11ebc:	75252073 	.word	0x75252073
   11ec0:	00000d0a 	.word	0x00000d0a
   11ec4:	5454514d 	.word	0x5454514d
   11ec8:	47202d20 	.word	0x47202d20
   11ecc:	5020746f 	.word	0x5020746f
   11ed0:	494c4255 	.word	0x494c4255
   11ed4:	202c4853 	.word	0x202c4853
   11ed8:	6c6c6163 	.word	0x6c6c6163
   11edc:	6f206465 	.word	0x6f206465
   11ee0:	2065636e 	.word	0x2065636e
   11ee4:	20726570 	.word	0x20726570
   11ee8:	616e616d 	.word	0x616e616d
   11eec:	62616567 	.word	0x62616567
   11ef0:	6320656c 	.word	0x6320656c
   11ef4:	6b6e7568 	.word	0x6b6e7568
   11ef8:	20666f20 	.word	0x20666f20
   11efc:	7373656d 	.word	0x7373656d
   11f00:	2e656761 	.word	0x2e656761
   11f04:	00000d0a 	.word	0x00000d0a
   11f08:	5454514d 	.word	0x5454514d
   11f0c:	48202d20 	.word	0x48202d20
   11f10:	6c646e61 	.word	0x6c646e61
   11f14:	20676e69 	.word	0x20676e69
   11f18:	6c627570 	.word	0x6c627570
   11f1c:	20687369 	.word	0x20687369
   11f20:	74206e6f 	.word	0x74206e6f
   11f24:	6369706f 	.word	0x6369706f
   11f28:	73252720 	.word	0x73252720
   11f2c:	000d0a27 	.word	0x000d0a27
   11f30:	5454514d 	.word	0x5454514d
   11f34:	54202d20 	.word	0x54202d20
   11f38:	20736968 	.word	0x20736968
   11f3c:	6e756863 	.word	0x6e756863
   11f40:	7369206b 	.word	0x7369206b
   11f44:	20692520 	.word	0x20692520
   11f48:	65747962 	.word	0x65747962
   11f4c:	000d0a73 	.word	0x000d0a73
   11f50:	5454514d 	.word	0x5454514d
   11f54:	28202d20 	.word	0x28202d20
   11f58:	646e6168 	.word	0x646e6168
   11f5c:	705f656c 	.word	0x705f656c
   11f60:	696c6275 	.word	0x696c6275
   11f64:	20296873 	.word	0x20296873
   11f68:	65736572 	.word	0x65736572
   11f6c:	6e697474 	.word	0x6e697474
   11f70:	61702067 	.word	0x61702067
   11f74:	74656b63 	.word	0x74656b63
   11f78:	000d0a2e 	.word	0x000d0a2e
   11f7c:	5f706374 	.word	0x5f706374
   11f80:	75706e69 	.word	0x75706e69
   11f84:	69772074 	.word	0x69772074
   11f88:	25206874 	.word	0x25206874
   11f8c:	79622069 	.word	0x79622069
   11f90:	20736574 	.word	0x20736574
   11f94:	6420666f 	.word	0x6420666f
   11f98:	3a617461 	.word	0x3a617461
   11f9c:	00000d0a 	.word	0x00000d0a
   11fa0:	5454514d 	.word	0x5454514d
   11fa4:	52202d20 	.word	0x52202d20
   11fa8:	20646165 	.word	0x20646165
   11fac:	52444856 	.word	0x52444856
   11fb0:	30252720 	.word	0x30252720
   11fb4:	0a275832 	.word	0x0a275832
   11fb8:	0000000d 	.word	0x0000000d
   11fbc:	5454514d 	.word	0x5454514d
   11fc0:	52202d20 	.word	0x52202d20
   11fc4:	20646165 	.word	0x20646165
   11fc8:	616d6552 	.word	0x616d6552
   11fcc:	6e696e69 	.word	0x6e696e69
   11fd0:	654c2067 	.word	0x654c2067
   11fd4:	6874676e 	.word	0x6874676e
   11fd8:	74796220 	.word	0x74796220
   11fdc:	000d0a65 	.word	0x000d0a65
   11fe0:	65636552 	.word	0x65636552
   11fe4:	64657669 	.word	0x64657669
   11fe8:	726f6d20 	.word	0x726f6d20
   11fec:	68742065 	.word	0x68742065
   11ff0:	34206e65 	.word	0x34206e65
   11ff4:	74796220 	.word	0x74796220
   11ff8:	72272065 	.word	0x72272065
   11ffc:	69616d65 	.word	0x69616d65
   12000:	676e696e 	.word	0x676e696e
   12004:	6e656c20 	.word	0x6e656c20
   12008:	27746867 	.word	0x27746867
   1200c:	0000002e 	.word	0x0000002e
   12010:	5454514d 	.word	0x5454514d
   12014:	46202d20 	.word	0x46202d20
   12018:	73696e69 	.word	0x73696e69
   1201c:	20646568 	.word	0x20646568
   12020:	64616572 	.word	0x64616572
   12024:	20676e69 	.word	0x20676e69
   12028:	616d6572 	.word	0x616d6572
   1202c:	6e696e69 	.word	0x6e696e69
   12030:	656c2067 	.word	0x656c2067
   12034:	6874676e 	.word	0x6874676e
   12038:	74796220 	.word	0x74796220
   1203c:	000d0a65 	.word	0x000d0a65
   12040:	5454514d 	.word	0x5454514d
   12044:	52202d20 	.word	0x52202d20
   12048:	20646165 	.word	0x20646165
   1204c:	4c425550 	.word	0x4c425550
   12050:	20485349 	.word	0x20485349
   12054:	69706f74 	.word	0x69706f74
   12058:	656c2063 	.word	0x656c2063
   1205c:	6925206e 	.word	0x6925206e
   12060:	00000d0a 	.word	0x00000d0a
   12064:	5454514d 	.word	0x5454514d
   12068:	74202d20 	.word	0x74202d20
   1206c:	6369706f 	.word	0x6369706f
   12070:	736f705f 	.word	0x736f705f
   12074:	6925203a 	.word	0x6925203a
   12078:	706f6320 	.word	0x706f6320
   1207c:	79625f79 	.word	0x79625f79
   12080:	3a736574 	.word	0x3a736574
   12084:	00692520 	.word	0x00692520
   12088:	5454514d 	.word	0x5454514d
   1208c:	47202d20 	.word	0x47202d20
   12090:	7420746f 	.word	0x7420746f
   12094:	6369706f 	.word	0x6369706f
   12098:	73252720 	.word	0x73252720
   1209c:	00000027 	.word	0x00000027
   120a0:	6f43202d 	.word	0x6f43202d
   120a4:	64656970 	.word	0x64656970
   120a8:	756c2520 	.word	0x756c2520
   120ac:	79617020 	.word	0x79617020
   120b0:	64616f6c 	.word	0x64616f6c
   120b4:	74796220 	.word	0x74796220
   120b8:	0d0a7365 	.word	0x0d0a7365
   120bc:	00000000 	.word	0x00000000
   120c0:	5454514d 	.word	0x5454514d
   120c4:	43202d20 	.word	0x43202d20
   120c8:	6569706f 	.word	0x6569706f
   120cc:	79622064 	.word	0x79622064
   120d0:	3a736574 	.word	0x3a736574
   120d4:	000d0a20 	.word	0x000d0a20
   120d8:	58323025 	.word	0x58323025
   120dc:	00000020 	.word	0x00000020
   120e0:	5454514d 	.word	0x5454514d
   120e4:	46202d20 	.word	0x46202d20
   120e8:	73696e69 	.word	0x73696e69
   120ec:	20646568 	.word	0x20646568
   120f0:	64616572 	.word	0x64616572
   120f4:	20676e69 	.word	0x20676e69
   120f8:	6b636170 	.word	0x6b636170
   120fc:	0a217465 	.word	0x0a217465
   12100:	0000000d 	.word	0x0000000d
   12104:	5454514d 	.word	0x5454514d
   12108:	74202d20 	.word	0x74202d20
   1210c:	6c61746f 	.word	0x6c61746f
   12110:	74616420 	.word	0x74616420
   12114:	61772061 	.word	0x61772061
   12118:	69252073 	.word	0x69252073
   1211c:	74796220 	.word	0x74796220
   12120:	6f207365 	.word	0x6f207365
   12124:	61642066 	.word	0x61642066
   12128:	202e6174 	.word	0x202e6174
   1212c:	00000d0a 	.word	0x00000d0a
   12130:	5454514d 	.word	0x5454514d
   12134:	47202d20 	.word	0x47202d20
   12138:	4320746f 	.word	0x4320746f
   1213c:	414e4e4f 	.word	0x414e4e4f
   12140:	0d0a4b43 	.word	0x0d0a4b43
   12144:	00000000 	.word	0x00000000
   12148:	5454514d 	.word	0x5454514d
   1214c:	47202d20 	.word	0x47202d20
   12150:	5020746f 	.word	0x5020746f
   12154:	43414255 	.word	0x43414255
   12158:	000d0a4b 	.word	0x000d0a4b
   1215c:	5454514d 	.word	0x5454514d
   12160:	47202d20 	.word	0x47202d20
   12164:	5320746f 	.word	0x5320746f
   12168:	43414255 	.word	0x43414255
   1216c:	000d0a4b 	.word	0x000d0a4b
   12170:	5454514d 	.word	0x5454514d
   12174:	45202d20 	.word	0x45202d20
   12178:	726f7272 	.word	0x726f7272
   1217c:	5553202c 	.word	0x5553202c
   12180:	4b434142 	.word	0x4b434142
   12184:	74697720 	.word	0x74697720
   12188:	203e2068 	.word	0x203e2068
   1218c:	6f742031 	.word	0x6f742031
   12190:	2c636970 	.word	0x2c636970
   12194:	746f6e20 	.word	0x746f6e20
   12198:	70757320 	.word	0x70757320
   1219c:	74726f70 	.word	0x74726f70
   121a0:	0a2e6465 	.word	0x0a2e6465
   121a4:	0000000d 	.word	0x0000000d
   121a8:	5454514d 	.word	0x5454514d
   121ac:	57202d20 	.word	0x57202d20
   121b0:	696e7261 	.word	0x696e7261
   121b4:	202c676e 	.word	0x202c676e
   121b8:	20746f67 	.word	0x20746f67
   121bc:	41425553 	.word	0x41425553
   121c0:	77204b43 	.word	0x77204b43
   121c4:	20687469 	.word	0x20687469
   121c8:	656e6f6e 	.word	0x656e6f6e
   121cc:	74616d20 	.word	0x74616d20
   121d0:	6e696863 	.word	0x6e696863
   121d4:	494d2067 	.word	0x494d2067
   121d8:	43202e44 	.word	0x43202e44
   121dc:	65727275 	.word	0x65727275
   121e0:	796c746e 	.word	0x796c746e
   121e4:	65687420 	.word	0x65687420
   121e8:	69206572 	.word	0x69206572
   121ec:	206f6e73 	.word	0x206f6e73
   121f0:	70707573 	.word	0x70707573
   121f4:	2074726f 	.word	0x2074726f
   121f8:	20726f66 	.word	0x20726f66
   121fc:	65766573 	.word	0x65766573
   12200:	206c6172 	.word	0x206c6172
   12204:	636e6f63 	.word	0x636e6f63
   12208:	65727275 	.word	0x65727275
   1220c:	5320746e 	.word	0x5320746e
   12210:	43534255 	.word	0x43534255
   12214:	45424952 	.word	0x45424952
   12218:	73656d20 	.word	0x73656d20
   1221c:	65676173 	.word	0x65676173
   12220:	0d0a2e73 	.word	0x0d0a2e73
   12224:	00000000 	.word	0x00000000
   12228:	5454514d 	.word	0x5454514d
   1222c:	47202d20 	.word	0x47202d20
   12230:	5520746f 	.word	0x5520746f
   12234:	4255534e 	.word	0x4255534e
   12238:	0a4b4341 	.word	0x0a4b4341
   1223c:	0000000d 	.word	0x0000000d
   12240:	5454514d 	.word	0x5454514d
   12244:	57202d20 	.word	0x57202d20
   12248:	696e7261 	.word	0x696e7261
   1224c:	202c676e 	.word	0x202c676e
   12250:	20746f67 	.word	0x20746f67
   12254:	55534e55 	.word	0x55534e55
   12258:	4b434142 	.word	0x4b434142
   1225c:	74697720 	.word	0x74697720
   12260:	6f6e2068 	.word	0x6f6e2068
   12264:	6d20656e 	.word	0x6d20656e
   12268:	68637461 	.word	0x68637461
   1226c:	20676e69 	.word	0x20676e69
   12270:	2e44494d 	.word	0x2e44494d
   12274:	72754320 	.word	0x72754320
   12278:	746e6572 	.word	0x746e6572
   1227c:	7420796c 	.word	0x7420796c
   12280:	65726568 	.word	0x65726568
   12284:	6e736920 	.word	0x6e736920
   12288:	7573206f 	.word	0x7573206f
   1228c:	726f7070 	.word	0x726f7070
   12290:	6f662074 	.word	0x6f662074
   12294:	65732072 	.word	0x65732072
   12298:	61726576 	.word	0x61726576
   1229c:	6f63206c 	.word	0x6f63206c
   122a0:	7275636e 	.word	0x7275636e
   122a4:	746e6572 	.word	0x746e6572
   122a8:	534e5520 	.word	0x534e5520
   122ac:	43534255 	.word	0x43534255
   122b0:	45424952 	.word	0x45424952
   122b4:	73656d20 	.word	0x73656d20
   122b8:	65676173 	.word	0x65676173
   122bc:	0d0a2e73 	.word	0x0d0a2e73
   122c0:	00000000 	.word	0x00000000
   122c4:	5454514d 	.word	0x5454514d
   122c8:	47202d20 	.word	0x47202d20
   122cc:	5220746f 	.word	0x5220746f
   122d0:	52474e49 	.word	0x52474e49
   122d4:	0a505345 	.word	0x0a505345
   122d8:	0000000d 	.word	0x0000000d
   122dc:	5454514d 	.word	0x5454514d
   122e0:	28202d20 	.word	0x28202d20
   122e4:	7065656b 	.word	0x7065656b
   122e8:	696c615f 	.word	0x696c615f
   122ec:	635f6576 	.word	0x635f6576
   122f0:	626c6c61 	.word	0x626c6c61
   122f4:	296b6361 	.word	0x296b6361
   122f8:	6c614320 	.word	0x6c614320
   122fc:	2164656c 	.word	0x2164656c
   12300:	00000d0a 	.word	0x00000d0a
   12304:	5454514d 	.word	0x5454514d
   12308:	44202d20 	.word	0x44202d20
   1230c:	6f637369 	.word	0x6f637369
   12310:	63656e6e 	.word	0x63656e6e
   12314:	20646574 	.word	0x20646574
   12318:	74207962 	.word	0x74207962
   1231c:	65207063 	.word	0x65207063
   12320:	746e6576 	.word	0x746e6576
   12324:	0a642520 	.word	0x0a642520
   12328:	0000000d 	.word	0x0000000d
   1232c:	5454514d 	.word	0x5454514d
   12330:	47202d20 	.word	0x47202d20
   12334:	5420746f 	.word	0x5420746f
   12338:	445f5043 	.word	0x445f5043
   1233c:	5f415441 	.word	0x5f415441
   12340:	544e4553 	.word	0x544e4553
   12344:	00000d0a 	.word	0x00000d0a
   12348:	5454514d 	.word	0x5454514d
   1234c:	54202d20 	.word	0x54202d20
   12350:	45205043 	.word	0x45205043
   12354:	746e6576 	.word	0x746e6576
   12358:	20642520 	.word	0x20642520
   1235c:	63207369 	.word	0x63207369
   12360:	65727275 	.word	0x65727275
   12364:	796c746e 	.word	0x796c746e
   12368:	746f6e20 	.word	0x746f6e20
   1236c:	6e616d20 	.word	0x6e616d20
   12370:	64656761 	.word	0x64656761
   12374:	20796220 	.word	0x20796220
   12378:	20656874 	.word	0x20656874
   1237c:	20706374 	.word	0x20706374
   12380:	6e657665 	.word	0x6e657665
   12384:	61632074 	.word	0x61632074
   12388:	61626c6c 	.word	0x61626c6c
   1238c:	0d0a6b63 	.word	0x0d0a6b63
   12390:	00000000 	.word	0x00000000
   12394:	5454514d 	.word	0x5454514d
   12398:	28202d20 	.word	0x28202d20
   1239c:	646e6573 	.word	0x646e6573
   123a0:	74756f5f 	.word	0x74756f5f
   123a4:	6675625f 	.word	0x6675625f
   123a8:	29726566 	.word	0x29726566
   123ac:	61705320 	.word	0x61705320
   123b0:	75206563 	.word	0x75206563
   123b4:	20646573 	.word	0x20646573
   123b8:	62206e69 	.word	0x62206e69
   123bc:	65666675 	.word	0x65666675
   123c0:	25203a72 	.word	0x25203a72
   123c4:	000d0a69 	.word	0x000d0a69
   123c8:	5454514d 	.word	0x5454514d
   123cc:	28202d20 	.word	0x28202d20
   123d0:	74697277 	.word	0x74697277
   123d4:	79625f65 	.word	0x79625f65
   123d8:	20296574 	.word	0x20296574
   123dc:	66667562 	.word	0x66667562
   123e0:	7a69735f 	.word	0x7a69735f
   123e4:	25203a65 	.word	0x25203a65
   123e8:	72772069 	.word	0x72772069
   123ec:	3a657469 	.word	0x3a657469
   123f0:	30252720 	.word	0x30252720
   123f4:	0a275832 	.word	0x0a275832
   123f8:	0000000d 	.word	0x0000000d
   123fc:	5454514d 	.word	0x5454514d
   12400:	28202d20 	.word	0x28202d20
   12404:	74697277 	.word	0x74697277
   12408:	79625f65 	.word	0x79625f65
   1240c:	29736574 	.word	0x29736574
   12410:	6e656c20 	.word	0x6e656c20
   12414:	7525203a 	.word	0x7525203a
   12418:	69727720 	.word	0x69727720
   1241c:	705f6574 	.word	0x705f6574
   12420:	203a736f 	.word	0x203a736f
   12424:	0a756c25 	.word	0x0a756c25
   12428:	0000000d 	.word	0x0000000d
   1242c:	5454514d 	.word	0x5454514d
   12430:	52202d20 	.word	0x52202d20
   12434:	73696765 	.word	0x73696765
   12438:	65726574 	.word	0x65726574
   1243c:	75732064 	.word	0x75732064
   12440:	73656363 	.word	0x73656363
   12444:	6c756673 	.word	0x6c756673
   12448:	0d0a796c 	.word	0x0d0a796c
   1244c:	00000000 	.word	0x00000000
   12450:	5454514d 	.word	0x5454514d
   12454:	41202d20 	.word	0x41202d20
   12458:	74726f62 	.word	0x74726f62
   1245c:	00000d0a 	.word	0x00000d0a
   12460:	5454514d 	.word	0x5454514d
   12464:	47202d20 	.word	0x47202d20
   12468:	6d20746f 	.word	0x6d20746f
   1246c:	5f747471 	.word	0x5f747471
   12470:	635f6f64 	.word	0x635f6f64
   12474:	656e6e6f 	.word	0x656e6e6f
   12478:	745f7463 	.word	0x745f7463
   1247c:	655f7063 	.word	0x655f7063
   12480:	746e6576 	.word	0x746e6576
   12484:	000d0a21 	.word	0x000d0a21
   12488:	5454514d 	.word	0x5454514d
   1248c:	47202d20 	.word	0x47202d20
   12490:	6d20746f 	.word	0x6d20746f
   12494:	5f747471 	.word	0x5f747471
   12498:	635f6f64 	.word	0x635f6f64
   1249c:	656e6e6f 	.word	0x656e6e6f
   124a0:	6d5f7463 	.word	0x6d5f7463
   124a4:	5f747471 	.word	0x5f747471
   124a8:	6e657665 	.word	0x6e657665
   124ac:	0d0a2174 	.word	0x0d0a2174
   124b0:	00000000 	.word	0x00000000
   124b4:	5454514d 	.word	0x5454514d
   124b8:	53202d20 	.word	0x53202d20
   124bc:	69646e65 	.word	0x69646e65
   124c0:	4320676e 	.word	0x4320676e
   124c4:	454e4e4f 	.word	0x454e4e4f
   124c8:	6d205443 	.word	0x6d205443
   124cc:	61737365 	.word	0x61737365
   124d0:	2e2e6567 	.word	0x2e2e6567
   124d4:	000d0a2e 	.word	0x000d0a2e
   124d8:	7349514d 	.word	0x7349514d
   124dc:	00007064 	.word	0x00007064
   124e0:	5454514d 	.word	0x5454514d
   124e4:	53202d20 	.word	0x53202d20
   124e8:	69747465 	.word	0x69747465
   124ec:	7720676e 	.word	0x7720676e
   124f0:	206c6c69 	.word	0x206c6c69
   124f4:	69706f74 	.word	0x69706f74
   124f8:	6f742063 	.word	0x6f742063
   124fc:	73252720 	.word	0x73252720
   12500:	75252027 	.word	0x75252027
   12504:	74796220 	.word	0x74796220
   12508:	61207365 	.word	0x61207365
   1250c:	6d20646e 	.word	0x6d20646e
   12510:	61737365 	.word	0x61737365
   12514:	74206567 	.word	0x74206567
   12518:	2527206f 	.word	0x2527206f
   1251c:	25202773 	.word	0x25202773
   12520:	79622075 	.word	0x79622075
   12524:	0a736574 	.word	0x0a736574
   12528:	0000000d 	.word	0x0000000d
   1252c:	656d6954 	.word	0x656d6954
   12530:	2074756f 	.word	0x2074756f
   12534:	74696177 	.word	0x74696177
   12538:	20676e69 	.word	0x20676e69
   1253c:	20726f66 	.word	0x20726f66
   12540:	4e4e4f43 	.word	0x4e4e4f43
   12544:	0a4b4341 	.word	0x0a4b4341
   12548:	0000000d 	.word	0x0000000d
   1254c:	5454514d 	.word	0x5454514d
   12550:	44202d20 	.word	0x44202d20
   12554:	20656e6f 	.word	0x20656e6f
   12558:	646e6573 	.word	0x646e6573
   1255c:	20676e69 	.word	0x20676e69
   12560:	4e4e4f43 	.word	0x4e4e4f43
   12564:	0a544345 	.word	0x0a544345
   12568:	0000000d 	.word	0x0000000d
   1256c:	5454514d 	.word	0x5454514d
   12570:	43202d20 	.word	0x43202d20
   12574:	454e4e4f 	.word	0x454e4e4f
   12578:	6d205443 	.word	0x6d205443
   1257c:	61737365 	.word	0x61737365
   12580:	73206567 	.word	0x73206567
   12584:	3a746e65 	.word	0x3a746e65
   12588:	000d0a20 	.word	0x000d0a20
   1258c:	5454514d 	.word	0x5454514d
   12590:	47202d20 	.word	0x47202d20
   12594:	6d20746f 	.word	0x6d20746f
   12598:	5f747471 	.word	0x5f747471
   1259c:	645f6f64 	.word	0x645f6f64
   125a0:	6f637369 	.word	0x6f637369
   125a4:	63656e6e 	.word	0x63656e6e
   125a8:	716d5f74 	.word	0x716d5f74
   125ac:	655f7474 	.word	0x655f7474
   125b0:	746e6576 	.word	0x746e6576
   125b4:	000d0a21 	.word	0x000d0a21
   125b8:	5454514d 	.word	0x5454514d
   125bc:	47202d20 	.word	0x47202d20
   125c0:	6d20746f 	.word	0x6d20746f
   125c4:	5f747471 	.word	0x5f747471
   125c8:	705f6f64 	.word	0x705f6f64
   125cc:	72676e69 	.word	0x72676e69
   125d0:	655f7165 	.word	0x655f7165
   125d4:	746e6576 	.word	0x746e6576
   125d8:	000d0a21 	.word	0x000d0a21
   125dc:	5454514d 	.word	0x5454514d
   125e0:	53202d20 	.word	0x53202d20
   125e4:	69646e65 	.word	0x69646e65
   125e8:	5020676e 	.word	0x5020676e
   125ec:	52474e49 	.word	0x52474e49
   125f0:	0d0a5145 	.word	0x0d0a5145
   125f4:	00000000 	.word	0x00000000
   125f8:	5454514d 	.word	0x5454514d
   125fc:	47202d20 	.word	0x47202d20
   12600:	6d20746f 	.word	0x6d20746f
   12604:	5f747471 	.word	0x5f747471
   12608:	735f6f64 	.word	0x735f6f64
   1260c:	63736275 	.word	0x63736275
   12610:	65626972 	.word	0x65626972
   12614:	74716d5f 	.word	0x74716d5f
   12618:	76655f74 	.word	0x76655f74
   1261c:	21746e65 	.word	0x21746e65
   12620:	00000d0a 	.word	0x00000d0a
   12624:	5454514d 	.word	0x5454514d
   12628:	53202d20 	.word	0x53202d20
   1262c:	69646e65 	.word	0x69646e65
   12630:	7320676e 	.word	0x7320676e
   12634:	63736275 	.word	0x63736275
   12638:	65626972 	.word	0x65626972
   1263c:	73656d20 	.word	0x73656d20
   12640:	65676173 	.word	0x65676173
   12644:	6f742021 	.word	0x6f742021
   12648:	20636970 	.word	0x20636970
   1264c:	74207325 	.word	0x74207325
   12650:	6369706f 	.word	0x6369706f
   12654:	6e656c5f 	.word	0x6e656c5f
   12658:	20687467 	.word	0x20687467
   1265c:	0d0a6925 	.word	0x0d0a6925
   12660:	00000000 	.word	0x00000000
   12664:	5454514d 	.word	0x5454514d
   12668:	42202d20 	.word	0x42202d20
   1266c:	65666675 	.word	0x65666675
   12670:	70732072 	.word	0x70732072
   12674:	20656361 	.word	0x20656361
   12678:	25207369 	.word	0x25207369
   1267c:	0d0a2069 	.word	0x0d0a2069
   12680:	00000000 	.word	0x00000000
   12684:	656d6954 	.word	0x656d6954
   12688:	2074756f 	.word	0x2074756f
   1268c:	74696177 	.word	0x74696177
   12690:	20676e69 	.word	0x20676e69
   12694:	20726f66 	.word	0x20726f66
   12698:	41425553 	.word	0x41425553
   1269c:	0d0a4b43 	.word	0x0d0a4b43
   126a0:	00000000 	.word	0x00000000
   126a4:	5454514d 	.word	0x5454514d
   126a8:	44202d20 	.word	0x44202d20
   126ac:	20656e6f 	.word	0x20656e6f
   126b0:	73206e69 	.word	0x73206e69
   126b4:	5f646e65 	.word	0x5f646e65
   126b8:	73627573 	.word	0x73627573
   126bc:	62697263 	.word	0x62697263
   126c0:	0d0a2165 	.word	0x0d0a2165
   126c4:	00000000 	.word	0x00000000
   126c8:	5454514d 	.word	0x5454514d
   126cc:	47202d20 	.word	0x47202d20
   126d0:	6d20746f 	.word	0x6d20746f
   126d4:	5f747471 	.word	0x5f747471
   126d8:	755f6f64 	.word	0x755f6f64
   126dc:	6275736e 	.word	0x6275736e
   126e0:	69726373 	.word	0x69726373
   126e4:	6d5f6562 	.word	0x6d5f6562
   126e8:	5f747471 	.word	0x5f747471
   126ec:	6e657665 	.word	0x6e657665
   126f0:	0d0a2174 	.word	0x0d0a2174
   126f4:	00000000 	.word	0x00000000
   126f8:	5454514d 	.word	0x5454514d
   126fc:	53202d20 	.word	0x53202d20
   12700:	69646e65 	.word	0x69646e65
   12704:	7520676e 	.word	0x7520676e
   12708:	6275736e 	.word	0x6275736e
   1270c:	69726373 	.word	0x69726373
   12710:	6d206562 	.word	0x6d206562
   12714:	61737365 	.word	0x61737365
   12718:	6f206567 	.word	0x6f206567
   1271c:	6f74206e 	.word	0x6f74206e
   12720:	20636970 	.word	0x20636970
   12724:	74207325 	.word	0x74207325
   12728:	6369706f 	.word	0x6369706f
   1272c:	6e656c5f 	.word	0x6e656c5f
   12730:	20687467 	.word	0x20687467
   12734:	0d0a6925 	.word	0x0d0a6925
   12738:	00000000 	.word	0x00000000
   1273c:	656d6954 	.word	0x656d6954
   12740:	2074756f 	.word	0x2074756f
   12744:	74696177 	.word	0x74696177
   12748:	20676e69 	.word	0x20676e69
   1274c:	20726f66 	.word	0x20726f66
   12750:	55534e55 	.word	0x55534e55
   12754:	4b434142 	.word	0x4b434142
   12758:	00000d0a 	.word	0x00000d0a
   1275c:	5454514d 	.word	0x5454514d
   12760:	44202d20 	.word	0x44202d20
   12764:	20656e6f 	.word	0x20656e6f
   12768:	74697277 	.word	0x74697277
   1276c:	20676e69 	.word	0x20676e69
   12770:	73627573 	.word	0x73627573
   12774:	62697263 	.word	0x62697263
   12778:	656d2065 	.word	0x656d2065
   1277c:	67617373 	.word	0x67617373
   12780:	6f742065 	.word	0x6f742065
   12784:	74756f20 	.word	0x74756f20
   12788:	66756220 	.word	0x66756220
   1278c:	21726566 	.word	0x21726566
   12790:	00000d0a 	.word	0x00000d0a
   12794:	5454514d 	.word	0x5454514d
   12798:	47202d20 	.word	0x47202d20
   1279c:	6d20746f 	.word	0x6d20746f
   127a0:	5f747471 	.word	0x5f747471
   127a4:	705f6f64 	.word	0x705f6f64
   127a8:	696c6275 	.word	0x696c6275
   127ac:	6d5f6873 	.word	0x6d5f6873
   127b0:	5f747471 	.word	0x5f747471
   127b4:	6e657665 	.word	0x6e657665
   127b8:	0d0a2174 	.word	0x0d0a2174
   127bc:	00000000 	.word	0x00000000
   127c0:	5454514d 	.word	0x5454514d
   127c4:	53202d20 	.word	0x53202d20
   127c8:	69646e65 	.word	0x69646e65
   127cc:	7020676e 	.word	0x7020676e
   127d0:	696c6275 	.word	0x696c6275
   127d4:	6d206873 	.word	0x6d206873
   127d8:	61737365 	.word	0x61737365
   127dc:	20216567 	.word	0x20216567
   127e0:	69706f74 	.word	0x69706f74
   127e4:	73252063 	.word	0x73252063
   127e8:	706f7420 	.word	0x706f7420
   127ec:	6c5f6369 	.word	0x6c5f6369
   127f0:	74676e65 	.word	0x74676e65
   127f4:	69252068 	.word	0x69252068
   127f8:	00000d0a 	.word	0x00000d0a
   127fc:	656d6954 	.word	0x656d6954
   12800:	2074756f 	.word	0x2074756f
   12804:	74696177 	.word	0x74696177
   12808:	20676e69 	.word	0x20676e69
   1280c:	20726f66 	.word	0x20726f66
   12810:	41425550 	.word	0x41425550
   12814:	0d0a4b43 	.word	0x0d0a4b43
   12818:	00000000 	.word	0x00000000
   1281c:	5454514d 	.word	0x5454514d
   12820:	57202d20 	.word	0x57202d20
   12824:	696e7261 	.word	0x696e7261
   12828:	202c676e 	.word	0x202c676e
   1282c:	20746f67 	.word	0x20746f67
   12830:	41425550 	.word	0x41425550
   12834:	77204b43 	.word	0x77204b43
   12838:	20687469 	.word	0x20687469
   1283c:	656e6f6e 	.word	0x656e6f6e
   12840:	74616d20 	.word	0x74616d20
   12844:	6e696863 	.word	0x6e696863
   12848:	494d2067 	.word	0x494d2067
   1284c:	43202e44 	.word	0x43202e44
   12850:	65727275 	.word	0x65727275
   12854:	796c746e 	.word	0x796c746e
   12858:	65687420 	.word	0x65687420
   1285c:	69206572 	.word	0x69206572
   12860:	6f6e2073 	.word	0x6f6e2073
   12864:	70757320 	.word	0x70757320
   12868:	74726f70 	.word	0x74726f70
   1286c:	726f6620 	.word	0x726f6620
   12870:	76657320 	.word	0x76657320
   12874:	6c617265 	.word	0x6c617265
   12878:	6e6f6320 	.word	0x6e6f6320
   1287c:	72727563 	.word	0x72727563
   12880:	20746e65 	.word	0x20746e65
   12884:	4c425550 	.word	0x4c425550
   12888:	20485349 	.word	0x20485349
   1288c:	7373656d 	.word	0x7373656d
   12890:	73656761 	.word	0x73656761
   12894:	000d0a2e 	.word	0x000d0a2e
   12898:	5454514d 	.word	0x5454514d
   1289c:	51202d20 	.word	0x51202d20
   128a0:	6e20536f 	.word	0x6e20536f
   128a4:	6920746f 	.word	0x6920746f
   128a8:	656c706d 	.word	0x656c706d
   128ac:	746e656d 	.word	0x746e656d
   128b0:	79206465 	.word	0x79206465
   128b4:	0a2e7465 	.word	0x0a2e7465
   128b8:	0000000d 	.word	0x0000000d
   128bc:	5454514d 	.word	0x5454514d
   128c0:	50202d20 	.word	0x50202d20
   128c4:	696c6275 	.word	0x696c6275
   128c8:	45206873 	.word	0x45206873
   128cc:	6575716e 	.word	0x6575716e
   128d0:	0a646575 	.word	0x0a646575
   128d4:	0000000d 	.word	0x0000000d
   128d8:	5454514d 	.word	0x5454514d
   128dc:	43202d20 	.word	0x43202d20
   128e0:	206c6c61 	.word	0x206c6c61
   128e4:	6d206f74 	.word	0x6d206f74
   128e8:	5f747471 	.word	0x5f747471
   128ec:	73627573 	.word	0x73627573
   128f0:	62697263 	.word	0x62697263
   128f4:	2e2e2e65 	.word	0x2e2e2e65
   128f8:	00000d0a 	.word	0x00000d0a
   128fc:	5454514d 	.word	0x5454514d
   12900:	4e202d20 	.word	0x4e202d20
   12904:	6120746f 	.word	0x6120746f
   12908:	70656363 	.word	0x70656363
   1290c:	21646574 	.word	0x21646574
   12910:	00000d0a 	.word	0x00000d0a
   12914:	5454514d 	.word	0x5454514d
   12918:	41202d20 	.word	0x41202d20
   1291c:	70656363 	.word	0x70656363
   12920:	21646574 	.word	0x21646574
   12924:	00000d0a 	.word	0x00000d0a
   12928:	5454514d 	.word	0x5454514d
   1292c:	43202d20 	.word	0x43202d20
   12930:	206c6c61 	.word	0x206c6c61
   12934:	6d206f74 	.word	0x6d206f74
   12938:	5f747471 	.word	0x5f747471
   1293c:	75736e75 	.word	0x75736e75
   12940:	72637362 	.word	0x72637362
   12944:	2e656269 	.word	0x2e656269
   12948:	0d0a2e2e 	.word	0x0d0a2e2e
   1294c:	00000000 	.word	0x00000000
   12950:	5454514d 	.word	0x5454514d
   12954:	43202d20 	.word	0x43202d20
   12958:	206c6c61 	.word	0x206c6c61
   1295c:	6d206f74 	.word	0x6d206f74
   12960:	5f747471 	.word	0x5f747471
   12964:	6c627570 	.word	0x6c627570
   12968:	2e687369 	.word	0x2e687369
   1296c:	0d0a2e2e 	.word	0x0d0a2e2e
   12970:	00000000 	.word	0x00000000
   12974:	5454514d 	.word	0x5454514d
   12978:	6f727020 	.word	0x6f727020
   1297c:	73736563 	.word	0x73736563
   12980:	00000000 	.word	0x00000000
   12984:	736e6553 	.word	0x736e6553
   12988:	0073726f 	.word	0x0073726f
   1298c:	000002ff 	.word	0x000002ff

00012990 <unc_llconf>:
   12990:	2022280f                                .(" 

00012994 <unc_ctxconf>:
   12994:	80828800                                ....

00012998 <unc_mxconf>:
   12998:	2123250f                                .%#!

0001299c <llprefix>:
   1299c:	000080fe                                ....

000129a0 <sicslowpan_driver>:
   129a0:	000129d8 000059e5 00006369              .)...Y..ic..

000129ac <ttl_values>:
   129ac:	ff400100 67617266 20642520 0d0a6425     ..@.frag %d %d..
   129bc:	00000000 706f7264 636e6920 6e696d6f     ....drop incomin
   129cc:	72662067 0d0a6761 00000000 73636973     g frag......sics
   129dc:	70776f6c 00006e61 00000154 00009f64     lowpan..T...d...
   129ec:	000098c0 00008f90 00008f9c 00009c50     ............P...
   129fc:	00009f64 00009c50 00009f64 00009c50     d...P...d...P...
   12a0c:	000092ca 000093ae 000093ae 000093ae     ................
   12a1c:	000093ae 000093ae 00009598 000093ae     ................
   12a2c:	000093ae 000093ae 000093ae 000093ae     ................
   12a3c:	000093ae 000093ae 000093ae 000093ae     ................
   12a4c:	000093ae 00009400 000093ae 000093ae     ................
   12a5c:	000093ae 000093ae 000093ae 000093ae     ................
   12a6c:	000093ae 000093ae 000093ae 000093ae     ................
   12a7c:	000093ae 000093ae 000093ae 000093ae     ................
   12a8c:	000093ae 000093ae 000093ae 000093ae     ................
   12a9c:	000093ae 000093ae 000093ae 000093ae     ................
   12aac:	000093ae 000093ae 000093ae 00009368     ............h...
   12abc:	00009f64 000093ae 000093ae 000093ae     d...............
   12acc:	000093ae 000093ae 000093ae 000093ae     ................
   12adc:	000093ae 000093ae 000093ae 000093ae     ................
   12aec:	000093ae 000093ae 000093be 00009f64     ............d...
   12afc:	00009312 00009a66 00009aae 00009c04     ....f...........
   12b0c:	00009da8 00009e0c 00009e4c 00009e64     ........L...d...
   12b1c:	00009d8c 3a706374 77656e20 61746164     ....tcp: newdata
   12b2c:	7962202c 6c736574 20746665 2030203e     , bytesleft > 0 
   12b3c:	29642528 746f6e20 706d6920 656d656c     (%d) not impleme
   12b4c:	6465746e 00000d0a 3a706374 6b636120     nted....tcp: ack
   12b5c:	61206465 72657373 6e6f6974 69616620     ed assertion fai
   12b6c:	2064656c 6f3e2d73 75707475 61645f74     led s->output_da
   12b7c:	6c5f6174 28206e65 20296425 2d73203c     ta_len (%d) < s-
   12b8c:	74756f3e 5f747570 61746164 6e65735f     >output_data_sen
   12b9c:	786e5f64 25282074 0d0a2964 00000000     d_nxt (%d)......
   12bac:	20504354 6b636f73 70207465 65636f72     TCP socket proce
   12bbc:	00007373 2f504354 73205049 6b636174     ss..TCP/IP stack
   12bcc:	00000000 4c554e28 5049204c 64646120     ....(NULL IP add
   12bdc:	00002972 00003a3a 00007825              r)..::..%x..

00012be8 <linkaddr_null>:
	...
   12bf0:	414d5343 00000000                       CSMA....

00012bf8 <csma_driver>:
   12bf8:	00012bf0 0000af51 0000adad 0000ac95     .+..Q...........
   12c08:	0000aca5 0000acb5 0000acc5              ............

00012c14 <framer_802154>:
   12c14:	0000b49d 0000b3dd 6c6c756e 00636472     ........nullrdc.

00012c24 <nullrdc_driver>:
   12c24:	00012c1c 0000b6c5 0000b951 0000b921     .,......Q...!...
   12c34:	0000b6d1 0000b695 0000b6a5 0000b6c1     ................
   12c44:	50520a0d 41203a4c 64656464 72206120     ..RPL: Added a r
   12c54:	6574756f 206f7420 00000000 2064252f     oute to ..../%d 
   12c64:	20616976 00000000 6d697443 70207265     via ....Ctimer p
   12c74:	65636f72 00007373 6e657645 69742074     rocess..Event ti
   12c84:	0072656d                                mer.

00012c88 <rf233_radio_driver>:
   12c88:	0000ef9d 0000f095 0000f0e5 0000f225     ............%...
   12c98:	0000ee35 0000f241 0000f2d5 0000eda9     5...A...........
   12ca8:	0000f2e9 0000f355 0000f3ad 65746641     ....U.......Afte
   12cb8:	61772072 6620656b 206d6f72 65656c73     r wake from slee
   12cc8:	000d0a70 65746641 72612072 72206863     p...After arch r
   12cd8:	20646165 3a676572 61747320 30206574     ead reg: state 0
   12ce8:	34302578 000d0a78 32424552 72203333     x%04x...REB233 r
   12cf8:	6f696461 6e6f6320 75676966 20646572     adio configured 
   12d08:	75206f74 45206573 75255458 00000d0a     to use EXT%u....
   12d18:	33324652 61722033 206f6964 76697264     RF233 radio driv
   12d28:	00007265                                er..

00012d2c <button_sensor>:
   12d2c:	00012d3c 0000f3dd 0000f3f9 0000f3ed     <-..............
   12d3c:	74747542 73206e6f 6f736e65 00000072     Button sensor...
   12d4c:	00020028 200001b4 00000000 656d6954     (...... ....Time
   12d5c:	2074756f 000d0a31 656d6954 2074756f     out 1...Timeout 
   12d6c:	000d0a32                                2...

00012d70 <tc_interrupt_vectors.13544>:
   12d70:	00141312                                ....

00012d74 <tc_interrupt_vectors.13564>:
   12d74:	00141312 6d697472 203a7265 65686373     ....rtimer: sche
   12d84:	656c7564 6f6f7420 6f6f7320 65202c6e     dule too soon, e
   12d94:	75636578 676e6974 776f6e20 6c252021     xecuting now! %l
   12da4:	6c252075 000d0a75 0a0a0a0d 7453200a     u %lu........ St
   12db4:	69747261 7420676e 53206568 7472616d     arting the Smart
   12dc4:	6e6e6f43 2d746365 576f4c36 204e4150     Connect-6LoWPAN 
   12dd4:	50200a0d 6674616c 206d726f 7441203a     .. Platform : At
   12de4:	206c656d 20546f49 69766564 0d206563     mel IoT device .
   12df4:	00000d0a 7473614c 73657220 63207465     ....Last reset c
   12e04:	65737561 0000203a 74737953 52206d65     ause: ..System R
   12e14:	74657365 71655220 74736575 00000d0a     eset Request....
   12e24:	63746157 676f6468 73655220 0d0a7465     Watchdog Reset..
   12e34:	00000000 65747845 6c616e72 73655220     ....External Res
   12e44:	0d0a7465 00000000 776f7242 754f206e     et......Brown Ou
   12e54:	33332074 74654420 6f746365 65522072     t 33 Detector Re
   12e64:	0a746573 0000000d 776f7242 754f206e     set.....Brown Ou
   12e74:	32312074 74654420 6f746365 65522072     t 12 Detector Re
   12e84:	0a746573 0000000d 65776f50 6e4f2d72     set.....Power-On
   12e94:	73655220 0d0a7465 00000000 003a7525      Reset......%u:.
   12ea4:	63206672 6e6e6168 203a6c65 0d0a6425     rf channel: %d..
   12eb4:	00000000 65646f4e 20646920 0a2e7525     ....Node id %u..
   12ec4:	0000000d 65646f4e 20646920 20746f6e     ....Node id not 
   12ed4:	2e746573 00000d0a 25207325 2520756c     set.....%s %lu %
   12ee4:	000d0a64 36765049 00000020 78323025     d...IPv6 ...%02x
   12ef4:	78323025 0000003a 78323025 78323025     %02x:...%02x%02x
   12f04:	00000d0a 746e6554 76697461 6c672065     ....Tentative gl
   12f14:	6c61626f 76504920 64612036 73657264     obal IPv6 addres
   12f24:	00002073 78323025 78323025 000d0a0d     s ..%02x%02x....
   12f34:	72617453 676e6974 00000000 00732520     Starting.... %s.
   12f44:	57200a0d 696e7261 203a676e 20534541     .. Warning: AES 
   12f54:	72636e65 69747079 69206e6f 69642073     encryption is di
   12f64:	6c626173 0d0a6465 00000000 6b6e694c     sabled......Link
   12f74:	79616c20 61207265 20726464 00000000      layer addr ....
   12f84:	202c7525 00000000 6e726177 5f676e69     %u, ....warning_
   12f94:	6c6c6163 6b636162 00000d0a 0000fd42     callback....B...
   12fa4:	0000fd5a 0000fe10 0000fe18 0000fd70     Z...........p...
   12fb4:	0000fe20                                 ...

00012fb8 <autostart_processes>:
   12fb8:	200001c0 00000000 20505041 7041202d     ... ....APP - Ap
   12fc8:	63696c70 6f697461 6168206e 20612073     plication has a 
   12fd8:	5454514d 6e6f6320 7463656e 0a6e6f69     MQTT connection.
   12fe8:	0000000d 20505041 514d202d 44205454     ....APP - MQTT D
   12ff8:	6f637369 63656e6e 52202e74 6f736165     isconnect. Reaso
   13008:	7525206e 00000d0a 20505041 7041202d     n %u....APP - Ap
   13018:	63696c70 6f697461 6572206e 76696563     plication receiv
   13028:	61206465 62757020 6873696c 206e6f20     ed a publish on 
   13038:	69706f74 25272063 202e2773 6c796150     topic '%s'. Payl
   13048:	2064616f 657a6973 20736920 62206925     oad size is %i b
   13058:	73657479 6f43202e 6e65746e 0a0a3a74     ytes. Content:..
   13068:	0000000d 20627550 646e6148 3a72656c     ....Pub Handler:
   13078:	706f7420 273d6369 20277325 6e656c28      topic='%s' (len
   13088:	2975253d 6863202c 5f6b6e75 3d6e656c     =%u), chunk_len=
   13098:	0d0a7525 00000000 6f636e49 63657272     %u......Incorrec
   130a8:	6f742074 20636970 6320726f 6b6e7568     t topic or chunk
   130b8:	6e656c20 6749202e 65726f6e 000d0a64      len. Ignored...
   130c8:	6e6f736a 00000000 6f636e49 63657272     json....Incorrec
   130d8:	6f662074 74616d72 00000d0a 7364656c     t format....leds
   130e8:	00000000 20505041 7041202d 63696c70     ....APP - Applic
   130f8:	6f697461 7369206e 62757320 69726373     ation is subscri
   13108:	20646562 74206f74 6369706f 63757320     bed to topic suc
   13118:	73736563 6c6c7566 000d0a79 20505041     cessfully...APP 
   13128:	7041202d 63696c70 6f697461 7369206e     - Application is
   13138:	736e7520 63736275 65626972 6f742064      unsubscribed to
   13148:	706f7420 73206369 65636375 75667373      topic successfu
   13158:	0a796c6c 0000000d 20505041 7550202d     lly.....APP - Pu
   13168:	73696c62 676e6968 6d6f6320 74656c70     blishing complet
   13178:	0d0a2e65 00000000 20505041 7041202d     e.......APP - Ap
   13188:	63696c70 6f697461 6f67206e 20612074     plication got a 
   13198:	61686e75 656c646e 514d2064 65205454     unhandled MQTT e
   131a8:	746e6576 6925203a 00000d0a 5454514d     vent: %i....MQTT
   131b8:	6d654420 7250206f 7365636f 000d0a73      Demo Process...
   131c8:	45475741 4f422d53 32445241 00000000     AWGES-BOARD2....
   131d8:	35326363 00003833 48545541 0000005a     cc2538..AUTHZ...
   131e8:	74617473 00007375 61616161 00313a3a     status..aaaa::1.
   131f8:	73253a64 3a73253a 78323025 78323025     d:%s:%s:%02x%02x
   13208:	78323025 78323025 78323025 78323025     %02x%02x%02x%02x
   13218:	00000000 65696c43 4920746e 25203a44     ....Client ID: %
   13228:	42202c64 65666675 64252072 00000d0a     d, Buffer %d....
   13238:	20627553 69706f54 25203a63 42202c64     Sub Topic: %d, B
   13248:	65666675 64252072 00000d0a 20627550     uffer %d....Pub 
   13258:	69706f54 25203a63 42202c64 65666675     Topic: %d, Buffe
   13268:	64252072 00000d0a 63697571 6174736b     r %d....quicksta
   13278:	00007472 72657355 6d616e20 65732065     rt..User name se
   13288:	62202c74 65207475 7974706d 74756120     t, but empty aut
   13298:	6f742068 0a6e656b 0000000d 2d657375     h token.....use-
   132a8:	656b6f74 75612d6e 00006874 74696e49     token-auth..Init
   132b8:	00000d0a 69676552 72657473 202e6465     ....Registered. 
   132c8:	6e6e6f43 20746365 65747461 2074706d     Connect attempt 
   132d8:	0d0a7525 00000000 6e6e6f43 69746365     %u......Connecti
   132e8:	2820676e 0a297525 0000000d 6e697355     ng (%u).....Usin
   132f8:	71272067 6b636975 72617473 203a2774     g 'quickstart': 
   13308:	70696b53 676e6970 62757320 69726373     Skipping subscri
   13318:	0d0a6562 00000000 20505041 7553202d     be......APP - Su
   13328:	72637362 6e696269 0d0a2167 00000000     bscribing!......
   13338:	20505041 7254202d 20646569 73206f74     APP - Tried to s
   13348:	63736275 65626972 74756220 6d6f6320     ubscribe but com
   13358:	646e616d 65757120 77206575 66207361     mand queue was f
   13368:	216c6c75 00000d0a 0a0a0a0a 0a0a0a0a     ull!............
   13378:	0a0a0a0a 0a0a0a0a 0a0a0a0a 0a0a0a0a     ................
   13388:	75530d0a 72637362 64656269 3a6e6f20     ..Subscribed on:
   13398:	0a207325 0000000d 69727559 72616f42     %s .....YuriBoar
   133a8:	47574164 00005345 20505041 7550202d     dAWGES..APP - Pu
   133b8:	73696c62 0d0a2168 00000000 6c627550     blish!......Publ
   133c8:	69687369 0d0a676e 00000000 6c627550     ishing......Publ
   133d8:	69687369 2e2e676e 4d28202e 20545451     ishing... (MQTT 
   133e8:	74617473 64253d65 3d71202c 0a297525     state=%d, q=%u).
   133f8:	0000000d 63736944 656e6e6f 64657463     ....Disconnected
   13408:	00000d0a 63736944 656e6e6f 64657463     ....Disconnected
   13418:	7441202e 706d6574 75252074 206e6920     . Attempt %u in 
   13428:	20756c25 6b636974 000d0a73 20646142     %lu ticks...Bad 
   13438:	666e6f63 72756769 6f697461 0d0a2e6e     configuration...
   13448:	00000000 61666544 20746c75 65736163     ....Default case
   13458:	7453203a 3d657461 30257830 0d0a7832     : State=0x%02x..
   13468:	00000000 2d746f69 6d632f32 73252f64     ....iot-2/cmd/%s
   13478:	746d662f 6f736a2f 0000006e 2d746f69     /fmt/json...iot-
   13488:	76652f32 73252f74 746d662f 6f736a2f     2/evt/%s/fmt/jso
   13498:	0000006e 5454514d 6d654420 0000006f     n...MQTT Demo...

000134a8 <_ctype_>:
   134a8:	20202000 20202020 28282020 20282828     .         ((((( 
   134b8:	20202020 20202020 20202020 20202020                     
   134c8:	10108820 10101010 10101010 10101010      ...............
   134d8:	04040410 04040404 10040404 10101010     ................
   134e8:	41411010 41414141 01010101 01010101     ..AAAAAA........
   134f8:	01010101 01010101 01010101 10101010     ................
   13508:	42421010 42424242 02020202 02020202     ..BBBBBB........
   13518:	02020202 02020202 02020202 10101010     ................
   13528:	00000020 00000000 00000000 00000000      ...............
	...
   135a8:	00004300                                .C..

000135ac <_global_impure_ptr>:
   135ac:	200001d4                                ... 

000135b0 <__sf_fake_stdin>:
	...

000135d0 <__sf_fake_stdout>:
	...

000135f0 <__sf_fake_stderr>:
	...
   13610:	2b302d23 6c680020 6665004c 47464567     #-0+ .hlL.efgEFG
   13620:	32313000 36353433 41393837 45444342     .0123456789ABCDE
   13630:	31300046 35343332 39383736 64636261     F.0123456789abcd
   13640:	00006665                                ef..

00013644 <_init>:
   13644:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   13646:	46c0      	nop			; (mov r8, r8)
   13648:	bcf8      	pop	{r3, r4, r5, r6, r7}
   1364a:	bc08      	pop	{r3}
   1364c:	469e      	mov	lr, r3
   1364e:	4770      	bx	lr

00013650 <__init_array_start>:
   13650:	000000d9 	.word	0x000000d9

00013654 <_fini>:
   13654:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   13656:	46c0      	nop			; (mov r8, r8)
   13658:	bcf8      	pop	{r3, r4, r5, r6, r7}
   1365a:	bc08      	pop	{r3}
   1365c:	469e      	mov	lr, r3
   1365e:	4770      	bx	lr

00013660 <__fini_array_start>:
   13660:	000000b1 	.word	0x000000b1
